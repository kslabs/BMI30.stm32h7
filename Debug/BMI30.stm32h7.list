
BMI30.stm32h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bd5c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f8c  0801c02c  0801c02c  0001d02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801efb8  0801efb8  0001ffb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801efc0  0801efc0  0001ffc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801efc4  0801efc4  0001ffc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002a4  24000000  0801efc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001ac94  240002c0  0801f26c  000202c0  2**5
                  ALLOC
  8 .noinit       000000a8  2401af54  0801f26c  00020f54  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2401affc  0801f26c  00020ffc  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 11 .comment      00000039  00000000  00000000  000202d2  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034fe7  00000000  00000000  0002030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ae8  00000000  00000000  000552f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002650  00000000  00000000  0005bde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001de8  00000000  00000000  0005e430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003da5f  00000000  00000000  00060218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000373f4  00000000  00000000  0009dc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017516d  00000000  00000000  000d506b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000a1ec  00000000  00000000  0024a1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000019d  00000000  00000000  002543c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000b15  00000000  00000000  00254561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b80c 	b.w	80003b0 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f01b fcbc 	bl	801bd1c <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_idiv0>:
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop

080003b4 <__do_global_dtors_aux>:
 80003b4:	b510      	push	{r4, lr}
 80003b6:	4c05      	ldr	r4, [pc, #20]	@ (80003cc <__do_global_dtors_aux+0x18>)
 80003b8:	7823      	ldrb	r3, [r4, #0]
 80003ba:	b933      	cbnz	r3, 80003ca <__do_global_dtors_aux+0x16>
 80003bc:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <__do_global_dtors_aux+0x1c>)
 80003be:	b113      	cbz	r3, 80003c6 <__do_global_dtors_aux+0x12>
 80003c0:	4804      	ldr	r0, [pc, #16]	@ (80003d4 <__do_global_dtors_aux+0x20>)
 80003c2:	f3af 8000 	nop.w
 80003c6:	2301      	movs	r3, #1
 80003c8:	7023      	strb	r3, [r4, #0]
 80003ca:	bd10      	pop	{r4, pc}
 80003cc:	240002c0 	.word	0x240002c0
 80003d0:	00000000 	.word	0x00000000
 80003d4:	0801c014 	.word	0x0801c014

080003d8 <frame_dummy>:
 80003d8:	b508      	push	{r3, lr}
 80003da:	4b03      	ldr	r3, [pc, #12]	@ (80003e8 <frame_dummy+0x10>)
 80003dc:	b11b      	cbz	r3, 80003e6 <frame_dummy+0xe>
 80003de:	4903      	ldr	r1, [pc, #12]	@ (80003ec <frame_dummy+0x14>)
 80003e0:	4803      	ldr	r0, [pc, #12]	@ (80003f0 <frame_dummy+0x18>)
 80003e2:	f3af 8000 	nop.w
 80003e6:	bd08      	pop	{r3, pc}
 80003e8:	00000000 	.word	0x00000000
 80003ec:	240002c4 	.word	0x240002c4
 80003f0:	0801c014 	.word	0x0801c014

080003f4 <adc_stream_stop>:
        ADC_LOGF("%u ", buf[i]);
    }
    ADC_LOGF("\r\n");
}
// Остановка стрима ADC: корректно останавливает DMA и ADC, сбрасывает буферы
void adc_stream_stop(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
    if (s_adc1) {
 80003f8:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <adc_stream_stop+0x5c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d009      	beq.n	8000414 <adc_stream_stop+0x20>
        HAL_ADC_Stop_DMA(s_adc1);
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <adc_stream_stop+0x5c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4618      	mov	r0, r3
 8000406:	f005 f845 	bl	8005494 <HAL_ADC_Stop_DMA>
        HAL_ADC_Stop(s_adc1);
 800040a:	4b11      	ldr	r3, [pc, #68]	@ (8000450 <adc_stream_stop+0x5c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4618      	mov	r0, r3
 8000410:	f004 ff30 	bl	8005274 <HAL_ADC_Stop>
    }
    if (s_adc2) {
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <adc_stream_stop+0x60>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d009      	beq.n	8000430 <adc_stream_stop+0x3c>
        HAL_ADC_Stop_DMA(s_adc2);
 800041c:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <adc_stream_stop+0x60>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f005 f837 	bl	8005494 <HAL_ADC_Stop_DMA>
        HAL_ADC_Stop(s_adc2);
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <adc_stream_stop+0x60>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f004 ff22 	bl	8005274 <HAL_ADC_Stop>
    }
    frame_wr_seq = frame_rd_seq = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	4a09      	ldr	r2, [pc, #36]	@ (8000458 <adc_stream_stop+0x64>)
 8000434:	6013      	str	r3, [r2, #0]
 8000436:	4a09      	ldr	r2, [pc, #36]	@ (800045c <adc_stream_stop+0x68>)
 8000438:	6013      	str	r3, [r2, #0]
    frame_overflow_drops = 0;
 800043a:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <adc_stream_stop+0x6c>)
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
    frame_backlog_max = 0;
 8000440:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <adc_stream_stop+0x70>)
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
    s_next_ring_index = 0;
 8000446:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <adc_stream_stop+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
    ADC_LOGF("[ADC][STOP] DMA и ADC остановлены, буферы сброшены\r\n");
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2400ad2c 	.word	0x2400ad2c
 8000454:	2400ad30 	.word	0x2400ad30
 8000458:	2400ad04 	.word	0x2400ad04
 800045c:	2400ad00 	.word	0x2400ad00
 8000460:	2400ad08 	.word	0x2400ad08
 8000464:	2400ad0c 	.word	0x2400ad0c
 8000468:	2400ad28 	.word	0x2400ad28

0800046c <adc_stream_get_profile>:

ADC_HandleTypeDef* s_adc1 = NULL;
ADC_HandleTypeDef* s_adc2 = NULL;

// Публичные функции профиля
uint8_t adc_stream_get_profile(void) { return g_active_profile; }
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
 8000470:	4b03      	ldr	r3, [pc, #12]	@ (8000480 <adc_stream_get_profile+0x14>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4618      	mov	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	24000000 	.word	0x24000000

08000484 <adc_stream_get_active_samples>:
uint16_t adc_stream_get_active_samples(void) { return g_active_samples; }
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
 8000488:	4b03      	ldr	r3, [pc, #12]	@ (8000498 <adc_stream_get_active_samples+0x14>)
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	24000002 	.word	0x24000002

0800049c <adc_stream_get_buf_rate>:
uint16_t adc_stream_get_buf_rate(void) { return g_profiles[g_active_profile].buf_rate_hz; }
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
 80004a0:	4b05      	ldr	r3, [pc, #20]	@ (80004b8 <adc_stream_get_buf_rate+0x1c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4a05      	ldr	r2, [pc, #20]	@ (80004bc <adc_stream_get_buf_rate+0x20>)
 80004a6:	00db      	lsls	r3, r3, #3
 80004a8:	4413      	add	r3, r2
 80004aa:	885b      	ldrh	r3, [r3, #2]
 80004ac:	4618      	mov	r0, r3
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	24000000 	.word	0x24000000
 80004bc:	0801dd64 	.word	0x0801dd64

080004c0 <adc_stream_apply_profile>:
uint32_t adc_stream_get_fs(void) { return g_profiles[g_active_profile].fs_hz; }

static HAL_StatusTypeDef adc_stream_apply_profile(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
    if (!s_adc1 || !s_adc2) {
 80004c6:	4b3c      	ldr	r3, [pc, #240]	@ (80005b8 <adc_stream_apply_profile+0xf8>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d003      	beq.n	80004d6 <adc_stream_apply_profile+0x16>
 80004ce:	4b3b      	ldr	r3, [pc, #236]	@ (80005bc <adc_stream_apply_profile+0xfc>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d101      	bne.n	80004da <adc_stream_apply_profile+0x1a>
        ADC_LOGF("[ADC][APPLY_PROFILE] ERROR: s_adc1/s_adc2 не инициализированы!\r\n");
        return HAL_ERROR;
 80004d6:	2301      	movs	r3, #1
 80004d8:	e06a      	b.n	80005b0 <adc_stream_apply_profile+0xf0>
    }
    uint32_t total_samples = (uint32_t)g_active_samples;
 80004da:	4b39      	ldr	r3, [pc, #228]	@ (80005c0 <adc_stream_apply_profile+0x100>)
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	617b      	str	r3, [r7, #20]
    ADC_LOGF("[ADC][APPLY_PROFILE] profile=%u samples=%u\r\n", (unsigned)g_active_profile, (unsigned)g_active_samples);
    // Остановить DMA перед запуском с новым размером
    HAL_ADC_Stop_DMA(s_adc1);
 80004e0:	4b35      	ldr	r3, [pc, #212]	@ (80005b8 <adc_stream_apply_profile+0xf8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f004 ffd5 	bl	8005494 <HAL_ADC_Stop_DMA>
    HAL_ADC_Stop_DMA(s_adc2);
 80004ea:	4b34      	ldr	r3, [pc, #208]	@ (80005bc <adc_stream_apply_profile+0xfc>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f004 ffd0 	bl	8005494 <HAL_ADC_Stop_DMA>
    ADC_LOGF("[ADC][APPLY_PROFILE] DMA остановлен, подготовка к запуску\r\n");
    frame_wr_seq = frame_rd_seq = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	4a33      	ldr	r2, [pc, #204]	@ (80005c4 <adc_stream_apply_profile+0x104>)
 80004f8:	6013      	str	r3, [r2, #0]
 80004fa:	4a33      	ldr	r2, [pc, #204]	@ (80005c8 <adc_stream_apply_profile+0x108>)
 80004fc:	6013      	str	r3, [r2, #0]
    frame_overflow_drops = 0;
 80004fe:	4b33      	ldr	r3, [pc, #204]	@ (80005cc <adc_stream_apply_profile+0x10c>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
    frame_backlog_max = 0;
 8000504:	4b32      	ldr	r3, [pc, #200]	@ (80005d0 <adc_stream_apply_profile+0x110>)
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
    s_next_ring_index = 2 % FIFO_FRAMES; // M0->buf0, M1->buf1 уже заняты при старте; начнём с 2
 800050a:	4b32      	ldr	r3, [pc, #200]	@ (80005d4 <adc_stream_apply_profile+0x114>)
 800050c:	2202      	movs	r2, #2
 800050e:	601a      	str	r2, [r3, #0]
    #if DIAG_DISABLE_ADC_DMA
        ADC_LOGF("[ADC][DIAG] DMA start suppressed (DIAG_DISABLE_ADC_DMA=1) total_samples=%lu\r\n", (unsigned long)total_samples);
        return HAL_OK;
    #else
        // Старт ADC1 DMA на буфер[0] длиной N
    HAL_StatusTypeDef rc1 = HAL_ADC_Start_DMA(s_adc1, (uint32_t*)adc1_buffers[0], total_samples);
 8000510:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <adc_stream_apply_profile+0xf8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	4930      	ldr	r1, [pc, #192]	@ (80005d8 <adc_stream_apply_profile+0x118>)
 8000518:	4618      	mov	r0, r3
 800051a:	f004 fedf 	bl	80052dc <HAL_ADC_Start_DMA>
 800051e:	4603      	mov	r3, r0
 8000520:	74fb      	strb	r3, [r7, #19]
    ADC_LOGF("[ADC][APPLY_PROFILE] HAL_ADC_Start_DMA ADC1 rc=%d\r\n", (int)rc1);
    if (rc1 != HAL_OK) return HAL_ERROR;
 8000522:	7cfb      	ldrb	r3, [r7, #19]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <adc_stream_apply_profile+0x6c>
 8000528:	2301      	movs	r3, #1
 800052a:	e041      	b.n	80005b0 <adc_stream_apply_profile+0xf0>
        #if !DIAG_SINGLE_ADC1
    HAL_StatusTypeDef rc2 = HAL_ADC_Start_DMA(s_adc2, (uint32_t*)adc2_buffers[0], total_samples);
 800052c:	4b23      	ldr	r3, [pc, #140]	@ (80005bc <adc_stream_apply_profile+0xfc>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	492a      	ldr	r1, [pc, #168]	@ (80005dc <adc_stream_apply_profile+0x11c>)
 8000534:	4618      	mov	r0, r3
 8000536:	f004 fed1 	bl	80052dc <HAL_ADC_Start_DMA>
 800053a:	4603      	mov	r3, r0
 800053c:	74bb      	strb	r3, [r7, #18]
    ADC_LOGF("[ADC][APPLY_PROFILE] HAL_ADC_Start_DMA ADC2 rc=%d\r\n", (int)rc2);
    if (rc2 != HAL_OK) return HAL_ERROR;
 800053e:	7cbb      	ldrb	r3, [r7, #18]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <adc_stream_apply_profile+0x88>
 8000544:	2301      	movs	r3, #1
 8000546:	e033      	b.n	80005b0 <adc_stream_apply_profile+0xf0>
        #if ADC2_DISABLE_DMA_IRQS
            /* Отключаем HT/TC прерывания у DMA ADC2 для снижения нагрузки на CPU */
            do {
                DMA_Stream_TypeDef *st2 = (DMA_Stream_TypeDef*)hdma_adc2.Instance;
 8000548:	4b25      	ldr	r3, [pc, #148]	@ (80005e0 <adc_stream_apply_profile+0x120>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	60fb      	str	r3, [r7, #12]
                /* CR: DMEIE(1) | TEIE(2) | HTIE(3) | TCIE(4) */
                st2->CR &= ~((uint32_t)(1u<<1) | (uint32_t)(1u<<2) | (uint32_t)(1u<<3) | (uint32_t)(1u<<4));
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f023 021e 	bic.w	r2, r3, #30
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	601a      	str	r2, [r3, #0]
                /* FCR: FEIE(7) */
                st2->FCR &= ~((uint32_t)(1u<<7));
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	615a      	str	r2, [r3, #20]
                /* NVIC: Полностью выключаем IRQ DMA1_Stream1 */
                HAL_NVIC_DisableIRQ(DMA1_Stream1_IRQn);
 8000566:	200c      	movs	r0, #12
 8000568:	f006 fa2b 	bl	80069c2 <HAL_NVIC_DisableIRQ>
            } while (0);
        #endif
        #endif
        /* Включаем Double-Buffer Mode (DBM) и задаём второй банк M1 на buf[1] */
        {
            DMA_Stream_TypeDef *st = (DMA_Stream_TypeDef*)hdma_adc1.Instance;
 800056c:	4b1d      	ldr	r3, [pc, #116]	@ (80005e4 <adc_stream_apply_profile+0x124>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	60bb      	str	r3, [r7, #8]
            st->M1AR = (uint32_t)adc1_buffers[1];
 8000572:	4a1d      	ldr	r2, [pc, #116]	@ (80005e8 <adc_stream_apply_profile+0x128>)
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	611a      	str	r2, [r3, #16]
            st->CR  |= (uint32_t)(1u<<18); /* DBM */
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	601a      	str	r2, [r3, #0]
            /* Отключаем HTIE (half) — оставляем только TC */
            st->CR &= ~((uint32_t)(1u<<3));
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f023 0208 	bic.w	r2, r3, #8
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	601a      	str	r2, [r3, #0]
        }
        #if !DIAG_SINGLE_ADC1
        {
            DMA_Stream_TypeDef *st = (DMA_Stream_TypeDef*)hdma_adc2.Instance;
 8000590:	4b13      	ldr	r3, [pc, #76]	@ (80005e0 <adc_stream_apply_profile+0x120>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	607b      	str	r3, [r7, #4]
            st->M1AR = (uint32_t)adc2_buffers[1];
 8000596:	4a15      	ldr	r2, [pc, #84]	@ (80005ec <adc_stream_apply_profile+0x12c>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	611a      	str	r2, [r3, #16]
            st->CR  |= (uint32_t)(1u<<18); /* DBM */
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	601a      	str	r2, [r3, #0]
            /* Для ADC2 все IRQ уже выключены выше */
        }
        #endif
        /* Одноразовый вывод регистров DMA для ADC1 */
        {
            DMA_Stream_TypeDef *st = (DMA_Stream_TypeDef*)hdma_adc1.Instance;
 80005a8:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <adc_stream_apply_profile+0x124>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	603b      	str	r3, [r7, #0]
                   (unsigned long)st->M0AR,
                   (unsigned long)st->FCR,
                   (unsigned)DIAG_SINGLE_ADC1);
        }
    #endif
    return HAL_OK;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2400ad2c 	.word	0x2400ad2c
 80005bc:	2400ad30 	.word	0x2400ad30
 80005c0:	24000002 	.word	0x24000002
 80005c4:	2400ad04 	.word	0x2400ad04
 80005c8:	2400ad00 	.word	0x2400ad00
 80005cc:	2400ad08 	.word	0x2400ad08
 80005d0:	2400ad0c 	.word	0x2400ad0c
 80005d4:	2400ad28 	.word	0x2400ad28
 80005d8:	24000300 	.word	0x24000300
 80005dc:	24005800 	.word	0x24005800
 80005e0:	2400b1c0 	.word	0x2400b1c0
 80005e4:	2400b148 	.word	0x2400b148
 80005e8:	24000da0 	.word	0x24000da0
 80005ec:	240062a0 	.word	0x240062a0

080005f0 <adc_stream_set_profile>:

int adc_stream_set_profile(uint8_t prof_id) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
    if (prof_id >= ADC_PROFILE_COUNT) return -1;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d902      	bls.n	8000606 <adc_stream_set_profile+0x16>
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	e020      	b.n	8000648 <adc_stream_set_profile+0x58>
    if (prof_id == g_active_profile) return 0; // уже
 8000606:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <adc_stream_set_profile+0x60>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	79fa      	ldrb	r2, [r7, #7]
 800060c:	429a      	cmp	r2, r3
 800060e:	d101      	bne.n	8000614 <adc_stream_set_profile+0x24>
 8000610:	2300      	movs	r3, #0
 8000612:	e019      	b.n	8000648 <adc_stream_set_profile+0x58>
    g_active_profile = prof_id;
 8000614:	4a0e      	ldr	r2, [pc, #56]	@ (8000650 <adc_stream_set_profile+0x60>)
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	7013      	strb	r3, [r2, #0]
    g_active_samples = g_profiles[prof_id].samples_per_buf;
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <adc_stream_set_profile+0x64>)
 800061e:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8000622:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <adc_stream_set_profile+0x68>)
 8000624:	801a      	strh	r2, [r3, #0]
    if (s_adc1 && s_adc2) {
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <adc_stream_set_profile+0x6c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00b      	beq.n	8000646 <adc_stream_set_profile+0x56>
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <adc_stream_set_profile+0x70>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <adc_stream_set_profile+0x56>
        if (adc_stream_apply_profile() != HAL_OK) return -2;
 8000636:	f7ff ff43 	bl	80004c0 <adc_stream_apply_profile>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <adc_stream_set_profile+0x56>
 8000640:	f06f 0301 	mvn.w	r3, #1
 8000644:	e000      	b.n	8000648 <adc_stream_set_profile+0x58>
    }
    return 0;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000000 	.word	0x24000000
 8000654:	0801dd64 	.word	0x0801dd64
 8000658:	24000002 	.word	0x24000002
 800065c:	2400ad2c 	.word	0x2400ad2c
 8000660:	2400ad30 	.word	0x2400ad30

08000664 <adc_stream_init>:

void adc_stream_init(void) {
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
    frame_wr_seq = frame_rd_seq = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	4a07      	ldr	r2, [pc, #28]	@ (8000688 <adc_stream_init+0x24>)
 800066c:	6013      	str	r3, [r2, #0]
 800066e:	4a07      	ldr	r2, [pc, #28]	@ (800068c <adc_stream_init+0x28>)
 8000670:	6013      	str	r3, [r2, #0]
    frame_overflow_drops = 0;
 8000672:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <adc_stream_init+0x2c>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
    frame_backlog_max = 0;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <adc_stream_init+0x30>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	2400ad04 	.word	0x2400ad04
 800068c:	2400ad00 	.word	0x2400ad00
 8000690:	2400ad08 	.word	0x2400ad08
 8000694:	2400ad0c 	.word	0x2400ad0c

08000698 <adc_stream_start>:

HAL_StatusTypeDef adc_stream_start(ADC_HandleTypeDef* a1, ADC_HandleTypeDef* a2) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
    s_adc1 = a1; s_adc2 = a2;
 80006a2:	4a0e      	ldr	r2, [pc, #56]	@ (80006dc <adc_stream_start+0x44>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4a0d      	ldr	r2, [pc, #52]	@ (80006e0 <adc_stream_start+0x48>)
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	6013      	str	r3, [r2, #0]
    g_active_profile = ADC_PROFILE_B_DEFAULT;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <adc_stream_start+0x4c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
    g_active_samples = g_profiles[g_active_profile].samples_per_buf;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <adc_stream_start+0x4c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <adc_stream_start+0x50>)
 80006bc:	f833 2032 	ldrh.w	r2, [r3, r2, lsl #3]
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <adc_stream_start+0x54>)
 80006c2:	801a      	strh	r2, [r3, #0]
    adc_stream_init();
 80006c4:	f7ff ffce 	bl	8000664 <adc_stream_init>
    ADC_LOGF("[ADC][START] profile=%u samples=%u\r\n", (unsigned)g_active_profile, (unsigned)g_active_samples);
    HAL_StatusTypeDef rc = adc_stream_apply_profile();
 80006c8:	f7ff fefa 	bl	80004c0 <adc_stream_apply_profile>
 80006cc:	4603      	mov	r3, r0
 80006ce:	73fb      	strb	r3, [r7, #15]
    ADC_LOGF("[ADC][START] adc_stream_apply_profile rc=%d\r\n", (int)rc);
    return rc;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2400ad2c 	.word	0x2400ad2c
 80006e0:	2400ad30 	.word	0x2400ad30
 80006e4:	24000000 	.word	0x24000000
 80006e8:	0801dd64 	.word	0x0801dd64
 80006ec:	24000002 	.word	0x24000002

080006f0 <adc_get_frame>:
    if (a1) s_adc1 = a1;
    if (a2) s_adc2 = a2;
    return adc_stream_apply_profile();
}

uint8_t adc_get_frame(uint16_t **ch1, uint16_t **ch2, uint16_t *samples) {
 80006f0:	b480      	push	{r7}
 80006f2:	b087      	sub	sp, #28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
    if (!ch1 || !ch2 || !samples) {
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d005      	beq.n	800070e <adc_get_frame+0x1e>
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d002      	beq.n	800070e <adc_get_frame+0x1e>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d101      	bne.n	8000712 <adc_get_frame+0x22>
        ADC_LOGF("[ADC][GET_FRAME] ERROR: ch1/ch2/samples NULL\r\n");
        return 0;
 800070e:	2300      	movs	r3, #0
 8000710:	e02e      	b.n	8000770 <adc_get_frame+0x80>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000712:	b672      	cpsid	i
}
 8000714:	bf00      	nop
    }
    __disable_irq();
    if (frame_rd_seq == frame_wr_seq) {
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <adc_get_frame+0x8c>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <adc_get_frame+0x90>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	429a      	cmp	r2, r3
 8000720:	d103      	bne.n	800072a <adc_get_frame+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000722:	b662      	cpsie	i
}
 8000724:	bf00      	nop
        __enable_irq();
        ADC_LOGF("[ADC][GET_FRAME] Нет новых кадров: frame_wr_seq=%lu frame_rd_seq=%lu\r\n", (unsigned long)frame_wr_seq, (unsigned long)frame_rd_seq);
        return 0;
 8000726:	2300      	movs	r3, #0
 8000728:	e022      	b.n	8000770 <adc_get_frame+0x80>
    }
    uint32_t seq = frame_rd_seq++;
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <adc_get_frame+0x8c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	4912      	ldr	r1, [pc, #72]	@ (800077c <adc_get_frame+0x8c>)
 8000732:	600a      	str	r2, [r1, #0]
 8000734:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 8000736:	b662      	cpsie	i
}
 8000738:	bf00      	nop
    __enable_irq();
    uint32_t index = seq & (FIFO_FRAMES - 1u);
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	f003 0307 	and.w	r3, r3, #7
 8000740:	613b      	str	r3, [r7, #16]
    *ch1 = adc1_buffers[index];
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8000748:	fb02 f303 	mul.w	r3, r2, r3
 800074c:	4a0d      	ldr	r2, [pc, #52]	@ (8000784 <adc_get_frame+0x94>)
 800074e:	441a      	add	r2, r3
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	601a      	str	r2, [r3, #0]
    *ch2 = adc2_buffers[index];
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 800075a:	fb02 f303 	mul.w	r3, r2, r3
 800075e:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <adc_get_frame+0x98>)
 8000760:	441a      	add	r2, r3
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	601a      	str	r2, [r3, #0]
    *samples = g_active_samples;
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <adc_get_frame+0x9c>)
 8000768:	881a      	ldrh	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	801a      	strh	r2, [r3, #0]
    ADC_LOGF("[ADC][GET_FRAME] OK: seq=%lu index=%lu samples=%u\r\n", (unsigned long)seq, (unsigned long)index, (unsigned)g_active_samples);
    return 1;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	371c      	adds	r7, #28
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	2400ad04 	.word	0x2400ad04
 8000780:	2400ad00 	.word	0x2400ad00
 8000784:	24000300 	.word	0x24000300
 8000788:	24005800 	.word	0x24005800
 800078c:	24000002 	.word	0x24000002

08000790 <adc_stream_get_debug>:

void adc_stream_get_debug(adc_stream_debug_t *out) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    if (!out) return;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d027      	beq.n	80007ee <adc_stream_get_debug+0x5e>
    out->frame_wr_seq = frame_wr_seq;
 800079e:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <adc_stream_get_debug+0x6c>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	601a      	str	r2, [r3, #0]
    out->frame_rd_seq = frame_rd_seq;
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <adc_stream_get_debug+0x70>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	605a      	str	r2, [r3, #4]
    out->frame_overflow_drops = frame_overflow_drops;
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <adc_stream_get_debug+0x74>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	609a      	str	r2, [r3, #8]
    out->frame_backlog_max = frame_backlog_max;
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <adc_stream_get_debug+0x78>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	60da      	str	r2, [r3, #12]
    out->dma_half0 = dma_half0; out->dma_full0 = dma_full0;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <adc_stream_get_debug+0x7c>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <adc_stream_get_debug+0x80>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	615a      	str	r2, [r3, #20]
    out->dma_half1 = dma_half1; out->dma_full1 = dma_full1;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <adc_stream_get_debug+0x84>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	619a      	str	r2, [r3, #24]
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <adc_stream_get_debug+0x88>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	61da      	str	r2, [r3, #28]
    out->active_samples = g_active_samples;
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <adc_stream_get_debug+0x8c>)
 80007e0:	881a      	ldrh	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	841a      	strh	r2, [r3, #32]
    out->reserved = 0;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	845a      	strh	r2, [r3, #34]	@ 0x22
 80007ec:	e000      	b.n	80007f0 <adc_stream_get_debug+0x60>
    if (!out) return;
 80007ee:	bf00      	nop
}
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	2400ad00 	.word	0x2400ad00
 8000800:	2400ad04 	.word	0x2400ad04
 8000804:	2400ad08 	.word	0x2400ad08
 8000808:	2400ad0c 	.word	0x2400ad0c
 800080c:	2400ad18 	.word	0x2400ad18
 8000810:	2400ad1c 	.word	0x2400ad1c
 8000814:	2400ad20 	.word	0x2400ad20
 8000818:	2400ad24 	.word	0x2400ad24
 800081c:	24000002 	.word	0x24000002

08000820 <HAL_ADC_ConvHalfCpltCallback>:

// Weak hook (can be overridden in higher-level module, e.g. USB)
void __attribute__((weak)) adc_stream_on_new_frames(uint32_t frames_added) { (void)frames_added; }

// --- HAL callbacks ---
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == (s_adc1 ? s_adc1->Instance : NULL)) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d003      	beq.n	800083c <HAL_ADC_ConvHalfCpltCallback+0x1c>
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	e000      	b.n	800083e <HAL_ADC_ConvHalfCpltCallback+0x1e>
 800083c:	2300      	movs	r3, #0
 800083e:	4293      	cmp	r3, r2
 8000840:	d10a      	bne.n	8000858 <HAL_ADC_ConvHalfCpltCallback+0x38>
    dma_half0++; dbg_dma1_half_count++;
 8000842:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	4a10      	ldr	r2, [pc, #64]	@ (800088c <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8000854:	6013      	str	r3, [r2, #0]
        /* Half-Complete игнорируем (IRQ отключён), оставлено для счётчиков */
        (void)0;
    } else if (hadc->Instance == (s_adc2 ? s_adc2->Instance : NULL)) {
        dma_half1++; // используем только для диагностики
    }
}
 8000856:	e011      	b.n	800087c <HAL_ADC_ConvHalfCpltCallback+0x5c>
    } else if (hadc->Instance == (s_adc2 ? s_adc2->Instance : NULL)) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d003      	beq.n	800086c <HAL_ADC_ConvHalfCpltCallback+0x4c>
 8000864:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	e000      	b.n	800086e <HAL_ADC_ConvHalfCpltCallback+0x4e>
 800086c:	2300      	movs	r3, #0
 800086e:	4293      	cmp	r3, r2
 8000870:	d104      	bne.n	800087c <HAL_ADC_ConvHalfCpltCallback+0x5c>
        dma_half1++; // используем только для диагностики
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	4a07      	ldr	r2, [pc, #28]	@ (8000898 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	2400ad2c 	.word	0x2400ad2c
 800088c:	2400ad18 	.word	0x2400ad18
 8000890:	240002dc 	.word	0x240002dc
 8000894:	2400ad30 	.word	0x2400ad30
 8000898:	2400ad20 	.word	0x2400ad20

0800089c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == (s_adc1 ? s_adc1->Instance : NULL)) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b58      	ldr	r3, [pc, #352]	@ (8000a0c <HAL_ADC_ConvCpltCallback+0x170>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d003      	beq.n	80008b8 <HAL_ADC_ConvCpltCallback+0x1c>
 80008b0:	4b56      	ldr	r3, [pc, #344]	@ (8000a0c <HAL_ADC_ConvCpltCallback+0x170>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	e000      	b.n	80008ba <HAL_ADC_ConvCpltCallback+0x1e>
 80008b8:	2300      	movs	r3, #0
 80008ba:	4293      	cmp	r3, r2
 80008bc:	f040 808b 	bne.w	80009d6 <HAL_ADC_ConvCpltCallback+0x13a>
    dma_full0++; dbg_dma1_full_count++;
 80008c0:	4b53      	ldr	r3, [pc, #332]	@ (8000a10 <HAL_ADC_ConvCpltCallback+0x174>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	4a52      	ldr	r2, [pc, #328]	@ (8000a10 <HAL_ADC_ConvCpltCallback+0x174>)
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	4b52      	ldr	r3, [pc, #328]	@ (8000a14 <HAL_ADC_ConvCpltCallback+0x178>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	4a50      	ldr	r2, [pc, #320]	@ (8000a14 <HAL_ADC_ConvCpltCallback+0x178>)
 80008d2:	6013      	str	r3, [r2, #0]
           (unsigned long)dbg_dma1_half_count,
           (unsigned long)dbg_dma1_full_count);
        return;
    }
#endif
        adc_last_full0_ms = HAL_GetTick();
 80008d4:	f003 ff40 	bl	8004758 <HAL_GetTick>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a4f      	ldr	r2, [pc, #316]	@ (8000a18 <HAL_ADC_ConvCpltCallback+0x17c>)
 80008dc:	6013      	str	r3, [r2, #0]
        /* Один полный буфер (N выборок) готов */
        uint32_t frames_added = 1u;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
    frame_wr_seq += frames_added;
 80008e2:	4b4e      	ldr	r3, [pc, #312]	@ (8000a1c <HAL_ADC_ConvCpltCallback+0x180>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	6a3b      	ldr	r3, [r7, #32]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a4c      	ldr	r2, [pc, #304]	@ (8000a1c <HAL_ADC_ConvCpltCallback+0x180>)
 80008ec:	6013      	str	r3, [r2, #0]
    ADC_LOGF("[ADC][DMA] ConvCplt: frame_wr_seq=%lu frame_rd_seq=%lu\r\n", (unsigned long)frame_wr_seq, (unsigned long)frame_rd_seq);
        uint32_t backlog = frame_wr_seq - frame_rd_seq;
 80008ee:	4b4b      	ldr	r3, [pc, #300]	@ (8000a1c <HAL_ADC_ConvCpltCallback+0x180>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000a20 <HAL_ADC_ConvCpltCallback+0x184>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	61fb      	str	r3, [r7, #28]
        if (backlog > frame_backlog_max) frame_backlog_max = backlog;
 80008fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000a24 <HAL_ADC_ConvCpltCallback+0x188>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	429a      	cmp	r2, r3
 8000902:	d902      	bls.n	800090a <HAL_ADC_ConvCpltCallback+0x6e>
 8000904:	4a47      	ldr	r2, [pc, #284]	@ (8000a24 <HAL_ADC_ConvCpltCallback+0x188>)
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	6013      	str	r3, [r2, #0]
        if (backlog > FIFO_FRAMES) {
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	2b08      	cmp	r3, #8
 800090e:	d90e      	bls.n	800092e <HAL_ADC_ConvCpltCallback+0x92>
            uint32_t excess = backlog - FIFO_FRAMES;
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	3b08      	subs	r3, #8
 8000914:	61bb      	str	r3, [r7, #24]
            frame_overflow_drops += excess;
 8000916:	4b44      	ldr	r3, [pc, #272]	@ (8000a28 <HAL_ADC_ConvCpltCallback+0x18c>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	4413      	add	r3, r2
 800091e:	4a42      	ldr	r2, [pc, #264]	@ (8000a28 <HAL_ADC_ConvCpltCallback+0x18c>)
 8000920:	6013      	str	r3, [r2, #0]
            frame_rd_seq += excess;
 8000922:	4b3f      	ldr	r3, [pc, #252]	@ (8000a20 <HAL_ADC_ConvCpltCallback+0x184>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	4413      	add	r3, r2
 800092a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a20 <HAL_ADC_ConvCpltCallback+0x184>)
 800092c:	6013      	str	r3, [r2, #0]
        }
        adc_stream_on_new_frames(frames_added);
 800092e:	6a38      	ldr	r0, [r7, #32]
 8000930:	f018 fad8 	bl	8018ee4 <adc_stream_on_new_frames>

        /* Продвинем адрес свободного банка DMA на следующий слот кольца — для ADC1 и ADC2.
           В DBM разрешено писать в неактивный банк: определяем по биту CT (CR[19]). */
        do {
            uint32_t idx = s_next_ring_index; // выбрать следующий буфер
 8000934:	4b3d      	ldr	r3, [pc, #244]	@ (8000a2c <HAL_ADC_ConvCpltCallback+0x190>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
            if (idx >= FIFO_FRAMES) idx &= (FIFO_FRAMES-1u);
 800093a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093c:	2b07      	cmp	r3, #7
 800093e:	d903      	bls.n	8000948 <HAL_ADC_ConvCpltCallback+0xac>
 8000940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
            DMA_Stream_TypeDef *st1 = (DMA_Stream_TypeDef*)hdma_adc1.Instance;
 8000948:	4b39      	ldr	r3, [pc, #228]	@ (8000a30 <HAL_ADC_ConvCpltCallback+0x194>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	617b      	str	r3, [r7, #20]
            uint32_t cr1 = st1->CR;
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	613b      	str	r3, [r7, #16]
            if (cr1 & (1u<<19)) {
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800095a:	2b00      	cmp	r3, #0
 800095c:	d00a      	beq.n	8000974 <HAL_ADC_ConvCpltCallback+0xd8>
                /* CT=1 => сейчас активен M1, значит завершился M0 -> переадресуем M0 на следующий */
                st1->M0AR = (uint32_t)adc1_buffers[idx];
 800095e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000960:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8000964:	fb02 f303 	mul.w	r3, r2, r3
 8000968:	4a32      	ldr	r2, [pc, #200]	@ (8000a34 <HAL_ADC_ConvCpltCallback+0x198>)
 800096a:	4413      	add	r3, r2
 800096c:	461a      	mov	r2, r3
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	e009      	b.n	8000988 <HAL_ADC_ConvCpltCallback+0xec>
            } else {
                /* CT=0 => активен M0, завершился M1 */
                st1->M1AR = (uint32_t)adc1_buffers[idx];
 8000974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000976:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 800097a:	fb02 f303 	mul.w	r3, r2, r3
 800097e:	4a2d      	ldr	r2, [pc, #180]	@ (8000a34 <HAL_ADC_ConvCpltCallback+0x198>)
 8000980:	4413      	add	r3, r2
 8000982:	461a      	mov	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	611a      	str	r2, [r3, #16]
            }
            #if !DIAG_SINGLE_ADC1
            DMA_Stream_TypeDef *st2 = (DMA_Stream_TypeDef*)hdma_adc2.Instance;
 8000988:	4b2b      	ldr	r3, [pc, #172]	@ (8000a38 <HAL_ADC_ConvCpltCallback+0x19c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	60fb      	str	r3, [r7, #12]
            uint32_t cr2 = st2->CR;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	60bb      	str	r3, [r7, #8]
            if (cr2 & (1u<<19)) {
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00a      	beq.n	80009b4 <HAL_ADC_ConvCpltCallback+0x118>
                st2->M0AR = (uint32_t)adc2_buffers[idx];
 800099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a0:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a24      	ldr	r2, [pc, #144]	@ (8000a3c <HAL_ADC_ConvCpltCallback+0x1a0>)
 80009aa:	4413      	add	r3, r2
 80009ac:	461a      	mov	r2, r3
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	e009      	b.n	80009c8 <HAL_ADC_ConvCpltCallback+0x12c>
            } else {
                st2->M1AR = (uint32_t)adc2_buffers[idx];
 80009b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b6:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 80009ba:	fb02 f303 	mul.w	r3, r2, r3
 80009be:	4a1f      	ldr	r2, [pc, #124]	@ (8000a3c <HAL_ADC_ConvCpltCallback+0x1a0>)
 80009c0:	4413      	add	r3, r2
 80009c2:	461a      	mov	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	611a      	str	r2, [r3, #16]
            }
            #endif
            s_next_ring_index = (idx + 1u) & (FIFO_FRAMES - 1u);
 80009c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ca:	3301      	adds	r3, #1
 80009cc:	f003 0307 	and.w	r3, r3, #7
 80009d0:	4a16      	ldr	r2, [pc, #88]	@ (8000a2c <HAL_ADC_ConvCpltCallback+0x190>)
 80009d2:	6013      	str	r3, [r2, #0]
        } while(0);
    } else if (hadc->Instance == (s_adc2 ? s_adc2->Instance : NULL)) {
        dma_full1++;
        adc_last_full1_ms = HAL_GetTick();
    }
 80009d4:	e016      	b.n	8000a04 <HAL_ADC_ConvCpltCallback+0x168>
    } else if (hadc->Instance == (s_adc2 ? s_adc2->Instance : NULL)) {
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <HAL_ADC_ConvCpltCallback+0x14e>
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	e000      	b.n	80009ec <HAL_ADC_ConvCpltCallback+0x150>
 80009ea:	2300      	movs	r3, #0
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d109      	bne.n	8000a04 <HAL_ADC_ConvCpltCallback+0x168>
        dma_full1++;
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	4a13      	ldr	r2, [pc, #76]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80009f8:	6013      	str	r3, [r2, #0]
        adc_last_full1_ms = HAL_GetTick();
 80009fa:	f003 fead 	bl	8004758 <HAL_GetTick>
 80009fe:	4603      	mov	r3, r0
 8000a00:	4a11      	ldr	r2, [pc, #68]	@ (8000a48 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2400ad2c 	.word	0x2400ad2c
 8000a10:	2400ad1c 	.word	0x2400ad1c
 8000a14:	240002e0 	.word	0x240002e0
 8000a18:	2400ad10 	.word	0x2400ad10
 8000a1c:	2400ad00 	.word	0x2400ad00
 8000a20:	2400ad04 	.word	0x2400ad04
 8000a24:	2400ad0c 	.word	0x2400ad0c
 8000a28:	2400ad08 	.word	0x2400ad08
 8000a2c:	2400ad28 	.word	0x2400ad28
 8000a30:	2400b148 	.word	0x2400b148
 8000a34:	24000300 	.word	0x24000300
 8000a38:	2400b1c0 	.word	0x2400b1c0
 8000a3c:	24005800 	.word	0x24005800
 8000a40:	2400ad30 	.word	0x2400ad30
 8000a44:	2400ad24 	.word	0x2400ad24
 8000a48:	2400ad14 	.word	0x2400ad14

08000a4c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a50:	f3bf 8f4f 	dsb	sy
}
 8000a54:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <__NVIC_SystemReset+0x24>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a5e:	4904      	ldr	r1, [pc, #16]	@ (8000a70 <__NVIC_SystemReset+0x24>)
 8000a60:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <__NVIC_SystemReset+0x28>)
 8000a62:	4313      	orrs	r3, r2
 8000a64:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a66:	f3bf 8f4f 	dsb	sy
}
 8000a6a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <__NVIC_SystemReset+0x20>
 8000a70:	e000ed00 	.word	0xe000ed00
 8000a74:	05fa0004 	.word	0x05fa0004

08000a78 <reset_trace_record>:
  uint32_t hardfault_count;  // число HardFault сессий
  uint32_t busfault_count;   // число BusFault
  uint32_t usagefault_count; // число UsageFault
} reset_trace_t;
static reset_trace_t __attribute__((section(".noinit"))) g_reset_trace;
static void reset_trace_record(uint32_t rsr){
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if(g_reset_trace.magic != 0x21524553UL){ // '!RES'
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <reset_trace_record+0x78>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1b      	ldr	r2, [pc, #108]	@ (8000af4 <reset_trace_record+0x7c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d01d      	beq.n	8000ac6 <reset_trace_record+0x4e>
    g_reset_trace.magic = 0x21524553UL;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <reset_trace_record+0x78>)
 8000a8c:	4a19      	ldr	r2, [pc, #100]	@ (8000af4 <reset_trace_record+0x7c>)
 8000a8e:	601a      	str	r2, [r3, #0]
    g_reset_trace.index = 0;
 8000a90:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <reset_trace_record+0x78>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
    for(int i=0;i<8;i++) g_reset_trace.rsr[i]=0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	e008      	b.n	8000aae <reset_trace_record+0x36>
 8000a9c:	4a14      	ldr	r2, [pc, #80]	@ (8000af0 <reset_trace_record+0x78>)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b07      	cmp	r3, #7
 8000ab2:	ddf3      	ble.n	8000a9c <reset_trace_record+0x24>
    g_reset_trace.hardfault_count = 0;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <reset_trace_record+0x78>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	629a      	str	r2, [r3, #40]	@ 0x28
    g_reset_trace.busfault_count = 0;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <reset_trace_record+0x78>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	62da      	str	r2, [r3, #44]	@ 0x2c
    g_reset_trace.usagefault_count = 0;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <reset_trace_record+0x78>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  g_reset_trace.rsr[g_reset_trace.index & 7U] = rsr;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <reset_trace_record+0x78>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	4908      	ldr	r1, [pc, #32]	@ (8000af0 <reset_trace_record+0x78>)
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  g_reset_trace.index++;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <reset_trace_record+0x78>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	3301      	adds	r3, #1
 8000ade:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <reset_trace_record+0x78>)
 8000ae0:	6053      	str	r3, [r2, #4]
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	2401af54 	.word	0x2401af54
 8000af4:	21524553 	.word	0x21524553

08000af8 <reset_cause_str>:

static const char* reset_cause_str(uint32_t rsr){
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if(rsr & RCC_RSR_IWDG1RSTF) return "IWDG";   // Independent watchdog
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <reset_cause_str+0x16>
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <reset_cause_str+0x78>)
 8000b0c:	e02a      	b.n	8000b64 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_WWDG1RSTF) return "WWDG";   // Window watchdog
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <reset_cause_str+0x24>
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <reset_cause_str+0x7c>)
 8000b1a:	e023      	b.n	8000b64 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_LPWRRSTF)  return "LPWR";   // Low-power reset
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <reset_cause_str+0x32>
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <reset_cause_str+0x80>)
 8000b28:	e01c      	b.n	8000b64 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_BORRSTF)   return "BOR";    // Brown-out reset
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <reset_cause_str+0x40>
 8000b34:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <reset_cause_str+0x84>)
 8000b36:	e015      	b.n	8000b64 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_PINRSTF)   return "PIN";    // NRST pin
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <reset_cause_str+0x4e>
 8000b42:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <reset_cause_str+0x88>)
 8000b44:	e00e      	b.n	8000b64 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_SFTRSTF)   return "SOFT";   // Software reset
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <reset_cause_str+0x5c>
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <reset_cause_str+0x8c>)
 8000b52:	e007      	b.n	8000b64 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_PORRSTF)   return "POR";    // Power-on reset
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <reset_cause_str+0x6a>
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <reset_cause_str+0x90>)
 8000b60:	e000      	b.n	8000b64 <reset_cause_str+0x6c>
  return "UNK";
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <reset_cause_str+0x94>)
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	0801c02c 	.word	0x0801c02c
 8000b74:	0801c034 	.word	0x0801c034
 8000b78:	0801c03c 	.word	0x0801c03c
 8000b7c:	0801c044 	.word	0x0801c044
 8000b80:	0801c048 	.word	0x0801c048
 8000b84:	0801c04c 	.word	0x0801c04c
 8000b88:	0801c054 	.word	0x0801c054
 8000b8c:	0801c058 	.word	0x0801c058

08000b90 <log_reset_cause>:
static void log_reset_cause(void){
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b09d      	sub	sp, #116	@ 0x74
 8000b94:	af02      	add	r7, sp, #8
  // Считываем и сразу очищаем флаги (запись 1 очищает)
  reset_cause_raw = RCC->RSR;
 8000b96:	4ba3      	ldr	r3, [pc, #652]	@ (8000e24 <log_reset_cause+0x294>)
 8000b98:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000b9c:	4aa2      	ldr	r2, [pc, #648]	@ (8000e28 <log_reset_cause+0x298>)
 8000b9e:	6013      	str	r3, [r2, #0]
  reset_trace_record(reset_cause_raw);
 8000ba0:	4ba1      	ldr	r3, [pc, #644]	@ (8000e28 <log_reset_cause+0x298>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff67 	bl	8000a78 <reset_trace_record>
  char flags[96];
  flags[0]='\0';
 8000baa:	2300      	movs	r3, #0
 8000bac:	703b      	strb	r3, [r7, #0]
  #define ADD_FLAG(bit,name) do{ if(reset_cause_raw & (bit)){ if(flags[0]) strncat(flags, ",", sizeof(flags)-1); strncat(flags, (name), sizeof(flags)-1);} }while(0)
  ADD_FLAG(RCC_RSR_IWDG1RSTF, "IWDG");
 8000bae:	4b9e      	ldr	r3, [pc, #632]	@ (8000e28 <log_reset_cause+0x298>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d01c      	beq.n	8000bf4 <log_reset_cause+0x64>
 8000bba:	783b      	ldrb	r3, [r7, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00c      	beq.n	8000bda <log_reset_cause+0x4a>
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fb84 	bl	80002d0 <strlen>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4413      	add	r3, r2
 8000bd0:	4996      	ldr	r1, [pc, #600]	@ (8000e2c <log_reset_cause+0x29c>)
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	8013      	strh	r3, [r2, #0]
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fb77 	bl	80002d0 <strlen>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	463b      	mov	r3, r7
 8000be8:	4413      	add	r3, r2
 8000bea:	4a91      	ldr	r2, [pc, #580]	@ (8000e30 <log_reset_cause+0x2a0>)
 8000bec:	6810      	ldr	r0, [r2, #0]
 8000bee:	6018      	str	r0, [r3, #0]
 8000bf0:	7912      	ldrb	r2, [r2, #4]
 8000bf2:	711a      	strb	r2, [r3, #4]
  ADD_FLAG(RCC_RSR_WWDG1RSTF, "WWDG");
 8000bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8000e28 <log_reset_cause+0x298>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d01c      	beq.n	8000c3a <log_reset_cause+0xaa>
 8000c00:	783b      	ldrb	r3, [r7, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00c      	beq.n	8000c20 <log_reset_cause+0x90>
 8000c06:	463b      	mov	r3, r7
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fb61 	bl	80002d0 <strlen>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	463b      	mov	r3, r7
 8000c14:	4413      	add	r3, r2
 8000c16:	4985      	ldr	r1, [pc, #532]	@ (8000e2c <log_reset_cause+0x29c>)
 8000c18:	461a      	mov	r2, r3
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	8013      	strh	r3, [r2, #0]
 8000c20:	463b      	mov	r3, r7
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fb54 	bl	80002d0 <strlen>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a80      	ldr	r2, [pc, #512]	@ (8000e34 <log_reset_cause+0x2a4>)
 8000c32:	6810      	ldr	r0, [r2, #0]
 8000c34:	6018      	str	r0, [r3, #0]
 8000c36:	7912      	ldrb	r2, [r2, #4]
 8000c38:	711a      	strb	r2, [r3, #4]
  ADD_FLAG(RCC_RSR_LPWRRSTF,  "LPWR");
 8000c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8000e28 <log_reset_cause+0x298>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d01c      	beq.n	8000c80 <log_reset_cause+0xf0>
 8000c46:	783b      	ldrb	r3, [r7, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00c      	beq.n	8000c66 <log_reset_cause+0xd6>
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fb3e 	bl	80002d0 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4973      	ldr	r1, [pc, #460]	@ (8000e2c <log_reset_cause+0x29c>)
 8000c5e:	461a      	mov	r2, r3
 8000c60:	460b      	mov	r3, r1
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	8013      	strh	r3, [r2, #0]
 8000c66:	463b      	mov	r3, r7
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fb31 	bl	80002d0 <strlen>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	463b      	mov	r3, r7
 8000c74:	4413      	add	r3, r2
 8000c76:	4a70      	ldr	r2, [pc, #448]	@ (8000e38 <log_reset_cause+0x2a8>)
 8000c78:	6810      	ldr	r0, [r2, #0]
 8000c7a:	6018      	str	r0, [r3, #0]
 8000c7c:	7912      	ldrb	r2, [r2, #4]
 8000c7e:	711a      	strb	r2, [r3, #4]
  ADD_FLAG(RCC_RSR_BORRSTF,   "BOR");
 8000c80:	4b69      	ldr	r3, [pc, #420]	@ (8000e28 <log_reset_cause+0x298>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d01a      	beq.n	8000cc2 <log_reset_cause+0x132>
 8000c8c:	783b      	ldrb	r3, [r7, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00c      	beq.n	8000cac <log_reset_cause+0x11c>
 8000c92:	463b      	mov	r3, r7
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fb1b 	bl	80002d0 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4962      	ldr	r1, [pc, #392]	@ (8000e2c <log_reset_cause+0x29c>)
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	8013      	strh	r3, [r2, #0]
 8000cac:	463b      	mov	r3, r7
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fb0e 	bl	80002d0 <strlen>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a5f      	ldr	r2, [pc, #380]	@ (8000e3c <log_reset_cause+0x2ac>)
 8000cbe:	6810      	ldr	r0, [r2, #0]
 8000cc0:	6018      	str	r0, [r3, #0]
  ADD_FLAG(RCC_RSR_PINRSTF,   "PIN");
 8000cc2:	4b59      	ldr	r3, [pc, #356]	@ (8000e28 <log_reset_cause+0x298>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d01a      	beq.n	8000d04 <log_reset_cause+0x174>
 8000cce:	783b      	ldrb	r3, [r7, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d00c      	beq.n	8000cee <log_reset_cause+0x15e>
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fafa 	bl	80002d0 <strlen>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4951      	ldr	r1, [pc, #324]	@ (8000e2c <log_reset_cause+0x29c>)
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	460b      	mov	r3, r1
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	8013      	strh	r3, [r2, #0]
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff faed 	bl	80002d0 <strlen>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a50      	ldr	r2, [pc, #320]	@ (8000e40 <log_reset_cause+0x2b0>)
 8000d00:	6810      	ldr	r0, [r2, #0]
 8000d02:	6018      	str	r0, [r3, #0]
  ADD_FLAG(RCC_RSR_SFTRSTF,   "SOFT");
 8000d04:	4b48      	ldr	r3, [pc, #288]	@ (8000e28 <log_reset_cause+0x298>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d01c      	beq.n	8000d4a <log_reset_cause+0x1ba>
 8000d10:	783b      	ldrb	r3, [r7, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00c      	beq.n	8000d30 <log_reset_cause+0x1a0>
 8000d16:	463b      	mov	r3, r7
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fad9 	bl	80002d0 <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461a      	mov	r2, r3
 8000d22:	463b      	mov	r3, r7
 8000d24:	4413      	add	r3, r2
 8000d26:	4941      	ldr	r1, [pc, #260]	@ (8000e2c <log_reset_cause+0x29c>)
 8000d28:	461a      	mov	r2, r3
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	8013      	strh	r3, [r2, #0]
 8000d30:	463b      	mov	r3, r7
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff facc 	bl	80002d0 <strlen>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a40      	ldr	r2, [pc, #256]	@ (8000e44 <log_reset_cause+0x2b4>)
 8000d42:	6810      	ldr	r0, [r2, #0]
 8000d44:	6018      	str	r0, [r3, #0]
 8000d46:	7912      	ldrb	r2, [r2, #4]
 8000d48:	711a      	strb	r2, [r3, #4]
  ADD_FLAG(RCC_RSR_PORRSTF,   "POR");
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <log_reset_cause+0x298>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d01a      	beq.n	8000d8c <log_reset_cause+0x1fc>
 8000d56:	783b      	ldrb	r3, [r7, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d00c      	beq.n	8000d76 <log_reset_cause+0x1e6>
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fab6 	bl	80002d0 <strlen>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4413      	add	r3, r2
 8000d6c:	492f      	ldr	r1, [pc, #188]	@ (8000e2c <log_reset_cause+0x29c>)
 8000d6e:	461a      	mov	r2, r3
 8000d70:	460b      	mov	r3, r1
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	8013      	strh	r3, [r2, #0]
 8000d76:	463b      	mov	r3, r7
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff faa9 	bl	80002d0 <strlen>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	461a      	mov	r2, r3
 8000d82:	463b      	mov	r3, r7
 8000d84:	4413      	add	r3, r2
 8000d86:	4a30      	ldr	r2, [pc, #192]	@ (8000e48 <log_reset_cause+0x2b8>)
 8000d88:	6810      	ldr	r0, [r2, #0]
 8000d8a:	6018      	str	r0, [r3, #0]
  if(!flags[0]) strncpy(flags, "NONE", sizeof(flags)-1);
 8000d8c:	783b      	ldrb	r3, [r7, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d105      	bne.n	8000d9e <log_reset_cause+0x20e>
 8000d92:	463b      	mov	r3, r7
 8000d94:	225f      	movs	r2, #95	@ 0x5f
 8000d96:	492d      	ldr	r1, [pc, #180]	@ (8000e4c <log_reset_cause+0x2bc>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f01a f875 	bl	801ae88 <strncpy>
  printf("[BOOT] RSR=0x%08lX FLAGS=%s PRIMARY=%s SIGN=0x%08lX\r\n", (unsigned long)reset_cause_raw, flags, reset_cause_str(reset_cause_raw), (unsigned long)build_signature_hex);
 8000d9e:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <log_reset_cause+0x298>)
 8000da0:	681c      	ldr	r4, [r3, #0]
 8000da2:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <log_reset_cause+0x298>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fea6 	bl	8000af8 <reset_cause_str>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4928      	ldr	r1, [pc, #160]	@ (8000e50 <log_reset_cause+0x2c0>)
 8000db0:	463a      	mov	r2, r7
 8000db2:	9100      	str	r1, [sp, #0]
 8000db4:	4621      	mov	r1, r4
 8000db6:	4827      	ldr	r0, [pc, #156]	@ (8000e54 <log_reset_cause+0x2c4>)
 8000db8:	f019 fdf2 	bl	801a9a0 <iprintf>
  // Печатаем трассу (последние до 8 значений)
  printf("[BOOT] RSR_TRACE idx=%lu: ", (unsigned long)g_reset_trace.index);
 8000dbc:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <log_reset_cause+0x2c8>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4826      	ldr	r0, [pc, #152]	@ (8000e5c <log_reset_cause+0x2cc>)
 8000dc4:	f019 fdec 	bl	801a9a0 <iprintf>
  for(int i=0;i<8;i++){
 8000dc8:	2300      	movs	r3, #0
 8000dca:	667b      	str	r3, [r7, #100]	@ 0x64
 8000dcc:	e018      	b.n	8000e00 <log_reset_cause+0x270>
    uint32_t v = g_reset_trace.rsr[(g_reset_trace.index - 1 - i) & 7U];
 8000dce:	4b22      	ldr	r3, [pc, #136]	@ (8000e58 <log_reset_cause+0x2c8>)
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8000e58 <log_reset_cause+0x2c8>)
 8000dde:	3302      	adds	r3, #2
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	663b      	str	r3, [r7, #96]	@ 0x60
    printf(i?",0x%08lX":"0x%08lX", (unsigned long)v);
 8000de6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <log_reset_cause+0x260>
 8000dec:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <log_reset_cause+0x2d0>)
 8000dee:	e000      	b.n	8000df2 <log_reset_cause+0x262>
 8000df0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <log_reset_cause+0x2d4>)
 8000df2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000df4:	4618      	mov	r0, r3
 8000df6:	f019 fdd3 	bl	801a9a0 <iprintf>
  for(int i=0;i<8;i++){
 8000dfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8000e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e02:	2b07      	cmp	r3, #7
 8000e04:	dde3      	ble.n	8000dce <log_reset_cause+0x23e>
  }
  printf("\r\n");
 8000e06:	4818      	ldr	r0, [pc, #96]	@ (8000e68 <log_reset_cause+0x2d8>)
 8000e08:	f019 fe32 	bl	801aa70 <puts>
  RCC->RSR |= RCC_RSR_RMVF; // снять флаги
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <log_reset_cause+0x294>)
 8000e0e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000e12:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <log_reset_cause+0x294>)
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e18:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
}
 8000e1c:	bf00      	nop
 8000e1e:	376c      	adds	r7, #108	@ 0x6c
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	58024400 	.word	0x58024400
 8000e28:	2400b26c 	.word	0x2400b26c
 8000e2c:	0801c05c 	.word	0x0801c05c
 8000e30:	0801c02c 	.word	0x0801c02c
 8000e34:	0801c034 	.word	0x0801c034
 8000e38:	0801c03c 	.word	0x0801c03c
 8000e3c:	0801c044 	.word	0x0801c044
 8000e40:	0801c048 	.word	0x0801c048
 8000e44:	0801c04c 	.word	0x0801c04c
 8000e48:	0801c054 	.word	0x0801c054
 8000e4c:	0801c060 	.word	0x0801c060
 8000e50:	a5b6c7d8 	.word	0xa5b6c7d8
 8000e54:	0801c068 	.word	0x0801c068
 8000e58:	2401af54 	.word	0x2401af54
 8000e5c:	0801c0a0 	.word	0x0801c0a0
 8000e60:	0801c0bc 	.word	0x0801c0bc
 8000e64:	0801c0c8 	.word	0x0801c0c8
 8000e68:	0801c0d0 	.word	0x0801c0d0

08000e6c <boot_diag_init>:
  BOOT_PROGRESS_AFTER_ADC      = (1u<<2),
  BOOT_PROGRESS_ENTER_LOOP     = (1u<<3)
};
static uint32_t g_progress_flags = 0;

static void boot_diag_init(uint32_t current_rsr){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if(g_boot_diag.magic != 0x42444731UL){ // 'BDG1'
 8000e74:	4b33      	ldr	r3, [pc, #204]	@ (8000f44 <boot_diag_init+0xd8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a33      	ldr	r2, [pc, #204]	@ (8000f48 <boot_diag_init+0xdc>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <boot_diag_init+0x22>
    memset(&g_boot_diag, 0, sizeof(g_boot_diag));
 8000e7e:	226c      	movs	r2, #108	@ 0x6c
 8000e80:	2100      	movs	r1, #0
 8000e82:	4830      	ldr	r0, [pc, #192]	@ (8000f44 <boot_diag_init+0xd8>)
 8000e84:	f019 fff8 	bl	801ae78 <memset>
    g_boot_diag.magic = 0x42444731UL;
 8000e88:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <boot_diag_init+0xd8>)
 8000e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f48 <boot_diag_init+0xdc>)
 8000e8c:	601a      	str	r2, [r3, #0]
  }
  g_boot_diag.boot_counter++;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <boot_diag_init+0xd8>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	3301      	adds	r3, #1
 8000e94:	4a2b      	ldr	r2, [pc, #172]	@ (8000f44 <boot_diag_init+0xd8>)
 8000e96:	6053      	str	r3, [r2, #4]
  // Ничего не пишем сейчас – запись произойдёт перед потенциальным сбросом / периодически
  // Для визуализации напечатаем последние 4 аптайма
  printf("[BOOT] LAST_UPTIMES(ms): ");
 8000e98:	482c      	ldr	r0, [pc, #176]	@ (8000f4c <boot_diag_init+0xe0>)
 8000e9a:	f019 fd81 	bl	801a9a0 <iprintf>
  for(int i=0;i<8;i++){
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	e01c      	b.n	8000ede <boot_diag_init+0x72>
    uint32_t v = g_boot_diag.rec[(g_boot_diag.slot - 1 - i) & 7u].uptime_ms;
 8000ea4:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <boot_diag_init+0xd8>)
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	3b01      	subs	r3, #1
 8000eae:	f003 0207 	and.w	r2, r3, #7
 8000eb2:	4924      	ldr	r1, [pc, #144]	@ (8000f44 <boot_diag_init+0xd8>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	330c      	adds	r3, #12
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	60bb      	str	r3, [r7, #8]
    printf(i?",%lu":"%lu", (unsigned long)v);
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <boot_diag_init+0x62>
 8000eca:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <boot_diag_init+0xe4>)
 8000ecc:	e000      	b.n	8000ed0 <boot_diag_init+0x64>
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <boot_diag_init+0xe8>)
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f019 fd64 	bl	801a9a0 <iprintf>
  for(int i=0;i<8;i++){
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	dddf      	ble.n	8000ea4 <boot_diag_init+0x38>
  }
  printf("\r\n");
 8000ee4:	481c      	ldr	r0, [pc, #112]	@ (8000f58 <boot_diag_init+0xec>)
 8000ee6:	f019 fdc3 	bl	801aa70 <puts>
  printf("[BOOT] LAST_PROGRESS: ");
 8000eea:	481c      	ldr	r0, [pc, #112]	@ (8000f5c <boot_diag_init+0xf0>)
 8000eec:	f019 fd58 	bl	801a9a0 <iprintf>
  for(int i=0;i<4;i++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	e01c      	b.n	8000f30 <boot_diag_init+0xc4>
    uint32_t pf = g_boot_diag.rec[(g_boot_diag.slot - 1 - i) & 7u].progress_flags;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <boot_diag_init+0xd8>)
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f003 0207 	and.w	r2, r3, #7
 8000f04:	490f      	ldr	r1, [pc, #60]	@ (8000f44 <boot_diag_init+0xd8>)
 8000f06:	4613      	mov	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	440b      	add	r3, r1
 8000f10:	3310      	adds	r3, #16
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
    printf(i?",0x%02lX":"0x%02lX", (unsigned long)pf);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <boot_diag_init+0xb4>
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <boot_diag_init+0xf4>)
 8000f1e:	e000      	b.n	8000f22 <boot_diag_init+0xb6>
 8000f20:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <boot_diag_init+0xf8>)
 8000f22:	68f9      	ldr	r1, [r7, #12]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f019 fd3b 	bl	801a9a0 <iprintf>
  for(int i=0;i<4;i++){
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	dddf      	ble.n	8000ef6 <boot_diag_init+0x8a>
  }
  printf("\r\n");
 8000f36:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <boot_diag_init+0xec>)
 8000f38:	f019 fd9a 	bl	801aa70 <puts>
}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2401af88 	.word	0x2401af88
 8000f48:	42444731 	.word	0x42444731
 8000f4c:	0801c0d4 	.word	0x0801c0d4
 8000f50:	0801c0f0 	.word	0x0801c0f0
 8000f54:	0801c0f8 	.word	0x0801c0f8
 8000f58:	0801c0d0 	.word	0x0801c0d0
 8000f5c:	0801c0fc 	.word	0x0801c0fc
 8000f60:	0801c114 	.word	0x0801c114
 8000f64:	0801c120 	.word	0x0801c120

08000f68 <boot_diag_periodic>:

static void boot_diag_periodic(uint32_t uptime_ms){
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  // Периодическое обновление текущего слота, чтобы при внезапном PIN reset мы имели аптайм
  uint32_t s = (g_boot_diag.slot) & 7u; // текущий рабочий слот
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <boot_diag_periodic+0x60>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	60fb      	str	r3, [r7, #12]
  g_boot_diag.rec[s].uptime_ms = uptime_ms;
 8000f7a:	4913      	ldr	r1, [pc, #76]	@ (8000fc8 <boot_diag_periodic+0x60>)
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	330c      	adds	r3, #12
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
  g_boot_diag.rec[s].progress_flags = g_progress_flags;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <boot_diag_periodic+0x64>)
 8000f90:	6819      	ldr	r1, [r3, #0]
 8000f92:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <boot_diag_periodic+0x60>)
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4403      	add	r3, r0
 8000fa0:	3310      	adds	r3, #16
 8000fa2:	6019      	str	r1, [r3, #0]
  g_boot_diag.rec[s].rsr = reset_cause_raw; // последний считанный (текущая сессия)
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <boot_diag_periodic+0x68>)
 8000fa6:	6819      	ldr	r1, [r3, #0]
 8000fa8:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <boot_diag_periodic+0x60>)
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4403      	add	r3, r0
 8000fb6:	3314      	adds	r3, #20
 8000fb8:	6019      	str	r1, [r3, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2401af88 	.word	0x2401af88
 8000fcc:	2400b274 	.word	0x2400b274
 8000fd0:	2400b26c 	.word	0x2400b26c

08000fd4 <boot_diag_finalize_before_reset>:

static void boot_diag_finalize_before_reset(uint32_t uptime_ms){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  // Завершаем текущий слот и переходим к следующему
  uint32_t s = (g_boot_diag.slot) & 7u;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <boot_diag_finalize_before_reset+0x68>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	60fb      	str	r3, [r7, #12]
  g_boot_diag.rec[s].uptime_ms = uptime_ms;
 8000fe6:	4915      	ldr	r1, [pc, #84]	@ (800103c <boot_diag_finalize_before_reset+0x68>)
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	330c      	adds	r3, #12
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
  g_boot_diag.rec[s].progress_flags = g_progress_flags;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <boot_diag_finalize_before_reset+0x6c>)
 8000ffc:	6819      	ldr	r1, [r3, #0]
 8000ffe:	480f      	ldr	r0, [pc, #60]	@ (800103c <boot_diag_finalize_before_reset+0x68>)
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4403      	add	r3, r0
 800100c:	3310      	adds	r3, #16
 800100e:	6019      	str	r1, [r3, #0]
  g_boot_diag.rec[s].rsr = reset_cause_raw;
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <boot_diag_finalize_before_reset+0x70>)
 8001012:	6819      	ldr	r1, [r3, #0]
 8001014:	4809      	ldr	r0, [pc, #36]	@ (800103c <boot_diag_finalize_before_reset+0x68>)
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4403      	add	r3, r0
 8001022:	3314      	adds	r3, #20
 8001024:	6019      	str	r1, [r3, #0]
  g_boot_diag.slot++;
 8001026:	4b05      	ldr	r3, [pc, #20]	@ (800103c <boot_diag_finalize_before_reset+0x68>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	3301      	adds	r3, #1
 800102c:	4a03      	ldr	r2, [pc, #12]	@ (800103c <boot_diag_finalize_before_reset+0x68>)
 800102e:	6093      	str	r3, [r2, #8]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	2401af88 	.word	0x2401af88
 8001040:	2400b274 	.word	0x2400b274
 8001044:	2400b26c 	.word	0x2400b26c

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	b0b1      	sub	sp, #196	@ 0xc4
 800104c:	af06      	add	r7, sp, #24
  /* TEST MARKER: Check if new code is running */
  printf("[MARKER_MAIN] Entered main() function\r\n");
 800104e:	4875      	ldr	r0, [pc, #468]	@ (8001224 <main+0x1dc>)
 8001050:	f019 fd0e 	bl	801aa70 <puts>

  /* USER CODE BEGIN 1 */
  static uint32_t early_rsr_raw = 0; // первое чтение до HAL_Init
  early_rsr_raw = RCC->RSR; /* читаем как можно раньше */
 8001054:	4b74      	ldr	r3, [pc, #464]	@ (8001228 <main+0x1e0>)
 8001056:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800105a:	4a74      	ldr	r2, [pc, #464]	@ (800122c <main+0x1e4>)
 800105c:	6013      	str	r3, [r2, #0]
  uint8_t iwdg_extended_early = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  }
#else
  // Сверхранняя индикация: мигаем LED и подсветкой до HAL_Init (на случай раннего fault)
  // Обе линии висят на порте E по схеме платы; используем макросы HAL для портов/пинов
  // Включаем тактирование основных портов GPIO (A, B, C, D, E, H), чтобы точно покрыть задействованные линии
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b70      	ldr	r3, [pc, #448]	@ (8001228 <main+0x1e0>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	4a6f      	ldr	r2, [pc, #444]	@ (8001228 <main+0x1e0>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001074:	4b6c      	ldr	r3, [pc, #432]	@ (8001228 <main+0x1e0>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	4b69      	ldr	r3, [pc, #420]	@ (8001228 <main+0x1e0>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001088:	4a67      	ldr	r2, [pc, #412]	@ (8001228 <main+0x1e0>)
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001092:	4b65      	ldr	r3, [pc, #404]	@ (8001228 <main+0x1e0>)
 8001094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800109e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a0:	4b61      	ldr	r3, [pc, #388]	@ (8001228 <main+0x1e0>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a6:	4a60      	ldr	r2, [pc, #384]	@ (8001228 <main+0x1e0>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b0:	4b5d      	ldr	r3, [pc, #372]	@ (8001228 <main+0x1e0>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010be:	4b5a      	ldr	r3, [pc, #360]	@ (8001228 <main+0x1e0>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c4:	4a58      	ldr	r2, [pc, #352]	@ (8001228 <main+0x1e0>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ce:	4b56      	ldr	r3, [pc, #344]	@ (8001228 <main+0x1e0>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80010da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010dc:	4b52      	ldr	r3, [pc, #328]	@ (8001228 <main+0x1e0>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e2:	4a51      	ldr	r2, [pc, #324]	@ (8001228 <main+0x1e0>)
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001228 <main+0x1e0>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80010f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001228 <main+0x1e0>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001100:	4a49      	ldr	r2, [pc, #292]	@ (8001228 <main+0x1e0>)
 8001102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110a:	4b47      	ldr	r3, [pc, #284]	@ (8001228 <main+0x1e0>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  GPIO_TypeDef *led_port = Led_Test_GPIO_Port;
 8001118:	4b45      	ldr	r3, [pc, #276]	@ (8001230 <main+0x1e8>)
 800111a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_TypeDef *bl_port  = LCD_Led_GPIO_Port;
 800111e:	4b44      	ldr	r3, [pc, #272]	@ (8001230 <main+0x1e8>)
 8001120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  uint32_t led_mask = Led_Test_Pin;     // битовая маска
 8001124:	2308      	movs	r3, #8
 8001126:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t bl_mask  = LCD_Led_Pin;      // битовая маска
 800112a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int led_idx = __builtin_ctz(led_mask); // индекс пина 0..15
 8001132:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	fab3 f383 	clz	r3, r3
 800113e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int bl_idx  = __builtin_ctz(bl_mask);
 8001142:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  // Настраиваем режим Output для обеих линий (очистить 2 бита MODER и выставить 01)
  led_port->MODER &= ~(3u << (led_idx*2));
 8001152:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2103      	movs	r1, #3
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	401a      	ands	r2, r3
 8001168:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800116c:	601a      	str	r2, [r3, #0]
  led_port->MODER |=  (1u << (led_idx*2));
 800116e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2101      	movs	r1, #1
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	431a      	orrs	r2, r3
 8001182:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001186:	601a      	str	r2, [r3, #0]
  bl_port->MODER  &= ~(3u << (bl_idx*2));
 8001188:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2103      	movs	r1, #3
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	401a      	ands	r2, r3
 800119e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011a2:	601a      	str	r2, [r3, #0]
  bl_port->MODER  |=  (1u << (bl_idx*2));
 80011a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2101      	movs	r1, #1
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	431a      	orrs	r2, r3
 80011b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011bc:	601a      	str	r2, [r3, #0]
  // Короткая задержка и три мигания
  for(volatile int i=0;i<100000;i++){ __NOP(); }
 80011be:	2300      	movs	r3, #0
 80011c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011c2:	e003      	b.n	80011cc <main+0x184>
 80011c4:	bf00      	nop
 80011c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011c8:	3301      	adds	r3, #1
 80011ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ce:	4a19      	ldr	r2, [pc, #100]	@ (8001234 <main+0x1ec>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	ddf7      	ble.n	80011c4 <main+0x17c>
  for(int k=0;k<3;k++){
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80011da:	e03c      	b.n	8001256 <main+0x20e>
    led_port->BSRR = led_mask;  // set
 80011dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80011e4:	619a      	str	r2, [r3, #24]
    bl_port->BSRR  = bl_mask;   // set
 80011e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80011ee:	619a      	str	r2, [r3, #24]
    for(volatile int i=0;i<200000;i++){ __NOP(); }
 80011f0:	2300      	movs	r3, #0
 80011f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80011f4:	e003      	b.n	80011fe <main+0x1b6>
 80011f6:	bf00      	nop
 80011f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011fa:	3301      	adds	r3, #1
 80011fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80011fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001200:	4a0d      	ldr	r2, [pc, #52]	@ (8001238 <main+0x1f0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	ddf7      	ble.n	80011f6 <main+0x1ae>
    led_port->BSRR = (led_mask << 16); // reset
 8001206:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800120a:	041a      	lsls	r2, r3, #16
 800120c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001210:	619a      	str	r2, [r3, #24]
    bl_port->BSRR  = (bl_mask  << 16); // reset
 8001212:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001216:	041a      	lsls	r2, r3, #16
 8001218:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800121c:	619a      	str	r2, [r3, #24]
    for(volatile int i=0;i<200000;i++){ __NOP(); }
 800121e:	2300      	movs	r3, #0
 8001220:	633b      	str	r3, [r7, #48]	@ 0x30
 8001222:	e00f      	b.n	8001244 <main+0x1fc>
 8001224:	0801c128 	.word	0x0801c128
 8001228:	58024400 	.word	0x58024400
 800122c:	2400b278 	.word	0x2400b278
 8001230:	58021000 	.word	0x58021000
 8001234:	0001869f 	.word	0x0001869f
 8001238:	00030d3f 	.word	0x00030d3f
 800123c:	bf00      	nop
 800123e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001240:	3301      	adds	r3, #1
 8001242:	633b      	str	r3, [r7, #48]	@ 0x30
 8001244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001246:	4a71      	ldr	r2, [pc, #452]	@ (800140c <main+0x3c4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	ddf7      	ble.n	800123c <main+0x1f4>
  for(int k=0;k<3;k++){
 800124c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001250:	3301      	adds	r3, #1
 8001252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800125a:	2b02      	cmp	r3, #2
 800125c:	ddbe      	ble.n	80011dc <main+0x194>
  }
  // Оставляем финальное состояние: LED = ON, Подсветка = ON (активный высокий)
  led_port->BSRR = led_mask;  // LED on
 800125e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001262:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001266:	619a      	str	r2, [r3, #24]
  bl_port->BSRR  = bl_mask;   // BL on
 8001268:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800126c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001270:	619a      	str	r2, [r3, #24]
#endif
#if DIAG_EXTEND_EXISTING_IWDG
  if(early_rsr_raw & RCC_RSR_IWDG1RSTF){
 8001272:	4b67      	ldr	r3, [pc, #412]	@ (8001410 <main+0x3c8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d016      	beq.n	80012ac <main+0x264>
    // Переинициализация параметров IWDG (его нельзя остановить, но можно растянуть таймаут)
    // Ключ разблокировки
    IWDG1->KR = 0x5555;
 800127e:	4b65      	ldr	r3, [pc, #404]	@ (8001414 <main+0x3cc>)
 8001280:	f245 5255 	movw	r2, #21845	@ 0x5555
 8001284:	601a      	str	r2, [r3, #0]
    // Prescaler = 256 (0x06), максимум для делителя
    IWDG1->PR = 0x06;
 8001286:	4b63      	ldr	r3, [pc, #396]	@ (8001414 <main+0x3cc>)
 8001288:	2206      	movs	r2, #6
 800128a:	605a      	str	r2, [r3, #4]
    // Reload максимум 0x0FFF
    IWDG1->RLR = 0x0FFF;
 800128c:	4b61      	ldr	r3, [pc, #388]	@ (8001414 <main+0x3cc>)
 800128e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001292:	609a      	str	r2, [r3, #8]
    // Дождаться применения (PVU/RVU сброшены)
    while(IWDG1->SR != 0) { /* wait */ }
 8001294:	bf00      	nop
 8001296:	4b5f      	ldr	r3, [pc, #380]	@ (8001414 <main+0x3cc>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1fb      	bne.n	8001296 <main+0x24e>
    // Немедленно перезагрузим
    IWDG1->KR = 0xAAAA;
 800129e:	4b5d      	ldr	r3, [pc, #372]	@ (8001414 <main+0x3cc>)
 80012a0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80012a4:	601a      	str	r2, [r3, #0]
    iwdg_extended_early = 1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#endif

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ac:	f003 f9ce 	bl	800464c <HAL_Init>
#endif

  /* USER CODE BEGIN Init */
  // Счетчик перезагрузок для диагностики
  static uint32_t reboot_count __attribute__((section(".noinit"))) = 0;
  reboot_count++;
 80012b0:	4b59      	ldr	r3, [pc, #356]	@ (8001418 <main+0x3d0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a58      	ldr	r2, [pc, #352]	@ (8001418 <main+0x3d0>)
 80012b8:	6013      	str	r3, [r2, #0]
  printf("[BOOT] Device reboot count: %lu\r\n", (unsigned long)reboot_count);
 80012ba:	4b57      	ldr	r3, [pc, #348]	@ (8001418 <main+0x3d0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	4856      	ldr	r0, [pc, #344]	@ (800141c <main+0x3d4>)
 80012c2:	f019 fb6d 	bl	801a9a0 <iprintf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c6:	f000 fb39 	bl	800193c <SystemClock_Config>
#if defined(DIAG_TRAP_STAGE) && (DIAG_TRAP_STAGE==2)
  diag_trap(2);
#endif

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012ca:	f000 fbb3 	bl	8001a34 <PeriphCommonClock_Config>
  diag_trap(3);
#endif

  /* USER CODE BEGIN SysInit */
  /* РАННИЙ UART для диагностики: инициализация сразу после тактирования */
  MX_USART1_UART_Init();
 80012ce:	f001 f87d 	bl	80023cc <MX_USART1_UART_Init>
  setvbuf(stdout, NULL, _IONBF, 0);
 80012d2:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <main+0x3d8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6898      	ldr	r0, [r3, #8]
 80012d8:	2300      	movs	r3, #0
 80012da:	2202      	movs	r2, #2
 80012dc:	2100      	movs	r1, #0
 80012de:	f019 fbcf 	bl	801aa80 <setvbuf>
  static uint32_t build_counter __attribute__((section(".noinit"))) = 0;
  build_counter++;
 80012e2:	4b50      	ldr	r3, [pc, #320]	@ (8001424 <main+0x3dc>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001424 <main+0x3dc>)
 80012ea:	6013      	str	r3, [r2, #0]
  printf("[BOOT] BUILD_TS=%s-%s COUNT=%lu SIGN=0x%08lX\r\n", __DATE__, __TIME__, (unsigned long)build_counter, (unsigned long)build_signature_hex);
 80012ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001424 <main+0x3dc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001428 <main+0x3e0>)
 80012f2:	9200      	str	r2, [sp, #0]
 80012f4:	4a4d      	ldr	r2, [pc, #308]	@ (800142c <main+0x3e4>)
 80012f6:	494e      	ldr	r1, [pc, #312]	@ (8001430 <main+0x3e8>)
 80012f8:	484e      	ldr	r0, [pc, #312]	@ (8001434 <main+0x3ec>)
 80012fa:	f019 fb51 	bl	801a9a0 <iprintf>
  printf("[BOOT] DIAG_REV=%d\r\n", 4);
 80012fe:	2104      	movs	r1, #4
 8001300:	484d      	ldr	r0, [pc, #308]	@ (8001438 <main+0x3f0>)
 8001302:	f019 fb4d 	bl	801a9a0 <iprintf>
  printf("[EARLY] RSR=0x%08lX (pre-HAL_Init snapshot)\r\n", (unsigned long)early_rsr_raw);
 8001306:	4b42      	ldr	r3, [pc, #264]	@ (8001410 <main+0x3c8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	484b      	ldr	r0, [pc, #300]	@ (800143c <main+0x3f4>)
 800130e:	f019 fb47 	bl	801a9a0 <iprintf>
  if(iwdg_extended_early){ printf("[EARLY] IWDG_EXTENDED presc=256 reload=0x0FFF\r\n"); }
 8001312:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <main+0x2d8>
 800131a:	4849      	ldr	r0, [pc, #292]	@ (8001440 <main+0x3f8>)
 800131c:	f019 fba8 	bl	801aa70 <puts>
  log_reset_cause();
 8001320:	f7ff fc36 	bl	8000b90 <log_reset_cause>
  printf("[BOOT] FW_VERSION=%s DATE=%s TIME=%s HASH=%s\r\n", fw_version, fw_build_date, fw_build_time, fw_git_hash);
 8001324:	4b47      	ldr	r3, [pc, #284]	@ (8001444 <main+0x3fc>)
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	4b47      	ldr	r3, [pc, #284]	@ (8001448 <main+0x400>)
 800132a:	4a48      	ldr	r2, [pc, #288]	@ (800144c <main+0x404>)
 800132c:	4948      	ldr	r1, [pc, #288]	@ (8001450 <main+0x408>)
 800132e:	4849      	ldr	r0, [pc, #292]	@ (8001454 <main+0x40c>)
 8001330:	f019 fb36 	bl	801a9a0 <iprintf>
  printf("[BOOT] %s\r\n", fw_build_full);
 8001334:	4948      	ldr	r1, [pc, #288]	@ (8001458 <main+0x410>)
 8001336:	4849      	ldr	r0, [pc, #292]	@ (800145c <main+0x414>)
 8001338:	f019 fb32 	bl	801a9a0 <iprintf>
  printf("[UART] USART1=115200 8N1 ready\r\n");
 800133c:	4848      	ldr	r0, [pc, #288]	@ (8001460 <main+0x418>)
 800133e:	f019 fb97 	bl	801aa70 <puts>
#if 1
  // Дополнительная диагностика debug и option bytes
  uint32_t dhcsr = CoreDebug->DHCSR;
 8001342:	4b48      	ldr	r3, [pc, #288]	@ (8001464 <main+0x41c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t dbg_cr = DBGMCU->CR;
 800134a:	4b47      	ldr	r3, [pc, #284]	@ (8001468 <main+0x420>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint32_t opt_raw = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	67fb      	str	r3, [r7, #124]	@ 0x7c
#ifdef FLASH_OPTSR_CUR
  opt_raw = FLASH->OPTSR_CUR; // Текущие опции (read-only)
#elif defined(FLASH_OPTSR_PRG)
  opt_raw = FLASH->OPTSR_PRG;
#endif
  printf("[BOOT] DBG:DHCSR=0x%08lX C_DEBUGEN=%lu S_SLEEP=%lu S_LOCKUP=%lu CR=0x%08lX OPTSR=0x%08lX\r\n",
 8001356:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800135a:	f003 0101 	and.w	r1, r3, #1
         (unsigned long)dhcsr,
         (unsigned long)((dhcsr>>0) & 1),
         (unsigned long)((dhcsr>>18)&1),
 800135e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001362:	0c9b      	lsrs	r3, r3, #18
  printf("[BOOT] DBG:DHCSR=0x%08lX C_DEBUGEN=%lu S_SLEEP=%lu S_LOCKUP=%lu CR=0x%08lX OPTSR=0x%08lX\r\n",
 8001364:	f003 0001 	and.w	r0, r3, #1
         (unsigned long)((dhcsr>>19)&1),
 8001368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800136c:	0cdb      	lsrs	r3, r3, #19
  printf("[BOOT] DBG:DHCSR=0x%08lX C_DEBUGEN=%lu S_SLEEP=%lu S_LOCKUP=%lu CR=0x%08lX OPTSR=0x%08lX\r\n",
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001374:	9202      	str	r2, [sp, #8]
 8001376:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800137a:	9201      	str	r2, [sp, #4]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001386:	4839      	ldr	r0, [pc, #228]	@ (800146c <main+0x424>)
 8001388:	f019 fb0a 	bl	801a9a0 <iprintf>
         (unsigned long)dbg_cr,
         (unsigned long)opt_raw);
#endif
  #ifdef DIAG_DISABLE_IWDG
    printf("[BOOT] IWDG_CFG=DISABLED (compile-time macro)\r\n");
 800138c:	4838      	ldr	r0, [pc, #224]	@ (8001470 <main+0x428>)
 800138e:	f019 fb6f 	bl	801aa70 <puts>
  #else
    printf("[BOOT] IWDG_CFG=ENABLED (will init later)\r\n");
  #endif
  boot_diag_init(early_rsr_raw);
 8001392:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <main+0x3c8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fd68 	bl	8000e6c <boot_diag_init>
  LCD_ShowString_Size(2, 2, "HELLO LCD", 16, YELLOW, BLACK);
  LCD_ShowString_Size(2, 20, "SAFE_MINIMAL", 12, WHITE, BLACK);
  printf("[SAFE] LCD init done, text rendered.\r\n");
  /* USB CDC в этой ветке не инициализируем, т.к. кабеля нет */
#else
  MX_GPIO_Init();
 800139c:	f001 f886 	bl	80024ac <MX_GPIO_Init>
  MX_DMA_Init();
 80013a0:	f001 f860 	bl	8002464 <MX_DMA_Init>
  MX_SPI4_Init();
 80013a4:	f000 fcf8 	bl	8001d98 <MX_SPI4_Init>
  MX_TIM1_Init();
 80013a8:	f000 fd4e 	bl	8001e48 <MX_TIM1_Init>
  MX_SPI2_Init();
 80013ac:	f000 fc9e 	bl	8001cec <MX_SPI2_Init>
  MX_TIM6_Init();
 80013b0:	f000 ff10 	bl	80021d4 <MX_TIM6_Init>
  MX_ADC1_Init();
 80013b4:	f000 fb78 	bl	8001aa8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80013b8:	f000 fbf2 	bl	8001ba0 <MX_ADC2_Init>
  MX_DAC1_Init();
 80013bc:	f000 fc5a 	bl	8001c74 <MX_DAC1_Init>
  MX_TIM2_Init();
 80013c0:	f000 fde6 	bl	8001f90 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013c4:	f000 fe74 	bl	80020b0 <MX_TIM3_Init>
  MX_TIM15_Init();
 80013c8:	f000 ff44 	bl	8002254 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 80013cc:	f000 fffe 	bl	80023cc <MX_USART1_UART_Init>
  printf("[INIT] Before USB_DEVICE_Init\r\n");
 80013d0:	4828      	ldr	r0, [pc, #160]	@ (8001474 <main+0x42c>)
 80013d2:	f019 fb4d 	bl	801aa70 <puts>
  MX_USB_DEVICE_Init();
 80013d6:	f013 fcc1 	bl	8014d5c <MX_USB_DEVICE_Init>
  /* Полностью исключаем инициализацию IWDG (даже если где-то потерян DIAG_DISABLE_IWDG) */
  printf("[DIAG] IWDG hard-disabled (no init call)\r\n");
 80013da:	4827      	ldr	r0, [pc, #156]	@ (8001478 <main+0x430>)
 80013dc:	f019 fb48 	bl	801aa70 <puts>
  g_progress_flags |= BOOT_PROGRESS_AFTER_USB_INIT;
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <main+0x434>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	4a24      	ldr	r2, [pc, #144]	@ (800147c <main+0x434>)
 80013ea:	6013      	str	r3, [r2, #0]
#endif
  /* USER CODE BEGIN 2 */
  // Безбуферный stdout, баннер сборки (перенесено выше)
  printf("[USB] DEVICE_INIT\r\n");
 80013ec:	4824      	ldr	r0, [pc, #144]	@ (8001480 <main+0x438>)
 80013ee:	f019 fb3f 	bl	801aa70 <puts>
  HAL_GPIO_WritePin(DATA_READY_GPIO_Port, DATA_READY_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f8:	4822      	ldr	r0, [pc, #136]	@ (8001484 <main+0x43c>)
 80013fa:	f008 fa69 	bl	80098d0 <HAL_GPIO_WritePin>
  // Запускаем TIM6 с прерыванием для диагностического мигания (LED в HAL_TIM_PeriodElapsedCallback)
  HAL_TIM_Base_Start_IT(&htim6);
 80013fe:	4822      	ldr	r0, [pc, #136]	@ (8001488 <main+0x440>)
 8001400:	f00d fe36 	bl	800f070 <HAL_TIM_Base_Start_IT>

  // Запуск каналов для TIM2
#if !SAFE_MINIMAL
    for(volatile uint32_t d=0; d<200000000UL; ++d){ __NOP(); }
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001408:	e044      	b.n	8001494 <main+0x44c>
 800140a:	bf00      	nop
 800140c:	00030d3f 	.word	0x00030d3f
 8001410:	2400b278 	.word	0x2400b278
 8001414:	58004800 	.word	0x58004800
 8001418:	2401aff4 	.word	0x2401aff4
 800141c:	0801c150 	.word	0x0801c150
 8001420:	24000254 	.word	0x24000254
 8001424:	2401aff8 	.word	0x2401aff8
 8001428:	a5b6c7d8 	.word	0xa5b6c7d8
 800142c:	0801c174 	.word	0x0801c174
 8001430:	0801c180 	.word	0x0801c180
 8001434:	0801c18c 	.word	0x0801c18c
 8001438:	0801c1bc 	.word	0x0801c1bc
 800143c:	0801c1d4 	.word	0x0801c1d4
 8001440:	0801c204 	.word	0x0801c204
 8001444:	0801dda4 	.word	0x0801dda4
 8001448:	0801dd98 	.word	0x0801dd98
 800144c:	0801dd8c 	.word	0x0801dd8c
 8001450:	0801dd84 	.word	0x0801dd84
 8001454:	0801c234 	.word	0x0801c234
 8001458:	0801ddac 	.word	0x0801ddac
 800145c:	0801c264 	.word	0x0801c264
 8001460:	0801c270 	.word	0x0801c270
 8001464:	e000edf0 	.word	0xe000edf0
 8001468:	5c001000 	.word	0x5c001000
 800146c:	0801c290 	.word	0x0801c290
 8001470:	0801c2ec 	.word	0x0801c2ec
 8001474:	0801c31c 	.word	0x0801c31c
 8001478:	0801c33c 	.word	0x0801c33c
 800147c:	2400b274 	.word	0x2400b274
 8001480:	0801c368 	.word	0x0801c368
 8001484:	58020c00 	.word	0x58020c00
 8001488:	2400b008 	.word	0x2400b008
 800148c:	bf00      	nop
 800148e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001490:	3301      	adds	r3, #1
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001496:	4ab0      	ldr	r2, [pc, #704]	@ (8001758 <main+0x710>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d9f7      	bls.n	800148c <main+0x444>
  MX_GPIO_Init();
 800149c:	f001 f806 	bl	80024ac <MX_GPIO_Init>
  /* Trap после MX_GPIO_Init */
#if defined(DIAG_TRAP_STAGE) && (DIAG_TRAP_STAGE==4)
  diag_trap(4);
#endif
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);  // Контроль
 80014a0:	2108      	movs	r1, #8
 80014a2:	48ae      	ldr	r0, [pc, #696]	@ (800175c <main+0x714>)
 80014a4:	f00d fe6a 	bl	800f17c <HAL_TIM_OC_Start>

  // Установка скважности для TIM2 (CH1 и CH2) — 50%
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2499); // 50% скважность
 80014a8:	4bac      	ldr	r3, [pc, #688]	@ (800175c <main+0x714>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80014b0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 2499); // 50% скважность
 80014b2:	4baa      	ldr	r3, [pc, #680]	@ (800175c <main+0x714>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80014ba:	639a      	str	r2, [r3, #56]	@ 0x38

  // Запуск каналов для TIM3
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Фаза
 80014bc:	2100      	movs	r1, #0
 80014be:	48a8      	ldr	r0, [pc, #672]	@ (8001760 <main+0x718>)
 80014c0:	f00d ffd0 	bl	800f464 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Меандр
 80014c4:	2104      	movs	r1, #4
 80014c6:	48a6      	ldr	r0, [pc, #664]	@ (8001760 <main+0x718>)
 80014c8:	f00d ffcc 	bl	800f464 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Контроль
 80014cc:	2108      	movs	r1, #8
 80014ce:	48a4      	ldr	r0, [pc, #656]	@ (8001760 <main+0x718>)
 80014d0:	f00d ffc8 	bl	800f464 <HAL_TIM_PWM_Start>

  // Установка скважности для TIM3 (CH1, CH2, CH3) — 50%
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2499); // 50% скважность
 80014d4:	4ba2      	ldr	r3, [pc, #648]	@ (8001760 <main+0x718>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80014dc:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2499); // 50% скважность
 80014de:	4ba0      	ldr	r3, [pc, #640]	@ (8001760 <main+0x718>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80014e6:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 2499); // 50% скважность
 80014e8:	4b9d      	ldr	r3, [pc, #628]	@ (8001760 <main+0x718>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80014f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  g_progress_flags |= BOOT_PROGRESS_AFTER_ADC;
 80014f2:	4b9c      	ldr	r3, [pc, #624]	@ (8001764 <main+0x71c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	4a9a      	ldr	r2, [pc, #616]	@ (8001764 <main+0x71c>)
 80014fc:	6013      	str	r3, [r2, #0]
*/


  // --- ИНИЦИАЛИЗАЦИЯ LCD ---
#if !SAFE_MINIMAL
  LCD_Init();
 80014fe:	f002 fd5d 	bl	8003fbc <LCD_Init>
  LCD_FillRect(0, 0, LCD_W, LCD_H, BLACK);
 8001502:	2300      	movs	r3, #0
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2350      	movs	r3, #80	@ 0x50
 8001508:	22a0      	movs	r2, #160	@ 0xa0
 800150a:	2100      	movs	r1, #0
 800150c:	2000      	movs	r0, #0
 800150e:	f002 fe6f 	bl	80041f0 <LCD_FillRect>
  /* Гарантированно включаем подсветку после инициализации LCD независимо от режима PWM/GPIO */
  BL_ON();
 8001512:	2200      	movs	r2, #0
 8001514:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001518:	4893      	ldr	r0, [pc, #588]	@ (8001768 <main+0x720>)
 800151a:	f008 f9d9 	bl	80098d0 <HAL_GPIO_WritePin>
#if 1
  g_progress_flags |= BOOT_PROGRESS_AFTER_PWM;
 800151e:	4b91      	ldr	r3, [pc, #580]	@ (8001764 <main+0x71c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	4a8f      	ldr	r2, [pc, #572]	@ (8001764 <main+0x71c>)
 8001528:	6013      	str	r3, [r2, #0]
  for (int y = stage_count*12; y < 160; y += 8) {
    LCD_FillRect(0, y, 160, 8, BLACK);
  }
#endif
#else
  printf("[PWM] PWM disabled by DISABLE_PWM_TEST or FORCE_BL_GPIO\r\n");
 800152a:	4890      	ldr	r0, [pc, #576]	@ (800176c <main+0x724>)
 800152c:	f019 faa0 	bl	801aa70 <puts>
#endif
#endif // !SAFE_MINIMAL

  // Код инициализации, который должен выполняться всегда
  printf("[INIT] Starting common initialization...\r\n");
 8001530:	488f      	ldr	r0, [pc, #572]	@ (8001770 <main+0x728>)
 8001532:	f019 fa9d 	bl	801aa70 <puts>

  // Подготавливаем инициализационные сообщения (отключено)
  init_messages_ready = 0; // ничего не выводим
 8001536:	4b8f      	ldr	r3, [pc, #572]	@ (8001774 <main+0x72c>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]

  // Включаем детектор USB питания (для встроенного FS PHY)
  HAL_PWREx_EnableUSBVoltageDetector();
 800153c:	f009 fd02 	bl	800af44 <HAL_PWREx_EnableUSBVoltageDetector>
  printf("[INIT] USB voltage detector enabled\r\n");
 8001540:	488d      	ldr	r0, [pc, #564]	@ (8001778 <main+0x730>)
 8001542:	f019 fa95 	bl	801aa70 <puts>
  // В минимальном режиме теперь тоже запускаем USB для отображения статуса
  usb_cdc_init();
  usb_cdc_cfg()->streaming = 0; // пока отключено
#else
  #if !SAFE_MINIMAL
    usb_cdc_init();
 8001546:	f002 fcf5 	bl	8003f34 <usb_stream_init>
    usb_cdc_cfg()->streaming = 0;
 800154a:	f002 fb4d 	bl	8003be8 <usb_stream_cfg>
 800154e:	4603      	mov	r3, r0
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
  #endif
#endif

  // Первичная отметка для вывода статуса USB / буквы U
  UpdateLCDStatus();
 8001554:	f001 f8da 	bl	800270c <UpdateLCDStatus>

  // Вывод краткой информации об устройстве USB при запуске
  #if !SAFE_MINIMAL
  {
    uint16_t vid = USBD_Desc_GetVID();
 8001558:	f018 fd9f 	bl	801a09a <USBD_Desc_GetVID>
 800155c:	4603      	mov	r3, r0
 800155e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    uint16_t pid = USBD_Desc_GetPID();
 8001562:	f018 fda3 	bl	801a0ac <USBD_Desc_GetPID>
 8001566:	4603      	mov	r3, r0
 8001568:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    uint16_t lang= USBD_Desc_GetLangID();
 800156c:	f018 fda7 	bl	801a0be <USBD_Desc_GetLangID>
 8001570:	4603      	mov	r3, r0
 8001572:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    const char* mfg = USBD_Desc_GetManufacturer();
 8001576:	f018 fdab 	bl	801a0d0 <USBD_Desc_GetManufacturer>
 800157a:	6738      	str	r0, [r7, #112]	@ 0x70
    const char* prd = USBD_Desc_GetProduct();
 800157c:	f018 fdb2 	bl	801a0e4 <USBD_Desc_GetProduct>
 8001580:	66f8      	str	r0, [r7, #108]	@ 0x6c
    printf("[USB] VID=0x%04X PID=0x%04X LANGID=%u\r\n", vid, pid, (unsigned)lang);
 8001582:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 8001586:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 800158a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800158e:	487b      	ldr	r0, [pc, #492]	@ (800177c <main+0x734>)
 8001590:	f019 fa06 	bl	801a9a0 <iprintf>
    printf("[USB] MFG=\"%s\" PROD=\"%s\"\r\n", mfg, prd);
 8001594:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001596:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001598:	4879      	ldr	r0, [pc, #484]	@ (8001780 <main+0x738>)
 800159a:	f019 fa01 	bl	801a9a0 <iprintf>
    // Короткая строка на LCD
    char line[32];
  /* Переносим строку VID/PID ниже (y=36), чтобы не конфликтовать с динамической строкой TX */
  snprintf(line, sizeof(line), "VID:%04X PID:%04X", vid, pid);
 800159e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80015a2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80015a6:	f107 000c 	add.w	r0, r7, #12
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	4a75      	ldr	r2, [pc, #468]	@ (8001784 <main+0x73c>)
 80015b0:	2120      	movs	r1, #32
 80015b2:	f019 fb19 	bl	801abe8 <sniprintf>
  LCD_ShowString_Size(1, 65, line, 12, WHITE, BLACK);
 80015b6:	f107 020c 	add.w	r2, r7, #12
 80015ba:	2300      	movs	r3, #0
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	230c      	movs	r3, #12
 80015c6:	2141      	movs	r1, #65	@ 0x41
 80015c8:	2001      	movs	r0, #1
 80015ca:	f002 fdc7 	bl	800415c <LCD_ShowString_Size>
  }
  #endif

  #if !SAFE_MINIMAL
  printf("[INIT] USB initialization completed\r\n");
 80015ce:	486e      	ldr	r0, [pc, #440]	@ (8001788 <main+0x740>)
 80015d0:	f019 fa4e 	bl	801aa70 <puts>
  #endif


  // Запуск АЦП с DMA через модуль adc_stream (перенумеровано после LCD)
#if !MINIMAL_BRINGUP && !SAFE_MINIMAL
  CHECK(adc_stream_start(&hadc1, &hadc2), 1001); // если ошибка -> Error_Handler
 80015d4:	496d      	ldr	r1, [pc, #436]	@ (800178c <main+0x744>)
 80015d6:	486e      	ldr	r0, [pc, #440]	@ (8001790 <main+0x748>)
 80015d8:	f7ff f85e 	bl	8000698 <adc_stream_start>
 80015dc:	4603      	mov	r3, r0
 80015de:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 80015e2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <main+0x5ae>
 80015ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001794 <main+0x74c>)
 80015ec:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	f001 f897 	bl	8002724 <Error_Handler>
  STAGE(21,"ADCSTR");
  // --- FIX TIM15 SLAVE RESET HANG ---
  __HAL_TIM_DISABLE(&htim15);
 80015f6:	4b68      	ldr	r3, [pc, #416]	@ (8001798 <main+0x750>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a1a      	ldr	r2, [r3, #32]
 80015fc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10f      	bne.n	8001626 <main+0x5de>
 8001606:	4b64      	ldr	r3, [pc, #400]	@ (8001798 <main+0x750>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6a1a      	ldr	r2, [r3, #32]
 800160c:	f240 4344 	movw	r3, #1092	@ 0x444
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d107      	bne.n	8001626 <main+0x5de>
 8001616:	4b60      	ldr	r3, [pc, #384]	@ (8001798 <main+0x750>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b5e      	ldr	r3, [pc, #376]	@ (8001798 <main+0x750>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0201 	bic.w	r2, r2, #1
 8001624:	601a      	str	r2, [r3, #0]
  /* keep SMCR as configured (slave reset to ITR1) */
  __HAL_TIM_SET_COUNTER(&htim15,0);
 8001626:	4b5c      	ldr	r3, [pc, #368]	@ (8001798 <main+0x750>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24

  // Диагностика перед запуском TIM15
  printf("[TIM15] Pre-Start: CR1=0x%08lX CR2=0x%08lX SMCR=0x%08lX SR=0x%08lX DIER=0x%08lX PSC=%lu ARR=%lu CNT=%lu\r\n",
     (unsigned long)TIM15->CR1, (unsigned long)TIM15->CR2, (unsigned long)TIM15->SMCR,
 800162e:	4b5b      	ldr	r3, [pc, #364]	@ (800179c <main+0x754>)
 8001630:	681d      	ldr	r5, [r3, #0]
 8001632:	4b5a      	ldr	r3, [pc, #360]	@ (800179c <main+0x754>)
 8001634:	685e      	ldr	r6, [r3, #4]
 8001636:	4b59      	ldr	r3, [pc, #356]	@ (800179c <main+0x754>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	607b      	str	r3, [r7, #4]
     (unsigned long)TIM15->SR, (unsigned long)TIM15->DIER,
 800163c:	4b57      	ldr	r3, [pc, #348]	@ (800179c <main+0x754>)
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	4a56      	ldr	r2, [pc, #344]	@ (800179c <main+0x754>)
 8001642:	68d2      	ldr	r2, [r2, #12]
     (unsigned long)TIM15->PSC, (unsigned long)TIM15->ARR, (unsigned long)TIM15->CNT);
 8001644:	4955      	ldr	r1, [pc, #340]	@ (800179c <main+0x754>)
 8001646:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8001648:	4854      	ldr	r0, [pc, #336]	@ (800179c <main+0x754>)
 800164a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800164c:	4c53      	ldr	r4, [pc, #332]	@ (800179c <main+0x754>)
 800164e:	6a64      	ldr	r4, [r4, #36]	@ 0x24
  printf("[TIM15] Pre-Start: CR1=0x%08lX CR2=0x%08lX SMCR=0x%08lX SR=0x%08lX DIER=0x%08lX PSC=%lu ARR=%lu CNT=%lu\r\n",
 8001650:	9404      	str	r4, [sp, #16]
 8001652:	9003      	str	r0, [sp, #12]
 8001654:	9102      	str	r1, [sp, #8]
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4632      	mov	r2, r6
 800165e:	4629      	mov	r1, r5
 8001660:	484f      	ldr	r0, [pc, #316]	@ (80017a0 <main+0x758>)
 8001662:	f019 f99d 	bl	801a9a0 <iprintf>
  // Если состояние HAL не READY, попытаемся принудительно вернуть READY для обхода зависания
  if (htim15.State != HAL_TIM_STATE_READY) {
 8001666:	4b4c      	ldr	r3, [pc, #304]	@ (8001798 <main+0x750>)
 8001668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d00b      	beq.n	800168a <main+0x642>
    printf("[TIM15] State=%d (not READY), forcing READY\r\n", htim15.State);
 8001672:	4b49      	ldr	r3, [pc, #292]	@ (8001798 <main+0x750>)
 8001674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4619      	mov	r1, r3
 800167c:	4849      	ldr	r0, [pc, #292]	@ (80017a4 <main+0x75c>)
 800167e:	f019 f98f 	bl	801a9a0 <iprintf>
    htim15.State = HAL_TIM_STATE_READY;
 8001682:	4b45      	ldr	r3, [pc, #276]	@ (8001798 <main+0x750>)
 8001684:	2201      	movs	r2, #1
 8001686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }
  {
    HAL_StatusTypeDef st = HAL_TIM_Base_Start(&htim15);
 800168a:	4843      	ldr	r0, [pc, #268]	@ (8001798 <main+0x750>)
 800168c:	f00d fc72 	bl	800ef74 <HAL_TIM_Base_Start>
 8001690:	4603      	mov	r3, r0
 8001692:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
    if (st != HAL_OK) {
 8001696:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00f      	beq.n	80016be <main+0x676>
      printf("[TIM15][ERR] HAL_TIM_Base_Start status=%d (state=%d) -> entering Error_Handler\r\n", st, htim15.State);
 800169e:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80016a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001798 <main+0x750>)
 80016a4:	f892 203d 	ldrb.w	r2, [r2, #61]	@ 0x3d
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	483e      	ldr	r0, [pc, #248]	@ (80017a8 <main+0x760>)
 80016ae:	f019 f977 	bl	801a9a0 <iprintf>
      err_code = 1002;
 80016b2:	4b38      	ldr	r3, [pc, #224]	@ (8001794 <main+0x74c>)
 80016b4:	f240 32ea 	movw	r2, #1002	@ 0x3ea
 80016b8:	601a      	str	r2, [r3, #0]
      Error_Handler();
 80016ba:	f001 f833 	bl	8002724 <Error_Handler>
    }
  }
  printf("[TIM15] Started: CR1=0x%08lX SR=0x%08lX CNT=%lu\r\n", (unsigned long)TIM15->CR1, (unsigned long)TIM15->SR, (unsigned long)TIM15->CNT);
 80016be:	4b37      	ldr	r3, [pc, #220]	@ (800179c <main+0x754>)
 80016c0:	6819      	ldr	r1, [r3, #0]
 80016c2:	4b36      	ldr	r3, [pc, #216]	@ (800179c <main+0x754>)
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	4b35      	ldr	r3, [pc, #212]	@ (800179c <main+0x754>)
 80016c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ca:	4838      	ldr	r0, [pc, #224]	@ (80017ac <main+0x764>)
 80016cc:	f019 f968 	bl	801a9a0 <iprintf>

  
  // Запускаем PWM канал TIM15_CH1 (PE5) для наблюдения на осциллографе
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80016d0:	2100      	movs	r1, #0
 80016d2:	4831      	ldr	r0, [pc, #196]	@ (8001798 <main+0x750>)
 80016d4:	f00d fec6 	bl	800f464 <HAL_TIM_PWM_Start>
  STAGE(22,"TRGON");
  
  HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016de:	4834      	ldr	r0, [pc, #208]	@ (80017b0 <main+0x768>)
 80016e0:	f008 f8f6 	bl	80098d0 <HAL_GPIO_WritePin>
  UpdateLCDStatus();
 80016e4:	f001 f812 	bl	800270c <UpdateLCDStatus>
  // SAFE_MINIMAL: ничего не запускаем из ADC/TIM15
#endif



  printf("[INIT] ADC and TIM15 initialization completed\r\n");
 80016e8:	4832      	ldr	r0, [pc, #200]	@ (80017b4 <main+0x76c>)
 80016ea:	f019 f9c1 	bl	801aa70 <puts>

  printf("[INIT] Entering main loop...\r\n");
 80016ee:	4832      	ldr	r0, [pc, #200]	@ (80017b8 <main+0x770>)
 80016f0:	f019 f9be 	bl	801aa70 <puts>
  /* Trap перед входом в основной цикл */
#if defined(DIAG_TRAP_STAGE) && (DIAG_TRAP_STAGE==5)
  diag_trap(5);
#endif
  g_progress_flags |= BOOT_PROGRESS_ENTER_LOOP;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <main+0x71c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	4a19      	ldr	r2, [pc, #100]	@ (8001764 <main+0x71c>)
 80016fe:	6013      	str	r3, [r2, #0]
  /* Включаем DWT счётчик циклов (если не включён) для диагностики зависания */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001700:	4b2e      	ldr	r3, [pc, #184]	@ (80017bc <main+0x774>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4a2d      	ldr	r2, [pc, #180]	@ (80017bc <main+0x774>)
 8001706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800170a:	60d3      	str	r3, [r2, #12]
  DWT->LAR = 0xC5ACCE55; /* разблокировка (для некоторых ревизий) */
 800170c:	4b2c      	ldr	r3, [pc, #176]	@ (80017c0 <main+0x778>)
 800170e:	4a2d      	ldr	r2, [pc, #180]	@ (80017c4 <main+0x77c>)
 8001710:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
  DWT->CYCCNT = 0;
 8001714:	4b2a      	ldr	r3, [pc, #168]	@ (80017c0 <main+0x778>)
 8001716:	2200      	movs	r2, #0
 8001718:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800171a:	4b29      	ldr	r3, [pc, #164]	@ (80017c0 <main+0x778>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a28      	ldr	r2, [pc, #160]	@ (80017c0 <main+0x778>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6013      	str	r3, [r2, #0]
  uint32_t last_diag_ms = 0; /* для периодического аварийного принта даже если * не печатается */
 8001726:	2300      	movs	r3, #0
 8001728:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  uint32_t dwt_start = DWT->CYCCNT; /* начало итерации */
 800172a:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <main+0x778>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	663b      	str	r3, [r7, #96]	@ 0x60
    static uint32_t loop_count = 0;
    loop_count++;
 8001730:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <main+0x780>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	4a24      	ldr	r2, [pc, #144]	@ (80017c8 <main+0x780>)
 8001738:	6013      	str	r3, [r2, #0]
    main_loop_heartbeat++;
 800173a:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <main+0x784>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	4a22      	ldr	r2, [pc, #136]	@ (80017cc <main+0x784>)
 8001742:	6013      	str	r3, [r2, #0]
    last_heartbeat_ms = HAL_GetTick();
 8001744:	f003 f808 	bl	8004758 <HAL_GetTick>
 8001748:	4603      	mov	r3, r0
 800174a:	4a21      	ldr	r2, [pc, #132]	@ (80017d0 <main+0x788>)
 800174c:	6013      	str	r3, [r2, #0]
    uint32_t now = last_heartbeat_ms;
 800174e:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <main+0x788>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001754:	e03e      	b.n	80017d4 <main+0x78c>
 8001756:	bf00      	nop
 8001758:	0bebc1ff 	.word	0x0bebc1ff
 800175c:	2400af70 	.word	0x2400af70
 8001760:	2400afbc 	.word	0x2400afbc
 8001764:	2400b274 	.word	0x2400b274
 8001768:	58021000 	.word	0x58021000
 800176c:	0801c37c 	.word	0x0801c37c
 8001770:	0801c3b8 	.word	0x0801c3b8
 8001774:	2400b264 	.word	0x2400b264
 8001778:	0801c3e4 	.word	0x0801c3e4
 800177c:	0801c40c 	.word	0x0801c40c
 8001780:	0801c434 	.word	0x0801c434
 8001784:	0801c450 	.word	0x0801c450
 8001788:	0801c464 	.word	0x0801c464
 800178c:	2400ada4 	.word	0x2400ada4
 8001790:	2400ad34 	.word	0x2400ad34
 8001794:	2400b268 	.word	0x2400b268
 8001798:	2400b054 	.word	0x2400b054
 800179c:	40014000 	.word	0x40014000
 80017a0:	0801c48c 	.word	0x0801c48c
 80017a4:	0801c4f8 	.word	0x0801c4f8
 80017a8:	0801c528 	.word	0x0801c528
 80017ac:	0801c57c 	.word	0x0801c57c
 80017b0:	58020c00 	.word	0x58020c00
 80017b4:	0801c5b0 	.word	0x0801c5b0
 80017b8:	0801c5e0 	.word	0x0801c5e0
 80017bc:	e000edf0 	.word	0xe000edf0
 80017c0:	e0001000 	.word	0xe0001000
 80017c4:	c5acce55 	.word	0xc5acce55
 80017c8:	2400b27c 	.word	0x2400b27c
 80017cc:	2400b244 	.word	0x2400b244
 80017d0:	2400b248 	.word	0x2400b248
  static uint8_t first_loop=1; if(first_loop){ PROG('M'); first_loop=0; }
 80017d4:	4b49      	ldr	r3, [pc, #292]	@ (80018fc <main+0x8b4>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <main+0x79a>
 80017dc:	4b47      	ldr	r3, [pc, #284]	@ (80018fc <main+0x8b4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
  PROG('A'); // loop start

  // Отложенный лог из TIM6 (убран printf из ISR)
  if (tim6_led_toggled_flag) { tim6_led_toggled_flag = 0; PROG('L'); }
 80017e2:	4b47      	ldr	r3, [pc, #284]	@ (8001900 <main+0x8b8>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <main+0x7aa>
 80017ec:	4b44      	ldr	r3, [pc, #272]	@ (8001900 <main+0x8b8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
    }
  }
  #endif

    // Логируем каждые 10 итераций цикла
  if ((loop_count & 0x3F)==0) { PROG('T'); boot_diag_periodic(now); }
 80017f2:	4b44      	ldr	r3, [pc, #272]	@ (8001904 <main+0x8bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <main+0x7bc>
 80017fe:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001800:	f7ff fbb2 	bl	8000f68 <boot_diag_periodic>
  /* Periodic integrity check for guarded need_recovery */
  if((loop_count & 0x3F)==0){
 8001804:	4b3f      	ldr	r3, [pc, #252]	@ (8001904 <main+0x8bc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800180c:	2b00      	cmp	r3, #0
 800180e:	d126      	bne.n	800185e <main+0x816>
    if(need_recovery_guard.c1 != 0xDEADBEEFUL || need_recovery_guard.c2 != 0xA55AA55AUL){
 8001810:	4b3d      	ldr	r3, [pc, #244]	@ (8001908 <main+0x8c0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a3d      	ldr	r2, [pc, #244]	@ (800190c <main+0x8c4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d104      	bne.n	8001824 <main+0x7dc>
 800181a:	4b3b      	ldr	r3, [pc, #236]	@ (8001908 <main+0x8c0>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4a3c      	ldr	r2, [pc, #240]	@ (8001910 <main+0x8c8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d00c      	beq.n	800183e <main+0x7f6>
      printf("[DIAG][MEM] GUARD_FAIL c1=0x%08lX c2=0x%08lX flag=%u @%p size=%u\r\n",
             (unsigned long)need_recovery_guard.c1, (unsigned long)need_recovery_guard.c2,
 8001824:	4b38      	ldr	r3, [pc, #224]	@ (8001908 <main+0x8c0>)
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	4b37      	ldr	r3, [pc, #220]	@ (8001908 <main+0x8c0>)
 800182a:	689a      	ldr	r2, [r3, #8]
             (unsigned int)need_recovery_guard.flag, (void*)&need_recovery_guard, (unsigned)sizeof(need_recovery_guard));
 800182c:	4b36      	ldr	r3, [pc, #216]	@ (8001908 <main+0x8c0>)
 800182e:	685b      	ldr	r3, [r3, #4]
      printf("[DIAG][MEM] GUARD_FAIL c1=0x%08lX c2=0x%08lX flag=%u @%p size=%u\r\n",
 8001830:	200c      	movs	r0, #12
 8001832:	9001      	str	r0, [sp, #4]
 8001834:	4834      	ldr	r0, [pc, #208]	@ (8001908 <main+0x8c0>)
 8001836:	9000      	str	r0, [sp, #0]
 8001838:	4836      	ldr	r0, [pc, #216]	@ (8001914 <main+0x8cc>)
 800183a:	f019 f8b1 	bl	801a9a0 <iprintf>
    }
    if(need_recovery_guard.flag != 0){
 800183e:	4b32      	ldr	r3, [pc, #200]	@ (8001908 <main+0x8c0>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00b      	beq.n	800185e <main+0x816>
      printf("[DIAG][MEM] need_recovery FLAG SET=%u (c1=0x%08lX c2=0x%08lX) clear->0\r\n",
             (unsigned int)need_recovery_guard.flag,
 8001846:	4b30      	ldr	r3, [pc, #192]	@ (8001908 <main+0x8c0>)
 8001848:	6859      	ldr	r1, [r3, #4]
             (unsigned long)need_recovery_guard.c1, (unsigned long)need_recovery_guard.c2);
 800184a:	4b2f      	ldr	r3, [pc, #188]	@ (8001908 <main+0x8c0>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b2e      	ldr	r3, [pc, #184]	@ (8001908 <main+0x8c0>)
 8001850:	689b      	ldr	r3, [r3, #8]
      printf("[DIAG][MEM] need_recovery FLAG SET=%u (c1=0x%08lX c2=0x%08lX) clear->0\r\n",
 8001852:	4831      	ldr	r0, [pc, #196]	@ (8001918 <main+0x8d0>)
 8001854:	f019 f8a4 	bl	801a9a0 <iprintf>
      need_recovery_guard.flag = 0; /* предотвращаем цикл */
 8001858:	4b2b      	ldr	r3, [pc, #172]	@ (8001908 <main+0x8c0>)
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]

  /* Запуск задачи стриминга: вызываем таск при активном стриме */
  // vendor stream task
#if !SAFE_MINIMAL
  extern uint8_t vnd_is_streaming(void);
  if (vnd_is_streaming()) {
 800185e:	f014 f9d3 	bl	8015c08 <vnd_is_streaming>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <main+0x824>
    extern void Vendor_Stream_Task(void);
    Vendor_Stream_Task();
 8001868:	f015 f90e 	bl	8016a88 <Vendor_Stream_Task>
  }
#endif

    if (need_recovery) {
 800186c:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <main+0x8d4>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d007      	beq.n	8001886 <main+0x83e>
        USBD_DeInit(&hUsbDeviceHS);
#endif
        MX_USB_DEVICE_Init();
        auto_stream_started = 0;
#else
  boot_diag_finalize_before_reset(HAL_GetTick());
 8001876:	f002 ff6f 	bl	8004758 <HAL_GetTick>
 800187a:	4603      	mov	r3, r0
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fba9 	bl	8000fd4 <boot_diag_finalize_before_reset>
  NVIC_SystemReset();
 8001882:	f7ff f8e3 	bl	8000a4c <__NVIC_SystemReset>
    }

  #if ENABLE_UART_HEARTBEAT
  if ((loop_count % 1000u)==0) uart1_raw_putc('.');
  #endif
  if(iwdg_enabled_runtime){ printf("[WARN] IWDG active unexpected\r\n"); }
 8001886:	4b26      	ldr	r3, [pc, #152]	@ (8001920 <main+0x8d8>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <main+0x84e>
 8001890:	4824      	ldr	r0, [pc, #144]	@ (8001924 <main+0x8dc>)
 8001892:	f019 f8ed 	bl	801aa70 <puts>
  /* Подсчёт длительности итерации */
  uint32_t dwt_end = DWT->CYCCNT;
 8001896:	4b24      	ldr	r3, [pc, #144]	@ (8001928 <main+0x8e0>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	65bb      	str	r3, [r7, #88]	@ 0x58
  loop_cycle_accum += (uint32_t)(dwt_end - dwt_start);
 800189c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800189e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018a0:	1ad2      	subs	r2, r2, r3
 80018a2:	4b22      	ldr	r3, [pc, #136]	@ (800192c <main+0x8e4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a20      	ldr	r2, [pc, #128]	@ (800192c <main+0x8e4>)
 80018aa:	6013      	str	r3, [r2, #0]
  loop_cycle_count++;
 80018ac:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <main+0x8e8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001930 <main+0x8e8>)
 80018b4:	6013      	str	r3, [r2, #0]
  uint32_t ms_now = HAL_GetTick();
 80018b6:	f002 ff4f 	bl	8004758 <HAL_GetTick>
 80018ba:	6578      	str	r0, [r7, #84]	@ 0x54
  if(ms_now - loop_cycle_last_report_ms >= 1000 && loop_cycle_count){
 80018bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <main+0x8ec>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018c8:	f4ff af2f 	bcc.w	800172a <main+0x6e2>
 80018cc:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <main+0x8e8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f43f af2a 	beq.w	800172a <main+0x6e2>
    loop_cycle_last_avg = (uint32_t)(loop_cycle_accum / loop_cycle_count);
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <main+0x8e4>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <main+0x8e8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4a15      	ldr	r2, [pc, #84]	@ (8001938 <main+0x8f0>)
 80018e4:	6013      	str	r3, [r2, #0]
    loop_cycle_accum = 0; loop_cycle_count = 0; loop_cycle_last_report_ms = ms_now;
 80018e6:	4b11      	ldr	r3, [pc, #68]	@ (800192c <main+0x8e4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <main+0x8e8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	4a10      	ldr	r2, [pc, #64]	@ (8001934 <main+0x8ec>)
 80018f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f6:	6013      	str	r3, [r2, #0]
  {
 80018f8:	e717      	b.n	800172a <main+0x6e2>
 80018fa:	bf00      	nop
 80018fc:	24000010 	.word	0x24000010
 8001900:	2400b23c 	.word	0x2400b23c
 8001904:	2400b27c 	.word	0x2400b27c
 8001908:	24000004 	.word	0x24000004
 800190c:	deadbeef 	.word	0xdeadbeef
 8001910:	a55aa55a 	.word	0xa55aa55a
 8001914:	0801c600 	.word	0x0801c600
 8001918:	0801c644 	.word	0x0801c644
 800191c:	2400b25c 	.word	0x2400b25c
 8001920:	2400b270 	.word	0x2400b270
 8001924:	0801c690 	.word	0x0801c690
 8001928:	e0001000 	.word	0xe0001000
 800192c:	2400b24c 	.word	0x2400b24c
 8001930:	2400b250 	.word	0x2400b250
 8001934:	2400b254 	.word	0x2400b254
 8001938:	2400b258 	.word	0x2400b258

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b09c      	sub	sp, #112	@ 0x70
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001946:	224c      	movs	r2, #76	@ 0x4c
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f019 fa94 	bl	801ae78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2220      	movs	r2, #32
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f019 fa8e 	bl	801ae78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800195c:	2002      	movs	r0, #2
 800195e:	f009 fab7 	bl	800aed0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	4b32      	ldr	r3, [pc, #200]	@ (8001a30 <SystemClock_Config+0xf4>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	4a31      	ldr	r2, [pc, #196]	@ (8001a30 <SystemClock_Config+0xf4>)
 800196c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001970:	6193      	str	r3, [r2, #24]
 8001972:	4b2f      	ldr	r3, [pc, #188]	@ (8001a30 <SystemClock_Config+0xf4>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800197e:	bf00      	nop
 8001980:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <SystemClock_Config+0xf4>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001988:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800198c:	d1f8      	bne.n	8001980 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800198e:	232b      	movs	r3, #43	@ 0x2b
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001992:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001998:	2301      	movs	r3, #1
 800199a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800199c:	2340      	movs	r3, #64	@ 0x40
 800199e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019a0:	2301      	movs	r3, #1
 80019a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80019a4:	2301      	movs	r3, #1
 80019a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a8:	2302      	movs	r3, #2
 80019aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ac:	2302      	movs	r3, #2
 80019ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80019b0:	2302      	movs	r3, #2
 80019b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80019b4:	232c      	movs	r3, #44	@ 0x2c
 80019b6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80019bc:	2305      	movs	r3, #5
 80019be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019c0:	2302      	movs	r3, #2
 80019c2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80019c4:	230c      	movs	r3, #12
 80019c6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d4:	4618      	mov	r0, r3
 80019d6:	f009 fac5 	bl	800af64 <HAL_RCC_OscConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80019e0:	f000 fea0 	bl	8002724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e4:	233f      	movs	r3, #63	@ 0x3f
 80019e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e8:	2303      	movs	r3, #3
 80019ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80019f0:	2308      	movs	r3, #8
 80019f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80019f4:	2340      	movs	r3, #64	@ 0x40
 80019f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80019f8:	2340      	movs	r3, #64	@ 0x40
 80019fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80019fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a02:	2340      	movs	r3, #64	@ 0x40
 8001a04:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2103      	movs	r1, #3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f009 fe84 	bl	800b718 <HAL_RCC_ClockConfig>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001a16:	f000 fe85 	bl	8002724 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001a1a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2000      	movs	r0, #0
 8001a22:	f00a f82f 	bl	800ba84 <HAL_RCC_MCOConfig>
}
 8001a26:	bf00      	nop
 8001a28:	3770      	adds	r7, #112	@ 0x70
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	58024800 	.word	0x58024800

08001a34 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0ae      	sub	sp, #184	@ 0xb8
 8001a38:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	22b8      	movs	r2, #184	@ 0xb8
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f019 fa19 	bl	801ae78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2
 8001a46:	4a17      	ldr	r2, [pc, #92]	@ (8001aa4 <PeriphCommonClock_Config+0x70>)
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_TIM;
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001a50:	2305      	movs	r3, #5
 8001a52:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8001a54:	2380      	movs	r3, #128	@ 0x80
 8001a56:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001a58:	2304      	movs	r3, #4
 8001a5a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8001a76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a7a:	663b      	str	r3, [r7, #96]	@ 0x60
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8001a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00a fa39 	bl	800bf04 <HAL_RCCEx_PeriphCLKConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <PeriphCommonClock_Config+0x68>
  {
    Error_Handler();
 8001a98:	f000 fe44 	bl	8002724 <Error_Handler>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	37b8      	adds	r7, #184	@ 0xb8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40083000 	.word	0x40083000

08001aa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	@ 0x30
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001aba:	463b      	mov	r3, r7
 8001abc:	2224      	movs	r2, #36	@ 0x24
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f019 f9d9 	bl	801ae78 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ac6:	4b33      	ldr	r3, [pc, #204]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001ac8:	4a33      	ldr	r2, [pc, #204]	@ (8001b98 <MX_ADC1_Init+0xf0>)
 8001aca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001acc:	4b31      	ldr	r3, [pc, #196]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001ad2:	4b30      	ldr	r3, [pc, #192]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ade:	4b2d      	ldr	r3, [pc, #180]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001aea:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001af0:	4b28      	ldr	r3, [pc, #160]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001af6:	4b27      	ldr	r3, [pc, #156]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001afe:	4b25      	ldr	r3, [pc, #148]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001b00:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001b04:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001b06:	4b23      	ldr	r3, [pc, #140]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001b08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001b0e:	4b21      	ldr	r3, [pc, #132]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001b10:	2203      	movs	r2, #3
 8001b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b14:	4b1f      	ldr	r3, [pc, #124]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001b20:	4b1c      	ldr	r3, [pc, #112]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b2e:	4819      	ldr	r0, [pc, #100]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001b30:	f003 f998 	bl	8004e64 <HAL_ADC_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001b3a:	f000 fdf3 	bl	8002724 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b46:	4619      	mov	r1, r3
 8001b48:	4812      	ldr	r0, [pc, #72]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001b4a:	f004 fd31 	bl	80065b0 <HAL_ADCEx_MultiModeConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001b54:	f000 fde6 	bl	8002724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b58:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <MX_ADC1_Init+0xf4>)
 8001b5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b5c:	2306      	movs	r3, #6
 8001b5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b64:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001b68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b78:	463b      	mov	r3, r7
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001b7e:	f003 fcf5 	bl	800556c <HAL_ADC_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001b88:	f000 fdcc 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	3730      	adds	r7, #48	@ 0x30
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	2400ad34 	.word	0x2400ad34
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	0c900008 	.word	0x0c900008

08001ba0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	@ 0x28
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */
  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2224      	movs	r2, #36	@ 0x24
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f019 f963 	bl	801ae78 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */
  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8001c6c <MX_ADC2_Init+0xcc>)
 8001bb6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bc4:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bca:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001bcc:	2204      	movs	r2, #4
 8001bce:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001bd0:	4b25      	ldr	r3, [pc, #148]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001bd6:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001bdc:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001be2:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001bea:	4b1f      	ldr	r3, [pc, #124]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001bec:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001bf0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001bf4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c06:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c1a:	4813      	ldr	r0, [pc, #76]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001c1c:	f003 f922 	bl	8004e64 <HAL_ADC_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001c26:	f000 fd7d 	bl	8002724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <MX_ADC2_Init+0xd0>)
 8001c2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c2e:	2306      	movs	r3, #6
 8001c30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c36:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001c3a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4806      	ldr	r0, [pc, #24]	@ (8001c68 <MX_ADC2_Init+0xc8>)
 8001c50:	f003 fc8c 	bl	800556c <HAL_ADC_ConfigChannel>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 8001c5a:	f000 fd63 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  /* USER CODE END ADC2_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	3728      	adds	r7, #40	@ 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2400ada4 	.word	0x2400ada4
 8001c6c:	40022100 	.word	0x40022100
 8001c70:	10c00010 	.word	0x10c00010

08001c74 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	@ 0x28
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2224      	movs	r2, #36	@ 0x24
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f019 f8f9 	bl	801ae78 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */
  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001c86:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <MX_DAC1_Init+0x70>)
 8001c88:	4a17      	ldr	r2, [pc, #92]	@ (8001ce8 <MX_DAC1_Init+0x74>)
 8001c8a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001c8c:	4815      	ldr	r0, [pc, #84]	@ (8001ce4 <MX_DAC1_Init+0x70>)
 8001c8e:	f004 feb2 	bl	80069f6 <HAL_DAC_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001c98:	f000 fd44 	bl	8002724 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480b      	ldr	r0, [pc, #44]	@ (8001ce4 <MX_DAC1_Init+0x70>)
 8001cb8:	f004 ff20 	bl	8006afc <HAL_DAC_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001cc2:	f000 fd2f 	bl	8002724 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2210      	movs	r2, #16
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	@ (8001ce4 <MX_DAC1_Init+0x70>)
 8001cce:	f004 ff15 	bl	8006afc <HAL_DAC_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001cd8:	f000 fd24 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  /* USER CODE END DAC1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	@ 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2400b134 	.word	0x2400b134
 8001ce8:	40007400 	.word	0x40007400

08001cec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cf0:	4b27      	ldr	r3, [pc, #156]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001cf2:	4a28      	ldr	r2, [pc, #160]	@ (8001d94 <MX_SPI2_Init+0xa8>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cf6:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001cf8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001cfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfe:	4b24      	ldr	r3, [pc, #144]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d04:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d06:	2203      	movs	r2, #3
 8001d08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d0a:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d10:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d16:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d18:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d24:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d2a:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d30:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001d36:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d42:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d68:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <MX_SPI2_Init+0xa4>)
 8001d7c:	f00c fca8 	bl	800e6d0 <HAL_SPI_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001d86:	f000 fccd 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2400ae14 	.word	0x2400ae14
 8001d94:	40003800 	.word	0x40003800

08001d98 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */
  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001d9c:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001d9e:	4a29      	ldr	r2, [pc, #164]	@ (8001e44 <MX_SPI4_Init+0xac>)
 8001da0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001da2:	4b27      	ldr	r3, [pc, #156]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001da4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001da8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001daa:	4b25      	ldr	r3, [pc, #148]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001dac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001db0:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db2:	4b23      	ldr	r3, [pc, #140]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001db4:	2207      	movs	r2, #7
 8001db6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db8:	4b21      	ldr	r3, [pc, #132]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dbe:	4b20      	ldr	r3, [pc, #128]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001dc6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001dca:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dd2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dda:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de0:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001de6:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dec:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001dee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001df2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e2a:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <MX_SPI4_Init+0xa8>)
 8001e2c:	f00c fc50 	bl	800e6d0 <HAL_SPI_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8001e36:	f000 fc75 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */
  /* USER CODE END SPI4_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2400ae9c 	.word	0x2400ae9c
 8001e44:	40013400 	.word	0x40013400

08001e48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b098      	sub	sp, #96	@ 0x60
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	611a      	str	r2, [r3, #16]
 8001e6a:	615a      	str	r2, [r3, #20]
 8001e6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	2234      	movs	r2, #52	@ 0x34
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f018 ffff 	bl	801ae78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e7a:	4b42      	ldr	r3, [pc, #264]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001e7c:	4a42      	ldr	r2, [pc, #264]	@ (8001f88 <MX_TIM1_Init+0x140>)
 8001e7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 274;
 8001e80:	4b40      	ldr	r3, [pc, #256]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001e82:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8001e86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e88:	4b3e      	ldr	r3, [pc, #248]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001e90:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001e94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e96:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e9c:	4b39      	ldr	r3, [pc, #228]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ea2:	4b38      	ldr	r3, [pc, #224]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001ea4:	2280      	movs	r2, #128	@ 0x80
 8001ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ea8:	4836      	ldr	r0, [pc, #216]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001eaa:	f00d fa83 	bl	800f3b4 <HAL_TIM_PWM_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001eb4:	f000 fc36 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001eb8:	2320      	movs	r3, #32
 8001eba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001ebc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ec0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ec6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001eca:	4619      	mov	r1, r3
 8001ecc:	482d      	ldr	r0, [pc, #180]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001ece:	f00e fc93 	bl	80107f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001ed8:	f000 fc24 	bl	8002724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001edc:	2360      	movs	r3, #96	@ 0x60
 8001ede:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ef8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001efc:	2204      	movs	r2, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	4820      	ldr	r0, [pc, #128]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001f02:	f00d fcd3 	bl	800f8ac <HAL_TIM_PWM_ConfigChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001f0c:	f000 fc0a 	bl	8002724 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	4619      	mov	r1, r3
 8001f44:	480f      	ldr	r0, [pc, #60]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001f46:	f00e fcf3 	bl	8010930 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001f50:	f000 fbe8 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  // Разрешаем автоматическое включение основного выхода (MOE) для надёжного старта CH2N
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001f54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4809      	ldr	r0, [pc, #36]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001f60:	f00e fce6 	bl	8010930 <HAL_TIMEx_ConfigBreakDeadTime>
  printf("[PWM] TIM1 initialized: ARR=%lu, PSC=%lu\r\n",
         (unsigned long)htim1.Init.Period, (unsigned long)htim1.Init.Prescaler);
 8001f64:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4a06      	ldr	r2, [pc, #24]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001f6a:	6852      	ldr	r2, [r2, #4]
  printf("[PWM] TIM1 initialized: ARR=%lu, PSC=%lu\r\n",
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4807      	ldr	r0, [pc, #28]	@ (8001f8c <MX_TIM1_Init+0x144>)
 8001f70:	f018 fd16 	bl	801a9a0 <iprintf>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f74:	4803      	ldr	r0, [pc, #12]	@ (8001f84 <MX_TIM1_Init+0x13c>)
 8001f76:	f000 fec5 	bl	8002d04 <HAL_TIM_MspPostInit>

}
 8001f7a:	bf00      	nop
 8001f7c:	3760      	adds	r7, #96	@ 0x60
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	2400af24 	.word	0x2400af24
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	0801c6dc 	.word	0x0801c6dc

08001f90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b090      	sub	sp, #64	@ 0x40
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
 8001fa4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa6:	f107 0320 	add.w	r3, r7, #32
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
 8001fc0:	615a      	str	r2, [r3, #20]
 8001fc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fc4:	4b39      	ldr	r3, [pc, #228]	@ (80020ac <MX_TIM2_Init+0x11c>)
 8001fc6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8001fcc:	4b37      	ldr	r3, [pc, #220]	@ (80020ac <MX_TIM2_Init+0x11c>)
 8001fce:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8001fd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd4:	4b35      	ldr	r3, [pc, #212]	@ (80020ac <MX_TIM2_Init+0x11c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8001fda:	4b34      	ldr	r3, [pc, #208]	@ (80020ac <MX_TIM2_Init+0x11c>)
 8001fdc:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001fe0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe2:	4b32      	ldr	r3, [pc, #200]	@ (80020ac <MX_TIM2_Init+0x11c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe8:	4b30      	ldr	r3, [pc, #192]	@ (80020ac <MX_TIM2_Init+0x11c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fee:	482f      	ldr	r0, [pc, #188]	@ (80020ac <MX_TIM2_Init+0x11c>)
 8001ff0:	f00c ff69 	bl	800eec6 <HAL_TIM_Base_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001ffa:	f000 fb93 	bl	8002724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ffe:	482b      	ldr	r0, [pc, #172]	@ (80020ac <MX_TIM2_Init+0x11c>)
 8002000:	f00d f9d8 	bl	800f3b4 <HAL_TIM_PWM_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800200a:	f000 fb8b 	bl	8002724 <Error_Handler>
  }
  /* TIM2 uses internal clock; we will use its TRGO to sync others */
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002012:	2300      	movs	r3, #0
 8002014:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002016:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800201a:	4619      	mov	r1, r3
 800201c:	4823      	ldr	r0, [pc, #140]	@ (80020ac <MX_TIM2_Init+0x11c>)
 800201e:	f00d fe51 	bl	800fcc4 <HAL_TIM_SlaveConfigSynchro>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002028:	f000 fb7c 	bl	8002724 <Error_Handler>
  }
  /* Emit TRGO on update to reset TIM15/ADCs periodically */
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800202c:	2320      	movs	r3, #32
 800202e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002034:	f107 0320 	add.w	r3, r7, #32
 8002038:	4619      	mov	r1, r3
 800203a:	481c      	ldr	r0, [pc, #112]	@ (80020ac <MX_TIM2_Init+0x11c>)
 800203c:	f00e fbdc 	bl	80107f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8002046:	f000 fb6d 	bl	8002724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204a:	2360      	movs	r3, #96	@ 0x60
 800204c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2499;
 800204e:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 8002052:	60bb      	str	r3, [r7, #8]
 
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	2200      	movs	r2, #0
 8002060:	4619      	mov	r1, r3
 8002062:	4812      	ldr	r0, [pc, #72]	@ (80020ac <MX_TIM2_Init+0x11c>)
 8002064:	f00d fc22 	bl	800f8ac <HAL_TIM_PWM_ConfigChannel>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 800206e:	f000 fb59 	bl	8002724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	2204      	movs	r2, #4
 8002076:	4619      	mov	r1, r3
 8002078:	480c      	ldr	r0, [pc, #48]	@ (80020ac <MX_TIM2_Init+0x11c>)
 800207a:	f00d fc17 	bl	800f8ac <HAL_TIM_PWM_ConfigChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8002084:	f000 fb4e 	bl	8002724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2208      	movs	r2, #8
 800208c:	4619      	mov	r1, r3
 800208e:	4807      	ldr	r0, [pc, #28]	@ (80020ac <MX_TIM2_Init+0x11c>)
 8002090:	f00d fc0c 	bl	800f8ac <HAL_TIM_PWM_ConfigChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 800209a:	f000 fb43 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800209e:	4803      	ldr	r0, [pc, #12]	@ (80020ac <MX_TIM2_Init+0x11c>)
 80020a0:	f000 fe30 	bl	8002d04 <HAL_TIM_MspPostInit>

}
 80020a4:	bf00      	nop
 80020a6:	3740      	adds	r7, #64	@ 0x40
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	2400af70 	.word	0x2400af70

080020b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b090      	sub	sp, #64	@ 0x40
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80020b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	60da      	str	r2, [r3, #12]
 80020c4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c6:	f107 0320 	add.w	r3, r7, #32
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
 80020e0:	615a      	str	r2, [r3, #20]
 80020e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020e4:	4b39      	ldr	r3, [pc, #228]	@ (80021cc <MX_TIM3_Init+0x11c>)
 80020e6:	4a3a      	ldr	r2, [pc, #232]	@ (80021d0 <MX_TIM3_Init+0x120>)
 80020e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 274;
 80020ea:	4b38      	ldr	r3, [pc, #224]	@ (80021cc <MX_TIM3_Init+0x11c>)
 80020ec:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80020f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f2:	4b36      	ldr	r3, [pc, #216]	@ (80021cc <MX_TIM3_Init+0x11c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80020f8:	4b34      	ldr	r3, [pc, #208]	@ (80021cc <MX_TIM3_Init+0x11c>)
 80020fa:	f241 3287 	movw	r2, #4999	@ 0x1387
 80020fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002100:	4b32      	ldr	r3, [pc, #200]	@ (80021cc <MX_TIM3_Init+0x11c>)
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002106:	4b31      	ldr	r3, [pc, #196]	@ (80021cc <MX_TIM3_Init+0x11c>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800210c:	482f      	ldr	r0, [pc, #188]	@ (80021cc <MX_TIM3_Init+0x11c>)
 800210e:	f00c feda 	bl	800eec6 <HAL_TIM_Base_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002118:	f000 fb04 	bl	8002724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800211c:	482b      	ldr	r0, [pc, #172]	@ (80021cc <MX_TIM3_Init+0x11c>)
 800211e:	f00d f949 	bl	800f3b4 <HAL_TIM_PWM_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002128:	f000 fafc 	bl	8002724 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800212c:	2304      	movs	r3, #4
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8002130:	2330      	movs	r3, #48	@ 0x30
 8002132:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002134:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002138:	4619      	mov	r1, r3
 800213a:	4824      	ldr	r0, [pc, #144]	@ (80021cc <MX_TIM3_Init+0x11c>)
 800213c:	f00d fdc2 	bl	800fcc4 <HAL_TIM_SlaveConfigSynchro>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002146:	f000 faed 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800214a:	2350      	movs	r3, #80	@ 0x50
 800214c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002152:	f107 0320 	add.w	r3, r7, #32
 8002156:	4619      	mov	r1, r3
 8002158:	481c      	ldr	r0, [pc, #112]	@ (80021cc <MX_TIM3_Init+0x11c>)
 800215a:	f00e fb4d 	bl	80107f8 <HAL_TIMEx_MasterConfigSynchronization>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8002164:	f000 fade 	bl	8002724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002168:	2360      	movs	r3, #96	@ 0x60
 800216a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2499;
 800216c:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 8002170:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	2200      	movs	r2, #0
 800217e:	4619      	mov	r1, r3
 8002180:	4812      	ldr	r0, [pc, #72]	@ (80021cc <MX_TIM3_Init+0x11c>)
 8002182:	f00d fb93 	bl	800f8ac <HAL_TIM_PWM_ConfigChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800218c:	f000 faca 	bl	8002724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	2204      	movs	r2, #4
 8002194:	4619      	mov	r1, r3
 8002196:	480d      	ldr	r0, [pc, #52]	@ (80021cc <MX_TIM3_Init+0x11c>)
 8002198:	f00d fb88 	bl	800f8ac <HAL_TIM_PWM_ConfigChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80021a2:	f000 fabf 	bl	8002724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2208      	movs	r2, #8
 80021aa:	4619      	mov	r1, r3
 80021ac:	4807      	ldr	r0, [pc, #28]	@ (80021cc <MX_TIM3_Init+0x11c>)
 80021ae:	f00d fb7d 	bl	800f8ac <HAL_TIM_PWM_ConfigChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 80021b8:	f000 fab4 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021bc:	4803      	ldr	r0, [pc, #12]	@ (80021cc <MX_TIM3_Init+0x11c>)
 80021be:	f000 fda1 	bl	8002d04 <HAL_TIM_MspPostInit>

}
 80021c2:	bf00      	nop
 80021c4:	3740      	adds	r7, #64	@ 0x40
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2400afbc 	.word	0x2400afbc
 80021d0:	40000400 	.word	0x40000400

080021d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */
  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */
  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80021e4:	4b19      	ldr	r3, [pc, #100]	@ (800224c <MX_TIM6_Init+0x78>)
 80021e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002250 <MX_TIM6_Init+0x7c>)
 80021e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 274;
 80021ea:	4b18      	ldr	r3, [pc, #96]	@ (800224c <MX_TIM6_Init+0x78>)
 80021ec:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80021f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f2:	4b16      	ldr	r3, [pc, #88]	@ (800224c <MX_TIM6_Init+0x78>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 80021f8:	4b14      	ldr	r3, [pc, #80]	@ (800224c <MX_TIM6_Init+0x78>)
 80021fa:	f241 3287 	movw	r2, #4999	@ 0x1387
 80021fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002200:	4b12      	ldr	r3, [pc, #72]	@ (800224c <MX_TIM6_Init+0x78>)
 8002202:	2280      	movs	r2, #128	@ 0x80
 8002204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002206:	4811      	ldr	r0, [pc, #68]	@ (800224c <MX_TIM6_Init+0x78>)
 8002208:	f00c fe5d 	bl	800eec6 <HAL_TIM_Base_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002212:	f000 fa87 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002216:	2320      	movs	r3, #32
 8002218:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	4619      	mov	r1, r3
 8002222:	480a      	ldr	r0, [pc, #40]	@ (800224c <MX_TIM6_Init+0x78>)
 8002224:	f00e fae8 	bl	80107f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800222e:	f000 fa79 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  // Включаем прерывание TIM6 (для мигания светодиодом в HAL_TIM_PeriodElapsedCallback)
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2106      	movs	r1, #6
 8002236:	2036      	movs	r0, #54	@ 0x36
 8002238:	f004 fb9b 	bl	8006972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800223c:	2036      	movs	r0, #54	@ 0x36
 800223e:	f004 fbb2 	bl	80069a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2400b008 	.word	0x2400b008
 8002250:	40001000 	.word	0x40001000

08002254 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b0a0      	sub	sp, #128	@ 0x80
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */
  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002268:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002278:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002284:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
 8002294:	615a      	str	r2, [r3, #20]
 8002296:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002298:	463b      	mov	r3, r7
 800229a:	2234      	movs	r2, #52	@ 0x34
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f018 fdea 	bl	801ae78 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */
  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80022a4:	4b47      	ldr	r3, [pc, #284]	@ (80023c4 <MX_TIM15_Init+0x170>)
 80022a6:	4a48      	ldr	r2, [pc, #288]	@ (80023c8 <MX_TIM15_Init+0x174>)
 80022a8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80022aa:	4b46      	ldr	r3, [pc, #280]	@ (80023c4 <MX_TIM15_Init+0x170>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b0:	4b44      	ldr	r3, [pc, #272]	@ (80023c4 <MX_TIM15_Init+0x170>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80022b6:	4b43      	ldr	r3, [pc, #268]	@ (80023c4 <MX_TIM15_Init+0x170>)
 80022b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022bc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022be:	4b41      	ldr	r3, [pc, #260]	@ (80023c4 <MX_TIM15_Init+0x170>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80022c4:	4b3f      	ldr	r3, [pc, #252]	@ (80023c4 <MX_TIM15_Init+0x170>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022ca:	4b3e      	ldr	r3, [pc, #248]	@ (80023c4 <MX_TIM15_Init+0x170>)
 80022cc:	2280      	movs	r2, #128	@ 0x80
 80022ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80022d0:	483c      	ldr	r0, [pc, #240]	@ (80023c4 <MX_TIM15_Init+0x170>)
 80022d2:	f00c fdf8 	bl	800eec6 <HAL_TIM_Base_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80022dc:	f000 fa22 	bl	8002724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022e4:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80022e6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80022ea:	4619      	mov	r1, r3
 80022ec:	4835      	ldr	r0, [pc, #212]	@ (80023c4 <MX_TIM15_Init+0x170>)
 80022ee:	f00d fbf1 	bl	800fad4 <HAL_TIM_ConfigClockSource>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80022f8:	f000 fa14 	bl	8002724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80022fc:	4831      	ldr	r0, [pc, #196]	@ (80023c4 <MX_TIM15_Init+0x170>)
 80022fe:	f00d f859 	bl	800f3b4 <HAL_TIM_PWM_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM15_Init+0xb8>
  {
    Error_Handler();
 8002308:	f000 fa0c 	bl	8002724 <Error_Handler>
  }
  /* TIM15 resets on TIM2 TRGO (ITR1) for aligned restart */
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800230c:	2304      	movs	r3, #4
 800230e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002310:	2310      	movs	r3, #16
 8002312:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8002314:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002318:	4619      	mov	r1, r3
 800231a:	482a      	ldr	r0, [pc, #168]	@ (80023c4 <MX_TIM15_Init+0x170>)
 800231c:	f00d fcd2 	bl	800fcc4 <HAL_TIM_SlaveConfigSynchro>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM15_Init+0xd6>
  {
    Error_Handler();
 8002326:	f000 f9fd 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800232a:	2320      	movs	r3, #32
 800232c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002332:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002336:	4619      	mov	r1, r3
 8002338:	4822      	ldr	r0, [pc, #136]	@ (80023c4 <MX_TIM15_Init+0x170>)
 800233a:	f00e fa5d 	bl	80107f8 <HAL_TIMEx_MasterConfigSynchronization>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 8002344:	f000 f9ee 	bl	8002724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002348:	2360      	movs	r3, #96	@ 0x60
 800234a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 499;
 800234c:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8002350:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002352:	2300      	movs	r3, #0
 8002354:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002356:	2300      	movs	r3, #0
 8002358:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002366:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800236a:	2200      	movs	r2, #0
 800236c:	4619      	mov	r1, r3
 800236e:	4815      	ldr	r0, [pc, #84]	@ (80023c4 <MX_TIM15_Init+0x170>)
 8002370:	f00d fa9c 	bl	800f8ac <HAL_TIM_PWM_ConfigChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM15_Init+0x12a>
  {
    Error_Handler();
 800237a:	f000 f9d3 	bl	8002724 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002392:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002396:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80023a0:	463b      	mov	r3, r7
 80023a2:	4619      	mov	r1, r3
 80023a4:	4807      	ldr	r0, [pc, #28]	@ (80023c4 <MX_TIM15_Init+0x170>)
 80023a6:	f00e fac3 	bl	8010930 <HAL_TIMEx_ConfigBreakDeadTime>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM15_Init+0x160>
  {
    Error_Handler();
 80023b0:	f000 f9b8 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80023b4:	4803      	ldr	r0, [pc, #12]	@ (80023c4 <MX_TIM15_Init+0x170>)
 80023b6:	f000 fca5 	bl	8002d04 <HAL_TIM_MspPostInit>

}
 80023ba:	bf00      	nop
 80023bc:	3780      	adds	r7, #128	@ 0x80
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2400b054 	.word	0x2400b054
 80023c8:	40014000 	.word	0x40014000

080023cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023d0:	4b22      	ldr	r3, [pc, #136]	@ (800245c <MX_USART1_UART_Init+0x90>)
 80023d2:	4a23      	ldr	r2, [pc, #140]	@ (8002460 <MX_USART1_UART_Init+0x94>)
 80023d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023d6:	4b21      	ldr	r3, [pc, #132]	@ (800245c <MX_USART1_UART_Init+0x90>)
 80023d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023de:	4b1f      	ldr	r3, [pc, #124]	@ (800245c <MX_USART1_UART_Init+0x90>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023e4:	4b1d      	ldr	r3, [pc, #116]	@ (800245c <MX_USART1_UART_Init+0x90>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ea:	4b1c      	ldr	r3, [pc, #112]	@ (800245c <MX_USART1_UART_Init+0x90>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023f0:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <MX_USART1_UART_Init+0x90>)
 80023f2:	220c      	movs	r2, #12
 80023f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f6:	4b19      	ldr	r3, [pc, #100]	@ (800245c <MX_USART1_UART_Init+0x90>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023fc:	4b17      	ldr	r3, [pc, #92]	@ (800245c <MX_USART1_UART_Init+0x90>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002402:	4b16      	ldr	r3, [pc, #88]	@ (800245c <MX_USART1_UART_Init+0x90>)
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002408:	4b14      	ldr	r3, [pc, #80]	@ (800245c <MX_USART1_UART_Init+0x90>)
 800240a:	2200      	movs	r2, #0
 800240c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800240e:	4b13      	ldr	r3, [pc, #76]	@ (800245c <MX_USART1_UART_Init+0x90>)
 8002410:	2200      	movs	r2, #0
 8002412:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002414:	4811      	ldr	r0, [pc, #68]	@ (800245c <MX_USART1_UART_Init+0x90>)
 8002416:	f00e fb35 	bl	8010a84 <HAL_UART_Init>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002420:	f000 f980 	bl	8002724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002424:	2100      	movs	r1, #0
 8002426:	480d      	ldr	r0, [pc, #52]	@ (800245c <MX_USART1_UART_Init+0x90>)
 8002428:	f00f fccf 	bl	8011dca <HAL_UARTEx_SetTxFifoThreshold>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002432:	f000 f977 	bl	8002724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002436:	2100      	movs	r1, #0
 8002438:	4808      	ldr	r0, [pc, #32]	@ (800245c <MX_USART1_UART_Init+0x90>)
 800243a:	f00f fd04 	bl	8011e46 <HAL_UARTEx_SetRxFifoThreshold>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002444:	f000 f96e 	bl	8002724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002448:	4804      	ldr	r0, [pc, #16]	@ (800245c <MX_USART1_UART_Init+0x90>)
 800244a:	f00f fc85 	bl	8011d58 <HAL_UARTEx_DisableFifoMode>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002454:	f000 f966 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2400b0a0 	.word	0x2400b0a0
 8002460:	40011000 	.word	0x40011000

08002464 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800246a:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <MX_DMA_Init+0x44>)
 800246c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002470:	4a0d      	ldr	r2, [pc, #52]	@ (80024a8 <MX_DMA_Init+0x44>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800247a:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <MX_DMA_Init+0x44>)
 800247c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8002488:	2200      	movs	r2, #0
 800248a:	2106      	movs	r1, #6
 800248c:	200b      	movs	r0, #11
 800248e:	f004 fa70 	bl	8006972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002492:	200b      	movs	r0, #11
 8002494:	f004 fa87 	bl	80069a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn disabled intentionally (ADC2 DMA runs without IRQ) */
  HAL_NVIC_DisableIRQ(DMA1_Stream1_IRQn);
 8002498:	200c      	movs	r0, #12
 800249a:	f004 fa92 	bl	80069c2 <HAL_NVIC_DisableIRQ>

}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	58024400 	.word	0x58024400

080024ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	@ 0x30
 80024b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b2:	f107 031c 	add.w	r3, r7, #28
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
 80024c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024c2:	4b71      	ldr	r3, [pc, #452]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 80024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c8:	4a6f      	ldr	r2, [pc, #444]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 80024ca:	f043 0310 	orr.w	r3, r3, #16
 80024ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e0:	4b69      	ldr	r3, [pc, #420]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 80024e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e6:	4a68      	ldr	r2, [pc, #416]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024f0:	4b65      	ldr	r3, [pc, #404]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024fe:	4b62      	ldr	r3, [pc, #392]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 8002500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002504:	4a60      	ldr	r2, [pc, #384]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 8002506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800250a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800250e:	4b5e      	ldr	r3, [pc, #376]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 8002510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800251c:	4b5a      	ldr	r3, [pc, #360]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 800251e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002522:	4a59      	ldr	r2, [pc, #356]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800252c:	4b56      	ldr	r3, [pc, #344]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	4b53      	ldr	r3, [pc, #332]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002540:	4a51      	ldr	r2, [pc, #324]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800254a:	4b4f      	ldr	r3, [pc, #316]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002558:	4b4b      	ldr	r3, [pc, #300]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 800255a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800255e:	4a4a      	ldr	r2, [pc, #296]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 8002560:	f043 0308 	orr.w	r3, r3, #8
 8002564:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002568:	4b47      	ldr	r3, [pc, #284]	@ (8002688 <MX_GPIO_Init+0x1dc>)
 800256a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Led_Test_Pin|LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	f642 0108 	movw	r1, #10248	@ 0x2808
 800257c:	4843      	ldr	r0, [pc, #268]	@ (800268c <MX_GPIO_Init+0x1e0>)
 800257e:	f007 f9a7 	bl	80098d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_RESET);
 8002582:	2200      	movs	r2, #0
 8002584:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002588:	4841      	ldr	r0, [pc, #260]	@ (8002690 <MX_GPIO_Init+0x1e4>)
 800258a:	f007 f9a1 	bl	80098d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Test_Pin */
  GPIO_InitStruct.Pin = Led_Test_Pin;
 800258e:	2308      	movs	r3, #8
 8002590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002592:	2301      	movs	r3, #1
 8002594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Led_Test_GPIO_Port, &GPIO_InitStruct);
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	4619      	mov	r1, r3
 80025a4:	4839      	ldr	r0, [pc, #228]	@ (800268c <MX_GPIO_Init+0x1e0>)
 80025a6:	f006 ffeb 	bl	8009580 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 80025aa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80025ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b0:	2301      	movs	r3, #1
 80025b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	4619      	mov	r1, r3
 80025c2:	4832      	ldr	r0, [pc, #200]	@ (800268c <MX_GPIO_Init+0x1e0>)
 80025c4:	f006 ffdc 	bl	8009580 <HAL_GPIO_Init>

  /*Configure GPIO pin : Data_ready_GPIO22_Pin */
  GPIO_InitStruct.Pin = Data_ready_GPIO22_Pin;
 80025c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d6:	2303      	movs	r3, #3
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Data_ready_GPIO22_GPIO_Port, &GPIO_InitStruct);
 80025da:	f107 031c 	add.w	r3, r7, #28
 80025de:	4619      	mov	r1, r3
 80025e0:	482b      	ldr	r0, [pc, #172]	@ (8002690 <MX_GPIO_Init+0x1e4>)
 80025e2:	f006 ffcd 	bl	8009580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	4619      	mov	r1, r3
 8002602:	4824      	ldr	r0, [pc, #144]	@ (8002694 <MX_GPIO_Init+0x1e8>)
 8002604:	f006 ffbc 	bl	8009580 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // Настройка RST дисплея и подсветки как GPIO до старта PWM
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8002608:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800260c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260e:	2301      	movs	r3, #1
 8002610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002616:	2303      	movs	r3, #3
 8002618:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800261a:	f107 031c 	add.w	r3, r7, #28
 800261e:	4619      	mov	r1, r3
 8002620:	481a      	ldr	r0, [pc, #104]	@ (800268c <MX_GPIO_Init+0x1e0>)
 8002622:	f006 ffad 	bl	8009580 <HAL_GPIO_Init>
  // Жёсткий аппаратный сброс LCD: low->delay->high
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8002626:	2200      	movs	r2, #0
 8002628:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800262c:	4817      	ldr	r0, [pc, #92]	@ (800268c <MX_GPIO_Init+0x1e0>)
 800262e:	f007 f94f 	bl	80098d0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8002632:	200a      	movs	r0, #10
 8002634:	f002 f89c 	bl	8004770 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8002638:	2201      	movs	r2, #1
 800263a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800263e:	4813      	ldr	r0, [pc, #76]	@ (800268c <MX_GPIO_Init+0x1e0>)
 8002640:	f007 f946 	bl	80098d0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8002644:	200a      	movs	r0, #10
 8002646:	f002 f893 	bl	8004770 <HAL_Delay>

#if FORCE_BL_GPIO
  // Настройка подсветки как GPIO ТОЛЬКО если используется GPIO режим
  GPIO_InitStruct.Pin = LCD_Led_Pin; /* PE10 */
 800264a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800264e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002650:	2301      	movs	r3, #1
 8002652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002658:	2303      	movs	r3, #3
 800265a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_Led_GPIO_Port, &GPIO_InitStruct);
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	4619      	mov	r1, r3
 8002662:	480a      	ldr	r0, [pc, #40]	@ (800268c <MX_GPIO_Init+0x1e0>)
 8002664:	f006 ff8c 	bl	8009580 <HAL_GPIO_Init>
  // По умолчанию выключаем подсветку (active low -> высокий уровень)
  BL_OFF();
 8002668:	2201      	movs	r2, #1
 800266a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800266e:	4807      	ldr	r0, [pc, #28]	@ (800268c <MX_GPIO_Init+0x1e0>)
 8002670:	f007 f92e 	bl	80098d0 <HAL_GPIO_WritePin>
#endif
  HAL_GPIO_WritePin(Led_Test_GPIO_Port, Led_Test_Pin, GPIO_PIN_SET);
 8002674:	2201      	movs	r2, #1
 8002676:	2108      	movs	r1, #8
 8002678:	4804      	ldr	r0, [pc, #16]	@ (800268c <MX_GPIO_Init+0x1e0>)
 800267a:	f007 f929 	bl	80098d0 <HAL_GPIO_WritePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 800267e:	bf00      	nop
 8002680:	3730      	adds	r7, #48	@ 0x30
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	58024400 	.word	0x58024400
 800268c:	58021000 	.word	0x58021000
 8002690:	58020c00 	.word	0x58020c00
 8002694:	58020000 	.word	0x58020000

08002698 <HAL_TIM_PeriodElapsedCallback>:
static void UpdateUSBDebug(void) { /* no-op */ }
static const char* usb_state_str(uint8_t s) { (void)s; return ""; }

// Мигание светодиодом и сторож
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a13      	ldr	r2, [pc, #76]	@ (80026f4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d11f      	bne.n	80026ea <HAL_TIM_PeriodElapsedCallback+0x52>
    static uint16_t div = 0; // делитель частоты мигания
    tim6_irq_count++;
 80026aa:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	4a11      	ldr	r2, [pc, #68]	@ (80026f8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80026b2:	6013      	str	r3, [r2, #0]
    if (++div >= 20) {       // быстреее мигание для наглядности (~2–4 Гц в зависимости от частоты TIM6)
 80026b4:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80026be:	801a      	strh	r2, [r3, #0]
 80026c0:	4b0e      	ldr	r3, [pc, #56]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	2b13      	cmp	r3, #19
 80026c6:	d90e      	bls.n	80026e6 <HAL_TIM_PeriodElapsedCallback+0x4e>
      div = 0;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	801a      	strh	r2, [r3, #0]
      #if !SAFE_MINIMAL
        HAL_GPIO_TogglePin(Led_Test_GPIO_Port, Led_Test_Pin);
 80026ce:	2108      	movs	r1, #8
 80026d0:	480b      	ldr	r0, [pc, #44]	@ (8002700 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80026d2:	f007 f916 	bl	8009902 <HAL_GPIO_TogglePin>
        tim6_led_toggled_flag = 1; // попросим main вывести лог
 80026d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002704 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
        tim6_led_toggle_counter++;
 80026dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	4a09      	ldr	r2, [pc, #36]	@ (8002708 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80026e4:	6013      	str	r3, [r2, #0]
    #endif
#endif
    /* Пинаем USB vendor таск периодическим тиком, чтобы продвигать состояние */
    #if !SAFE_MINIMAL
      extern void usb_vendor_periodic_tick(void);
      usb_vendor_periodic_tick();
 80026e6:	f012 ffe1 	bl	80156ac <usb_vendor_periodic_tick>
    #endif
  }
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40001000 	.word	0x40001000
 80026f8:	2400b238 	.word	0x2400b238
 80026fc:	2400b280 	.word	0x2400b280
 8002700:	58021000 	.word	0x58021000
 8002704:	2400b23c 	.word	0x2400b23c
 8002708:	2400b240 	.word	0x2400b240

0800270c <UpdateLCDStatus>:
    LCD_ShowString_Size((uint16_t)x, (uint16_t)y, line, font_height, fg, bg);
    strncpy(prev, new_text, buf_sz-1);
    prev[buf_sz-1] = 0;
}

void UpdateLCDStatus(void){ need_usb_status_refresh = 1; }
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
 8002710:	4b03      	ldr	r3, [pc, #12]	@ (8002720 <UpdateLCDStatus+0x14>)
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	2400b25d 	.word	0x2400b25d

08002724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800272a:	b672      	cpsid	i
}
 800272c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Визуальный индикатор ошибки: мигание подсветкой LCD_Led (PE10, active-low) и LED (PE3) */
  __disable_irq();
  /* Включаем тактирование GPIOE на случай ранней ошибки */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800272e:	4b31      	ldr	r3, [pc, #196]	@ (80027f4 <Error_Handler+0xd0>)
 8002730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002734:	4a2f      	ldr	r2, [pc, #188]	@ (80027f4 <Error_Handler+0xd0>)
 8002736:	f043 0310 	orr.w	r3, r3, #16
 800273a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800273e:	4b2d      	ldr	r3, [pc, #180]	@ (80027f4 <Error_Handler+0xd0>)
 8002740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
  int led_idx = __builtin_ctz(Led_Test_Pin);
 800274c:	2303      	movs	r3, #3
 800274e:	617b      	str	r3, [r7, #20]
  int bl_idx  = __builtin_ctz(LCD_Led_Pin);
 8002750:	230a      	movs	r3, #10
 8002752:	613b      	str	r3, [r7, #16]
  GPIOE->MODER &= ~(3u << (led_idx*2));
 8002754:	4b28      	ldr	r3, [pc, #160]	@ (80027f8 <Error_Handler+0xd4>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	2103      	movs	r1, #3
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	4924      	ldr	r1, [pc, #144]	@ (80027f8 <Error_Handler+0xd4>)
 8002766:	4013      	ands	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
  GPIOE->MODER |=  (1u << (led_idx*2));
 800276a:	4b23      	ldr	r3, [pc, #140]	@ (80027f8 <Error_Handler+0xd4>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	491f      	ldr	r1, [pc, #124]	@ (80027f8 <Error_Handler+0xd4>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
  GPIOE->MODER &= ~(3u << (bl_idx*2));
 800277e:	4b1e      	ldr	r3, [pc, #120]	@ (80027f8 <Error_Handler+0xd4>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2103      	movs	r1, #3
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	491a      	ldr	r1, [pc, #104]	@ (80027f8 <Error_Handler+0xd4>)
 8002790:	4013      	ands	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
  GPIOE->MODER |=  (1u << (bl_idx*2));
 8002794:	4b18      	ldr	r3, [pc, #96]	@ (80027f8 <Error_Handler+0xd4>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	4915      	ldr	r1, [pc, #84]	@ (80027f8 <Error_Handler+0xd4>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
  for(;;){
    /* LED ON, BL ON (active-low -> reset) */
    GPIOE->BSRR = Led_Test_Pin;
 80027a8:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <Error_Handler+0xd4>)
 80027aa:	2208      	movs	r2, #8
 80027ac:	619a      	str	r2, [r3, #24]
    GPIOE->BSRR = (LCD_Led_Pin << 16);
 80027ae:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <Error_Handler+0xd4>)
 80027b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80027b4:	619a      	str	r2, [r3, #24]
    for(volatile uint32_t d=0; d<24000000UL; ++d){ __NOP(); }
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	e003      	b.n	80027c4 <Error_Handler+0xa0>
 80027bc:	bf00      	nop
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3301      	adds	r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4a0d      	ldr	r2, [pc, #52]	@ (80027fc <Error_Handler+0xd8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d3f7      	bcc.n	80027bc <Error_Handler+0x98>
    /* LED OFF, BL OFF (active-low -> set) */
    GPIOE->BSRR = (Led_Test_Pin << 16);
 80027cc:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <Error_Handler+0xd4>)
 80027ce:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80027d2:	619a      	str	r2, [r3, #24]
    GPIOE->BSRR = LCD_Led_Pin;
 80027d4:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <Error_Handler+0xd4>)
 80027d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027da:	619a      	str	r2, [r3, #24]
    for(volatile uint32_t d=0; d<12000000UL; ++d){ __NOP(); }
 80027dc:	2300      	movs	r3, #0
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	e003      	b.n	80027ea <Error_Handler+0xc6>
 80027e2:	bf00      	nop
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3301      	adds	r3, #1
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a04      	ldr	r2, [pc, #16]	@ (8002800 <Error_Handler+0xdc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d3f7      	bcc.n	80027e2 <Error_Handler+0xbe>
    GPIOE->BSRR = Led_Test_Pin;
 80027f2:	e7d9      	b.n	80027a8 <Error_Handler+0x84>
 80027f4:	58024400 	.word	0x58024400
 80027f8:	58021000 	.word	0x58021000
 80027fc:	016e3600 	.word	0x016e3600
 8002800:	00b71b00 	.word	0x00b71b00

08002804 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <HAL_MspInit+0x30>)
 800280c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002810:	4a08      	ldr	r2, [pc, #32]	@ (8002834 <HAL_MspInit+0x30>)
 8002812:	f043 0302 	orr.w	r3, r3, #2
 8002816:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800281a:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_MspInit+0x30>)
 800281c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	58024400 	.word	0x58024400

08002838 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	@ 0x30
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a69      	ldr	r2, [pc, #420]	@ (80029fc <HAL_ADC_MspInit+0x1c4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d163      	bne.n	8002922 <HAL_ADC_MspInit+0xea>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800285a:	4b69      	ldr	r3, [pc, #420]	@ (8002a00 <HAL_ADC_MspInit+0x1c8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	4a67      	ldr	r2, [pc, #412]	@ (8002a00 <HAL_ADC_MspInit+0x1c8>)
 8002862:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002864:	4b66      	ldr	r3, [pc, #408]	@ (8002a00 <HAL_ADC_MspInit+0x1c8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d10e      	bne.n	800288a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800286c:	4b65      	ldr	r3, [pc, #404]	@ (8002a04 <HAL_ADC_MspInit+0x1cc>)
 800286e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002872:	4a64      	ldr	r2, [pc, #400]	@ (8002a04 <HAL_ADC_MspInit+0x1cc>)
 8002874:	f043 0320 	orr.w	r3, r3, #32
 8002878:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800287c:	4b61      	ldr	r3, [pc, #388]	@ (8002a04 <HAL_ADC_MspInit+0x1cc>)
 800287e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288a:	4b5e      	ldr	r3, [pc, #376]	@ (8002a04 <HAL_ADC_MspInit+0x1cc>)
 800288c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002890:	4a5c      	ldr	r2, [pc, #368]	@ (8002a04 <HAL_ADC_MspInit+0x1cc>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800289a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a04 <HAL_ADC_MspInit+0x1cc>)
 800289c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028a8:	2340      	movs	r3, #64	@ 0x40
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ac:	2303      	movs	r3, #3
 80028ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	4619      	mov	r1, r3
 80028ba:	4853      	ldr	r0, [pc, #332]	@ (8002a08 <HAL_ADC_MspInit+0x1d0>)
 80028bc:	f006 fe60 	bl	8009580 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80028c0:	4b52      	ldr	r3, [pc, #328]	@ (8002a0c <HAL_ADC_MspInit+0x1d4>)
 80028c2:	4a53      	ldr	r2, [pc, #332]	@ (8002a10 <HAL_ADC_MspInit+0x1d8>)
 80028c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80028c6:	4b51      	ldr	r3, [pc, #324]	@ (8002a0c <HAL_ADC_MspInit+0x1d4>)
 80028c8:	2209      	movs	r2, #9
 80028ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028cc:	4b4f      	ldr	r3, [pc, #316]	@ (8002a0c <HAL_ADC_MspInit+0x1d4>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d2:	4b4e      	ldr	r3, [pc, #312]	@ (8002a0c <HAL_ADC_MspInit+0x1d4>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028d8:	4b4c      	ldr	r3, [pc, #304]	@ (8002a0c <HAL_ADC_MspInit+0x1d4>)
 80028da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028e0:	4b4a      	ldr	r3, [pc, #296]	@ (8002a0c <HAL_ADC_MspInit+0x1d4>)
 80028e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028e8:	4b48      	ldr	r3, [pc, #288]	@ (8002a0c <HAL_ADC_MspInit+0x1d4>)
 80028ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028f0:	4b46      	ldr	r3, [pc, #280]	@ (8002a0c <HAL_ADC_MspInit+0x1d4>)
 80028f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028f8:	4b44      	ldr	r3, [pc, #272]	@ (8002a0c <HAL_ADC_MspInit+0x1d4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028fe:	4b43      	ldr	r3, [pc, #268]	@ (8002a0c <HAL_ADC_MspInit+0x1d4>)
 8002900:	2200      	movs	r2, #0
 8002902:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002904:	4841      	ldr	r0, [pc, #260]	@ (8002a0c <HAL_ADC_MspInit+0x1d4>)
 8002906:	f004 fa49 	bl	8006d9c <HAL_DMA_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8002910:	f7ff ff08 	bl	8002724 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a3d      	ldr	r2, [pc, #244]	@ (8002a0c <HAL_ADC_MspInit+0x1d4>)
 8002918:	659a      	str	r2, [r3, #88]	@ 0x58
 800291a:	4a3c      	ldr	r2, [pc, #240]	@ (8002a0c <HAL_ADC_MspInit+0x1d4>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002920:	e067      	b.n	80029f2 <HAL_ADC_MspInit+0x1ba>
  else if(hadc->Instance==ADC2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a3b      	ldr	r2, [pc, #236]	@ (8002a14 <HAL_ADC_MspInit+0x1dc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d162      	bne.n	80029f2 <HAL_ADC_MspInit+0x1ba>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800292c:	4b34      	ldr	r3, [pc, #208]	@ (8002a00 <HAL_ADC_MspInit+0x1c8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	4a33      	ldr	r2, [pc, #204]	@ (8002a00 <HAL_ADC_MspInit+0x1c8>)
 8002934:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002936:	4b32      	ldr	r3, [pc, #200]	@ (8002a00 <HAL_ADC_MspInit+0x1c8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d10e      	bne.n	800295c <HAL_ADC_MspInit+0x124>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800293e:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <HAL_ADC_MspInit+0x1cc>)
 8002940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002944:	4a2f      	ldr	r2, [pc, #188]	@ (8002a04 <HAL_ADC_MspInit+0x1cc>)
 8002946:	f043 0320 	orr.w	r3, r3, #32
 800294a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800294e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a04 <HAL_ADC_MspInit+0x1cc>)
 8002950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800295c:	4b29      	ldr	r3, [pc, #164]	@ (8002a04 <HAL_ADC_MspInit+0x1cc>)
 800295e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002962:	4a28      	ldr	r2, [pc, #160]	@ (8002a04 <HAL_ADC_MspInit+0x1cc>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800296c:	4b25      	ldr	r3, [pc, #148]	@ (8002a04 <HAL_ADC_MspInit+0x1cc>)
 800296e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800297a:	2310      	movs	r3, #16
 800297c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800297e:	2303      	movs	r3, #3
 8002980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002986:	f107 031c 	add.w	r3, r7, #28
 800298a:	4619      	mov	r1, r3
 800298c:	4822      	ldr	r0, [pc, #136]	@ (8002a18 <HAL_ADC_MspInit+0x1e0>)
 800298e:	f006 fdf7 	bl	8009580 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8002992:	4b22      	ldr	r3, [pc, #136]	@ (8002a1c <HAL_ADC_MspInit+0x1e4>)
 8002994:	4a22      	ldr	r2, [pc, #136]	@ (8002a20 <HAL_ADC_MspInit+0x1e8>)
 8002996:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002998:	4b20      	ldr	r3, [pc, #128]	@ (8002a1c <HAL_ADC_MspInit+0x1e4>)
 800299a:	220a      	movs	r2, #10
 800299c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800299e:	4b1f      	ldr	r3, [pc, #124]	@ (8002a1c <HAL_ADC_MspInit+0x1e4>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <HAL_ADC_MspInit+0x1e4>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80029aa:	4b1c      	ldr	r3, [pc, #112]	@ (8002a1c <HAL_ADC_MspInit+0x1e4>)
 80029ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029b0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029b2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a1c <HAL_ADC_MspInit+0x1e4>)
 80029b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029b8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029ba:	4b18      	ldr	r3, [pc, #96]	@ (8002a1c <HAL_ADC_MspInit+0x1e4>)
 80029bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029c0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80029c2:	4b16      	ldr	r3, [pc, #88]	@ (8002a1c <HAL_ADC_MspInit+0x1e4>)
 80029c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029c8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80029ca:	4b14      	ldr	r3, [pc, #80]	@ (8002a1c <HAL_ADC_MspInit+0x1e4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029d0:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <HAL_ADC_MspInit+0x1e4>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80029d6:	4811      	ldr	r0, [pc, #68]	@ (8002a1c <HAL_ADC_MspInit+0x1e4>)
 80029d8:	f004 f9e0 	bl	8006d9c <HAL_DMA_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 80029e2:	f7ff fe9f 	bl	8002724 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a0c      	ldr	r2, [pc, #48]	@ (8002a1c <HAL_ADC_MspInit+0x1e4>)
 80029ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80029ec:	4a0b      	ldr	r2, [pc, #44]	@ (8002a1c <HAL_ADC_MspInit+0x1e4>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80029f2:	bf00      	nop
 80029f4:	3730      	adds	r7, #48	@ 0x30
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40022000 	.word	0x40022000
 8002a00:	2400b284 	.word	0x2400b284
 8002a04:	58024400 	.word	0x58024400
 8002a08:	58020000 	.word	0x58020000
 8002a0c:	2400b148 	.word	0x2400b148
 8002a10:	40020010 	.word	0x40020010
 8002a14:	40022100 	.word	0x40022100
 8002a18:	58020800 	.word	0x58020800
 8002a1c:	2400b1c0 	.word	0x2400b1c0
 8002a20:	40020028 	.word	0x40020028

08002a24 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	@ 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab4 <HAL_DAC_MspInit+0x90>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d131      	bne.n	8002aaa <HAL_DAC_MspInit+0x86>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002a46:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab8 <HAL_DAC_MspInit+0x94>)
 8002a48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab8 <HAL_DAC_MspInit+0x94>)
 8002a4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a56:	4b18      	ldr	r3, [pc, #96]	@ (8002ab8 <HAL_DAC_MspInit+0x94>)
 8002a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a64:	4b14      	ldr	r3, [pc, #80]	@ (8002ab8 <HAL_DAC_MspInit+0x94>)
 8002a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a6a:	4a13      	ldr	r2, [pc, #76]	@ (8002ab8 <HAL_DAC_MspInit+0x94>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a74:	4b10      	ldr	r3, [pc, #64]	@ (8002ab8 <HAL_DAC_MspInit+0x94>)
 8002a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a82:	2330      	movs	r3, #48	@ 0x30
 8002a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a86:	2303      	movs	r3, #3
 8002a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8e:	f107 0314 	add.w	r3, r7, #20
 8002a92:	4619      	mov	r1, r3
 8002a94:	4809      	ldr	r0, [pc, #36]	@ (8002abc <HAL_DAC_MspInit+0x98>)
 8002a96:	f006 fd73 	bl	8009580 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2036      	movs	r0, #54	@ 0x36
 8002aa0:	f003 ff67 	bl	8006972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002aa4:	2036      	movs	r0, #54	@ 0x36
 8002aa6:	f003 ff7e 	bl	80069a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002aaa:	bf00      	nop
 8002aac:	3728      	adds	r7, #40	@ 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40007400 	.word	0x40007400
 8002ab8:	58024400 	.word	0x58024400
 8002abc:	58020000 	.word	0x58020000

08002ac0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08c      	sub	sp, #48	@ 0x30
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a3d      	ldr	r2, [pc, #244]	@ (8002bd4 <HAL_SPI_MspInit+0x114>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d12f      	bne.n	8002b42 <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd8 <HAL_SPI_MspInit+0x118>)
 8002ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ae8:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd8 <HAL_SPI_MspInit+0x118>)
 8002aea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002af2:	4b39      	ldr	r3, [pc, #228]	@ (8002bd8 <HAL_SPI_MspInit+0x118>)
 8002af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002af8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b00:	4b35      	ldr	r3, [pc, #212]	@ (8002bd8 <HAL_SPI_MspInit+0x118>)
 8002b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b06:	4a34      	ldr	r2, [pc, #208]	@ (8002bd8 <HAL_SPI_MspInit+0x118>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b10:	4b31      	ldr	r3, [pc, #196]	@ (8002bd8 <HAL_SPI_MspInit+0x118>)
 8002b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b1e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b30:	2305      	movs	r3, #5
 8002b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b34:	f107 031c 	add.w	r3, r7, #28
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4828      	ldr	r0, [pc, #160]	@ (8002bdc <HAL_SPI_MspInit+0x11c>)
 8002b3c:	f006 fd20 	bl	8009580 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002b40:	e044      	b.n	8002bcc <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI4)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a26      	ldr	r2, [pc, #152]	@ (8002be0 <HAL_SPI_MspInit+0x120>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d13f      	bne.n	8002bcc <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002b4c:	4b22      	ldr	r3, [pc, #136]	@ (8002bd8 <HAL_SPI_MspInit+0x118>)
 8002b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b52:	4a21      	ldr	r2, [pc, #132]	@ (8002bd8 <HAL_SPI_MspInit+0x118>)
 8002b54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd8 <HAL_SPI_MspInit+0x118>)
 8002b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd8 <HAL_SPI_MspInit+0x118>)
 8002b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b70:	4a19      	ldr	r2, [pc, #100]	@ (8002bd8 <HAL_SPI_MspInit+0x118>)
 8002b72:	f043 0310 	orr.w	r3, r3, #16
 8002b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b7a:	4b17      	ldr	r3, [pc, #92]	@ (8002bd8 <HAL_SPI_MspInit+0x118>)
 8002b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin;
 8002b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b96:	2302      	movs	r3, #2
 8002b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002b9a:	2305      	movs	r3, #5
 8002b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 8002b9e:	f107 031c 	add.w	r3, r7, #28
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	480f      	ldr	r0, [pc, #60]	@ (8002be4 <HAL_SPI_MspInit+0x124>)
 8002ba6:	f006 fceb 	bl	8009580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_SDA_Pin;
 8002baa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002bbc:	2305      	movs	r3, #5
 8002bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 8002bc0:	f107 031c 	add.w	r3, r7, #28
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4807      	ldr	r0, [pc, #28]	@ (8002be4 <HAL_SPI_MspInit+0x124>)
 8002bc8:	f006 fcda 	bl	8009580 <HAL_GPIO_Init>
}
 8002bcc:	bf00      	nop
 8002bce:	3730      	adds	r7, #48	@ 0x30
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40003800 	.word	0x40003800
 8002bd8:	58024400 	.word	0x58024400
 8002bdc:	58020400 	.word	0x58020400
 8002be0:	40013400 	.word	0x40013400
 8002be4:	58021000 	.word	0x58021000

08002be8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8002c24 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d10e      	bne.n	8002c18 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <HAL_TIM_PWM_MspInit+0x40>)
 8002bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c00:	4a09      	ldr	r2, [pc, #36]	@ (8002c28 <HAL_TIM_PWM_MspInit+0x40>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c0a:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <HAL_TIM_PWM_MspInit+0x40>)
 8002c0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40010000 	.word	0x40010000
 8002c28:	58024400 	.word	0x58024400

08002c2c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c3c:	d10f      	bne.n	8002c5e <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xc8>)
 8002c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c44:	4a2b      	ldr	r2, [pc, #172]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xc8>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c4e:	4b29      	ldr	r3, [pc, #164]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xc8>)
 8002c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM15_MspInit 1 */

    /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002c5c:	e045      	b.n	8002cea <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM3)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a25      	ldr	r2, [pc, #148]	@ (8002cf8 <HAL_TIM_Base_MspInit+0xcc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10f      	bne.n	8002c88 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c68:	4b22      	ldr	r3, [pc, #136]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xc8>)
 8002c6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c6e:	4a21      	ldr	r2, [pc, #132]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xc8>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c78:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xc8>)
 8002c7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]
}
 8002c86:	e030      	b.n	8002cea <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM6)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cfc <HAL_TIM_Base_MspInit+0xd0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d117      	bne.n	8002cc2 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c92:	4b18      	ldr	r3, [pc, #96]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xc8>)
 8002c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c98:	4a16      	ldr	r2, [pc, #88]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xc8>)
 8002c9a:	f043 0310 	orr.w	r3, r3, #16
 8002c9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ca2:	4b14      	ldr	r3, [pc, #80]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xc8>)
 8002ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2036      	movs	r0, #54	@ 0x36
 8002cb6:	f003 fe5c 	bl	8006972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cba:	2036      	movs	r0, #54	@ 0x36
 8002cbc:	f003 fe73 	bl	80069a6 <HAL_NVIC_EnableIRQ>
}
 8002cc0:	e013      	b.n	8002cea <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM15)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8002d00 <HAL_TIM_Base_MspInit+0xd4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d10e      	bne.n	8002cea <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002ccc:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xc8>)
 8002cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cd2:	4a08      	ldr	r2, [pc, #32]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xc8>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xc8>)
 8002cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	58024400 	.word	0x58024400
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40001000 	.word	0x40001000
 8002d00:	40014000 	.word	0x40014000

08002d04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08e      	sub	sp, #56	@ 0x38
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a69      	ldr	r2, [pc, #420]	@ (8002ec8 <HAL_TIM_MspPostInit+0x1c4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d120      	bne.n	8002d68 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d26:	4b69      	ldr	r3, [pc, #420]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d2c:	4a67      	ldr	r2, [pc, #412]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002d2e:	f043 0310 	orr.w	r3, r3, #16
 8002d32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d36:	4b65      	ldr	r3, [pc, #404]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	623b      	str	r3, [r7, #32]
 8002d42:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = LCD_Led_Pin;
 8002d44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d52:	2303      	movs	r3, #3
 8002d54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d56:	2301      	movs	r3, #1
 8002d58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_Led_GPIO_Port, &GPIO_InitStruct);
 8002d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d5e:	4619      	mov	r1, r3
 8002d60:	485b      	ldr	r0, [pc, #364]	@ (8002ed0 <HAL_TIM_MspPostInit+0x1cc>)
 8002d62:	f006 fc0d 	bl	8009580 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002d66:	e0ab      	b.n	8002ec0 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d70:	d11f      	bne.n	8002db2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	4b56      	ldr	r3, [pc, #344]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d78:	4a54      	ldr	r2, [pc, #336]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d82:	4b52      	ldr	r3, [pc, #328]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002d90:	2307      	movs	r3, #7
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002da0:	2301      	movs	r3, #1
 8002da2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002da8:	4619      	mov	r1, r3
 8002daa:	484a      	ldr	r0, [pc, #296]	@ (8002ed4 <HAL_TIM_MspPostInit+0x1d0>)
 8002dac:	f006 fbe8 	bl	8009580 <HAL_GPIO_Init>
}
 8002db0:	e086      	b.n	8002ec0 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM3)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a48      	ldr	r2, [pc, #288]	@ (8002ed8 <HAL_TIM_MspPostInit+0x1d4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d15d      	bne.n	8002e78 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbc:	4b43      	ldr	r3, [pc, #268]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dc2:	4a42      	ldr	r2, [pc, #264]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dda:	4b3c      	ldr	r3, [pc, #240]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002de0:	4a3a      	ldr	r2, [pc, #232]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002de2:	f043 0302 	orr.w	r3, r3, #2
 8002de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dea:	4b38      	ldr	r3, [pc, #224]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df8:	4b34      	ldr	r3, [pc, #208]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dfe:	4a33      	ldr	r2, [pc, #204]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002e00:	f043 0304 	orr.w	r3, r3, #4
 8002e04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e08:	4b30      	ldr	r3, [pc, #192]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e16:	2380      	movs	r3, #128	@ 0x80
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	2300      	movs	r3, #0
 8002e24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e26:	2302      	movs	r3, #2
 8002e28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4828      	ldr	r0, [pc, #160]	@ (8002ed4 <HAL_TIM_MspPostInit+0x1d0>)
 8002e32:	f006 fba5 	bl	8009580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e36:	2301      	movs	r3, #1
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e42:	2300      	movs	r3, #0
 8002e44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e46:	2302      	movs	r3, #2
 8002e48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4822      	ldr	r0, [pc, #136]	@ (8002edc <HAL_TIM_MspPostInit+0x1d8>)
 8002e52:	f006 fb95 	bl	8009580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e56:	2340      	movs	r3, #64	@ 0x40
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e66:	2302      	movs	r3, #2
 8002e68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e6e:	4619      	mov	r1, r3
 8002e70:	481b      	ldr	r0, [pc, #108]	@ (8002ee0 <HAL_TIM_MspPostInit+0x1dc>)
 8002e72:	f006 fb85 	bl	8009580 <HAL_GPIO_Init>
}
 8002e76:	e023      	b.n	8002ec0 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM15)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a19      	ldr	r2, [pc, #100]	@ (8002ee4 <HAL_TIM_MspPostInit+0x1e0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d11e      	bne.n	8002ec0 <HAL_TIM_MspPostInit+0x1bc>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e82:	4b12      	ldr	r3, [pc, #72]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e88:	4a10      	ldr	r2, [pc, #64]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002e8a:	f043 0310 	orr.w	r3, r3, #16
 8002e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <HAL_TIM_MspPostInit+0x1c8>)
 8002e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002ea0:	2320      	movs	r3, #32
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eac:	2303      	movs	r3, #3
 8002eae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4805      	ldr	r0, [pc, #20]	@ (8002ed0 <HAL_TIM_MspPostInit+0x1cc>)
 8002ebc:	f006 fb60 	bl	8009580 <HAL_GPIO_Init>
}
 8002ec0:	bf00      	nop
 8002ec2:	3738      	adds	r7, #56	@ 0x38
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	58024400 	.word	0x58024400
 8002ed0:	58021000 	.word	0x58021000
 8002ed4:	58020000 	.word	0x58020000
 8002ed8:	40000400 	.word	0x40000400
 8002edc:	58020400 	.word	0x58020400
 8002ee0:	58020800 	.word	0x58020800
 8002ee4:	40014000 	.word	0x40014000

08002ee8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b0b8      	sub	sp, #224	@ 0xe0
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f00:	f107 0310 	add.w	r3, r7, #16
 8002f04:	22b8      	movs	r2, #184	@ 0xb8
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f017 ffb5 	bl	801ae78 <memset>
  if(huart->Instance==USART1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a26      	ldr	r2, [pc, #152]	@ (8002fac <HAL_UART_MspInit+0xc4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d145      	bne.n	8002fa4 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f18:	f04f 0201 	mov.w	r2, #1
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f2a:	f107 0310 	add.w	r3, r7, #16
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f008 ffe8 	bl	800bf04 <HAL_RCCEx_PeriphCLKConfig>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002f3a:	f7ff fbf3 	bl	8002724 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb0 <HAL_UART_MspInit+0xc8>)
 8002f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f44:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb0 <HAL_UART_MspInit+0xc8>)
 8002f46:	f043 0310 	orr.w	r3, r3, #16
 8002f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f4e:	4b18      	ldr	r3, [pc, #96]	@ (8002fb0 <HAL_UART_MspInit+0xc8>)
 8002f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5c:	4b14      	ldr	r3, [pc, #80]	@ (8002fb0 <HAL_UART_MspInit+0xc8>)
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f62:	4a13      	ldr	r2, [pc, #76]	@ (8002fb0 <HAL_UART_MspInit+0xc8>)
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f6c:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <HAL_UART_MspInit+0xc8>)
 8002f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f7a:	23c0      	movs	r3, #192	@ 0xc0
 8002f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f80:	2302      	movs	r3, #2
 8002f82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f92:	2307      	movs	r3, #7
 8002f94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f98:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4805      	ldr	r0, [pc, #20]	@ (8002fb4 <HAL_UART_MspInit+0xcc>)
 8002fa0:	f006 faee 	bl	8009580 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002fa4:	bf00      	nop
 8002fa6:	37e0      	adds	r7, #224	@ 0xe0
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40011000 	.word	0x40011000
 8002fb0:	58024400 	.word	0x58024400
 8002fb4:	58020400 	.word	0x58020400

08002fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <NMI_Handler+0x4>

08002fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  __asm volatile(
 8002fc4:	f01e 0f04 	tst.w	lr, #4
 8002fc8:	bf0c      	ite	eq
 8002fca:	f3ef 8008 	mrseq	r0, MSP
 8002fce:	f3ef 8009 	mrsne	r0, PSP
 8002fd2:	f000 b937 	b.w	8003244 <HardFault_Capture>
    "mrseq r0, msp         \n"
    "mrsne r0, psp         \n"
    "b HardFault_Capture   \n"
  );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd6:	bf00      	nop
 8002fd8:	e7fd      	b.n	8002fd6 <HardFault_Handler+0x16>

08002fda <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fde:	bf00      	nop
 8002fe0:	e7fd      	b.n	8002fde <MemManage_Handler+0x4>

08002fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fe6:	bf00      	nop
 8002fe8:	e7fd      	b.n	8002fe6 <BusFault_Handler+0x4>

08002fea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fee:	bf00      	nop
 8002ff0:	e7fd      	b.n	8002fee <UsageFault_Handler+0x4>

08002ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern volatile uint32_t systick_heartbeat; // локальное extern для совместимости
  systick_heartbeat++; // инкремент счётчика
 8003020:	4b04      	ldr	r3, [pc, #16]	@ (8003034 <SysTick_Handler+0x18>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	4a03      	ldr	r2, [pc, #12]	@ (8003034 <SysTick_Handler+0x18>)
 8003028:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800302a:	f001 fb81 	bl	8004730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	2400b260 	.word	0x2400b260

08003038 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  /* minimized: no UART in IRQ */
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800303c:	4802      	ldr	r0, [pc, #8]	@ (8003048 <DMA1_Stream0_IRQHandler+0x10>)
 800303e:	f004 ff8d 	bl	8007f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	2400b148 	.word	0x2400b148

0800304c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  /* minimized: no UART in IRQ */
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003050:	4802      	ldr	r0, [pc, #8]	@ (800305c <DMA1_Stream1_IRQHandler+0x10>)
 8003052:	f004 ff83 	bl	8007f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2400b1c0 	.word	0x2400b1c0

08003060 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  /* minimized: no UART in IRQ */
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8003064:	4803      	ldr	r0, [pc, #12]	@ (8003074 <TIM6_DAC_IRQHandler+0x14>)
 8003066:	f003 fce8 	bl	8006a3a <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800306a:	4803      	ldr	r0, [pc, #12]	@ (8003078 <TIM6_DAC_IRQHandler+0x18>)
 800306c:	f00c fb16 	bl	800f69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003070:	bf00      	nop
 8003072:	bd80      	pop	{r7, pc}
 8003074:	2400b134 	.word	0x2400b134
 8003078:	2400b008 	.word	0x2400b008

0800307c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */
  /* minimized: no UART in IRQ */
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003080:	4802      	ldr	r0, [pc, #8]	@ (800308c <OTG_HS_IRQHandler+0x10>)
 8003082:	f006 fd99 	bl	8009bb8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	2401a704 	.word	0x2401a704

08003090 <hf_hex>:

/* USER CODE BEGIN 1 */
// Вспомогательная функция форматирования 32-битного значения в HEX (8 символов)
static void hf_hex(char *dst, uint32_t v){
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
    static const char *hx = "0123456789ABCDEF";
    for(int i=0;i<8;i++){ dst[7-i] = hx[v & 0xF]; v >>= 4; }
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	e013      	b.n	80030c8 <hf_hex+0x38>
 80030a0:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <hf_hex+0x54>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	441a      	add	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f1c3 0307 	rsb	r3, r3, #7
 80030b2:	4619      	mov	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	440b      	add	r3, r1
 80030b8:	7812      	ldrb	r2, [r2, #0]
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3301      	adds	r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b07      	cmp	r3, #7
 80030cc:	dde8      	ble.n	80030a0 <hf_hex+0x10>
    dst[8] = 0;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3308      	adds	r3, #8
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	24000014 	.word	0x24000014

080030e8 <hf_print_line>:
// Печать регистра на заданной строке: label + ':' + hex
static void hf_print_line(uint16_t y, const char *label, uint32_t val){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b090      	sub	sp, #64	@ 0x40
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	4603      	mov	r3, r0
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	81fb      	strh	r3, [r7, #14]
    char buf[20];
    char hex[9];
    hf_hex(hex,val);
 80030f6:	f107 0310 	add.w	r3, r7, #16
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ffc7 	bl	8003090 <hf_hex>
    // Формат: LBL:XXXXXXXX
    int i=0; while(label[i] && i<5){ buf[i]=label[i]; i++; }
 8003102:	2300      	movs	r3, #0
 8003104:	637b      	str	r3, [r7, #52]	@ 0x34
 8003106:	e00c      	b.n	8003122 <hf_print_line+0x3a>
 8003108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	4413      	add	r3, r2
 800310e:	7819      	ldrb	r1, [r3, #0]
 8003110:	f107 021c 	add.w	r2, r7, #28
 8003114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003116:	4413      	add	r3, r2
 8003118:	460a      	mov	r2, r1
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311e:	3301      	adds	r3, #1
 8003120:	637b      	str	r3, [r7, #52]	@ 0x34
 8003122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	4413      	add	r3, r2
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <hf_print_line+0x4c>
 800312e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003130:	2b04      	cmp	r3, #4
 8003132:	dde9      	ble.n	8003108 <hf_print_line+0x20>
    buf[i++]=':'; for(int j=0;j<8 && i<sizeof(buf)-1;j++) buf[i++]=hex[j];
 8003134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	637a      	str	r2, [r7, #52]	@ 0x34
 800313a:	3338      	adds	r3, #56	@ 0x38
 800313c:	443b      	add	r3, r7
 800313e:	223a      	movs	r2, #58	@ 0x3a
 8003140:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003144:	2300      	movs	r3, #0
 8003146:	633b      	str	r3, [r7, #48]	@ 0x30
 8003148:	e00e      	b.n	8003168 <hf_print_line+0x80>
 800314a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003150:	f107 0110 	add.w	r1, r7, #16
 8003154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003156:	440a      	add	r2, r1
 8003158:	7812      	ldrb	r2, [r2, #0]
 800315a:	3338      	adds	r3, #56	@ 0x38
 800315c:	443b      	add	r3, r7
 800315e:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003164:	3301      	adds	r3, #1
 8003166:	633b      	str	r3, [r7, #48]	@ 0x30
 8003168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316a:	2b07      	cmp	r3, #7
 800316c:	dc02      	bgt.n	8003174 <hf_print_line+0x8c>
 800316e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003170:	2b12      	cmp	r3, #18
 8003172:	d9ea      	bls.n	800314a <hf_print_line+0x62>
    buf[i]=0;
 8003174:	f107 021c 	add.w	r2, r7, #28
 8003178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317a:	4413      	add	r3, r2
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
    LCD_ShowString_Size(0,y,buf,12,WHITE,BLACK);
 8003180:	f107 021c 	add.w	r2, r7, #28
 8003184:	89f9      	ldrh	r1, [r7, #14]
 8003186:	2300      	movs	r3, #0
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	230c      	movs	r3, #12
 8003192:	2000      	movs	r0, #0
 8003194:	f000 ffe2 	bl	800415c <LCD_ShowString_Size>
}
 8003198:	bf00      	nop
 800319a:	3738      	adds	r7, #56	@ 0x38
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HardFault_Display>:
static void HardFault_Display(void){
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af02      	add	r7, sp, #8
    // очистим область
    LCD_FillRect(0,0,160,80,BLACK);
 80031a6:	2300      	movs	r3, #0
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2350      	movs	r3, #80	@ 0x50
 80031ac:	22a0      	movs	r2, #160	@ 0xa0
 80031ae:	2100      	movs	r1, #0
 80031b0:	2000      	movs	r0, #0
 80031b2:	f001 f81d 	bl	80041f0 <LCD_FillRect>
    LCD_ShowString_Size(0,0,"HARDFAULT",12,RED,BLACK);
 80031b6:	2300      	movs	r3, #0
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	230c      	movs	r3, #12
 80031c2:	4a15      	ldr	r2, [pc, #84]	@ (8003218 <HardFault_Display+0x78>)
 80031c4:	2100      	movs	r1, #0
 80031c6:	2000      	movs	r0, #0
 80031c8:	f000 ffc8 	bl	800415c <LCD_ShowString_Size>
    hf_print_line(12,"PC",hardfault_pc);
 80031cc:	4b13      	ldr	r3, [pc, #76]	@ (800321c <HardFault_Display+0x7c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4913      	ldr	r1, [pc, #76]	@ (8003220 <HardFault_Display+0x80>)
 80031d4:	200c      	movs	r0, #12
 80031d6:	f7ff ff87 	bl	80030e8 <hf_print_line>
    hf_print_line(24,"LR",hardfault_lr);
 80031da:	4b12      	ldr	r3, [pc, #72]	@ (8003224 <HardFault_Display+0x84>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	4911      	ldr	r1, [pc, #68]	@ (8003228 <HardFault_Display+0x88>)
 80031e2:	2018      	movs	r0, #24
 80031e4:	f7ff ff80 	bl	80030e8 <hf_print_line>
    hf_print_line(36,"CFSR",hardfault_cfsr);
 80031e8:	4b10      	ldr	r3, [pc, #64]	@ (800322c <HardFault_Display+0x8c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4910      	ldr	r1, [pc, #64]	@ (8003230 <HardFault_Display+0x90>)
 80031f0:	2024      	movs	r0, #36	@ 0x24
 80031f2:	f7ff ff79 	bl	80030e8 <hf_print_line>
    hf_print_line(48,"BFAR",hardfault_bfar);
 80031f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <HardFault_Display+0x94>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	490e      	ldr	r1, [pc, #56]	@ (8003238 <HardFault_Display+0x98>)
 80031fe:	2030      	movs	r0, #48	@ 0x30
 8003200:	f7ff ff72 	bl	80030e8 <hf_print_line>
    hf_print_line(60,"HFSR",hardfault_hfsr);
 8003204:	4b0d      	ldr	r3, [pc, #52]	@ (800323c <HardFault_Display+0x9c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	490d      	ldr	r1, [pc, #52]	@ (8003240 <HardFault_Display+0xa0>)
 800320c:	203c      	movs	r0, #60	@ 0x3c
 800320e:	f7ff ff6b 	bl	80030e8 <hf_print_line>
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	0801c70c 	.word	0x0801c70c
 800321c:	2400b2a0 	.word	0x2400b2a0
 8003220:	0801c718 	.word	0x0801c718
 8003224:	2400b29c 	.word	0x2400b29c
 8003228:	0801c71c 	.word	0x0801c71c
 800322c:	2400b2a8 	.word	0x2400b2a8
 8003230:	0801c720 	.word	0x0801c720
 8003234:	2400b2b0 	.word	0x2400b2b0
 8003238:	0801c728 	.word	0x0801c728
 800323c:	2400b2ac 	.word	0x2400b2ac
 8003240:	0801c730 	.word	0x0801c730

08003244 <HardFault_Capture>:
// Реализация захвата контекста HardFault
void HardFault_Capture(uint32_t *stack_addr)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  hardfault_r0  = stack_addr[0];
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a21      	ldr	r2, [pc, #132]	@ (80032d8 <HardFault_Capture+0x94>)
 8003252:	6013      	str	r3, [r2, #0]
  hardfault_r1  = stack_addr[1];
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4a20      	ldr	r2, [pc, #128]	@ (80032dc <HardFault_Capture+0x98>)
 800325a:	6013      	str	r3, [r2, #0]
  hardfault_r2  = stack_addr[2];
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a1f      	ldr	r2, [pc, #124]	@ (80032e0 <HardFault_Capture+0x9c>)
 8003262:	6013      	str	r3, [r2, #0]
  hardfault_r3  = stack_addr[3];
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a1e      	ldr	r2, [pc, #120]	@ (80032e4 <HardFault_Capture+0xa0>)
 800326a:	6013      	str	r3, [r2, #0]
  hardfault_r12 = stack_addr[4];
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	4a1d      	ldr	r2, [pc, #116]	@ (80032e8 <HardFault_Capture+0xa4>)
 8003272:	6013      	str	r3, [r2, #0]
  hardfault_lr  = stack_addr[5];
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	4a1c      	ldr	r2, [pc, #112]	@ (80032ec <HardFault_Capture+0xa8>)
 800327a:	6013      	str	r3, [r2, #0]
  hardfault_pc  = stack_addr[6];
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	4a1b      	ldr	r2, [pc, #108]	@ (80032f0 <HardFault_Capture+0xac>)
 8003282:	6013      	str	r3, [r2, #0]
  hardfault_psr = stack_addr[7];
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	4a1a      	ldr	r2, [pc, #104]	@ (80032f4 <HardFault_Capture+0xb0>)
 800328a:	6013      	str	r3, [r2, #0]
  // Чтение системных регистров Fault
  hardfault_cfsr = SCB->CFSR;
 800328c:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <HardFault_Capture+0xb4>)
 800328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003290:	4a1a      	ldr	r2, [pc, #104]	@ (80032fc <HardFault_Capture+0xb8>)
 8003292:	6013      	str	r3, [r2, #0]
  hardfault_hfsr = SCB->HFSR;
 8003294:	4b18      	ldr	r3, [pc, #96]	@ (80032f8 <HardFault_Capture+0xb4>)
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	4a19      	ldr	r2, [pc, #100]	@ (8003300 <HardFault_Capture+0xbc>)
 800329a:	6013      	str	r3, [r2, #0]
  hardfault_bfar = SCB->BFAR;
 800329c:	4b16      	ldr	r3, [pc, #88]	@ (80032f8 <HardFault_Capture+0xb4>)
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	4a18      	ldr	r2, [pc, #96]	@ (8003304 <HardFault_Capture+0xc0>)
 80032a2:	6013      	str	r3, [r2, #0]
  hardfault_mmfar= SCB->MMFAR;
 80032a4:	4b14      	ldr	r3, [pc, #80]	@ (80032f8 <HardFault_Capture+0xb4>)
 80032a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a8:	4a17      	ldr	r2, [pc, #92]	@ (8003308 <HardFault_Capture+0xc4>)
 80032aa:	6013      	str	r3, [r2, #0]
  hardfault_active = 1;
 80032ac:	4b17      	ldr	r3, [pc, #92]	@ (800330c <HardFault_Capture+0xc8>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
  // Пытаемся вывести на LCD (если инициализирован). Даже если нет — SPI просто не даст эффекта.
  HardFault_Display();
 80032b2:	f7ff ff75 	bl	80031a0 <HardFault_Display>
  // Мигание LED для индикации HardFault
  while(1){
    HAL_GPIO_TogglePin(Led_Test_GPIO_Port, Led_Test_Pin);
 80032b6:	2108      	movs	r1, #8
 80032b8:	4815      	ldr	r0, [pc, #84]	@ (8003310 <HardFault_Capture+0xcc>)
 80032ba:	f006 fb22 	bl	8009902 <HAL_GPIO_TogglePin>
    for(volatile uint32_t d=0; d<500000; ++d){ __NOP(); }
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e003      	b.n	80032cc <HardFault_Capture+0x88>
 80032c4:	bf00      	nop
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3301      	adds	r3, #1
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a11      	ldr	r2, [pc, #68]	@ (8003314 <HardFault_Capture+0xd0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d9f7      	bls.n	80032c4 <HardFault_Capture+0x80>
    HAL_GPIO_TogglePin(Led_Test_GPIO_Port, Led_Test_Pin);
 80032d4:	e7ef      	b.n	80032b6 <HardFault_Capture+0x72>
 80032d6:	bf00      	nop
 80032d8:	2400b288 	.word	0x2400b288
 80032dc:	2400b28c 	.word	0x2400b28c
 80032e0:	2400b290 	.word	0x2400b290
 80032e4:	2400b294 	.word	0x2400b294
 80032e8:	2400b298 	.word	0x2400b298
 80032ec:	2400b29c 	.word	0x2400b29c
 80032f0:	2400b2a0 	.word	0x2400b2a0
 80032f4:	2400b2a4 	.word	0x2400b2a4
 80032f8:	e000ed00 	.word	0xe000ed00
 80032fc:	2400b2a8 	.word	0x2400b2a8
 8003300:	2400b2ac 	.word	0x2400b2ac
 8003304:	2400b2b0 	.word	0x2400b2b0
 8003308:	2400b2b4 	.word	0x2400b2b4
 800330c:	2400b2b8 	.word	0x2400b2b8
 8003310:	58021000 	.word	0x58021000
 8003314:	0007a11f 	.word	0x0007a11f

08003318 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	e00a      	b.n	8003340 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800332a:	f3af 8000 	nop.w
 800332e:	4601      	mov	r1, r0
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	60ba      	str	r2, [r7, #8]
 8003336:	b2ca      	uxtb	r2, r1
 8003338:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	3301      	adds	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	dbf0      	blt.n	800332a <_read+0x12>
  }

  return len;
 8003348:	687b      	ldr	r3, [r7, #4]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e009      	b.n	8003378 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	60ba      	str	r2, [r7, #8]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 f80d 	bl	800338c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	3301      	adds	r3, #1
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	429a      	cmp	r2, r3
 800337e:	dbf1      	blt.n	8003364 <_write+0x12>
  }
  return len;
 8003380:	687b      	ldr	r3, [r7, #4]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <__io_putchar>:

/* Provide __io_putchar to send characters over USART1 */
int __io_putchar(int ch)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint8_t c = (uint8_t)ch;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	73fb      	strb	r3, [r7, #15]
  /* Transmit in blocking mode; small timeout is OK for logs */
  (void)HAL_UART_Transmit(&huart1, &c, 1, 10);
 800339a:	f107 010f 	add.w	r1, r7, #15
 800339e:	230a      	movs	r3, #10
 80033a0:	2201      	movs	r2, #1
 80033a2:	4804      	ldr	r0, [pc, #16]	@ (80033b4 <__io_putchar+0x28>)
 80033a4:	f00d fbbe 	bl	8010b24 <HAL_UART_Transmit>
  return ch;
 80033a8:	687b      	ldr	r3, [r7, #4]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	2400b0a0 	.word	0x2400b0a0

080033b8 <_close>:

int _close(int file)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033e0:	605a      	str	r2, [r3, #4]
  return 0;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <_isatty>:

int _isatty(int file)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033f8:	2301      	movs	r3, #1
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003406:	b480      	push	{r7}
 8003408:	b085      	sub	sp, #20
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003428:	4a14      	ldr	r2, [pc, #80]	@ (800347c <_sbrk+0x5c>)
 800342a:	4b15      	ldr	r3, [pc, #84]	@ (8003480 <_sbrk+0x60>)
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003434:	4b13      	ldr	r3, [pc, #76]	@ (8003484 <_sbrk+0x64>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d102      	bne.n	8003442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800343c:	4b11      	ldr	r3, [pc, #68]	@ (8003484 <_sbrk+0x64>)
 800343e:	4a12      	ldr	r2, [pc, #72]	@ (8003488 <_sbrk+0x68>)
 8003440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003442:	4b10      	ldr	r3, [pc, #64]	@ (8003484 <_sbrk+0x64>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	429a      	cmp	r2, r3
 800344e:	d207      	bcs.n	8003460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003450:	f017 fd74 	bl	801af3c <__errno>
 8003454:	4603      	mov	r3, r0
 8003456:	220c      	movs	r2, #12
 8003458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800345a:	f04f 33ff 	mov.w	r3, #4294967295
 800345e:	e009      	b.n	8003474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003460:	4b08      	ldr	r3, [pc, #32]	@ (8003484 <_sbrk+0x64>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003466:	4b07      	ldr	r3, [pc, #28]	@ (8003484 <_sbrk+0x64>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	4a05      	ldr	r2, [pc, #20]	@ (8003484 <_sbrk+0x64>)
 8003470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003472:	68fb      	ldr	r3, [r7, #12]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	24050000 	.word	0x24050000
 8003480:	00000400 	.word	0x00000400
 8003484:	2400b2bc 	.word	0x2400b2bc
 8003488:	2401b000 	.word	0x2401b000

0800348c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003490:	4b3e      	ldr	r3, [pc, #248]	@ (800358c <SystemInit+0x100>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003496:	4a3d      	ldr	r2, [pc, #244]	@ (800358c <SystemInit+0x100>)
 8003498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800349c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003590 <SystemInit+0x104>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	2b06      	cmp	r3, #6
 80034aa:	d807      	bhi.n	80034bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034ac:	4b38      	ldr	r3, [pc, #224]	@ (8003590 <SystemInit+0x104>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 030f 	bic.w	r3, r3, #15
 80034b4:	4a36      	ldr	r2, [pc, #216]	@ (8003590 <SystemInit+0x104>)
 80034b6:	f043 0307 	orr.w	r3, r3, #7
 80034ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80034bc:	4b35      	ldr	r3, [pc, #212]	@ (8003594 <SystemInit+0x108>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a34      	ldr	r2, [pc, #208]	@ (8003594 <SystemInit+0x108>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034c8:	4b32      	ldr	r3, [pc, #200]	@ (8003594 <SystemInit+0x108>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80034ce:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <SystemInit+0x108>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4930      	ldr	r1, [pc, #192]	@ (8003594 <SystemInit+0x108>)
 80034d4:	4b30      	ldr	r3, [pc, #192]	@ (8003598 <SystemInit+0x10c>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034da:	4b2d      	ldr	r3, [pc, #180]	@ (8003590 <SystemInit+0x104>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003590 <SystemInit+0x104>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 030f 	bic.w	r3, r3, #15
 80034ee:	4a28      	ldr	r2, [pc, #160]	@ (8003590 <SystemInit+0x104>)
 80034f0:	f043 0307 	orr.w	r3, r3, #7
 80034f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80034f6:	4b27      	ldr	r3, [pc, #156]	@ (8003594 <SystemInit+0x108>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80034fc:	4b25      	ldr	r3, [pc, #148]	@ (8003594 <SystemInit+0x108>)
 80034fe:	2200      	movs	r2, #0
 8003500:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003502:	4b24      	ldr	r3, [pc, #144]	@ (8003594 <SystemInit+0x108>)
 8003504:	2200      	movs	r2, #0
 8003506:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003508:	4b22      	ldr	r3, [pc, #136]	@ (8003594 <SystemInit+0x108>)
 800350a:	4a24      	ldr	r2, [pc, #144]	@ (800359c <SystemInit+0x110>)
 800350c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800350e:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <SystemInit+0x108>)
 8003510:	4a23      	ldr	r2, [pc, #140]	@ (80035a0 <SystemInit+0x114>)
 8003512:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003514:	4b1f      	ldr	r3, [pc, #124]	@ (8003594 <SystemInit+0x108>)
 8003516:	4a23      	ldr	r2, [pc, #140]	@ (80035a4 <SystemInit+0x118>)
 8003518:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <SystemInit+0x108>)
 800351c:	2200      	movs	r2, #0
 800351e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003520:	4b1c      	ldr	r3, [pc, #112]	@ (8003594 <SystemInit+0x108>)
 8003522:	4a20      	ldr	r2, [pc, #128]	@ (80035a4 <SystemInit+0x118>)
 8003524:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003526:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <SystemInit+0x108>)
 8003528:	2200      	movs	r2, #0
 800352a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800352c:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <SystemInit+0x108>)
 800352e:	4a1d      	ldr	r2, [pc, #116]	@ (80035a4 <SystemInit+0x118>)
 8003530:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003532:	4b18      	ldr	r3, [pc, #96]	@ (8003594 <SystemInit+0x108>)
 8003534:	2200      	movs	r2, #0
 8003536:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003538:	4b16      	ldr	r3, [pc, #88]	@ (8003594 <SystemInit+0x108>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a15      	ldr	r2, [pc, #84]	@ (8003594 <SystemInit+0x108>)
 800353e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003542:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003544:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <SystemInit+0x108>)
 8003546:	2200      	movs	r2, #0
 8003548:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800354a:	4b12      	ldr	r3, [pc, #72]	@ (8003594 <SystemInit+0x108>)
 800354c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d113      	bne.n	8003580 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003558:	4b0e      	ldr	r3, [pc, #56]	@ (8003594 <SystemInit+0x108>)
 800355a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800355e:	4a0d      	ldr	r2, [pc, #52]	@ (8003594 <SystemInit+0x108>)
 8003560:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003564:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003568:	4b0f      	ldr	r3, [pc, #60]	@ (80035a8 <SystemInit+0x11c>)
 800356a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800356e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003570:	4b08      	ldr	r3, [pc, #32]	@ (8003594 <SystemInit+0x108>)
 8003572:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003576:	4a07      	ldr	r2, [pc, #28]	@ (8003594 <SystemInit+0x108>)
 8003578:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800357c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000ed00 	.word	0xe000ed00
 8003590:	52002000 	.word	0x52002000
 8003594:	58024400 	.word	0x58024400
 8003598:	eaf6ed7f 	.word	0xeaf6ed7f
 800359c:	02020200 	.word	0x02020200
 80035a0:	01ff0000 	.word	0x01ff0000
 80035a4:	01010280 	.word	0x01010280
 80035a8:	52004000 	.word	0x52004000

080035ac <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80035b0:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <ExitRun0Mode+0x2c>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a08      	ldr	r2, [pc, #32]	@ (80035d8 <ExitRun0Mode+0x2c>)
 80035b6:	f043 0302 	orr.w	r3, r3, #2
 80035ba:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80035bc:	bf00      	nop
 80035be:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <ExitRun0Mode+0x2c>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f9      	beq.n	80035be <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80035ca:	bf00      	nop
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	58024800 	.word	0x58024800

080035dc <usb_cdc_ll_write>:
#include <stdint.h>
#include <stdbool.h>

// Простейшая блокирующая отправка. Если шина занята (USBD_BUSY) делаем короткие попытки.
// В дальнейшем можно заменить на кольцевой буфер и ISR завершения передачи.
bool usb_cdc_ll_write(const uint8_t *data, size_t len) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
    if (!data || !len) return false;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <usb_cdc_ll_write+0x16>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <usb_cdc_ll_write+0x1a>
 80035f2:	2300      	movs	r3, #0
 80035f4:	e023      	b.n	800363e <usb_cdc_ll_write+0x62>
    if (len > 0xFFFFu) len = 0xFFFFu; // ограничение API
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035fc:	d302      	bcc.n	8003604 <usb_cdc_ll_write+0x28>
 80035fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003602:	603b      	str	r3, [r7, #0]
    uint32_t t0 = HAL_GetTick();
 8003604:	f001 f8a8 	bl	8004758 <HAL_GetTick>
 8003608:	60f8      	str	r0, [r7, #12]
    while (1) {
        uint8_t st = CDC_Transmit_HS((uint8_t*)data, (uint16_t)len);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f016 fbfb 	bl	8019e0c <CDC_Transmit_HS>
 8003616:	4603      	mov	r3, r0
 8003618:	72fb      	strb	r3, [r7, #11]
        if (st == USBD_OK) return true;
 800361a:	7afb      	ldrb	r3, [r7, #11]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <usb_cdc_ll_write+0x48>
 8003620:	2301      	movs	r3, #1
 8003622:	e00c      	b.n	800363e <usb_cdc_ll_write+0x62>
        if (st != USBD_BUSY) return false; // ошибка
 8003624:	7afb      	ldrb	r3, [r7, #11]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d001      	beq.n	800362e <usb_cdc_ll_write+0x52>
 800362a:	2300      	movs	r3, #0
 800362c:	e007      	b.n	800363e <usb_cdc_ll_write+0x62>
        if ((HAL_GetTick() - t0) > 10) return false; // таймаут ~10 мс
 800362e:	f001 f893 	bl	8004758 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b0a      	cmp	r3, #10
 800363a:	d9e6      	bls.n	800360a <usb_cdc_ll_write+0x2e>
 800363c:	2300      	movs	r3, #0
    }
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <usb_stream_send_status>:

// Внешняя низкоуровневая отправка
extern bool usb_cdc_ll_write(const uint8_t *data, size_t len);

// Локальная функция отправки статусного пакета
void usb_stream_send_status(void) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b098      	sub	sp, #96	@ 0x60
 800364c:	af00      	add	r7, sp, #0
    vendor_status_v1_t st; memset(&st,0,sizeof(st));
 800364e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003652:	2234      	movs	r2, #52	@ 0x34
 8003654:	2100      	movs	r1, #0
 8003656:	4618      	mov	r0, r3
 8003658:	f017 fc0e 	bl	801ae78 <memset>
    memcpy(st.sig, "STAT", 4);
 800365c:	4b2b      	ldr	r3, [pc, #172]	@ (800370c <usb_stream_send_status+0xc4>)
 800365e:	62bb      	str	r3, [r7, #40]	@ 0x28
    st.version = 1;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    st.cur_samples = g_locked_samples;
 8003666:	4b2a      	ldr	r3, [pc, #168]	@ (8003710 <usb_stream_send_status+0xc8>)
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t ws = g_locked_samples ? (uint16_t)(32 + 2u * g_locked_samples) : 0;
 800366c:	4b28      	ldr	r3, [pc, #160]	@ (8003710 <usb_stream_send_status+0xc8>)
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d006      	beq.n	8003682 <usb_stream_send_status+0x3a>
 8003674:	4b26      	ldr	r3, [pc, #152]	@ (8003710 <usb_stream_send_status+0xc8>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	3310      	adds	r3, #16
 800367a:	b29b      	uxth	r3, r3
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	b29b      	uxth	r3, r3
 8003680:	e000      	b.n	8003684 <usb_stream_send_status+0x3c>
 8003682:	2300      	movs	r3, #0
 8003684:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    st.frame_bytes = ws;
 8003688:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800368c:	863b      	strh	r3, [r7, #48]	@ 0x30
    st.test_frames = (uint16_t)g_test_frames;
 800368e:	4b21      	ldr	r3, [pc, #132]	@ (8003714 <usb_stream_send_status+0xcc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	867b      	strh	r3, [r7, #50]	@ 0x32
    st.produced_seq = g_pair_seq;
 8003696:	4b20      	ldr	r3, [pc, #128]	@ (8003718 <usb_stream_send_status+0xd0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	637b      	str	r3, [r7, #52]	@ 0x34
    st.sent0 = g_sent_adc0; st.sent1 = g_sent_adc1;
 800369c:	4b1f      	ldr	r3, [pc, #124]	@ (800371c <usb_stream_send_status+0xd4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003720 <usb_stream_send_status+0xd8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    st.dbg_tx_cplt = g_dbg_tx_cplt;
 80036a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003724 <usb_stream_send_status+0xdc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	643b      	str	r3, [r7, #64]	@ 0x40
    st.dbg_partial_frame_abort = g_dbg_partial_frame_abort;
 80036ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003728 <usb_stream_send_status+0xe0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	647b      	str	r3, [r7, #68]	@ 0x44
    st.dbg_size_mismatch = g_dbg_size_mismatch;
 80036b4:	4b1d      	ldr	r3, [pc, #116]	@ (800372c <usb_stream_send_status+0xe4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    adc_stream_debug_t dbg; adc_stream_get_debug(&dbg);
 80036ba:	1d3b      	adds	r3, r7, #4
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fd f867 	bl	8000790 <adc_stream_get_debug>
    st.dma_done0 = dbg.dma_full0; st.dma_done1 = dbg.dma_full1;
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	653b      	str	r3, [r7, #80]	@ 0x50
    st.frame_wr_seq_copy = dbg.frame_wr_seq;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	657b      	str	r3, [r7, #84]	@ 0x54
    st.flags_runtime = (usb_stream_cfg()->streaming?1u:0u) | (g_locked_samples?2u:0u);
 80036ce:	f000 fa8b 	bl	8003be8 <usb_stream_cfg>
 80036d2:	4603      	mov	r3, r0
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <usb_stream_send_status+0x96>
 80036da:	2201      	movs	r2, #1
 80036dc:	e000      	b.n	80036e0 <usb_stream_send_status+0x98>
 80036de:	2200      	movs	r2, #0
 80036e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003710 <usb_stream_send_status+0xc8>)
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <usb_stream_send_status+0xa4>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e000      	b.n	80036ee <usb_stream_send_status+0xa6>
 80036ec:	2300      	movs	r3, #0
 80036ee:	4313      	orrs	r3, r2
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
    usb_cdc_ll_write((uint8_t*)&st, sizeof(st));
 80036f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036fa:	2134      	movs	r1, #52	@ 0x34
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ff6d 	bl	80035dc <usb_cdc_ll_write>
}
 8003702:	bf00      	nop
 8003704:	3760      	adds	r7, #96	@ 0x60
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	54415453 	.word	0x54415453
 8003710:	2400b2c4 	.word	0x2400b2c4
 8003714:	2400b2dc 	.word	0x2400b2dc
 8003718:	2400b2c0 	.word	0x2400b2c0
 800371c:	2400b2c8 	.word	0x2400b2c8
 8003720:	2400b2cc 	.word	0x2400b2cc
 8003724:	2400b2d8 	.word	0x2400b2d8
 8003728:	2400b2d0 	.word	0x2400b2d0
 800372c:	2400b2d4 	.word	0x2400b2d4

08003730 <usb_stream_send_test_frame>:

// Тестовый кадр (8 сэмплов, флаги TEST+ADC0, не влияет на фиксацию)
void usb_stream_send_test_frame(void) {
 8003730:	b5b0      	push	{r4, r5, r7, lr}
 8003732:	b0b0      	sub	sp, #192	@ 0xc0
 8003734:	af00      	add	r7, sp, #0
    uint16_t pattern[8]; for (uint16_t i=0;i<8;i++) pattern[i]=i;
 8003736:	2300      	movs	r3, #0
 8003738:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 800373c:	e00d      	b.n	800375a <usb_stream_send_test_frame+0x2a>
 800373e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	33c0      	adds	r3, #192	@ 0xc0
 8003746:	443b      	add	r3, r7
 8003748:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800374c:	f823 2c2c 	strh.w	r2, [r3, #-44]
 8003750:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003754:	3301      	adds	r3, #1
 8003756:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 800375a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800375e:	2b07      	cmp	r3, #7
 8003760:	d9ed      	bls.n	800373e <usb_stream_send_test_frame+0xe>
    vendor_frame_hdr_t hdr; memset(&hdr,0,sizeof(hdr));
 8003762:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003766:	2220      	movs	r2, #32
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f017 fb84 	bl	801ae78 <memset>
    hdr.magic = 0xA55A; hdr.version = 1; hdr.flags = (uint8_t)(VFLAG_TEST | VFLAG_ADC0);
 8003770:	f24a 535a 	movw	r3, #42330	@ 0xa55a
 8003774:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8003778:	2301      	movs	r3, #1
 800377a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800377e:	2381      	movs	r3, #129	@ 0x81
 8003780:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    hdr.seq = 0; // seq=0 для тестового (не относится к рабочим парам)
 8003784:	2300      	movs	r3, #0
 8003786:	67bb      	str	r3, [r7, #120]	@ 0x78
    hdr.timestamp = HAL_GetTick();
 8003788:	f000 ffe6 	bl	8004758 <HAL_GetTick>
 800378c:	4603      	mov	r3, r0
 800378e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    hdr.total_samples = 8;
 8003790:	2308      	movs	r3, #8
 8003792:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    // CRC
    hdr.flags |= VFLAG_CRC;
 8003796:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800379a:	f043 0304 	orr.w	r3, r3, #4
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    hdr.crc16 = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    uint8_t buf[32 + 8*2 + 64]; // header + payload + возможный паддинг
    memcpy(buf, &hdr, sizeof(hdr));
 80037aa:	1d3c      	adds	r4, r7, #4
 80037ac:	f107 0574 	add.w	r5, r7, #116	@ 0x74
 80037b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80037b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memcpy(buf + sizeof(hdr), pattern, sizeof(pattern));
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	3320      	adds	r3, #32
 80037c0:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80037c4:	2210      	movs	r2, #16
 80037c6:	4618      	mov	r0, r3
 80037c8:	f017 fbe5 	bl	801af96 <memcpy>
    // CRC16 по 30 байтам заголовка + payload
    uint16_t crc = 0xFFFFu; const uint8_t* p = buf; size_t len = 30 + sizeof(pattern);
 80037cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037d0:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 80037d4:	1d3b      	adds	r3, r7, #4
 80037d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037da:	232e      	movs	r3, #46	@ 0x2e
 80037dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    for (size_t i=0;i<len;i++){ crc ^= (uint16_t)p[i] << 8; for (int b=0;b<8;b++){ crc = (crc & 0x8000)? (uint16_t)((crc<<1)^0x1021):(uint16_t)(crc<<1); } }
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037e6:	e034      	b.n	8003852 <usb_stream_send_test_frame+0x122>
 80037e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80037ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80037f0:	4413      	add	r3, r2
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b21b      	sxth	r3, r3
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	b21a      	sxth	r2, r3
 80037fa:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 80037fe:	4053      	eors	r3, r2
 8003800:	b21b      	sxth	r3, r3
 8003802:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800380c:	e018      	b.n	8003840 <usb_stream_send_test_frame+0x110>
 800380e:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8003812:	2b00      	cmp	r3, #0
 8003814:	da09      	bge.n	800382a <usb_stream_send_test_frame+0xfa>
 8003816:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	b21a      	sxth	r2, r3
 800381e:	f241 0321 	movw	r3, #4129	@ 0x1021
 8003822:	4053      	eors	r3, r2
 8003824:	b21b      	sxth	r3, r3
 8003826:	b29b      	uxth	r3, r3
 8003828:	e003      	b.n	8003832 <usb_stream_send_test_frame+0x102>
 800382a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	b29b      	uxth	r3, r3
 8003832:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 8003836:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800383a:	3301      	adds	r3, #1
 800383c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003840:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003844:	2b07      	cmp	r3, #7
 8003846:	dde2      	ble.n	800380e <usb_stream_send_test_frame+0xde>
 8003848:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800384c:	3301      	adds	r3, #1
 800384e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003852:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800385a:	429a      	cmp	r2, r3
 800385c:	d3c4      	bcc.n	80037e8 <usb_stream_send_test_frame+0xb8>
    ((vendor_frame_hdr_t*)buf)->crc16 = crc;
 800385e:	1d3b      	adds	r3, r7, #4
 8003860:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8003864:	83da      	strh	r2, [r3, #30]
    // Паддинг до 64
    size_t total = sizeof(hdr) + sizeof(pattern);
 8003866:	2330      	movs	r3, #48	@ 0x30
 8003868:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    size_t pad = (64 - (total & 63u)) & 63u; if (pad) memset(buf+total,0,pad), total+=pad;
 800386c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003870:	425b      	negs	r3, r3
 8003872:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800387a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d010      	beq.n	80038a4 <usb_stream_send_test_frame+0x174>
 8003882:	1d3a      	adds	r2, r7, #4
 8003884:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003888:	4413      	add	r3, r2
 800388a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f017 faf1 	bl	801ae78 <memset>
 8003896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800389a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800389e:	4413      	add	r3, r2
 80038a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    usb_cdc_ll_write(buf, total);
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fe96 	bl	80035dc <usb_cdc_ll_write>
    g_test_frames++;
 80038b0:	4b04      	ldr	r3, [pc, #16]	@ (80038c4 <usb_stream_send_test_frame+0x194>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	4a03      	ldr	r2, [pc, #12]	@ (80038c4 <usb_stream_send_test_frame+0x194>)
 80038b8:	6013      	str	r3, [r2, #0]
}
 80038ba:	bf00      	nop
 80038bc:	37c0      	adds	r7, #192	@ 0xc0
 80038be:	46bd      	mov	sp, r7
 80038c0:	bdb0      	pop	{r4, r5, r7, pc}
 80038c2:	bf00      	nop
 80038c4:	2400b2dc 	.word	0x2400b2dc

080038c8 <crc16_buf>:
static uint16_t  s_frame_samples = 0; // полное количество выборок
static uint8_t   s_next_channel_to_send = 0; // 0 -> отправим ADC0, 1 -> ADC1
static uint8_t   s_frame_active = 0;

// CRC16 helper
static uint16_t crc16_buf(const uint8_t* data, size_t len){ uint16_t crc=0xFFFFu; for(size_t i=0;i<len;i++){ crc^=(uint16_t)data[i]<<8; for(int b=0;b<8;b++){ if(crc&0x8000) crc=(uint16_t)((crc<<1)^0x1021); else crc=(uint16_t)(crc<<1);} } return crc; }
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
 80038d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038d6:	82fb      	strh	r3, [r7, #22]
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	e028      	b.n	8003930 <crc16_buf+0x68>
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4413      	add	r3, r2
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b21b      	sxth	r3, r3
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	b21a      	sxth	r2, r3
 80038ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80038f0:	4053      	eors	r3, r2
 80038f2:	b21b      	sxth	r3, r3
 80038f4:	82fb      	strh	r3, [r7, #22]
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	e013      	b.n	8003924 <crc16_buf+0x5c>
 80038fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003900:	2b00      	cmp	r3, #0
 8003902:	da09      	bge.n	8003918 <crc16_buf+0x50>
 8003904:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	b21a      	sxth	r2, r3
 800390c:	f241 0321 	movw	r3, #4129	@ 0x1021
 8003910:	4053      	eors	r3, r2
 8003912:	b21b      	sxth	r3, r3
 8003914:	82fb      	strh	r3, [r7, #22]
 8003916:	e002      	b.n	800391e <crc16_buf+0x56>
 8003918:	8afb      	ldrh	r3, [r7, #22]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	82fb      	strh	r3, [r7, #22]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3301      	adds	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b07      	cmp	r3, #7
 8003928:	dde8      	ble.n	80038fc <crc16_buf+0x34>
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	3301      	adds	r3, #1
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d3d2      	bcc.n	80038de <crc16_buf+0x16>
 8003938:	8afb      	ldrh	r3, [r7, #22]
 800393a:	4618      	mov	r0, r3
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
	...

08003948 <try_send_one_adc_frame>:

// Попытка отправить один USB кадр (один канал). Возврат 1 если отправлено.
static uint8_t try_send_one_adc_frame(void){
 8003948:	b5b0      	push	{r4, r5, r7, lr}
 800394a:	b090      	sub	sp, #64	@ 0x40
 800394c:	af00      	add	r7, sp, #0
    if (!s_frame_active) return 0;
 800394e:	4b55      	ldr	r3, [pc, #340]	@ (8003aa4 <try_send_one_adc_frame+0x15c>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <try_send_one_adc_frame+0x12>
 8003956:	2300      	movs	r3, #0
 8003958:	e0a0      	b.n	8003a9c <try_send_one_adc_frame+0x154>
    uint8_t ch = s_next_channel_to_send; // 0 или 1
 800395a:	4b53      	ldr	r3, [pc, #332]	@ (8003aa8 <try_send_one_adc_frame+0x160>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    // Формируем заголовок
    vendor_frame_hdr_t hdr; memset(&hdr,0,sizeof(hdr));
 8003962:	1d3b      	adds	r3, r7, #4
 8003964:	2220      	movs	r2, #32
 8003966:	2100      	movs	r1, #0
 8003968:	4618      	mov	r0, r3
 800396a:	f017 fa85 	bl	801ae78 <memset>
    hdr.magic = 0xA55A; hdr.version = 1; hdr.flags = (ch==0)? VFLAG_ADC0 : VFLAG_ADC1;
 800396e:	f24a 535a 	movw	r3, #42330	@ 0xa55a
 8003972:	80bb      	strh	r3, [r7, #4]
 8003974:	2301      	movs	r3, #1
 8003976:	71bb      	strb	r3, [r7, #6]
 8003978:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <try_send_one_adc_frame+0x3c>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <try_send_one_adc_frame+0x3e>
 8003984:	2302      	movs	r3, #2
 8003986:	71fb      	strb	r3, [r7, #7]
    hdr.seq = g_pair_seq; // общий seq пары
 8003988:	4b48      	ldr	r3, [pc, #288]	@ (8003aac <try_send_one_adc_frame+0x164>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60bb      	str	r3, [r7, #8]
    hdr.timestamp = HAL_GetTick();
 800398e:	f000 fee3 	bl	8004758 <HAL_GetTick>
 8003992:	4603      	mov	r3, r0
 8003994:	60fb      	str	r3, [r7, #12]
    hdr.total_samples = s_frame_samples; // уже проверено / зафиксировано
 8003996:	4b46      	ldr	r3, [pc, #280]	@ (8003ab0 <try_send_one_adc_frame+0x168>)
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	823b      	strh	r3, [r7, #16]
    hdr.zone_count = 0; // пока не используем зоны
 800399c:	2300      	movs	r3, #0
 800399e:	827b      	strh	r3, [r7, #18]
    // Включаем CRC
    hdr.flags |= VFLAG_CRC;
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	f043 0304 	orr.w	r3, r3, #4
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	71fb      	strb	r3, [r7, #7]
    hdr.crc16 = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	847b      	strh	r3, [r7, #34]	@ 0x22
    size_t payload_bytes = (size_t)s_frame_samples * 2u;
 80039ae:	4b40      	ldr	r3, [pc, #256]	@ (8003ab0 <try_send_one_adc_frame+0x168>)
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	637b      	str	r3, [r7, #52]	@ 0x34
    size_t max_needed = sizeof(hdr) + payload_bytes + 64; // +паддинг
 80039b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b8:	3360      	adds	r3, #96	@ 0x60
 80039ba:	633b      	str	r3, [r7, #48]	@ 0x30
    static uint8_t txbuf[4096]; // с запасом
    if (max_needed > sizeof(txbuf)) return 0; // слишком большой (не должен происходить)
 80039bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c2:	d901      	bls.n	80039c8 <try_send_one_adc_frame+0x80>
 80039c4:	2300      	movs	r3, #0
 80039c6:	e069      	b.n	8003a9c <try_send_one_adc_frame+0x154>
    memcpy(txbuf, &hdr, sizeof(hdr));
 80039c8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ab4 <try_send_one_adc_frame+0x16c>)
 80039ca:	461d      	mov	r5, r3
 80039cc:	1d3c      	adds	r4, r7, #4
 80039ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80039d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const uint16_t *src = (ch==0)? s_frame_ch0 : s_frame_ch1;
 80039da:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <try_send_one_adc_frame+0xa0>
 80039e2:	4b35      	ldr	r3, [pc, #212]	@ (8003ab8 <try_send_one_adc_frame+0x170>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	e001      	b.n	80039ec <try_send_one_adc_frame+0xa4>
 80039e8:	4b34      	ldr	r3, [pc, #208]	@ (8003abc <try_send_one_adc_frame+0x174>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(txbuf + sizeof(hdr), src, payload_bytes);
 80039ee:	4b34      	ldr	r3, [pc, #208]	@ (8003ac0 <try_send_one_adc_frame+0x178>)
 80039f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039f4:	4618      	mov	r0, r3
 80039f6:	f017 face 	bl	801af96 <memcpy>
    // CRC по 30 байтам заголовка + payload
    uint16_t crc = crc16_buf(txbuf, 30 + payload_bytes);
 80039fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fc:	331e      	adds	r3, #30
 80039fe:	4619      	mov	r1, r3
 8003a00:	482c      	ldr	r0, [pc, #176]	@ (8003ab4 <try_send_one_adc_frame+0x16c>)
 8003a02:	f7ff ff61 	bl	80038c8 <crc16_buf>
 8003a06:	4603      	mov	r3, r0
 8003a08:	857b      	strh	r3, [r7, #42]	@ 0x2a
    ((vendor_frame_hdr_t*)txbuf)->crc16 = crc;
 8003a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab4 <try_send_one_adc_frame+0x16c>)
 8003a0c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003a0e:	83da      	strh	r2, [r3, #30]
    size_t total = sizeof(hdr) + payload_bytes;
 8003a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a12:	3320      	adds	r3, #32
 8003a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    size_t pad = (64 - (total & 63u)) & 63u; if (pad){ memset(txbuf+total,0,pad); total += pad; }
 8003a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a18:	425b      	negs	r3, r3
 8003a1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <try_send_one_adc_frame+0xf6>
 8003a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a28:	4a22      	ldr	r2, [pc, #136]	@ (8003ab4 <try_send_one_adc_frame+0x16c>)
 8003a2a:	4413      	add	r3, r2
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f017 fa21 	bl	801ae78 <memset>
 8003a36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	4413      	add	r3, r2
 8003a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (!usb_cdc_ll_write(txbuf, total)) return 0; // endpoint занят
 8003a3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a40:	481c      	ldr	r0, [pc, #112]	@ (8003ab4 <try_send_one_adc_frame+0x16c>)
 8003a42:	f7ff fdcb 	bl	80035dc <usb_cdc_ll_write>
 8003a46:	4603      	mov	r3, r0
 8003a48:	f083 0301 	eor.w	r3, r3, #1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <try_send_one_adc_frame+0x10e>
 8003a52:	2300      	movs	r3, #0
 8003a54:	e022      	b.n	8003a9c <try_send_one_adc_frame+0x154>
    // Учёт
    if (ch==0) g_sent_adc0++; else g_sent_adc1++;
 8003a56:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <try_send_one_adc_frame+0x122>
 8003a5e:	4b19      	ldr	r3, [pc, #100]	@ (8003ac4 <try_send_one_adc_frame+0x17c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	4a17      	ldr	r2, [pc, #92]	@ (8003ac4 <try_send_one_adc_frame+0x17c>)
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	e004      	b.n	8003a74 <try_send_one_adc_frame+0x12c>
 8003a6a:	4b17      	ldr	r3, [pc, #92]	@ (8003ac8 <try_send_one_adc_frame+0x180>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	4a15      	ldr	r2, [pc, #84]	@ (8003ac8 <try_send_one_adc_frame+0x180>)
 8003a72:	6013      	str	r3, [r2, #0]
    // Переключение или завершение пары
    if (s_next_channel_to_send == 0){ s_next_channel_to_send = 1; }
 8003a74:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa8 <try_send_one_adc_frame+0x160>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <try_send_one_adc_frame+0x13c>
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa8 <try_send_one_adc_frame+0x160>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	e00a      	b.n	8003a9a <try_send_one_adc_frame+0x152>
    else { // пара завершена
        s_frame_active = 0; s_next_channel_to_send = 0; g_pair_seq++; }
 8003a84:	4b07      	ldr	r3, [pc, #28]	@ (8003aa4 <try_send_one_adc_frame+0x15c>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
 8003a8a:	4b07      	ldr	r3, [pc, #28]	@ (8003aa8 <try_send_one_adc_frame+0x160>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <try_send_one_adc_frame+0x164>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	4a05      	ldr	r2, [pc, #20]	@ (8003aac <try_send_one_adc_frame+0x164>)
 8003a98:	6013      	str	r3, [r2, #0]
    return 1;
 8003a9a:	2301      	movs	r3, #1
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3740      	adds	r7, #64	@ 0x40
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa4:	2400b2ef 	.word	0x2400b2ef
 8003aa8:	2400b2ee 	.word	0x2400b2ee
 8003aac:	2400b2c0 	.word	0x2400b2c0
 8003ab0:	2400b2ec 	.word	0x2400b2ec
 8003ab4:	2400b2f0 	.word	0x2400b2f0
 8003ab8:	2400b2e4 	.word	0x2400b2e4
 8003abc:	2400b2e8 	.word	0x2400b2e8
 8003ac0:	2400b310 	.word	0x2400b310
 8003ac4:	2400b2c8 	.word	0x2400b2c8
 8003ac8:	2400b2cc 	.word	0x2400b2cc

08003acc <usb_stream_service>:

// Сервис автоматической отправки (ограниченные итерации, без зависимости от main loop)
static void usb_stream_service(void) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
    if (!usb_stream_cfg()->streaming) return;
 8003ad2:	f000 f889 	bl	8003be8 <usb_stream_cfg>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01b      	beq.n	8003b16 <usb_stream_service+0x4a>
    if (g_service_lock) return; // избегаем вложенности
 8003ade:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <usb_stream_service+0x58>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d118      	bne.n	8003b1a <usb_stream_service+0x4e>
    g_service_lock = 1;
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <usb_stream_service+0x58>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]
    // Ограничим количество попыток за одно обращение, чтобы ISR были короткими
    for (uint8_t i=0; i<4; ++i) {
 8003aee:	2300      	movs	r3, #0
 8003af0:	71fb      	strb	r3, [r7, #7]
 8003af2:	e007      	b.n	8003b04 <usb_stream_service+0x38>
        if (!usb_stream_try_send_frame()) break; // либо нечего, либо endpoint занят
 8003af4:	f000 f818 	bl	8003b28 <usb_stream_try_send_frame>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d006      	beq.n	8003b0c <usb_stream_service+0x40>
    for (uint8_t i=0; i<4; ++i) {
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	3301      	adds	r3, #1
 8003b02:	71fb      	strb	r3, [r7, #7]
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d9f4      	bls.n	8003af4 <usb_stream_service+0x28>
 8003b0a:	e000      	b.n	8003b0e <usb_stream_service+0x42>
        if (!usb_stream_try_send_frame()) break; // либо нечего, либо endpoint занят
 8003b0c:	bf00      	nop
    }
    g_service_lock = 0;
 8003b0e:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <usb_stream_service+0x58>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	e002      	b.n	8003b1c <usb_stream_service+0x50>
    if (!usb_stream_cfg()->streaming) return;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <usb_stream_service+0x50>
    if (g_service_lock) return; // избегаем вложенности
 8003b1a:	bf00      	nop
}
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	2400b2e0 	.word	0x2400b2e0

08003b28 <usb_stream_try_send_frame>:

uint8_t usb_stream_try_send_frame(void) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
    if (!usb_stream_cfg()->streaming) return 0;
 8003b2e:	f000 f85b 	bl	8003be8 <usb_stream_cfg>
 8003b32:	4603      	mov	r3, r0
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <usb_stream_try_send_frame+0x16>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e041      	b.n	8003bc2 <usb_stream_try_send_frame+0x9a>
    // Если нет активного кадра — попробуем взять новый из FIFO
    if (!s_frame_active){
 8003b3e:	4b23      	ldr	r3, [pc, #140]	@ (8003bcc <usb_stream_try_send_frame+0xa4>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d135      	bne.n	8003bb2 <usb_stream_try_send_frame+0x8a>
        uint16_t *c0=NULL,*c1=NULL; uint16_t samples=0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	80fb      	strh	r3, [r7, #6]
        if (!adc_get_frame(&c0,&c1,&samples)) return 0; // нет данных
 8003b52:	1dba      	adds	r2, r7, #6
 8003b54:	f107 0108 	add.w	r1, r7, #8
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fc fdc7 	bl	80006f0 <adc_get_frame>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <usb_stream_try_send_frame+0x44>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e02a      	b.n	8003bc2 <usb_stream_try_send_frame+0x9a>
        // Фиксация размера
        if (g_locked_samples == 0){
 8003b6c:	4b18      	ldr	r3, [pc, #96]	@ (8003bd0 <usb_stream_try_send_frame+0xa8>)
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <usb_stream_try_send_frame+0x54>
            g_locked_samples = samples; // фиксируем
 8003b74:	88fa      	ldrh	r2, [r7, #6]
 8003b76:	4b16      	ldr	r3, [pc, #88]	@ (8003bd0 <usb_stream_try_send_frame+0xa8>)
 8003b78:	801a      	strh	r2, [r3, #0]
 8003b7a:	e00b      	b.n	8003b94 <usb_stream_try_send_frame+0x6c>
        } else if (samples != g_locked_samples){
 8003b7c:	88fa      	ldrh	r2, [r7, #6]
 8003b7e:	4b14      	ldr	r3, [pc, #80]	@ (8003bd0 <usb_stream_try_send_frame+0xa8>)
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d006      	beq.n	8003b94 <usb_stream_try_send_frame+0x6c>
            // Несоответствие размера — отбрасываем кадр целиком
            g_dbg_size_mismatch++;
 8003b86:	4b13      	ldr	r3, [pc, #76]	@ (8003bd4 <usb_stream_try_send_frame+0xac>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	4a11      	ldr	r2, [pc, #68]	@ (8003bd4 <usb_stream_try_send_frame+0xac>)
 8003b8e:	6013      	str	r3, [r2, #0]
            return 1; // «формально обработали» чтобы попробовать следующий
 8003b90:	2301      	movs	r3, #1
 8003b92:	e016      	b.n	8003bc2 <usb_stream_try_send_frame+0x9a>
        }
        // Подготовка активного
        s_frame_ch0 = c0; s_frame_ch1 = c1; s_frame_samples = samples; s_frame_active = 1; s_next_channel_to_send = 0;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a10      	ldr	r2, [pc, #64]	@ (8003bd8 <usb_stream_try_send_frame+0xb0>)
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8003bdc <usb_stream_try_send_frame+0xb4>)
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	88fa      	ldrh	r2, [r7, #6]
 8003ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8003be0 <usb_stream_try_send_frame+0xb8>)
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	4b09      	ldr	r3, [pc, #36]	@ (8003bcc <usb_stream_try_send_frame+0xa4>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	4b0d      	ldr	r3, [pc, #52]	@ (8003be4 <usb_stream_try_send_frame+0xbc>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
    }
    // Пытаемся отправить следующий канал кадра
    if (try_send_one_adc_frame()) return 1;
 8003bb2:	f7ff fec9 	bl	8003948 <try_send_one_adc_frame>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <usb_stream_try_send_frame+0x98>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <usb_stream_try_send_frame+0x9a>
    return 0;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	2400b2ef 	.word	0x2400b2ef
 8003bd0:	2400b2c4 	.word	0x2400b2c4
 8003bd4:	2400b2d4 	.word	0x2400b2d4
 8003bd8:	2400b2e4 	.word	0x2400b2e4
 8003bdc:	2400b2e8 	.word	0x2400b2e8
 8003be0:	2400b2ec 	.word	0x2400b2ec
 8003be4:	2400b2ee 	.word	0x2400b2ee

08003be8 <usb_stream_cfg>:
    if (g_new_frames_flag) { g_new_frames_flag = 0; usb_stream_service(); }
}

// Глобальная конфигурация потока (доступ через usb_stream_cfg())
static usb_stream_cfg_t g_cfg = { .streaming = 0, .full_mode = 1, .profile_id = 0, .roi_offset_us = 0, .roi_length_us = 0, .seq_adc = {0,0} };
usb_stream_cfg_t* usb_stream_cfg(void) { return &g_cfg; }
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	4b02      	ldr	r3, [pc, #8]	@ (8003bf8 <usb_stream_cfg+0x10>)
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	24000020 	.word	0x24000020

08003bfc <stream_send_ack>:

// ACK/NACK helpers
static void stream_send_ack(uint8_t cmd) { uint8_t pkt[2] = { RSP_ACK, cmd }; usb_cdc_ll_write(pkt, sizeof(pkt)); }
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
 8003c06:	2380      	movs	r3, #128	@ 0x80
 8003c08:	733b      	strb	r3, [r7, #12]
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	737b      	strb	r3, [r7, #13]
 8003c0e:	f107 030c 	add.w	r3, r7, #12
 8003c12:	2102      	movs	r1, #2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fce1 	bl	80035dc <usb_cdc_ll_write>
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <stream_send_ack_param>:
void stream_send_ack_param(uint8_t cmd, uint8_t param) { uint8_t pkt[3] = { RSP_ACK, cmd, param }; usb_cdc_ll_write(pkt, sizeof(pkt)); }
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	4603      	mov	r3, r0
 8003c2a:	460a      	mov	r2, r1
 8003c2c:	71fb      	strb	r3, [r7, #7]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	71bb      	strb	r3, [r7, #6]
 8003c32:	2380      	movs	r3, #128	@ 0x80
 8003c34:	733b      	strb	r3, [r7, #12]
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	737b      	strb	r3, [r7, #13]
 8003c3a:	79bb      	ldrb	r3, [r7, #6]
 8003c3c:	73bb      	strb	r3, [r7, #14]
 8003c3e:	f107 030c 	add.w	r3, r7, #12
 8003c42:	2103      	movs	r1, #3
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fcc9 	bl	80035dc <usb_cdc_ll_write>
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <stream_send_nack>:
static void stream_send_nack(uint8_t cmd, uint8_t code) { uint8_t pkt[3] = { RSP_NACK, cmd, code }; usb_cdc_ll_write(pkt, sizeof(pkt)); }
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	4603      	mov	r3, r0
 8003c5a:	460a      	mov	r2, r1
 8003c5c:	71fb      	strb	r3, [r7, #7]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	71bb      	strb	r3, [r7, #6]
 8003c62:	2381      	movs	r3, #129	@ 0x81
 8003c64:	733b      	strb	r3, [r7, #12]
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	737b      	strb	r3, [r7, #13]
 8003c6a:	79bb      	ldrb	r3, [r7, #6]
 8003c6c:	73bb      	strb	r3, [r7, #14]
 8003c6e:	f107 030c 	add.w	r3, r7, #12
 8003c72:	2103      	movs	r1, #3
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fcb1 	bl	80035dc <usb_cdc_ll_write>
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <usb_stream_on_rx_bytes>:

// --- Команды --- (переработанные согласно спецификации)
void usb_stream_on_rx_bytes(const uint8_t* data, size_t len) {
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
    if (!data || !len) return;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 813b 	beq.w	8003f0c <usb_stream_on_rx_bytes+0x288>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8137 	beq.w	8003f0c <usb_stream_on_rx_bytes+0x288>
    size_t i = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
    while (i < len) {
 8003ca2:	e12d      	b.n	8003f00 <usb_stream_on_rx_bytes+0x27c>
        uint8_t cmd = data[i++];
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	617a      	str	r2, [r7, #20]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	74fb      	strb	r3, [r7, #19]
        switch (cmd) {
 8003cb2:	7cfb      	ldrb	r3, [r7, #19]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	2b2f      	cmp	r3, #47	@ 0x2f
 8003cb8:	f200 811c 	bhi.w	8003ef4 <usb_stream_on_rx_bytes+0x270>
 8003cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc4 <usb_stream_on_rx_bytes+0x40>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003d85 	.word	0x08003d85
 8003cc8:	08003ef5 	.word	0x08003ef5
 8003ccc:	08003ef5 	.word	0x08003ef5
 8003cd0:	08003ef5 	.word	0x08003ef5
 8003cd4:	08003ef5 	.word	0x08003ef5
 8003cd8:	08003ef5 	.word	0x08003ef5
 8003cdc:	08003ef5 	.word	0x08003ef5
 8003ce0:	08003ef5 	.word	0x08003ef5
 8003ce4:	08003ef5 	.word	0x08003ef5
 8003ce8:	08003ef5 	.word	0x08003ef5
 8003cec:	08003ef5 	.word	0x08003ef5
 8003cf0:	08003ef5 	.word	0x08003ef5
 8003cf4:	08003ef5 	.word	0x08003ef5
 8003cf8:	08003ef5 	.word	0x08003ef5
 8003cfc:	08003ef5 	.word	0x08003ef5
 8003d00:	08003ef5 	.word	0x08003ef5
 8003d04:	08003ef5 	.word	0x08003ef5
 8003d08:	08003ef5 	.word	0x08003ef5
 8003d0c:	08003e01 	.word	0x08003e01
 8003d10:	08003e4d 	.word	0x08003e4d
 8003d14:	08003ea1 	.word	0x08003ea1
 8003d18:	08003ef5 	.word	0x08003ef5
 8003d1c:	08003ef5 	.word	0x08003ef5
 8003d20:	08003ef5 	.word	0x08003ef5
 8003d24:	08003ef5 	.word	0x08003ef5
 8003d28:	08003ef5 	.word	0x08003ef5
 8003d2c:	08003ef5 	.word	0x08003ef5
 8003d30:	08003ef5 	.word	0x08003ef5
 8003d34:	08003ef5 	.word	0x08003ef5
 8003d38:	08003ef5 	.word	0x08003ef5
 8003d3c:	08003ef5 	.word	0x08003ef5
 8003d40:	08003d8f 	.word	0x08003d8f
 8003d44:	08003ddd 	.word	0x08003ddd
 8003d48:	08003ef5 	.word	0x08003ef5
 8003d4c:	08003ef5 	.word	0x08003ef5
 8003d50:	08003ef5 	.word	0x08003ef5
 8003d54:	08003ef5 	.word	0x08003ef5
 8003d58:	08003ef5 	.word	0x08003ef5
 8003d5c:	08003ef5 	.word	0x08003ef5
 8003d60:	08003ef5 	.word	0x08003ef5
 8003d64:	08003ef5 	.word	0x08003ef5
 8003d68:	08003ef5 	.word	0x08003ef5
 8003d6c:	08003ef5 	.word	0x08003ef5
 8003d70:	08003ef5 	.word	0x08003ef5
 8003d74:	08003ef5 	.word	0x08003ef5
 8003d78:	08003ef5 	.word	0x08003ef5
 8003d7c:	08003ef5 	.word	0x08003ef5
 8003d80:	08003dfb 	.word	0x08003dfb
            case CMD_PING: { stream_send_ack(cmd); break; }
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff ff38 	bl	8003bfc <stream_send_ack>
 8003d8c:	e0b8      	b.n	8003f00 <usb_stream_on_rx_bytes+0x27c>
            case CMD_START_STREAM: {
                // Сброс состояния
                g_pair_seq = 1; // начинаем с 1, тестовый кадр seq=0
 8003d8e:	4b61      	ldr	r3, [pc, #388]	@ (8003f14 <usb_stream_on_rx_bytes+0x290>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
                g_sent_adc0=g_sent_adc1=0; g_locked_samples=0;
 8003d94:	4b60      	ldr	r3, [pc, #384]	@ (8003f18 <usb_stream_on_rx_bytes+0x294>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8003f18 <usb_stream_on_rx_bytes+0x294>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a5f      	ldr	r2, [pc, #380]	@ (8003f1c <usb_stream_on_rx_bytes+0x298>)
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b5f      	ldr	r3, [pc, #380]	@ (8003f20 <usb_stream_on_rx_bytes+0x29c>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	801a      	strh	r2, [r3, #0]
                g_dbg_partial_frame_abort=0; g_dbg_size_mismatch=0; s_frame_active=0; s_next_channel_to_send=0;
 8003da8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f24 <usb_stream_on_rx_bytes+0x2a0>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	4b5e      	ldr	r3, [pc, #376]	@ (8003f28 <usb_stream_on_rx_bytes+0x2a4>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	4b5d      	ldr	r3, [pc, #372]	@ (8003f2c <usb_stream_on_rx_bytes+0x2a8>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	4b5d      	ldr	r3, [pc, #372]	@ (8003f30 <usb_stream_on_rx_bytes+0x2ac>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	701a      	strb	r2, [r3, #0]
                usb_stream_cfg()->streaming = 1;
 8003dc0:	f7ff ff12 	bl	8003be8 <usb_stream_cfg>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	701a      	strb	r2, [r3, #0]
                usb_stream_send_test_frame();
 8003dca:	f7ff fcb1 	bl	8003730 <usb_stream_send_test_frame>
                stream_send_ack(cmd);
 8003dce:	7cfb      	ldrb	r3, [r7, #19]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff13 	bl	8003bfc <stream_send_ack>
                // Попытка немедленной передачи если уже есть буферы
                usb_stream_service();
 8003dd6:	f7ff fe79 	bl	8003acc <usb_stream_service>
                break; }
 8003dda:	e091      	b.n	8003f00 <usb_stream_on_rx_bytes+0x27c>
            case CMD_STOP_STREAM: {
                usb_stream_cfg()->streaming = 0; s_frame_active=0; // остановка
 8003ddc:	f7ff ff04 	bl	8003be8 <usb_stream_cfg>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	4b51      	ldr	r3, [pc, #324]	@ (8003f2c <usb_stream_on_rx_bytes+0x2a8>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
                stream_send_ack(cmd);
 8003dec:	7cfb      	ldrb	r3, [r7, #19]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff ff04 	bl	8003bfc <stream_send_ack>
                usb_stream_send_status();
 8003df4:	f7ff fc28 	bl	8003648 <usb_stream_send_status>
                break; }
 8003df8:	e082      	b.n	8003f00 <usb_stream_on_rx_bytes+0x27c>
            case CMD_GET_STATUS: {
                usb_stream_send_status(); break; }
 8003dfa:	f7ff fc25 	bl	8003648 <usb_stream_send_status>
 8003dfe:	e07f      	b.n	8003f00 <usb_stream_on_rx_bytes+0x27c>
            case CMD_SET_FULL_MODE: {
                if (i>=len){ stream_send_nack(cmd,1); break; }
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d305      	bcc.n	8003e14 <usb_stream_on_rx_bytes+0x190>
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff20 	bl	8003c52 <stream_send_nack>
 8003e12:	e075      	b.n	8003f00 <usb_stream_on_rx_bytes+0x27c>
                uint8_t m = data[i++]; usb_stream_cfg()->full_mode = m?1:0; stream_send_ack_param(cmd, usb_stream_cfg()->full_mode); break; }
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	617a      	str	r2, [r7, #20]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	747b      	strb	r3, [r7, #17]
 8003e22:	7c7b      	ldrb	r3, [r7, #17]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2dc      	uxtb	r4, r3
 8003e2e:	f7ff fedb 	bl	8003be8 <usb_stream_cfg>
 8003e32:	4603      	mov	r3, r0
 8003e34:	4622      	mov	r2, r4
 8003e36:	705a      	strb	r2, [r3, #1]
 8003e38:	f7ff fed6 	bl	8003be8 <usb_stream_cfg>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	785a      	ldrb	r2, [r3, #1]
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff feec 	bl	8003c22 <stream_send_ack_param>
 8003e4a:	e059      	b.n	8003f00 <usb_stream_on_rx_bytes+0x27c>
            case CMD_SET_PROFILE: {
                if (i>=len){ stream_send_nack(cmd,1); break; }
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d305      	bcc.n	8003e60 <usb_stream_on_rx_bytes+0x1dc>
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	2101      	movs	r1, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fefa 	bl	8003c52 <stream_send_nack>
 8003e5e:	e04f      	b.n	8003f00 <usb_stream_on_rx_bytes+0x27c>
                uint8_t p = data[i++]; if (adc_stream_set_profile(p)!=0){ stream_send_nack(cmd,2); break; }
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	617a      	str	r2, [r7, #20]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	74bb      	strb	r3, [r7, #18]
 8003e6e:	7cbb      	ldrb	r3, [r7, #18]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fc fbbd 	bl	80005f0 <adc_stream_set_profile>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <usb_stream_on_rx_bytes+0x204>
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	2102      	movs	r1, #2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fee6 	bl	8003c52 <stream_send_nack>
 8003e86:	e03b      	b.n	8003f00 <usb_stream_on_rx_bytes+0x27c>
                usb_stream_cfg()->profile_id = p; stream_send_ack_param(cmd,p); break; }
 8003e88:	f7ff feae 	bl	8003be8 <usb_stream_cfg>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	7cbb      	ldrb	r3, [r7, #18]
 8003e90:	7093      	strb	r3, [r2, #2]
 8003e92:	7cba      	ldrb	r2, [r7, #18]
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	4611      	mov	r1, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fec2 	bl	8003c22 <stream_send_ack_param>
 8003e9e:	e02f      	b.n	8003f00 <usb_stream_on_rx_bytes+0x27c>
            case CMD_SET_ROI_US: {
                if (i+8>len){ stream_send_nack(cmd,1); i=len; break; }
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d207      	bcs.n	8003eba <usb_stream_on_rx_bytes+0x236>
 8003eaa:	7cfb      	ldrb	r3, [r7, #19]
 8003eac:	2101      	movs	r1, #1
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff fecf 	bl	8003c52 <stream_send_nack>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e022      	b.n	8003f00 <usb_stream_on_rx_bytes+0x27c>
                uint32_t off_us,len_us; memcpy(&off_us,&data[i],4); memcpy(&len_us,&data[i+4],4); i+=8;
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4413      	add	r3, r2
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	617b      	str	r3, [r7, #20]
                usb_stream_cfg()->roi_offset_us = off_us; usb_stream_cfg()->roi_length_us = len_us; stream_send_ack(cmd); break; }
 8003ed6:	f7ff fe87 	bl	8003be8 <usb_stream_cfg>
 8003eda:	4602      	mov	r2, r0
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6053      	str	r3, [r2, #4]
 8003ee0:	f7ff fe82 	bl	8003be8 <usb_stream_cfg>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6093      	str	r3, [r2, #8]
 8003eea:	7cfb      	ldrb	r3, [r7, #19]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff fe85 	bl	8003bfc <stream_send_ack>
 8003ef2:	e005      	b.n	8003f00 <usb_stream_on_rx_bytes+0x27c>
            default: { stream_send_nack(cmd,0xFF); break; }
 8003ef4:	7cfb      	ldrb	r3, [r7, #19]
 8003ef6:	21ff      	movs	r1, #255	@ 0xff
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff feaa 	bl	8003c52 <stream_send_nack>
 8003efe:	bf00      	nop
    while (i < len) {
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	f4ff aecd 	bcc.w	8003ca4 <usb_stream_on_rx_bytes+0x20>
 8003f0a:	e000      	b.n	8003f0e <usb_stream_on_rx_bytes+0x28a>
    if (!data || !len) return;
 8003f0c:	bf00      	nop
        }
    }
}
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd90      	pop	{r4, r7, pc}
 8003f14:	2400b2c0 	.word	0x2400b2c0
 8003f18:	2400b2cc 	.word	0x2400b2cc
 8003f1c:	2400b2c8 	.word	0x2400b2c8
 8003f20:	2400b2c4 	.word	0x2400b2c4
 8003f24:	2400b2d0 	.word	0x2400b2d0
 8003f28:	2400b2d4 	.word	0x2400b2d4
 8003f2c:	2400b2ef 	.word	0x2400b2ef
 8003f30:	2400b2ee 	.word	0x2400b2ee

08003f34 <usb_stream_init>:

// Инициализация оставлена (profile id уже установлен в adc_stream)
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	f7fc fa98 	bl	800046c <adc_stream_get_profile>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4b07      	ldr	r3, [pc, #28]	@ (8003f60 <usb_stream_init+0x2c>)
 8003f42:	709a      	strb	r2, [r3, #2]
 8003f44:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <usb_stream_init+0x2c>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	4b05      	ldr	r3, [pc, #20]	@ (8003f60 <usb_stream_init+0x2c>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	705a      	strb	r2, [r3, #1]
 8003f50:	4b03      	ldr	r3, [pc, #12]	@ (8003f60 <usb_stream_init+0x2c>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	4b02      	ldr	r3, [pc, #8]	@ (8003f60 <usb_stream_init+0x2c>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	bf00      	nop
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	24000020 	.word	0x24000020

08003f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set initial stack */
 8003f64:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003fa0 <Reset_Handler+0x3c>
  bl  ExitRun0Mode        /* (generated by CubeMX) configure supply if needed */
 8003f68:	f7ff fb20 	bl	80035ac <ExitRun0Mode>
  bl  SystemInit          /* CMSIS system clock init */
 8003f6c:	f7ff fa8e 	bl	800348c <SystemInit>
/* Copy .data from flash to SRAM */
  ldr r0, =_sidata        /* flash source */
 8003f70:	480c      	ldr	r0, [pc, #48]	@ (8003fa4 <Reset_Handler+0x40>)
  ldr r1, =_sdata         /* ram destination start */
 8003f72:	490d      	ldr	r1, [pc, #52]	@ (8003fa8 <Reset_Handler+0x44>)
  ldr r2, =_edata         /* ram destination end */
 8003f74:	4a0d      	ldr	r2, [pc, #52]	@ (8003fac <Reset_Handler+0x48>)
1: cmp r1, r2
 8003f76:	4291      	cmp	r1, r2
  ittt lt
 8003f78:	bfbe      	ittt	lt
  ldrlt r3, [r0], #4
 8003f7a:	f850 3b04 	ldrlt.w	r3, [r0], #4
  strlt r3, [r1], #4
 8003f7e:	f841 3b04 	strlt.w	r3, [r1], #4
  blt 1b
 8003f82:	e7f8      	blt.n	8003f76 <Reset_Handler+0x12>
/* Zero .bss */
  ldr r0, =_sbss
 8003f84:	480a      	ldr	r0, [pc, #40]	@ (8003fb0 <Reset_Handler+0x4c>)
  ldr r1, =_ebss
 8003f86:	490b      	ldr	r1, [pc, #44]	@ (8003fb4 <Reset_Handler+0x50>)
  movs r2, #0
 8003f88:	2200      	movs	r2, #0
2: cmp r0, r1
 8003f8a:	4288      	cmp	r0, r1
  itt lt
 8003f8c:	bfbc      	itt	lt
  strlt r2, [r0], #4
 8003f8e:	f840 2b04 	strlt.w	r2, [r0], #4
  blt 2b
 8003f92:	e7fa      	blt.n	8003f8a <Reset_Handler+0x26>
/* C/C++ runtime init */
  bl __libc_init_array
 8003f94:	f016 ffd8 	bl	801af48 <__libc_init_array>
/* Call main */
  bl main
 8003f98:	f7fd f856 	bl	8001048 <main>
/* If main returns, loop forever */
3: b 3b
 8003f9c:	e7fe      	b.n	8003f9c <Reset_Handler+0x38>
 8003f9e:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set initial stack */
 8003fa0:	24050000 	.word	0x24050000
  ldr r0, =_sidata        /* flash source */
 8003fa4:	0801efc8 	.word	0x0801efc8
  ldr r1, =_sdata         /* ram destination start */
 8003fa8:	24000000 	.word	0x24000000
  ldr r2, =_edata         /* ram destination end */
 8003fac:	240002a4 	.word	0x240002a4
  ldr r0, =_sbss
 8003fb0:	240002c0 	.word	0x240002c0
  ldr r1, =_ebss
 8003fb4:	2401af54 	.word	0x2401af54

08003fb8 <ADC3_IRQHandler>:
  .size  Reset_Handler, .-Reset_Handler
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fb8:	e7fe      	b.n	8003fb8 <ADC3_IRQHandler>
	...

08003fbc <LCD_Init>:
 * @brief Инициализация LCD.
 * @note Эта функция является "оберткой" и просто вызывает
 *       низкоуровневую функцию инициализации из драйвера st7735.
 */
void LCD_Init(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
	ST7735_Init();
 8003fc0:	f000 f9d8 	bl	8004374 <ST7735_Init>
    lcd_ready = 1; // сигнал готовности LCD
 8003fc4:	4b02      	ldr	r3, [pc, #8]	@ (8003fd0 <LCD_Init+0x14>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	701a      	strb	r2, [r3, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	2400c2f0 	.word	0x2400c2f0

08003fd4 <LCD_DrawPoint>:
 *       Для заливки областей лучше использовать ST7735_Fill.
 * @param x, y - Координаты пикселя.
 * @param color - Цвет пикселя.
 */
void LCD_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	80fb      	strh	r3, [r7, #6]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	80bb      	strh	r3, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	807b      	strh	r3, [r7, #2]
	LCD_CS_LOW();
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003fec:	480f      	ldr	r0, [pc, #60]	@ (800402c <LCD_DrawPoint+0x58>)
 8003fee:	f005 fc6f 	bl	80098d0 <HAL_GPIO_WritePin>
	ST7735_AddrSet(x,y,x,y);
 8003ff2:	88bb      	ldrh	r3, [r7, #4]
 8003ff4:	88fa      	ldrh	r2, [r7, #6]
 8003ff6:	88b9      	ldrh	r1, [r7, #4]
 8003ff8:	88f8      	ldrh	r0, [r7, #6]
 8003ffa:	f000 fad3 	bl	80045a4 <ST7735_AddrSet>
	ST7735_WriteData(color>>8);
 8003ffe:	887b      	ldrh	r3, [r7, #2]
 8004000:	0a1b      	lsrs	r3, r3, #8
 8004002:	b29b      	uxth	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f992 	bl	8004330 <ST7735_WriteData>
	ST7735_WriteData(color);
 800400c:	887b      	ldrh	r3, [r7, #2]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	4618      	mov	r0, r3
 8004012:	f000 f98d 	bl	8004330 <ST7735_WriteData>
	LCD_CS_HIGH();
 8004016:	2201      	movs	r2, #1
 8004018:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800401c:	4803      	ldr	r0, [pc, #12]	@ (800402c <LCD_DrawPoint+0x58>)
 800401e:	f005 fc57 	bl	80098d0 <HAL_GPIO_WritePin>
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	58021000 	.word	0x58021000

08004030 <LCD_ShowChar>:
 * @param size - Размер шрифта (12 или 16).
 * @param color - Цвет самого символа.
 * @param back_color - Цвет фона (используйте TRANSPARENT для прозрачного фона).
 */
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size, uint16_t color, uint16_t back_color)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	4604      	mov	r4, r0
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	4623      	mov	r3, r4
 8004040:	80fb      	strh	r3, [r7, #6]
 8004042:	4603      	mov	r3, r0
 8004044:	80bb      	strh	r3, [r7, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	70fb      	strb	r3, [r7, #3]
 800404a:	4613      	mov	r3, r2
 800404c:	70bb      	strb	r3, [r7, #2]
    uint8_t temp;
    uint8_t pos, t;
    uint16_t y0 = y;
 800404e:	88bb      	ldrh	r3, [r7, #4]
 8004050:	817b      	strh	r3, [r7, #10]
    uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);
 8004052:	78bb      	ldrb	r3, [r7, #2]
 8004054:	08db      	lsrs	r3, r3, #3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	78bb      	ldrb	r3, [r7, #2]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	4413      	add	r3, r2
 800406e:	b2da      	uxtb	r2, r3
 8004070:	78bb      	ldrb	r3, [r7, #2]
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	b2db      	uxtb	r3, r3
 8004076:	fb12 f303 	smulbb	r3, r2, r3
 800407a:	727b      	strb	r3, [r7, #9]

    num = num - ' ';
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	3b20      	subs	r3, #32
 8004080:	70fb      	strb	r3, [r7, #3]
    if (num < 0 || num >= 159) return; // Проверка диапазона
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	2b9e      	cmp	r3, #158	@ 0x9e
 8004086:	d85d      	bhi.n	8004144 <LCD_ShowChar+0x114>
    for (pos = 0; pos < csize; pos++)
 8004088:	2300      	movs	r3, #0
 800408a:	73bb      	strb	r3, [r7, #14]
 800408c:	e055      	b.n	800413a <LCD_ShowChar+0x10a>
    {
        if (size == 12)
 800408e:	78bb      	ldrb	r3, [r7, #2]
 8004090:	2b0c      	cmp	r3, #12
 8004092:	d10b      	bne.n	80040ac <LCD_ShowChar+0x7c>
            temp = asc2_1206[num][pos];
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	7bb9      	ldrb	r1, [r7, #14]
 8004098:	482e      	ldr	r0, [pc, #184]	@ (8004154 <LCD_ShowChar+0x124>)
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4403      	add	r3, r0
 80040a4:	440b      	add	r3, r1
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	73fb      	strb	r3, [r7, #15]
 80040aa:	e00a      	b.n	80040c2 <LCD_ShowChar+0x92>
        else if (size == 16)
 80040ac:	78bb      	ldrb	r3, [r7, #2]
 80040ae:	2b10      	cmp	r3, #16
 80040b0:	d14a      	bne.n	8004148 <LCD_ShowChar+0x118>
            temp = asc2_1608[num][pos];
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	7bbb      	ldrb	r3, [r7, #14]
 80040b6:	4928      	ldr	r1, [pc, #160]	@ (8004158 <LCD_ShowChar+0x128>)
 80040b8:	0112      	lsls	r2, r2, #4
 80040ba:	440a      	add	r2, r1
 80040bc:	4413      	add	r3, r2
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	73fb      	strb	r3, [r7, #15]
        else
            return;
        for (t = 0; t < 8; t++)
 80040c2:	2300      	movs	r3, #0
 80040c4:	737b      	strb	r3, [r7, #13]
 80040c6:	e030      	b.n	800412a <LCD_ShowChar+0xfa>
        {
            if (temp & 0x80)
 80040c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	da06      	bge.n	80040de <LCD_ShowChar+0xae>
                LCD_DrawPoint(x, y, color);
 80040d0:	8c3a      	ldrh	r2, [r7, #32]
 80040d2:	88b9      	ldrh	r1, [r7, #4]
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff ff7c 	bl	8003fd4 <LCD_DrawPoint>
 80040dc:	e00a      	b.n	80040f4 <LCD_ShowChar+0xc4>
            else if (back_color != TRANSPARENT)  // Рисуем фон только если он НЕ прозрачный
 80040de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d005      	beq.n	80040f4 <LCD_ShowChar+0xc4>
                LCD_DrawPoint(x, y, back_color);
 80040e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040ea:	88b9      	ldrh	r1, [r7, #4]
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff ff70 	bl	8003fd4 <LCD_DrawPoint>
            temp <<= 1;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
            y++;
 80040fa:	88bb      	ldrh	r3, [r7, #4]
 80040fc:	3301      	adds	r3, #1
 80040fe:	80bb      	strh	r3, [r7, #4]
            if (y >= LCD_H) return;
 8004100:	88bb      	ldrh	r3, [r7, #4]
 8004102:	2b4f      	cmp	r3, #79	@ 0x4f
 8004104:	d822      	bhi.n	800414c <LCD_ShowChar+0x11c>
            if ((y - y0) == size)
 8004106:	88ba      	ldrh	r2, [r7, #4]
 8004108:	897b      	ldrh	r3, [r7, #10]
 800410a:	1ad2      	subs	r2, r2, r3
 800410c:	78bb      	ldrb	r3, [r7, #2]
 800410e:	429a      	cmp	r2, r3
 8004110:	d108      	bne.n	8004124 <LCD_ShowChar+0xf4>
            {
                y = y0;
 8004112:	897b      	ldrh	r3, [r7, #10]
 8004114:	80bb      	strh	r3, [r7, #4]
                x++;
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	3301      	adds	r3, #1
 800411a:	80fb      	strh	r3, [r7, #6]
                if (x >= LCD_W) return;
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	2b9f      	cmp	r3, #159	@ 0x9f
 8004120:	d907      	bls.n	8004132 <LCD_ShowChar+0x102>
 8004122:	e014      	b.n	800414e <LCD_ShowChar+0x11e>
        for (t = 0; t < 8; t++)
 8004124:	7b7b      	ldrb	r3, [r7, #13]
 8004126:	3301      	adds	r3, #1
 8004128:	737b      	strb	r3, [r7, #13]
 800412a:	7b7b      	ldrb	r3, [r7, #13]
 800412c:	2b07      	cmp	r3, #7
 800412e:	d9cb      	bls.n	80040c8 <LCD_ShowChar+0x98>
 8004130:	e000      	b.n	8004134 <LCD_ShowChar+0x104>
                break;
 8004132:	bf00      	nop
    for (pos = 0; pos < csize; pos++)
 8004134:	7bbb      	ldrb	r3, [r7, #14]
 8004136:	3301      	adds	r3, #1
 8004138:	73bb      	strb	r3, [r7, #14]
 800413a:	7bba      	ldrb	r2, [r7, #14]
 800413c:	7a7b      	ldrb	r3, [r7, #9]
 800413e:	429a      	cmp	r2, r3
 8004140:	d3a5      	bcc.n	800408e <LCD_ShowChar+0x5e>
 8004142:	e004      	b.n	800414e <LCD_ShowChar+0x11e>
    if (num < 0 || num >= 159) return; // Проверка диапазона
 8004144:	bf00      	nop
 8004146:	e002      	b.n	800414e <LCD_ShowChar+0x11e>
            return;
 8004148:	bf00      	nop
 800414a:	e000      	b.n	800414e <LCD_ShowChar+0x11e>
            if (y >= LCD_H) return;
 800414c:	bf00      	nop
            }
        }
    }
}
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	bd90      	pop	{r4, r7, pc}
 8004154:	0801ddf0 	.word	0x0801ddf0
 8004158:	0801e564 	.word	0x0801e564

0800415c <LCD_ShowString_Size>:
 * @param size - Размер шрифта (12 или 16).
 * @param color - Цвет текста.
 * @param back_color - Цвет фона.
 */
void LCD_ShowString_Size(uint16_t x, uint16_t y, const char *p, uint8_t size, uint16_t color, uint16_t back_color)
{
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b089      	sub	sp, #36	@ 0x24
 8004160:	af02      	add	r7, sp, #8
 8004162:	60ba      	str	r2, [r7, #8]
 8004164:	461a      	mov	r2, r3
 8004166:	4603      	mov	r3, r0
 8004168:	81fb      	strh	r3, [r7, #14]
 800416a:	460b      	mov	r3, r1
 800416c:	81bb      	strh	r3, [r7, #12]
 800416e:	4613      	mov	r3, r2
 8004170:	71fb      	strb	r3, [r7, #7]
    uint8_t char_width = (size == 12) ? 6 : 8;  // Ширина символа зависит от размера
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	2b0c      	cmp	r3, #12
 8004176:	d101      	bne.n	800417c <LCD_ShowString_Size+0x20>
 8004178:	2306      	movs	r3, #6
 800417a:	e000      	b.n	800417e <LCD_ShowString_Size+0x22>
 800417c:	2308      	movs	r3, #8
 800417e:	75fb      	strb	r3, [r7, #23]
    uint8_t char_height = size;                  // Высота символа равна размеру
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	75bb      	strb	r3, [r7, #22]
    
    while (*p != '\0')
 8004184:	e02a      	b.n	80041dc <LCD_ShowString_Size+0x80>
    {
        // Проверяем, помещается ли символ на текущей строке
        if (x > (LCD_W - char_width))
 8004186:	89fa      	ldrh	r2, [r7, #14]
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800418e:	429a      	cmp	r2, r3
 8004190:	dd06      	ble.n	80041a0 <LCD_ShowString_Size+0x44>
        {
            x = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	81fb      	strh	r3, [r7, #14]
            y += char_height;
 8004196:	7dbb      	ldrb	r3, [r7, #22]
 8004198:	b29a      	uxth	r2, r3
 800419a:	89bb      	ldrh	r3, [r7, #12]
 800419c:	4413      	add	r3, r2
 800419e:	81bb      	strh	r3, [r7, #12]
        }
        
        // Проверяем, помещается ли строка на экране
        if (y > (LCD_H - char_height))
 80041a0:	89ba      	ldrh	r2, [r7, #12]
 80041a2:	7dbb      	ldrb	r3, [r7, #22]
 80041a4:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 80041a8:	429a      	cmp	r2, r3
 80041aa:	dd03      	ble.n	80041b4 <LCD_ShowString_Size+0x58>
        {
            y = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	81bb      	strh	r3, [r7, #12]
            x = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	81fb      	strh	r3, [r7, #14]
        }
        
        LCD_ShowChar(x, y, *p, size, color, back_color);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	79fc      	ldrb	r4, [r7, #7]
 80041ba:	89b9      	ldrh	r1, [r7, #12]
 80041bc:	89f8      	ldrh	r0, [r7, #14]
 80041be:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	4623      	mov	r3, r4
 80041c8:	f7ff ff32 	bl	8004030 <LCD_ShowChar>
        x += char_width;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	89fb      	ldrh	r3, [r7, #14]
 80041d2:	4413      	add	r3, r2
 80041d4:	81fb      	strh	r3, [r7, #14]
        p++;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	3301      	adds	r3, #1
 80041da:	60bb      	str	r3, [r7, #8]
    while (*p != '\0')
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1d0      	bne.n	8004186 <LCD_ShowString_Size+0x2a>
    }
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd90      	pop	{r4, r7, pc}
	...

080041f0 <LCD_FillRect>:
 * @param x, y - Координаты верхнего левого угла.
 * @param w, h - Ширина и высота прямоугольника.
 * @param color - Цвет для заливки.
 */
void LCD_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80041f0:	b590      	push	{r4, r7, lr}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4604      	mov	r4, r0
 80041f8:	4608      	mov	r0, r1
 80041fa:	4611      	mov	r1, r2
 80041fc:	461a      	mov	r2, r3
 80041fe:	4623      	mov	r3, r4
 8004200:	80fb      	strh	r3, [r7, #6]
 8004202:	4603      	mov	r3, r0
 8004204:	80bb      	strh	r3, [r7, #4]
 8004206:	460b      	mov	r3, r1
 8004208:	807b      	strh	r3, [r7, #2]
 800420a:	4613      	mov	r3, r2
 800420c:	803b      	strh	r3, [r7, #0]
    uint32_t i;
    uint32_t total_pixels = w * h;
 800420e:	887b      	ldrh	r3, [r7, #2]
 8004210:	883a      	ldrh	r2, [r7, #0]
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	60bb      	str	r3, [r7, #8]

    // Проверяем границы
    if (x >= LCD_W || y >= LCD_H) return;
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	2b9f      	cmp	r3, #159	@ 0x9f
 800421c:	d84e      	bhi.n	80042bc <LCD_FillRect+0xcc>
 800421e:	88bb      	ldrh	r3, [r7, #4]
 8004220:	2b4f      	cmp	r3, #79	@ 0x4f
 8004222:	d84b      	bhi.n	80042bc <LCD_FillRect+0xcc>
    if (x + w > LCD_W) w = LCD_W - x;
 8004224:	88fa      	ldrh	r2, [r7, #6]
 8004226:	887b      	ldrh	r3, [r7, #2]
 8004228:	4413      	add	r3, r2
 800422a:	2ba0      	cmp	r3, #160	@ 0xa0
 800422c:	dd03      	ble.n	8004236 <LCD_FillRect+0x46>
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8004234:	807b      	strh	r3, [r7, #2]
    if (y + h > LCD_H) h = LCD_H - y;
 8004236:	88ba      	ldrh	r2, [r7, #4]
 8004238:	883b      	ldrh	r3, [r7, #0]
 800423a:	4413      	add	r3, r2
 800423c:	2b50      	cmp	r3, #80	@ 0x50
 800423e:	dd03      	ble.n	8004248 <LCD_FillRect+0x58>
 8004240:	88bb      	ldrh	r3, [r7, #4]
 8004242:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8004246:	803b      	strh	r3, [r7, #0]

    // Устанавливаем окно для рисования
    ST7735_AddrSet(x, y, x + w - 1, y + h - 1);
 8004248:	88fa      	ldrh	r2, [r7, #6]
 800424a:	887b      	ldrh	r3, [r7, #2]
 800424c:	4413      	add	r3, r2
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29c      	uxth	r4, r3
 8004254:	88ba      	ldrh	r2, [r7, #4]
 8004256:	883b      	ldrh	r3, [r7, #0]
 8004258:	4413      	add	r3, r2
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29b      	uxth	r3, r3
 8004260:	88b9      	ldrh	r1, [r7, #4]
 8004262:	88f8      	ldrh	r0, [r7, #6]
 8004264:	4622      	mov	r2, r4
 8004266:	f000 f99d 	bl	80045a4 <ST7735_AddrSet>
    
    // Теперь отправляем данные пикселей
    LCD_CS_LOW();
 800426a:	2200      	movs	r2, #0
 800426c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004270:	4814      	ldr	r0, [pc, #80]	@ (80042c4 <LCD_FillRect+0xd4>)
 8004272:	f005 fb2d 	bl	80098d0 <HAL_GPIO_WritePin>
    LCD_RS_HIGH(); // Режим данных
 8004276:	2201      	movs	r2, #1
 8004278:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800427c:	4811      	ldr	r0, [pc, #68]	@ (80042c4 <LCD_FillRect+0xd4>)
 800427e:	f005 fb27 	bl	80098d0 <HAL_GPIO_WritePin>
    
    for (i = 0; i < total_pixels; i++)
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e00e      	b.n	80042a6 <LCD_FillRect+0xb6>
    {
        ST7735_SPI_Send(color >> 8);
 8004288:	8c3b      	ldrh	r3, [r7, #32]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	b29b      	uxth	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	4618      	mov	r0, r3
 8004292:	f000 f819 	bl	80042c8 <ST7735_SPI_Send>
        ST7735_SPI_Send(color);
 8004296:	8c3b      	ldrh	r3, [r7, #32]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f814 	bl	80042c8 <ST7735_SPI_Send>
    for (i = 0; i < total_pixels; i++)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3301      	adds	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d3ec      	bcc.n	8004288 <LCD_FillRect+0x98>
    }
    
    LCD_CS_HIGH();
 80042ae:	2201      	movs	r2, #1
 80042b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80042b4:	4803      	ldr	r0, [pc, #12]	@ (80042c4 <LCD_FillRect+0xd4>)
 80042b6:	f005 fb0b 	bl	80098d0 <HAL_GPIO_WritePin>
 80042ba:	e000      	b.n	80042be <LCD_FillRect+0xce>
    if (x >= LCD_W || y >= LCD_H) return;
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd90      	pop	{r4, r7, pc}
 80042c4:	58021000 	.word	0x58021000

080042c8 <ST7735_SPI_Send>:
extern SPI_HandleTypeDef hspi4;

// --- Приватные функции для отправки данных по SPI ---

void ST7735_SPI_Send(uint8_t data)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	71fb      	strb	r3, [r7, #7]
    // Упрощенная версия без проверки флагов - HAL_SPI_Transmit уже содержит все необходимые проверки
    HAL_SPI_Transmit(&hspi4, &data, 1, 100);
 80042d2:	1df9      	adds	r1, r7, #7
 80042d4:	2364      	movs	r3, #100	@ 0x64
 80042d6:	2201      	movs	r2, #1
 80042d8:	4803      	ldr	r0, [pc, #12]	@ (80042e8 <ST7735_SPI_Send+0x20>)
 80042da:	f00a fb1d 	bl	800e918 <HAL_SPI_Transmit>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	2400ae9c 	.word	0x2400ae9c

080042ec <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();   // Активируем CS
 80042f6:	2200      	movs	r2, #0
 80042f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80042fc:	480b      	ldr	r0, [pc, #44]	@ (800432c <ST7735_WriteCommand+0x40>)
 80042fe:	f005 fae7 	bl	80098d0 <HAL_GPIO_WritePin>
    LCD_RS_LOW();   // Режим команды
 8004302:	2200      	movs	r2, #0
 8004304:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004308:	4808      	ldr	r0, [pc, #32]	@ (800432c <ST7735_WriteCommand+0x40>)
 800430a:	f005 fae1 	bl	80098d0 <HAL_GPIO_WritePin>
    ST7735_SPI_Send(cmd);
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ffd9 	bl	80042c8 <ST7735_SPI_Send>
    LCD_CS_HIGH();  // Деактивируем CS
 8004316:	2201      	movs	r2, #1
 8004318:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800431c:	4803      	ldr	r0, [pc, #12]	@ (800432c <ST7735_WriteCommand+0x40>)
 800431e:	f005 fad7 	bl	80098d0 <HAL_GPIO_WritePin>
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	58021000 	.word	0x58021000

08004330 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t data)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();   // Активируем CS
 800433a:	2200      	movs	r2, #0
 800433c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004340:	480b      	ldr	r0, [pc, #44]	@ (8004370 <ST7735_WriteData+0x40>)
 8004342:	f005 fac5 	bl	80098d0 <HAL_GPIO_WritePin>
    LCD_RS_HIGH();  // Режим данных
 8004346:	2201      	movs	r2, #1
 8004348:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800434c:	4808      	ldr	r0, [pc, #32]	@ (8004370 <ST7735_WriteData+0x40>)
 800434e:	f005 fabf 	bl	80098d0 <HAL_GPIO_WritePin>
    ST7735_SPI_Send(data);
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff ffb7 	bl	80042c8 <ST7735_SPI_Send>
    LCD_CS_HIGH();  // Деактивируем CS
 800435a:	2201      	movs	r2, #1
 800435c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004360:	4803      	ldr	r0, [pc, #12]	@ (8004370 <ST7735_WriteData+0x40>)
 8004362:	f005 fab5 	bl	80098d0 <HAL_GPIO_WritePin>
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	58021000 	.word	0x58021000

08004374 <ST7735_Init>:
/**
 * @brief Инициализирует дисплей ST7735.
 * @note Последовательность команд взята из рабочего примера WeAct.
 */
void ST7735_Init(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
    LCD_CS_LOW();
 8004378:	2200      	movs	r2, #0
 800437a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800437e:	4888      	ldr	r0, [pc, #544]	@ (80045a0 <ST7735_Init+0x22c>)
 8004380:	f005 faa6 	bl	80098d0 <HAL_GPIO_WritePin>
    LCD_RST_LOW();
 8004384:	2200      	movs	r2, #0
 8004386:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800438a:	4885      	ldr	r0, [pc, #532]	@ (80045a0 <ST7735_Init+0x22c>)
 800438c:	f005 faa0 	bl	80098d0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8004390:	2064      	movs	r0, #100	@ 0x64
 8004392:	f000 f9ed 	bl	8004770 <HAL_Delay>
    LCD_RST_HIGH();
 8004396:	2201      	movs	r2, #1
 8004398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800439c:	4880      	ldr	r0, [pc, #512]	@ (80045a0 <ST7735_Init+0x22c>)
 800439e:	f005 fa97 	bl	80098d0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80043a2:	2064      	movs	r0, #100	@ 0x64
 80043a4:	f000 f9e4 	bl	8004770 <HAL_Delay>

    ST7735_WriteCommand(ST7735_SWRESET); // 1: Software reset
 80043a8:	2001      	movs	r0, #1
 80043aa:	f7ff ff9f 	bl	80042ec <ST7735_WriteCommand>
    HAL_Delay(150);
 80043ae:	2096      	movs	r0, #150	@ 0x96
 80043b0:	f000 f9de 	bl	8004770 <HAL_Delay>

    ST7735_WriteCommand(ST7735_SLPOUT);  // 2: Out of sleep mode
 80043b4:	2011      	movs	r0, #17
 80043b6:	f7ff ff99 	bl	80042ec <ST7735_WriteCommand>
    HAL_Delay(255);
 80043ba:	20ff      	movs	r0, #255	@ 0xff
 80043bc:	f000 f9d8 	bl	8004770 <HAL_Delay>

    // 3: Frame rate control
    ST7735_WriteCommand(ST7735_FRMCTR1);
 80043c0:	20b1      	movs	r0, #177	@ 0xb1
 80043c2:	f7ff ff93 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0x01);
 80043c6:	2001      	movs	r0, #1
 80043c8:	f7ff ffb2 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 80043cc:	202c      	movs	r0, #44	@ 0x2c
 80043ce:	f7ff ffaf 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 80043d2:	202d      	movs	r0, #45	@ 0x2d
 80043d4:	f7ff ffac 	bl	8004330 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_FRMCTR2);
 80043d8:	20b2      	movs	r0, #178	@ 0xb2
 80043da:	f7ff ff87 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0x01);
 80043de:	2001      	movs	r0, #1
 80043e0:	f7ff ffa6 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 80043e4:	202c      	movs	r0, #44	@ 0x2c
 80043e6:	f7ff ffa3 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 80043ea:	202d      	movs	r0, #45	@ 0x2d
 80043ec:	f7ff ffa0 	bl	8004330 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_FRMCTR3);
 80043f0:	20b3      	movs	r0, #179	@ 0xb3
 80043f2:	f7ff ff7b 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0x01);
 80043f6:	2001      	movs	r0, #1
 80043f8:	f7ff ff9a 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 80043fc:	202c      	movs	r0, #44	@ 0x2c
 80043fe:	f7ff ff97 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 8004402:	202d      	movs	r0, #45	@ 0x2d
 8004404:	f7ff ff94 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x01);
 8004408:	2001      	movs	r0, #1
 800440a:	f7ff ff91 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 800440e:	202c      	movs	r0, #44	@ 0x2c
 8004410:	f7ff ff8e 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 8004414:	202d      	movs	r0, #45	@ 0x2d
 8004416:	f7ff ff8b 	bl	8004330 <ST7735_WriteData>

    // 4: Display inversion control
    ST7735_WriteCommand(ST7735_INVCTR);
 800441a:	20b4      	movs	r0, #180	@ 0xb4
 800441c:	f7ff ff66 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0x07);
 8004420:	2007      	movs	r0, #7
 8004422:	f7ff ff85 	bl	8004330 <ST7735_WriteData>

    // 5: Power control
    ST7735_WriteCommand(ST7735_PWCTR1);
 8004426:	20c0      	movs	r0, #192	@ 0xc0
 8004428:	f7ff ff60 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0xA2);
 800442c:	20a2      	movs	r0, #162	@ 0xa2
 800442e:	f7ff ff7f 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x02);
 8004432:	2002      	movs	r0, #2
 8004434:	f7ff ff7c 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x84);
 8004438:	2084      	movs	r0, #132	@ 0x84
 800443a:	f7ff ff79 	bl	8004330 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_PWCTR2);
 800443e:	20c1      	movs	r0, #193	@ 0xc1
 8004440:	f7ff ff54 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0xC5);
 8004444:	20c5      	movs	r0, #197	@ 0xc5
 8004446:	f7ff ff73 	bl	8004330 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_PWCTR3);
 800444a:	20c2      	movs	r0, #194	@ 0xc2
 800444c:	f7ff ff4e 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0x0A);
 8004450:	200a      	movs	r0, #10
 8004452:	f7ff ff6d 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x00);
 8004456:	2000      	movs	r0, #0
 8004458:	f7ff ff6a 	bl	8004330 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_PWCTR4);
 800445c:	20c3      	movs	r0, #195	@ 0xc3
 800445e:	f7ff ff45 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0x8A);
 8004462:	208a      	movs	r0, #138	@ 0x8a
 8004464:	f7ff ff64 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2A);
 8004468:	202a      	movs	r0, #42	@ 0x2a
 800446a:	f7ff ff61 	bl	8004330 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_PWCTR5);
 800446e:	20c4      	movs	r0, #196	@ 0xc4
 8004470:	f7ff ff3c 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0x8A);
 8004474:	208a      	movs	r0, #138	@ 0x8a
 8004476:	f7ff ff5b 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0xEE);
 800447a:	20ee      	movs	r0, #238	@ 0xee
 800447c:	f7ff ff58 	bl	8004330 <ST7735_WriteData>

    // 6: VCOM control
    ST7735_WriteCommand(ST7735_VMCTR1);
 8004480:	20c5      	movs	r0, #197	@ 0xc5
 8004482:	f7ff ff33 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0x0E);
 8004486:	200e      	movs	r0, #14
 8004488:	f7ff ff52 	bl	8004330 <ST7735_WriteData>

    // 7: Inversion on
    ST7735_WriteCommand(ST7735_INVON);
 800448c:	2021      	movs	r0, #33	@ 0x21
 800448e:	f7ff ff2d 	bl	80042ec <ST7735_WriteCommand>

    // 8: Memory access control
    ST7735_WriteCommand(ST7735_MADCTL);
 8004492:	2036      	movs	r0, #54	@ 0x36
 8004494:	f7ff ff2a 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0xA8); // Landscape rotated 180° с правильным порядком цветов (0xA0 + BGR бит)
 8004498:	20a8      	movs	r0, #168	@ 0xa8
 800449a:	f7ff ff49 	bl	8004330 <ST7735_WriteData>

    // 9: Color mode
    ST7735_WriteCommand(ST7735_COLMOD);
 800449e:	203a      	movs	r0, #58	@ 0x3a
 80044a0:	f7ff ff24 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0x05); // 16-bit color
 80044a4:	2005      	movs	r0, #5
 80044a6:	f7ff ff43 	bl	8004330 <ST7735_WriteData>

    // 10: Gamma correction
    ST7735_WriteCommand(ST7735_GMCTRP1);
 80044aa:	20e0      	movs	r0, #224	@ 0xe0
 80044ac:	f7ff ff1e 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0x02);
 80044b0:	2002      	movs	r0, #2
 80044b2:	f7ff ff3d 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x1c);
 80044b6:	201c      	movs	r0, #28
 80044b8:	f7ff ff3a 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x07);
 80044bc:	2007      	movs	r0, #7
 80044be:	f7ff ff37 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x12);
 80044c2:	2012      	movs	r0, #18
 80044c4:	f7ff ff34 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x37);
 80044c8:	2037      	movs	r0, #55	@ 0x37
 80044ca:	f7ff ff31 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x32);
 80044ce:	2032      	movs	r0, #50	@ 0x32
 80044d0:	f7ff ff2e 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x29);
 80044d4:	2029      	movs	r0, #41	@ 0x29
 80044d6:	f7ff ff2b 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2d);
 80044da:	202d      	movs	r0, #45	@ 0x2d
 80044dc:	f7ff ff28 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x29);
 80044e0:	2029      	movs	r0, #41	@ 0x29
 80044e2:	f7ff ff25 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x25);
 80044e6:	2025      	movs	r0, #37	@ 0x25
 80044e8:	f7ff ff22 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2B);
 80044ec:	202b      	movs	r0, #43	@ 0x2b
 80044ee:	f7ff ff1f 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x39);
 80044f2:	2039      	movs	r0, #57	@ 0x39
 80044f4:	f7ff ff1c 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x00);
 80044f8:	2000      	movs	r0, #0
 80044fa:	f7ff ff19 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x01);
 80044fe:	2001      	movs	r0, #1
 8004500:	f7ff ff16 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x03);
 8004504:	2003      	movs	r0, #3
 8004506:	f7ff ff13 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x10);
 800450a:	2010      	movs	r0, #16
 800450c:	f7ff ff10 	bl	8004330 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_GMCTRN1);
 8004510:	20e1      	movs	r0, #225	@ 0xe1
 8004512:	f7ff feeb 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData(0x03);
 8004516:	2003      	movs	r0, #3
 8004518:	f7ff ff0a 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x1d);
 800451c:	201d      	movs	r0, #29
 800451e:	f7ff ff07 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x07);
 8004522:	2007      	movs	r0, #7
 8004524:	f7ff ff04 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x06);
 8004528:	2006      	movs	r0, #6
 800452a:	f7ff ff01 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2E);
 800452e:	202e      	movs	r0, #46	@ 0x2e
 8004530:	f7ff fefe 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 8004534:	202c      	movs	r0, #44	@ 0x2c
 8004536:	f7ff fefb 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x29);
 800453a:	2029      	movs	r0, #41	@ 0x29
 800453c:	f7ff fef8 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 8004540:	202d      	movs	r0, #45	@ 0x2d
 8004542:	f7ff fef5 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2E);
 8004546:	202e      	movs	r0, #46	@ 0x2e
 8004548:	f7ff fef2 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x2E);
 800454c:	202e      	movs	r0, #46	@ 0x2e
 800454e:	f7ff feef 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x37);
 8004552:	2037      	movs	r0, #55	@ 0x37
 8004554:	f7ff feec 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x3F);
 8004558:	203f      	movs	r0, #63	@ 0x3f
 800455a:	f7ff fee9 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x00);
 800455e:	2000      	movs	r0, #0
 8004560:	f7ff fee6 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x00);
 8004564:	2000      	movs	r0, #0
 8004566:	f7ff fee3 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x02);
 800456a:	2002      	movs	r0, #2
 800456c:	f7ff fee0 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData(0x10);
 8004570:	2010      	movs	r0, #16
 8004572:	f7ff fedd 	bl	8004330 <ST7735_WriteData>

    // 11: Normal display on
    ST7735_WriteCommand(ST7735_NORON);
 8004576:	2013      	movs	r0, #19
 8004578:	f7ff feb8 	bl	80042ec <ST7735_WriteCommand>
    HAL_Delay(10);
 800457c:	200a      	movs	r0, #10
 800457e:	f000 f8f7 	bl	8004770 <HAL_Delay>

    // 12: Display on
    ST7735_WriteCommand(ST7735_DISPON);
 8004582:	2029      	movs	r0, #41	@ 0x29
 8004584:	f7ff feb2 	bl	80042ec <ST7735_WriteCommand>
    HAL_Delay(100);
 8004588:	2064      	movs	r0, #100	@ 0x64
 800458a:	f000 f8f1 	bl	8004770 <HAL_Delay>

    LCD_CS_HIGH();
 800458e:	2201      	movs	r2, #1
 8004590:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004594:	4802      	ldr	r0, [pc, #8]	@ (80045a0 <ST7735_Init+0x22c>)
 8004596:	f005 f99b 	bl	80098d0 <HAL_GPIO_WritePin>
}
 800459a:	bf00      	nop
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	58021000 	.word	0x58021000

080045a4 <ST7735_AddrSet>:
/**
 * @brief Устанавливает "окно" для отрисовки.
 * @note Использует смещения из lcd.h.
 */
void ST7735_AddrSet(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4604      	mov	r4, r0
 80045ac:	4608      	mov	r0, r1
 80045ae:	4611      	mov	r1, r2
 80045b0:	461a      	mov	r2, r3
 80045b2:	4623      	mov	r3, r4
 80045b4:	80fb      	strh	r3, [r7, #6]
 80045b6:	4603      	mov	r3, r0
 80045b8:	80bb      	strh	r3, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	807b      	strh	r3, [r7, #2]
 80045be:	4613      	mov	r3, r2
 80045c0:	803b      	strh	r3, [r7, #0]
    ST7735_WriteCommand(ST7735_CASET);
 80045c2:	202a      	movs	r0, #42	@ 0x2a
 80045c4:	f7ff fe92 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData((x1 + LCD_X_SHIFT) >> 8);
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	3301      	adds	r3, #1
 80045cc:	121b      	asrs	r3, r3, #8
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff fead 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData((x1 + LCD_X_SHIFT) & 0xFF);
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	3301      	adds	r3, #1
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fea6 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData((x2 + LCD_X_SHIFT) >> 8);
 80045e4:	887b      	ldrh	r3, [r7, #2]
 80045e6:	3301      	adds	r3, #1
 80045e8:	121b      	asrs	r3, r3, #8
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff fe9f 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData((x2 + LCD_X_SHIFT) & 0xFF);
 80045f2:	887b      	ldrh	r3, [r7, #2]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	3301      	adds	r3, #1
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fe98 	bl	8004330 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_RASET);
 8004600:	202b      	movs	r0, #43	@ 0x2b
 8004602:	f7ff fe73 	bl	80042ec <ST7735_WriteCommand>
    ST7735_WriteData((y1 + LCD_Y_SHIFT) >> 8);
 8004606:	88bb      	ldrh	r3, [r7, #4]
 8004608:	331a      	adds	r3, #26
 800460a:	121b      	asrs	r3, r3, #8
 800460c:	b2db      	uxtb	r3, r3
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fe8e 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData((y1 + LCD_Y_SHIFT) & 0xFF);
 8004614:	88bb      	ldrh	r3, [r7, #4]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	331a      	adds	r3, #26
 800461a:	b2db      	uxtb	r3, r3
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fe87 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData((y2 + LCD_Y_SHIFT) >> 8);
 8004622:	883b      	ldrh	r3, [r7, #0]
 8004624:	331a      	adds	r3, #26
 8004626:	121b      	asrs	r3, r3, #8
 8004628:	b2db      	uxtb	r3, r3
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fe80 	bl	8004330 <ST7735_WriteData>
    ST7735_WriteData((y2 + LCD_Y_SHIFT) & 0xFF);
 8004630:	883b      	ldrh	r3, [r7, #0]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	331a      	adds	r3, #26
 8004636:	b2db      	uxtb	r3, r3
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff fe79 	bl	8004330 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_RAMWR);
 800463e:	202c      	movs	r0, #44	@ 0x2c
 8004640:	f7ff fe54 	bl	80042ec <ST7735_WriteCommand>
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bd90      	pop	{r4, r7, pc}

0800464c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004652:	2003      	movs	r0, #3
 8004654:	f002 f982 	bl	800695c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004658:	f007 fa7e 	bl	800bb58 <HAL_RCC_GetSysClockFreq>
 800465c:	4602      	mov	r2, r0
 800465e:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <HAL_Init+0x68>)
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	4913      	ldr	r1, [pc, #76]	@ (80046b8 <HAL_Init+0x6c>)
 800466a:	5ccb      	ldrb	r3, [r1, r3]
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
 8004674:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004676:	4b0f      	ldr	r3, [pc, #60]	@ (80046b4 <HAL_Init+0x68>)
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	4a0e      	ldr	r2, [pc, #56]	@ (80046b8 <HAL_Init+0x6c>)
 8004680:	5cd3      	ldrb	r3, [r2, r3]
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
 800468c:	4a0b      	ldr	r2, [pc, #44]	@ (80046bc <HAL_Init+0x70>)
 800468e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004690:	4a0b      	ldr	r2, [pc, #44]	@ (80046c0 <HAL_Init+0x74>)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004696:	200f      	movs	r0, #15
 8004698:	f000 f814 	bl	80046c4 <HAL_InitTick>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e002      	b.n	80046ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80046a6:	f7fe f8ad 	bl	8002804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	58024400 	.word	0x58024400
 80046b8:	0801dde0 	.word	0x0801dde0
 80046bc:	2400001c 	.word	0x2400001c
 80046c0:	24000018 	.word	0x24000018

080046c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80046cc:	4b15      	ldr	r3, [pc, #84]	@ (8004724 <HAL_InitTick+0x60>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e021      	b.n	800471c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80046d8:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <HAL_InitTick+0x64>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b11      	ldr	r3, [pc, #68]	@ (8004724 <HAL_InitTick+0x60>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	4619      	mov	r1, r3
 80046e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80046ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ee:	4618      	mov	r0, r3
 80046f0:	f002 f975 	bl	80069de <HAL_SYSTICK_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e00e      	b.n	800471c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b0f      	cmp	r3, #15
 8004702:	d80a      	bhi.n	800471a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004704:	2200      	movs	r2, #0
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	f04f 30ff 	mov.w	r0, #4294967295
 800470c:	f002 f931 	bl	8006972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004710:	4a06      	ldr	r2, [pc, #24]	@ (800472c <HAL_InitTick+0x68>)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	e000      	b.n	800471c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	24000038 	.word	0x24000038
 8004728:	24000018 	.word	0x24000018
 800472c:	24000034 	.word	0x24000034

08004730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004734:	4b06      	ldr	r3, [pc, #24]	@ (8004750 <HAL_IncTick+0x20>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	4b06      	ldr	r3, [pc, #24]	@ (8004754 <HAL_IncTick+0x24>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4413      	add	r3, r2
 8004740:	4a04      	ldr	r2, [pc, #16]	@ (8004754 <HAL_IncTick+0x24>)
 8004742:	6013      	str	r3, [r2, #0]
}
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	24000038 	.word	0x24000038
 8004754:	2400c2f4 	.word	0x2400c2f4

08004758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return uwTick;
 800475c:	4b03      	ldr	r3, [pc, #12]	@ (800476c <HAL_GetTick+0x14>)
 800475e:	681b      	ldr	r3, [r3, #0]
}
 8004760:	4618      	mov	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	2400c2f4 	.word	0x2400c2f4

08004770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004778:	f7ff ffee 	bl	8004758 <HAL_GetTick>
 800477c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d005      	beq.n	8004796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800478a:	4b0a      	ldr	r3, [pc, #40]	@ (80047b4 <HAL_Delay+0x44>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004796:	bf00      	nop
 8004798:	f7ff ffde 	bl	8004758 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d8f7      	bhi.n	8004798 <HAL_Delay+0x28>
  {
  }
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	24000038 	.word	0x24000038

080047b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	609a      	str	r2, [r3, #8]
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	609a      	str	r2, [r3, #8]
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a18      	ldr	r2, [pc, #96]	@ (8004890 <LL_ADC_SetChannelPreselection+0x70>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d027      	beq.n	8004882 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004838:	2b00      	cmp	r3, #0
 800483a:	d107      	bne.n	800484c <LL_ADC_SetChannelPreselection+0x2c>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	0e9b      	lsrs	r3, r3, #26
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2201      	movs	r2, #1
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	e015      	b.n	8004878 <LL_ADC_SetChannelPreselection+0x58>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	fa93 f3a3 	rbit	r3, r3
 8004856:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8004862:	2320      	movs	r3, #32
 8004864:	e003      	b.n	800486e <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	fab3 f383 	clz	r3, r3
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	2201      	movs	r2, #1
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	69d2      	ldr	r2, [r2, #28]
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	58026000 	.word	0x58026000

08004894 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3360      	adds	r3, #96	@ 0x60
 80048a6:	461a      	mov	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a10      	ldr	r2, [pc, #64]	@ (80048f4 <LL_ADC_SetOffset+0x60>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d10b      	bne.n	80048d0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80048ce:	e00b      	b.n	80048e8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	430b      	orrs	r3, r1
 80048e2:	431a      	orrs	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	601a      	str	r2, [r3, #0]
}
 80048e8:	bf00      	nop
 80048ea:	371c      	adds	r7, #28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	58026000 	.word	0x58026000

080048f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3360      	adds	r3, #96	@ 0x60
 8004906:	461a      	mov	r2, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	431a      	orrs	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	611a      	str	r2, [r3, #16]
}
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
	...

08004958 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4a0c      	ldr	r2, [pc, #48]	@ (8004998 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3360      	adds	r3, #96	@ 0x60
 8004970:	461a      	mov	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	431a      	orrs	r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	601a      	str	r2, [r3, #0]
  }
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	58026000 	.word	0x58026000

0800499c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4a0c      	ldr	r2, [pc, #48]	@ (80049dc <LL_ADC_SetOffsetSaturation+0x40>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10e      	bne.n	80049ce <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3360      	adds	r3, #96	@ 0x60
 80049b4:	461a      	mov	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	58026000 	.word	0x58026000

080049e0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004a20 <LL_ADC_SetOffsetSign+0x40>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10e      	bne.n	8004a12 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3360      	adds	r3, #96	@ 0x60
 80049f8:	461a      	mov	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	58026000 	.word	0x58026000

08004a24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3360      	adds	r3, #96	@ 0x60
 8004a34:	461a      	mov	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4a0c      	ldr	r2, [pc, #48]	@ (8004a74 <LL_ADC_SetOffsetState+0x50>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d108      	bne.n	8004a58 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004a56:	e007      	b.n	8004a68 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	601a      	str	r2, [r3, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	58026000 	.word	0x58026000

08004a78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b087      	sub	sp, #28
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3330      	adds	r3, #48	@ 0x30
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	0a1b      	lsrs	r3, r3, #8
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	4413      	add	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	211f      	movs	r1, #31
 8004aca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	401a      	ands	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0e9b      	lsrs	r3, r3, #26
 8004ad6:	f003 011f 	and.w	r1, r3, #31
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f023 0203 	bic.w	r2, r3, #3
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	60da      	str	r2, [r3, #12]
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f043 0201 	orr.w	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	60da      	str	r2, [r3, #12]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a08      	ldr	r2, [pc, #32]	@ (8004b6c <LL_ADC_REG_SetDMATransferMode+0x30>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d107      	bne.n	8004b5e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f023 0203 	bic.w	r2, r3, #3
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60da      	str	r2, [r3, #12]
  }
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	58026000 	.word	0x58026000

08004b70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3314      	adds	r3, #20
 8004b80:	461a      	mov	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	0e5b      	lsrs	r3, r3, #25
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	4413      	add	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	0d1b      	lsrs	r3, r3, #20
 8004b98:	f003 031f 	and.w	r3, r3, #31
 8004b9c:	2107      	movs	r1, #7
 8004b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	401a      	ands	r2, r3
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	0d1b      	lsrs	r3, r3, #20
 8004baa:	f003 031f 	and.w	r3, r3, #31
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c40 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d115      	bne.n	8004c08 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004be8:	43db      	mvns	r3, r3
 8004bea:	401a      	ands	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f003 0318 	and.w	r3, r3, #24
 8004bf2:	4914      	ldr	r1, [pc, #80]	@ (8004c44 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004bf4:	40d9      	lsrs	r1, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	400b      	ands	r3, r1
 8004bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004c06:	e014      	b.n	8004c32 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c14:	43db      	mvns	r3, r3
 8004c16:	401a      	ands	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f003 0318 	and.w	r3, r3, #24
 8004c1e:	4909      	ldr	r1, [pc, #36]	@ (8004c44 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004c20:	40d9      	lsrs	r1, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	400b      	ands	r3, r1
 8004c26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	58026000 	.word	0x58026000
 8004c44:	000fffff 	.word	0x000fffff

08004c48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 031f 	and.w	r3, r3, #31
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	4b04      	ldr	r3, [pc, #16]	@ (8004c84 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6093      	str	r3, [r2, #8]
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	5fffffc0 	.word	0x5fffffc0

08004c88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c9c:	d101      	bne.n	8004ca2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <LL_ADC_EnableInternalRegulator+0x24>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	6fffffc0 	.word	0x6fffffc0

08004cd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cec:	d101      	bne.n	8004cf2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <LL_ADC_Enable+0x24>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	f043 0201 	orr.w	r2, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	7fffffc0 	.word	0x7fffffc0

08004d28 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	4b05      	ldr	r3, [pc, #20]	@ (8004d4c <LL_ADC_Disable+0x24>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	f043 0202 	orr.w	r2, r3, #2
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	7fffffc0 	.word	0x7fffffc0

08004d50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <LL_ADC_IsEnabled+0x18>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <LL_ADC_IsEnabled+0x1a>
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d101      	bne.n	8004d8e <LL_ADC_IsDisableOngoing+0x18>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <LL_ADC_IsDisableOngoing+0x1a>
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <LL_ADC_REG_StartConversion+0x24>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	f043 0204 	orr.w	r2, r3, #4
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	7fffffc0 	.word	0x7fffffc0

08004dc4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <LL_ADC_REG_StopConversion+0x24>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	f043 0210 	orr.w	r2, r3, #16
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	7fffffc0 	.word	0x7fffffc0

08004dec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d101      	bne.n	8004e04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e00:	2301      	movs	r3, #1
 8004e02:	e000      	b.n	8004e06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	4b05      	ldr	r3, [pc, #20]	@ (8004e38 <LL_ADC_INJ_StopConversion+0x24>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	7fffffc0 	.word	0x7fffffc0

08004e3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d101      	bne.n	8004e54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b089      	sub	sp, #36	@ 0x24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e1ee      	b.n	800525c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d109      	bne.n	8004ea0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7fd fcd3 	bl	8002838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff feef 	bl	8004c88 <LL_ADC_IsDeepPowerDownEnabled>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff fed5 	bl	8004c64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff ff0a 	bl	8004cd8 <LL_ADC_IsInternalRegulatorEnabled>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d114      	bne.n	8004ef4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff feee 	bl	8004cb0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ed4:	4b8e      	ldr	r3, [pc, #568]	@ (8005110 <HAL_ADC_Init+0x2ac>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	099b      	lsrs	r3, r3, #6
 8004eda:	4a8e      	ldr	r2, [pc, #568]	@ (8005114 <HAL_ADC_Init+0x2b0>)
 8004edc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee0:	099b      	lsrs	r3, r3, #6
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004ee6:	e002      	b.n	8004eee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f9      	bne.n	8004ee8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff feed 	bl	8004cd8 <LL_ADC_IsInternalRegulatorEnabled>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10d      	bne.n	8004f20 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f08:	f043 0210 	orr.w	r2, r3, #16
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f14:	f043 0201 	orr.w	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff ff61 	bl	8004dec <LL_ADC_REG_IsConversionOngoing>
 8004f2a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f040 8188 	bne.w	800524a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 8184 	bne.w	800524a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f46:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004f4a:	f043 0202 	orr.w	r2, r3, #2
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fefa 	bl	8004d50 <LL_ADC_IsEnabled>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d136      	bne.n	8004fd0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a6c      	ldr	r2, [pc, #432]	@ (8005118 <HAL_ADC_Init+0x2b4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <HAL_ADC_Init+0x112>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a6a      	ldr	r2, [pc, #424]	@ (800511c <HAL_ADC_Init+0x2b8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d10e      	bne.n	8004f94 <HAL_ADC_Init+0x130>
 8004f76:	4868      	ldr	r0, [pc, #416]	@ (8005118 <HAL_ADC_Init+0x2b4>)
 8004f78:	f7ff feea 	bl	8004d50 <LL_ADC_IsEnabled>
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	4867      	ldr	r0, [pc, #412]	@ (800511c <HAL_ADC_Init+0x2b8>)
 8004f80:	f7ff fee6 	bl	8004d50 <LL_ADC_IsEnabled>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4323      	orrs	r3, r4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	e008      	b.n	8004fa6 <HAL_ADC_Init+0x142>
 8004f94:	4862      	ldr	r0, [pc, #392]	@ (8005120 <HAL_ADC_Init+0x2bc>)
 8004f96:	f7ff fedb 	bl	8004d50 <LL_ADC_IsEnabled>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf0c      	ite	eq
 8004fa0:	2301      	moveq	r3, #1
 8004fa2:	2300      	movne	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d012      	beq.n	8004fd0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a5a      	ldr	r2, [pc, #360]	@ (8005118 <HAL_ADC_Init+0x2b4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <HAL_ADC_Init+0x15a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a58      	ldr	r2, [pc, #352]	@ (800511c <HAL_ADC_Init+0x2b8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d101      	bne.n	8004fc2 <HAL_ADC_Init+0x15e>
 8004fbe:	4a59      	ldr	r2, [pc, #356]	@ (8005124 <HAL_ADC_Init+0x2c0>)
 8004fc0:	e000      	b.n	8004fc4 <HAL_ADC_Init+0x160>
 8004fc2:	4a59      	ldr	r2, [pc, #356]	@ (8005128 <HAL_ADC_Init+0x2c4>)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f7ff fbf4 	bl	80047b8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a52      	ldr	r2, [pc, #328]	@ (8005120 <HAL_ADC_Init+0x2bc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d129      	bne.n	800502e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	7e5b      	ldrb	r3, [r3, #25]
 8004fde:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004fe4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004fea:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d013      	beq.n	800501c <HAL_ADC_Init+0x1b8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b0c      	cmp	r3, #12
 8004ffa:	d00d      	beq.n	8005018 <HAL_ADC_Init+0x1b4>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b1c      	cmp	r3, #28
 8005002:	d007      	beq.n	8005014 <HAL_ADC_Init+0x1b0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b18      	cmp	r3, #24
 800500a:	d101      	bne.n	8005010 <HAL_ADC_Init+0x1ac>
 800500c:	2318      	movs	r3, #24
 800500e:	e006      	b.n	800501e <HAL_ADC_Init+0x1ba>
 8005010:	2300      	movs	r3, #0
 8005012:	e004      	b.n	800501e <HAL_ADC_Init+0x1ba>
 8005014:	2310      	movs	r3, #16
 8005016:	e002      	b.n	800501e <HAL_ADC_Init+0x1ba>
 8005018:	2308      	movs	r3, #8
 800501a:	e000      	b.n	800501e <HAL_ADC_Init+0x1ba>
 800501c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800501e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005026:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	e00e      	b.n	800504c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	7e5b      	ldrb	r3, [r3, #25]
 8005032:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005038:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800503e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005046:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005048:	4313      	orrs	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d106      	bne.n	8005064 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505a:	3b01      	subs	r3, #1
 800505c:	045b      	lsls	r3, r3, #17
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4313      	orrs	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4313      	orrs	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a26      	ldr	r2, [pc, #152]	@ (8005120 <HAL_ADC_Init+0x2bc>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d115      	bne.n	80050b6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	4b26      	ldr	r3, [pc, #152]	@ (800512c <HAL_ADC_Init+0x2c8>)
 8005092:	4013      	ands	r3, r2
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6812      	ldr	r2, [r2, #0]
 8005098:	69b9      	ldr	r1, [r7, #24]
 800509a:	430b      	orrs	r3, r1
 800509c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	611a      	str	r2, [r3, #16]
 80050b4:	e009      	b.n	80050ca <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005130 <HAL_ADC_Init+0x2cc>)
 80050be:	4013      	ands	r3, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	69b9      	ldr	r1, [r7, #24]
 80050c6:	430b      	orrs	r3, r1
 80050c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff fe8c 	bl	8004dec <LL_ADC_REG_IsConversionOngoing>
 80050d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff feae 	bl	8004e3c <LL_ADC_INJ_IsConversionOngoing>
 80050e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f040 808e 	bne.w	8005206 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f040 808a 	bne.w	8005206 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005120 <HAL_ADC_Init+0x2bc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d11b      	bne.n	8005134 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	7e1b      	ldrb	r3, [r3, #24]
 8005100:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005108:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800510a:	4313      	orrs	r3, r2
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	e018      	b.n	8005142 <HAL_ADC_Init+0x2de>
 8005110:	24000018 	.word	0x24000018
 8005114:	053e2d63 	.word	0x053e2d63
 8005118:	40022000 	.word	0x40022000
 800511c:	40022100 	.word	0x40022100
 8005120:	58026000 	.word	0x58026000
 8005124:	40022300 	.word	0x40022300
 8005128:	58026300 	.word	0x58026300
 800512c:	fff04007 	.word	0xfff04007
 8005130:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	7e1b      	ldrb	r3, [r3, #24]
 8005138:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	4b46      	ldr	r3, [pc, #280]	@ (8005264 <HAL_ADC_Init+0x400>)
 800514a:	4013      	ands	r3, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	69b9      	ldr	r1, [r7, #24]
 8005152:	430b      	orrs	r3, r1
 8005154:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800515c:	2b01      	cmp	r3, #1
 800515e:	d137      	bne.n	80051d0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a3f      	ldr	r2, [pc, #252]	@ (8005268 <HAL_ADC_Init+0x404>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d116      	bne.n	800519e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	4b3d      	ldr	r3, [pc, #244]	@ (800526c <HAL_ADC_Init+0x408>)
 8005178:	4013      	ands	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005182:	4311      	orrs	r1, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005188:	4311      	orrs	r1, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800518e:	430a      	orrs	r2, r1
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	611a      	str	r2, [r3, #16]
 800519c:	e020      	b.n	80051e0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	4b32      	ldr	r3, [pc, #200]	@ (8005270 <HAL_ADC_Init+0x40c>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051ac:	3a01      	subs	r2, #1
 80051ae:	0411      	lsls	r1, r2, #16
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80051b4:	4311      	orrs	r1, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051ba:	4311      	orrs	r1, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80051c0:	430a      	orrs	r2, r1
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0201 	orr.w	r2, r2, #1
 80051cc:	611a      	str	r2, [r3, #16]
 80051ce:	e007      	b.n	80051e0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005268 <HAL_ADC_Init+0x404>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d002      	beq.n	8005206 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f001 f8c1 	bl	8006388 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d10c      	bne.n	8005228 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005214:	f023 010f 	bic.w	r1, r3, #15
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	1e5a      	subs	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	631a      	str	r2, [r3, #48]	@ 0x30
 8005226:	e007      	b.n	8005238 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 020f 	bic.w	r2, r2, #15
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800523c:	f023 0303 	bic.w	r3, r3, #3
 8005240:	f043 0201 	orr.w	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	661a      	str	r2, [r3, #96]	@ 0x60
 8005248:	e007      	b.n	800525a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800524e:	f043 0210 	orr.w	r2, r3, #16
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800525a:	7ffb      	ldrb	r3, [r7, #31]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3724      	adds	r7, #36	@ 0x24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd90      	pop	{r4, r7, pc}
 8005264:	ffffbffc 	.word	0xffffbffc
 8005268:	58026000 	.word	0x58026000
 800526c:	fc00f81f 	.word	0xfc00f81f
 8005270:	fc00f81e 	.word	0xfc00f81e

08005274 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_ADC_Stop+0x16>
 8005286:	2302      	movs	r3, #2
 8005288:	e021      	b.n	80052ce <HAL_ADC_Stop+0x5a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005292:	2103      	movs	r1, #3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fe3d 	bl	8005f14 <ADC_ConversionStop>
 800529a:	4603      	mov	r3, r0
 800529c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10f      	bne.n	80052c4 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 ff7b 	bl	80061a0 <ADC_Disable>
 80052aa:	4603      	mov	r3, r0
 80052ac:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d107      	bne.n	80052c4 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80052b8:	4b07      	ldr	r3, [pc, #28]	@ (80052d8 <HAL_ADC_Stop+0x64>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	f043 0201 	orr.w	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	ffffeefe 	.word	0xffffeefe

080052dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a60      	ldr	r2, [pc, #384]	@ (8005470 <HAL_ADC_Start_DMA+0x194>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_ADC_Start_DMA+0x20>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a5f      	ldr	r2, [pc, #380]	@ (8005474 <HAL_ADC_Start_DMA+0x198>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d101      	bne.n	8005300 <HAL_ADC_Start_DMA+0x24>
 80052fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005478 <HAL_ADC_Start_DMA+0x19c>)
 80052fe:	e000      	b.n	8005302 <HAL_ADC_Start_DMA+0x26>
 8005300:	4b5e      	ldr	r3, [pc, #376]	@ (800547c <HAL_ADC_Start_DMA+0x1a0>)
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff fca0 	bl	8004c48 <LL_ADC_GetMultimode>
 8005308:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fd6c 	bl	8004dec <LL_ADC_REG_IsConversionOngoing>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	f040 80a2 	bne.w	8005460 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_ADC_Start_DMA+0x4e>
 8005326:	2302      	movs	r3, #2
 8005328:	e09d      	b.n	8005466 <HAL_ADC_Start_DMA+0x18a>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d006      	beq.n	8005346 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b05      	cmp	r3, #5
 800533c:	d003      	beq.n	8005346 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b09      	cmp	r3, #9
 8005342:	f040 8086 	bne.w	8005452 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fea0 	bl	800608c <ADC_Enable>
 800534c:	4603      	mov	r3, r0
 800534e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d178      	bne.n	8005448 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800535a:	4b49      	ldr	r3, [pc, #292]	@ (8005480 <HAL_ADC_Start_DMA+0x1a4>)
 800535c:	4013      	ands	r3, r2
 800535e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a42      	ldr	r2, [pc, #264]	@ (8005474 <HAL_ADC_Start_DMA+0x198>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d002      	beq.n	8005376 <HAL_ADC_Start_DMA+0x9a>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	e000      	b.n	8005378 <HAL_ADC_Start_DMA+0x9c>
 8005376:	4b3e      	ldr	r3, [pc, #248]	@ (8005470 <HAL_ADC_Start_DMA+0x194>)
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	4293      	cmp	r3, r2
 800537e:	d002      	beq.n	8005386 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d105      	bne.n	8005392 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800538a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005396:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d006      	beq.n	80053ac <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053a2:	f023 0206 	bic.w	r2, r3, #6
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	665a      	str	r2, [r3, #100]	@ 0x64
 80053aa:	e002      	b.n	80053b2 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b6:	4a33      	ldr	r2, [pc, #204]	@ (8005484 <HAL_ADC_Start_DMA+0x1a8>)
 80053b8:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053be:	4a32      	ldr	r2, [pc, #200]	@ (8005488 <HAL_ADC_Start_DMA+0x1ac>)
 80053c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c6:	4a31      	ldr	r2, [pc, #196]	@ (800548c <HAL_ADC_Start_DMA+0x1b0>)
 80053c8:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	221c      	movs	r2, #28
 80053d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0210 	orr.w	r2, r2, #16
 80053e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a28      	ldr	r2, [pc, #160]	@ (8005490 <HAL_ADC_Start_DMA+0x1b4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d10f      	bne.n	8005414 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	4619      	mov	r1, r3
 8005402:	4610      	mov	r0, r2
 8005404:	f7ff fb9a 	bl	8004b3c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff fb85 	bl	8004b1c <LL_ADC_EnableDMAReq>
 8005412:	e007      	b.n	8005424 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541c:	4619      	mov	r1, r3
 800541e:	4610      	mov	r0, r2
 8005420:	f7ff fb69 	bl	8004af6 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3340      	adds	r3, #64	@ 0x40
 800542e:	4619      	mov	r1, r3
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f002 f80a 	bl	800744c <HAL_DMA_Start_IT>
 8005438:	4603      	mov	r3, r0
 800543a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fcab 	bl	8004d9c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005446:	e00d      	b.n	8005464 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8005450:	e008      	b.n	8005464 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800545e:	e001      	b.n	8005464 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005460:	2302      	movs	r3, #2
 8005462:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005464:	7dfb      	ldrb	r3, [r7, #23]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40022000 	.word	0x40022000
 8005474:	40022100 	.word	0x40022100
 8005478:	40022300 	.word	0x40022300
 800547c:	58026300 	.word	0x58026300
 8005480:	fffff0fe 	.word	0xfffff0fe
 8005484:	0800625f 	.word	0x0800625f
 8005488:	08006337 	.word	0x08006337
 800548c:	08006353 	.word	0x08006353
 8005490:	58026000 	.word	0x58026000

08005494 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_ADC_Stop_DMA+0x16>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e04f      	b.n	800554a <HAL_ADC_Stop_DMA+0xb6>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80054b2:	2103      	movs	r1, #3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fd2d 	bl	8005f14 <ADC_ConversionStop>
 80054ba:	4603      	mov	r3, r0
 80054bc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d13d      	bne.n	8005540 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0203 	bic.w	r2, r2, #3
 80054d2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d10f      	bne.n	8005502 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e6:	4618      	mov	r0, r3
 80054e8:	f002 fa1a 	bl	8007920 <HAL_DMA_Abort>
 80054ec:	4603      	mov	r3, r0
 80054ee:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d005      	beq.n	8005502 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0210 	bic.w	r2, r2, #16
 8005510:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d105      	bne.n	8005524 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fe41 	bl	80061a0 <ADC_Disable>
 800551e:	4603      	mov	r3, r0
 8005520:	73fb      	strb	r3, [r7, #15]
 8005522:	e002      	b.n	800552a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fe3b 	bl	80061a0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d107      	bne.n	8005540 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005534:	4b07      	ldr	r3, [pc, #28]	@ (8005554 <HAL_ADC_Stop_DMA+0xc0>)
 8005536:	4013      	ands	r3, r2
 8005538:	f043 0201 	orr.w	r2, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005548:	7bfb      	ldrb	r3, [r7, #15]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	ffffeefe 	.word	0xffffeefe

08005558 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b0a5      	sub	sp, #148	@ 0x94
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005586:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	4aa4      	ldr	r2, [pc, #656]	@ (8005820 <HAL_ADC_ConfigChannel+0x2b4>)
 800558e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d102      	bne.n	80055a0 <HAL_ADC_ConfigChannel+0x34>
 800559a:	2302      	movs	r3, #2
 800559c:	f000 bca2 	b.w	8005ee4 <HAL_ADC_ConfigChannel+0x978>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff fc1d 	bl	8004dec <LL_ADC_REG_IsConversionOngoing>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 8486 	bne.w	8005ec6 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	db31      	blt.n	8005626 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a97      	ldr	r2, [pc, #604]	@ (8005824 <HAL_ADC_ConfigChannel+0x2b8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d02c      	beq.n	8005626 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d108      	bne.n	80055ea <HAL_ADC_ConfigChannel+0x7e>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	0e9b      	lsrs	r3, r3, #26
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2201      	movs	r2, #1
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	e016      	b.n	8005618 <HAL_ADC_ConfigChannel+0xac>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055f2:	fa93 f3a3 	rbit	r3, r3
 80055f6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80055f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055fa:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80055fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8005602:	2320      	movs	r3, #32
 8005604:	e003      	b.n	800560e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8005606:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005608:	fab3 f383 	clz	r3, r3
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f003 031f 	and.w	r3, r3, #31
 8005612:	2201      	movs	r2, #1
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	69d1      	ldr	r1, [r2, #28]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	430b      	orrs	r3, r1
 8005624:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6859      	ldr	r1, [r3, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	f7ff fa33 	bl	8004a9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff fbd5 	bl	8004dec <LL_ADC_REG_IsConversionOngoing>
 8005642:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff fbf6 	bl	8004e3c <LL_ADC_INJ_IsConversionOngoing>
 8005650:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005654:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005658:	2b00      	cmp	r3, #0
 800565a:	f040 824a 	bne.w	8005af2 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800565e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005662:	2b00      	cmp	r3, #0
 8005664:	f040 8245 	bne.w	8005af2 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6819      	ldr	r1, [r3, #0]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	461a      	mov	r2, r3
 8005676:	f7ff fa7b 	bl	8004b70 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a69      	ldr	r2, [pc, #420]	@ (8005824 <HAL_ADC_ConfigChannel+0x2b8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d10d      	bne.n	80056a0 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695a      	ldr	r2, [r3, #20]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	08db      	lsrs	r3, r3, #3
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800569e:	e032      	b.n	8005706 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80056a0:	4b61      	ldr	r3, [pc, #388]	@ (8005828 <HAL_ADC_ConfigChannel+0x2bc>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80056a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056ac:	d10b      	bne.n	80056c6 <HAL_ADC_ConfigChannel+0x15a>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	089b      	lsrs	r3, r3, #2
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	e01d      	b.n	8005702 <HAL_ADC_ConfigChannel+0x196>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x180>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	089b      	lsrs	r3, r3, #2
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	e00a      	b.n	8005702 <HAL_ADC_ConfigChannel+0x196>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	089b      	lsrs	r3, r3, #2
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b04      	cmp	r3, #4
 800570c:	d048      	beq.n	80057a0 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6919      	ldr	r1, [r3, #16]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800571e:	f7ff f8b9 	bl	8004894 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a3f      	ldr	r2, [pc, #252]	@ (8005824 <HAL_ADC_ConfigChannel+0x2b8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d119      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	6919      	ldr	r1, [r3, #16]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	461a      	mov	r2, r3
 800573a:	f7ff f951 	bl	80049e0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6919      	ldr	r1, [r3, #16]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d102      	bne.n	8005756 <HAL_ADC_ConfigChannel+0x1ea>
 8005750:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005754:	e000      	b.n	8005758 <HAL_ADC_ConfigChannel+0x1ec>
 8005756:	2300      	movs	r3, #0
 8005758:	461a      	mov	r2, r3
 800575a:	f7ff f91f 	bl	800499c <LL_ADC_SetOffsetSaturation>
 800575e:	e1c8      	b.n	8005af2 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	6919      	ldr	r1, [r3, #16]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800576e:	2b01      	cmp	r3, #1
 8005770:	d102      	bne.n	8005778 <HAL_ADC_ConfigChannel+0x20c>
 8005772:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005776:	e000      	b.n	800577a <HAL_ADC_ConfigChannel+0x20e>
 8005778:	2300      	movs	r3, #0
 800577a:	461a      	mov	r2, r3
 800577c:	f7ff f8ec 	bl	8004958 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	6919      	ldr	r1, [r3, #16]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	7e1b      	ldrb	r3, [r3, #24]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d102      	bne.n	8005796 <HAL_ADC_ConfigChannel+0x22a>
 8005790:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005794:	e000      	b.n	8005798 <HAL_ADC_ConfigChannel+0x22c>
 8005796:	2300      	movs	r3, #0
 8005798:	461a      	mov	r2, r3
 800579a:	f7ff f8c3 	bl	8004924 <LL_ADC_SetDataRightShift>
 800579e:	e1a8      	b.n	8005af2 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005824 <HAL_ADC_ConfigChannel+0x2b8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	f040 815b 	bne.w	8005a62 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff f8a0 	bl	80048f8 <LL_ADC_GetOffsetChannel>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x26c>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2100      	movs	r1, #0
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff f895 	bl	80048f8 <LL_ADC_GetOffsetChannel>
 80057ce:	4603      	mov	r3, r0
 80057d0:	0e9b      	lsrs	r3, r3, #26
 80057d2:	f003 021f 	and.w	r2, r3, #31
 80057d6:	e017      	b.n	8005808 <HAL_ADC_ConfigChannel+0x29c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2100      	movs	r1, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff f88a 	bl	80048f8 <LL_ADC_GetOffsetChannel>
 80057e4:	4603      	mov	r3, r0
 80057e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057ea:	fa93 f3a3 	rbit	r3, r3
 80057ee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80057f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80057f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80057fa:	2320      	movs	r3, #32
 80057fc:	e003      	b.n	8005806 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 80057fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005800:	fab3 f383 	clz	r3, r3
 8005804:	b2db      	uxtb	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10b      	bne.n	800582c <HAL_ADC_ConfigChannel+0x2c0>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	0e9b      	lsrs	r3, r3, #26
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	e017      	b.n	8005850 <HAL_ADC_ConfigChannel+0x2e4>
 8005820:	47ff0000 	.word	0x47ff0000
 8005824:	58026000 	.word	0x58026000
 8005828:	5c001000 	.word	0x5c001000
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005834:	fa93 f3a3 	rbit	r3, r3
 8005838:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800583a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800583c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800583e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8005844:	2320      	movs	r3, #32
 8005846:	e003      	b.n	8005850 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8005848:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800584a:	fab3 f383 	clz	r3, r3
 800584e:	b2db      	uxtb	r3, r3
 8005850:	429a      	cmp	r2, r3
 8005852:	d106      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2200      	movs	r2, #0
 800585a:	2100      	movs	r1, #0
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff f8e1 	bl	8004a24 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2101      	movs	r1, #1
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff f845 	bl	80048f8 <LL_ADC_GetOffsetChannel>
 800586e:	4603      	mov	r3, r0
 8005870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <HAL_ADC_ConfigChannel+0x322>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2101      	movs	r1, #1
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff f83a 	bl	80048f8 <LL_ADC_GetOffsetChannel>
 8005884:	4603      	mov	r3, r0
 8005886:	0e9b      	lsrs	r3, r3, #26
 8005888:	f003 021f 	and.w	r2, r3, #31
 800588c:	e017      	b.n	80058be <HAL_ADC_ConfigChannel+0x352>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2101      	movs	r1, #1
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff f82f 	bl	80048f8 <LL_ADC_GetOffsetChannel>
 800589a:	4603      	mov	r3, r0
 800589c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058a0:	fa93 f3a3 	rbit	r3, r3
 80058a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80058a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80058aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 80058b0:	2320      	movs	r3, #32
 80058b2:	e003      	b.n	80058bc <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 80058b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058b6:	fab3 f383 	clz	r3, r3
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d105      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0x36a>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	0e9b      	lsrs	r3, r3, #26
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	e011      	b.n	80058fa <HAL_ADC_ConfigChannel+0x38e>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058de:	fa93 f3a3 	rbit	r3, r3
 80058e2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80058e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80058e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80058ee:	2320      	movs	r3, #32
 80058f0:	e003      	b.n	80058fa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80058f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058f4:	fab3 f383 	clz	r3, r3
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d106      	bne.n	800590c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	2101      	movs	r1, #1
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff f88c 	bl	8004a24 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2102      	movs	r1, #2
 8005912:	4618      	mov	r0, r3
 8005914:	f7fe fff0 	bl	80048f8 <LL_ADC_GetOffsetChannel>
 8005918:	4603      	mov	r3, r0
 800591a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x3cc>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2102      	movs	r1, #2
 8005928:	4618      	mov	r0, r3
 800592a:	f7fe ffe5 	bl	80048f8 <LL_ADC_GetOffsetChannel>
 800592e:	4603      	mov	r3, r0
 8005930:	0e9b      	lsrs	r3, r3, #26
 8005932:	f003 021f 	and.w	r2, r3, #31
 8005936:	e017      	b.n	8005968 <HAL_ADC_ConfigChannel+0x3fc>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2102      	movs	r1, #2
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe ffda 	bl	80048f8 <LL_ADC_GetOffsetChannel>
 8005944:	4603      	mov	r3, r0
 8005946:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800595a:	2320      	movs	r3, #32
 800595c:	e003      	b.n	8005966 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800595e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005960:	fab3 f383 	clz	r3, r3
 8005964:	b2db      	uxtb	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005970:	2b00      	cmp	r3, #0
 8005972:	d105      	bne.n	8005980 <HAL_ADC_ConfigChannel+0x414>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	0e9b      	lsrs	r3, r3, #26
 800597a:	f003 031f 	and.w	r3, r3, #31
 800597e:	e011      	b.n	80059a4 <HAL_ADC_ConfigChannel+0x438>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005988:	fa93 f3a3 	rbit	r3, r3
 800598c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800598e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005990:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8005998:	2320      	movs	r3, #32
 800599a:	e003      	b.n	80059a4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	fab3 f383 	clz	r3, r3
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d106      	bne.n	80059b6 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2200      	movs	r2, #0
 80059ae:	2102      	movs	r1, #2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff f837 	bl	8004a24 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2103      	movs	r1, #3
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fe ff9b 	bl	80048f8 <LL_ADC_GetOffsetChannel>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <HAL_ADC_ConfigChannel+0x476>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2103      	movs	r1, #3
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe ff90 	bl	80048f8 <LL_ADC_GetOffsetChannel>
 80059d8:	4603      	mov	r3, r0
 80059da:	0e9b      	lsrs	r3, r3, #26
 80059dc:	f003 021f 	and.w	r2, r3, #31
 80059e0:	e017      	b.n	8005a12 <HAL_ADC_ConfigChannel+0x4a6>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2103      	movs	r1, #3
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fe ff85 	bl	80048f8 <LL_ADC_GetOffsetChannel>
 80059ee:	4603      	mov	r3, r0
 80059f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	fa93 f3a3 	rbit	r3, r3
 80059f8:	61fb      	str	r3, [r7, #28]
  return result;
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005a04:	2320      	movs	r3, #32
 8005a06:	e003      	b.n	8005a10 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0a:	fab3 f383 	clz	r3, r3
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d105      	bne.n	8005a2a <HAL_ADC_ConfigChannel+0x4be>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	0e9b      	lsrs	r3, r3, #26
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	e011      	b.n	8005a4e <HAL_ADC_ConfigChannel+0x4e2>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	fa93 f3a3 	rbit	r3, r3
 8005a36:	613b      	str	r3, [r7, #16]
  return result;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8005a42:	2320      	movs	r3, #32
 8005a44:	e003      	b.n	8005a4e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	fab3 f383 	clz	r3, r3
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d14f      	bne.n	8005af2 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2200      	movs	r2, #0
 8005a58:	2103      	movs	r1, #3
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe ffe2 	bl	8004a24 <LL_ADC_SetOffsetState>
 8005a60:	e047      	b.n	8005af2 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	069b      	lsls	r3, r3, #26
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d107      	bne.n	8005a86 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005a84:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	069b      	lsls	r3, r3, #26
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d107      	bne.n	8005aaa <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005aa8:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ab0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	069b      	lsls	r3, r3, #26
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d107      	bne.n	8005ace <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005acc:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ad4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	069b      	lsls	r3, r3, #26
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d107      	bne.n	8005af2 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005af0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff f92a 	bl	8004d50 <LL_ADC_IsEnabled>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f040 81ea 	bne.w	8005ed8 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	6819      	ldr	r1, [r3, #0]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	461a      	mov	r2, r3
 8005b12:	f7ff f859 	bl	8004bc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	4a7a      	ldr	r2, [pc, #488]	@ (8005d04 <HAL_ADC_ConfigChannel+0x798>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	f040 80e0 	bne.w	8005ce2 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4977      	ldr	r1, [pc, #476]	@ (8005d08 <HAL_ADC_ConfigChannel+0x79c>)
 8005b2c:	428b      	cmp	r3, r1
 8005b2e:	d147      	bne.n	8005bc0 <HAL_ADC_ConfigChannel+0x654>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4975      	ldr	r1, [pc, #468]	@ (8005d0c <HAL_ADC_ConfigChannel+0x7a0>)
 8005b36:	428b      	cmp	r3, r1
 8005b38:	d040      	beq.n	8005bbc <HAL_ADC_ConfigChannel+0x650>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4974      	ldr	r1, [pc, #464]	@ (8005d10 <HAL_ADC_ConfigChannel+0x7a4>)
 8005b40:	428b      	cmp	r3, r1
 8005b42:	d039      	beq.n	8005bb8 <HAL_ADC_ConfigChannel+0x64c>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4972      	ldr	r1, [pc, #456]	@ (8005d14 <HAL_ADC_ConfigChannel+0x7a8>)
 8005b4a:	428b      	cmp	r3, r1
 8005b4c:	d032      	beq.n	8005bb4 <HAL_ADC_ConfigChannel+0x648>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4971      	ldr	r1, [pc, #452]	@ (8005d18 <HAL_ADC_ConfigChannel+0x7ac>)
 8005b54:	428b      	cmp	r3, r1
 8005b56:	d02b      	beq.n	8005bb0 <HAL_ADC_ConfigChannel+0x644>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	496f      	ldr	r1, [pc, #444]	@ (8005d1c <HAL_ADC_ConfigChannel+0x7b0>)
 8005b5e:	428b      	cmp	r3, r1
 8005b60:	d024      	beq.n	8005bac <HAL_ADC_ConfigChannel+0x640>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	496e      	ldr	r1, [pc, #440]	@ (8005d20 <HAL_ADC_ConfigChannel+0x7b4>)
 8005b68:	428b      	cmp	r3, r1
 8005b6a:	d01d      	beq.n	8005ba8 <HAL_ADC_ConfigChannel+0x63c>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	496c      	ldr	r1, [pc, #432]	@ (8005d24 <HAL_ADC_ConfigChannel+0x7b8>)
 8005b72:	428b      	cmp	r3, r1
 8005b74:	d016      	beq.n	8005ba4 <HAL_ADC_ConfigChannel+0x638>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	496b      	ldr	r1, [pc, #428]	@ (8005d28 <HAL_ADC_ConfigChannel+0x7bc>)
 8005b7c:	428b      	cmp	r3, r1
 8005b7e:	d00f      	beq.n	8005ba0 <HAL_ADC_ConfigChannel+0x634>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4969      	ldr	r1, [pc, #420]	@ (8005d2c <HAL_ADC_ConfigChannel+0x7c0>)
 8005b86:	428b      	cmp	r3, r1
 8005b88:	d008      	beq.n	8005b9c <HAL_ADC_ConfigChannel+0x630>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4968      	ldr	r1, [pc, #416]	@ (8005d30 <HAL_ADC_ConfigChannel+0x7c4>)
 8005b90:	428b      	cmp	r3, r1
 8005b92:	d101      	bne.n	8005b98 <HAL_ADC_ConfigChannel+0x62c>
 8005b94:	4b67      	ldr	r3, [pc, #412]	@ (8005d34 <HAL_ADC_ConfigChannel+0x7c8>)
 8005b96:	e0a0      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e09e      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005b9c:	4b66      	ldr	r3, [pc, #408]	@ (8005d38 <HAL_ADC_ConfigChannel+0x7cc>)
 8005b9e:	e09c      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005ba0:	4b66      	ldr	r3, [pc, #408]	@ (8005d3c <HAL_ADC_ConfigChannel+0x7d0>)
 8005ba2:	e09a      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005ba4:	4b60      	ldr	r3, [pc, #384]	@ (8005d28 <HAL_ADC_ConfigChannel+0x7bc>)
 8005ba6:	e098      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005ba8:	4b5e      	ldr	r3, [pc, #376]	@ (8005d24 <HAL_ADC_ConfigChannel+0x7b8>)
 8005baa:	e096      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005bac:	4b64      	ldr	r3, [pc, #400]	@ (8005d40 <HAL_ADC_ConfigChannel+0x7d4>)
 8005bae:	e094      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005bb0:	4b64      	ldr	r3, [pc, #400]	@ (8005d44 <HAL_ADC_ConfigChannel+0x7d8>)
 8005bb2:	e092      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005bb4:	4b64      	ldr	r3, [pc, #400]	@ (8005d48 <HAL_ADC_ConfigChannel+0x7dc>)
 8005bb6:	e090      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005bb8:	4b64      	ldr	r3, [pc, #400]	@ (8005d4c <HAL_ADC_ConfigChannel+0x7e0>)
 8005bba:	e08e      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e08c      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4962      	ldr	r1, [pc, #392]	@ (8005d50 <HAL_ADC_ConfigChannel+0x7e4>)
 8005bc6:	428b      	cmp	r3, r1
 8005bc8:	d140      	bne.n	8005c4c <HAL_ADC_ConfigChannel+0x6e0>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	494f      	ldr	r1, [pc, #316]	@ (8005d0c <HAL_ADC_ConfigChannel+0x7a0>)
 8005bd0:	428b      	cmp	r3, r1
 8005bd2:	d039      	beq.n	8005c48 <HAL_ADC_ConfigChannel+0x6dc>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	494d      	ldr	r1, [pc, #308]	@ (8005d10 <HAL_ADC_ConfigChannel+0x7a4>)
 8005bda:	428b      	cmp	r3, r1
 8005bdc:	d032      	beq.n	8005c44 <HAL_ADC_ConfigChannel+0x6d8>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	494c      	ldr	r1, [pc, #304]	@ (8005d14 <HAL_ADC_ConfigChannel+0x7a8>)
 8005be4:	428b      	cmp	r3, r1
 8005be6:	d02b      	beq.n	8005c40 <HAL_ADC_ConfigChannel+0x6d4>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	494a      	ldr	r1, [pc, #296]	@ (8005d18 <HAL_ADC_ConfigChannel+0x7ac>)
 8005bee:	428b      	cmp	r3, r1
 8005bf0:	d024      	beq.n	8005c3c <HAL_ADC_ConfigChannel+0x6d0>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4949      	ldr	r1, [pc, #292]	@ (8005d1c <HAL_ADC_ConfigChannel+0x7b0>)
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	d01d      	beq.n	8005c38 <HAL_ADC_ConfigChannel+0x6cc>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4947      	ldr	r1, [pc, #284]	@ (8005d20 <HAL_ADC_ConfigChannel+0x7b4>)
 8005c02:	428b      	cmp	r3, r1
 8005c04:	d016      	beq.n	8005c34 <HAL_ADC_ConfigChannel+0x6c8>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4946      	ldr	r1, [pc, #280]	@ (8005d24 <HAL_ADC_ConfigChannel+0x7b8>)
 8005c0c:	428b      	cmp	r3, r1
 8005c0e:	d00f      	beq.n	8005c30 <HAL_ADC_ConfigChannel+0x6c4>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4944      	ldr	r1, [pc, #272]	@ (8005d28 <HAL_ADC_ConfigChannel+0x7bc>)
 8005c16:	428b      	cmp	r3, r1
 8005c18:	d008      	beq.n	8005c2c <HAL_ADC_ConfigChannel+0x6c0>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4944      	ldr	r1, [pc, #272]	@ (8005d30 <HAL_ADC_ConfigChannel+0x7c4>)
 8005c20:	428b      	cmp	r3, r1
 8005c22:	d101      	bne.n	8005c28 <HAL_ADC_ConfigChannel+0x6bc>
 8005c24:	4b43      	ldr	r3, [pc, #268]	@ (8005d34 <HAL_ADC_ConfigChannel+0x7c8>)
 8005c26:	e058      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	e056      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005c2c:	4b43      	ldr	r3, [pc, #268]	@ (8005d3c <HAL_ADC_ConfigChannel+0x7d0>)
 8005c2e:	e054      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005c30:	4b3d      	ldr	r3, [pc, #244]	@ (8005d28 <HAL_ADC_ConfigChannel+0x7bc>)
 8005c32:	e052      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005c34:	4b3b      	ldr	r3, [pc, #236]	@ (8005d24 <HAL_ADC_ConfigChannel+0x7b8>)
 8005c36:	e050      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005c38:	4b41      	ldr	r3, [pc, #260]	@ (8005d40 <HAL_ADC_ConfigChannel+0x7d4>)
 8005c3a:	e04e      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005c3c:	4b41      	ldr	r3, [pc, #260]	@ (8005d44 <HAL_ADC_ConfigChannel+0x7d8>)
 8005c3e:	e04c      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005c40:	4b41      	ldr	r3, [pc, #260]	@ (8005d48 <HAL_ADC_ConfigChannel+0x7dc>)
 8005c42:	e04a      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005c44:	4b41      	ldr	r3, [pc, #260]	@ (8005d4c <HAL_ADC_ConfigChannel+0x7e0>)
 8005c46:	e048      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e046      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4940      	ldr	r1, [pc, #256]	@ (8005d54 <HAL_ADC_ConfigChannel+0x7e8>)
 8005c52:	428b      	cmp	r3, r1
 8005c54:	d140      	bne.n	8005cd8 <HAL_ADC_ConfigChannel+0x76c>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	492c      	ldr	r1, [pc, #176]	@ (8005d0c <HAL_ADC_ConfigChannel+0x7a0>)
 8005c5c:	428b      	cmp	r3, r1
 8005c5e:	d039      	beq.n	8005cd4 <HAL_ADC_ConfigChannel+0x768>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	492a      	ldr	r1, [pc, #168]	@ (8005d10 <HAL_ADC_ConfigChannel+0x7a4>)
 8005c66:	428b      	cmp	r3, r1
 8005c68:	d032      	beq.n	8005cd0 <HAL_ADC_ConfigChannel+0x764>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4929      	ldr	r1, [pc, #164]	@ (8005d14 <HAL_ADC_ConfigChannel+0x7a8>)
 8005c70:	428b      	cmp	r3, r1
 8005c72:	d02b      	beq.n	8005ccc <HAL_ADC_ConfigChannel+0x760>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4927      	ldr	r1, [pc, #156]	@ (8005d18 <HAL_ADC_ConfigChannel+0x7ac>)
 8005c7a:	428b      	cmp	r3, r1
 8005c7c:	d024      	beq.n	8005cc8 <HAL_ADC_ConfigChannel+0x75c>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4926      	ldr	r1, [pc, #152]	@ (8005d1c <HAL_ADC_ConfigChannel+0x7b0>)
 8005c84:	428b      	cmp	r3, r1
 8005c86:	d01d      	beq.n	8005cc4 <HAL_ADC_ConfigChannel+0x758>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4924      	ldr	r1, [pc, #144]	@ (8005d20 <HAL_ADC_ConfigChannel+0x7b4>)
 8005c8e:	428b      	cmp	r3, r1
 8005c90:	d016      	beq.n	8005cc0 <HAL_ADC_ConfigChannel+0x754>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4923      	ldr	r1, [pc, #140]	@ (8005d24 <HAL_ADC_ConfigChannel+0x7b8>)
 8005c98:	428b      	cmp	r3, r1
 8005c9a:	d00f      	beq.n	8005cbc <HAL_ADC_ConfigChannel+0x750>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4926      	ldr	r1, [pc, #152]	@ (8005d3c <HAL_ADC_ConfigChannel+0x7d0>)
 8005ca2:	428b      	cmp	r3, r1
 8005ca4:	d008      	beq.n	8005cb8 <HAL_ADC_ConfigChannel+0x74c>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	492b      	ldr	r1, [pc, #172]	@ (8005d58 <HAL_ADC_ConfigChannel+0x7ec>)
 8005cac:	428b      	cmp	r3, r1
 8005cae:	d101      	bne.n	8005cb4 <HAL_ADC_ConfigChannel+0x748>
 8005cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8005d5c <HAL_ADC_ConfigChannel+0x7f0>)
 8005cb2:	e012      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	e010      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005cb8:	4b27      	ldr	r3, [pc, #156]	@ (8005d58 <HAL_ADC_ConfigChannel+0x7ec>)
 8005cba:	e00e      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005d28 <HAL_ADC_ConfigChannel+0x7bc>)
 8005cbe:	e00c      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005cc0:	4b18      	ldr	r3, [pc, #96]	@ (8005d24 <HAL_ADC_ConfigChannel+0x7b8>)
 8005cc2:	e00a      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8005d40 <HAL_ADC_ConfigChannel+0x7d4>)
 8005cc6:	e008      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8005d44 <HAL_ADC_ConfigChannel+0x7d8>)
 8005cca:	e006      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8005d48 <HAL_ADC_ConfigChannel+0x7dc>)
 8005cce:	e004      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8005d4c <HAL_ADC_ConfigChannel+0x7e0>)
 8005cd2:	e002      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <HAL_ADC_ConfigChannel+0x76e>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4610      	mov	r0, r2
 8005cde:	f7fe fd9f 	bl	8004820 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f280 80f6 	bge.w	8005ed8 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a05      	ldr	r2, [pc, #20]	@ (8005d08 <HAL_ADC_ConfigChannel+0x79c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_ADC_ConfigChannel+0x794>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a15      	ldr	r2, [pc, #84]	@ (8005d50 <HAL_ADC_ConfigChannel+0x7e4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d131      	bne.n	8005d64 <HAL_ADC_ConfigChannel+0x7f8>
 8005d00:	4b17      	ldr	r3, [pc, #92]	@ (8005d60 <HAL_ADC_ConfigChannel+0x7f4>)
 8005d02:	e030      	b.n	8005d66 <HAL_ADC_ConfigChannel+0x7fa>
 8005d04:	47ff0000 	.word	0x47ff0000
 8005d08:	40022000 	.word	0x40022000
 8005d0c:	04300002 	.word	0x04300002
 8005d10:	08600004 	.word	0x08600004
 8005d14:	0c900008 	.word	0x0c900008
 8005d18:	10c00010 	.word	0x10c00010
 8005d1c:	14f00020 	.word	0x14f00020
 8005d20:	2a000400 	.word	0x2a000400
 8005d24:	2e300800 	.word	0x2e300800
 8005d28:	32601000 	.word	0x32601000
 8005d2c:	43210000 	.word	0x43210000
 8005d30:	4b840000 	.word	0x4b840000
 8005d34:	4fb80000 	.word	0x4fb80000
 8005d38:	47520000 	.word	0x47520000
 8005d3c:	36902000 	.word	0x36902000
 8005d40:	25b00200 	.word	0x25b00200
 8005d44:	21800100 	.word	0x21800100
 8005d48:	1d500080 	.word	0x1d500080
 8005d4c:	19200040 	.word	0x19200040
 8005d50:	40022100 	.word	0x40022100
 8005d54:	58026000 	.word	0x58026000
 8005d58:	3ac04000 	.word	0x3ac04000
 8005d5c:	3ef08000 	.word	0x3ef08000
 8005d60:	40022300 	.word	0x40022300
 8005d64:	4b61      	ldr	r3, [pc, #388]	@ (8005eec <HAL_ADC_ConfigChannel+0x980>)
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe fd4c 	bl	8004804 <LL_ADC_GetCommonPathInternalCh>
 8005d6c:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a5f      	ldr	r2, [pc, #380]	@ (8005ef0 <HAL_ADC_ConfigChannel+0x984>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d004      	beq.n	8005d82 <HAL_ADC_ConfigChannel+0x816>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ef4 <HAL_ADC_ConfigChannel+0x988>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d10e      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0x834>
 8005d82:	485b      	ldr	r0, [pc, #364]	@ (8005ef0 <HAL_ADC_ConfigChannel+0x984>)
 8005d84:	f7fe ffe4 	bl	8004d50 <LL_ADC_IsEnabled>
 8005d88:	4604      	mov	r4, r0
 8005d8a:	485a      	ldr	r0, [pc, #360]	@ (8005ef4 <HAL_ADC_ConfigChannel+0x988>)
 8005d8c:	f7fe ffe0 	bl	8004d50 <LL_ADC_IsEnabled>
 8005d90:	4603      	mov	r3, r0
 8005d92:	4323      	orrs	r3, r4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bf0c      	ite	eq
 8005d98:	2301      	moveq	r3, #1
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	e008      	b.n	8005db2 <HAL_ADC_ConfigChannel+0x846>
 8005da0:	4855      	ldr	r0, [pc, #340]	@ (8005ef8 <HAL_ADC_ConfigChannel+0x98c>)
 8005da2:	f7fe ffd5 	bl	8004d50 <LL_ADC_IsEnabled>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	bf0c      	ite	eq
 8005dac:	2301      	moveq	r3, #1
 8005dae:	2300      	movne	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d07d      	beq.n	8005eb2 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a50      	ldr	r2, [pc, #320]	@ (8005efc <HAL_ADC_ConfigChannel+0x990>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d130      	bne.n	8005e22 <HAL_ADC_ConfigChannel+0x8b6>
 8005dc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005dc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d12b      	bne.n	8005e22 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a4a      	ldr	r2, [pc, #296]	@ (8005ef8 <HAL_ADC_ConfigChannel+0x98c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	f040 8081 	bne.w	8005ed8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a45      	ldr	r2, [pc, #276]	@ (8005ef0 <HAL_ADC_ConfigChannel+0x984>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d004      	beq.n	8005dea <HAL_ADC_ConfigChannel+0x87e>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a43      	ldr	r2, [pc, #268]	@ (8005ef4 <HAL_ADC_ConfigChannel+0x988>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d101      	bne.n	8005dee <HAL_ADC_ConfigChannel+0x882>
 8005dea:	4a45      	ldr	r2, [pc, #276]	@ (8005f00 <HAL_ADC_ConfigChannel+0x994>)
 8005dec:	e000      	b.n	8005df0 <HAL_ADC_ConfigChannel+0x884>
 8005dee:	4a3f      	ldr	r2, [pc, #252]	@ (8005eec <HAL_ADC_ConfigChannel+0x980>)
 8005df0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005df2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f7fe fcf0 	bl	80047de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005dfe:	4b41      	ldr	r3, [pc, #260]	@ (8005f04 <HAL_ADC_ConfigChannel+0x998>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	099b      	lsrs	r3, r3, #6
 8005e04:	4a40      	ldr	r2, [pc, #256]	@ (8005f08 <HAL_ADC_ConfigChannel+0x99c>)
 8005e06:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0a:	099b      	lsrs	r3, r3, #6
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8005e12:	e002      	b.n	8005e1a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1f9      	bne.n	8005e14 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e20:	e05a      	b.n	8005ed8 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a39      	ldr	r2, [pc, #228]	@ (8005f0c <HAL_ADC_ConfigChannel+0x9a0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d11e      	bne.n	8005e6a <HAL_ADC_ConfigChannel+0x8fe>
 8005e2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d119      	bne.n	8005e6a <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ef8 <HAL_ADC_ConfigChannel+0x98c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d14b      	bne.n	8005ed8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef0 <HAL_ADC_ConfigChannel+0x984>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_ADC_ConfigChannel+0x8e8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a29      	ldr	r2, [pc, #164]	@ (8005ef4 <HAL_ADC_ConfigChannel+0x988>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d101      	bne.n	8005e58 <HAL_ADC_ConfigChannel+0x8ec>
 8005e54:	4a2a      	ldr	r2, [pc, #168]	@ (8005f00 <HAL_ADC_ConfigChannel+0x994>)
 8005e56:	e000      	b.n	8005e5a <HAL_ADC_ConfigChannel+0x8ee>
 8005e58:	4a24      	ldr	r2, [pc, #144]	@ (8005eec <HAL_ADC_ConfigChannel+0x980>)
 8005e5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e60:	4619      	mov	r1, r3
 8005e62:	4610      	mov	r0, r2
 8005e64:	f7fe fcbb 	bl	80047de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e68:	e036      	b.n	8005ed8 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a28      	ldr	r2, [pc, #160]	@ (8005f10 <HAL_ADC_ConfigChannel+0x9a4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d131      	bne.n	8005ed8 <HAL_ADC_ConfigChannel+0x96c>
 8005e74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d12c      	bne.n	8005ed8 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef8 <HAL_ADC_ConfigChannel+0x98c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d127      	bne.n	8005ed8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a18      	ldr	r2, [pc, #96]	@ (8005ef0 <HAL_ADC_ConfigChannel+0x984>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d004      	beq.n	8005e9c <HAL_ADC_ConfigChannel+0x930>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a17      	ldr	r2, [pc, #92]	@ (8005ef4 <HAL_ADC_ConfigChannel+0x988>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d101      	bne.n	8005ea0 <HAL_ADC_ConfigChannel+0x934>
 8005e9c:	4a18      	ldr	r2, [pc, #96]	@ (8005f00 <HAL_ADC_ConfigChannel+0x994>)
 8005e9e:	e000      	b.n	8005ea2 <HAL_ADC_ConfigChannel+0x936>
 8005ea0:	4a12      	ldr	r2, [pc, #72]	@ (8005eec <HAL_ADC_ConfigChannel+0x980>)
 8005ea2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ea4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f7fe fc97 	bl	80047de <LL_ADC_SetCommonPathInternalCh>
 8005eb0:	e012      	b.n	8005ed8 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eb6:	f043 0220 	orr.w	r2, r3, #32
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8005ec4:	e008      	b.n	8005ed8 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eca:	f043 0220 	orr.w	r2, r3, #32
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005ee0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3794      	adds	r7, #148	@ 0x94
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd90      	pop	{r4, r7, pc}
 8005eec:	58026300 	.word	0x58026300
 8005ef0:	40022000 	.word	0x40022000
 8005ef4:	40022100 	.word	0x40022100
 8005ef8:	58026000 	.word	0x58026000
 8005efc:	c7520000 	.word	0xc7520000
 8005f00:	40022300 	.word	0x40022300
 8005f04:	24000018 	.word	0x24000018
 8005f08:	053e2d63 	.word	0x053e2d63
 8005f0c:	c3210000 	.word	0xc3210000
 8005f10:	cb840000 	.word	0xcb840000

08005f14 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fe ff5e 	bl	8004dec <LL_ADC_REG_IsConversionOngoing>
 8005f30:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe ff80 	bl	8004e3c <LL_ADC_INJ_IsConversionOngoing>
 8005f3c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d103      	bne.n	8005f4c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 8098 	beq.w	800607c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d02a      	beq.n	8005fb0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	7e5b      	ldrb	r3, [r3, #25]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d126      	bne.n	8005fb0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	7e1b      	ldrb	r3, [r3, #24]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d122      	bne.n	8005fb0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005f6e:	e014      	b.n	8005f9a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	4a45      	ldr	r2, [pc, #276]	@ (8006088 <ADC_ConversionStop+0x174>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d90d      	bls.n	8005f94 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f7c:	f043 0210 	orr.w	r2, r3, #16
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f88:	f043 0201 	orr.w	r2, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e074      	b.n	800607e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	3301      	adds	r3, #1
 8005f98:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa4:	2b40      	cmp	r3, #64	@ 0x40
 8005fa6:	d1e3      	bne.n	8005f70 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2240      	movs	r2, #64	@ 0x40
 8005fae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d014      	beq.n	8005fe0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe ff16 	bl	8004dec <LL_ADC_REG_IsConversionOngoing>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00c      	beq.n	8005fe0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe fed3 	bl	8004d76 <LL_ADC_IsDisableOngoing>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe fef2 	bl	8004dc4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d014      	beq.n	8006010 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fe ff26 	bl	8004e3c <LL_ADC_INJ_IsConversionOngoing>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00c      	beq.n	8006010 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe febb 	bl	8004d76 <LL_ADC_IsDisableOngoing>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe ff02 	bl	8004e14 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d005      	beq.n	8006022 <ADC_ConversionStop+0x10e>
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	2b03      	cmp	r3, #3
 800601a:	d105      	bne.n	8006028 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800601c:	230c      	movs	r3, #12
 800601e:	617b      	str	r3, [r7, #20]
        break;
 8006020:	e005      	b.n	800602e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006022:	2308      	movs	r3, #8
 8006024:	617b      	str	r3, [r7, #20]
        break;
 8006026:	e002      	b.n	800602e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006028:	2304      	movs	r3, #4
 800602a:	617b      	str	r3, [r7, #20]
        break;
 800602c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800602e:	f7fe fb93 	bl	8004758 <HAL_GetTick>
 8006032:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006034:	e01b      	b.n	800606e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006036:	f7fe fb8f 	bl	8004758 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b05      	cmp	r3, #5
 8006042:	d914      	bls.n	800606e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	4013      	ands	r3, r2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00d      	beq.n	800606e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006056:	f043 0210 	orr.w	r2, r3, #16
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006062:	f043 0201 	orr.w	r2, r3, #1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e007      	b.n	800607e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	4013      	ands	r3, r2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1dc      	bne.n	8006036 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3720      	adds	r7, #32
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	000cdbff 	.word	0x000cdbff

0800608c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe fe59 	bl	8004d50 <LL_ADC_IsEnabled>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d16e      	bne.n	8006182 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	4b38      	ldr	r3, [pc, #224]	@ (800618c <ADC_Enable+0x100>)
 80060ac:	4013      	ands	r3, r2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00d      	beq.n	80060ce <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060b6:	f043 0210 	orr.w	r2, r3, #16
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060c2:	f043 0201 	orr.w	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e05a      	b.n	8006184 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fe fe14 	bl	8004d00 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80060d8:	f7fe fb3e 	bl	8004758 <HAL_GetTick>
 80060dc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006190 <ADC_Enable+0x104>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d004      	beq.n	80060f2 <ADC_Enable+0x66>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a29      	ldr	r2, [pc, #164]	@ (8006194 <ADC_Enable+0x108>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d101      	bne.n	80060f6 <ADC_Enable+0x6a>
 80060f2:	4b29      	ldr	r3, [pc, #164]	@ (8006198 <ADC_Enable+0x10c>)
 80060f4:	e000      	b.n	80060f8 <ADC_Enable+0x6c>
 80060f6:	4b29      	ldr	r3, [pc, #164]	@ (800619c <ADC_Enable+0x110>)
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe fda5 	bl	8004c48 <LL_ADC_GetMultimode>
 80060fe:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a23      	ldr	r2, [pc, #140]	@ (8006194 <ADC_Enable+0x108>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d002      	beq.n	8006110 <ADC_Enable+0x84>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	e000      	b.n	8006112 <ADC_Enable+0x86>
 8006110:	4b1f      	ldr	r3, [pc, #124]	@ (8006190 <ADC_Enable+0x104>)
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6812      	ldr	r2, [r2, #0]
 8006116:	4293      	cmp	r3, r2
 8006118:	d02c      	beq.n	8006174 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d130      	bne.n	8006182 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006120:	e028      	b.n	8006174 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fe12 	bl	8004d50 <LL_ADC_IsEnabled>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f7fe fde2 	bl	8004d00 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800613c:	f7fe fb0c 	bl	8004758 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d914      	bls.n	8006174 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b01      	cmp	r3, #1
 8006156:	d00d      	beq.n	8006174 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800615c:	f043 0210 	orr.w	r2, r3, #16
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006168:	f043 0201 	orr.w	r2, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e007      	b.n	8006184 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b01      	cmp	r3, #1
 8006180:	d1cf      	bne.n	8006122 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	8000003f 	.word	0x8000003f
 8006190:	40022000 	.word	0x40022000
 8006194:	40022100 	.word	0x40022100
 8006198:	40022300 	.word	0x40022300
 800619c:	58026300 	.word	0x58026300

080061a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe fde2 	bl	8004d76 <LL_ADC_IsDisableOngoing>
 80061b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe fdc9 	bl	8004d50 <LL_ADC_IsEnabled>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d047      	beq.n	8006254 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d144      	bne.n	8006254 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 030d 	and.w	r3, r3, #13
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d10c      	bne.n	80061f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe fda3 	bl	8004d28 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2203      	movs	r2, #3
 80061e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80061ea:	f7fe fab5 	bl	8004758 <HAL_GetTick>
 80061ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80061f0:	e029      	b.n	8006246 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061f6:	f043 0210 	orr.w	r2, r3, #16
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006202:	f043 0201 	orr.w	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e023      	b.n	8006256 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800620e:	f7fe faa3 	bl	8004758 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d914      	bls.n	8006246 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00d      	beq.n	8006246 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800622e:	f043 0210 	orr.w	r2, r3, #16
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800623a:	f043 0201 	orr.w	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e007      	b.n	8006256 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1dc      	bne.n	800620e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006270:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006274:	2b00      	cmp	r3, #0
 8006276:	d14b      	bne.n	8006310 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d021      	beq.n	80062d6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe fbee 	bl	8004a78 <LL_ADC_REG_IsTriggerSourceSWStart>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d032      	beq.n	8006308 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d12b      	bne.n	8006308 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d11f      	bne.n	8006308 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062cc:	f043 0201 	orr.w	r2, r3, #1
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	661a      	str	r2, [r3, #96]	@ 0x60
 80062d4:	e018      	b.n	8006308 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f003 0303 	and.w	r3, r3, #3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d111      	bne.n	8006308 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d105      	bne.n	8006308 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006300:	f043 0201 	orr.w	r2, r3, #1
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7fa fac7 	bl	800089c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800630e:	e00e      	b.n	800632e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff f91b 	bl	8005558 <HAL_ADC_ErrorCallback>
}
 8006322:	e004      	b.n	800632e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	4798      	blx	r3
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006342:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f7fa fa6b 	bl	8000820 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006364:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006370:	f043 0204 	orr.w	r2, r3, #4
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7ff f8ed 	bl	8005558 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a6c      	ldr	r2, [pc, #432]	@ (8006548 <ADC_ConfigureBoostMode+0x1c0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d004      	beq.n	80063a4 <ADC_ConfigureBoostMode+0x1c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a6b      	ldr	r2, [pc, #428]	@ (800654c <ADC_ConfigureBoostMode+0x1c4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d109      	bne.n	80063b8 <ADC_ConfigureBoostMode+0x30>
 80063a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006550 <ADC_ConfigureBoostMode+0x1c8>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bf14      	ite	ne
 80063b0:	2301      	movne	r3, #1
 80063b2:	2300      	moveq	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	e008      	b.n	80063ca <ADC_ConfigureBoostMode+0x42>
 80063b8:	4b66      	ldr	r3, [pc, #408]	@ (8006554 <ADC_ConfigureBoostMode+0x1cc>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bf14      	ite	ne
 80063c4:	2301      	movne	r3, #1
 80063c6:	2300      	moveq	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01c      	beq.n	8006408 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80063ce:	f005 fd3d 	bl	800be4c <HAL_RCC_GetHCLKFreq>
 80063d2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063dc:	d010      	beq.n	8006400 <ADC_ConfigureBoostMode+0x78>
 80063de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063e2:	d873      	bhi.n	80064cc <ADC_ConfigureBoostMode+0x144>
 80063e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063e8:	d002      	beq.n	80063f0 <ADC_ConfigureBoostMode+0x68>
 80063ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ee:	d16d      	bne.n	80064cc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	0c1b      	lsrs	r3, r3, #16
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fc:	60fb      	str	r3, [r7, #12]
        break;
 80063fe:	e068      	b.n	80064d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	089b      	lsrs	r3, r3, #2
 8006404:	60fb      	str	r3, [r7, #12]
        break;
 8006406:	e064      	b.n	80064d2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006408:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800640c:	f04f 0100 	mov.w	r1, #0
 8006410:	f006 ff18 	bl	800d244 <HAL_RCCEx_GetPeriphCLKFreq>
 8006414:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800641e:	d051      	beq.n	80064c4 <ADC_ConfigureBoostMode+0x13c>
 8006420:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006424:	d854      	bhi.n	80064d0 <ADC_ConfigureBoostMode+0x148>
 8006426:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800642a:	d047      	beq.n	80064bc <ADC_ConfigureBoostMode+0x134>
 800642c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006430:	d84e      	bhi.n	80064d0 <ADC_ConfigureBoostMode+0x148>
 8006432:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006436:	d03d      	beq.n	80064b4 <ADC_ConfigureBoostMode+0x12c>
 8006438:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800643c:	d848      	bhi.n	80064d0 <ADC_ConfigureBoostMode+0x148>
 800643e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006442:	d033      	beq.n	80064ac <ADC_ConfigureBoostMode+0x124>
 8006444:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006448:	d842      	bhi.n	80064d0 <ADC_ConfigureBoostMode+0x148>
 800644a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800644e:	d029      	beq.n	80064a4 <ADC_ConfigureBoostMode+0x11c>
 8006450:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006454:	d83c      	bhi.n	80064d0 <ADC_ConfigureBoostMode+0x148>
 8006456:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800645a:	d01a      	beq.n	8006492 <ADC_ConfigureBoostMode+0x10a>
 800645c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006460:	d836      	bhi.n	80064d0 <ADC_ConfigureBoostMode+0x148>
 8006462:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006466:	d014      	beq.n	8006492 <ADC_ConfigureBoostMode+0x10a>
 8006468:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800646c:	d830      	bhi.n	80064d0 <ADC_ConfigureBoostMode+0x148>
 800646e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006472:	d00e      	beq.n	8006492 <ADC_ConfigureBoostMode+0x10a>
 8006474:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006478:	d82a      	bhi.n	80064d0 <ADC_ConfigureBoostMode+0x148>
 800647a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800647e:	d008      	beq.n	8006492 <ADC_ConfigureBoostMode+0x10a>
 8006480:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006484:	d824      	bhi.n	80064d0 <ADC_ConfigureBoostMode+0x148>
 8006486:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800648a:	d002      	beq.n	8006492 <ADC_ConfigureBoostMode+0x10a>
 800648c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006490:	d11e      	bne.n	80064d0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	0c9b      	lsrs	r3, r3, #18
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a0:	60fb      	str	r3, [r7, #12]
        break;
 80064a2:	e016      	b.n	80064d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	091b      	lsrs	r3, r3, #4
 80064a8:	60fb      	str	r3, [r7, #12]
        break;
 80064aa:	e012      	b.n	80064d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	095b      	lsrs	r3, r3, #5
 80064b0:	60fb      	str	r3, [r7, #12]
        break;
 80064b2:	e00e      	b.n	80064d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	099b      	lsrs	r3, r3, #6
 80064b8:	60fb      	str	r3, [r7, #12]
        break;
 80064ba:	e00a      	b.n	80064d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	09db      	lsrs	r3, r3, #7
 80064c0:	60fb      	str	r3, [r7, #12]
        break;
 80064c2:	e006      	b.n	80064d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	0a1b      	lsrs	r3, r3, #8
 80064c8:	60fb      	str	r3, [r7, #12]
        break;
 80064ca:	e002      	b.n	80064d2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80064cc:	bf00      	nop
 80064ce:	e000      	b.n	80064d2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80064d0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	085b      	lsrs	r3, r3, #1
 80064d6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4a1f      	ldr	r2, [pc, #124]	@ (8006558 <ADC_ConfigureBoostMode+0x1d0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d808      	bhi.n	80064f2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80064ee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80064f0:	e025      	b.n	800653e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4a19      	ldr	r2, [pc, #100]	@ (800655c <ADC_ConfigureBoostMode+0x1d4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d80a      	bhi.n	8006510 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800650c:	609a      	str	r2, [r3, #8]
}
 800650e:	e016      	b.n	800653e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4a13      	ldr	r2, [pc, #76]	@ (8006560 <ADC_ConfigureBoostMode+0x1d8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d80a      	bhi.n	800652e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800652a:	609a      	str	r2, [r3, #8]
}
 800652c:	e007      	b.n	800653e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800653c:	609a      	str	r2, [r3, #8]
}
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40022000 	.word	0x40022000
 800654c:	40022100 	.word	0x40022100
 8006550:	40022300 	.word	0x40022300
 8006554:	58026300 	.word	0x58026300
 8006558:	005f5e10 	.word	0x005f5e10
 800655c:	00bebc20 	.word	0x00bebc20
 8006560:	017d7840 	.word	0x017d7840

08006564 <LL_ADC_IsEnabled>:
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <LL_ADC_IsEnabled+0x18>
 8006578:	2301      	movs	r3, #1
 800657a:	e000      	b.n	800657e <LL_ADC_IsEnabled+0x1a>
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <LL_ADC_REG_IsConversionOngoing>:
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 0304 	and.w	r3, r3, #4
 800659a:	2b04      	cmp	r3, #4
 800659c:	d101      	bne.n	80065a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80065b0:	b590      	push	{r4, r7, lr}
 80065b2:	b0a3      	sub	sp, #140	@ 0x8c
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e0c1      	b.n	8006752 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80065d6:	2300      	movs	r3, #0
 80065d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80065da:	2300      	movs	r3, #0
 80065dc:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a5e      	ldr	r2, [pc, #376]	@ (800675c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d102      	bne.n	80065ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80065e8:	4b5d      	ldr	r3, [pc, #372]	@ (8006760 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	e001      	b.n	80065f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10b      	bne.n	8006610 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065fc:	f043 0220 	orr.w	r2, r3, #32
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e0a0      	b.n	8006752 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff ffb9 	bl	800658a <LL_ADC_REG_IsConversionOngoing>
 8006618:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff ffb2 	bl	800658a <LL_ADC_REG_IsConversionOngoing>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	f040 8081 	bne.w	8006730 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800662e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006632:	2b00      	cmp	r3, #0
 8006634:	d17c      	bne.n	8006730 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a48      	ldr	r2, [pc, #288]	@ (800675c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d004      	beq.n	800664a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a46      	ldr	r2, [pc, #280]	@ (8006760 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d101      	bne.n	800664e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800664a:	4b46      	ldr	r3, [pc, #280]	@ (8006764 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800664c:	e000      	b.n	8006650 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800664e:	4b46      	ldr	r3, [pc, #280]	@ (8006768 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006650:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d039      	beq.n	80066ce <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800665a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	431a      	orrs	r2, r3
 8006668:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800666a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a3a      	ldr	r2, [pc, #232]	@ (800675c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d004      	beq.n	8006680 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a39      	ldr	r2, [pc, #228]	@ (8006760 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d10e      	bne.n	800669e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006680:	4836      	ldr	r0, [pc, #216]	@ (800675c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006682:	f7ff ff6f 	bl	8006564 <LL_ADC_IsEnabled>
 8006686:	4604      	mov	r4, r0
 8006688:	4835      	ldr	r0, [pc, #212]	@ (8006760 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800668a:	f7ff ff6b 	bl	8006564 <LL_ADC_IsEnabled>
 800668e:	4603      	mov	r3, r0
 8006690:	4323      	orrs	r3, r4
 8006692:	2b00      	cmp	r3, #0
 8006694:	bf0c      	ite	eq
 8006696:	2301      	moveq	r3, #1
 8006698:	2300      	movne	r3, #0
 800669a:	b2db      	uxtb	r3, r3
 800669c:	e008      	b.n	80066b0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800669e:	4833      	ldr	r0, [pc, #204]	@ (800676c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80066a0:	f7ff ff60 	bl	8006564 <LL_ADC_IsEnabled>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bf0c      	ite	eq
 80066aa:	2301      	moveq	r3, #1
 80066ac:	2300      	movne	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d047      	beq.n	8006744 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80066b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006770 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	6811      	ldr	r1, [r2, #0]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	6892      	ldr	r2, [r2, #8]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	431a      	orrs	r2, r3
 80066c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066ca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80066cc:	e03a      	b.n	8006744 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80066ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80066d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1f      	ldr	r2, [pc, #124]	@ (800675c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d004      	beq.n	80066ee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006760 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d10e      	bne.n	800670c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80066ee:	481b      	ldr	r0, [pc, #108]	@ (800675c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80066f0:	f7ff ff38 	bl	8006564 <LL_ADC_IsEnabled>
 80066f4:	4604      	mov	r4, r0
 80066f6:	481a      	ldr	r0, [pc, #104]	@ (8006760 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80066f8:	f7ff ff34 	bl	8006564 <LL_ADC_IsEnabled>
 80066fc:	4603      	mov	r3, r0
 80066fe:	4323      	orrs	r3, r4
 8006700:	2b00      	cmp	r3, #0
 8006702:	bf0c      	ite	eq
 8006704:	2301      	moveq	r3, #1
 8006706:	2300      	movne	r3, #0
 8006708:	b2db      	uxtb	r3, r3
 800670a:	e008      	b.n	800671e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800670c:	4817      	ldr	r0, [pc, #92]	@ (800676c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800670e:	f7ff ff29 	bl	8006564 <LL_ADC_IsEnabled>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	bf0c      	ite	eq
 8006718:	2301      	moveq	r3, #1
 800671a:	2300      	movne	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d010      	beq.n	8006744 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006722:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	4b12      	ldr	r3, [pc, #72]	@ (8006770 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006728:	4013      	ands	r3, r2
 800672a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800672c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800672e:	e009      	b.n	8006744 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006734:	f043 0220 	orr.w	r2, r3, #32
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8006742:	e000      	b.n	8006746 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006744:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800674e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8006752:	4618      	mov	r0, r3
 8006754:	378c      	adds	r7, #140	@ 0x8c
 8006756:	46bd      	mov	sp, r7
 8006758:	bd90      	pop	{r4, r7, pc}
 800675a:	bf00      	nop
 800675c:	40022000 	.word	0x40022000
 8006760:	40022100 	.word	0x40022100
 8006764:	40022300 	.word	0x40022300
 8006768:	58026300 	.word	0x58026300
 800676c:	58026000 	.word	0x58026000
 8006770:	fffff0e0 	.word	0xfffff0e0

08006774 <__NVIC_SetPriorityGrouping>:
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006784:	4b0b      	ldr	r3, [pc, #44]	@ (80067b4 <__NVIC_SetPriorityGrouping+0x40>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006790:	4013      	ands	r3, r2
 8006792:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800679c:	4b06      	ldr	r3, [pc, #24]	@ (80067b8 <__NVIC_SetPriorityGrouping+0x44>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067a2:	4a04      	ldr	r2, [pc, #16]	@ (80067b4 <__NVIC_SetPriorityGrouping+0x40>)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	60d3      	str	r3, [r2, #12]
}
 80067a8:	bf00      	nop
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	e000ed00 	.word	0xe000ed00
 80067b8:	05fa0000 	.word	0x05fa0000

080067bc <__NVIC_GetPriorityGrouping>:
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067c0:	4b04      	ldr	r3, [pc, #16]	@ (80067d4 <__NVIC_GetPriorityGrouping+0x18>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	f003 0307 	and.w	r3, r3, #7
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	e000ed00 	.word	0xe000ed00

080067d8 <__NVIC_EnableIRQ>:
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80067e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	db0b      	blt.n	8006802 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067ea:	88fb      	ldrh	r3, [r7, #6]
 80067ec:	f003 021f 	and.w	r2, r3, #31
 80067f0:	4907      	ldr	r1, [pc, #28]	@ (8006810 <__NVIC_EnableIRQ+0x38>)
 80067f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	2001      	movs	r0, #1
 80067fa:	fa00 f202 	lsl.w	r2, r0, r2
 80067fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	e000e100 	.word	0xe000e100

08006814 <__NVIC_DisableIRQ>:
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800681e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006822:	2b00      	cmp	r3, #0
 8006824:	db12      	blt.n	800684c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006826:	88fb      	ldrh	r3, [r7, #6]
 8006828:	f003 021f 	and.w	r2, r3, #31
 800682c:	490a      	ldr	r1, [pc, #40]	@ (8006858 <__NVIC_DisableIRQ+0x44>)
 800682e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006832:	095b      	lsrs	r3, r3, #5
 8006834:	2001      	movs	r0, #1
 8006836:	fa00 f202 	lsl.w	r2, r0, r2
 800683a:	3320      	adds	r3, #32
 800683c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006840:	f3bf 8f4f 	dsb	sy
}
 8006844:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006846:	f3bf 8f6f 	isb	sy
}
 800684a:	bf00      	nop
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	e000e100 	.word	0xe000e100

0800685c <__NVIC_SetPriority>:
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	6039      	str	r1, [r7, #0]
 8006866:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006868:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800686c:	2b00      	cmp	r3, #0
 800686e:	db0a      	blt.n	8006886 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	b2da      	uxtb	r2, r3
 8006874:	490c      	ldr	r1, [pc, #48]	@ (80068a8 <__NVIC_SetPriority+0x4c>)
 8006876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800687a:	0112      	lsls	r2, r2, #4
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	440b      	add	r3, r1
 8006880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006884:	e00a      	b.n	800689c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	b2da      	uxtb	r2, r3
 800688a:	4908      	ldr	r1, [pc, #32]	@ (80068ac <__NVIC_SetPriority+0x50>)
 800688c:	88fb      	ldrh	r3, [r7, #6]
 800688e:	f003 030f 	and.w	r3, r3, #15
 8006892:	3b04      	subs	r3, #4
 8006894:	0112      	lsls	r2, r2, #4
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	440b      	add	r3, r1
 800689a:	761a      	strb	r2, [r3, #24]
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	e000e100 	.word	0xe000e100
 80068ac:	e000ed00 	.word	0xe000ed00

080068b0 <NVIC_EncodePriority>:
{
 80068b0:	b480      	push	{r7}
 80068b2:	b089      	sub	sp, #36	@ 0x24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	f1c3 0307 	rsb	r3, r3, #7
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	bf28      	it	cs
 80068ce:	2304      	movcs	r3, #4
 80068d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	3304      	adds	r3, #4
 80068d6:	2b06      	cmp	r3, #6
 80068d8:	d902      	bls.n	80068e0 <NVIC_EncodePriority+0x30>
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	3b03      	subs	r3, #3
 80068de:	e000      	b.n	80068e2 <NVIC_EncodePriority+0x32>
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068e4:	f04f 32ff 	mov.w	r2, #4294967295
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	fa02 f303 	lsl.w	r3, r2, r3
 80068ee:	43da      	mvns	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	401a      	ands	r2, r3
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068f8:	f04f 31ff 	mov.w	r1, #4294967295
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006902:	43d9      	mvns	r1, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006908:	4313      	orrs	r3, r2
}
 800690a:	4618      	mov	r0, r3
 800690c:	3724      	adds	r7, #36	@ 0x24
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
	...

08006918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3b01      	subs	r3, #1
 8006924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006928:	d301      	bcc.n	800692e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800692a:	2301      	movs	r3, #1
 800692c:	e00f      	b.n	800694e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800692e:	4a0a      	ldr	r2, [pc, #40]	@ (8006958 <SysTick_Config+0x40>)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3b01      	subs	r3, #1
 8006934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006936:	210f      	movs	r1, #15
 8006938:	f04f 30ff 	mov.w	r0, #4294967295
 800693c:	f7ff ff8e 	bl	800685c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006940:	4b05      	ldr	r3, [pc, #20]	@ (8006958 <SysTick_Config+0x40>)
 8006942:	2200      	movs	r2, #0
 8006944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006946:	4b04      	ldr	r3, [pc, #16]	@ (8006958 <SysTick_Config+0x40>)
 8006948:	2207      	movs	r2, #7
 800694a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	e000e010 	.word	0xe000e010

0800695c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff ff05 	bl	8006774 <__NVIC_SetPriorityGrouping>
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b086      	sub	sp, #24
 8006976:	af00      	add	r7, sp, #0
 8006978:	4603      	mov	r3, r0
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
 800697e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006980:	f7ff ff1c 	bl	80067bc <__NVIC_GetPriorityGrouping>
 8006984:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	68b9      	ldr	r1, [r7, #8]
 800698a:	6978      	ldr	r0, [r7, #20]
 800698c:	f7ff ff90 	bl	80068b0 <NVIC_EncodePriority>
 8006990:	4602      	mov	r2, r0
 8006992:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006996:	4611      	mov	r1, r2
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff ff5f 	bl	800685c <__NVIC_SetPriority>
}
 800699e:	bf00      	nop
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b082      	sub	sp, #8
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	4603      	mov	r3, r0
 80069ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff ff0f 	bl	80067d8 <__NVIC_EnableIRQ>
}
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	4603      	mov	r3, r0
 80069ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80069cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff ff1f 	bl	8006814 <__NVIC_DisableIRQ>
}
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b082      	sub	sp, #8
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7ff ff96 	bl	8006918 <SysTick_Config>
 80069ec:	4603      	mov	r3, r0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e014      	b.n	8006a32 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	791b      	ldrb	r3, [r3, #4]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d105      	bne.n	8006a1e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7fc f803 	bl	8002a24 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a50:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01d      	beq.n	8006a98 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d018      	beq.n	8006a98 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2204      	movs	r2, #4
 8006a6a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f043 0201 	orr.w	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006a80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006a90:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f827 	bl	8006ae6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01d      	beq.n	8006ade <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d018      	beq.n	8006ade <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2204      	movs	r2, #4
 8006ab0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f043 0202 	orr.w	r2, r3, #2
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006ac6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8006ad6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f955 	bl	8006d88 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08a      	sub	sp, #40	@ 0x28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <HAL_DAC_ConfigChannel+0x1e>
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e12d      	b.n	8006d7a <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	795b      	ldrb	r3, [r3, #5]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d101      	bne.n	8006b30 <HAL_DAC_ConfigChannel+0x34>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e124      	b.n	8006d7a <HAL_DAC_ConfigChannel+0x27e>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2201      	movs	r2, #1
 8006b34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d17a      	bne.n	8006c3a <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006b44:	f7fd fe08 	bl	8004758 <HAL_GetTick>
 8006b48:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d13d      	bne.n	8006bcc <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006b50:	e018      	b.n	8006b84 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006b52:	f7fd fe01 	bl	8004758 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d911      	bls.n	8006b84 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b66:	4b87      	ldr	r3, [pc, #540]	@ (8006d84 <HAL_DAC_ConfigChannel+0x288>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f043 0208 	orr.w	r2, r3, #8
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2203      	movs	r2, #3
 8006b7e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e0fa      	b.n	8006d7a <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b8a:	4b7e      	ldr	r3, [pc, #504]	@ (8006d84 <HAL_DAC_ConfigChannel+0x288>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1df      	bne.n	8006b52 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	6992      	ldr	r2, [r2, #24]
 8006b9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8006b9c:	e020      	b.n	8006be0 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006b9e:	f7fd fddb 	bl	8004758 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d90f      	bls.n	8006bcc <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	da0a      	bge.n	8006bcc <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f043 0208 	orr.w	r2, r3, #8
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2203      	movs	r2, #3
 8006bc6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e0d6      	b.n	8006d7a <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	dbe3      	blt.n	8006b9e <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	6992      	ldr	r2, [r2, #24]
 8006bde:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f003 0310 	and.w	r3, r3, #16
 8006bec:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	ea02 0103 	and.w	r1, r2, r3
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	69da      	ldr	r2, [r3, #28]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f003 0310 	and.w	r3, r3, #16
 8006c04:	409a      	lsls	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f003 0310 	and.w	r3, r3, #16
 8006c1a:	21ff      	movs	r1, #255	@ 0xff
 8006c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c20:	43db      	mvns	r3, r3
 8006c22:	ea02 0103 	and.w	r1, r2, r3
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	409a      	lsls	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d11d      	bne.n	8006c7e <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c48:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	221f      	movs	r2, #31
 8006c52:	fa02 f303 	lsl.w	r3, r2, r3
 8006c56:	43db      	mvns	r3, r3
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f003 0310 	and.w	r3, r3, #16
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c84:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f003 0310 	and.w	r3, r3, #16
 8006c8c:	2207      	movs	r2, #7
 8006c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c92:	43db      	mvns	r3, r3
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	4013      	ands	r3, r2
 8006c98:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d102      	bne.n	8006ca8 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ca6:	e00f      	b.n	8006cc8 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d102      	bne.n	8006cb6 <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cb4:	e008      	b.n	8006cc8 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d102      	bne.n	8006cc4 <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cc2:	e001      	b.n	8006cc8 <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f003 0310 	and.w	r3, r3, #16
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6819      	ldr	r1, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f003 0310 	and.w	r3, r3, #16
 8006cfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006d02:	fa02 f303 	lsl.w	r3, r2, r3
 8006d06:	43da      	mvns	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	400a      	ands	r2, r1
 8006d0e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f003 0310 	and.w	r3, r3, #16
 8006d1e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006d22:	fa02 f303 	lsl.w	r3, r2, r3
 8006d26:	43db      	mvns	r3, r3
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6819      	ldr	r1, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f003 0310 	and.w	r3, r3, #16
 8006d5a:	22c0      	movs	r2, #192	@ 0xc0
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	43da      	mvns	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	400a      	ands	r2, r1
 8006d68:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006d76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3728      	adds	r7, #40	@ 0x28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20008000 	.word	0x20008000

08006d88 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006da4:	f7fd fcd8 	bl	8004758 <HAL_GetTick>
 8006da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e312      	b.n	80073da <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a66      	ldr	r2, [pc, #408]	@ (8006f54 <HAL_DMA_Init+0x1b8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d04a      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a65      	ldr	r2, [pc, #404]	@ (8006f58 <HAL_DMA_Init+0x1bc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d045      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a63      	ldr	r2, [pc, #396]	@ (8006f5c <HAL_DMA_Init+0x1c0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d040      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a62      	ldr	r2, [pc, #392]	@ (8006f60 <HAL_DMA_Init+0x1c4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d03b      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a60      	ldr	r2, [pc, #384]	@ (8006f64 <HAL_DMA_Init+0x1c8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d036      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a5f      	ldr	r2, [pc, #380]	@ (8006f68 <HAL_DMA_Init+0x1cc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d031      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a5d      	ldr	r2, [pc, #372]	@ (8006f6c <HAL_DMA_Init+0x1d0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d02c      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a5c      	ldr	r2, [pc, #368]	@ (8006f70 <HAL_DMA_Init+0x1d4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d027      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a5a      	ldr	r2, [pc, #360]	@ (8006f74 <HAL_DMA_Init+0x1d8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d022      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a59      	ldr	r2, [pc, #356]	@ (8006f78 <HAL_DMA_Init+0x1dc>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d01d      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a57      	ldr	r2, [pc, #348]	@ (8006f7c <HAL_DMA_Init+0x1e0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d018      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a56      	ldr	r2, [pc, #344]	@ (8006f80 <HAL_DMA_Init+0x1e4>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d013      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a54      	ldr	r2, [pc, #336]	@ (8006f84 <HAL_DMA_Init+0x1e8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00e      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a53      	ldr	r2, [pc, #332]	@ (8006f88 <HAL_DMA_Init+0x1ec>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d009      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a51      	ldr	r2, [pc, #324]	@ (8006f8c <HAL_DMA_Init+0x1f0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d004      	beq.n	8006e54 <HAL_DMA_Init+0xb8>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a50      	ldr	r2, [pc, #320]	@ (8006f90 <HAL_DMA_Init+0x1f4>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d101      	bne.n	8006e58 <HAL_DMA_Init+0xbc>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e000      	b.n	8006e5a <HAL_DMA_Init+0xbe>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 813c 	beq.w	80070d8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a37      	ldr	r2, [pc, #220]	@ (8006f54 <HAL_DMA_Init+0x1b8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d04a      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a36      	ldr	r2, [pc, #216]	@ (8006f58 <HAL_DMA_Init+0x1bc>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d045      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a34      	ldr	r2, [pc, #208]	@ (8006f5c <HAL_DMA_Init+0x1c0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d040      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a33      	ldr	r2, [pc, #204]	@ (8006f60 <HAL_DMA_Init+0x1c4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d03b      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a31      	ldr	r2, [pc, #196]	@ (8006f64 <HAL_DMA_Init+0x1c8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d036      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a30      	ldr	r2, [pc, #192]	@ (8006f68 <HAL_DMA_Init+0x1cc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d031      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a2e      	ldr	r2, [pc, #184]	@ (8006f6c <HAL_DMA_Init+0x1d0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d02c      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a2d      	ldr	r2, [pc, #180]	@ (8006f70 <HAL_DMA_Init+0x1d4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d027      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8006f74 <HAL_DMA_Init+0x1d8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d022      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a2a      	ldr	r2, [pc, #168]	@ (8006f78 <HAL_DMA_Init+0x1dc>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d01d      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a28      	ldr	r2, [pc, #160]	@ (8006f7c <HAL_DMA_Init+0x1e0>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d018      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a27      	ldr	r2, [pc, #156]	@ (8006f80 <HAL_DMA_Init+0x1e4>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d013      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a25      	ldr	r2, [pc, #148]	@ (8006f84 <HAL_DMA_Init+0x1e8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00e      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a24      	ldr	r2, [pc, #144]	@ (8006f88 <HAL_DMA_Init+0x1ec>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d009      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a22      	ldr	r2, [pc, #136]	@ (8006f8c <HAL_DMA_Init+0x1f0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d004      	beq.n	8006f10 <HAL_DMA_Init+0x174>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a21      	ldr	r2, [pc, #132]	@ (8006f90 <HAL_DMA_Init+0x1f4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d108      	bne.n	8006f22 <HAL_DMA_Init+0x186>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0201 	bic.w	r2, r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	e007      	b.n	8006f32 <HAL_DMA_Init+0x196>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0201 	bic.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f32:	e02f      	b.n	8006f94 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f34:	f7fd fc10 	bl	8004758 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b05      	cmp	r3, #5
 8006f40:	d928      	bls.n	8006f94 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e242      	b.n	80073da <HAL_DMA_Init+0x63e>
 8006f54:	40020010 	.word	0x40020010
 8006f58:	40020028 	.word	0x40020028
 8006f5c:	40020040 	.word	0x40020040
 8006f60:	40020058 	.word	0x40020058
 8006f64:	40020070 	.word	0x40020070
 8006f68:	40020088 	.word	0x40020088
 8006f6c:	400200a0 	.word	0x400200a0
 8006f70:	400200b8 	.word	0x400200b8
 8006f74:	40020410 	.word	0x40020410
 8006f78:	40020428 	.word	0x40020428
 8006f7c:	40020440 	.word	0x40020440
 8006f80:	40020458 	.word	0x40020458
 8006f84:	40020470 	.word	0x40020470
 8006f88:	40020488 	.word	0x40020488
 8006f8c:	400204a0 	.word	0x400204a0
 8006f90:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1c8      	bne.n	8006f34 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4b83      	ldr	r3, [pc, #524]	@ (80071bc <HAL_DMA_Init+0x420>)
 8006fae:	4013      	ands	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006fba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fc6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fd2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	d107      	bne.n	8006ff8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b28      	cmp	r3, #40	@ 0x28
 8006ffe:	d903      	bls.n	8007008 <HAL_DMA_Init+0x26c>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2b2e      	cmp	r3, #46	@ 0x2e
 8007006:	d91f      	bls.n	8007048 <HAL_DMA_Init+0x2ac>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b3e      	cmp	r3, #62	@ 0x3e
 800700e:	d903      	bls.n	8007018 <HAL_DMA_Init+0x27c>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b42      	cmp	r3, #66	@ 0x42
 8007016:	d917      	bls.n	8007048 <HAL_DMA_Init+0x2ac>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b46      	cmp	r3, #70	@ 0x46
 800701e:	d903      	bls.n	8007028 <HAL_DMA_Init+0x28c>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2b48      	cmp	r3, #72	@ 0x48
 8007026:	d90f      	bls.n	8007048 <HAL_DMA_Init+0x2ac>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	2b4e      	cmp	r3, #78	@ 0x4e
 800702e:	d903      	bls.n	8007038 <HAL_DMA_Init+0x29c>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b52      	cmp	r3, #82	@ 0x52
 8007036:	d907      	bls.n	8007048 <HAL_DMA_Init+0x2ac>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b73      	cmp	r3, #115	@ 0x73
 800703e:	d905      	bls.n	800704c <HAL_DMA_Init+0x2b0>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2b77      	cmp	r3, #119	@ 0x77
 8007046:	d801      	bhi.n	800704c <HAL_DMA_Init+0x2b0>
 8007048:	2301      	movs	r3, #1
 800704a:	e000      	b.n	800704e <HAL_DMA_Init+0x2b2>
 800704c:	2300      	movs	r3, #0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007058:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f023 0307 	bic.w	r3, r3, #7
 8007070:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007080:	2b04      	cmp	r3, #4
 8007082:	d117      	bne.n	80070b4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00e      	beq.n	80070b4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f002 f8e8 	bl	800926c <DMA_CheckFifoParam>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d008      	beq.n	80070b4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2240      	movs	r2, #64	@ 0x40
 80070a6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e192      	b.n	80073da <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f002 f823 	bl	8009108 <DMA_CalcBaseAndBitshift>
 80070c2:	4603      	mov	r3, r0
 80070c4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ca:	f003 031f 	and.w	r3, r3, #31
 80070ce:	223f      	movs	r2, #63	@ 0x3f
 80070d0:	409a      	lsls	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	609a      	str	r2, [r3, #8]
 80070d6:	e0c8      	b.n	800726a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a38      	ldr	r2, [pc, #224]	@ (80071c0 <HAL_DMA_Init+0x424>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d022      	beq.n	8007128 <HAL_DMA_Init+0x38c>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a37      	ldr	r2, [pc, #220]	@ (80071c4 <HAL_DMA_Init+0x428>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d01d      	beq.n	8007128 <HAL_DMA_Init+0x38c>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a35      	ldr	r2, [pc, #212]	@ (80071c8 <HAL_DMA_Init+0x42c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d018      	beq.n	8007128 <HAL_DMA_Init+0x38c>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a34      	ldr	r2, [pc, #208]	@ (80071cc <HAL_DMA_Init+0x430>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d013      	beq.n	8007128 <HAL_DMA_Init+0x38c>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a32      	ldr	r2, [pc, #200]	@ (80071d0 <HAL_DMA_Init+0x434>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00e      	beq.n	8007128 <HAL_DMA_Init+0x38c>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a31      	ldr	r2, [pc, #196]	@ (80071d4 <HAL_DMA_Init+0x438>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d009      	beq.n	8007128 <HAL_DMA_Init+0x38c>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a2f      	ldr	r2, [pc, #188]	@ (80071d8 <HAL_DMA_Init+0x43c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d004      	beq.n	8007128 <HAL_DMA_Init+0x38c>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a2e      	ldr	r2, [pc, #184]	@ (80071dc <HAL_DMA_Init+0x440>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d101      	bne.n	800712c <HAL_DMA_Init+0x390>
 8007128:	2301      	movs	r3, #1
 800712a:	e000      	b.n	800712e <HAL_DMA_Init+0x392>
 800712c:	2300      	movs	r3, #0
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 8092 	beq.w	8007258 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a21      	ldr	r2, [pc, #132]	@ (80071c0 <HAL_DMA_Init+0x424>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d021      	beq.n	8007182 <HAL_DMA_Init+0x3e6>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a20      	ldr	r2, [pc, #128]	@ (80071c4 <HAL_DMA_Init+0x428>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d01c      	beq.n	8007182 <HAL_DMA_Init+0x3e6>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a1e      	ldr	r2, [pc, #120]	@ (80071c8 <HAL_DMA_Init+0x42c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d017      	beq.n	8007182 <HAL_DMA_Init+0x3e6>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a1d      	ldr	r2, [pc, #116]	@ (80071cc <HAL_DMA_Init+0x430>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d012      	beq.n	8007182 <HAL_DMA_Init+0x3e6>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a1b      	ldr	r2, [pc, #108]	@ (80071d0 <HAL_DMA_Init+0x434>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00d      	beq.n	8007182 <HAL_DMA_Init+0x3e6>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a1a      	ldr	r2, [pc, #104]	@ (80071d4 <HAL_DMA_Init+0x438>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d008      	beq.n	8007182 <HAL_DMA_Init+0x3e6>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a18      	ldr	r2, [pc, #96]	@ (80071d8 <HAL_DMA_Init+0x43c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d003      	beq.n	8007182 <HAL_DMA_Init+0x3e6>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a17      	ldr	r2, [pc, #92]	@ (80071dc <HAL_DMA_Init+0x440>)
 8007180:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2202      	movs	r2, #2
 8007186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	4b10      	ldr	r3, [pc, #64]	@ (80071e0 <HAL_DMA_Init+0x444>)
 800719e:	4013      	ands	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b40      	cmp	r3, #64	@ 0x40
 80071a8:	d01c      	beq.n	80071e4 <HAL_DMA_Init+0x448>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	2b80      	cmp	r3, #128	@ 0x80
 80071b0:	d102      	bne.n	80071b8 <HAL_DMA_Init+0x41c>
 80071b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80071b6:	e016      	b.n	80071e6 <HAL_DMA_Init+0x44a>
 80071b8:	2300      	movs	r3, #0
 80071ba:	e014      	b.n	80071e6 <HAL_DMA_Init+0x44a>
 80071bc:	fe10803f 	.word	0xfe10803f
 80071c0:	58025408 	.word	0x58025408
 80071c4:	5802541c 	.word	0x5802541c
 80071c8:	58025430 	.word	0x58025430
 80071cc:	58025444 	.word	0x58025444
 80071d0:	58025458 	.word	0x58025458
 80071d4:	5802546c 	.word	0x5802546c
 80071d8:	58025480 	.word	0x58025480
 80071dc:	58025494 	.word	0x58025494
 80071e0:	fffe000f 	.word	0xfffe000f
 80071e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68d2      	ldr	r2, [r2, #12]
 80071ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80071ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80071f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80071fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007204:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800720c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007214:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	4b6e      	ldr	r3, [pc, #440]	@ (80073e4 <HAL_DMA_Init+0x648>)
 800722c:	4413      	add	r3, r2
 800722e:	4a6e      	ldr	r2, [pc, #440]	@ (80073e8 <HAL_DMA_Init+0x64c>)
 8007230:	fba2 2303 	umull	r2, r3, r2, r3
 8007234:	091b      	lsrs	r3, r3, #4
 8007236:	009a      	lsls	r2, r3, #2
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 ff63 	bl	8009108 <DMA_CalcBaseAndBitshift>
 8007242:	4603      	mov	r3, r0
 8007244:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800724a:	f003 031f 	and.w	r3, r3, #31
 800724e:	2201      	movs	r2, #1
 8007250:	409a      	lsls	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]
 8007256:	e008      	b.n	800726a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2240      	movs	r2, #64	@ 0x40
 800725c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2203      	movs	r2, #3
 8007262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e0b7      	b.n	80073da <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a5f      	ldr	r2, [pc, #380]	@ (80073ec <HAL_DMA_Init+0x650>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d072      	beq.n	800735a <HAL_DMA_Init+0x5be>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a5d      	ldr	r2, [pc, #372]	@ (80073f0 <HAL_DMA_Init+0x654>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d06d      	beq.n	800735a <HAL_DMA_Init+0x5be>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a5c      	ldr	r2, [pc, #368]	@ (80073f4 <HAL_DMA_Init+0x658>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d068      	beq.n	800735a <HAL_DMA_Init+0x5be>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a5a      	ldr	r2, [pc, #360]	@ (80073f8 <HAL_DMA_Init+0x65c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d063      	beq.n	800735a <HAL_DMA_Init+0x5be>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a59      	ldr	r2, [pc, #356]	@ (80073fc <HAL_DMA_Init+0x660>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d05e      	beq.n	800735a <HAL_DMA_Init+0x5be>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a57      	ldr	r2, [pc, #348]	@ (8007400 <HAL_DMA_Init+0x664>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d059      	beq.n	800735a <HAL_DMA_Init+0x5be>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a56      	ldr	r2, [pc, #344]	@ (8007404 <HAL_DMA_Init+0x668>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d054      	beq.n	800735a <HAL_DMA_Init+0x5be>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a54      	ldr	r2, [pc, #336]	@ (8007408 <HAL_DMA_Init+0x66c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d04f      	beq.n	800735a <HAL_DMA_Init+0x5be>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a53      	ldr	r2, [pc, #332]	@ (800740c <HAL_DMA_Init+0x670>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d04a      	beq.n	800735a <HAL_DMA_Init+0x5be>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a51      	ldr	r2, [pc, #324]	@ (8007410 <HAL_DMA_Init+0x674>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d045      	beq.n	800735a <HAL_DMA_Init+0x5be>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a50      	ldr	r2, [pc, #320]	@ (8007414 <HAL_DMA_Init+0x678>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d040      	beq.n	800735a <HAL_DMA_Init+0x5be>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a4e      	ldr	r2, [pc, #312]	@ (8007418 <HAL_DMA_Init+0x67c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d03b      	beq.n	800735a <HAL_DMA_Init+0x5be>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a4d      	ldr	r2, [pc, #308]	@ (800741c <HAL_DMA_Init+0x680>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d036      	beq.n	800735a <HAL_DMA_Init+0x5be>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a4b      	ldr	r2, [pc, #300]	@ (8007420 <HAL_DMA_Init+0x684>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d031      	beq.n	800735a <HAL_DMA_Init+0x5be>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a4a      	ldr	r2, [pc, #296]	@ (8007424 <HAL_DMA_Init+0x688>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d02c      	beq.n	800735a <HAL_DMA_Init+0x5be>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a48      	ldr	r2, [pc, #288]	@ (8007428 <HAL_DMA_Init+0x68c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d027      	beq.n	800735a <HAL_DMA_Init+0x5be>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a47      	ldr	r2, [pc, #284]	@ (800742c <HAL_DMA_Init+0x690>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d022      	beq.n	800735a <HAL_DMA_Init+0x5be>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a45      	ldr	r2, [pc, #276]	@ (8007430 <HAL_DMA_Init+0x694>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d01d      	beq.n	800735a <HAL_DMA_Init+0x5be>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a44      	ldr	r2, [pc, #272]	@ (8007434 <HAL_DMA_Init+0x698>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d018      	beq.n	800735a <HAL_DMA_Init+0x5be>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a42      	ldr	r2, [pc, #264]	@ (8007438 <HAL_DMA_Init+0x69c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d013      	beq.n	800735a <HAL_DMA_Init+0x5be>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a41      	ldr	r2, [pc, #260]	@ (800743c <HAL_DMA_Init+0x6a0>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00e      	beq.n	800735a <HAL_DMA_Init+0x5be>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a3f      	ldr	r2, [pc, #252]	@ (8007440 <HAL_DMA_Init+0x6a4>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d009      	beq.n	800735a <HAL_DMA_Init+0x5be>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a3e      	ldr	r2, [pc, #248]	@ (8007444 <HAL_DMA_Init+0x6a8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d004      	beq.n	800735a <HAL_DMA_Init+0x5be>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a3c      	ldr	r2, [pc, #240]	@ (8007448 <HAL_DMA_Init+0x6ac>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d101      	bne.n	800735e <HAL_DMA_Init+0x5c2>
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <HAL_DMA_Init+0x5c4>
 800735e:	2300      	movs	r3, #0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d032      	beq.n	80073ca <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 fffd 	bl	8009364 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	2b80      	cmp	r3, #128	@ 0x80
 8007370:	d102      	bne.n	8007378 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800738c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d010      	beq.n	80073b8 <HAL_DMA_Init+0x61c>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2b08      	cmp	r3, #8
 800739c:	d80c      	bhi.n	80073b8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f002 f87a 	bl	8009498 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80073b4:	605a      	str	r2, [r3, #4]
 80073b6:	e008      	b.n	80073ca <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	a7fdabf8 	.word	0xa7fdabf8
 80073e8:	cccccccd 	.word	0xcccccccd
 80073ec:	40020010 	.word	0x40020010
 80073f0:	40020028 	.word	0x40020028
 80073f4:	40020040 	.word	0x40020040
 80073f8:	40020058 	.word	0x40020058
 80073fc:	40020070 	.word	0x40020070
 8007400:	40020088 	.word	0x40020088
 8007404:	400200a0 	.word	0x400200a0
 8007408:	400200b8 	.word	0x400200b8
 800740c:	40020410 	.word	0x40020410
 8007410:	40020428 	.word	0x40020428
 8007414:	40020440 	.word	0x40020440
 8007418:	40020458 	.word	0x40020458
 800741c:	40020470 	.word	0x40020470
 8007420:	40020488 	.word	0x40020488
 8007424:	400204a0 	.word	0x400204a0
 8007428:	400204b8 	.word	0x400204b8
 800742c:	58025408 	.word	0x58025408
 8007430:	5802541c 	.word	0x5802541c
 8007434:	58025430 	.word	0x58025430
 8007438:	58025444 	.word	0x58025444
 800743c:	58025458 	.word	0x58025458
 8007440:	5802546c 	.word	0x5802546c
 8007444:	58025480 	.word	0x58025480
 8007448:	58025494 	.word	0x58025494

0800744c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e226      	b.n	80078b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800746e:	2b01      	cmp	r3, #1
 8007470:	d101      	bne.n	8007476 <HAL_DMA_Start_IT+0x2a>
 8007472:	2302      	movs	r3, #2
 8007474:	e21f      	b.n	80078b6 <HAL_DMA_Start_IT+0x46a>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b01      	cmp	r3, #1
 8007488:	f040 820a 	bne.w	80078a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a68      	ldr	r2, [pc, #416]	@ (8007640 <HAL_DMA_Start_IT+0x1f4>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d04a      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a66      	ldr	r2, [pc, #408]	@ (8007644 <HAL_DMA_Start_IT+0x1f8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d045      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a65      	ldr	r2, [pc, #404]	@ (8007648 <HAL_DMA_Start_IT+0x1fc>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d040      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a63      	ldr	r2, [pc, #396]	@ (800764c <HAL_DMA_Start_IT+0x200>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d03b      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a62      	ldr	r2, [pc, #392]	@ (8007650 <HAL_DMA_Start_IT+0x204>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d036      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a60      	ldr	r2, [pc, #384]	@ (8007654 <HAL_DMA_Start_IT+0x208>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d031      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a5f      	ldr	r2, [pc, #380]	@ (8007658 <HAL_DMA_Start_IT+0x20c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d02c      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a5d      	ldr	r2, [pc, #372]	@ (800765c <HAL_DMA_Start_IT+0x210>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d027      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a5c      	ldr	r2, [pc, #368]	@ (8007660 <HAL_DMA_Start_IT+0x214>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d022      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a5a      	ldr	r2, [pc, #360]	@ (8007664 <HAL_DMA_Start_IT+0x218>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d01d      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a59      	ldr	r2, [pc, #356]	@ (8007668 <HAL_DMA_Start_IT+0x21c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d018      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a57      	ldr	r2, [pc, #348]	@ (800766c <HAL_DMA_Start_IT+0x220>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d013      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a56      	ldr	r2, [pc, #344]	@ (8007670 <HAL_DMA_Start_IT+0x224>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d00e      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a54      	ldr	r2, [pc, #336]	@ (8007674 <HAL_DMA_Start_IT+0x228>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d009      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a53      	ldr	r2, [pc, #332]	@ (8007678 <HAL_DMA_Start_IT+0x22c>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d004      	beq.n	800753a <HAL_DMA_Start_IT+0xee>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a51      	ldr	r2, [pc, #324]	@ (800767c <HAL_DMA_Start_IT+0x230>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d108      	bne.n	800754c <HAL_DMA_Start_IT+0x100>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 0201 	bic.w	r2, r2, #1
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	e007      	b.n	800755c <HAL_DMA_Start_IT+0x110>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0201 	bic.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f001 fc24 	bl	8008db0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a34      	ldr	r2, [pc, #208]	@ (8007640 <HAL_DMA_Start_IT+0x1f4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d04a      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a33      	ldr	r2, [pc, #204]	@ (8007644 <HAL_DMA_Start_IT+0x1f8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d045      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a31      	ldr	r2, [pc, #196]	@ (8007648 <HAL_DMA_Start_IT+0x1fc>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d040      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a30      	ldr	r2, [pc, #192]	@ (800764c <HAL_DMA_Start_IT+0x200>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d03b      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a2e      	ldr	r2, [pc, #184]	@ (8007650 <HAL_DMA_Start_IT+0x204>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d036      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a2d      	ldr	r2, [pc, #180]	@ (8007654 <HAL_DMA_Start_IT+0x208>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d031      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a2b      	ldr	r2, [pc, #172]	@ (8007658 <HAL_DMA_Start_IT+0x20c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d02c      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a2a      	ldr	r2, [pc, #168]	@ (800765c <HAL_DMA_Start_IT+0x210>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d027      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a28      	ldr	r2, [pc, #160]	@ (8007660 <HAL_DMA_Start_IT+0x214>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d022      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a27      	ldr	r2, [pc, #156]	@ (8007664 <HAL_DMA_Start_IT+0x218>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d01d      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a25      	ldr	r2, [pc, #148]	@ (8007668 <HAL_DMA_Start_IT+0x21c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d018      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a24      	ldr	r2, [pc, #144]	@ (800766c <HAL_DMA_Start_IT+0x220>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d013      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a22      	ldr	r2, [pc, #136]	@ (8007670 <HAL_DMA_Start_IT+0x224>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d00e      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a21      	ldr	r2, [pc, #132]	@ (8007674 <HAL_DMA_Start_IT+0x228>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d009      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007678 <HAL_DMA_Start_IT+0x22c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d004      	beq.n	8007608 <HAL_DMA_Start_IT+0x1bc>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1e      	ldr	r2, [pc, #120]	@ (800767c <HAL_DMA_Start_IT+0x230>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d101      	bne.n	800760c <HAL_DMA_Start_IT+0x1c0>
 8007608:	2301      	movs	r3, #1
 800760a:	e000      	b.n	800760e <HAL_DMA_Start_IT+0x1c2>
 800760c:	2300      	movs	r3, #0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d036      	beq.n	8007680 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f023 021e 	bic.w	r2, r3, #30
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f042 0216 	orr.w	r2, r2, #22
 8007624:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762a:	2b00      	cmp	r3, #0
 800762c:	d03e      	beq.n	80076ac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f042 0208 	orr.w	r2, r2, #8
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	e035      	b.n	80076ac <HAL_DMA_Start_IT+0x260>
 8007640:	40020010 	.word	0x40020010
 8007644:	40020028 	.word	0x40020028
 8007648:	40020040 	.word	0x40020040
 800764c:	40020058 	.word	0x40020058
 8007650:	40020070 	.word	0x40020070
 8007654:	40020088 	.word	0x40020088
 8007658:	400200a0 	.word	0x400200a0
 800765c:	400200b8 	.word	0x400200b8
 8007660:	40020410 	.word	0x40020410
 8007664:	40020428 	.word	0x40020428
 8007668:	40020440 	.word	0x40020440
 800766c:	40020458 	.word	0x40020458
 8007670:	40020470 	.word	0x40020470
 8007674:	40020488 	.word	0x40020488
 8007678:	400204a0 	.word	0x400204a0
 800767c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f023 020e 	bic.w	r2, r3, #14
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 020a 	orr.w	r2, r2, #10
 8007692:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0204 	orr.w	r2, r2, #4
 80076aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a83      	ldr	r2, [pc, #524]	@ (80078c0 <HAL_DMA_Start_IT+0x474>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d072      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a82      	ldr	r2, [pc, #520]	@ (80078c4 <HAL_DMA_Start_IT+0x478>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d06d      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a80      	ldr	r2, [pc, #512]	@ (80078c8 <HAL_DMA_Start_IT+0x47c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d068      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a7f      	ldr	r2, [pc, #508]	@ (80078cc <HAL_DMA_Start_IT+0x480>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d063      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a7d      	ldr	r2, [pc, #500]	@ (80078d0 <HAL_DMA_Start_IT+0x484>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d05e      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a7c      	ldr	r2, [pc, #496]	@ (80078d4 <HAL_DMA_Start_IT+0x488>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d059      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a7a      	ldr	r2, [pc, #488]	@ (80078d8 <HAL_DMA_Start_IT+0x48c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d054      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a79      	ldr	r2, [pc, #484]	@ (80078dc <HAL_DMA_Start_IT+0x490>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d04f      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a77      	ldr	r2, [pc, #476]	@ (80078e0 <HAL_DMA_Start_IT+0x494>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d04a      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a76      	ldr	r2, [pc, #472]	@ (80078e4 <HAL_DMA_Start_IT+0x498>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d045      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a74      	ldr	r2, [pc, #464]	@ (80078e8 <HAL_DMA_Start_IT+0x49c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d040      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a73      	ldr	r2, [pc, #460]	@ (80078ec <HAL_DMA_Start_IT+0x4a0>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d03b      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a71      	ldr	r2, [pc, #452]	@ (80078f0 <HAL_DMA_Start_IT+0x4a4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d036      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a70      	ldr	r2, [pc, #448]	@ (80078f4 <HAL_DMA_Start_IT+0x4a8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d031      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a6e      	ldr	r2, [pc, #440]	@ (80078f8 <HAL_DMA_Start_IT+0x4ac>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d02c      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a6d      	ldr	r2, [pc, #436]	@ (80078fc <HAL_DMA_Start_IT+0x4b0>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d027      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a6b      	ldr	r2, [pc, #428]	@ (8007900 <HAL_DMA_Start_IT+0x4b4>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d022      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a6a      	ldr	r2, [pc, #424]	@ (8007904 <HAL_DMA_Start_IT+0x4b8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d01d      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a68      	ldr	r2, [pc, #416]	@ (8007908 <HAL_DMA_Start_IT+0x4bc>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d018      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a67      	ldr	r2, [pc, #412]	@ (800790c <HAL_DMA_Start_IT+0x4c0>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d013      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a65      	ldr	r2, [pc, #404]	@ (8007910 <HAL_DMA_Start_IT+0x4c4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d00e      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a64      	ldr	r2, [pc, #400]	@ (8007914 <HAL_DMA_Start_IT+0x4c8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d009      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a62      	ldr	r2, [pc, #392]	@ (8007918 <HAL_DMA_Start_IT+0x4cc>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d004      	beq.n	800779c <HAL_DMA_Start_IT+0x350>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a61      	ldr	r2, [pc, #388]	@ (800791c <HAL_DMA_Start_IT+0x4d0>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d101      	bne.n	80077a0 <HAL_DMA_Start_IT+0x354>
 800779c:	2301      	movs	r3, #1
 800779e:	e000      	b.n	80077a2 <HAL_DMA_Start_IT+0x356>
 80077a0:	2300      	movs	r3, #0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d01a      	beq.n	80077dc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d007      	beq.n	80077dc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a37      	ldr	r2, [pc, #220]	@ (80078c0 <HAL_DMA_Start_IT+0x474>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d04a      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a36      	ldr	r2, [pc, #216]	@ (80078c4 <HAL_DMA_Start_IT+0x478>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d045      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a34      	ldr	r2, [pc, #208]	@ (80078c8 <HAL_DMA_Start_IT+0x47c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d040      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a33      	ldr	r2, [pc, #204]	@ (80078cc <HAL_DMA_Start_IT+0x480>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d03b      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a31      	ldr	r2, [pc, #196]	@ (80078d0 <HAL_DMA_Start_IT+0x484>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d036      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a30      	ldr	r2, [pc, #192]	@ (80078d4 <HAL_DMA_Start_IT+0x488>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d031      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a2e      	ldr	r2, [pc, #184]	@ (80078d8 <HAL_DMA_Start_IT+0x48c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d02c      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a2d      	ldr	r2, [pc, #180]	@ (80078dc <HAL_DMA_Start_IT+0x490>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d027      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a2b      	ldr	r2, [pc, #172]	@ (80078e0 <HAL_DMA_Start_IT+0x494>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d022      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a2a      	ldr	r2, [pc, #168]	@ (80078e4 <HAL_DMA_Start_IT+0x498>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d01d      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a28      	ldr	r2, [pc, #160]	@ (80078e8 <HAL_DMA_Start_IT+0x49c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d018      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a27      	ldr	r2, [pc, #156]	@ (80078ec <HAL_DMA_Start_IT+0x4a0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d013      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a25      	ldr	r2, [pc, #148]	@ (80078f0 <HAL_DMA_Start_IT+0x4a4>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d00e      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a24      	ldr	r2, [pc, #144]	@ (80078f4 <HAL_DMA_Start_IT+0x4a8>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d009      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a22      	ldr	r2, [pc, #136]	@ (80078f8 <HAL_DMA_Start_IT+0x4ac>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d004      	beq.n	800787c <HAL_DMA_Start_IT+0x430>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a21      	ldr	r2, [pc, #132]	@ (80078fc <HAL_DMA_Start_IT+0x4b0>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d108      	bne.n	800788e <HAL_DMA_Start_IT+0x442>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0201 	orr.w	r2, r2, #1
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	e012      	b.n	80078b4 <HAL_DMA_Start_IT+0x468>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 0201 	orr.w	r2, r2, #1
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	e009      	b.n	80078b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	40020010 	.word	0x40020010
 80078c4:	40020028 	.word	0x40020028
 80078c8:	40020040 	.word	0x40020040
 80078cc:	40020058 	.word	0x40020058
 80078d0:	40020070 	.word	0x40020070
 80078d4:	40020088 	.word	0x40020088
 80078d8:	400200a0 	.word	0x400200a0
 80078dc:	400200b8 	.word	0x400200b8
 80078e0:	40020410 	.word	0x40020410
 80078e4:	40020428 	.word	0x40020428
 80078e8:	40020440 	.word	0x40020440
 80078ec:	40020458 	.word	0x40020458
 80078f0:	40020470 	.word	0x40020470
 80078f4:	40020488 	.word	0x40020488
 80078f8:	400204a0 	.word	0x400204a0
 80078fc:	400204b8 	.word	0x400204b8
 8007900:	58025408 	.word	0x58025408
 8007904:	5802541c 	.word	0x5802541c
 8007908:	58025430 	.word	0x58025430
 800790c:	58025444 	.word	0x58025444
 8007910:	58025458 	.word	0x58025458
 8007914:	5802546c 	.word	0x5802546c
 8007918:	58025480 	.word	0x58025480
 800791c:	58025494 	.word	0x58025494

08007920 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007928:	f7fc ff16 	bl	8004758 <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e2dc      	b.n	8007ef2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d008      	beq.n	8007956 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2280      	movs	r2, #128	@ 0x80
 8007948:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e2cd      	b.n	8007ef2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a76      	ldr	r2, [pc, #472]	@ (8007b34 <HAL_DMA_Abort+0x214>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d04a      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a74      	ldr	r2, [pc, #464]	@ (8007b38 <HAL_DMA_Abort+0x218>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d045      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a73      	ldr	r2, [pc, #460]	@ (8007b3c <HAL_DMA_Abort+0x21c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d040      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a71      	ldr	r2, [pc, #452]	@ (8007b40 <HAL_DMA_Abort+0x220>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d03b      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a70      	ldr	r2, [pc, #448]	@ (8007b44 <HAL_DMA_Abort+0x224>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d036      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a6e      	ldr	r2, [pc, #440]	@ (8007b48 <HAL_DMA_Abort+0x228>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d031      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a6d      	ldr	r2, [pc, #436]	@ (8007b4c <HAL_DMA_Abort+0x22c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d02c      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a6b      	ldr	r2, [pc, #428]	@ (8007b50 <HAL_DMA_Abort+0x230>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d027      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a6a      	ldr	r2, [pc, #424]	@ (8007b54 <HAL_DMA_Abort+0x234>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d022      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a68      	ldr	r2, [pc, #416]	@ (8007b58 <HAL_DMA_Abort+0x238>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d01d      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a67      	ldr	r2, [pc, #412]	@ (8007b5c <HAL_DMA_Abort+0x23c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d018      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a65      	ldr	r2, [pc, #404]	@ (8007b60 <HAL_DMA_Abort+0x240>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d013      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a64      	ldr	r2, [pc, #400]	@ (8007b64 <HAL_DMA_Abort+0x244>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d00e      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a62      	ldr	r2, [pc, #392]	@ (8007b68 <HAL_DMA_Abort+0x248>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d009      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a61      	ldr	r2, [pc, #388]	@ (8007b6c <HAL_DMA_Abort+0x24c>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d004      	beq.n	80079f6 <HAL_DMA_Abort+0xd6>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a5f      	ldr	r2, [pc, #380]	@ (8007b70 <HAL_DMA_Abort+0x250>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d101      	bne.n	80079fa <HAL_DMA_Abort+0xda>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <HAL_DMA_Abort+0xdc>
 80079fa:	2300      	movs	r3, #0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d013      	beq.n	8007a28 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 021e 	bic.w	r2, r2, #30
 8007a0e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	695a      	ldr	r2, [r3, #20]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a1e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	e00a      	b.n	8007a3e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 020e 	bic.w	r2, r2, #14
 8007a36:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a3c      	ldr	r2, [pc, #240]	@ (8007b34 <HAL_DMA_Abort+0x214>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d072      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a3a      	ldr	r2, [pc, #232]	@ (8007b38 <HAL_DMA_Abort+0x218>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d06d      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a39      	ldr	r2, [pc, #228]	@ (8007b3c <HAL_DMA_Abort+0x21c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d068      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a37      	ldr	r2, [pc, #220]	@ (8007b40 <HAL_DMA_Abort+0x220>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d063      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a36      	ldr	r2, [pc, #216]	@ (8007b44 <HAL_DMA_Abort+0x224>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d05e      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a34      	ldr	r2, [pc, #208]	@ (8007b48 <HAL_DMA_Abort+0x228>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d059      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a33      	ldr	r2, [pc, #204]	@ (8007b4c <HAL_DMA_Abort+0x22c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d054      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a31      	ldr	r2, [pc, #196]	@ (8007b50 <HAL_DMA_Abort+0x230>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d04f      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a30      	ldr	r2, [pc, #192]	@ (8007b54 <HAL_DMA_Abort+0x234>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d04a      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a2e      	ldr	r2, [pc, #184]	@ (8007b58 <HAL_DMA_Abort+0x238>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d045      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8007b5c <HAL_DMA_Abort+0x23c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d040      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a2b      	ldr	r2, [pc, #172]	@ (8007b60 <HAL_DMA_Abort+0x240>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d03b      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a2a      	ldr	r2, [pc, #168]	@ (8007b64 <HAL_DMA_Abort+0x244>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d036      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a28      	ldr	r2, [pc, #160]	@ (8007b68 <HAL_DMA_Abort+0x248>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d031      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a27      	ldr	r2, [pc, #156]	@ (8007b6c <HAL_DMA_Abort+0x24c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d02c      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a25      	ldr	r2, [pc, #148]	@ (8007b70 <HAL_DMA_Abort+0x250>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d027      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a24      	ldr	r2, [pc, #144]	@ (8007b74 <HAL_DMA_Abort+0x254>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d022      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a22      	ldr	r2, [pc, #136]	@ (8007b78 <HAL_DMA_Abort+0x258>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d01d      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a21      	ldr	r2, [pc, #132]	@ (8007b7c <HAL_DMA_Abort+0x25c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d018      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a1f      	ldr	r2, [pc, #124]	@ (8007b80 <HAL_DMA_Abort+0x260>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d013      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007b84 <HAL_DMA_Abort+0x264>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d00e      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a1c      	ldr	r2, [pc, #112]	@ (8007b88 <HAL_DMA_Abort+0x268>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d009      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8007b8c <HAL_DMA_Abort+0x26c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d004      	beq.n	8007b2e <HAL_DMA_Abort+0x20e>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a19      	ldr	r2, [pc, #100]	@ (8007b90 <HAL_DMA_Abort+0x270>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d132      	bne.n	8007b94 <HAL_DMA_Abort+0x274>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e031      	b.n	8007b96 <HAL_DMA_Abort+0x276>
 8007b32:	bf00      	nop
 8007b34:	40020010 	.word	0x40020010
 8007b38:	40020028 	.word	0x40020028
 8007b3c:	40020040 	.word	0x40020040
 8007b40:	40020058 	.word	0x40020058
 8007b44:	40020070 	.word	0x40020070
 8007b48:	40020088 	.word	0x40020088
 8007b4c:	400200a0 	.word	0x400200a0
 8007b50:	400200b8 	.word	0x400200b8
 8007b54:	40020410 	.word	0x40020410
 8007b58:	40020428 	.word	0x40020428
 8007b5c:	40020440 	.word	0x40020440
 8007b60:	40020458 	.word	0x40020458
 8007b64:	40020470 	.word	0x40020470
 8007b68:	40020488 	.word	0x40020488
 8007b6c:	400204a0 	.word	0x400204a0
 8007b70:	400204b8 	.word	0x400204b8
 8007b74:	58025408 	.word	0x58025408
 8007b78:	5802541c 	.word	0x5802541c
 8007b7c:	58025430 	.word	0x58025430
 8007b80:	58025444 	.word	0x58025444
 8007b84:	58025458 	.word	0x58025458
 8007b88:	5802546c 	.word	0x5802546c
 8007b8c:	58025480 	.word	0x58025480
 8007b90:	58025494 	.word	0x58025494
 8007b94:	2300      	movs	r3, #0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ba8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a6d      	ldr	r2, [pc, #436]	@ (8007d64 <HAL_DMA_Abort+0x444>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d04a      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a6b      	ldr	r2, [pc, #428]	@ (8007d68 <HAL_DMA_Abort+0x448>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d045      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a6a      	ldr	r2, [pc, #424]	@ (8007d6c <HAL_DMA_Abort+0x44c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d040      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a68      	ldr	r2, [pc, #416]	@ (8007d70 <HAL_DMA_Abort+0x450>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d03b      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a67      	ldr	r2, [pc, #412]	@ (8007d74 <HAL_DMA_Abort+0x454>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d036      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a65      	ldr	r2, [pc, #404]	@ (8007d78 <HAL_DMA_Abort+0x458>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d031      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a64      	ldr	r2, [pc, #400]	@ (8007d7c <HAL_DMA_Abort+0x45c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d02c      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a62      	ldr	r2, [pc, #392]	@ (8007d80 <HAL_DMA_Abort+0x460>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d027      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a61      	ldr	r2, [pc, #388]	@ (8007d84 <HAL_DMA_Abort+0x464>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d022      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a5f      	ldr	r2, [pc, #380]	@ (8007d88 <HAL_DMA_Abort+0x468>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d01d      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a5e      	ldr	r2, [pc, #376]	@ (8007d8c <HAL_DMA_Abort+0x46c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d018      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a5c      	ldr	r2, [pc, #368]	@ (8007d90 <HAL_DMA_Abort+0x470>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d013      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a5b      	ldr	r2, [pc, #364]	@ (8007d94 <HAL_DMA_Abort+0x474>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d00e      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a59      	ldr	r2, [pc, #356]	@ (8007d98 <HAL_DMA_Abort+0x478>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d009      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a58      	ldr	r2, [pc, #352]	@ (8007d9c <HAL_DMA_Abort+0x47c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d004      	beq.n	8007c4a <HAL_DMA_Abort+0x32a>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a56      	ldr	r2, [pc, #344]	@ (8007da0 <HAL_DMA_Abort+0x480>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d108      	bne.n	8007c5c <HAL_DMA_Abort+0x33c>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 0201 	bic.w	r2, r2, #1
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	e007      	b.n	8007c6c <HAL_DMA_Abort+0x34c>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0201 	bic.w	r2, r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007c6c:	e013      	b.n	8007c96 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c6e:	f7fc fd73 	bl	8004758 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b05      	cmp	r3, #5
 8007c7a:	d90c      	bls.n	8007c96 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2203      	movs	r2, #3
 8007c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e12d      	b.n	8007ef2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1e5      	bne.n	8007c6e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a2f      	ldr	r2, [pc, #188]	@ (8007d64 <HAL_DMA_Abort+0x444>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d04a      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d68 <HAL_DMA_Abort+0x448>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d045      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a2c      	ldr	r2, [pc, #176]	@ (8007d6c <HAL_DMA_Abort+0x44c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d040      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8007d70 <HAL_DMA_Abort+0x450>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d03b      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a29      	ldr	r2, [pc, #164]	@ (8007d74 <HAL_DMA_Abort+0x454>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d036      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a27      	ldr	r2, [pc, #156]	@ (8007d78 <HAL_DMA_Abort+0x458>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d031      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a26      	ldr	r2, [pc, #152]	@ (8007d7c <HAL_DMA_Abort+0x45c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d02c      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a24      	ldr	r2, [pc, #144]	@ (8007d80 <HAL_DMA_Abort+0x460>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d027      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a23      	ldr	r2, [pc, #140]	@ (8007d84 <HAL_DMA_Abort+0x464>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d022      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a21      	ldr	r2, [pc, #132]	@ (8007d88 <HAL_DMA_Abort+0x468>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d01d      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a20      	ldr	r2, [pc, #128]	@ (8007d8c <HAL_DMA_Abort+0x46c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d018      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a1e      	ldr	r2, [pc, #120]	@ (8007d90 <HAL_DMA_Abort+0x470>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d013      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8007d94 <HAL_DMA_Abort+0x474>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00e      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a1b      	ldr	r2, [pc, #108]	@ (8007d98 <HAL_DMA_Abort+0x478>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d009      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a1a      	ldr	r2, [pc, #104]	@ (8007d9c <HAL_DMA_Abort+0x47c>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d004      	beq.n	8007d42 <HAL_DMA_Abort+0x422>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a18      	ldr	r2, [pc, #96]	@ (8007da0 <HAL_DMA_Abort+0x480>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d101      	bne.n	8007d46 <HAL_DMA_Abort+0x426>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e000      	b.n	8007d48 <HAL_DMA_Abort+0x428>
 8007d46:	2300      	movs	r3, #0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d02b      	beq.n	8007da4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d50:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d56:	f003 031f 	and.w	r3, r3, #31
 8007d5a:	223f      	movs	r2, #63	@ 0x3f
 8007d5c:	409a      	lsls	r2, r3
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	609a      	str	r2, [r3, #8]
 8007d62:	e02a      	b.n	8007dba <HAL_DMA_Abort+0x49a>
 8007d64:	40020010 	.word	0x40020010
 8007d68:	40020028 	.word	0x40020028
 8007d6c:	40020040 	.word	0x40020040
 8007d70:	40020058 	.word	0x40020058
 8007d74:	40020070 	.word	0x40020070
 8007d78:	40020088 	.word	0x40020088
 8007d7c:	400200a0 	.word	0x400200a0
 8007d80:	400200b8 	.word	0x400200b8
 8007d84:	40020410 	.word	0x40020410
 8007d88:	40020428 	.word	0x40020428
 8007d8c:	40020440 	.word	0x40020440
 8007d90:	40020458 	.word	0x40020458
 8007d94:	40020470 	.word	0x40020470
 8007d98:	40020488 	.word	0x40020488
 8007d9c:	400204a0 	.word	0x400204a0
 8007da0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dae:	f003 031f 	and.w	r3, r3, #31
 8007db2:	2201      	movs	r2, #1
 8007db4:	409a      	lsls	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a4f      	ldr	r2, [pc, #316]	@ (8007efc <HAL_DMA_Abort+0x5dc>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d072      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a4d      	ldr	r2, [pc, #308]	@ (8007f00 <HAL_DMA_Abort+0x5e0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d06d      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a4c      	ldr	r2, [pc, #304]	@ (8007f04 <HAL_DMA_Abort+0x5e4>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d068      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8007f08 <HAL_DMA_Abort+0x5e8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d063      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a49      	ldr	r2, [pc, #292]	@ (8007f0c <HAL_DMA_Abort+0x5ec>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d05e      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a47      	ldr	r2, [pc, #284]	@ (8007f10 <HAL_DMA_Abort+0x5f0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d059      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a46      	ldr	r2, [pc, #280]	@ (8007f14 <HAL_DMA_Abort+0x5f4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d054      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a44      	ldr	r2, [pc, #272]	@ (8007f18 <HAL_DMA_Abort+0x5f8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d04f      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a43      	ldr	r2, [pc, #268]	@ (8007f1c <HAL_DMA_Abort+0x5fc>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d04a      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a41      	ldr	r2, [pc, #260]	@ (8007f20 <HAL_DMA_Abort+0x600>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d045      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a40      	ldr	r2, [pc, #256]	@ (8007f24 <HAL_DMA_Abort+0x604>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d040      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a3e      	ldr	r2, [pc, #248]	@ (8007f28 <HAL_DMA_Abort+0x608>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d03b      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a3d      	ldr	r2, [pc, #244]	@ (8007f2c <HAL_DMA_Abort+0x60c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d036      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a3b      	ldr	r2, [pc, #236]	@ (8007f30 <HAL_DMA_Abort+0x610>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d031      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a3a      	ldr	r2, [pc, #232]	@ (8007f34 <HAL_DMA_Abort+0x614>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d02c      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a38      	ldr	r2, [pc, #224]	@ (8007f38 <HAL_DMA_Abort+0x618>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d027      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a37      	ldr	r2, [pc, #220]	@ (8007f3c <HAL_DMA_Abort+0x61c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d022      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a35      	ldr	r2, [pc, #212]	@ (8007f40 <HAL_DMA_Abort+0x620>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d01d      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a34      	ldr	r2, [pc, #208]	@ (8007f44 <HAL_DMA_Abort+0x624>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d018      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a32      	ldr	r2, [pc, #200]	@ (8007f48 <HAL_DMA_Abort+0x628>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d013      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a31      	ldr	r2, [pc, #196]	@ (8007f4c <HAL_DMA_Abort+0x62c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d00e      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a2f      	ldr	r2, [pc, #188]	@ (8007f50 <HAL_DMA_Abort+0x630>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d009      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8007f54 <HAL_DMA_Abort+0x634>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d004      	beq.n	8007eaa <HAL_DMA_Abort+0x58a>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8007f58 <HAL_DMA_Abort+0x638>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d101      	bne.n	8007eae <HAL_DMA_Abort+0x58e>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e000      	b.n	8007eb0 <HAL_DMA_Abort+0x590>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d015      	beq.n	8007ee0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007ebc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00c      	beq.n	8007ee0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ed4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007ede:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	40020010 	.word	0x40020010
 8007f00:	40020028 	.word	0x40020028
 8007f04:	40020040 	.word	0x40020040
 8007f08:	40020058 	.word	0x40020058
 8007f0c:	40020070 	.word	0x40020070
 8007f10:	40020088 	.word	0x40020088
 8007f14:	400200a0 	.word	0x400200a0
 8007f18:	400200b8 	.word	0x400200b8
 8007f1c:	40020410 	.word	0x40020410
 8007f20:	40020428 	.word	0x40020428
 8007f24:	40020440 	.word	0x40020440
 8007f28:	40020458 	.word	0x40020458
 8007f2c:	40020470 	.word	0x40020470
 8007f30:	40020488 	.word	0x40020488
 8007f34:	400204a0 	.word	0x400204a0
 8007f38:	400204b8 	.word	0x400204b8
 8007f3c:	58025408 	.word	0x58025408
 8007f40:	5802541c 	.word	0x5802541c
 8007f44:	58025430 	.word	0x58025430
 8007f48:	58025444 	.word	0x58025444
 8007f4c:	58025458 	.word	0x58025458
 8007f50:	5802546c 	.word	0x5802546c
 8007f54:	58025480 	.word	0x58025480
 8007f58:	58025494 	.word	0x58025494

08007f5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08a      	sub	sp, #40	@ 0x28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007f68:	4b67      	ldr	r3, [pc, #412]	@ (8008108 <HAL_DMA_IRQHandler+0x1ac>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a67      	ldr	r2, [pc, #412]	@ (800810c <HAL_DMA_IRQHandler+0x1b0>)
 8007f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f72:	0a9b      	lsrs	r3, r3, #10
 8007f74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f7a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f80:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a5f      	ldr	r2, [pc, #380]	@ (8008110 <HAL_DMA_IRQHandler+0x1b4>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d04a      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a5d      	ldr	r2, [pc, #372]	@ (8008114 <HAL_DMA_IRQHandler+0x1b8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d045      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a5c      	ldr	r2, [pc, #368]	@ (8008118 <HAL_DMA_IRQHandler+0x1bc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d040      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a5a      	ldr	r2, [pc, #360]	@ (800811c <HAL_DMA_IRQHandler+0x1c0>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d03b      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a59      	ldr	r2, [pc, #356]	@ (8008120 <HAL_DMA_IRQHandler+0x1c4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d036      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a57      	ldr	r2, [pc, #348]	@ (8008124 <HAL_DMA_IRQHandler+0x1c8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d031      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a56      	ldr	r2, [pc, #344]	@ (8008128 <HAL_DMA_IRQHandler+0x1cc>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d02c      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a54      	ldr	r2, [pc, #336]	@ (800812c <HAL_DMA_IRQHandler+0x1d0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d027      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a53      	ldr	r2, [pc, #332]	@ (8008130 <HAL_DMA_IRQHandler+0x1d4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d022      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a51      	ldr	r2, [pc, #324]	@ (8008134 <HAL_DMA_IRQHandler+0x1d8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d01d      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a50      	ldr	r2, [pc, #320]	@ (8008138 <HAL_DMA_IRQHandler+0x1dc>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d018      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a4e      	ldr	r2, [pc, #312]	@ (800813c <HAL_DMA_IRQHandler+0x1e0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d013      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a4d      	ldr	r2, [pc, #308]	@ (8008140 <HAL_DMA_IRQHandler+0x1e4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d00e      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a4b      	ldr	r2, [pc, #300]	@ (8008144 <HAL_DMA_IRQHandler+0x1e8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d009      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a4a      	ldr	r2, [pc, #296]	@ (8008148 <HAL_DMA_IRQHandler+0x1ec>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d004      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a48      	ldr	r2, [pc, #288]	@ (800814c <HAL_DMA_IRQHandler+0x1f0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d101      	bne.n	8008032 <HAL_DMA_IRQHandler+0xd6>
 800802e:	2301      	movs	r3, #1
 8008030:	e000      	b.n	8008034 <HAL_DMA_IRQHandler+0xd8>
 8008032:	2300      	movs	r3, #0
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 842b 	beq.w	8008890 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800803e:	f003 031f 	and.w	r3, r3, #31
 8008042:	2208      	movs	r2, #8
 8008044:	409a      	lsls	r2, r3
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	4013      	ands	r3, r2
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 80a2 	beq.w	8008194 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a2e      	ldr	r2, [pc, #184]	@ (8008110 <HAL_DMA_IRQHandler+0x1b4>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d04a      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a2d      	ldr	r2, [pc, #180]	@ (8008114 <HAL_DMA_IRQHandler+0x1b8>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d045      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a2b      	ldr	r2, [pc, #172]	@ (8008118 <HAL_DMA_IRQHandler+0x1bc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d040      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a2a      	ldr	r2, [pc, #168]	@ (800811c <HAL_DMA_IRQHandler+0x1c0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d03b      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a28      	ldr	r2, [pc, #160]	@ (8008120 <HAL_DMA_IRQHandler+0x1c4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d036      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a27      	ldr	r2, [pc, #156]	@ (8008124 <HAL_DMA_IRQHandler+0x1c8>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d031      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a25      	ldr	r2, [pc, #148]	@ (8008128 <HAL_DMA_IRQHandler+0x1cc>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d02c      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a24      	ldr	r2, [pc, #144]	@ (800812c <HAL_DMA_IRQHandler+0x1d0>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d027      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a22      	ldr	r2, [pc, #136]	@ (8008130 <HAL_DMA_IRQHandler+0x1d4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d022      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a21      	ldr	r2, [pc, #132]	@ (8008134 <HAL_DMA_IRQHandler+0x1d8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d01d      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008138 <HAL_DMA_IRQHandler+0x1dc>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d018      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a1e      	ldr	r2, [pc, #120]	@ (800813c <HAL_DMA_IRQHandler+0x1e0>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d013      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008140 <HAL_DMA_IRQHandler+0x1e4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00e      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a1b      	ldr	r2, [pc, #108]	@ (8008144 <HAL_DMA_IRQHandler+0x1e8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d009      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a19      	ldr	r2, [pc, #100]	@ (8008148 <HAL_DMA_IRQHandler+0x1ec>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d004      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a18      	ldr	r2, [pc, #96]	@ (800814c <HAL_DMA_IRQHandler+0x1f0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d12f      	bne.n	8008150 <HAL_DMA_IRQHandler+0x1f4>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bf14      	ite	ne
 80080fe:	2301      	movne	r3, #1
 8008100:	2300      	moveq	r3, #0
 8008102:	b2db      	uxtb	r3, r3
 8008104:	e02e      	b.n	8008164 <HAL_DMA_IRQHandler+0x208>
 8008106:	bf00      	nop
 8008108:	24000018 	.word	0x24000018
 800810c:	1b4e81b5 	.word	0x1b4e81b5
 8008110:	40020010 	.word	0x40020010
 8008114:	40020028 	.word	0x40020028
 8008118:	40020040 	.word	0x40020040
 800811c:	40020058 	.word	0x40020058
 8008120:	40020070 	.word	0x40020070
 8008124:	40020088 	.word	0x40020088
 8008128:	400200a0 	.word	0x400200a0
 800812c:	400200b8 	.word	0x400200b8
 8008130:	40020410 	.word	0x40020410
 8008134:	40020428 	.word	0x40020428
 8008138:	40020440 	.word	0x40020440
 800813c:	40020458 	.word	0x40020458
 8008140:	40020470 	.word	0x40020470
 8008144:	40020488 	.word	0x40020488
 8008148:	400204a0 	.word	0x400204a0
 800814c:	400204b8 	.word	0x400204b8
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	2b00      	cmp	r3, #0
 800815c:	bf14      	ite	ne
 800815e:	2301      	movne	r3, #1
 8008160:	2300      	moveq	r3, #0
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	d015      	beq.n	8008194 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 0204 	bic.w	r2, r2, #4
 8008176:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800817c:	f003 031f 	and.w	r3, r3, #31
 8008180:	2208      	movs	r2, #8
 8008182:	409a      	lsls	r2, r3
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800818c:	f043 0201 	orr.w	r2, r3, #1
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008198:	f003 031f 	and.w	r3, r3, #31
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	fa22 f303 	lsr.w	r3, r2, r3
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d06e      	beq.n	8008288 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a69      	ldr	r2, [pc, #420]	@ (8008354 <HAL_DMA_IRQHandler+0x3f8>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d04a      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a67      	ldr	r2, [pc, #412]	@ (8008358 <HAL_DMA_IRQHandler+0x3fc>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d045      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a66      	ldr	r2, [pc, #408]	@ (800835c <HAL_DMA_IRQHandler+0x400>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d040      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a64      	ldr	r2, [pc, #400]	@ (8008360 <HAL_DMA_IRQHandler+0x404>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d03b      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a63      	ldr	r2, [pc, #396]	@ (8008364 <HAL_DMA_IRQHandler+0x408>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d036      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a61      	ldr	r2, [pc, #388]	@ (8008368 <HAL_DMA_IRQHandler+0x40c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d031      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a60      	ldr	r2, [pc, #384]	@ (800836c <HAL_DMA_IRQHandler+0x410>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d02c      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a5e      	ldr	r2, [pc, #376]	@ (8008370 <HAL_DMA_IRQHandler+0x414>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d027      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a5d      	ldr	r2, [pc, #372]	@ (8008374 <HAL_DMA_IRQHandler+0x418>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d022      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a5b      	ldr	r2, [pc, #364]	@ (8008378 <HAL_DMA_IRQHandler+0x41c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d01d      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a5a      	ldr	r2, [pc, #360]	@ (800837c <HAL_DMA_IRQHandler+0x420>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d018      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a58      	ldr	r2, [pc, #352]	@ (8008380 <HAL_DMA_IRQHandler+0x424>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d013      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a57      	ldr	r2, [pc, #348]	@ (8008384 <HAL_DMA_IRQHandler+0x428>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d00e      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a55      	ldr	r2, [pc, #340]	@ (8008388 <HAL_DMA_IRQHandler+0x42c>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d009      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a54      	ldr	r2, [pc, #336]	@ (800838c <HAL_DMA_IRQHandler+0x430>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d004      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a52      	ldr	r2, [pc, #328]	@ (8008390 <HAL_DMA_IRQHandler+0x434>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d10a      	bne.n	8008260 <HAL_DMA_IRQHandler+0x304>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008254:	2b00      	cmp	r3, #0
 8008256:	bf14      	ite	ne
 8008258:	2301      	movne	r3, #1
 800825a:	2300      	moveq	r3, #0
 800825c:	b2db      	uxtb	r3, r3
 800825e:	e003      	b.n	8008268 <HAL_DMA_IRQHandler+0x30c>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2300      	movs	r3, #0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00d      	beq.n	8008288 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008270:	f003 031f 	and.w	r3, r3, #31
 8008274:	2201      	movs	r2, #1
 8008276:	409a      	lsls	r2, r3
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008280:	f043 0202 	orr.w	r2, r3, #2
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800828c:	f003 031f 	and.w	r3, r3, #31
 8008290:	2204      	movs	r2, #4
 8008292:	409a      	lsls	r2, r3
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	4013      	ands	r3, r2
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 808f 	beq.w	80083bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a2c      	ldr	r2, [pc, #176]	@ (8008354 <HAL_DMA_IRQHandler+0x3f8>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d04a      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a2a      	ldr	r2, [pc, #168]	@ (8008358 <HAL_DMA_IRQHandler+0x3fc>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d045      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a29      	ldr	r2, [pc, #164]	@ (800835c <HAL_DMA_IRQHandler+0x400>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d040      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a27      	ldr	r2, [pc, #156]	@ (8008360 <HAL_DMA_IRQHandler+0x404>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d03b      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a26      	ldr	r2, [pc, #152]	@ (8008364 <HAL_DMA_IRQHandler+0x408>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d036      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a24      	ldr	r2, [pc, #144]	@ (8008368 <HAL_DMA_IRQHandler+0x40c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d031      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a23      	ldr	r2, [pc, #140]	@ (800836c <HAL_DMA_IRQHandler+0x410>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d02c      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a21      	ldr	r2, [pc, #132]	@ (8008370 <HAL_DMA_IRQHandler+0x414>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d027      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a20      	ldr	r2, [pc, #128]	@ (8008374 <HAL_DMA_IRQHandler+0x418>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d022      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a1e      	ldr	r2, [pc, #120]	@ (8008378 <HAL_DMA_IRQHandler+0x41c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d01d      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a1d      	ldr	r2, [pc, #116]	@ (800837c <HAL_DMA_IRQHandler+0x420>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d018      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a1b      	ldr	r2, [pc, #108]	@ (8008380 <HAL_DMA_IRQHandler+0x424>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d013      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a1a      	ldr	r2, [pc, #104]	@ (8008384 <HAL_DMA_IRQHandler+0x428>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d00e      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a18      	ldr	r2, [pc, #96]	@ (8008388 <HAL_DMA_IRQHandler+0x42c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d009      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a17      	ldr	r2, [pc, #92]	@ (800838c <HAL_DMA_IRQHandler+0x430>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d004      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a15      	ldr	r2, [pc, #84]	@ (8008390 <HAL_DMA_IRQHandler+0x434>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d12a      	bne.n	8008394 <HAL_DMA_IRQHandler+0x438>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b00      	cmp	r3, #0
 800834a:	bf14      	ite	ne
 800834c:	2301      	movne	r3, #1
 800834e:	2300      	moveq	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	e023      	b.n	800839c <HAL_DMA_IRQHandler+0x440>
 8008354:	40020010 	.word	0x40020010
 8008358:	40020028 	.word	0x40020028
 800835c:	40020040 	.word	0x40020040
 8008360:	40020058 	.word	0x40020058
 8008364:	40020070 	.word	0x40020070
 8008368:	40020088 	.word	0x40020088
 800836c:	400200a0 	.word	0x400200a0
 8008370:	400200b8 	.word	0x400200b8
 8008374:	40020410 	.word	0x40020410
 8008378:	40020428 	.word	0x40020428
 800837c:	40020440 	.word	0x40020440
 8008380:	40020458 	.word	0x40020458
 8008384:	40020470 	.word	0x40020470
 8008388:	40020488 	.word	0x40020488
 800838c:	400204a0 	.word	0x400204a0
 8008390:	400204b8 	.word	0x400204b8
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2300      	movs	r3, #0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00d      	beq.n	80083bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083a4:	f003 031f 	and.w	r3, r3, #31
 80083a8:	2204      	movs	r2, #4
 80083aa:	409a      	lsls	r2, r3
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083b4:	f043 0204 	orr.w	r2, r3, #4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083c0:	f003 031f 	and.w	r3, r3, #31
 80083c4:	2210      	movs	r2, #16
 80083c6:	409a      	lsls	r2, r3
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	4013      	ands	r3, r2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 80a6 	beq.w	800851e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a85      	ldr	r2, [pc, #532]	@ (80085ec <HAL_DMA_IRQHandler+0x690>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d04a      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a83      	ldr	r2, [pc, #524]	@ (80085f0 <HAL_DMA_IRQHandler+0x694>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d045      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a82      	ldr	r2, [pc, #520]	@ (80085f4 <HAL_DMA_IRQHandler+0x698>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d040      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a80      	ldr	r2, [pc, #512]	@ (80085f8 <HAL_DMA_IRQHandler+0x69c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d03b      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a7f      	ldr	r2, [pc, #508]	@ (80085fc <HAL_DMA_IRQHandler+0x6a0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d036      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a7d      	ldr	r2, [pc, #500]	@ (8008600 <HAL_DMA_IRQHandler+0x6a4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d031      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a7c      	ldr	r2, [pc, #496]	@ (8008604 <HAL_DMA_IRQHandler+0x6a8>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d02c      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a7a      	ldr	r2, [pc, #488]	@ (8008608 <HAL_DMA_IRQHandler+0x6ac>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d027      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a79      	ldr	r2, [pc, #484]	@ (800860c <HAL_DMA_IRQHandler+0x6b0>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d022      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a77      	ldr	r2, [pc, #476]	@ (8008610 <HAL_DMA_IRQHandler+0x6b4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d01d      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a76      	ldr	r2, [pc, #472]	@ (8008614 <HAL_DMA_IRQHandler+0x6b8>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d018      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a74      	ldr	r2, [pc, #464]	@ (8008618 <HAL_DMA_IRQHandler+0x6bc>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d013      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a73      	ldr	r2, [pc, #460]	@ (800861c <HAL_DMA_IRQHandler+0x6c0>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d00e      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a71      	ldr	r2, [pc, #452]	@ (8008620 <HAL_DMA_IRQHandler+0x6c4>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d009      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a70      	ldr	r2, [pc, #448]	@ (8008624 <HAL_DMA_IRQHandler+0x6c8>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d004      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a6e      	ldr	r2, [pc, #440]	@ (8008628 <HAL_DMA_IRQHandler+0x6cc>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d10a      	bne.n	8008488 <HAL_DMA_IRQHandler+0x52c>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	2b00      	cmp	r3, #0
 800847e:	bf14      	ite	ne
 8008480:	2301      	movne	r3, #1
 8008482:	2300      	moveq	r3, #0
 8008484:	b2db      	uxtb	r3, r3
 8008486:	e009      	b.n	800849c <HAL_DMA_IRQHandler+0x540>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0304 	and.w	r3, r3, #4
 8008492:	2b00      	cmp	r3, #0
 8008494:	bf14      	ite	ne
 8008496:	2301      	movne	r3, #1
 8008498:	2300      	moveq	r3, #0
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	d03e      	beq.n	800851e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084a4:	f003 031f 	and.w	r3, r3, #31
 80084a8:	2210      	movs	r2, #16
 80084aa:	409a      	lsls	r2, r3
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d018      	beq.n	80084f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d108      	bne.n	80084de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d024      	beq.n	800851e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	4798      	blx	r3
 80084dc:	e01f      	b.n	800851e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d01b      	beq.n	800851e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
 80084ee:	e016      	b.n	800851e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d107      	bne.n	800850e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 0208 	bic.w	r2, r2, #8
 800850c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008522:	f003 031f 	and.w	r3, r3, #31
 8008526:	2220      	movs	r2, #32
 8008528:	409a      	lsls	r2, r3
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	4013      	ands	r3, r2
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 8110 	beq.w	8008754 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a2c      	ldr	r2, [pc, #176]	@ (80085ec <HAL_DMA_IRQHandler+0x690>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d04a      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a2b      	ldr	r2, [pc, #172]	@ (80085f0 <HAL_DMA_IRQHandler+0x694>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d045      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a29      	ldr	r2, [pc, #164]	@ (80085f4 <HAL_DMA_IRQHandler+0x698>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d040      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a28      	ldr	r2, [pc, #160]	@ (80085f8 <HAL_DMA_IRQHandler+0x69c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d03b      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a26      	ldr	r2, [pc, #152]	@ (80085fc <HAL_DMA_IRQHandler+0x6a0>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d036      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a25      	ldr	r2, [pc, #148]	@ (8008600 <HAL_DMA_IRQHandler+0x6a4>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d031      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a23      	ldr	r2, [pc, #140]	@ (8008604 <HAL_DMA_IRQHandler+0x6a8>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d02c      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a22      	ldr	r2, [pc, #136]	@ (8008608 <HAL_DMA_IRQHandler+0x6ac>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d027      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a20      	ldr	r2, [pc, #128]	@ (800860c <HAL_DMA_IRQHandler+0x6b0>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d022      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a1f      	ldr	r2, [pc, #124]	@ (8008610 <HAL_DMA_IRQHandler+0x6b4>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d01d      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a1d      	ldr	r2, [pc, #116]	@ (8008614 <HAL_DMA_IRQHandler+0x6b8>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d018      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008618 <HAL_DMA_IRQHandler+0x6bc>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d013      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a1a      	ldr	r2, [pc, #104]	@ (800861c <HAL_DMA_IRQHandler+0x6c0>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d00e      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a19      	ldr	r2, [pc, #100]	@ (8008620 <HAL_DMA_IRQHandler+0x6c4>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d009      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a17      	ldr	r2, [pc, #92]	@ (8008624 <HAL_DMA_IRQHandler+0x6c8>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d004      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a16      	ldr	r2, [pc, #88]	@ (8008628 <HAL_DMA_IRQHandler+0x6cc>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d12b      	bne.n	800862c <HAL_DMA_IRQHandler+0x6d0>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0310 	and.w	r3, r3, #16
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bf14      	ite	ne
 80085e2:	2301      	movne	r3, #1
 80085e4:	2300      	moveq	r3, #0
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	e02a      	b.n	8008640 <HAL_DMA_IRQHandler+0x6e4>
 80085ea:	bf00      	nop
 80085ec:	40020010 	.word	0x40020010
 80085f0:	40020028 	.word	0x40020028
 80085f4:	40020040 	.word	0x40020040
 80085f8:	40020058 	.word	0x40020058
 80085fc:	40020070 	.word	0x40020070
 8008600:	40020088 	.word	0x40020088
 8008604:	400200a0 	.word	0x400200a0
 8008608:	400200b8 	.word	0x400200b8
 800860c:	40020410 	.word	0x40020410
 8008610:	40020428 	.word	0x40020428
 8008614:	40020440 	.word	0x40020440
 8008618:	40020458 	.word	0x40020458
 800861c:	40020470 	.word	0x40020470
 8008620:	40020488 	.word	0x40020488
 8008624:	400204a0 	.word	0x400204a0
 8008628:	400204b8 	.word	0x400204b8
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b00      	cmp	r3, #0
 8008638:	bf14      	ite	ne
 800863a:	2301      	movne	r3, #1
 800863c:	2300      	moveq	r3, #0
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8087 	beq.w	8008754 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800864a:	f003 031f 	and.w	r3, r3, #31
 800864e:	2220      	movs	r2, #32
 8008650:	409a      	lsls	r2, r3
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b04      	cmp	r3, #4
 8008660:	d139      	bne.n	80086d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0216 	bic.w	r2, r2, #22
 8008670:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	695a      	ldr	r2, [r3, #20]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008680:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d103      	bne.n	8008692 <HAL_DMA_IRQHandler+0x736>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800868e:	2b00      	cmp	r3, #0
 8008690:	d007      	beq.n	80086a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0208 	bic.w	r2, r2, #8
 80086a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086a6:	f003 031f 	and.w	r3, r3, #31
 80086aa:	223f      	movs	r2, #63	@ 0x3f
 80086ac:	409a      	lsls	r2, r3
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f000 834a 	beq.w	8008d60 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	4798      	blx	r3
          }
          return;
 80086d4:	e344      	b.n	8008d60 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d018      	beq.n	8008716 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d108      	bne.n	8008704 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d02c      	beq.n	8008754 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	4798      	blx	r3
 8008702:	e027      	b.n	8008754 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008708:	2b00      	cmp	r3, #0
 800870a:	d023      	beq.n	8008754 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	4798      	blx	r3
 8008714:	e01e      	b.n	8008754 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10f      	bne.n	8008744 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0210 	bic.w	r2, r2, #16
 8008732:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 8306 	beq.w	8008d6a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 8088 	beq.w	800887c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2204      	movs	r2, #4
 8008770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a7a      	ldr	r2, [pc, #488]	@ (8008964 <HAL_DMA_IRQHandler+0xa08>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d04a      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a79      	ldr	r2, [pc, #484]	@ (8008968 <HAL_DMA_IRQHandler+0xa0c>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d045      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a77      	ldr	r2, [pc, #476]	@ (800896c <HAL_DMA_IRQHandler+0xa10>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d040      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a76      	ldr	r2, [pc, #472]	@ (8008970 <HAL_DMA_IRQHandler+0xa14>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d03b      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a74      	ldr	r2, [pc, #464]	@ (8008974 <HAL_DMA_IRQHandler+0xa18>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d036      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a73      	ldr	r2, [pc, #460]	@ (8008978 <HAL_DMA_IRQHandler+0xa1c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d031      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a71      	ldr	r2, [pc, #452]	@ (800897c <HAL_DMA_IRQHandler+0xa20>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d02c      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a70      	ldr	r2, [pc, #448]	@ (8008980 <HAL_DMA_IRQHandler+0xa24>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d027      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a6e      	ldr	r2, [pc, #440]	@ (8008984 <HAL_DMA_IRQHandler+0xa28>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d022      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a6d      	ldr	r2, [pc, #436]	@ (8008988 <HAL_DMA_IRQHandler+0xa2c>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d01d      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a6b      	ldr	r2, [pc, #428]	@ (800898c <HAL_DMA_IRQHandler+0xa30>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d018      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a6a      	ldr	r2, [pc, #424]	@ (8008990 <HAL_DMA_IRQHandler+0xa34>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d013      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a68      	ldr	r2, [pc, #416]	@ (8008994 <HAL_DMA_IRQHandler+0xa38>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00e      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a67      	ldr	r2, [pc, #412]	@ (8008998 <HAL_DMA_IRQHandler+0xa3c>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d009      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a65      	ldr	r2, [pc, #404]	@ (800899c <HAL_DMA_IRQHandler+0xa40>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d004      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a64      	ldr	r2, [pc, #400]	@ (80089a0 <HAL_DMA_IRQHandler+0xa44>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d108      	bne.n	8008826 <HAL_DMA_IRQHandler+0x8ca>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0201 	bic.w	r2, r2, #1
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	e007      	b.n	8008836 <HAL_DMA_IRQHandler+0x8da>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0201 	bic.w	r2, r2, #1
 8008834:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3301      	adds	r3, #1
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800883e:	429a      	cmp	r2, r3
 8008840:	d307      	bcc.n	8008852 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1f2      	bne.n	8008836 <HAL_DMA_IRQHandler+0x8da>
 8008850:	e000      	b.n	8008854 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008852:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d004      	beq.n	800886c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2203      	movs	r2, #3
 8008866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800886a:	e003      	b.n	8008874 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 8272 	beq.w	8008d6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	4798      	blx	r3
 800888e:	e26c      	b.n	8008d6a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a43      	ldr	r2, [pc, #268]	@ (80089a4 <HAL_DMA_IRQHandler+0xa48>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d022      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a42      	ldr	r2, [pc, #264]	@ (80089a8 <HAL_DMA_IRQHandler+0xa4c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d01d      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a40      	ldr	r2, [pc, #256]	@ (80089ac <HAL_DMA_IRQHandler+0xa50>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d018      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a3f      	ldr	r2, [pc, #252]	@ (80089b0 <HAL_DMA_IRQHandler+0xa54>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d013      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a3d      	ldr	r2, [pc, #244]	@ (80089b4 <HAL_DMA_IRQHandler+0xa58>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d00e      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a3c      	ldr	r2, [pc, #240]	@ (80089b8 <HAL_DMA_IRQHandler+0xa5c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d009      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a3a      	ldr	r2, [pc, #232]	@ (80089bc <HAL_DMA_IRQHandler+0xa60>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d004      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a39      	ldr	r2, [pc, #228]	@ (80089c0 <HAL_DMA_IRQHandler+0xa64>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d101      	bne.n	80088e4 <HAL_DMA_IRQHandler+0x988>
 80088e0:	2301      	movs	r3, #1
 80088e2:	e000      	b.n	80088e6 <HAL_DMA_IRQHandler+0x98a>
 80088e4:	2300      	movs	r3, #0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 823f 	beq.w	8008d6a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088f8:	f003 031f 	and.w	r3, r3, #31
 80088fc:	2204      	movs	r2, #4
 80088fe:	409a      	lsls	r2, r3
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	4013      	ands	r3, r2
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 80cd 	beq.w	8008aa4 <HAL_DMA_IRQHandler+0xb48>
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 80c7 	beq.w	8008aa4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800891a:	f003 031f 	and.w	r3, r3, #31
 800891e:	2204      	movs	r2, #4
 8008920:	409a      	lsls	r2, r3
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d049      	beq.n	80089c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d109      	bne.n	800894e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 8210 	beq.w	8008d64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800894c:	e20a      	b.n	8008d64 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 8206 	beq.w	8008d64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008960:	e200      	b.n	8008d64 <HAL_DMA_IRQHandler+0xe08>
 8008962:	bf00      	nop
 8008964:	40020010 	.word	0x40020010
 8008968:	40020028 	.word	0x40020028
 800896c:	40020040 	.word	0x40020040
 8008970:	40020058 	.word	0x40020058
 8008974:	40020070 	.word	0x40020070
 8008978:	40020088 	.word	0x40020088
 800897c:	400200a0 	.word	0x400200a0
 8008980:	400200b8 	.word	0x400200b8
 8008984:	40020410 	.word	0x40020410
 8008988:	40020428 	.word	0x40020428
 800898c:	40020440 	.word	0x40020440
 8008990:	40020458 	.word	0x40020458
 8008994:	40020470 	.word	0x40020470
 8008998:	40020488 	.word	0x40020488
 800899c:	400204a0 	.word	0x400204a0
 80089a0:	400204b8 	.word	0x400204b8
 80089a4:	58025408 	.word	0x58025408
 80089a8:	5802541c 	.word	0x5802541c
 80089ac:	58025430 	.word	0x58025430
 80089b0:	58025444 	.word	0x58025444
 80089b4:	58025458 	.word	0x58025458
 80089b8:	5802546c 	.word	0x5802546c
 80089bc:	58025480 	.word	0x58025480
 80089c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f003 0320 	and.w	r3, r3, #32
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d160      	bne.n	8008a90 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a7f      	ldr	r2, [pc, #508]	@ (8008bd0 <HAL_DMA_IRQHandler+0xc74>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d04a      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a7d      	ldr	r2, [pc, #500]	@ (8008bd4 <HAL_DMA_IRQHandler+0xc78>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d045      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a7c      	ldr	r2, [pc, #496]	@ (8008bd8 <HAL_DMA_IRQHandler+0xc7c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d040      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a7a      	ldr	r2, [pc, #488]	@ (8008bdc <HAL_DMA_IRQHandler+0xc80>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d03b      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a79      	ldr	r2, [pc, #484]	@ (8008be0 <HAL_DMA_IRQHandler+0xc84>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d036      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a77      	ldr	r2, [pc, #476]	@ (8008be4 <HAL_DMA_IRQHandler+0xc88>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d031      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a76      	ldr	r2, [pc, #472]	@ (8008be8 <HAL_DMA_IRQHandler+0xc8c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d02c      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a74      	ldr	r2, [pc, #464]	@ (8008bec <HAL_DMA_IRQHandler+0xc90>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d027      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a73      	ldr	r2, [pc, #460]	@ (8008bf0 <HAL_DMA_IRQHandler+0xc94>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d022      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a71      	ldr	r2, [pc, #452]	@ (8008bf4 <HAL_DMA_IRQHandler+0xc98>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d01d      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a70      	ldr	r2, [pc, #448]	@ (8008bf8 <HAL_DMA_IRQHandler+0xc9c>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d018      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a6e      	ldr	r2, [pc, #440]	@ (8008bfc <HAL_DMA_IRQHandler+0xca0>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d013      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a6d      	ldr	r2, [pc, #436]	@ (8008c00 <HAL_DMA_IRQHandler+0xca4>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00e      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a6b      	ldr	r2, [pc, #428]	@ (8008c04 <HAL_DMA_IRQHandler+0xca8>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d009      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a6a      	ldr	r2, [pc, #424]	@ (8008c08 <HAL_DMA_IRQHandler+0xcac>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d004      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a68      	ldr	r2, [pc, #416]	@ (8008c0c <HAL_DMA_IRQHandler+0xcb0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d108      	bne.n	8008a80 <HAL_DMA_IRQHandler+0xb24>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0208 	bic.w	r2, r2, #8
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	e007      	b.n	8008a90 <HAL_DMA_IRQHandler+0xb34>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0204 	bic.w	r2, r2, #4
 8008a8e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 8165 	beq.w	8008d64 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008aa2:	e15f      	b.n	8008d64 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aa8:	f003 031f 	and.w	r3, r3, #31
 8008aac:	2202      	movs	r2, #2
 8008aae:	409a      	lsls	r2, r3
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 80c5 	beq.w	8008c44 <HAL_DMA_IRQHandler+0xce8>
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f003 0302 	and.w	r3, r3, #2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 80bf 	beq.w	8008c44 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aca:	f003 031f 	and.w	r3, r3, #31
 8008ace:	2202      	movs	r2, #2
 8008ad0:	409a      	lsls	r2, r3
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d018      	beq.n	8008b12 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d109      	bne.n	8008afe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f000 813a 	beq.w	8008d68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008afc:	e134      	b.n	8008d68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 8130 	beq.w	8008d68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b10:	e12a      	b.n	8008d68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f003 0320 	and.w	r3, r3, #32
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f040 8089 	bne.w	8008c30 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a2b      	ldr	r2, [pc, #172]	@ (8008bd0 <HAL_DMA_IRQHandler+0xc74>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d04a      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a29      	ldr	r2, [pc, #164]	@ (8008bd4 <HAL_DMA_IRQHandler+0xc78>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d045      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a28      	ldr	r2, [pc, #160]	@ (8008bd8 <HAL_DMA_IRQHandler+0xc7c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d040      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a26      	ldr	r2, [pc, #152]	@ (8008bdc <HAL_DMA_IRQHandler+0xc80>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d03b      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a25      	ldr	r2, [pc, #148]	@ (8008be0 <HAL_DMA_IRQHandler+0xc84>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d036      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a23      	ldr	r2, [pc, #140]	@ (8008be4 <HAL_DMA_IRQHandler+0xc88>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d031      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a22      	ldr	r2, [pc, #136]	@ (8008be8 <HAL_DMA_IRQHandler+0xc8c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d02c      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a20      	ldr	r2, [pc, #128]	@ (8008bec <HAL_DMA_IRQHandler+0xc90>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d027      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a1f      	ldr	r2, [pc, #124]	@ (8008bf0 <HAL_DMA_IRQHandler+0xc94>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d022      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf4 <HAL_DMA_IRQHandler+0xc98>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d01d      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a1c      	ldr	r2, [pc, #112]	@ (8008bf8 <HAL_DMA_IRQHandler+0xc9c>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d018      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a1a      	ldr	r2, [pc, #104]	@ (8008bfc <HAL_DMA_IRQHandler+0xca0>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d013      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a19      	ldr	r2, [pc, #100]	@ (8008c00 <HAL_DMA_IRQHandler+0xca4>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00e      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a17      	ldr	r2, [pc, #92]	@ (8008c04 <HAL_DMA_IRQHandler+0xca8>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d009      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a16      	ldr	r2, [pc, #88]	@ (8008c08 <HAL_DMA_IRQHandler+0xcac>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d004      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a14      	ldr	r2, [pc, #80]	@ (8008c0c <HAL_DMA_IRQHandler+0xcb0>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d128      	bne.n	8008c10 <HAL_DMA_IRQHandler+0xcb4>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 0214 	bic.w	r2, r2, #20
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	e027      	b.n	8008c20 <HAL_DMA_IRQHandler+0xcc4>
 8008bd0:	40020010 	.word	0x40020010
 8008bd4:	40020028 	.word	0x40020028
 8008bd8:	40020040 	.word	0x40020040
 8008bdc:	40020058 	.word	0x40020058
 8008be0:	40020070 	.word	0x40020070
 8008be4:	40020088 	.word	0x40020088
 8008be8:	400200a0 	.word	0x400200a0
 8008bec:	400200b8 	.word	0x400200b8
 8008bf0:	40020410 	.word	0x40020410
 8008bf4:	40020428 	.word	0x40020428
 8008bf8:	40020440 	.word	0x40020440
 8008bfc:	40020458 	.word	0x40020458
 8008c00:	40020470 	.word	0x40020470
 8008c04:	40020488 	.word	0x40020488
 8008c08:	400204a0 	.word	0x400204a0
 8008c0c:	400204b8 	.word	0x400204b8
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 020a 	bic.w	r2, r2, #10
 8008c1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 8097 	beq.w	8008d68 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c42:	e091      	b.n	8008d68 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c48:	f003 031f 	and.w	r3, r3, #31
 8008c4c:	2208      	movs	r2, #8
 8008c4e:	409a      	lsls	r2, r3
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	4013      	ands	r3, r2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 8088 	beq.w	8008d6a <HAL_DMA_IRQHandler+0xe0e>
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f003 0308 	and.w	r3, r3, #8
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8082 	beq.w	8008d6a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a41      	ldr	r2, [pc, #260]	@ (8008d70 <HAL_DMA_IRQHandler+0xe14>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d04a      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a3f      	ldr	r2, [pc, #252]	@ (8008d74 <HAL_DMA_IRQHandler+0xe18>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d045      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a3e      	ldr	r2, [pc, #248]	@ (8008d78 <HAL_DMA_IRQHandler+0xe1c>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d040      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a3c      	ldr	r2, [pc, #240]	@ (8008d7c <HAL_DMA_IRQHandler+0xe20>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d03b      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a3b      	ldr	r2, [pc, #236]	@ (8008d80 <HAL_DMA_IRQHandler+0xe24>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d036      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a39      	ldr	r2, [pc, #228]	@ (8008d84 <HAL_DMA_IRQHandler+0xe28>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d031      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a38      	ldr	r2, [pc, #224]	@ (8008d88 <HAL_DMA_IRQHandler+0xe2c>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d02c      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a36      	ldr	r2, [pc, #216]	@ (8008d8c <HAL_DMA_IRQHandler+0xe30>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d027      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a35      	ldr	r2, [pc, #212]	@ (8008d90 <HAL_DMA_IRQHandler+0xe34>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d022      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a33      	ldr	r2, [pc, #204]	@ (8008d94 <HAL_DMA_IRQHandler+0xe38>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d01d      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a32      	ldr	r2, [pc, #200]	@ (8008d98 <HAL_DMA_IRQHandler+0xe3c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d018      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a30      	ldr	r2, [pc, #192]	@ (8008d9c <HAL_DMA_IRQHandler+0xe40>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d013      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8008da0 <HAL_DMA_IRQHandler+0xe44>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00e      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a2d      	ldr	r2, [pc, #180]	@ (8008da4 <HAL_DMA_IRQHandler+0xe48>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d009      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8008da8 <HAL_DMA_IRQHandler+0xe4c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d004      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a2a      	ldr	r2, [pc, #168]	@ (8008dac <HAL_DMA_IRQHandler+0xe50>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d108      	bne.n	8008d18 <HAL_DMA_IRQHandler+0xdbc>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f022 021c 	bic.w	r2, r2, #28
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	e007      	b.n	8008d28 <HAL_DMA_IRQHandler+0xdcc>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f022 020e 	bic.w	r2, r2, #14
 8008d26:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d2c:	f003 031f 	and.w	r3, r3, #31
 8008d30:	2201      	movs	r2, #1
 8008d32:	409a      	lsls	r2, r3
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d009      	beq.n	8008d6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	4798      	blx	r3
 8008d5e:	e004      	b.n	8008d6a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008d60:	bf00      	nop
 8008d62:	e002      	b.n	8008d6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d64:	bf00      	nop
 8008d66:	e000      	b.n	8008d6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d68:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008d6a:	3728      	adds	r7, #40	@ 0x28
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	40020010 	.word	0x40020010
 8008d74:	40020028 	.word	0x40020028
 8008d78:	40020040 	.word	0x40020040
 8008d7c:	40020058 	.word	0x40020058
 8008d80:	40020070 	.word	0x40020070
 8008d84:	40020088 	.word	0x40020088
 8008d88:	400200a0 	.word	0x400200a0
 8008d8c:	400200b8 	.word	0x400200b8
 8008d90:	40020410 	.word	0x40020410
 8008d94:	40020428 	.word	0x40020428
 8008d98:	40020440 	.word	0x40020440
 8008d9c:	40020458 	.word	0x40020458
 8008da0:	40020470 	.word	0x40020470
 8008da4:	40020488 	.word	0x40020488
 8008da8:	400204a0 	.word	0x400204a0
 8008dac:	400204b8 	.word	0x400204b8

08008db0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a7f      	ldr	r2, [pc, #508]	@ (8008fcc <DMA_SetConfig+0x21c>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d072      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a7d      	ldr	r2, [pc, #500]	@ (8008fd0 <DMA_SetConfig+0x220>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d06d      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a7c      	ldr	r2, [pc, #496]	@ (8008fd4 <DMA_SetConfig+0x224>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d068      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a7a      	ldr	r2, [pc, #488]	@ (8008fd8 <DMA_SetConfig+0x228>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d063      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a79      	ldr	r2, [pc, #484]	@ (8008fdc <DMA_SetConfig+0x22c>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d05e      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a77      	ldr	r2, [pc, #476]	@ (8008fe0 <DMA_SetConfig+0x230>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d059      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a76      	ldr	r2, [pc, #472]	@ (8008fe4 <DMA_SetConfig+0x234>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d054      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a74      	ldr	r2, [pc, #464]	@ (8008fe8 <DMA_SetConfig+0x238>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d04f      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a73      	ldr	r2, [pc, #460]	@ (8008fec <DMA_SetConfig+0x23c>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d04a      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a71      	ldr	r2, [pc, #452]	@ (8008ff0 <DMA_SetConfig+0x240>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d045      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a70      	ldr	r2, [pc, #448]	@ (8008ff4 <DMA_SetConfig+0x244>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d040      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a6e      	ldr	r2, [pc, #440]	@ (8008ff8 <DMA_SetConfig+0x248>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d03b      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a6d      	ldr	r2, [pc, #436]	@ (8008ffc <DMA_SetConfig+0x24c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d036      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a6b      	ldr	r2, [pc, #428]	@ (8009000 <DMA_SetConfig+0x250>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d031      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a6a      	ldr	r2, [pc, #424]	@ (8009004 <DMA_SetConfig+0x254>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d02c      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a68      	ldr	r2, [pc, #416]	@ (8009008 <DMA_SetConfig+0x258>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d027      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a67      	ldr	r2, [pc, #412]	@ (800900c <DMA_SetConfig+0x25c>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d022      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a65      	ldr	r2, [pc, #404]	@ (8009010 <DMA_SetConfig+0x260>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d01d      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a64      	ldr	r2, [pc, #400]	@ (8009014 <DMA_SetConfig+0x264>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d018      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a62      	ldr	r2, [pc, #392]	@ (8009018 <DMA_SetConfig+0x268>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d013      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a61      	ldr	r2, [pc, #388]	@ (800901c <DMA_SetConfig+0x26c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d00e      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a5f      	ldr	r2, [pc, #380]	@ (8009020 <DMA_SetConfig+0x270>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d009      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a5e      	ldr	r2, [pc, #376]	@ (8009024 <DMA_SetConfig+0x274>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d004      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a5c      	ldr	r2, [pc, #368]	@ (8009028 <DMA_SetConfig+0x278>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d101      	bne.n	8008ebe <DMA_SetConfig+0x10e>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e000      	b.n	8008ec0 <DMA_SetConfig+0x110>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00d      	beq.n	8008ee0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008ecc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d004      	beq.n	8008ee0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008ede:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a39      	ldr	r2, [pc, #228]	@ (8008fcc <DMA_SetConfig+0x21c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d04a      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a38      	ldr	r2, [pc, #224]	@ (8008fd0 <DMA_SetConfig+0x220>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d045      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a36      	ldr	r2, [pc, #216]	@ (8008fd4 <DMA_SetConfig+0x224>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d040      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a35      	ldr	r2, [pc, #212]	@ (8008fd8 <DMA_SetConfig+0x228>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d03b      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a33      	ldr	r2, [pc, #204]	@ (8008fdc <DMA_SetConfig+0x22c>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d036      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a32      	ldr	r2, [pc, #200]	@ (8008fe0 <DMA_SetConfig+0x230>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d031      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a30      	ldr	r2, [pc, #192]	@ (8008fe4 <DMA_SetConfig+0x234>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d02c      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8008fe8 <DMA_SetConfig+0x238>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d027      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a2d      	ldr	r2, [pc, #180]	@ (8008fec <DMA_SetConfig+0x23c>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d022      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8008ff0 <DMA_SetConfig+0x240>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d01d      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a2a      	ldr	r2, [pc, #168]	@ (8008ff4 <DMA_SetConfig+0x244>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d018      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a29      	ldr	r2, [pc, #164]	@ (8008ff8 <DMA_SetConfig+0x248>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d013      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a27      	ldr	r2, [pc, #156]	@ (8008ffc <DMA_SetConfig+0x24c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00e      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a26      	ldr	r2, [pc, #152]	@ (8009000 <DMA_SetConfig+0x250>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d009      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a24      	ldr	r2, [pc, #144]	@ (8009004 <DMA_SetConfig+0x254>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d004      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a23      	ldr	r2, [pc, #140]	@ (8009008 <DMA_SetConfig+0x258>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d101      	bne.n	8008f84 <DMA_SetConfig+0x1d4>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <DMA_SetConfig+0x1d6>
 8008f84:	2300      	movs	r3, #0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d059      	beq.n	800903e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f8e:	f003 031f 	and.w	r3, r3, #31
 8008f92:	223f      	movs	r2, #63	@ 0x3f
 8008f94:	409a      	lsls	r2, r3
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008fa8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	2b40      	cmp	r3, #64	@ 0x40
 8008fb8:	d138      	bne.n	800902c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008fca:	e086      	b.n	80090da <DMA_SetConfig+0x32a>
 8008fcc:	40020010 	.word	0x40020010
 8008fd0:	40020028 	.word	0x40020028
 8008fd4:	40020040 	.word	0x40020040
 8008fd8:	40020058 	.word	0x40020058
 8008fdc:	40020070 	.word	0x40020070
 8008fe0:	40020088 	.word	0x40020088
 8008fe4:	400200a0 	.word	0x400200a0
 8008fe8:	400200b8 	.word	0x400200b8
 8008fec:	40020410 	.word	0x40020410
 8008ff0:	40020428 	.word	0x40020428
 8008ff4:	40020440 	.word	0x40020440
 8008ff8:	40020458 	.word	0x40020458
 8008ffc:	40020470 	.word	0x40020470
 8009000:	40020488 	.word	0x40020488
 8009004:	400204a0 	.word	0x400204a0
 8009008:	400204b8 	.word	0x400204b8
 800900c:	58025408 	.word	0x58025408
 8009010:	5802541c 	.word	0x5802541c
 8009014:	58025430 	.word	0x58025430
 8009018:	58025444 	.word	0x58025444
 800901c:	58025458 	.word	0x58025458
 8009020:	5802546c 	.word	0x5802546c
 8009024:	58025480 	.word	0x58025480
 8009028:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	60da      	str	r2, [r3, #12]
}
 800903c:	e04d      	b.n	80090da <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a29      	ldr	r2, [pc, #164]	@ (80090e8 <DMA_SetConfig+0x338>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d022      	beq.n	800908e <DMA_SetConfig+0x2de>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a27      	ldr	r2, [pc, #156]	@ (80090ec <DMA_SetConfig+0x33c>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d01d      	beq.n	800908e <DMA_SetConfig+0x2de>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a26      	ldr	r2, [pc, #152]	@ (80090f0 <DMA_SetConfig+0x340>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d018      	beq.n	800908e <DMA_SetConfig+0x2de>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a24      	ldr	r2, [pc, #144]	@ (80090f4 <DMA_SetConfig+0x344>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d013      	beq.n	800908e <DMA_SetConfig+0x2de>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a23      	ldr	r2, [pc, #140]	@ (80090f8 <DMA_SetConfig+0x348>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d00e      	beq.n	800908e <DMA_SetConfig+0x2de>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a21      	ldr	r2, [pc, #132]	@ (80090fc <DMA_SetConfig+0x34c>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d009      	beq.n	800908e <DMA_SetConfig+0x2de>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a20      	ldr	r2, [pc, #128]	@ (8009100 <DMA_SetConfig+0x350>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d004      	beq.n	800908e <DMA_SetConfig+0x2de>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a1e      	ldr	r2, [pc, #120]	@ (8009104 <DMA_SetConfig+0x354>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d101      	bne.n	8009092 <DMA_SetConfig+0x2e2>
 800908e:	2301      	movs	r3, #1
 8009090:	e000      	b.n	8009094 <DMA_SetConfig+0x2e4>
 8009092:	2300      	movs	r3, #0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d020      	beq.n	80090da <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800909c:	f003 031f 	and.w	r3, r3, #31
 80090a0:	2201      	movs	r2, #1
 80090a2:	409a      	lsls	r2, r3
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	2b40      	cmp	r3, #64	@ 0x40
 80090b6:	d108      	bne.n	80090ca <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	60da      	str	r2, [r3, #12]
}
 80090c8:	e007      	b.n	80090da <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	60da      	str	r2, [r3, #12]
}
 80090da:	bf00      	nop
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	58025408 	.word	0x58025408
 80090ec:	5802541c 	.word	0x5802541c
 80090f0:	58025430 	.word	0x58025430
 80090f4:	58025444 	.word	0x58025444
 80090f8:	58025458 	.word	0x58025458
 80090fc:	5802546c 	.word	0x5802546c
 8009100:	58025480 	.word	0x58025480
 8009104:	58025494 	.word	0x58025494

08009108 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a42      	ldr	r2, [pc, #264]	@ (8009220 <DMA_CalcBaseAndBitshift+0x118>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d04a      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a41      	ldr	r2, [pc, #260]	@ (8009224 <DMA_CalcBaseAndBitshift+0x11c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d045      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a3f      	ldr	r2, [pc, #252]	@ (8009228 <DMA_CalcBaseAndBitshift+0x120>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d040      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a3e      	ldr	r2, [pc, #248]	@ (800922c <DMA_CalcBaseAndBitshift+0x124>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d03b      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a3c      	ldr	r2, [pc, #240]	@ (8009230 <DMA_CalcBaseAndBitshift+0x128>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d036      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a3b      	ldr	r2, [pc, #236]	@ (8009234 <DMA_CalcBaseAndBitshift+0x12c>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d031      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a39      	ldr	r2, [pc, #228]	@ (8009238 <DMA_CalcBaseAndBitshift+0x130>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d02c      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a38      	ldr	r2, [pc, #224]	@ (800923c <DMA_CalcBaseAndBitshift+0x134>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d027      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a36      	ldr	r2, [pc, #216]	@ (8009240 <DMA_CalcBaseAndBitshift+0x138>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d022      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a35      	ldr	r2, [pc, #212]	@ (8009244 <DMA_CalcBaseAndBitshift+0x13c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d01d      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a33      	ldr	r2, [pc, #204]	@ (8009248 <DMA_CalcBaseAndBitshift+0x140>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d018      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a32      	ldr	r2, [pc, #200]	@ (800924c <DMA_CalcBaseAndBitshift+0x144>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d013      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a30      	ldr	r2, [pc, #192]	@ (8009250 <DMA_CalcBaseAndBitshift+0x148>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d00e      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a2f      	ldr	r2, [pc, #188]	@ (8009254 <DMA_CalcBaseAndBitshift+0x14c>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d009      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a2d      	ldr	r2, [pc, #180]	@ (8009258 <DMA_CalcBaseAndBitshift+0x150>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d004      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a2c      	ldr	r2, [pc, #176]	@ (800925c <DMA_CalcBaseAndBitshift+0x154>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d101      	bne.n	80091b4 <DMA_CalcBaseAndBitshift+0xac>
 80091b0:	2301      	movs	r3, #1
 80091b2:	e000      	b.n	80091b6 <DMA_CalcBaseAndBitshift+0xae>
 80091b4:	2300      	movs	r3, #0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d024      	beq.n	8009204 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	3b10      	subs	r3, #16
 80091c2:	4a27      	ldr	r2, [pc, #156]	@ (8009260 <DMA_CalcBaseAndBitshift+0x158>)
 80091c4:	fba2 2303 	umull	r2, r3, r2, r3
 80091c8:	091b      	lsrs	r3, r3, #4
 80091ca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f003 0307 	and.w	r3, r3, #7
 80091d2:	4a24      	ldr	r2, [pc, #144]	@ (8009264 <DMA_CalcBaseAndBitshift+0x15c>)
 80091d4:	5cd3      	ldrb	r3, [r2, r3]
 80091d6:	461a      	mov	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b03      	cmp	r3, #3
 80091e0:	d908      	bls.n	80091f4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	4b1f      	ldr	r3, [pc, #124]	@ (8009268 <DMA_CalcBaseAndBitshift+0x160>)
 80091ea:	4013      	ands	r3, r2
 80091ec:	1d1a      	adds	r2, r3, #4
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80091f2:	e00d      	b.n	8009210 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	461a      	mov	r2, r3
 80091fa:	4b1b      	ldr	r3, [pc, #108]	@ (8009268 <DMA_CalcBaseAndBitshift+0x160>)
 80091fc:	4013      	ands	r3, r2
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	6593      	str	r3, [r2, #88]	@ 0x58
 8009202:	e005      	b.n	8009210 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009214:	4618      	mov	r0, r3
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	40020010 	.word	0x40020010
 8009224:	40020028 	.word	0x40020028
 8009228:	40020040 	.word	0x40020040
 800922c:	40020058 	.word	0x40020058
 8009230:	40020070 	.word	0x40020070
 8009234:	40020088 	.word	0x40020088
 8009238:	400200a0 	.word	0x400200a0
 800923c:	400200b8 	.word	0x400200b8
 8009240:	40020410 	.word	0x40020410
 8009244:	40020428 	.word	0x40020428
 8009248:	40020440 	.word	0x40020440
 800924c:	40020458 	.word	0x40020458
 8009250:	40020470 	.word	0x40020470
 8009254:	40020488 	.word	0x40020488
 8009258:	400204a0 	.word	0x400204a0
 800925c:	400204b8 	.word	0x400204b8
 8009260:	aaaaaaab 	.word	0xaaaaaaab
 8009264:	0801ef54 	.word	0x0801ef54
 8009268:	fffffc00 	.word	0xfffffc00

0800926c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d120      	bne.n	80092c2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009284:	2b03      	cmp	r3, #3
 8009286:	d858      	bhi.n	800933a <DMA_CheckFifoParam+0xce>
 8009288:	a201      	add	r2, pc, #4	@ (adr r2, 8009290 <DMA_CheckFifoParam+0x24>)
 800928a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928e:	bf00      	nop
 8009290:	080092a1 	.word	0x080092a1
 8009294:	080092b3 	.word	0x080092b3
 8009298:	080092a1 	.word	0x080092a1
 800929c:	0800933b 	.word	0x0800933b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d048      	beq.n	800933e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80092b0:	e045      	b.n	800933e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80092ba:	d142      	bne.n	8009342 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80092c0:	e03f      	b.n	8009342 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ca:	d123      	bne.n	8009314 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d838      	bhi.n	8009346 <DMA_CheckFifoParam+0xda>
 80092d4:	a201      	add	r2, pc, #4	@ (adr r2, 80092dc <DMA_CheckFifoParam+0x70>)
 80092d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092da:	bf00      	nop
 80092dc:	080092ed 	.word	0x080092ed
 80092e0:	080092f3 	.word	0x080092f3
 80092e4:	080092ed 	.word	0x080092ed
 80092e8:	08009305 	.word	0x08009305
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	73fb      	strb	r3, [r7, #15]
        break;
 80092f0:	e030      	b.n	8009354 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d025      	beq.n	800934a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009302:	e022      	b.n	800934a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009308:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800930c:	d11f      	bne.n	800934e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009312:	e01c      	b.n	800934e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009318:	2b02      	cmp	r3, #2
 800931a:	d902      	bls.n	8009322 <DMA_CheckFifoParam+0xb6>
 800931c:	2b03      	cmp	r3, #3
 800931e:	d003      	beq.n	8009328 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009320:	e018      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	73fb      	strb	r3, [r7, #15]
        break;
 8009326:	e015      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00e      	beq.n	8009352 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	73fb      	strb	r3, [r7, #15]
    break;
 8009338:	e00b      	b.n	8009352 <DMA_CheckFifoParam+0xe6>
        break;
 800933a:	bf00      	nop
 800933c:	e00a      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        break;
 800933e:	bf00      	nop
 8009340:	e008      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        break;
 8009342:	bf00      	nop
 8009344:	e006      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        break;
 8009346:	bf00      	nop
 8009348:	e004      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        break;
 800934a:	bf00      	nop
 800934c:	e002      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        break;
 800934e:	bf00      	nop
 8009350:	e000      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
    break;
 8009352:	bf00      	nop
    }
  }

  return status;
 8009354:	7bfb      	ldrb	r3, [r7, #15]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop

08009364 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a38      	ldr	r2, [pc, #224]	@ (8009458 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d022      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a36      	ldr	r2, [pc, #216]	@ (800945c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d01d      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a35      	ldr	r2, [pc, #212]	@ (8009460 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d018      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a33      	ldr	r2, [pc, #204]	@ (8009464 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d013      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a32      	ldr	r2, [pc, #200]	@ (8009468 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d00e      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a30      	ldr	r2, [pc, #192]	@ (800946c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d009      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a2f      	ldr	r2, [pc, #188]	@ (8009470 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d004      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a2d      	ldr	r2, [pc, #180]	@ (8009474 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d101      	bne.n	80093c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e000      	b.n	80093c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80093c6:	2300      	movs	r3, #0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d01a      	beq.n	8009402 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	3b08      	subs	r3, #8
 80093d4:	4a28      	ldr	r2, [pc, #160]	@ (8009478 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80093d6:	fba2 2303 	umull	r2, r3, r2, r3
 80093da:	091b      	lsrs	r3, r3, #4
 80093dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	4b26      	ldr	r3, [pc, #152]	@ (800947c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80093e2:	4413      	add	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	461a      	mov	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a24      	ldr	r2, [pc, #144]	@ (8009480 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80093f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f003 031f 	and.w	r3, r3, #31
 80093f8:	2201      	movs	r2, #1
 80093fa:	409a      	lsls	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009400:	e024      	b.n	800944c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	b2db      	uxtb	r3, r3
 8009408:	3b10      	subs	r3, #16
 800940a:	4a1e      	ldr	r2, [pc, #120]	@ (8009484 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800940c:	fba2 2303 	umull	r2, r3, r2, r3
 8009410:	091b      	lsrs	r3, r3, #4
 8009412:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	4a1c      	ldr	r2, [pc, #112]	@ (8009488 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d806      	bhi.n	800942a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	4a1b      	ldr	r2, [pc, #108]	@ (800948c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d902      	bls.n	800942a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	3308      	adds	r3, #8
 8009428:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	4b18      	ldr	r3, [pc, #96]	@ (8009490 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	461a      	mov	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a16      	ldr	r2, [pc, #88]	@ (8009494 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800943c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f003 031f 	and.w	r3, r3, #31
 8009444:	2201      	movs	r2, #1
 8009446:	409a      	lsls	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800944c:	bf00      	nop
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	58025408 	.word	0x58025408
 800945c:	5802541c 	.word	0x5802541c
 8009460:	58025430 	.word	0x58025430
 8009464:	58025444 	.word	0x58025444
 8009468:	58025458 	.word	0x58025458
 800946c:	5802546c 	.word	0x5802546c
 8009470:	58025480 	.word	0x58025480
 8009474:	58025494 	.word	0x58025494
 8009478:	cccccccd 	.word	0xcccccccd
 800947c:	16009600 	.word	0x16009600
 8009480:	58025880 	.word	0x58025880
 8009484:	aaaaaaab 	.word	0xaaaaaaab
 8009488:	400204b8 	.word	0x400204b8
 800948c:	4002040f 	.word	0x4002040f
 8009490:	10008200 	.word	0x10008200
 8009494:	40020880 	.word	0x40020880

08009498 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d04a      	beq.n	8009544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d847      	bhi.n	8009544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a25      	ldr	r2, [pc, #148]	@ (8009550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d022      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a24      	ldr	r2, [pc, #144]	@ (8009554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d01d      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a22      	ldr	r2, [pc, #136]	@ (8009558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d018      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a21      	ldr	r2, [pc, #132]	@ (800955c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d013      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a1f      	ldr	r2, [pc, #124]	@ (8009560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d00e      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a1e      	ldr	r2, [pc, #120]	@ (8009564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d009      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d004      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a1b      	ldr	r2, [pc, #108]	@ (800956c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d101      	bne.n	8009508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009504:	2301      	movs	r3, #1
 8009506:	e000      	b.n	800950a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009508:	2300      	movs	r3, #0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00a      	beq.n	8009524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	4b17      	ldr	r3, [pc, #92]	@ (8009570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009512:	4413      	add	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	461a      	mov	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a15      	ldr	r2, [pc, #84]	@ (8009574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009520:	671a      	str	r2, [r3, #112]	@ 0x70
 8009522:	e009      	b.n	8009538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	4b14      	ldr	r3, [pc, #80]	@ (8009578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	461a      	mov	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a11      	ldr	r2, [pc, #68]	@ (800957c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009536:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	3b01      	subs	r3, #1
 800953c:	2201      	movs	r2, #1
 800953e:	409a      	lsls	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009544:	bf00      	nop
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	58025408 	.word	0x58025408
 8009554:	5802541c 	.word	0x5802541c
 8009558:	58025430 	.word	0x58025430
 800955c:	58025444 	.word	0x58025444
 8009560:	58025458 	.word	0x58025458
 8009564:	5802546c 	.word	0x5802546c
 8009568:	58025480 	.word	0x58025480
 800956c:	58025494 	.word	0x58025494
 8009570:	1600963f 	.word	0x1600963f
 8009574:	58025940 	.word	0x58025940
 8009578:	1000823f 	.word	0x1000823f
 800957c:	40020940 	.word	0x40020940

08009580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8009580:	b480      	push	{r7}
 8009582:	b089      	sub	sp, #36	@ 0x24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800958a:	2300      	movs	r3, #0
 800958c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800958e:	4b86      	ldr	r3, [pc, #536]	@ (80097a8 <HAL_GPIO_Init+0x228>)
 8009590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009592:	e18c      	b.n	80098ae <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	2101      	movs	r1, #1
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	fa01 f303 	lsl.w	r3, r1, r3
 80095a0:	4013      	ands	r3, r2
 80095a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 817e 	beq.w	80098a8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f003 0303 	and.w	r3, r3, #3
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d005      	beq.n	80095c4 <HAL_GPIO_Init+0x44>
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f003 0303 	and.w	r3, r3, #3
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d130      	bne.n	8009626 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	005b      	lsls	r3, r3, #1
 80095ce:	2203      	movs	r2, #3
 80095d0:	fa02 f303 	lsl.w	r3, r2, r3
 80095d4:	43db      	mvns	r3, r3
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	4013      	ands	r3, r2
 80095da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	005b      	lsls	r3, r3, #1
 80095e4:	fa02 f303 	lsl.w	r3, r2, r3
 80095e8:	69ba      	ldr	r2, [r7, #24]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	69ba      	ldr	r2, [r7, #24]
 80095f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80095fa:	2201      	movs	r2, #1
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009602:	43db      	mvns	r3, r3
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	4013      	ands	r3, r2
 8009608:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	091b      	lsrs	r3, r3, #4
 8009610:	f003 0201 	and.w	r2, r3, #1
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	fa02 f303 	lsl.w	r3, r2, r3
 800961a:	69ba      	ldr	r2, [r7, #24]
 800961c:	4313      	orrs	r3, r2
 800961e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	69ba      	ldr	r2, [r7, #24]
 8009624:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f003 0303 	and.w	r3, r3, #3
 800962e:	2b03      	cmp	r3, #3
 8009630:	d017      	beq.n	8009662 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	005b      	lsls	r3, r3, #1
 800963c:	2203      	movs	r2, #3
 800963e:	fa02 f303 	lsl.w	r3, r2, r3
 8009642:	43db      	mvns	r3, r3
 8009644:	69ba      	ldr	r2, [r7, #24]
 8009646:	4013      	ands	r3, r2
 8009648:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	005b      	lsls	r3, r3, #1
 8009652:	fa02 f303 	lsl.w	r3, r2, r3
 8009656:	69ba      	ldr	r2, [r7, #24]
 8009658:	4313      	orrs	r3, r2
 800965a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	69ba      	ldr	r2, [r7, #24]
 8009660:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f003 0303 	and.w	r3, r3, #3
 800966a:	2b02      	cmp	r3, #2
 800966c:	d123      	bne.n	80096b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	08da      	lsrs	r2, r3, #3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	3208      	adds	r2, #8
 8009676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800967a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	f003 0307 	and.w	r3, r3, #7
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	220f      	movs	r2, #15
 8009686:	fa02 f303 	lsl.w	r3, r2, r3
 800968a:	43db      	mvns	r3, r3
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	4013      	ands	r3, r2
 8009690:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	691a      	ldr	r2, [r3, #16]
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	f003 0307 	and.w	r3, r3, #7
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	fa02 f303 	lsl.w	r3, r2, r3
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	08da      	lsrs	r2, r3, #3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	3208      	adds	r2, #8
 80096b0:	69b9      	ldr	r1, [r7, #24]
 80096b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	005b      	lsls	r3, r3, #1
 80096c0:	2203      	movs	r2, #3
 80096c2:	fa02 f303 	lsl.w	r3, r2, r3
 80096c6:	43db      	mvns	r3, r3
 80096c8:	69ba      	ldr	r2, [r7, #24]
 80096ca:	4013      	ands	r3, r2
 80096cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f003 0203 	and.w	r2, r3, #3
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	fa02 f303 	lsl.w	r3, r2, r3
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 80d8 	beq.w	80098a8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096f8:	4b2c      	ldr	r3, [pc, #176]	@ (80097ac <HAL_GPIO_Init+0x22c>)
 80096fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096fe:	4a2b      	ldr	r2, [pc, #172]	@ (80097ac <HAL_GPIO_Init+0x22c>)
 8009700:	f043 0302 	orr.w	r3, r3, #2
 8009704:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009708:	4b28      	ldr	r3, [pc, #160]	@ (80097ac <HAL_GPIO_Init+0x22c>)
 800970a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	60fb      	str	r3, [r7, #12]
 8009714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009716:	4a26      	ldr	r2, [pc, #152]	@ (80097b0 <HAL_GPIO_Init+0x230>)
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	089b      	lsrs	r3, r3, #2
 800971c:	3302      	adds	r3, #2
 800971e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	f003 0303 	and.w	r3, r3, #3
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	220f      	movs	r2, #15
 800972e:	fa02 f303 	lsl.w	r3, r2, r3
 8009732:	43db      	mvns	r3, r3
 8009734:	69ba      	ldr	r2, [r7, #24]
 8009736:	4013      	ands	r3, r2
 8009738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a1d      	ldr	r2, [pc, #116]	@ (80097b4 <HAL_GPIO_Init+0x234>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d04a      	beq.n	80097d8 <HAL_GPIO_Init+0x258>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a1c      	ldr	r2, [pc, #112]	@ (80097b8 <HAL_GPIO_Init+0x238>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d02b      	beq.n	80097a2 <HAL_GPIO_Init+0x222>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a1b      	ldr	r2, [pc, #108]	@ (80097bc <HAL_GPIO_Init+0x23c>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d025      	beq.n	800979e <HAL_GPIO_Init+0x21e>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a1a      	ldr	r2, [pc, #104]	@ (80097c0 <HAL_GPIO_Init+0x240>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d01f      	beq.n	800979a <HAL_GPIO_Init+0x21a>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a19      	ldr	r2, [pc, #100]	@ (80097c4 <HAL_GPIO_Init+0x244>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d019      	beq.n	8009796 <HAL_GPIO_Init+0x216>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a18      	ldr	r2, [pc, #96]	@ (80097c8 <HAL_GPIO_Init+0x248>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d013      	beq.n	8009792 <HAL_GPIO_Init+0x212>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a17      	ldr	r2, [pc, #92]	@ (80097cc <HAL_GPIO_Init+0x24c>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d00d      	beq.n	800978e <HAL_GPIO_Init+0x20e>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a16      	ldr	r2, [pc, #88]	@ (80097d0 <HAL_GPIO_Init+0x250>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d007      	beq.n	800978a <HAL_GPIO_Init+0x20a>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a15      	ldr	r2, [pc, #84]	@ (80097d4 <HAL_GPIO_Init+0x254>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d101      	bne.n	8009786 <HAL_GPIO_Init+0x206>
 8009782:	2309      	movs	r3, #9
 8009784:	e029      	b.n	80097da <HAL_GPIO_Init+0x25a>
 8009786:	230a      	movs	r3, #10
 8009788:	e027      	b.n	80097da <HAL_GPIO_Init+0x25a>
 800978a:	2307      	movs	r3, #7
 800978c:	e025      	b.n	80097da <HAL_GPIO_Init+0x25a>
 800978e:	2306      	movs	r3, #6
 8009790:	e023      	b.n	80097da <HAL_GPIO_Init+0x25a>
 8009792:	2305      	movs	r3, #5
 8009794:	e021      	b.n	80097da <HAL_GPIO_Init+0x25a>
 8009796:	2304      	movs	r3, #4
 8009798:	e01f      	b.n	80097da <HAL_GPIO_Init+0x25a>
 800979a:	2303      	movs	r3, #3
 800979c:	e01d      	b.n	80097da <HAL_GPIO_Init+0x25a>
 800979e:	2302      	movs	r3, #2
 80097a0:	e01b      	b.n	80097da <HAL_GPIO_Init+0x25a>
 80097a2:	2301      	movs	r3, #1
 80097a4:	e019      	b.n	80097da <HAL_GPIO_Init+0x25a>
 80097a6:	bf00      	nop
 80097a8:	58000080 	.word	0x58000080
 80097ac:	58024400 	.word	0x58024400
 80097b0:	58000400 	.word	0x58000400
 80097b4:	58020000 	.word	0x58020000
 80097b8:	58020400 	.word	0x58020400
 80097bc:	58020800 	.word	0x58020800
 80097c0:	58020c00 	.word	0x58020c00
 80097c4:	58021000 	.word	0x58021000
 80097c8:	58021400 	.word	0x58021400
 80097cc:	58021800 	.word	0x58021800
 80097d0:	58021c00 	.word	0x58021c00
 80097d4:	58022400 	.word	0x58022400
 80097d8:	2300      	movs	r3, #0
 80097da:	69fa      	ldr	r2, [r7, #28]
 80097dc:	f002 0203 	and.w	r2, r2, #3
 80097e0:	0092      	lsls	r2, r2, #2
 80097e2:	4093      	lsls	r3, r2
 80097e4:	69ba      	ldr	r2, [r7, #24]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80097ea:	4938      	ldr	r1, [pc, #224]	@ (80098cc <HAL_GPIO_Init+0x34c>)
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	089b      	lsrs	r3, r3, #2
 80097f0:	3302      	adds	r3, #2
 80097f2:	69ba      	ldr	r2, [r7, #24]
 80097f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80097f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	43db      	mvns	r3, r3
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	4013      	ands	r3, r2
 8009808:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009812:	2b00      	cmp	r3, #0
 8009814:	d003      	beq.n	800981e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009816:	69ba      	ldr	r2, [r7, #24]
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	4313      	orrs	r3, r2
 800981c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800981e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	43db      	mvns	r3, r3
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	4013      	ands	r3, r2
 8009836:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d003      	beq.n	800984c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009844:	69ba      	ldr	r2, [r7, #24]
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	4313      	orrs	r3, r2
 800984a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800984c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	43db      	mvns	r3, r3
 800985e:	69ba      	ldr	r2, [r7, #24]
 8009860:	4013      	ands	r3, r2
 8009862:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d003      	beq.n	8009878 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009870:	69ba      	ldr	r2, [r7, #24]
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	4313      	orrs	r3, r2
 8009876:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	69ba      	ldr	r2, [r7, #24]
 800987c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	43db      	mvns	r3, r3
 8009888:	69ba      	ldr	r2, [r7, #24]
 800988a:	4013      	ands	r3, r2
 800988c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800989a:	69ba      	ldr	r2, [r7, #24]
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	4313      	orrs	r3, r2
 80098a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	3301      	adds	r3, #1
 80098ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	fa22 f303 	lsr.w	r3, r2, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f47f ae6b 	bne.w	8009594 <HAL_GPIO_Init+0x14>
  }
}
 80098be:	bf00      	nop
 80098c0:	bf00      	nop
 80098c2:	3724      	adds	r7, #36	@ 0x24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	58000400 	.word	0x58000400

080098d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	807b      	strh	r3, [r7, #2]
 80098dc:	4613      	mov	r3, r2
 80098de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80098e0:	787b      	ldrb	r3, [r7, #1]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80098e6:	887a      	ldrh	r2, [r7, #2]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80098ec:	e003      	b.n	80098f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80098ee:	887b      	ldrh	r3, [r7, #2]
 80098f0:	041a      	lsls	r2, r3, #16
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	619a      	str	r2, [r3, #24]
}
 80098f6:	bf00      	nop
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009902:	b480      	push	{r7}
 8009904:	b085      	sub	sp, #20
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	460b      	mov	r3, r1
 800990c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009914:	887a      	ldrh	r2, [r7, #2]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	4013      	ands	r3, r2
 800991a:	041a      	lsls	r2, r3, #16
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	43d9      	mvns	r1, r3
 8009920:	887b      	ldrh	r3, [r7, #2]
 8009922:	400b      	ands	r3, r1
 8009924:	431a      	orrs	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	619a      	str	r2, [r3, #24]
}
 800992a:	bf00      	nop
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b086      	sub	sp, #24
 800993a:	af02      	add	r7, sp, #8
 800993c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e0fe      	b.n	8009b46 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b00      	cmp	r3, #0
 8009952:	d106      	bne.n	8009962 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f010 fbcb 	bl	801a0f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2203      	movs	r2, #3
 8009966:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4618      	mov	r0, r3
 8009970:	f008 fc1b 	bl	80121aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6818      	ldr	r0, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	7c1a      	ldrb	r2, [r3, #16]
 800997c:	f88d 2000 	strb.w	r2, [sp]
 8009980:	3304      	adds	r3, #4
 8009982:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009984:	f008 faec 	bl	8011f60 <USB_CoreInit>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d005      	beq.n	800999a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2202      	movs	r2, #2
 8009992:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e0d5      	b.n	8009b46 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2100      	movs	r1, #0
 80099a0:	4618      	mov	r0, r3
 80099a2:	f008 fc13 	bl	80121cc <USB_SetCurrentMode>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d005      	beq.n	80099b8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e0c6      	b.n	8009b46 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099b8:	2300      	movs	r3, #0
 80099ba:	73fb      	strb	r3, [r7, #15]
 80099bc:	e04a      	b.n	8009a54 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80099be:	7bfa      	ldrb	r2, [r7, #15]
 80099c0:	6879      	ldr	r1, [r7, #4]
 80099c2:	4613      	mov	r3, r2
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	4413      	add	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	440b      	add	r3, r1
 80099cc:	3315      	adds	r3, #21
 80099ce:	2201      	movs	r2, #1
 80099d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80099d2:	7bfa      	ldrb	r2, [r7, #15]
 80099d4:	6879      	ldr	r1, [r7, #4]
 80099d6:	4613      	mov	r3, r2
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	4413      	add	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	440b      	add	r3, r1
 80099e0:	3314      	adds	r3, #20
 80099e2:	7bfa      	ldrb	r2, [r7, #15]
 80099e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80099e6:	7bfa      	ldrb	r2, [r7, #15]
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	b298      	uxth	r0, r3
 80099ec:	6879      	ldr	r1, [r7, #4]
 80099ee:	4613      	mov	r3, r2
 80099f0:	00db      	lsls	r3, r3, #3
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	440b      	add	r3, r1
 80099f8:	332e      	adds	r3, #46	@ 0x2e
 80099fa:	4602      	mov	r2, r0
 80099fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80099fe:	7bfa      	ldrb	r2, [r7, #15]
 8009a00:	6879      	ldr	r1, [r7, #4]
 8009a02:	4613      	mov	r3, r2
 8009a04:	00db      	lsls	r3, r3, #3
 8009a06:	4413      	add	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	440b      	add	r3, r1
 8009a0c:	3318      	adds	r3, #24
 8009a0e:	2200      	movs	r2, #0
 8009a10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009a12:	7bfa      	ldrb	r2, [r7, #15]
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	4613      	mov	r3, r2
 8009a18:	00db      	lsls	r3, r3, #3
 8009a1a:	4413      	add	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	440b      	add	r3, r1
 8009a20:	331c      	adds	r3, #28
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009a26:	7bfa      	ldrb	r2, [r7, #15]
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	00db      	lsls	r3, r3, #3
 8009a2e:	4413      	add	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	440b      	add	r3, r1
 8009a34:	3320      	adds	r3, #32
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009a3a:	7bfa      	ldrb	r2, [r7, #15]
 8009a3c:	6879      	ldr	r1, [r7, #4]
 8009a3e:	4613      	mov	r3, r2
 8009a40:	00db      	lsls	r3, r3, #3
 8009a42:	4413      	add	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	440b      	add	r3, r1
 8009a48:	3324      	adds	r3, #36	@ 0x24
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	3301      	adds	r3, #1
 8009a52:	73fb      	strb	r3, [r7, #15]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	791b      	ldrb	r3, [r3, #4]
 8009a58:	7bfa      	ldrb	r2, [r7, #15]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d3af      	bcc.n	80099be <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a5e:	2300      	movs	r3, #0
 8009a60:	73fb      	strb	r3, [r7, #15]
 8009a62:	e044      	b.n	8009aee <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009a64:	7bfa      	ldrb	r2, [r7, #15]
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	00db      	lsls	r3, r3, #3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	440b      	add	r3, r1
 8009a72:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009a76:	2200      	movs	r2, #0
 8009a78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009a7a:	7bfa      	ldrb	r2, [r7, #15]
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	00db      	lsls	r3, r3, #3
 8009a82:	4413      	add	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	440b      	add	r3, r1
 8009a88:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009a8c:	7bfa      	ldrb	r2, [r7, #15]
 8009a8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009a90:	7bfa      	ldrb	r2, [r7, #15]
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	4613      	mov	r3, r2
 8009a96:	00db      	lsls	r3, r3, #3
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	440b      	add	r3, r1
 8009a9e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009aa6:	7bfa      	ldrb	r2, [r7, #15]
 8009aa8:	6879      	ldr	r1, [r7, #4]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	00db      	lsls	r3, r3, #3
 8009aae:	4413      	add	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	440b      	add	r3, r1
 8009ab4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009abc:	7bfa      	ldrb	r2, [r7, #15]
 8009abe:	6879      	ldr	r1, [r7, #4]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	00db      	lsls	r3, r3, #3
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	440b      	add	r3, r1
 8009aca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009ace:	2200      	movs	r2, #0
 8009ad0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009ad2:	7bfa      	ldrb	r2, [r7, #15]
 8009ad4:	6879      	ldr	r1, [r7, #4]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	00db      	lsls	r3, r3, #3
 8009ada:	4413      	add	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	440b      	add	r3, r1
 8009ae0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	3301      	adds	r3, #1
 8009aec:	73fb      	strb	r3, [r7, #15]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	791b      	ldrb	r3, [r3, #4]
 8009af2:	7bfa      	ldrb	r2, [r7, #15]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d3b5      	bcc.n	8009a64 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	7c1a      	ldrb	r2, [r3, #16]
 8009b00:	f88d 2000 	strb.w	r2, [sp]
 8009b04:	3304      	adds	r3, #4
 8009b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b08:	f008 fbac 	bl	8012264 <USB_DevInit>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d005      	beq.n	8009b1e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2202      	movs	r2, #2
 8009b16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e013      	b.n	8009b46 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	7b1b      	ldrb	r3, [r3, #12]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d102      	bne.n	8009b3a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f001 f99b 	bl	800ae70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f009 fbef 	bl	8013322 <USB_DevDisconnect>

  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b084      	sub	sp, #16
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d101      	bne.n	8009b6a <HAL_PCD_Start+0x1c>
 8009b66:	2302      	movs	r3, #2
 8009b68:	e022      	b.n	8009bb0 <HAL_PCD_Start+0x62>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d009      	beq.n	8009b92 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d105      	bne.n	8009b92 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f008 faf6 	bl	8012188 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f009 fb9d 	bl	80132e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009bb8:	b590      	push	{r4, r7, lr}
 8009bba:	b08d      	sub	sp, #52	@ 0x34
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f009 fc5b 	bl	801348a <USB_GetMode>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f040 84b9 	bne.w	800a54e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f009 fbbf 	bl	8013364 <USB_ReadInterrupts>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 84af 	beq.w	800a54c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	0a1b      	lsrs	r3, r3, #8
 8009bf8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f009 fbac 	bl	8013364 <USB_ReadInterrupts>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d107      	bne.n	8009c26 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	695a      	ldr	r2, [r3, #20]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f002 0202 	and.w	r2, r2, #2
 8009c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f009 fb9a 	bl	8013364 <USB_ReadInterrupts>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f003 0310 	and.w	r3, r3, #16
 8009c36:	2b10      	cmp	r3, #16
 8009c38:	d161      	bne.n	8009cfe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	699a      	ldr	r2, [r3, #24]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 0210 	bic.w	r2, r2, #16
 8009c48:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	f003 020f 	and.w	r2, r3, #15
 8009c56:	4613      	mov	r3, r2
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	4413      	add	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	4413      	add	r3, r2
 8009c66:	3304      	adds	r3, #4
 8009c68:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8009c70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c74:	d124      	bne.n	8009cc0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009c76:	69ba      	ldr	r2, [r7, #24]
 8009c78:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d035      	beq.n	8009cee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	091b      	lsrs	r3, r3, #4
 8009c8a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009c8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	461a      	mov	r2, r3
 8009c94:	6a38      	ldr	r0, [r7, #32]
 8009c96:	f009 f9d1 	bl	801303c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	091b      	lsrs	r3, r3, #4
 8009ca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ca6:	441a      	add	r2, r3
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	695a      	ldr	r2, [r3, #20]
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	091b      	lsrs	r3, r3, #4
 8009cb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cb8:	441a      	add	r2, r3
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	615a      	str	r2, [r3, #20]
 8009cbe:	e016      	b.n	8009cee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8009cc6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009cca:	d110      	bne.n	8009cee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009cd2:	2208      	movs	r2, #8
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6a38      	ldr	r0, [r7, #32]
 8009cd8:	f009 f9b0 	bl	801303c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	695a      	ldr	r2, [r3, #20]
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	091b      	lsrs	r3, r3, #4
 8009ce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ce8:	441a      	add	r2, r3
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	699a      	ldr	r2, [r3, #24]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f042 0210 	orr.w	r2, r2, #16
 8009cfc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f009 fb2e 	bl	8013364 <USB_ReadInterrupts>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009d0e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009d12:	f040 80a7 	bne.w	8009e64 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f009 fb33 	bl	801338a <USB_ReadDevAllOutEpInterrupt>
 8009d24:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8009d26:	e099      	b.n	8009e5c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 808e 	beq.w	8009e50 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d3a:	b2d2      	uxtb	r2, r2
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f009 fb57 	bl	80133f2 <USB_ReadDevOutEPInterrupt>
 8009d44:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00c      	beq.n	8009d6a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	2301      	movs	r3, #1
 8009d60:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009d62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fefd 	bl	800ab64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	f003 0308 	and.w	r3, r3, #8
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00c      	beq.n	8009d8e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d76:	015a      	lsls	r2, r3, #5
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d80:	461a      	mov	r2, r3
 8009d82:	2308      	movs	r3, #8
 8009d84:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009d86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 ffd3 	bl	800ad34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f003 0310 	and.w	r3, r3, #16
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d008      	beq.n	8009daa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da4:	461a      	mov	r2, r3
 8009da6:	2310      	movs	r3, #16
 8009da8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f003 0302 	and.w	r3, r3, #2
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d030      	beq.n	8009e16 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009db4:	6a3b      	ldr	r3, [r7, #32]
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dbc:	2b80      	cmp	r3, #128	@ 0x80
 8009dbe:	d109      	bne.n	8009dd4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	69fa      	ldr	r2, [r7, #28]
 8009dca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009dce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009dd2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	00db      	lsls	r3, r3, #3
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	4413      	add	r3, r2
 8009de6:	3304      	adds	r3, #4
 8009de8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	78db      	ldrb	r3, [r3, #3]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d108      	bne.n	8009e04 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2200      	movs	r2, #0
 8009df6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f010 fab2 	bl	801a368 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e06:	015a      	lsls	r2, r3, #5
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e10:	461a      	mov	r2, r3
 8009e12:	2302      	movs	r3, #2
 8009e14:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f003 0320 	and.w	r3, r3, #32
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d008      	beq.n	8009e32 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	2320      	movs	r3, #32
 8009e30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d009      	beq.n	8009e50 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e48:	461a      	mov	r2, r3
 8009e4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009e4e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e52:	3301      	adds	r3, #1
 8009e54:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e58:	085b      	lsrs	r3, r3, #1
 8009e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f47f af62 	bne.w	8009d28 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f009 fa7b 	bl	8013364 <USB_ReadInterrupts>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e78:	f040 80db 	bne.w	800a032 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f009 fa9c 	bl	80133be <USB_ReadDevAllInEpInterrupt>
 8009e86:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8009e8c:	e0cd      	b.n	800a02a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f000 80c2 	beq.w	800a01e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ea0:	b2d2      	uxtb	r2, r2
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f009 fac2 	bl	801342e <USB_ReadDevInEPInterrupt>
 8009eaa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d057      	beq.n	8009f66 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb8:	f003 030f 	and.w	r3, r3, #15
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	43db      	mvns	r3, r3
 8009ed0:	69f9      	ldr	r1, [r7, #28]
 8009ed2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	2301      	movs	r3, #1
 8009eea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	799b      	ldrb	r3, [r3, #6]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d132      	bne.n	8009f5a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009ef4:	6879      	ldr	r1, [r7, #4]
 8009ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ef8:	4613      	mov	r3, r2
 8009efa:	00db      	lsls	r3, r3, #3
 8009efc:	4413      	add	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	440b      	add	r3, r1
 8009f02:	3320      	adds	r3, #32
 8009f04:	6819      	ldr	r1, [r3, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	4413      	add	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4403      	add	r3, r0
 8009f14:	331c      	adds	r3, #28
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4419      	add	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f1e:	4613      	mov	r3, r2
 8009f20:	00db      	lsls	r3, r3, #3
 8009f22:	4413      	add	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4403      	add	r3, r0
 8009f28:	3320      	adds	r3, #32
 8009f2a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d113      	bne.n	8009f5a <HAL_PCD_IRQHandler+0x3a2>
 8009f32:	6879      	ldr	r1, [r7, #4]
 8009f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f36:	4613      	mov	r3, r2
 8009f38:	00db      	lsls	r3, r3, #3
 8009f3a:	4413      	add	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	440b      	add	r3, r1
 8009f40:	3324      	adds	r3, #36	@ 0x24
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d108      	bne.n	8009f5a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6818      	ldr	r0, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009f52:	461a      	mov	r2, r3
 8009f54:	2101      	movs	r1, #1
 8009f56:	f009 facb 	bl	80134f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f010 f966 	bl	801a232 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	f003 0308 	and.w	r3, r3, #8
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d008      	beq.n	8009f82 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	2308      	movs	r3, #8
 8009f80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	f003 0310 	and.w	r3, r3, #16
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d008      	beq.n	8009f9e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8e:	015a      	lsls	r2, r3, #5
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	4413      	add	r3, r2
 8009f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f98:	461a      	mov	r2, r3
 8009f9a:	2310      	movs	r3, #16
 8009f9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d008      	beq.n	8009fba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009faa:	015a      	lsls	r2, r3, #5
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	4413      	add	r3, r2
 8009fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	2340      	movs	r3, #64	@ 0x40
 8009fb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	f003 0302 	and.w	r3, r3, #2
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d023      	beq.n	800a00c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009fc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009fc6:	6a38      	ldr	r0, [r7, #32]
 8009fc8:	f008 faaa 	bl	8012520 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fce:	4613      	mov	r3, r2
 8009fd0:	00db      	lsls	r3, r3, #3
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	3310      	adds	r3, #16
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	4413      	add	r3, r2
 8009fdc:	3304      	adds	r3, #4
 8009fde:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	78db      	ldrb	r3, [r3, #3]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d108      	bne.n	8009ffa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2200      	movs	r2, #0
 8009fec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f010 f9c9 	bl	801a38c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	4413      	add	r3, r2
 800a002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a006:	461a      	mov	r2, r3
 800a008:	2302      	movs	r3, #2
 800a00a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a016:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fd17 	bl	800aa4c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a020:	3301      	adds	r3, #1
 800a022:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a026:	085b      	lsrs	r3, r3, #1
 800a028:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f47f af2e 	bne.w	8009e8e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4618      	mov	r0, r3
 800a038:	f009 f994 	bl	8013364 <USB_ReadInterrupts>
 800a03c:	4603      	mov	r3, r0
 800a03e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a042:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a046:	d122      	bne.n	800a08e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	69fa      	ldr	r2, [r7, #28]
 800a052:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a056:	f023 0301 	bic.w	r3, r3, #1
 800a05a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800a062:	2b01      	cmp	r3, #1
 800a064:	d108      	bne.n	800a078 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a06e:	2100      	movs	r1, #0
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 ff21 	bl	800aeb8 <HAL_PCDEx_LPM_Callback>
 800a076:	e002      	b.n	800a07e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f010 f967 	bl	801a34c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	695a      	ldr	r2, [r3, #20]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800a08c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4618      	mov	r0, r3
 800a094:	f009 f966 	bl	8013364 <USB_ReadInterrupts>
 800a098:	4603      	mov	r3, r0
 800a09a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a09e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0a2:	d112      	bne.n	800a0ca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d102      	bne.n	800a0ba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f010 f923 	bl	801a300 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	695a      	ldr	r2, [r3, #20]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800a0c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f009 f948 	bl	8013364 <USB_ReadInterrupts>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0de:	d121      	bne.n	800a124 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	695a      	ldr	r2, [r3, #20]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800a0ee:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d111      	bne.n	800a11e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a108:	089b      	lsrs	r3, r3, #2
 800a10a:	f003 020f 	and.w	r2, r3, #15
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a114:	2101      	movs	r1, #1
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fece 	bl	800aeb8 <HAL_PCDEx_LPM_Callback>
 800a11c:	e002      	b.n	800a124 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f010 f8ee 	bl	801a300 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4618      	mov	r0, r3
 800a12a:	f009 f91b 	bl	8013364 <USB_ReadInterrupts>
 800a12e:	4603      	mov	r3, r0
 800a130:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a138:	f040 80b7 	bne.w	800a2aa <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	69fa      	ldr	r2, [r7, #28]
 800a146:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a14a:	f023 0301 	bic.w	r3, r3, #1
 800a14e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2110      	movs	r1, #16
 800a156:	4618      	mov	r0, r3
 800a158:	f008 f9e2 	bl	8012520 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a15c:	2300      	movs	r3, #0
 800a15e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a160:	e046      	b.n	800a1f0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a16e:	461a      	mov	r2, r3
 800a170:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a174:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a186:	0151      	lsls	r1, r2, #5
 800a188:	69fa      	ldr	r2, [r7, #28]
 800a18a:	440a      	add	r2, r1
 800a18c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a190:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a194:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a1a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ac:	015a      	lsls	r2, r3, #5
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1ba:	0151      	lsls	r1, r2, #5
 800a1bc:	69fa      	ldr	r2, [r7, #28]
 800a1be:	440a      	add	r2, r1
 800a1c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a1ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1cc:	015a      	lsls	r2, r3, #5
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1da:	0151      	lsls	r1, r2, #5
 800a1dc:	69fa      	ldr	r2, [r7, #28]
 800a1de:	440a      	add	r2, r1
 800a1e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a1e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	791b      	ldrb	r3, [r3, #4]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d3b2      	bcc.n	800a162 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a202:	69db      	ldr	r3, [r3, #28]
 800a204:	69fa      	ldr	r2, [r7, #28]
 800a206:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a20a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800a20e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	7bdb      	ldrb	r3, [r3, #15]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d016      	beq.n	800a246 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a222:	69fa      	ldr	r2, [r7, #28]
 800a224:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a228:	f043 030b 	orr.w	r3, r3, #11
 800a22c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a238:	69fa      	ldr	r2, [r7, #28]
 800a23a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a23e:	f043 030b 	orr.w	r3, r3, #11
 800a242:	6453      	str	r3, [r2, #68]	@ 0x44
 800a244:	e015      	b.n	800a272 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a24c:	695a      	ldr	r2, [r3, #20]
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a254:	4619      	mov	r1, r3
 800a256:	f242 032b 	movw	r3, #8235	@ 0x202b
 800a25a:	4313      	orrs	r3, r2
 800a25c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	69fa      	ldr	r2, [r7, #28]
 800a268:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a26c:	f043 030b 	orr.w	r3, r3, #11
 800a270:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	69fa      	ldr	r2, [r7, #28]
 800a27c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a280:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a284:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6818      	ldr	r0, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a294:	461a      	mov	r2, r3
 800a296:	f009 f92b 	bl	80134f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	695a      	ldr	r2, [r3, #20]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800a2a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f009 f858 	bl	8013364 <USB_ReadInterrupts>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2be:	d123      	bne.n	800a308 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f009 f8ef 	bl	80134a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f008 f99f 	bl	8012612 <USB_GetDevSpeed>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681c      	ldr	r4, [r3, #0]
 800a2e0:	f001 fdb4 	bl	800be4c <HAL_RCC_GetHCLKFreq>
 800a2e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f007 fea9 	bl	8012044 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f00f ffdc 	bl	801a2b0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	695a      	ldr	r2, [r3, #20]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800a306:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f009 f829 	bl	8013364 <USB_ReadInterrupts>
 800a312:	4603      	mov	r3, r0
 800a314:	f003 0308 	and.w	r3, r3, #8
 800a318:	2b08      	cmp	r3, #8
 800a31a:	d10a      	bne.n	800a332 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f00f ffa3 	bl	801a268 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	695a      	ldr	r2, [r3, #20]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f002 0208 	and.w	r2, r2, #8
 800a330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4618      	mov	r0, r3
 800a338:	f009 f814 	bl	8013364 <USB_ReadInterrupts>
 800a33c:	4603      	mov	r3, r0
 800a33e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a342:	2b80      	cmp	r3, #128	@ 0x80
 800a344:	d123      	bne.n	800a38e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a34e:	6a3b      	ldr	r3, [r7, #32]
 800a350:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a352:	2301      	movs	r3, #1
 800a354:	627b      	str	r3, [r7, #36]	@ 0x24
 800a356:	e014      	b.n	800a382 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a35c:	4613      	mov	r3, r2
 800a35e:	00db      	lsls	r3, r3, #3
 800a360:	4413      	add	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	440b      	add	r3, r1
 800a366:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d105      	bne.n	800a37c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a372:	b2db      	uxtb	r3, r3
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fb0a 	bl	800a990 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37e:	3301      	adds	r3, #1
 800a380:	627b      	str	r3, [r7, #36]	@ 0x24
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	791b      	ldrb	r3, [r3, #4]
 800a386:	461a      	mov	r2, r3
 800a388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d3e4      	bcc.n	800a358 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4618      	mov	r0, r3
 800a394:	f008 ffe6 	bl	8013364 <USB_ReadInterrupts>
 800a398:	4603      	mov	r3, r0
 800a39a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a39e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3a2:	d13c      	bne.n	800a41e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3a8:	e02b      	b.n	800a402 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ac:	015a      	lsls	r2, r3, #5
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a3ba:	6879      	ldr	r1, [r7, #4]
 800a3bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3be:	4613      	mov	r3, r2
 800a3c0:	00db      	lsls	r3, r3, #3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	440b      	add	r3, r1
 800a3c8:	3318      	adds	r3, #24
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d115      	bne.n	800a3fc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a3d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	da12      	bge.n	800a3fc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a3d6:	6879      	ldr	r1, [r7, #4]
 800a3d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3da:	4613      	mov	r3, r2
 800a3dc:	00db      	lsls	r3, r3, #3
 800a3de:	4413      	add	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	440b      	add	r3, r1
 800a3e4:	3317      	adds	r3, #23
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 faca 	bl	800a990 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fe:	3301      	adds	r3, #1
 800a400:	627b      	str	r3, [r7, #36]	@ 0x24
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	791b      	ldrb	r3, [r3, #4]
 800a406:	461a      	mov	r2, r3
 800a408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d3cd      	bcc.n	800a3aa <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	695a      	ldr	r2, [r3, #20]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800a41c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4618      	mov	r0, r3
 800a424:	f008 ff9e 	bl	8013364 <USB_ReadInterrupts>
 800a428:	4603      	mov	r3, r0
 800a42a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a42e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a432:	d156      	bne.n	800a4e2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a434:	2301      	movs	r3, #1
 800a436:	627b      	str	r3, [r7, #36]	@ 0x24
 800a438:	e045      	b.n	800a4c6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	4413      	add	r3, r2
 800a442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a44a:	6879      	ldr	r1, [r7, #4]
 800a44c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a44e:	4613      	mov	r3, r2
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	4413      	add	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	440b      	add	r3, r1
 800a458:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d12e      	bne.n	800a4c0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a462:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a464:	2b00      	cmp	r3, #0
 800a466:	da2b      	bge.n	800a4c0 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	0c1a      	lsrs	r2, r3, #16
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800a472:	4053      	eors	r3, r2
 800a474:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d121      	bne.n	800a4c0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a47c:	6879      	ldr	r1, [r7, #4]
 800a47e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a480:	4613      	mov	r3, r2
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	4413      	add	r3, r2
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	440b      	add	r3, r1
 800a48a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800a48e:	2201      	movs	r2, #1
 800a490:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a492:	6a3b      	ldr	r3, [r7, #32]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a49e:	6a3b      	ldr	r3, [r7, #32]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10a      	bne.n	800a4c0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	69fa      	ldr	r2, [r7, #28]
 800a4b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a4bc:	6053      	str	r3, [r2, #4]
            break;
 800a4be:	e008      	b.n	800a4d2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	791b      	ldrb	r3, [r3, #4]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d3b3      	bcc.n	800a43a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	695a      	ldr	r2, [r3, #20]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800a4e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f008 ff3c 	bl	8013364 <USB_ReadInterrupts>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4f6:	d10a      	bne.n	800a50e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f00f ff59 	bl	801a3b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	695a      	ldr	r2, [r3, #20]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800a50c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4618      	mov	r0, r3
 800a514:	f008 ff26 	bl	8013364 <USB_ReadInterrupts>
 800a518:	4603      	mov	r3, r0
 800a51a:	f003 0304 	and.w	r3, r3, #4
 800a51e:	2b04      	cmp	r3, #4
 800a520:	d115      	bne.n	800a54e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	f003 0304 	and.w	r3, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f00f ff51 	bl	801a3dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6859      	ldr	r1, [r3, #4]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	69ba      	ldr	r2, [r7, #24]
 800a546:	430a      	orrs	r2, r1
 800a548:	605a      	str	r2, [r3, #4]
 800a54a:	e000      	b.n	800a54e <HAL_PCD_IRQHandler+0x996>
      return;
 800a54c:	bf00      	nop
    }
  }
}
 800a54e:	3734      	adds	r7, #52	@ 0x34
 800a550:	46bd      	mov	sp, r7
 800a552:	bd90      	pop	{r4, r7, pc}

0800a554 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a566:	2b01      	cmp	r3, #1
 800a568:	d101      	bne.n	800a56e <HAL_PCD_SetAddress+0x1a>
 800a56a:	2302      	movs	r3, #2
 800a56c:	e012      	b.n	800a594 <HAL_PCD_SetAddress+0x40>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	78fa      	ldrb	r2, [r7, #3]
 800a57a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	78fa      	ldrb	r2, [r7, #3]
 800a582:	4611      	mov	r1, r2
 800a584:	4618      	mov	r0, r3
 800a586:	f008 fe85 	bl	8013294 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	4608      	mov	r0, r1
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	70fb      	strb	r3, [r7, #3]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	803b      	strh	r3, [r7, #0]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a5ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	da0f      	bge.n	800a5e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5c2:	78fb      	ldrb	r3, [r7, #3]
 800a5c4:	f003 020f 	and.w	r2, r3, #15
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	00db      	lsls	r3, r3, #3
 800a5cc:	4413      	add	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	3310      	adds	r3, #16
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	705a      	strb	r2, [r3, #1]
 800a5e0:	e00f      	b.n	800a602 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a5e2:	78fb      	ldrb	r3, [r7, #3]
 800a5e4:	f003 020f 	and.w	r2, r3, #15
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	00db      	lsls	r3, r3, #3
 800a5ec:	4413      	add	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a602:	78fb      	ldrb	r3, [r7, #3]
 800a604:	f003 030f 	and.w	r3, r3, #15
 800a608:	b2da      	uxtb	r2, r3
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800a60e:	883b      	ldrh	r3, [r7, #0]
 800a610:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	78ba      	ldrb	r2, [r7, #2]
 800a61c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	785b      	ldrb	r3, [r3, #1]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d004      	beq.n	800a630 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a630:	78bb      	ldrb	r3, [r7, #2]
 800a632:	2b02      	cmp	r3, #2
 800a634:	d102      	bne.n	800a63c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a642:	2b01      	cmp	r3, #1
 800a644:	d101      	bne.n	800a64a <HAL_PCD_EP_Open+0xae>
 800a646:	2302      	movs	r3, #2
 800a648:	e00e      	b.n	800a668 <HAL_PCD_EP_Open+0xcc>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68f9      	ldr	r1, [r7, #12]
 800a658:	4618      	mov	r0, r3
 800a65a:	f007 ffff 	bl	801265c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800a666:	7afb      	ldrb	r3, [r7, #11]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a67c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a680:	2b00      	cmp	r3, #0
 800a682:	da0f      	bge.n	800a6a4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a684:	78fb      	ldrb	r3, [r7, #3]
 800a686:	f003 020f 	and.w	r2, r3, #15
 800a68a:	4613      	mov	r3, r2
 800a68c:	00db      	lsls	r3, r3, #3
 800a68e:	4413      	add	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	3310      	adds	r3, #16
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	4413      	add	r3, r2
 800a698:	3304      	adds	r3, #4
 800a69a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	705a      	strb	r2, [r3, #1]
 800a6a2:	e00f      	b.n	800a6c4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a6a4:	78fb      	ldrb	r3, [r7, #3]
 800a6a6:	f003 020f 	and.w	r2, r3, #15
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	00db      	lsls	r3, r3, #3
 800a6ae:	4413      	add	r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a6c4:	78fb      	ldrb	r3, [r7, #3]
 800a6c6:	f003 030f 	and.w	r3, r3, #15
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d101      	bne.n	800a6de <HAL_PCD_EP_Close+0x6e>
 800a6da:	2302      	movs	r3, #2
 800a6dc:	e00e      	b.n	800a6fc <HAL_PCD_EP_Close+0x8c>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68f9      	ldr	r1, [r7, #12]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f008 f83d 	bl	801276c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	607a      	str	r2, [r7, #4]
 800a70e:	603b      	str	r3, [r7, #0]
 800a710:	460b      	mov	r3, r1
 800a712:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a714:	7afb      	ldrb	r3, [r7, #11]
 800a716:	f003 020f 	and.w	r2, r3, #15
 800a71a:	4613      	mov	r3, r2
 800a71c:	00db      	lsls	r3, r3, #3
 800a71e:	4413      	add	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	4413      	add	r3, r2
 800a72a:	3304      	adds	r3, #4
 800a72c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	2200      	movs	r2, #0
 800a73e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	2200      	movs	r2, #0
 800a744:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a746:	7afb      	ldrb	r3, [r7, #11]
 800a748:	f003 030f 	and.w	r3, r3, #15
 800a74c:	b2da      	uxtb	r2, r3
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	799b      	ldrb	r3, [r3, #6]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d102      	bne.n	800a760 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6818      	ldr	r0, [r3, #0]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	799b      	ldrb	r3, [r3, #6]
 800a768:	461a      	mov	r2, r3
 800a76a:	6979      	ldr	r1, [r7, #20]
 800a76c:	f008 f8da 	bl	8012924 <USB_EPStartXfer>

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	460b      	mov	r3, r1
 800a784:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a786:	78fb      	ldrb	r3, [r7, #3]
 800a788:	f003 020f 	and.w	r2, r3, #15
 800a78c:	6879      	ldr	r1, [r7, #4]
 800a78e:	4613      	mov	r3, r2
 800a790:	00db      	lsls	r3, r3, #3
 800a792:	4413      	add	r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	440b      	add	r3, r1
 800a798:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800a79c:	681b      	ldr	r3, [r3, #0]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b086      	sub	sp, #24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7ba:	7afb      	ldrb	r3, [r7, #11]
 800a7bc:	f003 020f 	and.w	r2, r3, #15
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	00db      	lsls	r3, r3, #3
 800a7c4:	4413      	add	r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	3310      	adds	r3, #16
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a7ea:	7afb      	ldrb	r3, [r7, #11]
 800a7ec:	f003 030f 	and.w	r3, r3, #15
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	799b      	ldrb	r3, [r3, #6]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d102      	bne.n	800a804 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	799b      	ldrb	r3, [r3, #6]
 800a80c:	461a      	mov	r2, r3
 800a80e:	6979      	ldr	r1, [r7, #20]
 800a810:	f008 f888 	bl	8012924 <USB_EPStartXfer>

  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3718      	adds	r7, #24
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b084      	sub	sp, #16
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	460b      	mov	r3, r1
 800a828:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a82a:	78fb      	ldrb	r3, [r7, #3]
 800a82c:	f003 030f 	and.w	r3, r3, #15
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	7912      	ldrb	r2, [r2, #4]
 800a834:	4293      	cmp	r3, r2
 800a836:	d901      	bls.n	800a83c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e04f      	b.n	800a8dc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a83c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a840:	2b00      	cmp	r3, #0
 800a842:	da0f      	bge.n	800a864 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	f003 020f 	and.w	r2, r3, #15
 800a84a:	4613      	mov	r3, r2
 800a84c:	00db      	lsls	r3, r3, #3
 800a84e:	4413      	add	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	3310      	adds	r3, #16
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	4413      	add	r3, r2
 800a858:	3304      	adds	r3, #4
 800a85a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	705a      	strb	r2, [r3, #1]
 800a862:	e00d      	b.n	800a880 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a864:	78fa      	ldrb	r2, [r7, #3]
 800a866:	4613      	mov	r3, r2
 800a868:	00db      	lsls	r3, r3, #3
 800a86a:	4413      	add	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	4413      	add	r3, r2
 800a876:	3304      	adds	r3, #4
 800a878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2200      	movs	r2, #0
 800a87e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2201      	movs	r2, #1
 800a884:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a886:	78fb      	ldrb	r3, [r7, #3]
 800a888:	f003 030f 	and.w	r3, r3, #15
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d101      	bne.n	800a8a0 <HAL_PCD_EP_SetStall+0x82>
 800a89c:	2302      	movs	r3, #2
 800a89e:	e01d      	b.n	800a8dc <HAL_PCD_EP_SetStall+0xbe>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68f9      	ldr	r1, [r7, #12]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f008 fc1c 	bl	80130ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a8b4:	78fb      	ldrb	r3, [r7, #3]
 800a8b6:	f003 030f 	and.w	r3, r3, #15
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d109      	bne.n	800a8d2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6818      	ldr	r0, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	7999      	ldrb	r1, [r3, #6]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	f008 fe0f 	bl	80134f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	f003 030f 	and.w	r3, r3, #15
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	7912      	ldrb	r2, [r2, #4]
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d901      	bls.n	800a902 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e042      	b.n	800a988 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a906:	2b00      	cmp	r3, #0
 800a908:	da0f      	bge.n	800a92a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a90a:	78fb      	ldrb	r3, [r7, #3]
 800a90c:	f003 020f 	and.w	r2, r3, #15
 800a910:	4613      	mov	r3, r2
 800a912:	00db      	lsls	r3, r3, #3
 800a914:	4413      	add	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	3310      	adds	r3, #16
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	4413      	add	r3, r2
 800a91e:	3304      	adds	r3, #4
 800a920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2201      	movs	r2, #1
 800a926:	705a      	strb	r2, [r3, #1]
 800a928:	e00f      	b.n	800a94a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a92a:	78fb      	ldrb	r3, [r7, #3]
 800a92c:	f003 020f 	and.w	r2, r3, #15
 800a930:	4613      	mov	r3, r2
 800a932:	00db      	lsls	r3, r3, #3
 800a934:	4413      	add	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	4413      	add	r3, r2
 800a940:	3304      	adds	r3, #4
 800a942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a950:	78fb      	ldrb	r3, [r7, #3]
 800a952:	f003 030f 	and.w	r3, r3, #15
 800a956:	b2da      	uxtb	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a962:	2b01      	cmp	r3, #1
 800a964:	d101      	bne.n	800a96a <HAL_PCD_EP_ClrStall+0x86>
 800a966:	2302      	movs	r3, #2
 800a968:	e00e      	b.n	800a988 <HAL_PCD_EP_ClrStall+0xa4>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68f9      	ldr	r1, [r7, #12]
 800a978:	4618      	mov	r0, r3
 800a97a:	f008 fc25 	bl	80131c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	460b      	mov	r3, r1
 800a99a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a99c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	da0c      	bge.n	800a9be <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a9a4:	78fb      	ldrb	r3, [r7, #3]
 800a9a6:	f003 020f 	and.w	r2, r3, #15
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	3310      	adds	r3, #16
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	60fb      	str	r3, [r7, #12]
 800a9bc:	e00c      	b.n	800a9d8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	f003 020f 	and.w	r2, r3, #15
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	00db      	lsls	r3, r3, #3
 800a9c8:	4413      	add	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68f9      	ldr	r1, [r7, #12]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f008 fa44 	bl	8012e6c <USB_EPStopXfer>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a9e8:	7afb      	ldrb	r3, [r7, #11]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b082      	sub	sp, #8
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d101      	bne.n	800aa0c <HAL_PCD_EP_Flush+0x1a>
 800aa08:	2302      	movs	r3, #2
 800aa0a:	e01b      	b.n	800aa44 <HAL_PCD_EP_Flush+0x52>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 800aa14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	da09      	bge.n	800aa30 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	78fb      	ldrb	r3, [r7, #3]
 800aa22:	f003 030f 	and.w	r3, r3, #15
 800aa26:	4619      	mov	r1, r3
 800aa28:	4610      	mov	r0, r2
 800aa2a:	f007 fd79 	bl	8012520 <USB_FlushTxFifo>
 800aa2e:	e004      	b.n	800aa3a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f007 fda5 	bl	8012584 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b08a      	sub	sp, #40	@ 0x28
 800aa50:	af02      	add	r7, sp, #8
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	4613      	mov	r3, r2
 800aa64:	00db      	lsls	r3, r3, #3
 800aa66:	4413      	add	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	3310      	adds	r3, #16
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	4413      	add	r3, r2
 800aa70:	3304      	adds	r3, #4
 800aa72:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	695a      	ldr	r2, [r3, #20]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d901      	bls.n	800aa84 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e06b      	b.n	800ab5c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	691a      	ldr	r2, [r3, #16]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	695b      	ldr	r3, [r3, #20]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	69fa      	ldr	r2, [r7, #28]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d902      	bls.n	800aaa0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	3303      	adds	r3, #3
 800aaa4:	089b      	lsrs	r3, r3, #2
 800aaa6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800aaa8:	e02a      	b.n	800ab00 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	691a      	ldr	r2, [r3, #16]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	695b      	ldr	r3, [r3, #20]
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	69fa      	ldr	r2, [r7, #28]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d902      	bls.n	800aac6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	3303      	adds	r3, #3
 800aaca:	089b      	lsrs	r3, r3, #2
 800aacc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	68d9      	ldr	r1, [r3, #12]
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	4603      	mov	r3, r0
 800aae2:	6978      	ldr	r0, [r7, #20]
 800aae4:	f008 fa6c 	bl	8012fc0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	68da      	ldr	r2, [r3, #12]
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	441a      	add	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	695a      	ldr	r2, [r3, #20]
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	441a      	add	r2, r3
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	015a      	lsls	r2, r3, #5
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	4413      	add	r3, r2
 800ab08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab0c:	699b      	ldr	r3, [r3, #24]
 800ab0e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ab10:	69ba      	ldr	r2, [r7, #24]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d809      	bhi.n	800ab2a <PCD_WriteEmptyTxFifo+0xde>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	695a      	ldr	r2, [r3, #20]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d203      	bcs.n	800ab2a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1bf      	bne.n	800aaaa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	691a      	ldr	r2, [r3, #16]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d811      	bhi.n	800ab5a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	f003 030f 	and.w	r3, r3, #15
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab42:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	43db      	mvns	r3, r3
 800ab50:	6939      	ldr	r1, [r7, #16]
 800ab52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab56:	4013      	ands	r3, r2
 800ab58:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3720      	adds	r7, #32
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b088      	sub	sp, #32
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	333c      	adds	r3, #60	@ 0x3c
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	015a      	lsls	r2, r3, #5
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	4413      	add	r3, r2
 800ab8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	799b      	ldrb	r3, [r3, #6]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d17b      	bne.n	800ac92 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	f003 0308 	and.w	r3, r3, #8
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d015      	beq.n	800abd0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	4a61      	ldr	r2, [pc, #388]	@ (800ad2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	f240 80b9 	bls.w	800ad20 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 80b3 	beq.w	800ad20 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	015a      	lsls	r2, r3, #5
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	4413      	add	r3, r2
 800abc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abc6:	461a      	mov	r2, r3
 800abc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abcc:	6093      	str	r3, [r2, #8]
 800abce:	e0a7      	b.n	800ad20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	f003 0320 	and.w	r3, r3, #32
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d009      	beq.n	800abee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abe6:	461a      	mov	r2, r3
 800abe8:	2320      	movs	r3, #32
 800abea:	6093      	str	r3, [r2, #8]
 800abec:	e098      	b.n	800ad20 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f040 8093 	bne.w	800ad20 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	4a4b      	ldr	r2, [pc, #300]	@ (800ad2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d90f      	bls.n	800ac22 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00a      	beq.n	800ac22 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	015a      	lsls	r2, r3, #5
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	4413      	add	r3, r2
 800ac14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac18:	461a      	mov	r2, r3
 800ac1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac1e:	6093      	str	r3, [r2, #8]
 800ac20:	e07e      	b.n	800ad20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	4613      	mov	r3, r2
 800ac26:	00db      	lsls	r3, r3, #3
 800ac28:	4413      	add	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	4413      	add	r3, r2
 800ac34:	3304      	adds	r3, #4
 800ac36:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6a1a      	ldr	r2, [r3, #32]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	0159      	lsls	r1, r3, #5
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	440b      	add	r3, r1
 800ac44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac4e:	1ad2      	subs	r2, r2, r3
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d114      	bne.n	800ac84 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d109      	bne.n	800ac76 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6818      	ldr	r0, [r3, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	2101      	movs	r1, #1
 800ac70:	f008 fc3e 	bl	80134f0 <USB_EP0_OutStart>
 800ac74:	e006      	b.n	800ac84 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	68da      	ldr	r2, [r3, #12]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	441a      	add	r2, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f00f fab6 	bl	801a1fc <HAL_PCD_DataOutStageCallback>
 800ac90:	e046      	b.n	800ad20 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	4a26      	ldr	r2, [pc, #152]	@ (800ad30 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d124      	bne.n	800ace4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00a      	beq.n	800acba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	015a      	lsls	r2, r3, #5
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	4413      	add	r3, r2
 800acac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acb0:	461a      	mov	r2, r3
 800acb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acb6:	6093      	str	r3, [r2, #8]
 800acb8:	e032      	b.n	800ad20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	f003 0320 	and.w	r3, r3, #32
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d008      	beq.n	800acd6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	4413      	add	r3, r2
 800accc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acd0:	461a      	mov	r2, r3
 800acd2:	2320      	movs	r3, #32
 800acd4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	4619      	mov	r1, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f00f fa8d 	bl	801a1fc <HAL_PCD_DataOutStageCallback>
 800ace2:	e01d      	b.n	800ad20 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d114      	bne.n	800ad14 <PCD_EP_OutXfrComplete_int+0x1b0>
 800acea:	6879      	ldr	r1, [r7, #4]
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	4613      	mov	r3, r2
 800acf0:	00db      	lsls	r3, r3, #3
 800acf2:	4413      	add	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	440b      	add	r3, r1
 800acf8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d108      	bne.n	800ad14 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6818      	ldr	r0, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	2100      	movs	r1, #0
 800ad10:	f008 fbee 	bl	80134f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f00f fa6e 	bl	801a1fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3720      	adds	r7, #32
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	4f54300a 	.word	0x4f54300a
 800ad30:	4f54310a 	.word	0x4f54310a

0800ad34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	333c      	adds	r3, #60	@ 0x3c
 800ad4c:	3304      	adds	r3, #4
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	4a15      	ldr	r2, [pc, #84]	@ (800adbc <PCD_EP_OutSetupPacket_int+0x88>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d90e      	bls.n	800ad88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d009      	beq.n	800ad88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	015a      	lsls	r2, r3, #5
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad80:	461a      	mov	r2, r3
 800ad82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f00f fa25 	bl	801a1d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	4a0a      	ldr	r2, [pc, #40]	@ (800adbc <PCD_EP_OutSetupPacket_int+0x88>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d90c      	bls.n	800adb0 <PCD_EP_OutSetupPacket_int+0x7c>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	799b      	ldrb	r3, [r3, #6]
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d108      	bne.n	800adb0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6818      	ldr	r0, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ada8:	461a      	mov	r2, r3
 800adaa:	2101      	movs	r1, #1
 800adac:	f008 fba0 	bl	80134f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3718      	adds	r7, #24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	4f54300a 	.word	0x4f54300a

0800adc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	460b      	mov	r3, r1
 800adca:	70fb      	strb	r3, [r7, #3]
 800adcc:	4613      	mov	r3, r2
 800adce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800add8:	78fb      	ldrb	r3, [r7, #3]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d107      	bne.n	800adee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800adde:	883b      	ldrh	r3, [r7, #0]
 800ade0:	0419      	lsls	r1, r3, #16
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	430a      	orrs	r2, r1
 800adea:	629a      	str	r2, [r3, #40]	@ 0x28
 800adec:	e028      	b.n	800ae40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf4:	0c1b      	lsrs	r3, r3, #16
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	4413      	add	r3, r2
 800adfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800adfc:	2300      	movs	r3, #0
 800adfe:	73fb      	strb	r3, [r7, #15]
 800ae00:	e00d      	b.n	800ae1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	3340      	adds	r3, #64	@ 0x40
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4413      	add	r3, r2
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	0c1b      	lsrs	r3, r3, #16
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	4413      	add	r3, r2
 800ae16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	73fb      	strb	r3, [r7, #15]
 800ae1e:	7bfa      	ldrb	r2, [r7, #15]
 800ae20:	78fb      	ldrb	r3, [r7, #3]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d3ec      	bcc.n	800ae02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ae28:	883b      	ldrh	r3, [r7, #0]
 800ae2a:	0418      	lsls	r0, r3, #16
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6819      	ldr	r1, [r3, #0]
 800ae30:	78fb      	ldrb	r3, [r7, #3]
 800ae32:	3b01      	subs	r3, #1
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	4302      	orrs	r2, r0
 800ae38:	3340      	adds	r3, #64	@ 0x40
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	440b      	add	r3, r1
 800ae3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3714      	adds	r7, #20
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b083      	sub	sp, #12
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	460b      	mov	r3, r1
 800ae58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	887a      	ldrh	r2, [r7, #2]
 800ae60:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae9e:	4b05      	ldr	r3, [pc, #20]	@ (800aeb4 <HAL_PCDEx_ActivateLPM+0x44>)
 800aea0:	4313      	orrs	r3, r2
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	10000003 	.word	0x10000003

0800aeb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800aed8:	4b19      	ldr	r3, [pc, #100]	@ (800af40 <HAL_PWREx_ConfigSupply+0x70>)
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	f003 0304 	and.w	r3, r3, #4
 800aee0:	2b04      	cmp	r3, #4
 800aee2:	d00a      	beq.n	800aefa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800aee4:	4b16      	ldr	r3, [pc, #88]	@ (800af40 <HAL_PWREx_ConfigSupply+0x70>)
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	f003 0307 	and.w	r3, r3, #7
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d001      	beq.n	800aef6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e01f      	b.n	800af36 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	e01d      	b.n	800af36 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800aefa:	4b11      	ldr	r3, [pc, #68]	@ (800af40 <HAL_PWREx_ConfigSupply+0x70>)
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	f023 0207 	bic.w	r2, r3, #7
 800af02:	490f      	ldr	r1, [pc, #60]	@ (800af40 <HAL_PWREx_ConfigSupply+0x70>)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4313      	orrs	r3, r2
 800af08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800af0a:	f7f9 fc25 	bl	8004758 <HAL_GetTick>
 800af0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800af10:	e009      	b.n	800af26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800af12:	f7f9 fc21 	bl	8004758 <HAL_GetTick>
 800af16:	4602      	mov	r2, r0
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	1ad3      	subs	r3, r2, r3
 800af1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af20:	d901      	bls.n	800af26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e007      	b.n	800af36 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800af26:	4b06      	ldr	r3, [pc, #24]	@ (800af40 <HAL_PWREx_ConfigSupply+0x70>)
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af32:	d1ee      	bne.n	800af12 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	58024800 	.word	0x58024800

0800af44 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800af44:	b480      	push	{r7}
 800af46:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800af48:	4b05      	ldr	r3, [pc, #20]	@ (800af60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	4a04      	ldr	r2, [pc, #16]	@ (800af60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800af4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800af52:	60d3      	str	r3, [r2, #12]
}
 800af54:	bf00      	nop
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	58024800 	.word	0x58024800

0800af64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b08c      	sub	sp, #48	@ 0x30
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e3c8      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 0301 	and.w	r3, r3, #1
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 8087 	beq.w	800b092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af84:	4b88      	ldr	r3, [pc, #544]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800af8e:	4b86      	ldr	r3, [pc, #536]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800af90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af92:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800af94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af96:	2b10      	cmp	r3, #16
 800af98:	d007      	beq.n	800afaa <HAL_RCC_OscConfig+0x46>
 800af9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af9c:	2b18      	cmp	r3, #24
 800af9e:	d110      	bne.n	800afc2 <HAL_RCC_OscConfig+0x5e>
 800afa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa2:	f003 0303 	and.w	r3, r3, #3
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d10b      	bne.n	800afc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afaa:	4b7f      	ldr	r3, [pc, #508]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d06c      	beq.n	800b090 <HAL_RCC_OscConfig+0x12c>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d168      	bne.n	800b090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	e3a2      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afca:	d106      	bne.n	800afda <HAL_RCC_OscConfig+0x76>
 800afcc:	4b76      	ldr	r3, [pc, #472]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a75      	ldr	r2, [pc, #468]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800afd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	e02e      	b.n	800b038 <HAL_RCC_OscConfig+0xd4>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10c      	bne.n	800affc <HAL_RCC_OscConfig+0x98>
 800afe2:	4b71      	ldr	r3, [pc, #452]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a70      	ldr	r2, [pc, #448]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800afe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800afec:	6013      	str	r3, [r2, #0]
 800afee:	4b6e      	ldr	r3, [pc, #440]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a6d      	ldr	r2, [pc, #436]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800aff4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aff8:	6013      	str	r3, [r2, #0]
 800affa:	e01d      	b.n	800b038 <HAL_RCC_OscConfig+0xd4>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b004:	d10c      	bne.n	800b020 <HAL_RCC_OscConfig+0xbc>
 800b006:	4b68      	ldr	r3, [pc, #416]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a67      	ldr	r2, [pc, #412]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b00c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b010:	6013      	str	r3, [r2, #0]
 800b012:	4b65      	ldr	r3, [pc, #404]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a64      	ldr	r2, [pc, #400]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b01c:	6013      	str	r3, [r2, #0]
 800b01e:	e00b      	b.n	800b038 <HAL_RCC_OscConfig+0xd4>
 800b020:	4b61      	ldr	r3, [pc, #388]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a60      	ldr	r2, [pc, #384]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b02a:	6013      	str	r3, [r2, #0]
 800b02c:	4b5e      	ldr	r3, [pc, #376]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a5d      	ldr	r2, [pc, #372]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d013      	beq.n	800b068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b040:	f7f9 fb8a 	bl	8004758 <HAL_GetTick>
 800b044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b046:	e008      	b.n	800b05a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b048:	f7f9 fb86 	bl	8004758 <HAL_GetTick>
 800b04c:	4602      	mov	r2, r0
 800b04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	2b64      	cmp	r3, #100	@ 0x64
 800b054:	d901      	bls.n	800b05a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e356      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b05a:	4b53      	ldr	r3, [pc, #332]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b062:	2b00      	cmp	r3, #0
 800b064:	d0f0      	beq.n	800b048 <HAL_RCC_OscConfig+0xe4>
 800b066:	e014      	b.n	800b092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b068:	f7f9 fb76 	bl	8004758 <HAL_GetTick>
 800b06c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b06e:	e008      	b.n	800b082 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b070:	f7f9 fb72 	bl	8004758 <HAL_GetTick>
 800b074:	4602      	mov	r2, r0
 800b076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	2b64      	cmp	r3, #100	@ 0x64
 800b07c:	d901      	bls.n	800b082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b07e:	2303      	movs	r3, #3
 800b080:	e342      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b082:	4b49      	ldr	r3, [pc, #292]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1f0      	bne.n	800b070 <HAL_RCC_OscConfig+0x10c>
 800b08e:	e000      	b.n	800b092 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 0302 	and.w	r3, r3, #2
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f000 808c 	beq.w	800b1b8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0a0:	4b41      	ldr	r3, [pc, #260]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b0a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b0aa:	4b3f      	ldr	r3, [pc, #252]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b0b0:	6a3b      	ldr	r3, [r7, #32]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d007      	beq.n	800b0c6 <HAL_RCC_OscConfig+0x162>
 800b0b6:	6a3b      	ldr	r3, [r7, #32]
 800b0b8:	2b18      	cmp	r3, #24
 800b0ba:	d137      	bne.n	800b12c <HAL_RCC_OscConfig+0x1c8>
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	f003 0303 	and.w	r3, r3, #3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d132      	bne.n	800b12c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0c6:	4b38      	ldr	r3, [pc, #224]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 0304 	and.w	r3, r3, #4
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d005      	beq.n	800b0de <HAL_RCC_OscConfig+0x17a>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e314      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b0de:	4b32      	ldr	r3, [pc, #200]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f023 0219 	bic.w	r2, r3, #25
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	492f      	ldr	r1, [pc, #188]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0f0:	f7f9 fb32 	bl	8004758 <HAL_GetTick>
 800b0f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b0f6:	e008      	b.n	800b10a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0f8:	f7f9 fb2e 	bl	8004758 <HAL_GetTick>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	2b02      	cmp	r3, #2
 800b104:	d901      	bls.n	800b10a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b106:	2303      	movs	r3, #3
 800b108:	e2fe      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b10a:	4b27      	ldr	r3, [pc, #156]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f003 0304 	and.w	r3, r3, #4
 800b112:	2b00      	cmp	r3, #0
 800b114:	d0f0      	beq.n	800b0f8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b116:	4b24      	ldr	r3, [pc, #144]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	061b      	lsls	r3, r3, #24
 800b124:	4920      	ldr	r1, [pc, #128]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b126:	4313      	orrs	r3, r2
 800b128:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b12a:	e045      	b.n	800b1b8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d026      	beq.n	800b182 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b134:	4b1c      	ldr	r3, [pc, #112]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f023 0219 	bic.w	r2, r3, #25
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	4919      	ldr	r1, [pc, #100]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b142:	4313      	orrs	r3, r2
 800b144:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b146:	f7f9 fb07 	bl	8004758 <HAL_GetTick>
 800b14a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b14c:	e008      	b.n	800b160 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b14e:	f7f9 fb03 	bl	8004758 <HAL_GetTick>
 800b152:	4602      	mov	r2, r0
 800b154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d901      	bls.n	800b160 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b15c:	2303      	movs	r3, #3
 800b15e:	e2d3      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b160:	4b11      	ldr	r3, [pc, #68]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 0304 	and.w	r3, r3, #4
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d0f0      	beq.n	800b14e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b16c:	4b0e      	ldr	r3, [pc, #56]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	061b      	lsls	r3, r3, #24
 800b17a:	490b      	ldr	r1, [pc, #44]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b17c:	4313      	orrs	r3, r2
 800b17e:	604b      	str	r3, [r1, #4]
 800b180:	e01a      	b.n	800b1b8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b182:	4b09      	ldr	r3, [pc, #36]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a08      	ldr	r2, [pc, #32]	@ (800b1a8 <HAL_RCC_OscConfig+0x244>)
 800b188:	f023 0301 	bic.w	r3, r3, #1
 800b18c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b18e:	f7f9 fae3 	bl	8004758 <HAL_GetTick>
 800b192:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b194:	e00a      	b.n	800b1ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b196:	f7f9 fadf 	bl	8004758 <HAL_GetTick>
 800b19a:	4602      	mov	r2, r0
 800b19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d903      	bls.n	800b1ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e2af      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
 800b1a8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b1ac:	4b96      	ldr	r3, [pc, #600]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0304 	and.w	r3, r3, #4
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1ee      	bne.n	800b196 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 0310 	and.w	r3, r3, #16
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d06a      	beq.n	800b29a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1c4:	4b90      	ldr	r3, [pc, #576]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b1cc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b1ce:	4b8e      	ldr	r3, [pc, #568]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b1d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	2b08      	cmp	r3, #8
 800b1d8:	d007      	beq.n	800b1ea <HAL_RCC_OscConfig+0x286>
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	2b18      	cmp	r3, #24
 800b1de:	d11b      	bne.n	800b218 <HAL_RCC_OscConfig+0x2b4>
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	f003 0303 	and.w	r3, r3, #3
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d116      	bne.n	800b218 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b1ea:	4b87      	ldr	r3, [pc, #540]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d005      	beq.n	800b202 <HAL_RCC_OscConfig+0x29e>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	2b80      	cmp	r3, #128	@ 0x80
 800b1fc:	d001      	beq.n	800b202 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e282      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b202:	4b81      	ldr	r3, [pc, #516]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	061b      	lsls	r3, r3, #24
 800b210:	497d      	ldr	r1, [pc, #500]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b212:	4313      	orrs	r3, r2
 800b214:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b216:	e040      	b.n	800b29a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	69db      	ldr	r3, [r3, #28]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d023      	beq.n	800b268 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b220:	4b79      	ldr	r3, [pc, #484]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a78      	ldr	r2, [pc, #480]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b22a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b22c:	f7f9 fa94 	bl	8004758 <HAL_GetTick>
 800b230:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b232:	e008      	b.n	800b246 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b234:	f7f9 fa90 	bl	8004758 <HAL_GetTick>
 800b238:	4602      	mov	r2, r0
 800b23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23c:	1ad3      	subs	r3, r2, r3
 800b23e:	2b02      	cmp	r3, #2
 800b240:	d901      	bls.n	800b246 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b242:	2303      	movs	r3, #3
 800b244:	e260      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b246:	4b70      	ldr	r3, [pc, #448]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d0f0      	beq.n	800b234 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b252:	4b6d      	ldr	r3, [pc, #436]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a1b      	ldr	r3, [r3, #32]
 800b25e:	061b      	lsls	r3, r3, #24
 800b260:	4969      	ldr	r1, [pc, #420]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b262:	4313      	orrs	r3, r2
 800b264:	60cb      	str	r3, [r1, #12]
 800b266:	e018      	b.n	800b29a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b268:	4b67      	ldr	r3, [pc, #412]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a66      	ldr	r2, [pc, #408]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b26e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b274:	f7f9 fa70 	bl	8004758 <HAL_GetTick>
 800b278:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b27a:	e008      	b.n	800b28e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b27c:	f7f9 fa6c 	bl	8004758 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	2b02      	cmp	r3, #2
 800b288:	d901      	bls.n	800b28e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e23c      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b28e:	4b5e      	ldr	r3, [pc, #376]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1f0      	bne.n	800b27c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0308 	and.w	r3, r3, #8
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d036      	beq.n	800b314 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d019      	beq.n	800b2e2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b2ae:	4b56      	ldr	r3, [pc, #344]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b2b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2b2:	4a55      	ldr	r2, [pc, #340]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b2b4:	f043 0301 	orr.w	r3, r3, #1
 800b2b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2ba:	f7f9 fa4d 	bl	8004758 <HAL_GetTick>
 800b2be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b2c0:	e008      	b.n	800b2d4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b2c2:	f7f9 fa49 	bl	8004758 <HAL_GetTick>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d901      	bls.n	800b2d4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	e219      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b2d4:	4b4c      	ldr	r3, [pc, #304]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b2d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2d8:	f003 0302 	and.w	r3, r3, #2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d0f0      	beq.n	800b2c2 <HAL_RCC_OscConfig+0x35e>
 800b2e0:	e018      	b.n	800b314 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b2e2:	4b49      	ldr	r3, [pc, #292]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b2e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2e6:	4a48      	ldr	r2, [pc, #288]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b2e8:	f023 0301 	bic.w	r3, r3, #1
 800b2ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2ee:	f7f9 fa33 	bl	8004758 <HAL_GetTick>
 800b2f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b2f4:	e008      	b.n	800b308 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b2f6:	f7f9 fa2f 	bl	8004758 <HAL_GetTick>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	2b02      	cmp	r3, #2
 800b302:	d901      	bls.n	800b308 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b304:	2303      	movs	r3, #3
 800b306:	e1ff      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b308:	4b3f      	ldr	r3, [pc, #252]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b30a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b30c:	f003 0302 	and.w	r3, r3, #2
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1f0      	bne.n	800b2f6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 0320 	and.w	r3, r3, #32
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d036      	beq.n	800b38e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d019      	beq.n	800b35c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b328:	4b37      	ldr	r3, [pc, #220]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a36      	ldr	r2, [pc, #216]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b32e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b332:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b334:	f7f9 fa10 	bl	8004758 <HAL_GetTick>
 800b338:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b33a:	e008      	b.n	800b34e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b33c:	f7f9 fa0c 	bl	8004758 <HAL_GetTick>
 800b340:	4602      	mov	r2, r0
 800b342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	2b02      	cmp	r3, #2
 800b348:	d901      	bls.n	800b34e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b34a:	2303      	movs	r3, #3
 800b34c:	e1dc      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b34e:	4b2e      	ldr	r3, [pc, #184]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0f0      	beq.n	800b33c <HAL_RCC_OscConfig+0x3d8>
 800b35a:	e018      	b.n	800b38e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b35c:	4b2a      	ldr	r3, [pc, #168]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a29      	ldr	r2, [pc, #164]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b362:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b366:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b368:	f7f9 f9f6 	bl	8004758 <HAL_GetTick>
 800b36c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b36e:	e008      	b.n	800b382 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b370:	f7f9 f9f2 	bl	8004758 <HAL_GetTick>
 800b374:	4602      	mov	r2, r0
 800b376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d901      	bls.n	800b382 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b37e:	2303      	movs	r3, #3
 800b380:	e1c2      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b382:	4b21      	ldr	r3, [pc, #132]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1f0      	bne.n	800b370 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 0304 	and.w	r3, r3, #4
 800b396:	2b00      	cmp	r3, #0
 800b398:	f000 8086 	beq.w	800b4a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b39c:	4b1b      	ldr	r3, [pc, #108]	@ (800b40c <HAL_RCC_OscConfig+0x4a8>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a1a      	ldr	r2, [pc, #104]	@ (800b40c <HAL_RCC_OscConfig+0x4a8>)
 800b3a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3a8:	f7f9 f9d6 	bl	8004758 <HAL_GetTick>
 800b3ac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3ae:	e008      	b.n	800b3c2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3b0:	f7f9 f9d2 	bl	8004758 <HAL_GetTick>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	2b64      	cmp	r3, #100	@ 0x64
 800b3bc:	d901      	bls.n	800b3c2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	e1a2      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3c2:	4b12      	ldr	r3, [pc, #72]	@ (800b40c <HAL_RCC_OscConfig+0x4a8>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d0f0      	beq.n	800b3b0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d106      	bne.n	800b3e4 <HAL_RCC_OscConfig+0x480>
 800b3d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b3d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3da:	4a0b      	ldr	r2, [pc, #44]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b3dc:	f043 0301 	orr.w	r3, r3, #1
 800b3e0:	6713      	str	r3, [r2, #112]	@ 0x70
 800b3e2:	e032      	b.n	800b44a <HAL_RCC_OscConfig+0x4e6>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d111      	bne.n	800b410 <HAL_RCC_OscConfig+0x4ac>
 800b3ec:	4b06      	ldr	r3, [pc, #24]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b3ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3f0:	4a05      	ldr	r2, [pc, #20]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b3f2:	f023 0301 	bic.w	r3, r3, #1
 800b3f6:	6713      	str	r3, [r2, #112]	@ 0x70
 800b3f8:	4b03      	ldr	r3, [pc, #12]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b3fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3fc:	4a02      	ldr	r2, [pc, #8]	@ (800b408 <HAL_RCC_OscConfig+0x4a4>)
 800b3fe:	f023 0304 	bic.w	r3, r3, #4
 800b402:	6713      	str	r3, [r2, #112]	@ 0x70
 800b404:	e021      	b.n	800b44a <HAL_RCC_OscConfig+0x4e6>
 800b406:	bf00      	nop
 800b408:	58024400 	.word	0x58024400
 800b40c:	58024800 	.word	0x58024800
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	2b05      	cmp	r3, #5
 800b416:	d10c      	bne.n	800b432 <HAL_RCC_OscConfig+0x4ce>
 800b418:	4b83      	ldr	r3, [pc, #524]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b41a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b41c:	4a82      	ldr	r2, [pc, #520]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b41e:	f043 0304 	orr.w	r3, r3, #4
 800b422:	6713      	str	r3, [r2, #112]	@ 0x70
 800b424:	4b80      	ldr	r3, [pc, #512]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b428:	4a7f      	ldr	r2, [pc, #508]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b42a:	f043 0301 	orr.w	r3, r3, #1
 800b42e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b430:	e00b      	b.n	800b44a <HAL_RCC_OscConfig+0x4e6>
 800b432:	4b7d      	ldr	r3, [pc, #500]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b436:	4a7c      	ldr	r2, [pc, #496]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b438:	f023 0301 	bic.w	r3, r3, #1
 800b43c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b43e:	4b7a      	ldr	r3, [pc, #488]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b442:	4a79      	ldr	r2, [pc, #484]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b444:	f023 0304 	bic.w	r3, r3, #4
 800b448:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d015      	beq.n	800b47e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b452:	f7f9 f981 	bl	8004758 <HAL_GetTick>
 800b456:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b458:	e00a      	b.n	800b470 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b45a:	f7f9 f97d 	bl	8004758 <HAL_GetTick>
 800b45e:	4602      	mov	r2, r0
 800b460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b468:	4293      	cmp	r3, r2
 800b46a:	d901      	bls.n	800b470 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b46c:	2303      	movs	r3, #3
 800b46e:	e14b      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b470:	4b6d      	ldr	r3, [pc, #436]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b474:	f003 0302 	and.w	r3, r3, #2
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d0ee      	beq.n	800b45a <HAL_RCC_OscConfig+0x4f6>
 800b47c:	e014      	b.n	800b4a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b47e:	f7f9 f96b 	bl	8004758 <HAL_GetTick>
 800b482:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b484:	e00a      	b.n	800b49c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b486:	f7f9 f967 	bl	8004758 <HAL_GetTick>
 800b48a:	4602      	mov	r2, r0
 800b48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48e:	1ad3      	subs	r3, r2, r3
 800b490:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b494:	4293      	cmp	r3, r2
 800b496:	d901      	bls.n	800b49c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	e135      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b49c:	4b62      	ldr	r3, [pc, #392]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b49e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4a0:	f003 0302 	and.w	r3, r3, #2
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1ee      	bne.n	800b486 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 812a 	beq.w	800b706 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b4b2:	4b5d      	ldr	r3, [pc, #372]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b4ba:	2b18      	cmp	r3, #24
 800b4bc:	f000 80ba 	beq.w	800b634 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	f040 8095 	bne.w	800b5f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4ca:	4b57      	ldr	r3, [pc, #348]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a56      	ldr	r2, [pc, #344]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b4d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b4d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4d6:	f7f9 f93f 	bl	8004758 <HAL_GetTick>
 800b4da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b4dc:	e008      	b.n	800b4f0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4de:	f7f9 f93b 	bl	8004758 <HAL_GetTick>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d901      	bls.n	800b4f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e10b      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b4f0:	4b4d      	ldr	r3, [pc, #308]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1f0      	bne.n	800b4de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b4fc:	4b4a      	ldr	r3, [pc, #296]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b4fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b500:	4b4a      	ldr	r3, [pc, #296]	@ (800b62c <HAL_RCC_OscConfig+0x6c8>)
 800b502:	4013      	ands	r3, r2
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b50c:	0112      	lsls	r2, r2, #4
 800b50e:	430a      	orrs	r2, r1
 800b510:	4945      	ldr	r1, [pc, #276]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b512:	4313      	orrs	r3, r2
 800b514:	628b      	str	r3, [r1, #40]	@ 0x28
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b51a:	3b01      	subs	r3, #1
 800b51c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b524:	3b01      	subs	r3, #1
 800b526:	025b      	lsls	r3, r3, #9
 800b528:	b29b      	uxth	r3, r3
 800b52a:	431a      	orrs	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b530:	3b01      	subs	r3, #1
 800b532:	041b      	lsls	r3, r3, #16
 800b534:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b538:	431a      	orrs	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b53e:	3b01      	subs	r3, #1
 800b540:	061b      	lsls	r3, r3, #24
 800b542:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b546:	4938      	ldr	r1, [pc, #224]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b548:	4313      	orrs	r3, r2
 800b54a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b54c:	4b36      	ldr	r3, [pc, #216]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b550:	4a35      	ldr	r2, [pc, #212]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b552:	f023 0301 	bic.w	r3, r3, #1
 800b556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b558:	4b33      	ldr	r3, [pc, #204]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b55a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b55c:	4b34      	ldr	r3, [pc, #208]	@ (800b630 <HAL_RCC_OscConfig+0x6cc>)
 800b55e:	4013      	ands	r3, r2
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b564:	00d2      	lsls	r2, r2, #3
 800b566:	4930      	ldr	r1, [pc, #192]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b568:	4313      	orrs	r3, r2
 800b56a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b56c:	4b2e      	ldr	r3, [pc, #184]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b570:	f023 020c 	bic.w	r2, r3, #12
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b578:	492b      	ldr	r1, [pc, #172]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b57a:	4313      	orrs	r3, r2
 800b57c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b57e:	4b2a      	ldr	r3, [pc, #168]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b582:	f023 0202 	bic.w	r2, r3, #2
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b58a:	4927      	ldr	r1, [pc, #156]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b58c:	4313      	orrs	r3, r2
 800b58e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b590:	4b25      	ldr	r3, [pc, #148]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b594:	4a24      	ldr	r2, [pc, #144]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b59a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b59c:	4b22      	ldr	r3, [pc, #136]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a0:	4a21      	ldr	r2, [pc, #132]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b5a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b5a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b5a8:	4b1f      	ldr	r3, [pc, #124]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b5aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ac:	4a1e      	ldr	r2, [pc, #120]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b5ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b5b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b5b4:	4b1c      	ldr	r3, [pc, #112]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b8:	4a1b      	ldr	r2, [pc, #108]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b5ba:	f043 0301 	orr.w	r3, r3, #1
 800b5be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b5c0:	4b19      	ldr	r3, [pc, #100]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a18      	ldr	r2, [pc, #96]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b5c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b5ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5cc:	f7f9 f8c4 	bl	8004758 <HAL_GetTick>
 800b5d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b5d2:	e008      	b.n	800b5e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5d4:	f7f9 f8c0 	bl	8004758 <HAL_GetTick>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5dc:	1ad3      	subs	r3, r2, r3
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d901      	bls.n	800b5e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	e090      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b5e6:	4b10      	ldr	r3, [pc, #64]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d0f0      	beq.n	800b5d4 <HAL_RCC_OscConfig+0x670>
 800b5f2:	e088      	b.n	800b706 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a0b      	ldr	r2, [pc, #44]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b5fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b5fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b600:	f7f9 f8aa 	bl	8004758 <HAL_GetTick>
 800b604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b606:	e008      	b.n	800b61a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b608:	f7f9 f8a6 	bl	8004758 <HAL_GetTick>
 800b60c:	4602      	mov	r2, r0
 800b60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	2b02      	cmp	r3, #2
 800b614:	d901      	bls.n	800b61a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b616:	2303      	movs	r3, #3
 800b618:	e076      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b61a:	4b03      	ldr	r3, [pc, #12]	@ (800b628 <HAL_RCC_OscConfig+0x6c4>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1f0      	bne.n	800b608 <HAL_RCC_OscConfig+0x6a4>
 800b626:	e06e      	b.n	800b706 <HAL_RCC_OscConfig+0x7a2>
 800b628:	58024400 	.word	0x58024400
 800b62c:	fffffc0c 	.word	0xfffffc0c
 800b630:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b634:	4b36      	ldr	r3, [pc, #216]	@ (800b710 <HAL_RCC_OscConfig+0x7ac>)
 800b636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b638:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b63a:	4b35      	ldr	r3, [pc, #212]	@ (800b710 <HAL_RCC_OscConfig+0x7ac>)
 800b63c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b63e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b644:	2b01      	cmp	r3, #1
 800b646:	d031      	beq.n	800b6ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	f003 0203 	and.w	r2, r3, #3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b652:	429a      	cmp	r2, r3
 800b654:	d12a      	bne.n	800b6ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	091b      	lsrs	r3, r3, #4
 800b65a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b662:	429a      	cmp	r2, r3
 800b664:	d122      	bne.n	800b6ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b670:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b672:	429a      	cmp	r2, r3
 800b674:	d11a      	bne.n	800b6ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	0a5b      	lsrs	r3, r3, #9
 800b67a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b682:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b684:	429a      	cmp	r2, r3
 800b686:	d111      	bne.n	800b6ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	0c1b      	lsrs	r3, r3, #16
 800b68c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b694:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b696:	429a      	cmp	r2, r3
 800b698:	d108      	bne.n	800b6ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	0e1b      	lsrs	r3, r3, #24
 800b69e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d001      	beq.n	800b6b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e02b      	b.n	800b708 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b6b0:	4b17      	ldr	r3, [pc, #92]	@ (800b710 <HAL_RCC_OscConfig+0x7ac>)
 800b6b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6b4:	08db      	lsrs	r3, r3, #3
 800b6b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6c0:	693a      	ldr	r2, [r7, #16]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d01f      	beq.n	800b706 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b6c6:	4b12      	ldr	r3, [pc, #72]	@ (800b710 <HAL_RCC_OscConfig+0x7ac>)
 800b6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ca:	4a11      	ldr	r2, [pc, #68]	@ (800b710 <HAL_RCC_OscConfig+0x7ac>)
 800b6cc:	f023 0301 	bic.w	r3, r3, #1
 800b6d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b6d2:	f7f9 f841 	bl	8004758 <HAL_GetTick>
 800b6d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b6d8:	bf00      	nop
 800b6da:	f7f9 f83d 	bl	8004758 <HAL_GetTick>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d0f9      	beq.n	800b6da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b6e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b710 <HAL_RCC_OscConfig+0x7ac>)
 800b6e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6ea:	4b0a      	ldr	r3, [pc, #40]	@ (800b714 <HAL_RCC_OscConfig+0x7b0>)
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b6f2:	00d2      	lsls	r2, r2, #3
 800b6f4:	4906      	ldr	r1, [pc, #24]	@ (800b710 <HAL_RCC_OscConfig+0x7ac>)
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b6fa:	4b05      	ldr	r3, [pc, #20]	@ (800b710 <HAL_RCC_OscConfig+0x7ac>)
 800b6fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6fe:	4a04      	ldr	r2, [pc, #16]	@ (800b710 <HAL_RCC_OscConfig+0x7ac>)
 800b700:	f043 0301 	orr.w	r3, r3, #1
 800b704:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3730      	adds	r7, #48	@ 0x30
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	58024400 	.word	0x58024400
 800b714:	ffff0007 	.word	0xffff0007

0800b718 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	e19c      	b.n	800ba66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b72c:	4b8a      	ldr	r3, [pc, #552]	@ (800b958 <HAL_RCC_ClockConfig+0x240>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 030f 	and.w	r3, r3, #15
 800b734:	683a      	ldr	r2, [r7, #0]
 800b736:	429a      	cmp	r2, r3
 800b738:	d910      	bls.n	800b75c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b73a:	4b87      	ldr	r3, [pc, #540]	@ (800b958 <HAL_RCC_ClockConfig+0x240>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f023 020f 	bic.w	r2, r3, #15
 800b742:	4985      	ldr	r1, [pc, #532]	@ (800b958 <HAL_RCC_ClockConfig+0x240>)
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	4313      	orrs	r3, r2
 800b748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b74a:	4b83      	ldr	r3, [pc, #524]	@ (800b958 <HAL_RCC_ClockConfig+0x240>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f003 030f 	and.w	r3, r3, #15
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	429a      	cmp	r2, r3
 800b756:	d001      	beq.n	800b75c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	e184      	b.n	800ba66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f003 0304 	and.w	r3, r3, #4
 800b764:	2b00      	cmp	r3, #0
 800b766:	d010      	beq.n	800b78a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	691a      	ldr	r2, [r3, #16]
 800b76c:	4b7b      	ldr	r3, [pc, #492]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b76e:	699b      	ldr	r3, [r3, #24]
 800b770:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b774:	429a      	cmp	r2, r3
 800b776:	d908      	bls.n	800b78a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b778:	4b78      	ldr	r3, [pc, #480]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b77a:	699b      	ldr	r3, [r3, #24]
 800b77c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	4975      	ldr	r1, [pc, #468]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b786:	4313      	orrs	r3, r2
 800b788:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f003 0308 	and.w	r3, r3, #8
 800b792:	2b00      	cmp	r3, #0
 800b794:	d010      	beq.n	800b7b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	695a      	ldr	r2, [r3, #20]
 800b79a:	4b70      	ldr	r3, [pc, #448]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b79c:	69db      	ldr	r3, [r3, #28]
 800b79e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d908      	bls.n	800b7b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b7a6:	4b6d      	ldr	r3, [pc, #436]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b7a8:	69db      	ldr	r3, [r3, #28]
 800b7aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	695b      	ldr	r3, [r3, #20]
 800b7b2:	496a      	ldr	r1, [pc, #424]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 0310 	and.w	r3, r3, #16
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d010      	beq.n	800b7e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	699a      	ldr	r2, [r3, #24]
 800b7c8:	4b64      	ldr	r3, [pc, #400]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b7ca:	69db      	ldr	r3, [r3, #28]
 800b7cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d908      	bls.n	800b7e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b7d4:	4b61      	ldr	r3, [pc, #388]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b7d6:	69db      	ldr	r3, [r3, #28]
 800b7d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	699b      	ldr	r3, [r3, #24]
 800b7e0:	495e      	ldr	r1, [pc, #376]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0320 	and.w	r3, r3, #32
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d010      	beq.n	800b814 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	69da      	ldr	r2, [r3, #28]
 800b7f6:	4b59      	ldr	r3, [pc, #356]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b7f8:	6a1b      	ldr	r3, [r3, #32]
 800b7fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d908      	bls.n	800b814 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b802:	4b56      	ldr	r3, [pc, #344]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	69db      	ldr	r3, [r3, #28]
 800b80e:	4953      	ldr	r1, [pc, #332]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b810:	4313      	orrs	r3, r2
 800b812:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 0302 	and.w	r3, r3, #2
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d010      	beq.n	800b842 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	68da      	ldr	r2, [r3, #12]
 800b824:	4b4d      	ldr	r3, [pc, #308]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b826:	699b      	ldr	r3, [r3, #24]
 800b828:	f003 030f 	and.w	r3, r3, #15
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d908      	bls.n	800b842 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b830:	4b4a      	ldr	r3, [pc, #296]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b832:	699b      	ldr	r3, [r3, #24]
 800b834:	f023 020f 	bic.w	r2, r3, #15
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	4947      	ldr	r1, [pc, #284]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b83e:	4313      	orrs	r3, r2
 800b840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f003 0301 	and.w	r3, r3, #1
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d055      	beq.n	800b8fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b84e:	4b43      	ldr	r3, [pc, #268]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b850:	699b      	ldr	r3, [r3, #24]
 800b852:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	4940      	ldr	r1, [pc, #256]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b85c:	4313      	orrs	r3, r2
 800b85e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	2b02      	cmp	r3, #2
 800b866:	d107      	bne.n	800b878 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b868:	4b3c      	ldr	r3, [pc, #240]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b870:	2b00      	cmp	r3, #0
 800b872:	d121      	bne.n	800b8b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	e0f6      	b.n	800ba66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	d107      	bne.n	800b890 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b880:	4b36      	ldr	r3, [pc, #216]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d115      	bne.n	800b8b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	e0ea      	b.n	800ba66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	2b01      	cmp	r3, #1
 800b896:	d107      	bne.n	800b8a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b898:	4b30      	ldr	r3, [pc, #192]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d109      	bne.n	800b8b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e0de      	b.n	800ba66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8a8:	4b2c      	ldr	r3, [pc, #176]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 0304 	and.w	r3, r3, #4
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e0d6      	b.n	800ba66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b8b8:	4b28      	ldr	r3, [pc, #160]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b8ba:	691b      	ldr	r3, [r3, #16]
 800b8bc:	f023 0207 	bic.w	r2, r3, #7
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	4925      	ldr	r1, [pc, #148]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8ca:	f7f8 ff45 	bl	8004758 <HAL_GetTick>
 800b8ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8d0:	e00a      	b.n	800b8e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8d2:	f7f8 ff41 	bl	8004758 <HAL_GetTick>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d901      	bls.n	800b8e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	e0be      	b.n	800ba66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8e8:	4b1c      	ldr	r3, [pc, #112]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	00db      	lsls	r3, r3, #3
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d1eb      	bne.n	800b8d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f003 0302 	and.w	r3, r3, #2
 800b902:	2b00      	cmp	r3, #0
 800b904:	d010      	beq.n	800b928 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68da      	ldr	r2, [r3, #12]
 800b90a:	4b14      	ldr	r3, [pc, #80]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	f003 030f 	and.w	r3, r3, #15
 800b912:	429a      	cmp	r2, r3
 800b914:	d208      	bcs.n	800b928 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b916:	4b11      	ldr	r3, [pc, #68]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b918:	699b      	ldr	r3, [r3, #24]
 800b91a:	f023 020f 	bic.w	r2, r3, #15
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	490e      	ldr	r1, [pc, #56]	@ (800b95c <HAL_RCC_ClockConfig+0x244>)
 800b924:	4313      	orrs	r3, r2
 800b926:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b928:	4b0b      	ldr	r3, [pc, #44]	@ (800b958 <HAL_RCC_ClockConfig+0x240>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 030f 	and.w	r3, r3, #15
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	429a      	cmp	r2, r3
 800b934:	d214      	bcs.n	800b960 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b936:	4b08      	ldr	r3, [pc, #32]	@ (800b958 <HAL_RCC_ClockConfig+0x240>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f023 020f 	bic.w	r2, r3, #15
 800b93e:	4906      	ldr	r1, [pc, #24]	@ (800b958 <HAL_RCC_ClockConfig+0x240>)
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	4313      	orrs	r3, r2
 800b944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b946:	4b04      	ldr	r3, [pc, #16]	@ (800b958 <HAL_RCC_ClockConfig+0x240>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f003 030f 	and.w	r3, r3, #15
 800b94e:	683a      	ldr	r2, [r7, #0]
 800b950:	429a      	cmp	r2, r3
 800b952:	d005      	beq.n	800b960 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e086      	b.n	800ba66 <HAL_RCC_ClockConfig+0x34e>
 800b958:	52002000 	.word	0x52002000
 800b95c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 0304 	and.w	r3, r3, #4
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d010      	beq.n	800b98e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	691a      	ldr	r2, [r3, #16]
 800b970:	4b3f      	ldr	r3, [pc, #252]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b978:	429a      	cmp	r2, r3
 800b97a:	d208      	bcs.n	800b98e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b97c:	4b3c      	ldr	r3, [pc, #240]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	4939      	ldr	r1, [pc, #228]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800b98a:	4313      	orrs	r3, r2
 800b98c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f003 0308 	and.w	r3, r3, #8
 800b996:	2b00      	cmp	r3, #0
 800b998:	d010      	beq.n	800b9bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	695a      	ldr	r2, [r3, #20]
 800b99e:	4b34      	ldr	r3, [pc, #208]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800b9a0:	69db      	ldr	r3, [r3, #28]
 800b9a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d208      	bcs.n	800b9bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b9aa:	4b31      	ldr	r3, [pc, #196]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800b9ac:	69db      	ldr	r3, [r3, #28]
 800b9ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	695b      	ldr	r3, [r3, #20]
 800b9b6:	492e      	ldr	r1, [pc, #184]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 0310 	and.w	r3, r3, #16
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d010      	beq.n	800b9ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	699a      	ldr	r2, [r3, #24]
 800b9cc:	4b28      	ldr	r3, [pc, #160]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800b9ce:	69db      	ldr	r3, [r3, #28]
 800b9d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d208      	bcs.n	800b9ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b9d8:	4b25      	ldr	r3, [pc, #148]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800b9da:	69db      	ldr	r3, [r3, #28]
 800b9dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	699b      	ldr	r3, [r3, #24]
 800b9e4:	4922      	ldr	r1, [pc, #136]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 0320 	and.w	r3, r3, #32
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d010      	beq.n	800ba18 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	69da      	ldr	r2, [r3, #28]
 800b9fa:	4b1d      	ldr	r3, [pc, #116]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d208      	bcs.n	800ba18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ba06:	4b1a      	ldr	r3, [pc, #104]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	69db      	ldr	r3, [r3, #28]
 800ba12:	4917      	ldr	r1, [pc, #92]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800ba14:	4313      	orrs	r3, r2
 800ba16:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ba18:	f000 f89e 	bl	800bb58 <HAL_RCC_GetSysClockFreq>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	4b14      	ldr	r3, [pc, #80]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	0a1b      	lsrs	r3, r3, #8
 800ba24:	f003 030f 	and.w	r3, r3, #15
 800ba28:	4912      	ldr	r1, [pc, #72]	@ (800ba74 <HAL_RCC_ClockConfig+0x35c>)
 800ba2a:	5ccb      	ldrb	r3, [r1, r3]
 800ba2c:	f003 031f 	and.w	r3, r3, #31
 800ba30:	fa22 f303 	lsr.w	r3, r2, r3
 800ba34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba36:	4b0e      	ldr	r3, [pc, #56]	@ (800ba70 <HAL_RCC_ClockConfig+0x358>)
 800ba38:	699b      	ldr	r3, [r3, #24]
 800ba3a:	f003 030f 	and.w	r3, r3, #15
 800ba3e:	4a0d      	ldr	r2, [pc, #52]	@ (800ba74 <HAL_RCC_ClockConfig+0x35c>)
 800ba40:	5cd3      	ldrb	r3, [r2, r3]
 800ba42:	f003 031f 	and.w	r3, r3, #31
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	fa22 f303 	lsr.w	r3, r2, r3
 800ba4c:	4a0a      	ldr	r2, [pc, #40]	@ (800ba78 <HAL_RCC_ClockConfig+0x360>)
 800ba4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ba50:	4a0a      	ldr	r2, [pc, #40]	@ (800ba7c <HAL_RCC_ClockConfig+0x364>)
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ba56:	4b0a      	ldr	r3, [pc, #40]	@ (800ba80 <HAL_RCC_ClockConfig+0x368>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7f8 fe32 	bl	80046c4 <HAL_InitTick>
 800ba60:	4603      	mov	r3, r0
 800ba62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	58024400 	.word	0x58024400
 800ba74:	0801dde0 	.word	0x0801dde0
 800ba78:	2400001c 	.word	0x2400001c
 800ba7c:	24000018 	.word	0x24000018
 800ba80:	24000034 	.word	0x24000034

0800ba84 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08c      	sub	sp, #48	@ 0x30
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d12a      	bne.n	800baec <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800ba96:	4b2d      	ldr	r3, [pc, #180]	@ (800bb4c <HAL_RCC_MCOConfig+0xc8>)
 800ba98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba9c:	4a2b      	ldr	r2, [pc, #172]	@ (800bb4c <HAL_RCC_MCOConfig+0xc8>)
 800ba9e:	f043 0301 	orr.w	r3, r3, #1
 800baa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800baa6:	4b29      	ldr	r3, [pc, #164]	@ (800bb4c <HAL_RCC_MCOConfig+0xc8>)
 800baa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	61bb      	str	r3, [r7, #24]
 800bab2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800bab4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800baba:	2302      	movs	r3, #2
 800babc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800babe:	2303      	movs	r3, #3
 800bac0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bac2:	2300      	movs	r3, #0
 800bac4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800bac6:	2300      	movs	r3, #0
 800bac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800baca:	f107 031c 	add.w	r3, r7, #28
 800bace:	4619      	mov	r1, r3
 800bad0:	481f      	ldr	r0, [pc, #124]	@ (800bb50 <HAL_RCC_MCOConfig+0xcc>)
 800bad2:	f7fd fd55 	bl	8009580 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800bad6:	4b1d      	ldr	r3, [pc, #116]	@ (800bb4c <HAL_RCC_MCOConfig+0xc8>)
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800bade:	68b9      	ldr	r1, [r7, #8]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	430b      	orrs	r3, r1
 800bae4:	4919      	ldr	r1, [pc, #100]	@ (800bb4c <HAL_RCC_MCOConfig+0xc8>)
 800bae6:	4313      	orrs	r3, r2
 800bae8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800baea:	e02a      	b.n	800bb42 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800baec:	4b17      	ldr	r3, [pc, #92]	@ (800bb4c <HAL_RCC_MCOConfig+0xc8>)
 800baee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800baf2:	4a16      	ldr	r2, [pc, #88]	@ (800bb4c <HAL_RCC_MCOConfig+0xc8>)
 800baf4:	f043 0304 	orr.w	r3, r3, #4
 800baf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bafc:	4b13      	ldr	r3, [pc, #76]	@ (800bb4c <HAL_RCC_MCOConfig+0xc8>)
 800bafe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb02:	f003 0304 	and.w	r3, r3, #4
 800bb06:	617b      	str	r3, [r7, #20]
 800bb08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800bb0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb10:	2302      	movs	r3, #2
 800bb12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb14:	2303      	movs	r3, #3
 800bb16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800bb20:	f107 031c 	add.w	r3, r7, #28
 800bb24:	4619      	mov	r1, r3
 800bb26:	480b      	ldr	r0, [pc, #44]	@ (800bb54 <HAL_RCC_MCOConfig+0xd0>)
 800bb28:	f7fd fd2a 	bl	8009580 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800bb2c:	4b07      	ldr	r3, [pc, #28]	@ (800bb4c <HAL_RCC_MCOConfig+0xc8>)
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	01d9      	lsls	r1, r3, #7
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	430b      	orrs	r3, r1
 800bb3c:	4903      	ldr	r1, [pc, #12]	@ (800bb4c <HAL_RCC_MCOConfig+0xc8>)
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	610b      	str	r3, [r1, #16]
}
 800bb42:	bf00      	nop
 800bb44:	3730      	adds	r7, #48	@ 0x30
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	58024400 	.word	0x58024400
 800bb50:	58020000 	.word	0x58020000
 800bb54:	58020800 	.word	0x58020800

0800bb58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b089      	sub	sp, #36	@ 0x24
 800bb5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bb5e:	4bb3      	ldr	r3, [pc, #716]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb66:	2b18      	cmp	r3, #24
 800bb68:	f200 8155 	bhi.w	800be16 <HAL_RCC_GetSysClockFreq+0x2be>
 800bb6c:	a201      	add	r2, pc, #4	@ (adr r2, 800bb74 <HAL_RCC_GetSysClockFreq+0x1c>)
 800bb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb72:	bf00      	nop
 800bb74:	0800bbd9 	.word	0x0800bbd9
 800bb78:	0800be17 	.word	0x0800be17
 800bb7c:	0800be17 	.word	0x0800be17
 800bb80:	0800be17 	.word	0x0800be17
 800bb84:	0800be17 	.word	0x0800be17
 800bb88:	0800be17 	.word	0x0800be17
 800bb8c:	0800be17 	.word	0x0800be17
 800bb90:	0800be17 	.word	0x0800be17
 800bb94:	0800bbff 	.word	0x0800bbff
 800bb98:	0800be17 	.word	0x0800be17
 800bb9c:	0800be17 	.word	0x0800be17
 800bba0:	0800be17 	.word	0x0800be17
 800bba4:	0800be17 	.word	0x0800be17
 800bba8:	0800be17 	.word	0x0800be17
 800bbac:	0800be17 	.word	0x0800be17
 800bbb0:	0800be17 	.word	0x0800be17
 800bbb4:	0800bc05 	.word	0x0800bc05
 800bbb8:	0800be17 	.word	0x0800be17
 800bbbc:	0800be17 	.word	0x0800be17
 800bbc0:	0800be17 	.word	0x0800be17
 800bbc4:	0800be17 	.word	0x0800be17
 800bbc8:	0800be17 	.word	0x0800be17
 800bbcc:	0800be17 	.word	0x0800be17
 800bbd0:	0800be17 	.word	0x0800be17
 800bbd4:	0800bc0b 	.word	0x0800bc0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbd8:	4b94      	ldr	r3, [pc, #592]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f003 0320 	and.w	r3, r3, #32
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d009      	beq.n	800bbf8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbe4:	4b91      	ldr	r3, [pc, #580]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	08db      	lsrs	r3, r3, #3
 800bbea:	f003 0303 	and.w	r3, r3, #3
 800bbee:	4a90      	ldr	r2, [pc, #576]	@ (800be30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bbf0:	fa22 f303 	lsr.w	r3, r2, r3
 800bbf4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800bbf6:	e111      	b.n	800be1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bbf8:	4b8d      	ldr	r3, [pc, #564]	@ (800be30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bbfa:	61bb      	str	r3, [r7, #24]
      break;
 800bbfc:	e10e      	b.n	800be1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800bbfe:	4b8d      	ldr	r3, [pc, #564]	@ (800be34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bc00:	61bb      	str	r3, [r7, #24]
      break;
 800bc02:	e10b      	b.n	800be1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800bc04:	4b8c      	ldr	r3, [pc, #560]	@ (800be38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bc06:	61bb      	str	r3, [r7, #24]
      break;
 800bc08:	e108      	b.n	800be1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc0a:	4b88      	ldr	r3, [pc, #544]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc0e:	f003 0303 	and.w	r3, r3, #3
 800bc12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800bc14:	4b85      	ldr	r3, [pc, #532]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc18:	091b      	lsrs	r3, r3, #4
 800bc1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bc20:	4b82      	ldr	r3, [pc, #520]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc24:	f003 0301 	and.w	r3, r3, #1
 800bc28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bc2a:	4b80      	ldr	r3, [pc, #512]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc2e:	08db      	lsrs	r3, r3, #3
 800bc30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	fb02 f303 	mul.w	r3, r2, r3
 800bc3a:	ee07 3a90 	vmov	s15, r3
 800bc3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 80e1 	beq.w	800be10 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	f000 8083 	beq.w	800bd5c <HAL_RCC_GetSysClockFreq+0x204>
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	f200 80a1 	bhi.w	800bda0 <HAL_RCC_GetSysClockFreq+0x248>
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d003      	beq.n	800bc6c <HAL_RCC_GetSysClockFreq+0x114>
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d056      	beq.n	800bd18 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bc6a:	e099      	b.n	800bda0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc6c:	4b6f      	ldr	r3, [pc, #444]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0320 	and.w	r3, r3, #32
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d02d      	beq.n	800bcd4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc78:	4b6c      	ldr	r3, [pc, #432]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	08db      	lsrs	r3, r3, #3
 800bc7e:	f003 0303 	and.w	r3, r3, #3
 800bc82:	4a6b      	ldr	r2, [pc, #428]	@ (800be30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bc84:	fa22 f303 	lsr.w	r3, r2, r3
 800bc88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	ee07 3a90 	vmov	s15, r3
 800bc90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	ee07 3a90 	vmov	s15, r3
 800bc9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bca2:	4b62      	ldr	r3, [pc, #392]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcaa:	ee07 3a90 	vmov	s15, r3
 800bcae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcb2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bcb6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800be3c <HAL_RCC_GetSysClockFreq+0x2e4>
 800bcba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800bcd2:	e087      	b.n	800bde4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcde:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800be40 <HAL_RCC_GetSysClockFreq+0x2e8>
 800bce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bce6:	4b51      	ldr	r3, [pc, #324]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bcfa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800be3c <HAL_RCC_GetSysClockFreq+0x2e4>
 800bcfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bd16:	e065      	b.n	800bde4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	ee07 3a90 	vmov	s15, r3
 800bd1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd22:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800be44 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bd26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd2a:	4b40      	ldr	r3, [pc, #256]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bd2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd32:	ee07 3a90 	vmov	s15, r3
 800bd36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd3a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd3e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800be3c <HAL_RCC_GetSysClockFreq+0x2e4>
 800bd42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bd5a:	e043      	b.n	800bde4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	ee07 3a90 	vmov	s15, r3
 800bd62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd66:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800be48 <HAL_RCC_GetSysClockFreq+0x2f0>
 800bd6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd6e:	4b2f      	ldr	r3, [pc, #188]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bd70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd76:	ee07 3a90 	vmov	s15, r3
 800bd7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd82:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800be3c <HAL_RCC_GetSysClockFreq+0x2e4>
 800bd86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bd9e:	e021      	b.n	800bde4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	ee07 3a90 	vmov	s15, r3
 800bda6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdaa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800be44 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bdae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdb2:	4b1e      	ldr	r3, [pc, #120]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bdb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdba:	ee07 3a90 	vmov	s15, r3
 800bdbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdc2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bdc6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800be3c <HAL_RCC_GetSysClockFreq+0x2e4>
 800bdca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bde2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800bde4:	4b11      	ldr	r3, [pc, #68]	@ (800be2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bde6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bde8:	0a5b      	lsrs	r3, r3, #9
 800bdea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdee:	3301      	adds	r3, #1
 800bdf0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	ee07 3a90 	vmov	s15, r3
 800bdf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bdfc:	edd7 6a07 	vldr	s13, [r7, #28]
 800be00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be08:	ee17 3a90 	vmov	r3, s15
 800be0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800be0e:	e005      	b.n	800be1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800be10:	2300      	movs	r3, #0
 800be12:	61bb      	str	r3, [r7, #24]
      break;
 800be14:	e002      	b.n	800be1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800be16:	4b07      	ldr	r3, [pc, #28]	@ (800be34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800be18:	61bb      	str	r3, [r7, #24]
      break;
 800be1a:	bf00      	nop
  }

  return sysclockfreq;
 800be1c:	69bb      	ldr	r3, [r7, #24]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3724      	adds	r7, #36	@ 0x24
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	58024400 	.word	0x58024400
 800be30:	03d09000 	.word	0x03d09000
 800be34:	003d0900 	.word	0x003d0900
 800be38:	017d7840 	.word	0x017d7840
 800be3c:	46000000 	.word	0x46000000
 800be40:	4c742400 	.word	0x4c742400
 800be44:	4a742400 	.word	0x4a742400
 800be48:	4bbebc20 	.word	0x4bbebc20

0800be4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800be52:	f7ff fe81 	bl	800bb58 <HAL_RCC_GetSysClockFreq>
 800be56:	4602      	mov	r2, r0
 800be58:	4b10      	ldr	r3, [pc, #64]	@ (800be9c <HAL_RCC_GetHCLKFreq+0x50>)
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	0a1b      	lsrs	r3, r3, #8
 800be5e:	f003 030f 	and.w	r3, r3, #15
 800be62:	490f      	ldr	r1, [pc, #60]	@ (800bea0 <HAL_RCC_GetHCLKFreq+0x54>)
 800be64:	5ccb      	ldrb	r3, [r1, r3]
 800be66:	f003 031f 	and.w	r3, r3, #31
 800be6a:	fa22 f303 	lsr.w	r3, r2, r3
 800be6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800be70:	4b0a      	ldr	r3, [pc, #40]	@ (800be9c <HAL_RCC_GetHCLKFreq+0x50>)
 800be72:	699b      	ldr	r3, [r3, #24]
 800be74:	f003 030f 	and.w	r3, r3, #15
 800be78:	4a09      	ldr	r2, [pc, #36]	@ (800bea0 <HAL_RCC_GetHCLKFreq+0x54>)
 800be7a:	5cd3      	ldrb	r3, [r2, r3]
 800be7c:	f003 031f 	and.w	r3, r3, #31
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	fa22 f303 	lsr.w	r3, r2, r3
 800be86:	4a07      	ldr	r2, [pc, #28]	@ (800bea4 <HAL_RCC_GetHCLKFreq+0x58>)
 800be88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800be8a:	4a07      	ldr	r2, [pc, #28]	@ (800bea8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800be90:	4b04      	ldr	r3, [pc, #16]	@ (800bea4 <HAL_RCC_GetHCLKFreq+0x58>)
 800be92:	681b      	ldr	r3, [r3, #0]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	58024400 	.word	0x58024400
 800bea0:	0801dde0 	.word	0x0801dde0
 800bea4:	2400001c 	.word	0x2400001c
 800bea8:	24000018 	.word	0x24000018

0800beac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800beb0:	f7ff ffcc 	bl	800be4c <HAL_RCC_GetHCLKFreq>
 800beb4:	4602      	mov	r2, r0
 800beb6:	4b06      	ldr	r3, [pc, #24]	@ (800bed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800beb8:	69db      	ldr	r3, [r3, #28]
 800beba:	091b      	lsrs	r3, r3, #4
 800bebc:	f003 0307 	and.w	r3, r3, #7
 800bec0:	4904      	ldr	r1, [pc, #16]	@ (800bed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bec2:	5ccb      	ldrb	r3, [r1, r3]
 800bec4:	f003 031f 	and.w	r3, r3, #31
 800bec8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800becc:	4618      	mov	r0, r3
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	58024400 	.word	0x58024400
 800bed4:	0801dde0 	.word	0x0801dde0

0800bed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800bedc:	f7ff ffb6 	bl	800be4c <HAL_RCC_GetHCLKFreq>
 800bee0:	4602      	mov	r2, r0
 800bee2:	4b06      	ldr	r3, [pc, #24]	@ (800befc <HAL_RCC_GetPCLK2Freq+0x24>)
 800bee4:	69db      	ldr	r3, [r3, #28]
 800bee6:	0a1b      	lsrs	r3, r3, #8
 800bee8:	f003 0307 	and.w	r3, r3, #7
 800beec:	4904      	ldr	r1, [pc, #16]	@ (800bf00 <HAL_RCC_GetPCLK2Freq+0x28>)
 800beee:	5ccb      	ldrb	r3, [r1, r3]
 800bef0:	f003 031f 	and.w	r3, r3, #31
 800bef4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bef8:	4618      	mov	r0, r3
 800befa:	bd80      	pop	{r7, pc}
 800befc:	58024400 	.word	0x58024400
 800bf00:	0801dde0 	.word	0x0801dde0

0800bf04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bf04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf08:	b0c6      	sub	sp, #280	@ 0x118
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bf10:	2300      	movs	r3, #0
 800bf12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bf16:	2300      	movs	r3, #0
 800bf18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bf1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf24:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800bf28:	2500      	movs	r5, #0
 800bf2a:	ea54 0305 	orrs.w	r3, r4, r5
 800bf2e:	d049      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800bf30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bf3a:	d02f      	beq.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800bf3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bf40:	d828      	bhi.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bf42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf46:	d01a      	beq.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bf48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf4c:	d822      	bhi.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d003      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bf52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf56:	d007      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bf58:	e01c      	b.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf5a:	4bab      	ldr	r3, [pc, #684]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf5e:	4aaa      	ldr	r2, [pc, #680]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bf66:	e01a      	b.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf6c:	3308      	adds	r3, #8
 800bf6e:	2102      	movs	r1, #2
 800bf70:	4618      	mov	r0, r3
 800bf72:	f002 fa49 	bl	800e408 <RCCEx_PLL2_Config>
 800bf76:	4603      	mov	r3, r0
 800bf78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bf7c:	e00f      	b.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf82:	3328      	adds	r3, #40	@ 0x28
 800bf84:	2102      	movs	r1, #2
 800bf86:	4618      	mov	r0, r3
 800bf88:	f002 faf0 	bl	800e56c <RCCEx_PLL3_Config>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bf92:	e004      	b.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf9a:	e000      	b.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800bf9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d10a      	bne.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bfa6:	4b98      	ldr	r3, [pc, #608]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bfa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfaa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bfae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfb4:	4a94      	ldr	r2, [pc, #592]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bfb6:	430b      	orrs	r3, r1
 800bfb8:	6513      	str	r3, [r2, #80]	@ 0x50
 800bfba:	e003      	b.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800bfd0:	f04f 0900 	mov.w	r9, #0
 800bfd4:	ea58 0309 	orrs.w	r3, r8, r9
 800bfd8:	d047      	beq.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800bfda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfe0:	2b04      	cmp	r3, #4
 800bfe2:	d82a      	bhi.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800bfe4:	a201      	add	r2, pc, #4	@ (adr r2, 800bfec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800bfe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfea:	bf00      	nop
 800bfec:	0800c001 	.word	0x0800c001
 800bff0:	0800c00f 	.word	0x0800c00f
 800bff4:	0800c025 	.word	0x0800c025
 800bff8:	0800c043 	.word	0x0800c043
 800bffc:	0800c043 	.word	0x0800c043
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c000:	4b81      	ldr	r3, [pc, #516]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c004:	4a80      	ldr	r2, [pc, #512]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c00a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c00c:	e01a      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c012:	3308      	adds	r3, #8
 800c014:	2100      	movs	r1, #0
 800c016:	4618      	mov	r0, r3
 800c018:	f002 f9f6 	bl	800e408 <RCCEx_PLL2_Config>
 800c01c:	4603      	mov	r3, r0
 800c01e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c022:	e00f      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c028:	3328      	adds	r3, #40	@ 0x28
 800c02a:	2100      	movs	r1, #0
 800c02c:	4618      	mov	r0, r3
 800c02e:	f002 fa9d 	bl	800e56c <RCCEx_PLL3_Config>
 800c032:	4603      	mov	r3, r0
 800c034:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c038:	e004      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c03a:	2301      	movs	r3, #1
 800c03c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c040:	e000      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c042:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10a      	bne.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c04c:	4b6e      	ldr	r3, [pc, #440]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c04e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c050:	f023 0107 	bic.w	r1, r3, #7
 800c054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c05a:	4a6b      	ldr	r2, [pc, #428]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c05c:	430b      	orrs	r3, r1
 800c05e:	6513      	str	r3, [r2, #80]	@ 0x50
 800c060:	e003      	b.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c062:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c066:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c072:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800c076:	f04f 0b00 	mov.w	fp, #0
 800c07a:	ea5a 030b 	orrs.w	r3, sl, fp
 800c07e:	d05b      	beq.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c084:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c088:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c08c:	d03b      	beq.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c08e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c092:	d834      	bhi.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c094:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c098:	d037      	beq.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c09a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c09e:	d82e      	bhi.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c0a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c0a4:	d033      	beq.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800c0a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c0aa:	d828      	bhi.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c0ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c0b0:	d01a      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c0b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c0b6:	d822      	bhi.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d003      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c0bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c0c0:	d007      	beq.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800c0c2:	e01c      	b.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0c4:	4b50      	ldr	r3, [pc, #320]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c0c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0c8:	4a4f      	ldr	r2, [pc, #316]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c0ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c0ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c0d0:	e01e      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0d6:	3308      	adds	r3, #8
 800c0d8:	2100      	movs	r1, #0
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f002 f994 	bl	800e408 <RCCEx_PLL2_Config>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c0e6:	e013      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0ec:	3328      	adds	r3, #40	@ 0x28
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f002 fa3b 	bl	800e56c <RCCEx_PLL3_Config>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c0fc:	e008      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
 800c100:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c104:	e004      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c106:	bf00      	nop
 800c108:	e002      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c10a:	bf00      	nop
 800c10c:	e000      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c10e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c110:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10b      	bne.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c118:	4b3b      	ldr	r3, [pc, #236]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c11a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c11c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c124:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c128:	4a37      	ldr	r2, [pc, #220]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c12a:	430b      	orrs	r3, r1
 800c12c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c12e:	e003      	b.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c134:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c140:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c144:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c148:	2300      	movs	r3, #0
 800c14a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c14e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c152:	460b      	mov	r3, r1
 800c154:	4313      	orrs	r3, r2
 800c156:	d05d      	beq.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c15c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c160:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c164:	d03b      	beq.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c166:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c16a:	d834      	bhi.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c16c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c170:	d037      	beq.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c172:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c176:	d82e      	bhi.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c178:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c17c:	d033      	beq.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c17e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c182:	d828      	bhi.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c184:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c188:	d01a      	beq.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c18a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c18e:	d822      	bhi.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c190:	2b00      	cmp	r3, #0
 800c192:	d003      	beq.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c198:	d007      	beq.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c19a:	e01c      	b.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c19c:	4b1a      	ldr	r3, [pc, #104]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a0:	4a19      	ldr	r2, [pc, #100]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c1a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c1a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c1a8:	e01e      	b.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ae:	3308      	adds	r3, #8
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f002 f928 	bl	800e408 <RCCEx_PLL2_Config>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c1be:	e013      	b.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1c4:	3328      	adds	r3, #40	@ 0x28
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f002 f9cf 	bl	800e56c <RCCEx_PLL3_Config>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c1d4:	e008      	b.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1dc:	e004      	b.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c1de:	bf00      	nop
 800c1e0:	e002      	b.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c1e2:	bf00      	nop
 800c1e4:	e000      	b.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c1e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10d      	bne.n	800c20c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c1f0:	4b05      	ldr	r3, [pc, #20]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c1f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1f4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c200:	4a01      	ldr	r2, [pc, #4]	@ (800c208 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c202:	430b      	orrs	r3, r1
 800c204:	6593      	str	r3, [r2, #88]	@ 0x58
 800c206:	e005      	b.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c208:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c20c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c210:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c220:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c224:	2300      	movs	r3, #0
 800c226:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c22a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c22e:	460b      	mov	r3, r1
 800c230:	4313      	orrs	r3, r2
 800c232:	d03a      	beq.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c23a:	2b30      	cmp	r3, #48	@ 0x30
 800c23c:	d01f      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c23e:	2b30      	cmp	r3, #48	@ 0x30
 800c240:	d819      	bhi.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c242:	2b20      	cmp	r3, #32
 800c244:	d00c      	beq.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c246:	2b20      	cmp	r3, #32
 800c248:	d815      	bhi.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d019      	beq.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c24e:	2b10      	cmp	r3, #16
 800c250:	d111      	bne.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c252:	4baa      	ldr	r3, [pc, #680]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c256:	4aa9      	ldr	r2, [pc, #676]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c25c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c25e:	e011      	b.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c264:	3308      	adds	r3, #8
 800c266:	2102      	movs	r1, #2
 800c268:	4618      	mov	r0, r3
 800c26a:	f002 f8cd 	bl	800e408 <RCCEx_PLL2_Config>
 800c26e:	4603      	mov	r3, r0
 800c270:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c274:	e006      	b.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c27c:	e002      	b.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c27e:	bf00      	nop
 800c280:	e000      	b.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c282:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d10a      	bne.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c28c:	4b9b      	ldr	r3, [pc, #620]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c28e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c290:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c29a:	4a98      	ldr	r2, [pc, #608]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c29c:	430b      	orrs	r3, r1
 800c29e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c2a0:	e003      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c2b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c2c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	d051      	beq.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c2d4:	d035      	beq.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c2d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c2da:	d82e      	bhi.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c2dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c2e0:	d031      	beq.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c2e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c2e6:	d828      	bhi.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c2e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2ec:	d01a      	beq.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c2ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2f2:	d822      	bhi.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d003      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c2f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2fc:	d007      	beq.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c2fe:	e01c      	b.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c300:	4b7e      	ldr	r3, [pc, #504]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c304:	4a7d      	ldr	r2, [pc, #500]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c30a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c30c:	e01c      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c312:	3308      	adds	r3, #8
 800c314:	2100      	movs	r1, #0
 800c316:	4618      	mov	r0, r3
 800c318:	f002 f876 	bl	800e408 <RCCEx_PLL2_Config>
 800c31c:	4603      	mov	r3, r0
 800c31e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c322:	e011      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c328:	3328      	adds	r3, #40	@ 0x28
 800c32a:	2100      	movs	r1, #0
 800c32c:	4618      	mov	r0, r3
 800c32e:	f002 f91d 	bl	800e56c <RCCEx_PLL3_Config>
 800c332:	4603      	mov	r3, r0
 800c334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c338:	e006      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c340:	e002      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c342:	bf00      	nop
 800c344:	e000      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c346:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10a      	bne.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c350:	4b6a      	ldr	r3, [pc, #424]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c354:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c35c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c35e:	4a67      	ldr	r2, [pc, #412]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c360:	430b      	orrs	r3, r1
 800c362:	6513      	str	r3, [r2, #80]	@ 0x50
 800c364:	e003      	b.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c36a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c376:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800c37a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c37e:	2300      	movs	r3, #0
 800c380:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c384:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800c388:	460b      	mov	r3, r1
 800c38a:	4313      	orrs	r3, r2
 800c38c:	d053      	beq.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c398:	d033      	beq.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800c39a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c39e:	d82c      	bhi.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c3a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c3a4:	d02f      	beq.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800c3a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c3aa:	d826      	bhi.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c3ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c3b0:	d02b      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c3b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c3b6:	d820      	bhi.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c3b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c3bc:	d012      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c3be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c3c2:	d81a      	bhi.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d022      	beq.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c3c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3cc:	d115      	bne.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3d2:	3308      	adds	r3, #8
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f002 f816 	bl	800e408 <RCCEx_PLL2_Config>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c3e2:	e015      	b.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3e8:	3328      	adds	r3, #40	@ 0x28
 800c3ea:	2101      	movs	r1, #1
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f002 f8bd 	bl	800e56c <RCCEx_PLL3_Config>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c3f8:	e00a      	b.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c400:	e006      	b.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c402:	bf00      	nop
 800c404:	e004      	b.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c406:	bf00      	nop
 800c408:	e002      	b.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c40a:	bf00      	nop
 800c40c:	e000      	b.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c40e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10a      	bne.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c418:	4b38      	ldr	r3, [pc, #224]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c41a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c41c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c426:	4a35      	ldr	r2, [pc, #212]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c428:	430b      	orrs	r3, r1
 800c42a:	6513      	str	r3, [r2, #80]	@ 0x50
 800c42c:	e003      	b.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c42e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c432:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800c442:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c446:	2300      	movs	r3, #0
 800c448:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c44c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c450:	460b      	mov	r3, r1
 800c452:	4313      	orrs	r3, r2
 800c454:	d058      	beq.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c45a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c45e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c462:	d033      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c468:	d82c      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c46a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c46e:	d02f      	beq.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c474:	d826      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c476:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c47a:	d02b      	beq.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c47c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c480:	d820      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c486:	d012      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c48c:	d81a      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d022      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c496:	d115      	bne.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c49c:	3308      	adds	r3, #8
 800c49e:	2101      	movs	r1, #1
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f001 ffb1 	bl	800e408 <RCCEx_PLL2_Config>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c4ac:	e015      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4b2:	3328      	adds	r3, #40	@ 0x28
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f002 f858 	bl	800e56c <RCCEx_PLL3_Config>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c4c2:	e00a      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4ca:	e006      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c4cc:	bf00      	nop
 800c4ce:	e004      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c4d0:	bf00      	nop
 800c4d2:	e002      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c4d4:	bf00      	nop
 800c4d6:	e000      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c4d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10e      	bne.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c4e2:	4b06      	ldr	r3, [pc, #24]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c4e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c4f2:	4a02      	ldr	r2, [pc, #8]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c4f4:	430b      	orrs	r3, r1
 800c4f6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c4f8:	e006      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c4fa:	bf00      	nop
 800c4fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c510:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c514:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c518:	2300      	movs	r3, #0
 800c51a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c51e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c522:	460b      	mov	r3, r1
 800c524:	4313      	orrs	r3, r2
 800c526:	d037      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c52c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c52e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c532:	d00e      	beq.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c538:	d816      	bhi.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d018      	beq.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c53e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c542:	d111      	bne.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c544:	4bc4      	ldr	r3, [pc, #784]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c548:	4ac3      	ldr	r2, [pc, #780]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c54a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c54e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c550:	e00f      	b.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c556:	3308      	adds	r3, #8
 800c558:	2101      	movs	r1, #1
 800c55a:	4618      	mov	r0, r3
 800c55c:	f001 ff54 	bl	800e408 <RCCEx_PLL2_Config>
 800c560:	4603      	mov	r3, r0
 800c562:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c566:	e004      	b.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c568:	2301      	movs	r3, #1
 800c56a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c56e:	e000      	b.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c570:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c572:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c576:	2b00      	cmp	r3, #0
 800c578:	d10a      	bne.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c57a:	4bb7      	ldr	r3, [pc, #732]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c57c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c57e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c588:	4ab3      	ldr	r2, [pc, #716]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c58a:	430b      	orrs	r3, r1
 800c58c:	6513      	str	r3, [r2, #80]	@ 0x50
 800c58e:	e003      	b.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c594:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c5a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c5ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	d039      	beq.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5be:	2b03      	cmp	r3, #3
 800c5c0:	d81c      	bhi.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c5c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c8:	0800c605 	.word	0x0800c605
 800c5cc:	0800c5d9 	.word	0x0800c5d9
 800c5d0:	0800c5e7 	.word	0x0800c5e7
 800c5d4:	0800c605 	.word	0x0800c605
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5d8:	4b9f      	ldr	r3, [pc, #636]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5dc:	4a9e      	ldr	r2, [pc, #632]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c5e4:	e00f      	b.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ea:	3308      	adds	r3, #8
 800c5ec:	2102      	movs	r1, #2
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f001 ff0a 	bl	800e408 <RCCEx_PLL2_Config>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c5fa:	e004      	b.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c602:	e000      	b.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c604:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c606:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10a      	bne.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c60e:	4b92      	ldr	r3, [pc, #584]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c612:	f023 0103 	bic.w	r1, r3, #3
 800c616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c61a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c61c:	4a8e      	ldr	r2, [pc, #568]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c61e:	430b      	orrs	r3, r1
 800c620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c622:	e003      	b.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c624:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c628:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c634:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c638:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c63c:	2300      	movs	r3, #0
 800c63e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c642:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c646:	460b      	mov	r3, r1
 800c648:	4313      	orrs	r3, r2
 800c64a:	f000 8099 	beq.w	800c780 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c64e:	4b83      	ldr	r3, [pc, #524]	@ (800c85c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a82      	ldr	r2, [pc, #520]	@ (800c85c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c658:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c65a:	f7f8 f87d 	bl	8004758 <HAL_GetTick>
 800c65e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c662:	e00b      	b.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c664:	f7f8 f878 	bl	8004758 <HAL_GetTick>
 800c668:	4602      	mov	r2, r0
 800c66a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	2b64      	cmp	r3, #100	@ 0x64
 800c672:	d903      	bls.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c674:	2303      	movs	r3, #3
 800c676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c67a:	e005      	b.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c67c:	4b77      	ldr	r3, [pc, #476]	@ (800c85c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c684:	2b00      	cmp	r3, #0
 800c686:	d0ed      	beq.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d173      	bne.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c690:	4b71      	ldr	r3, [pc, #452]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c692:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c698:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c69c:	4053      	eors	r3, r2
 800c69e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d015      	beq.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c6a6:	4b6c      	ldr	r3, [pc, #432]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c6a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6ae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c6b2:	4b69      	ldr	r3, [pc, #420]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c6b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6b6:	4a68      	ldr	r2, [pc, #416]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c6b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c6bc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c6be:	4b66      	ldr	r3, [pc, #408]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c6c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6c2:	4a65      	ldr	r2, [pc, #404]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c6c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c6c8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c6ca:	4a63      	ldr	r2, [pc, #396]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c6cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c6da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6de:	d118      	bne.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6e0:	f7f8 f83a 	bl	8004758 <HAL_GetTick>
 800c6e4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c6e8:	e00d      	b.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6ea:	f7f8 f835 	bl	8004758 <HAL_GetTick>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c6f4:	1ad2      	subs	r2, r2, r3
 800c6f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d903      	bls.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c6fe:	2303      	movs	r3, #3
 800c700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c704:	e005      	b.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c706:	4b54      	ldr	r3, [pc, #336]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c70a:	f003 0302 	and.w	r3, r3, #2
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d0eb      	beq.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c712:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c716:	2b00      	cmp	r3, #0
 800c718:	d129      	bne.n	800c76e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c71e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c72a:	d10e      	bne.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c72c:	4b4a      	ldr	r3, [pc, #296]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c738:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c73c:	091a      	lsrs	r2, r3, #4
 800c73e:	4b48      	ldr	r3, [pc, #288]	@ (800c860 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c740:	4013      	ands	r3, r2
 800c742:	4a45      	ldr	r2, [pc, #276]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c744:	430b      	orrs	r3, r1
 800c746:	6113      	str	r3, [r2, #16]
 800c748:	e005      	b.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c74a:	4b43      	ldr	r3, [pc, #268]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	4a42      	ldr	r2, [pc, #264]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c750:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c754:	6113      	str	r3, [r2, #16]
 800c756:	4b40      	ldr	r3, [pc, #256]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c758:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c75a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c75e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c766:	4a3c      	ldr	r2, [pc, #240]	@ (800c858 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c768:	430b      	orrs	r3, r1
 800c76a:	6713      	str	r3, [r2, #112]	@ 0x70
 800c76c:	e008      	b.n	800c780 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c76e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c772:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c776:	e003      	b.n	800c780 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c77c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c788:	f002 0301 	and.w	r3, r2, #1
 800c78c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c790:	2300      	movs	r3, #0
 800c792:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c796:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c79a:	460b      	mov	r3, r1
 800c79c:	4313      	orrs	r3, r2
 800c79e:	f000 808f 	beq.w	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c7a8:	2b28      	cmp	r3, #40	@ 0x28
 800c7aa:	d871      	bhi.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c7ac:	a201      	add	r2, pc, #4	@ (adr r2, 800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b2:	bf00      	nop
 800c7b4:	0800c899 	.word	0x0800c899
 800c7b8:	0800c891 	.word	0x0800c891
 800c7bc:	0800c891 	.word	0x0800c891
 800c7c0:	0800c891 	.word	0x0800c891
 800c7c4:	0800c891 	.word	0x0800c891
 800c7c8:	0800c891 	.word	0x0800c891
 800c7cc:	0800c891 	.word	0x0800c891
 800c7d0:	0800c891 	.word	0x0800c891
 800c7d4:	0800c865 	.word	0x0800c865
 800c7d8:	0800c891 	.word	0x0800c891
 800c7dc:	0800c891 	.word	0x0800c891
 800c7e0:	0800c891 	.word	0x0800c891
 800c7e4:	0800c891 	.word	0x0800c891
 800c7e8:	0800c891 	.word	0x0800c891
 800c7ec:	0800c891 	.word	0x0800c891
 800c7f0:	0800c891 	.word	0x0800c891
 800c7f4:	0800c87b 	.word	0x0800c87b
 800c7f8:	0800c891 	.word	0x0800c891
 800c7fc:	0800c891 	.word	0x0800c891
 800c800:	0800c891 	.word	0x0800c891
 800c804:	0800c891 	.word	0x0800c891
 800c808:	0800c891 	.word	0x0800c891
 800c80c:	0800c891 	.word	0x0800c891
 800c810:	0800c891 	.word	0x0800c891
 800c814:	0800c899 	.word	0x0800c899
 800c818:	0800c891 	.word	0x0800c891
 800c81c:	0800c891 	.word	0x0800c891
 800c820:	0800c891 	.word	0x0800c891
 800c824:	0800c891 	.word	0x0800c891
 800c828:	0800c891 	.word	0x0800c891
 800c82c:	0800c891 	.word	0x0800c891
 800c830:	0800c891 	.word	0x0800c891
 800c834:	0800c899 	.word	0x0800c899
 800c838:	0800c891 	.word	0x0800c891
 800c83c:	0800c891 	.word	0x0800c891
 800c840:	0800c891 	.word	0x0800c891
 800c844:	0800c891 	.word	0x0800c891
 800c848:	0800c891 	.word	0x0800c891
 800c84c:	0800c891 	.word	0x0800c891
 800c850:	0800c891 	.word	0x0800c891
 800c854:	0800c899 	.word	0x0800c899
 800c858:	58024400 	.word	0x58024400
 800c85c:	58024800 	.word	0x58024800
 800c860:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c868:	3308      	adds	r3, #8
 800c86a:	2101      	movs	r1, #1
 800c86c:	4618      	mov	r0, r3
 800c86e:	f001 fdcb 	bl	800e408 <RCCEx_PLL2_Config>
 800c872:	4603      	mov	r3, r0
 800c874:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c878:	e00f      	b.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c87e:	3328      	adds	r3, #40	@ 0x28
 800c880:	2101      	movs	r1, #1
 800c882:	4618      	mov	r0, r3
 800c884:	f001 fe72 	bl	800e56c <RCCEx_PLL3_Config>
 800c888:	4603      	mov	r3, r0
 800c88a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c88e:	e004      	b.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c890:	2301      	movs	r3, #1
 800c892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c896:	e000      	b.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c89a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10a      	bne.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c8a2:	4bbf      	ldr	r3, [pc, #764]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c8a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c8aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c8b0:	4abb      	ldr	r2, [pc, #748]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c8b2:	430b      	orrs	r3, r1
 800c8b4:	6553      	str	r3, [r2, #84]	@ 0x54
 800c8b6:	e003      	b.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c8:	f002 0302 	and.w	r3, r2, #2
 800c8cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c8d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	d041      	beq.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8e6:	2b05      	cmp	r3, #5
 800c8e8:	d824      	bhi.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c8ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f0:	0800c93d 	.word	0x0800c93d
 800c8f4:	0800c909 	.word	0x0800c909
 800c8f8:	0800c91f 	.word	0x0800c91f
 800c8fc:	0800c93d 	.word	0x0800c93d
 800c900:	0800c93d 	.word	0x0800c93d
 800c904:	0800c93d 	.word	0x0800c93d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c90c:	3308      	adds	r3, #8
 800c90e:	2101      	movs	r1, #1
 800c910:	4618      	mov	r0, r3
 800c912:	f001 fd79 	bl	800e408 <RCCEx_PLL2_Config>
 800c916:	4603      	mov	r3, r0
 800c918:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c91c:	e00f      	b.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c922:	3328      	adds	r3, #40	@ 0x28
 800c924:	2101      	movs	r1, #1
 800c926:	4618      	mov	r0, r3
 800c928:	f001 fe20 	bl	800e56c <RCCEx_PLL3_Config>
 800c92c:	4603      	mov	r3, r0
 800c92e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c932:	e004      	b.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c934:	2301      	movs	r3, #1
 800c936:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c93a:	e000      	b.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c93c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c93e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c942:	2b00      	cmp	r3, #0
 800c944:	d10a      	bne.n	800c95c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c946:	4b96      	ldr	r3, [pc, #600]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c94a:	f023 0107 	bic.w	r1, r3, #7
 800c94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c954:	4a92      	ldr	r2, [pc, #584]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c956:	430b      	orrs	r3, r1
 800c958:	6553      	str	r3, [r2, #84]	@ 0x54
 800c95a:	e003      	b.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c95c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c960:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	f002 0304 	and.w	r3, r2, #4
 800c970:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c974:	2300      	movs	r3, #0
 800c976:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c97a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c97e:	460b      	mov	r3, r1
 800c980:	4313      	orrs	r3, r2
 800c982:	d044      	beq.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c98c:	2b05      	cmp	r3, #5
 800c98e:	d825      	bhi.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c990:	a201      	add	r2, pc, #4	@ (adr r2, 800c998 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c996:	bf00      	nop
 800c998:	0800c9e5 	.word	0x0800c9e5
 800c99c:	0800c9b1 	.word	0x0800c9b1
 800c9a0:	0800c9c7 	.word	0x0800c9c7
 800c9a4:	0800c9e5 	.word	0x0800c9e5
 800c9a8:	0800c9e5 	.word	0x0800c9e5
 800c9ac:	0800c9e5 	.word	0x0800c9e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9b4:	3308      	adds	r3, #8
 800c9b6:	2101      	movs	r1, #1
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f001 fd25 	bl	800e408 <RCCEx_PLL2_Config>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c9c4:	e00f      	b.n	800c9e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ca:	3328      	adds	r3, #40	@ 0x28
 800c9cc:	2101      	movs	r1, #1
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f001 fdcc 	bl	800e56c <RCCEx_PLL3_Config>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c9da:	e004      	b.n	800c9e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c9e2:	e000      	b.n	800c9e6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c9e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d10b      	bne.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c9ee:	4b6c      	ldr	r3, [pc, #432]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c9f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9f2:	f023 0107 	bic.w	r1, r3, #7
 800c9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9fe:	4a68      	ldr	r2, [pc, #416]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ca00:	430b      	orrs	r3, r1
 800ca02:	6593      	str	r3, [r2, #88]	@ 0x58
 800ca04:	e003      	b.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ca0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca16:	f002 0320 	and.w	r3, r2, #32
 800ca1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ca24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ca28:	460b      	mov	r3, r1
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	d055      	beq.n	800cada <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ca2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ca3a:	d033      	beq.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800ca3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ca40:	d82c      	bhi.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ca42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca46:	d02f      	beq.n	800caa8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ca48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca4c:	d826      	bhi.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ca4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ca52:	d02b      	beq.n	800caac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800ca54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ca58:	d820      	bhi.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ca5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca5e:	d012      	beq.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800ca60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca64:	d81a      	bhi.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d022      	beq.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800ca6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca6e:	d115      	bne.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca74:	3308      	adds	r3, #8
 800ca76:	2100      	movs	r1, #0
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f001 fcc5 	bl	800e408 <RCCEx_PLL2_Config>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ca84:	e015      	b.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca8a:	3328      	adds	r3, #40	@ 0x28
 800ca8c:	2102      	movs	r1, #2
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f001 fd6c 	bl	800e56c <RCCEx_PLL3_Config>
 800ca94:	4603      	mov	r3, r0
 800ca96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ca9a:	e00a      	b.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800caa2:	e006      	b.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800caa4:	bf00      	nop
 800caa6:	e004      	b.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800caa8:	bf00      	nop
 800caaa:	e002      	b.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800caac:	bf00      	nop
 800caae:	e000      	b.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800cab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cab2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d10b      	bne.n	800cad2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800caba:	4b39      	ldr	r3, [pc, #228]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cabc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cabe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800cac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800caca:	4a35      	ldr	r2, [pc, #212]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cacc:	430b      	orrs	r3, r1
 800cace:	6553      	str	r3, [r2, #84]	@ 0x54
 800cad0:	e003      	b.n	800cada <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cad2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cad6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800cae6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800caea:	2300      	movs	r3, #0
 800caec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800caf0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800caf4:	460b      	mov	r3, r1
 800caf6:	4313      	orrs	r3, r2
 800caf8:	d058      	beq.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800cafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cafe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cb02:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800cb06:	d033      	beq.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800cb08:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800cb0c:	d82c      	bhi.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cb0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb12:	d02f      	beq.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800cb14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb18:	d826      	bhi.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cb1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cb1e:	d02b      	beq.n	800cb78 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800cb20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cb24:	d820      	bhi.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cb26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb2a:	d012      	beq.n	800cb52 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800cb2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb30:	d81a      	bhi.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d022      	beq.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800cb36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb3a:	d115      	bne.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb40:	3308      	adds	r3, #8
 800cb42:	2100      	movs	r1, #0
 800cb44:	4618      	mov	r0, r3
 800cb46:	f001 fc5f 	bl	800e408 <RCCEx_PLL2_Config>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cb50:	e015      	b.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cb52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb56:	3328      	adds	r3, #40	@ 0x28
 800cb58:	2102      	movs	r1, #2
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f001 fd06 	bl	800e56c <RCCEx_PLL3_Config>
 800cb60:	4603      	mov	r3, r0
 800cb62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cb66:	e00a      	b.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb6e:	e006      	b.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cb70:	bf00      	nop
 800cb72:	e004      	b.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cb74:	bf00      	nop
 800cb76:	e002      	b.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cb78:	bf00      	nop
 800cb7a:	e000      	b.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cb7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d10e      	bne.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cb86:	4b06      	ldr	r3, [pc, #24]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cb88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb8a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800cb8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cb96:	4a02      	ldr	r2, [pc, #8]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cb98:	430b      	orrs	r3, r1
 800cb9a:	6593      	str	r3, [r2, #88]	@ 0x58
 800cb9c:	e006      	b.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800cb9e:	bf00      	nop
 800cba0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cba8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cbac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800cbb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cbc2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	d055      	beq.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800cbcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cbd4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800cbd8:	d033      	beq.n	800cc42 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800cbda:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800cbde:	d82c      	bhi.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cbe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cbe4:	d02f      	beq.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800cbe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cbea:	d826      	bhi.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cbec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800cbf0:	d02b      	beq.n	800cc4a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800cbf2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800cbf6:	d820      	bhi.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cbf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cbfc:	d012      	beq.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800cbfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cc02:	d81a      	bhi.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d022      	beq.n	800cc4e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800cc08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc0c:	d115      	bne.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc12:	3308      	adds	r3, #8
 800cc14:	2100      	movs	r1, #0
 800cc16:	4618      	mov	r0, r3
 800cc18:	f001 fbf6 	bl	800e408 <RCCEx_PLL2_Config>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cc22:	e015      	b.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc28:	3328      	adds	r3, #40	@ 0x28
 800cc2a:	2102      	movs	r1, #2
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f001 fc9d 	bl	800e56c <RCCEx_PLL3_Config>
 800cc32:	4603      	mov	r3, r0
 800cc34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cc38:	e00a      	b.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc40:	e006      	b.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cc42:	bf00      	nop
 800cc44:	e004      	b.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cc46:	bf00      	nop
 800cc48:	e002      	b.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cc4a:	bf00      	nop
 800cc4c:	e000      	b.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cc4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10b      	bne.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cc58:	4ba0      	ldr	r3, [pc, #640]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cc5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc5c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800cc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cc68:	4a9c      	ldr	r2, [pc, #624]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cc6a:	430b      	orrs	r3, r1
 800cc6c:	6593      	str	r3, [r2, #88]	@ 0x58
 800cc6e:	e003      	b.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800cc78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc80:	f002 0308 	and.w	r3, r2, #8
 800cc84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cc88:	2300      	movs	r3, #0
 800cc8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cc8e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800cc92:	460b      	mov	r3, r1
 800cc94:	4313      	orrs	r3, r2
 800cc96:	d01e      	beq.n	800ccd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800cc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cca4:	d10c      	bne.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccaa:	3328      	adds	r3, #40	@ 0x28
 800ccac:	2102      	movs	r1, #2
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f001 fc5c 	bl	800e56c <RCCEx_PLL3_Config>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d002      	beq.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ccc0:	4b86      	ldr	r3, [pc, #536]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ccc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccc4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ccc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccd0:	4a82      	ldr	r2, [pc, #520]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ccd2:	430b      	orrs	r3, r1
 800ccd4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ccd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccde:	f002 0310 	and.w	r3, r2, #16
 800cce2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cce6:	2300      	movs	r3, #0
 800cce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ccec:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	d01e      	beq.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ccf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd02:	d10c      	bne.n	800cd1e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cd04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd08:	3328      	adds	r3, #40	@ 0x28
 800cd0a:	2102      	movs	r1, #2
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f001 fc2d 	bl	800e56c <RCCEx_PLL3_Config>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cd1e:	4b6f      	ldr	r3, [pc, #444]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cd26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd2e:	4a6b      	ldr	r2, [pc, #428]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd30:	430b      	orrs	r3, r1
 800cd32:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cd34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800cd40:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cd42:	2300      	movs	r3, #0
 800cd44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cd46:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	d03e      	beq.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800cd50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cd58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd5c:	d022      	beq.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800cd5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd62:	d81b      	bhi.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d003      	beq.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800cd68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd6c:	d00b      	beq.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800cd6e:	e015      	b.n	800cd9c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd74:	3308      	adds	r3, #8
 800cd76:	2100      	movs	r1, #0
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f001 fb45 	bl	800e408 <RCCEx_PLL2_Config>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cd84:	e00f      	b.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cd86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd8a:	3328      	adds	r3, #40	@ 0x28
 800cd8c:	2102      	movs	r1, #2
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f001 fbec 	bl	800e56c <RCCEx_PLL3_Config>
 800cd94:	4603      	mov	r3, r0
 800cd96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cd9a:	e004      	b.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cda2:	e000      	b.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800cda4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cda6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10b      	bne.n	800cdc6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cdae:	4b4b      	ldr	r3, [pc, #300]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cdb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdb2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800cdb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cdbe:	4a47      	ldr	r2, [pc, #284]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cdc0:	430b      	orrs	r3, r1
 800cdc2:	6593      	str	r3, [r2, #88]	@ 0x58
 800cdc4:	e003      	b.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cdce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800cdda:	673b      	str	r3, [r7, #112]	@ 0x70
 800cddc:	2300      	movs	r3, #0
 800cdde:	677b      	str	r3, [r7, #116]	@ 0x74
 800cde0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800cde4:	460b      	mov	r3, r1
 800cde6:	4313      	orrs	r3, r2
 800cde8:	d03b      	beq.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800cdea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cdf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cdf6:	d01f      	beq.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800cdf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cdfc:	d818      	bhi.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800cdfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce02:	d003      	beq.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ce04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce08:	d007      	beq.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ce0a:	e011      	b.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce0c:	4b33      	ldr	r3, [pc, #204]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ce0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce10:	4a32      	ldr	r2, [pc, #200]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ce12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ce18:	e00f      	b.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ce1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce1e:	3328      	adds	r3, #40	@ 0x28
 800ce20:	2101      	movs	r1, #1
 800ce22:	4618      	mov	r0, r3
 800ce24:	f001 fba2 	bl	800e56c <RCCEx_PLL3_Config>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ce2e:	e004      	b.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce30:	2301      	movs	r3, #1
 800ce32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ce36:	e000      	b.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ce38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10b      	bne.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ce42:	4b26      	ldr	r3, [pc, #152]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ce44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ce4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce52:	4a22      	ldr	r2, [pc, #136]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ce54:	430b      	orrs	r3, r1
 800ce56:	6553      	str	r3, [r2, #84]	@ 0x54
 800ce58:	e003      	b.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ce62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ce6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ce70:	2300      	movs	r3, #0
 800ce72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ce74:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ce78:	460b      	mov	r3, r1
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	d034      	beq.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ce7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d003      	beq.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ce88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce8c:	d007      	beq.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ce8e:	e011      	b.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce90:	4b12      	ldr	r3, [pc, #72]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ce92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce94:	4a11      	ldr	r2, [pc, #68]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ce96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ce9c:	e00e      	b.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cea2:	3308      	adds	r3, #8
 800cea4:	2102      	movs	r1, #2
 800cea6:	4618      	mov	r0, r3
 800cea8:	f001 faae 	bl	800e408 <RCCEx_PLL2_Config>
 800ceac:	4603      	mov	r3, r0
 800ceae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ceb2:	e003      	b.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ceba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10d      	bne.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cec4:	4b05      	ldr	r3, [pc, #20]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cec8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ced0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ced2:	4a02      	ldr	r2, [pc, #8]	@ (800cedc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ced4:	430b      	orrs	r3, r1
 800ced6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ced8:	e006      	b.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ceda:	bf00      	nop
 800cedc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800cef4:	663b      	str	r3, [r7, #96]	@ 0x60
 800cef6:	2300      	movs	r3, #0
 800cef8:	667b      	str	r3, [r7, #100]	@ 0x64
 800cefa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800cefe:	460b      	mov	r3, r1
 800cf00:	4313      	orrs	r3, r2
 800cf02:	d00c      	beq.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cf04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf08:	3328      	adds	r3, #40	@ 0x28
 800cf0a:	2102      	movs	r1, #2
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f001 fb2d 	bl	800e56c <RCCEx_PLL3_Config>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cf1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800cf2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cf30:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800cf34:	460b      	mov	r3, r1
 800cf36:	4313      	orrs	r3, r2
 800cf38:	d036      	beq.n	800cfa8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800cf3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf44:	d018      	beq.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800cf46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf4a:	d811      	bhi.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cf4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf50:	d014      	beq.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800cf52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf56:	d80b      	bhi.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d011      	beq.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800cf5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf60:	d106      	bne.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf62:	4bb7      	ldr	r3, [pc, #732]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf66:	4ab6      	ldr	r2, [pc, #728]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800cf6e:	e008      	b.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cf76:	e004      	b.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cf78:	bf00      	nop
 800cf7a:	e002      	b.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cf7c:	bf00      	nop
 800cf7e:	e000      	b.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cf80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10a      	bne.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cf8a:	4bad      	ldr	r3, [pc, #692]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cf92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf98:	4aa9      	ldr	r2, [pc, #676]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf9a:	430b      	orrs	r3, r1
 800cf9c:	6553      	str	r3, [r2, #84]	@ 0x54
 800cf9e:	e003      	b.n	800cfa8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cfa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800cfb4:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	657b      	str	r3, [r7, #84]	@ 0x54
 800cfba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	d009      	beq.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cfc4:	4b9e      	ldr	r3, [pc, #632]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cfc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfc8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cfcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfd2:	4a9b      	ldr	r2, [pc, #620]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cfd4:	430b      	orrs	r3, r1
 800cfd6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cfd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800cfe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800cfee:	460b      	mov	r3, r1
 800cff0:	4313      	orrs	r3, r2
 800cff2:	d009      	beq.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cff4:	4b92      	ldr	r3, [pc, #584]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cff8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800cffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d000:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d002:	4a8f      	ldr	r2, [pc, #572]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d004:	430b      	orrs	r3, r1
 800d006:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d010:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d014:	643b      	str	r3, [r7, #64]	@ 0x40
 800d016:	2300      	movs	r3, #0
 800d018:	647b      	str	r3, [r7, #68]	@ 0x44
 800d01a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d01e:	460b      	mov	r3, r1
 800d020:	4313      	orrs	r3, r2
 800d022:	d00e      	beq.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d024:	4b86      	ldr	r3, [pc, #536]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	4a85      	ldr	r2, [pc, #532]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d02a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d02e:	6113      	str	r3, [r2, #16]
 800d030:	4b83      	ldr	r3, [pc, #524]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d032:	6919      	ldr	r1, [r3, #16]
 800d034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d03c:	4a80      	ldr	r2, [pc, #512]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d03e:	430b      	orrs	r3, r1
 800d040:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d04e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d050:	2300      	movs	r3, #0
 800d052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d054:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d058:	460b      	mov	r3, r1
 800d05a:	4313      	orrs	r3, r2
 800d05c:	d009      	beq.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d05e:	4b78      	ldr	r3, [pc, #480]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d062:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d06a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d06c:	4a74      	ldr	r2, [pc, #464]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d06e:	430b      	orrs	r3, r1
 800d070:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d07e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d080:	2300      	movs	r3, #0
 800d082:	637b      	str	r3, [r7, #52]	@ 0x34
 800d084:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d088:	460b      	mov	r3, r1
 800d08a:	4313      	orrs	r3, r2
 800d08c:	d00a      	beq.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d08e:	4b6c      	ldr	r3, [pc, #432]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d092:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d09a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d09e:	4a68      	ldr	r2, [pc, #416]	@ (800d240 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d0a0:	430b      	orrs	r3, r1
 800d0a2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d0b0:	f003 0301 	and.w	r3, r3, #1
 800d0b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d0b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	d011      	beq.n	800d0e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0c4:	3308      	adds	r3, #8
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f001 f99d 	bl	800e408 <RCCEx_PLL2_Config>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d0d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d003      	beq.n	800d0e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	6239      	str	r1, [r7, #32]
 800d0f0:	f003 0302 	and.w	r3, r3, #2
 800d0f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	d011      	beq.n	800d124 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d104:	3308      	adds	r3, #8
 800d106:	2101      	movs	r1, #1
 800d108:	4618      	mov	r0, r3
 800d10a:	f001 f97d 	bl	800e408 <RCCEx_PLL2_Config>
 800d10e:	4603      	mov	r3, r0
 800d110:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d114:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d003      	beq.n	800d124 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d11c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d120:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12c:	2100      	movs	r1, #0
 800d12e:	61b9      	str	r1, [r7, #24]
 800d130:	f003 0304 	and.w	r3, r3, #4
 800d134:	61fb      	str	r3, [r7, #28]
 800d136:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d13a:	460b      	mov	r3, r1
 800d13c:	4313      	orrs	r3, r2
 800d13e:	d011      	beq.n	800d164 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d144:	3308      	adds	r3, #8
 800d146:	2102      	movs	r1, #2
 800d148:	4618      	mov	r0, r3
 800d14a:	f001 f95d 	bl	800e408 <RCCEx_PLL2_Config>
 800d14e:	4603      	mov	r3, r0
 800d150:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d003      	beq.n	800d164 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d15c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d160:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	2100      	movs	r1, #0
 800d16e:	6139      	str	r1, [r7, #16]
 800d170:	f003 0308 	and.w	r3, r3, #8
 800d174:	617b      	str	r3, [r7, #20]
 800d176:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d17a:	460b      	mov	r3, r1
 800d17c:	4313      	orrs	r3, r2
 800d17e:	d011      	beq.n	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d184:	3328      	adds	r3, #40	@ 0x28
 800d186:	2100      	movs	r1, #0
 800d188:	4618      	mov	r0, r3
 800d18a:	f001 f9ef 	bl	800e56c <RCCEx_PLL3_Config>
 800d18e:	4603      	mov	r3, r0
 800d190:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d003      	beq.n	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d19c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	60b9      	str	r1, [r7, #8]
 800d1b0:	f003 0310 	and.w	r3, r3, #16
 800d1b4:	60fb      	str	r3, [r7, #12]
 800d1b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	d011      	beq.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1c4:	3328      	adds	r3, #40	@ 0x28
 800d1c6:	2101      	movs	r1, #1
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f001 f9cf 	bl	800e56c <RCCEx_PLL3_Config>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d1d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d003      	beq.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	2100      	movs	r1, #0
 800d1ee:	6039      	str	r1, [r7, #0]
 800d1f0:	f003 0320 	and.w	r3, r3, #32
 800d1f4:	607b      	str	r3, [r7, #4]
 800d1f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	d011      	beq.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d204:	3328      	adds	r3, #40	@ 0x28
 800d206:	2102      	movs	r1, #2
 800d208:	4618      	mov	r0, r3
 800d20a:	f001 f9af 	bl	800e56c <RCCEx_PLL3_Config>
 800d20e:	4603      	mov	r3, r0
 800d210:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d214:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d003      	beq.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d21c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d220:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d224:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d101      	bne.n	800d230 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d22c:	2300      	movs	r3, #0
 800d22e:	e000      	b.n	800d232 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d230:	2301      	movs	r3, #1
}
 800d232:	4618      	mov	r0, r3
 800d234:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d238:	46bd      	mov	sp, r7
 800d23a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d23e:	bf00      	nop
 800d240:	58024400 	.word	0x58024400

0800d244 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b090      	sub	sp, #64	@ 0x40
 800d248:	af00      	add	r7, sp, #0
 800d24a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d24e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d252:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d256:	430b      	orrs	r3, r1
 800d258:	f040 8094 	bne.w	800d384 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d25c:	4b9b      	ldr	r3, [pc, #620]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d25e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d260:	f003 0307 	and.w	r3, r3, #7
 800d264:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d268:	2b04      	cmp	r3, #4
 800d26a:	f200 8087 	bhi.w	800d37c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800d26e:	a201      	add	r2, pc, #4	@ (adr r2, 800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800d270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d274:	0800d289 	.word	0x0800d289
 800d278:	0800d2b1 	.word	0x0800d2b1
 800d27c:	0800d2d9 	.word	0x0800d2d9
 800d280:	0800d375 	.word	0x0800d375
 800d284:	0800d301 	.word	0x0800d301
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d288:	4b90      	ldr	r3, [pc, #576]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d290:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d294:	d108      	bne.n	800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d29a:	4618      	mov	r0, r3
 800d29c:	f000 ff62 	bl	800e164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2a4:	f000 bc93 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2ac:	f000 bc8f 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2b0:	4b86      	ldr	r3, [pc, #536]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d2bc:	d108      	bne.n	800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2be:	f107 0318 	add.w	r3, r7, #24
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f000 fca6 	bl	800dc14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d2c8:	69bb      	ldr	r3, [r7, #24]
 800d2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2cc:	f000 bc7f 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2d4:	f000 bc7b 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d2d8:	4b7c      	ldr	r3, [pc, #496]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d2e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d2e4:	d108      	bne.n	800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2e6:	f107 030c 	add.w	r3, r7, #12
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f000 fde6 	bl	800debc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2f4:	f000 bc6b 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2fc:	f000 bc67 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d300:	4b72      	ldr	r3, [pc, #456]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d304:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d308:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d30a:	4b70      	ldr	r3, [pc, #448]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f003 0304 	and.w	r3, r3, #4
 800d312:	2b04      	cmp	r3, #4
 800d314:	d10c      	bne.n	800d330 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d109      	bne.n	800d330 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d31c:	4b6b      	ldr	r3, [pc, #428]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	08db      	lsrs	r3, r3, #3
 800d322:	f003 0303 	and.w	r3, r3, #3
 800d326:	4a6a      	ldr	r2, [pc, #424]	@ (800d4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d328:	fa22 f303 	lsr.w	r3, r2, r3
 800d32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d32e:	e01f      	b.n	800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d330:	4b66      	ldr	r3, [pc, #408]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d33c:	d106      	bne.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800d33e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d340:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d344:	d102      	bne.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d346:	4b63      	ldr	r3, [pc, #396]	@ (800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d348:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d34a:	e011      	b.n	800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d34c:	4b5f      	ldr	r3, [pc, #380]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d354:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d358:	d106      	bne.n	800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800d35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d35c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d360:	d102      	bne.n	800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d362:	4b5d      	ldr	r3, [pc, #372]	@ (800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d366:	e003      	b.n	800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d368:	2300      	movs	r3, #0
 800d36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d36c:	f000 bc2f 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d370:	f000 bc2d 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d374:	4b59      	ldr	r3, [pc, #356]	@ (800d4dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d378:	f000 bc29 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d37c:	2300      	movs	r3, #0
 800d37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d380:	f000 bc25 	b.w	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d384:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d388:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d38c:	430b      	orrs	r3, r1
 800d38e:	f040 80a7 	bne.w	800d4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d392:	4b4e      	ldr	r3, [pc, #312]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d396:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800d39a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d3a2:	d054      	beq.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d3aa:	f200 808b 	bhi.w	800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d3b4:	f000 8083 	beq.w	800d4be <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d3be:	f200 8081 	bhi.w	800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d3c8:	d02f      	beq.n	800d42a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d3d0:	d878      	bhi.n	800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d004      	beq.n	800d3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800d3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d3de:	d012      	beq.n	800d406 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800d3e0:	e070      	b.n	800d4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d3e2:	4b3a      	ldr	r3, [pc, #232]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d3ee:	d107      	bne.n	800d400 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f000 feb5 	bl	800e164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3fe:	e3e6      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d404:	e3e3      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d406:	4b31      	ldr	r3, [pc, #196]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d40e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d412:	d107      	bne.n	800d424 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d414:	f107 0318 	add.w	r3, r7, #24
 800d418:	4618      	mov	r0, r3
 800d41a:	f000 fbfb 	bl	800dc14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d422:	e3d4      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d424:	2300      	movs	r3, #0
 800d426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d428:	e3d1      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d42a:	4b28      	ldr	r3, [pc, #160]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d436:	d107      	bne.n	800d448 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d438:	f107 030c 	add.w	r3, r7, #12
 800d43c:	4618      	mov	r0, r3
 800d43e:	f000 fd3d 	bl	800debc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d446:	e3c2      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d448:	2300      	movs	r3, #0
 800d44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d44c:	e3bf      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d44e:	4b1f      	ldr	r3, [pc, #124]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d452:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d456:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d458:	4b1c      	ldr	r3, [pc, #112]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f003 0304 	and.w	r3, r3, #4
 800d460:	2b04      	cmp	r3, #4
 800d462:	d10c      	bne.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800d464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d466:	2b00      	cmp	r3, #0
 800d468:	d109      	bne.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d46a:	4b18      	ldr	r3, [pc, #96]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	08db      	lsrs	r3, r3, #3
 800d470:	f003 0303 	and.w	r3, r3, #3
 800d474:	4a16      	ldr	r2, [pc, #88]	@ (800d4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d476:	fa22 f303 	lsr.w	r3, r2, r3
 800d47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d47c:	e01e      	b.n	800d4bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d47e:	4b13      	ldr	r3, [pc, #76]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d48a:	d106      	bne.n	800d49a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800d48c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d48e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d492:	d102      	bne.n	800d49a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d494:	4b0f      	ldr	r3, [pc, #60]	@ (800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d498:	e010      	b.n	800d4bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d49a:	4b0c      	ldr	r3, [pc, #48]	@ (800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d4a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4a6:	d106      	bne.n	800d4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800d4a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d4ae:	d102      	bne.n	800d4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d4b0:	4b09      	ldr	r3, [pc, #36]	@ (800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4b4:	e002      	b.n	800d4bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d4ba:	e388      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d4bc:	e387      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d4be:	4b07      	ldr	r3, [pc, #28]	@ (800d4dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4c2:	e384      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4c8:	e381      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d4ca:	bf00      	nop
 800d4cc:	58024400 	.word	0x58024400
 800d4d0:	03d09000 	.word	0x03d09000
 800d4d4:	003d0900 	.word	0x003d0900
 800d4d8:	017d7840 	.word	0x017d7840
 800d4dc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d4e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4e4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d4e8:	430b      	orrs	r3, r1
 800d4ea:	f040 809c 	bne.w	800d626 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d4ee:	4b9e      	ldr	r3, [pc, #632]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d4f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4f2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d4f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d4fe:	d054      	beq.n	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800d500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d502:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d506:	f200 808b 	bhi.w	800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d50c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d510:	f000 8083 	beq.w	800d61a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800d514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d516:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d51a:	f200 8081 	bhi.w	800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d520:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d524:	d02f      	beq.n	800d586 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d528:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d52c:	d878      	bhi.n	800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d530:	2b00      	cmp	r3, #0
 800d532:	d004      	beq.n	800d53e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d536:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d53a:	d012      	beq.n	800d562 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d53c:	e070      	b.n	800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d53e:	4b8a      	ldr	r3, [pc, #552]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d546:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d54a:	d107      	bne.n	800d55c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d54c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d550:	4618      	mov	r0, r3
 800d552:	f000 fe07 	bl	800e164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d55a:	e338      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d55c:	2300      	movs	r3, #0
 800d55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d560:	e335      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d562:	4b81      	ldr	r3, [pc, #516]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d56a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d56e:	d107      	bne.n	800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d570:	f107 0318 	add.w	r3, r7, #24
 800d574:	4618      	mov	r0, r3
 800d576:	f000 fb4d 	bl	800dc14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d57e:	e326      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d580:	2300      	movs	r3, #0
 800d582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d584:	e323      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d586:	4b78      	ldr	r3, [pc, #480]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d58e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d592:	d107      	bne.n	800d5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d594:	f107 030c 	add.w	r3, r7, #12
 800d598:	4618      	mov	r0, r3
 800d59a:	f000 fc8f 	bl	800debc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5a2:	e314      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5a8:	e311      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d5aa:	4b6f      	ldr	r3, [pc, #444]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d5ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d5b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d5b4:	4b6c      	ldr	r3, [pc, #432]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f003 0304 	and.w	r3, r3, #4
 800d5bc:	2b04      	cmp	r3, #4
 800d5be:	d10c      	bne.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d5c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d109      	bne.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5c6:	4b68      	ldr	r3, [pc, #416]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	08db      	lsrs	r3, r3, #3
 800d5cc:	f003 0303 	and.w	r3, r3, #3
 800d5d0:	4a66      	ldr	r2, [pc, #408]	@ (800d76c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d5d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d5d8:	e01e      	b.n	800d618 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d5da:	4b63      	ldr	r3, [pc, #396]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5e6:	d106      	bne.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d5e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d5ee:	d102      	bne.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d5f0:	4b5f      	ldr	r3, [pc, #380]	@ (800d770 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d5f4:	e010      	b.n	800d618 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d5f6:	4b5c      	ldr	r3, [pc, #368]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d602:	d106      	bne.n	800d612 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d60a:	d102      	bne.n	800d612 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d60c:	4b59      	ldr	r3, [pc, #356]	@ (800d774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d610:	e002      	b.n	800d618 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d616:	e2da      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d618:	e2d9      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d61a:	4b57      	ldr	r3, [pc, #348]	@ (800d778 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d61e:	e2d6      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d620:	2300      	movs	r3, #0
 800d622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d624:	e2d3      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d62a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d62e:	430b      	orrs	r3, r1
 800d630:	f040 80a7 	bne.w	800d782 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d634:	4b4c      	ldr	r3, [pc, #304]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d638:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d63c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d640:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d644:	d055      	beq.n	800d6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d648:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d64c:	f200 8096 	bhi.w	800d77c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d652:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d656:	f000 8084 	beq.w	800d762 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d660:	f200 808c 	bhi.w	800d77c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d66a:	d030      	beq.n	800d6ce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d66e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d672:	f200 8083 	bhi.w	800d77c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d004      	beq.n	800d686 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d67e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d682:	d012      	beq.n	800d6aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d684:	e07a      	b.n	800d77c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d686:	4b38      	ldr	r3, [pc, #224]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d68e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d692:	d107      	bne.n	800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d698:	4618      	mov	r0, r3
 800d69a:	f000 fd63 	bl	800e164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6a2:	e294      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6a8:	e291      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d6aa:	4b2f      	ldr	r3, [pc, #188]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d6b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d6b6:	d107      	bne.n	800d6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6b8:	f107 0318 	add.w	r3, r7, #24
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f000 faa9 	bl	800dc14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6c6:	e282      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6cc:	e27f      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d6ce:	4b26      	ldr	r3, [pc, #152]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d6d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d6da:	d107      	bne.n	800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6dc:	f107 030c 	add.w	r3, r7, #12
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f000 fbeb 	bl	800debc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6ea:	e270      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6f0:	e26d      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d6f2:	4b1d      	ldr	r3, [pc, #116]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d6f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d6fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d6fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f003 0304 	and.w	r3, r3, #4
 800d704:	2b04      	cmp	r3, #4
 800d706:	d10c      	bne.n	800d722 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d109      	bne.n	800d722 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d70e:	4b16      	ldr	r3, [pc, #88]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	08db      	lsrs	r3, r3, #3
 800d714:	f003 0303 	and.w	r3, r3, #3
 800d718:	4a14      	ldr	r2, [pc, #80]	@ (800d76c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d71a:	fa22 f303 	lsr.w	r3, r2, r3
 800d71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d720:	e01e      	b.n	800d760 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d722:	4b11      	ldr	r3, [pc, #68]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d72a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d72e:	d106      	bne.n	800d73e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d736:	d102      	bne.n	800d73e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d738:	4b0d      	ldr	r3, [pc, #52]	@ (800d770 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d73c:	e010      	b.n	800d760 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d73e:	4b0a      	ldr	r3, [pc, #40]	@ (800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d746:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d74a:	d106      	bne.n	800d75a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d74e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d752:	d102      	bne.n	800d75a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d754:	4b07      	ldr	r3, [pc, #28]	@ (800d774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d758:	e002      	b.n	800d760 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d75a:	2300      	movs	r3, #0
 800d75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d75e:	e236      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d760:	e235      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d762:	4b05      	ldr	r3, [pc, #20]	@ (800d778 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d766:	e232      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d768:	58024400 	.word	0x58024400
 800d76c:	03d09000 	.word	0x03d09000
 800d770:	003d0900 	.word	0x003d0900
 800d774:	017d7840 	.word	0x017d7840
 800d778:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d77c:	2300      	movs	r3, #0
 800d77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d780:	e225      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d782:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d786:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d78a:	430b      	orrs	r3, r1
 800d78c:	f040 8085 	bne.w	800d89a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d790:	4b9c      	ldr	r3, [pc, #624]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d794:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d798:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d7a0:	d06b      	beq.n	800d87a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d7a8:	d874      	bhi.n	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d7b0:	d056      	beq.n	800d860 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d7b8:	d86c      	bhi.n	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d7c0:	d03b      	beq.n	800d83a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d7c8:	d864      	bhi.n	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d7d0:	d021      	beq.n	800d816 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d7d8:	d85c      	bhi.n	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d004      	beq.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7e6:	d004      	beq.n	800d7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d7e8:	e054      	b.n	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d7ea:	f7fe fb5f 	bl	800beac <HAL_RCC_GetPCLK1Freq>
 800d7ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d7f0:	e1ed      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d7f2:	4b84      	ldr	r3, [pc, #528]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d7fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d7fe:	d107      	bne.n	800d810 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d800:	f107 0318 	add.w	r3, r7, #24
 800d804:	4618      	mov	r0, r3
 800d806:	f000 fa05 	bl	800dc14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d80e:	e1de      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d810:	2300      	movs	r3, #0
 800d812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d814:	e1db      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d816:	4b7b      	ldr	r3, [pc, #492]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d81e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d822:	d107      	bne.n	800d834 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d824:	f107 030c 	add.w	r3, r7, #12
 800d828:	4618      	mov	r0, r3
 800d82a:	f000 fb47 	bl	800debc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d832:	e1cc      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d834:	2300      	movs	r3, #0
 800d836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d838:	e1c9      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d83a:	4b72      	ldr	r3, [pc, #456]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f003 0304 	and.w	r3, r3, #4
 800d842:	2b04      	cmp	r3, #4
 800d844:	d109      	bne.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d846:	4b6f      	ldr	r3, [pc, #444]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	08db      	lsrs	r3, r3, #3
 800d84c:	f003 0303 	and.w	r3, r3, #3
 800d850:	4a6d      	ldr	r2, [pc, #436]	@ (800da08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d852:	fa22 f303 	lsr.w	r3, r2, r3
 800d856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d858:	e1b9      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d85a:	2300      	movs	r3, #0
 800d85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d85e:	e1b6      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d860:	4b68      	ldr	r3, [pc, #416]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d86c:	d102      	bne.n	800d874 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d86e:	4b67      	ldr	r3, [pc, #412]	@ (800da0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d872:	e1ac      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d874:	2300      	movs	r3, #0
 800d876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d878:	e1a9      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d87a:	4b62      	ldr	r3, [pc, #392]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d886:	d102      	bne.n	800d88e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d888:	4b61      	ldr	r3, [pc, #388]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d88c:	e19f      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d88e:	2300      	movs	r3, #0
 800d890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d892:	e19c      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d894:	2300      	movs	r3, #0
 800d896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d898:	e199      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d89a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d89e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d8a2:	430b      	orrs	r3, r1
 800d8a4:	d173      	bne.n	800d98e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d8a6:	4b57      	ldr	r3, [pc, #348]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d8a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d8ae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d8b6:	d02f      	beq.n	800d918 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d8be:	d863      	bhi.n	800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d004      	beq.n	800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8cc:	d012      	beq.n	800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d8ce:	e05b      	b.n	800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d8d0:	4b4c      	ldr	r3, [pc, #304]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d8d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d8dc:	d107      	bne.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8de:	f107 0318 	add.w	r3, r7, #24
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f000 f996 	bl	800dc14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d8ec:	e16f      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8f2:	e16c      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d8f4:	4b43      	ldr	r3, [pc, #268]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d8fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d900:	d107      	bne.n	800d912 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d902:	f107 030c 	add.w	r3, r7, #12
 800d906:	4618      	mov	r0, r3
 800d908:	f000 fad8 	bl	800debc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d910:	e15d      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d916:	e15a      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d918:	4b3a      	ldr	r3, [pc, #232]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d91a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d91c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d920:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d922:	4b38      	ldr	r3, [pc, #224]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f003 0304 	and.w	r3, r3, #4
 800d92a:	2b04      	cmp	r3, #4
 800d92c:	d10c      	bne.n	800d948 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d930:	2b00      	cmp	r3, #0
 800d932:	d109      	bne.n	800d948 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d934:	4b33      	ldr	r3, [pc, #204]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	08db      	lsrs	r3, r3, #3
 800d93a:	f003 0303 	and.w	r3, r3, #3
 800d93e:	4a32      	ldr	r2, [pc, #200]	@ (800da08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d940:	fa22 f303 	lsr.w	r3, r2, r3
 800d944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d946:	e01e      	b.n	800d986 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d948:	4b2e      	ldr	r3, [pc, #184]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d954:	d106      	bne.n	800d964 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d95c:	d102      	bne.n	800d964 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d95e:	4b2b      	ldr	r3, [pc, #172]	@ (800da0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d962:	e010      	b.n	800d986 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d964:	4b27      	ldr	r3, [pc, #156]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d96c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d970:	d106      	bne.n	800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d978:	d102      	bne.n	800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d97a:	4b25      	ldr	r3, [pc, #148]	@ (800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d97e:	e002      	b.n	800d986 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d980:	2300      	movs	r3, #0
 800d982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d984:	e123      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d986:	e122      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d988:	2300      	movs	r3, #0
 800d98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d98c:	e11f      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d98e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d992:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d996:	430b      	orrs	r3, r1
 800d998:	d13c      	bne.n	800da14 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d99a:	4b1a      	ldr	r3, [pc, #104]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d99c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d99e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d004      	beq.n	800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9b0:	d012      	beq.n	800d9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d9b2:	e023      	b.n	800d9fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d9b4:	4b13      	ldr	r3, [pc, #76]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d9c0:	d107      	bne.n	800d9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d9c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f000 fbcc 	bl	800e164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d9d0:	e0fd      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9d6:	e0fa      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d9d8:	4b0a      	ldr	r3, [pc, #40]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d9e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d9e4:	d107      	bne.n	800d9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9e6:	f107 0318 	add.w	r3, r7, #24
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f000 f912 	bl	800dc14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d9f4:	e0eb      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9fa:	e0e8      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da00:	e0e5      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800da02:	bf00      	nop
 800da04:	58024400 	.word	0x58024400
 800da08:	03d09000 	.word	0x03d09000
 800da0c:	003d0900 	.word	0x003d0900
 800da10:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800da14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da18:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800da1c:	430b      	orrs	r3, r1
 800da1e:	f040 8085 	bne.w	800db2c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800da22:	4b6d      	ldr	r3, [pc, #436]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800da24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da26:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800da2a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800da2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800da32:	d06b      	beq.n	800db0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800da34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800da3a:	d874      	bhi.n	800db26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800da3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da42:	d056      	beq.n	800daf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800da44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da4a:	d86c      	bhi.n	800db26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800da4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800da52:	d03b      	beq.n	800dacc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800da54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800da5a:	d864      	bhi.n	800db26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800da5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800da62:	d021      	beq.n	800daa8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800da64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800da6a:	d85c      	bhi.n	800db26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800da6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d004      	beq.n	800da7c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800da72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da78:	d004      	beq.n	800da84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800da7a:	e054      	b.n	800db26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800da7c:	f000 f8b4 	bl	800dbe8 <HAL_RCCEx_GetD3PCLK1Freq>
 800da80:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da82:	e0a4      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800da84:	4b54      	ldr	r3, [pc, #336]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da90:	d107      	bne.n	800daa2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da92:	f107 0318 	add.w	r3, r7, #24
 800da96:	4618      	mov	r0, r3
 800da98:	f000 f8bc 	bl	800dc14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800daa0:	e095      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800daa2:	2300      	movs	r3, #0
 800daa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daa6:	e092      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800daa8:	4b4b      	ldr	r3, [pc, #300]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dab4:	d107      	bne.n	800dac6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dab6:	f107 030c 	add.w	r3, r7, #12
 800daba:	4618      	mov	r0, r3
 800dabc:	f000 f9fe 	bl	800debc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dac4:	e083      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dac6:	2300      	movs	r3, #0
 800dac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daca:	e080      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dacc:	4b42      	ldr	r3, [pc, #264]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f003 0304 	and.w	r3, r3, #4
 800dad4:	2b04      	cmp	r3, #4
 800dad6:	d109      	bne.n	800daec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dad8:	4b3f      	ldr	r3, [pc, #252]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	08db      	lsrs	r3, r3, #3
 800dade:	f003 0303 	and.w	r3, r3, #3
 800dae2:	4a3e      	ldr	r2, [pc, #248]	@ (800dbdc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800dae4:	fa22 f303 	lsr.w	r3, r2, r3
 800dae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800daea:	e070      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800daec:	2300      	movs	r3, #0
 800daee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daf0:	e06d      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800daf2:	4b39      	ldr	r3, [pc, #228]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dafa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dafe:	d102      	bne.n	800db06 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800db00:	4b37      	ldr	r3, [pc, #220]	@ (800dbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800db02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db04:	e063      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db06:	2300      	movs	r3, #0
 800db08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db0a:	e060      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800db0c:	4b32      	ldr	r3, [pc, #200]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db18:	d102      	bne.n	800db20 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800db1a:	4b32      	ldr	r3, [pc, #200]	@ (800dbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800db1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db1e:	e056      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db20:	2300      	movs	r3, #0
 800db22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db24:	e053      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db2a:	e050      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800db2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db30:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800db34:	430b      	orrs	r3, r1
 800db36:	d148      	bne.n	800dbca <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800db38:	4b27      	ldr	r3, [pc, #156]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800db3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800db40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800db42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db48:	d02a      	beq.n	800dba0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800db4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db50:	d838      	bhi.n	800dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800db52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db54:	2b00      	cmp	r3, #0
 800db56:	d004      	beq.n	800db62 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800db58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db5e:	d00d      	beq.n	800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800db60:	e030      	b.n	800dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800db62:	4b1d      	ldr	r3, [pc, #116]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db6e:	d102      	bne.n	800db76 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800db70:	4b1c      	ldr	r3, [pc, #112]	@ (800dbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800db72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db74:	e02b      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db76:	2300      	movs	r3, #0
 800db78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db7a:	e028      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800db7c:	4b16      	ldr	r3, [pc, #88]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db88:	d107      	bne.n	800db9a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db8e:	4618      	mov	r0, r3
 800db90:	f000 fae8 	bl	800e164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800db94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db98:	e019      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db9a:	2300      	movs	r3, #0
 800db9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db9e:	e016      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dba0:	4b0d      	ldr	r3, [pc, #52]	@ (800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dba8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dbac:	d107      	bne.n	800dbbe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbae:	f107 0318 	add.w	r3, r7, #24
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f000 f82e 	bl	800dc14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dbbc:	e007      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbc2:	e004      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbc8:	e001      	b.n	800dbce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800dbce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3740      	adds	r7, #64	@ 0x40
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	58024400 	.word	0x58024400
 800dbdc:	03d09000 	.word	0x03d09000
 800dbe0:	003d0900 	.word	0x003d0900
 800dbe4:	017d7840 	.word	0x017d7840

0800dbe8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800dbec:	f7fe f92e 	bl	800be4c <HAL_RCC_GetHCLKFreq>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	4b06      	ldr	r3, [pc, #24]	@ (800dc0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800dbf4:	6a1b      	ldr	r3, [r3, #32]
 800dbf6:	091b      	lsrs	r3, r3, #4
 800dbf8:	f003 0307 	and.w	r3, r3, #7
 800dbfc:	4904      	ldr	r1, [pc, #16]	@ (800dc10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800dbfe:	5ccb      	ldrb	r3, [r1, r3]
 800dc00:	f003 031f 	and.w	r3, r3, #31
 800dc04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	58024400 	.word	0x58024400
 800dc10:	0801dde0 	.word	0x0801dde0

0800dc14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b089      	sub	sp, #36	@ 0x24
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dc1c:	4ba1      	ldr	r3, [pc, #644]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dc1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc20:	f003 0303 	and.w	r3, r3, #3
 800dc24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800dc26:	4b9f      	ldr	r3, [pc, #636]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dc28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc2a:	0b1b      	lsrs	r3, r3, #12
 800dc2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dc30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800dc32:	4b9c      	ldr	r3, [pc, #624]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dc34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc36:	091b      	lsrs	r3, r3, #4
 800dc38:	f003 0301 	and.w	r3, r3, #1
 800dc3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800dc3e:	4b99      	ldr	r3, [pc, #612]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dc40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc42:	08db      	lsrs	r3, r3, #3
 800dc44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc48:	693a      	ldr	r2, [r7, #16]
 800dc4a:	fb02 f303 	mul.w	r3, r2, r3
 800dc4e:	ee07 3a90 	vmov	s15, r3
 800dc52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	f000 8111 	beq.w	800de84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800dc62:	69bb      	ldr	r3, [r7, #24]
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	f000 8083 	beq.w	800dd70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	2b02      	cmp	r3, #2
 800dc6e:	f200 80a1 	bhi.w	800ddb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d003      	beq.n	800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d056      	beq.n	800dd2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800dc7e:	e099      	b.n	800ddb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc80:	4b88      	ldr	r3, [pc, #544]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f003 0320 	and.w	r3, r3, #32
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d02d      	beq.n	800dce8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc8c:	4b85      	ldr	r3, [pc, #532]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	08db      	lsrs	r3, r3, #3
 800dc92:	f003 0303 	and.w	r3, r3, #3
 800dc96:	4a84      	ldr	r2, [pc, #528]	@ (800dea8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800dc98:	fa22 f303 	lsr.w	r3, r2, r3
 800dc9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	ee07 3a90 	vmov	s15, r3
 800dca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	ee07 3a90 	vmov	s15, r3
 800dcae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcb6:	4b7b      	ldr	r3, [pc, #492]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dcb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcbe:	ee07 3a90 	vmov	s15, r3
 800dcc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800deac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dcce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dcda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dce2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dce6:	e087      	b.n	800ddf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	ee07 3a90 	vmov	s15, r3
 800dcee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800deb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800dcf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcfa:	4b6a      	ldr	r3, [pc, #424]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dcfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd02:	ee07 3a90 	vmov	s15, r3
 800dd06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800deac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dd12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd2a:	e065      	b.n	800ddf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	ee07 3a90 	vmov	s15, r3
 800dd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800deb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800dd3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd3e:	4b59      	ldr	r3, [pc, #356]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dd40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd46:	ee07 3a90 	vmov	s15, r3
 800dd4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800deac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dd56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd6e:	e043      	b.n	800ddf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	ee07 3a90 	vmov	s15, r3
 800dd76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800deb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800dd7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd82:	4b48      	ldr	r3, [pc, #288]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dd84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd8a:	ee07 3a90 	vmov	s15, r3
 800dd8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd92:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800deac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dd9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dda2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dda6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ddb2:	e021      	b.n	800ddf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	ee07 3a90 	vmov	s15, r3
 800ddba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800deb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ddc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddc6:	4b37      	ldr	r3, [pc, #220]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ddc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddce:	ee07 3a90 	vmov	s15, r3
 800ddd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ddda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800deac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ddde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dde2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dde6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ddea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ddf6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ddf8:	4b2a      	ldr	r3, [pc, #168]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ddfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddfc:	0a5b      	lsrs	r3, r3, #9
 800ddfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de02:	ee07 3a90 	vmov	s15, r3
 800de06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de12:	edd7 6a07 	vldr	s13, [r7, #28]
 800de16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de1e:	ee17 2a90 	vmov	r2, s15
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800de26:	4b1f      	ldr	r3, [pc, #124]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de2a:	0c1b      	lsrs	r3, r3, #16
 800de2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de30:	ee07 3a90 	vmov	s15, r3
 800de34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de40:	edd7 6a07 	vldr	s13, [r7, #28]
 800de44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de4c:	ee17 2a90 	vmov	r2, s15
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800de54:	4b13      	ldr	r3, [pc, #76]	@ (800dea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de58:	0e1b      	lsrs	r3, r3, #24
 800de5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de5e:	ee07 3a90 	vmov	s15, r3
 800de62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800de72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de7a:	ee17 2a90 	vmov	r2, s15
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800de82:	e008      	b.n	800de96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2200      	movs	r2, #0
 800de94:	609a      	str	r2, [r3, #8]
}
 800de96:	bf00      	nop
 800de98:	3724      	adds	r7, #36	@ 0x24
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop
 800dea4:	58024400 	.word	0x58024400
 800dea8:	03d09000 	.word	0x03d09000
 800deac:	46000000 	.word	0x46000000
 800deb0:	4c742400 	.word	0x4c742400
 800deb4:	4a742400 	.word	0x4a742400
 800deb8:	4bbebc20 	.word	0x4bbebc20

0800debc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800debc:	b480      	push	{r7}
 800debe:	b089      	sub	sp, #36	@ 0x24
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dec4:	4ba1      	ldr	r3, [pc, #644]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dec8:	f003 0303 	and.w	r3, r3, #3
 800decc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800dece:	4b9f      	ldr	r3, [pc, #636]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ded0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ded2:	0d1b      	lsrs	r3, r3, #20
 800ded4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ded8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800deda:	4b9c      	ldr	r3, [pc, #624]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dede:	0a1b      	lsrs	r3, r3, #8
 800dee0:	f003 0301 	and.w	r3, r3, #1
 800dee4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800dee6:	4b99      	ldr	r3, [pc, #612]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800deea:	08db      	lsrs	r3, r3, #3
 800deec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800def0:	693a      	ldr	r2, [r7, #16]
 800def2:	fb02 f303 	mul.w	r3, r2, r3
 800def6:	ee07 3a90 	vmov	s15, r3
 800defa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800defe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	2b00      	cmp	r3, #0
 800df06:	f000 8111 	beq.w	800e12c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	f000 8083 	beq.w	800e018 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	2b02      	cmp	r3, #2
 800df16:	f200 80a1 	bhi.w	800e05c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d003      	beq.n	800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	2b01      	cmp	r3, #1
 800df24:	d056      	beq.n	800dfd4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800df26:	e099      	b.n	800e05c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df28:	4b88      	ldr	r3, [pc, #544]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f003 0320 	and.w	r3, r3, #32
 800df30:	2b00      	cmp	r3, #0
 800df32:	d02d      	beq.n	800df90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800df34:	4b85      	ldr	r3, [pc, #532]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	08db      	lsrs	r3, r3, #3
 800df3a:	f003 0303 	and.w	r3, r3, #3
 800df3e:	4a84      	ldr	r2, [pc, #528]	@ (800e150 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800df40:	fa22 f303 	lsr.w	r3, r2, r3
 800df44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	ee07 3a90 	vmov	s15, r3
 800df4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	ee07 3a90 	vmov	s15, r3
 800df56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df5e:	4b7b      	ldr	r3, [pc, #492]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800df60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df66:	ee07 3a90 	vmov	s15, r3
 800df6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800df72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800df76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800df8e:	e087      	b.n	800e0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	ee07 3a90 	vmov	s15, r3
 800df96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e158 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800df9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfa2:	4b6a      	ldr	r3, [pc, #424]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dfa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfaa:	ee07 3a90 	vmov	s15, r3
 800dfae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800dfb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dfba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dfd2:	e065      	b.n	800e0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	ee07 3a90 	vmov	s15, r3
 800dfda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfde:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e15c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dfe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfe6:	4b59      	ldr	r3, [pc, #356]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dfe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfee:	ee07 3a90 	vmov	s15, r3
 800dff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dff6:	ed97 6a03 	vldr	s12, [r7, #12]
 800dffa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e016:	e043      	b.n	800e0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	ee07 3a90 	vmov	s15, r3
 800e01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e022:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e160 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e02a:	4b48      	ldr	r3, [pc, #288]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e032:	ee07 3a90 	vmov	s15, r3
 800e036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e03a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e03e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e04a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e05a:	e021      	b.n	800e0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	ee07 3a90 	vmov	s15, r3
 800e062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e066:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e15c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e06e:	4b37      	ldr	r3, [pc, #220]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e076:	ee07 3a90 	vmov	s15, r3
 800e07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e07e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e082:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e08e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e09a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e09e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e0a0:	4b2a      	ldr	r3, [pc, #168]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0a4:	0a5b      	lsrs	r3, r3, #9
 800e0a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0aa:	ee07 3a90 	vmov	s15, r3
 800e0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e0b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e0ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0c6:	ee17 2a90 	vmov	r2, s15
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e0ce:	4b1f      	ldr	r3, [pc, #124]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0d2:	0c1b      	lsrs	r3, r3, #16
 800e0d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0d8:	ee07 3a90 	vmov	s15, r3
 800e0dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e0e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e0e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0f4:	ee17 2a90 	vmov	r2, s15
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e0fc:	4b13      	ldr	r3, [pc, #76]	@ (800e14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e100:	0e1b      	lsrs	r3, r3, #24
 800e102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e106:	ee07 3a90 	vmov	s15, r3
 800e10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e10e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e112:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e116:	edd7 6a07 	vldr	s13, [r7, #28]
 800e11a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e11e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e122:	ee17 2a90 	vmov	r2, s15
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e12a:	e008      	b.n	800e13e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2200      	movs	r2, #0
 800e130:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2200      	movs	r2, #0
 800e136:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	609a      	str	r2, [r3, #8]
}
 800e13e:	bf00      	nop
 800e140:	3724      	adds	r7, #36	@ 0x24
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	58024400 	.word	0x58024400
 800e150:	03d09000 	.word	0x03d09000
 800e154:	46000000 	.word	0x46000000
 800e158:	4c742400 	.word	0x4c742400
 800e15c:	4a742400 	.word	0x4a742400
 800e160:	4bbebc20 	.word	0x4bbebc20

0800e164 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e164:	b480      	push	{r7}
 800e166:	b089      	sub	sp, #36	@ 0x24
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e16c:	4ba0      	ldr	r3, [pc, #640]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e16e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e170:	f003 0303 	and.w	r3, r3, #3
 800e174:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e176:	4b9e      	ldr	r3, [pc, #632]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e17a:	091b      	lsrs	r3, r3, #4
 800e17c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e180:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e182:	4b9b      	ldr	r3, [pc, #620]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e186:	f003 0301 	and.w	r3, r3, #1
 800e18a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e18c:	4b98      	ldr	r3, [pc, #608]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e18e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e190:	08db      	lsrs	r3, r3, #3
 800e192:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e196:	693a      	ldr	r2, [r7, #16]
 800e198:	fb02 f303 	mul.w	r3, r2, r3
 800e19c:	ee07 3a90 	vmov	s15, r3
 800e1a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f000 8111 	beq.w	800e3d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	2b02      	cmp	r3, #2
 800e1b4:	f000 8083 	beq.w	800e2be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	f200 80a1 	bhi.w	800e302 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d003      	beq.n	800e1ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d056      	beq.n	800e27a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e1cc:	e099      	b.n	800e302 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1ce:	4b88      	ldr	r3, [pc, #544]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f003 0320 	and.w	r3, r3, #32
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d02d      	beq.n	800e236 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e1da:	4b85      	ldr	r3, [pc, #532]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	08db      	lsrs	r3, r3, #3
 800e1e0:	f003 0303 	and.w	r3, r3, #3
 800e1e4:	4a83      	ldr	r2, [pc, #524]	@ (800e3f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e1e6:	fa22 f303 	lsr.w	r3, r2, r3
 800e1ea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	ee07 3a90 	vmov	s15, r3
 800e1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	ee07 3a90 	vmov	s15, r3
 800e1fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e204:	4b7a      	ldr	r3, [pc, #488]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e20c:	ee07 3a90 	vmov	s15, r3
 800e210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e214:	ed97 6a03 	vldr	s12, [r7, #12]
 800e218:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800e3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e21c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e22c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e230:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e234:	e087      	b.n	800e346 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	ee07 3a90 	vmov	s15, r3
 800e23c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e240:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800e3fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e248:	4b69      	ldr	r3, [pc, #420]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e24a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e24c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e250:	ee07 3a90 	vmov	s15, r3
 800e254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e258:	ed97 6a03 	vldr	s12, [r7, #12]
 800e25c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800e3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e268:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e26c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e270:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e274:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e278:	e065      	b.n	800e346 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	ee07 3a90 	vmov	s15, r3
 800e280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e284:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800e400 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e28c:	4b58      	ldr	r3, [pc, #352]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e28e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e294:	ee07 3a90 	vmov	s15, r3
 800e298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e29c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e2a0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800e3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e2a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2bc:	e043      	b.n	800e346 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	ee07 3a90 	vmov	s15, r3
 800e2c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2c8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800e404 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800e2cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2d0:	4b47      	ldr	r3, [pc, #284]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e2d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2d8:	ee07 3a90 	vmov	s15, r3
 800e2dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800e2e4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800e3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e2e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e300:	e021      	b.n	800e346 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	ee07 3a90 	vmov	s15, r3
 800e308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e30c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800e3fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e314:	4b36      	ldr	r3, [pc, #216]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e31c:	ee07 3a90 	vmov	s15, r3
 800e320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e324:	ed97 6a03 	vldr	s12, [r7, #12]
 800e328:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e32c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e334:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e33c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e340:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e344:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800e346:	4b2a      	ldr	r3, [pc, #168]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e34a:	0a5b      	lsrs	r3, r3, #9
 800e34c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e350:	ee07 3a90 	vmov	s15, r3
 800e354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e358:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e35c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e360:	edd7 6a07 	vldr	s13, [r7, #28]
 800e364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e36c:	ee17 2a90 	vmov	r2, s15
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800e374:	4b1e      	ldr	r3, [pc, #120]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e378:	0c1b      	lsrs	r3, r3, #16
 800e37a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e37e:	ee07 3a90 	vmov	s15, r3
 800e382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e386:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e38a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e38e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e39a:	ee17 2a90 	vmov	r2, s15
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800e3a2:	4b13      	ldr	r3, [pc, #76]	@ (800e3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e3a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3a6:	0e1b      	lsrs	r3, r3, #24
 800e3a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3ac:	ee07 3a90 	vmov	s15, r3
 800e3b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e3b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e3bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3c8:	ee17 2a90 	vmov	r2, s15
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e3d0:	e008      	b.n	800e3e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	609a      	str	r2, [r3, #8]
}
 800e3e4:	bf00      	nop
 800e3e6:	3724      	adds	r7, #36	@ 0x24
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr
 800e3f0:	58024400 	.word	0x58024400
 800e3f4:	03d09000 	.word	0x03d09000
 800e3f8:	46000000 	.word	0x46000000
 800e3fc:	4c742400 	.word	0x4c742400
 800e400:	4a742400 	.word	0x4a742400
 800e404:	4bbebc20 	.word	0x4bbebc20

0800e408 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e412:	2300      	movs	r3, #0
 800e414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e416:	4b53      	ldr	r3, [pc, #332]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e41a:	f003 0303 	and.w	r3, r3, #3
 800e41e:	2b03      	cmp	r3, #3
 800e420:	d101      	bne.n	800e426 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e422:	2301      	movs	r3, #1
 800e424:	e099      	b.n	800e55a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e426:	4b4f      	ldr	r3, [pc, #316]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4a4e      	ldr	r2, [pc, #312]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e42c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e432:	f7f6 f991 	bl	8004758 <HAL_GetTick>
 800e436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e438:	e008      	b.n	800e44c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e43a:	f7f6 f98d 	bl	8004758 <HAL_GetTick>
 800e43e:	4602      	mov	r2, r0
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	2b02      	cmp	r3, #2
 800e446:	d901      	bls.n	800e44c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e448:	2303      	movs	r3, #3
 800e44a:	e086      	b.n	800e55a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e44c:	4b45      	ldr	r3, [pc, #276]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e454:	2b00      	cmp	r3, #0
 800e456:	d1f0      	bne.n	800e43a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e458:	4b42      	ldr	r3, [pc, #264]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e45c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	031b      	lsls	r3, r3, #12
 800e466:	493f      	ldr	r1, [pc, #252]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e468:	4313      	orrs	r3, r2
 800e46a:	628b      	str	r3, [r1, #40]	@ 0x28
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	3b01      	subs	r3, #1
 800e472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	689b      	ldr	r3, [r3, #8]
 800e47a:	3b01      	subs	r3, #1
 800e47c:	025b      	lsls	r3, r3, #9
 800e47e:	b29b      	uxth	r3, r3
 800e480:	431a      	orrs	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	3b01      	subs	r3, #1
 800e488:	041b      	lsls	r3, r3, #16
 800e48a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e48e:	431a      	orrs	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	691b      	ldr	r3, [r3, #16]
 800e494:	3b01      	subs	r3, #1
 800e496:	061b      	lsls	r3, r3, #24
 800e498:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e49c:	4931      	ldr	r1, [pc, #196]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e4a2:	4b30      	ldr	r3, [pc, #192]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	695b      	ldr	r3, [r3, #20]
 800e4ae:	492d      	ldr	r1, [pc, #180]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e4b0:	4313      	orrs	r3, r2
 800e4b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e4b4:	4b2b      	ldr	r3, [pc, #172]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b8:	f023 0220 	bic.w	r2, r3, #32
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	699b      	ldr	r3, [r3, #24]
 800e4c0:	4928      	ldr	r1, [pc, #160]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e4c6:	4b27      	ldr	r3, [pc, #156]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ca:	4a26      	ldr	r2, [pc, #152]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e4cc:	f023 0310 	bic.w	r3, r3, #16
 800e4d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e4d2:	4b24      	ldr	r3, [pc, #144]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e4d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e4d6:	4b24      	ldr	r3, [pc, #144]	@ (800e568 <RCCEx_PLL2_Config+0x160>)
 800e4d8:	4013      	ands	r3, r2
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	69d2      	ldr	r2, [r2, #28]
 800e4de:	00d2      	lsls	r2, r2, #3
 800e4e0:	4920      	ldr	r1, [pc, #128]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e4e2:	4313      	orrs	r3, r2
 800e4e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e4e6:	4b1f      	ldr	r3, [pc, #124]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ea:	4a1e      	ldr	r2, [pc, #120]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e4ec:	f043 0310 	orr.w	r3, r3, #16
 800e4f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d106      	bne.n	800e506 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e4f8:	4b1a      	ldr	r3, [pc, #104]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4fc:	4a19      	ldr	r2, [pc, #100]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e4fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e502:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e504:	e00f      	b.n	800e526 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d106      	bne.n	800e51a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e50c:	4b15      	ldr	r3, [pc, #84]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e50e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e510:	4a14      	ldr	r2, [pc, #80]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e516:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e518:	e005      	b.n	800e526 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e51a:	4b12      	ldr	r3, [pc, #72]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e51e:	4a11      	ldr	r2, [pc, #68]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e520:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e524:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e526:	4b0f      	ldr	r3, [pc, #60]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a0e      	ldr	r2, [pc, #56]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e52c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e532:	f7f6 f911 	bl	8004758 <HAL_GetTick>
 800e536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e538:	e008      	b.n	800e54c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e53a:	f7f6 f90d 	bl	8004758 <HAL_GetTick>
 800e53e:	4602      	mov	r2, r0
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	1ad3      	subs	r3, r2, r3
 800e544:	2b02      	cmp	r3, #2
 800e546:	d901      	bls.n	800e54c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e548:	2303      	movs	r3, #3
 800e54a:	e006      	b.n	800e55a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e54c:	4b05      	ldr	r3, [pc, #20]	@ (800e564 <RCCEx_PLL2_Config+0x15c>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e554:	2b00      	cmp	r3, #0
 800e556:	d0f0      	beq.n	800e53a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e558:	7bfb      	ldrb	r3, [r7, #15]
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3710      	adds	r7, #16
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	58024400 	.word	0x58024400
 800e568:	ffff0007 	.word	0xffff0007

0800e56c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e576:	2300      	movs	r3, #0
 800e578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e57a:	4b53      	ldr	r3, [pc, #332]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e57e:	f003 0303 	and.w	r3, r3, #3
 800e582:	2b03      	cmp	r3, #3
 800e584:	d101      	bne.n	800e58a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e586:	2301      	movs	r3, #1
 800e588:	e099      	b.n	800e6be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e58a:	4b4f      	ldr	r3, [pc, #316]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	4a4e      	ldr	r2, [pc, #312]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e596:	f7f6 f8df 	bl	8004758 <HAL_GetTick>
 800e59a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e59c:	e008      	b.n	800e5b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e59e:	f7f6 f8db 	bl	8004758 <HAL_GetTick>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	1ad3      	subs	r3, r2, r3
 800e5a8:	2b02      	cmp	r3, #2
 800e5aa:	d901      	bls.n	800e5b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e5ac:	2303      	movs	r3, #3
 800e5ae:	e086      	b.n	800e6be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e5b0:	4b45      	ldr	r3, [pc, #276]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1f0      	bne.n	800e59e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e5bc:	4b42      	ldr	r3, [pc, #264]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	051b      	lsls	r3, r3, #20
 800e5ca:	493f      	ldr	r1, [pc, #252]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	628b      	str	r3, [r1, #40]	@ 0x28
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	689b      	ldr	r3, [r3, #8]
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	025b      	lsls	r3, r3, #9
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	431a      	orrs	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	041b      	lsls	r3, r3, #16
 800e5ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e5f2:	431a      	orrs	r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	691b      	ldr	r3, [r3, #16]
 800e5f8:	3b01      	subs	r3, #1
 800e5fa:	061b      	lsls	r3, r3, #24
 800e5fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e600:	4931      	ldr	r1, [pc, #196]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e602:	4313      	orrs	r3, r2
 800e604:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e606:	4b30      	ldr	r3, [pc, #192]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e60a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	695b      	ldr	r3, [r3, #20]
 800e612:	492d      	ldr	r1, [pc, #180]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e614:	4313      	orrs	r3, r2
 800e616:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e618:	4b2b      	ldr	r3, [pc, #172]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e61a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e61c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	699b      	ldr	r3, [r3, #24]
 800e624:	4928      	ldr	r1, [pc, #160]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e626:	4313      	orrs	r3, r2
 800e628:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e62a:	4b27      	ldr	r3, [pc, #156]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e62c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e62e:	4a26      	ldr	r2, [pc, #152]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e634:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e636:	4b24      	ldr	r3, [pc, #144]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e63a:	4b24      	ldr	r3, [pc, #144]	@ (800e6cc <RCCEx_PLL3_Config+0x160>)
 800e63c:	4013      	ands	r3, r2
 800e63e:	687a      	ldr	r2, [r7, #4]
 800e640:	69d2      	ldr	r2, [r2, #28]
 800e642:	00d2      	lsls	r2, r2, #3
 800e644:	4920      	ldr	r1, [pc, #128]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e646:	4313      	orrs	r3, r2
 800e648:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e64a:	4b1f      	ldr	r3, [pc, #124]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e64c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e64e:	4a1e      	ldr	r2, [pc, #120]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e654:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d106      	bne.n	800e66a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e65c:	4b1a      	ldr	r3, [pc, #104]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e660:	4a19      	ldr	r2, [pc, #100]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e662:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e666:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e668:	e00f      	b.n	800e68a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d106      	bne.n	800e67e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e670:	4b15      	ldr	r3, [pc, #84]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e674:	4a14      	ldr	r2, [pc, #80]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e676:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e67a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e67c:	e005      	b.n	800e68a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e67e:	4b12      	ldr	r3, [pc, #72]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e682:	4a11      	ldr	r2, [pc, #68]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e684:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e688:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e68a:	4b0f      	ldr	r3, [pc, #60]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4a0e      	ldr	r2, [pc, #56]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e696:	f7f6 f85f 	bl	8004758 <HAL_GetTick>
 800e69a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e69c:	e008      	b.n	800e6b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e69e:	f7f6 f85b 	bl	8004758 <HAL_GetTick>
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	1ad3      	subs	r3, r2, r3
 800e6a8:	2b02      	cmp	r3, #2
 800e6aa:	d901      	bls.n	800e6b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e6ac:	2303      	movs	r3, #3
 800e6ae:	e006      	b.n	800e6be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e6b0:	4b05      	ldr	r3, [pc, #20]	@ (800e6c8 <RCCEx_PLL3_Config+0x15c>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d0f0      	beq.n	800e69e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	58024400 	.word	0x58024400
 800e6cc:	ffff0007 	.word	0xffff0007

0800e6d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b084      	sub	sp, #16
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d101      	bne.n	800e6e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e10f      	b.n	800e902 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a87      	ldr	r2, [pc, #540]	@ (800e90c <HAL_SPI_Init+0x23c>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d00f      	beq.n	800e712 <HAL_SPI_Init+0x42>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4a86      	ldr	r2, [pc, #536]	@ (800e910 <HAL_SPI_Init+0x240>)
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d00a      	beq.n	800e712 <HAL_SPI_Init+0x42>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a84      	ldr	r2, [pc, #528]	@ (800e914 <HAL_SPI_Init+0x244>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d005      	beq.n	800e712 <HAL_SPI_Init+0x42>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	2b0f      	cmp	r3, #15
 800e70c:	d901      	bls.n	800e712 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e70e:	2301      	movs	r3, #1
 800e710:	e0f7      	b.n	800e902 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 fbbc 	bl	800ee90 <SPI_GetPacketSize>
 800e718:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4a7b      	ldr	r2, [pc, #492]	@ (800e90c <HAL_SPI_Init+0x23c>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d00c      	beq.n	800e73e <HAL_SPI_Init+0x6e>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4a79      	ldr	r2, [pc, #484]	@ (800e910 <HAL_SPI_Init+0x240>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d007      	beq.n	800e73e <HAL_SPI_Init+0x6e>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	4a78      	ldr	r2, [pc, #480]	@ (800e914 <HAL_SPI_Init+0x244>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d002      	beq.n	800e73e <HAL_SPI_Init+0x6e>
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2b08      	cmp	r3, #8
 800e73c:	d811      	bhi.n	800e762 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e742:	4a72      	ldr	r2, [pc, #456]	@ (800e90c <HAL_SPI_Init+0x23c>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d009      	beq.n	800e75c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a70      	ldr	r2, [pc, #448]	@ (800e910 <HAL_SPI_Init+0x240>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d004      	beq.n	800e75c <HAL_SPI_Init+0x8c>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4a6f      	ldr	r2, [pc, #444]	@ (800e914 <HAL_SPI_Init+0x244>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d104      	bne.n	800e766 <HAL_SPI_Init+0x96>
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2b10      	cmp	r3, #16
 800e760:	d901      	bls.n	800e766 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e762:	2301      	movs	r3, #1
 800e764:	e0cd      	b.n	800e902 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e76c:	b2db      	uxtb	r3, r3
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d106      	bne.n	800e780 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2200      	movs	r2, #0
 800e776:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f7f4 f9a0 	bl	8002ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2202      	movs	r2, #2
 800e784:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f022 0201 	bic.w	r2, r2, #1
 800e796:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800e7a2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	699b      	ldr	r3, [r3, #24]
 800e7a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e7ac:	d119      	bne.n	800e7e2 <HAL_SPI_Init+0x112>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e7b6:	d103      	bne.n	800e7c0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d008      	beq.n	800e7d2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d10c      	bne.n	800e7e2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e7cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e7d0:	d107      	bne.n	800e7e2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e7e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00f      	beq.n	800e80e <HAL_SPI_Init+0x13e>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	2b06      	cmp	r3, #6
 800e7f4:	d90b      	bls.n	800e80e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	430a      	orrs	r2, r1
 800e80a:	601a      	str	r2, [r3, #0]
 800e80c:	e007      	b.n	800e81e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e81c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	69da      	ldr	r2, [r3, #28]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e826:	431a      	orrs	r2, r3
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	431a      	orrs	r2, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e830:	ea42 0103 	orr.w	r1, r2, r3
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	68da      	ldr	r2, [r3, #12]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	430a      	orrs	r2, r1
 800e83e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e848:	431a      	orrs	r2, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e84e:	431a      	orrs	r2, r3
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	699b      	ldr	r3, [r3, #24]
 800e854:	431a      	orrs	r2, r3
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	691b      	ldr	r3, [r3, #16]
 800e85a:	431a      	orrs	r2, r3
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	695b      	ldr	r3, [r3, #20]
 800e860:	431a      	orrs	r2, r3
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6a1b      	ldr	r3, [r3, #32]
 800e866:	431a      	orrs	r2, r3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	431a      	orrs	r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e872:	431a      	orrs	r2, r3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	689b      	ldr	r3, [r3, #8]
 800e878:	431a      	orrs	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e87e:	ea42 0103 	orr.w	r1, r2, r3
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	430a      	orrs	r2, r1
 800e88c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d113      	bne.n	800e8be <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e8a8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	689b      	ldr	r3, [r3, #8]
 800e8b0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e8bc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f022 0201 	bic.w	r2, r2, #1
 800e8cc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d00a      	beq.n	800e8f0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	430a      	orrs	r2, r1
 800e8ee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800e900:	2300      	movs	r3, #0
}
 800e902:	4618      	mov	r0, r3
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	40013000 	.word	0x40013000
 800e910:	40003800 	.word	0x40003800
 800e914:	40003c00 	.word	0x40003c00

0800e918 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b088      	sub	sp, #32
 800e91c:	af02      	add	r7, sp, #8
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	603b      	str	r3, [r7, #0]
 800e924:	4613      	mov	r3, r2
 800e926:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	3320      	adds	r3, #32
 800e92e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e930:	f7f5 ff12 	bl	8004758 <HAL_GetTick>
 800e934:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d001      	beq.n	800e946 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800e942:	2302      	movs	r3, #2
 800e944:	e1d1      	b.n	800ecea <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d002      	beq.n	800e952 <HAL_SPI_Transmit+0x3a>
 800e94c:	88fb      	ldrh	r3, [r7, #6]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d101      	bne.n	800e956 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800e952:	2301      	movs	r3, #1
 800e954:	e1c9      	b.n	800ecea <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d101      	bne.n	800e964 <HAL_SPI_Transmit+0x4c>
 800e960:	2302      	movs	r3, #2
 800e962:	e1c2      	b.n	800ecea <HAL_SPI_Transmit+0x3d2>
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2203      	movs	r2, #3
 800e970:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2200      	movs	r2, #0
 800e978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	88fa      	ldrh	r2, [r7, #6]
 800e986:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	88fa      	ldrh	r2, [r7, #6]
 800e98e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2200      	movs	r2, #0
 800e996:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800e9bc:	d108      	bne.n	800e9d0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e9cc:	601a      	str	r2, [r3, #0]
 800e9ce:	e009      	b.n	800e9e4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	68db      	ldr	r3, [r3, #12]
 800e9d6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e9e2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	685a      	ldr	r2, [r3, #4]
 800e9ea:	4b96      	ldr	r3, [pc, #600]	@ (800ec44 <HAL_SPI_Transmit+0x32c>)
 800e9ec:	4013      	ands	r3, r2
 800e9ee:	88f9      	ldrh	r1, [r7, #6]
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	6812      	ldr	r2, [r2, #0]
 800e9f4:	430b      	orrs	r3, r1
 800e9f6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f042 0201 	orr.w	r2, r2, #1
 800ea06:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ea10:	d107      	bne.n	800ea22 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ea20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	2b0f      	cmp	r3, #15
 800ea28:	d947      	bls.n	800eaba <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ea2a:	e03f      	b.n	800eaac <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	695b      	ldr	r3, [r3, #20]
 800ea32:	f003 0302 	and.w	r3, r3, #2
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	d114      	bne.n	800ea64 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	6812      	ldr	r2, [r2, #0]
 800ea44:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ea4a:	1d1a      	adds	r2, r3, #4
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	3b01      	subs	r3, #1
 800ea5a:	b29a      	uxth	r2, r3
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ea62:	e023      	b.n	800eaac <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea64:	f7f5 fe78 	bl	8004758 <HAL_GetTick>
 800ea68:	4602      	mov	r2, r0
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	1ad3      	subs	r3, r2, r3
 800ea6e:	683a      	ldr	r2, [r7, #0]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d803      	bhi.n	800ea7c <HAL_SPI_Transmit+0x164>
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea7a:	d102      	bne.n	800ea82 <HAL_SPI_Transmit+0x16a>
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d114      	bne.n	800eaac <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	f000 f936 	bl	800ecf4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800eaa8:	2303      	movs	r3, #3
 800eaaa:	e11e      	b.n	800ecea <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d1b9      	bne.n	800ea2c <HAL_SPI_Transmit+0x114>
 800eab8:	e0f1      	b.n	800ec9e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	68db      	ldr	r3, [r3, #12]
 800eabe:	2b07      	cmp	r3, #7
 800eac0:	f240 80e6 	bls.w	800ec90 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800eac4:	e05d      	b.n	800eb82 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	695b      	ldr	r3, [r3, #20]
 800eacc:	f003 0302 	and.w	r3, r3, #2
 800ead0:	2b02      	cmp	r3, #2
 800ead2:	d132      	bne.n	800eb3a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800eada:	b29b      	uxth	r3, r3
 800eadc:	2b01      	cmp	r3, #1
 800eade:	d918      	bls.n	800eb12 <HAL_SPI_Transmit+0x1fa>
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d014      	beq.n	800eb12 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	6812      	ldr	r2, [r2, #0]
 800eaf2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eaf8:	1d1a      	adds	r2, r3, #4
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	3b02      	subs	r3, #2
 800eb08:	b29a      	uxth	r2, r3
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800eb10:	e037      	b.n	800eb82 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb16:	881a      	ldrh	r2, [r3, #0]
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb20:	1c9a      	adds	r2, r3, #2
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	3b01      	subs	r3, #1
 800eb30:	b29a      	uxth	r2, r3
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800eb38:	e023      	b.n	800eb82 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb3a:	f7f5 fe0d 	bl	8004758 <HAL_GetTick>
 800eb3e:	4602      	mov	r2, r0
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	1ad3      	subs	r3, r2, r3
 800eb44:	683a      	ldr	r2, [r7, #0]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d803      	bhi.n	800eb52 <HAL_SPI_Transmit+0x23a>
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb50:	d102      	bne.n	800eb58 <HAL_SPI_Transmit+0x240>
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d114      	bne.n	800eb82 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eb58:	68f8      	ldr	r0, [r7, #12]
 800eb5a:	f000 f8cb 	bl	800ecf4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2201      	movs	r2, #1
 800eb72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800eb7e:	2303      	movs	r3, #3
 800eb80:	e0b3      	b.n	800ecea <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d19b      	bne.n	800eac6 <HAL_SPI_Transmit+0x1ae>
 800eb8e:	e086      	b.n	800ec9e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	695b      	ldr	r3, [r3, #20]
 800eb96:	f003 0302 	and.w	r3, r3, #2
 800eb9a:	2b02      	cmp	r3, #2
 800eb9c:	d154      	bne.n	800ec48 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	2b03      	cmp	r3, #3
 800eba8:	d918      	bls.n	800ebdc <HAL_SPI_Transmit+0x2c4>
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebae:	2b40      	cmp	r3, #64	@ 0x40
 800ebb0:	d914      	bls.n	800ebdc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	6812      	ldr	r2, [r2, #0]
 800ebbc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ebc2:	1d1a      	adds	r2, r3, #4
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	3b04      	subs	r3, #4
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ebda:	e059      	b.n	800ec90 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ebe2:	b29b      	uxth	r3, r3
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d917      	bls.n	800ec18 <HAL_SPI_Transmit+0x300>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d013      	beq.n	800ec18 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ebf4:	881a      	ldrh	r2, [r3, #0]
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ebfe:	1c9a      	adds	r2, r3, #2
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	3b02      	subs	r3, #2
 800ec0e:	b29a      	uxth	r2, r3
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ec16:	e03b      	b.n	800ec90 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	3320      	adds	r3, #32
 800ec22:	7812      	ldrb	r2, [r2, #0]
 800ec24:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ec2a:	1c5a      	adds	r2, r3, #1
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	3b01      	subs	r3, #1
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ec42:	e025      	b.n	800ec90 <HAL_SPI_Transmit+0x378>
 800ec44:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec48:	f7f5 fd86 	bl	8004758 <HAL_GetTick>
 800ec4c:	4602      	mov	r2, r0
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	1ad3      	subs	r3, r2, r3
 800ec52:	683a      	ldr	r2, [r7, #0]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d803      	bhi.n	800ec60 <HAL_SPI_Transmit+0x348>
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec5e:	d102      	bne.n	800ec66 <HAL_SPI_Transmit+0x34e>
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d114      	bne.n	800ec90 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec66:	68f8      	ldr	r0, [r7, #12]
 800ec68:	f000 f844 	bl	800ecf4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ec72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2200      	movs	r2, #0
 800ec88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ec8c:	2303      	movs	r3, #3
 800ec8e:	e02c      	b.n	800ecea <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	f47f af79 	bne.w	800eb90 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	2200      	movs	r2, #0
 800eca6:	2108      	movs	r1, #8
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f000 f8c3 	bl	800ee34 <SPI_WaitOnFlagUntilTimeout>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d007      	beq.n	800ecc4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ecba:	f043 0220 	orr.w	r2, r3, #32
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	f000 f815 	bl	800ecf4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2201      	movs	r2, #1
 800ecce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d001      	beq.n	800ece8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800ece4:	2301      	movs	r3, #1
 800ece6:	e000      	b.n	800ecea <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800ece8:	2300      	movs	r3, #0
  }
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3718      	adds	r7, #24
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop

0800ecf4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	695b      	ldr	r3, [r3, #20]
 800ed02:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	699a      	ldr	r2, [r3, #24]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f042 0208 	orr.w	r2, r2, #8
 800ed12:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	699a      	ldr	r2, [r3, #24]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f042 0210 	orr.w	r2, r2, #16
 800ed22:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f022 0201 	bic.w	r2, r2, #1
 800ed32:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	6919      	ldr	r1, [r3, #16]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	4b3c      	ldr	r3, [pc, #240]	@ (800ee30 <SPI_CloseTransfer+0x13c>)
 800ed40:	400b      	ands	r3, r1
 800ed42:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	689a      	ldr	r2, [r3, #8]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ed52:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	2b04      	cmp	r3, #4
 800ed5e:	d014      	beq.n	800ed8a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f003 0320 	and.w	r3, r3, #32
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d00f      	beq.n	800ed8a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed70:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	699a      	ldr	r2, [r3, #24]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f042 0220 	orr.w	r2, r2, #32
 800ed88:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ed90:	b2db      	uxtb	r3, r3
 800ed92:	2b03      	cmp	r3, #3
 800ed94:	d014      	beq.n	800edc0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d00f      	beq.n	800edc0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eda6:	f043 0204 	orr.w	r2, r3, #4
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	699a      	ldr	r2, [r3, #24]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800edbe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d00f      	beq.n	800edea <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800edd0:	f043 0201 	orr.w	r2, r3, #1
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	699a      	ldr	r2, [r3, #24]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ede8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d00f      	beq.n	800ee14 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800edfa:	f043 0208 	orr.w	r2, r3, #8
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	699a      	ldr	r2, [r3, #24]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ee12:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2200      	movs	r2, #0
 800ee18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800ee24:	bf00      	nop
 800ee26:	3714      	adds	r7, #20
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr
 800ee30:	fffffc90 	.word	0xfffffc90

0800ee34 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b084      	sub	sp, #16
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	603b      	str	r3, [r7, #0]
 800ee40:	4613      	mov	r3, r2
 800ee42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ee44:	e010      	b.n	800ee68 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee46:	f7f5 fc87 	bl	8004758 <HAL_GetTick>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	1ad3      	subs	r3, r2, r3
 800ee50:	683a      	ldr	r2, [r7, #0]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d803      	bhi.n	800ee5e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee5c:	d102      	bne.n	800ee64 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d101      	bne.n	800ee68 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ee64:	2303      	movs	r3, #3
 800ee66:	e00f      	b.n	800ee88 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	695a      	ldr	r2, [r3, #20]
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	4013      	ands	r3, r2
 800ee72:	68ba      	ldr	r2, [r7, #8]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	bf0c      	ite	eq
 800ee78:	2301      	moveq	r3, #1
 800ee7a:	2300      	movne	r3, #0
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	461a      	mov	r2, r3
 800ee80:	79fb      	ldrb	r3, [r7, #7]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d0df      	beq.n	800ee46 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ee86:	2300      	movs	r3, #0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3710      	adds	r7, #16
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b085      	sub	sp, #20
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee9c:	095b      	lsrs	r3, r3, #5
 800ee9e:	3301      	adds	r3, #1
 800eea0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	68db      	ldr	r3, [r3, #12]
 800eea6:	3301      	adds	r3, #1
 800eea8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	3307      	adds	r3, #7
 800eeae:	08db      	lsrs	r3, r3, #3
 800eeb0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	68fa      	ldr	r2, [r7, #12]
 800eeb6:	fb02 f303 	mul.w	r3, r2, r3
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3714      	adds	r7, #20
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr

0800eec6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b082      	sub	sp, #8
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d101      	bne.n	800eed8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eed4:	2301      	movs	r3, #1
 800eed6:	e049      	b.n	800ef6c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d106      	bne.n	800eef2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2200      	movs	r2, #0
 800eee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f7f3 fe9d 	bl	8002c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2202      	movs	r2, #2
 800eef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	3304      	adds	r3, #4
 800ef02:	4619      	mov	r1, r3
 800ef04:	4610      	mov	r0, r2
 800ef06:	f000 ff47 	bl	800fd98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2201      	movs	r2, #1
 800ef16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2201      	movs	r2, #1
 800ef26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2201      	movs	r2, #1
 800ef2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2201      	movs	r2, #1
 800ef36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2201      	movs	r2, #1
 800ef46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2201      	movs	r2, #1
 800ef56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2201      	movs	r2, #1
 800ef66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ef6a:	2300      	movs	r3, #0
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b085      	sub	sp, #20
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef82:	b2db      	uxtb	r3, r3
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d001      	beq.n	800ef8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e056      	b.n	800f03a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2202      	movs	r2, #2
 800ef90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4a2b      	ldr	r2, [pc, #172]	@ (800f048 <HAL_TIM_Base_Start+0xd4>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d02c      	beq.n	800eff8 <HAL_TIM_Base_Start+0x84>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efa6:	d027      	beq.n	800eff8 <HAL_TIM_Base_Start+0x84>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a27      	ldr	r2, [pc, #156]	@ (800f04c <HAL_TIM_Base_Start+0xd8>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d022      	beq.n	800eff8 <HAL_TIM_Base_Start+0x84>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a26      	ldr	r2, [pc, #152]	@ (800f050 <HAL_TIM_Base_Start+0xdc>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d01d      	beq.n	800eff8 <HAL_TIM_Base_Start+0x84>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4a24      	ldr	r2, [pc, #144]	@ (800f054 <HAL_TIM_Base_Start+0xe0>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d018      	beq.n	800eff8 <HAL_TIM_Base_Start+0x84>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a23      	ldr	r2, [pc, #140]	@ (800f058 <HAL_TIM_Base_Start+0xe4>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d013      	beq.n	800eff8 <HAL_TIM_Base_Start+0x84>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4a21      	ldr	r2, [pc, #132]	@ (800f05c <HAL_TIM_Base_Start+0xe8>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d00e      	beq.n	800eff8 <HAL_TIM_Base_Start+0x84>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	4a20      	ldr	r2, [pc, #128]	@ (800f060 <HAL_TIM_Base_Start+0xec>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d009      	beq.n	800eff8 <HAL_TIM_Base_Start+0x84>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4a1e      	ldr	r2, [pc, #120]	@ (800f064 <HAL_TIM_Base_Start+0xf0>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d004      	beq.n	800eff8 <HAL_TIM_Base_Start+0x84>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4a1d      	ldr	r2, [pc, #116]	@ (800f068 <HAL_TIM_Base_Start+0xf4>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d115      	bne.n	800f024 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	689a      	ldr	r2, [r3, #8]
 800effe:	4b1b      	ldr	r3, [pc, #108]	@ (800f06c <HAL_TIM_Base_Start+0xf8>)
 800f000:	4013      	ands	r3, r2
 800f002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b06      	cmp	r3, #6
 800f008:	d015      	beq.n	800f036 <HAL_TIM_Base_Start+0xc2>
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f010:	d011      	beq.n	800f036 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f042 0201 	orr.w	r2, r2, #1
 800f020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f022:	e008      	b.n	800f036 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f042 0201 	orr.w	r2, r2, #1
 800f032:	601a      	str	r2, [r3, #0]
 800f034:	e000      	b.n	800f038 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f036:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f038:	2300      	movs	r3, #0
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3714      	adds	r7, #20
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop
 800f048:	40010000 	.word	0x40010000
 800f04c:	40000400 	.word	0x40000400
 800f050:	40000800 	.word	0x40000800
 800f054:	40000c00 	.word	0x40000c00
 800f058:	40010400 	.word	0x40010400
 800f05c:	40001800 	.word	0x40001800
 800f060:	40014000 	.word	0x40014000
 800f064:	4000e000 	.word	0x4000e000
 800f068:	4000e400 	.word	0x4000e400
 800f06c:	00010007 	.word	0x00010007

0800f070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f070:	b480      	push	{r7}
 800f072:	b085      	sub	sp, #20
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	2b01      	cmp	r3, #1
 800f082:	d001      	beq.n	800f088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f084:	2301      	movs	r3, #1
 800f086:	e05e      	b.n	800f146 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2202      	movs	r2, #2
 800f08c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	68da      	ldr	r2, [r3, #12]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f042 0201 	orr.w	r2, r2, #1
 800f09e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4a2b      	ldr	r2, [pc, #172]	@ (800f154 <HAL_TIM_Base_Start_IT+0xe4>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d02c      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x94>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0b2:	d027      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x94>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4a27      	ldr	r2, [pc, #156]	@ (800f158 <HAL_TIM_Base_Start_IT+0xe8>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d022      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x94>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	4a26      	ldr	r2, [pc, #152]	@ (800f15c <HAL_TIM_Base_Start_IT+0xec>)
 800f0c4:	4293      	cmp	r3, r2
 800f0c6:	d01d      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x94>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a24      	ldr	r2, [pc, #144]	@ (800f160 <HAL_TIM_Base_Start_IT+0xf0>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d018      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x94>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	4a23      	ldr	r2, [pc, #140]	@ (800f164 <HAL_TIM_Base_Start_IT+0xf4>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d013      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x94>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a21      	ldr	r2, [pc, #132]	@ (800f168 <HAL_TIM_Base_Start_IT+0xf8>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d00e      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x94>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4a20      	ldr	r2, [pc, #128]	@ (800f16c <HAL_TIM_Base_Start_IT+0xfc>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d009      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x94>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a1e      	ldr	r2, [pc, #120]	@ (800f170 <HAL_TIM_Base_Start_IT+0x100>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d004      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x94>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4a1d      	ldr	r2, [pc, #116]	@ (800f174 <HAL_TIM_Base_Start_IT+0x104>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d115      	bne.n	800f130 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	689a      	ldr	r2, [r3, #8]
 800f10a:	4b1b      	ldr	r3, [pc, #108]	@ (800f178 <HAL_TIM_Base_Start_IT+0x108>)
 800f10c:	4013      	ands	r3, r2
 800f10e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2b06      	cmp	r3, #6
 800f114:	d015      	beq.n	800f142 <HAL_TIM_Base_Start_IT+0xd2>
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f11c:	d011      	beq.n	800f142 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f042 0201 	orr.w	r2, r2, #1
 800f12c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f12e:	e008      	b.n	800f142 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	681a      	ldr	r2, [r3, #0]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f042 0201 	orr.w	r2, r2, #1
 800f13e:	601a      	str	r2, [r3, #0]
 800f140:	e000      	b.n	800f144 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f142:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f144:	2300      	movs	r3, #0
}
 800f146:	4618      	mov	r0, r3
 800f148:	3714      	adds	r7, #20
 800f14a:	46bd      	mov	sp, r7
 800f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f150:	4770      	bx	lr
 800f152:	bf00      	nop
 800f154:	40010000 	.word	0x40010000
 800f158:	40000400 	.word	0x40000400
 800f15c:	40000800 	.word	0x40000800
 800f160:	40000c00 	.word	0x40000c00
 800f164:	40010400 	.word	0x40010400
 800f168:	40001800 	.word	0x40001800
 800f16c:	40014000 	.word	0x40014000
 800f170:	4000e000 	.word	0x4000e000
 800f174:	4000e400 	.word	0x4000e400
 800f178:	00010007 	.word	0x00010007

0800f17c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b084      	sub	sp, #16
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d109      	bne.n	800f1a0 <HAL_TIM_OC_Start+0x24>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f192:	b2db      	uxtb	r3, r3
 800f194:	2b01      	cmp	r3, #1
 800f196:	bf14      	ite	ne
 800f198:	2301      	movne	r3, #1
 800f19a:	2300      	moveq	r3, #0
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	e03c      	b.n	800f21a <HAL_TIM_OC_Start+0x9e>
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	2b04      	cmp	r3, #4
 800f1a4:	d109      	bne.n	800f1ba <HAL_TIM_OC_Start+0x3e>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	bf14      	ite	ne
 800f1b2:	2301      	movne	r3, #1
 800f1b4:	2300      	moveq	r3, #0
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	e02f      	b.n	800f21a <HAL_TIM_OC_Start+0x9e>
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	2b08      	cmp	r3, #8
 800f1be:	d109      	bne.n	800f1d4 <HAL_TIM_OC_Start+0x58>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f1c6:	b2db      	uxtb	r3, r3
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	bf14      	ite	ne
 800f1cc:	2301      	movne	r3, #1
 800f1ce:	2300      	moveq	r3, #0
 800f1d0:	b2db      	uxtb	r3, r3
 800f1d2:	e022      	b.n	800f21a <HAL_TIM_OC_Start+0x9e>
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	2b0c      	cmp	r3, #12
 800f1d8:	d109      	bne.n	800f1ee <HAL_TIM_OC_Start+0x72>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f1e0:	b2db      	uxtb	r3, r3
 800f1e2:	2b01      	cmp	r3, #1
 800f1e4:	bf14      	ite	ne
 800f1e6:	2301      	movne	r3, #1
 800f1e8:	2300      	moveq	r3, #0
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	e015      	b.n	800f21a <HAL_TIM_OC_Start+0x9e>
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	2b10      	cmp	r3, #16
 800f1f2:	d109      	bne.n	800f208 <HAL_TIM_OC_Start+0x8c>
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	bf14      	ite	ne
 800f200:	2301      	movne	r3, #1
 800f202:	2300      	moveq	r3, #0
 800f204:	b2db      	uxtb	r3, r3
 800f206:	e008      	b.n	800f21a <HAL_TIM_OC_Start+0x9e>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	2b01      	cmp	r3, #1
 800f212:	bf14      	ite	ne
 800f214:	2301      	movne	r3, #1
 800f216:	2300      	moveq	r3, #0
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d001      	beq.n	800f222 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800f21e:	2301      	movs	r3, #1
 800f220:	e0ab      	b.n	800f37a <HAL_TIM_OC_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d104      	bne.n	800f232 <HAL_TIM_OC_Start+0xb6>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2202      	movs	r2, #2
 800f22c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f230:	e023      	b.n	800f27a <HAL_TIM_OC_Start+0xfe>
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	2b04      	cmp	r3, #4
 800f236:	d104      	bne.n	800f242 <HAL_TIM_OC_Start+0xc6>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2202      	movs	r2, #2
 800f23c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f240:	e01b      	b.n	800f27a <HAL_TIM_OC_Start+0xfe>
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	2b08      	cmp	r3, #8
 800f246:	d104      	bne.n	800f252 <HAL_TIM_OC_Start+0xd6>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2202      	movs	r2, #2
 800f24c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f250:	e013      	b.n	800f27a <HAL_TIM_OC_Start+0xfe>
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	2b0c      	cmp	r3, #12
 800f256:	d104      	bne.n	800f262 <HAL_TIM_OC_Start+0xe6>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2202      	movs	r2, #2
 800f25c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f260:	e00b      	b.n	800f27a <HAL_TIM_OC_Start+0xfe>
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	2b10      	cmp	r3, #16
 800f266:	d104      	bne.n	800f272 <HAL_TIM_OC_Start+0xf6>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2202      	movs	r2, #2
 800f26c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f270:	e003      	b.n	800f27a <HAL_TIM_OC_Start+0xfe>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2202      	movs	r2, #2
 800f276:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2201      	movs	r2, #1
 800f280:	6839      	ldr	r1, [r7, #0]
 800f282:	4618      	mov	r0, r3
 800f284:	f001 fa92 	bl	80107ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	4a3d      	ldr	r2, [pc, #244]	@ (800f384 <HAL_TIM_OC_Start+0x208>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	d013      	beq.n	800f2ba <HAL_TIM_OC_Start+0x13e>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	4a3c      	ldr	r2, [pc, #240]	@ (800f388 <HAL_TIM_OC_Start+0x20c>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d00e      	beq.n	800f2ba <HAL_TIM_OC_Start+0x13e>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a3a      	ldr	r2, [pc, #232]	@ (800f38c <HAL_TIM_OC_Start+0x210>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d009      	beq.n	800f2ba <HAL_TIM_OC_Start+0x13e>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	4a39      	ldr	r2, [pc, #228]	@ (800f390 <HAL_TIM_OC_Start+0x214>)
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	d004      	beq.n	800f2ba <HAL_TIM_OC_Start+0x13e>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	4a37      	ldr	r2, [pc, #220]	@ (800f394 <HAL_TIM_OC_Start+0x218>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d101      	bne.n	800f2be <HAL_TIM_OC_Start+0x142>
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	e000      	b.n	800f2c0 <HAL_TIM_OC_Start+0x144>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d007      	beq.n	800f2d4 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f2d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4a2a      	ldr	r2, [pc, #168]	@ (800f384 <HAL_TIM_OC_Start+0x208>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d02c      	beq.n	800f338 <HAL_TIM_OC_Start+0x1bc>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2e6:	d027      	beq.n	800f338 <HAL_TIM_OC_Start+0x1bc>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	4a2a      	ldr	r2, [pc, #168]	@ (800f398 <HAL_TIM_OC_Start+0x21c>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d022      	beq.n	800f338 <HAL_TIM_OC_Start+0x1bc>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	4a29      	ldr	r2, [pc, #164]	@ (800f39c <HAL_TIM_OC_Start+0x220>)
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d01d      	beq.n	800f338 <HAL_TIM_OC_Start+0x1bc>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4a27      	ldr	r2, [pc, #156]	@ (800f3a0 <HAL_TIM_OC_Start+0x224>)
 800f302:	4293      	cmp	r3, r2
 800f304:	d018      	beq.n	800f338 <HAL_TIM_OC_Start+0x1bc>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	4a1f      	ldr	r2, [pc, #124]	@ (800f388 <HAL_TIM_OC_Start+0x20c>)
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d013      	beq.n	800f338 <HAL_TIM_OC_Start+0x1bc>
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4a23      	ldr	r2, [pc, #140]	@ (800f3a4 <HAL_TIM_OC_Start+0x228>)
 800f316:	4293      	cmp	r3, r2
 800f318:	d00e      	beq.n	800f338 <HAL_TIM_OC_Start+0x1bc>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	4a1b      	ldr	r2, [pc, #108]	@ (800f38c <HAL_TIM_OC_Start+0x210>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d009      	beq.n	800f338 <HAL_TIM_OC_Start+0x1bc>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a1f      	ldr	r2, [pc, #124]	@ (800f3a8 <HAL_TIM_OC_Start+0x22c>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d004      	beq.n	800f338 <HAL_TIM_OC_Start+0x1bc>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	4a1e      	ldr	r2, [pc, #120]	@ (800f3ac <HAL_TIM_OC_Start+0x230>)
 800f334:	4293      	cmp	r3, r2
 800f336:	d115      	bne.n	800f364 <HAL_TIM_OC_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	689a      	ldr	r2, [r3, #8]
 800f33e:	4b1c      	ldr	r3, [pc, #112]	@ (800f3b0 <HAL_TIM_OC_Start+0x234>)
 800f340:	4013      	ands	r3, r2
 800f342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2b06      	cmp	r3, #6
 800f348:	d015      	beq.n	800f376 <HAL_TIM_OC_Start+0x1fa>
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f350:	d011      	beq.n	800f376 <HAL_TIM_OC_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	681a      	ldr	r2, [r3, #0]
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	f042 0201 	orr.w	r2, r2, #1
 800f360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f362:	e008      	b.n	800f376 <HAL_TIM_OC_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f042 0201 	orr.w	r2, r2, #1
 800f372:	601a      	str	r2, [r3, #0]
 800f374:	e000      	b.n	800f378 <HAL_TIM_OC_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f376:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f378:	2300      	movs	r3, #0
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3710      	adds	r7, #16
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	40010000 	.word	0x40010000
 800f388:	40010400 	.word	0x40010400
 800f38c:	40014000 	.word	0x40014000
 800f390:	40014400 	.word	0x40014400
 800f394:	40014800 	.word	0x40014800
 800f398:	40000400 	.word	0x40000400
 800f39c:	40000800 	.word	0x40000800
 800f3a0:	40000c00 	.word	0x40000c00
 800f3a4:	40001800 	.word	0x40001800
 800f3a8:	4000e000 	.word	0x4000e000
 800f3ac:	4000e400 	.word	0x4000e400
 800f3b0:	00010007 	.word	0x00010007

0800f3b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d101      	bne.n	800f3c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	e049      	b.n	800f45a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f3cc:	b2db      	uxtb	r3, r3
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d106      	bne.n	800f3e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f7f3 fc04 	bl	8002be8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2202      	movs	r2, #2
 800f3e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	3304      	adds	r3, #4
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	4610      	mov	r0, r2
 800f3f4:	f000 fcd0 	bl	800fd98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2201      	movs	r2, #1
 800f404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2201      	movs	r2, #1
 800f40c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2201      	movs	r2, #1
 800f414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2201      	movs	r2, #1
 800f41c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2201      	movs	r2, #1
 800f424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2201      	movs	r2, #1
 800f42c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2201      	movs	r2, #1
 800f434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2201      	movs	r2, #1
 800f43c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2201      	movs	r2, #1
 800f444:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2201      	movs	r2, #1
 800f44c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2201      	movs	r2, #1
 800f454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f458:	2300      	movs	r3, #0
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3708      	adds	r7, #8
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
	...

0800f464 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b084      	sub	sp, #16
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d109      	bne.n	800f488 <HAL_TIM_PWM_Start+0x24>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f47a:	b2db      	uxtb	r3, r3
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	bf14      	ite	ne
 800f480:	2301      	movne	r3, #1
 800f482:	2300      	moveq	r3, #0
 800f484:	b2db      	uxtb	r3, r3
 800f486:	e03c      	b.n	800f502 <HAL_TIM_PWM_Start+0x9e>
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	2b04      	cmp	r3, #4
 800f48c:	d109      	bne.n	800f4a2 <HAL_TIM_PWM_Start+0x3e>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f494:	b2db      	uxtb	r3, r3
 800f496:	2b01      	cmp	r3, #1
 800f498:	bf14      	ite	ne
 800f49a:	2301      	movne	r3, #1
 800f49c:	2300      	moveq	r3, #0
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	e02f      	b.n	800f502 <HAL_TIM_PWM_Start+0x9e>
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	2b08      	cmp	r3, #8
 800f4a6:	d109      	bne.n	800f4bc <HAL_TIM_PWM_Start+0x58>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	bf14      	ite	ne
 800f4b4:	2301      	movne	r3, #1
 800f4b6:	2300      	moveq	r3, #0
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	e022      	b.n	800f502 <HAL_TIM_PWM_Start+0x9e>
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	2b0c      	cmp	r3, #12
 800f4c0:	d109      	bne.n	800f4d6 <HAL_TIM_PWM_Start+0x72>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	bf14      	ite	ne
 800f4ce:	2301      	movne	r3, #1
 800f4d0:	2300      	moveq	r3, #0
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	e015      	b.n	800f502 <HAL_TIM_PWM_Start+0x9e>
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	2b10      	cmp	r3, #16
 800f4da:	d109      	bne.n	800f4f0 <HAL_TIM_PWM_Start+0x8c>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	bf14      	ite	ne
 800f4e8:	2301      	movne	r3, #1
 800f4ea:	2300      	moveq	r3, #0
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	e008      	b.n	800f502 <HAL_TIM_PWM_Start+0x9e>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	bf14      	ite	ne
 800f4fc:	2301      	movne	r3, #1
 800f4fe:	2300      	moveq	r3, #0
 800f500:	b2db      	uxtb	r3, r3
 800f502:	2b00      	cmp	r3, #0
 800f504:	d001      	beq.n	800f50a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f506:	2301      	movs	r3, #1
 800f508:	e0ab      	b.n	800f662 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d104      	bne.n	800f51a <HAL_TIM_PWM_Start+0xb6>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2202      	movs	r2, #2
 800f514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f518:	e023      	b.n	800f562 <HAL_TIM_PWM_Start+0xfe>
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	2b04      	cmp	r3, #4
 800f51e:	d104      	bne.n	800f52a <HAL_TIM_PWM_Start+0xc6>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2202      	movs	r2, #2
 800f524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f528:	e01b      	b.n	800f562 <HAL_TIM_PWM_Start+0xfe>
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	2b08      	cmp	r3, #8
 800f52e:	d104      	bne.n	800f53a <HAL_TIM_PWM_Start+0xd6>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2202      	movs	r2, #2
 800f534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f538:	e013      	b.n	800f562 <HAL_TIM_PWM_Start+0xfe>
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	2b0c      	cmp	r3, #12
 800f53e:	d104      	bne.n	800f54a <HAL_TIM_PWM_Start+0xe6>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2202      	movs	r2, #2
 800f544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f548:	e00b      	b.n	800f562 <HAL_TIM_PWM_Start+0xfe>
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	2b10      	cmp	r3, #16
 800f54e:	d104      	bne.n	800f55a <HAL_TIM_PWM_Start+0xf6>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2202      	movs	r2, #2
 800f554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f558:	e003      	b.n	800f562 <HAL_TIM_PWM_Start+0xfe>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2202      	movs	r2, #2
 800f55e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	2201      	movs	r2, #1
 800f568:	6839      	ldr	r1, [r7, #0]
 800f56a:	4618      	mov	r0, r3
 800f56c:	f001 f91e 	bl	80107ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a3d      	ldr	r2, [pc, #244]	@ (800f66c <HAL_TIM_PWM_Start+0x208>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d013      	beq.n	800f5a2 <HAL_TIM_PWM_Start+0x13e>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4a3c      	ldr	r2, [pc, #240]	@ (800f670 <HAL_TIM_PWM_Start+0x20c>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d00e      	beq.n	800f5a2 <HAL_TIM_PWM_Start+0x13e>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4a3a      	ldr	r2, [pc, #232]	@ (800f674 <HAL_TIM_PWM_Start+0x210>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d009      	beq.n	800f5a2 <HAL_TIM_PWM_Start+0x13e>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	4a39      	ldr	r2, [pc, #228]	@ (800f678 <HAL_TIM_PWM_Start+0x214>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d004      	beq.n	800f5a2 <HAL_TIM_PWM_Start+0x13e>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4a37      	ldr	r2, [pc, #220]	@ (800f67c <HAL_TIM_PWM_Start+0x218>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d101      	bne.n	800f5a6 <HAL_TIM_PWM_Start+0x142>
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	e000      	b.n	800f5a8 <HAL_TIM_PWM_Start+0x144>
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d007      	beq.n	800f5bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f5ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4a2a      	ldr	r2, [pc, #168]	@ (800f66c <HAL_TIM_PWM_Start+0x208>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d02c      	beq.n	800f620 <HAL_TIM_PWM_Start+0x1bc>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5ce:	d027      	beq.n	800f620 <HAL_TIM_PWM_Start+0x1bc>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	4a2a      	ldr	r2, [pc, #168]	@ (800f680 <HAL_TIM_PWM_Start+0x21c>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d022      	beq.n	800f620 <HAL_TIM_PWM_Start+0x1bc>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	4a29      	ldr	r2, [pc, #164]	@ (800f684 <HAL_TIM_PWM_Start+0x220>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d01d      	beq.n	800f620 <HAL_TIM_PWM_Start+0x1bc>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4a27      	ldr	r2, [pc, #156]	@ (800f688 <HAL_TIM_PWM_Start+0x224>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d018      	beq.n	800f620 <HAL_TIM_PWM_Start+0x1bc>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a1f      	ldr	r2, [pc, #124]	@ (800f670 <HAL_TIM_PWM_Start+0x20c>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d013      	beq.n	800f620 <HAL_TIM_PWM_Start+0x1bc>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4a23      	ldr	r2, [pc, #140]	@ (800f68c <HAL_TIM_PWM_Start+0x228>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d00e      	beq.n	800f620 <HAL_TIM_PWM_Start+0x1bc>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4a1b      	ldr	r2, [pc, #108]	@ (800f674 <HAL_TIM_PWM_Start+0x210>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d009      	beq.n	800f620 <HAL_TIM_PWM_Start+0x1bc>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a1f      	ldr	r2, [pc, #124]	@ (800f690 <HAL_TIM_PWM_Start+0x22c>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d004      	beq.n	800f620 <HAL_TIM_PWM_Start+0x1bc>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4a1e      	ldr	r2, [pc, #120]	@ (800f694 <HAL_TIM_PWM_Start+0x230>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d115      	bne.n	800f64c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	689a      	ldr	r2, [r3, #8]
 800f626:	4b1c      	ldr	r3, [pc, #112]	@ (800f698 <HAL_TIM_PWM_Start+0x234>)
 800f628:	4013      	ands	r3, r2
 800f62a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2b06      	cmp	r3, #6
 800f630:	d015      	beq.n	800f65e <HAL_TIM_PWM_Start+0x1fa>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f638:	d011      	beq.n	800f65e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f042 0201 	orr.w	r2, r2, #1
 800f648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f64a:	e008      	b.n	800f65e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f042 0201 	orr.w	r2, r2, #1
 800f65a:	601a      	str	r2, [r3, #0]
 800f65c:	e000      	b.n	800f660 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f65e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f660:	2300      	movs	r3, #0
}
 800f662:	4618      	mov	r0, r3
 800f664:	3710      	adds	r7, #16
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	40010000 	.word	0x40010000
 800f670:	40010400 	.word	0x40010400
 800f674:	40014000 	.word	0x40014000
 800f678:	40014400 	.word	0x40014400
 800f67c:	40014800 	.word	0x40014800
 800f680:	40000400 	.word	0x40000400
 800f684:	40000800 	.word	0x40000800
 800f688:	40000c00 	.word	0x40000c00
 800f68c:	40001800 	.word	0x40001800
 800f690:	4000e000 	.word	0x4000e000
 800f694:	4000e400 	.word	0x4000e400
 800f698:	00010007 	.word	0x00010007

0800f69c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	691b      	ldr	r3, [r3, #16]
 800f6b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	f003 0302 	and.w	r3, r3, #2
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d020      	beq.n	800f700 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f003 0302 	and.w	r3, r3, #2
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d01b      	beq.n	800f700 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f06f 0202 	mvn.w	r2, #2
 800f6d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2201      	movs	r2, #1
 800f6d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	699b      	ldr	r3, [r3, #24]
 800f6de:	f003 0303 	and.w	r3, r3, #3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d003      	beq.n	800f6ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f000 fb38 	bl	800fd5c <HAL_TIM_IC_CaptureCallback>
 800f6ec:	e005      	b.n	800f6fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 fb2a 	bl	800fd48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f000 fb3b 	bl	800fd70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	f003 0304 	and.w	r3, r3, #4
 800f706:	2b00      	cmp	r3, #0
 800f708:	d020      	beq.n	800f74c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f003 0304 	and.w	r3, r3, #4
 800f710:	2b00      	cmp	r3, #0
 800f712:	d01b      	beq.n	800f74c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f06f 0204 	mvn.w	r2, #4
 800f71c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2202      	movs	r2, #2
 800f722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	699b      	ldr	r3, [r3, #24]
 800f72a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d003      	beq.n	800f73a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 fb12 	bl	800fd5c <HAL_TIM_IC_CaptureCallback>
 800f738:	e005      	b.n	800f746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 fb04 	bl	800fd48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 fb15 	bl	800fd70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2200      	movs	r2, #0
 800f74a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	f003 0308 	and.w	r3, r3, #8
 800f752:	2b00      	cmp	r3, #0
 800f754:	d020      	beq.n	800f798 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f003 0308 	and.w	r3, r3, #8
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d01b      	beq.n	800f798 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f06f 0208 	mvn.w	r2, #8
 800f768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2204      	movs	r2, #4
 800f76e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	69db      	ldr	r3, [r3, #28]
 800f776:	f003 0303 	and.w	r3, r3, #3
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d003      	beq.n	800f786 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f000 faec 	bl	800fd5c <HAL_TIM_IC_CaptureCallback>
 800f784:	e005      	b.n	800f792 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 fade 	bl	800fd48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f000 faef 	bl	800fd70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2200      	movs	r2, #0
 800f796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	f003 0310 	and.w	r3, r3, #16
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d020      	beq.n	800f7e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	f003 0310 	and.w	r3, r3, #16
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d01b      	beq.n	800f7e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f06f 0210 	mvn.w	r2, #16
 800f7b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2208      	movs	r2, #8
 800f7ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	69db      	ldr	r3, [r3, #28]
 800f7c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d003      	beq.n	800f7d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 fac6 	bl	800fd5c <HAL_TIM_IC_CaptureCallback>
 800f7d0:	e005      	b.n	800f7de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 fab8 	bl	800fd48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f000 fac9 	bl	800fd70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	f003 0301 	and.w	r3, r3, #1
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d00c      	beq.n	800f808 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f003 0301 	and.w	r3, r3, #1
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d007      	beq.n	800f808 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	f06f 0201 	mvn.w	r2, #1
 800f800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f7f2 ff48 	bl	8002698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d104      	bne.n	800f81c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d00c      	beq.n	800f836 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f822:	2b00      	cmp	r3, #0
 800f824:	d007      	beq.n	800f836 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f82e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f001 f913 	bl	8010a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d00c      	beq.n	800f85a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f846:	2b00      	cmp	r3, #0
 800f848:	d007      	beq.n	800f85a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f001 f90b 	bl	8010a70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f860:	2b00      	cmp	r3, #0
 800f862:	d00c      	beq.n	800f87e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d007      	beq.n	800f87e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 fa83 	bl	800fd84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	f003 0320 	and.w	r3, r3, #32
 800f884:	2b00      	cmp	r3, #0
 800f886:	d00c      	beq.n	800f8a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f003 0320 	and.w	r3, r3, #32
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d007      	beq.n	800f8a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f06f 0220 	mvn.w	r2, #32
 800f89a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f001 f8d3 	bl	8010a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f8a2:	bf00      	nop
 800f8a4:	3710      	adds	r7, #16
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
	...

0800f8ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b086      	sub	sp, #24
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f8c2:	2b01      	cmp	r3, #1
 800f8c4:	d101      	bne.n	800f8ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f8c6:	2302      	movs	r3, #2
 800f8c8:	e0ff      	b.n	800faca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	2201      	movs	r2, #1
 800f8ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2b14      	cmp	r3, #20
 800f8d6:	f200 80f0 	bhi.w	800faba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f8da:	a201      	add	r2, pc, #4	@ (adr r2, 800f8e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e0:	0800f935 	.word	0x0800f935
 800f8e4:	0800fabb 	.word	0x0800fabb
 800f8e8:	0800fabb 	.word	0x0800fabb
 800f8ec:	0800fabb 	.word	0x0800fabb
 800f8f0:	0800f975 	.word	0x0800f975
 800f8f4:	0800fabb 	.word	0x0800fabb
 800f8f8:	0800fabb 	.word	0x0800fabb
 800f8fc:	0800fabb 	.word	0x0800fabb
 800f900:	0800f9b7 	.word	0x0800f9b7
 800f904:	0800fabb 	.word	0x0800fabb
 800f908:	0800fabb 	.word	0x0800fabb
 800f90c:	0800fabb 	.word	0x0800fabb
 800f910:	0800f9f7 	.word	0x0800f9f7
 800f914:	0800fabb 	.word	0x0800fabb
 800f918:	0800fabb 	.word	0x0800fabb
 800f91c:	0800fabb 	.word	0x0800fabb
 800f920:	0800fa39 	.word	0x0800fa39
 800f924:	0800fabb 	.word	0x0800fabb
 800f928:	0800fabb 	.word	0x0800fabb
 800f92c:	0800fabb 	.word	0x0800fabb
 800f930:	0800fa79 	.word	0x0800fa79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	68b9      	ldr	r1, [r7, #8]
 800f93a:	4618      	mov	r0, r3
 800f93c:	f000 fad8 	bl	800fef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	699a      	ldr	r2, [r3, #24]
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f042 0208 	orr.w	r2, r2, #8
 800f94e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	699a      	ldr	r2, [r3, #24]
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f022 0204 	bic.w	r2, r2, #4
 800f95e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	6999      	ldr	r1, [r3, #24]
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	691a      	ldr	r2, [r3, #16]
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	430a      	orrs	r2, r1
 800f970:	619a      	str	r2, [r3, #24]
      break;
 800f972:	e0a5      	b.n	800fac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	68b9      	ldr	r1, [r7, #8]
 800f97a:	4618      	mov	r0, r3
 800f97c:	f000 fb48 	bl	8010010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	699a      	ldr	r2, [r3, #24]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f98e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	699a      	ldr	r2, [r3, #24]
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f99e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	6999      	ldr	r1, [r3, #24]
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	691b      	ldr	r3, [r3, #16]
 800f9aa:	021a      	lsls	r2, r3, #8
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	430a      	orrs	r2, r1
 800f9b2:	619a      	str	r2, [r3, #24]
      break;
 800f9b4:	e084      	b.n	800fac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	68b9      	ldr	r1, [r7, #8]
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f000 fbb1 	bl	8010124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	69da      	ldr	r2, [r3, #28]
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f042 0208 	orr.w	r2, r2, #8
 800f9d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	69da      	ldr	r2, [r3, #28]
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f022 0204 	bic.w	r2, r2, #4
 800f9e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	69d9      	ldr	r1, [r3, #28]
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	691a      	ldr	r2, [r3, #16]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	430a      	orrs	r2, r1
 800f9f2:	61da      	str	r2, [r3, #28]
      break;
 800f9f4:	e064      	b.n	800fac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	68b9      	ldr	r1, [r7, #8]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f000 fc19 	bl	8010234 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	69da      	ldr	r2, [r3, #28]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fa10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	69da      	ldr	r2, [r3, #28]
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fa20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	69d9      	ldr	r1, [r3, #28]
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	691b      	ldr	r3, [r3, #16]
 800fa2c:	021a      	lsls	r2, r3, #8
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	430a      	orrs	r2, r1
 800fa34:	61da      	str	r2, [r3, #28]
      break;
 800fa36:	e043      	b.n	800fac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	68b9      	ldr	r1, [r7, #8]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f000 fc62 	bl	8010308 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	f042 0208 	orr.w	r2, r2, #8
 800fa52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f022 0204 	bic.w	r2, r2, #4
 800fa62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	691a      	ldr	r2, [r3, #16]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	430a      	orrs	r2, r1
 800fa74:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800fa76:	e023      	b.n	800fac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	68b9      	ldr	r1, [r7, #8]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f000 fca6 	bl	80103d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fa92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800faa2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	691b      	ldr	r3, [r3, #16]
 800faae:	021a      	lsls	r2, r3, #8
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	430a      	orrs	r2, r1
 800fab6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800fab8:	e002      	b.n	800fac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800faba:	2301      	movs	r3, #1
 800fabc:	75fb      	strb	r3, [r7, #23]
      break;
 800fabe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fac8:	7dfb      	ldrb	r3, [r7, #23]
}
 800faca:	4618      	mov	r0, r3
 800facc:	3718      	adds	r7, #24
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop

0800fad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
 800fadc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fade:	2300      	movs	r3, #0
 800fae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fae8:	2b01      	cmp	r3, #1
 800faea:	d101      	bne.n	800faf0 <HAL_TIM_ConfigClockSource+0x1c>
 800faec:	2302      	movs	r3, #2
 800faee:	e0dc      	b.n	800fcaa <HAL_TIM_ConfigClockSource+0x1d6>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2201      	movs	r2, #1
 800faf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2202      	movs	r2, #2
 800fafc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fb08:	68ba      	ldr	r2, [r7, #8]
 800fb0a:	4b6a      	ldr	r3, [pc, #424]	@ (800fcb4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800fb0c:	4013      	ands	r3, r2
 800fb0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fb16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	68ba      	ldr	r2, [r7, #8]
 800fb1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4a64      	ldr	r2, [pc, #400]	@ (800fcb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	f000 80a9 	beq.w	800fc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800fb2c:	4a62      	ldr	r2, [pc, #392]	@ (800fcb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	f200 80ae 	bhi.w	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb34:	4a61      	ldr	r2, [pc, #388]	@ (800fcbc <HAL_TIM_ConfigClockSource+0x1e8>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	f000 80a1 	beq.w	800fc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800fb3c:	4a5f      	ldr	r2, [pc, #380]	@ (800fcbc <HAL_TIM_ConfigClockSource+0x1e8>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	f200 80a6 	bhi.w	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb44:	4a5e      	ldr	r2, [pc, #376]	@ (800fcc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	f000 8099 	beq.w	800fc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800fb4c:	4a5c      	ldr	r2, [pc, #368]	@ (800fcc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	f200 809e 	bhi.w	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fb58:	f000 8091 	beq.w	800fc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800fb5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fb60:	f200 8096 	bhi.w	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fb68:	f000 8089 	beq.w	800fc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800fb6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fb70:	f200 808e 	bhi.w	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb78:	d03e      	beq.n	800fbf8 <HAL_TIM_ConfigClockSource+0x124>
 800fb7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb7e:	f200 8087 	bhi.w	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb86:	f000 8086 	beq.w	800fc96 <HAL_TIM_ConfigClockSource+0x1c2>
 800fb8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb8e:	d87f      	bhi.n	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb90:	2b70      	cmp	r3, #112	@ 0x70
 800fb92:	d01a      	beq.n	800fbca <HAL_TIM_ConfigClockSource+0xf6>
 800fb94:	2b70      	cmp	r3, #112	@ 0x70
 800fb96:	d87b      	bhi.n	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb98:	2b60      	cmp	r3, #96	@ 0x60
 800fb9a:	d050      	beq.n	800fc3e <HAL_TIM_ConfigClockSource+0x16a>
 800fb9c:	2b60      	cmp	r3, #96	@ 0x60
 800fb9e:	d877      	bhi.n	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800fba0:	2b50      	cmp	r3, #80	@ 0x50
 800fba2:	d03c      	beq.n	800fc1e <HAL_TIM_ConfigClockSource+0x14a>
 800fba4:	2b50      	cmp	r3, #80	@ 0x50
 800fba6:	d873      	bhi.n	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800fba8:	2b40      	cmp	r3, #64	@ 0x40
 800fbaa:	d058      	beq.n	800fc5e <HAL_TIM_ConfigClockSource+0x18a>
 800fbac:	2b40      	cmp	r3, #64	@ 0x40
 800fbae:	d86f      	bhi.n	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800fbb0:	2b30      	cmp	r3, #48	@ 0x30
 800fbb2:	d064      	beq.n	800fc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800fbb4:	2b30      	cmp	r3, #48	@ 0x30
 800fbb6:	d86b      	bhi.n	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800fbb8:	2b20      	cmp	r3, #32
 800fbba:	d060      	beq.n	800fc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800fbbc:	2b20      	cmp	r3, #32
 800fbbe:	d867      	bhi.n	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d05c      	beq.n	800fc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800fbc4:	2b10      	cmp	r3, #16
 800fbc6:	d05a      	beq.n	800fc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800fbc8:	e062      	b.n	800fc90 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fbda:	f000 fdc7 	bl	801076c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	689b      	ldr	r3, [r3, #8]
 800fbe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fbec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	609a      	str	r2, [r3, #8]
      break;
 800fbf6:	e04f      	b.n	800fc98 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fc08:	f000 fdb0 	bl	801076c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	689a      	ldr	r2, [r3, #8]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fc1a:	609a      	str	r2, [r3, #8]
      break;
 800fc1c:	e03c      	b.n	800fc98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	f000 fd20 	bl	8010670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	2150      	movs	r1, #80	@ 0x50
 800fc36:	4618      	mov	r0, r3
 800fc38:	f000 fd7a 	bl	8010730 <TIM_ITRx_SetConfig>
      break;
 800fc3c:	e02c      	b.n	800fc98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	f000 fd3f 	bl	80106ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	2160      	movs	r1, #96	@ 0x60
 800fc56:	4618      	mov	r0, r3
 800fc58:	f000 fd6a 	bl	8010730 <TIM_ITRx_SetConfig>
      break;
 800fc5c:	e01c      	b.n	800fc98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	f000 fd00 	bl	8010670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	2140      	movs	r1, #64	@ 0x40
 800fc76:	4618      	mov	r0, r3
 800fc78:	f000 fd5a 	bl	8010730 <TIM_ITRx_SetConfig>
      break;
 800fc7c:	e00c      	b.n	800fc98 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681a      	ldr	r2, [r3, #0]
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	4619      	mov	r1, r3
 800fc88:	4610      	mov	r0, r2
 800fc8a:	f000 fd51 	bl	8010730 <TIM_ITRx_SetConfig>
      break;
 800fc8e:	e003      	b.n	800fc98 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800fc90:	2301      	movs	r3, #1
 800fc92:	73fb      	strb	r3, [r7, #15]
      break;
 800fc94:	e000      	b.n	800fc98 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800fc96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2201      	movs	r2, #1
 800fc9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2200      	movs	r2, #0
 800fca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3710      	adds	r7, #16
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}
 800fcb2:	bf00      	nop
 800fcb4:	ffceff88 	.word	0xffceff88
 800fcb8:	00100040 	.word	0x00100040
 800fcbc:	00100030 	.word	0x00100030
 800fcc0:	00100020 	.word	0x00100020

0800fcc4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	d101      	bne.n	800fcdc <HAL_TIM_SlaveConfigSynchro+0x18>
 800fcd8:	2302      	movs	r3, #2
 800fcda:	e031      	b.n	800fd40 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2201      	movs	r2, #1
 800fce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2202      	movs	r2, #2
 800fce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800fcec:	6839      	ldr	r1, [r7, #0]
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f000 fbd4 	bl	801049c <TIM_SlaveTimer_SetConfig>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d009      	beq.n	800fd0e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2200      	movs	r2, #0
 800fd06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	e018      	b.n	800fd40 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	68da      	ldr	r2, [r3, #12]
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fd1c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	68da      	ldr	r2, [r3, #12]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fd2c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2201      	movs	r2, #1
 800fd32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fd3e:	2300      	movs	r3, #0
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3708      	adds	r7, #8
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fd50:	bf00      	nop
 800fd52:	370c      	adds	r7, #12
 800fd54:	46bd      	mov	sp, r7
 800fd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5a:	4770      	bx	lr

0800fd5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b083      	sub	sp, #12
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fd64:	bf00      	nop
 800fd66:	370c      	adds	r7, #12
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6e:	4770      	bx	lr

0800fd70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b083      	sub	sp, #12
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fd78:	bf00      	nop
 800fd7a:	370c      	adds	r7, #12
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr

0800fd84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fd84:	b480      	push	{r7}
 800fd86:	b083      	sub	sp, #12
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fd8c:	bf00      	nop
 800fd8e:	370c      	adds	r7, #12
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr

0800fd98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b085      	sub	sp, #20
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	4a47      	ldr	r2, [pc, #284]	@ (800fec8 <TIM_Base_SetConfig+0x130>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d013      	beq.n	800fdd8 <TIM_Base_SetConfig+0x40>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fdb6:	d00f      	beq.n	800fdd8 <TIM_Base_SetConfig+0x40>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	4a44      	ldr	r2, [pc, #272]	@ (800fecc <TIM_Base_SetConfig+0x134>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d00b      	beq.n	800fdd8 <TIM_Base_SetConfig+0x40>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	4a43      	ldr	r2, [pc, #268]	@ (800fed0 <TIM_Base_SetConfig+0x138>)
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d007      	beq.n	800fdd8 <TIM_Base_SetConfig+0x40>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	4a42      	ldr	r2, [pc, #264]	@ (800fed4 <TIM_Base_SetConfig+0x13c>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d003      	beq.n	800fdd8 <TIM_Base_SetConfig+0x40>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	4a41      	ldr	r2, [pc, #260]	@ (800fed8 <TIM_Base_SetConfig+0x140>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d108      	bne.n	800fdea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fdde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	4313      	orrs	r3, r2
 800fde8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4a36      	ldr	r2, [pc, #216]	@ (800fec8 <TIM_Base_SetConfig+0x130>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d027      	beq.n	800fe42 <TIM_Base_SetConfig+0xaa>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fdf8:	d023      	beq.n	800fe42 <TIM_Base_SetConfig+0xaa>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4a33      	ldr	r2, [pc, #204]	@ (800fecc <TIM_Base_SetConfig+0x134>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d01f      	beq.n	800fe42 <TIM_Base_SetConfig+0xaa>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4a32      	ldr	r2, [pc, #200]	@ (800fed0 <TIM_Base_SetConfig+0x138>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d01b      	beq.n	800fe42 <TIM_Base_SetConfig+0xaa>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	4a31      	ldr	r2, [pc, #196]	@ (800fed4 <TIM_Base_SetConfig+0x13c>)
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d017      	beq.n	800fe42 <TIM_Base_SetConfig+0xaa>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4a30      	ldr	r2, [pc, #192]	@ (800fed8 <TIM_Base_SetConfig+0x140>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d013      	beq.n	800fe42 <TIM_Base_SetConfig+0xaa>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	4a2f      	ldr	r2, [pc, #188]	@ (800fedc <TIM_Base_SetConfig+0x144>)
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d00f      	beq.n	800fe42 <TIM_Base_SetConfig+0xaa>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	4a2e      	ldr	r2, [pc, #184]	@ (800fee0 <TIM_Base_SetConfig+0x148>)
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d00b      	beq.n	800fe42 <TIM_Base_SetConfig+0xaa>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4a2d      	ldr	r2, [pc, #180]	@ (800fee4 <TIM_Base_SetConfig+0x14c>)
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	d007      	beq.n	800fe42 <TIM_Base_SetConfig+0xaa>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4a2c      	ldr	r2, [pc, #176]	@ (800fee8 <TIM_Base_SetConfig+0x150>)
 800fe36:	4293      	cmp	r3, r2
 800fe38:	d003      	beq.n	800fe42 <TIM_Base_SetConfig+0xaa>
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4a2b      	ldr	r2, [pc, #172]	@ (800feec <TIM_Base_SetConfig+0x154>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d108      	bne.n	800fe54 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fe48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	68fa      	ldr	r2, [r7, #12]
 800fe50:	4313      	orrs	r3, r2
 800fe52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	695b      	ldr	r3, [r3, #20]
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	689a      	ldr	r2, [r3, #8]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	681a      	ldr	r2, [r3, #0]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	4a14      	ldr	r2, [pc, #80]	@ (800fec8 <TIM_Base_SetConfig+0x130>)
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d00f      	beq.n	800fe9a <TIM_Base_SetConfig+0x102>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	4a16      	ldr	r2, [pc, #88]	@ (800fed8 <TIM_Base_SetConfig+0x140>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d00b      	beq.n	800fe9a <TIM_Base_SetConfig+0x102>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	4a15      	ldr	r2, [pc, #84]	@ (800fedc <TIM_Base_SetConfig+0x144>)
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d007      	beq.n	800fe9a <TIM_Base_SetConfig+0x102>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4a14      	ldr	r2, [pc, #80]	@ (800fee0 <TIM_Base_SetConfig+0x148>)
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	d003      	beq.n	800fe9a <TIM_Base_SetConfig+0x102>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4a13      	ldr	r2, [pc, #76]	@ (800fee4 <TIM_Base_SetConfig+0x14c>)
 800fe96:	4293      	cmp	r3, r2
 800fe98:	d103      	bne.n	800fea2 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	691a      	ldr	r2, [r3, #16]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f043 0204 	orr.w	r2, r3, #4
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2201      	movs	r2, #1
 800feb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	68fa      	ldr	r2, [r7, #12]
 800feb8:	601a      	str	r2, [r3, #0]
}
 800feba:	bf00      	nop
 800febc:	3714      	adds	r7, #20
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr
 800fec6:	bf00      	nop
 800fec8:	40010000 	.word	0x40010000
 800fecc:	40000400 	.word	0x40000400
 800fed0:	40000800 	.word	0x40000800
 800fed4:	40000c00 	.word	0x40000c00
 800fed8:	40010400 	.word	0x40010400
 800fedc:	40014000 	.word	0x40014000
 800fee0:	40014400 	.word	0x40014400
 800fee4:	40014800 	.word	0x40014800
 800fee8:	4000e000 	.word	0x4000e000
 800feec:	4000e400 	.word	0x4000e400

0800fef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b087      	sub	sp, #28
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6a1b      	ldr	r3, [r3, #32]
 800fefe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6a1b      	ldr	r3, [r3, #32]
 800ff04:	f023 0201 	bic.w	r2, r3, #1
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	699b      	ldr	r3, [r3, #24]
 800ff16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ff18:	68fa      	ldr	r2, [r7, #12]
 800ff1a:	4b37      	ldr	r3, [pc, #220]	@ (800fff8 <TIM_OC1_SetConfig+0x108>)
 800ff1c:	4013      	ands	r3, r2
 800ff1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f023 0303 	bic.w	r3, r3, #3
 800ff26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	68fa      	ldr	r2, [r7, #12]
 800ff2e:	4313      	orrs	r3, r2
 800ff30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	f023 0302 	bic.w	r3, r3, #2
 800ff38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	689b      	ldr	r3, [r3, #8]
 800ff3e:	697a      	ldr	r2, [r7, #20]
 800ff40:	4313      	orrs	r3, r2
 800ff42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	4a2d      	ldr	r2, [pc, #180]	@ (800fffc <TIM_OC1_SetConfig+0x10c>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d00f      	beq.n	800ff6c <TIM_OC1_SetConfig+0x7c>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	4a2c      	ldr	r2, [pc, #176]	@ (8010000 <TIM_OC1_SetConfig+0x110>)
 800ff50:	4293      	cmp	r3, r2
 800ff52:	d00b      	beq.n	800ff6c <TIM_OC1_SetConfig+0x7c>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4a2b      	ldr	r2, [pc, #172]	@ (8010004 <TIM_OC1_SetConfig+0x114>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d007      	beq.n	800ff6c <TIM_OC1_SetConfig+0x7c>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a2a      	ldr	r2, [pc, #168]	@ (8010008 <TIM_OC1_SetConfig+0x118>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d003      	beq.n	800ff6c <TIM_OC1_SetConfig+0x7c>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	4a29      	ldr	r2, [pc, #164]	@ (801000c <TIM_OC1_SetConfig+0x11c>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d10c      	bne.n	800ff86 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	f023 0308 	bic.w	r3, r3, #8
 800ff72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	68db      	ldr	r3, [r3, #12]
 800ff78:	697a      	ldr	r2, [r7, #20]
 800ff7a:	4313      	orrs	r3, r2
 800ff7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	f023 0304 	bic.w	r3, r3, #4
 800ff84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	4a1c      	ldr	r2, [pc, #112]	@ (800fffc <TIM_OC1_SetConfig+0x10c>)
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d00f      	beq.n	800ffae <TIM_OC1_SetConfig+0xbe>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	4a1b      	ldr	r2, [pc, #108]	@ (8010000 <TIM_OC1_SetConfig+0x110>)
 800ff92:	4293      	cmp	r3, r2
 800ff94:	d00b      	beq.n	800ffae <TIM_OC1_SetConfig+0xbe>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	4a1a      	ldr	r2, [pc, #104]	@ (8010004 <TIM_OC1_SetConfig+0x114>)
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	d007      	beq.n	800ffae <TIM_OC1_SetConfig+0xbe>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	4a19      	ldr	r2, [pc, #100]	@ (8010008 <TIM_OC1_SetConfig+0x118>)
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d003      	beq.n	800ffae <TIM_OC1_SetConfig+0xbe>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	4a18      	ldr	r2, [pc, #96]	@ (801000c <TIM_OC1_SetConfig+0x11c>)
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d111      	bne.n	800ffd2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ffb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ffbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	695b      	ldr	r3, [r3, #20]
 800ffc2:	693a      	ldr	r2, [r7, #16]
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	699b      	ldr	r3, [r3, #24]
 800ffcc:	693a      	ldr	r2, [r7, #16]
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	693a      	ldr	r2, [r7, #16]
 800ffd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	68fa      	ldr	r2, [r7, #12]
 800ffdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	685a      	ldr	r2, [r3, #4]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	697a      	ldr	r2, [r7, #20]
 800ffea:	621a      	str	r2, [r3, #32]
}
 800ffec:	bf00      	nop
 800ffee:	371c      	adds	r7, #28
 800fff0:	46bd      	mov	sp, r7
 800fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff6:	4770      	bx	lr
 800fff8:	fffeff8f 	.word	0xfffeff8f
 800fffc:	40010000 	.word	0x40010000
 8010000:	40010400 	.word	0x40010400
 8010004:	40014000 	.word	0x40014000
 8010008:	40014400 	.word	0x40014400
 801000c:	40014800 	.word	0x40014800

08010010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010010:	b480      	push	{r7}
 8010012:	b087      	sub	sp, #28
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6a1b      	ldr	r3, [r3, #32]
 801001e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6a1b      	ldr	r3, [r3, #32]
 8010024:	f023 0210 	bic.w	r2, r3, #16
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	699b      	ldr	r3, [r3, #24]
 8010036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010038:	68fa      	ldr	r2, [r7, #12]
 801003a:	4b34      	ldr	r3, [pc, #208]	@ (801010c <TIM_OC2_SetConfig+0xfc>)
 801003c:	4013      	ands	r3, r2
 801003e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	021b      	lsls	r3, r3, #8
 801004e:	68fa      	ldr	r2, [r7, #12]
 8010050:	4313      	orrs	r3, r2
 8010052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	f023 0320 	bic.w	r3, r3, #32
 801005a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	689b      	ldr	r3, [r3, #8]
 8010060:	011b      	lsls	r3, r3, #4
 8010062:	697a      	ldr	r2, [r7, #20]
 8010064:	4313      	orrs	r3, r2
 8010066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	4a29      	ldr	r2, [pc, #164]	@ (8010110 <TIM_OC2_SetConfig+0x100>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d003      	beq.n	8010078 <TIM_OC2_SetConfig+0x68>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	4a28      	ldr	r2, [pc, #160]	@ (8010114 <TIM_OC2_SetConfig+0x104>)
 8010074:	4293      	cmp	r3, r2
 8010076:	d10d      	bne.n	8010094 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801007e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	68db      	ldr	r3, [r3, #12]
 8010084:	011b      	lsls	r3, r3, #4
 8010086:	697a      	ldr	r2, [r7, #20]
 8010088:	4313      	orrs	r3, r2
 801008a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010092:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	4a1e      	ldr	r2, [pc, #120]	@ (8010110 <TIM_OC2_SetConfig+0x100>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d00f      	beq.n	80100bc <TIM_OC2_SetConfig+0xac>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	4a1d      	ldr	r2, [pc, #116]	@ (8010114 <TIM_OC2_SetConfig+0x104>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d00b      	beq.n	80100bc <TIM_OC2_SetConfig+0xac>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	4a1c      	ldr	r2, [pc, #112]	@ (8010118 <TIM_OC2_SetConfig+0x108>)
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d007      	beq.n	80100bc <TIM_OC2_SetConfig+0xac>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	4a1b      	ldr	r2, [pc, #108]	@ (801011c <TIM_OC2_SetConfig+0x10c>)
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d003      	beq.n	80100bc <TIM_OC2_SetConfig+0xac>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	4a1a      	ldr	r2, [pc, #104]	@ (8010120 <TIM_OC2_SetConfig+0x110>)
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d113      	bne.n	80100e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80100c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80100ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	695b      	ldr	r3, [r3, #20]
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	693a      	ldr	r2, [r7, #16]
 80100d4:	4313      	orrs	r3, r2
 80100d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	699b      	ldr	r3, [r3, #24]
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	693a      	ldr	r2, [r7, #16]
 80100e0:	4313      	orrs	r3, r2
 80100e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	693a      	ldr	r2, [r7, #16]
 80100e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	68fa      	ldr	r2, [r7, #12]
 80100ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	685a      	ldr	r2, [r3, #4]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	697a      	ldr	r2, [r7, #20]
 80100fc:	621a      	str	r2, [r3, #32]
}
 80100fe:	bf00      	nop
 8010100:	371c      	adds	r7, #28
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr
 801010a:	bf00      	nop
 801010c:	feff8fff 	.word	0xfeff8fff
 8010110:	40010000 	.word	0x40010000
 8010114:	40010400 	.word	0x40010400
 8010118:	40014000 	.word	0x40014000
 801011c:	40014400 	.word	0x40014400
 8010120:	40014800 	.word	0x40014800

08010124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010124:	b480      	push	{r7}
 8010126:	b087      	sub	sp, #28
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6a1b      	ldr	r3, [r3, #32]
 8010132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6a1b      	ldr	r3, [r3, #32]
 8010138:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	69db      	ldr	r3, [r3, #28]
 801014a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801014c:	68fa      	ldr	r2, [r7, #12]
 801014e:	4b33      	ldr	r3, [pc, #204]	@ (801021c <TIM_OC3_SetConfig+0xf8>)
 8010150:	4013      	ands	r3, r2
 8010152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	f023 0303 	bic.w	r3, r3, #3
 801015a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	4313      	orrs	r3, r2
 8010164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801016c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	689b      	ldr	r3, [r3, #8]
 8010172:	021b      	lsls	r3, r3, #8
 8010174:	697a      	ldr	r2, [r7, #20]
 8010176:	4313      	orrs	r3, r2
 8010178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	4a28      	ldr	r2, [pc, #160]	@ (8010220 <TIM_OC3_SetConfig+0xfc>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d003      	beq.n	801018a <TIM_OC3_SetConfig+0x66>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4a27      	ldr	r2, [pc, #156]	@ (8010224 <TIM_OC3_SetConfig+0x100>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d10d      	bne.n	80101a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	68db      	ldr	r3, [r3, #12]
 8010196:	021b      	lsls	r3, r3, #8
 8010198:	697a      	ldr	r2, [r7, #20]
 801019a:	4313      	orrs	r3, r2
 801019c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80101a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	4a1d      	ldr	r2, [pc, #116]	@ (8010220 <TIM_OC3_SetConfig+0xfc>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d00f      	beq.n	80101ce <TIM_OC3_SetConfig+0xaa>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	4a1c      	ldr	r2, [pc, #112]	@ (8010224 <TIM_OC3_SetConfig+0x100>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d00b      	beq.n	80101ce <TIM_OC3_SetConfig+0xaa>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	4a1b      	ldr	r2, [pc, #108]	@ (8010228 <TIM_OC3_SetConfig+0x104>)
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d007      	beq.n	80101ce <TIM_OC3_SetConfig+0xaa>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	4a1a      	ldr	r2, [pc, #104]	@ (801022c <TIM_OC3_SetConfig+0x108>)
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d003      	beq.n	80101ce <TIM_OC3_SetConfig+0xaa>
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4a19      	ldr	r2, [pc, #100]	@ (8010230 <TIM_OC3_SetConfig+0x10c>)
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d113      	bne.n	80101f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80101ce:	693b      	ldr	r3, [r7, #16]
 80101d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80101d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80101d6:	693b      	ldr	r3, [r7, #16]
 80101d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80101dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	695b      	ldr	r3, [r3, #20]
 80101e2:	011b      	lsls	r3, r3, #4
 80101e4:	693a      	ldr	r2, [r7, #16]
 80101e6:	4313      	orrs	r3, r2
 80101e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	699b      	ldr	r3, [r3, #24]
 80101ee:	011b      	lsls	r3, r3, #4
 80101f0:	693a      	ldr	r2, [r7, #16]
 80101f2:	4313      	orrs	r3, r2
 80101f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	693a      	ldr	r2, [r7, #16]
 80101fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	68fa      	ldr	r2, [r7, #12]
 8010200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	685a      	ldr	r2, [r3, #4]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	697a      	ldr	r2, [r7, #20]
 801020e:	621a      	str	r2, [r3, #32]
}
 8010210:	bf00      	nop
 8010212:	371c      	adds	r7, #28
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr
 801021c:	fffeff8f 	.word	0xfffeff8f
 8010220:	40010000 	.word	0x40010000
 8010224:	40010400 	.word	0x40010400
 8010228:	40014000 	.word	0x40014000
 801022c:	40014400 	.word	0x40014400
 8010230:	40014800 	.word	0x40014800

08010234 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010234:	b480      	push	{r7}
 8010236:	b087      	sub	sp, #28
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6a1b      	ldr	r3, [r3, #32]
 8010242:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6a1b      	ldr	r3, [r3, #32]
 8010248:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	69db      	ldr	r3, [r3, #28]
 801025a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801025c:	68fa      	ldr	r2, [r7, #12]
 801025e:	4b24      	ldr	r3, [pc, #144]	@ (80102f0 <TIM_OC4_SetConfig+0xbc>)
 8010260:	4013      	ands	r3, r2
 8010262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801026a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	021b      	lsls	r3, r3, #8
 8010272:	68fa      	ldr	r2, [r7, #12]
 8010274:	4313      	orrs	r3, r2
 8010276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801027e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	689b      	ldr	r3, [r3, #8]
 8010284:	031b      	lsls	r3, r3, #12
 8010286:	693a      	ldr	r2, [r7, #16]
 8010288:	4313      	orrs	r3, r2
 801028a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	4a19      	ldr	r2, [pc, #100]	@ (80102f4 <TIM_OC4_SetConfig+0xc0>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d00f      	beq.n	80102b4 <TIM_OC4_SetConfig+0x80>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	4a18      	ldr	r2, [pc, #96]	@ (80102f8 <TIM_OC4_SetConfig+0xc4>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d00b      	beq.n	80102b4 <TIM_OC4_SetConfig+0x80>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	4a17      	ldr	r2, [pc, #92]	@ (80102fc <TIM_OC4_SetConfig+0xc8>)
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d007      	beq.n	80102b4 <TIM_OC4_SetConfig+0x80>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	4a16      	ldr	r2, [pc, #88]	@ (8010300 <TIM_OC4_SetConfig+0xcc>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d003      	beq.n	80102b4 <TIM_OC4_SetConfig+0x80>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	4a15      	ldr	r2, [pc, #84]	@ (8010304 <TIM_OC4_SetConfig+0xd0>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d109      	bne.n	80102c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80102ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	695b      	ldr	r3, [r3, #20]
 80102c0:	019b      	lsls	r3, r3, #6
 80102c2:	697a      	ldr	r2, [r7, #20]
 80102c4:	4313      	orrs	r3, r2
 80102c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	697a      	ldr	r2, [r7, #20]
 80102cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	68fa      	ldr	r2, [r7, #12]
 80102d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	685a      	ldr	r2, [r3, #4]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	693a      	ldr	r2, [r7, #16]
 80102e0:	621a      	str	r2, [r3, #32]
}
 80102e2:	bf00      	nop
 80102e4:	371c      	adds	r7, #28
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr
 80102ee:	bf00      	nop
 80102f0:	feff8fff 	.word	0xfeff8fff
 80102f4:	40010000 	.word	0x40010000
 80102f8:	40010400 	.word	0x40010400
 80102fc:	40014000 	.word	0x40014000
 8010300:	40014400 	.word	0x40014400
 8010304:	40014800 	.word	0x40014800

08010308 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010308:	b480      	push	{r7}
 801030a:	b087      	sub	sp, #28
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6a1b      	ldr	r3, [r3, #32]
 8010316:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6a1b      	ldr	r3, [r3, #32]
 801031c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801032e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010330:	68fa      	ldr	r2, [r7, #12]
 8010332:	4b21      	ldr	r3, [pc, #132]	@ (80103b8 <TIM_OC5_SetConfig+0xb0>)
 8010334:	4013      	ands	r3, r2
 8010336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	68fa      	ldr	r2, [r7, #12]
 801033e:	4313      	orrs	r3, r2
 8010340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010348:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	689b      	ldr	r3, [r3, #8]
 801034e:	041b      	lsls	r3, r3, #16
 8010350:	693a      	ldr	r2, [r7, #16]
 8010352:	4313      	orrs	r3, r2
 8010354:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	4a18      	ldr	r2, [pc, #96]	@ (80103bc <TIM_OC5_SetConfig+0xb4>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d00f      	beq.n	801037e <TIM_OC5_SetConfig+0x76>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	4a17      	ldr	r2, [pc, #92]	@ (80103c0 <TIM_OC5_SetConfig+0xb8>)
 8010362:	4293      	cmp	r3, r2
 8010364:	d00b      	beq.n	801037e <TIM_OC5_SetConfig+0x76>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	4a16      	ldr	r2, [pc, #88]	@ (80103c4 <TIM_OC5_SetConfig+0xbc>)
 801036a:	4293      	cmp	r3, r2
 801036c:	d007      	beq.n	801037e <TIM_OC5_SetConfig+0x76>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4a15      	ldr	r2, [pc, #84]	@ (80103c8 <TIM_OC5_SetConfig+0xc0>)
 8010372:	4293      	cmp	r3, r2
 8010374:	d003      	beq.n	801037e <TIM_OC5_SetConfig+0x76>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	4a14      	ldr	r2, [pc, #80]	@ (80103cc <TIM_OC5_SetConfig+0xc4>)
 801037a:	4293      	cmp	r3, r2
 801037c:	d109      	bne.n	8010392 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010384:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	695b      	ldr	r3, [r3, #20]
 801038a:	021b      	lsls	r3, r3, #8
 801038c:	697a      	ldr	r2, [r7, #20]
 801038e:	4313      	orrs	r3, r2
 8010390:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	697a      	ldr	r2, [r7, #20]
 8010396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	68fa      	ldr	r2, [r7, #12]
 801039c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	685a      	ldr	r2, [r3, #4]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	693a      	ldr	r2, [r7, #16]
 80103aa:	621a      	str	r2, [r3, #32]
}
 80103ac:	bf00      	nop
 80103ae:	371c      	adds	r7, #28
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr
 80103b8:	fffeff8f 	.word	0xfffeff8f
 80103bc:	40010000 	.word	0x40010000
 80103c0:	40010400 	.word	0x40010400
 80103c4:	40014000 	.word	0x40014000
 80103c8:	40014400 	.word	0x40014400
 80103cc:	40014800 	.word	0x40014800

080103d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80103d0:	b480      	push	{r7}
 80103d2:	b087      	sub	sp, #28
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6a1b      	ldr	r3, [r3, #32]
 80103de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6a1b      	ldr	r3, [r3, #32]
 80103e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80103f8:	68fa      	ldr	r2, [r7, #12]
 80103fa:	4b22      	ldr	r3, [pc, #136]	@ (8010484 <TIM_OC6_SetConfig+0xb4>)
 80103fc:	4013      	ands	r3, r2
 80103fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	021b      	lsls	r3, r3, #8
 8010406:	68fa      	ldr	r2, [r7, #12]
 8010408:	4313      	orrs	r3, r2
 801040a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	689b      	ldr	r3, [r3, #8]
 8010418:	051b      	lsls	r3, r3, #20
 801041a:	693a      	ldr	r2, [r7, #16]
 801041c:	4313      	orrs	r3, r2
 801041e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	4a19      	ldr	r2, [pc, #100]	@ (8010488 <TIM_OC6_SetConfig+0xb8>)
 8010424:	4293      	cmp	r3, r2
 8010426:	d00f      	beq.n	8010448 <TIM_OC6_SetConfig+0x78>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	4a18      	ldr	r2, [pc, #96]	@ (801048c <TIM_OC6_SetConfig+0xbc>)
 801042c:	4293      	cmp	r3, r2
 801042e:	d00b      	beq.n	8010448 <TIM_OC6_SetConfig+0x78>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	4a17      	ldr	r2, [pc, #92]	@ (8010490 <TIM_OC6_SetConfig+0xc0>)
 8010434:	4293      	cmp	r3, r2
 8010436:	d007      	beq.n	8010448 <TIM_OC6_SetConfig+0x78>
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	4a16      	ldr	r2, [pc, #88]	@ (8010494 <TIM_OC6_SetConfig+0xc4>)
 801043c:	4293      	cmp	r3, r2
 801043e:	d003      	beq.n	8010448 <TIM_OC6_SetConfig+0x78>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	4a15      	ldr	r2, [pc, #84]	@ (8010498 <TIM_OC6_SetConfig+0xc8>)
 8010444:	4293      	cmp	r3, r2
 8010446:	d109      	bne.n	801045c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801044e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	695b      	ldr	r3, [r3, #20]
 8010454:	029b      	lsls	r3, r3, #10
 8010456:	697a      	ldr	r2, [r7, #20]
 8010458:	4313      	orrs	r3, r2
 801045a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	697a      	ldr	r2, [r7, #20]
 8010460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	68fa      	ldr	r2, [r7, #12]
 8010466:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	685a      	ldr	r2, [r3, #4]
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	693a      	ldr	r2, [r7, #16]
 8010474:	621a      	str	r2, [r3, #32]
}
 8010476:	bf00      	nop
 8010478:	371c      	adds	r7, #28
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr
 8010482:	bf00      	nop
 8010484:	feff8fff 	.word	0xfeff8fff
 8010488:	40010000 	.word	0x40010000
 801048c:	40010400 	.word	0x40010400
 8010490:	40014000 	.word	0x40014000
 8010494:	40014400 	.word	0x40014400
 8010498:	40014800 	.word	0x40014800

0801049c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b086      	sub	sp, #24
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80104a6:	2300      	movs	r3, #0
 80104a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	689b      	ldr	r3, [r3, #8]
 80104b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80104b2:	693a      	ldr	r2, [r7, #16]
 80104b4:	4b65      	ldr	r3, [pc, #404]	@ (801064c <TIM_SlaveTimer_SetConfig+0x1b0>)
 80104b6:	4013      	ands	r3, r2
 80104b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	693a      	ldr	r2, [r7, #16]
 80104c0:	4313      	orrs	r3, r2
 80104c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80104c4:	693a      	ldr	r2, [r7, #16]
 80104c6:	4b62      	ldr	r3, [pc, #392]	@ (8010650 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80104c8:	4013      	ands	r3, r2
 80104ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	693a      	ldr	r2, [r7, #16]
 80104d2:	4313      	orrs	r3, r2
 80104d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	693a      	ldr	r2, [r7, #16]
 80104dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	4a5c      	ldr	r2, [pc, #368]	@ (8010654 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	f000 80ab 	beq.w	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 80104ea:	4a5a      	ldr	r2, [pc, #360]	@ (8010654 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	f200 80a4 	bhi.w	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 80104f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80104f6:	f000 80a3 	beq.w	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 80104fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80104fe:	f200 809c 	bhi.w	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 8010502:	4a55      	ldr	r2, [pc, #340]	@ (8010658 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8010504:	4293      	cmp	r3, r2
 8010506:	f000 809b 	beq.w	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 801050a:	4a53      	ldr	r2, [pc, #332]	@ (8010658 <TIM_SlaveTimer_SetConfig+0x1bc>)
 801050c:	4293      	cmp	r3, r2
 801050e:	f200 8094 	bhi.w	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 8010512:	4a52      	ldr	r2, [pc, #328]	@ (801065c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8010514:	4293      	cmp	r3, r2
 8010516:	f000 8093 	beq.w	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 801051a:	4a50      	ldr	r2, [pc, #320]	@ (801065c <TIM_SlaveTimer_SetConfig+0x1c0>)
 801051c:	4293      	cmp	r3, r2
 801051e:	f200 808c 	bhi.w	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 8010522:	4a4f      	ldr	r2, [pc, #316]	@ (8010660 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8010524:	4293      	cmp	r3, r2
 8010526:	f000 808b 	beq.w	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 801052a:	4a4d      	ldr	r2, [pc, #308]	@ (8010660 <TIM_SlaveTimer_SetConfig+0x1c4>)
 801052c:	4293      	cmp	r3, r2
 801052e:	f200 8084 	bhi.w	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 8010532:	4a4c      	ldr	r2, [pc, #304]	@ (8010664 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8010534:	4293      	cmp	r3, r2
 8010536:	f000 8083 	beq.w	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 801053a:	4a4a      	ldr	r2, [pc, #296]	@ (8010664 <TIM_SlaveTimer_SetConfig+0x1c8>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d87c      	bhi.n	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 8010540:	4a49      	ldr	r2, [pc, #292]	@ (8010668 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d07c      	beq.n	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010546:	4a48      	ldr	r2, [pc, #288]	@ (8010668 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d876      	bhi.n	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 801054c:	4a47      	ldr	r2, [pc, #284]	@ (801066c <TIM_SlaveTimer_SetConfig+0x1d0>)
 801054e:	4293      	cmp	r3, r2
 8010550:	d076      	beq.n	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010552:	4a46      	ldr	r2, [pc, #280]	@ (801066c <TIM_SlaveTimer_SetConfig+0x1d0>)
 8010554:	4293      	cmp	r3, r2
 8010556:	d870      	bhi.n	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 8010558:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801055c:	d070      	beq.n	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 801055e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010562:	d86a      	bhi.n	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 8010564:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010568:	d06a      	beq.n	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 801056a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801056e:	d864      	bhi.n	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 8010570:	2b70      	cmp	r3, #112	@ 0x70
 8010572:	d01a      	beq.n	80105aa <TIM_SlaveTimer_SetConfig+0x10e>
 8010574:	2b70      	cmp	r3, #112	@ 0x70
 8010576:	d860      	bhi.n	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 8010578:	2b60      	cmp	r3, #96	@ 0x60
 801057a:	d054      	beq.n	8010626 <TIM_SlaveTimer_SetConfig+0x18a>
 801057c:	2b60      	cmp	r3, #96	@ 0x60
 801057e:	d85c      	bhi.n	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 8010580:	2b50      	cmp	r3, #80	@ 0x50
 8010582:	d046      	beq.n	8010612 <TIM_SlaveTimer_SetConfig+0x176>
 8010584:	2b50      	cmp	r3, #80	@ 0x50
 8010586:	d858      	bhi.n	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 8010588:	2b40      	cmp	r3, #64	@ 0x40
 801058a:	d019      	beq.n	80105c0 <TIM_SlaveTimer_SetConfig+0x124>
 801058c:	2b40      	cmp	r3, #64	@ 0x40
 801058e:	d854      	bhi.n	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 8010590:	2b30      	cmp	r3, #48	@ 0x30
 8010592:	d055      	beq.n	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010594:	2b30      	cmp	r3, #48	@ 0x30
 8010596:	d850      	bhi.n	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 8010598:	2b20      	cmp	r3, #32
 801059a:	d051      	beq.n	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 801059c:	2b20      	cmp	r3, #32
 801059e:	d84c      	bhi.n	801063a <TIM_SlaveTimer_SetConfig+0x19e>
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d04d      	beq.n	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 80105a4:	2b10      	cmp	r3, #16
 80105a6:	d04b      	beq.n	8010640 <TIM_SlaveTimer_SetConfig+0x1a4>
 80105a8:	e047      	b.n	801063a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80105ba:	f000 f8d7 	bl	801076c <TIM_ETR_SetConfig>
      break;
 80105be:	e040      	b.n	8010642 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b05      	cmp	r3, #5
 80105c6:	d101      	bne.n	80105cc <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 80105c8:	2301      	movs	r3, #1
 80105ca:	e03b      	b.n	8010644 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	6a1b      	ldr	r3, [r3, #32]
 80105d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	6a1a      	ldr	r2, [r3, #32]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	f022 0201 	bic.w	r2, r2, #1
 80105e2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	699b      	ldr	r3, [r3, #24]
 80105ea:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80105f2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	691b      	ldr	r3, [r3, #16]
 80105f8:	011b      	lsls	r3, r3, #4
 80105fa:	68ba      	ldr	r2, [r7, #8]
 80105fc:	4313      	orrs	r3, r2
 80105fe:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	68ba      	ldr	r2, [r7, #8]
 8010606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	68fa      	ldr	r2, [r7, #12]
 801060e:	621a      	str	r2, [r3, #32]
      break;
 8010610:	e017      	b.n	8010642 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801061e:	461a      	mov	r2, r3
 8010620:	f000 f826 	bl	8010670 <TIM_TI1_ConfigInputStage>
      break;
 8010624:	e00d      	b.n	8010642 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010632:	461a      	mov	r2, r3
 8010634:	f000 f84b 	bl	80106ce <TIM_TI2_ConfigInputStage>
      break;
 8010638:	e003      	b.n	8010642 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 801063a:	2301      	movs	r3, #1
 801063c:	75fb      	strb	r3, [r7, #23]
      break;
 801063e:	e000      	b.n	8010642 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8010640:	bf00      	nop
  }

  return status;
 8010642:	7dfb      	ldrb	r3, [r7, #23]
}
 8010644:	4618      	mov	r0, r3
 8010646:	3718      	adds	r7, #24
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}
 801064c:	ffcfff8f 	.word	0xffcfff8f
 8010650:	fffefff8 	.word	0xfffefff8
 8010654:	00200010 	.word	0x00200010
 8010658:	00100070 	.word	0x00100070
 801065c:	00100060 	.word	0x00100060
 8010660:	00100050 	.word	0x00100050
 8010664:	00100040 	.word	0x00100040
 8010668:	00100030 	.word	0x00100030
 801066c:	00100020 	.word	0x00100020

08010670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010670:	b480      	push	{r7}
 8010672:	b087      	sub	sp, #28
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	6a1b      	ldr	r3, [r3, #32]
 8010680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	6a1b      	ldr	r3, [r3, #32]
 8010686:	f023 0201 	bic.w	r2, r3, #1
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	699b      	ldr	r3, [r3, #24]
 8010692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801069a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	011b      	lsls	r3, r3, #4
 80106a0:	693a      	ldr	r2, [r7, #16]
 80106a2:	4313      	orrs	r3, r2
 80106a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	f023 030a 	bic.w	r3, r3, #10
 80106ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80106ae:	697a      	ldr	r2, [r7, #20]
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	4313      	orrs	r3, r2
 80106b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	693a      	ldr	r2, [r7, #16]
 80106ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	697a      	ldr	r2, [r7, #20]
 80106c0:	621a      	str	r2, [r3, #32]
}
 80106c2:	bf00      	nop
 80106c4:	371c      	adds	r7, #28
 80106c6:	46bd      	mov	sp, r7
 80106c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106cc:	4770      	bx	lr

080106ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80106ce:	b480      	push	{r7}
 80106d0:	b087      	sub	sp, #28
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	60f8      	str	r0, [r7, #12]
 80106d6:	60b9      	str	r1, [r7, #8]
 80106d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	6a1b      	ldr	r3, [r3, #32]
 80106de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	6a1b      	ldr	r3, [r3, #32]
 80106e4:	f023 0210 	bic.w	r2, r3, #16
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	699b      	ldr	r3, [r3, #24]
 80106f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80106f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	031b      	lsls	r3, r3, #12
 80106fe:	693a      	ldr	r2, [r7, #16]
 8010700:	4313      	orrs	r3, r2
 8010702:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801070a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	011b      	lsls	r3, r3, #4
 8010710:	697a      	ldr	r2, [r7, #20]
 8010712:	4313      	orrs	r3, r2
 8010714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	693a      	ldr	r2, [r7, #16]
 801071a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	697a      	ldr	r2, [r7, #20]
 8010720:	621a      	str	r2, [r3, #32]
}
 8010722:	bf00      	nop
 8010724:	371c      	adds	r7, #28
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr
	...

08010730 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010730:	b480      	push	{r7}
 8010732:	b085      	sub	sp, #20
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	689b      	ldr	r3, [r3, #8]
 801073e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010740:	68fa      	ldr	r2, [r7, #12]
 8010742:	4b09      	ldr	r3, [pc, #36]	@ (8010768 <TIM_ITRx_SetConfig+0x38>)
 8010744:	4013      	ands	r3, r2
 8010746:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010748:	683a      	ldr	r2, [r7, #0]
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	4313      	orrs	r3, r2
 801074e:	f043 0307 	orr.w	r3, r3, #7
 8010752:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	68fa      	ldr	r2, [r7, #12]
 8010758:	609a      	str	r2, [r3, #8]
}
 801075a:	bf00      	nop
 801075c:	3714      	adds	r7, #20
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr
 8010766:	bf00      	nop
 8010768:	ffcfff8f 	.word	0xffcfff8f

0801076c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801076c:	b480      	push	{r7}
 801076e:	b087      	sub	sp, #28
 8010770:	af00      	add	r7, sp, #0
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	607a      	str	r2, [r7, #4]
 8010778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	689b      	ldr	r3, [r3, #8]
 801077e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	021a      	lsls	r2, r3, #8
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	431a      	orrs	r2, r3
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	4313      	orrs	r3, r2
 8010794:	697a      	ldr	r2, [r7, #20]
 8010796:	4313      	orrs	r3, r2
 8010798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	697a      	ldr	r2, [r7, #20]
 801079e:	609a      	str	r2, [r3, #8]
}
 80107a0:	bf00      	nop
 80107a2:	371c      	adds	r7, #28
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr

080107ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b087      	sub	sp, #28
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	f003 031f 	and.w	r3, r3, #31
 80107be:	2201      	movs	r2, #1
 80107c0:	fa02 f303 	lsl.w	r3, r2, r3
 80107c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	6a1a      	ldr	r2, [r3, #32]
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	43db      	mvns	r3, r3
 80107ce:	401a      	ands	r2, r3
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6a1a      	ldr	r2, [r3, #32]
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	f003 031f 	and.w	r3, r3, #31
 80107de:	6879      	ldr	r1, [r7, #4]
 80107e0:	fa01 f303 	lsl.w	r3, r1, r3
 80107e4:	431a      	orrs	r2, r3
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	621a      	str	r2, [r3, #32]
}
 80107ea:	bf00      	nop
 80107ec:	371c      	adds	r7, #28
 80107ee:	46bd      	mov	sp, r7
 80107f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f4:	4770      	bx	lr
	...

080107f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b085      	sub	sp, #20
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010808:	2b01      	cmp	r3, #1
 801080a:	d101      	bne.n	8010810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801080c:	2302      	movs	r3, #2
 801080e:	e077      	b.n	8010900 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2201      	movs	r2, #1
 8010814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2202      	movs	r2, #2
 801081c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	689b      	ldr	r3, [r3, #8]
 801082e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	4a35      	ldr	r2, [pc, #212]	@ (801090c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010836:	4293      	cmp	r3, r2
 8010838:	d004      	beq.n	8010844 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	4a34      	ldr	r2, [pc, #208]	@ (8010910 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010840:	4293      	cmp	r3, r2
 8010842:	d108      	bne.n	8010856 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801084a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	685b      	ldr	r3, [r3, #4]
 8010850:	68fa      	ldr	r2, [r7, #12]
 8010852:	4313      	orrs	r3, r2
 8010854:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801085c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	68fa      	ldr	r2, [r7, #12]
 8010864:	4313      	orrs	r3, r2
 8010866:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	68fa      	ldr	r2, [r7, #12]
 801086e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	4a25      	ldr	r2, [pc, #148]	@ (801090c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d02c      	beq.n	80108d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010882:	d027      	beq.n	80108d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	4a22      	ldr	r2, [pc, #136]	@ (8010914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801088a:	4293      	cmp	r3, r2
 801088c:	d022      	beq.n	80108d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	4a21      	ldr	r2, [pc, #132]	@ (8010918 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d01d      	beq.n	80108d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	4a1f      	ldr	r2, [pc, #124]	@ (801091c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	d018      	beq.n	80108d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	4a1a      	ldr	r2, [pc, #104]	@ (8010910 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80108a8:	4293      	cmp	r3, r2
 80108aa:	d013      	beq.n	80108d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	4a1b      	ldr	r2, [pc, #108]	@ (8010920 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d00e      	beq.n	80108d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	4a1a      	ldr	r2, [pc, #104]	@ (8010924 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80108bc:	4293      	cmp	r3, r2
 80108be:	d009      	beq.n	80108d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4a18      	ldr	r2, [pc, #96]	@ (8010928 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	d004      	beq.n	80108d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	4a17      	ldr	r2, [pc, #92]	@ (801092c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80108d0:	4293      	cmp	r3, r2
 80108d2:	d10c      	bne.n	80108ee <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80108da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	689b      	ldr	r3, [r3, #8]
 80108e0:	68ba      	ldr	r2, [r7, #8]
 80108e2:	4313      	orrs	r3, r2
 80108e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	68ba      	ldr	r2, [r7, #8]
 80108ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2201      	movs	r2, #1
 80108f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80108fe:	2300      	movs	r3, #0
}
 8010900:	4618      	mov	r0, r3
 8010902:	3714      	adds	r7, #20
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr
 801090c:	40010000 	.word	0x40010000
 8010910:	40010400 	.word	0x40010400
 8010914:	40000400 	.word	0x40000400
 8010918:	40000800 	.word	0x40000800
 801091c:	40000c00 	.word	0x40000c00
 8010920:	40001800 	.word	0x40001800
 8010924:	40014000 	.word	0x40014000
 8010928:	4000e000 	.word	0x4000e000
 801092c:	4000e400 	.word	0x4000e400

08010930 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010930:	b480      	push	{r7}
 8010932:	b085      	sub	sp, #20
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801093a:	2300      	movs	r3, #0
 801093c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010944:	2b01      	cmp	r3, #1
 8010946:	d101      	bne.n	801094c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010948:	2302      	movs	r3, #2
 801094a:	e073      	b.n	8010a34 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2201      	movs	r2, #1
 8010950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	68db      	ldr	r3, [r3, #12]
 801095e:	4313      	orrs	r3, r2
 8010960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	689b      	ldr	r3, [r3, #8]
 801096c:	4313      	orrs	r3, r2
 801096e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	4313      	orrs	r3, r2
 801097c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	4313      	orrs	r3, r2
 801098a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	691b      	ldr	r3, [r3, #16]
 8010996:	4313      	orrs	r3, r2
 8010998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	695b      	ldr	r3, [r3, #20]
 80109a4:	4313      	orrs	r3, r2
 80109a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109b2:	4313      	orrs	r3, r2
 80109b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	699b      	ldr	r3, [r3, #24]
 80109c0:	041b      	lsls	r3, r3, #16
 80109c2:	4313      	orrs	r3, r2
 80109c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	69db      	ldr	r3, [r3, #28]
 80109d0:	4313      	orrs	r3, r2
 80109d2:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	4a19      	ldr	r2, [pc, #100]	@ (8010a40 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80109da:	4293      	cmp	r3, r2
 80109dc:	d004      	beq.n	80109e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	4a18      	ldr	r2, [pc, #96]	@ (8010a44 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d11c      	bne.n	8010a22 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109f2:	051b      	lsls	r3, r3, #20
 80109f4:	4313      	orrs	r3, r2
 80109f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	6a1b      	ldr	r3, [r3, #32]
 8010a02:	4313      	orrs	r3, r2
 8010a04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a10:	4313      	orrs	r3, r2
 8010a12:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	68fa      	ldr	r2, [r7, #12]
 8010a28:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010a32:	2300      	movs	r3, #0
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3714      	adds	r7, #20
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr
 8010a40:	40010000 	.word	0x40010000
 8010a44:	40010400 	.word	0x40010400

08010a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b083      	sub	sp, #12
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010a50:	bf00      	nop
 8010a52:	370c      	adds	r7, #12
 8010a54:	46bd      	mov	sp, r7
 8010a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5a:	4770      	bx	lr

08010a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010a64:	bf00      	nop
 8010a66:	370c      	adds	r7, #12
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr

08010a70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010a78:	bf00      	nop
 8010a7a:	370c      	adds	r7, #12
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d101      	bne.n	8010a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010a92:	2301      	movs	r3, #1
 8010a94:	e042      	b.n	8010b1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d106      	bne.n	8010aae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f7f2 fa1d 	bl	8002ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2224      	movs	r2, #36	@ 0x24
 8010ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f022 0201 	bic.w	r2, r2, #1
 8010ac4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d002      	beq.n	8010ad4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 ff22 	bl	8011918 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f000 f8b3 	bl	8010c40 <UART_SetConfig>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b01      	cmp	r3, #1
 8010ade:	d101      	bne.n	8010ae4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	e01b      	b.n	8010b1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	685a      	ldr	r2, [r3, #4]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010af2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	689a      	ldr	r2, [r3, #8]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010b02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	f042 0201 	orr.w	r2, r2, #1
 8010b12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f000 ffa1 	bl	8011a5c <UART_CheckIdleState>
 8010b1a:	4603      	mov	r3, r0
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b08a      	sub	sp, #40	@ 0x28
 8010b28:	af02      	add	r7, sp, #8
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	603b      	str	r3, [r7, #0]
 8010b30:	4613      	mov	r3, r2
 8010b32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b3a:	2b20      	cmp	r3, #32
 8010b3c:	d17b      	bne.n	8010c36 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d002      	beq.n	8010b4a <HAL_UART_Transmit+0x26>
 8010b44:	88fb      	ldrh	r3, [r7, #6]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d101      	bne.n	8010b4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	e074      	b.n	8010c38 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2200      	movs	r2, #0
 8010b52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2221      	movs	r2, #33	@ 0x21
 8010b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010b5e:	f7f3 fdfb 	bl	8004758 <HAL_GetTick>
 8010b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	88fa      	ldrh	r2, [r7, #6]
 8010b68:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	88fa      	ldrh	r2, [r7, #6]
 8010b70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	689b      	ldr	r3, [r3, #8]
 8010b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b7c:	d108      	bne.n	8010b90 <HAL_UART_Transmit+0x6c>
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	691b      	ldr	r3, [r3, #16]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d104      	bne.n	8010b90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010b86:	2300      	movs	r3, #0
 8010b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	61bb      	str	r3, [r7, #24]
 8010b8e:	e003      	b.n	8010b98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010b94:	2300      	movs	r3, #0
 8010b96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010b98:	e030      	b.n	8010bfc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	9300      	str	r3, [sp, #0]
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	2180      	movs	r1, #128	@ 0x80
 8010ba4:	68f8      	ldr	r0, [r7, #12]
 8010ba6:	f001 f803 	bl	8011bb0 <UART_WaitOnFlagUntilTimeout>
 8010baa:	4603      	mov	r3, r0
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d005      	beq.n	8010bbc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2220      	movs	r2, #32
 8010bb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8010bb8:	2303      	movs	r3, #3
 8010bba:	e03d      	b.n	8010c38 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010bbc:	69fb      	ldr	r3, [r7, #28]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d10b      	bne.n	8010bda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	881b      	ldrh	r3, [r3, #0]
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010bd0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8010bd2:	69bb      	ldr	r3, [r7, #24]
 8010bd4:	3302      	adds	r3, #2
 8010bd6:	61bb      	str	r3, [r7, #24]
 8010bd8:	e007      	b.n	8010bea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010bda:	69fb      	ldr	r3, [r7, #28]
 8010bdc:	781a      	ldrb	r2, [r3, #0]
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	3301      	adds	r3, #1
 8010be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	3b01      	subs	r3, #1
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d1c8      	bne.n	8010b9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	9300      	str	r3, [sp, #0]
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	2140      	movs	r1, #64	@ 0x40
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	f000 ffcc 	bl	8011bb0 <UART_WaitOnFlagUntilTimeout>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d005      	beq.n	8010c2a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	2220      	movs	r2, #32
 8010c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8010c26:	2303      	movs	r3, #3
 8010c28:	e006      	b.n	8010c38 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2220      	movs	r2, #32
 8010c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8010c32:	2300      	movs	r3, #0
 8010c34:	e000      	b.n	8010c38 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010c36:	2302      	movs	r3, #2
  }
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3720      	adds	r7, #32
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c44:	b092      	sub	sp, #72	@ 0x48
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	689a      	ldr	r2, [r3, #8]
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	691b      	ldr	r3, [r3, #16]
 8010c58:	431a      	orrs	r2, r3
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	695b      	ldr	r3, [r3, #20]
 8010c5e:	431a      	orrs	r2, r3
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	69db      	ldr	r3, [r3, #28]
 8010c64:	4313      	orrs	r3, r2
 8010c66:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	681a      	ldr	r2, [r3, #0]
 8010c6e:	4bbe      	ldr	r3, [pc, #760]	@ (8010f68 <UART_SetConfig+0x328>)
 8010c70:	4013      	ands	r3, r2
 8010c72:	697a      	ldr	r2, [r7, #20]
 8010c74:	6812      	ldr	r2, [r2, #0]
 8010c76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010c78:	430b      	orrs	r3, r1
 8010c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	68da      	ldr	r2, [r3, #12]
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	430a      	orrs	r2, r1
 8010c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	699b      	ldr	r3, [r3, #24]
 8010c96:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4ab3      	ldr	r2, [pc, #716]	@ (8010f6c <UART_SetConfig+0x32c>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d004      	beq.n	8010cac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	6a1b      	ldr	r3, [r3, #32]
 8010ca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	689a      	ldr	r2, [r3, #8]
 8010cb2:	4baf      	ldr	r3, [pc, #700]	@ (8010f70 <UART_SetConfig+0x330>)
 8010cb4:	4013      	ands	r3, r2
 8010cb6:	697a      	ldr	r2, [r7, #20]
 8010cb8:	6812      	ldr	r2, [r2, #0]
 8010cba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010cbc:	430b      	orrs	r3, r1
 8010cbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cc6:	f023 010f 	bic.w	r1, r3, #15
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	430a      	orrs	r2, r1
 8010cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	4aa6      	ldr	r2, [pc, #664]	@ (8010f74 <UART_SetConfig+0x334>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d177      	bne.n	8010dd0 <UART_SetConfig+0x190>
 8010ce0:	4ba5      	ldr	r3, [pc, #660]	@ (8010f78 <UART_SetConfig+0x338>)
 8010ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ce4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010ce8:	2b28      	cmp	r3, #40	@ 0x28
 8010cea:	d86d      	bhi.n	8010dc8 <UART_SetConfig+0x188>
 8010cec:	a201      	add	r2, pc, #4	@ (adr r2, 8010cf4 <UART_SetConfig+0xb4>)
 8010cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cf2:	bf00      	nop
 8010cf4:	08010d99 	.word	0x08010d99
 8010cf8:	08010dc9 	.word	0x08010dc9
 8010cfc:	08010dc9 	.word	0x08010dc9
 8010d00:	08010dc9 	.word	0x08010dc9
 8010d04:	08010dc9 	.word	0x08010dc9
 8010d08:	08010dc9 	.word	0x08010dc9
 8010d0c:	08010dc9 	.word	0x08010dc9
 8010d10:	08010dc9 	.word	0x08010dc9
 8010d14:	08010da1 	.word	0x08010da1
 8010d18:	08010dc9 	.word	0x08010dc9
 8010d1c:	08010dc9 	.word	0x08010dc9
 8010d20:	08010dc9 	.word	0x08010dc9
 8010d24:	08010dc9 	.word	0x08010dc9
 8010d28:	08010dc9 	.word	0x08010dc9
 8010d2c:	08010dc9 	.word	0x08010dc9
 8010d30:	08010dc9 	.word	0x08010dc9
 8010d34:	08010da9 	.word	0x08010da9
 8010d38:	08010dc9 	.word	0x08010dc9
 8010d3c:	08010dc9 	.word	0x08010dc9
 8010d40:	08010dc9 	.word	0x08010dc9
 8010d44:	08010dc9 	.word	0x08010dc9
 8010d48:	08010dc9 	.word	0x08010dc9
 8010d4c:	08010dc9 	.word	0x08010dc9
 8010d50:	08010dc9 	.word	0x08010dc9
 8010d54:	08010db1 	.word	0x08010db1
 8010d58:	08010dc9 	.word	0x08010dc9
 8010d5c:	08010dc9 	.word	0x08010dc9
 8010d60:	08010dc9 	.word	0x08010dc9
 8010d64:	08010dc9 	.word	0x08010dc9
 8010d68:	08010dc9 	.word	0x08010dc9
 8010d6c:	08010dc9 	.word	0x08010dc9
 8010d70:	08010dc9 	.word	0x08010dc9
 8010d74:	08010db9 	.word	0x08010db9
 8010d78:	08010dc9 	.word	0x08010dc9
 8010d7c:	08010dc9 	.word	0x08010dc9
 8010d80:	08010dc9 	.word	0x08010dc9
 8010d84:	08010dc9 	.word	0x08010dc9
 8010d88:	08010dc9 	.word	0x08010dc9
 8010d8c:	08010dc9 	.word	0x08010dc9
 8010d90:	08010dc9 	.word	0x08010dc9
 8010d94:	08010dc1 	.word	0x08010dc1
 8010d98:	2301      	movs	r3, #1
 8010d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d9e:	e326      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010da0:	2304      	movs	r3, #4
 8010da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010da6:	e322      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010da8:	2308      	movs	r3, #8
 8010daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dae:	e31e      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010db0:	2310      	movs	r3, #16
 8010db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010db6:	e31a      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010db8:	2320      	movs	r3, #32
 8010dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dbe:	e316      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010dc0:	2340      	movs	r3, #64	@ 0x40
 8010dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dc6:	e312      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010dc8:	2380      	movs	r3, #128	@ 0x80
 8010dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dce:	e30e      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	4a69      	ldr	r2, [pc, #420]	@ (8010f7c <UART_SetConfig+0x33c>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d130      	bne.n	8010e3c <UART_SetConfig+0x1fc>
 8010dda:	4b67      	ldr	r3, [pc, #412]	@ (8010f78 <UART_SetConfig+0x338>)
 8010ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010dde:	f003 0307 	and.w	r3, r3, #7
 8010de2:	2b05      	cmp	r3, #5
 8010de4:	d826      	bhi.n	8010e34 <UART_SetConfig+0x1f4>
 8010de6:	a201      	add	r2, pc, #4	@ (adr r2, 8010dec <UART_SetConfig+0x1ac>)
 8010de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dec:	08010e05 	.word	0x08010e05
 8010df0:	08010e0d 	.word	0x08010e0d
 8010df4:	08010e15 	.word	0x08010e15
 8010df8:	08010e1d 	.word	0x08010e1d
 8010dfc:	08010e25 	.word	0x08010e25
 8010e00:	08010e2d 	.word	0x08010e2d
 8010e04:	2300      	movs	r3, #0
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e0a:	e2f0      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010e0c:	2304      	movs	r3, #4
 8010e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e12:	e2ec      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010e14:	2308      	movs	r3, #8
 8010e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e1a:	e2e8      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010e1c:	2310      	movs	r3, #16
 8010e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e22:	e2e4      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010e24:	2320      	movs	r3, #32
 8010e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e2a:	e2e0      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010e2c:	2340      	movs	r3, #64	@ 0x40
 8010e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e32:	e2dc      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010e34:	2380      	movs	r3, #128	@ 0x80
 8010e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e3a:	e2d8      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	4a4f      	ldr	r2, [pc, #316]	@ (8010f80 <UART_SetConfig+0x340>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d130      	bne.n	8010ea8 <UART_SetConfig+0x268>
 8010e46:	4b4c      	ldr	r3, [pc, #304]	@ (8010f78 <UART_SetConfig+0x338>)
 8010e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e4a:	f003 0307 	and.w	r3, r3, #7
 8010e4e:	2b05      	cmp	r3, #5
 8010e50:	d826      	bhi.n	8010ea0 <UART_SetConfig+0x260>
 8010e52:	a201      	add	r2, pc, #4	@ (adr r2, 8010e58 <UART_SetConfig+0x218>)
 8010e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e58:	08010e71 	.word	0x08010e71
 8010e5c:	08010e79 	.word	0x08010e79
 8010e60:	08010e81 	.word	0x08010e81
 8010e64:	08010e89 	.word	0x08010e89
 8010e68:	08010e91 	.word	0x08010e91
 8010e6c:	08010e99 	.word	0x08010e99
 8010e70:	2300      	movs	r3, #0
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e76:	e2ba      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010e78:	2304      	movs	r3, #4
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e7e:	e2b6      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010e80:	2308      	movs	r3, #8
 8010e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e86:	e2b2      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010e88:	2310      	movs	r3, #16
 8010e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e8e:	e2ae      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010e90:	2320      	movs	r3, #32
 8010e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e96:	e2aa      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010e98:	2340      	movs	r3, #64	@ 0x40
 8010e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e9e:	e2a6      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010ea0:	2380      	movs	r3, #128	@ 0x80
 8010ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ea6:	e2a2      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	4a35      	ldr	r2, [pc, #212]	@ (8010f84 <UART_SetConfig+0x344>)
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d130      	bne.n	8010f14 <UART_SetConfig+0x2d4>
 8010eb2:	4b31      	ldr	r3, [pc, #196]	@ (8010f78 <UART_SetConfig+0x338>)
 8010eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010eb6:	f003 0307 	and.w	r3, r3, #7
 8010eba:	2b05      	cmp	r3, #5
 8010ebc:	d826      	bhi.n	8010f0c <UART_SetConfig+0x2cc>
 8010ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8010ec4 <UART_SetConfig+0x284>)
 8010ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ec4:	08010edd 	.word	0x08010edd
 8010ec8:	08010ee5 	.word	0x08010ee5
 8010ecc:	08010eed 	.word	0x08010eed
 8010ed0:	08010ef5 	.word	0x08010ef5
 8010ed4:	08010efd 	.word	0x08010efd
 8010ed8:	08010f05 	.word	0x08010f05
 8010edc:	2300      	movs	r3, #0
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ee2:	e284      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010ee4:	2304      	movs	r3, #4
 8010ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010eea:	e280      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010eec:	2308      	movs	r3, #8
 8010eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ef2:	e27c      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010ef4:	2310      	movs	r3, #16
 8010ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010efa:	e278      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010efc:	2320      	movs	r3, #32
 8010efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f02:	e274      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010f04:	2340      	movs	r3, #64	@ 0x40
 8010f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f0a:	e270      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010f0c:	2380      	movs	r3, #128	@ 0x80
 8010f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f12:	e26c      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010f14:	697b      	ldr	r3, [r7, #20]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	4a1b      	ldr	r2, [pc, #108]	@ (8010f88 <UART_SetConfig+0x348>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d142      	bne.n	8010fa4 <UART_SetConfig+0x364>
 8010f1e:	4b16      	ldr	r3, [pc, #88]	@ (8010f78 <UART_SetConfig+0x338>)
 8010f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f22:	f003 0307 	and.w	r3, r3, #7
 8010f26:	2b05      	cmp	r3, #5
 8010f28:	d838      	bhi.n	8010f9c <UART_SetConfig+0x35c>
 8010f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8010f30 <UART_SetConfig+0x2f0>)
 8010f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f30:	08010f49 	.word	0x08010f49
 8010f34:	08010f51 	.word	0x08010f51
 8010f38:	08010f59 	.word	0x08010f59
 8010f3c:	08010f61 	.word	0x08010f61
 8010f40:	08010f8d 	.word	0x08010f8d
 8010f44:	08010f95 	.word	0x08010f95
 8010f48:	2300      	movs	r3, #0
 8010f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f4e:	e24e      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010f50:	2304      	movs	r3, #4
 8010f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f56:	e24a      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010f58:	2308      	movs	r3, #8
 8010f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f5e:	e246      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010f60:	2310      	movs	r3, #16
 8010f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f66:	e242      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010f68:	cfff69f3 	.word	0xcfff69f3
 8010f6c:	58000c00 	.word	0x58000c00
 8010f70:	11fff4ff 	.word	0x11fff4ff
 8010f74:	40011000 	.word	0x40011000
 8010f78:	58024400 	.word	0x58024400
 8010f7c:	40004400 	.word	0x40004400
 8010f80:	40004800 	.word	0x40004800
 8010f84:	40004c00 	.word	0x40004c00
 8010f88:	40005000 	.word	0x40005000
 8010f8c:	2320      	movs	r3, #32
 8010f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f92:	e22c      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010f94:	2340      	movs	r3, #64	@ 0x40
 8010f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f9a:	e228      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010f9c:	2380      	movs	r3, #128	@ 0x80
 8010f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fa2:	e224      	b.n	80113ee <UART_SetConfig+0x7ae>
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	4ab1      	ldr	r2, [pc, #708]	@ (8011270 <UART_SetConfig+0x630>)
 8010faa:	4293      	cmp	r3, r2
 8010fac:	d176      	bne.n	801109c <UART_SetConfig+0x45c>
 8010fae:	4bb1      	ldr	r3, [pc, #708]	@ (8011274 <UART_SetConfig+0x634>)
 8010fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010fb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010fb6:	2b28      	cmp	r3, #40	@ 0x28
 8010fb8:	d86c      	bhi.n	8011094 <UART_SetConfig+0x454>
 8010fba:	a201      	add	r2, pc, #4	@ (adr r2, 8010fc0 <UART_SetConfig+0x380>)
 8010fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fc0:	08011065 	.word	0x08011065
 8010fc4:	08011095 	.word	0x08011095
 8010fc8:	08011095 	.word	0x08011095
 8010fcc:	08011095 	.word	0x08011095
 8010fd0:	08011095 	.word	0x08011095
 8010fd4:	08011095 	.word	0x08011095
 8010fd8:	08011095 	.word	0x08011095
 8010fdc:	08011095 	.word	0x08011095
 8010fe0:	0801106d 	.word	0x0801106d
 8010fe4:	08011095 	.word	0x08011095
 8010fe8:	08011095 	.word	0x08011095
 8010fec:	08011095 	.word	0x08011095
 8010ff0:	08011095 	.word	0x08011095
 8010ff4:	08011095 	.word	0x08011095
 8010ff8:	08011095 	.word	0x08011095
 8010ffc:	08011095 	.word	0x08011095
 8011000:	08011075 	.word	0x08011075
 8011004:	08011095 	.word	0x08011095
 8011008:	08011095 	.word	0x08011095
 801100c:	08011095 	.word	0x08011095
 8011010:	08011095 	.word	0x08011095
 8011014:	08011095 	.word	0x08011095
 8011018:	08011095 	.word	0x08011095
 801101c:	08011095 	.word	0x08011095
 8011020:	0801107d 	.word	0x0801107d
 8011024:	08011095 	.word	0x08011095
 8011028:	08011095 	.word	0x08011095
 801102c:	08011095 	.word	0x08011095
 8011030:	08011095 	.word	0x08011095
 8011034:	08011095 	.word	0x08011095
 8011038:	08011095 	.word	0x08011095
 801103c:	08011095 	.word	0x08011095
 8011040:	08011085 	.word	0x08011085
 8011044:	08011095 	.word	0x08011095
 8011048:	08011095 	.word	0x08011095
 801104c:	08011095 	.word	0x08011095
 8011050:	08011095 	.word	0x08011095
 8011054:	08011095 	.word	0x08011095
 8011058:	08011095 	.word	0x08011095
 801105c:	08011095 	.word	0x08011095
 8011060:	0801108d 	.word	0x0801108d
 8011064:	2301      	movs	r3, #1
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801106a:	e1c0      	b.n	80113ee <UART_SetConfig+0x7ae>
 801106c:	2304      	movs	r3, #4
 801106e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011072:	e1bc      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011074:	2308      	movs	r3, #8
 8011076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801107a:	e1b8      	b.n	80113ee <UART_SetConfig+0x7ae>
 801107c:	2310      	movs	r3, #16
 801107e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011082:	e1b4      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011084:	2320      	movs	r3, #32
 8011086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801108a:	e1b0      	b.n	80113ee <UART_SetConfig+0x7ae>
 801108c:	2340      	movs	r3, #64	@ 0x40
 801108e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011092:	e1ac      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011094:	2380      	movs	r3, #128	@ 0x80
 8011096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801109a:	e1a8      	b.n	80113ee <UART_SetConfig+0x7ae>
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	4a75      	ldr	r2, [pc, #468]	@ (8011278 <UART_SetConfig+0x638>)
 80110a2:	4293      	cmp	r3, r2
 80110a4:	d130      	bne.n	8011108 <UART_SetConfig+0x4c8>
 80110a6:	4b73      	ldr	r3, [pc, #460]	@ (8011274 <UART_SetConfig+0x634>)
 80110a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80110aa:	f003 0307 	and.w	r3, r3, #7
 80110ae:	2b05      	cmp	r3, #5
 80110b0:	d826      	bhi.n	8011100 <UART_SetConfig+0x4c0>
 80110b2:	a201      	add	r2, pc, #4	@ (adr r2, 80110b8 <UART_SetConfig+0x478>)
 80110b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b8:	080110d1 	.word	0x080110d1
 80110bc:	080110d9 	.word	0x080110d9
 80110c0:	080110e1 	.word	0x080110e1
 80110c4:	080110e9 	.word	0x080110e9
 80110c8:	080110f1 	.word	0x080110f1
 80110cc:	080110f9 	.word	0x080110f9
 80110d0:	2300      	movs	r3, #0
 80110d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110d6:	e18a      	b.n	80113ee <UART_SetConfig+0x7ae>
 80110d8:	2304      	movs	r3, #4
 80110da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110de:	e186      	b.n	80113ee <UART_SetConfig+0x7ae>
 80110e0:	2308      	movs	r3, #8
 80110e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110e6:	e182      	b.n	80113ee <UART_SetConfig+0x7ae>
 80110e8:	2310      	movs	r3, #16
 80110ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110ee:	e17e      	b.n	80113ee <UART_SetConfig+0x7ae>
 80110f0:	2320      	movs	r3, #32
 80110f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110f6:	e17a      	b.n	80113ee <UART_SetConfig+0x7ae>
 80110f8:	2340      	movs	r3, #64	@ 0x40
 80110fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110fe:	e176      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011100:	2380      	movs	r3, #128	@ 0x80
 8011102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011106:	e172      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4a5b      	ldr	r2, [pc, #364]	@ (801127c <UART_SetConfig+0x63c>)
 801110e:	4293      	cmp	r3, r2
 8011110:	d130      	bne.n	8011174 <UART_SetConfig+0x534>
 8011112:	4b58      	ldr	r3, [pc, #352]	@ (8011274 <UART_SetConfig+0x634>)
 8011114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011116:	f003 0307 	and.w	r3, r3, #7
 801111a:	2b05      	cmp	r3, #5
 801111c:	d826      	bhi.n	801116c <UART_SetConfig+0x52c>
 801111e:	a201      	add	r2, pc, #4	@ (adr r2, 8011124 <UART_SetConfig+0x4e4>)
 8011120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011124:	0801113d 	.word	0x0801113d
 8011128:	08011145 	.word	0x08011145
 801112c:	0801114d 	.word	0x0801114d
 8011130:	08011155 	.word	0x08011155
 8011134:	0801115d 	.word	0x0801115d
 8011138:	08011165 	.word	0x08011165
 801113c:	2300      	movs	r3, #0
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011142:	e154      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011144:	2304      	movs	r3, #4
 8011146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801114a:	e150      	b.n	80113ee <UART_SetConfig+0x7ae>
 801114c:	2308      	movs	r3, #8
 801114e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011152:	e14c      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011154:	2310      	movs	r3, #16
 8011156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801115a:	e148      	b.n	80113ee <UART_SetConfig+0x7ae>
 801115c:	2320      	movs	r3, #32
 801115e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011162:	e144      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011164:	2340      	movs	r3, #64	@ 0x40
 8011166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801116a:	e140      	b.n	80113ee <UART_SetConfig+0x7ae>
 801116c:	2380      	movs	r3, #128	@ 0x80
 801116e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011172:	e13c      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	4a41      	ldr	r2, [pc, #260]	@ (8011280 <UART_SetConfig+0x640>)
 801117a:	4293      	cmp	r3, r2
 801117c:	f040 8082 	bne.w	8011284 <UART_SetConfig+0x644>
 8011180:	4b3c      	ldr	r3, [pc, #240]	@ (8011274 <UART_SetConfig+0x634>)
 8011182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011184:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011188:	2b28      	cmp	r3, #40	@ 0x28
 801118a:	d86d      	bhi.n	8011268 <UART_SetConfig+0x628>
 801118c:	a201      	add	r2, pc, #4	@ (adr r2, 8011194 <UART_SetConfig+0x554>)
 801118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011192:	bf00      	nop
 8011194:	08011239 	.word	0x08011239
 8011198:	08011269 	.word	0x08011269
 801119c:	08011269 	.word	0x08011269
 80111a0:	08011269 	.word	0x08011269
 80111a4:	08011269 	.word	0x08011269
 80111a8:	08011269 	.word	0x08011269
 80111ac:	08011269 	.word	0x08011269
 80111b0:	08011269 	.word	0x08011269
 80111b4:	08011241 	.word	0x08011241
 80111b8:	08011269 	.word	0x08011269
 80111bc:	08011269 	.word	0x08011269
 80111c0:	08011269 	.word	0x08011269
 80111c4:	08011269 	.word	0x08011269
 80111c8:	08011269 	.word	0x08011269
 80111cc:	08011269 	.word	0x08011269
 80111d0:	08011269 	.word	0x08011269
 80111d4:	08011249 	.word	0x08011249
 80111d8:	08011269 	.word	0x08011269
 80111dc:	08011269 	.word	0x08011269
 80111e0:	08011269 	.word	0x08011269
 80111e4:	08011269 	.word	0x08011269
 80111e8:	08011269 	.word	0x08011269
 80111ec:	08011269 	.word	0x08011269
 80111f0:	08011269 	.word	0x08011269
 80111f4:	08011251 	.word	0x08011251
 80111f8:	08011269 	.word	0x08011269
 80111fc:	08011269 	.word	0x08011269
 8011200:	08011269 	.word	0x08011269
 8011204:	08011269 	.word	0x08011269
 8011208:	08011269 	.word	0x08011269
 801120c:	08011269 	.word	0x08011269
 8011210:	08011269 	.word	0x08011269
 8011214:	08011259 	.word	0x08011259
 8011218:	08011269 	.word	0x08011269
 801121c:	08011269 	.word	0x08011269
 8011220:	08011269 	.word	0x08011269
 8011224:	08011269 	.word	0x08011269
 8011228:	08011269 	.word	0x08011269
 801122c:	08011269 	.word	0x08011269
 8011230:	08011269 	.word	0x08011269
 8011234:	08011261 	.word	0x08011261
 8011238:	2301      	movs	r3, #1
 801123a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801123e:	e0d6      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011240:	2304      	movs	r3, #4
 8011242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011246:	e0d2      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011248:	2308      	movs	r3, #8
 801124a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801124e:	e0ce      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011250:	2310      	movs	r3, #16
 8011252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011256:	e0ca      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011258:	2320      	movs	r3, #32
 801125a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801125e:	e0c6      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011260:	2340      	movs	r3, #64	@ 0x40
 8011262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011266:	e0c2      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011268:	2380      	movs	r3, #128	@ 0x80
 801126a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801126e:	e0be      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011270:	40011400 	.word	0x40011400
 8011274:	58024400 	.word	0x58024400
 8011278:	40007800 	.word	0x40007800
 801127c:	40007c00 	.word	0x40007c00
 8011280:	40011800 	.word	0x40011800
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	4aad      	ldr	r2, [pc, #692]	@ (8011540 <UART_SetConfig+0x900>)
 801128a:	4293      	cmp	r3, r2
 801128c:	d176      	bne.n	801137c <UART_SetConfig+0x73c>
 801128e:	4bad      	ldr	r3, [pc, #692]	@ (8011544 <UART_SetConfig+0x904>)
 8011290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011292:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011296:	2b28      	cmp	r3, #40	@ 0x28
 8011298:	d86c      	bhi.n	8011374 <UART_SetConfig+0x734>
 801129a:	a201      	add	r2, pc, #4	@ (adr r2, 80112a0 <UART_SetConfig+0x660>)
 801129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a0:	08011345 	.word	0x08011345
 80112a4:	08011375 	.word	0x08011375
 80112a8:	08011375 	.word	0x08011375
 80112ac:	08011375 	.word	0x08011375
 80112b0:	08011375 	.word	0x08011375
 80112b4:	08011375 	.word	0x08011375
 80112b8:	08011375 	.word	0x08011375
 80112bc:	08011375 	.word	0x08011375
 80112c0:	0801134d 	.word	0x0801134d
 80112c4:	08011375 	.word	0x08011375
 80112c8:	08011375 	.word	0x08011375
 80112cc:	08011375 	.word	0x08011375
 80112d0:	08011375 	.word	0x08011375
 80112d4:	08011375 	.word	0x08011375
 80112d8:	08011375 	.word	0x08011375
 80112dc:	08011375 	.word	0x08011375
 80112e0:	08011355 	.word	0x08011355
 80112e4:	08011375 	.word	0x08011375
 80112e8:	08011375 	.word	0x08011375
 80112ec:	08011375 	.word	0x08011375
 80112f0:	08011375 	.word	0x08011375
 80112f4:	08011375 	.word	0x08011375
 80112f8:	08011375 	.word	0x08011375
 80112fc:	08011375 	.word	0x08011375
 8011300:	0801135d 	.word	0x0801135d
 8011304:	08011375 	.word	0x08011375
 8011308:	08011375 	.word	0x08011375
 801130c:	08011375 	.word	0x08011375
 8011310:	08011375 	.word	0x08011375
 8011314:	08011375 	.word	0x08011375
 8011318:	08011375 	.word	0x08011375
 801131c:	08011375 	.word	0x08011375
 8011320:	08011365 	.word	0x08011365
 8011324:	08011375 	.word	0x08011375
 8011328:	08011375 	.word	0x08011375
 801132c:	08011375 	.word	0x08011375
 8011330:	08011375 	.word	0x08011375
 8011334:	08011375 	.word	0x08011375
 8011338:	08011375 	.word	0x08011375
 801133c:	08011375 	.word	0x08011375
 8011340:	0801136d 	.word	0x0801136d
 8011344:	2301      	movs	r3, #1
 8011346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801134a:	e050      	b.n	80113ee <UART_SetConfig+0x7ae>
 801134c:	2304      	movs	r3, #4
 801134e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011352:	e04c      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011354:	2308      	movs	r3, #8
 8011356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801135a:	e048      	b.n	80113ee <UART_SetConfig+0x7ae>
 801135c:	2310      	movs	r3, #16
 801135e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011362:	e044      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011364:	2320      	movs	r3, #32
 8011366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801136a:	e040      	b.n	80113ee <UART_SetConfig+0x7ae>
 801136c:	2340      	movs	r3, #64	@ 0x40
 801136e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011372:	e03c      	b.n	80113ee <UART_SetConfig+0x7ae>
 8011374:	2380      	movs	r3, #128	@ 0x80
 8011376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801137a:	e038      	b.n	80113ee <UART_SetConfig+0x7ae>
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	4a71      	ldr	r2, [pc, #452]	@ (8011548 <UART_SetConfig+0x908>)
 8011382:	4293      	cmp	r3, r2
 8011384:	d130      	bne.n	80113e8 <UART_SetConfig+0x7a8>
 8011386:	4b6f      	ldr	r3, [pc, #444]	@ (8011544 <UART_SetConfig+0x904>)
 8011388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801138a:	f003 0307 	and.w	r3, r3, #7
 801138e:	2b05      	cmp	r3, #5
 8011390:	d826      	bhi.n	80113e0 <UART_SetConfig+0x7a0>
 8011392:	a201      	add	r2, pc, #4	@ (adr r2, 8011398 <UART_SetConfig+0x758>)
 8011394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011398:	080113b1 	.word	0x080113b1
 801139c:	080113b9 	.word	0x080113b9
 80113a0:	080113c1 	.word	0x080113c1
 80113a4:	080113c9 	.word	0x080113c9
 80113a8:	080113d1 	.word	0x080113d1
 80113ac:	080113d9 	.word	0x080113d9
 80113b0:	2302      	movs	r3, #2
 80113b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113b6:	e01a      	b.n	80113ee <UART_SetConfig+0x7ae>
 80113b8:	2304      	movs	r3, #4
 80113ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113be:	e016      	b.n	80113ee <UART_SetConfig+0x7ae>
 80113c0:	2308      	movs	r3, #8
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113c6:	e012      	b.n	80113ee <UART_SetConfig+0x7ae>
 80113c8:	2310      	movs	r3, #16
 80113ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113ce:	e00e      	b.n	80113ee <UART_SetConfig+0x7ae>
 80113d0:	2320      	movs	r3, #32
 80113d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113d6:	e00a      	b.n	80113ee <UART_SetConfig+0x7ae>
 80113d8:	2340      	movs	r3, #64	@ 0x40
 80113da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113de:	e006      	b.n	80113ee <UART_SetConfig+0x7ae>
 80113e0:	2380      	movs	r3, #128	@ 0x80
 80113e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113e6:	e002      	b.n	80113ee <UART_SetConfig+0x7ae>
 80113e8:	2380      	movs	r3, #128	@ 0x80
 80113ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	4a55      	ldr	r2, [pc, #340]	@ (8011548 <UART_SetConfig+0x908>)
 80113f4:	4293      	cmp	r3, r2
 80113f6:	f040 80f8 	bne.w	80115ea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80113fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80113fe:	2b20      	cmp	r3, #32
 8011400:	dc46      	bgt.n	8011490 <UART_SetConfig+0x850>
 8011402:	2b02      	cmp	r3, #2
 8011404:	db75      	blt.n	80114f2 <UART_SetConfig+0x8b2>
 8011406:	3b02      	subs	r3, #2
 8011408:	2b1e      	cmp	r3, #30
 801140a:	d872      	bhi.n	80114f2 <UART_SetConfig+0x8b2>
 801140c:	a201      	add	r2, pc, #4	@ (adr r2, 8011414 <UART_SetConfig+0x7d4>)
 801140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011412:	bf00      	nop
 8011414:	08011497 	.word	0x08011497
 8011418:	080114f3 	.word	0x080114f3
 801141c:	0801149f 	.word	0x0801149f
 8011420:	080114f3 	.word	0x080114f3
 8011424:	080114f3 	.word	0x080114f3
 8011428:	080114f3 	.word	0x080114f3
 801142c:	080114af 	.word	0x080114af
 8011430:	080114f3 	.word	0x080114f3
 8011434:	080114f3 	.word	0x080114f3
 8011438:	080114f3 	.word	0x080114f3
 801143c:	080114f3 	.word	0x080114f3
 8011440:	080114f3 	.word	0x080114f3
 8011444:	080114f3 	.word	0x080114f3
 8011448:	080114f3 	.word	0x080114f3
 801144c:	080114bf 	.word	0x080114bf
 8011450:	080114f3 	.word	0x080114f3
 8011454:	080114f3 	.word	0x080114f3
 8011458:	080114f3 	.word	0x080114f3
 801145c:	080114f3 	.word	0x080114f3
 8011460:	080114f3 	.word	0x080114f3
 8011464:	080114f3 	.word	0x080114f3
 8011468:	080114f3 	.word	0x080114f3
 801146c:	080114f3 	.word	0x080114f3
 8011470:	080114f3 	.word	0x080114f3
 8011474:	080114f3 	.word	0x080114f3
 8011478:	080114f3 	.word	0x080114f3
 801147c:	080114f3 	.word	0x080114f3
 8011480:	080114f3 	.word	0x080114f3
 8011484:	080114f3 	.word	0x080114f3
 8011488:	080114f3 	.word	0x080114f3
 801148c:	080114e5 	.word	0x080114e5
 8011490:	2b40      	cmp	r3, #64	@ 0x40
 8011492:	d02a      	beq.n	80114ea <UART_SetConfig+0x8aa>
 8011494:	e02d      	b.n	80114f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011496:	f7fc fba7 	bl	800dbe8 <HAL_RCCEx_GetD3PCLK1Freq>
 801149a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801149c:	e02f      	b.n	80114fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801149e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7fc fbb6 	bl	800dc14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80114a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114ac:	e027      	b.n	80114fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114ae:	f107 0318 	add.w	r3, r7, #24
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7fc fd02 	bl	800debc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80114b8:	69fb      	ldr	r3, [r7, #28]
 80114ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114bc:	e01f      	b.n	80114fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80114be:	4b21      	ldr	r3, [pc, #132]	@ (8011544 <UART_SetConfig+0x904>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f003 0320 	and.w	r3, r3, #32
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d009      	beq.n	80114de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80114ca:	4b1e      	ldr	r3, [pc, #120]	@ (8011544 <UART_SetConfig+0x904>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	08db      	lsrs	r3, r3, #3
 80114d0:	f003 0303 	and.w	r3, r3, #3
 80114d4:	4a1d      	ldr	r2, [pc, #116]	@ (801154c <UART_SetConfig+0x90c>)
 80114d6:	fa22 f303 	lsr.w	r3, r2, r3
 80114da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80114dc:	e00f      	b.n	80114fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80114de:	4b1b      	ldr	r3, [pc, #108]	@ (801154c <UART_SetConfig+0x90c>)
 80114e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114e2:	e00c      	b.n	80114fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114e4:	4b1a      	ldr	r3, [pc, #104]	@ (8011550 <UART_SetConfig+0x910>)
 80114e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114e8:	e009      	b.n	80114fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80114ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114f0:	e005      	b.n	80114fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80114f2:	2300      	movs	r3, #0
 80114f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80114f6:	2301      	movs	r3, #1
 80114f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80114fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80114fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011500:	2b00      	cmp	r3, #0
 8011502:	f000 81ee 	beq.w	80118e2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801150a:	4a12      	ldr	r2, [pc, #72]	@ (8011554 <UART_SetConfig+0x914>)
 801150c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011510:	461a      	mov	r2, r3
 8011512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011514:	fbb3 f3f2 	udiv	r3, r3, r2
 8011518:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	685a      	ldr	r2, [r3, #4]
 801151e:	4613      	mov	r3, r2
 8011520:	005b      	lsls	r3, r3, #1
 8011522:	4413      	add	r3, r2
 8011524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011526:	429a      	cmp	r2, r3
 8011528:	d305      	bcc.n	8011536 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011532:	429a      	cmp	r2, r3
 8011534:	d910      	bls.n	8011558 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011536:	2301      	movs	r3, #1
 8011538:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801153c:	e1d1      	b.n	80118e2 <UART_SetConfig+0xca2>
 801153e:	bf00      	nop
 8011540:	40011c00 	.word	0x40011c00
 8011544:	58024400 	.word	0x58024400
 8011548:	58000c00 	.word	0x58000c00
 801154c:	03d09000 	.word	0x03d09000
 8011550:	003d0900 	.word	0x003d0900
 8011554:	0801ef5c 	.word	0x0801ef5c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801155a:	2200      	movs	r2, #0
 801155c:	60bb      	str	r3, [r7, #8]
 801155e:	60fa      	str	r2, [r7, #12]
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011564:	4ac0      	ldr	r2, [pc, #768]	@ (8011868 <UART_SetConfig+0xc28>)
 8011566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801156a:	b29b      	uxth	r3, r3
 801156c:	2200      	movs	r2, #0
 801156e:	603b      	str	r3, [r7, #0]
 8011570:	607a      	str	r2, [r7, #4]
 8011572:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011576:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801157a:	f7ee ff01 	bl	8000380 <__aeabi_uldivmod>
 801157e:	4602      	mov	r2, r0
 8011580:	460b      	mov	r3, r1
 8011582:	4610      	mov	r0, r2
 8011584:	4619      	mov	r1, r3
 8011586:	f04f 0200 	mov.w	r2, #0
 801158a:	f04f 0300 	mov.w	r3, #0
 801158e:	020b      	lsls	r3, r1, #8
 8011590:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011594:	0202      	lsls	r2, r0, #8
 8011596:	6979      	ldr	r1, [r7, #20]
 8011598:	6849      	ldr	r1, [r1, #4]
 801159a:	0849      	lsrs	r1, r1, #1
 801159c:	2000      	movs	r0, #0
 801159e:	460c      	mov	r4, r1
 80115a0:	4605      	mov	r5, r0
 80115a2:	eb12 0804 	adds.w	r8, r2, r4
 80115a6:	eb43 0905 	adc.w	r9, r3, r5
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	2200      	movs	r2, #0
 80115b0:	469a      	mov	sl, r3
 80115b2:	4693      	mov	fp, r2
 80115b4:	4652      	mov	r2, sl
 80115b6:	465b      	mov	r3, fp
 80115b8:	4640      	mov	r0, r8
 80115ba:	4649      	mov	r1, r9
 80115bc:	f7ee fee0 	bl	8000380 <__aeabi_uldivmod>
 80115c0:	4602      	mov	r2, r0
 80115c2:	460b      	mov	r3, r1
 80115c4:	4613      	mov	r3, r2
 80115c6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80115c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80115ce:	d308      	bcc.n	80115e2 <UART_SetConfig+0x9a2>
 80115d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80115d6:	d204      	bcs.n	80115e2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80115de:	60da      	str	r2, [r3, #12]
 80115e0:	e17f      	b.n	80118e2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80115e2:	2301      	movs	r3, #1
 80115e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80115e8:	e17b      	b.n	80118e2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	69db      	ldr	r3, [r3, #28]
 80115ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80115f2:	f040 80bd 	bne.w	8011770 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80115f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80115fa:	2b20      	cmp	r3, #32
 80115fc:	dc48      	bgt.n	8011690 <UART_SetConfig+0xa50>
 80115fe:	2b00      	cmp	r3, #0
 8011600:	db7b      	blt.n	80116fa <UART_SetConfig+0xaba>
 8011602:	2b20      	cmp	r3, #32
 8011604:	d879      	bhi.n	80116fa <UART_SetConfig+0xaba>
 8011606:	a201      	add	r2, pc, #4	@ (adr r2, 801160c <UART_SetConfig+0x9cc>)
 8011608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801160c:	08011697 	.word	0x08011697
 8011610:	0801169f 	.word	0x0801169f
 8011614:	080116fb 	.word	0x080116fb
 8011618:	080116fb 	.word	0x080116fb
 801161c:	080116a7 	.word	0x080116a7
 8011620:	080116fb 	.word	0x080116fb
 8011624:	080116fb 	.word	0x080116fb
 8011628:	080116fb 	.word	0x080116fb
 801162c:	080116b7 	.word	0x080116b7
 8011630:	080116fb 	.word	0x080116fb
 8011634:	080116fb 	.word	0x080116fb
 8011638:	080116fb 	.word	0x080116fb
 801163c:	080116fb 	.word	0x080116fb
 8011640:	080116fb 	.word	0x080116fb
 8011644:	080116fb 	.word	0x080116fb
 8011648:	080116fb 	.word	0x080116fb
 801164c:	080116c7 	.word	0x080116c7
 8011650:	080116fb 	.word	0x080116fb
 8011654:	080116fb 	.word	0x080116fb
 8011658:	080116fb 	.word	0x080116fb
 801165c:	080116fb 	.word	0x080116fb
 8011660:	080116fb 	.word	0x080116fb
 8011664:	080116fb 	.word	0x080116fb
 8011668:	080116fb 	.word	0x080116fb
 801166c:	080116fb 	.word	0x080116fb
 8011670:	080116fb 	.word	0x080116fb
 8011674:	080116fb 	.word	0x080116fb
 8011678:	080116fb 	.word	0x080116fb
 801167c:	080116fb 	.word	0x080116fb
 8011680:	080116fb 	.word	0x080116fb
 8011684:	080116fb 	.word	0x080116fb
 8011688:	080116fb 	.word	0x080116fb
 801168c:	080116ed 	.word	0x080116ed
 8011690:	2b40      	cmp	r3, #64	@ 0x40
 8011692:	d02e      	beq.n	80116f2 <UART_SetConfig+0xab2>
 8011694:	e031      	b.n	80116fa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011696:	f7fa fc09 	bl	800beac <HAL_RCC_GetPCLK1Freq>
 801169a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801169c:	e033      	b.n	8011706 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801169e:	f7fa fc1b 	bl	800bed8 <HAL_RCC_GetPCLK2Freq>
 80116a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80116a4:	e02f      	b.n	8011706 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7fc fab2 	bl	800dc14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80116b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80116b4:	e027      	b.n	8011706 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80116b6:	f107 0318 	add.w	r3, r7, #24
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fc fbfe 	bl	800debc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80116c0:	69fb      	ldr	r3, [r7, #28]
 80116c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80116c4:	e01f      	b.n	8011706 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116c6:	4b69      	ldr	r3, [pc, #420]	@ (801186c <UART_SetConfig+0xc2c>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	f003 0320 	and.w	r3, r3, #32
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d009      	beq.n	80116e6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80116d2:	4b66      	ldr	r3, [pc, #408]	@ (801186c <UART_SetConfig+0xc2c>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	08db      	lsrs	r3, r3, #3
 80116d8:	f003 0303 	and.w	r3, r3, #3
 80116dc:	4a64      	ldr	r2, [pc, #400]	@ (8011870 <UART_SetConfig+0xc30>)
 80116de:	fa22 f303 	lsr.w	r3, r2, r3
 80116e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80116e4:	e00f      	b.n	8011706 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80116e6:	4b62      	ldr	r3, [pc, #392]	@ (8011870 <UART_SetConfig+0xc30>)
 80116e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80116ea:	e00c      	b.n	8011706 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80116ec:	4b61      	ldr	r3, [pc, #388]	@ (8011874 <UART_SetConfig+0xc34>)
 80116ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80116f0:	e009      	b.n	8011706 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80116f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80116f8:	e005      	b.n	8011706 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80116fa:	2300      	movs	r3, #0
 80116fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80116fe:	2301      	movs	r3, #1
 8011700:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011704:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011708:	2b00      	cmp	r3, #0
 801170a:	f000 80ea 	beq.w	80118e2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011712:	4a55      	ldr	r2, [pc, #340]	@ (8011868 <UART_SetConfig+0xc28>)
 8011714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011718:	461a      	mov	r2, r3
 801171a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801171c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011720:	005a      	lsls	r2, r3, #1
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	085b      	lsrs	r3, r3, #1
 8011728:	441a      	add	r2, r3
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011732:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011736:	2b0f      	cmp	r3, #15
 8011738:	d916      	bls.n	8011768 <UART_SetConfig+0xb28>
 801173a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801173c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011740:	d212      	bcs.n	8011768 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011744:	b29b      	uxth	r3, r3
 8011746:	f023 030f 	bic.w	r3, r3, #15
 801174a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801174c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801174e:	085b      	lsrs	r3, r3, #1
 8011750:	b29b      	uxth	r3, r3
 8011752:	f003 0307 	and.w	r3, r3, #7
 8011756:	b29a      	uxth	r2, r3
 8011758:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801175a:	4313      	orrs	r3, r2
 801175c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011764:	60da      	str	r2, [r3, #12]
 8011766:	e0bc      	b.n	80118e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011768:	2301      	movs	r3, #1
 801176a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801176e:	e0b8      	b.n	80118e2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011770:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011774:	2b20      	cmp	r3, #32
 8011776:	dc4b      	bgt.n	8011810 <UART_SetConfig+0xbd0>
 8011778:	2b00      	cmp	r3, #0
 801177a:	f2c0 8087 	blt.w	801188c <UART_SetConfig+0xc4c>
 801177e:	2b20      	cmp	r3, #32
 8011780:	f200 8084 	bhi.w	801188c <UART_SetConfig+0xc4c>
 8011784:	a201      	add	r2, pc, #4	@ (adr r2, 801178c <UART_SetConfig+0xb4c>)
 8011786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801178a:	bf00      	nop
 801178c:	08011817 	.word	0x08011817
 8011790:	0801181f 	.word	0x0801181f
 8011794:	0801188d 	.word	0x0801188d
 8011798:	0801188d 	.word	0x0801188d
 801179c:	08011827 	.word	0x08011827
 80117a0:	0801188d 	.word	0x0801188d
 80117a4:	0801188d 	.word	0x0801188d
 80117a8:	0801188d 	.word	0x0801188d
 80117ac:	08011837 	.word	0x08011837
 80117b0:	0801188d 	.word	0x0801188d
 80117b4:	0801188d 	.word	0x0801188d
 80117b8:	0801188d 	.word	0x0801188d
 80117bc:	0801188d 	.word	0x0801188d
 80117c0:	0801188d 	.word	0x0801188d
 80117c4:	0801188d 	.word	0x0801188d
 80117c8:	0801188d 	.word	0x0801188d
 80117cc:	08011847 	.word	0x08011847
 80117d0:	0801188d 	.word	0x0801188d
 80117d4:	0801188d 	.word	0x0801188d
 80117d8:	0801188d 	.word	0x0801188d
 80117dc:	0801188d 	.word	0x0801188d
 80117e0:	0801188d 	.word	0x0801188d
 80117e4:	0801188d 	.word	0x0801188d
 80117e8:	0801188d 	.word	0x0801188d
 80117ec:	0801188d 	.word	0x0801188d
 80117f0:	0801188d 	.word	0x0801188d
 80117f4:	0801188d 	.word	0x0801188d
 80117f8:	0801188d 	.word	0x0801188d
 80117fc:	0801188d 	.word	0x0801188d
 8011800:	0801188d 	.word	0x0801188d
 8011804:	0801188d 	.word	0x0801188d
 8011808:	0801188d 	.word	0x0801188d
 801180c:	0801187f 	.word	0x0801187f
 8011810:	2b40      	cmp	r3, #64	@ 0x40
 8011812:	d037      	beq.n	8011884 <UART_SetConfig+0xc44>
 8011814:	e03a      	b.n	801188c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011816:	f7fa fb49 	bl	800beac <HAL_RCC_GetPCLK1Freq>
 801181a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801181c:	e03c      	b.n	8011898 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801181e:	f7fa fb5b 	bl	800bed8 <HAL_RCC_GetPCLK2Freq>
 8011822:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011824:	e038      	b.n	8011898 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801182a:	4618      	mov	r0, r3
 801182c:	f7fc f9f2 	bl	800dc14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011834:	e030      	b.n	8011898 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011836:	f107 0318 	add.w	r3, r7, #24
 801183a:	4618      	mov	r0, r3
 801183c:	f7fc fb3e 	bl	800debc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011840:	69fb      	ldr	r3, [r7, #28]
 8011842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011844:	e028      	b.n	8011898 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011846:	4b09      	ldr	r3, [pc, #36]	@ (801186c <UART_SetConfig+0xc2c>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f003 0320 	and.w	r3, r3, #32
 801184e:	2b00      	cmp	r3, #0
 8011850:	d012      	beq.n	8011878 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011852:	4b06      	ldr	r3, [pc, #24]	@ (801186c <UART_SetConfig+0xc2c>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	08db      	lsrs	r3, r3, #3
 8011858:	f003 0303 	and.w	r3, r3, #3
 801185c:	4a04      	ldr	r2, [pc, #16]	@ (8011870 <UART_SetConfig+0xc30>)
 801185e:	fa22 f303 	lsr.w	r3, r2, r3
 8011862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011864:	e018      	b.n	8011898 <UART_SetConfig+0xc58>
 8011866:	bf00      	nop
 8011868:	0801ef5c 	.word	0x0801ef5c
 801186c:	58024400 	.word	0x58024400
 8011870:	03d09000 	.word	0x03d09000
 8011874:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011878:	4b24      	ldr	r3, [pc, #144]	@ (801190c <UART_SetConfig+0xccc>)
 801187a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801187c:	e00c      	b.n	8011898 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801187e:	4b24      	ldr	r3, [pc, #144]	@ (8011910 <UART_SetConfig+0xcd0>)
 8011880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011882:	e009      	b.n	8011898 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011884:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801188a:	e005      	b.n	8011898 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801188c:	2300      	movs	r3, #0
 801188e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011890:	2301      	movs	r3, #1
 8011892:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011896:	bf00      	nop
    }

    if (pclk != 0U)
 8011898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801189a:	2b00      	cmp	r3, #0
 801189c:	d021      	beq.n	80118e2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801189e:	697b      	ldr	r3, [r7, #20]
 80118a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118a2:	4a1c      	ldr	r2, [pc, #112]	@ (8011914 <UART_SetConfig+0xcd4>)
 80118a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118a8:	461a      	mov	r2, r3
 80118aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	085b      	lsrs	r3, r3, #1
 80118b6:	441a      	add	r2, r3
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80118c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80118c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c4:	2b0f      	cmp	r3, #15
 80118c6:	d909      	bls.n	80118dc <UART_SetConfig+0xc9c>
 80118c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80118ce:	d205      	bcs.n	80118dc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80118d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	60da      	str	r2, [r3, #12]
 80118da:	e002      	b.n	80118e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80118dc:	2301      	movs	r3, #1
 80118de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	2201      	movs	r2, #1
 80118e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	2201      	movs	r2, #1
 80118ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	2200      	movs	r2, #0
 80118f6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	2200      	movs	r2, #0
 80118fc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80118fe:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8011902:	4618      	mov	r0, r3
 8011904:	3748      	adds	r7, #72	@ 0x48
 8011906:	46bd      	mov	sp, r7
 8011908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801190c:	03d09000 	.word	0x03d09000
 8011910:	003d0900 	.word	0x003d0900
 8011914:	0801ef5c 	.word	0x0801ef5c

08011918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011918:	b480      	push	{r7}
 801191a:	b083      	sub	sp, #12
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011924:	f003 0308 	and.w	r3, r3, #8
 8011928:	2b00      	cmp	r3, #0
 801192a:	d00a      	beq.n	8011942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	430a      	orrs	r2, r1
 8011940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011946:	f003 0301 	and.w	r3, r3, #1
 801194a:	2b00      	cmp	r3, #0
 801194c:	d00a      	beq.n	8011964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	685b      	ldr	r3, [r3, #4]
 8011954:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	430a      	orrs	r2, r1
 8011962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011968:	f003 0302 	and.w	r3, r3, #2
 801196c:	2b00      	cmp	r3, #0
 801196e:	d00a      	beq.n	8011986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	430a      	orrs	r2, r1
 8011984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801198a:	f003 0304 	and.w	r3, r3, #4
 801198e:	2b00      	cmp	r3, #0
 8011990:	d00a      	beq.n	80119a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	430a      	orrs	r2, r1
 80119a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119ac:	f003 0310 	and.w	r3, r3, #16
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d00a      	beq.n	80119ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	689b      	ldr	r3, [r3, #8]
 80119ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	430a      	orrs	r2, r1
 80119c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119ce:	f003 0320 	and.w	r3, r3, #32
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d00a      	beq.n	80119ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	689b      	ldr	r3, [r3, #8]
 80119dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	430a      	orrs	r2, r1
 80119ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d01a      	beq.n	8011a2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	430a      	orrs	r2, r1
 8011a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011a16:	d10a      	bne.n	8011a2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	430a      	orrs	r2, r1
 8011a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d00a      	beq.n	8011a50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	430a      	orrs	r2, r1
 8011a4e:	605a      	str	r2, [r3, #4]
  }
}
 8011a50:	bf00      	nop
 8011a52:	370c      	adds	r7, #12
 8011a54:	46bd      	mov	sp, r7
 8011a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5a:	4770      	bx	lr

08011a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b098      	sub	sp, #96	@ 0x60
 8011a60:	af02      	add	r7, sp, #8
 8011a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2200      	movs	r2, #0
 8011a68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011a6c:	f7f2 fe74 	bl	8004758 <HAL_GetTick>
 8011a70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f003 0308 	and.w	r3, r3, #8
 8011a7c:	2b08      	cmp	r3, #8
 8011a7e:	d12f      	bne.n	8011ae0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011a84:	9300      	str	r3, [sp, #0]
 8011a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a88:	2200      	movs	r2, #0
 8011a8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f000 f88e 	bl	8011bb0 <UART_WaitOnFlagUntilTimeout>
 8011a94:	4603      	mov	r3, r0
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d022      	beq.n	8011ae0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aa2:	e853 3f00 	ldrex	r3, [r3]
 8011aa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011aae:	653b      	str	r3, [r7, #80]	@ 0x50
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8011aba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011abc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011ac0:	e841 2300 	strex	r3, r2, [r1]
 8011ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d1e6      	bne.n	8011a9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2220      	movs	r2, #32
 8011ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011adc:	2303      	movs	r3, #3
 8011ade:	e063      	b.n	8011ba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	f003 0304 	and.w	r3, r3, #4
 8011aea:	2b04      	cmp	r3, #4
 8011aec:	d149      	bne.n	8011b82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011aee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011af2:	9300      	str	r3, [sp, #0]
 8011af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011af6:	2200      	movs	r2, #0
 8011af8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f000 f857 	bl	8011bb0 <UART_WaitOnFlagUntilTimeout>
 8011b02:	4603      	mov	r3, r0
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d03c      	beq.n	8011b82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b10:	e853 3f00 	ldrex	r3, [r3]
 8011b14:	623b      	str	r3, [r7, #32]
   return(result);
 8011b16:	6a3b      	ldr	r3, [r7, #32]
 8011b18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	461a      	mov	r2, r3
 8011b24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b26:	633b      	str	r3, [r7, #48]	@ 0x30
 8011b28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b2e:	e841 2300 	strex	r3, r2, [r1]
 8011b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d1e6      	bne.n	8011b08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	3308      	adds	r3, #8
 8011b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	e853 3f00 	ldrex	r3, [r3]
 8011b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	f023 0301 	bic.w	r3, r3, #1
 8011b50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	3308      	adds	r3, #8
 8011b58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011b5a:	61fa      	str	r2, [r7, #28]
 8011b5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b5e:	69b9      	ldr	r1, [r7, #24]
 8011b60:	69fa      	ldr	r2, [r7, #28]
 8011b62:	e841 2300 	strex	r3, r2, [r1]
 8011b66:	617b      	str	r3, [r7, #20]
   return(result);
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d1e5      	bne.n	8011b3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2220      	movs	r2, #32
 8011b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b7e:	2303      	movs	r3, #3
 8011b80:	e012      	b.n	8011ba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2220      	movs	r2, #32
 8011b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2220      	movs	r2, #32
 8011b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2200      	movs	r2, #0
 8011b96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011ba6:	2300      	movs	r3, #0
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3758      	adds	r7, #88	@ 0x58
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b084      	sub	sp, #16
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	60b9      	str	r1, [r7, #8]
 8011bba:	603b      	str	r3, [r7, #0]
 8011bbc:	4613      	mov	r3, r2
 8011bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011bc0:	e04f      	b.n	8011c62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011bc2:	69bb      	ldr	r3, [r7, #24]
 8011bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bc8:	d04b      	beq.n	8011c62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011bca:	f7f2 fdc5 	bl	8004758 <HAL_GetTick>
 8011bce:	4602      	mov	r2, r0
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	1ad3      	subs	r3, r2, r3
 8011bd4:	69ba      	ldr	r2, [r7, #24]
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d302      	bcc.n	8011be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d101      	bne.n	8011be4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011be0:	2303      	movs	r3, #3
 8011be2:	e04e      	b.n	8011c82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	f003 0304 	and.w	r3, r3, #4
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d037      	beq.n	8011c62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	2b80      	cmp	r3, #128	@ 0x80
 8011bf6:	d034      	beq.n	8011c62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	2b40      	cmp	r3, #64	@ 0x40
 8011bfc:	d031      	beq.n	8011c62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	69db      	ldr	r3, [r3, #28]
 8011c04:	f003 0308 	and.w	r3, r3, #8
 8011c08:	2b08      	cmp	r3, #8
 8011c0a:	d110      	bne.n	8011c2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	2208      	movs	r2, #8
 8011c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c14:	68f8      	ldr	r0, [r7, #12]
 8011c16:	f000 f839 	bl	8011c8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	2208      	movs	r2, #8
 8011c1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2200      	movs	r2, #0
 8011c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	e029      	b.n	8011c82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	69db      	ldr	r3, [r3, #28]
 8011c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011c38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011c3c:	d111      	bne.n	8011c62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011c46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c48:	68f8      	ldr	r0, [r7, #12]
 8011c4a:	f000 f81f 	bl	8011c8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	2220      	movs	r2, #32
 8011c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011c5e:	2303      	movs	r3, #3
 8011c60:	e00f      	b.n	8011c82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	69da      	ldr	r2, [r3, #28]
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	4013      	ands	r3, r2
 8011c6c:	68ba      	ldr	r2, [r7, #8]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	bf0c      	ite	eq
 8011c72:	2301      	moveq	r3, #1
 8011c74:	2300      	movne	r3, #0
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	461a      	mov	r2, r3
 8011c7a:	79fb      	ldrb	r3, [r7, #7]
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d0a0      	beq.n	8011bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011c80:	2300      	movs	r3, #0
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	3710      	adds	r7, #16
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}
	...

08011c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011c8c:	b480      	push	{r7}
 8011c8e:	b095      	sub	sp, #84	@ 0x54
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c9c:	e853 3f00 	ldrex	r3, [r3]
 8011ca0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	461a      	mov	r2, r3
 8011cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011cb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8011cb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011cb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011cba:	e841 2300 	strex	r3, r2, [r1]
 8011cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d1e6      	bne.n	8011c94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	3308      	adds	r3, #8
 8011ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cce:	6a3b      	ldr	r3, [r7, #32]
 8011cd0:	e853 3f00 	ldrex	r3, [r3]
 8011cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011cd6:	69fa      	ldr	r2, [r7, #28]
 8011cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8011d54 <UART_EndRxTransfer+0xc8>)
 8011cda:	4013      	ands	r3, r2
 8011cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	3308      	adds	r3, #8
 8011ce4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011cee:	e841 2300 	strex	r3, r2, [r1]
 8011cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d1e5      	bne.n	8011cc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011cfe:	2b01      	cmp	r3, #1
 8011d00:	d118      	bne.n	8011d34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	e853 3f00 	ldrex	r3, [r3]
 8011d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	f023 0310 	bic.w	r3, r3, #16
 8011d16:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d20:	61bb      	str	r3, [r7, #24]
 8011d22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d24:	6979      	ldr	r1, [r7, #20]
 8011d26:	69ba      	ldr	r2, [r7, #24]
 8011d28:	e841 2300 	strex	r3, r2, [r1]
 8011d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d1e6      	bne.n	8011d02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2220      	movs	r2, #32
 8011d38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2200      	movs	r2, #0
 8011d46:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011d48:	bf00      	nop
 8011d4a:	3754      	adds	r7, #84	@ 0x54
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d52:	4770      	bx	lr
 8011d54:	effffffe 	.word	0xeffffffe

08011d58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011d66:	2b01      	cmp	r3, #1
 8011d68:	d101      	bne.n	8011d6e <HAL_UARTEx_DisableFifoMode+0x16>
 8011d6a:	2302      	movs	r3, #2
 8011d6c:	e027      	b.n	8011dbe <HAL_UARTEx_DisableFifoMode+0x66>
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2201      	movs	r2, #1
 8011d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2224      	movs	r2, #36	@ 0x24
 8011d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	681a      	ldr	r2, [r3, #0]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	f022 0201 	bic.w	r2, r2, #1
 8011d94:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011d9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2200      	movs	r2, #0
 8011da2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	68fa      	ldr	r2, [r7, #12]
 8011daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2220      	movs	r2, #32
 8011db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2200      	movs	r2, #0
 8011db8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011dbc:	2300      	movs	r3, #0
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3714      	adds	r7, #20
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc8:	4770      	bx	lr

08011dca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011dca:	b580      	push	{r7, lr}
 8011dcc:	b084      	sub	sp, #16
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
 8011dd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011dda:	2b01      	cmp	r3, #1
 8011ddc:	d101      	bne.n	8011de2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011dde:	2302      	movs	r3, #2
 8011de0:	e02d      	b.n	8011e3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2201      	movs	r2, #1
 8011de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2224      	movs	r2, #36	@ 0x24
 8011dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	681a      	ldr	r2, [r3, #0]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	f022 0201 	bic.w	r2, r2, #1
 8011e08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	689b      	ldr	r3, [r3, #8]
 8011e10:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	683a      	ldr	r2, [r7, #0]
 8011e1a:	430a      	orrs	r2, r1
 8011e1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f000 f850 	bl	8011ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	68fa      	ldr	r2, [r7, #12]
 8011e2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2220      	movs	r2, #32
 8011e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2200      	movs	r2, #0
 8011e38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011e3c:	2300      	movs	r3, #0
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3710      	adds	r7, #16
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011e46:	b580      	push	{r7, lr}
 8011e48:	b084      	sub	sp, #16
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	6078      	str	r0, [r7, #4]
 8011e4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d101      	bne.n	8011e5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011e5a:	2302      	movs	r3, #2
 8011e5c:	e02d      	b.n	8011eba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	2201      	movs	r2, #1
 8011e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2224      	movs	r2, #36	@ 0x24
 8011e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	681a      	ldr	r2, [r3, #0]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f022 0201 	bic.w	r2, r2, #1
 8011e84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	689b      	ldr	r3, [r3, #8]
 8011e8c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	683a      	ldr	r2, [r7, #0]
 8011e96:	430a      	orrs	r2, r1
 8011e98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f000 f812 	bl	8011ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	68fa      	ldr	r2, [r7, #12]
 8011ea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2220      	movs	r2, #32
 8011eac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011eb8:	2300      	movs	r3, #0
}
 8011eba:	4618      	mov	r0, r3
 8011ebc:	3710      	adds	r7, #16
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	bd80      	pop	{r7, pc}
	...

08011ec4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b085      	sub	sp, #20
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d108      	bne.n	8011ee6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2201      	movs	r2, #1
 8011ee0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011ee4:	e031      	b.n	8011f4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011ee6:	2310      	movs	r3, #16
 8011ee8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011eea:	2310      	movs	r3, #16
 8011eec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	689b      	ldr	r3, [r3, #8]
 8011ef4:	0e5b      	lsrs	r3, r3, #25
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	f003 0307 	and.w	r3, r3, #7
 8011efc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	689b      	ldr	r3, [r3, #8]
 8011f04:	0f5b      	lsrs	r3, r3, #29
 8011f06:	b2db      	uxtb	r3, r3
 8011f08:	f003 0307 	and.w	r3, r3, #7
 8011f0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011f0e:	7bbb      	ldrb	r3, [r7, #14]
 8011f10:	7b3a      	ldrb	r2, [r7, #12]
 8011f12:	4911      	ldr	r1, [pc, #68]	@ (8011f58 <UARTEx_SetNbDataToProcess+0x94>)
 8011f14:	5c8a      	ldrb	r2, [r1, r2]
 8011f16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011f1a:	7b3a      	ldrb	r2, [r7, #12]
 8011f1c:	490f      	ldr	r1, [pc, #60]	@ (8011f5c <UARTEx_SetNbDataToProcess+0x98>)
 8011f1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011f20:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f24:	b29a      	uxth	r2, r3
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011f2c:	7bfb      	ldrb	r3, [r7, #15]
 8011f2e:	7b7a      	ldrb	r2, [r7, #13]
 8011f30:	4909      	ldr	r1, [pc, #36]	@ (8011f58 <UARTEx_SetNbDataToProcess+0x94>)
 8011f32:	5c8a      	ldrb	r2, [r1, r2]
 8011f34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011f38:	7b7a      	ldrb	r2, [r7, #13]
 8011f3a:	4908      	ldr	r1, [pc, #32]	@ (8011f5c <UARTEx_SetNbDataToProcess+0x98>)
 8011f3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011f3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f42:	b29a      	uxth	r2, r3
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011f4a:	bf00      	nop
 8011f4c:	3714      	adds	r7, #20
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f54:	4770      	bx	lr
 8011f56:	bf00      	nop
 8011f58:	0801ef74 	.word	0x0801ef74
 8011f5c:	0801ef7c 	.word	0x0801ef7c

08011f60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011f60:	b084      	sub	sp, #16
 8011f62:	b580      	push	{r7, lr}
 8011f64:	b084      	sub	sp, #16
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	6078      	str	r0, [r7, #4]
 8011f6a:	f107 001c 	add.w	r0, r7, #28
 8011f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011f72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011f76:	2b01      	cmp	r3, #1
 8011f78:	d121      	bne.n	8011fbe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	68da      	ldr	r2, [r3, #12]
 8011f8a:	4b2c      	ldr	r3, [pc, #176]	@ (801203c <USB_CoreInit+0xdc>)
 8011f8c:	4013      	ands	r3, r2
 8011f8e:	687a      	ldr	r2, [r7, #4]
 8011f90:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	68db      	ldr	r3, [r3, #12]
 8011f96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011f9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	d105      	bne.n	8011fb2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	68db      	ldr	r3, [r3, #12]
 8011faa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f001 fafa 	bl	80135ac <USB_CoreReset>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	73fb      	strb	r3, [r7, #15]
 8011fbc:	e01b      	b.n	8011ff6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	68db      	ldr	r3, [r3, #12]
 8011fc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f001 faee 	bl	80135ac <USB_CoreReset>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011fd4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d106      	bne.n	8011fea <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fe0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	639a      	str	r2, [r3, #56]	@ 0x38
 8011fe8:	e005      	b.n	8011ff6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011ff6:	7fbb      	ldrb	r3, [r7, #30]
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d116      	bne.n	801202a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012000:	b29a      	uxth	r2, r3
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801200a:	4b0d      	ldr	r3, [pc, #52]	@ (8012040 <USB_CoreInit+0xe0>)
 801200c:	4313      	orrs	r3, r2
 801200e:	687a      	ldr	r2, [r7, #4]
 8012010:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	689b      	ldr	r3, [r3, #8]
 8012016:	f043 0206 	orr.w	r2, r3, #6
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	689b      	ldr	r3, [r3, #8]
 8012022:	f043 0220 	orr.w	r2, r3, #32
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801202a:	7bfb      	ldrb	r3, [r7, #15]
}
 801202c:	4618      	mov	r0, r3
 801202e:	3710      	adds	r7, #16
 8012030:	46bd      	mov	sp, r7
 8012032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012036:	b004      	add	sp, #16
 8012038:	4770      	bx	lr
 801203a:	bf00      	nop
 801203c:	ffbdffbf 	.word	0xffbdffbf
 8012040:	03ee0000 	.word	0x03ee0000

08012044 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012044:	b480      	push	{r7}
 8012046:	b087      	sub	sp, #28
 8012048:	af00      	add	r7, sp, #0
 801204a:	60f8      	str	r0, [r7, #12]
 801204c:	60b9      	str	r1, [r7, #8]
 801204e:	4613      	mov	r3, r2
 8012050:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012052:	79fb      	ldrb	r3, [r7, #7]
 8012054:	2b02      	cmp	r3, #2
 8012056:	d165      	bne.n	8012124 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	4a41      	ldr	r2, [pc, #260]	@ (8012160 <USB_SetTurnaroundTime+0x11c>)
 801205c:	4293      	cmp	r3, r2
 801205e:	d906      	bls.n	801206e <USB_SetTurnaroundTime+0x2a>
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	4a40      	ldr	r2, [pc, #256]	@ (8012164 <USB_SetTurnaroundTime+0x120>)
 8012064:	4293      	cmp	r3, r2
 8012066:	d202      	bcs.n	801206e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012068:	230f      	movs	r3, #15
 801206a:	617b      	str	r3, [r7, #20]
 801206c:	e062      	b.n	8012134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	4a3c      	ldr	r2, [pc, #240]	@ (8012164 <USB_SetTurnaroundTime+0x120>)
 8012072:	4293      	cmp	r3, r2
 8012074:	d306      	bcc.n	8012084 <USB_SetTurnaroundTime+0x40>
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	4a3b      	ldr	r2, [pc, #236]	@ (8012168 <USB_SetTurnaroundTime+0x124>)
 801207a:	4293      	cmp	r3, r2
 801207c:	d202      	bcs.n	8012084 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801207e:	230e      	movs	r3, #14
 8012080:	617b      	str	r3, [r7, #20]
 8012082:	e057      	b.n	8012134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	4a38      	ldr	r2, [pc, #224]	@ (8012168 <USB_SetTurnaroundTime+0x124>)
 8012088:	4293      	cmp	r3, r2
 801208a:	d306      	bcc.n	801209a <USB_SetTurnaroundTime+0x56>
 801208c:	68bb      	ldr	r3, [r7, #8]
 801208e:	4a37      	ldr	r2, [pc, #220]	@ (801216c <USB_SetTurnaroundTime+0x128>)
 8012090:	4293      	cmp	r3, r2
 8012092:	d202      	bcs.n	801209a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012094:	230d      	movs	r3, #13
 8012096:	617b      	str	r3, [r7, #20]
 8012098:	e04c      	b.n	8012134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	4a33      	ldr	r2, [pc, #204]	@ (801216c <USB_SetTurnaroundTime+0x128>)
 801209e:	4293      	cmp	r3, r2
 80120a0:	d306      	bcc.n	80120b0 <USB_SetTurnaroundTime+0x6c>
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	4a32      	ldr	r2, [pc, #200]	@ (8012170 <USB_SetTurnaroundTime+0x12c>)
 80120a6:	4293      	cmp	r3, r2
 80120a8:	d802      	bhi.n	80120b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80120aa:	230c      	movs	r3, #12
 80120ac:	617b      	str	r3, [r7, #20]
 80120ae:	e041      	b.n	8012134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	4a2f      	ldr	r2, [pc, #188]	@ (8012170 <USB_SetTurnaroundTime+0x12c>)
 80120b4:	4293      	cmp	r3, r2
 80120b6:	d906      	bls.n	80120c6 <USB_SetTurnaroundTime+0x82>
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	4a2e      	ldr	r2, [pc, #184]	@ (8012174 <USB_SetTurnaroundTime+0x130>)
 80120bc:	4293      	cmp	r3, r2
 80120be:	d802      	bhi.n	80120c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80120c0:	230b      	movs	r3, #11
 80120c2:	617b      	str	r3, [r7, #20]
 80120c4:	e036      	b.n	8012134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80120c6:	68bb      	ldr	r3, [r7, #8]
 80120c8:	4a2a      	ldr	r2, [pc, #168]	@ (8012174 <USB_SetTurnaroundTime+0x130>)
 80120ca:	4293      	cmp	r3, r2
 80120cc:	d906      	bls.n	80120dc <USB_SetTurnaroundTime+0x98>
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	4a29      	ldr	r2, [pc, #164]	@ (8012178 <USB_SetTurnaroundTime+0x134>)
 80120d2:	4293      	cmp	r3, r2
 80120d4:	d802      	bhi.n	80120dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80120d6:	230a      	movs	r3, #10
 80120d8:	617b      	str	r3, [r7, #20]
 80120da:	e02b      	b.n	8012134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	4a26      	ldr	r2, [pc, #152]	@ (8012178 <USB_SetTurnaroundTime+0x134>)
 80120e0:	4293      	cmp	r3, r2
 80120e2:	d906      	bls.n	80120f2 <USB_SetTurnaroundTime+0xae>
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	4a25      	ldr	r2, [pc, #148]	@ (801217c <USB_SetTurnaroundTime+0x138>)
 80120e8:	4293      	cmp	r3, r2
 80120ea:	d202      	bcs.n	80120f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80120ec:	2309      	movs	r3, #9
 80120ee:	617b      	str	r3, [r7, #20]
 80120f0:	e020      	b.n	8012134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	4a21      	ldr	r2, [pc, #132]	@ (801217c <USB_SetTurnaroundTime+0x138>)
 80120f6:	4293      	cmp	r3, r2
 80120f8:	d306      	bcc.n	8012108 <USB_SetTurnaroundTime+0xc4>
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	4a20      	ldr	r2, [pc, #128]	@ (8012180 <USB_SetTurnaroundTime+0x13c>)
 80120fe:	4293      	cmp	r3, r2
 8012100:	d802      	bhi.n	8012108 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012102:	2308      	movs	r3, #8
 8012104:	617b      	str	r3, [r7, #20]
 8012106:	e015      	b.n	8012134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	4a1d      	ldr	r2, [pc, #116]	@ (8012180 <USB_SetTurnaroundTime+0x13c>)
 801210c:	4293      	cmp	r3, r2
 801210e:	d906      	bls.n	801211e <USB_SetTurnaroundTime+0xda>
 8012110:	68bb      	ldr	r3, [r7, #8]
 8012112:	4a1c      	ldr	r2, [pc, #112]	@ (8012184 <USB_SetTurnaroundTime+0x140>)
 8012114:	4293      	cmp	r3, r2
 8012116:	d202      	bcs.n	801211e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012118:	2307      	movs	r3, #7
 801211a:	617b      	str	r3, [r7, #20]
 801211c:	e00a      	b.n	8012134 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801211e:	2306      	movs	r3, #6
 8012120:	617b      	str	r3, [r7, #20]
 8012122:	e007      	b.n	8012134 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012124:	79fb      	ldrb	r3, [r7, #7]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d102      	bne.n	8012130 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801212a:	2309      	movs	r3, #9
 801212c:	617b      	str	r3, [r7, #20]
 801212e:	e001      	b.n	8012134 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012130:	2309      	movs	r3, #9
 8012132:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	68db      	ldr	r3, [r3, #12]
 8012138:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	68da      	ldr	r2, [r3, #12]
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	029b      	lsls	r3, r3, #10
 8012148:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 801214c:	431a      	orrs	r2, r3
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012152:	2300      	movs	r3, #0
}
 8012154:	4618      	mov	r0, r3
 8012156:	371c      	adds	r7, #28
 8012158:	46bd      	mov	sp, r7
 801215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215e:	4770      	bx	lr
 8012160:	00d8acbf 	.word	0x00d8acbf
 8012164:	00e4e1c0 	.word	0x00e4e1c0
 8012168:	00f42400 	.word	0x00f42400
 801216c:	01067380 	.word	0x01067380
 8012170:	011a499f 	.word	0x011a499f
 8012174:	01312cff 	.word	0x01312cff
 8012178:	014ca43f 	.word	0x014ca43f
 801217c:	016e3600 	.word	0x016e3600
 8012180:	01a6ab1f 	.word	0x01a6ab1f
 8012184:	01e84800 	.word	0x01e84800

08012188 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012188:	b480      	push	{r7}
 801218a:	b083      	sub	sp, #12
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	689b      	ldr	r3, [r3, #8]
 8012194:	f043 0201 	orr.w	r2, r3, #1
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801219c:	2300      	movs	r3, #0
}
 801219e:	4618      	mov	r0, r3
 80121a0:	370c      	adds	r7, #12
 80121a2:	46bd      	mov	sp, r7
 80121a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a8:	4770      	bx	lr

080121aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80121aa:	b480      	push	{r7}
 80121ac:	b083      	sub	sp, #12
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	689b      	ldr	r3, [r3, #8]
 80121b6:	f023 0201 	bic.w	r2, r3, #1
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80121be:	2300      	movs	r3, #0
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	370c      	adds	r7, #12
 80121c4:	46bd      	mov	sp, r7
 80121c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ca:	4770      	bx	lr

080121cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b084      	sub	sp, #16
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	460b      	mov	r3, r1
 80121d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80121d8:	2300      	movs	r3, #0
 80121da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80121e8:	78fb      	ldrb	r3, [r7, #3]
 80121ea:	2b01      	cmp	r3, #1
 80121ec:	d115      	bne.n	801221a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80121fa:	200a      	movs	r0, #10
 80121fc:	f7f2 fab8 	bl	8004770 <HAL_Delay>
      ms += 10U;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	330a      	adds	r3, #10
 8012204:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f001 f93f 	bl	801348a <USB_GetMode>
 801220c:	4603      	mov	r3, r0
 801220e:	2b01      	cmp	r3, #1
 8012210:	d01e      	beq.n	8012250 <USB_SetCurrentMode+0x84>
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	2bc7      	cmp	r3, #199	@ 0xc7
 8012216:	d9f0      	bls.n	80121fa <USB_SetCurrentMode+0x2e>
 8012218:	e01a      	b.n	8012250 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801221a:	78fb      	ldrb	r3, [r7, #3]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d115      	bne.n	801224c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	68db      	ldr	r3, [r3, #12]
 8012224:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801222c:	200a      	movs	r0, #10
 801222e:	f7f2 fa9f 	bl	8004770 <HAL_Delay>
      ms += 10U;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	330a      	adds	r3, #10
 8012236:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f001 f926 	bl	801348a <USB_GetMode>
 801223e:	4603      	mov	r3, r0
 8012240:	2b00      	cmp	r3, #0
 8012242:	d005      	beq.n	8012250 <USB_SetCurrentMode+0x84>
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	2bc7      	cmp	r3, #199	@ 0xc7
 8012248:	d9f0      	bls.n	801222c <USB_SetCurrentMode+0x60>
 801224a:	e001      	b.n	8012250 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801224c:	2301      	movs	r3, #1
 801224e:	e005      	b.n	801225c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	2bc8      	cmp	r3, #200	@ 0xc8
 8012254:	d101      	bne.n	801225a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012256:	2301      	movs	r3, #1
 8012258:	e000      	b.n	801225c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801225a:	2300      	movs	r3, #0
}
 801225c:	4618      	mov	r0, r3
 801225e:	3710      	adds	r7, #16
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}

08012264 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012264:	b084      	sub	sp, #16
 8012266:	b580      	push	{r7, lr}
 8012268:	b086      	sub	sp, #24
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
 801226e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012276:	2300      	movs	r3, #0
 8012278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801227e:	2300      	movs	r3, #0
 8012280:	613b      	str	r3, [r7, #16]
 8012282:	e009      	b.n	8012298 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012284:	687a      	ldr	r2, [r7, #4]
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	3340      	adds	r3, #64	@ 0x40
 801228a:	009b      	lsls	r3, r3, #2
 801228c:	4413      	add	r3, r2
 801228e:	2200      	movs	r2, #0
 8012290:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	3301      	adds	r3, #1
 8012296:	613b      	str	r3, [r7, #16]
 8012298:	693b      	ldr	r3, [r7, #16]
 801229a:	2b0e      	cmp	r3, #14
 801229c:	d9f2      	bls.n	8012284 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801229e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d11c      	bne.n	80122e0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122ac:	685b      	ldr	r3, [r3, #4]
 80122ae:	68fa      	ldr	r2, [r7, #12]
 80122b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80122b4:	f043 0302 	orr.w	r3, r3, #2
 80122b8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122be:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	601a      	str	r2, [r3, #0]
 80122de:	e005      	b.n	80122ec <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80122f2:	461a      	mov	r2, r3
 80122f4:	2300      	movs	r3, #0
 80122f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80122f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80122fc:	2b01      	cmp	r3, #1
 80122fe:	d10d      	bne.n	801231c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012304:	2b00      	cmp	r3, #0
 8012306:	d104      	bne.n	8012312 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012308:	2100      	movs	r1, #0
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 f968 	bl	80125e0 <USB_SetDevSpeed>
 8012310:	e008      	b.n	8012324 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012312:	2101      	movs	r1, #1
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f000 f963 	bl	80125e0 <USB_SetDevSpeed>
 801231a:	e003      	b.n	8012324 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801231c:	2103      	movs	r1, #3
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	f000 f95e 	bl	80125e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012324:	2110      	movs	r1, #16
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f000 f8fa 	bl	8012520 <USB_FlushTxFifo>
 801232c:	4603      	mov	r3, r0
 801232e:	2b00      	cmp	r3, #0
 8012330:	d001      	beq.n	8012336 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8012332:	2301      	movs	r3, #1
 8012334:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f000 f924 	bl	8012584 <USB_FlushRxFifo>
 801233c:	4603      	mov	r3, r0
 801233e:	2b00      	cmp	r3, #0
 8012340:	d001      	beq.n	8012346 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8012342:	2301      	movs	r3, #1
 8012344:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801234c:	461a      	mov	r2, r3
 801234e:	2300      	movs	r3, #0
 8012350:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012358:	461a      	mov	r2, r3
 801235a:	2300      	movs	r3, #0
 801235c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012364:	461a      	mov	r2, r3
 8012366:	2300      	movs	r3, #0
 8012368:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801236a:	2300      	movs	r3, #0
 801236c:	613b      	str	r3, [r7, #16]
 801236e:	e043      	b.n	80123f8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	015a      	lsls	r2, r3, #5
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	4413      	add	r3, r2
 8012378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012382:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012386:	d118      	bne.n	80123ba <USB_DevInit+0x156>
    {
      if (i == 0U)
 8012388:	693b      	ldr	r3, [r7, #16]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d10a      	bne.n	80123a4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801238e:	693b      	ldr	r3, [r7, #16]
 8012390:	015a      	lsls	r2, r3, #5
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	4413      	add	r3, r2
 8012396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801239a:	461a      	mov	r2, r3
 801239c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80123a0:	6013      	str	r3, [r2, #0]
 80123a2:	e013      	b.n	80123cc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80123a4:	693b      	ldr	r3, [r7, #16]
 80123a6:	015a      	lsls	r2, r3, #5
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	4413      	add	r3, r2
 80123ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123b0:	461a      	mov	r2, r3
 80123b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80123b6:	6013      	str	r3, [r2, #0]
 80123b8:	e008      	b.n	80123cc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	015a      	lsls	r2, r3, #5
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	4413      	add	r3, r2
 80123c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123c6:	461a      	mov	r2, r3
 80123c8:	2300      	movs	r3, #0
 80123ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	015a      	lsls	r2, r3, #5
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	4413      	add	r3, r2
 80123d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123d8:	461a      	mov	r2, r3
 80123da:	2300      	movs	r3, #0
 80123dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80123de:	693b      	ldr	r3, [r7, #16]
 80123e0:	015a      	lsls	r2, r3, #5
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	4413      	add	r3, r2
 80123e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123ea:	461a      	mov	r2, r3
 80123ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80123f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	3301      	adds	r3, #1
 80123f6:	613b      	str	r3, [r7, #16]
 80123f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80123fc:	461a      	mov	r2, r3
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	4293      	cmp	r3, r2
 8012402:	d3b5      	bcc.n	8012370 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012404:	2300      	movs	r3, #0
 8012406:	613b      	str	r3, [r7, #16]
 8012408:	e043      	b.n	8012492 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	015a      	lsls	r2, r3, #5
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	4413      	add	r3, r2
 8012412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801241c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012420:	d118      	bne.n	8012454 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8012422:	693b      	ldr	r3, [r7, #16]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d10a      	bne.n	801243e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012428:	693b      	ldr	r3, [r7, #16]
 801242a:	015a      	lsls	r2, r3, #5
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	4413      	add	r3, r2
 8012430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012434:	461a      	mov	r2, r3
 8012436:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801243a:	6013      	str	r3, [r2, #0]
 801243c:	e013      	b.n	8012466 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	015a      	lsls	r2, r3, #5
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	4413      	add	r3, r2
 8012446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801244a:	461a      	mov	r2, r3
 801244c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012450:	6013      	str	r3, [r2, #0]
 8012452:	e008      	b.n	8012466 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	015a      	lsls	r2, r3, #5
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	4413      	add	r3, r2
 801245c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012460:	461a      	mov	r2, r3
 8012462:	2300      	movs	r3, #0
 8012464:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	015a      	lsls	r2, r3, #5
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	4413      	add	r3, r2
 801246e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012472:	461a      	mov	r2, r3
 8012474:	2300      	movs	r3, #0
 8012476:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	015a      	lsls	r2, r3, #5
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	4413      	add	r3, r2
 8012480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012484:	461a      	mov	r2, r3
 8012486:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801248a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	3301      	adds	r3, #1
 8012490:	613b      	str	r3, [r7, #16]
 8012492:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012496:	461a      	mov	r2, r3
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	4293      	cmp	r3, r2
 801249c:	d3b5      	bcc.n	801240a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80124a4:	691b      	ldr	r3, [r3, #16]
 80124a6:	68fa      	ldr	r2, [r7, #12]
 80124a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80124ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80124b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2200      	movs	r2, #0
 80124b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80124be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80124c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d105      	bne.n	80124d4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	699b      	ldr	r3, [r3, #24]
 80124cc:	f043 0210 	orr.w	r2, r3, #16
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	699a      	ldr	r2, [r3, #24]
 80124d8:	4b0f      	ldr	r3, [pc, #60]	@ (8012518 <USB_DevInit+0x2b4>)
 80124da:	4313      	orrs	r3, r2
 80124dc:	687a      	ldr	r2, [r7, #4]
 80124de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80124e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d005      	beq.n	80124f4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	699b      	ldr	r3, [r3, #24]
 80124ec:	f043 0208 	orr.w	r2, r3, #8
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80124f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80124f8:	2b01      	cmp	r3, #1
 80124fa:	d105      	bne.n	8012508 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	699a      	ldr	r2, [r3, #24]
 8012500:	4b06      	ldr	r3, [pc, #24]	@ (801251c <USB_DevInit+0x2b8>)
 8012502:	4313      	orrs	r3, r2
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012508:	7dfb      	ldrb	r3, [r7, #23]
}
 801250a:	4618      	mov	r0, r3
 801250c:	3718      	adds	r7, #24
 801250e:	46bd      	mov	sp, r7
 8012510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012514:	b004      	add	sp, #16
 8012516:	4770      	bx	lr
 8012518:	803c3800 	.word	0x803c3800
 801251c:	40000004 	.word	0x40000004

08012520 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012520:	b480      	push	{r7}
 8012522:	b085      	sub	sp, #20
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801252a:	2300      	movs	r3, #0
 801252c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	3301      	adds	r3, #1
 8012532:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801253a:	d901      	bls.n	8012540 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801253c:	2303      	movs	r3, #3
 801253e:	e01b      	b.n	8012578 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	691b      	ldr	r3, [r3, #16]
 8012544:	2b00      	cmp	r3, #0
 8012546:	daf2      	bge.n	801252e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012548:	2300      	movs	r3, #0
 801254a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	019b      	lsls	r3, r3, #6
 8012550:	f043 0220 	orr.w	r2, r3, #32
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	3301      	adds	r3, #1
 801255c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012564:	d901      	bls.n	801256a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012566:	2303      	movs	r3, #3
 8012568:	e006      	b.n	8012578 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	691b      	ldr	r3, [r3, #16]
 801256e:	f003 0320 	and.w	r3, r3, #32
 8012572:	2b20      	cmp	r3, #32
 8012574:	d0f0      	beq.n	8012558 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012576:	2300      	movs	r3, #0
}
 8012578:	4618      	mov	r0, r3
 801257a:	3714      	adds	r7, #20
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr

08012584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012584:	b480      	push	{r7}
 8012586:	b085      	sub	sp, #20
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801258c:	2300      	movs	r3, #0
 801258e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	3301      	adds	r3, #1
 8012594:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801259c:	d901      	bls.n	80125a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801259e:	2303      	movs	r3, #3
 80125a0:	e018      	b.n	80125d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	691b      	ldr	r3, [r3, #16]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	daf2      	bge.n	8012590 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80125aa:	2300      	movs	r3, #0
 80125ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2210      	movs	r2, #16
 80125b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	3301      	adds	r3, #1
 80125b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80125c0:	d901      	bls.n	80125c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80125c2:	2303      	movs	r3, #3
 80125c4:	e006      	b.n	80125d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	691b      	ldr	r3, [r3, #16]
 80125ca:	f003 0310 	and.w	r3, r3, #16
 80125ce:	2b10      	cmp	r3, #16
 80125d0:	d0f0      	beq.n	80125b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80125d2:	2300      	movs	r3, #0
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3714      	adds	r7, #20
 80125d8:	46bd      	mov	sp, r7
 80125da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125de:	4770      	bx	lr

080125e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80125e0:	b480      	push	{r7}
 80125e2:	b085      	sub	sp, #20
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	460b      	mov	r3, r1
 80125ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80125f6:	681a      	ldr	r2, [r3, #0]
 80125f8:	78fb      	ldrb	r3, [r7, #3]
 80125fa:	68f9      	ldr	r1, [r7, #12]
 80125fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012600:	4313      	orrs	r3, r2
 8012602:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012604:	2300      	movs	r3, #0
}
 8012606:	4618      	mov	r0, r3
 8012608:	3714      	adds	r7, #20
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr

08012612 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8012612:	b480      	push	{r7}
 8012614:	b087      	sub	sp, #28
 8012616:	af00      	add	r7, sp, #0
 8012618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012624:	689b      	ldr	r3, [r3, #8]
 8012626:	f003 0306 	and.w	r3, r3, #6
 801262a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d102      	bne.n	8012638 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012632:	2300      	movs	r3, #0
 8012634:	75fb      	strb	r3, [r7, #23]
 8012636:	e00a      	b.n	801264e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	2b02      	cmp	r3, #2
 801263c:	d002      	beq.n	8012644 <USB_GetDevSpeed+0x32>
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	2b06      	cmp	r3, #6
 8012642:	d102      	bne.n	801264a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012644:	2302      	movs	r3, #2
 8012646:	75fb      	strb	r3, [r7, #23]
 8012648:	e001      	b.n	801264e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801264a:	230f      	movs	r3, #15
 801264c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801264e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012650:	4618      	mov	r0, r3
 8012652:	371c      	adds	r7, #28
 8012654:	46bd      	mov	sp, r7
 8012656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265a:	4770      	bx	lr

0801265c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801265c:	b480      	push	{r7}
 801265e:	b085      	sub	sp, #20
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	785b      	ldrb	r3, [r3, #1]
 8012674:	2b01      	cmp	r3, #1
 8012676:	d139      	bne.n	80126ec <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801267e:	69da      	ldr	r2, [r3, #28]
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	781b      	ldrb	r3, [r3, #0]
 8012684:	f003 030f 	and.w	r3, r3, #15
 8012688:	2101      	movs	r1, #1
 801268a:	fa01 f303 	lsl.w	r3, r1, r3
 801268e:	b29b      	uxth	r3, r3
 8012690:	68f9      	ldr	r1, [r7, #12]
 8012692:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012696:	4313      	orrs	r3, r2
 8012698:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	015a      	lsls	r2, r3, #5
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	4413      	add	r3, r2
 80126a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d153      	bne.n	8012758 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	015a      	lsls	r2, r3, #5
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	4413      	add	r3, r2
 80126b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126bc:	681a      	ldr	r2, [r3, #0]
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	689b      	ldr	r3, [r3, #8]
 80126c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	791b      	ldrb	r3, [r3, #4]
 80126ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80126cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	059b      	lsls	r3, r3, #22
 80126d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80126d4:	431a      	orrs	r2, r3
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	0159      	lsls	r1, r3, #5
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	440b      	add	r3, r1
 80126de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126e2:	4619      	mov	r1, r3
 80126e4:	4b20      	ldr	r3, [pc, #128]	@ (8012768 <USB_ActivateEndpoint+0x10c>)
 80126e6:	4313      	orrs	r3, r2
 80126e8:	600b      	str	r3, [r1, #0]
 80126ea:	e035      	b.n	8012758 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80126f2:	69da      	ldr	r2, [r3, #28]
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	781b      	ldrb	r3, [r3, #0]
 80126f8:	f003 030f 	and.w	r3, r3, #15
 80126fc:	2101      	movs	r1, #1
 80126fe:	fa01 f303 	lsl.w	r3, r1, r3
 8012702:	041b      	lsls	r3, r3, #16
 8012704:	68f9      	ldr	r1, [r7, #12]
 8012706:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801270a:	4313      	orrs	r3, r2
 801270c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801270e:	68bb      	ldr	r3, [r7, #8]
 8012710:	015a      	lsls	r2, r3, #5
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	4413      	add	r3, r2
 8012716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012720:	2b00      	cmp	r3, #0
 8012722:	d119      	bne.n	8012758 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	015a      	lsls	r2, r3, #5
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	4413      	add	r3, r2
 801272c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012730:	681a      	ldr	r2, [r3, #0]
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	689b      	ldr	r3, [r3, #8]
 8012736:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	791b      	ldrb	r3, [r3, #4]
 801273e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012740:	430b      	orrs	r3, r1
 8012742:	431a      	orrs	r2, r3
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	0159      	lsls	r1, r3, #5
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	440b      	add	r3, r1
 801274c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012750:	4619      	mov	r1, r3
 8012752:	4b05      	ldr	r3, [pc, #20]	@ (8012768 <USB_ActivateEndpoint+0x10c>)
 8012754:	4313      	orrs	r3, r2
 8012756:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012758:	2300      	movs	r3, #0
}
 801275a:	4618      	mov	r0, r3
 801275c:	3714      	adds	r7, #20
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr
 8012766:	bf00      	nop
 8012768:	10008000 	.word	0x10008000

0801276c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801276c:	b480      	push	{r7}
 801276e:	b085      	sub	sp, #20
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	781b      	ldrb	r3, [r3, #0]
 801277e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	785b      	ldrb	r3, [r3, #1]
 8012784:	2b01      	cmp	r3, #1
 8012786:	d161      	bne.n	801284c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012788:	68bb      	ldr	r3, [r7, #8]
 801278a:	015a      	lsls	r2, r3, #5
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	4413      	add	r3, r2
 8012790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801279a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801279e:	d11f      	bne.n	80127e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	015a      	lsls	r2, r3, #5
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	4413      	add	r3, r2
 80127a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	68ba      	ldr	r2, [r7, #8]
 80127b0:	0151      	lsls	r1, r2, #5
 80127b2:	68fa      	ldr	r2, [r7, #12]
 80127b4:	440a      	add	r2, r1
 80127b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80127ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80127be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80127c0:	68bb      	ldr	r3, [r7, #8]
 80127c2:	015a      	lsls	r2, r3, #5
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	4413      	add	r3, r2
 80127c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	68ba      	ldr	r2, [r7, #8]
 80127d0:	0151      	lsls	r1, r2, #5
 80127d2:	68fa      	ldr	r2, [r7, #12]
 80127d4:	440a      	add	r2, r1
 80127d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80127da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80127de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	781b      	ldrb	r3, [r3, #0]
 80127ec:	f003 030f 	and.w	r3, r3, #15
 80127f0:	2101      	movs	r1, #1
 80127f2:	fa01 f303 	lsl.w	r3, r1, r3
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	43db      	mvns	r3, r3
 80127fa:	68f9      	ldr	r1, [r7, #12]
 80127fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012800:	4013      	ands	r3, r2
 8012802:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801280a:	69da      	ldr	r2, [r3, #28]
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	f003 030f 	and.w	r3, r3, #15
 8012814:	2101      	movs	r1, #1
 8012816:	fa01 f303 	lsl.w	r3, r1, r3
 801281a:	b29b      	uxth	r3, r3
 801281c:	43db      	mvns	r3, r3
 801281e:	68f9      	ldr	r1, [r7, #12]
 8012820:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012824:	4013      	ands	r3, r2
 8012826:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	015a      	lsls	r2, r3, #5
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	4413      	add	r3, r2
 8012830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012834:	681a      	ldr	r2, [r3, #0]
 8012836:	68bb      	ldr	r3, [r7, #8]
 8012838:	0159      	lsls	r1, r3, #5
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	440b      	add	r3, r1
 801283e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012842:	4619      	mov	r1, r3
 8012844:	4b35      	ldr	r3, [pc, #212]	@ (801291c <USB_DeactivateEndpoint+0x1b0>)
 8012846:	4013      	ands	r3, r2
 8012848:	600b      	str	r3, [r1, #0]
 801284a:	e060      	b.n	801290e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	015a      	lsls	r2, r3, #5
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	4413      	add	r3, r2
 8012854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801285e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012862:	d11f      	bne.n	80128a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	015a      	lsls	r2, r3, #5
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	4413      	add	r3, r2
 801286c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	68ba      	ldr	r2, [r7, #8]
 8012874:	0151      	lsls	r1, r2, #5
 8012876:	68fa      	ldr	r2, [r7, #12]
 8012878:	440a      	add	r2, r1
 801287a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801287e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012882:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	015a      	lsls	r2, r3, #5
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	4413      	add	r3, r2
 801288c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	68ba      	ldr	r2, [r7, #8]
 8012894:	0151      	lsls	r1, r2, #5
 8012896:	68fa      	ldr	r2, [r7, #12]
 8012898:	440a      	add	r2, r1
 801289a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801289e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80128a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80128aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	f003 030f 	and.w	r3, r3, #15
 80128b4:	2101      	movs	r1, #1
 80128b6:	fa01 f303 	lsl.w	r3, r1, r3
 80128ba:	041b      	lsls	r3, r3, #16
 80128bc:	43db      	mvns	r3, r3
 80128be:	68f9      	ldr	r1, [r7, #12]
 80128c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80128c4:	4013      	ands	r3, r2
 80128c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80128ce:	69da      	ldr	r2, [r3, #28]
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	f003 030f 	and.w	r3, r3, #15
 80128d8:	2101      	movs	r1, #1
 80128da:	fa01 f303 	lsl.w	r3, r1, r3
 80128de:	041b      	lsls	r3, r3, #16
 80128e0:	43db      	mvns	r3, r3
 80128e2:	68f9      	ldr	r1, [r7, #12]
 80128e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80128e8:	4013      	ands	r3, r2
 80128ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	015a      	lsls	r2, r3, #5
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	4413      	add	r3, r2
 80128f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80128f8:	681a      	ldr	r2, [r3, #0]
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	0159      	lsls	r1, r3, #5
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	440b      	add	r3, r1
 8012902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012906:	4619      	mov	r1, r3
 8012908:	4b05      	ldr	r3, [pc, #20]	@ (8012920 <USB_DeactivateEndpoint+0x1b4>)
 801290a:	4013      	ands	r3, r2
 801290c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801290e:	2300      	movs	r3, #0
}
 8012910:	4618      	mov	r0, r3
 8012912:	3714      	adds	r7, #20
 8012914:	46bd      	mov	sp, r7
 8012916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291a:	4770      	bx	lr
 801291c:	ec337800 	.word	0xec337800
 8012920:	eff37800 	.word	0xeff37800

08012924 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b08a      	sub	sp, #40	@ 0x28
 8012928:	af02      	add	r7, sp, #8
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	4613      	mov	r3, r2
 8012930:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	785b      	ldrb	r3, [r3, #1]
 8012940:	2b01      	cmp	r3, #1
 8012942:	f040 8185 	bne.w	8012c50 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	691b      	ldr	r3, [r3, #16]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d132      	bne.n	80129b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801294e:	69bb      	ldr	r3, [r7, #24]
 8012950:	015a      	lsls	r2, r3, #5
 8012952:	69fb      	ldr	r3, [r7, #28]
 8012954:	4413      	add	r3, r2
 8012956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801295a:	691a      	ldr	r2, [r3, #16]
 801295c:	69bb      	ldr	r3, [r7, #24]
 801295e:	0159      	lsls	r1, r3, #5
 8012960:	69fb      	ldr	r3, [r7, #28]
 8012962:	440b      	add	r3, r1
 8012964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012968:	4619      	mov	r1, r3
 801296a:	4ba7      	ldr	r3, [pc, #668]	@ (8012c08 <USB_EPStartXfer+0x2e4>)
 801296c:	4013      	ands	r3, r2
 801296e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012970:	69bb      	ldr	r3, [r7, #24]
 8012972:	015a      	lsls	r2, r3, #5
 8012974:	69fb      	ldr	r3, [r7, #28]
 8012976:	4413      	add	r3, r2
 8012978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801297c:	691b      	ldr	r3, [r3, #16]
 801297e:	69ba      	ldr	r2, [r7, #24]
 8012980:	0151      	lsls	r1, r2, #5
 8012982:	69fa      	ldr	r2, [r7, #28]
 8012984:	440a      	add	r2, r1
 8012986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801298a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801298e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012990:	69bb      	ldr	r3, [r7, #24]
 8012992:	015a      	lsls	r2, r3, #5
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	4413      	add	r3, r2
 8012998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801299c:	691a      	ldr	r2, [r3, #16]
 801299e:	69bb      	ldr	r3, [r7, #24]
 80129a0:	0159      	lsls	r1, r3, #5
 80129a2:	69fb      	ldr	r3, [r7, #28]
 80129a4:	440b      	add	r3, r1
 80129a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80129aa:	4619      	mov	r1, r3
 80129ac:	4b97      	ldr	r3, [pc, #604]	@ (8012c0c <USB_EPStartXfer+0x2e8>)
 80129ae:	4013      	ands	r3, r2
 80129b0:	610b      	str	r3, [r1, #16]
 80129b2:	e097      	b.n	8012ae4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80129b4:	69bb      	ldr	r3, [r7, #24]
 80129b6:	015a      	lsls	r2, r3, #5
 80129b8:	69fb      	ldr	r3, [r7, #28]
 80129ba:	4413      	add	r3, r2
 80129bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80129c0:	691a      	ldr	r2, [r3, #16]
 80129c2:	69bb      	ldr	r3, [r7, #24]
 80129c4:	0159      	lsls	r1, r3, #5
 80129c6:	69fb      	ldr	r3, [r7, #28]
 80129c8:	440b      	add	r3, r1
 80129ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80129ce:	4619      	mov	r1, r3
 80129d0:	4b8e      	ldr	r3, [pc, #568]	@ (8012c0c <USB_EPStartXfer+0x2e8>)
 80129d2:	4013      	ands	r3, r2
 80129d4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80129d6:	69bb      	ldr	r3, [r7, #24]
 80129d8:	015a      	lsls	r2, r3, #5
 80129da:	69fb      	ldr	r3, [r7, #28]
 80129dc:	4413      	add	r3, r2
 80129de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80129e2:	691a      	ldr	r2, [r3, #16]
 80129e4:	69bb      	ldr	r3, [r7, #24]
 80129e6:	0159      	lsls	r1, r3, #5
 80129e8:	69fb      	ldr	r3, [r7, #28]
 80129ea:	440b      	add	r3, r1
 80129ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80129f0:	4619      	mov	r1, r3
 80129f2:	4b85      	ldr	r3, [pc, #532]	@ (8012c08 <USB_EPStartXfer+0x2e4>)
 80129f4:	4013      	ands	r3, r2
 80129f6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80129f8:	69bb      	ldr	r3, [r7, #24]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d11a      	bne.n	8012a34 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	691a      	ldr	r2, [r3, #16]
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	689b      	ldr	r3, [r3, #8]
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d903      	bls.n	8012a12 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	689a      	ldr	r2, [r3, #8]
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012a12:	69bb      	ldr	r3, [r7, #24]
 8012a14:	015a      	lsls	r2, r3, #5
 8012a16:	69fb      	ldr	r3, [r7, #28]
 8012a18:	4413      	add	r3, r2
 8012a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012a1e:	691b      	ldr	r3, [r3, #16]
 8012a20:	69ba      	ldr	r2, [r7, #24]
 8012a22:	0151      	lsls	r1, r2, #5
 8012a24:	69fa      	ldr	r2, [r7, #28]
 8012a26:	440a      	add	r2, r1
 8012a28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012a2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012a30:	6113      	str	r3, [r2, #16]
 8012a32:	e044      	b.n	8012abe <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	691a      	ldr	r2, [r3, #16]
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	689b      	ldr	r3, [r3, #8]
 8012a3c:	4413      	add	r3, r2
 8012a3e:	1e5a      	subs	r2, r3, #1
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	689b      	ldr	r3, [r3, #8]
 8012a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a48:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8012a4a:	69bb      	ldr	r3, [r7, #24]
 8012a4c:	015a      	lsls	r2, r3, #5
 8012a4e:	69fb      	ldr	r3, [r7, #28]
 8012a50:	4413      	add	r3, r2
 8012a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012a56:	691a      	ldr	r2, [r3, #16]
 8012a58:	8afb      	ldrh	r3, [r7, #22]
 8012a5a:	04d9      	lsls	r1, r3, #19
 8012a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8012c10 <USB_EPStartXfer+0x2ec>)
 8012a5e:	400b      	ands	r3, r1
 8012a60:	69b9      	ldr	r1, [r7, #24]
 8012a62:	0148      	lsls	r0, r1, #5
 8012a64:	69f9      	ldr	r1, [r7, #28]
 8012a66:	4401      	add	r1, r0
 8012a68:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012a6c:	4313      	orrs	r3, r2
 8012a6e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	791b      	ldrb	r3, [r3, #4]
 8012a74:	2b01      	cmp	r3, #1
 8012a76:	d122      	bne.n	8012abe <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012a78:	69bb      	ldr	r3, [r7, #24]
 8012a7a:	015a      	lsls	r2, r3, #5
 8012a7c:	69fb      	ldr	r3, [r7, #28]
 8012a7e:	4413      	add	r3, r2
 8012a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012a84:	691b      	ldr	r3, [r3, #16]
 8012a86:	69ba      	ldr	r2, [r7, #24]
 8012a88:	0151      	lsls	r1, r2, #5
 8012a8a:	69fa      	ldr	r2, [r7, #28]
 8012a8c:	440a      	add	r2, r1
 8012a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012a92:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8012a96:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8012a98:	69bb      	ldr	r3, [r7, #24]
 8012a9a:	015a      	lsls	r2, r3, #5
 8012a9c:	69fb      	ldr	r3, [r7, #28]
 8012a9e:	4413      	add	r3, r2
 8012aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012aa4:	691a      	ldr	r2, [r3, #16]
 8012aa6:	8afb      	ldrh	r3, [r7, #22]
 8012aa8:	075b      	lsls	r3, r3, #29
 8012aaa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8012aae:	69b9      	ldr	r1, [r7, #24]
 8012ab0:	0148      	lsls	r0, r1, #5
 8012ab2:	69f9      	ldr	r1, [r7, #28]
 8012ab4:	4401      	add	r1, r0
 8012ab6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012aba:	4313      	orrs	r3, r2
 8012abc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012abe:	69bb      	ldr	r3, [r7, #24]
 8012ac0:	015a      	lsls	r2, r3, #5
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	4413      	add	r3, r2
 8012ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012aca:	691a      	ldr	r2, [r3, #16]
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	691b      	ldr	r3, [r3, #16]
 8012ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012ad4:	69b9      	ldr	r1, [r7, #24]
 8012ad6:	0148      	lsls	r0, r1, #5
 8012ad8:	69f9      	ldr	r1, [r7, #28]
 8012ada:	4401      	add	r1, r0
 8012adc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012ae0:	4313      	orrs	r3, r2
 8012ae2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012ae4:	79fb      	ldrb	r3, [r7, #7]
 8012ae6:	2b01      	cmp	r3, #1
 8012ae8:	d14b      	bne.n	8012b82 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	69db      	ldr	r3, [r3, #28]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d009      	beq.n	8012b06 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012af2:	69bb      	ldr	r3, [r7, #24]
 8012af4:	015a      	lsls	r2, r3, #5
 8012af6:	69fb      	ldr	r3, [r7, #28]
 8012af8:	4413      	add	r3, r2
 8012afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012afe:	461a      	mov	r2, r3
 8012b00:	68bb      	ldr	r3, [r7, #8]
 8012b02:	69db      	ldr	r3, [r3, #28]
 8012b04:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	791b      	ldrb	r3, [r3, #4]
 8012b0a:	2b01      	cmp	r3, #1
 8012b0c:	d128      	bne.n	8012b60 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012b0e:	69fb      	ldr	r3, [r7, #28]
 8012b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012b14:	689b      	ldr	r3, [r3, #8]
 8012b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d110      	bne.n	8012b40 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012b1e:	69bb      	ldr	r3, [r7, #24]
 8012b20:	015a      	lsls	r2, r3, #5
 8012b22:	69fb      	ldr	r3, [r7, #28]
 8012b24:	4413      	add	r3, r2
 8012b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	69ba      	ldr	r2, [r7, #24]
 8012b2e:	0151      	lsls	r1, r2, #5
 8012b30:	69fa      	ldr	r2, [r7, #28]
 8012b32:	440a      	add	r2, r1
 8012b34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012b38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012b3c:	6013      	str	r3, [r2, #0]
 8012b3e:	e00f      	b.n	8012b60 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012b40:	69bb      	ldr	r3, [r7, #24]
 8012b42:	015a      	lsls	r2, r3, #5
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	4413      	add	r3, r2
 8012b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	69ba      	ldr	r2, [r7, #24]
 8012b50:	0151      	lsls	r1, r2, #5
 8012b52:	69fa      	ldr	r2, [r7, #28]
 8012b54:	440a      	add	r2, r1
 8012b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012b5e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012b60:	69bb      	ldr	r3, [r7, #24]
 8012b62:	015a      	lsls	r2, r3, #5
 8012b64:	69fb      	ldr	r3, [r7, #28]
 8012b66:	4413      	add	r3, r2
 8012b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	69ba      	ldr	r2, [r7, #24]
 8012b70:	0151      	lsls	r1, r2, #5
 8012b72:	69fa      	ldr	r2, [r7, #28]
 8012b74:	440a      	add	r2, r1
 8012b76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012b7a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8012b7e:	6013      	str	r3, [r2, #0]
 8012b80:	e169      	b.n	8012e56 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012b82:	69bb      	ldr	r3, [r7, #24]
 8012b84:	015a      	lsls	r2, r3, #5
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	4413      	add	r3, r2
 8012b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	69ba      	ldr	r2, [r7, #24]
 8012b92:	0151      	lsls	r1, r2, #5
 8012b94:	69fa      	ldr	r2, [r7, #28]
 8012b96:	440a      	add	r2, r1
 8012b98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012b9c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8012ba0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	791b      	ldrb	r3, [r3, #4]
 8012ba6:	2b01      	cmp	r3, #1
 8012ba8:	d015      	beq.n	8012bd6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	691b      	ldr	r3, [r3, #16]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	f000 8151 	beq.w	8012e56 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012bb4:	69fb      	ldr	r3, [r7, #28]
 8012bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	781b      	ldrb	r3, [r3, #0]
 8012bc0:	f003 030f 	and.w	r3, r3, #15
 8012bc4:	2101      	movs	r1, #1
 8012bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8012bca:	69f9      	ldr	r1, [r7, #28]
 8012bcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012bd0:	4313      	orrs	r3, r2
 8012bd2:	634b      	str	r3, [r1, #52]	@ 0x34
 8012bd4:	e13f      	b.n	8012e56 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012bd6:	69fb      	ldr	r3, [r7, #28]
 8012bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012bdc:	689b      	ldr	r3, [r3, #8]
 8012bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d116      	bne.n	8012c14 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012be6:	69bb      	ldr	r3, [r7, #24]
 8012be8:	015a      	lsls	r2, r3, #5
 8012bea:	69fb      	ldr	r3, [r7, #28]
 8012bec:	4413      	add	r3, r2
 8012bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	69ba      	ldr	r2, [r7, #24]
 8012bf6:	0151      	lsls	r1, r2, #5
 8012bf8:	69fa      	ldr	r2, [r7, #28]
 8012bfa:	440a      	add	r2, r1
 8012bfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012c00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012c04:	6013      	str	r3, [r2, #0]
 8012c06:	e015      	b.n	8012c34 <USB_EPStartXfer+0x310>
 8012c08:	e007ffff 	.word	0xe007ffff
 8012c0c:	fff80000 	.word	0xfff80000
 8012c10:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012c14:	69bb      	ldr	r3, [r7, #24]
 8012c16:	015a      	lsls	r2, r3, #5
 8012c18:	69fb      	ldr	r3, [r7, #28]
 8012c1a:	4413      	add	r3, r2
 8012c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	69ba      	ldr	r2, [r7, #24]
 8012c24:	0151      	lsls	r1, r2, #5
 8012c26:	69fa      	ldr	r2, [r7, #28]
 8012c28:	440a      	add	r2, r1
 8012c2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012c32:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	68d9      	ldr	r1, [r3, #12]
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	781a      	ldrb	r2, [r3, #0]
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	691b      	ldr	r3, [r3, #16]
 8012c40:	b298      	uxth	r0, r3
 8012c42:	79fb      	ldrb	r3, [r7, #7]
 8012c44:	9300      	str	r3, [sp, #0]
 8012c46:	4603      	mov	r3, r0
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f000 f9b9 	bl	8012fc0 <USB_WritePacket>
 8012c4e:	e102      	b.n	8012e56 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012c50:	69bb      	ldr	r3, [r7, #24]
 8012c52:	015a      	lsls	r2, r3, #5
 8012c54:	69fb      	ldr	r3, [r7, #28]
 8012c56:	4413      	add	r3, r2
 8012c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c5c:	691a      	ldr	r2, [r3, #16]
 8012c5e:	69bb      	ldr	r3, [r7, #24]
 8012c60:	0159      	lsls	r1, r3, #5
 8012c62:	69fb      	ldr	r3, [r7, #28]
 8012c64:	440b      	add	r3, r1
 8012c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	4b7c      	ldr	r3, [pc, #496]	@ (8012e60 <USB_EPStartXfer+0x53c>)
 8012c6e:	4013      	ands	r3, r2
 8012c70:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012c72:	69bb      	ldr	r3, [r7, #24]
 8012c74:	015a      	lsls	r2, r3, #5
 8012c76:	69fb      	ldr	r3, [r7, #28]
 8012c78:	4413      	add	r3, r2
 8012c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c7e:	691a      	ldr	r2, [r3, #16]
 8012c80:	69bb      	ldr	r3, [r7, #24]
 8012c82:	0159      	lsls	r1, r3, #5
 8012c84:	69fb      	ldr	r3, [r7, #28]
 8012c86:	440b      	add	r3, r1
 8012c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c8c:	4619      	mov	r1, r3
 8012c8e:	4b75      	ldr	r3, [pc, #468]	@ (8012e64 <USB_EPStartXfer+0x540>)
 8012c90:	4013      	ands	r3, r2
 8012c92:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8012c94:	69bb      	ldr	r3, [r7, #24]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d12f      	bne.n	8012cfa <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	691b      	ldr	r3, [r3, #16]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d003      	beq.n	8012caa <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	689a      	ldr	r2, [r3, #8]
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	689a      	ldr	r2, [r3, #8]
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8012cb2:	69bb      	ldr	r3, [r7, #24]
 8012cb4:	015a      	lsls	r2, r3, #5
 8012cb6:	69fb      	ldr	r3, [r7, #28]
 8012cb8:	4413      	add	r3, r2
 8012cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012cbe:	691a      	ldr	r2, [r3, #16]
 8012cc0:	68bb      	ldr	r3, [r7, #8]
 8012cc2:	6a1b      	ldr	r3, [r3, #32]
 8012cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012cc8:	69b9      	ldr	r1, [r7, #24]
 8012cca:	0148      	lsls	r0, r1, #5
 8012ccc:	69f9      	ldr	r1, [r7, #28]
 8012cce:	4401      	add	r1, r0
 8012cd0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012cd4:	4313      	orrs	r3, r2
 8012cd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	015a      	lsls	r2, r3, #5
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	4413      	add	r3, r2
 8012ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012ce4:	691b      	ldr	r3, [r3, #16]
 8012ce6:	69ba      	ldr	r2, [r7, #24]
 8012ce8:	0151      	lsls	r1, r2, #5
 8012cea:	69fa      	ldr	r2, [r7, #28]
 8012cec:	440a      	add	r2, r1
 8012cee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012cf2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012cf6:	6113      	str	r3, [r2, #16]
 8012cf8:	e05f      	b.n	8012dba <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8012cfa:	68bb      	ldr	r3, [r7, #8]
 8012cfc:	691b      	ldr	r3, [r3, #16]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d123      	bne.n	8012d4a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012d02:	69bb      	ldr	r3, [r7, #24]
 8012d04:	015a      	lsls	r2, r3, #5
 8012d06:	69fb      	ldr	r3, [r7, #28]
 8012d08:	4413      	add	r3, r2
 8012d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012d0e:	691a      	ldr	r2, [r3, #16]
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	689b      	ldr	r3, [r3, #8]
 8012d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012d18:	69b9      	ldr	r1, [r7, #24]
 8012d1a:	0148      	lsls	r0, r1, #5
 8012d1c:	69f9      	ldr	r1, [r7, #28]
 8012d1e:	4401      	add	r1, r0
 8012d20:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012d24:	4313      	orrs	r3, r2
 8012d26:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012d28:	69bb      	ldr	r3, [r7, #24]
 8012d2a:	015a      	lsls	r2, r3, #5
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	4413      	add	r3, r2
 8012d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012d34:	691b      	ldr	r3, [r3, #16]
 8012d36:	69ba      	ldr	r2, [r7, #24]
 8012d38:	0151      	lsls	r1, r2, #5
 8012d3a:	69fa      	ldr	r2, [r7, #28]
 8012d3c:	440a      	add	r2, r1
 8012d3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012d42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012d46:	6113      	str	r3, [r2, #16]
 8012d48:	e037      	b.n	8012dba <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	691a      	ldr	r2, [r3, #16]
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	689b      	ldr	r3, [r3, #8]
 8012d52:	4413      	add	r3, r2
 8012d54:	1e5a      	subs	r2, r3, #1
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	689b      	ldr	r3, [r3, #8]
 8012d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012d5e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	689b      	ldr	r3, [r3, #8]
 8012d64:	8afa      	ldrh	r2, [r7, #22]
 8012d66:	fb03 f202 	mul.w	r2, r3, r2
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012d6e:	69bb      	ldr	r3, [r7, #24]
 8012d70:	015a      	lsls	r2, r3, #5
 8012d72:	69fb      	ldr	r3, [r7, #28]
 8012d74:	4413      	add	r3, r2
 8012d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012d7a:	691a      	ldr	r2, [r3, #16]
 8012d7c:	8afb      	ldrh	r3, [r7, #22]
 8012d7e:	04d9      	lsls	r1, r3, #19
 8012d80:	4b39      	ldr	r3, [pc, #228]	@ (8012e68 <USB_EPStartXfer+0x544>)
 8012d82:	400b      	ands	r3, r1
 8012d84:	69b9      	ldr	r1, [r7, #24]
 8012d86:	0148      	lsls	r0, r1, #5
 8012d88:	69f9      	ldr	r1, [r7, #28]
 8012d8a:	4401      	add	r1, r0
 8012d8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012d90:	4313      	orrs	r3, r2
 8012d92:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012d94:	69bb      	ldr	r3, [r7, #24]
 8012d96:	015a      	lsls	r2, r3, #5
 8012d98:	69fb      	ldr	r3, [r7, #28]
 8012d9a:	4413      	add	r3, r2
 8012d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012da0:	691a      	ldr	r2, [r3, #16]
 8012da2:	68bb      	ldr	r3, [r7, #8]
 8012da4:	6a1b      	ldr	r3, [r3, #32]
 8012da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012daa:	69b9      	ldr	r1, [r7, #24]
 8012dac:	0148      	lsls	r0, r1, #5
 8012dae:	69f9      	ldr	r1, [r7, #28]
 8012db0:	4401      	add	r1, r0
 8012db2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012db6:	4313      	orrs	r3, r2
 8012db8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8012dba:	79fb      	ldrb	r3, [r7, #7]
 8012dbc:	2b01      	cmp	r3, #1
 8012dbe:	d10d      	bne.n	8012ddc <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	68db      	ldr	r3, [r3, #12]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d009      	beq.n	8012ddc <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	68d9      	ldr	r1, [r3, #12]
 8012dcc:	69bb      	ldr	r3, [r7, #24]
 8012dce:	015a      	lsls	r2, r3, #5
 8012dd0:	69fb      	ldr	r3, [r7, #28]
 8012dd2:	4413      	add	r3, r2
 8012dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012dd8:	460a      	mov	r2, r1
 8012dda:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	791b      	ldrb	r3, [r3, #4]
 8012de0:	2b01      	cmp	r3, #1
 8012de2:	d128      	bne.n	8012e36 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012de4:	69fb      	ldr	r3, [r7, #28]
 8012de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012dea:	689b      	ldr	r3, [r3, #8]
 8012dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d110      	bne.n	8012e16 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	015a      	lsls	r2, r3, #5
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	4413      	add	r3, r2
 8012dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	69ba      	ldr	r2, [r7, #24]
 8012e04:	0151      	lsls	r1, r2, #5
 8012e06:	69fa      	ldr	r2, [r7, #28]
 8012e08:	440a      	add	r2, r1
 8012e0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012e0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012e12:	6013      	str	r3, [r2, #0]
 8012e14:	e00f      	b.n	8012e36 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012e16:	69bb      	ldr	r3, [r7, #24]
 8012e18:	015a      	lsls	r2, r3, #5
 8012e1a:	69fb      	ldr	r3, [r7, #28]
 8012e1c:	4413      	add	r3, r2
 8012e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	69ba      	ldr	r2, [r7, #24]
 8012e26:	0151      	lsls	r1, r2, #5
 8012e28:	69fa      	ldr	r2, [r7, #28]
 8012e2a:	440a      	add	r2, r1
 8012e2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012e34:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012e36:	69bb      	ldr	r3, [r7, #24]
 8012e38:	015a      	lsls	r2, r3, #5
 8012e3a:	69fb      	ldr	r3, [r7, #28]
 8012e3c:	4413      	add	r3, r2
 8012e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	69ba      	ldr	r2, [r7, #24]
 8012e46:	0151      	lsls	r1, r2, #5
 8012e48:	69fa      	ldr	r2, [r7, #28]
 8012e4a:	440a      	add	r2, r1
 8012e4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012e50:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8012e54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012e56:	2300      	movs	r3, #0
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3720      	adds	r7, #32
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	fff80000 	.word	0xfff80000
 8012e64:	e007ffff 	.word	0xe007ffff
 8012e68:	1ff80000 	.word	0x1ff80000

08012e6c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b087      	sub	sp, #28
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012e76:	2300      	movs	r3, #0
 8012e78:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	785b      	ldrb	r3, [r3, #1]
 8012e86:	2b01      	cmp	r3, #1
 8012e88:	d14a      	bne.n	8012f20 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	781b      	ldrb	r3, [r3, #0]
 8012e8e:	015a      	lsls	r2, r3, #5
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	4413      	add	r3, r2
 8012e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012ea2:	f040 8086 	bne.w	8012fb2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	015a      	lsls	r2, r3, #5
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	4413      	add	r3, r2
 8012eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	683a      	ldr	r2, [r7, #0]
 8012eb8:	7812      	ldrb	r2, [r2, #0]
 8012eba:	0151      	lsls	r1, r2, #5
 8012ebc:	693a      	ldr	r2, [r7, #16]
 8012ebe:	440a      	add	r2, r1
 8012ec0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012ec4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012ec8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	015a      	lsls	r2, r3, #5
 8012ed0:	693b      	ldr	r3, [r7, #16]
 8012ed2:	4413      	add	r3, r2
 8012ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	683a      	ldr	r2, [r7, #0]
 8012edc:	7812      	ldrb	r2, [r2, #0]
 8012ede:	0151      	lsls	r1, r2, #5
 8012ee0:	693a      	ldr	r2, [r7, #16]
 8012ee2:	440a      	add	r2, r1
 8012ee4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012ee8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012eec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	3301      	adds	r3, #1
 8012ef2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012efa:	4293      	cmp	r3, r2
 8012efc:	d902      	bls.n	8012f04 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012efe:	2301      	movs	r3, #1
 8012f00:	75fb      	strb	r3, [r7, #23]
          break;
 8012f02:	e056      	b.n	8012fb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	015a      	lsls	r2, r3, #5
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	4413      	add	r3, r2
 8012f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012f18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012f1c:	d0e7      	beq.n	8012eee <USB_EPStopXfer+0x82>
 8012f1e:	e048      	b.n	8012fb2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	781b      	ldrb	r3, [r3, #0]
 8012f24:	015a      	lsls	r2, r3, #5
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	4413      	add	r3, r2
 8012f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012f34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012f38:	d13b      	bne.n	8012fb2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	015a      	lsls	r2, r3, #5
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	4413      	add	r3, r2
 8012f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	683a      	ldr	r2, [r7, #0]
 8012f4c:	7812      	ldrb	r2, [r2, #0]
 8012f4e:	0151      	lsls	r1, r2, #5
 8012f50:	693a      	ldr	r2, [r7, #16]
 8012f52:	440a      	add	r2, r1
 8012f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012f58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012f5c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	015a      	lsls	r2, r3, #5
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	4413      	add	r3, r2
 8012f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	683a      	ldr	r2, [r7, #0]
 8012f70:	7812      	ldrb	r2, [r2, #0]
 8012f72:	0151      	lsls	r1, r2, #5
 8012f74:	693a      	ldr	r2, [r7, #16]
 8012f76:	440a      	add	r2, r1
 8012f78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012f7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012f80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	3301      	adds	r3, #1
 8012f86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	d902      	bls.n	8012f98 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012f92:	2301      	movs	r3, #1
 8012f94:	75fb      	strb	r3, [r7, #23]
          break;
 8012f96:	e00c      	b.n	8012fb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	781b      	ldrb	r3, [r3, #0]
 8012f9c:	015a      	lsls	r2, r3, #5
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	4413      	add	r3, r2
 8012fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012fac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012fb0:	d0e7      	beq.n	8012f82 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	371c      	adds	r7, #28
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbe:	4770      	bx	lr

08012fc0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012fc0:	b480      	push	{r7}
 8012fc2:	b089      	sub	sp, #36	@ 0x24
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	60f8      	str	r0, [r7, #12]
 8012fc8:	60b9      	str	r1, [r7, #8]
 8012fca:	4611      	mov	r1, r2
 8012fcc:	461a      	mov	r2, r3
 8012fce:	460b      	mov	r3, r1
 8012fd0:	71fb      	strb	r3, [r7, #7]
 8012fd2:	4613      	mov	r3, r2
 8012fd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012fde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d123      	bne.n	801302e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012fe6:	88bb      	ldrh	r3, [r7, #4]
 8012fe8:	3303      	adds	r3, #3
 8012fea:	089b      	lsrs	r3, r3, #2
 8012fec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012fee:	2300      	movs	r3, #0
 8012ff0:	61bb      	str	r3, [r7, #24]
 8012ff2:	e018      	b.n	8013026 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012ff4:	79fb      	ldrb	r3, [r7, #7]
 8012ff6:	031a      	lsls	r2, r3, #12
 8012ff8:	697b      	ldr	r3, [r7, #20]
 8012ffa:	4413      	add	r3, r2
 8012ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013000:	461a      	mov	r2, r3
 8013002:	69fb      	ldr	r3, [r7, #28]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013008:	69fb      	ldr	r3, [r7, #28]
 801300a:	3301      	adds	r3, #1
 801300c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801300e:	69fb      	ldr	r3, [r7, #28]
 8013010:	3301      	adds	r3, #1
 8013012:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013014:	69fb      	ldr	r3, [r7, #28]
 8013016:	3301      	adds	r3, #1
 8013018:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801301a:	69fb      	ldr	r3, [r7, #28]
 801301c:	3301      	adds	r3, #1
 801301e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013020:	69bb      	ldr	r3, [r7, #24]
 8013022:	3301      	adds	r3, #1
 8013024:	61bb      	str	r3, [r7, #24]
 8013026:	69ba      	ldr	r2, [r7, #24]
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	429a      	cmp	r2, r3
 801302c:	d3e2      	bcc.n	8012ff4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801302e:	2300      	movs	r3, #0
}
 8013030:	4618      	mov	r0, r3
 8013032:	3724      	adds	r7, #36	@ 0x24
 8013034:	46bd      	mov	sp, r7
 8013036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303a:	4770      	bx	lr

0801303c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801303c:	b480      	push	{r7}
 801303e:	b08b      	sub	sp, #44	@ 0x2c
 8013040:	af00      	add	r7, sp, #0
 8013042:	60f8      	str	r0, [r7, #12]
 8013044:	60b9      	str	r1, [r7, #8]
 8013046:	4613      	mov	r3, r2
 8013048:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013052:	88fb      	ldrh	r3, [r7, #6]
 8013054:	089b      	lsrs	r3, r3, #2
 8013056:	b29b      	uxth	r3, r3
 8013058:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801305a:	88fb      	ldrh	r3, [r7, #6]
 801305c:	f003 0303 	and.w	r3, r3, #3
 8013060:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013062:	2300      	movs	r3, #0
 8013064:	623b      	str	r3, [r7, #32]
 8013066:	e014      	b.n	8013092 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013068:	69bb      	ldr	r3, [r7, #24]
 801306a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801306e:	681a      	ldr	r2, [r3, #0]
 8013070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013072:	601a      	str	r2, [r3, #0]
    pDest++;
 8013074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013076:	3301      	adds	r3, #1
 8013078:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801307c:	3301      	adds	r3, #1
 801307e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013082:	3301      	adds	r3, #1
 8013084:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013088:	3301      	adds	r3, #1
 801308a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801308c:	6a3b      	ldr	r3, [r7, #32]
 801308e:	3301      	adds	r3, #1
 8013090:	623b      	str	r3, [r7, #32]
 8013092:	6a3a      	ldr	r2, [r7, #32]
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	429a      	cmp	r2, r3
 8013098:	d3e6      	bcc.n	8013068 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801309a:	8bfb      	ldrh	r3, [r7, #30]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d01e      	beq.n	80130de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80130a0:	2300      	movs	r3, #0
 80130a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80130a4:	69bb      	ldr	r3, [r7, #24]
 80130a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80130aa:	461a      	mov	r2, r3
 80130ac:	f107 0310 	add.w	r3, r7, #16
 80130b0:	6812      	ldr	r2, [r2, #0]
 80130b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80130b4:	693a      	ldr	r2, [r7, #16]
 80130b6:	6a3b      	ldr	r3, [r7, #32]
 80130b8:	b2db      	uxtb	r3, r3
 80130ba:	00db      	lsls	r3, r3, #3
 80130bc:	fa22 f303 	lsr.w	r3, r2, r3
 80130c0:	b2da      	uxtb	r2, r3
 80130c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130c4:	701a      	strb	r2, [r3, #0]
      i++;
 80130c6:	6a3b      	ldr	r3, [r7, #32]
 80130c8:	3301      	adds	r3, #1
 80130ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80130cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130ce:	3301      	adds	r3, #1
 80130d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80130d2:	8bfb      	ldrh	r3, [r7, #30]
 80130d4:	3b01      	subs	r3, #1
 80130d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80130d8:	8bfb      	ldrh	r3, [r7, #30]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d1ea      	bne.n	80130b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80130de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	372c      	adds	r7, #44	@ 0x2c
 80130e4:	46bd      	mov	sp, r7
 80130e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ea:	4770      	bx	lr

080130ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80130ec:	b480      	push	{r7}
 80130ee:	b085      	sub	sp, #20
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	781b      	ldrb	r3, [r3, #0]
 80130fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	785b      	ldrb	r3, [r3, #1]
 8013104:	2b01      	cmp	r3, #1
 8013106:	d12c      	bne.n	8013162 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	015a      	lsls	r2, r3, #5
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	4413      	add	r3, r2
 8013110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	2b00      	cmp	r3, #0
 8013118:	db12      	blt.n	8013140 <USB_EPSetStall+0x54>
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d00f      	beq.n	8013140 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	015a      	lsls	r2, r3, #5
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	4413      	add	r3, r2
 8013128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	68ba      	ldr	r2, [r7, #8]
 8013130:	0151      	lsls	r1, r2, #5
 8013132:	68fa      	ldr	r2, [r7, #12]
 8013134:	440a      	add	r2, r1
 8013136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801313a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801313e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	015a      	lsls	r2, r3, #5
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	4413      	add	r3, r2
 8013148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	68ba      	ldr	r2, [r7, #8]
 8013150:	0151      	lsls	r1, r2, #5
 8013152:	68fa      	ldr	r2, [r7, #12]
 8013154:	440a      	add	r2, r1
 8013156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801315a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801315e:	6013      	str	r3, [r2, #0]
 8013160:	e02b      	b.n	80131ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	015a      	lsls	r2, r3, #5
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	4413      	add	r3, r2
 801316a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	2b00      	cmp	r3, #0
 8013172:	db12      	blt.n	801319a <USB_EPSetStall+0xae>
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d00f      	beq.n	801319a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	015a      	lsls	r2, r3, #5
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	4413      	add	r3, r2
 8013182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	68ba      	ldr	r2, [r7, #8]
 801318a:	0151      	lsls	r1, r2, #5
 801318c:	68fa      	ldr	r2, [r7, #12]
 801318e:	440a      	add	r2, r1
 8013190:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013194:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013198:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	015a      	lsls	r2, r3, #5
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	4413      	add	r3, r2
 80131a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	68ba      	ldr	r2, [r7, #8]
 80131aa:	0151      	lsls	r1, r2, #5
 80131ac:	68fa      	ldr	r2, [r7, #12]
 80131ae:	440a      	add	r2, r1
 80131b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80131b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80131b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80131ba:	2300      	movs	r3, #0
}
 80131bc:	4618      	mov	r0, r3
 80131be:	3714      	adds	r7, #20
 80131c0:	46bd      	mov	sp, r7
 80131c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c6:	4770      	bx	lr

080131c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80131c8:	b480      	push	{r7}
 80131ca:	b085      	sub	sp, #20
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
 80131d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	781b      	ldrb	r3, [r3, #0]
 80131da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	785b      	ldrb	r3, [r3, #1]
 80131e0:	2b01      	cmp	r3, #1
 80131e2:	d128      	bne.n	8013236 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	015a      	lsls	r2, r3, #5
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	4413      	add	r3, r2
 80131ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	68ba      	ldr	r2, [r7, #8]
 80131f4:	0151      	lsls	r1, r2, #5
 80131f6:	68fa      	ldr	r2, [r7, #12]
 80131f8:	440a      	add	r2, r1
 80131fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80131fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013202:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	791b      	ldrb	r3, [r3, #4]
 8013208:	2b03      	cmp	r3, #3
 801320a:	d003      	beq.n	8013214 <USB_EPClearStall+0x4c>
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	791b      	ldrb	r3, [r3, #4]
 8013210:	2b02      	cmp	r3, #2
 8013212:	d138      	bne.n	8013286 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	015a      	lsls	r2, r3, #5
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	4413      	add	r3, r2
 801321c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	68ba      	ldr	r2, [r7, #8]
 8013224:	0151      	lsls	r1, r2, #5
 8013226:	68fa      	ldr	r2, [r7, #12]
 8013228:	440a      	add	r2, r1
 801322a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801322e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013232:	6013      	str	r3, [r2, #0]
 8013234:	e027      	b.n	8013286 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	015a      	lsls	r2, r3, #5
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	4413      	add	r3, r2
 801323e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	68ba      	ldr	r2, [r7, #8]
 8013246:	0151      	lsls	r1, r2, #5
 8013248:	68fa      	ldr	r2, [r7, #12]
 801324a:	440a      	add	r2, r1
 801324c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013250:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013254:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	791b      	ldrb	r3, [r3, #4]
 801325a:	2b03      	cmp	r3, #3
 801325c:	d003      	beq.n	8013266 <USB_EPClearStall+0x9e>
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	791b      	ldrb	r3, [r3, #4]
 8013262:	2b02      	cmp	r3, #2
 8013264:	d10f      	bne.n	8013286 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013266:	68bb      	ldr	r3, [r7, #8]
 8013268:	015a      	lsls	r2, r3, #5
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	4413      	add	r3, r2
 801326e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	68ba      	ldr	r2, [r7, #8]
 8013276:	0151      	lsls	r1, r2, #5
 8013278:	68fa      	ldr	r2, [r7, #12]
 801327a:	440a      	add	r2, r1
 801327c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013284:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013286:	2300      	movs	r3, #0
}
 8013288:	4618      	mov	r0, r3
 801328a:	3714      	adds	r7, #20
 801328c:	46bd      	mov	sp, r7
 801328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013292:	4770      	bx	lr

08013294 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013294:	b480      	push	{r7}
 8013296:	b085      	sub	sp, #20
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	460b      	mov	r3, r1
 801329e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	68fa      	ldr	r2, [r7, #12]
 80132ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80132b2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80132b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80132be:	681a      	ldr	r2, [r3, #0]
 80132c0:	78fb      	ldrb	r3, [r7, #3]
 80132c2:	011b      	lsls	r3, r3, #4
 80132c4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80132c8:	68f9      	ldr	r1, [r7, #12]
 80132ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80132ce:	4313      	orrs	r3, r2
 80132d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80132d2:	2300      	movs	r3, #0
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3714      	adds	r7, #20
 80132d8:	46bd      	mov	sp, r7
 80132da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132de:	4770      	bx	lr

080132e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80132e0:	b480      	push	{r7}
 80132e2:	b085      	sub	sp, #20
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	68fa      	ldr	r2, [r7, #12]
 80132f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80132fa:	f023 0303 	bic.w	r3, r3, #3
 80132fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	68fa      	ldr	r2, [r7, #12]
 801330a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801330e:	f023 0302 	bic.w	r3, r3, #2
 8013312:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013314:	2300      	movs	r3, #0
}
 8013316:	4618      	mov	r0, r3
 8013318:	3714      	adds	r7, #20
 801331a:	46bd      	mov	sp, r7
 801331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013320:	4770      	bx	lr

08013322 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8013322:	b480      	push	{r7}
 8013324:	b085      	sub	sp, #20
 8013326:	af00      	add	r7, sp, #0
 8013328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	68fa      	ldr	r2, [r7, #12]
 8013338:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801333c:	f023 0303 	bic.w	r3, r3, #3
 8013340:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	68fa      	ldr	r2, [r7, #12]
 801334c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013350:	f043 0302 	orr.w	r3, r3, #2
 8013354:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013356:	2300      	movs	r3, #0
}
 8013358:	4618      	mov	r0, r3
 801335a:	3714      	adds	r7, #20
 801335c:	46bd      	mov	sp, r7
 801335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013362:	4770      	bx	lr

08013364 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8013364:	b480      	push	{r7}
 8013366:	b085      	sub	sp, #20
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	695b      	ldr	r3, [r3, #20]
 8013370:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	699b      	ldr	r3, [r3, #24]
 8013376:	68fa      	ldr	r2, [r7, #12]
 8013378:	4013      	ands	r3, r2
 801337a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801337c:	68fb      	ldr	r3, [r7, #12]
}
 801337e:	4618      	mov	r0, r3
 8013380:	3714      	adds	r7, #20
 8013382:	46bd      	mov	sp, r7
 8013384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013388:	4770      	bx	lr

0801338a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801338a:	b480      	push	{r7}
 801338c:	b085      	sub	sp, #20
 801338e:	af00      	add	r7, sp, #0
 8013390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801339c:	699b      	ldr	r3, [r3, #24]
 801339e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80133a6:	69db      	ldr	r3, [r3, #28]
 80133a8:	68ba      	ldr	r2, [r7, #8]
 80133aa:	4013      	ands	r3, r2
 80133ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	0c1b      	lsrs	r3, r3, #16
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3714      	adds	r7, #20
 80133b6:	46bd      	mov	sp, r7
 80133b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133bc:	4770      	bx	lr

080133be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80133be:	b480      	push	{r7}
 80133c0:	b085      	sub	sp, #20
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80133d0:	699b      	ldr	r3, [r3, #24]
 80133d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80133da:	69db      	ldr	r3, [r3, #28]
 80133dc:	68ba      	ldr	r2, [r7, #8]
 80133de:	4013      	ands	r3, r2
 80133e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	b29b      	uxth	r3, r3
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3714      	adds	r7, #20
 80133ea:	46bd      	mov	sp, r7
 80133ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f0:	4770      	bx	lr

080133f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80133f2:	b480      	push	{r7}
 80133f4:	b085      	sub	sp, #20
 80133f6:	af00      	add	r7, sp, #0
 80133f8:	6078      	str	r0, [r7, #4]
 80133fa:	460b      	mov	r3, r1
 80133fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013402:	78fb      	ldrb	r3, [r7, #3]
 8013404:	015a      	lsls	r2, r3, #5
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	4413      	add	r3, r2
 801340a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801340e:	689b      	ldr	r3, [r3, #8]
 8013410:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013418:	695b      	ldr	r3, [r3, #20]
 801341a:	68ba      	ldr	r2, [r7, #8]
 801341c:	4013      	ands	r3, r2
 801341e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013420:	68bb      	ldr	r3, [r7, #8]
}
 8013422:	4618      	mov	r0, r3
 8013424:	3714      	adds	r7, #20
 8013426:	46bd      	mov	sp, r7
 8013428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342c:	4770      	bx	lr

0801342e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801342e:	b480      	push	{r7}
 8013430:	b087      	sub	sp, #28
 8013432:	af00      	add	r7, sp, #0
 8013434:	6078      	str	r0, [r7, #4]
 8013436:	460b      	mov	r3, r1
 8013438:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013444:	691b      	ldr	r3, [r3, #16]
 8013446:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801344e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013450:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013452:	78fb      	ldrb	r3, [r7, #3]
 8013454:	f003 030f 	and.w	r3, r3, #15
 8013458:	68fa      	ldr	r2, [r7, #12]
 801345a:	fa22 f303 	lsr.w	r3, r2, r3
 801345e:	01db      	lsls	r3, r3, #7
 8013460:	b2db      	uxtb	r3, r3
 8013462:	693a      	ldr	r2, [r7, #16]
 8013464:	4313      	orrs	r3, r2
 8013466:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013468:	78fb      	ldrb	r3, [r7, #3]
 801346a:	015a      	lsls	r2, r3, #5
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	4413      	add	r3, r2
 8013470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013474:	689b      	ldr	r3, [r3, #8]
 8013476:	693a      	ldr	r2, [r7, #16]
 8013478:	4013      	ands	r3, r2
 801347a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801347c:	68bb      	ldr	r3, [r7, #8]
}
 801347e:	4618      	mov	r0, r3
 8013480:	371c      	adds	r7, #28
 8013482:	46bd      	mov	sp, r7
 8013484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013488:	4770      	bx	lr

0801348a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801348a:	b480      	push	{r7}
 801348c:	b083      	sub	sp, #12
 801348e:	af00      	add	r7, sp, #0
 8013490:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	695b      	ldr	r3, [r3, #20]
 8013496:	f003 0301 	and.w	r3, r3, #1
}
 801349a:	4618      	mov	r0, r3
 801349c:	370c      	adds	r7, #12
 801349e:	46bd      	mov	sp, r7
 80134a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a4:	4770      	bx	lr
	...

080134a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80134a8:	b480      	push	{r7}
 80134aa:	b085      	sub	sp, #20
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80134ba:	681a      	ldr	r2, [r3, #0]
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80134c2:	4619      	mov	r1, r3
 80134c4:	4b09      	ldr	r3, [pc, #36]	@ (80134ec <USB_ActivateSetup+0x44>)
 80134c6:	4013      	ands	r3, r2
 80134c8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	68fa      	ldr	r2, [r7, #12]
 80134d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80134d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80134dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80134de:	2300      	movs	r3, #0
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3714      	adds	r7, #20
 80134e4:	46bd      	mov	sp, r7
 80134e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ea:	4770      	bx	lr
 80134ec:	fffff800 	.word	0xfffff800

080134f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80134f0:	b480      	push	{r7}
 80134f2:	b087      	sub	sp, #28
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	460b      	mov	r3, r1
 80134fa:	607a      	str	r2, [r7, #4]
 80134fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	333c      	adds	r3, #60	@ 0x3c
 8013506:	3304      	adds	r3, #4
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	4a26      	ldr	r2, [pc, #152]	@ (80135a8 <USB_EP0_OutStart+0xb8>)
 8013510:	4293      	cmp	r3, r2
 8013512:	d90a      	bls.n	801352a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013514:	697b      	ldr	r3, [r7, #20]
 8013516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013524:	d101      	bne.n	801352a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013526:	2300      	movs	r3, #0
 8013528:	e037      	b.n	801359a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013530:	461a      	mov	r2, r3
 8013532:	2300      	movs	r3, #0
 8013534:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013536:	697b      	ldr	r3, [r7, #20]
 8013538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801353c:	691b      	ldr	r3, [r3, #16]
 801353e:	697a      	ldr	r2, [r7, #20]
 8013540:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013544:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013548:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013550:	691b      	ldr	r3, [r3, #16]
 8013552:	697a      	ldr	r2, [r7, #20]
 8013554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013558:	f043 0318 	orr.w	r3, r3, #24
 801355c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013564:	691b      	ldr	r3, [r3, #16]
 8013566:	697a      	ldr	r2, [r7, #20]
 8013568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801356c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8013570:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013572:	7afb      	ldrb	r3, [r7, #11]
 8013574:	2b01      	cmp	r3, #1
 8013576:	d10f      	bne.n	8013598 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801357e:	461a      	mov	r2, r3
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013584:	697b      	ldr	r3, [r7, #20]
 8013586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	697a      	ldr	r2, [r7, #20]
 801358e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013592:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8013596:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013598:	2300      	movs	r3, #0
}
 801359a:	4618      	mov	r0, r3
 801359c:	371c      	adds	r7, #28
 801359e:	46bd      	mov	sp, r7
 80135a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a4:	4770      	bx	lr
 80135a6:	bf00      	nop
 80135a8:	4f54300a 	.word	0x4f54300a

080135ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80135ac:	b480      	push	{r7}
 80135ae:	b085      	sub	sp, #20
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80135b4:	2300      	movs	r3, #0
 80135b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	3301      	adds	r3, #1
 80135bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80135c4:	d901      	bls.n	80135ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80135c6:	2303      	movs	r3, #3
 80135c8:	e01b      	b.n	8013602 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	691b      	ldr	r3, [r3, #16]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	daf2      	bge.n	80135b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80135d2:	2300      	movs	r3, #0
 80135d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	691b      	ldr	r3, [r3, #16]
 80135da:	f043 0201 	orr.w	r2, r3, #1
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	3301      	adds	r3, #1
 80135e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80135ee:	d901      	bls.n	80135f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80135f0:	2303      	movs	r3, #3
 80135f2:	e006      	b.n	8013602 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	691b      	ldr	r3, [r3, #16]
 80135f8:	f003 0301 	and.w	r3, r3, #1
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d0f0      	beq.n	80135e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8013600:	2300      	movs	r3, #0
}
 8013602:	4618      	mov	r0, r3
 8013604:	3714      	adds	r7, #20
 8013606:	46bd      	mov	sp, r7
 8013608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360c:	4770      	bx	lr

0801360e <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801360e:	b480      	push	{r7}
 8013610:	b083      	sub	sp, #12
 8013612:	af00      	add	r7, sp, #0
 8013614:	6078      	str	r0, [r7, #4]
 8013616:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d101      	bne.n	8013622 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801361e:	2303      	movs	r3, #3
 8013620:	e009      	b.n	8013636 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	33b0      	adds	r3, #176	@ 0xb0
 801362c:	009b      	lsls	r3, r3, #2
 801362e:	4413      	add	r3, r2
 8013630:	683a      	ldr	r2, [r7, #0]
 8013632:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013634:	2300      	movs	r3, #0
}
 8013636:	4618      	mov	r0, r3
 8013638:	370c      	adds	r7, #12
 801363a:	46bd      	mov	sp, r7
 801363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013640:	4770      	bx	lr

08013642 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013642:	b480      	push	{r7}
 8013644:	b087      	sub	sp, #28
 8013646:	af00      	add	r7, sp, #0
 8013648:	60f8      	str	r0, [r7, #12]
 801364a:	60b9      	str	r1, [r7, #8]
 801364c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	32b0      	adds	r2, #176	@ 0xb0
 8013658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801365c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d101      	bne.n	8013668 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013664:	2303      	movs	r3, #3
 8013666:	e008      	b.n	801367a <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	68ba      	ldr	r2, [r7, #8]
 801366c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	687a      	ldr	r2, [r7, #4]
 8013674:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013678:	2300      	movs	r3, #0
}
 801367a:	4618      	mov	r0, r3
 801367c:	371c      	adds	r7, #28
 801367e:	46bd      	mov	sp, r7
 8013680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013684:	4770      	bx	lr

08013686 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013686:	b480      	push	{r7}
 8013688:	b085      	sub	sp, #20
 801368a:	af00      	add	r7, sp, #0
 801368c:	6078      	str	r0, [r7, #4]
 801368e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	32b0      	adds	r2, #176	@ 0xb0
 801369a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801369e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d101      	bne.n	80136aa <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80136a6:	2303      	movs	r3, #3
 80136a8:	e004      	b.n	80136b4 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	683a      	ldr	r2, [r7, #0]
 80136ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80136b2:	2300      	movs	r3, #0
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3714      	adds	r7, #20
 80136b8:	46bd      	mov	sp, r7
 80136ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136be:	4770      	bx	lr

080136c0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b084      	sub	sp, #16
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	32b0      	adds	r2, #176	@ 0xb0
 80136d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136d6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80136d8:	2301      	movs	r3, #1
 80136da:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d101      	bne.n	80136e6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80136e2:	2303      	movs	r3, #3
 80136e4:	e025      	b.n	8013732 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d11f      	bne.n	8013730 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	2201      	movs	r2, #1
 80136f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80136f8:	4b10      	ldr	r3, [pc, #64]	@ (801373c <USBD_CDC_TransmitPacket+0x7c>)
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	f003 020f 	and.w	r2, r3, #15
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	4613      	mov	r3, r2
 801370a:	009b      	lsls	r3, r3, #2
 801370c:	4413      	add	r3, r2
 801370e:	009b      	lsls	r3, r3, #2
 8013710:	4403      	add	r3, r0
 8013712:	3318      	adds	r3, #24
 8013714:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013716:	4b09      	ldr	r3, [pc, #36]	@ (801373c <USBD_CDC_TransmitPacket+0x7c>)
 8013718:	7819      	ldrb	r1, [r3, #0]
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f006 ffdc 	bl	801a6e4 <USBD_LL_Transmit>

    ret = USBD_OK;
 801372c:	2300      	movs	r3, #0
 801372e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013730:	7bfb      	ldrb	r3, [r7, #15]
}
 8013732:	4618      	mov	r0, r3
 8013734:	3710      	adds	r7, #16
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}
 801373a:	bf00      	nop
 801373c:	24000039 	.word	0x24000039

08013740 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b084      	sub	sp, #16
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	32b0      	adds	r2, #176	@ 0xb0
 8013752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013756:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	32b0      	adds	r2, #176	@ 0xb0
 8013762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d101      	bne.n	801376e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801376a:	2303      	movs	r3, #3
 801376c:	e018      	b.n	80137a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	7c1b      	ldrb	r3, [r3, #16]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d10a      	bne.n	801378c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013776:	4b0c      	ldr	r3, [pc, #48]	@ (80137a8 <USBD_CDC_ReceivePacket+0x68>)
 8013778:	7819      	ldrb	r1, [r3, #0]
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f006 ffce 	bl	801a726 <USBD_LL_PrepareReceive>
 801378a:	e008      	b.n	801379e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801378c:	4b06      	ldr	r3, [pc, #24]	@ (80137a8 <USBD_CDC_ReceivePacket+0x68>)
 801378e:	7819      	ldrb	r1, [r3, #0]
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013796:	2340      	movs	r3, #64	@ 0x40
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f006 ffc4 	bl	801a726 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801379e:	2300      	movs	r3, #0
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3710      	adds	r7, #16
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	2400003a 	.word	0x2400003a

080137ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b086      	sub	sp, #24
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	4613      	mov	r3, r2
 80137b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d101      	bne.n	80137c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80137c0:	2303      	movs	r3, #3
 80137c2:	e01f      	b.n	8013804 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	2200      	movs	r2, #0
 80137c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	2200      	movs	r2, #0
 80137d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2200      	movs	r2, #0
 80137d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d003      	beq.n	80137ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	68ba      	ldr	r2, [r7, #8]
 80137e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	2201      	movs	r2, #1
 80137ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	79fa      	ldrb	r2, [r7, #7]
 80137f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80137f8:	68f8      	ldr	r0, [r7, #12]
 80137fa:	f006 fe07 	bl	801a40c <USBD_LL_Init>
 80137fe:	4603      	mov	r3, r0
 8013800:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013802:	7dfb      	ldrb	r3, [r7, #23]
}
 8013804:	4618      	mov	r0, r3
 8013806:	3718      	adds	r7, #24
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}

0801380c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b084      	sub	sp, #16
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013816:	2300      	movs	r3, #0
 8013818:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d101      	bne.n	8013824 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013820:	2303      	movs	r3, #3
 8013822:	e025      	b.n	8013870 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	683a      	ldr	r2, [r7, #0]
 8013828:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	32ae      	adds	r2, #174	@ 0xae
 8013836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801383a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801383c:	2b00      	cmp	r3, #0
 801383e:	d00f      	beq.n	8013860 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	32ae      	adds	r2, #174	@ 0xae
 801384a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801384e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013850:	f107 020e 	add.w	r2, r7, #14
 8013854:	4610      	mov	r0, r2
 8013856:	4798      	blx	r3
 8013858:	4602      	mov	r2, r0
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013866:	1c5a      	adds	r2, r3, #1
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801386e:	2300      	movs	r3, #0
}
 8013870:	4618      	mov	r0, r3
 8013872:	3710      	adds	r7, #16
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f006 fe27 	bl	801a4d4 <USBD_LL_Start>
 8013886:	4603      	mov	r3, r0
}
 8013888:	4618      	mov	r0, r3
 801388a:	3708      	adds	r7, #8
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}

08013890 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013890:	b480      	push	{r7}
 8013892:	b083      	sub	sp, #12
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013898:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801389a:	4618      	mov	r0, r3
 801389c:	370c      	adds	r7, #12
 801389e:	46bd      	mov	sp, r7
 80138a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a4:	4770      	bx	lr

080138a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80138a6:	b580      	push	{r7, lr}
 80138a8:	b084      	sub	sp, #16
 80138aa:	af00      	add	r7, sp, #0
 80138ac:	6078      	str	r0, [r7, #4]
 80138ae:	460b      	mov	r3, r1
 80138b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80138b2:	2300      	movs	r3, #0
 80138b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d009      	beq.n	80138d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	78fa      	ldrb	r2, [r7, #3]
 80138ca:	4611      	mov	r1, r2
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	4798      	blx	r3
 80138d0:	4603      	mov	r3, r0
 80138d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80138d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3710      	adds	r7, #16
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}

080138de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80138de:	b580      	push	{r7, lr}
 80138e0:	b084      	sub	sp, #16
 80138e2:	af00      	add	r7, sp, #0
 80138e4:	6078      	str	r0, [r7, #4]
 80138e6:	460b      	mov	r3, r1
 80138e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80138ea:	2300      	movs	r3, #0
 80138ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	78fa      	ldrb	r2, [r7, #3]
 80138f8:	4611      	mov	r1, r2
 80138fa:	6878      	ldr	r0, [r7, #4]
 80138fc:	4798      	blx	r3
 80138fe:	4603      	mov	r3, r0
 8013900:	2b00      	cmp	r3, #0
 8013902:	d001      	beq.n	8013908 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013904:	2303      	movs	r3, #3
 8013906:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013908:	7bfb      	ldrb	r3, [r7, #15]
}
 801390a:	4618      	mov	r0, r3
 801390c:	3710      	adds	r7, #16
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}

08013912 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013912:	b580      	push	{r7, lr}
 8013914:	b084      	sub	sp, #16
 8013916:	af00      	add	r7, sp, #0
 8013918:	6078      	str	r0, [r7, #4]
 801391a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013922:	6839      	ldr	r1, [r7, #0]
 8013924:	4618      	mov	r0, r3
 8013926:	f001 f8e2 	bl	8014aee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2201      	movs	r2, #1
 801392e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013938:	461a      	mov	r2, r3
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013946:	f003 031f 	and.w	r3, r3, #31
 801394a:	2b02      	cmp	r3, #2
 801394c:	d01a      	beq.n	8013984 <USBD_LL_SetupStage+0x72>
 801394e:	2b02      	cmp	r3, #2
 8013950:	d822      	bhi.n	8013998 <USBD_LL_SetupStage+0x86>
 8013952:	2b00      	cmp	r3, #0
 8013954:	d002      	beq.n	801395c <USBD_LL_SetupStage+0x4a>
 8013956:	2b01      	cmp	r3, #1
 8013958:	d00a      	beq.n	8013970 <USBD_LL_SetupStage+0x5e>
 801395a:	e01d      	b.n	8013998 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013962:	4619      	mov	r1, r3
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f000 fb0f 	bl	8013f88 <USBD_StdDevReq>
 801396a:	4603      	mov	r3, r0
 801396c:	73fb      	strb	r3, [r7, #15]
      break;
 801396e:	e020      	b.n	80139b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013976:	4619      	mov	r1, r3
 8013978:	6878      	ldr	r0, [r7, #4]
 801397a:	f000 fb77 	bl	801406c <USBD_StdItfReq>
 801397e:	4603      	mov	r3, r0
 8013980:	73fb      	strb	r3, [r7, #15]
      break;
 8013982:	e016      	b.n	80139b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801398a:	4619      	mov	r1, r3
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f000 fbd9 	bl	8014144 <USBD_StdEPReq>
 8013992:	4603      	mov	r3, r0
 8013994:	73fb      	strb	r3, [r7, #15]
      break;
 8013996:	e00c      	b.n	80139b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801399e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80139a2:	b2db      	uxtb	r3, r3
 80139a4:	4619      	mov	r1, r3
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f006 fe13 	bl	801a5d2 <USBD_LL_StallEP>
 80139ac:	4603      	mov	r3, r0
 80139ae:	73fb      	strb	r3, [r7, #15]
      break;
 80139b0:	bf00      	nop
  }

  return ret;
 80139b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	3710      	adds	r7, #16
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}

080139bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b086      	sub	sp, #24
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	60f8      	str	r0, [r7, #12]
 80139c4:	460b      	mov	r3, r1
 80139c6:	607a      	str	r2, [r7, #4]
 80139c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80139ca:	2300      	movs	r3, #0
 80139cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80139ce:	7afb      	ldrb	r3, [r7, #11]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d16e      	bne.n	8013ab2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80139da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80139e2:	2b03      	cmp	r3, #3
 80139e4:	f040 8098 	bne.w	8013b18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	689a      	ldr	r2, [r3, #8]
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	68db      	ldr	r3, [r3, #12]
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d913      	bls.n	8013a1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	689a      	ldr	r2, [r3, #8]
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	68db      	ldr	r3, [r3, #12]
 80139fc:	1ad2      	subs	r2, r2, r3
 80139fe:	693b      	ldr	r3, [r7, #16]
 8013a00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	68da      	ldr	r2, [r3, #12]
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	689b      	ldr	r3, [r3, #8]
 8013a0a:	4293      	cmp	r3, r2
 8013a0c:	bf28      	it	cs
 8013a0e:	4613      	movcs	r3, r2
 8013a10:	461a      	mov	r2, r3
 8013a12:	6879      	ldr	r1, [r7, #4]
 8013a14:	68f8      	ldr	r0, [r7, #12]
 8013a16:	f001 f96a 	bl	8014cee <USBD_CtlContinueRx>
 8013a1a:	e07d      	b.n	8013b18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013a22:	f003 031f 	and.w	r3, r3, #31
 8013a26:	2b02      	cmp	r3, #2
 8013a28:	d014      	beq.n	8013a54 <USBD_LL_DataOutStage+0x98>
 8013a2a:	2b02      	cmp	r3, #2
 8013a2c:	d81d      	bhi.n	8013a6a <USBD_LL_DataOutStage+0xae>
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d002      	beq.n	8013a38 <USBD_LL_DataOutStage+0x7c>
 8013a32:	2b01      	cmp	r3, #1
 8013a34:	d003      	beq.n	8013a3e <USBD_LL_DataOutStage+0x82>
 8013a36:	e018      	b.n	8013a6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	75bb      	strb	r3, [r7, #22]
            break;
 8013a3c:	e018      	b.n	8013a70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013a44:	b2db      	uxtb	r3, r3
 8013a46:	4619      	mov	r1, r3
 8013a48:	68f8      	ldr	r0, [r7, #12]
 8013a4a:	f000 fa64 	bl	8013f16 <USBD_CoreFindIF>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	75bb      	strb	r3, [r7, #22]
            break;
 8013a52:	e00d      	b.n	8013a70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013a5a:	b2db      	uxtb	r3, r3
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	68f8      	ldr	r0, [r7, #12]
 8013a60:	f000 fa66 	bl	8013f30 <USBD_CoreFindEP>
 8013a64:	4603      	mov	r3, r0
 8013a66:	75bb      	strb	r3, [r7, #22]
            break;
 8013a68:	e002      	b.n	8013a70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	75bb      	strb	r3, [r7, #22]
            break;
 8013a6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013a70:	7dbb      	ldrb	r3, [r7, #22]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d119      	bne.n	8013aaa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	2b03      	cmp	r3, #3
 8013a80:	d113      	bne.n	8013aaa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013a82:	7dba      	ldrb	r2, [r7, #22]
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	32ae      	adds	r2, #174	@ 0xae
 8013a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a8c:	691b      	ldr	r3, [r3, #16]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d00b      	beq.n	8013aaa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013a92:	7dba      	ldrb	r2, [r7, #22]
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013a9a:	7dba      	ldrb	r2, [r7, #22]
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	32ae      	adds	r2, #174	@ 0xae
 8013aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013aa4:	691b      	ldr	r3, [r3, #16]
 8013aa6:	68f8      	ldr	r0, [r7, #12]
 8013aa8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013aaa:	68f8      	ldr	r0, [r7, #12]
 8013aac:	f001 f930 	bl	8014d10 <USBD_CtlSendStatus>
 8013ab0:	e032      	b.n	8013b18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013ab2:	7afb      	ldrb	r3, [r7, #11]
 8013ab4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ab8:	b2db      	uxtb	r3, r3
 8013aba:	4619      	mov	r1, r3
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f000 fa37 	bl	8013f30 <USBD_CoreFindEP>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013ac6:	7dbb      	ldrb	r3, [r7, #22]
 8013ac8:	2bff      	cmp	r3, #255	@ 0xff
 8013aca:	d025      	beq.n	8013b18 <USBD_LL_DataOutStage+0x15c>
 8013acc:	7dbb      	ldrb	r3, [r7, #22]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d122      	bne.n	8013b18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ad8:	b2db      	uxtb	r3, r3
 8013ada:	2b03      	cmp	r3, #3
 8013adc:	d117      	bne.n	8013b0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013ade:	7dba      	ldrb	r2, [r7, #22]
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	32ae      	adds	r2, #174	@ 0xae
 8013ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ae8:	699b      	ldr	r3, [r3, #24]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d00f      	beq.n	8013b0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013aee:	7dba      	ldrb	r2, [r7, #22]
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013af6:	7dba      	ldrb	r2, [r7, #22]
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	32ae      	adds	r2, #174	@ 0xae
 8013afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b00:	699b      	ldr	r3, [r3, #24]
 8013b02:	7afa      	ldrb	r2, [r7, #11]
 8013b04:	4611      	mov	r1, r2
 8013b06:	68f8      	ldr	r0, [r7, #12]
 8013b08:	4798      	blx	r3
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013b0e:	7dfb      	ldrb	r3, [r7, #23]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d001      	beq.n	8013b18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013b14:	7dfb      	ldrb	r3, [r7, #23]
 8013b16:	e000      	b.n	8013b1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013b18:	2300      	movs	r3, #0
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	3718      	adds	r7, #24
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}

08013b22 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013b22:	b580      	push	{r7, lr}
 8013b24:	b086      	sub	sp, #24
 8013b26:	af00      	add	r7, sp, #0
 8013b28:	60f8      	str	r0, [r7, #12]
 8013b2a:	460b      	mov	r3, r1
 8013b2c:	607a      	str	r2, [r7, #4]
 8013b2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013b30:	7afb      	ldrb	r3, [r7, #11]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d16f      	bne.n	8013c16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	3314      	adds	r3, #20
 8013b3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013b42:	2b02      	cmp	r3, #2
 8013b44:	d15a      	bne.n	8013bfc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	689a      	ldr	r2, [r3, #8]
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	68db      	ldr	r3, [r3, #12]
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	d914      	bls.n	8013b7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	689a      	ldr	r2, [r3, #8]
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	68db      	ldr	r3, [r3, #12]
 8013b5a:	1ad2      	subs	r2, r2, r3
 8013b5c:	693b      	ldr	r3, [r7, #16]
 8013b5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013b60:	693b      	ldr	r3, [r7, #16]
 8013b62:	689b      	ldr	r3, [r3, #8]
 8013b64:	461a      	mov	r2, r3
 8013b66:	6879      	ldr	r1, [r7, #4]
 8013b68:	68f8      	ldr	r0, [r7, #12]
 8013b6a:	f001 f892 	bl	8014c92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013b6e:	2300      	movs	r3, #0
 8013b70:	2200      	movs	r2, #0
 8013b72:	2100      	movs	r1, #0
 8013b74:	68f8      	ldr	r0, [r7, #12]
 8013b76:	f006 fdd6 	bl	801a726 <USBD_LL_PrepareReceive>
 8013b7a:	e03f      	b.n	8013bfc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013b7c:	693b      	ldr	r3, [r7, #16]
 8013b7e:	68da      	ldr	r2, [r3, #12]
 8013b80:	693b      	ldr	r3, [r7, #16]
 8013b82:	689b      	ldr	r3, [r3, #8]
 8013b84:	429a      	cmp	r2, r3
 8013b86:	d11c      	bne.n	8013bc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013b88:	693b      	ldr	r3, [r7, #16]
 8013b8a:	685a      	ldr	r2, [r3, #4]
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d316      	bcc.n	8013bc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	685a      	ldr	r2, [r3, #4]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d20f      	bcs.n	8013bc2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	2100      	movs	r1, #0
 8013ba6:	68f8      	ldr	r0, [r7, #12]
 8013ba8:	f001 f873 	bl	8014c92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	2200      	movs	r2, #0
 8013bb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	2100      	movs	r1, #0
 8013bba:	68f8      	ldr	r0, [r7, #12]
 8013bbc:	f006 fdb3 	bl	801a726 <USBD_LL_PrepareReceive>
 8013bc0:	e01c      	b.n	8013bfc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013bc8:	b2db      	uxtb	r3, r3
 8013bca:	2b03      	cmp	r3, #3
 8013bcc:	d10f      	bne.n	8013bee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013bd4:	68db      	ldr	r3, [r3, #12]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d009      	beq.n	8013bee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	2200      	movs	r2, #0
 8013bde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013be8:	68db      	ldr	r3, [r3, #12]
 8013bea:	68f8      	ldr	r0, [r7, #12]
 8013bec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013bee:	2180      	movs	r1, #128	@ 0x80
 8013bf0:	68f8      	ldr	r0, [r7, #12]
 8013bf2:	f006 fcee 	bl	801a5d2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013bf6:	68f8      	ldr	r0, [r7, #12]
 8013bf8:	f001 f89d 	bl	8014d36 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d03a      	beq.n	8013c7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013c06:	68f8      	ldr	r0, [r7, #12]
 8013c08:	f7ff fe42 	bl	8013890 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	2200      	movs	r2, #0
 8013c10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013c14:	e032      	b.n	8013c7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013c16:	7afb      	ldrb	r3, [r7, #11]
 8013c18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013c1c:	b2db      	uxtb	r3, r3
 8013c1e:	4619      	mov	r1, r3
 8013c20:	68f8      	ldr	r0, [r7, #12]
 8013c22:	f000 f985 	bl	8013f30 <USBD_CoreFindEP>
 8013c26:	4603      	mov	r3, r0
 8013c28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013c2a:	7dfb      	ldrb	r3, [r7, #23]
 8013c2c:	2bff      	cmp	r3, #255	@ 0xff
 8013c2e:	d025      	beq.n	8013c7c <USBD_LL_DataInStage+0x15a>
 8013c30:	7dfb      	ldrb	r3, [r7, #23]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d122      	bne.n	8013c7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c3c:	b2db      	uxtb	r3, r3
 8013c3e:	2b03      	cmp	r3, #3
 8013c40:	d11c      	bne.n	8013c7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013c42:	7dfa      	ldrb	r2, [r7, #23]
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	32ae      	adds	r2, #174	@ 0xae
 8013c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c4c:	695b      	ldr	r3, [r3, #20]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d014      	beq.n	8013c7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013c52:	7dfa      	ldrb	r2, [r7, #23]
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013c5a:	7dfa      	ldrb	r2, [r7, #23]
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	32ae      	adds	r2, #174	@ 0xae
 8013c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c64:	695b      	ldr	r3, [r3, #20]
 8013c66:	7afa      	ldrb	r2, [r7, #11]
 8013c68:	4611      	mov	r1, r2
 8013c6a:	68f8      	ldr	r0, [r7, #12]
 8013c6c:	4798      	blx	r3
 8013c6e:	4603      	mov	r3, r0
 8013c70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013c72:	7dbb      	ldrb	r3, [r7, #22]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d001      	beq.n	8013c7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013c78:	7dbb      	ldrb	r3, [r7, #22]
 8013c7a:	e000      	b.n	8013c7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013c7c:	2300      	movs	r3, #0
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3718      	adds	r7, #24
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}

08013c86 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013c86:	b580      	push	{r7, lr}
 8013c88:	b084      	sub	sp, #16
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c8e:	2300      	movs	r3, #0
 8013c90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	2201      	movs	r2, #1
 8013c96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2200      	movs	r2, #0
 8013cac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d014      	beq.n	8013cec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013cc8:	685b      	ldr	r3, [r3, #4]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d00e      	beq.n	8013cec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013cd4:	685b      	ldr	r3, [r3, #4]
 8013cd6:	687a      	ldr	r2, [r7, #4]
 8013cd8:	6852      	ldr	r2, [r2, #4]
 8013cda:	b2d2      	uxtb	r2, r2
 8013cdc:	4611      	mov	r1, r2
 8013cde:	6878      	ldr	r0, [r7, #4]
 8013ce0:	4798      	blx	r3
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d001      	beq.n	8013cec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013ce8:	2303      	movs	r3, #3
 8013cea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013cec:	2340      	movs	r3, #64	@ 0x40
 8013cee:	2200      	movs	r2, #0
 8013cf0:	2100      	movs	r1, #0
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f006 fc09 	bl	801a50a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	2201      	movs	r2, #1
 8013cfc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2240      	movs	r2, #64	@ 0x40
 8013d04:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013d08:	2340      	movs	r3, #64	@ 0x40
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	2180      	movs	r1, #128	@ 0x80
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f006 fbfb 	bl	801a50a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2201      	movs	r2, #1
 8013d18:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2240      	movs	r2, #64	@ 0x40
 8013d1e:	621a      	str	r2, [r3, #32]

  return ret;
 8013d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	3710      	adds	r7, #16
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}

08013d2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013d2a:	b480      	push	{r7}
 8013d2c:	b083      	sub	sp, #12
 8013d2e:	af00      	add	r7, sp, #0
 8013d30:	6078      	str	r0, [r7, #4]
 8013d32:	460b      	mov	r3, r1
 8013d34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	78fa      	ldrb	r2, [r7, #3]
 8013d3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013d3c:	2300      	movs	r3, #0
}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	370c      	adds	r7, #12
 8013d42:	46bd      	mov	sp, r7
 8013d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d48:	4770      	bx	lr

08013d4a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013d4a:	b480      	push	{r7}
 8013d4c:	b083      	sub	sp, #12
 8013d4e:	af00      	add	r7, sp, #0
 8013d50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d58:	b2db      	uxtb	r3, r3
 8013d5a:	2b04      	cmp	r3, #4
 8013d5c:	d006      	beq.n	8013d6c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d64:	b2da      	uxtb	r2, r3
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2204      	movs	r2, #4
 8013d70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013d74:	2300      	movs	r3, #0
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	370c      	adds	r7, #12
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d80:	4770      	bx	lr

08013d82 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013d82:	b480      	push	{r7}
 8013d84:	b083      	sub	sp, #12
 8013d86:	af00      	add	r7, sp, #0
 8013d88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d90:	b2db      	uxtb	r3, r3
 8013d92:	2b04      	cmp	r3, #4
 8013d94:	d106      	bne.n	8013da4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013d9c:	b2da      	uxtb	r2, r3
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013da4:	2300      	movs	r3, #0
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	370c      	adds	r7, #12
 8013daa:	46bd      	mov	sp, r7
 8013dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db0:	4770      	bx	lr

08013db2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013db2:	b580      	push	{r7, lr}
 8013db4:	b082      	sub	sp, #8
 8013db6:	af00      	add	r7, sp, #0
 8013db8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013dc0:	b2db      	uxtb	r3, r3
 8013dc2:	2b03      	cmp	r3, #3
 8013dc4:	d110      	bne.n	8013de8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d00b      	beq.n	8013de8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013dd6:	69db      	ldr	r3, [r3, #28]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d005      	beq.n	8013de8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013de2:	69db      	ldr	r3, [r3, #28]
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013de8:	2300      	movs	r3, #0
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	3708      	adds	r7, #8
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}

08013df2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013df2:	b580      	push	{r7, lr}
 8013df4:	b082      	sub	sp, #8
 8013df6:	af00      	add	r7, sp, #0
 8013df8:	6078      	str	r0, [r7, #4]
 8013dfa:	460b      	mov	r3, r1
 8013dfc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	32ae      	adds	r2, #174	@ 0xae
 8013e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d101      	bne.n	8013e14 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013e10:	2303      	movs	r3, #3
 8013e12:	e01c      	b.n	8013e4e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e1a:	b2db      	uxtb	r3, r3
 8013e1c:	2b03      	cmp	r3, #3
 8013e1e:	d115      	bne.n	8013e4c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	32ae      	adds	r2, #174	@ 0xae
 8013e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e2e:	6a1b      	ldr	r3, [r3, #32]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d00b      	beq.n	8013e4c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	32ae      	adds	r2, #174	@ 0xae
 8013e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e42:	6a1b      	ldr	r3, [r3, #32]
 8013e44:	78fa      	ldrb	r2, [r7, #3]
 8013e46:	4611      	mov	r1, r2
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013e4c:	2300      	movs	r3, #0
}
 8013e4e:	4618      	mov	r0, r3
 8013e50:	3708      	adds	r7, #8
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}

08013e56 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013e56:	b580      	push	{r7, lr}
 8013e58:	b082      	sub	sp, #8
 8013e5a:	af00      	add	r7, sp, #0
 8013e5c:	6078      	str	r0, [r7, #4]
 8013e5e:	460b      	mov	r3, r1
 8013e60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	32ae      	adds	r2, #174	@ 0xae
 8013e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d101      	bne.n	8013e78 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013e74:	2303      	movs	r3, #3
 8013e76:	e01c      	b.n	8013eb2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e7e:	b2db      	uxtb	r3, r3
 8013e80:	2b03      	cmp	r3, #3
 8013e82:	d115      	bne.n	8013eb0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	32ae      	adds	r2, #174	@ 0xae
 8013e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d00b      	beq.n	8013eb0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	32ae      	adds	r2, #174	@ 0xae
 8013ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ea8:	78fa      	ldrb	r2, [r7, #3]
 8013eaa:	4611      	mov	r1, r2
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013eb0:	2300      	movs	r3, #0
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3708      	adds	r7, #8
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}

08013eba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013eba:	b480      	push	{r7}
 8013ebc:	b083      	sub	sp, #12
 8013ebe:	af00      	add	r7, sp, #0
 8013ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013ec2:	2300      	movs	r3, #0
}
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	370c      	adds	r7, #12
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ece:	4770      	bx	lr

08013ed0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b084      	sub	sp, #16
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2201      	movs	r2, #1
 8013ee0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d00e      	beq.n	8013f0c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013ef4:	685b      	ldr	r3, [r3, #4]
 8013ef6:	687a      	ldr	r2, [r7, #4]
 8013ef8:	6852      	ldr	r2, [r2, #4]
 8013efa:	b2d2      	uxtb	r2, r2
 8013efc:	4611      	mov	r1, r2
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	4798      	blx	r3
 8013f02:	4603      	mov	r3, r0
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d001      	beq.n	8013f0c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013f08:	2303      	movs	r3, #3
 8013f0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3710      	adds	r7, #16
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}

08013f16 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013f16:	b480      	push	{r7}
 8013f18:	b083      	sub	sp, #12
 8013f1a:	af00      	add	r7, sp, #0
 8013f1c:	6078      	str	r0, [r7, #4]
 8013f1e:	460b      	mov	r3, r1
 8013f20:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013f22:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	370c      	adds	r7, #12
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2e:	4770      	bx	lr

08013f30 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013f30:	b480      	push	{r7}
 8013f32:	b083      	sub	sp, #12
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	460b      	mov	r3, r1
 8013f3a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013f3c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	370c      	adds	r7, #12
 8013f42:	46bd      	mov	sp, r7
 8013f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f48:	4770      	bx	lr

08013f4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013f4a:	b480      	push	{r7}
 8013f4c:	b087      	sub	sp, #28
 8013f4e:	af00      	add	r7, sp, #0
 8013f50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013f56:	697b      	ldr	r3, [r7, #20]
 8013f58:	781b      	ldrb	r3, [r3, #0]
 8013f5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013f5c:	697b      	ldr	r3, [r7, #20]
 8013f5e:	3301      	adds	r3, #1
 8013f60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013f62:	697b      	ldr	r3, [r7, #20]
 8013f64:	781b      	ldrb	r3, [r3, #0]
 8013f66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013f68:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8013f6c:	021b      	lsls	r3, r3, #8
 8013f6e:	b21a      	sxth	r2, r3
 8013f70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013f74:	4313      	orrs	r3, r2
 8013f76:	b21b      	sxth	r3, r3
 8013f78:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013f7a:	89fb      	ldrh	r3, [r7, #14]
}
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	371c      	adds	r7, #28
 8013f80:	46bd      	mov	sp, r7
 8013f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f86:	4770      	bx	lr

08013f88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b084      	sub	sp, #16
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f92:	2300      	movs	r3, #0
 8013f94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	781b      	ldrb	r3, [r3, #0]
 8013f9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013f9e:	2b40      	cmp	r3, #64	@ 0x40
 8013fa0:	d005      	beq.n	8013fae <USBD_StdDevReq+0x26>
 8013fa2:	2b40      	cmp	r3, #64	@ 0x40
 8013fa4:	d857      	bhi.n	8014056 <USBD_StdDevReq+0xce>
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d00f      	beq.n	8013fca <USBD_StdDevReq+0x42>
 8013faa:	2b20      	cmp	r3, #32
 8013fac:	d153      	bne.n	8014056 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	32ae      	adds	r2, #174	@ 0xae
 8013fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fbc:	689b      	ldr	r3, [r3, #8]
 8013fbe:	6839      	ldr	r1, [r7, #0]
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	4798      	blx	r3
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8013fc8:	e04a      	b.n	8014060 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	785b      	ldrb	r3, [r3, #1]
 8013fce:	2b09      	cmp	r3, #9
 8013fd0:	d83b      	bhi.n	801404a <USBD_StdDevReq+0xc2>
 8013fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8013fd8 <USBD_StdDevReq+0x50>)
 8013fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fd8:	0801402d 	.word	0x0801402d
 8013fdc:	08014041 	.word	0x08014041
 8013fe0:	0801404b 	.word	0x0801404b
 8013fe4:	08014037 	.word	0x08014037
 8013fe8:	0801404b 	.word	0x0801404b
 8013fec:	0801400b 	.word	0x0801400b
 8013ff0:	08014001 	.word	0x08014001
 8013ff4:	0801404b 	.word	0x0801404b
 8013ff8:	08014023 	.word	0x08014023
 8013ffc:	08014015 	.word	0x08014015
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014000:	6839      	ldr	r1, [r7, #0]
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f000 fa3c 	bl	8014480 <USBD_GetDescriptor>
          break;
 8014008:	e024      	b.n	8014054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801400a:	6839      	ldr	r1, [r7, #0]
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f000 fbcb 	bl	80147a8 <USBD_SetAddress>
          break;
 8014012:	e01f      	b.n	8014054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014014:	6839      	ldr	r1, [r7, #0]
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f000 fc0a 	bl	8014830 <USBD_SetConfig>
 801401c:	4603      	mov	r3, r0
 801401e:	73fb      	strb	r3, [r7, #15]
          break;
 8014020:	e018      	b.n	8014054 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014022:	6839      	ldr	r1, [r7, #0]
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f000 fcad 	bl	8014984 <USBD_GetConfig>
          break;
 801402a:	e013      	b.n	8014054 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801402c:	6839      	ldr	r1, [r7, #0]
 801402e:	6878      	ldr	r0, [r7, #4]
 8014030:	f000 fcde 	bl	80149f0 <USBD_GetStatus>
          break;
 8014034:	e00e      	b.n	8014054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014036:	6839      	ldr	r1, [r7, #0]
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f000 fd0d 	bl	8014a58 <USBD_SetFeature>
          break;
 801403e:	e009      	b.n	8014054 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014040:	6839      	ldr	r1, [r7, #0]
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	f000 fd31 	bl	8014aaa <USBD_ClrFeature>
          break;
 8014048:	e004      	b.n	8014054 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801404a:	6839      	ldr	r1, [r7, #0]
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f000 fd88 	bl	8014b62 <USBD_CtlError>
          break;
 8014052:	bf00      	nop
      }
      break;
 8014054:	e004      	b.n	8014060 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014056:	6839      	ldr	r1, [r7, #0]
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f000 fd82 	bl	8014b62 <USBD_CtlError>
      break;
 801405e:	bf00      	nop
  }

  return ret;
 8014060:	7bfb      	ldrb	r3, [r7, #15]
}
 8014062:	4618      	mov	r0, r3
 8014064:	3710      	adds	r7, #16
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}
 801406a:	bf00      	nop

0801406c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b084      	sub	sp, #16
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014076:	2300      	movs	r3, #0
 8014078:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	781b      	ldrb	r3, [r3, #0]
 801407e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014082:	2b40      	cmp	r3, #64	@ 0x40
 8014084:	d005      	beq.n	8014092 <USBD_StdItfReq+0x26>
 8014086:	2b40      	cmp	r3, #64	@ 0x40
 8014088:	d852      	bhi.n	8014130 <USBD_StdItfReq+0xc4>
 801408a:	2b00      	cmp	r3, #0
 801408c:	d001      	beq.n	8014092 <USBD_StdItfReq+0x26>
 801408e:	2b20      	cmp	r3, #32
 8014090:	d14e      	bne.n	8014130 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014098:	b2db      	uxtb	r3, r3
 801409a:	3b01      	subs	r3, #1
 801409c:	2b02      	cmp	r3, #2
 801409e:	d840      	bhi.n	8014122 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	889b      	ldrh	r3, [r3, #4]
 80140a4:	b2db      	uxtb	r3, r3
 80140a6:	2b03      	cmp	r3, #3
 80140a8:	d836      	bhi.n	8014118 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	889b      	ldrh	r3, [r3, #4]
 80140ae:	b2db      	uxtb	r3, r3
 80140b0:	4619      	mov	r1, r3
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	f7ff ff2f 	bl	8013f16 <USBD_CoreFindIF>
 80140b8:	4603      	mov	r3, r0
 80140ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80140bc:	7bbb      	ldrb	r3, [r7, #14]
 80140be:	2bff      	cmp	r3, #255	@ 0xff
 80140c0:	d01d      	beq.n	80140fe <USBD_StdItfReq+0x92>
 80140c2:	7bbb      	ldrb	r3, [r7, #14]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d11a      	bne.n	80140fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80140c8:	7bba      	ldrb	r2, [r7, #14]
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	32ae      	adds	r2, #174	@ 0xae
 80140ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140d2:	689b      	ldr	r3, [r3, #8]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d00f      	beq.n	80140f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80140d8:	7bba      	ldrb	r2, [r7, #14]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80140e0:	7bba      	ldrb	r2, [r7, #14]
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	32ae      	adds	r2, #174	@ 0xae
 80140e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140ea:	689b      	ldr	r3, [r3, #8]
 80140ec:	6839      	ldr	r1, [r7, #0]
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	4798      	blx	r3
 80140f2:	4603      	mov	r3, r0
 80140f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80140f6:	e004      	b.n	8014102 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80140f8:	2303      	movs	r3, #3
 80140fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80140fc:	e001      	b.n	8014102 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80140fe:	2303      	movs	r3, #3
 8014100:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	88db      	ldrh	r3, [r3, #6]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d110      	bne.n	801412c <USBD_StdItfReq+0xc0>
 801410a:	7bfb      	ldrb	r3, [r7, #15]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d10d      	bne.n	801412c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f000 fdfd 	bl	8014d10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014116:	e009      	b.n	801412c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014118:	6839      	ldr	r1, [r7, #0]
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 fd21 	bl	8014b62 <USBD_CtlError>
          break;
 8014120:	e004      	b.n	801412c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014122:	6839      	ldr	r1, [r7, #0]
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f000 fd1c 	bl	8014b62 <USBD_CtlError>
          break;
 801412a:	e000      	b.n	801412e <USBD_StdItfReq+0xc2>
          break;
 801412c:	bf00      	nop
      }
      break;
 801412e:	e004      	b.n	801413a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014130:	6839      	ldr	r1, [r7, #0]
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f000 fd15 	bl	8014b62 <USBD_CtlError>
      break;
 8014138:	bf00      	nop
  }

  return ret;
 801413a:	7bfb      	ldrb	r3, [r7, #15]
}
 801413c:	4618      	mov	r0, r3
 801413e:	3710      	adds	r7, #16
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}

08014144 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b084      	sub	sp, #16
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
 801414c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801414e:	2300      	movs	r3, #0
 8014150:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	889b      	ldrh	r3, [r3, #4]
 8014156:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014158:	683b      	ldr	r3, [r7, #0]
 801415a:	781b      	ldrb	r3, [r3, #0]
 801415c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014160:	2b40      	cmp	r3, #64	@ 0x40
 8014162:	d007      	beq.n	8014174 <USBD_StdEPReq+0x30>
 8014164:	2b40      	cmp	r3, #64	@ 0x40
 8014166:	f200 817f 	bhi.w	8014468 <USBD_StdEPReq+0x324>
 801416a:	2b00      	cmp	r3, #0
 801416c:	d02a      	beq.n	80141c4 <USBD_StdEPReq+0x80>
 801416e:	2b20      	cmp	r3, #32
 8014170:	f040 817a 	bne.w	8014468 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014174:	7bbb      	ldrb	r3, [r7, #14]
 8014176:	4619      	mov	r1, r3
 8014178:	6878      	ldr	r0, [r7, #4]
 801417a:	f7ff fed9 	bl	8013f30 <USBD_CoreFindEP>
 801417e:	4603      	mov	r3, r0
 8014180:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014182:	7b7b      	ldrb	r3, [r7, #13]
 8014184:	2bff      	cmp	r3, #255	@ 0xff
 8014186:	f000 8174 	beq.w	8014472 <USBD_StdEPReq+0x32e>
 801418a:	7b7b      	ldrb	r3, [r7, #13]
 801418c:	2b00      	cmp	r3, #0
 801418e:	f040 8170 	bne.w	8014472 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014192:	7b7a      	ldrb	r2, [r7, #13]
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801419a:	7b7a      	ldrb	r2, [r7, #13]
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	32ae      	adds	r2, #174	@ 0xae
 80141a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141a4:	689b      	ldr	r3, [r3, #8]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	f000 8163 	beq.w	8014472 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80141ac:	7b7a      	ldrb	r2, [r7, #13]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	32ae      	adds	r2, #174	@ 0xae
 80141b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141b6:	689b      	ldr	r3, [r3, #8]
 80141b8:	6839      	ldr	r1, [r7, #0]
 80141ba:	6878      	ldr	r0, [r7, #4]
 80141bc:	4798      	blx	r3
 80141be:	4603      	mov	r3, r0
 80141c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80141c2:	e156      	b.n	8014472 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	785b      	ldrb	r3, [r3, #1]
 80141c8:	2b03      	cmp	r3, #3
 80141ca:	d008      	beq.n	80141de <USBD_StdEPReq+0x9a>
 80141cc:	2b03      	cmp	r3, #3
 80141ce:	f300 8145 	bgt.w	801445c <USBD_StdEPReq+0x318>
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	f000 809b 	beq.w	801430e <USBD_StdEPReq+0x1ca>
 80141d8:	2b01      	cmp	r3, #1
 80141da:	d03c      	beq.n	8014256 <USBD_StdEPReq+0x112>
 80141dc:	e13e      	b.n	801445c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80141e4:	b2db      	uxtb	r3, r3
 80141e6:	2b02      	cmp	r3, #2
 80141e8:	d002      	beq.n	80141f0 <USBD_StdEPReq+0xac>
 80141ea:	2b03      	cmp	r3, #3
 80141ec:	d016      	beq.n	801421c <USBD_StdEPReq+0xd8>
 80141ee:	e02c      	b.n	801424a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80141f0:	7bbb      	ldrb	r3, [r7, #14]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d00d      	beq.n	8014212 <USBD_StdEPReq+0xce>
 80141f6:	7bbb      	ldrb	r3, [r7, #14]
 80141f8:	2b80      	cmp	r3, #128	@ 0x80
 80141fa:	d00a      	beq.n	8014212 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80141fc:	7bbb      	ldrb	r3, [r7, #14]
 80141fe:	4619      	mov	r1, r3
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f006 f9e6 	bl	801a5d2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014206:	2180      	movs	r1, #128	@ 0x80
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f006 f9e2 	bl	801a5d2 <USBD_LL_StallEP>
 801420e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014210:	e020      	b.n	8014254 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014212:	6839      	ldr	r1, [r7, #0]
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f000 fca4 	bl	8014b62 <USBD_CtlError>
              break;
 801421a:	e01b      	b.n	8014254 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801421c:	683b      	ldr	r3, [r7, #0]
 801421e:	885b      	ldrh	r3, [r3, #2]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d10e      	bne.n	8014242 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014224:	7bbb      	ldrb	r3, [r7, #14]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d00b      	beq.n	8014242 <USBD_StdEPReq+0xfe>
 801422a:	7bbb      	ldrb	r3, [r7, #14]
 801422c:	2b80      	cmp	r3, #128	@ 0x80
 801422e:	d008      	beq.n	8014242 <USBD_StdEPReq+0xfe>
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	88db      	ldrh	r3, [r3, #6]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d104      	bne.n	8014242 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014238:	7bbb      	ldrb	r3, [r7, #14]
 801423a:	4619      	mov	r1, r3
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f006 f9c8 	bl	801a5d2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014242:	6878      	ldr	r0, [r7, #4]
 8014244:	f000 fd64 	bl	8014d10 <USBD_CtlSendStatus>

              break;
 8014248:	e004      	b.n	8014254 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801424a:	6839      	ldr	r1, [r7, #0]
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f000 fc88 	bl	8014b62 <USBD_CtlError>
              break;
 8014252:	bf00      	nop
          }
          break;
 8014254:	e107      	b.n	8014466 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801425c:	b2db      	uxtb	r3, r3
 801425e:	2b02      	cmp	r3, #2
 8014260:	d002      	beq.n	8014268 <USBD_StdEPReq+0x124>
 8014262:	2b03      	cmp	r3, #3
 8014264:	d016      	beq.n	8014294 <USBD_StdEPReq+0x150>
 8014266:	e04b      	b.n	8014300 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014268:	7bbb      	ldrb	r3, [r7, #14]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d00d      	beq.n	801428a <USBD_StdEPReq+0x146>
 801426e:	7bbb      	ldrb	r3, [r7, #14]
 8014270:	2b80      	cmp	r3, #128	@ 0x80
 8014272:	d00a      	beq.n	801428a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014274:	7bbb      	ldrb	r3, [r7, #14]
 8014276:	4619      	mov	r1, r3
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f006 f9aa 	bl	801a5d2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801427e:	2180      	movs	r1, #128	@ 0x80
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f006 f9a6 	bl	801a5d2 <USBD_LL_StallEP>
 8014286:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014288:	e040      	b.n	801430c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801428a:	6839      	ldr	r1, [r7, #0]
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f000 fc68 	bl	8014b62 <USBD_CtlError>
              break;
 8014292:	e03b      	b.n	801430c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	885b      	ldrh	r3, [r3, #2]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d136      	bne.n	801430a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801429c:	7bbb      	ldrb	r3, [r7, #14]
 801429e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d004      	beq.n	80142b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80142a6:	7bbb      	ldrb	r3, [r7, #14]
 80142a8:	4619      	mov	r1, r3
 80142aa:	6878      	ldr	r0, [r7, #4]
 80142ac:	f006 f9b0 	bl	801a610 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f000 fd2d 	bl	8014d10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80142b6:	7bbb      	ldrb	r3, [r7, #14]
 80142b8:	4619      	mov	r1, r3
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	f7ff fe38 	bl	8013f30 <USBD_CoreFindEP>
 80142c0:	4603      	mov	r3, r0
 80142c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80142c4:	7b7b      	ldrb	r3, [r7, #13]
 80142c6:	2bff      	cmp	r3, #255	@ 0xff
 80142c8:	d01f      	beq.n	801430a <USBD_StdEPReq+0x1c6>
 80142ca:	7b7b      	ldrb	r3, [r7, #13]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d11c      	bne.n	801430a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80142d0:	7b7a      	ldrb	r2, [r7, #13]
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80142d8:	7b7a      	ldrb	r2, [r7, #13]
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	32ae      	adds	r2, #174	@ 0xae
 80142de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142e2:	689b      	ldr	r3, [r3, #8]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d010      	beq.n	801430a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80142e8:	7b7a      	ldrb	r2, [r7, #13]
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	32ae      	adds	r2, #174	@ 0xae
 80142ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142f2:	689b      	ldr	r3, [r3, #8]
 80142f4:	6839      	ldr	r1, [r7, #0]
 80142f6:	6878      	ldr	r0, [r7, #4]
 80142f8:	4798      	blx	r3
 80142fa:	4603      	mov	r3, r0
 80142fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80142fe:	e004      	b.n	801430a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014300:	6839      	ldr	r1, [r7, #0]
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f000 fc2d 	bl	8014b62 <USBD_CtlError>
              break;
 8014308:	e000      	b.n	801430c <USBD_StdEPReq+0x1c8>
              break;
 801430a:	bf00      	nop
          }
          break;
 801430c:	e0ab      	b.n	8014466 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014314:	b2db      	uxtb	r3, r3
 8014316:	2b02      	cmp	r3, #2
 8014318:	d002      	beq.n	8014320 <USBD_StdEPReq+0x1dc>
 801431a:	2b03      	cmp	r3, #3
 801431c:	d032      	beq.n	8014384 <USBD_StdEPReq+0x240>
 801431e:	e097      	b.n	8014450 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014320:	7bbb      	ldrb	r3, [r7, #14]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d007      	beq.n	8014336 <USBD_StdEPReq+0x1f2>
 8014326:	7bbb      	ldrb	r3, [r7, #14]
 8014328:	2b80      	cmp	r3, #128	@ 0x80
 801432a:	d004      	beq.n	8014336 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801432c:	6839      	ldr	r1, [r7, #0]
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f000 fc17 	bl	8014b62 <USBD_CtlError>
                break;
 8014334:	e091      	b.n	801445a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014336:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801433a:	2b00      	cmp	r3, #0
 801433c:	da0b      	bge.n	8014356 <USBD_StdEPReq+0x212>
 801433e:	7bbb      	ldrb	r3, [r7, #14]
 8014340:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014344:	4613      	mov	r3, r2
 8014346:	009b      	lsls	r3, r3, #2
 8014348:	4413      	add	r3, r2
 801434a:	009b      	lsls	r3, r3, #2
 801434c:	3310      	adds	r3, #16
 801434e:	687a      	ldr	r2, [r7, #4]
 8014350:	4413      	add	r3, r2
 8014352:	3304      	adds	r3, #4
 8014354:	e00b      	b.n	801436e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014356:	7bbb      	ldrb	r3, [r7, #14]
 8014358:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801435c:	4613      	mov	r3, r2
 801435e:	009b      	lsls	r3, r3, #2
 8014360:	4413      	add	r3, r2
 8014362:	009b      	lsls	r3, r3, #2
 8014364:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014368:	687a      	ldr	r2, [r7, #4]
 801436a:	4413      	add	r3, r2
 801436c:	3304      	adds	r3, #4
 801436e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	2200      	movs	r2, #0
 8014374:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	2202      	movs	r2, #2
 801437a:	4619      	mov	r1, r3
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f000 fc6d 	bl	8014c5c <USBD_CtlSendData>
              break;
 8014382:	e06a      	b.n	801445a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014388:	2b00      	cmp	r3, #0
 801438a:	da11      	bge.n	80143b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801438c:	7bbb      	ldrb	r3, [r7, #14]
 801438e:	f003 020f 	and.w	r2, r3, #15
 8014392:	6879      	ldr	r1, [r7, #4]
 8014394:	4613      	mov	r3, r2
 8014396:	009b      	lsls	r3, r3, #2
 8014398:	4413      	add	r3, r2
 801439a:	009b      	lsls	r3, r3, #2
 801439c:	440b      	add	r3, r1
 801439e:	3324      	adds	r3, #36	@ 0x24
 80143a0:	881b      	ldrh	r3, [r3, #0]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d117      	bne.n	80143d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80143a6:	6839      	ldr	r1, [r7, #0]
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f000 fbda 	bl	8014b62 <USBD_CtlError>
                  break;
 80143ae:	e054      	b.n	801445a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80143b0:	7bbb      	ldrb	r3, [r7, #14]
 80143b2:	f003 020f 	and.w	r2, r3, #15
 80143b6:	6879      	ldr	r1, [r7, #4]
 80143b8:	4613      	mov	r3, r2
 80143ba:	009b      	lsls	r3, r3, #2
 80143bc:	4413      	add	r3, r2
 80143be:	009b      	lsls	r3, r3, #2
 80143c0:	440b      	add	r3, r1
 80143c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80143c6:	881b      	ldrh	r3, [r3, #0]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d104      	bne.n	80143d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80143cc:	6839      	ldr	r1, [r7, #0]
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f000 fbc7 	bl	8014b62 <USBD_CtlError>
                  break;
 80143d4:	e041      	b.n	801445a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80143d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	da0b      	bge.n	80143f6 <USBD_StdEPReq+0x2b2>
 80143de:	7bbb      	ldrb	r3, [r7, #14]
 80143e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80143e4:	4613      	mov	r3, r2
 80143e6:	009b      	lsls	r3, r3, #2
 80143e8:	4413      	add	r3, r2
 80143ea:	009b      	lsls	r3, r3, #2
 80143ec:	3310      	adds	r3, #16
 80143ee:	687a      	ldr	r2, [r7, #4]
 80143f0:	4413      	add	r3, r2
 80143f2:	3304      	adds	r3, #4
 80143f4:	e00b      	b.n	801440e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80143f6:	7bbb      	ldrb	r3, [r7, #14]
 80143f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80143fc:	4613      	mov	r3, r2
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	4413      	add	r3, r2
 8014402:	009b      	lsls	r3, r3, #2
 8014404:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014408:	687a      	ldr	r2, [r7, #4]
 801440a:	4413      	add	r3, r2
 801440c:	3304      	adds	r3, #4
 801440e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014410:	7bbb      	ldrb	r3, [r7, #14]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d002      	beq.n	801441c <USBD_StdEPReq+0x2d8>
 8014416:	7bbb      	ldrb	r3, [r7, #14]
 8014418:	2b80      	cmp	r3, #128	@ 0x80
 801441a:	d103      	bne.n	8014424 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	2200      	movs	r2, #0
 8014420:	601a      	str	r2, [r3, #0]
 8014422:	e00e      	b.n	8014442 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014424:	7bbb      	ldrb	r3, [r7, #14]
 8014426:	4619      	mov	r1, r3
 8014428:	6878      	ldr	r0, [r7, #4]
 801442a:	f006 f910 	bl	801a64e <USBD_LL_IsStallEP>
 801442e:	4603      	mov	r3, r0
 8014430:	2b00      	cmp	r3, #0
 8014432:	d003      	beq.n	801443c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	2201      	movs	r2, #1
 8014438:	601a      	str	r2, [r3, #0]
 801443a:	e002      	b.n	8014442 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801443c:	68bb      	ldr	r3, [r7, #8]
 801443e:	2200      	movs	r2, #0
 8014440:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	2202      	movs	r2, #2
 8014446:	4619      	mov	r1, r3
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f000 fc07 	bl	8014c5c <USBD_CtlSendData>
              break;
 801444e:	e004      	b.n	801445a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014450:	6839      	ldr	r1, [r7, #0]
 8014452:	6878      	ldr	r0, [r7, #4]
 8014454:	f000 fb85 	bl	8014b62 <USBD_CtlError>
              break;
 8014458:	bf00      	nop
          }
          break;
 801445a:	e004      	b.n	8014466 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801445c:	6839      	ldr	r1, [r7, #0]
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f000 fb7f 	bl	8014b62 <USBD_CtlError>
          break;
 8014464:	bf00      	nop
      }
      break;
 8014466:	e005      	b.n	8014474 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014468:	6839      	ldr	r1, [r7, #0]
 801446a:	6878      	ldr	r0, [r7, #4]
 801446c:	f000 fb79 	bl	8014b62 <USBD_CtlError>
      break;
 8014470:	e000      	b.n	8014474 <USBD_StdEPReq+0x330>
      break;
 8014472:	bf00      	nop
  }

  return ret;
 8014474:	7bfb      	ldrb	r3, [r7, #15]
}
 8014476:	4618      	mov	r0, r3
 8014478:	3710      	adds	r7, #16
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}
	...

08014480 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b084      	sub	sp, #16
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
 8014488:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801448a:	2300      	movs	r3, #0
 801448c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801448e:	2300      	movs	r3, #0
 8014490:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014492:	2300      	movs	r3, #0
 8014494:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	885b      	ldrh	r3, [r3, #2]
 801449a:	0a1b      	lsrs	r3, r3, #8
 801449c:	b29b      	uxth	r3, r3
 801449e:	3b01      	subs	r3, #1
 80144a0:	2b0e      	cmp	r3, #14
 80144a2:	f200 8152 	bhi.w	801474a <USBD_GetDescriptor+0x2ca>
 80144a6:	a201      	add	r2, pc, #4	@ (adr r2, 80144ac <USBD_GetDescriptor+0x2c>)
 80144a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144ac:	0801451d 	.word	0x0801451d
 80144b0:	08014535 	.word	0x08014535
 80144b4:	08014575 	.word	0x08014575
 80144b8:	0801474b 	.word	0x0801474b
 80144bc:	0801474b 	.word	0x0801474b
 80144c0:	080146eb 	.word	0x080146eb
 80144c4:	08014717 	.word	0x08014717
 80144c8:	0801474b 	.word	0x0801474b
 80144cc:	0801474b 	.word	0x0801474b
 80144d0:	0801474b 	.word	0x0801474b
 80144d4:	0801474b 	.word	0x0801474b
 80144d8:	0801474b 	.word	0x0801474b
 80144dc:	0801474b 	.word	0x0801474b
 80144e0:	0801474b 	.word	0x0801474b
 80144e4:	080144e9 	.word	0x080144e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80144ee:	69db      	ldr	r3, [r3, #28]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d00b      	beq.n	801450c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80144fa:	69db      	ldr	r3, [r3, #28]
 80144fc:	687a      	ldr	r2, [r7, #4]
 80144fe:	7c12      	ldrb	r2, [r2, #16]
 8014500:	f107 0108 	add.w	r1, r7, #8
 8014504:	4610      	mov	r0, r2
 8014506:	4798      	blx	r3
 8014508:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801450a:	e126      	b.n	801475a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801450c:	6839      	ldr	r1, [r7, #0]
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f000 fb27 	bl	8014b62 <USBD_CtlError>
        err++;
 8014514:	7afb      	ldrb	r3, [r7, #11]
 8014516:	3301      	adds	r3, #1
 8014518:	72fb      	strb	r3, [r7, #11]
      break;
 801451a:	e11e      	b.n	801475a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	687a      	ldr	r2, [r7, #4]
 8014526:	7c12      	ldrb	r2, [r2, #16]
 8014528:	f107 0108 	add.w	r1, r7, #8
 801452c:	4610      	mov	r0, r2
 801452e:	4798      	blx	r3
 8014530:	60f8      	str	r0, [r7, #12]
      break;
 8014532:	e112      	b.n	801475a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	7c1b      	ldrb	r3, [r3, #16]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d10d      	bne.n	8014558 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014544:	f107 0208 	add.w	r2, r7, #8
 8014548:	4610      	mov	r0, r2
 801454a:	4798      	blx	r3
 801454c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	3301      	adds	r3, #1
 8014552:	2202      	movs	r2, #2
 8014554:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014556:	e100      	b.n	801475a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014560:	f107 0208 	add.w	r2, r7, #8
 8014564:	4610      	mov	r0, r2
 8014566:	4798      	blx	r3
 8014568:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	3301      	adds	r3, #1
 801456e:	2202      	movs	r2, #2
 8014570:	701a      	strb	r2, [r3, #0]
      break;
 8014572:	e0f2      	b.n	801475a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	885b      	ldrh	r3, [r3, #2]
 8014578:	b2db      	uxtb	r3, r3
 801457a:	2b05      	cmp	r3, #5
 801457c:	f200 80ac 	bhi.w	80146d8 <USBD_GetDescriptor+0x258>
 8014580:	a201      	add	r2, pc, #4	@ (adr r2, 8014588 <USBD_GetDescriptor+0x108>)
 8014582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014586:	bf00      	nop
 8014588:	080145a1 	.word	0x080145a1
 801458c:	080145d5 	.word	0x080145d5
 8014590:	08014609 	.word	0x08014609
 8014594:	0801463d 	.word	0x0801463d
 8014598:	08014671 	.word	0x08014671
 801459c:	080146a5 	.word	0x080146a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145a6:	685b      	ldr	r3, [r3, #4]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d00b      	beq.n	80145c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	687a      	ldr	r2, [r7, #4]
 80145b6:	7c12      	ldrb	r2, [r2, #16]
 80145b8:	f107 0108 	add.w	r1, r7, #8
 80145bc:	4610      	mov	r0, r2
 80145be:	4798      	blx	r3
 80145c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145c2:	e091      	b.n	80146e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80145c4:	6839      	ldr	r1, [r7, #0]
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f000 facb 	bl	8014b62 <USBD_CtlError>
            err++;
 80145cc:	7afb      	ldrb	r3, [r7, #11]
 80145ce:	3301      	adds	r3, #1
 80145d0:	72fb      	strb	r3, [r7, #11]
          break;
 80145d2:	e089      	b.n	80146e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145da:	689b      	ldr	r3, [r3, #8]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d00b      	beq.n	80145f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145e6:	689b      	ldr	r3, [r3, #8]
 80145e8:	687a      	ldr	r2, [r7, #4]
 80145ea:	7c12      	ldrb	r2, [r2, #16]
 80145ec:	f107 0108 	add.w	r1, r7, #8
 80145f0:	4610      	mov	r0, r2
 80145f2:	4798      	blx	r3
 80145f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145f6:	e077      	b.n	80146e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80145f8:	6839      	ldr	r1, [r7, #0]
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f000 fab1 	bl	8014b62 <USBD_CtlError>
            err++;
 8014600:	7afb      	ldrb	r3, [r7, #11]
 8014602:	3301      	adds	r3, #1
 8014604:	72fb      	strb	r3, [r7, #11]
          break;
 8014606:	e06f      	b.n	80146e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801460e:	68db      	ldr	r3, [r3, #12]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d00b      	beq.n	801462c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801461a:	68db      	ldr	r3, [r3, #12]
 801461c:	687a      	ldr	r2, [r7, #4]
 801461e:	7c12      	ldrb	r2, [r2, #16]
 8014620:	f107 0108 	add.w	r1, r7, #8
 8014624:	4610      	mov	r0, r2
 8014626:	4798      	blx	r3
 8014628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801462a:	e05d      	b.n	80146e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801462c:	6839      	ldr	r1, [r7, #0]
 801462e:	6878      	ldr	r0, [r7, #4]
 8014630:	f000 fa97 	bl	8014b62 <USBD_CtlError>
            err++;
 8014634:	7afb      	ldrb	r3, [r7, #11]
 8014636:	3301      	adds	r3, #1
 8014638:	72fb      	strb	r3, [r7, #11]
          break;
 801463a:	e055      	b.n	80146e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014642:	691b      	ldr	r3, [r3, #16]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d00b      	beq.n	8014660 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801464e:	691b      	ldr	r3, [r3, #16]
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	7c12      	ldrb	r2, [r2, #16]
 8014654:	f107 0108 	add.w	r1, r7, #8
 8014658:	4610      	mov	r0, r2
 801465a:	4798      	blx	r3
 801465c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801465e:	e043      	b.n	80146e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014660:	6839      	ldr	r1, [r7, #0]
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f000 fa7d 	bl	8014b62 <USBD_CtlError>
            err++;
 8014668:	7afb      	ldrb	r3, [r7, #11]
 801466a:	3301      	adds	r3, #1
 801466c:	72fb      	strb	r3, [r7, #11]
          break;
 801466e:	e03b      	b.n	80146e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014676:	695b      	ldr	r3, [r3, #20]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d00b      	beq.n	8014694 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014682:	695b      	ldr	r3, [r3, #20]
 8014684:	687a      	ldr	r2, [r7, #4]
 8014686:	7c12      	ldrb	r2, [r2, #16]
 8014688:	f107 0108 	add.w	r1, r7, #8
 801468c:	4610      	mov	r0, r2
 801468e:	4798      	blx	r3
 8014690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014692:	e029      	b.n	80146e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014694:	6839      	ldr	r1, [r7, #0]
 8014696:	6878      	ldr	r0, [r7, #4]
 8014698:	f000 fa63 	bl	8014b62 <USBD_CtlError>
            err++;
 801469c:	7afb      	ldrb	r3, [r7, #11]
 801469e:	3301      	adds	r3, #1
 80146a0:	72fb      	strb	r3, [r7, #11]
          break;
 80146a2:	e021      	b.n	80146e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146aa:	699b      	ldr	r3, [r3, #24]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d00b      	beq.n	80146c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146b6:	699b      	ldr	r3, [r3, #24]
 80146b8:	687a      	ldr	r2, [r7, #4]
 80146ba:	7c12      	ldrb	r2, [r2, #16]
 80146bc:	f107 0108 	add.w	r1, r7, #8
 80146c0:	4610      	mov	r0, r2
 80146c2:	4798      	blx	r3
 80146c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146c6:	e00f      	b.n	80146e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80146c8:	6839      	ldr	r1, [r7, #0]
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f000 fa49 	bl	8014b62 <USBD_CtlError>
            err++;
 80146d0:	7afb      	ldrb	r3, [r7, #11]
 80146d2:	3301      	adds	r3, #1
 80146d4:	72fb      	strb	r3, [r7, #11]
          break;
 80146d6:	e007      	b.n	80146e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80146d8:	6839      	ldr	r1, [r7, #0]
 80146da:	6878      	ldr	r0, [r7, #4]
 80146dc:	f000 fa41 	bl	8014b62 <USBD_CtlError>
          err++;
 80146e0:	7afb      	ldrb	r3, [r7, #11]
 80146e2:	3301      	adds	r3, #1
 80146e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80146e6:	bf00      	nop
      }
      break;
 80146e8:	e037      	b.n	801475a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	7c1b      	ldrb	r3, [r3, #16]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d109      	bne.n	8014706 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80146f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80146fa:	f107 0208 	add.w	r2, r7, #8
 80146fe:	4610      	mov	r0, r2
 8014700:	4798      	blx	r3
 8014702:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014704:	e029      	b.n	801475a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014706:	6839      	ldr	r1, [r7, #0]
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f000 fa2a 	bl	8014b62 <USBD_CtlError>
        err++;
 801470e:	7afb      	ldrb	r3, [r7, #11]
 8014710:	3301      	adds	r3, #1
 8014712:	72fb      	strb	r3, [r7, #11]
      break;
 8014714:	e021      	b.n	801475a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	7c1b      	ldrb	r3, [r3, #16]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d10d      	bne.n	801473a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014726:	f107 0208 	add.w	r2, r7, #8
 801472a:	4610      	mov	r0, r2
 801472c:	4798      	blx	r3
 801472e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	3301      	adds	r3, #1
 8014734:	2207      	movs	r2, #7
 8014736:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014738:	e00f      	b.n	801475a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801473a:	6839      	ldr	r1, [r7, #0]
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f000 fa10 	bl	8014b62 <USBD_CtlError>
        err++;
 8014742:	7afb      	ldrb	r3, [r7, #11]
 8014744:	3301      	adds	r3, #1
 8014746:	72fb      	strb	r3, [r7, #11]
      break;
 8014748:	e007      	b.n	801475a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801474a:	6839      	ldr	r1, [r7, #0]
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	f000 fa08 	bl	8014b62 <USBD_CtlError>
      err++;
 8014752:	7afb      	ldrb	r3, [r7, #11]
 8014754:	3301      	adds	r3, #1
 8014756:	72fb      	strb	r3, [r7, #11]
      break;
 8014758:	bf00      	nop
  }

  if (err != 0U)
 801475a:	7afb      	ldrb	r3, [r7, #11]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d11e      	bne.n	801479e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	88db      	ldrh	r3, [r3, #6]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d016      	beq.n	8014796 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014768:	893b      	ldrh	r3, [r7, #8]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d00e      	beq.n	801478c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801476e:	683b      	ldr	r3, [r7, #0]
 8014770:	88da      	ldrh	r2, [r3, #6]
 8014772:	893b      	ldrh	r3, [r7, #8]
 8014774:	4293      	cmp	r3, r2
 8014776:	bf28      	it	cs
 8014778:	4613      	movcs	r3, r2
 801477a:	b29b      	uxth	r3, r3
 801477c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801477e:	893b      	ldrh	r3, [r7, #8]
 8014780:	461a      	mov	r2, r3
 8014782:	68f9      	ldr	r1, [r7, #12]
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f000 fa69 	bl	8014c5c <USBD_CtlSendData>
 801478a:	e009      	b.n	80147a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801478c:	6839      	ldr	r1, [r7, #0]
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f000 f9e7 	bl	8014b62 <USBD_CtlError>
 8014794:	e004      	b.n	80147a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f000 faba 	bl	8014d10 <USBD_CtlSendStatus>
 801479c:	e000      	b.n	80147a0 <USBD_GetDescriptor+0x320>
    return;
 801479e:	bf00      	nop
  }
}
 80147a0:	3710      	adds	r7, #16
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}
 80147a6:	bf00      	nop

080147a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b084      	sub	sp, #16
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	889b      	ldrh	r3, [r3, #4]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d131      	bne.n	801481e <USBD_SetAddress+0x76>
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	88db      	ldrh	r3, [r3, #6]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d12d      	bne.n	801481e <USBD_SetAddress+0x76>
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	885b      	ldrh	r3, [r3, #2]
 80147c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80147c8:	d829      	bhi.n	801481e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	885b      	ldrh	r3, [r3, #2]
 80147ce:	b2db      	uxtb	r3, r3
 80147d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80147dc:	b2db      	uxtb	r3, r3
 80147de:	2b03      	cmp	r3, #3
 80147e0:	d104      	bne.n	80147ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80147e2:	6839      	ldr	r1, [r7, #0]
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f000 f9bc 	bl	8014b62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80147ea:	e01d      	b.n	8014828 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	7bfa      	ldrb	r2, [r7, #15]
 80147f0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80147f4:	7bfb      	ldrb	r3, [r7, #15]
 80147f6:	4619      	mov	r1, r3
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f005 ff54 	bl	801a6a6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f000 fa86 	bl	8014d10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014804:	7bfb      	ldrb	r3, [r7, #15]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d004      	beq.n	8014814 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	2202      	movs	r2, #2
 801480e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014812:	e009      	b.n	8014828 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	2201      	movs	r2, #1
 8014818:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801481c:	e004      	b.n	8014828 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801481e:	6839      	ldr	r1, [r7, #0]
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f000 f99e 	bl	8014b62 <USBD_CtlError>
  }
}
 8014826:	bf00      	nop
 8014828:	bf00      	nop
 801482a:	3710      	adds	r7, #16
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}

08014830 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b084      	sub	sp, #16
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
 8014838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801483a:	2300      	movs	r3, #0
 801483c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	885b      	ldrh	r3, [r3, #2]
 8014842:	b2da      	uxtb	r2, r3
 8014844:	4b4e      	ldr	r3, [pc, #312]	@ (8014980 <USBD_SetConfig+0x150>)
 8014846:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014848:	4b4d      	ldr	r3, [pc, #308]	@ (8014980 <USBD_SetConfig+0x150>)
 801484a:	781b      	ldrb	r3, [r3, #0]
 801484c:	2b01      	cmp	r3, #1
 801484e:	d905      	bls.n	801485c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014850:	6839      	ldr	r1, [r7, #0]
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f000 f985 	bl	8014b62 <USBD_CtlError>
    return USBD_FAIL;
 8014858:	2303      	movs	r3, #3
 801485a:	e08c      	b.n	8014976 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014862:	b2db      	uxtb	r3, r3
 8014864:	2b02      	cmp	r3, #2
 8014866:	d002      	beq.n	801486e <USBD_SetConfig+0x3e>
 8014868:	2b03      	cmp	r3, #3
 801486a:	d029      	beq.n	80148c0 <USBD_SetConfig+0x90>
 801486c:	e075      	b.n	801495a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801486e:	4b44      	ldr	r3, [pc, #272]	@ (8014980 <USBD_SetConfig+0x150>)
 8014870:	781b      	ldrb	r3, [r3, #0]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d020      	beq.n	80148b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014876:	4b42      	ldr	r3, [pc, #264]	@ (8014980 <USBD_SetConfig+0x150>)
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	461a      	mov	r2, r3
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014880:	4b3f      	ldr	r3, [pc, #252]	@ (8014980 <USBD_SetConfig+0x150>)
 8014882:	781b      	ldrb	r3, [r3, #0]
 8014884:	4619      	mov	r1, r3
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f7ff f80d 	bl	80138a6 <USBD_SetClassConfig>
 801488c:	4603      	mov	r3, r0
 801488e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014890:	7bfb      	ldrb	r3, [r7, #15]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d008      	beq.n	80148a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014896:	6839      	ldr	r1, [r7, #0]
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f000 f962 	bl	8014b62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	2202      	movs	r2, #2
 80148a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80148a6:	e065      	b.n	8014974 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f000 fa31 	bl	8014d10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	2203      	movs	r2, #3
 80148b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80148b6:	e05d      	b.n	8014974 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	f000 fa29 	bl	8014d10 <USBD_CtlSendStatus>
      break;
 80148be:	e059      	b.n	8014974 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80148c0:	4b2f      	ldr	r3, [pc, #188]	@ (8014980 <USBD_SetConfig+0x150>)
 80148c2:	781b      	ldrb	r3, [r3, #0]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d112      	bne.n	80148ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	2202      	movs	r2, #2
 80148cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80148d0:	4b2b      	ldr	r3, [pc, #172]	@ (8014980 <USBD_SetConfig+0x150>)
 80148d2:	781b      	ldrb	r3, [r3, #0]
 80148d4:	461a      	mov	r2, r3
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80148da:	4b29      	ldr	r3, [pc, #164]	@ (8014980 <USBD_SetConfig+0x150>)
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	4619      	mov	r1, r3
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f7fe fffc 	bl	80138de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	f000 fa12 	bl	8014d10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80148ec:	e042      	b.n	8014974 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80148ee:	4b24      	ldr	r3, [pc, #144]	@ (8014980 <USBD_SetConfig+0x150>)
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	461a      	mov	r2, r3
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	685b      	ldr	r3, [r3, #4]
 80148f8:	429a      	cmp	r2, r3
 80148fa:	d02a      	beq.n	8014952 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	685b      	ldr	r3, [r3, #4]
 8014900:	b2db      	uxtb	r3, r3
 8014902:	4619      	mov	r1, r3
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7fe ffea 	bl	80138de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801490a:	4b1d      	ldr	r3, [pc, #116]	@ (8014980 <USBD_SetConfig+0x150>)
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	461a      	mov	r2, r3
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014914:	4b1a      	ldr	r3, [pc, #104]	@ (8014980 <USBD_SetConfig+0x150>)
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	4619      	mov	r1, r3
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f7fe ffc3 	bl	80138a6 <USBD_SetClassConfig>
 8014920:	4603      	mov	r3, r0
 8014922:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014924:	7bfb      	ldrb	r3, [r7, #15]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d00f      	beq.n	801494a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801492a:	6839      	ldr	r1, [r7, #0]
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	f000 f918 	bl	8014b62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	685b      	ldr	r3, [r3, #4]
 8014936:	b2db      	uxtb	r3, r3
 8014938:	4619      	mov	r1, r3
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f7fe ffcf 	bl	80138de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	2202      	movs	r2, #2
 8014944:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014948:	e014      	b.n	8014974 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f000 f9e0 	bl	8014d10 <USBD_CtlSendStatus>
      break;
 8014950:	e010      	b.n	8014974 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f000 f9dc 	bl	8014d10 <USBD_CtlSendStatus>
      break;
 8014958:	e00c      	b.n	8014974 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801495a:	6839      	ldr	r1, [r7, #0]
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f000 f900 	bl	8014b62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014962:	4b07      	ldr	r3, [pc, #28]	@ (8014980 <USBD_SetConfig+0x150>)
 8014964:	781b      	ldrb	r3, [r3, #0]
 8014966:	4619      	mov	r1, r3
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f7fe ffb8 	bl	80138de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801496e:	2303      	movs	r3, #3
 8014970:	73fb      	strb	r3, [r7, #15]
      break;
 8014972:	bf00      	nop
  }

  return ret;
 8014974:	7bfb      	ldrb	r3, [r7, #15]
}
 8014976:	4618      	mov	r0, r3
 8014978:	3710      	adds	r7, #16
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
 801497e:	bf00      	nop
 8014980:	2400c2f8 	.word	0x2400c2f8

08014984 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b082      	sub	sp, #8
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
 801498c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	88db      	ldrh	r3, [r3, #6]
 8014992:	2b01      	cmp	r3, #1
 8014994:	d004      	beq.n	80149a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014996:	6839      	ldr	r1, [r7, #0]
 8014998:	6878      	ldr	r0, [r7, #4]
 801499a:	f000 f8e2 	bl	8014b62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801499e:	e023      	b.n	80149e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80149a6:	b2db      	uxtb	r3, r3
 80149a8:	2b02      	cmp	r3, #2
 80149aa:	dc02      	bgt.n	80149b2 <USBD_GetConfig+0x2e>
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	dc03      	bgt.n	80149b8 <USBD_GetConfig+0x34>
 80149b0:	e015      	b.n	80149de <USBD_GetConfig+0x5a>
 80149b2:	2b03      	cmp	r3, #3
 80149b4:	d00b      	beq.n	80149ce <USBD_GetConfig+0x4a>
 80149b6:	e012      	b.n	80149de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2200      	movs	r2, #0
 80149bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	3308      	adds	r3, #8
 80149c2:	2201      	movs	r2, #1
 80149c4:	4619      	mov	r1, r3
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f000 f948 	bl	8014c5c <USBD_CtlSendData>
        break;
 80149cc:	e00c      	b.n	80149e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	3304      	adds	r3, #4
 80149d2:	2201      	movs	r2, #1
 80149d4:	4619      	mov	r1, r3
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f000 f940 	bl	8014c5c <USBD_CtlSendData>
        break;
 80149dc:	e004      	b.n	80149e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80149de:	6839      	ldr	r1, [r7, #0]
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f000 f8be 	bl	8014b62 <USBD_CtlError>
        break;
 80149e6:	bf00      	nop
}
 80149e8:	bf00      	nop
 80149ea:	3708      	adds	r7, #8
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}

080149f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b082      	sub	sp, #8
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
 80149f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014a00:	b2db      	uxtb	r3, r3
 8014a02:	3b01      	subs	r3, #1
 8014a04:	2b02      	cmp	r3, #2
 8014a06:	d81e      	bhi.n	8014a46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014a08:	683b      	ldr	r3, [r7, #0]
 8014a0a:	88db      	ldrh	r3, [r3, #6]
 8014a0c:	2b02      	cmp	r3, #2
 8014a0e:	d004      	beq.n	8014a1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014a10:	6839      	ldr	r1, [r7, #0]
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f000 f8a5 	bl	8014b62 <USBD_CtlError>
        break;
 8014a18:	e01a      	b.n	8014a50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2201      	movs	r2, #1
 8014a1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d005      	beq.n	8014a36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	68db      	ldr	r3, [r3, #12]
 8014a2e:	f043 0202 	orr.w	r2, r3, #2
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	330c      	adds	r3, #12
 8014a3a:	2202      	movs	r2, #2
 8014a3c:	4619      	mov	r1, r3
 8014a3e:	6878      	ldr	r0, [r7, #4]
 8014a40:	f000 f90c 	bl	8014c5c <USBD_CtlSendData>
      break;
 8014a44:	e004      	b.n	8014a50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014a46:	6839      	ldr	r1, [r7, #0]
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	f000 f88a 	bl	8014b62 <USBD_CtlError>
      break;
 8014a4e:	bf00      	nop
  }
}
 8014a50:	bf00      	nop
 8014a52:	3708      	adds	r7, #8
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}

08014a58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b082      	sub	sp, #8
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
 8014a60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	885b      	ldrh	r3, [r3, #2]
 8014a66:	2b01      	cmp	r3, #1
 8014a68:	d107      	bne.n	8014a7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	2201      	movs	r2, #1
 8014a6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f000 f94c 	bl	8014d10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014a78:	e013      	b.n	8014aa2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	885b      	ldrh	r3, [r3, #2]
 8014a7e:	2b02      	cmp	r3, #2
 8014a80:	d10b      	bne.n	8014a9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014a82:	683b      	ldr	r3, [r7, #0]
 8014a84:	889b      	ldrh	r3, [r3, #4]
 8014a86:	0a1b      	lsrs	r3, r3, #8
 8014a88:	b29b      	uxth	r3, r3
 8014a8a:	b2da      	uxtb	r2, r3
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f000 f93c 	bl	8014d10 <USBD_CtlSendStatus>
}
 8014a98:	e003      	b.n	8014aa2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014a9a:	6839      	ldr	r1, [r7, #0]
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	f000 f860 	bl	8014b62 <USBD_CtlError>
}
 8014aa2:	bf00      	nop
 8014aa4:	3708      	adds	r7, #8
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}

08014aaa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014aaa:	b580      	push	{r7, lr}
 8014aac:	b082      	sub	sp, #8
 8014aae:	af00      	add	r7, sp, #0
 8014ab0:	6078      	str	r0, [r7, #4]
 8014ab2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014aba:	b2db      	uxtb	r3, r3
 8014abc:	3b01      	subs	r3, #1
 8014abe:	2b02      	cmp	r3, #2
 8014ac0:	d80b      	bhi.n	8014ada <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	885b      	ldrh	r3, [r3, #2]
 8014ac6:	2b01      	cmp	r3, #1
 8014ac8:	d10c      	bne.n	8014ae4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2200      	movs	r2, #0
 8014ace:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	f000 f91c 	bl	8014d10 <USBD_CtlSendStatus>
      }
      break;
 8014ad8:	e004      	b.n	8014ae4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014ada:	6839      	ldr	r1, [r7, #0]
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f000 f840 	bl	8014b62 <USBD_CtlError>
      break;
 8014ae2:	e000      	b.n	8014ae6 <USBD_ClrFeature+0x3c>
      break;
 8014ae4:	bf00      	nop
  }
}
 8014ae6:	bf00      	nop
 8014ae8:	3708      	adds	r7, #8
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}

08014aee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014aee:	b580      	push	{r7, lr}
 8014af0:	b084      	sub	sp, #16
 8014af2:	af00      	add	r7, sp, #0
 8014af4:	6078      	str	r0, [r7, #4]
 8014af6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	781a      	ldrb	r2, [r3, #0]
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	3301      	adds	r3, #1
 8014b08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	781a      	ldrb	r2, [r3, #0]
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	3301      	adds	r3, #1
 8014b16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014b18:	68f8      	ldr	r0, [r7, #12]
 8014b1a:	f7ff fa16 	bl	8013f4a <SWAPBYTE>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	461a      	mov	r2, r3
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	3301      	adds	r3, #1
 8014b2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	3301      	adds	r3, #1
 8014b30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014b32:	68f8      	ldr	r0, [r7, #12]
 8014b34:	f7ff fa09 	bl	8013f4a <SWAPBYTE>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	461a      	mov	r2, r3
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	3301      	adds	r3, #1
 8014b44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	3301      	adds	r3, #1
 8014b4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014b4c:	68f8      	ldr	r0, [r7, #12]
 8014b4e:	f7ff f9fc 	bl	8013f4a <SWAPBYTE>
 8014b52:	4603      	mov	r3, r0
 8014b54:	461a      	mov	r2, r3
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	80da      	strh	r2, [r3, #6]
}
 8014b5a:	bf00      	nop
 8014b5c:	3710      	adds	r7, #16
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}

08014b62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b62:	b580      	push	{r7, lr}
 8014b64:	b082      	sub	sp, #8
 8014b66:	af00      	add	r7, sp, #0
 8014b68:	6078      	str	r0, [r7, #4]
 8014b6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b6c:	2180      	movs	r1, #128	@ 0x80
 8014b6e:	6878      	ldr	r0, [r7, #4]
 8014b70:	f005 fd2f 	bl	801a5d2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014b74:	2100      	movs	r1, #0
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f005 fd2b 	bl	801a5d2 <USBD_LL_StallEP>
}
 8014b7c:	bf00      	nop
 8014b7e:	3708      	adds	r7, #8
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bd80      	pop	{r7, pc}

08014b84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b086      	sub	sp, #24
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	60f8      	str	r0, [r7, #12]
 8014b8c:	60b9      	str	r1, [r7, #8]
 8014b8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014b90:	2300      	movs	r3, #0
 8014b92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d042      	beq.n	8014c20 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014b9e:	6938      	ldr	r0, [r7, #16]
 8014ba0:	f000 f842 	bl	8014c28 <USBD_GetLen>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	3301      	adds	r3, #1
 8014ba8:	005b      	lsls	r3, r3, #1
 8014baa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014bae:	d808      	bhi.n	8014bc2 <USBD_GetString+0x3e>
 8014bb0:	6938      	ldr	r0, [r7, #16]
 8014bb2:	f000 f839 	bl	8014c28 <USBD_GetLen>
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	3301      	adds	r3, #1
 8014bba:	b29b      	uxth	r3, r3
 8014bbc:	005b      	lsls	r3, r3, #1
 8014bbe:	b29a      	uxth	r2, r3
 8014bc0:	e001      	b.n	8014bc6 <USBD_GetString+0x42>
 8014bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014bca:	7dfb      	ldrb	r3, [r7, #23]
 8014bcc:	68ba      	ldr	r2, [r7, #8]
 8014bce:	4413      	add	r3, r2
 8014bd0:	687a      	ldr	r2, [r7, #4]
 8014bd2:	7812      	ldrb	r2, [r2, #0]
 8014bd4:	701a      	strb	r2, [r3, #0]
  idx++;
 8014bd6:	7dfb      	ldrb	r3, [r7, #23]
 8014bd8:	3301      	adds	r3, #1
 8014bda:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014bdc:	7dfb      	ldrb	r3, [r7, #23]
 8014bde:	68ba      	ldr	r2, [r7, #8]
 8014be0:	4413      	add	r3, r2
 8014be2:	2203      	movs	r2, #3
 8014be4:	701a      	strb	r2, [r3, #0]
  idx++;
 8014be6:	7dfb      	ldrb	r3, [r7, #23]
 8014be8:	3301      	adds	r3, #1
 8014bea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014bec:	e013      	b.n	8014c16 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014bee:	7dfb      	ldrb	r3, [r7, #23]
 8014bf0:	68ba      	ldr	r2, [r7, #8]
 8014bf2:	4413      	add	r3, r2
 8014bf4:	693a      	ldr	r2, [r7, #16]
 8014bf6:	7812      	ldrb	r2, [r2, #0]
 8014bf8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014bfa:	693b      	ldr	r3, [r7, #16]
 8014bfc:	3301      	adds	r3, #1
 8014bfe:	613b      	str	r3, [r7, #16]
    idx++;
 8014c00:	7dfb      	ldrb	r3, [r7, #23]
 8014c02:	3301      	adds	r3, #1
 8014c04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014c06:	7dfb      	ldrb	r3, [r7, #23]
 8014c08:	68ba      	ldr	r2, [r7, #8]
 8014c0a:	4413      	add	r3, r2
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	701a      	strb	r2, [r3, #0]
    idx++;
 8014c10:	7dfb      	ldrb	r3, [r7, #23]
 8014c12:	3301      	adds	r3, #1
 8014c14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014c16:	693b      	ldr	r3, [r7, #16]
 8014c18:	781b      	ldrb	r3, [r3, #0]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d1e7      	bne.n	8014bee <USBD_GetString+0x6a>
 8014c1e:	e000      	b.n	8014c22 <USBD_GetString+0x9e>
    return;
 8014c20:	bf00      	nop
  }
}
 8014c22:	3718      	adds	r7, #24
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd80      	pop	{r7, pc}

08014c28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014c28:	b480      	push	{r7}
 8014c2a:	b085      	sub	sp, #20
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014c30:	2300      	movs	r3, #0
 8014c32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014c38:	e005      	b.n	8014c46 <USBD_GetLen+0x1e>
  {
    len++;
 8014c3a:	7bfb      	ldrb	r3, [r7, #15]
 8014c3c:	3301      	adds	r3, #1
 8014c3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014c40:	68bb      	ldr	r3, [r7, #8]
 8014c42:	3301      	adds	r3, #1
 8014c44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	781b      	ldrb	r3, [r3, #0]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d1f5      	bne.n	8014c3a <USBD_GetLen+0x12>
  }

  return len;
 8014c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c50:	4618      	mov	r0, r3
 8014c52:	3714      	adds	r7, #20
 8014c54:	46bd      	mov	sp, r7
 8014c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5a:	4770      	bx	lr

08014c5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b084      	sub	sp, #16
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	60f8      	str	r0, [r7, #12]
 8014c64:	60b9      	str	r1, [r7, #8]
 8014c66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	2202      	movs	r2, #2
 8014c6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	687a      	ldr	r2, [r7, #4]
 8014c74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	687a      	ldr	r2, [r7, #4]
 8014c7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	68ba      	ldr	r2, [r7, #8]
 8014c80:	2100      	movs	r1, #0
 8014c82:	68f8      	ldr	r0, [r7, #12]
 8014c84:	f005 fd2e 	bl	801a6e4 <USBD_LL_Transmit>

  return USBD_OK;
 8014c88:	2300      	movs	r3, #0
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3710      	adds	r7, #16
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}

08014c92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014c92:	b580      	push	{r7, lr}
 8014c94:	b084      	sub	sp, #16
 8014c96:	af00      	add	r7, sp, #0
 8014c98:	60f8      	str	r0, [r7, #12]
 8014c9a:	60b9      	str	r1, [r7, #8]
 8014c9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	68ba      	ldr	r2, [r7, #8]
 8014ca2:	2100      	movs	r1, #0
 8014ca4:	68f8      	ldr	r0, [r7, #12]
 8014ca6:	f005 fd1d 	bl	801a6e4 <USBD_LL_Transmit>

  return USBD_OK;
 8014caa:	2300      	movs	r3, #0
}
 8014cac:	4618      	mov	r0, r3
 8014cae:	3710      	adds	r7, #16
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}

08014cb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b084      	sub	sp, #16
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	60f8      	str	r0, [r7, #12]
 8014cbc:	60b9      	str	r1, [r7, #8]
 8014cbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2203      	movs	r2, #3
 8014cc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	687a      	ldr	r2, [r7, #4]
 8014ccc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	687a      	ldr	r2, [r7, #4]
 8014cd4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	68ba      	ldr	r2, [r7, #8]
 8014cdc:	2100      	movs	r1, #0
 8014cde:	68f8      	ldr	r0, [r7, #12]
 8014ce0:	f005 fd21 	bl	801a726 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014ce4:	2300      	movs	r3, #0
}
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	3710      	adds	r7, #16
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}

08014cee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014cee:	b580      	push	{r7, lr}
 8014cf0:	b084      	sub	sp, #16
 8014cf2:	af00      	add	r7, sp, #0
 8014cf4:	60f8      	str	r0, [r7, #12]
 8014cf6:	60b9      	str	r1, [r7, #8]
 8014cf8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	68ba      	ldr	r2, [r7, #8]
 8014cfe:	2100      	movs	r1, #0
 8014d00:	68f8      	ldr	r0, [r7, #12]
 8014d02:	f005 fd10 	bl	801a726 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d06:	2300      	movs	r3, #0
}
 8014d08:	4618      	mov	r0, r3
 8014d0a:	3710      	adds	r7, #16
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}

08014d10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b082      	sub	sp, #8
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2204      	movs	r2, #4
 8014d1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014d20:	2300      	movs	r3, #0
 8014d22:	2200      	movs	r2, #0
 8014d24:	2100      	movs	r1, #0
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f005 fcdc 	bl	801a6e4 <USBD_LL_Transmit>

  return USBD_OK;
 8014d2c:	2300      	movs	r3, #0
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3708      	adds	r7, #8
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}

08014d36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014d36:	b580      	push	{r7, lr}
 8014d38:	b082      	sub	sp, #8
 8014d3a:	af00      	add	r7, sp, #0
 8014d3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2205      	movs	r2, #5
 8014d42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014d46:	2300      	movs	r3, #0
 8014d48:	2200      	movs	r2, #0
 8014d4a:	2100      	movs	r1, #0
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f005 fcea 	bl	801a726 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d52:	2300      	movs	r3, #0
}
 8014d54:	4618      	mov	r0, r3
 8014d56:	3708      	adds	r7, #8
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	bd80      	pop	{r7, pc}

08014d5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b084      	sub	sp, #16
 8014d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  uint32_t now_ms = HAL_GetTick();
 8014d62:	f7ef fcf9 	bl	8004758 <HAL_GetTick>
 8014d66:	60f8      	str	r0, [r7, #12]
  uint32_t mins = (now_ms / 1000) / 60;
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8014e68 <MX_USB_DEVICE_Init+0x10c>)
 8014d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8014d70:	0b9b      	lsrs	r3, r3, #14
 8014d72:	60bb      	str	r3, [r7, #8]
  uint32_t secs = (now_ms / 1000) % 60;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	4a3d      	ldr	r2, [pc, #244]	@ (8014e6c <MX_USB_DEVICE_Init+0x110>)
 8014d78:	fba2 2303 	umull	r2, r3, r2, r3
 8014d7c:	099a      	lsrs	r2, r3, #6
 8014d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8014e70 <MX_USB_DEVICE_Init+0x114>)
 8014d80:	fba3 1302 	umull	r1, r3, r3, r2
 8014d84:	0959      	lsrs	r1, r3, #5
 8014d86:	460b      	mov	r3, r1
 8014d88:	011b      	lsls	r3, r3, #4
 8014d8a:	1a5b      	subs	r3, r3, r1
 8014d8c:	009b      	lsls	r3, r3, #2
 8014d8e:	1ad3      	subs	r3, r2, r3
 8014d90:	607b      	str	r3, [r7, #4]
  uint32_t ms   = now_ms % 1000;
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	4a35      	ldr	r2, [pc, #212]	@ (8014e6c <MX_USB_DEVICE_Init+0x110>)
 8014d96:	fba2 1203 	umull	r1, r2, r2, r3
 8014d9a:	0992      	lsrs	r2, r2, #6
 8014d9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014da0:	fb01 f202 	mul.w	r2, r1, r2
 8014da4:	1a9b      	subs	r3, r3, r2
 8014da6:	603b      	str	r3, [r7, #0]
  
  printf("[%02lu:%02lu.%03lu][USB_INIT] Starting MX_USB_DEVICE_Init...\r\n", mins, secs, ms);
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	687a      	ldr	r2, [r7, #4]
 8014dac:	68b9      	ldr	r1, [r7, #8]
 8014dae:	4831      	ldr	r0, [pc, #196]	@ (8014e74 <MX_USB_DEVICE_Init+0x118>)
 8014db0:	f005 fdf6 	bl	801a9a0 <iprintf>

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8014db4:	2201      	movs	r2, #1
 8014db6:	4930      	ldr	r1, [pc, #192]	@ (8014e78 <MX_USB_DEVICE_Init+0x11c>)
 8014db8:	4830      	ldr	r0, [pc, #192]	@ (8014e7c <MX_USB_DEVICE_Init+0x120>)
 8014dba:	f7fe fcf7 	bl	80137ac <USBD_Init>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d007      	beq.n	8014dd4 <MX_USB_DEVICE_Init+0x78>
  {
    printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_Init FAILED\r\n", mins, secs, ms);
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	687a      	ldr	r2, [r7, #4]
 8014dc8:	68b9      	ldr	r1, [r7, #8]
 8014dca:	482d      	ldr	r0, [pc, #180]	@ (8014e80 <MX_USB_DEVICE_Init+0x124>)
 8014dcc:	f005 fde8 	bl	801a9a0 <iprintf>
    Error_Handler();
 8014dd0:	f7ed fca8 	bl	8002724 <Error_Handler>
  }
  printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_Init OK\r\n", mins, secs, ms);
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	687a      	ldr	r2, [r7, #4]
 8014dd8:	68b9      	ldr	r1, [r7, #8]
 8014dda:	482a      	ldr	r0, [pc, #168]	@ (8014e84 <MX_USB_DEVICE_Init+0x128>)
 8014ddc:	f005 fde0 	bl	801a9a0 <iprintf>

  /* Register composite class: CDC (IF0/1) + Vendor (IF2) */
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC_VENDOR) != USBD_OK)
 8014de0:	4929      	ldr	r1, [pc, #164]	@ (8014e88 <MX_USB_DEVICE_Init+0x12c>)
 8014de2:	4826      	ldr	r0, [pc, #152]	@ (8014e7c <MX_USB_DEVICE_Init+0x120>)
 8014de4:	f7fe fd12 	bl	801380c <USBD_RegisterClass>
 8014de8:	4603      	mov	r3, r0
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d007      	beq.n	8014dfe <MX_USB_DEVICE_Init+0xa2>
  {
    printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_RegisterClass FAILED\r\n", mins, secs, ms);
 8014dee:	683b      	ldr	r3, [r7, #0]
 8014df0:	687a      	ldr	r2, [r7, #4]
 8014df2:	68b9      	ldr	r1, [r7, #8]
 8014df4:	4825      	ldr	r0, [pc, #148]	@ (8014e8c <MX_USB_DEVICE_Init+0x130>)
 8014df6:	f005 fdd3 	bl	801a9a0 <iprintf>
    Error_Handler();
 8014dfa:	f7ed fc93 	bl	8002724 <Error_Handler>
  }
  printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_RegisterClass OK\r\n", mins, secs, ms);
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	687a      	ldr	r2, [r7, #4]
 8014e02:	68b9      	ldr	r1, [r7, #8]
 8014e04:	4822      	ldr	r0, [pc, #136]	@ (8014e90 <MX_USB_DEVICE_Init+0x134>)
 8014e06:	f005 fdcb 	bl	801a9a0 <iprintf>

  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8014e0a:	4922      	ldr	r1, [pc, #136]	@ (8014e94 <MX_USB_DEVICE_Init+0x138>)
 8014e0c:	481b      	ldr	r0, [pc, #108]	@ (8014e7c <MX_USB_DEVICE_Init+0x120>)
 8014e0e:	f7fe fbfe 	bl	801360e <USBD_CDC_RegisterInterface>
 8014e12:	4603      	mov	r3, r0
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d007      	beq.n	8014e28 <MX_USB_DEVICE_Init+0xcc>
  {
    printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_CDC_RegisterInterface FAILED\r\n", mins, secs, ms);
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	687a      	ldr	r2, [r7, #4]
 8014e1c:	68b9      	ldr	r1, [r7, #8]
 8014e1e:	481e      	ldr	r0, [pc, #120]	@ (8014e98 <MX_USB_DEVICE_Init+0x13c>)
 8014e20:	f005 fdbe 	bl	801a9a0 <iprintf>
    Error_Handler();
 8014e24:	f7ed fc7e 	bl	8002724 <Error_Handler>
  }
  printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_CDC_RegisterInterface OK\r\n", mins, secs, ms);
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	687a      	ldr	r2, [r7, #4]
 8014e2c:	68b9      	ldr	r1, [r7, #8]
 8014e2e:	481b      	ldr	r0, [pc, #108]	@ (8014e9c <MX_USB_DEVICE_Init+0x140>)
 8014e30:	f005 fdb6 	bl	801a9a0 <iprintf>

  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8014e34:	4811      	ldr	r0, [pc, #68]	@ (8014e7c <MX_USB_DEVICE_Init+0x120>)
 8014e36:	f7fe fd1f 	bl	8013878 <USBD_Start>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d007      	beq.n	8014e50 <MX_USB_DEVICE_Init+0xf4>
  {
    printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_Start FAILED\r\n", mins, secs, ms);
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	68b9      	ldr	r1, [r7, #8]
 8014e46:	4816      	ldr	r0, [pc, #88]	@ (8014ea0 <MX_USB_DEVICE_Init+0x144>)
 8014e48:	f005 fdaa 	bl	801a9a0 <iprintf>
    Error_Handler();
 8014e4c:	f7ed fc6a 	bl	8002724 <Error_Handler>
  }
  printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_Start OK - device should enumerate now\r\n", mins, secs, ms);
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	687a      	ldr	r2, [r7, #4]
 8014e54:	68b9      	ldr	r1, [r7, #8]
 8014e56:	4813      	ldr	r0, [pc, #76]	@ (8014ea4 <MX_USB_DEVICE_Init+0x148>)
 8014e58:	f005 fda2 	bl	801a9a0 <iprintf>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014e5c:	f7f6 f872 	bl	800af44 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014e60:	bf00      	nop
 8014e62:	3710      	adds	r7, #16
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bd80      	pop	{r7, pc}
 8014e68:	45e7b273 	.word	0x45e7b273
 8014e6c:	10624dd3 	.word	0x10624dd3
 8014e70:	88888889 	.word	0x88888889
 8014e74:	0801c74c 	.word	0x0801c74c
 8014e78:	240001f4 	.word	0x240001f4
 8014e7c:	2400c2fc 	.word	0x2400c2fc
 8014e80:	0801c78c 	.word	0x0801c78c
 8014e84:	0801c7c0 	.word	0x0801c7c0
 8014e88:	240001a8 	.word	0x240001a8
 8014e8c:	0801c7f0 	.word	0x0801c7f0
 8014e90:	0801c82c 	.word	0x0801c82c
 8014e94:	240001e0 	.word	0x240001e0
 8014e98:	0801c864 	.word	0x0801c864
 8014e9c:	0801c8a8 	.word	0x0801c8a8
 8014ea0:	0801c8e8 	.word	0x0801c8e8
 8014ea4:	0801c91c 	.word	0x0801c91c

08014ea8 <vnd_update_lcd_params>:
static uint32_t diag_current_pair_seq = 0xFFFFFFFFu;
static uint16_t win_start0 = 0, win_len0 = 0, win_start1 = 0, win_len1 = 0;

/* Локальная утилита: обновить LCD параметрами, присланными хостом */
static void vnd_update_lcd_params(void)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b082      	sub	sp, #8
 8014eac:	af00      	add	r7, sp, #0
    /* Частота блоков (пар кадров A+B): в FULL берём из периода пары, в DIAG — diag_hz */
    uint16_t block_hz = 0;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	80fb      	strh	r3, [r7, #6]
    if(full_mode) {
 8014eb2:	4b19      	ldr	r3, [pc, #100]	@ (8014f18 <vnd_update_lcd_params+0x70>)
 8014eb4:	781b      	ldrb	r3, [r3, #0]
 8014eb6:	b2db      	uxtb	r3, r3
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d00f      	beq.n	8014edc <vnd_update_lcd_params+0x34>
        uint16_t pp = vnd_pair_period_ms;
 8014ebc:	4b17      	ldr	r3, [pc, #92]	@ (8014f1c <vnd_update_lcd_params+0x74>)
 8014ebe:	881b      	ldrh	r3, [r3, #0]
 8014ec0:	80bb      	strh	r3, [r7, #4]
        block_hz = (pp > 0) ? (uint16_t)(1000u / pp) : 0u;
 8014ec2:	88bb      	ldrh	r3, [r7, #4]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d006      	beq.n	8014ed6 <vnd_update_lcd_params+0x2e>
 8014ec8:	88bb      	ldrh	r3, [r7, #4]
 8014eca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ed2:	b29b      	uxth	r3, r3
 8014ed4:	e000      	b.n	8014ed8 <vnd_update_lcd_params+0x30>
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	80fb      	strh	r3, [r7, #6]
 8014eda:	e002      	b.n	8014ee2 <vnd_update_lcd_params+0x3a>
    } else {
        block_hz = diag_hz;
 8014edc:	4b10      	ldr	r3, [pc, #64]	@ (8014f20 <vnd_update_lcd_params+0x78>)
 8014ede:	881b      	ldrh	r3, [r3, #0]
 8014ee0:	80fb      	strh	r3, [r7, #6]
    }

    /* Кол-во сэмплов на канал в кадре: если явно задано командой — используем его, иначе активное */
    uint16_t frame_samples = (vnd_frame_samples_req != 0) ? vnd_frame_samples_req
 8014ee2:	4b10      	ldr	r3, [pc, #64]	@ (8014f24 <vnd_update_lcd_params+0x7c>)
 8014ee4:	881b      	ldrh	r3, [r3, #0]
 8014ee6:	b29b      	uxth	r3, r3
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d10c      	bne.n	8014f06 <vnd_update_lcd_params+0x5e>
                                : ((cur_samples_per_frame != 0) ? cur_samples_per_frame
 8014eec:	4b0e      	ldr	r3, [pc, #56]	@ (8014f28 <vnd_update_lcd_params+0x80>)
 8014eee:	881b      	ldrh	r3, [r3, #0]
 8014ef0:	b29b      	uxth	r3, r3
    uint16_t frame_samples = (vnd_frame_samples_req != 0) ? vnd_frame_samples_req
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d103      	bne.n	8014efe <vnd_update_lcd_params+0x56>
                                                                : adc_stream_get_active_samples());
 8014ef6:	f7eb fac5 	bl	8000484 <adc_stream_get_active_samples>
 8014efa:	4603      	mov	r3, r0
 8014efc:	e006      	b.n	8014f0c <vnd_update_lcd_params+0x64>
    uint16_t frame_samples = (vnd_frame_samples_req != 0) ? vnd_frame_samples_req
 8014efe:	4b0a      	ldr	r3, [pc, #40]	@ (8014f28 <vnd_update_lcd_params+0x80>)
 8014f00:	881b      	ldrh	r3, [r3, #0]
 8014f02:	b29b      	uxth	r3, r3
 8014f04:	e002      	b.n	8014f0c <vnd_update_lcd_params+0x64>
 8014f06:	4b07      	ldr	r3, [pc, #28]	@ (8014f24 <vnd_update_lcd_params+0x7c>)
 8014f08:	881b      	ldrh	r3, [r3, #0]
 8014f0a:	b29b      	uxth	r3, r3
 8014f0c:	807b      	strh	r3, [r7, #2]
    //     block_hz,
    //     win_start0, win_len0,
    //     win_start1, win_len1,
    //     (uint8_t)full_mode
    // );
}
 8014f0e:	bf00      	nop
 8014f10:	3708      	adds	r7, #8
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bd80      	pop	{r7, pc}
 8014f16:	bf00      	nop
 8014f18:	2400003c 	.word	0x2400003c
 8014f1c:	2400003e 	.word	0x2400003e
 8014f20:	24000040 	.word	0x24000040
 8014f24:	2400c672 	.word	0x2400c672
 8014f28:	2400c5e0 	.word	0x2400c5e0

08014f2c <vnd_cdc_duplicate_preview>:
static uint32_t cdc_last_send_ms = 0;       /* для троттлинга */
static char     cdc_line_buf[1024];         /* статический буфер для передачи */
static uint16_t rd_le16(const uint8_t *p){ return (uint16_t)(p[0] | (p[1] << 8)); }
static uint32_t rd_le32(const uint8_t *p){ return (uint32_t)(p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24)); }
static void vnd_cdc_duplicate_preview(const uint8_t *buf, uint16_t len, const char *tag)
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b085      	sub	sp, #20
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	460b      	mov	r3, r1
 8014f36:	607a      	str	r2, [r7, #4]
 8014f38:	817b      	strh	r3, [r7, #10]
    /* При отключённом превью не выводим копию потока в CDC */
#if !VND_CDC_PREVIEW_ENABLE
    (void)buf; (void)len; (void)tag;
    return;
 8014f3a:	bf00      	nop
    uint8_t rc = CDC_Transmit_HS((uint8_t*)cdc_line_buf, (uint16_t)off);
    if (rc == USBD_OK) {
        cdc_last_send_ms = now;
    }
#endif
}
 8014f3c:	3714      	adds	r7, #20
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f44:	4770      	bx	lr
	...

08014f48 <cdc_logf>:
static uint32_t cdc_stats_last_ms = 0;         /* последняя отметка отправки статистики */
static uint64_t cdc_stats_prev_bytes = 0ULL;   /* предыдущее значение счётчика байт */
static char     cdc_evt_buf[160];              /* буфер форматирования событий */

static void cdc_logf(const char *fmt, ...)
{
 8014f48:	b40f      	push	{r0, r1, r2, r3}
 8014f4a:	b580      	push	{r7, lr}
 8014f4c:	b082      	sub	sp, #8
 8014f4e:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, fmt);
 8014f50:	f107 0314 	add.w	r3, r7, #20
 8014f54:	603b      	str	r3, [r7, #0]
    int n = vsnprintf(cdc_evt_buf, sizeof(cdc_evt_buf) - 2, fmt, ap);
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	693a      	ldr	r2, [r7, #16]
 8014f5a:	219e      	movs	r1, #158	@ 0x9e
 8014f5c:	4812      	ldr	r0, [pc, #72]	@ (8014fa8 <cdc_logf+0x60>)
 8014f5e:	f005 feeb 	bl	801ad38 <vsniprintf>
 8014f62:	6078      	str	r0, [r7, #4]
    va_end(ap);
    if(n < 0) return;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	db17      	blt.n	8014f9a <cdc_logf+0x52>
    if(n > (int)sizeof(cdc_evt_buf) - 2) n = (int)sizeof(cdc_evt_buf) - 2;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2b9e      	cmp	r3, #158	@ 0x9e
 8014f6e:	dd01      	ble.n	8014f74 <cdc_logf+0x2c>
 8014f70:	239e      	movs	r3, #158	@ 0x9e
 8014f72:	607b      	str	r3, [r7, #4]
    cdc_evt_buf[n++] = '\r';
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	1c5a      	adds	r2, r3, #1
 8014f78:	607a      	str	r2, [r7, #4]
 8014f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8014fa8 <cdc_logf+0x60>)
 8014f7c:	210d      	movs	r1, #13
 8014f7e:	54d1      	strb	r1, [r2, r3]
    cdc_evt_buf[n++] = '\n';
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	1c5a      	adds	r2, r3, #1
 8014f84:	607a      	str	r2, [r7, #4]
 8014f86:	4a08      	ldr	r2, [pc, #32]	@ (8014fa8 <cdc_logf+0x60>)
 8014f88:	210a      	movs	r1, #10
 8014f8a:	54d1      	strb	r1, [r2, r3]
    /* неблокирующая попытка: если CDC занят — событие может быть пропущено */
    (void)CDC_Transmit_HS((uint8_t*)cdc_evt_buf, (uint16_t)n);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	b29b      	uxth	r3, r3
 8014f90:	4619      	mov	r1, r3
 8014f92:	4805      	ldr	r0, [pc, #20]	@ (8014fa8 <cdc_logf+0x60>)
 8014f94:	f004 ff3a 	bl	8019e0c <CDC_Transmit_HS>
 8014f98:	e000      	b.n	8014f9c <cdc_logf+0x54>
    if(n < 0) return;
 8014f9a:	bf00      	nop
}
 8014f9c:	3708      	adds	r7, #8
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014fa4:	b004      	add	sp, #16
 8014fa6:	4770      	bx	lr
 8014fa8:	2400dcd0 	.word	0x2400dcd0

08014fac <vnd_cdc_periodic_stats>:

static void vnd_cdc_periodic_stats(uint32_t now_ms)
{
 8014fac:	b5b0      	push	{r4, r5, r7, lr}
 8014fae:	b08c      	sub	sp, #48	@ 0x30
 8014fb0:	af04      	add	r7, sp, #16
 8014fb2:	6078      	str	r0, [r7, #4]
    /* В диагностическом режиме не трогаем CDC вовсе — уменьшаем накладные расходы */
    if(diag_mode_active){ return; }
 8014fb4:	4923      	ldr	r1, [pc, #140]	@ (8015044 <vnd_cdc_periodic_stats+0x98>)
 8014fb6:	7809      	ldrb	r1, [r1, #0]
 8014fb8:	2900      	cmp	r1, #0
 8014fba:	d13d      	bne.n	8015038 <vnd_cdc_periodic_stats+0x8c>
    if(now_ms - cdc_stats_last_ms < 1000) return; /* не чаще 1 Гц */
 8014fbc:	4922      	ldr	r1, [pc, #136]	@ (8015048 <vnd_cdc_periodic_stats+0x9c>)
 8014fbe:	6809      	ldr	r1, [r1, #0]
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	1a41      	subs	r1, r0, r1
 8014fc4:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 8014fc8:	d338      	bcc.n	801503c <vnd_cdc_periodic_stats+0x90>
    cdc_stats_last_ms = now_ms;
 8014fca:	481f      	ldr	r0, [pc, #124]	@ (8015048 <vnd_cdc_periodic_stats+0x9c>)
 8014fcc:	6879      	ldr	r1, [r7, #4]
 8014fce:	6001      	str	r1, [r0, #0]
    uint64_t cur = vnd_total_tx_bytes;
 8014fd0:	491e      	ldr	r1, [pc, #120]	@ (801504c <vnd_cdc_periodic_stats+0xa0>)
 8014fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fd6:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint64_t d   = (cur >= cdc_stats_prev_bytes) ? (cur - cdc_stats_prev_bytes) : 0ULL;
 8014fda:	491d      	ldr	r1, [pc, #116]	@ (8015050 <vnd_cdc_periodic_stats+0xa4>)
 8014fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fe0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8014fe4:	4284      	cmp	r4, r0
 8014fe6:	eb75 0101 	sbcs.w	r1, r5, r1
 8014fea:	d308      	bcc.n	8014ffe <vnd_cdc_periodic_stats+0x52>
 8014fec:	4918      	ldr	r1, [pc, #96]	@ (8015050 <vnd_cdc_periodic_stats+0xa4>)
 8014fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ff2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8014ff6:	1a22      	subs	r2, r4, r0
 8014ff8:	eb65 0301 	sbc.w	r3, r5, r1
 8014ffc:	e003      	b.n	8015006 <vnd_cdc_periodic_stats+0x5a>
 8014ffe:	f04f 0200 	mov.w	r2, #0
 8015002:	f04f 0300 	mov.w	r3, #0
 8015006:	e9c7 2304 	strd	r2, r3, [r7, #16]
    cdc_stats_prev_bytes = cur;
 801500a:	4911      	ldr	r1, [pc, #68]	@ (8015050 <vnd_cdc_periodic_stats+0xa4>)
 801500c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015010:	e9c1 2300 	strd	r2, r3, [r1]
    uint32_t bps = (uint32_t)d; /* за ~1 секунду */
 8015014:	693b      	ldr	r3, [r7, #16]
 8015016:	60fb      	str	r3, [r7, #12]
    cdc_logf("STAT bytes_total=%llu bps=%lu streaming=%u diag=%u",
 8015018:	4b0e      	ldr	r3, [pc, #56]	@ (8015054 <vnd_cdc_periodic_stats+0xa8>)
 801501a:	781b      	ldrb	r3, [r3, #0]
 801501c:	b2db      	uxtb	r3, r3
 801501e:	461a      	mov	r2, r3
 8015020:	4b08      	ldr	r3, [pc, #32]	@ (8015044 <vnd_cdc_periodic_stats+0x98>)
 8015022:	781b      	ldrb	r3, [r3, #0]
 8015024:	9302      	str	r3, [sp, #8]
 8015026:	9201      	str	r2, [sp, #4]
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	9300      	str	r3, [sp, #0]
 801502c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015030:	4809      	ldr	r0, [pc, #36]	@ (8015058 <vnd_cdc_periodic_stats+0xac>)
 8015032:	f7ff ff89 	bl	8014f48 <cdc_logf>
 8015036:	e002      	b.n	801503e <vnd_cdc_periodic_stats+0x92>
    if(diag_mode_active){ return; }
 8015038:	bf00      	nop
 801503a:	e000      	b.n	801503e <vnd_cdc_periodic_stats+0x92>
    if(now_ms - cdc_stats_last_ms < 1000) return; /* не чаще 1 Гц */
 801503c:	bf00      	nop
             (unsigned long long)cur, (unsigned long)bps, (unsigned)streaming, (unsigned)diag_mode_active);
}
 801503e:	3720      	adds	r7, #32
 8015040:	46bd      	mov	sp, r7
 8015042:	bdb0      	pop	{r4, r5, r7, pc}
 8015044:	2400c729 	.word	0x2400c729
 8015048:	2400dcc0 	.word	0x2400dcc0
 801504c:	2400c668 	.word	0x2400c668
 8015050:	2400dcc8 	.word	0x2400dcc8
 8015054:	2400c5d8 	.word	0x2400c5d8
 8015058:	0801c968 	.word	0x0801c968

0801505c <vnd_tx_meta_depth>:
/* Диагностические счётчики метаданных */
static uint32_t meta_push_total = 0;
static uint32_t meta_pop_total = 0;
static uint32_t meta_empty_events = 0;
static uint32_t meta_overflow_events = 0;
static inline uint8_t vnd_tx_meta_depth(void){
 801505c:	b480      	push	{r7}
 801505e:	b083      	sub	sp, #12
 8015060:	af00      	add	r7, sp, #0
    uint8_t h = vnd_tx_meta_head, t = vnd_tx_meta_tail;
 8015062:	4b0d      	ldr	r3, [pc, #52]	@ (8015098 <vnd_tx_meta_depth+0x3c>)
 8015064:	781b      	ldrb	r3, [r3, #0]
 8015066:	71fb      	strb	r3, [r7, #7]
 8015068:	4b0c      	ldr	r3, [pc, #48]	@ (801509c <vnd_tx_meta_depth+0x40>)
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	71bb      	strb	r3, [r7, #6]
    if(h>=t) return (uint8_t)(h - t);
 801506e:	79fa      	ldrb	r2, [r7, #7]
 8015070:	79bb      	ldrb	r3, [r7, #6]
 8015072:	429a      	cmp	r2, r3
 8015074:	d304      	bcc.n	8015080 <vnd_tx_meta_depth+0x24>
 8015076:	79fa      	ldrb	r2, [r7, #7]
 8015078:	79bb      	ldrb	r3, [r7, #6]
 801507a:	1ad3      	subs	r3, r2, r3
 801507c:	b2db      	uxtb	r3, r3
 801507e:	e005      	b.n	801508c <vnd_tx_meta_depth+0x30>
    return (uint8_t)(VND_TX_META_FIFO - (t - h));
 8015080:	79fa      	ldrb	r2, [r7, #7]
 8015082:	79bb      	ldrb	r3, [r7, #6]
 8015084:	1ad3      	subs	r3, r2, r3
 8015086:	b2db      	uxtb	r3, r3
 8015088:	3308      	adds	r3, #8
 801508a:	b2db      	uxtb	r3, r3
}
 801508c:	4618      	mov	r0, r3
 801508e:	370c      	adds	r7, #12
 8015090:	46bd      	mov	sp, r7
 8015092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015096:	4770      	bx	lr
 8015098:	24018a98 	.word	0x24018a98
 801509c:	24018a99 	.word	0x24018a99

080150a0 <vnd_tx_meta_push>:
static inline void vnd_tx_meta_push(uint8_t is_frame, uint8_t flags, uint32_t seq_field){
 80150a0:	b590      	push	{r4, r7, lr}
 80150a2:	b085      	sub	sp, #20
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	4603      	mov	r3, r0
 80150a8:	603a      	str	r2, [r7, #0]
 80150aa:	71fb      	strb	r3, [r7, #7]
 80150ac:	460b      	mov	r3, r1
 80150ae:	71bb      	strb	r3, [r7, #6]
    uint8_t next = (uint8_t)((vnd_tx_meta_head + 1u) % VND_TX_META_FIFO);
 80150b0:	4b37      	ldr	r3, [pc, #220]	@ (8015190 <vnd_tx_meta_push+0xf0>)
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	3301      	adds	r3, #1
 80150b6:	b2db      	uxtb	r3, r3
 80150b8:	f003 0307 	and.w	r3, r3, #7
 80150bc:	73fb      	strb	r3, [r7, #15]
    if(next == vnd_tx_meta_tail){
 80150be:	4b35      	ldr	r3, [pc, #212]	@ (8015194 <vnd_tx_meta_push+0xf4>)
 80150c0:	781b      	ldrb	r3, [r3, #0]
 80150c2:	7bfa      	ldrb	r2, [r7, #15]
 80150c4:	429a      	cmp	r2, r3
 80150c6:	d117      	bne.n	80150f8 <vnd_tx_meta_push+0x58>
        /* overflow - drop oldest */
        vnd_tx_meta_tail = (uint8_t)((vnd_tx_meta_tail + 1u) % VND_TX_META_FIFO);
 80150c8:	4b32      	ldr	r3, [pc, #200]	@ (8015194 <vnd_tx_meta_push+0xf4>)
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	3301      	adds	r3, #1
 80150ce:	b2db      	uxtb	r3, r3
 80150d0:	f003 0307 	and.w	r3, r3, #7
 80150d4:	b2da      	uxtb	r2, r3
 80150d6:	4b2f      	ldr	r3, [pc, #188]	@ (8015194 <vnd_tx_meta_push+0xf4>)
 80150d8:	701a      	strb	r2, [r3, #0]
        meta_overflow_events++;
 80150da:	4b2f      	ldr	r3, [pc, #188]	@ (8015198 <vnd_tx_meta_push+0xf8>)
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	3301      	adds	r3, #1
 80150e0:	4a2d      	ldr	r2, [pc, #180]	@ (8015198 <vnd_tx_meta_push+0xf8>)
 80150e2:	6013      	str	r3, [r2, #0]
        VND_LOG("WARN META_FIFO_OVF depth_before=%u", (unsigned)vnd_tx_meta_depth());
 80150e4:	f7ff ffba 	bl	801505c <vnd_tx_meta_depth>
 80150e8:	4603      	mov	r3, r0
 80150ea:	4619      	mov	r1, r3
 80150ec:	482b      	ldr	r0, [pc, #172]	@ (801519c <vnd_tx_meta_push+0xfc>)
 80150ee:	f005 fc57 	bl	801a9a0 <iprintf>
 80150f2:	482b      	ldr	r0, [pc, #172]	@ (80151a0 <vnd_tx_meta_push+0x100>)
 80150f4:	f005 fcbc 	bl	801aa70 <puts>
    }
    vnd_tx_meta_fifo[vnd_tx_meta_head].is_frame = is_frame;
 80150f8:	4b25      	ldr	r3, [pc, #148]	@ (8015190 <vnd_tx_meta_push+0xf0>)
 80150fa:	781b      	ldrb	r3, [r3, #0]
 80150fc:	4619      	mov	r1, r3
 80150fe:	4a29      	ldr	r2, [pc, #164]	@ (80151a4 <vnd_tx_meta_push+0x104>)
 8015100:	460b      	mov	r3, r1
 8015102:	005b      	lsls	r3, r3, #1
 8015104:	440b      	add	r3, r1
 8015106:	009b      	lsls	r3, r3, #2
 8015108:	4413      	add	r3, r2
 801510a:	79fa      	ldrb	r2, [r7, #7]
 801510c:	701a      	strb	r2, [r3, #0]
    vnd_tx_meta_fifo[vnd_tx_meta_head].flags = flags;
 801510e:	4b20      	ldr	r3, [pc, #128]	@ (8015190 <vnd_tx_meta_push+0xf0>)
 8015110:	781b      	ldrb	r3, [r3, #0]
 8015112:	4619      	mov	r1, r3
 8015114:	4a23      	ldr	r2, [pc, #140]	@ (80151a4 <vnd_tx_meta_push+0x104>)
 8015116:	460b      	mov	r3, r1
 8015118:	005b      	lsls	r3, r3, #1
 801511a:	440b      	add	r3, r1
 801511c:	009b      	lsls	r3, r3, #2
 801511e:	4413      	add	r3, r2
 8015120:	3301      	adds	r3, #1
 8015122:	79ba      	ldrb	r2, [r7, #6]
 8015124:	701a      	strb	r2, [r3, #0]
    vnd_tx_meta_fifo[vnd_tx_meta_head].seq_field = seq_field;
 8015126:	4b1a      	ldr	r3, [pc, #104]	@ (8015190 <vnd_tx_meta_push+0xf0>)
 8015128:	781b      	ldrb	r3, [r3, #0]
 801512a:	4619      	mov	r1, r3
 801512c:	4a1d      	ldr	r2, [pc, #116]	@ (80151a4 <vnd_tx_meta_push+0x104>)
 801512e:	460b      	mov	r3, r1
 8015130:	005b      	lsls	r3, r3, #1
 8015132:	440b      	add	r3, r1
 8015134:	009b      	lsls	r3, r3, #2
 8015136:	4413      	add	r3, r2
 8015138:	3304      	adds	r3, #4
 801513a:	683a      	ldr	r2, [r7, #0]
 801513c:	601a      	str	r2, [r3, #0]
    vnd_tx_meta_fifo[vnd_tx_meta_head].push_tick = HAL_GetTick();
 801513e:	4b14      	ldr	r3, [pc, #80]	@ (8015190 <vnd_tx_meta_push+0xf0>)
 8015140:	781b      	ldrb	r3, [r3, #0]
 8015142:	461c      	mov	r4, r3
 8015144:	f7ef fb08 	bl	8004758 <HAL_GetTick>
 8015148:	4602      	mov	r2, r0
 801514a:	4916      	ldr	r1, [pc, #88]	@ (80151a4 <vnd_tx_meta_push+0x104>)
 801514c:	4623      	mov	r3, r4
 801514e:	005b      	lsls	r3, r3, #1
 8015150:	4423      	add	r3, r4
 8015152:	009b      	lsls	r3, r3, #2
 8015154:	440b      	add	r3, r1
 8015156:	3308      	adds	r3, #8
 8015158:	601a      	str	r2, [r3, #0]
    vnd_tx_meta_head = next;
 801515a:	4a0d      	ldr	r2, [pc, #52]	@ (8015190 <vnd_tx_meta_push+0xf0>)
 801515c:	7bfb      	ldrb	r3, [r7, #15]
 801515e:	7013      	strb	r3, [r2, #0]
    meta_push_total++;
 8015160:	4b11      	ldr	r3, [pc, #68]	@ (80151a8 <vnd_tx_meta_push+0x108>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	3301      	adds	r3, #1
 8015166:	4a10      	ldr	r2, [pc, #64]	@ (80151a8 <vnd_tx_meta_push+0x108>)
 8015168:	6013      	str	r3, [r2, #0]
    /* Умеренный лог только для рабочих кадров (A/B/TEST); STAT слишком часты не будут */
    if(is_frame){
 801516a:	79fb      	ldrb	r3, [r7, #7]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d00b      	beq.n	8015188 <vnd_tx_meta_push+0xe8>
        VND_LOG("META_PUSH fl=0x%02X seq=%lu depth=%u", (unsigned)flags, (unsigned long)seq_field, (unsigned)vnd_tx_meta_depth());
 8015170:	79bc      	ldrb	r4, [r7, #6]
 8015172:	f7ff ff73 	bl	801505c <vnd_tx_meta_depth>
 8015176:	4603      	mov	r3, r0
 8015178:	683a      	ldr	r2, [r7, #0]
 801517a:	4621      	mov	r1, r4
 801517c:	480b      	ldr	r0, [pc, #44]	@ (80151ac <vnd_tx_meta_push+0x10c>)
 801517e:	f005 fc0f 	bl	801a9a0 <iprintf>
 8015182:	4807      	ldr	r0, [pc, #28]	@ (80151a0 <vnd_tx_meta_push+0x100>)
 8015184:	f005 fc74 	bl	801aa70 <puts>
    }
}
 8015188:	bf00      	nop
 801518a:	3714      	adds	r7, #20
 801518c:	46bd      	mov	sp, r7
 801518e:	bd90      	pop	{r4, r7, pc}
 8015190:	24018a98 	.word	0x24018a98
 8015194:	24018a99 	.word	0x24018a99
 8015198:	24018aa8 	.word	0x24018aa8
 801519c:	0801c99c 	.word	0x0801c99c
 80151a0:	0801c9c8 	.word	0x0801c9c8
 80151a4:	24018a38 	.word	0x24018a38
 80151a8:	24018a9c 	.word	0x24018a9c
 80151ac:	0801c9cc 	.word	0x0801c9cc

080151b0 <vnd_tx_meta_pop>:
static inline int vnd_tx_meta_pop(vnd_tx_meta_t *out){
 80151b0:	b480      	push	{r7}
 80151b2:	b083      	sub	sp, #12
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
    if(vnd_tx_meta_tail == vnd_tx_meta_head){ meta_empty_events++; return 0; } /* empty */
 80151b8:	4b17      	ldr	r3, [pc, #92]	@ (8015218 <vnd_tx_meta_pop+0x68>)
 80151ba:	781a      	ldrb	r2, [r3, #0]
 80151bc:	4b17      	ldr	r3, [pc, #92]	@ (801521c <vnd_tx_meta_pop+0x6c>)
 80151be:	781b      	ldrb	r3, [r3, #0]
 80151c0:	429a      	cmp	r2, r3
 80151c2:	d106      	bne.n	80151d2 <vnd_tx_meta_pop+0x22>
 80151c4:	4b16      	ldr	r3, [pc, #88]	@ (8015220 <vnd_tx_meta_pop+0x70>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	3301      	adds	r3, #1
 80151ca:	4a15      	ldr	r2, [pc, #84]	@ (8015220 <vnd_tx_meta_pop+0x70>)
 80151cc:	6013      	str	r3, [r2, #0]
 80151ce:	2300      	movs	r3, #0
 80151d0:	e01c      	b.n	801520c <vnd_tx_meta_pop+0x5c>
    *out = vnd_tx_meta_fifo[vnd_tx_meta_tail];
 80151d2:	4b11      	ldr	r3, [pc, #68]	@ (8015218 <vnd_tx_meta_pop+0x68>)
 80151d4:	781b      	ldrb	r3, [r3, #0]
 80151d6:	4619      	mov	r1, r3
 80151d8:	6878      	ldr	r0, [r7, #4]
 80151da:	4a12      	ldr	r2, [pc, #72]	@ (8015224 <vnd_tx_meta_pop+0x74>)
 80151dc:	460b      	mov	r3, r1
 80151de:	005b      	lsls	r3, r3, #1
 80151e0:	440b      	add	r3, r1
 80151e2:	009b      	lsls	r3, r3, #2
 80151e4:	441a      	add	r2, r3
 80151e6:	4603      	mov	r3, r0
 80151e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80151ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    vnd_tx_meta_tail = (uint8_t)((vnd_tx_meta_tail + 1u) % VND_TX_META_FIFO);
 80151ee:	4b0a      	ldr	r3, [pc, #40]	@ (8015218 <vnd_tx_meta_pop+0x68>)
 80151f0:	781b      	ldrb	r3, [r3, #0]
 80151f2:	3301      	adds	r3, #1
 80151f4:	b2db      	uxtb	r3, r3
 80151f6:	f003 0307 	and.w	r3, r3, #7
 80151fa:	b2da      	uxtb	r2, r3
 80151fc:	4b06      	ldr	r3, [pc, #24]	@ (8015218 <vnd_tx_meta_pop+0x68>)
 80151fe:	701a      	strb	r2, [r3, #0]
    meta_pop_total++;
 8015200:	4b09      	ldr	r3, [pc, #36]	@ (8015228 <vnd_tx_meta_pop+0x78>)
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	3301      	adds	r3, #1
 8015206:	4a08      	ldr	r2, [pc, #32]	@ (8015228 <vnd_tx_meta_pop+0x78>)
 8015208:	6013      	str	r3, [r2, #0]
    return 1;
 801520a:	2301      	movs	r3, #1
}
 801520c:	4618      	mov	r0, r3
 801520e:	370c      	adds	r7, #12
 8015210:	46bd      	mov	sp, r7
 8015212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015216:	4770      	bx	lr
 8015218:	24018a99 	.word	0x24018a99
 801521c:	24018a98 	.word	0x24018a98
 8015220:	24018aa4 	.word	0x24018aa4
 8015224:	24018a38 	.word	0x24018a38
 8015228:	24018aa0 	.word	0x24018aa0

0801522c <vnd_tx_meta_after>:
/* Унифицированная фиксация метаданных после успешного запуска передачи */
static inline void vnd_tx_meta_after(uint8_t *buf, uint16_t len){
 801522c:	b580      	push	{r7, lr}
 801522e:	b086      	sub	sp, #24
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
 8015234:	460b      	mov	r3, r1
 8015236:	807b      	strh	r3, [r7, #2]
    uint8_t is_frame = 0, flags = 0; uint32_t seq_field = 0;
 8015238:	2300      	movs	r3, #0
 801523a:	75fb      	strb	r3, [r7, #23]
 801523c:	2300      	movs	r3, #0
 801523e:	75bb      	strb	r3, [r7, #22]
 8015240:	2300      	movs	r3, #0
 8015242:	613b      	str	r3, [r7, #16]
    if(len >= VND_FRAME_HDR_SIZE){
 8015244:	887b      	ldrh	r3, [r7, #2]
 8015246:	2b1f      	cmp	r3, #31
 8015248:	d910      	bls.n	801526c <vnd_tx_meta_after+0x40>
        const vnd_frame_hdr_t *h = (const vnd_frame_hdr_t*)buf;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	60fb      	str	r3, [r7, #12]
        if(h->magic == 0xA55A){ is_frame = 1; flags = h->flags; seq_field = h->seq; }
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	881b      	ldrh	r3, [r3, #0]
 8015252:	b29b      	uxth	r3, r3
 8015254:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8015258:	4293      	cmp	r3, r2
 801525a:	d107      	bne.n	801526c <vnd_tx_meta_after+0x40>
 801525c:	2301      	movs	r3, #1
 801525e:	75fb      	strb	r3, [r7, #23]
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	78db      	ldrb	r3, [r3, #3]
 8015264:	75bb      	strb	r3, [r7, #22]
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	685b      	ldr	r3, [r3, #4]
 801526a:	613b      	str	r3, [r7, #16]
    }
    /* Сохраняем последнюю отправку для fallback-классификации */
    last_tx_is_frame = is_frame; last_tx_flags = flags; last_tx_seq = seq_field;
 801526c:	4a09      	ldr	r2, [pc, #36]	@ (8015294 <vnd_tx_meta_after+0x68>)
 801526e:	7dfb      	ldrb	r3, [r7, #23]
 8015270:	7013      	strb	r3, [r2, #0]
 8015272:	4a09      	ldr	r2, [pc, #36]	@ (8015298 <vnd_tx_meta_after+0x6c>)
 8015274:	7dbb      	ldrb	r3, [r7, #22]
 8015276:	7013      	strb	r3, [r2, #0]
 8015278:	4a08      	ldr	r2, [pc, #32]	@ (801529c <vnd_tx_meta_after+0x70>)
 801527a:	693b      	ldr	r3, [r7, #16]
 801527c:	6013      	str	r3, [r2, #0]
    vnd_tx_meta_push(is_frame, flags, seq_field);
 801527e:	7db9      	ldrb	r1, [r7, #22]
 8015280:	7dfb      	ldrb	r3, [r7, #23]
 8015282:	693a      	ldr	r2, [r7, #16]
 8015284:	4618      	mov	r0, r3
 8015286:	f7ff ff0b 	bl	80150a0 <vnd_tx_meta_push>
}
 801528a:	bf00      	nop
 801528c:	3718      	adds	r7, #24
 801528e:	46bd      	mov	sp, r7
 8015290:	bd80      	pop	{r7, pc}
 8015292:	bf00      	nop
 8015294:	2400c658 	.word	0x2400c658
 8015298:	2400c659 	.word	0x2400c659
 801529c:	2400c65c 	.word	0x2400c65c

080152a0 <vnd_meta_neutralize>:
/* Нейтрализовать «застрявшую» запись в meta-FIFO (например, после ForceTxIdle),
   чтобы последующий TxCplt не принял её за реальный кадр и не исказил порядок. */
static void vnd_meta_neutralize(uint8_t flags_mask, uint32_t seq_field)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b084      	sub	sp, #16
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	4603      	mov	r3, r0
 80152a8:	6039      	str	r1, [r7, #0]
 80152aa:	71fb      	strb	r3, [r7, #7]
    uint8_t t = vnd_tx_meta_tail;
 80152ac:	4b1c      	ldr	r3, [pc, #112]	@ (8015320 <vnd_meta_neutralize+0x80>)
 80152ae:	781b      	ldrb	r3, [r3, #0]
 80152b0:	73fb      	strb	r3, [r7, #15]
    while(t != vnd_tx_meta_head){
 80152b2:	e02b      	b.n	801530c <vnd_meta_neutralize+0x6c>
        vnd_tx_meta_t *m = &vnd_tx_meta_fifo[t];
 80152b4:	7bfa      	ldrb	r2, [r7, #15]
 80152b6:	4613      	mov	r3, r2
 80152b8:	005b      	lsls	r3, r3, #1
 80152ba:	4413      	add	r3, r2
 80152bc:	009b      	lsls	r3, r3, #2
 80152be:	4a19      	ldr	r2, [pc, #100]	@ (8015324 <vnd_meta_neutralize+0x84>)
 80152c0:	4413      	add	r3, r2
 80152c2:	60bb      	str	r3, [r7, #8]
        if(m->is_frame && (m->flags == flags_mask) && (m->seq_field == seq_field)){
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	781b      	ldrb	r3, [r3, #0]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d019      	beq.n	8015300 <vnd_meta_neutralize+0x60>
 80152cc:	68bb      	ldr	r3, [r7, #8]
 80152ce:	785b      	ldrb	r3, [r3, #1]
 80152d0:	79fa      	ldrb	r2, [r7, #7]
 80152d2:	429a      	cmp	r2, r3
 80152d4:	d114      	bne.n	8015300 <vnd_meta_neutralize+0x60>
 80152d6:	68bb      	ldr	r3, [r7, #8]
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	683a      	ldr	r2, [r7, #0]
 80152dc:	429a      	cmp	r2, r3
 80152de:	d10f      	bne.n	8015300 <vnd_meta_neutralize+0x60>
            m->is_frame = 0; m->flags = 0; /* превратить в служебный */
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	2200      	movs	r2, #0
 80152e4:	701a      	strb	r2, [r3, #0]
 80152e6:	68bb      	ldr	r3, [r7, #8]
 80152e8:	2200      	movs	r2, #0
 80152ea:	705a      	strb	r2, [r3, #1]
            VND_LOG("META_NEUTRALIZE fl=0x%02X seq=%lu", (unsigned)flags_mask, (unsigned long)seq_field);
 80152ec:	79fb      	ldrb	r3, [r7, #7]
 80152ee:	683a      	ldr	r2, [r7, #0]
 80152f0:	4619      	mov	r1, r3
 80152f2:	480d      	ldr	r0, [pc, #52]	@ (8015328 <vnd_meta_neutralize+0x88>)
 80152f4:	f005 fb54 	bl	801a9a0 <iprintf>
 80152f8:	480c      	ldr	r0, [pc, #48]	@ (801532c <vnd_meta_neutralize+0x8c>)
 80152fa:	f005 fbb9 	bl	801aa70 <puts>
            break;
 80152fe:	e00b      	b.n	8015318 <vnd_meta_neutralize+0x78>
        }
        t = (uint8_t)((t + 1u) % VND_TX_META_FIFO);
 8015300:	7bfb      	ldrb	r3, [r7, #15]
 8015302:	3301      	adds	r3, #1
 8015304:	b2db      	uxtb	r3, r3
 8015306:	f003 0307 	and.w	r3, r3, #7
 801530a:	73fb      	strb	r3, [r7, #15]
    while(t != vnd_tx_meta_head){
 801530c:	4b08      	ldr	r3, [pc, #32]	@ (8015330 <vnd_meta_neutralize+0x90>)
 801530e:	781b      	ldrb	r3, [r3, #0]
 8015310:	7bfa      	ldrb	r2, [r7, #15]
 8015312:	429a      	cmp	r2, r3
 8015314:	d1ce      	bne.n	80152b4 <vnd_meta_neutralize+0x14>
    }
}
 8015316:	bf00      	nop
 8015318:	bf00      	nop
 801531a:	3710      	adds	r7, #16
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}
 8015320:	24018a99 	.word	0x24018a99
 8015324:	24018a38 	.word	0x24018a38
 8015328:	0801c9f8 	.word	0x0801c9f8
 801532c:	0801c9c8 	.word	0x0801c9c8
 8015330:	24018a98 	.word	0x24018a98

08015334 <vnd_recompute_pair_timing>:
static void vnd_emergency_keepalive(uint32_t now_ms);
/* Сервис: асинхронная обработка команд управления (EP0 SOFT/DEEP RESET) */
extern void USBD_VND_ProcessControlRequests(void);
/* Вычисление периода пары по требуемым samples_per_frame и текущему профилю ADC (buf_rate_hz) */
static void vnd_recompute_pair_timing(uint16_t samples_per_frame)
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b086      	sub	sp, #24
 8015338:	af00      	add	r7, sp, #0
 801533a:	4603      	mov	r3, r0
 801533c:	80fb      	strh	r3, [r7, #6]
    /* Используем частоту буферов (Fs блоков/с), а не абсолютную частоту сэмплов */
    extern uint16_t adc_stream_get_buf_rate(void);
    uint16_t buf_rate = adc_stream_get_buf_rate();
 801533e:	f7eb f8ad 	bl	800049c <adc_stream_get_buf_rate>
 8015342:	4603      	mov	r3, r0
 8015344:	82fb      	strh	r3, [r7, #22]
    if(buf_rate == 0) buf_rate = 20; /* защита от деления на ноль */
 8015346:	8afb      	ldrh	r3, [r7, #22]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d101      	bne.n	8015350 <vnd_recompute_pair_timing+0x1c>
 801534c:	2314      	movs	r3, #20
 801534e:	82fb      	strh	r3, [r7, #22]
    if(samples_per_frame == 0) samples_per_frame = 1;
 8015350:	88fb      	ldrh	r3, [r7, #6]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d101      	bne.n	801535a <vnd_recompute_pair_timing+0x26>
 8015356:	2301      	movs	r3, #1
 8015358:	80fb      	strh	r3, [r7, #6]
    /* period_ms ≈ 1000 * samples_per_frame / buf_rate (округление) */
    uint32_t num = (uint32_t)samples_per_frame * 1000u + (uint32_t)(buf_rate/2u);
 801535a:	88fb      	ldrh	r3, [r7, #6]
 801535c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015360:	fb02 f303 	mul.w	r3, r2, r3
 8015364:	8afa      	ldrh	r2, [r7, #22]
 8015366:	0852      	lsrs	r2, r2, #1
 8015368:	b292      	uxth	r2, r2
 801536a:	4413      	add	r3, r2
 801536c:	60fb      	str	r3, [r7, #12]
    uint32_t ms  = num / (uint32_t)buf_rate;
 801536e:	8afb      	ldrh	r3, [r7, #22]
 8015370:	68fa      	ldr	r2, [r7, #12]
 8015372:	fbb2 f3f3 	udiv	r3, r2, r3
 8015376:	613b      	str	r3, [r7, #16]
    if(ms == 0) ms = 1;
 8015378:	693b      	ldr	r3, [r7, #16]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d101      	bne.n	8015382 <vnd_recompute_pair_timing+0x4e>
 801537e:	2301      	movs	r3, #1
 8015380:	613b      	str	r3, [r7, #16]
    vnd_pair_period_ms = (uint16_t)((ms > 1000u) ? 1000u : ms);
 8015382:	693b      	ldr	r3, [r7, #16]
 8015384:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015388:	d802      	bhi.n	8015390 <vnd_recompute_pair_timing+0x5c>
 801538a:	693b      	ldr	r3, [r7, #16]
 801538c:	b29b      	uxth	r3, r3
 801538e:	e001      	b.n	8015394 <vnd_recompute_pair_timing+0x60>
 8015390:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015394:	4a08      	ldr	r2, [pc, #32]	@ (80153b8 <vnd_recompute_pair_timing+0x84>)
 8015396:	8013      	strh	r3, [r2, #0]
    /* Примечание: период больше не используется как задержка — передаём сразу при готовности данных.
       Оставляем расчёт только для информационных целей. */
    VND_LOG("PAIR_TIMING(info): samples=%u buf_rate=%u -> period≈%u ms",
 8015398:	88f9      	ldrh	r1, [r7, #6]
 801539a:	8afa      	ldrh	r2, [r7, #22]
 801539c:	4b06      	ldr	r3, [pc, #24]	@ (80153b8 <vnd_recompute_pair_timing+0x84>)
 801539e:	881b      	ldrh	r3, [r3, #0]
 80153a0:	b29b      	uxth	r3, r3
 80153a2:	4806      	ldr	r0, [pc, #24]	@ (80153bc <vnd_recompute_pair_timing+0x88>)
 80153a4:	f005 fafc 	bl	801a9a0 <iprintf>
 80153a8:	4805      	ldr	r0, [pc, #20]	@ (80153c0 <vnd_recompute_pair_timing+0x8c>)
 80153aa:	f005 fb61 	bl	801aa70 <puts>
        (unsigned)samples_per_frame, (unsigned)buf_rate, (unsigned)vnd_pair_period_ms);
}
 80153ae:	bf00      	nop
 80153b0:	3718      	adds	r7, #24
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	bf00      	nop
 80153b8:	2400003e 	.word	0x2400003e
 80153bc:	0801ca20 	.word	0x0801ca20
 80153c0:	0801c9c8 	.word	0x0801c9c8

080153c4 <vnd_pipeline_stop_reset>:

/* Публичная функция: полный сброс/останов пайплайна */
void vnd_pipeline_stop_reset(int deep)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b082      	sub	sp, #8
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
    /* Остановить передачу и внутренние состояния */
    streaming = 0; diag_mode_active = 0; full_mode = 1;
 80153cc:	4b37      	ldr	r3, [pc, #220]	@ (80154ac <vnd_pipeline_stop_reset+0xe8>)
 80153ce:	2200      	movs	r2, #0
 80153d0:	701a      	strb	r2, [r3, #0]
 80153d2:	4b37      	ldr	r3, [pc, #220]	@ (80154b0 <vnd_pipeline_stop_reset+0xec>)
 80153d4:	2200      	movs	r2, #0
 80153d6:	701a      	strb	r2, [r3, #0]
 80153d8:	4b36      	ldr	r3, [pc, #216]	@ (80154b4 <vnd_pipeline_stop_reset+0xf0>)
 80153da:	2201      	movs	r2, #1
 80153dc:	701a      	strb	r2, [r3, #0]
    stop_request = 0; pending_status = 0; start_stat_inflight = 0; status_ack_pending = 0; start_ack_done = 1;
 80153de:	4b36      	ldr	r3, [pc, #216]	@ (80154b8 <vnd_pipeline_stop_reset+0xf4>)
 80153e0:	2200      	movs	r2, #0
 80153e2:	701a      	strb	r2, [r3, #0]
 80153e4:	4b35      	ldr	r3, [pc, #212]	@ (80154bc <vnd_pipeline_stop_reset+0xf8>)
 80153e6:	2200      	movs	r2, #0
 80153e8:	701a      	strb	r2, [r3, #0]
 80153ea:	4b35      	ldr	r3, [pc, #212]	@ (80154c0 <vnd_pipeline_stop_reset+0xfc>)
 80153ec:	2200      	movs	r2, #0
 80153ee:	701a      	strb	r2, [r3, #0]
 80153f0:	4b34      	ldr	r3, [pc, #208]	@ (80154c4 <vnd_pipeline_stop_reset+0x100>)
 80153f2:	2200      	movs	r2, #0
 80153f4:	701a      	strb	r2, [r3, #0]
 80153f6:	4b34      	ldr	r3, [pc, #208]	@ (80154c8 <vnd_pipeline_stop_reset+0x104>)
 80153f8:	2201      	movs	r2, #1
 80153fa:	701a      	strb	r2, [r3, #0]
    vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0; sending_channel = 0xFF; pending_B = 0; pending_B_since_ms = 0;
 80153fc:	4b33      	ldr	r3, [pc, #204]	@ (80154cc <vnd_pipeline_stop_reset+0x108>)
 80153fe:	2200      	movs	r2, #0
 8015400:	701a      	strb	r2, [r3, #0]
 8015402:	4b33      	ldr	r3, [pc, #204]	@ (80154d0 <vnd_pipeline_stop_reset+0x10c>)
 8015404:	2201      	movs	r2, #1
 8015406:	701a      	strb	r2, [r3, #0]
 8015408:	4b32      	ldr	r3, [pc, #200]	@ (80154d4 <vnd_pipeline_stop_reset+0x110>)
 801540a:	2200      	movs	r2, #0
 801540c:	701a      	strb	r2, [r3, #0]
 801540e:	4b32      	ldr	r3, [pc, #200]	@ (80154d8 <vnd_pipeline_stop_reset+0x114>)
 8015410:	22ff      	movs	r2, #255	@ 0xff
 8015412:	701a      	strb	r2, [r3, #0]
 8015414:	4b31      	ldr	r3, [pc, #196]	@ (80154dc <vnd_pipeline_stop_reset+0x118>)
 8015416:	2200      	movs	r2, #0
 8015418:	701a      	strb	r2, [r3, #0]
 801541a:	4b31      	ldr	r3, [pc, #196]	@ (80154e0 <vnd_pipeline_stop_reset+0x11c>)
 801541c:	2200      	movs	r2, #0
 801541e:	601a      	str	r2, [r3, #0]
    test_sent = 0; test_in_flight = 0; vnd_tx_kick = 1;
 8015420:	4b30      	ldr	r3, [pc, #192]	@ (80154e4 <vnd_pipeline_stop_reset+0x120>)
 8015422:	2200      	movs	r2, #0
 8015424:	701a      	strb	r2, [r3, #0]
 8015426:	4b30      	ldr	r3, [pc, #192]	@ (80154e8 <vnd_pipeline_stop_reset+0x124>)
 8015428:	2200      	movs	r2, #0
 801542a:	701a      	strb	r2, [r3, #0]
 801542c:	4b2f      	ldr	r3, [pc, #188]	@ (80154ec <vnd_pipeline_stop_reset+0x128>)
 801542e:	2201      	movs	r2, #1
 8015430:	701a      	strb	r2, [r3, #0]
    /* Очистить мета-FIFO и счётчики */
    vnd_tx_meta_head = vnd_tx_meta_tail = 0; meta_push_total = meta_pop_total = meta_empty_events = meta_overflow_events = 0;
 8015432:	4b2f      	ldr	r3, [pc, #188]	@ (80154f0 <vnd_pipeline_stop_reset+0x12c>)
 8015434:	2200      	movs	r2, #0
 8015436:	701a      	strb	r2, [r3, #0]
 8015438:	4b2d      	ldr	r3, [pc, #180]	@ (80154f0 <vnd_pipeline_stop_reset+0x12c>)
 801543a:	781a      	ldrb	r2, [r3, #0]
 801543c:	4b2d      	ldr	r3, [pc, #180]	@ (80154f4 <vnd_pipeline_stop_reset+0x130>)
 801543e:	701a      	strb	r2, [r3, #0]
 8015440:	4b2d      	ldr	r3, [pc, #180]	@ (80154f8 <vnd_pipeline_stop_reset+0x134>)
 8015442:	2200      	movs	r2, #0
 8015444:	601a      	str	r2, [r3, #0]
 8015446:	4b2c      	ldr	r3, [pc, #176]	@ (80154f8 <vnd_pipeline_stop_reset+0x134>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	4a2c      	ldr	r2, [pc, #176]	@ (80154fc <vnd_pipeline_stop_reset+0x138>)
 801544c:	6013      	str	r3, [r2, #0]
 801544e:	4b2b      	ldr	r3, [pc, #172]	@ (80154fc <vnd_pipeline_stop_reset+0x138>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	4a2b      	ldr	r2, [pc, #172]	@ (8015500 <vnd_pipeline_stop_reset+0x13c>)
 8015454:	6013      	str	r3, [r2, #0]
 8015456:	4b2a      	ldr	r3, [pc, #168]	@ (8015500 <vnd_pipeline_stop_reset+0x13c>)
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	4a2a      	ldr	r2, [pc, #168]	@ (8015504 <vnd_pipeline_stop_reset+0x140>)
 801545c:	6013      	str	r3, [r2, #0]
    stream_seq = 0; next_seq_to_assign = 0; dbg_produced_seq = 0; first_pair_done = 0;
 801545e:	4b2a      	ldr	r3, [pc, #168]	@ (8015508 <vnd_pipeline_stop_reset+0x144>)
 8015460:	2200      	movs	r2, #0
 8015462:	601a      	str	r2, [r3, #0]
 8015464:	4b29      	ldr	r3, [pc, #164]	@ (801550c <vnd_pipeline_stop_reset+0x148>)
 8015466:	2200      	movs	r2, #0
 8015468:	601a      	str	r2, [r3, #0]
 801546a:	4b29      	ldr	r3, [pc, #164]	@ (8015510 <vnd_pipeline_stop_reset+0x14c>)
 801546c:	2200      	movs	r2, #0
 801546e:	601a      	str	r2, [r3, #0]
 8015470:	4b28      	ldr	r3, [pc, #160]	@ (8015514 <vnd_pipeline_stop_reset+0x150>)
 8015472:	2200      	movs	r2, #0
 8015474:	701a      	strb	r2, [r3, #0]
    cur_samples_per_frame = 0; cur_expected_frame_size = 0; dbg_any_valid_frame = 0;
 8015476:	4b28      	ldr	r3, [pc, #160]	@ (8015518 <vnd_pipeline_stop_reset+0x154>)
 8015478:	2200      	movs	r2, #0
 801547a:	801a      	strh	r2, [r3, #0]
 801547c:	4b27      	ldr	r3, [pc, #156]	@ (801551c <vnd_pipeline_stop_reset+0x158>)
 801547e:	2200      	movs	r2, #0
 8015480:	801a      	strh	r2, [r3, #0]
 8015482:	4b27      	ldr	r3, [pc, #156]	@ (8015520 <vnd_pipeline_stop_reset+0x15c>)
 8015484:	2200      	movs	r2, #0
 8015486:	701a      	strb	r2, [r3, #0]
    vnd_reset_buffers();
 8015488:	f000 f91c 	bl	80156c4 <vnd_reset_buffers>
    /* Остановить источник данных/ADC DMA при глубоком сбросе */
    if(deep){ extern void adc_stream_stop(void); adc_stream_stop(); }
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d001      	beq.n	8015496 <vnd_pipeline_stop_reset+0xd2>
 8015492:	f7ea ffaf 	bl	80003f4 <adc_stream_stop>
    /* Индикация */
    HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_RESET);
 8015496:	2200      	movs	r2, #0
 8015498:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801549c:	4821      	ldr	r0, [pc, #132]	@ (8015524 <vnd_pipeline_stop_reset+0x160>)
 801549e:	f7f4 fa17 	bl	80098d0 <HAL_GPIO_WritePin>
}
 80154a2:	bf00      	nop
 80154a4:	3708      	adds	r7, #8
 80154a6:	46bd      	mov	sp, r7
 80154a8:	bd80      	pop	{r7, pc}
 80154aa:	bf00      	nop
 80154ac:	2400c5d8 	.word	0x2400c5d8
 80154b0:	2400c729 	.word	0x2400c729
 80154b4:	2400003c 	.word	0x2400003c
 80154b8:	2400c68f 	.word	0x2400c68f
 80154bc:	2400c728 	.word	0x2400c728
 80154c0:	2400c68c 	.word	0x2400c68c
 80154c4:	2400c68e 	.word	0x2400c68e
 80154c8:	2400c68d 	.word	0x2400c68d
 80154cc:	2400c5ec 	.word	0x2400c5ec
 80154d0:	2400003b 	.word	0x2400003b
 80154d4:	2400c5ed 	.word	0x2400c5ed
 80154d8:	2400004c 	.word	0x2400004c
 80154dc:	24018a32 	.word	0x24018a32
 80154e0:	24018a34 	.word	0x24018a34
 80154e4:	2400c5ee 	.word	0x2400c5ee
 80154e8:	2400c5ef 	.word	0x2400c5ef
 80154ec:	2400c688 	.word	0x2400c688
 80154f0:	24018a99 	.word	0x24018a99
 80154f4:	24018a98 	.word	0x24018a98
 80154f8:	24018aa8 	.word	0x24018aa8
 80154fc:	24018aa4 	.word	0x24018aa4
 8015500:	24018aa0 	.word	0x24018aa0
 8015504:	24018a9c 	.word	0x24018a9c
 8015508:	2400c5dc 	.word	0x2400c5dc
 801550c:	2400c620 	.word	0x2400c620
 8015510:	2400c5f0 	.word	0x2400c5f0
 8015514:	2400c678 	.word	0x2400c678
 8015518:	2400c5e0 	.word	0x2400c5e0
 801551c:	2400c5e2 	.word	0x2400c5e2
 8015520:	2400c64d 	.word	0x2400c64d
 8015524:	58020c00 	.word	0x58020c00

08015528 <vnd_force_complete_test_meta_if_stale>:
   в FIFO присутствует meta с flags=0x80 и возраст > 60 мс.
   Вместо удаления элемента (что может рассинхронизировать последующие TxCplt), мы помечаем его как служебный:
     is_frame=0; flags=0; — таким образом последующий TxCplt безопасно извлекёт и проигнорирует.
   Гейтинг отправки A перестанет видеть TEST meta (по flags) и разрешит прогресс. */
static void vnd_force_complete_test_meta_if_stale(void)
{
 8015528:	b480      	push	{r7}
 801552a:	b083      	sub	sp, #12
 801552c:	af00      	add	r7, sp, #0
#if VND_DISABLE_TEST
    /* В режиме без TEST: убедимся, что meta-FIFO не содержит блокирующих TEST записей */
    uint8_t t = vnd_tx_meta_tail;
 801552e:	4b15      	ldr	r3, [pc, #84]	@ (8015584 <vnd_force_complete_test_meta_if_stale+0x5c>)
 8015530:	781b      	ldrb	r3, [r3, #0]
 8015532:	71fb      	strb	r3, [r7, #7]
    while(t != vnd_tx_meta_head){
 8015534:	e01b      	b.n	801556e <vnd_force_complete_test_meta_if_stale+0x46>
        vnd_tx_meta_t *m = &vnd_tx_meta_fifo[t];
 8015536:	79fa      	ldrb	r2, [r7, #7]
 8015538:	4613      	mov	r3, r2
 801553a:	005b      	lsls	r3, r3, #1
 801553c:	4413      	add	r3, r2
 801553e:	009b      	lsls	r3, r3, #2
 8015540:	4a11      	ldr	r2, [pc, #68]	@ (8015588 <vnd_force_complete_test_meta_if_stale+0x60>)
 8015542:	4413      	add	r3, r2
 8015544:	603b      	str	r3, [r7, #0]
        if(m->is_frame && m->flags == 0x80){ m->is_frame = 0; m->flags = 0; }
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	781b      	ldrb	r3, [r3, #0]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d009      	beq.n	8015562 <vnd_force_complete_test_meta_if_stale+0x3a>
 801554e:	683b      	ldr	r3, [r7, #0]
 8015550:	785b      	ldrb	r3, [r3, #1]
 8015552:	2b80      	cmp	r3, #128	@ 0x80
 8015554:	d105      	bne.n	8015562 <vnd_force_complete_test_meta_if_stale+0x3a>
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	2200      	movs	r2, #0
 801555a:	701a      	strb	r2, [r3, #0]
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	2200      	movs	r2, #0
 8015560:	705a      	strb	r2, [r3, #1]
        t = (uint8_t)((t + 1u) % VND_TX_META_FIFO);
 8015562:	79fb      	ldrb	r3, [r7, #7]
 8015564:	3301      	adds	r3, #1
 8015566:	b2db      	uxtb	r3, r3
 8015568:	f003 0307 	and.w	r3, r3, #7
 801556c:	71fb      	strb	r3, [r7, #7]
    while(t != vnd_tx_meta_head){
 801556e:	4b07      	ldr	r3, [pc, #28]	@ (801558c <vnd_force_complete_test_meta_if_stale+0x64>)
 8015570:	781b      	ldrb	r3, [r3, #0]
 8015572:	79fa      	ldrb	r2, [r7, #7]
 8015574:	429a      	cmp	r2, r3
 8015576:	d1de      	bne.n	8015536 <vnd_force_complete_test_meta_if_stale+0xe>
    }
    return;
 8015578:	bf00      	nop
            break; /* обрабатываем только первый TEST */
        }
        t = (uint8_t)((t + 1u) % VND_TX_META_FIFO);
    }
#endif
}
 801557a:	370c      	adds	r7, #12
 801557c:	46bd      	mov	sp, r7
 801557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015582:	4770      	bx	lr
 8015584:	24018a99 	.word	0x24018a99
 8015588:	24018a38 	.word	0x24018a38
 801558c:	24018a98 	.word	0x24018a98

08015590 <vnd_try_send_pending_status_from_task>:

/* Отправка отложенного STAT только из таска */
static void vnd_try_send_pending_status_from_task(void)
{
 8015590:	b590      	push	{r4, r7, lr}
 8015592:	b083      	sub	sp, #12
 8015594:	af00      	add	r7, sp, #0
    /* В диагностическом режиме полностью запрещаем любые STAT по bulk-IN,
       чтобы исключить окна между A и B. Для статуса используйте EP0 (ctrl).
       Также ACK-STOP в DIAG не отправляем через bulk (см. обработчик STOP). */
    if(diag_mode_active){ return; }
 8015596:	4b36      	ldr	r3, [pc, #216]	@ (8015670 <vnd_try_send_pending_status_from_task+0xe0>)
 8015598:	781b      	ldrb	r3, [r3, #0]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d15f      	bne.n	801565e <vnd_try_send_pending_status_from_task+0xce>
    if(!pending_status) return;
 801559e:	4b35      	ldr	r3, [pc, #212]	@ (8015674 <vnd_try_send_pending_status_from_task+0xe4>)
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	b2db      	uxtb	r3, r3
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d05c      	beq.n	8015662 <vnd_try_send_pending_status_from_task+0xd2>
    /* Нельзя отправлять STAT, если есть незавершённая передача (даже если busy временно сброшен) */
    if(vnd_ep_busy || vnd_inflight) return;
 80155a8:	4b33      	ldr	r3, [pc, #204]	@ (8015678 <vnd_try_send_pending_status_from_task+0xe8>)
 80155aa:	781b      	ldrb	r3, [r3, #0]
 80155ac:	b2db      	uxtb	r3, r3
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d159      	bne.n	8015666 <vnd_try_send_pending_status_from_task+0xd6>
 80155b2:	4b32      	ldr	r3, [pc, #200]	@ (801567c <vnd_try_send_pending_status_from_task+0xec>)
 80155b4:	781b      	ldrb	r3, [r3, #0]
 80155b6:	b2db      	uxtb	r3, r3
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d154      	bne.n	8015666 <vnd_try_send_pending_status_from_task+0xd6>
    uint16_t l = vnd_build_status((uint8_t*)status_buf, sizeof(status_buf));
 80155bc:	2140      	movs	r1, #64	@ 0x40
 80155be:	4830      	ldr	r0, [pc, #192]	@ (8015680 <vnd_try_send_pending_status_from_task+0xf0>)
 80155c0:	f000 f92a 	bl	8015818 <vnd_build_status>
 80155c4:	4603      	mov	r3, r0
 80155c6:	80fb      	strh	r3, [r7, #6]
        if(!l) { pending_status = 0; return; } /* (очистка дублирующего кода STAT уже выполнена выше) */
 80155c8:	88fb      	ldrh	r3, [r7, #6]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d103      	bne.n	80155d6 <vnd_try_send_pending_status_from_task+0x46>
 80155ce:	4b29      	ldr	r3, [pc, #164]	@ (8015674 <vnd_try_send_pending_status_from_task+0xe4>)
 80155d0:	2200      	movs	r2, #0
 80155d2:	701a      	strb	r2, [r3, #0]
 80155d4:	e048      	b.n	8015668 <vnd_try_send_pending_status_from_task+0xd8>
    vnd_status_permit_once = 1;
 80155d6:	4b2b      	ldr	r3, [pc, #172]	@ (8015684 <vnd_try_send_pending_status_from_task+0xf4>)
 80155d8:	2201      	movs	r2, #1
 80155da:	701a      	strb	r2, [r3, #0]
    vnd_tx_ready = 0; vnd_ep_busy = 1; vnd_last_tx_len = l; vnd_last_tx_start_ms = HAL_GetTick();
 80155dc:	4b2a      	ldr	r3, [pc, #168]	@ (8015688 <vnd_try_send_pending_status_from_task+0xf8>)
 80155de:	2200      	movs	r2, #0
 80155e0:	701a      	strb	r2, [r3, #0]
 80155e2:	4b25      	ldr	r3, [pc, #148]	@ (8015678 <vnd_try_send_pending_status_from_task+0xe8>)
 80155e4:	2201      	movs	r2, #1
 80155e6:	701a      	strb	r2, [r3, #0]
 80155e8:	4a28      	ldr	r2, [pc, #160]	@ (801568c <vnd_try_send_pending_status_from_task+0xfc>)
 80155ea:	88fb      	ldrh	r3, [r7, #6]
 80155ec:	8013      	strh	r3, [r2, #0]
 80155ee:	f7ef f8b3 	bl	8004758 <HAL_GetTick>
 80155f2:	4603      	mov	r3, r0
 80155f4:	4a26      	ldr	r2, [pc, #152]	@ (8015690 <vnd_try_send_pending_status_from_task+0x100>)
 80155f6:	6013      	str	r3, [r2, #0]
    if(USBD_VND_Transmit(&hUsbDeviceHS, (uint8_t*)status_buf, l) == USBD_OK){
 80155f8:	88fb      	ldrh	r3, [r7, #6]
 80155fa:	461a      	mov	r2, r3
 80155fc:	4920      	ldr	r1, [pc, #128]	@ (8015680 <vnd_try_send_pending_status_from_task+0xf0>)
 80155fe:	4825      	ldr	r0, [pc, #148]	@ (8015694 <vnd_try_send_pending_status_from_task+0x104>)
 8015600:	f003 fd50 	bl	80190a4 <USBD_VND_Transmit>
 8015604:	4603      	mov	r3, r0
 8015606:	2b00      	cmp	r3, #0
 8015608:	d11c      	bne.n	8015644 <vnd_try_send_pending_status_from_task+0xb4>
        vnd_tx_meta_after((uint8_t*)status_buf, l);
 801560a:	88fb      	ldrh	r3, [r7, #6]
 801560c:	4619      	mov	r1, r3
 801560e:	481c      	ldr	r0, [pc, #112]	@ (8015680 <vnd_try_send_pending_status_from_task+0xf0>)
 8015610:	f7ff fe0c 	bl	801522c <vnd_tx_meta_after>
        VND_LOG("STAT_TX pending(task) len=%u depth=%u", l, (unsigned)vnd_tx_meta_depth());
 8015614:	88fc      	ldrh	r4, [r7, #6]
 8015616:	f7ff fd21 	bl	801505c <vnd_tx_meta_depth>
 801561a:	4603      	mov	r3, r0
 801561c:	461a      	mov	r2, r3
 801561e:	4621      	mov	r1, r4
 8015620:	481d      	ldr	r0, [pc, #116]	@ (8015698 <vnd_try_send_pending_status_from_task+0x108>)
 8015622:	f005 f9bd 	bl	801a9a0 <iprintf>
 8015626:	481d      	ldr	r0, [pc, #116]	@ (801569c <vnd_try_send_pending_status_from_task+0x10c>)
 8015628:	f005 fa22 	bl	801aa70 <puts>
        if(stop_request){ stop_stat_inflight = 1; }
 801562c:	4b1c      	ldr	r3, [pc, #112]	@ (80156a0 <vnd_try_send_pending_status_from_task+0x110>)
 801562e:	781b      	ldrb	r3, [r3, #0]
 8015630:	b2db      	uxtb	r3, r3
 8015632:	2b00      	cmp	r3, #0
 8015634:	d002      	beq.n	801563c <vnd_try_send_pending_status_from_task+0xac>
 8015636:	4b1b      	ldr	r3, [pc, #108]	@ (80156a4 <vnd_try_send_pending_status_from_task+0x114>)
 8015638:	2201      	movs	r2, #1
 801563a:	701a      	strb	r2, [r3, #0]
        pending_status = 0;
 801563c:	4b0d      	ldr	r3, [pc, #52]	@ (8015674 <vnd_try_send_pending_status_from_task+0xe4>)
 801563e:	2200      	movs	r2, #0
 8015640:	701a      	strb	r2, [r3, #0]
 8015642:	e011      	b.n	8015668 <vnd_try_send_pending_status_from_task+0xd8>
    } else {
        VND_LOG("STAT_TX pending(task) busy/fail");
 8015644:	4818      	ldr	r0, [pc, #96]	@ (80156a8 <vnd_try_send_pending_status_from_task+0x118>)
 8015646:	f005 f9ab 	bl	801a9a0 <iprintf>
 801564a:	4814      	ldr	r0, [pc, #80]	@ (801569c <vnd_try_send_pending_status_from_task+0x10c>)
 801564c:	f005 fa10 	bl	801aa70 <puts>
        vnd_tx_ready = 1; vnd_ep_busy = 0;
 8015650:	4b0d      	ldr	r3, [pc, #52]	@ (8015688 <vnd_try_send_pending_status_from_task+0xf8>)
 8015652:	2201      	movs	r2, #1
 8015654:	701a      	strb	r2, [r3, #0]
 8015656:	4b08      	ldr	r3, [pc, #32]	@ (8015678 <vnd_try_send_pending_status_from_task+0xe8>)
 8015658:	2200      	movs	r2, #0
 801565a:	701a      	strb	r2, [r3, #0]
 801565c:	e004      	b.n	8015668 <vnd_try_send_pending_status_from_task+0xd8>
    if(diag_mode_active){ return; }
 801565e:	bf00      	nop
 8015660:	e002      	b.n	8015668 <vnd_try_send_pending_status_from_task+0xd8>
    if(!pending_status) return;
 8015662:	bf00      	nop
 8015664:	e000      	b.n	8015668 <vnd_try_send_pending_status_from_task+0xd8>
    if(vnd_ep_busy || vnd_inflight) return;
 8015666:	bf00      	nop
    }
}
 8015668:	370c      	adds	r7, #12
 801566a:	46bd      	mov	sp, r7
 801566c:	bd90      	pop	{r4, r7, pc}
 801566e:	bf00      	nop
 8015670:	2400c729 	.word	0x2400c729
 8015674:	2400c728 	.word	0x2400c728
 8015678:	2400c5ec 	.word	0x2400c5ec
 801567c:	2400c5ed 	.word	0x2400c5ed
 8015680:	2400c6a8 	.word	0x2400c6a8
 8015684:	2400c689 	.word	0x2400c689
 8015688:	2400003b 	.word	0x2400003b
 801568c:	2400c650 	.word	0x2400c650
 8015690:	2400c654 	.word	0x2400c654
 8015694:	2400c2fc 	.word	0x2400c2fc
 8015698:	0801ca64 	.word	0x0801ca64
 801569c:	0801c9c8 	.word	0x0801c9c8
 80156a0:	2400c68f 	.word	0x2400c68f
 80156a4:	2400c690 	.word	0x2400c690
 80156a8:	0801ca90 	.word	0x0801ca90

080156ac <usb_vendor_periodic_tick>:

/* Тик от таймера */
static volatile uint8_t vnd_tick_flag = 0;
void usb_vendor_periodic_tick(void){ vnd_tick_flag = 1; }
 80156ac:	b480      	push	{r7}
 80156ae:	af00      	add	r7, sp, #0
 80156b0:	4b03      	ldr	r3, [pc, #12]	@ (80156c0 <usb_vendor_periodic_tick+0x14>)
 80156b2:	2201      	movs	r2, #1
 80156b4:	701a      	strb	r2, [r3, #0]
 80156b6:	bf00      	nop
 80156b8:	46bd      	mov	sp, r7
 80156ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156be:	4770      	bx	lr
 80156c0:	24018aac 	.word	0x24018aac

080156c4 <vnd_reset_buffers>:

/* ---------------- Вспомогательные ---------------- */
static void vnd_reset_buffers(void){
 80156c4:	b590      	push	{r4, r7, lr}
 80156c6:	b083      	sub	sp, #12
 80156c8:	af00      	add	r7, sp, #0
    for(uint8_t p=0;p<VND_PAIR_BUFFERS;p++) for(uint8_t c=0;c<2;c++){ g_frames[p][c].st=FB_FILL; g_frames[p][c].samples=0; g_frames[p][c].flags = c?VND_FLAGS_ADC1:VND_FLAGS_ADC0; g_frames[p][c].frame_size=0; g_frames[p][c].seq=0; memset(g_frames[p][c].buf,0xCC,sizeof(g_frames[p][c].buf)); }
 80156ca:	2300      	movs	r3, #0
 80156cc:	71fb      	strb	r3, [r7, #7]
 80156ce:	e075      	b.n	80157bc <vnd_reset_buffers+0xf8>
 80156d0:	2300      	movs	r3, #0
 80156d2:	71bb      	strb	r3, [r7, #6]
 80156d4:	e06c      	b.n	80157b0 <vnd_reset_buffers+0xec>
 80156d6:	79fb      	ldrb	r3, [r7, #7]
 80156d8:	79ba      	ldrb	r2, [r7, #6]
 80156da:	4947      	ldr	r1, [pc, #284]	@ (80157f8 <vnd_reset_buffers+0x134>)
 80156dc:	f640 20cc 	movw	r0, #2764	@ 0xacc
 80156e0:	fb00 f202 	mul.w	r2, r0, r2
 80156e4:	f241 5098 	movw	r0, #5528	@ 0x1598
 80156e8:	fb00 f303 	mul.w	r3, r0, r3
 80156ec:	4413      	add	r3, r2
 80156ee:	440b      	add	r3, r1
 80156f0:	2200      	movs	r2, #0
 80156f2:	701a      	strb	r2, [r3, #0]
 80156f4:	79fb      	ldrb	r3, [r7, #7]
 80156f6:	79ba      	ldrb	r2, [r7, #6]
 80156f8:	493f      	ldr	r1, [pc, #252]	@ (80157f8 <vnd_reset_buffers+0x134>)
 80156fa:	f640 20cc 	movw	r0, #2764	@ 0xacc
 80156fe:	fb00 f202 	mul.w	r2, r0, r2
 8015702:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015706:	fb00 f303 	mul.w	r3, r0, r3
 801570a:	4413      	add	r3, r2
 801570c:	440b      	add	r3, r1
 801570e:	3302      	adds	r3, #2
 8015710:	2200      	movs	r2, #0
 8015712:	801a      	strh	r2, [r3, #0]
 8015714:	79bb      	ldrb	r3, [r7, #6]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d001      	beq.n	801571e <vnd_reset_buffers+0x5a>
 801571a:	2402      	movs	r4, #2
 801571c:	e000      	b.n	8015720 <vnd_reset_buffers+0x5c>
 801571e:	2401      	movs	r4, #1
 8015720:	79fb      	ldrb	r3, [r7, #7]
 8015722:	79ba      	ldrb	r2, [r7, #6]
 8015724:	4934      	ldr	r1, [pc, #208]	@ (80157f8 <vnd_reset_buffers+0x134>)
 8015726:	f640 20cc 	movw	r0, #2764	@ 0xacc
 801572a:	fb00 f202 	mul.w	r2, r0, r2
 801572e:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015732:	fb00 f303 	mul.w	r3, r0, r3
 8015736:	4413      	add	r3, r2
 8015738:	440b      	add	r3, r1
 801573a:	3304      	adds	r3, #4
 801573c:	4622      	mov	r2, r4
 801573e:	701a      	strb	r2, [r3, #0]
 8015740:	79fb      	ldrb	r3, [r7, #7]
 8015742:	79ba      	ldrb	r2, [r7, #6]
 8015744:	492c      	ldr	r1, [pc, #176]	@ (80157f8 <vnd_reset_buffers+0x134>)
 8015746:	f640 20cc 	movw	r0, #2764	@ 0xacc
 801574a:	fb00 f202 	mul.w	r2, r0, r2
 801574e:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015752:	fb00 f303 	mul.w	r3, r0, r3
 8015756:	4413      	add	r3, r2
 8015758:	440b      	add	r3, r1
 801575a:	3306      	adds	r3, #6
 801575c:	2200      	movs	r2, #0
 801575e:	801a      	strh	r2, [r3, #0]
 8015760:	79fb      	ldrb	r3, [r7, #7]
 8015762:	79ba      	ldrb	r2, [r7, #6]
 8015764:	4924      	ldr	r1, [pc, #144]	@ (80157f8 <vnd_reset_buffers+0x134>)
 8015766:	f640 20cc 	movw	r0, #2764	@ 0xacc
 801576a:	fb00 f202 	mul.w	r2, r0, r2
 801576e:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015772:	fb00 f303 	mul.w	r3, r0, r3
 8015776:	4413      	add	r3, r2
 8015778:	440b      	add	r3, r1
 801577a:	3308      	adds	r3, #8
 801577c:	2200      	movs	r2, #0
 801577e:	601a      	str	r2, [r3, #0]
 8015780:	79fb      	ldrb	r3, [r7, #7]
 8015782:	79ba      	ldrb	r2, [r7, #6]
 8015784:	f640 21cc 	movw	r1, #2764	@ 0xacc
 8015788:	fb01 f202 	mul.w	r2, r1, r2
 801578c:	f241 5198 	movw	r1, #5528	@ 0x1598
 8015790:	fb01 f303 	mul.w	r3, r1, r3
 8015794:	4413      	add	r3, r2
 8015796:	3308      	adds	r3, #8
 8015798:	4a17      	ldr	r2, [pc, #92]	@ (80157f8 <vnd_reset_buffers+0x134>)
 801579a:	4413      	add	r3, r2
 801579c:	3304      	adds	r3, #4
 801579e:	f44f 622c 	mov.w	r2, #2752	@ 0xac0
 80157a2:	21cc      	movs	r1, #204	@ 0xcc
 80157a4:	4618      	mov	r0, r3
 80157a6:	f005 fb67 	bl	801ae78 <memset>
 80157aa:	79bb      	ldrb	r3, [r7, #6]
 80157ac:	3301      	adds	r3, #1
 80157ae:	71bb      	strb	r3, [r7, #6]
 80157b0:	79bb      	ldrb	r3, [r7, #6]
 80157b2:	2b01      	cmp	r3, #1
 80157b4:	d98f      	bls.n	80156d6 <vnd_reset_buffers+0x12>
 80157b6:	79fb      	ldrb	r3, [r7, #7]
 80157b8:	3301      	adds	r3, #1
 80157ba:	71fb      	strb	r3, [r7, #7]
 80157bc:	79fb      	ldrb	r3, [r7, #7]
 80157be:	2b07      	cmp	r3, #7
 80157c0:	d986      	bls.n	80156d0 <vnd_reset_buffers+0xc>
    pair_fill_idx=pair_send_idx=0; sending_channel=0xFF; channel0_sent_curseq=channel1_sent_curseq=0; pending_B = 0; pending_B_since_ms = 0; }
 80157c2:	4b0e      	ldr	r3, [pc, #56]	@ (80157fc <vnd_reset_buffers+0x138>)
 80157c4:	2200      	movs	r2, #0
 80157c6:	701a      	strb	r2, [r3, #0]
 80157c8:	4b0c      	ldr	r3, [pc, #48]	@ (80157fc <vnd_reset_buffers+0x138>)
 80157ca:	781a      	ldrb	r2, [r3, #0]
 80157cc:	4b0c      	ldr	r3, [pc, #48]	@ (8015800 <vnd_reset_buffers+0x13c>)
 80157ce:	701a      	strb	r2, [r3, #0]
 80157d0:	4b0c      	ldr	r3, [pc, #48]	@ (8015804 <vnd_reset_buffers+0x140>)
 80157d2:	22ff      	movs	r2, #255	@ 0xff
 80157d4:	701a      	strb	r2, [r3, #0]
 80157d6:	4b0c      	ldr	r3, [pc, #48]	@ (8015808 <vnd_reset_buffers+0x144>)
 80157d8:	2200      	movs	r2, #0
 80157da:	701a      	strb	r2, [r3, #0]
 80157dc:	4b0a      	ldr	r3, [pc, #40]	@ (8015808 <vnd_reset_buffers+0x144>)
 80157de:	781a      	ldrb	r2, [r3, #0]
 80157e0:	4b0a      	ldr	r3, [pc, #40]	@ (801580c <vnd_reset_buffers+0x148>)
 80157e2:	701a      	strb	r2, [r3, #0]
 80157e4:	4b0a      	ldr	r3, [pc, #40]	@ (8015810 <vnd_reset_buffers+0x14c>)
 80157e6:	2200      	movs	r2, #0
 80157e8:	701a      	strb	r2, [r3, #0]
 80157ea:	4b0a      	ldr	r3, [pc, #40]	@ (8015814 <vnd_reset_buffers+0x150>)
 80157ec:	2200      	movs	r2, #0
 80157ee:	601a      	str	r2, [r3, #0]
 80157f0:	bf00      	nop
 80157f2:	370c      	adds	r7, #12
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd90      	pop	{r4, r7, pc}
 80157f8:	2400dd70 	.word	0x2400dd70
 80157fc:	24018a31 	.word	0x24018a31
 8015800:	24018a30 	.word	0x24018a30
 8015804:	2400004c 	.word	0x2400004c
 8015808:	2400c6a5 	.word	0x2400c6a5
 801580c:	2400c6a4 	.word	0x2400c6a4
 8015810:	24018a32 	.word	0x24018a32
 8015814:	24018a34 	.word	0x24018a34

08015818 <vnd_build_status>:

uint16_t vnd_build_status(uint8_t *dst, uint16_t max_len){
 8015818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801581a:	b093      	sub	sp, #76	@ 0x4c
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
 8015820:	460b      	mov	r3, r1
 8015822:	807b      	strh	r3, [r7, #2]
    if(max_len < sizeof(vnd_status_v1_t)) return 0;
 8015824:	887b      	ldrh	r3, [r7, #2]
 8015826:	2b3f      	cmp	r3, #63	@ 0x3f
 8015828:	d801      	bhi.n	801582e <vnd_build_status+0x16>
 801582a:	2300      	movs	r3, #0
 801582c:	e1e1      	b.n	8015bf2 <vnd_build_status+0x3da>
    memset(&g_status,0,sizeof(g_status));
 801582e:	2240      	movs	r2, #64	@ 0x40
 8015830:	2100      	movs	r1, #0
 8015832:	4813      	ldr	r0, [pc, #76]	@ (8015880 <vnd_build_status+0x68>)
 8015834:	f005 fb20 	bl	801ae78 <memset>
    /* Сигнатура 'STAT' в первых 4 байтах */
    g_status.sig[0] = 'S';
 8015838:	4b11      	ldr	r3, [pc, #68]	@ (8015880 <vnd_build_status+0x68>)
 801583a:	2253      	movs	r2, #83	@ 0x53
 801583c:	701a      	strb	r2, [r3, #0]
    g_status.sig[1] = 'T';
 801583e:	4b10      	ldr	r3, [pc, #64]	@ (8015880 <vnd_build_status+0x68>)
 8015840:	2254      	movs	r2, #84	@ 0x54
 8015842:	705a      	strb	r2, [r3, #1]
    g_status.sig[2] = 'A';
 8015844:	4b0e      	ldr	r3, [pc, #56]	@ (8015880 <vnd_build_status+0x68>)
 8015846:	2241      	movs	r2, #65	@ 0x41
 8015848:	709a      	strb	r2, [r3, #2]
    g_status.sig[3] = 'T';
 801584a:	4b0d      	ldr	r3, [pc, #52]	@ (8015880 <vnd_build_status+0x68>)
 801584c:	2254      	movs	r2, #84	@ 0x54
 801584e:	70da      	strb	r2, [r3, #3]
    g_status.version = 1;
 8015850:	4b0b      	ldr	r3, [pc, #44]	@ (8015880 <vnd_build_status+0x68>)
 8015852:	2201      	movs	r2, #1
 8015854:	711a      	strb	r2, [r3, #4]
    g_status.cur_samples = cur_samples_per_frame;
 8015856:	4b0b      	ldr	r3, [pc, #44]	@ (8015884 <vnd_build_status+0x6c>)
 8015858:	881b      	ldrh	r3, [r3, #0]
 801585a:	b29a      	uxth	r2, r3
 801585c:	4b08      	ldr	r3, [pc, #32]	@ (8015880 <vnd_build_status+0x68>)
 801585e:	80da      	strh	r2, [r3, #6]
    g_status.frame_bytes = (uint16_t)(VND_FRAME_HDR_SIZE + cur_samples_per_frame*2u);
 8015860:	4b08      	ldr	r3, [pc, #32]	@ (8015884 <vnd_build_status+0x6c>)
 8015862:	881b      	ldrh	r3, [r3, #0]
 8015864:	b29b      	uxth	r3, r3
 8015866:	3310      	adds	r3, #16
 8015868:	b29b      	uxth	r3, r3
 801586a:	005b      	lsls	r3, r3, #1
 801586c:	b29a      	uxth	r2, r3
 801586e:	4b04      	ldr	r3, [pc, #16]	@ (8015880 <vnd_build_status+0x68>)
 8015870:	811a      	strh	r2, [r3, #8]
    g_status.test_frames = test_sent ? 1u : 0u;
 8015872:	4b05      	ldr	r3, [pc, #20]	@ (8015888 <vnd_build_status+0x70>)
 8015874:	781b      	ldrb	r3, [r3, #0]
 8015876:	b2db      	uxtb	r3, r3
 8015878:	2b00      	cmp	r3, #0
 801587a:	d007      	beq.n	801588c <vnd_build_status+0x74>
 801587c:	2201      	movs	r2, #1
 801587e:	e006      	b.n	801588e <vnd_build_status+0x76>
 8015880:	2400c6e8 	.word	0x2400c6e8
 8015884:	2400c5e0 	.word	0x2400c5e0
 8015888:	2400c5ee 	.word	0x2400c5ee
 801588c:	2200      	movs	r2, #0
 801588e:	4bad      	ldr	r3, [pc, #692]	@ (8015b44 <vnd_build_status+0x32c>)
 8015890:	815a      	strh	r2, [r3, #10]
    g_status.produced_seq = dbg_produced_seq;
 8015892:	4bad      	ldr	r3, [pc, #692]	@ (8015b48 <vnd_build_status+0x330>)
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	4aab      	ldr	r2, [pc, #684]	@ (8015b44 <vnd_build_status+0x32c>)
 8015898:	60d3      	str	r3, [r2, #12]
    g_status.sent0 = dbg_sent_ch0_total;
 801589a:	4bac      	ldr	r3, [pc, #688]	@ (8015b4c <vnd_build_status+0x334>)
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	4aa9      	ldr	r2, [pc, #676]	@ (8015b44 <vnd_build_status+0x32c>)
 80158a0:	6113      	str	r3, [r2, #16]
    g_status.sent1 = dbg_sent_ch1_total;
 80158a2:	4bab      	ldr	r3, [pc, #684]	@ (8015b50 <vnd_build_status+0x338>)
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	4aa7      	ldr	r2, [pc, #668]	@ (8015b44 <vnd_build_status+0x32c>)
 80158a8:	6153      	str	r3, [r2, #20]
    g_status.dbg_tx_cplt = dbg_tx_cplt;
 80158aa:	4baa      	ldr	r3, [pc, #680]	@ (8015b54 <vnd_build_status+0x33c>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	4aa5      	ldr	r2, [pc, #660]	@ (8015b44 <vnd_build_status+0x32c>)
 80158b0:	6193      	str	r3, [r2, #24]
    g_status.dbg_partial_frame_abort = dbg_partial_frame_abort;
 80158b2:	4ba9      	ldr	r3, [pc, #676]	@ (8015b58 <vnd_build_status+0x340>)
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	4aa3      	ldr	r2, [pc, #652]	@ (8015b44 <vnd_build_status+0x32c>)
 80158b8:	61d3      	str	r3, [r2, #28]
    g_status.dbg_size_mismatch = dbg_size_mismatch;
 80158ba:	4ba8      	ldr	r3, [pc, #672]	@ (8015b5c <vnd_build_status+0x344>)
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	4aa1      	ldr	r2, [pc, #644]	@ (8015b44 <vnd_build_status+0x32c>)
 80158c0:	6213      	str	r3, [r2, #32]
    /* Получим DMA счётчики */
    adc_stream_debug_t d; adc_stream_get_debug(&d);
 80158c2:	f107 030c 	add.w	r3, r7, #12
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7ea ff62 	bl	8000790 <adc_stream_get_debug>
    g_status.dma_done0 = d.dma_full0;
 80158cc:	6a3b      	ldr	r3, [r7, #32]
 80158ce:	4a9d      	ldr	r2, [pc, #628]	@ (8015b44 <vnd_build_status+0x32c>)
 80158d0:	6253      	str	r3, [r2, #36]	@ 0x24
    g_status.dma_done1 = d.dma_full1;
 80158d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158d4:	4a9b      	ldr	r2, [pc, #620]	@ (8015b44 <vnd_build_status+0x32c>)
 80158d6:	6293      	str	r3, [r2, #40]	@ 0x28
    g_status.frame_wr_seq = d.frame_wr_seq;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	4a9a      	ldr	r2, [pc, #616]	@ (8015b44 <vnd_build_status+0x32c>)
 80158dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(streaming) g_status.flags_runtime |= VND_STFLAG_STREAMING;
 80158de:	4ba0      	ldr	r3, [pc, #640]	@ (8015b60 <vnd_build_status+0x348>)
 80158e0:	781b      	ldrb	r3, [r3, #0]
 80158e2:	b2db      	uxtb	r3, r3
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d006      	beq.n	80158f6 <vnd_build_status+0xde>
 80158e8:	4b96      	ldr	r3, [pc, #600]	@ (8015b44 <vnd_build_status+0x32c>)
 80158ea:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80158ec:	f043 0301 	orr.w	r3, r3, #1
 80158f0:	b29a      	uxth	r2, r3
 80158f2:	4b94      	ldr	r3, [pc, #592]	@ (8015b44 <vnd_build_status+0x32c>)
 80158f4:	861a      	strh	r2, [r3, #48]	@ 0x30
    if(diag_mode_active) g_status.flags_runtime |= VND_STFLAG_DIAG_ACTIVE;
 80158f6:	4b9b      	ldr	r3, [pc, #620]	@ (8015b64 <vnd_build_status+0x34c>)
 80158f8:	781b      	ldrb	r3, [r3, #0]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d006      	beq.n	801590c <vnd_build_status+0xf4>
 80158fe:	4b91      	ldr	r3, [pc, #580]	@ (8015b44 <vnd_build_status+0x32c>)
 8015900:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8015902:	f043 0302 	orr.w	r3, r3, #2
 8015906:	b29a      	uxth	r2, r3
 8015908:	4b8e      	ldr	r3, [pc, #568]	@ (8015b44 <vnd_build_status+0x32c>)
 801590a:	861a      	strh	r2, [r3, #48]	@ 0x30
    /* Новые поля диагностики */
    uint16_t f2 = 0;
 801590c:	2300      	movs	r3, #0
 801590e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    /* Бит0 = занятость IN EP: локальная (vnd_ep_busy) ИЛИ низкоуровневая (LL vnd_tx_busy) */
    {
        extern uint8_t USBD_VND_TxIsBusy(void);
        uint8_t ll_busy = USBD_VND_TxIsBusy();
 8015912:	f003 fcbb 	bl	801928c <USBD_VND_TxIsBusy>
 8015916:	4603      	mov	r3, r0
 8015918:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
        if(vnd_ep_busy || ll_busy) f2 |= 1u<<0;
 801591c:	4b92      	ldr	r3, [pc, #584]	@ (8015b68 <vnd_build_status+0x350>)
 801591e:	781b      	ldrb	r3, [r3, #0]
 8015920:	b2db      	uxtb	r3, r3
 8015922:	2b00      	cmp	r3, #0
 8015924:	d103      	bne.n	801592e <vnd_build_status+0x116>
 8015926:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801592a:	2b00      	cmp	r3, #0
 801592c:	d005      	beq.n	801593a <vnd_build_status+0x122>
 801592e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015932:	f043 0301 	orr.w	r3, r3, #1
 8015936:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    }
    if(vnd_tx_ready)         f2 |= 1u<<1;
 801593a:	4b8c      	ldr	r3, [pc, #560]	@ (8015b6c <vnd_build_status+0x354>)
 801593c:	781b      	ldrb	r3, [r3, #0]
 801593e:	b2db      	uxtb	r3, r3
 8015940:	2b00      	cmp	r3, #0
 8015942:	d005      	beq.n	8015950 <vnd_build_status+0x138>
 8015944:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015948:	f043 0302 	orr.w	r3, r3, #2
 801594c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(pending_B)            f2 |= 1u<<2;
 8015950:	4b87      	ldr	r3, [pc, #540]	@ (8015b70 <vnd_build_status+0x358>)
 8015952:	781b      	ldrb	r3, [r3, #0]
 8015954:	b2db      	uxtb	r3, r3
 8015956:	2b00      	cmp	r3, #0
 8015958:	d005      	beq.n	8015966 <vnd_build_status+0x14e>
 801595a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801595e:	f043 0304 	orr.w	r3, r3, #4
 8015962:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(test_in_flight)       f2 |= 1u<<3;
 8015966:	4b83      	ldr	r3, [pc, #524]	@ (8015b74 <vnd_build_status+0x35c>)
 8015968:	781b      	ldrb	r3, [r3, #0]
 801596a:	b2db      	uxtb	r3, r3
 801596c:	2b00      	cmp	r3, #0
 801596e:	d005      	beq.n	801597c <vnd_build_status+0x164>
 8015970:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015974:	f043 0308 	orr.w	r3, r3, #8
 8015978:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(start_ack_done)       f2 |= 1u<<4;
 801597c:	4b7e      	ldr	r3, [pc, #504]	@ (8015b78 <vnd_build_status+0x360>)
 801597e:	781b      	ldrb	r3, [r3, #0]
 8015980:	b2db      	uxtb	r3, r3
 8015982:	2b00      	cmp	r3, #0
 8015984:	d005      	beq.n	8015992 <vnd_build_status+0x17a>
 8015986:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801598a:	f043 0310 	orr.w	r3, r3, #16
 801598e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(start_stat_inflight)  f2 |= 1u<<5;
 8015992:	4b7a      	ldr	r3, [pc, #488]	@ (8015b7c <vnd_build_status+0x364>)
 8015994:	781b      	ldrb	r3, [r3, #0]
 8015996:	b2db      	uxtb	r3, r3
 8015998:	2b00      	cmp	r3, #0
 801599a:	d005      	beq.n	80159a8 <vnd_build_status+0x190>
 801599c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80159a0:	f043 0320 	orr.w	r3, r3, #32
 80159a4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(start_stat_planned)   f2 |= 1u<<6;
 80159a8:	4b75      	ldr	r3, [pc, #468]	@ (8015b80 <vnd_build_status+0x368>)
 80159aa:	781b      	ldrb	r3, [r3, #0]
 80159ac:	b2db      	uxtb	r3, r3
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d005      	beq.n	80159be <vnd_build_status+0x1a6>
 80159b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80159b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80159ba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(pending_status)       f2 |= 1u<<7;
 80159be:	4b71      	ldr	r3, [pc, #452]	@ (8015b84 <vnd_build_status+0x36c>)
 80159c0:	781b      	ldrb	r3, [r3, #0]
 80159c2:	b2db      	uxtb	r3, r3
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d005      	beq.n	80159d4 <vnd_build_status+0x1bc>
 80159c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80159cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80159d0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(simple_tx_mode)       f2 |= 1u<<8;
 80159d4:	4b6c      	ldr	r3, [pc, #432]	@ (8015b88 <vnd_build_status+0x370>)
 80159d6:	781b      	ldrb	r3, [r3, #0]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d005      	beq.n	80159e8 <vnd_build_status+0x1d0>
 80159dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80159e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80159e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(diag_mode_active)     f2 |= 1u<<9;
 80159e8:	4b5e      	ldr	r3, [pc, #376]	@ (8015b64 <vnd_build_status+0x34c>)
 80159ea:	781b      	ldrb	r3, [r3, #0]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d005      	beq.n	80159fc <vnd_build_status+0x1e4>
 80159f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80159f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80159f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(first_pair_done)      f2 |= 1u<<10; /* переместим ниже биты READY/SENDING */
 80159fc:	4b63      	ldr	r3, [pc, #396]	@ (8015b8c <vnd_build_status+0x374>)
 80159fe:	781b      	ldrb	r3, [r3, #0]
 8015a00:	b2db      	uxtb	r3, r3
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d005      	beq.n	8015a12 <vnd_build_status+0x1fa>
 8015a06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015a0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8015a0e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    /* Доп. диагностика: наличие готовых кадров в текущей паре */
    {
        ChanFrame *fa = &g_frames[pair_send_idx][0];
 8015a12:	4b5f      	ldr	r3, [pc, #380]	@ (8015b90 <vnd_build_status+0x378>)
 8015a14:	781b      	ldrb	r3, [r3, #0]
 8015a16:	461a      	mov	r2, r3
 8015a18:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015a1c:	fb02 f303 	mul.w	r3, r2, r3
 8015a20:	4a5c      	ldr	r2, [pc, #368]	@ (8015b94 <vnd_build_status+0x37c>)
 8015a22:	4413      	add	r3, r2
 8015a24:	643b      	str	r3, [r7, #64]	@ 0x40
        ChanFrame *fb = &g_frames[pair_send_idx][1];
 8015a26:	4b5a      	ldr	r3, [pc, #360]	@ (8015b90 <vnd_build_status+0x378>)
 8015a28:	781b      	ldrb	r3, [r3, #0]
 8015a2a:	461a      	mov	r2, r3
 8015a2c:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015a30:	fb02 f303 	mul.w	r3, r2, r3
 8015a34:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8015a38:	4a56      	ldr	r2, [pc, #344]	@ (8015b94 <vnd_build_status+0x37c>)
 8015a3a:	4413      	add	r3, r2
 8015a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (fa->st == FB_READY) f2 |= 1u<<11;
 8015a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015a40:	781b      	ldrb	r3, [r3, #0]
 8015a42:	b2db      	uxtb	r3, r3
 8015a44:	2b01      	cmp	r3, #1
 8015a46:	d105      	bne.n	8015a54 <vnd_build_status+0x23c>
 8015a48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015a4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015a50:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (fb->st == FB_READY) f2 |= 1u<<12;
 8015a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	b2db      	uxtb	r3, r3
 8015a5a:	2b01      	cmp	r3, #1
 8015a5c:	d105      	bne.n	8015a6a <vnd_build_status+0x252>
 8015a5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015a62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8015a66:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        /* Новые биты: состояние SENDING для A/B чтобы различать READY и активную передачу */
        if (fa->st == FB_SENDING) f2 |= 1u<<13;
 8015a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015a6c:	781b      	ldrb	r3, [r3, #0]
 8015a6e:	b2db      	uxtb	r3, r3
 8015a70:	2b02      	cmp	r3, #2
 8015a72:	d105      	bne.n	8015a80 <vnd_build_status+0x268>
 8015a74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015a78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015a7c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (fb->st == FB_SENDING) f2 |= 1u<<14;
 8015a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a82:	781b      	ldrb	r3, [r3, #0]
 8015a84:	b2db      	uxtb	r3, r3
 8015a86:	2b02      	cmp	r3, #2
 8015a88:	d105      	bne.n	8015a96 <vnd_build_status+0x27e>
 8015a8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015a8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015a92:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        /* ДОБАВЛЕНО: наличие готовых кадров в буфере подготовки (pair_fill_idx) */
        ChanFrame *fa_fill = &g_frames[pair_fill_idx][0];
 8015a96:	4b40      	ldr	r3, [pc, #256]	@ (8015b98 <vnd_build_status+0x380>)
 8015a98:	781b      	ldrb	r3, [r3, #0]
 8015a9a:	461a      	mov	r2, r3
 8015a9c:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015aa0:	fb02 f303 	mul.w	r3, r2, r3
 8015aa4:	4a3b      	ldr	r2, [pc, #236]	@ (8015b94 <vnd_build_status+0x37c>)
 8015aa6:	4413      	add	r3, r2
 8015aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
        ChanFrame *fb_fill = &g_frames[pair_fill_idx][1];
 8015aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8015b98 <vnd_build_status+0x380>)
 8015aac:	781b      	ldrb	r3, [r3, #0]
 8015aae:	461a      	mov	r2, r3
 8015ab0:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015ab4:	fb02 f303 	mul.w	r3, r2, r3
 8015ab8:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8015abc:	4a35      	ldr	r2, [pc, #212]	@ (8015b94 <vnd_build_status+0x37c>)
 8015abe:	4413      	add	r3, r2
 8015ac0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (fa_fill->st == FB_READY) f2 |= 1u<<15;
 8015ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ac4:	781b      	ldrb	r3, [r3, #0]
 8015ac6:	b2db      	uxtb	r3, r3
 8015ac8:	2b01      	cmp	r3, #1
 8015aca:	d107      	bne.n	8015adc <vnd_build_status+0x2c4>
 8015acc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015ad8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    /* Места под отдельный бит для B_fill нет в v1: пропускаем, чтобы не конфликтовать с битом0 */
    }
    g_status.flags2 = f2;
 8015adc:	4a19      	ldr	r2, [pc, #100]	@ (8015b44 <vnd_build_status+0x32c>)
 8015ade:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015ae2:	8653      	strh	r3, [r2, #50]	@ 0x32
    g_status.sending_ch = sending_channel;
 8015ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8015b9c <vnd_build_status+0x384>)
 8015ae6:	781a      	ldrb	r2, [r3, #0]
 8015ae8:	4b16      	ldr	r3, [pc, #88]	@ (8015b44 <vnd_build_status+0x32c>)
 8015aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    g_status.pair_idx = (uint16_t)(((uint16_t)pair_fill_idx << 8) | (uint16_t)pair_send_idx);
 8015aee:	4b2a      	ldr	r3, [pc, #168]	@ (8015b98 <vnd_build_status+0x380>)
 8015af0:	781b      	ldrb	r3, [r3, #0]
 8015af2:	b21b      	sxth	r3, r3
 8015af4:	021b      	lsls	r3, r3, #8
 8015af6:	b21a      	sxth	r2, r3
 8015af8:	4b25      	ldr	r3, [pc, #148]	@ (8015b90 <vnd_build_status+0x378>)
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	b21b      	sxth	r3, r3
 8015afe:	4313      	orrs	r3, r2
 8015b00:	b21b      	sxth	r3, r3
 8015b02:	b29a      	uxth	r2, r3
 8015b04:	4b0f      	ldr	r3, [pc, #60]	@ (8015b44 <vnd_build_status+0x32c>)
 8015b06:	86da      	strh	r2, [r3, #54]	@ 0x36
    g_status.last_tx_len = vnd_last_tx_len;
 8015b08:	4b25      	ldr	r3, [pc, #148]	@ (8015ba0 <vnd_build_status+0x388>)
 8015b0a:	881b      	ldrh	r3, [r3, #0]
 8015b0c:	b29a      	uxth	r2, r3
 8015b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8015b44 <vnd_build_status+0x32c>)
 8015b10:	871a      	strh	r2, [r3, #56]	@ 0x38
    g_status.cur_stream_seq = stream_seq;
 8015b12:	4b24      	ldr	r3, [pc, #144]	@ (8015ba4 <vnd_build_status+0x38c>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	4a0b      	ldr	r2, [pc, #44]	@ (8015b44 <vnd_build_status+0x32c>)
 8015b18:	f8c2 303a 	str.w	r3, [r2, #58]	@ 0x3a
        reserved0 = LSB dbg_prepare_calls, reserved2(low) = LSB dbg_prepare_ok,
        reserved3 = LSW frame_rd_seq (для сравнения с frame_wr_seq). */
     /* Упаковываем в reserved0: нижние 4 бита = LSB dbg_prepare_calls, старшие 4 = lastTxRC (LL) */
     do {
         extern uint8_t USBD_VND_LastTxRC(void);
         uint8_t rc = USBD_VND_LastTxRC();
 8015b1c:	f003 fbc2 	bl	80192a4 <USBD_VND_LastTxRC>
 8015b20:	4603      	mov	r3, r0
 8015b22:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
         uint8_t lsb = (uint8_t)(dbg_prepare_calls & 0x0Fu);
 8015b26:	4b20      	ldr	r3, [pc, #128]	@ (8015ba8 <vnd_build_status+0x390>)
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	b2db      	uxtb	r3, r3
 8015b2c:	f003 030f 	and.w	r3, r3, #15
 8015b30:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
         g_status.reserved0 = (uint8_t)((rc << 4) | lsb);
 8015b34:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8015b38:	011b      	lsls	r3, r3, #4
 8015b3a:	b25a      	sxtb	r2, r3
 8015b3c:	f997 3032 	ldrsb.w	r3, [r7, #50]	@ 0x32
 8015b40:	e034      	b.n	8015bac <vnd_build_status+0x394>
 8015b42:	bf00      	nop
 8015b44:	2400c6e8 	.word	0x2400c6e8
 8015b48:	2400c5f0 	.word	0x2400c5f0
 8015b4c:	2400c614 	.word	0x2400c614
 8015b50:	2400c618 	.word	0x2400c618
 8015b54:	2400c61c 	.word	0x2400c61c
 8015b58:	2400c5fc 	.word	0x2400c5fc
 8015b5c:	2400c600 	.word	0x2400c600
 8015b60:	2400c5d8 	.word	0x2400c5d8
 8015b64:	2400c729 	.word	0x2400c729
 8015b68:	2400c5ec 	.word	0x2400c5ec
 8015b6c:	2400003b 	.word	0x2400003b
 8015b70:	24018a32 	.word	0x24018a32
 8015b74:	2400c5ef 	.word	0x2400c5ef
 8015b78:	2400c68d 	.word	0x2400c68d
 8015b7c:	2400c68c 	.word	0x2400c68c
 8015b80:	2400c68b 	.word	0x2400c68b
 8015b84:	2400c728 	.word	0x2400c728
 8015b88:	2400004d 	.word	0x2400004d
 8015b8c:	2400c678 	.word	0x2400c678
 8015b90:	24018a31 	.word	0x24018a31
 8015b94:	2400dd70 	.word	0x2400dd70
 8015b98:	24018a30 	.word	0x24018a30
 8015b9c:	2400004c 	.word	0x2400004c
 8015ba0:	2400c650 	.word	0x2400c650
 8015ba4:	2400c5dc 	.word	0x2400c5dc
 8015ba8:	2400c694 	.word	0x2400c694
 8015bac:	4313      	orrs	r3, r2
 8015bae:	b25b      	sxtb	r3, r3
 8015bb0:	b2da      	uxtb	r2, r3
 8015bb2:	4b12      	ldr	r3, [pc, #72]	@ (8015bfc <vnd_build_status+0x3e4>)
 8015bb4:	715a      	strb	r2, [r3, #5]
     } while(0);
     /* reserved2: младший байт dbg_prepare_ok */
     g_status.reserved2 = (uint8_t)(dbg_prepare_ok & 0xFFu);
 8015bb6:	4b12      	ldr	r3, [pc, #72]	@ (8015c00 <vnd_build_status+0x3e8>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	b2da      	uxtb	r2, r3
 8015bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8015bfc <vnd_build_status+0x3e4>)
 8015bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
     extern volatile uint32_t frame_rd_seq; /* из adc_stream.c */
     g_status.reserved3 = (uint16_t)(frame_rd_seq & 0xFFFFu);
 8015bc2:	4b10      	ldr	r3, [pc, #64]	@ (8015c04 <vnd_build_status+0x3ec>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	b29a      	uxth	r2, r3
 8015bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8015bfc <vnd_build_status+0x3e4>)
 8015bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
     /* Хак: инкремент dbg_skipped_frames отображаем в sent0/sent1 дельтах, но здесь добавим только
        косвенную диагностику: если skips растут, host увидит разницу produced_seq - sent*. Дополнительно
        можно временно печатать в CDC при отладке (сейчас лог выключен для скорости). */
    memcpy(dst,&g_status,sizeof(g_status));
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	4a0b      	ldr	r2, [pc, #44]	@ (8015bfc <vnd_build_status+0x3e4>)
 8015bd0:	4614      	mov	r4, r2
 8015bd2:	469c      	mov	ip, r3
 8015bd4:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 8015bd8:	4665      	mov	r5, ip
 8015bda:	4626      	mov	r6, r4
 8015bdc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015bde:	6028      	str	r0, [r5, #0]
 8015be0:	6069      	str	r1, [r5, #4]
 8015be2:	60aa      	str	r2, [r5, #8]
 8015be4:	60eb      	str	r3, [r5, #12]
 8015be6:	3410      	adds	r4, #16
 8015be8:	f10c 0c10 	add.w	ip, ip, #16
 8015bec:	4574      	cmp	r4, lr
 8015bee:	d1f3      	bne.n	8015bd8 <vnd_build_status+0x3c0>
    return (uint16_t)sizeof(g_status);
 8015bf0:	2340      	movs	r3, #64	@ 0x40
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	374c      	adds	r7, #76	@ 0x4c
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bfa:	bf00      	nop
 8015bfc:	2400c6e8 	.word	0x2400c6e8
 8015c00:	2400c698 	.word	0x2400c698
 8015c04:	2400ad04 	.word	0x2400ad04

08015c08 <vnd_is_streaming>:

uint8_t vnd_is_streaming(void){ return streaming; }
 8015c08:	b480      	push	{r7}
 8015c0a:	af00      	add	r7, sp, #0
 8015c0c:	4b03      	ldr	r3, [pc, #12]	@ (8015c1c <vnd_is_streaming+0x14>)
 8015c0e:	781b      	ldrb	r3, [r3, #0]
 8015c10:	b2db      	uxtb	r3, r3
 8015c12:	4618      	mov	r0, r3
 8015c14:	46bd      	mov	sp, r7
 8015c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c1a:	4770      	bx	lr
 8015c1c:	2400c5d8 	.word	0x2400c5d8

08015c20 <vnd_prepare_pair>:

static void vnd_prepare_pair(void)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b092      	sub	sp, #72	@ 0x48
 8015c24:	af00      	add	r7, sp, #0
    dbg_prepare_calls++;
 8015c26:	4b7f      	ldr	r3, [pc, #508]	@ (8015e24 <vnd_prepare_pair+0x204>)
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	4a7d      	ldr	r2, [pc, #500]	@ (8015e24 <vnd_prepare_pair+0x204>)
 8015c2e:	6013      	str	r3, [r2, #0]
    VND_LOG("PREPARE_PAIR called (fill_idx=%u)", (unsigned)pair_fill_idx);
 8015c30:	4b7d      	ldr	r3, [pc, #500]	@ (8015e28 <vnd_prepare_pair+0x208>)
 8015c32:	781b      	ldrb	r3, [r3, #0]
 8015c34:	4619      	mov	r1, r3
 8015c36:	487d      	ldr	r0, [pc, #500]	@ (8015e2c <vnd_prepare_pair+0x20c>)
 8015c38:	f004 feb2 	bl	801a9a0 <iprintf>
 8015c3c:	487c      	ldr	r0, [pc, #496]	@ (8015e30 <vnd_prepare_pair+0x210>)
 8015c3e:	f004 ff17 	bl	801aa70 <puts>
    uint16_t *ch1 = NULL, *ch2 = NULL; uint16_t samples = 0;
 8015c42:	2300      	movs	r3, #0
 8015c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015c46:	2300      	movs	r3, #0
 8015c48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
  __ASM volatile ("cpsid i" : : : "memory");
 8015c4e:	b672      	cpsid	i
}
 8015c50:	bf00      	nop
    /* last-buffer-wins: берём последний доступный кадр; если накопилась очередь >1, пропускаем старые */
    /* Локальная логика: забрать последний кадр из ADC FIFO, безопасно по отношению к ISR */
    {
        uint32_t wr, rd, backlog, seq;
        __disable_irq();
        wr = frame_wr_seq; rd = frame_rd_seq;
 8015c52:	4b78      	ldr	r3, [pc, #480]	@ (8015e34 <vnd_prepare_pair+0x214>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	633b      	str	r3, [r7, #48]	@ 0x30
 8015c58:	4b77      	ldr	r3, [pc, #476]	@ (8015e38 <vnd_prepare_pair+0x218>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (wr == rd) { __enable_irq(); return; }
 8015c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c62:	429a      	cmp	r2, r3
 8015c64:	d102      	bne.n	8015c6c <vnd_prepare_pair+0x4c>
  __ASM volatile ("cpsie i" : : : "memory");
 8015c66:	b662      	cpsie	i
}
 8015c68:	bf00      	nop
 8015c6a:	e189      	b.n	8015f80 <vnd_prepare_pair+0x360>
        backlog = wr - rd;
 8015c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c70:	1ad3      	subs	r3, r2, r3
 8015c72:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (backlog > 1u) {
 8015c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c76:	2b01      	cmp	r3, #1
 8015c78:	d90d      	bls.n	8015c96 <vnd_prepare_pair+0x76>
            /* Перескочить на последний полный кадр и пометить все промежуточные как пропущенные */
            seq = wr - 1u;
 8015c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c7c:	3b01      	subs	r3, #1
 8015c7e:	647b      	str	r3, [r7, #68]	@ 0x44
            dbg_skipped_frames += (backlog - 1u);
 8015c80:	4b6e      	ldr	r3, [pc, #440]	@ (8015e3c <vnd_prepare_pair+0x21c>)
 8015c82:	681a      	ldr	r2, [r3, #0]
 8015c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c86:	4413      	add	r3, r2
 8015c88:	3b01      	subs	r3, #1
 8015c8a:	4a6c      	ldr	r2, [pc, #432]	@ (8015e3c <vnd_prepare_pair+0x21c>)
 8015c8c:	6013      	str	r3, [r2, #0]
            frame_rd_seq = wr; /* потребили все до последнего */
 8015c8e:	4a6a      	ldr	r2, [pc, #424]	@ (8015e38 <vnd_prepare_pair+0x218>)
 8015c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c92:	6013      	str	r3, [r2, #0]
 8015c94:	e005      	b.n	8015ca2 <vnd_prepare_pair+0x82>
        } else {
            seq = rd; frame_rd_seq = rd + 1u;
 8015c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8015c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c9c:	3301      	adds	r3, #1
 8015c9e:	4a66      	ldr	r2, [pc, #408]	@ (8015e38 <vnd_prepare_pair+0x218>)
 8015ca0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8015ca2:	b662      	cpsie	i
}
 8015ca4:	bf00      	nop
        }
        __enable_irq();
        uint32_t index = (uint32_t)(seq & (FIFO_FRAMES - 1u));
 8015ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015ca8:	f003 0307 	and.w	r3, r3, #7
 8015cac:	627b      	str	r3, [r7, #36]	@ 0x24
        ch1 = adc1_buffers[index];
 8015cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cb0:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8015cb4:	fb02 f303 	mul.w	r3, r2, r3
 8015cb8:	4a61      	ldr	r2, [pc, #388]	@ (8015e40 <vnd_prepare_pair+0x220>)
 8015cba:	4413      	add	r3, r2
 8015cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ch2 = adc2_buffers[index];
 8015cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cc0:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8015cc4:	fb02 f303 	mul.w	r3, r2, r3
 8015cc8:	4a5e      	ldr	r2, [pc, #376]	@ (8015e44 <vnd_prepare_pair+0x224>)
 8015cca:	4413      	add	r3, r2
 8015ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
        /* ИСПРАВЛЕНИЕ: использовать глобальный getter вместо внутреннего debug поля,
           чтобы получить актуальное значение samples после смены профиля */
        samples = adc_stream_get_active_samples();
 8015cce:	f7ea fbd9 	bl	8000484 <adc_stream_get_active_samples>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }
    if(samples == 0){
 8015cd6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	f000 814e 	beq.w	8015f7a <vnd_prepare_pair+0x35a>
        /* Нет новых данных от АЦП — ничего не отправляем */
        return;
    }
    /* Применяем усечение до блокировки формата */
    uint16_t effective = samples;
 8015cde:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015ce0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    /* Применим явный лимит от хоста (samples_per_frame) если задан */
    if(vnd_frame_samples_req && vnd_frame_samples_req < effective) effective = vnd_frame_samples_req;
 8015ce4:	4b58      	ldr	r3, [pc, #352]	@ (8015e48 <vnd_prepare_pair+0x228>)
 8015ce6:	881b      	ldrh	r3, [r3, #0]
 8015ce8:	b29b      	uxth	r3, r3
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d00a      	beq.n	8015d04 <vnd_prepare_pair+0xe4>
 8015cee:	4b56      	ldr	r3, [pc, #344]	@ (8015e48 <vnd_prepare_pair+0x228>)
 8015cf0:	881b      	ldrh	r3, [r3, #0]
 8015cf2:	b29b      	uxth	r3, r3
 8015cf4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	d903      	bls.n	8015d04 <vnd_prepare_pair+0xe4>
 8015cfc:	4b52      	ldr	r3, [pc, #328]	@ (8015e48 <vnd_prepare_pair+0x228>)
 8015cfe:	881b      	ldrh	r3, [r3, #0]
 8015d00:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    if(vnd_trunc_samples && vnd_trunc_samples < effective) effective = vnd_trunc_samples;
 8015d04:	4b51      	ldr	r3, [pc, #324]	@ (8015e4c <vnd_prepare_pair+0x22c>)
 8015d06:	881b      	ldrh	r3, [r3, #0]
 8015d08:	b29b      	uxth	r3, r3
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d00a      	beq.n	8015d24 <vnd_prepare_pair+0x104>
 8015d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8015e4c <vnd_prepare_pair+0x22c>)
 8015d10:	881b      	ldrh	r3, [r3, #0]
 8015d12:	b29b      	uxth	r3, r3
 8015d14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015d18:	429a      	cmp	r2, r3
 8015d1a:	d903      	bls.n	8015d24 <vnd_prepare_pair+0x104>
 8015d1c:	4b4b      	ldr	r3, [pc, #300]	@ (8015e4c <vnd_prepare_pair+0x22c>)
 8015d1e:	881b      	ldrh	r3, [r3, #0]
 8015d20:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    if(cur_samples_per_frame == 0){
 8015d24:	4b4a      	ldr	r3, [pc, #296]	@ (8015e50 <vnd_prepare_pair+0x230>)
 8015d26:	881b      	ldrh	r3, [r3, #0]
 8015d28:	b29b      	uxth	r3, r3
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d123      	bne.n	8015d76 <vnd_prepare_pair+0x156>
        if(effective > VND_MAX_SAMPLES) effective = VND_MAX_SAMPLES;
 8015d2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015d32:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8015d36:	d903      	bls.n	8015d40 <vnd_prepare_pair+0x120>
 8015d38:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 8015d3c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        cur_samples_per_frame = effective;
 8015d40:	4a43      	ldr	r2, [pc, #268]	@ (8015e50 <vnd_prepare_pair+0x230>)
 8015d42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015d46:	8013      	strh	r3, [r2, #0]
        cur_expected_frame_size = (uint16_t)(VND_FRAME_HDR_SIZE + (uint32_t)cur_samples_per_frame * 2u);
 8015d48:	4b41      	ldr	r3, [pc, #260]	@ (8015e50 <vnd_prepare_pair+0x230>)
 8015d4a:	881b      	ldrh	r3, [r3, #0]
 8015d4c:	b29b      	uxth	r3, r3
 8015d4e:	3310      	adds	r3, #16
 8015d50:	b29b      	uxth	r3, r3
 8015d52:	005b      	lsls	r3, r3, #1
 8015d54:	b29a      	uxth	r2, r3
 8015d56:	4b3f      	ldr	r3, [pc, #252]	@ (8015e54 <vnd_prepare_pair+0x234>)
 8015d58:	801a      	strh	r2, [r3, #0]
        VND_LOG("SIZE_LOCK %u (raw=%u trunc=%u)", cur_samples_per_frame, samples, vnd_trunc_samples);
 8015d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8015e50 <vnd_prepare_pair+0x230>)
 8015d5c:	881b      	ldrh	r3, [r3, #0]
 8015d5e:	b29b      	uxth	r3, r3
 8015d60:	4619      	mov	r1, r3
 8015d62:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015d64:	4b39      	ldr	r3, [pc, #228]	@ (8015e4c <vnd_prepare_pair+0x22c>)
 8015d66:	881b      	ldrh	r3, [r3, #0]
 8015d68:	b29b      	uxth	r3, r3
 8015d6a:	483b      	ldr	r0, [pc, #236]	@ (8015e58 <vnd_prepare_pair+0x238>)
 8015d6c:	f004 fe18 	bl	801a9a0 <iprintf>
 8015d70:	482f      	ldr	r0, [pc, #188]	@ (8015e30 <vnd_prepare_pair+0x210>)
 8015d72:	f004 fe7d 	bl	801aa70 <puts>
    /* Не меняем stream_seq здесь: seq инкрементируется только после завершения кадра B (TxCplt) */
    }
    if(effective != cur_samples_per_frame){
 8015d76:	4b36      	ldr	r3, [pc, #216]	@ (8015e50 <vnd_prepare_pair+0x230>)
 8015d78:	881b      	ldrh	r3, [r3, #0]
 8015d7a:	b29b      	uxth	r3, r3
 8015d7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d012      	beq.n	8015daa <vnd_prepare_pair+0x18a>
        VND_LOG("SIZE_MISMATCH: eff=%u cur=%u raw=%u", effective, cur_samples_per_frame, samples);
 8015d84:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 8015d88:	4b31      	ldr	r3, [pc, #196]	@ (8015e50 <vnd_prepare_pair+0x230>)
 8015d8a:	881b      	ldrh	r3, [r3, #0]
 8015d8c:	b29b      	uxth	r3, r3
 8015d8e:	461a      	mov	r2, r3
 8015d90:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015d92:	4832      	ldr	r0, [pc, #200]	@ (8015e5c <vnd_prepare_pair+0x23c>)
 8015d94:	f004 fe04 	bl	801a9a0 <iprintf>
 8015d98:	4825      	ldr	r0, [pc, #148]	@ (8015e30 <vnd_prepare_pair+0x210>)
 8015d9a:	f004 fe69 	bl	801aa70 <puts>
        dbg_partial_frame_abort++;
 8015d9e:	4b30      	ldr	r3, [pc, #192]	@ (8015e60 <vnd_prepare_pair+0x240>)
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	3301      	adds	r3, #1
 8015da4:	4a2e      	ldr	r2, [pc, #184]	@ (8015e60 <vnd_prepare_pair+0x240>)
 8015da6:	6013      	str	r3, [r2, #0]
        return;
 8015da8:	e0ea      	b.n	8015f80 <vnd_prepare_pair+0x360>
    }
    ChanFrame *f0 = &g_frames[pair_fill_idx][0];
 8015daa:	4b1f      	ldr	r3, [pc, #124]	@ (8015e28 <vnd_prepare_pair+0x208>)
 8015dac:	781b      	ldrb	r3, [r3, #0]
 8015dae:	461a      	mov	r2, r3
 8015db0:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015db4:	fb02 f303 	mul.w	r3, r2, r3
 8015db8:	4a2a      	ldr	r2, [pc, #168]	@ (8015e64 <vnd_prepare_pair+0x244>)
 8015dba:	4413      	add	r3, r2
 8015dbc:	623b      	str	r3, [r7, #32]
    ChanFrame *f1 = &g_frames[pair_fill_idx][1];
 8015dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8015e28 <vnd_prepare_pair+0x208>)
 8015dc0:	781b      	ldrb	r3, [r3, #0]
 8015dc2:	461a      	mov	r2, r3
 8015dc4:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015dc8:	fb02 f303 	mul.w	r3, r2, r3
 8015dcc:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8015dd0:	4a24      	ldr	r2, [pc, #144]	@ (8015e64 <vnd_prepare_pair+0x244>)
 8015dd2:	4413      	add	r3, r2
 8015dd4:	61fb      	str	r3, [r7, #28]
    if(f0->st != FB_FILL || f1->st != FB_FILL) return;
 8015dd6:	6a3b      	ldr	r3, [r7, #32]
 8015dd8:	781b      	ldrb	r3, [r3, #0]
 8015dda:	b2db      	uxtb	r3, r3
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	f040 80ce 	bne.w	8015f7e <vnd_prepare_pair+0x35e>
 8015de2:	69fb      	ldr	r3, [r7, #28]
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	b2db      	uxtb	r3, r3
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	f040 80c8 	bne.w	8015f7e <vnd_prepare_pair+0x35e>
    memset(f0->buf, 0, sizeof(f0->buf)); memset(f1->buf, 0, sizeof(f1->buf));
 8015dee:	6a3b      	ldr	r3, [r7, #32]
 8015df0:	330c      	adds	r3, #12
 8015df2:	f44f 622c 	mov.w	r2, #2752	@ 0xac0
 8015df6:	2100      	movs	r1, #0
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f005 f83d 	bl	801ae78 <memset>
 8015dfe:	69fb      	ldr	r3, [r7, #28]
 8015e00:	330c      	adds	r3, #12
 8015e02:	f44f 622c 	mov.w	r2, #2752	@ 0xac0
 8015e06:	2100      	movs	r1, #0
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f005 f835 	bl	801ae78 <memset>
    uint32_t pair_timestamp = HAL_GetTick();
 8015e0e:	f7ee fca3 	bl	8004758 <HAL_GetTick>
 8015e12:	61b8      	str	r0, [r7, #24]
    /* подробный лог пары убран для снижения нагрузки */
    /* Применяем усечение, если задано и меньше доступного */
    uint16_t use_samples = cur_samples_per_frame; /* уже определено и проверено */
 8015e14:	4b0e      	ldr	r3, [pc, #56]	@ (8015e50 <vnd_prepare_pair+0x230>)
 8015e16:	881b      	ldrh	r3, [r3, #0]
 8015e18:	82fb      	strh	r3, [r7, #22]
    for(uint16_t i = 0; i < use_samples; i++){
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8015e20:	e05d      	b.n	8015ede <vnd_prepare_pair+0x2be>
 8015e22:	bf00      	nop
 8015e24:	2400c694 	.word	0x2400c694
 8015e28:	24018a30 	.word	0x24018a30
 8015e2c:	0801cab8 	.word	0x0801cab8
 8015e30:	0801c9c8 	.word	0x0801c9c8
 8015e34:	2400ad00 	.word	0x2400ad00
 8015e38:	2400ad04 	.word	0x2400ad04
 8015e3c:	2400c6a0 	.word	0x2400c6a0
 8015e40:	24000300 	.word	0x24000300
 8015e44:	24005800 	.word	0x24005800
 8015e48:	2400c672 	.word	0x2400c672
 8015e4c:	2400c670 	.word	0x2400c670
 8015e50:	2400c5e0 	.word	0x2400c5e0
 8015e54:	2400c5e2 	.word	0x2400c5e2
 8015e58:	0801cae0 	.word	0x0801cae0
 8015e5c:	0801cb08 	.word	0x0801cb08
 8015e60:	2400c5fc 	.word	0x2400c5fc
 8015e64:	2400dd70 	.word	0x2400dd70
        uint16_t a = ch1[i]; uint16_t b = ch2[i];
 8015e68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015e6c:	005b      	lsls	r3, r3, #1
 8015e6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015e70:	4413      	add	r3, r2
 8015e72:	881b      	ldrh	r3, [r3, #0]
 8015e74:	817b      	strh	r3, [r7, #10]
 8015e76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015e7a:	005b      	lsls	r3, r3, #1
 8015e7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015e7e:	4413      	add	r3, r2
 8015e80:	881b      	ldrh	r3, [r3, #0]
 8015e82:	813b      	strh	r3, [r7, #8]
        uint8_t *p0 = f0->buf + VND_FRAME_HDR_SIZE + 2 * i; p0[0] = (uint8_t)(a & 0xFF); p0[1] = (uint8_t)(a >> 8);
 8015e84:	6a3b      	ldr	r3, [r7, #32]
 8015e86:	f103 020c 	add.w	r2, r3, #12
 8015e8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015e8e:	005b      	lsls	r3, r3, #1
 8015e90:	3320      	adds	r3, #32
 8015e92:	4413      	add	r3, r2
 8015e94:	607b      	str	r3, [r7, #4]
 8015e96:	897b      	ldrh	r3, [r7, #10]
 8015e98:	b2da      	uxtb	r2, r3
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	701a      	strb	r2, [r3, #0]
 8015e9e:	897b      	ldrh	r3, [r7, #10]
 8015ea0:	0a1b      	lsrs	r3, r3, #8
 8015ea2:	b29a      	uxth	r2, r3
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	b2d2      	uxtb	r2, r2
 8015eaa:	701a      	strb	r2, [r3, #0]
        uint8_t *p1 = f1->buf + VND_FRAME_HDR_SIZE + 2 * i; p1[0] = (uint8_t)(b & 0xFF); p1[1] = (uint8_t)(b >> 8);
 8015eac:	69fb      	ldr	r3, [r7, #28]
 8015eae:	f103 020c 	add.w	r2, r3, #12
 8015eb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015eb6:	005b      	lsls	r3, r3, #1
 8015eb8:	3320      	adds	r3, #32
 8015eba:	4413      	add	r3, r2
 8015ebc:	603b      	str	r3, [r7, #0]
 8015ebe:	893b      	ldrh	r3, [r7, #8]
 8015ec0:	b2da      	uxtb	r2, r3
 8015ec2:	683b      	ldr	r3, [r7, #0]
 8015ec4:	701a      	strb	r2, [r3, #0]
 8015ec6:	893b      	ldrh	r3, [r7, #8]
 8015ec8:	0a1b      	lsrs	r3, r3, #8
 8015eca:	b29a      	uxth	r2, r3
 8015ecc:	683b      	ldr	r3, [r7, #0]
 8015ece:	3301      	adds	r3, #1
 8015ed0:	b2d2      	uxtb	r2, r2
 8015ed2:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < use_samples; i++){
 8015ed4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015ed8:	3301      	adds	r3, #1
 8015eda:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8015ede:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8015ee2:	8afb      	ldrh	r3, [r7, #22]
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d3bf      	bcc.n	8015e68 <vnd_prepare_pair+0x248>
    }
    f0->samples = f1->samples = use_samples; 
 8015ee8:	69fb      	ldr	r3, [r7, #28]
 8015eea:	8afa      	ldrh	r2, [r7, #22]
 8015eec:	805a      	strh	r2, [r3, #2]
 8015eee:	69fb      	ldr	r3, [r7, #28]
 8015ef0:	885a      	ldrh	r2, [r3, #2]
 8015ef2:	6a3b      	ldr	r3, [r7, #32]
 8015ef4:	805a      	strh	r2, [r3, #2]
    /* Incrementing seq counter для каждой пары */
    static volatile uint32_t real_pair_seq = 1;  /* Начинаем с 1, чтобы избежать путаницы с инициализацией (=0) */
    f0->seq = f1->seq = real_pair_seq++;
 8015ef6:	4b24      	ldr	r3, [pc, #144]	@ (8015f88 <vnd_prepare_pair+0x368>)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	1c5a      	adds	r2, r3, #1
 8015efc:	4922      	ldr	r1, [pc, #136]	@ (8015f88 <vnd_prepare_pair+0x368>)
 8015efe:	600a      	str	r2, [r1, #0]
 8015f00:	69fa      	ldr	r2, [r7, #28]
 8015f02:	6093      	str	r3, [r2, #8]
 8015f04:	69fb      	ldr	r3, [r7, #28]
 8015f06:	689a      	ldr	r2, [r3, #8]
 8015f08:	6a3b      	ldr	r3, [r7, #32]
 8015f0a:	609a      	str	r2, [r3, #8]
    vnd_frame_hdr_t *h0 = (vnd_frame_hdr_t*)f0->buf; h0->timestamp = pair_timestamp;
 8015f0c:	6a3b      	ldr	r3, [r7, #32]
 8015f0e:	330c      	adds	r3, #12
 8015f10:	613b      	str	r3, [r7, #16]
 8015f12:	693b      	ldr	r3, [r7, #16]
 8015f14:	69ba      	ldr	r2, [r7, #24]
 8015f16:	609a      	str	r2, [r3, #8]
    vnd_frame_hdr_t *h1 = (vnd_frame_hdr_t*)f1->buf; h1->timestamp = pair_timestamp;
 8015f18:	69fb      	ldr	r3, [r7, #28]
 8015f1a:	330c      	adds	r3, #12
 8015f1c:	60fb      	str	r3, [r7, #12]
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	69ba      	ldr	r2, [r7, #24]
 8015f22:	609a      	str	r2, [r3, #8]
    vnd_build_frame(f0); vnd_build_frame(f1);
 8015f24:	6a38      	ldr	r0, [r7, #32]
 8015f26:	f000 f83b 	bl	8015fa0 <vnd_build_frame>
 8015f2a:	69f8      	ldr	r0, [r7, #28]
 8015f2c:	f000 f838 	bl	8015fa0 <vnd_build_frame>
    if(f0->st == FB_FILL || f1->st == FB_FILL){ dbg_partial_frame_abort++; VND_LOG("build failed"); return; }
 8015f30:	6a3b      	ldr	r3, [r7, #32]
 8015f32:	781b      	ldrb	r3, [r3, #0]
 8015f34:	b2db      	uxtb	r3, r3
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d004      	beq.n	8015f44 <vnd_prepare_pair+0x324>
 8015f3a:	69fb      	ldr	r3, [r7, #28]
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	b2db      	uxtb	r3, r3
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d10b      	bne.n	8015f5c <vnd_prepare_pair+0x33c>
 8015f44:	4b11      	ldr	r3, [pc, #68]	@ (8015f8c <vnd_prepare_pair+0x36c>)
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	3301      	adds	r3, #1
 8015f4a:	4a10      	ldr	r2, [pc, #64]	@ (8015f8c <vnd_prepare_pair+0x36c>)
 8015f4c:	6013      	str	r3, [r2, #0]
 8015f4e:	4810      	ldr	r0, [pc, #64]	@ (8015f90 <vnd_prepare_pair+0x370>)
 8015f50:	f004 fd26 	bl	801a9a0 <iprintf>
 8015f54:	480f      	ldr	r0, [pc, #60]	@ (8015f94 <vnd_prepare_pair+0x374>)
 8015f56:	f004 fd8b 	bl	801aa70 <puts>
 8015f5a:	e011      	b.n	8015f80 <vnd_prepare_pair+0x360>
    /* VND_LOG("Pair prepared, fill_idx=%u", pair_fill_idx); */
    pair_fill_idx = (pair_fill_idx + 1u) % VND_PAIR_BUFFERS;
 8015f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8015f98 <vnd_prepare_pair+0x378>)
 8015f5e:	781b      	ldrb	r3, [r3, #0]
 8015f60:	3301      	adds	r3, #1
 8015f62:	b2db      	uxtb	r3, r3
 8015f64:	f003 0307 	and.w	r3, r3, #7
 8015f68:	b2da      	uxtb	r2, r3
 8015f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8015f98 <vnd_prepare_pair+0x378>)
 8015f6c:	701a      	strb	r2, [r3, #0]
    dbg_prepare_ok++;
 8015f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8015f9c <vnd_prepare_pair+0x37c>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	3301      	adds	r3, #1
 8015f74:	4a09      	ldr	r2, [pc, #36]	@ (8015f9c <vnd_prepare_pair+0x37c>)
 8015f76:	6013      	str	r3, [r2, #0]
 8015f78:	e002      	b.n	8015f80 <vnd_prepare_pair+0x360>
        return;
 8015f7a:	bf00      	nop
 8015f7c:	e000      	b.n	8015f80 <vnd_prepare_pair+0x360>
    if(f0->st != FB_FILL || f1->st != FB_FILL) return;
 8015f7e:	bf00      	nop
}
 8015f80:	3748      	adds	r7, #72	@ 0x48
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}
 8015f86:	bf00      	nop
 8015f88:	24000050 	.word	0x24000050
 8015f8c:	2400c5fc 	.word	0x2400c5fc
 8015f90:	0801cb34 	.word	0x0801cb34
 8015f94:	0801c9c8 	.word	0x0801c9c8
 8015f98:	24018a30 	.word	0x24018a30
 8015f9c:	2400c698 	.word	0x2400c698

08015fa0 <vnd_build_frame>:

static void vnd_build_frame(ChanFrame *cf)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b086      	sub	sp, #24
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
    if(cf->samples == 0){ cf->st = FB_FILL; return; }
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	885b      	ldrh	r3, [r3, #2]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d103      	bne.n	8015fb8 <vnd_build_frame+0x18>
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	701a      	strb	r2, [r3, #0]
 8015fb6:	e07a      	b.n	80160ae <vnd_build_frame+0x10e>
    uint32_t payload_len = (uint32_t)cf->samples * 2u;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	885b      	ldrh	r3, [r3, #2]
 8015fbc:	005b      	lsls	r3, r3, #1
 8015fbe:	617b      	str	r3, [r7, #20]
    uint32_t total = VND_FRAME_HDR_SIZE + payload_len;
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	3320      	adds	r3, #32
 8015fc4:	613b      	str	r3, [r7, #16]
    vnd_frame_hdr_t *h = (vnd_frame_hdr_t*)cf->buf;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	330c      	adds	r3, #12
 8015fca:	60fb      	str	r3, [r7, #12]
    
    h->magic = 0xA55A; h->ver = 0x01; h->flags = (cf->flags & VND_FLAGS_ADC0) ? 0x01 : 0x02; h->seq = cf->seq; h->total_samples = (uint16_t)cf->samples;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	2200      	movs	r2, #0
 8015fd0:	f042 025a 	orr.w	r2, r2, #90	@ 0x5a
 8015fd4:	701a      	strb	r2, [r3, #0]
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	f062 025a 	orn	r2, r2, #90	@ 0x5a
 8015fdc:	705a      	strb	r2, [r3, #1]
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	2201      	movs	r2, #1
 8015fe2:	709a      	strb	r2, [r3, #2]
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	791b      	ldrb	r3, [r3, #4]
 8015fe8:	f003 0301 	and.w	r3, r3, #1
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d001      	beq.n	8015ff4 <vnd_build_frame+0x54>
 8015ff0:	2201      	movs	r2, #1
 8015ff2:	e000      	b.n	8015ff6 <vnd_build_frame+0x56>
 8015ff4:	2202      	movs	r2, #2
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	70da      	strb	r2, [r3, #3]
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	689a      	ldr	r2, [r3, #8]
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	605a      	str	r2, [r3, #4]
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	885a      	ldrh	r2, [r3, #2]
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	819a      	strh	r2, [r3, #12]
    VND_LOG("BUILD_FRAME cf_seq=%lu flags=0x%02X samples=%u", (unsigned long)cf->seq, (unsigned)h->flags, (unsigned)cf->samples);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	6899      	ldr	r1, [r3, #8]
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	78db      	ldrb	r3, [r3, #3]
 8016012:	461a      	mov	r2, r3
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	885b      	ldrh	r3, [r3, #2]
 8016018:	4826      	ldr	r0, [pc, #152]	@ (80160b4 <vnd_build_frame+0x114>)
 801601a:	f004 fcc1 	bl	801a9a0 <iprintf>
 801601e:	4826      	ldr	r0, [pc, #152]	@ (80160b8 <vnd_build_frame+0x118>)
 8016020:	f004 fd26 	bl	801aa70 <puts>
    h->zone_count = 0; h->zone1_offset = 0; h->zone1_length = 0; h->reserved = 0; h->reserved2 = 0; h->crc16 = 0;
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	2200      	movs	r2, #0
 8016028:	739a      	strb	r2, [r3, #14]
 801602a:	2200      	movs	r2, #0
 801602c:	73da      	strb	r2, [r3, #15]
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	2200      	movs	r2, #0
 8016032:	741a      	strb	r2, [r3, #16]
 8016034:	2200      	movs	r2, #0
 8016036:	745a      	strb	r2, [r3, #17]
 8016038:	2200      	movs	r2, #0
 801603a:	749a      	strb	r2, [r3, #18]
 801603c:	2200      	movs	r2, #0
 801603e:	74da      	strb	r2, [r3, #19]
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	2200      	movs	r2, #0
 8016044:	751a      	strb	r2, [r3, #20]
 8016046:	2200      	movs	r2, #0
 8016048:	755a      	strb	r2, [r3, #21]
 801604a:	2200      	movs	r2, #0
 801604c:	759a      	strb	r2, [r3, #22]
 801604e:	2200      	movs	r2, #0
 8016050:	75da      	strb	r2, [r3, #23]
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	2200      	movs	r2, #0
 8016056:	761a      	strb	r2, [r3, #24]
 8016058:	2200      	movs	r2, #0
 801605a:	765a      	strb	r2, [r3, #25]
 801605c:	2200      	movs	r2, #0
 801605e:	769a      	strb	r2, [r3, #26]
 8016060:	2200      	movs	r2, #0
 8016062:	76da      	strb	r2, [r3, #27]
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	2200      	movs	r2, #0
 8016068:	771a      	strb	r2, [r3, #28]
 801606a:	2200      	movs	r2, #0
 801606c:	775a      	strb	r2, [r3, #29]
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	2200      	movs	r2, #0
 8016072:	779a      	strb	r2, [r3, #30]
 8016074:	2200      	movs	r2, #0
 8016076:	77da      	strb	r2, [r3, #31]
    cf->frame_size = (uint16_t)total;
 8016078:	693b      	ldr	r3, [r7, #16]
 801607a:	b29a      	uxth	r2, r3
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	80da      	strh	r2, [r3, #6]
    if(cur_expected_frame_size && cf->frame_size != cur_expected_frame_size) dbg_size_mismatch++;
 8016080:	4b0e      	ldr	r3, [pc, #56]	@ (80160bc <vnd_build_frame+0x11c>)
 8016082:	881b      	ldrh	r3, [r3, #0]
 8016084:	b29b      	uxth	r3, r3
 8016086:	2b00      	cmp	r3, #0
 8016088:	d00b      	beq.n	80160a2 <vnd_build_frame+0x102>
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	88da      	ldrh	r2, [r3, #6]
 801608e:	4b0b      	ldr	r3, [pc, #44]	@ (80160bc <vnd_build_frame+0x11c>)
 8016090:	881b      	ldrh	r3, [r3, #0]
 8016092:	b29b      	uxth	r3, r3
 8016094:	429a      	cmp	r2, r3
 8016096:	d004      	beq.n	80160a2 <vnd_build_frame+0x102>
 8016098:	4b09      	ldr	r3, [pc, #36]	@ (80160c0 <vnd_build_frame+0x120>)
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	3301      	adds	r3, #1
 801609e:	4a08      	ldr	r2, [pc, #32]	@ (80160c0 <vnd_build_frame+0x120>)
 80160a0:	6013      	str	r3, [r2, #0]
    dbg_any_valid_frame = 1; cf->st = FB_READY;
 80160a2:	4b08      	ldr	r3, [pc, #32]	@ (80160c4 <vnd_build_frame+0x124>)
 80160a4:	2201      	movs	r2, #1
 80160a6:	701a      	strb	r2, [r3, #0]
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	2201      	movs	r2, #1
 80160ac:	701a      	strb	r2, [r3, #0]
}
 80160ae:	3718      	adds	r7, #24
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bd80      	pop	{r7, pc}
 80160b4:	0801cb48 	.word	0x0801cb48
 80160b8:	0801c9c8 	.word	0x0801c9c8
 80160bc:	2400c5e2 	.word	0x2400c5e2
 80160c0:	2400c600 	.word	0x2400c600
 80160c4:	2400c64d 	.word	0x2400c64d

080160c8 <vnd_validate_frame>:
/* allow_zero_samples используется как флаги:
 *  bit0 (1): разрешить total_samples==0
 *  bit1 (2): разрешить длину >= ожидаемой и кратную 64 (для паддинга до MPS)
 */
static int vnd_validate_frame(const uint8_t *buf, uint16_t len, uint8_t expect_test, uint8_t allow_flags)
{
 80160c8:	b480      	push	{r7}
 80160ca:	b085      	sub	sp, #20
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
 80160d0:	4608      	mov	r0, r1
 80160d2:	4611      	mov	r1, r2
 80160d4:	461a      	mov	r2, r3
 80160d6:	4603      	mov	r3, r0
 80160d8:	807b      	strh	r3, [r7, #2]
 80160da:	460b      	mov	r3, r1
 80160dc:	707b      	strb	r3, [r7, #1]
 80160de:	4613      	mov	r3, r2
 80160e0:	703b      	strb	r3, [r7, #0]
    (void)expect_test;
    if (!buf || len < VND_FRAME_HDR_SIZE)
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d002      	beq.n	80160ee <vnd_validate_frame+0x26>
 80160e8:	887b      	ldrh	r3, [r7, #2]
 80160ea:	2b1f      	cmp	r3, #31
 80160ec:	d801      	bhi.n	80160f2 <vnd_validate_frame+0x2a>
        return 0;
 80160ee:	2300      	movs	r3, #0
 80160f0:	e03f      	b.n	8016172 <vnd_validate_frame+0xaa>
    const vnd_frame_hdr_t *h = (const vnd_frame_hdr_t*)buf;
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	60fb      	str	r3, [r7, #12]
    if (h->magic != 0xA55A)
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	881b      	ldrh	r3, [r3, #0]
 80160fa:	b29b      	uxth	r3, r3
 80160fc:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016100:	4293      	cmp	r3, r2
 8016102:	d001      	beq.n	8016108 <vnd_validate_frame+0x40>
        return 0;
 8016104:	2300      	movs	r3, #0
 8016106:	e034      	b.n	8016172 <vnd_validate_frame+0xaa>
    if (h->total_samples > VND_MAX_SAMPLES)
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	899b      	ldrh	r3, [r3, #12]
 801610c:	b29b      	uxth	r3, r3
 801610e:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8016112:	d901      	bls.n	8016118 <vnd_validate_frame+0x50>
        return 0;
 8016114:	2300      	movs	r3, #0
 8016116:	e02c      	b.n	8016172 <vnd_validate_frame+0xaa>
    if (!(allow_flags & 0x01) && h->total_samples == 0)
 8016118:	783b      	ldrb	r3, [r7, #0]
 801611a:	f003 0301 	and.w	r3, r3, #1
 801611e:	2b00      	cmp	r3, #0
 8016120:	d106      	bne.n	8016130 <vnd_validate_frame+0x68>
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	899b      	ldrh	r3, [r3, #12]
 8016126:	b29b      	uxth	r3, r3
 8016128:	2b00      	cmp	r3, #0
 801612a:	d101      	bne.n	8016130 <vnd_validate_frame+0x68>
        return 0;
 801612c:	2300      	movs	r3, #0
 801612e:	e020      	b.n	8016172 <vnd_validate_frame+0xaa>
    {
        uint16_t expected = (uint16_t)(VND_FRAME_HDR_SIZE + h->total_samples * 2u);
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	899b      	ldrh	r3, [r3, #12]
 8016134:	b29b      	uxth	r3, r3
 8016136:	3310      	adds	r3, #16
 8016138:	b29b      	uxth	r3, r3
 801613a:	005b      	lsls	r3, r3, #1
 801613c:	817b      	strh	r3, [r7, #10]
        if (len != expected) {
 801613e:	887a      	ldrh	r2, [r7, #2]
 8016140:	897b      	ldrh	r3, [r7, #10]
 8016142:	429a      	cmp	r2, r3
 8016144:	d014      	beq.n	8016170 <vnd_validate_frame+0xa8>
            /* Разрешаем «припадиненные» кадры: длина >= expected и кратна 64 байтам (FS/HS совместимо) */
            if ((allow_flags & 0x02) == 0) return 0;
 8016146:	783b      	ldrb	r3, [r7, #0]
 8016148:	f003 0302 	and.w	r3, r3, #2
 801614c:	2b00      	cmp	r3, #0
 801614e:	d101      	bne.n	8016154 <vnd_validate_frame+0x8c>
 8016150:	2300      	movs	r3, #0
 8016152:	e00e      	b.n	8016172 <vnd_validate_frame+0xaa>
            if (len < expected) return 0;
 8016154:	887a      	ldrh	r2, [r7, #2]
 8016156:	897b      	ldrh	r3, [r7, #10]
 8016158:	429a      	cmp	r2, r3
 801615a:	d201      	bcs.n	8016160 <vnd_validate_frame+0x98>
 801615c:	2300      	movs	r3, #0
 801615e:	e008      	b.n	8016172 <vnd_validate_frame+0xaa>
            if ((len % 64u) != 0u) return 0;
 8016160:	887b      	ldrh	r3, [r7, #2]
 8016162:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016166:	b29b      	uxth	r3, r3
 8016168:	2b00      	cmp	r3, #0
 801616a:	d001      	beq.n	8016170 <vnd_validate_frame+0xa8>
 801616c:	2300      	movs	r3, #0
 801616e:	e000      	b.n	8016172 <vnd_validate_frame+0xaa>
        }
    }
    return 1;
 8016170:	2301      	movs	r3, #1
}
 8016172:	4618      	mov	r0, r3
 8016174:	3714      	adds	r7, #20
 8016176:	46bd      	mov	sp, r7
 8016178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617c:	4770      	bx	lr
	...

08016180 <vnd_transmit_frame>:

static USBD_StatusTypeDef __attribute__((unused)) vnd_transmit_frame(uint8_t *buf, uint16_t len, uint8_t is_test, uint8_t allow_zero_samples, const char *tag)
{
 8016180:	b590      	push	{r4, r7, lr}
 8016182:	b08d      	sub	sp, #52	@ 0x34
 8016184:	af02      	add	r7, sp, #8
 8016186:	6078      	str	r0, [r7, #4]
 8016188:	4608      	mov	r0, r1
 801618a:	4611      	mov	r1, r2
 801618c:	461a      	mov	r2, r3
 801618e:	4603      	mov	r3, r0
 8016190:	807b      	strh	r3, [r7, #2]
 8016192:	460b      	mov	r3, r1
 8016194:	707b      	strb	r3, [r7, #1]
 8016196:	4613      	mov	r3, r2
 8016198:	703b      	strb	r3, [r7, #0]
    (void)is_test; dbg_tx_attempt++;
 801619a:	4b9c      	ldr	r3, [pc, #624]	@ (801640c <vnd_transmit_frame+0x28c>)
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	3301      	adds	r3, #1
 80161a0:	4a9a      	ldr	r2, [pc, #616]	@ (801640c <vnd_transmit_frame+0x28c>)
 80161a2:	6013      	str	r3, [r2, #0]
    if(!vnd_validate_frame(buf, len, is_test, allow_zero_samples)){ dbg_tx_reject++; vnd_error_counter++; if(vnd_last_error == 0) vnd_last_error = 3; VND_LOG("TX_REJECT %s", tag ? tag : "?"); return USBD_FAIL; }
 80161a4:	783b      	ldrb	r3, [r7, #0]
 80161a6:	787a      	ldrb	r2, [r7, #1]
 80161a8:	8879      	ldrh	r1, [r7, #2]
 80161aa:	6878      	ldr	r0, [r7, #4]
 80161ac:	f7ff ff8c 	bl	80160c8 <vnd_validate_frame>
 80161b0:	4603      	mov	r3, r0
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d11f      	bne.n	80161f6 <vnd_transmit_frame+0x76>
 80161b6:	4b96      	ldr	r3, [pc, #600]	@ (8016410 <vnd_transmit_frame+0x290>)
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	3301      	adds	r3, #1
 80161bc:	4a94      	ldr	r2, [pc, #592]	@ (8016410 <vnd_transmit_frame+0x290>)
 80161be:	6013      	str	r3, [r2, #0]
 80161c0:	4b94      	ldr	r3, [pc, #592]	@ (8016414 <vnd_transmit_frame+0x294>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	3301      	adds	r3, #1
 80161c6:	4a93      	ldr	r2, [pc, #588]	@ (8016414 <vnd_transmit_frame+0x294>)
 80161c8:	6013      	str	r3, [r2, #0]
 80161ca:	4b93      	ldr	r3, [pc, #588]	@ (8016418 <vnd_transmit_frame+0x298>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d102      	bne.n	80161d8 <vnd_transmit_frame+0x58>
 80161d2:	4b91      	ldr	r3, [pc, #580]	@ (8016418 <vnd_transmit_frame+0x298>)
 80161d4:	2203      	movs	r2, #3
 80161d6:	601a      	str	r2, [r3, #0]
 80161d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d001      	beq.n	80161e2 <vnd_transmit_frame+0x62>
 80161de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161e0:	e000      	b.n	80161e4 <vnd_transmit_frame+0x64>
 80161e2:	4b8e      	ldr	r3, [pc, #568]	@ (801641c <vnd_transmit_frame+0x29c>)
 80161e4:	4619      	mov	r1, r3
 80161e6:	488e      	ldr	r0, [pc, #568]	@ (8016420 <vnd_transmit_frame+0x2a0>)
 80161e8:	f004 fbda 	bl	801a9a0 <iprintf>
 80161ec:	488d      	ldr	r0, [pc, #564]	@ (8016424 <vnd_transmit_frame+0x2a4>)
 80161ee:	f004 fc3f 	bl	801aa70 <puts>
 80161f2:	2303      	movs	r3, #3
 80161f4:	e147      	b.n	8016486 <vnd_transmit_frame+0x306>
    if(!vnd_tx_ready || vnd_ep_busy || vnd_inflight){ vnd_error_counter++; VND_LOG("TX_SKIP busy/inflight tag=%s", tag ? tag : "?"); return USBD_BUSY; }
 80161f6:	4b8c      	ldr	r3, [pc, #560]	@ (8016428 <vnd_transmit_frame+0x2a8>)
 80161f8:	781b      	ldrb	r3, [r3, #0]
 80161fa:	b2db      	uxtb	r3, r3
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d009      	beq.n	8016214 <vnd_transmit_frame+0x94>
 8016200:	4b8a      	ldr	r3, [pc, #552]	@ (801642c <vnd_transmit_frame+0x2ac>)
 8016202:	781b      	ldrb	r3, [r3, #0]
 8016204:	b2db      	uxtb	r3, r3
 8016206:	2b00      	cmp	r3, #0
 8016208:	d104      	bne.n	8016214 <vnd_transmit_frame+0x94>
 801620a:	4b89      	ldr	r3, [pc, #548]	@ (8016430 <vnd_transmit_frame+0x2b0>)
 801620c:	781b      	ldrb	r3, [r3, #0]
 801620e:	b2db      	uxtb	r3, r3
 8016210:	2b00      	cmp	r3, #0
 8016212:	d013      	beq.n	801623c <vnd_transmit_frame+0xbc>
 8016214:	4b7f      	ldr	r3, [pc, #508]	@ (8016414 <vnd_transmit_frame+0x294>)
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	3301      	adds	r3, #1
 801621a:	4a7e      	ldr	r2, [pc, #504]	@ (8016414 <vnd_transmit_frame+0x294>)
 801621c:	6013      	str	r3, [r2, #0]
 801621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016220:	2b00      	cmp	r3, #0
 8016222:	d001      	beq.n	8016228 <vnd_transmit_frame+0xa8>
 8016224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016226:	e000      	b.n	801622a <vnd_transmit_frame+0xaa>
 8016228:	4b7c      	ldr	r3, [pc, #496]	@ (801641c <vnd_transmit_frame+0x29c>)
 801622a:	4619      	mov	r1, r3
 801622c:	4881      	ldr	r0, [pc, #516]	@ (8016434 <vnd_transmit_frame+0x2b4>)
 801622e:	f004 fbb7 	bl	801a9a0 <iprintf>
 8016232:	487c      	ldr	r0, [pc, #496]	@ (8016424 <vnd_transmit_frame+0x2a4>)
 8016234:	f004 fc1c 	bl	801aa70 <puts>
 8016238:	2301      	movs	r3, #1
 801623a:	e124      	b.n	8016486 <vnd_transmit_frame+0x306>
    vnd_tx_ready = 0; vnd_ep_busy = 1; vnd_inflight = 1; vnd_last_tx_len = len; vnd_last_tx_start_ms = HAL_GetTick();
 801623c:	4b7a      	ldr	r3, [pc, #488]	@ (8016428 <vnd_transmit_frame+0x2a8>)
 801623e:	2200      	movs	r2, #0
 8016240:	701a      	strb	r2, [r3, #0]
 8016242:	4b7a      	ldr	r3, [pc, #488]	@ (801642c <vnd_transmit_frame+0x2ac>)
 8016244:	2201      	movs	r2, #1
 8016246:	701a      	strb	r2, [r3, #0]
 8016248:	4b79      	ldr	r3, [pc, #484]	@ (8016430 <vnd_transmit_frame+0x2b0>)
 801624a:	2201      	movs	r2, #1
 801624c:	701a      	strb	r2, [r3, #0]
 801624e:	4a7a      	ldr	r2, [pc, #488]	@ (8016438 <vnd_transmit_frame+0x2b8>)
 8016250:	887b      	ldrh	r3, [r7, #2]
 8016252:	8013      	strh	r3, [r2, #0]
 8016254:	f7ee fa80 	bl	8004758 <HAL_GetTick>
 8016258:	4603      	mov	r3, r0
 801625a:	4a78      	ldr	r2, [pc, #480]	@ (801643c <vnd_transmit_frame+0x2bc>)
 801625c:	6013      	str	r3, [r2, #0]

    /* Фиксируем метаданные кадра; НЕ переписываем seq перед отправкой.
       Последовательность пар контролируется строго: seq фиксируется при сборке пары,
       а инкремент выполняется только по завершению B (TxCplt). Это исключает случаи,
       когда задержавшийся B получает «будущий» seq. */
    uint8_t is_frame=0, flags=0; uint32_t seq_field=0; int rewrote_seq = 0;
 801625e:	2300      	movs	r3, #0
 8016260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016264:	2300      	movs	r3, #0
 8016266:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801626a:	2300      	movs	r3, #0
 801626c:	623b      	str	r3, [r7, #32]
 801626e:	2300      	movs	r3, #0
 8016270:	61fb      	str	r3, [r7, #28]
    if(len >= VND_FRAME_HDR_SIZE){
 8016272:	887b      	ldrh	r3, [r7, #2]
 8016274:	2b1f      	cmp	r3, #31
 8016276:	d912      	bls.n	801629e <vnd_transmit_frame+0x11e>
        vnd_frame_hdr_t *hh = (vnd_frame_hdr_t*)buf;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	61bb      	str	r3, [r7, #24]
        if(hh->magic == 0xA55A){ is_frame = 1; flags = hh->flags; seq_field = hh->seq; }
 801627c:	69bb      	ldr	r3, [r7, #24]
 801627e:	881b      	ldrh	r3, [r3, #0]
 8016280:	b29b      	uxth	r3, r3
 8016282:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016286:	4293      	cmp	r3, r2
 8016288:	d109      	bne.n	801629e <vnd_transmit_frame+0x11e>
 801628a:	2301      	movs	r3, #1
 801628c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016290:	69bb      	ldr	r3, [r7, #24]
 8016292:	78db      	ldrb	r3, [r3, #3]
 8016294:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016298:	69bb      	ldr	r3, [r7, #24]
 801629a:	685b      	ldr	r3, [r3, #4]
 801629c:	623b      	str	r3, [r7, #32]
    }

    /* Зафиксируем точный тип текущего кадра в полёте */
    if(len >= VND_FRAME_HDR_SIZE){ const vnd_frame_hdr_t *hh = (const vnd_frame_hdr_t*)buf; if(hh->magic==0xA55A){ inflight_is_frame = 1; inflight_flags = hh->flags; inflight_seq = hh->seq; } else { inflight_is_frame = 0; inflight_flags = 0; inflight_seq = 0; } } else { inflight_is_frame = 0; inflight_flags = 0; inflight_seq = 0; }
 801629e:	887b      	ldrh	r3, [r7, #2]
 80162a0:	2b1f      	cmp	r3, #31
 80162a2:	d91e      	bls.n	80162e2 <vnd_transmit_frame+0x162>
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	617b      	str	r3, [r7, #20]
 80162a8:	697b      	ldr	r3, [r7, #20]
 80162aa:	881b      	ldrh	r3, [r3, #0]
 80162ac:	b29b      	uxth	r3, r3
 80162ae:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80162b2:	4293      	cmp	r3, r2
 80162b4:	d10b      	bne.n	80162ce <vnd_transmit_frame+0x14e>
 80162b6:	4b62      	ldr	r3, [pc, #392]	@ (8016440 <vnd_transmit_frame+0x2c0>)
 80162b8:	2201      	movs	r2, #1
 80162ba:	701a      	strb	r2, [r3, #0]
 80162bc:	697b      	ldr	r3, [r7, #20]
 80162be:	78da      	ldrb	r2, [r3, #3]
 80162c0:	4b60      	ldr	r3, [pc, #384]	@ (8016444 <vnd_transmit_frame+0x2c4>)
 80162c2:	701a      	strb	r2, [r3, #0]
 80162c4:	697b      	ldr	r3, [r7, #20]
 80162c6:	685b      	ldr	r3, [r3, #4]
 80162c8:	4a5f      	ldr	r2, [pc, #380]	@ (8016448 <vnd_transmit_frame+0x2c8>)
 80162ca:	6013      	str	r3, [r2, #0]
 80162cc:	e012      	b.n	80162f4 <vnd_transmit_frame+0x174>
 80162ce:	4b5c      	ldr	r3, [pc, #368]	@ (8016440 <vnd_transmit_frame+0x2c0>)
 80162d0:	2200      	movs	r2, #0
 80162d2:	701a      	strb	r2, [r3, #0]
 80162d4:	4b5b      	ldr	r3, [pc, #364]	@ (8016444 <vnd_transmit_frame+0x2c4>)
 80162d6:	2200      	movs	r2, #0
 80162d8:	701a      	strb	r2, [r3, #0]
 80162da:	4b5b      	ldr	r3, [pc, #364]	@ (8016448 <vnd_transmit_frame+0x2c8>)
 80162dc:	2200      	movs	r2, #0
 80162de:	601a      	str	r2, [r3, #0]
 80162e0:	e008      	b.n	80162f4 <vnd_transmit_frame+0x174>
 80162e2:	4b57      	ldr	r3, [pc, #348]	@ (8016440 <vnd_transmit_frame+0x2c0>)
 80162e4:	2200      	movs	r2, #0
 80162e6:	701a      	strb	r2, [r3, #0]
 80162e8:	4b56      	ldr	r3, [pc, #344]	@ (8016444 <vnd_transmit_frame+0x2c4>)
 80162ea:	2200      	movs	r2, #0
 80162ec:	701a      	strb	r2, [r3, #0]
 80162ee:	4b56      	ldr	r3, [pc, #344]	@ (8016448 <vnd_transmit_frame+0x2c8>)
 80162f0:	2200      	movs	r2, #0
 80162f2:	601a      	str	r2, [r3, #0]
    USBD_StatusTypeDef rc = USBD_VND_Transmit(&hUsbDeviceHS, buf, len);
 80162f4:	887b      	ldrh	r3, [r7, #2]
 80162f6:	461a      	mov	r2, r3
 80162f8:	6879      	ldr	r1, [r7, #4]
 80162fa:	4854      	ldr	r0, [pc, #336]	@ (801644c <vnd_transmit_frame+0x2cc>)
 80162fc:	f002 fed2 	bl	80190a4 <USBD_VND_Transmit>
 8016300:	4603      	mov	r3, r0
 8016302:	74fb      	strb	r3, [r7, #19]
    if(rc == USBD_BUSY){
 8016304:	7cfb      	ldrb	r3, [r7, #19]
 8016306:	2b01      	cmp	r3, #1
 8016308:	d13a      	bne.n	8016380 <vnd_transmit_frame+0x200>
        dbg_resend_blocked++; vnd_error_counter++; if(vnd_last_error == 0) vnd_last_error = 4;
 801630a:	4b51      	ldr	r3, [pc, #324]	@ (8016450 <vnd_transmit_frame+0x2d0>)
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	3301      	adds	r3, #1
 8016310:	4a4f      	ldr	r2, [pc, #316]	@ (8016450 <vnd_transmit_frame+0x2d0>)
 8016312:	6013      	str	r3, [r2, #0]
 8016314:	4b3f      	ldr	r3, [pc, #252]	@ (8016414 <vnd_transmit_frame+0x294>)
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	3301      	adds	r3, #1
 801631a:	4a3e      	ldr	r2, [pc, #248]	@ (8016414 <vnd_transmit_frame+0x294>)
 801631c:	6013      	str	r3, [r2, #0]
 801631e:	4b3e      	ldr	r3, [pc, #248]	@ (8016418 <vnd_transmit_frame+0x298>)
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d102      	bne.n	801632c <vnd_transmit_frame+0x1ac>
 8016326:	4b3c      	ldr	r3, [pc, #240]	@ (8016418 <vnd_transmit_frame+0x298>)
 8016328:	2204      	movs	r2, #4
 801632a:	601a      	str	r2, [r3, #0]
        /* Диагностика LL: получим last rc/len и флаг занятости */
        extern uint8_t USBD_VND_TxIsBusy(void);
        extern uint8_t USBD_VND_LastTxRC(void);
        extern uint16_t USBD_VND_LastTxLen(void);
        uint8_t ll_busy = USBD_VND_TxIsBusy(); uint8_t ll_rc = USBD_VND_LastTxRC(); uint16_t ll_len = USBD_VND_LastTxLen();
 801632c:	f002 ffae 	bl	801928c <USBD_VND_TxIsBusy>
 8016330:	4603      	mov	r3, r0
 8016332:	72fb      	strb	r3, [r7, #11]
 8016334:	f002 ffb6 	bl	80192a4 <USBD_VND_LastTxRC>
 8016338:	4603      	mov	r3, r0
 801633a:	72bb      	strb	r3, [r7, #10]
 801633c:	f002 ffbe 	bl	80192bc <USBD_VND_LastTxLen>
 8016340:	4603      	mov	r3, r0
 8016342:	813b      	strh	r3, [r7, #8]
        VND_LOG("TX_BUSY tag=%s len=%u ll_busy=%u last_rc=%u last_len=%u", tag?tag:"?", (unsigned)len, (unsigned)ll_busy, (unsigned)ll_rc, (unsigned)ll_len);
 8016344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016346:	2b00      	cmp	r3, #0
 8016348:	d001      	beq.n	801634e <vnd_transmit_frame+0x1ce>
 801634a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801634c:	e000      	b.n	8016350 <vnd_transmit_frame+0x1d0>
 801634e:	4933      	ldr	r1, [pc, #204]	@ (801641c <vnd_transmit_frame+0x29c>)
 8016350:	8878      	ldrh	r0, [r7, #2]
 8016352:	7afc      	ldrb	r4, [r7, #11]
 8016354:	7abb      	ldrb	r3, [r7, #10]
 8016356:	893a      	ldrh	r2, [r7, #8]
 8016358:	9201      	str	r2, [sp, #4]
 801635a:	9300      	str	r3, [sp, #0]
 801635c:	4623      	mov	r3, r4
 801635e:	4602      	mov	r2, r0
 8016360:	483c      	ldr	r0, [pc, #240]	@ (8016454 <vnd_transmit_frame+0x2d4>)
 8016362:	f004 fb1d 	bl	801a9a0 <iprintf>
 8016366:	482f      	ldr	r0, [pc, #188]	@ (8016424 <vnd_transmit_frame+0x2a4>)
 8016368:	f004 fb82 	bl	801aa70 <puts>
        vnd_tx_ready = 1; vnd_ep_busy = 0; vnd_inflight = 0;
 801636c:	4b2e      	ldr	r3, [pc, #184]	@ (8016428 <vnd_transmit_frame+0x2a8>)
 801636e:	2201      	movs	r2, #1
 8016370:	701a      	strb	r2, [r3, #0]
 8016372:	4b2e      	ldr	r3, [pc, #184]	@ (801642c <vnd_transmit_frame+0x2ac>)
 8016374:	2200      	movs	r2, #0
 8016376:	701a      	strb	r2, [r3, #0]
 8016378:	4b2d      	ldr	r3, [pc, #180]	@ (8016430 <vnd_transmit_frame+0x2b0>)
 801637a:	2200      	movs	r2, #0
 801637c:	701a      	strb	r2, [r3, #0]
 801637e:	e081      	b.n	8016484 <vnd_transmit_frame+0x304>
    }
    else {
        /* Фиксируем метаданные ТОЛЬКО после успешного запуска передачи, иначе не сместим FIFO зря */
        vnd_tx_meta_after(buf, len);
 8016380:	887b      	ldrh	r3, [r7, #2]
 8016382:	4619      	mov	r1, r3
 8016384:	6878      	ldr	r0, [r7, #4]
 8016386:	f7fe ff51 	bl	801522c <vnd_tx_meta_after>
        if(is_frame){
 801638a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801638e:	2b00      	cmp	r3, #0
 8016390:	d036      	beq.n	8016400 <vnd_transmit_frame+0x280>
            const vnd_frame_hdr_t *lh = (const vnd_frame_hdr_t*)buf;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	60fb      	str	r3, [r7, #12]
            if(rewrote_seq){
 8016396:	69fb      	ldr	r3, [r7, #28]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d018      	beq.n	80163ce <vnd_transmit_frame+0x24e>
                VND_LOG("SEND tag=%s hdr.seq=%lu (rewrote) flags=0x%02X cur_stream_seq=%lu len=%u", tag ? tag : "?", (unsigned long)lh->seq, (unsigned)lh->flags, (unsigned long)stream_seq, len);
 801639c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d001      	beq.n	80163a6 <vnd_transmit_frame+0x226>
 80163a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80163a4:	e000      	b.n	80163a8 <vnd_transmit_frame+0x228>
 80163a6:	491d      	ldr	r1, [pc, #116]	@ (801641c <vnd_transmit_frame+0x29c>)
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	6858      	ldr	r0, [r3, #4]
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	78db      	ldrb	r3, [r3, #3]
 80163b0:	461c      	mov	r4, r3
 80163b2:	4b29      	ldr	r3, [pc, #164]	@ (8016458 <vnd_transmit_frame+0x2d8>)
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	887a      	ldrh	r2, [r7, #2]
 80163b8:	9201      	str	r2, [sp, #4]
 80163ba:	9300      	str	r3, [sp, #0]
 80163bc:	4623      	mov	r3, r4
 80163be:	4602      	mov	r2, r0
 80163c0:	4826      	ldr	r0, [pc, #152]	@ (801645c <vnd_transmit_frame+0x2dc>)
 80163c2:	f004 faed 	bl	801a9a0 <iprintf>
 80163c6:	4817      	ldr	r0, [pc, #92]	@ (8016424 <vnd_transmit_frame+0x2a4>)
 80163c8:	f004 fb52 	bl	801aa70 <puts>
 80163cc:	e054      	b.n	8016478 <vnd_transmit_frame+0x2f8>
            } else {
                VND_LOG("SEND tag=%s hdr.seq=%lu flags=0x%02X cur_stream_seq=%lu len=%u", tag ? tag : "?", (unsigned long)lh->seq, (unsigned)lh->flags, (unsigned long)stream_seq, len);
 80163ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d001      	beq.n	80163d8 <vnd_transmit_frame+0x258>
 80163d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80163d6:	e000      	b.n	80163da <vnd_transmit_frame+0x25a>
 80163d8:	4910      	ldr	r1, [pc, #64]	@ (801641c <vnd_transmit_frame+0x29c>)
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	6858      	ldr	r0, [r3, #4]
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	78db      	ldrb	r3, [r3, #3]
 80163e2:	461c      	mov	r4, r3
 80163e4:	4b1c      	ldr	r3, [pc, #112]	@ (8016458 <vnd_transmit_frame+0x2d8>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	887a      	ldrh	r2, [r7, #2]
 80163ea:	9201      	str	r2, [sp, #4]
 80163ec:	9300      	str	r3, [sp, #0]
 80163ee:	4623      	mov	r3, r4
 80163f0:	4602      	mov	r2, r0
 80163f2:	481b      	ldr	r0, [pc, #108]	@ (8016460 <vnd_transmit_frame+0x2e0>)
 80163f4:	f004 fad4 	bl	801a9a0 <iprintf>
 80163f8:	480a      	ldr	r0, [pc, #40]	@ (8016424 <vnd_transmit_frame+0x2a4>)
 80163fa:	f004 fb39 	bl	801aa70 <puts>
 80163fe:	e03b      	b.n	8016478 <vnd_transmit_frame+0x2f8>
            }
        } else {
            VND_LOG("SEND tag=%s (no-hdr) cur_stream_seq=%lu len=%u", tag ? tag : "?", (unsigned long)stream_seq, len);
 8016400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016402:	2b00      	cmp	r3, #0
 8016404:	d02e      	beq.n	8016464 <vnd_transmit_frame+0x2e4>
 8016406:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016408:	e02d      	b.n	8016466 <vnd_transmit_frame+0x2e6>
 801640a:	bf00      	nop
 801640c:	2400c608 	.word	0x2400c608
 8016410:	2400c60c 	.word	0x2400c60c
 8016414:	2400c624 	.word	0x2400c624
 8016418:	2400c5e8 	.word	0x2400c5e8
 801641c:	0801cb80 	.word	0x0801cb80
 8016420:	0801cb84 	.word	0x0801cb84
 8016424:	0801c9c8 	.word	0x0801c9c8
 8016428:	2400003b 	.word	0x2400003b
 801642c:	2400c5ec 	.word	0x2400c5ec
 8016430:	2400c5ed 	.word	0x2400c5ed
 8016434:	0801cb98 	.word	0x0801cb98
 8016438:	2400c650 	.word	0x2400c650
 801643c:	2400c654 	.word	0x2400c654
 8016440:	2400c660 	.word	0x2400c660
 8016444:	2400c661 	.word	0x2400c661
 8016448:	2400c664 	.word	0x2400c664
 801644c:	2400c2fc 	.word	0x2400c2fc
 8016450:	2400c604 	.word	0x2400c604
 8016454:	0801cbbc 	.word	0x0801cbbc
 8016458:	2400c5dc 	.word	0x2400c5dc
 801645c:	0801cbfc 	.word	0x0801cbfc
 8016460:	0801cc4c 	.word	0x0801cc4c
 8016464:	490a      	ldr	r1, [pc, #40]	@ (8016490 <vnd_transmit_frame+0x310>)
 8016466:	4b0b      	ldr	r3, [pc, #44]	@ (8016494 <vnd_transmit_frame+0x314>)
 8016468:	681a      	ldr	r2, [r3, #0]
 801646a:	887b      	ldrh	r3, [r7, #2]
 801646c:	480a      	ldr	r0, [pc, #40]	@ (8016498 <vnd_transmit_frame+0x318>)
 801646e:	f004 fa97 	bl	801a9a0 <iprintf>
 8016472:	480a      	ldr	r0, [pc, #40]	@ (801649c <vnd_transmit_frame+0x31c>)
 8016474:	f004 fafc 	bl	801aa70 <puts>
        }
        /* Дублирование в CDC (работает для кадров ADC0/ADC1 и диагностических) */
        vnd_cdc_duplicate_preview(buf, len, tag);
 8016478:	887b      	ldrh	r3, [r7, #2]
 801647a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801647c:	4619      	mov	r1, r3
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	f7fe fd54 	bl	8014f2c <vnd_cdc_duplicate_preview>
    }
    return rc;
 8016484:	7cfb      	ldrb	r3, [r7, #19]
}
 8016486:	4618      	mov	r0, r3
 8016488:	372c      	adds	r7, #44	@ 0x2c
 801648a:	46bd      	mov	sp, r7
 801648c:	bd90      	pop	{r4, r7, pc}
 801648e:	bf00      	nop
 8016490:	0801cb80 	.word	0x0801cb80
 8016494:	2400c5dc 	.word	0x2400c5dc
 8016498:	0801cc94 	.word	0x0801cc94
 801649c:	0801c9c8 	.word	0x0801c9c8

080164a0 <vnd_diag_prepare_pair>:

/* Упрощённая диагностическая пара A/B: подготовка буферов по текущему cur_samples_per_frame */
static void vnd_diag_prepare_pair(uint32_t seq, uint16_t samples)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b088      	sub	sp, #32
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	460b      	mov	r3, r1
 80164aa:	807b      	strh	r3, [r7, #2]
    if(samples == 0) samples = VND_DEFAULT_TEST_SAMPLES;
 80164ac:	887b      	ldrh	r3, [r7, #2]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d101      	bne.n	80164b6 <vnd_diag_prepare_pair+0x16>
 80164b2:	2350      	movs	r3, #80	@ 0x50
 80164b4:	807b      	strh	r3, [r7, #2]
    if(samples > VND_MAX_SAMPLES) samples = VND_MAX_SAMPLES;
 80164b6:	887b      	ldrh	r3, [r7, #2]
 80164b8:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 80164bc:	d902      	bls.n	80164c4 <vnd_diag_prepare_pair+0x24>
 80164be:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 80164c2:	807b      	strh	r3, [r7, #2]
    uint16_t base_len = (uint16_t)(VND_FRAME_HDR_SIZE + (uint32_t)samples*2u);
 80164c4:	887b      	ldrh	r3, [r7, #2]
 80164c6:	3310      	adds	r3, #16
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	005b      	lsls	r3, r3, #1
 80164cc:	833b      	strh	r3, [r7, #24]
    /* Паддинг до кратности 512 (HS max packet); кратность 64 обеспечивает совместимость и для FS */
    uint16_t pad_unit = 512u;
 80164ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80164d2:	82fb      	strh	r3, [r7, #22]
    uint16_t padded = (uint16_t)(((uint32_t)(base_len + (pad_unit-1u)) / pad_unit) * pad_unit);
 80164d4:	8b3a      	ldrh	r2, [r7, #24]
 80164d6:	8afb      	ldrh	r3, [r7, #22]
 80164d8:	4413      	add	r3, r2
 80164da:	1e5a      	subs	r2, r3, #1
 80164dc:	8afb      	ldrh	r3, [r7, #22]
 80164de:	fbb2 f3f3 	udiv	r3, r2, r3
 80164e2:	b29b      	uxth	r3, r3
 80164e4:	8afa      	ldrh	r2, [r7, #22]
 80164e6:	fb12 f303 	smulbb	r3, r2, r3
 80164ea:	83fb      	strh	r3, [r7, #30]
    if (padded < base_len) padded = base_len; /* защита от переполнения (не ожидается) */
 80164ec:	8bfa      	ldrh	r2, [r7, #30]
 80164ee:	8b3b      	ldrh	r3, [r7, #24]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	d201      	bcs.n	80164f8 <vnd_diag_prepare_pair+0x58>
 80164f4:	8b3b      	ldrh	r3, [r7, #24]
 80164f6:	83fb      	strh	r3, [r7, #30]
    diag_frame_len = padded;
 80164f8:	4a44      	ldr	r2, [pc, #272]	@ (801660c <vnd_diag_prepare_pair+0x16c>)
 80164fa:	8bfb      	ldrh	r3, [r7, #30]
 80164fc:	8013      	strh	r3, [r2, #0]
    /* A */
    memset(diag_a_buf, 0, diag_frame_len);
 80164fe:	4b43      	ldr	r3, [pc, #268]	@ (801660c <vnd_diag_prepare_pair+0x16c>)
 8016500:	881b      	ldrh	r3, [r3, #0]
 8016502:	461a      	mov	r2, r3
 8016504:	2100      	movs	r1, #0
 8016506:	4842      	ldr	r0, [pc, #264]	@ (8016610 <vnd_diag_prepare_pair+0x170>)
 8016508:	f004 fcb6 	bl	801ae78 <memset>
    vnd_frame_hdr_t *ha = (vnd_frame_hdr_t*)diag_a_buf;
 801650c:	4b40      	ldr	r3, [pc, #256]	@ (8016610 <vnd_diag_prepare_pair+0x170>)
 801650e:	613b      	str	r3, [r7, #16]
    ha->magic = 0xA55A; ha->ver = 0x01; ha->flags = 0x01; ha->seq = seq; ha->timestamp = HAL_GetTick(); ha->total_samples = samples;
 8016510:	693b      	ldr	r3, [r7, #16]
 8016512:	2200      	movs	r2, #0
 8016514:	f042 025a 	orr.w	r2, r2, #90	@ 0x5a
 8016518:	701a      	strb	r2, [r3, #0]
 801651a:	2200      	movs	r2, #0
 801651c:	f062 025a 	orn	r2, r2, #90	@ 0x5a
 8016520:	705a      	strb	r2, [r3, #1]
 8016522:	693b      	ldr	r3, [r7, #16]
 8016524:	2201      	movs	r2, #1
 8016526:	709a      	strb	r2, [r3, #2]
 8016528:	693b      	ldr	r3, [r7, #16]
 801652a:	2201      	movs	r2, #1
 801652c:	70da      	strb	r2, [r3, #3]
 801652e:	693b      	ldr	r3, [r7, #16]
 8016530:	687a      	ldr	r2, [r7, #4]
 8016532:	605a      	str	r2, [r3, #4]
 8016534:	f7ee f910 	bl	8004758 <HAL_GetTick>
 8016538:	4602      	mov	r2, r0
 801653a:	693b      	ldr	r3, [r7, #16]
 801653c:	609a      	str	r2, [r3, #8]
 801653e:	693b      	ldr	r3, [r7, #16]
 8016540:	887a      	ldrh	r2, [r7, #2]
 8016542:	819a      	strh	r2, [r3, #12]
    for(uint16_t i=0;i<samples;i++){ uint16_t v=i; diag_a_buf[VND_FRAME_HDR_SIZE+2*i]=(uint8_t)(v & 0xFF); diag_a_buf[VND_FRAME_HDR_SIZE+2*i+1]=(uint8_t)(v>>8); }
 8016544:	2300      	movs	r3, #0
 8016546:	83bb      	strh	r3, [r7, #28]
 8016548:	e014      	b.n	8016574 <vnd_diag_prepare_pair+0xd4>
 801654a:	8bbb      	ldrh	r3, [r7, #28]
 801654c:	813b      	strh	r3, [r7, #8]
 801654e:	8bbb      	ldrh	r3, [r7, #28]
 8016550:	005b      	lsls	r3, r3, #1
 8016552:	3320      	adds	r3, #32
 8016554:	893a      	ldrh	r2, [r7, #8]
 8016556:	b2d1      	uxtb	r1, r2
 8016558:	4a2d      	ldr	r2, [pc, #180]	@ (8016610 <vnd_diag_prepare_pair+0x170>)
 801655a:	54d1      	strb	r1, [r2, r3]
 801655c:	893b      	ldrh	r3, [r7, #8]
 801655e:	0a1b      	lsrs	r3, r3, #8
 8016560:	b29a      	uxth	r2, r3
 8016562:	8bbb      	ldrh	r3, [r7, #28]
 8016564:	005b      	lsls	r3, r3, #1
 8016566:	3321      	adds	r3, #33	@ 0x21
 8016568:	b2d1      	uxtb	r1, r2
 801656a:	4a29      	ldr	r2, [pc, #164]	@ (8016610 <vnd_diag_prepare_pair+0x170>)
 801656c:	54d1      	strb	r1, [r2, r3]
 801656e:	8bbb      	ldrh	r3, [r7, #28]
 8016570:	3301      	adds	r3, #1
 8016572:	83bb      	strh	r3, [r7, #28]
 8016574:	8bba      	ldrh	r2, [r7, #28]
 8016576:	887b      	ldrh	r3, [r7, #2]
 8016578:	429a      	cmp	r2, r3
 801657a:	d3e6      	bcc.n	801654a <vnd_diag_prepare_pair+0xaa>
    /* B */
    memset(diag_b_buf, 0, diag_frame_len);
 801657c:	4b23      	ldr	r3, [pc, #140]	@ (801660c <vnd_diag_prepare_pair+0x16c>)
 801657e:	881b      	ldrh	r3, [r3, #0]
 8016580:	461a      	mov	r2, r3
 8016582:	2100      	movs	r1, #0
 8016584:	4823      	ldr	r0, [pc, #140]	@ (8016614 <vnd_diag_prepare_pair+0x174>)
 8016586:	f004 fc77 	bl	801ae78 <memset>
    vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)diag_b_buf;
 801658a:	4b22      	ldr	r3, [pc, #136]	@ (8016614 <vnd_diag_prepare_pair+0x174>)
 801658c:	60fb      	str	r3, [r7, #12]
    hb->magic = 0xA55A; hb->ver = 0x01; hb->flags = 0x02; hb->seq = seq; hb->timestamp = ha->timestamp; hb->total_samples = samples;
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	2200      	movs	r2, #0
 8016592:	f042 025a 	orr.w	r2, r2, #90	@ 0x5a
 8016596:	701a      	strb	r2, [r3, #0]
 8016598:	2200      	movs	r2, #0
 801659a:	f062 025a 	orn	r2, r2, #90	@ 0x5a
 801659e:	705a      	strb	r2, [r3, #1]
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	2201      	movs	r2, #1
 80165a4:	709a      	strb	r2, [r3, #2]
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	2202      	movs	r2, #2
 80165aa:	70da      	strb	r2, [r3, #3]
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	687a      	ldr	r2, [r7, #4]
 80165b0:	605a      	str	r2, [r3, #4]
 80165b2:	693b      	ldr	r3, [r7, #16]
 80165b4:	689a      	ldr	r2, [r3, #8]
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	609a      	str	r2, [r3, #8]
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	887a      	ldrh	r2, [r7, #2]
 80165be:	819a      	strh	r2, [r3, #12]
    for(uint16_t i=0;i<samples;i++){ uint16_t v=0x0100u+i; diag_b_buf[VND_FRAME_HDR_SIZE+2*i]=(uint8_t)(v & 0xFF); diag_b_buf[VND_FRAME_HDR_SIZE+2*i+1]=(uint8_t)(v>>8); }
 80165c0:	2300      	movs	r3, #0
 80165c2:	837b      	strh	r3, [r7, #26]
 80165c4:	e016      	b.n	80165f4 <vnd_diag_prepare_pair+0x154>
 80165c6:	8b7b      	ldrh	r3, [r7, #26]
 80165c8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80165cc:	817b      	strh	r3, [r7, #10]
 80165ce:	8b7b      	ldrh	r3, [r7, #26]
 80165d0:	005b      	lsls	r3, r3, #1
 80165d2:	3320      	adds	r3, #32
 80165d4:	897a      	ldrh	r2, [r7, #10]
 80165d6:	b2d1      	uxtb	r1, r2
 80165d8:	4a0e      	ldr	r2, [pc, #56]	@ (8016614 <vnd_diag_prepare_pair+0x174>)
 80165da:	54d1      	strb	r1, [r2, r3]
 80165dc:	897b      	ldrh	r3, [r7, #10]
 80165de:	0a1b      	lsrs	r3, r3, #8
 80165e0:	b29a      	uxth	r2, r3
 80165e2:	8b7b      	ldrh	r3, [r7, #26]
 80165e4:	005b      	lsls	r3, r3, #1
 80165e6:	3321      	adds	r3, #33	@ 0x21
 80165e8:	b2d1      	uxtb	r1, r2
 80165ea:	4a0a      	ldr	r2, [pc, #40]	@ (8016614 <vnd_diag_prepare_pair+0x174>)
 80165ec:	54d1      	strb	r1, [r2, r3]
 80165ee:	8b7b      	ldrh	r3, [r7, #26]
 80165f0:	3301      	adds	r3, #1
 80165f2:	837b      	strh	r3, [r7, #26]
 80165f4:	8b7a      	ldrh	r2, [r7, #26]
 80165f6:	887b      	ldrh	r3, [r7, #2]
 80165f8:	429a      	cmp	r2, r3
 80165fa:	d3e4      	bcc.n	80165c6 <vnd_diag_prepare_pair+0x126>
    diag_current_pair_seq = seq; /* зафиксируем seq текущей пары для гарантии совпадения A/B */
 80165fc:	4a06      	ldr	r2, [pc, #24]	@ (8016618 <vnd_diag_prepare_pair+0x178>)
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	6013      	str	r3, [r2, #0]
}
 8016602:	bf00      	nop
 8016604:	3720      	adds	r7, #32
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}
 801660a:	bf00      	nop
 801660c:	2400c734 	.word	0x2400c734
 8016610:	2400c738 	.word	0x2400c738
 8016614:	2400d1f8 	.word	0x2400d1f8
 8016618:	24000048 	.word	0x24000048

0801661c <vnd_diag_try_tx>:

/* Попытка отправки диагностического кадра: A, затем (если не A-only) B */
static int vnd_diag_try_tx(void)
{
 801661c:	b580      	push	{r7, lr}
 801661e:	b086      	sub	sp, #24
 8016620:	af02      	add	r7, sp, #8
    if(vnd_ep_busy) return 0;
 8016622:	4b4c      	ldr	r3, [pc, #304]	@ (8016754 <vnd_diag_try_tx+0x138>)
 8016624:	781b      	ldrb	r3, [r3, #0]
 8016626:	b2db      	uxtb	r3, r3
 8016628:	2b00      	cmp	r3, #0
 801662a:	d001      	beq.n	8016630 <vnd_diag_try_tx+0x14>
 801662c:	2300      	movs	r3, #0
 801662e:	e08d      	b.n	801674c <vnd_diag_try_tx+0x130>
    if(diag_frame_len == 0) return 0;
 8016630:	4b49      	ldr	r3, [pc, #292]	@ (8016758 <vnd_diag_try_tx+0x13c>)
 8016632:	881b      	ldrh	r3, [r3, #0]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d101      	bne.n	801663c <vnd_diag_try_tx+0x20>
 8016638:	2300      	movs	r3, #0
 801663a:	e087      	b.n	801674c <vnd_diag_try_tx+0x130>
        sending_channel = 0; /* для корректной статистики */
        return 1;
    } else { return 0; }
#else
    /* В DIAG режиме используем pending_B как главный флаг: если он установлен — шлём B, иначе A */
    if(pending_B)
 801663c:	4b47      	ldr	r3, [pc, #284]	@ (801675c <vnd_diag_try_tx+0x140>)
 801663e:	781b      	ldrb	r3, [r3, #0]
 8016640:	b2db      	uxtb	r3, r3
 8016642:	2b00      	cmp	r3, #0
 8016644:	d041      	beq.n	80166ca <vnd_diag_try_tx+0xae>
    {
        if(!vnd_validate_frame(diag_b_buf, diag_frame_len, 0, 0x02)) return 0; /* allow padding */
 8016646:	4b44      	ldr	r3, [pc, #272]	@ (8016758 <vnd_diag_try_tx+0x13c>)
 8016648:	8819      	ldrh	r1, [r3, #0]
 801664a:	2302      	movs	r3, #2
 801664c:	2200      	movs	r2, #0
 801664e:	4844      	ldr	r0, [pc, #272]	@ (8016760 <vnd_diag_try_tx+0x144>)
 8016650:	f7ff fd3a 	bl	80160c8 <vnd_validate_frame>
 8016654:	4603      	mov	r3, r0
 8016656:	2b00      	cmp	r3, #0
 8016658:	d101      	bne.n	801665e <vnd_diag_try_tx+0x42>
 801665a:	2300      	movs	r3, #0
 801665c:	e076      	b.n	801674c <vnd_diag_try_tx+0x130>
        /* Прямое копирование полей из заголовка A: seq/timestamp/ns всегда совпадают в паре */
        if(diag_frame_len >= VND_FRAME_HDR_SIZE){
 801665e:	4b3e      	ldr	r3, [pc, #248]	@ (8016758 <vnd_diag_try_tx+0x13c>)
 8016660:	881b      	ldrh	r3, [r3, #0]
 8016662:	2b1f      	cmp	r3, #31
 8016664:	d91e      	bls.n	80166a4 <vnd_diag_try_tx+0x88>
            vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)diag_b_buf;
 8016666:	4b3e      	ldr	r3, [pc, #248]	@ (8016760 <vnd_diag_try_tx+0x144>)
 8016668:	60bb      	str	r3, [r7, #8]
            const vnd_frame_hdr_t *ha = (const vnd_frame_hdr_t*)diag_a_buf;
 801666a:	4b3e      	ldr	r3, [pc, #248]	@ (8016764 <vnd_diag_try_tx+0x148>)
 801666c:	607b      	str	r3, [r7, #4]
            if(hb->magic == 0xA55A && ha->magic == 0xA55A){
 801666e:	68bb      	ldr	r3, [r7, #8]
 8016670:	881b      	ldrh	r3, [r3, #0]
 8016672:	b29b      	uxth	r3, r3
 8016674:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016678:	4293      	cmp	r3, r2
 801667a:	d113      	bne.n	80166a4 <vnd_diag_try_tx+0x88>
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	881b      	ldrh	r3, [r3, #0]
 8016680:	b29b      	uxth	r3, r3
 8016682:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016686:	4293      	cmp	r3, r2
 8016688:	d10c      	bne.n	80166a4 <vnd_diag_try_tx+0x88>
                hb->seq = ha->seq;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	685a      	ldr	r2, [r3, #4]
 801668e:	68bb      	ldr	r3, [r7, #8]
 8016690:	605a      	str	r2, [r3, #4]
                hb->timestamp = ha->timestamp;
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	689a      	ldr	r2, [r3, #8]
 8016696:	68bb      	ldr	r3, [r7, #8]
 8016698:	609a      	str	r2, [r3, #8]
                hb->total_samples = ha->total_samples;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	899b      	ldrh	r3, [r3, #12]
 801669e:	b29a      	uxth	r2, r3
 80166a0:	68bb      	ldr	r3, [r7, #8]
 80166a2:	819a      	strh	r2, [r3, #12]
            }
        }
        if(vnd_transmit_frame(diag_b_buf, diag_frame_len, 0, 0x02, "ADC1") == USBD_OK){
 80166a4:	4b2c      	ldr	r3, [pc, #176]	@ (8016758 <vnd_diag_try_tx+0x13c>)
 80166a6:	8819      	ldrh	r1, [r3, #0]
 80166a8:	4b2f      	ldr	r3, [pc, #188]	@ (8016768 <vnd_diag_try_tx+0x14c>)
 80166aa:	9300      	str	r3, [sp, #0]
 80166ac:	2302      	movs	r3, #2
 80166ae:	2200      	movs	r2, #0
 80166b0:	482b      	ldr	r0, [pc, #172]	@ (8016760 <vnd_diag_try_tx+0x144>)
 80166b2:	f7ff fd65 	bl	8016180 <vnd_transmit_frame>
 80166b6:	4603      	mov	r3, r0
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d104      	bne.n	80166c6 <vnd_diag_try_tx+0xaa>
            sending_channel = 1; /* информативно */
 80166bc:	4b2b      	ldr	r3, [pc, #172]	@ (801676c <vnd_diag_try_tx+0x150>)
 80166be:	2201      	movs	r2, #1
 80166c0:	701a      	strb	r2, [r3, #0]
            /* печать в CDC отключена для максимальной скорости */
            return 1;
 80166c2:	2301      	movs	r3, #1
 80166c4:	e042      	b.n	801674c <vnd_diag_try_tx+0x130>
        } else { return 0; }
 80166c6:	2300      	movs	r3, #0
 80166c8:	e040      	b.n	801674c <vnd_diag_try_tx+0x130>
    }
    /* Иначе шлём A, когда EP свободен */
    /* Allow padded A-frames as well (len >= expected and multiple of 64/512) */
    if(!vnd_validate_frame(diag_a_buf, diag_frame_len, 0, 0x02)) return 0; /* allow padding */
 80166ca:	4b23      	ldr	r3, [pc, #140]	@ (8016758 <vnd_diag_try_tx+0x13c>)
 80166cc:	8819      	ldrh	r1, [r3, #0]
 80166ce:	2302      	movs	r3, #2
 80166d0:	2200      	movs	r2, #0
 80166d2:	4824      	ldr	r0, [pc, #144]	@ (8016764 <vnd_diag_try_tx+0x148>)
 80166d4:	f7ff fcf8 	bl	80160c8 <vnd_validate_frame>
 80166d8:	4603      	mov	r3, r0
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d101      	bne.n	80166e2 <vnd_diag_try_tx+0xc6>
 80166de:	2300      	movs	r3, #0
 80166e0:	e034      	b.n	801674c <vnd_diag_try_tx+0x130>
    /* Безопасная синхронизация seq для A: если по какой-то причине новая пара
       ещё не была собрана, принудительно проставим актуальный stream_seq в hdr */
    if(diag_frame_len >= VND_FRAME_HDR_SIZE){
 80166e2:	4b1d      	ldr	r3, [pc, #116]	@ (8016758 <vnd_diag_try_tx+0x13c>)
 80166e4:	881b      	ldrh	r3, [r3, #0]
 80166e6:	2b1f      	cmp	r3, #31
 80166e8:	d916      	bls.n	8016718 <vnd_diag_try_tx+0xfc>
        vnd_frame_hdr_t *ha = (vnd_frame_hdr_t*)diag_a_buf;
 80166ea:	4b1e      	ldr	r3, [pc, #120]	@ (8016764 <vnd_diag_try_tx+0x148>)
 80166ec:	60fb      	str	r3, [r7, #12]
        if(ha->magic == 0xA55A){
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	881b      	ldrh	r3, [r3, #0]
 80166f2:	b29b      	uxth	r3, r3
 80166f4:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80166f8:	4293      	cmp	r3, r2
 80166fa:	d10d      	bne.n	8016718 <vnd_diag_try_tx+0xfc>
            if(ha->seq != stream_seq){
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	685a      	ldr	r2, [r3, #4]
 8016700:	4b1b      	ldr	r3, [pc, #108]	@ (8016770 <vnd_diag_try_tx+0x154>)
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	429a      	cmp	r2, r3
 8016706:	d003      	beq.n	8016710 <vnd_diag_try_tx+0xf4>
                ha->seq = stream_seq;
 8016708:	4b19      	ldr	r3, [pc, #100]	@ (8016770 <vnd_diag_try_tx+0x154>)
 801670a:	681a      	ldr	r2, [r3, #0]
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	605a      	str	r2, [r3, #4]
            }
            /* Всегда фиксируем текущий seq A как seq пары для последующего B */
            diag_current_pair_seq = ha->seq;
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	685b      	ldr	r3, [r3, #4]
 8016714:	4a17      	ldr	r2, [pc, #92]	@ (8016774 <vnd_diag_try_tx+0x158>)
 8016716:	6013      	str	r3, [r2, #0]
        }
    }
    if(vnd_transmit_frame(diag_a_buf, diag_frame_len, 0, 0x02, "ADC0") == USBD_OK){
 8016718:	4b0f      	ldr	r3, [pc, #60]	@ (8016758 <vnd_diag_try_tx+0x13c>)
 801671a:	8819      	ldrh	r1, [r3, #0]
 801671c:	4b16      	ldr	r3, [pc, #88]	@ (8016778 <vnd_diag_try_tx+0x15c>)
 801671e:	9300      	str	r3, [sp, #0]
 8016720:	2302      	movs	r3, #2
 8016722:	2200      	movs	r2, #0
 8016724:	480f      	ldr	r0, [pc, #60]	@ (8016764 <vnd_diag_try_tx+0x148>)
 8016726:	f7ff fd2b 	bl	8016180 <vnd_transmit_frame>
 801672a:	4603      	mov	r3, r0
 801672c:	2b00      	cmp	r3, #0
 801672e:	d10c      	bne.n	801674a <vnd_diag_try_tx+0x12e>
        sending_channel = 0; /* ожидаем B после TxCplt A */
 8016730:	4b0e      	ldr	r3, [pc, #56]	@ (801676c <vnd_diag_try_tx+0x150>)
 8016732:	2200      	movs	r2, #0
 8016734:	701a      	strb	r2, [r3, #0]
        /* Закрываем STAT-окно между A и B: сразу помечаем ожидание B */
        pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8016736:	4b09      	ldr	r3, [pc, #36]	@ (801675c <vnd_diag_try_tx+0x140>)
 8016738:	2201      	movs	r2, #1
 801673a:	701a      	strb	r2, [r3, #0]
 801673c:	f7ee f80c 	bl	8004758 <HAL_GetTick>
 8016740:	4603      	mov	r3, r0
 8016742:	4a0e      	ldr	r2, [pc, #56]	@ (801677c <vnd_diag_try_tx+0x160>)
 8016744:	6013      	str	r3, [r2, #0]
        /* печать в CDC отключена для максимальной скорости */
        return 1;
 8016746:	2301      	movs	r3, #1
 8016748:	e000      	b.n	801674c <vnd_diag_try_tx+0x130>
    } else { return 0; }
 801674a:	2300      	movs	r3, #0
#endif
}
 801674c:	4618      	mov	r0, r3
 801674e:	3710      	adds	r7, #16
 8016750:	46bd      	mov	sp, r7
 8016752:	bd80      	pop	{r7, pc}
 8016754:	2400c5ec 	.word	0x2400c5ec
 8016758:	2400c734 	.word	0x2400c734
 801675c:	24018a32 	.word	0x24018a32
 8016760:	2400d1f8 	.word	0x2400d1f8
 8016764:	2400c738 	.word	0x2400c738
 8016768:	0801cccc 	.word	0x0801cccc
 801676c:	2400004c 	.word	0x2400004c
 8016770:	2400c5dc 	.word	0x2400c5dc
 8016774:	24000048 	.word	0x24000048
 8016778:	0801ccd4 	.word	0x0801ccd4
 801677c:	24018a34 	.word	0x24018a34

08016780 <vnd_try_send_B_immediate>:

/* === Немедленная отправка B после завершения A (внутри TxCplt) === */
static int vnd_try_send_B_immediate(void)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b086      	sub	sp, #24
 8016784:	af02      	add	r7, sp, #8
    if(vnd_ep_busy) return 0;
 8016786:	4b52      	ldr	r3, [pc, #328]	@ (80168d0 <vnd_try_send_B_immediate+0x150>)
 8016788:	781b      	ldrb	r3, [r3, #0]
 801678a:	b2db      	uxtb	r3, r3
 801678c:	2b00      	cmp	r3, #0
 801678e:	d001      	beq.n	8016794 <vnd_try_send_B_immediate+0x14>
 8016790:	2300      	movs	r3, #0
 8016792:	e098      	b.n	80168c6 <vnd_try_send_B_immediate+0x146>
    /* DIAG режим: используем заранее подготовленный diag_b_buf с текущим seq */
    if(diag_mode_active){
 8016794:	4b4f      	ldr	r3, [pc, #316]	@ (80168d4 <vnd_try_send_B_immediate+0x154>)
 8016796:	781b      	ldrb	r3, [r3, #0]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d04e      	beq.n	801683a <vnd_try_send_B_immediate+0xba>
        if(!pending_B) return 0;
 801679c:	4b4e      	ldr	r3, [pc, #312]	@ (80168d8 <vnd_try_send_B_immediate+0x158>)
 801679e:	781b      	ldrb	r3, [r3, #0]
 80167a0:	b2db      	uxtb	r3, r3
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d101      	bne.n	80167aa <vnd_try_send_B_immediate+0x2a>
 80167a6:	2300      	movs	r3, #0
 80167a8:	e08d      	b.n	80168c6 <vnd_try_send_B_immediate+0x146>
        if(diag_frame_len == 0) return 0;
 80167aa:	4b4c      	ldr	r3, [pc, #304]	@ (80168dc <vnd_try_send_B_immediate+0x15c>)
 80167ac:	881b      	ldrh	r3, [r3, #0]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d101      	bne.n	80167b6 <vnd_try_send_B_immediate+0x36>
 80167b2:	2300      	movs	r3, #0
 80167b4:	e087      	b.n	80168c6 <vnd_try_send_B_immediate+0x146>
        if(diag_frame_len >= VND_FRAME_HDR_SIZE){
 80167b6:	4b49      	ldr	r3, [pc, #292]	@ (80168dc <vnd_try_send_B_immediate+0x15c>)
 80167b8:	881b      	ldrh	r3, [r3, #0]
 80167ba:	2b1f      	cmp	r3, #31
 80167bc:	d91e      	bls.n	80167fc <vnd_try_send_B_immediate+0x7c>
            vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)diag_b_buf;
 80167be:	4b48      	ldr	r3, [pc, #288]	@ (80168e0 <vnd_try_send_B_immediate+0x160>)
 80167c0:	607b      	str	r3, [r7, #4]
            const vnd_frame_hdr_t *ha = (const vnd_frame_hdr_t*)diag_a_buf;
 80167c2:	4b48      	ldr	r3, [pc, #288]	@ (80168e4 <vnd_try_send_B_immediate+0x164>)
 80167c4:	603b      	str	r3, [r7, #0]
            /* В DIAG заголовок B копируем из A для гарантированной идентичности пары */
            if(hb->magic == 0xA55A && ha->magic == 0xA55A){
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	881b      	ldrh	r3, [r3, #0]
 80167ca:	b29b      	uxth	r3, r3
 80167cc:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80167d0:	4293      	cmp	r3, r2
 80167d2:	d113      	bne.n	80167fc <vnd_try_send_B_immediate+0x7c>
 80167d4:	683b      	ldr	r3, [r7, #0]
 80167d6:	881b      	ldrh	r3, [r3, #0]
 80167d8:	b29b      	uxth	r3, r3
 80167da:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80167de:	4293      	cmp	r3, r2
 80167e0:	d10c      	bne.n	80167fc <vnd_try_send_B_immediate+0x7c>
                hb->seq = ha->seq;
 80167e2:	683b      	ldr	r3, [r7, #0]
 80167e4:	685a      	ldr	r2, [r3, #4]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	605a      	str	r2, [r3, #4]
                hb->timestamp = ha->timestamp;
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	689a      	ldr	r2, [r3, #8]
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	609a      	str	r2, [r3, #8]
                hb->total_samples = ha->total_samples;
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	899b      	ldrh	r3, [r3, #12]
 80167f6:	b29a      	uxth	r2, r3
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	819a      	strh	r2, [r3, #12]
            }
        }
        if(!vnd_validate_frame(diag_b_buf, diag_frame_len, 0, 0x02)) return 0;
 80167fc:	4b37      	ldr	r3, [pc, #220]	@ (80168dc <vnd_try_send_B_immediate+0x15c>)
 80167fe:	8819      	ldrh	r1, [r3, #0]
 8016800:	2302      	movs	r3, #2
 8016802:	2200      	movs	r2, #0
 8016804:	4836      	ldr	r0, [pc, #216]	@ (80168e0 <vnd_try_send_B_immediate+0x160>)
 8016806:	f7ff fc5f 	bl	80160c8 <vnd_validate_frame>
 801680a:	4603      	mov	r3, r0
 801680c:	2b00      	cmp	r3, #0
 801680e:	d101      	bne.n	8016814 <vnd_try_send_B_immediate+0x94>
 8016810:	2300      	movs	r3, #0
 8016812:	e058      	b.n	80168c6 <vnd_try_send_B_immediate+0x146>
        if(vnd_transmit_frame(diag_b_buf, diag_frame_len, 0, 0x02, "ADC1-IMM") == USBD_OK){
 8016814:	4b31      	ldr	r3, [pc, #196]	@ (80168dc <vnd_try_send_B_immediate+0x15c>)
 8016816:	8819      	ldrh	r1, [r3, #0]
 8016818:	4b33      	ldr	r3, [pc, #204]	@ (80168e8 <vnd_try_send_B_immediate+0x168>)
 801681a:	9300      	str	r3, [sp, #0]
 801681c:	2302      	movs	r3, #2
 801681e:	2200      	movs	r2, #0
 8016820:	482f      	ldr	r0, [pc, #188]	@ (80168e0 <vnd_try_send_B_immediate+0x160>)
 8016822:	f7ff fcad 	bl	8016180 <vnd_transmit_frame>
 8016826:	4603      	mov	r3, r0
 8016828:	2b00      	cmp	r3, #0
 801682a:	d104      	bne.n	8016836 <vnd_try_send_B_immediate+0xb6>
            sending_channel = 1; /* B в полёте */
 801682c:	4b2f      	ldr	r3, [pc, #188]	@ (80168ec <vnd_try_send_B_immediate+0x16c>)
 801682e:	2201      	movs	r2, #1
 8016830:	701a      	strb	r2, [r3, #0]
            return 1;
 8016832:	2301      	movs	r3, #1
 8016834:	e047      	b.n	80168c6 <vnd_try_send_B_immediate+0x146>
        }
        return 0;
 8016836:	2300      	movs	r3, #0
 8016838:	e045      	b.n	80168c6 <vnd_try_send_B_immediate+0x146>
    }
    /* Полный режим: отправляем B из текущего pair_send_idx, если READY */
    ChanFrame *fB = &g_frames[pair_send_idx][1];
 801683a:	4b2d      	ldr	r3, [pc, #180]	@ (80168f0 <vnd_try_send_B_immediate+0x170>)
 801683c:	781b      	ldrb	r3, [r3, #0]
 801683e:	461a      	mov	r2, r3
 8016840:	f241 5398 	movw	r3, #5528	@ 0x1598
 8016844:	fb02 f303 	mul.w	r3, r2, r3
 8016848:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 801684c:	4a29      	ldr	r2, [pc, #164]	@ (80168f4 <vnd_try_send_B_immediate+0x174>)
 801684e:	4413      	add	r3, r2
 8016850:	60fb      	str	r3, [r7, #12]
    if(fB->st != FB_READY) return 0;
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	781b      	ldrb	r3, [r3, #0]
 8016856:	b2db      	uxtb	r3, r3
 8016858:	2b01      	cmp	r3, #1
 801685a:	d001      	beq.n	8016860 <vnd_try_send_B_immediate+0xe0>
 801685c:	2300      	movs	r3, #0
 801685e:	e032      	b.n	80168c6 <vnd_try_send_B_immediate+0x146>
    /* Корректируем seq при необходимости (безопасно) */
    if(fB->frame_size >= VND_FRAME_HDR_SIZE){
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	88db      	ldrh	r3, [r3, #6]
 8016864:	2b1f      	cmp	r3, #31
 8016866:	d917      	bls.n	8016898 <vnd_try_send_B_immediate+0x118>
        vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)fB->buf;
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	330c      	adds	r3, #12
 801686c:	60bb      	str	r3, [r7, #8]
        if(hb->magic == 0xA55A && hb->seq != stream_seq){ hb->seq = stream_seq; fB->seq = stream_seq; }
 801686e:	68bb      	ldr	r3, [r7, #8]
 8016870:	881b      	ldrh	r3, [r3, #0]
 8016872:	b29b      	uxth	r3, r3
 8016874:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016878:	4293      	cmp	r3, r2
 801687a:	d10d      	bne.n	8016898 <vnd_try_send_B_immediate+0x118>
 801687c:	68bb      	ldr	r3, [r7, #8]
 801687e:	685a      	ldr	r2, [r3, #4]
 8016880:	4b1d      	ldr	r3, [pc, #116]	@ (80168f8 <vnd_try_send_B_immediate+0x178>)
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	429a      	cmp	r2, r3
 8016886:	d007      	beq.n	8016898 <vnd_try_send_B_immediate+0x118>
 8016888:	4b1b      	ldr	r3, [pc, #108]	@ (80168f8 <vnd_try_send_B_immediate+0x178>)
 801688a:	681a      	ldr	r2, [r3, #0]
 801688c:	68bb      	ldr	r3, [r7, #8]
 801688e:	605a      	str	r2, [r3, #4]
 8016890:	4b19      	ldr	r3, [pc, #100]	@ (80168f8 <vnd_try_send_B_immediate+0x178>)
 8016892:	681a      	ldr	r2, [r3, #0]
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	609a      	str	r2, [r3, #8]
    }
    if(vnd_transmit_frame(fB->buf, fB->frame_size, 0, 0, "ADC1-IMM") == USBD_OK){
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	f103 000c 	add.w	r0, r3, #12
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	88d9      	ldrh	r1, [r3, #6]
 80168a2:	4b11      	ldr	r3, [pc, #68]	@ (80168e8 <vnd_try_send_B_immediate+0x168>)
 80168a4:	9300      	str	r3, [sp, #0]
 80168a6:	2300      	movs	r3, #0
 80168a8:	2200      	movs	r2, #0
 80168aa:	f7ff fc69 	bl	8016180 <vnd_transmit_frame>
 80168ae:	4603      	mov	r3, r0
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d107      	bne.n	80168c4 <vnd_try_send_B_immediate+0x144>
        fB->st = FB_SENDING; sending_channel = 1;
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	2202      	movs	r2, #2
 80168b8:	701a      	strb	r2, [r3, #0]
 80168ba:	4b0c      	ldr	r3, [pc, #48]	@ (80168ec <vnd_try_send_B_immediate+0x16c>)
 80168bc:	2201      	movs	r2, #1
 80168be:	701a      	strb	r2, [r3, #0]
        return 1;
 80168c0:	2301      	movs	r3, #1
 80168c2:	e000      	b.n	80168c6 <vnd_try_send_B_immediate+0x146>
    }
    return 0;
 80168c4:	2300      	movs	r3, #0
}
 80168c6:	4618      	mov	r0, r3
 80168c8:	3710      	adds	r7, #16
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bd80      	pop	{r7, pc}
 80168ce:	bf00      	nop
 80168d0:	2400c5ec 	.word	0x2400c5ec
 80168d4:	2400c729 	.word	0x2400c729
 80168d8:	24018a32 	.word	0x24018a32
 80168dc:	2400c734 	.word	0x2400c734
 80168e0:	2400d1f8 	.word	0x2400d1f8
 80168e4:	2400c738 	.word	0x2400c738
 80168e8:	0801ccdc 	.word	0x0801ccdc
 80168ec:	2400004c 	.word	0x2400004c
 80168f0:	24018a31 	.word	0x24018a31
 80168f4:	2400dd70 	.word	0x2400dd70
 80168f8:	2400c5dc 	.word	0x2400c5dc

080168fc <vnd_try_send_A_nextpair_immediate>:

/* === Немедленная отправка A следующей пары после завершения B (внутри TxCplt) === */
static int vnd_try_send_A_nextpair_immediate(void)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b084      	sub	sp, #16
 8016900:	af02      	add	r7, sp, #8
    if(vnd_ep_busy) return 0;
 8016902:	4b44      	ldr	r3, [pc, #272]	@ (8016a14 <vnd_try_send_A_nextpair_immediate+0x118>)
 8016904:	781b      	ldrb	r3, [r3, #0]
 8016906:	b2db      	uxtb	r3, r3
 8016908:	2b00      	cmp	r3, #0
 801690a:	d001      	beq.n	8016910 <vnd_try_send_A_nextpair_immediate+0x14>
 801690c:	2300      	movs	r3, #0
 801690e:	e07c      	b.n	8016a0a <vnd_try_send_A_nextpair_immediate+0x10e>
    /* После B мы уже сдвинули pair_send_idx/seq во внешней логике — тут пытаемся сразу выстрелить A новой пары */
    if(diag_mode_active){
 8016910:	4b41      	ldr	r3, [pc, #260]	@ (8016a18 <vnd_try_send_A_nextpair_immediate+0x11c>)
 8016912:	781b      	ldrb	r3, [r3, #0]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d037      	beq.n	8016988 <vnd_try_send_A_nextpair_immediate+0x8c>
        /* Подготовим следующую пару под новый stream_seq и сразу пошлём A */
        vnd_diag_prepare_pair(stream_seq, cur_samples_per_frame ? cur_samples_per_frame : diag_samples);
 8016918:	4b40      	ldr	r3, [pc, #256]	@ (8016a1c <vnd_try_send_A_nextpair_immediate+0x120>)
 801691a:	681a      	ldr	r2, [r3, #0]
 801691c:	4b40      	ldr	r3, [pc, #256]	@ (8016a20 <vnd_try_send_A_nextpair_immediate+0x124>)
 801691e:	881b      	ldrh	r3, [r3, #0]
 8016920:	b29b      	uxth	r3, r3
 8016922:	2b00      	cmp	r3, #0
 8016924:	d003      	beq.n	801692e <vnd_try_send_A_nextpair_immediate+0x32>
 8016926:	4b3e      	ldr	r3, [pc, #248]	@ (8016a20 <vnd_try_send_A_nextpair_immediate+0x124>)
 8016928:	881b      	ldrh	r3, [r3, #0]
 801692a:	b29b      	uxth	r3, r3
 801692c:	e001      	b.n	8016932 <vnd_try_send_A_nextpair_immediate+0x36>
 801692e:	4b3d      	ldr	r3, [pc, #244]	@ (8016a24 <vnd_try_send_A_nextpair_immediate+0x128>)
 8016930:	881b      	ldrh	r3, [r3, #0]
 8016932:	4619      	mov	r1, r3
 8016934:	4610      	mov	r0, r2
 8016936:	f7ff fdb3 	bl	80164a0 <vnd_diag_prepare_pair>
        if(!vnd_validate_frame(diag_a_buf, diag_frame_len, 0, 0x02)) return 0;
 801693a:	4b3b      	ldr	r3, [pc, #236]	@ (8016a28 <vnd_try_send_A_nextpair_immediate+0x12c>)
 801693c:	8819      	ldrh	r1, [r3, #0]
 801693e:	2302      	movs	r3, #2
 8016940:	2200      	movs	r2, #0
 8016942:	483a      	ldr	r0, [pc, #232]	@ (8016a2c <vnd_try_send_A_nextpair_immediate+0x130>)
 8016944:	f7ff fbc0 	bl	80160c8 <vnd_validate_frame>
 8016948:	4603      	mov	r3, r0
 801694a:	2b00      	cmp	r3, #0
 801694c:	d101      	bne.n	8016952 <vnd_try_send_A_nextpair_immediate+0x56>
 801694e:	2300      	movs	r3, #0
 8016950:	e05b      	b.n	8016a0a <vnd_try_send_A_nextpair_immediate+0x10e>
        if(vnd_transmit_frame(diag_a_buf, diag_frame_len, 0, 0x02, "ADC0-IMM") == USBD_OK){
 8016952:	4b35      	ldr	r3, [pc, #212]	@ (8016a28 <vnd_try_send_A_nextpair_immediate+0x12c>)
 8016954:	8819      	ldrh	r1, [r3, #0]
 8016956:	4b36      	ldr	r3, [pc, #216]	@ (8016a30 <vnd_try_send_A_nextpair_immediate+0x134>)
 8016958:	9300      	str	r3, [sp, #0]
 801695a:	2302      	movs	r3, #2
 801695c:	2200      	movs	r2, #0
 801695e:	4833      	ldr	r0, [pc, #204]	@ (8016a2c <vnd_try_send_A_nextpair_immediate+0x130>)
 8016960:	f7ff fc0e 	bl	8016180 <vnd_transmit_frame>
 8016964:	4603      	mov	r3, r0
 8016966:	2b00      	cmp	r3, #0
 8016968:	d10c      	bne.n	8016984 <vnd_try_send_A_nextpair_immediate+0x88>
            sending_channel = 0; pending_B = 1; pending_B_since_ms = HAL_GetTick();
 801696a:	4b32      	ldr	r3, [pc, #200]	@ (8016a34 <vnd_try_send_A_nextpair_immediate+0x138>)
 801696c:	2200      	movs	r2, #0
 801696e:	701a      	strb	r2, [r3, #0]
 8016970:	4b31      	ldr	r3, [pc, #196]	@ (8016a38 <vnd_try_send_A_nextpair_immediate+0x13c>)
 8016972:	2201      	movs	r2, #1
 8016974:	701a      	strb	r2, [r3, #0]
 8016976:	f7ed feef 	bl	8004758 <HAL_GetTick>
 801697a:	4603      	mov	r3, r0
 801697c:	4a2f      	ldr	r2, [pc, #188]	@ (8016a3c <vnd_try_send_A_nextpair_immediate+0x140>)
 801697e:	6013      	str	r3, [r2, #0]
            return 1;
 8016980:	2301      	movs	r3, #1
 8016982:	e042      	b.n	8016a0a <vnd_try_send_A_nextpair_immediate+0x10e>
        }
        return 0;
 8016984:	2300      	movs	r3, #0
 8016986:	e040      	b.n	8016a0a <vnd_try_send_A_nextpair_immediate+0x10e>
    }
    /* Полный режим: убедимся, что в буфере подготовки есть готовый A; если нет — попробуем собрать */
    ChanFrame *fA = &g_frames[pair_send_idx][0];
 8016988:	4b2d      	ldr	r3, [pc, #180]	@ (8016a40 <vnd_try_send_A_nextpair_immediate+0x144>)
 801698a:	781b      	ldrb	r3, [r3, #0]
 801698c:	461a      	mov	r2, r3
 801698e:	f241 5398 	movw	r3, #5528	@ 0x1598
 8016992:	fb02 f303 	mul.w	r3, r2, r3
 8016996:	4a2b      	ldr	r2, [pc, #172]	@ (8016a44 <vnd_try_send_A_nextpair_immediate+0x148>)
 8016998:	4413      	add	r3, r2
 801699a:	607b      	str	r3, [r7, #4]
    if(fA->st != FB_READY){
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	781b      	ldrb	r3, [r3, #0]
 80169a0:	b2db      	uxtb	r3, r3
 80169a2:	2b01      	cmp	r3, #1
 80169a4:	d012      	beq.n	80169cc <vnd_try_send_A_nextpair_immediate+0xd0>
        vnd_prepare_pair();
 80169a6:	f7ff f93b 	bl	8015c20 <vnd_prepare_pair>
        fA = &g_frames[pair_send_idx][0];
 80169aa:	4b25      	ldr	r3, [pc, #148]	@ (8016a40 <vnd_try_send_A_nextpair_immediate+0x144>)
 80169ac:	781b      	ldrb	r3, [r3, #0]
 80169ae:	461a      	mov	r2, r3
 80169b0:	f241 5398 	movw	r3, #5528	@ 0x1598
 80169b4:	fb02 f303 	mul.w	r3, r2, r3
 80169b8:	4a22      	ldr	r2, [pc, #136]	@ (8016a44 <vnd_try_send_A_nextpair_immediate+0x148>)
 80169ba:	4413      	add	r3, r2
 80169bc:	607b      	str	r3, [r7, #4]
        if(fA->st != FB_READY) return 0;
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	781b      	ldrb	r3, [r3, #0]
 80169c2:	b2db      	uxtb	r3, r3
 80169c4:	2b01      	cmp	r3, #1
 80169c6:	d001      	beq.n	80169cc <vnd_try_send_A_nextpair_immediate+0xd0>
 80169c8:	2300      	movs	r3, #0
 80169ca:	e01e      	b.n	8016a0a <vnd_try_send_A_nextpair_immediate+0x10e>
    }
    if(vnd_transmit_frame(fA->buf, fA->frame_size, 0, 0, "ADC0-IMM") == USBD_OK){
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	f103 000c 	add.w	r0, r3, #12
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	88d9      	ldrh	r1, [r3, #6]
 80169d6:	4b16      	ldr	r3, [pc, #88]	@ (8016a30 <vnd_try_send_A_nextpair_immediate+0x134>)
 80169d8:	9300      	str	r3, [sp, #0]
 80169da:	2300      	movs	r3, #0
 80169dc:	2200      	movs	r2, #0
 80169de:	f7ff fbcf 	bl	8016180 <vnd_transmit_frame>
 80169e2:	4603      	mov	r3, r0
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d10f      	bne.n	8016a08 <vnd_try_send_A_nextpair_immediate+0x10c>
        fA->st = FB_SENDING; sending_channel = 0; pending_B = 1; pending_B_since_ms = HAL_GetTick();
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2202      	movs	r2, #2
 80169ec:	701a      	strb	r2, [r3, #0]
 80169ee:	4b11      	ldr	r3, [pc, #68]	@ (8016a34 <vnd_try_send_A_nextpair_immediate+0x138>)
 80169f0:	2200      	movs	r2, #0
 80169f2:	701a      	strb	r2, [r3, #0]
 80169f4:	4b10      	ldr	r3, [pc, #64]	@ (8016a38 <vnd_try_send_A_nextpair_immediate+0x13c>)
 80169f6:	2201      	movs	r2, #1
 80169f8:	701a      	strb	r2, [r3, #0]
 80169fa:	f7ed fead 	bl	8004758 <HAL_GetTick>
 80169fe:	4603      	mov	r3, r0
 8016a00:	4a0e      	ldr	r2, [pc, #56]	@ (8016a3c <vnd_try_send_A_nextpair_immediate+0x140>)
 8016a02:	6013      	str	r3, [r2, #0]
        return 1;
 8016a04:	2301      	movs	r3, #1
 8016a06:	e000      	b.n	8016a0a <vnd_try_send_A_nextpair_immediate+0x10e>
    }
    return 0;
 8016a08:	2300      	movs	r3, #0
}
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	3708      	adds	r7, #8
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	bf00      	nop
 8016a14:	2400c5ec 	.word	0x2400c5ec
 8016a18:	2400c729 	.word	0x2400c729
 8016a1c:	2400c5dc 	.word	0x2400c5dc
 8016a20:	2400c5e0 	.word	0x2400c5e0
 8016a24:	24000042 	.word	0x24000042
 8016a28:	2400c734 	.word	0x2400c734
 8016a2c:	2400c738 	.word	0x2400c738
 8016a30:	0801cce8 	.word	0x0801cce8
 8016a34:	2400004c 	.word	0x2400004c
 8016a38:	24018a32 	.word	0x24018a32
 8016a3c:	24018a34 	.word	0x24018a34
 8016a40:	24018a31 	.word	0x24018a31
 8016a44:	2400dd70 	.word	0x2400dd70

08016a48 <vnd_log_hdr_layout>:

/* Лог структуры заголовка кадра для отладки */
static void vnd_log_hdr_layout(void){
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b082      	sub	sp, #8
 8016a4c:	af02      	add	r7, sp, #8
#if VND_ENABLE_LOG
    VND_LOG("HDR sz=%u off.magic=%u off.seq=%u off.timestamp=%u off.total=%u", (unsigned)sizeof(vnd_frame_hdr_t),
 8016a4e:	230c      	movs	r3, #12
 8016a50:	9301      	str	r3, [sp, #4]
 8016a52:	2308      	movs	r3, #8
 8016a54:	9300      	str	r3, [sp, #0]
 8016a56:	2304      	movs	r3, #4
 8016a58:	2200      	movs	r2, #0
 8016a5a:	2120      	movs	r1, #32
 8016a5c:	4804      	ldr	r0, [pc, #16]	@ (8016a70 <vnd_log_hdr_layout+0x28>)
 8016a5e:	f003 ff9f 	bl	801a9a0 <iprintf>
 8016a62:	4804      	ldr	r0, [pc, #16]	@ (8016a74 <vnd_log_hdr_layout+0x2c>)
 8016a64:	f004 f804 	bl	801aa70 <puts>
            (unsigned)offsetof(vnd_frame_hdr_t,magic), (unsigned)offsetof(vnd_frame_hdr_t,seq),
            (unsigned)offsetof(vnd_frame_hdr_t,timestamp), (unsigned)offsetof(vnd_frame_hdr_t,total_samples));
#endif
}
 8016a68:	bf00      	nop
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	bd80      	pop	{r7, pc}
 8016a6e:	bf00      	nop
 8016a70:	0801ccf4 	.word	0x0801ccf4
 8016a74:	0801c9c8 	.word	0x0801c9c8

08016a78 <vnd_try_send_test_from_task>:
    } else { vnd_tx_ready = 1; vnd_ep_busy = 0; VND_LOG("EMERG_TEST_BUSY"); }
}

/* Отправка единственного тестового кадра (строго из таска) */
static void vnd_try_send_test_from_task(void)
{
 8016a78:	b480      	push	{r7}
 8016a7a:	b08d      	sub	sp, #52	@ 0x34
 8016a7c:	af00      	add	r7, sp, #0
           чтобы не попасть на BUSY/ZLP гонки. Далее обычная логика отправит A/B. */
    } else {
        VND_LOG("TEST_TX busy/fail");
        vnd_tx_ready = 1; vnd_ep_busy = 0;
    }
}
 8016a7e:	3734      	adds	r7, #52	@ 0x34
 8016a80:	46bd      	mov	sp, r7
 8016a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a86:	4770      	bx	lr

08016a88 <Vendor_Stream_Task>:
    }
}

/* Основной периодический таск */
void __attribute__((unused)) Vendor_Stream_Task(void)
{
 8016a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a8c:	b0b3      	sub	sp, #204	@ 0xcc
 8016a8e:	af0c      	add	r7, sp, #48	@ 0x30
    dbg_task_calls++;
 8016a90:	4b32      	ldr	r3, [pc, #200]	@ (8016b5c <Vendor_Stream_Task+0xd4>)
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	3301      	adds	r3, #1
 8016a96:	4a31      	ldr	r2, [pc, #196]	@ (8016b5c <Vendor_Stream_Task+0xd4>)
 8016a98:	6013      	str	r3, [r2, #0]
    /* Сервис EP0: выполняем отложенные SOFT/DEEP RESET без блокировки SETUP */
    USBD_VND_ProcessControlRequests();
 8016a9a:	f002 fae3 	bl	8019064 <USBD_VND_ProcessControlRequests>
    /* ПРИОРИТЕТ 0: если не сконфигурировано стримингом — обслуживаем оффлайн-STAT */
    if(!streaming)
 8016a9e:	4b30      	ldr	r3, [pc, #192]	@ (8016b60 <Vendor_Stream_Task+0xd8>)
 8016aa0:	781b      	ldrb	r3, [r3, #0]
 8016aa2:	b2db      	uxtb	r3, r3
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d110      	bne.n	8016aca <Vendor_Stream_Task+0x42>
    {
    if(!vnd_ep_busy && !vnd_inflight){ vnd_try_send_pending_status_from_task(); }
 8016aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8016b64 <Vendor_Stream_Task+0xdc>)
 8016aaa:	781b      	ldrb	r3, [r3, #0]
 8016aac:	b2db      	uxtb	r3, r3
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d106      	bne.n	8016ac0 <Vendor_Stream_Task+0x38>
 8016ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8016b68 <Vendor_Stream_Task+0xe0>)
 8016ab4:	781b      	ldrb	r3, [r3, #0]
 8016ab6:	b2db      	uxtb	r3, r3
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d101      	bne.n	8016ac0 <Vendor_Stream_Task+0x38>
 8016abc:	f7fe fd68 	bl	8015590 <vnd_try_send_pending_status_from_task>
        vnd_tick_flag = 0;
 8016ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8016b6c <Vendor_Stream_Task+0xe4>)
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	701a      	strb	r2, [r3, #0]
        return;
 8016ac6:	f000 bf3d 	b.w	8017944 <Vendor_Stream_Task+0xebc>
    }
    /* подавляем частый шум лога при каждом заходе в таск */
    if(!dbg_printed_sizes)
 8016aca:	4b29      	ldr	r3, [pc, #164]	@ (8016b70 <Vendor_Stream_Task+0xe8>)
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d104      	bne.n	8016adc <Vendor_Stream_Task+0x54>
    {
        vnd_log_hdr_layout();
 8016ad2:	f7ff ffb9 	bl	8016a48 <vnd_log_hdr_layout>
        dbg_printed_sizes = 1;
 8016ad6:	4b26      	ldr	r3, [pc, #152]	@ (8016b70 <Vendor_Stream_Task+0xe8>)
 8016ad8:	2201      	movs	r2, #1
 8016ada:	701a      	strb	r2, [r3, #0]
    }
    /* СУПЕР-ПРИОРИТЕТ: если пришёл STOP — разрешаем только ACK-STAT, полностью блокируем стрим */
    if (stop_request) {
 8016adc:	4b25      	ldr	r3, [pc, #148]	@ (8016b74 <Vendor_Stream_Task+0xec>)
 8016ade:	781b      	ldrb	r3, [r3, #0]
 8016ae0:	b2db      	uxtb	r3, r3
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d054      	beq.n	8016b90 <Vendor_Stream_Task+0x108>
        if (!vnd_ep_busy) {
 8016ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8016b64 <Vendor_Stream_Task+0xdc>)
 8016ae8:	781b      	ldrb	r3, [r3, #0]
 8016aea:	b2db      	uxtb	r3, r3
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d109      	bne.n	8016b04 <Vendor_Stream_Task+0x7c>
            if (!pending_status) pending_status = 1; /* гарантируем наличие отложенного STAT */
 8016af0:	4b21      	ldr	r3, [pc, #132]	@ (8016b78 <Vendor_Stream_Task+0xf0>)
 8016af2:	781b      	ldrb	r3, [r3, #0]
 8016af4:	b2db      	uxtb	r3, r3
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d102      	bne.n	8016b00 <Vendor_Stream_Task+0x78>
 8016afa:	4b1f      	ldr	r3, [pc, #124]	@ (8016b78 <Vendor_Stream_Task+0xf0>)
 8016afc:	2201      	movs	r2, #1
 8016afe:	701a      	strb	r2, [r3, #0]
            vnd_try_send_pending_status_from_task();
 8016b00:	f7fe fd46 	bl	8015590 <vnd_try_send_pending_status_from_task>
        }
        if (vnd_tick_flag) vnd_tick_flag = 0;
 8016b04:	4b19      	ldr	r3, [pc, #100]	@ (8016b6c <Vendor_Stream_Task+0xe4>)
 8016b06:	781b      	ldrb	r3, [r3, #0]
 8016b08:	b2db      	uxtb	r3, r3
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d002      	beq.n	8016b14 <Vendor_Stream_Task+0x8c>
 8016b0e:	4b17      	ldr	r3, [pc, #92]	@ (8016b6c <Vendor_Stream_Task+0xe4>)
 8016b10:	2200      	movs	r2, #0
 8016b12:	701a      	strb	r2, [r3, #0]
        /* Логируем попытки передачи после STOP */
        if (pending_B || test_sent) {
 8016b14:	4b19      	ldr	r3, [pc, #100]	@ (8016b7c <Vendor_Stream_Task+0xf4>)
 8016b16:	781b      	ldrb	r3, [r3, #0]
 8016b18:	b2db      	uxtb	r3, r3
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d105      	bne.n	8016b2a <Vendor_Stream_Task+0xa2>
 8016b1e:	4b18      	ldr	r3, [pc, #96]	@ (8016b80 <Vendor_Stream_Task+0xf8>)
 8016b20:	781b      	ldrb	r3, [r3, #0]
 8016b22:	b2db      	uxtb	r3, r3
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	f000 8704 	beq.w	8017932 <Vendor_Stream_Task+0xeaa>
            VND_LOG("BLOCK: попытка передачи после STOP (pending_B=%d, test_sent=%d)", pending_B, test_sent);
 8016b2a:	4b14      	ldr	r3, [pc, #80]	@ (8016b7c <Vendor_Stream_Task+0xf4>)
 8016b2c:	781b      	ldrb	r3, [r3, #0]
 8016b2e:	b2db      	uxtb	r3, r3
 8016b30:	4619      	mov	r1, r3
 8016b32:	4b13      	ldr	r3, [pc, #76]	@ (8016b80 <Vendor_Stream_Task+0xf8>)
 8016b34:	781b      	ldrb	r3, [r3, #0]
 8016b36:	b2db      	uxtb	r3, r3
 8016b38:	461a      	mov	r2, r3
 8016b3a:	4812      	ldr	r0, [pc, #72]	@ (8016b84 <Vendor_Stream_Task+0xfc>)
 8016b3c:	f003 ff30 	bl	801a9a0 <iprintf>
 8016b40:	4811      	ldr	r0, [pc, #68]	@ (8016b88 <Vendor_Stream_Task+0x100>)
 8016b42:	f003 ff95 	bl	801aa70 <puts>
            pending_B = 0; test_sent = 0; sending_channel = 0xFF;
 8016b46:	4b0d      	ldr	r3, [pc, #52]	@ (8016b7c <Vendor_Stream_Task+0xf4>)
 8016b48:	2200      	movs	r2, #0
 8016b4a:	701a      	strb	r2, [r3, #0]
 8016b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8016b80 <Vendor_Stream_Task+0xf8>)
 8016b4e:	2200      	movs	r2, #0
 8016b50:	701a      	strb	r2, [r3, #0]
 8016b52:	4b0e      	ldr	r3, [pc, #56]	@ (8016b8c <Vendor_Stream_Task+0x104>)
 8016b54:	22ff      	movs	r2, #255	@ 0xff
 8016b56:	701a      	strb	r2, [r3, #0]
        }
        return; /* ждём TxCplt ACK-STOP */
 8016b58:	f000 beeb 	b.w	8017932 <Vendor_Stream_Task+0xeaa>
 8016b5c:	2400c69c 	.word	0x2400c69c
 8016b60:	2400c5d8 	.word	0x2400c5d8
 8016b64:	2400c5ec 	.word	0x2400c5ec
 8016b68:	2400c5ed 	.word	0x2400c5ed
 8016b6c:	24018aac 	.word	0x24018aac
 8016b70:	2400c64c 	.word	0x2400c64c
 8016b74:	2400c68f 	.word	0x2400c68f
 8016b78:	2400c728 	.word	0x2400c728
 8016b7c:	24018a32 	.word	0x24018a32
 8016b80:	2400c5ee 	.word	0x2400c5ee
 8016b84:	0801cdb4 	.word	0x0801cdb4
 8016b88:	0801c9c8 	.word	0x0801c9c8
 8016b8c:	2400004c 	.word	0x2400004c
    }

    /* Универсальная антиклин‑разблокировка EP: если IN висит >200 мс — принудительно снимаем busy */
    do {
        uint32_t now_ms = HAL_GetTick();
 8016b90:	f7ed fde2 	bl	8004758 <HAL_GetTick>
 8016b94:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        extern uint8_t USBD_VND_TxIsBusy(void);
        uint8_t vbusy = USBD_VND_TxIsBusy();
 8016b98:	f002 fb78 	bl	801928c <USBD_VND_TxIsBusy>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ( (vnd_ep_busy || vbusy) && vnd_last_tx_start_ms != 0 && (now_ms - vnd_last_tx_start_ms) > 200) {
 8016ba2:	4b7d      	ldr	r3, [pc, #500]	@ (8016d98 <Vendor_Stream_Task+0x310>)
 8016ba4:	781b      	ldrb	r3, [r3, #0]
 8016ba6:	b2db      	uxtb	r3, r3
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d103      	bne.n	8016bb4 <Vendor_Stream_Task+0x12c>
 8016bac:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d023      	beq.n	8016bfc <Vendor_Stream_Task+0x174>
 8016bb4:	4b79      	ldr	r3, [pc, #484]	@ (8016d9c <Vendor_Stream_Task+0x314>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d01f      	beq.n	8016bfc <Vendor_Stream_Task+0x174>
 8016bbc:	4b77      	ldr	r3, [pc, #476]	@ (8016d9c <Vendor_Stream_Task+0x314>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016bc4:	1ad3      	subs	r3, r2, r3
 8016bc6:	2bc8      	cmp	r3, #200	@ 0xc8
 8016bc8:	d918      	bls.n	8016bfc <Vendor_Stream_Task+0x174>
            extern void USBD_VND_ForceTxIdle(void);
            USBD_VND_ForceTxIdle();
 8016bca:	f002 fb83 	bl	80192d4 <USBD_VND_ForceTxIdle>
            vnd_ep_busy = 0; vnd_tx_ready = 1;
 8016bce:	4b72      	ldr	r3, [pc, #456]	@ (8016d98 <Vendor_Stream_Task+0x310>)
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	701a      	strb	r2, [r3, #0]
 8016bd4:	4b72      	ldr	r3, [pc, #456]	@ (8016da0 <Vendor_Stream_Task+0x318>)
 8016bd6:	2201      	movs	r2, #1
 8016bd8:	701a      	strb	r2, [r3, #0]
            VND_LOG("EP_UNSTUCK after %lums (len=%u) vbusy=%u", (unsigned long)(now_ms - vnd_last_tx_start_ms), (unsigned)vnd_last_tx_len, (unsigned)vbusy);
 8016bda:	4b70      	ldr	r3, [pc, #448]	@ (8016d9c <Vendor_Stream_Task+0x314>)
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016be2:	1ad1      	subs	r1, r2, r3
 8016be4:	4b6f      	ldr	r3, [pc, #444]	@ (8016da4 <Vendor_Stream_Task+0x31c>)
 8016be6:	881b      	ldrh	r3, [r3, #0]
 8016be8:	b29b      	uxth	r3, r3
 8016bea:	461a      	mov	r2, r3
 8016bec:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8016bf0:	486d      	ldr	r0, [pc, #436]	@ (8016da8 <Vendor_Stream_Task+0x320>)
 8016bf2:	f003 fed5 	bl	801a9a0 <iprintf>
 8016bf6:	486d      	ldr	r0, [pc, #436]	@ (8016dac <Vendor_Stream_Task+0x324>)
 8016bf8:	f003 ff3a 	bl	801aa70 <puts>
        }
    } while(0);

    /* ACK-STAT на START: отключено, чтобы не занимать Vendor IN перед первой парой.
       Хост может опрашивать состояние через GET_STATUS (EP0). */
    if(status_ack_pending){ start_ack_done = 1; status_ack_pending = 0; }
 8016bfc:	4b6c      	ldr	r3, [pc, #432]	@ (8016db0 <Vendor_Stream_Task+0x328>)
 8016bfe:	781b      	ldrb	r3, [r3, #0]
 8016c00:	b2db      	uxtb	r3, r3
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d005      	beq.n	8016c12 <Vendor_Stream_Task+0x18a>
 8016c06:	4b6b      	ldr	r3, [pc, #428]	@ (8016db4 <Vendor_Stream_Task+0x32c>)
 8016c08:	2201      	movs	r2, #1
 8016c0a:	701a      	strb	r2, [r3, #0]
 8016c0c:	4b68      	ldr	r3, [pc, #416]	@ (8016db0 <Vendor_Stream_Task+0x328>)
 8016c0e:	2200      	movs	r2, #0
 8016c10:	701a      	strb	r2, [r3, #0]

    uint32_t now = HAL_GetTick();
 8016c12:	f7ed fda1 	bl	8004758 <HAL_GetTick>
 8016c16:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    /* Fallback: если ACK так и не ушёл в полёт (status_ack_pending держится),
       не ждём бесконечно — считаем ACK выполненным и продолжаем к TEST. */
    if(!test_sent && !start_ack_done && status_ack_pending){
 8016c1a:	4b67      	ldr	r3, [pc, #412]	@ (8016db8 <Vendor_Stream_Task+0x330>)
 8016c1c:	781b      	ldrb	r3, [r3, #0]
 8016c1e:	b2db      	uxtb	r3, r3
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d12b      	bne.n	8016c7c <Vendor_Stream_Task+0x1f4>
 8016c24:	4b63      	ldr	r3, [pc, #396]	@ (8016db4 <Vendor_Stream_Task+0x32c>)
 8016c26:	781b      	ldrb	r3, [r3, #0]
 8016c28:	b2db      	uxtb	r3, r3
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d126      	bne.n	8016c7c <Vendor_Stream_Task+0x1f4>
 8016c2e:	4b60      	ldr	r3, [pc, #384]	@ (8016db0 <Vendor_Stream_Task+0x328>)
 8016c30:	781b      	ldrb	r3, [r3, #0]
 8016c32:	b2db      	uxtb	r3, r3
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d021      	beq.n	8016c7c <Vendor_Stream_Task+0x1f4>
        if(now - start_cmd_ms > 200){
 8016c38:	4b60      	ldr	r3, [pc, #384]	@ (8016dbc <Vendor_Stream_Task+0x334>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016c40:	1ad3      	subs	r3, r2, r3
 8016c42:	2bc8      	cmp	r3, #200	@ 0xc8
 8016c44:	d91a      	bls.n	8016c7c <Vendor_Stream_Task+0x1f4>
            start_ack_done = 1; status_ack_pending = 0;
 8016c46:	4b5b      	ldr	r3, [pc, #364]	@ (8016db4 <Vendor_Stream_Task+0x32c>)
 8016c48:	2201      	movs	r2, #1
 8016c4a:	701a      	strb	r2, [r3, #0]
 8016c4c:	4b58      	ldr	r3, [pc, #352]	@ (8016db0 <Vendor_Stream_Task+0x328>)
 8016c4e:	2200      	movs	r2, #0
 8016c50:	701a      	strb	r2, [r3, #0]
            vnd_ep_busy = 0; vnd_tx_ready = 1;
 8016c52:	4b51      	ldr	r3, [pc, #324]	@ (8016d98 <Vendor_Stream_Task+0x310>)
 8016c54:	2200      	movs	r2, #0
 8016c56:	701a      	strb	r2, [r3, #0]
 8016c58:	4b51      	ldr	r3, [pc, #324]	@ (8016da0 <Vendor_Stream_Task+0x318>)
 8016c5a:	2201      	movs	r2, #1
 8016c5c:	701a      	strb	r2, [r3, #0]
            extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 8016c5e:	f002 fb39 	bl	80192d4 <USBD_VND_ForceTxIdle>
            VND_LOG("ACK_FALLBACK(no inflight) -> allow TEST");
 8016c62:	4857      	ldr	r0, [pc, #348]	@ (8016dc0 <Vendor_Stream_Task+0x338>)
 8016c64:	f003 fe9c 	bl	801a9a0 <iprintf>
 8016c68:	4850      	ldr	r0, [pc, #320]	@ (8016dac <Vendor_Stream_Task+0x324>)
 8016c6a:	f003 ff01 	bl	801aa70 <puts>
            if(!vnd_ep_busy){ vnd_try_send_test_from_task(); }
 8016c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8016d98 <Vendor_Stream_Task+0x310>)
 8016c70:	781b      	ldrb	r3, [r3, #0]
 8016c72:	b2db      	uxtb	r3, r3
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d101      	bne.n	8016c7c <Vendor_Stream_Task+0x1f4>
 8016c78:	f7ff fefe 	bl	8016a78 <vnd_try_send_test_from_task>
        }
    }

    if(!test_sent && start_stat_inflight) {
 8016c7c:	4b4e      	ldr	r3, [pc, #312]	@ (8016db8 <Vendor_Stream_Task+0x330>)
 8016c7e:	781b      	ldrb	r3, [r3, #0]
 8016c80:	b2db      	uxtb	r3, r3
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d12d      	bne.n	8016ce2 <Vendor_Stream_Task+0x25a>
 8016c86:	4b4f      	ldr	r3, [pc, #316]	@ (8016dc4 <Vendor_Stream_Task+0x33c>)
 8016c88:	781b      	ldrb	r3, [r3, #0]
 8016c8a:	b2db      	uxtb	r3, r3
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d028      	beq.n	8016ce2 <Vendor_Stream_Task+0x25a>
        if(now - vnd_last_tx_start_ms > 80) {
 8016c90:	4b42      	ldr	r3, [pc, #264]	@ (8016d9c <Vendor_Stream_Task+0x314>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016c98:	1ad3      	subs	r3, r2, r3
 8016c9a:	2b50      	cmp	r3, #80	@ 0x50
 8016c9c:	d921      	bls.n	8016ce2 <Vendor_Stream_Task+0x25a>
            /* На некоторых хостах ACK-STAT может не завершиться DataIn/ZLP. Разблокируем вручную. */
            start_stat_inflight = 0; start_ack_done = 1; vnd_ep_busy = 0; vnd_tx_ready = 1;
 8016c9e:	4b49      	ldr	r3, [pc, #292]	@ (8016dc4 <Vendor_Stream_Task+0x33c>)
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	701a      	strb	r2, [r3, #0]
 8016ca4:	4b43      	ldr	r3, [pc, #268]	@ (8016db4 <Vendor_Stream_Task+0x32c>)
 8016ca6:	2201      	movs	r2, #1
 8016ca8:	701a      	strb	r2, [r3, #0]
 8016caa:	4b3b      	ldr	r3, [pc, #236]	@ (8016d98 <Vendor_Stream_Task+0x310>)
 8016cac:	2200      	movs	r2, #0
 8016cae:	701a      	strb	r2, [r3, #0]
 8016cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8016da0 <Vendor_Stream_Task+0x318>)
 8016cb2:	2201      	movs	r2, #1
 8016cb4:	701a      	strb	r2, [r3, #0]
            extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 8016cb6:	f002 fb0d 	bl	80192d4 <USBD_VND_ForceTxIdle>
            VND_LOG("ACK_TIMEOUT -> unlock test");
 8016cba:	4843      	ldr	r0, [pc, #268]	@ (8016dc8 <Vendor_Stream_Task+0x340>)
 8016cbc:	f003 fe70 	bl	801a9a0 <iprintf>
 8016cc0:	483a      	ldr	r0, [pc, #232]	@ (8016dac <Vendor_Stream_Task+0x324>)
 8016cc2:	f003 fed5 	bl	801aa70 <puts>
            /* Сразу отдадим ещё один STAT (если был queued) и попробуем отправить TEST */
            if(pending_status && !vnd_ep_busy){
 8016cc6:	4b41      	ldr	r3, [pc, #260]	@ (8016dcc <Vendor_Stream_Task+0x344>)
 8016cc8:	781b      	ldrb	r3, [r3, #0]
 8016cca:	b2db      	uxtb	r3, r3
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d006      	beq.n	8016cde <Vendor_Stream_Task+0x256>
 8016cd0:	4b31      	ldr	r3, [pc, #196]	@ (8016d98 <Vendor_Stream_Task+0x310>)
 8016cd2:	781b      	ldrb	r3, [r3, #0]
 8016cd4:	b2db      	uxtb	r3, r3
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d101      	bne.n	8016cde <Vendor_Stream_Task+0x256>
                vnd_try_send_pending_status_from_task();
 8016cda:	f7fe fc59 	bl	8015590 <vnd_try_send_pending_status_from_task>
            }
            if(!vnd_ep_busy){
 8016cde:	4b2e      	ldr	r3, [pc, #184]	@ (8016d98 <Vendor_Stream_Task+0x310>)
 8016ce0:	781b      	ldrb	r3, [r3, #0]
#endif
            }
        }
    }
    /* Аварийный обход: если тест не ушёл за разумное время после START — считаем его выполненным и продолжаем */
    if(!test_sent && (now - start_cmd_ms) > 160) {
 8016ce2:	4b35      	ldr	r3, [pc, #212]	@ (8016db8 <Vendor_Stream_Task+0x330>)
 8016ce4:	781b      	ldrb	r3, [r3, #0]
 8016ce6:	b2db      	uxtb	r3, r3
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d11b      	bne.n	8016d24 <Vendor_Stream_Task+0x29c>
 8016cec:	4b33      	ldr	r3, [pc, #204]	@ (8016dbc <Vendor_Stream_Task+0x334>)
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016cf4:	1ad3      	subs	r3, r2, r3
 8016cf6:	2ba0      	cmp	r3, #160	@ 0xa0
 8016cf8:	d914      	bls.n	8016d24 <Vendor_Stream_Task+0x29c>
        test_in_flight = 0;
 8016cfa:	4b35      	ldr	r3, [pc, #212]	@ (8016dd0 <Vendor_Stream_Task+0x348>)
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	701a      	strb	r2, [r3, #0]
        test_sent = 1;
 8016d00:	4b2d      	ldr	r3, [pc, #180]	@ (8016db8 <Vendor_Stream_Task+0x330>)
 8016d02:	2201      	movs	r2, #1
 8016d04:	701a      	strb	r2, [r3, #0]
        start_ack_done = 1;
 8016d06:	4b2b      	ldr	r3, [pc, #172]	@ (8016db4 <Vendor_Stream_Task+0x32c>)
 8016d08:	2201      	movs	r2, #1
 8016d0a:	701a      	strb	r2, [r3, #0]
        VND_LOG("TEST_FALLTHRU after %lums -> proceed to A/B", (unsigned long)(now - start_cmd_ms));
 8016d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8016dbc <Vendor_Stream_Task+0x334>)
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016d14:	1ad3      	subs	r3, r2, r3
 8016d16:	4619      	mov	r1, r3
 8016d18:	482e      	ldr	r0, [pc, #184]	@ (8016dd4 <Vendor_Stream_Task+0x34c>)
 8016d1a:	f003 fe41 	bl	801a9a0 <iprintf>
 8016d1e:	4823      	ldr	r0, [pc, #140]	@ (8016dac <Vendor_Stream_Task+0x324>)
 8016d20:	f003 fea6 	bl	801aa70 <puts>
    }
    /* ВАЖНО: сначала попробуем подготовить пару A/B, чтобы не зациклиться на ранних STAT.
       Подготовка пары не зависит от занятости EP, поэтому убираем лишний гейтинг по vnd_ep_busy. */
    {
        ChanFrame *fA0 = &g_frames[pair_send_idx][0];
 8016d24:	4b2c      	ldr	r3, [pc, #176]	@ (8016dd8 <Vendor_Stream_Task+0x350>)
 8016d26:	781b      	ldrb	r3, [r3, #0]
 8016d28:	461a      	mov	r2, r3
 8016d2a:	f241 5398 	movw	r3, #5528	@ 0x1598
 8016d2e:	fb02 f303 	mul.w	r3, r2, r3
 8016d32:	4a2a      	ldr	r2, [pc, #168]	@ (8016ddc <Vendor_Stream_Task+0x354>)
 8016d34:	4413      	add	r3, r2
 8016d36:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if(fA0->st != FB_READY){ vnd_prepare_pair(); }
 8016d38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016d3a:	781b      	ldrb	r3, [r3, #0]
 8016d3c:	b2db      	uxtb	r3, r3
 8016d3e:	2b01      	cmp	r3, #1
 8016d40:	d001      	beq.n	8016d46 <Vendor_Stream_Task+0x2be>
 8016d42:	f7fe ff6d 	bl	8015c20 <vnd_prepare_pair>
    }
    /* Раннее окно для GET_STATUS до первой пары — отключено: STAT по IN только между парами. */
    /* Дополнительный ранний запуск TEST: если после START прошло >50 мс и EP свободен */
    if(!test_sent && !test_in_flight) {
 8016d46:	4b1c      	ldr	r3, [pc, #112]	@ (8016db8 <Vendor_Stream_Task+0x330>)
 8016d48:	781b      	ldrb	r3, [r3, #0]
 8016d4a:	b2db      	uxtb	r3, r3
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d149      	bne.n	8016de4 <Vendor_Stream_Task+0x35c>
 8016d50:	4b1f      	ldr	r3, [pc, #124]	@ (8016dd0 <Vendor_Stream_Task+0x348>)
 8016d52:	781b      	ldrb	r3, [r3, #0]
 8016d54:	b2db      	uxtb	r3, r3
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d144      	bne.n	8016de4 <Vendor_Stream_Task+0x35c>
        if(!vnd_ep_busy){
 8016d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8016d98 <Vendor_Stream_Task+0x310>)
 8016d5c:	781b      	ldrb	r3, [r3, #0]
 8016d5e:	b2db      	uxtb	r3, r3
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d13f      	bne.n	8016de4 <Vendor_Stream_Task+0x35c>
            if (now - start_cmd_ms > 50) {
 8016d64:	4b15      	ldr	r3, [pc, #84]	@ (8016dbc <Vendor_Stream_Task+0x334>)
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016d6c:	1ad3      	subs	r3, r2, r3
 8016d6e:	2b32      	cmp	r3, #50	@ 0x32
 8016d70:	d938      	bls.n	8016de4 <Vendor_Stream_Task+0x35c>
                vnd_try_send_test_from_task();
 8016d72:	f7ff fe81 	bl	8016a78 <vnd_try_send_test_from_task>
                if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 8016d76:	4b08      	ldr	r3, [pc, #32]	@ (8016d98 <Vendor_Stream_Task+0x310>)
 8016d78:	781b      	ldrb	r3, [r3, #0]
 8016d7a:	b2db      	uxtb	r3, r3
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d031      	beq.n	8016de4 <Vendor_Stream_Task+0x35c>
 8016d80:	4b17      	ldr	r3, [pc, #92]	@ (8016de0 <Vendor_Stream_Task+0x358>)
 8016d82:	781b      	ldrb	r3, [r3, #0]
 8016d84:	b2db      	uxtb	r3, r3
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	f000 85d5 	beq.w	8017936 <Vendor_Stream_Task+0xeae>
 8016d8c:	4b14      	ldr	r3, [pc, #80]	@ (8016de0 <Vendor_Stream_Task+0x358>)
 8016d8e:	2200      	movs	r2, #0
 8016d90:	701a      	strb	r2, [r3, #0]
 8016d92:	f000 bdd0 	b.w	8017936 <Vendor_Stream_Task+0xeae>
 8016d96:	bf00      	nop
 8016d98:	2400c5ec 	.word	0x2400c5ec
 8016d9c:	2400c654 	.word	0x2400c654
 8016da0:	2400003b 	.word	0x2400003b
 8016da4:	2400c650 	.word	0x2400c650
 8016da8:	0801ce10 	.word	0x0801ce10
 8016dac:	0801c9c8 	.word	0x0801c9c8
 8016db0:	2400c68e 	.word	0x2400c68e
 8016db4:	2400c68d 	.word	0x2400c68d
 8016db8:	2400c5ee 	.word	0x2400c5ee
 8016dbc:	2400c5e4 	.word	0x2400c5e4
 8016dc0:	0801ce40 	.word	0x0801ce40
 8016dc4:	2400c68c 	.word	0x2400c68c
 8016dc8:	0801ce70 	.word	0x0801ce70
 8016dcc:	2400c728 	.word	0x2400c728
 8016dd0:	2400c5ef 	.word	0x2400c5ef
 8016dd4:	0801ce94 	.word	0x0801ce94
 8016dd8:	24018a31 	.word	0x24018a31
 8016ddc:	2400dd70 	.word	0x2400dd70
 8016de0:	24018aac 	.word	0x24018aac
            }
        }
    }
    if(test_in_flight && (now - vnd_last_tx_start_ms) > 100){
 8016de4:	4b7a      	ldr	r3, [pc, #488]	@ (8016fd0 <Vendor_Stream_Task+0x548>)
 8016de6:	781b      	ldrb	r3, [r3, #0]
 8016de8:	b2db      	uxtb	r3, r3
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d01d      	beq.n	8016e2a <Vendor_Stream_Task+0x3a2>
 8016dee:	4b79      	ldr	r3, [pc, #484]	@ (8016fd4 <Vendor_Stream_Task+0x54c>)
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016df6:	1ad3      	subs	r3, r2, r3
 8016df8:	2b64      	cmp	r3, #100	@ 0x64
 8016dfa:	d916      	bls.n	8016e2a <Vendor_Stream_Task+0x3a2>
        /* На некоторых хостах (FS/RPi) DataIn может не вызваться после короткого TEST.
           Чтобы не зависнуть с занятым EP, снимаем busy и продолжаем. */
    test_in_flight = 0;
 8016dfc:	4b74      	ldr	r3, [pc, #464]	@ (8016fd0 <Vendor_Stream_Task+0x548>)
 8016dfe:	2200      	movs	r2, #0
 8016e00:	701a      	strb	r2, [r3, #0]
    test_sent = 1;
 8016e02:	4b75      	ldr	r3, [pc, #468]	@ (8016fd8 <Vendor_Stream_Task+0x550>)
 8016e04:	2201      	movs	r2, #1
 8016e06:	701a      	strb	r2, [r3, #0]
    vnd_ep_busy = 0;
 8016e08:	4b74      	ldr	r3, [pc, #464]	@ (8016fdc <Vendor_Stream_Task+0x554>)
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	701a      	strb	r2, [r3, #0]
    vnd_tx_ready = 1;
 8016e0e:	4b74      	ldr	r3, [pc, #464]	@ (8016fe0 <Vendor_Stream_Task+0x558>)
 8016e10:	2201      	movs	r2, #1
 8016e12:	701a      	strb	r2, [r3, #0]
    extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 8016e14:	f002 fa5e 	bl	80192d4 <USBD_VND_ForceTxIdle>
        vnd_tx_kick = 1;
 8016e18:	4b72      	ldr	r3, [pc, #456]	@ (8016fe4 <Vendor_Stream_Task+0x55c>)
 8016e1a:	2201      	movs	r2, #1
 8016e1c:	701a      	strb	r2, [r3, #0]
        VND_LOG("TEST_TIMEOUT -> unlock EP");
 8016e1e:	4872      	ldr	r0, [pc, #456]	@ (8016fe8 <Vendor_Stream_Task+0x560>)
 8016e20:	f003 fdbe 	bl	801a9a0 <iprintf>
 8016e24:	4871      	ldr	r0, [pc, #452]	@ (8016fec <Vendor_Stream_Task+0x564>)
 8016e26:	f003 fe23 	bl	801aa70 <puts>
    }
    if(!test_sent){
 8016e2a:	4b6b      	ldr	r3, [pc, #428]	@ (8016fd8 <Vendor_Stream_Task+0x550>)
 8016e2c:	781b      	ldrb	r3, [r3, #0]
 8016e2e:	b2db      	uxtb	r3, r3
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d101      	bne.n	8016e38 <Vendor_Stream_Task+0x3b0>
        if(!vnd_ep_busy){
 8016e34:	4b69      	ldr	r3, [pc, #420]	@ (8016fdc <Vendor_Stream_Task+0x554>)
 8016e36:	781b      	ldrb	r3, [r3, #0]
        }
        /* Не выходим раньше времени: позволим подготовку/отправку A/B идти параллельно,
           чтобы не блокироваться на тестовом кадре. */
    }

    if(diag_mode_active){
 8016e38:	4b6d      	ldr	r3, [pc, #436]	@ (8016ff0 <Vendor_Stream_Task+0x568>)
 8016e3a:	781b      	ldrb	r3, [r3, #0]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d04f      	beq.n	8016ee0 <Vendor_Stream_Task+0x458>
        /* Зафиксируем размер один раз */
        if(cur_samples_per_frame == 0){
 8016e40:	4b6c      	ldr	r3, [pc, #432]	@ (8016ff4 <Vendor_Stream_Task+0x56c>)
 8016e42:	881b      	ldrh	r3, [r3, #0]
 8016e44:	b29b      	uxth	r3, r3
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d119      	bne.n	8016e7e <Vendor_Stream_Task+0x3f6>
            uint16_t s = diag_samples; if(s > VND_MAX_SAMPLES) s = VND_MAX_SAMPLES;
 8016e4a:	4b6b      	ldr	r3, [pc, #428]	@ (8016ff8 <Vendor_Stream_Task+0x570>)
 8016e4c:	881b      	ldrh	r3, [r3, #0]
 8016e4e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 8016e52:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8016e56:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8016e5a:	d903      	bls.n	8016e64 <Vendor_Stream_Task+0x3dc>
 8016e5c:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 8016e60:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            cur_samples_per_frame = s;
 8016e64:	4a63      	ldr	r2, [pc, #396]	@ (8016ff4 <Vendor_Stream_Task+0x56c>)
 8016e66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8016e6a:	8013      	strh	r3, [r2, #0]
            cur_expected_frame_size = (uint16_t)(VND_FRAME_HDR_SIZE + cur_samples_per_frame*2u);
 8016e6c:	4b61      	ldr	r3, [pc, #388]	@ (8016ff4 <Vendor_Stream_Task+0x56c>)
 8016e6e:	881b      	ldrh	r3, [r3, #0]
 8016e70:	b29b      	uxth	r3, r3
 8016e72:	3310      	adds	r3, #16
 8016e74:	b29b      	uxth	r3, r3
 8016e76:	005b      	lsls	r3, r3, #1
 8016e78:	b29a      	uxth	r2, r3
 8016e7a:	4b60      	ldr	r3, [pc, #384]	@ (8016ffc <Vendor_Stream_Task+0x574>)
 8016e7c:	801a      	strh	r2, [r3, #0]
        }
        /* Подготовить пару для текущего stream_seq, если ещё не подготовлена и не идёт передача */
        if(sending_channel == 0xFF && !pending_B && diag_prepared_seq != stream_seq){
 8016e7e:	4b60      	ldr	r3, [pc, #384]	@ (8017000 <Vendor_Stream_Task+0x578>)
 8016e80:	781b      	ldrb	r3, [r3, #0]
 8016e82:	2bff      	cmp	r3, #255	@ 0xff
 8016e84:	d117      	bne.n	8016eb6 <Vendor_Stream_Task+0x42e>
 8016e86:	4b5f      	ldr	r3, [pc, #380]	@ (8017004 <Vendor_Stream_Task+0x57c>)
 8016e88:	781b      	ldrb	r3, [r3, #0]
 8016e8a:	b2db      	uxtb	r3, r3
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d112      	bne.n	8016eb6 <Vendor_Stream_Task+0x42e>
 8016e90:	4b5d      	ldr	r3, [pc, #372]	@ (8017008 <Vendor_Stream_Task+0x580>)
 8016e92:	681a      	ldr	r2, [r3, #0]
 8016e94:	4b5d      	ldr	r3, [pc, #372]	@ (801700c <Vendor_Stream_Task+0x584>)
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	429a      	cmp	r2, r3
 8016e9a:	d00c      	beq.n	8016eb6 <Vendor_Stream_Task+0x42e>
            vnd_diag_prepare_pair(stream_seq, cur_samples_per_frame);
 8016e9c:	4b5b      	ldr	r3, [pc, #364]	@ (801700c <Vendor_Stream_Task+0x584>)
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	4a54      	ldr	r2, [pc, #336]	@ (8016ff4 <Vendor_Stream_Task+0x56c>)
 8016ea2:	8812      	ldrh	r2, [r2, #0]
 8016ea4:	b292      	uxth	r2, r2
 8016ea6:	4611      	mov	r1, r2
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f7ff faf9 	bl	80164a0 <vnd_diag_prepare_pair>
            diag_prepared_seq = stream_seq;
 8016eae:	4b57      	ldr	r3, [pc, #348]	@ (801700c <Vendor_Stream_Task+0x584>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	4a55      	ldr	r2, [pc, #340]	@ (8017008 <Vendor_Stream_Task+0x580>)
 8016eb4:	6013      	str	r3, [r2, #0]
        }
        /* В DIAG STAT через bulk полностью заблокирован (см. vnd_try_send_pending_status_from_task) */
        /* Отправка диагностических кадров без темпирования: A затем B */
        if(!vnd_ep_busy){ (void)vnd_diag_try_tx(); }
 8016eb6:	4b49      	ldr	r3, [pc, #292]	@ (8016fdc <Vendor_Stream_Task+0x554>)
 8016eb8:	781b      	ldrb	r3, [r3, #0]
 8016eba:	b2db      	uxtb	r3, r3
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d101      	bne.n	8016ec4 <Vendor_Stream_Task+0x43c>
 8016ec0:	f7ff fbac 	bl	801661c <vnd_diag_try_tx>
        if(vnd_tick_flag) vnd_tick_flag = 0;
 8016ec4:	4b52      	ldr	r3, [pc, #328]	@ (8017010 <Vendor_Stream_Task+0x588>)
 8016ec6:	781b      	ldrb	r3, [r3, #0]
 8016ec8:	b2db      	uxtb	r3, r3
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d002      	beq.n	8016ed4 <Vendor_Stream_Task+0x44c>
 8016ece:	4b50      	ldr	r3, [pc, #320]	@ (8017010 <Vendor_Stream_Task+0x588>)
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	701a      	strb	r2, [r3, #0]
        vnd_cdc_periodic_stats(now);
 8016ed4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8016ed8:	f7fe f868 	bl	8014fac <vnd_cdc_periodic_stats>
        return;
 8016edc:	f000 bd32 	b.w	8017944 <Vendor_Stream_Task+0xebc>
    }
    
    if(!full_mode){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 8016ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8017014 <Vendor_Stream_Task+0x58c>)
 8016ee2:	781b      	ldrb	r3, [r3, #0]
 8016ee4:	b2db      	uxtb	r3, r3
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d10a      	bne.n	8016f00 <Vendor_Stream_Task+0x478>
 8016eea:	4b49      	ldr	r3, [pc, #292]	@ (8017010 <Vendor_Stream_Task+0x588>)
 8016eec:	781b      	ldrb	r3, [r3, #0]
 8016eee:	b2db      	uxtb	r3, r3
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	f000 8522 	beq.w	801793a <Vendor_Stream_Task+0xeb2>
 8016ef6:	4b46      	ldr	r3, [pc, #280]	@ (8017010 <Vendor_Stream_Task+0x588>)
 8016ef8:	2200      	movs	r2, #0
 8016efa:	701a      	strb	r2, [r3, #0]
 8016efc:	f000 bd1d 	b.w	801793a <Vendor_Stream_Task+0xeb2>

    /* Упреждающая подготовка пары: когда TEST уже завершён и B не ожидается. */
    if(test_sent && !pending_B){
 8016f00:	4b35      	ldr	r3, [pc, #212]	@ (8016fd8 <Vendor_Stream_Task+0x550>)
 8016f02:	781b      	ldrb	r3, [r3, #0]
 8016f04:	b2db      	uxtb	r3, r3
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d015      	beq.n	8016f36 <Vendor_Stream_Task+0x4ae>
 8016f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8017004 <Vendor_Stream_Task+0x57c>)
 8016f0c:	781b      	ldrb	r3, [r3, #0]
 8016f0e:	b2db      	uxtb	r3, r3
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d110      	bne.n	8016f36 <Vendor_Stream_Task+0x4ae>
        ChanFrame *fa_chk = &g_frames[pair_send_idx][0];
 8016f14:	4b40      	ldr	r3, [pc, #256]	@ (8017018 <Vendor_Stream_Task+0x590>)
 8016f16:	781b      	ldrb	r3, [r3, #0]
 8016f18:	461a      	mov	r2, r3
 8016f1a:	f241 5398 	movw	r3, #5528	@ 0x1598
 8016f1e:	fb02 f303 	mul.w	r3, r2, r3
 8016f22:	4a3e      	ldr	r2, [pc, #248]	@ (801701c <Vendor_Stream_Task+0x594>)
 8016f24:	4413      	add	r3, r2
 8016f26:	67bb      	str	r3, [r7, #120]	@ 0x78
        if(fa_chk->st != FB_READY){ vnd_prepare_pair(); }
 8016f28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016f2a:	781b      	ldrb	r3, [r3, #0]
 8016f2c:	b2db      	uxtb	r3, r3
 8016f2e:	2b01      	cmp	r3, #1
 8016f30:	d001      	beq.n	8016f36 <Vendor_Stream_Task+0x4ae>
 8016f32:	f7fe fe75 	bl	8015c20 <vnd_prepare_pair>
    }

    /* Окно для GET_STATUS: отправлять STAT строго между парами, чтобы не разрывать A/B. */
    if(!vnd_ep_busy && !vnd_inflight && pending_status){
 8016f36:	4b29      	ldr	r3, [pc, #164]	@ (8016fdc <Vendor_Stream_Task+0x554>)
 8016f38:	781b      	ldrb	r3, [r3, #0]
 8016f3a:	b2db      	uxtb	r3, r3
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d12e      	bne.n	8016f9e <Vendor_Stream_Task+0x516>
 8016f40:	4b37      	ldr	r3, [pc, #220]	@ (8017020 <Vendor_Stream_Task+0x598>)
 8016f42:	781b      	ldrb	r3, [r3, #0]
 8016f44:	b2db      	uxtb	r3, r3
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d129      	bne.n	8016f9e <Vendor_Stream_Task+0x516>
 8016f4a:	4b36      	ldr	r3, [pc, #216]	@ (8017024 <Vendor_Stream_Task+0x59c>)
 8016f4c:	781b      	ldrb	r3, [r3, #0]
 8016f4e:	b2db      	uxtb	r3, r3
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d024      	beq.n	8016f9e <Vendor_Stream_Task+0x516>
        if (test_sent && !pending_B && first_pair_done && sending_channel == 0xFF) {
 8016f54:	4b20      	ldr	r3, [pc, #128]	@ (8016fd8 <Vendor_Stream_Task+0x550>)
 8016f56:	781b      	ldrb	r3, [r3, #0]
 8016f58:	b2db      	uxtb	r3, r3
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d01f      	beq.n	8016f9e <Vendor_Stream_Task+0x516>
 8016f5e:	4b29      	ldr	r3, [pc, #164]	@ (8017004 <Vendor_Stream_Task+0x57c>)
 8016f60:	781b      	ldrb	r3, [r3, #0]
 8016f62:	b2db      	uxtb	r3, r3
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d11a      	bne.n	8016f9e <Vendor_Stream_Task+0x516>
 8016f68:	4b2f      	ldr	r3, [pc, #188]	@ (8017028 <Vendor_Stream_Task+0x5a0>)
 8016f6a:	781b      	ldrb	r3, [r3, #0]
 8016f6c:	b2db      	uxtb	r3, r3
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d015      	beq.n	8016f9e <Vendor_Stream_Task+0x516>
 8016f72:	4b23      	ldr	r3, [pc, #140]	@ (8017000 <Vendor_Stream_Task+0x578>)
 8016f74:	781b      	ldrb	r3, [r3, #0]
 8016f76:	2bff      	cmp	r3, #255	@ 0xff
 8016f78:	d111      	bne.n	8016f9e <Vendor_Stream_Task+0x516>
            vnd_try_send_pending_status_from_task();
 8016f7a:	f7fe fb09 	bl	8015590 <vnd_try_send_pending_status_from_task>
            if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 8016f7e:	4b17      	ldr	r3, [pc, #92]	@ (8016fdc <Vendor_Stream_Task+0x554>)
 8016f80:	781b      	ldrb	r3, [r3, #0]
 8016f82:	b2db      	uxtb	r3, r3
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d00a      	beq.n	8016f9e <Vendor_Stream_Task+0x516>
 8016f88:	4b21      	ldr	r3, [pc, #132]	@ (8017010 <Vendor_Stream_Task+0x588>)
 8016f8a:	781b      	ldrb	r3, [r3, #0]
 8016f8c:	b2db      	uxtb	r3, r3
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	f000 84d5 	beq.w	801793e <Vendor_Stream_Task+0xeb6>
 8016f94:	4b1e      	ldr	r3, [pc, #120]	@ (8017010 <Vendor_Stream_Task+0x588>)
 8016f96:	2200      	movs	r2, #0
 8016f98:	701a      	strb	r2, [r3, #0]
 8016f9a:	f000 bcd0 	b.w	801793e <Vendor_Stream_Task+0xeb6>
        }
    }

    if(vnd_tx_kick) vnd_tx_kick = 0;
 8016f9e:	4b11      	ldr	r3, [pc, #68]	@ (8016fe4 <Vendor_Stream_Task+0x55c>)
 8016fa0:	781b      	ldrb	r3, [r3, #0]
 8016fa2:	b2db      	uxtb	r3, r3
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d002      	beq.n	8016fae <Vendor_Stream_Task+0x526>
 8016fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8016fe4 <Vendor_Stream_Task+0x55c>)
 8016faa:	2200      	movs	r2, #0
 8016fac:	701a      	strb	r2, [r3, #0]
    if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 8016fae:	4b0b      	ldr	r3, [pc, #44]	@ (8016fdc <Vendor_Stream_Task+0x554>)
 8016fb0:	781b      	ldrb	r3, [r3, #0]
 8016fb2:	b2db      	uxtb	r3, r3
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d039      	beq.n	801702c <Vendor_Stream_Task+0x5a4>
 8016fb8:	4b15      	ldr	r3, [pc, #84]	@ (8017010 <Vendor_Stream_Task+0x588>)
 8016fba:	781b      	ldrb	r3, [r3, #0]
 8016fbc:	b2db      	uxtb	r3, r3
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	f000 84bf 	beq.w	8017942 <Vendor_Stream_Task+0xeba>
 8016fc4:	4b12      	ldr	r3, [pc, #72]	@ (8017010 <Vendor_Stream_Task+0x588>)
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	701a      	strb	r2, [r3, #0]
 8016fca:	f000 bcba 	b.w	8017942 <Vendor_Stream_Task+0xeba>
 8016fce:	bf00      	nop
 8016fd0:	2400c5ef 	.word	0x2400c5ef
 8016fd4:	2400c654 	.word	0x2400c654
 8016fd8:	2400c5ee 	.word	0x2400c5ee
 8016fdc:	2400c5ec 	.word	0x2400c5ec
 8016fe0:	2400003b 	.word	0x2400003b
 8016fe4:	2400c688 	.word	0x2400c688
 8016fe8:	0801cec8 	.word	0x0801cec8
 8016fec:	0801c9c8 	.word	0x0801c9c8
 8016ff0:	2400c729 	.word	0x2400c729
 8016ff4:	2400c5e0 	.word	0x2400c5e0
 8016ff8:	24000042 	.word	0x24000042
 8016ffc:	2400c5e2 	.word	0x2400c5e2
 8017000:	2400004c 	.word	0x2400004c
 8017004:	24018a32 	.word	0x24018a32
 8017008:	24000044 	.word	0x24000044
 801700c:	2400c5dc 	.word	0x2400c5dc
 8017010:	24018aac 	.word	0x24018aac
 8017014:	2400003c 	.word	0x2400003c
 8017018:	24018a31 	.word	0x24018a31
 801701c:	2400dd70 	.word	0x2400dd70
 8017020:	2400c5ed 	.word	0x2400c5ed
 8017024:	2400c728 	.word	0x2400c728
 8017028:	2400c678 	.word	0x2400c678

    /* Если TEST уже логически завершён, но его мета застряла в FIFO (нет TxCplt) —
       через ~60 мс превращаем её в служебную, чтобы не блокировать отправку A. */
    vnd_force_complete_test_meta_if_stale();
 801702c:	f7fe fa7c 	bl	8015528 <vnd_force_complete_test_meta_if_stale>

    static uint8_t first_pair_logged = 0; /* диагностический лог первой пары */

    static uint8_t first_bq_logged = 0; /* однократный лог первой постановки B */
    if(pending_B){
 8017030:	4ba3      	ldr	r3, [pc, #652]	@ (80172c0 <Vendor_Stream_Task+0x838>)
 8017032:	781b      	ldrb	r3, [r3, #0]
 8017034:	b2db      	uxtb	r3, r3
 8017036:	2b00      	cmp	r3, #0
 8017038:	f000 8206 	beq.w	8017448 <Vendor_Stream_Task+0x9c0>
        /* Гарантируем, что текущая пара действительно подготовлена: если A ещё не готов (FB_FILL) — соберём пару сейчас. */
        ChanFrame *fA_pre = &g_frames[pair_send_idx][0];
 801703c:	4ba1      	ldr	r3, [pc, #644]	@ (80172c4 <Vendor_Stream_Task+0x83c>)
 801703e:	781b      	ldrb	r3, [r3, #0]
 8017040:	461a      	mov	r2, r3
 8017042:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017046:	fb02 f303 	mul.w	r3, r2, r3
 801704a:	4a9f      	ldr	r2, [pc, #636]	@ (80172c8 <Vendor_Stream_Task+0x840>)
 801704c:	4413      	add	r3, r2
 801704e:	673b      	str	r3, [r7, #112]	@ 0x70
        if(fA_pre->st == FB_FILL && !vnd_ep_busy){ vnd_prepare_pair(); }
 8017050:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017052:	781b      	ldrb	r3, [r3, #0]
 8017054:	b2db      	uxtb	r3, r3
 8017056:	2b00      	cmp	r3, #0
 8017058:	d106      	bne.n	8017068 <Vendor_Stream_Task+0x5e0>
 801705a:	4b9c      	ldr	r3, [pc, #624]	@ (80172cc <Vendor_Stream_Task+0x844>)
 801705c:	781b      	ldrb	r3, [r3, #0]
 801705e:	b2db      	uxtb	r3, r3
 8017060:	2b00      	cmp	r3, #0
 8017062:	d101      	bne.n	8017068 <Vendor_Stream_Task+0x5e0>
 8017064:	f7fe fddc 	bl	8015c20 <vnd_prepare_pair>
        ChanFrame *fB = &g_frames[pair_send_idx][1];
 8017068:	4b96      	ldr	r3, [pc, #600]	@ (80172c4 <Vendor_Stream_Task+0x83c>)
 801706a:	781b      	ldrb	r3, [r3, #0]
 801706c:	461a      	mov	r2, r3
 801706e:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017072:	fb02 f303 	mul.w	r3, r2, r3
 8017076:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 801707a:	4a93      	ldr	r2, [pc, #588]	@ (80172c8 <Vendor_Stream_Task+0x840>)
 801707c:	4413      	add	r3, r2
 801707e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        if(fB->st == FB_READY){
 8017080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017082:	781b      	ldrb	r3, [r3, #0]
 8017084:	b2db      	uxtb	r3, r3
 8017086:	2b01      	cmp	r3, #1
 8017088:	d17f      	bne.n	801718a <Vendor_Stream_Task+0x702>
            /* Перед отправкой B корректируем seq, если он отличается от ожидаемого stream_seq */
            if(fB->frame_size >= VND_FRAME_HDR_SIZE){
 801708a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801708c:	88db      	ldrh	r3, [r3, #6]
 801708e:	2b1f      	cmp	r3, #31
 8017090:	d922      	bls.n	80170d8 <Vendor_Stream_Task+0x650>
                vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)fB->buf;
 8017092:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017094:	330c      	adds	r3, #12
 8017096:	663b      	str	r3, [r7, #96]	@ 0x60
                if(hb->magic == 0xA55A && hb->seq != stream_seq){
 8017098:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801709a:	881b      	ldrh	r3, [r3, #0]
 801709c:	b29b      	uxth	r3, r3
 801709e:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80170a2:	4293      	cmp	r3, r2
 80170a4:	d118      	bne.n	80170d8 <Vendor_Stream_Task+0x650>
 80170a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80170a8:	685a      	ldr	r2, [r3, #4]
 80170aa:	4b89      	ldr	r3, [pc, #548]	@ (80172d0 <Vendor_Stream_Task+0x848>)
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	429a      	cmp	r2, r3
 80170b0:	d012      	beq.n	80170d8 <Vendor_Stream_Task+0x650>
                    VND_LOG("PATCH_B_SEQ hdr=%lu -> %lu", (unsigned long)hb->seq, (unsigned long)stream_seq);
 80170b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80170b4:	685b      	ldr	r3, [r3, #4]
 80170b6:	4a86      	ldr	r2, [pc, #536]	@ (80172d0 <Vendor_Stream_Task+0x848>)
 80170b8:	6812      	ldr	r2, [r2, #0]
 80170ba:	4619      	mov	r1, r3
 80170bc:	4885      	ldr	r0, [pc, #532]	@ (80172d4 <Vendor_Stream_Task+0x84c>)
 80170be:	f003 fc6f 	bl	801a9a0 <iprintf>
 80170c2:	4885      	ldr	r0, [pc, #532]	@ (80172d8 <Vendor_Stream_Task+0x850>)
 80170c4:	f003 fcd4 	bl	801aa70 <puts>
                    hb->seq = stream_seq; fB->seq = stream_seq;
 80170c8:	4b81      	ldr	r3, [pc, #516]	@ (80172d0 <Vendor_Stream_Task+0x848>)
 80170ca:	681a      	ldr	r2, [r3, #0]
 80170cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80170ce:	605a      	str	r2, [r3, #4]
 80170d0:	4b7f      	ldr	r3, [pc, #508]	@ (80172d0 <Vendor_Stream_Task+0x848>)
 80170d2:	681a      	ldr	r2, [r3, #0]
 80170d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80170d6:	609a      	str	r2, [r3, #8]
                }
            }
            USBD_StatusTypeDef rcB = vnd_transmit_frame(fB->buf, fB->frame_size, 0, 0, "ADC1");
 80170d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80170da:	f103 000c 	add.w	r0, r3, #12
 80170de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80170e0:	88d9      	ldrh	r1, [r3, #6]
 80170e2:	4b7e      	ldr	r3, [pc, #504]	@ (80172dc <Vendor_Stream_Task+0x854>)
 80170e4:	9300      	str	r3, [sp, #0]
 80170e6:	2300      	movs	r3, #0
 80170e8:	2200      	movs	r2, #0
 80170ea:	f7ff f849 	bl	8016180 <vnd_transmit_frame>
 80170ee:	4603      	mov	r3, r0
 80170f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
            if (rcB == USBD_OK) {
 80170f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d117      	bne.n	801712c <Vendor_Stream_Task+0x6a4>
                if(!first_bq_logged){ first_bq_logged = 1; VND_LOG("FIRST_B queued size=%u", (unsigned)fB->frame_size); }
 80170fc:	4b78      	ldr	r3, [pc, #480]	@ (80172e0 <Vendor_Stream_Task+0x858>)
 80170fe:	781b      	ldrb	r3, [r3, #0]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d10b      	bne.n	801711c <Vendor_Stream_Task+0x694>
 8017104:	4b76      	ldr	r3, [pc, #472]	@ (80172e0 <Vendor_Stream_Task+0x858>)
 8017106:	2201      	movs	r2, #1
 8017108:	701a      	strb	r2, [r3, #0]
 801710a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801710c:	88db      	ldrh	r3, [r3, #6]
 801710e:	4619      	mov	r1, r3
 8017110:	4874      	ldr	r0, [pc, #464]	@ (80172e4 <Vendor_Stream_Task+0x85c>)
 8017112:	f003 fc45 	bl	801a9a0 <iprintf>
 8017116:	4870      	ldr	r0, [pc, #448]	@ (80172d8 <Vendor_Stream_Task+0x850>)
 8017118:	f003 fcaa 	bl	801aa70 <puts>
                fB->st = FB_SENDING; sending_channel = 1; return;
 801711c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801711e:	2202      	movs	r2, #2
 8017120:	701a      	strb	r2, [r3, #0]
 8017122:	4b71      	ldr	r3, [pc, #452]	@ (80172e8 <Vendor_Stream_Task+0x860>)
 8017124:	2201      	movs	r2, #1
 8017126:	701a      	strb	r2, [r3, #0]
 8017128:	f000 bc0c 	b.w	8017944 <Vendor_Stream_Task+0xebc>
            } else if (rcB == USBD_BUSY) {
 801712c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8017130:	2b01      	cmp	r3, #1
 8017132:	d120      	bne.n	8017176 <Vendor_Stream_Task+0x6ee>
                static uint32_t b_busy_retry = 0; b_busy_retry++;
 8017134:	4b6d      	ldr	r3, [pc, #436]	@ (80172ec <Vendor_Stream_Task+0x864>)
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	3301      	adds	r3, #1
 801713a:	4a6c      	ldr	r2, [pc, #432]	@ (80172ec <Vendor_Stream_Task+0x864>)
 801713c:	6013      	str	r3, [r2, #0]
                if (b_busy_retry == 1 || (b_busy_retry % 10) == 0) {
 801713e:	4b6b      	ldr	r3, [pc, #428]	@ (80172ec <Vendor_Stream_Task+0x864>)
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	2b01      	cmp	r3, #1
 8017144:	d00d      	beq.n	8017162 <Vendor_Stream_Task+0x6da>
 8017146:	4b69      	ldr	r3, [pc, #420]	@ (80172ec <Vendor_Stream_Task+0x864>)
 8017148:	6819      	ldr	r1, [r3, #0]
 801714a:	4b69      	ldr	r3, [pc, #420]	@ (80172f0 <Vendor_Stream_Task+0x868>)
 801714c:	fba3 2301 	umull	r2, r3, r3, r1
 8017150:	08da      	lsrs	r2, r3, #3
 8017152:	4613      	mov	r3, r2
 8017154:	009b      	lsls	r3, r3, #2
 8017156:	4413      	add	r3, r2
 8017158:	005b      	lsls	r3, r3, #1
 801715a:	1aca      	subs	r2, r1, r3
 801715c:	2a00      	cmp	r2, #0
 801715e:	f040 80dd 	bne.w	801731c <Vendor_Stream_Task+0x894>
                    VND_LOG("B_BUSY_RETRY cnt=%lu", (unsigned long)b_busy_retry);
 8017162:	4b62      	ldr	r3, [pc, #392]	@ (80172ec <Vendor_Stream_Task+0x864>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	4619      	mov	r1, r3
 8017168:	4862      	ldr	r0, [pc, #392]	@ (80172f4 <Vendor_Stream_Task+0x86c>)
 801716a:	f003 fc19 	bl	801a9a0 <iprintf>
 801716e:	485a      	ldr	r0, [pc, #360]	@ (80172d8 <Vendor_Stream_Task+0x850>)
 8017170:	f003 fc7e 	bl	801aa70 <puts>
 8017174:	e0d2      	b.n	801731c <Vendor_Stream_Task+0x894>
                }
                /* оставляем кадр в READY и попробуем позже */
            } else {
                VND_LOG("B_TX_FAIL rc=%d", (int)rcB);
 8017176:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801717a:	4619      	mov	r1, r3
 801717c:	485e      	ldr	r0, [pc, #376]	@ (80172f8 <Vendor_Stream_Task+0x870>)
 801717e:	f003 fc0f 	bl	801a9a0 <iprintf>
 8017182:	4855      	ldr	r0, [pc, #340]	@ (80172d8 <Vendor_Stream_Task+0x850>)
 8017184:	f003 fc74 	bl	801aa70 <puts>
 8017188:	e0c8      	b.n	801731c <Vendor_Stream_Task+0x894>
            }
        } else {
            /* Диагностируем, почему ждём B: выводим однократно переход в нестандартное состояние */
            static uint32_t last_log_ms = 0;
            uint32_t now_ms = HAL_GetTick();
 801718a:	f7ed fae5 	bl	8004758 <HAL_GetTick>
 801718e:	66b8      	str	r0, [r7, #104]	@ 0x68
            if(now_ms - last_log_ms > 200){
 8017190:	4b5a      	ldr	r3, [pc, #360]	@ (80172fc <Vendor_Stream_Task+0x874>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8017196:	1ad3      	subs	r3, r2, r3
 8017198:	2bc8      	cmp	r3, #200	@ 0xc8
 801719a:	d91a      	bls.n	80171d2 <Vendor_Stream_Task+0x74a>
                VND_LOG("WAIT_B st=%u pair_send=%u fill_idx=%u seq=%lu cur_seq=%lu", (unsigned)fB->st, (unsigned)pair_send_idx, (unsigned)pair_fill_idx, (unsigned long)fB->seq, (unsigned long)stream_seq);
 801719c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801719e:	781b      	ldrb	r3, [r3, #0]
 80171a0:	b2db      	uxtb	r3, r3
 80171a2:	4619      	mov	r1, r3
 80171a4:	4b47      	ldr	r3, [pc, #284]	@ (80172c4 <Vendor_Stream_Task+0x83c>)
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	4618      	mov	r0, r3
 80171aa:	4b55      	ldr	r3, [pc, #340]	@ (8017300 <Vendor_Stream_Task+0x878>)
 80171ac:	781b      	ldrb	r3, [r3, #0]
 80171ae:	461c      	mov	r4, r3
 80171b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80171b2:	689b      	ldr	r3, [r3, #8]
 80171b4:	4a46      	ldr	r2, [pc, #280]	@ (80172d0 <Vendor_Stream_Task+0x848>)
 80171b6:	6812      	ldr	r2, [r2, #0]
 80171b8:	9201      	str	r2, [sp, #4]
 80171ba:	9300      	str	r3, [sp, #0]
 80171bc:	4623      	mov	r3, r4
 80171be:	4602      	mov	r2, r0
 80171c0:	4850      	ldr	r0, [pc, #320]	@ (8017304 <Vendor_Stream_Task+0x87c>)
 80171c2:	f003 fbed 	bl	801a9a0 <iprintf>
 80171c6:	4844      	ldr	r0, [pc, #272]	@ (80172d8 <Vendor_Stream_Task+0x850>)
 80171c8:	f003 fc52 	bl	801aa70 <puts>
                last_log_ms = now_ms;
 80171cc:	4a4b      	ldr	r2, [pc, #300]	@ (80172fc <Vendor_Stream_Task+0x874>)
 80171ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80171d0:	6013      	str	r3, [r2, #0]
            }
            /* Watchdog B: если B уже в полёте и нет TxCplt слишком долго — форсируем завершение пары */
            if(fB->st == FB_SENDING && (now_ms - vnd_last_tx_start_ms) > 150){
 80171d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80171d4:	781b      	ldrb	r3, [r3, #0]
 80171d6:	b2db      	uxtb	r3, r3
 80171d8:	2b02      	cmp	r3, #2
 80171da:	f040 809f 	bne.w	801731c <Vendor_Stream_Task+0x894>
 80171de:	4b4a      	ldr	r3, [pc, #296]	@ (8017308 <Vendor_Stream_Task+0x880>)
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80171e4:	1ad3      	subs	r3, r2, r3
 80171e6:	2b96      	cmp	r3, #150	@ 0x96
 80171e8:	f240 8098 	bls.w	801731c <Vendor_Stream_Task+0x894>
                /* Не закрываем пару! Снимаем busy, нейтрализуем старую мета и переотправляем B */
                extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 80171ec:	f002 f872 	bl	80192d4 <USBD_VND_ForceTxIdle>
                vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0;
 80171f0:	4b36      	ldr	r3, [pc, #216]	@ (80172cc <Vendor_Stream_Task+0x844>)
 80171f2:	2200      	movs	r2, #0
 80171f4:	701a      	strb	r2, [r3, #0]
 80171f6:	4b45      	ldr	r3, [pc, #276]	@ (801730c <Vendor_Stream_Task+0x884>)
 80171f8:	2201      	movs	r2, #1
 80171fa:	701a      	strb	r2, [r3, #0]
 80171fc:	4b44      	ldr	r3, [pc, #272]	@ (8017310 <Vendor_Stream_Task+0x888>)
 80171fe:	2200      	movs	r2, #0
 8017200:	701a      	strb	r2, [r3, #0]
                vnd_meta_neutralize(0x02, g_frames[pair_send_idx][1].seq);
 8017202:	4b30      	ldr	r3, [pc, #192]	@ (80172c4 <Vendor_Stream_Task+0x83c>)
 8017204:	781b      	ldrb	r3, [r3, #0]
 8017206:	4619      	mov	r1, r3
 8017208:	4a2f      	ldr	r2, [pc, #188]	@ (80172c8 <Vendor_Stream_Task+0x840>)
 801720a:	f241 5398 	movw	r3, #5528	@ 0x1598
 801720e:	fb01 f303 	mul.w	r3, r1, r3
 8017212:	4413      	add	r3, r2
 8017214:	f603 23d4 	addw	r3, r3, #2772	@ 0xad4
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	4619      	mov	r1, r3
 801721c:	2002      	movs	r0, #2
 801721e:	f7fe f83f 	bl	80152a0 <vnd_meta_neutralize>
                g_frames[pair_send_idx][1].st = FB_READY; sending_channel = 0xFF;
 8017222:	4b28      	ldr	r3, [pc, #160]	@ (80172c4 <Vendor_Stream_Task+0x83c>)
 8017224:	781b      	ldrb	r3, [r3, #0]
 8017226:	4619      	mov	r1, r3
 8017228:	4a27      	ldr	r2, [pc, #156]	@ (80172c8 <Vendor_Stream_Task+0x840>)
 801722a:	f241 5398 	movw	r3, #5528	@ 0x1598
 801722e:	fb01 f303 	mul.w	r3, r1, r3
 8017232:	4413      	add	r3, r2
 8017234:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8017238:	2201      	movs	r2, #1
 801723a:	701a      	strb	r2, [r3, #0]
 801723c:	4b2a      	ldr	r3, [pc, #168]	@ (80172e8 <Vendor_Stream_Task+0x860>)
 801723e:	22ff      	movs	r2, #255	@ 0xff
 8017240:	701a      	strb	r2, [r3, #0]
                VND_LOG("B_TXCPLT_WD (>150ms) -> retry B seq=%lu", (unsigned long)g_frames[pair_send_idx][1].seq);
 8017242:	4b20      	ldr	r3, [pc, #128]	@ (80172c4 <Vendor_Stream_Task+0x83c>)
 8017244:	781b      	ldrb	r3, [r3, #0]
 8017246:	4619      	mov	r1, r3
 8017248:	4a1f      	ldr	r2, [pc, #124]	@ (80172c8 <Vendor_Stream_Task+0x840>)
 801724a:	f241 5398 	movw	r3, #5528	@ 0x1598
 801724e:	fb01 f303 	mul.w	r3, r1, r3
 8017252:	4413      	add	r3, r2
 8017254:	f603 23d4 	addw	r3, r3, #2772	@ 0xad4
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	4619      	mov	r1, r3
 801725c:	482d      	ldr	r0, [pc, #180]	@ (8017314 <Vendor_Stream_Task+0x88c>)
 801725e:	f003 fb9f 	bl	801a9a0 <iprintf>
 8017262:	481d      	ldr	r0, [pc, #116]	@ (80172d8 <Vendor_Stream_Task+0x850>)
 8017264:	f003 fc04 	bl	801aa70 <puts>
                /* Попробуем сразу переотправить */
                ChanFrame *fB2 = &g_frames[pair_send_idx][1];
 8017268:	4b16      	ldr	r3, [pc, #88]	@ (80172c4 <Vendor_Stream_Task+0x83c>)
 801726a:	781b      	ldrb	r3, [r3, #0]
 801726c:	461a      	mov	r2, r3
 801726e:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017272:	fb02 f303 	mul.w	r3, r2, r3
 8017276:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 801727a:	4a13      	ldr	r2, [pc, #76]	@ (80172c8 <Vendor_Stream_Task+0x840>)
 801727c:	4413      	add	r3, r2
 801727e:	667b      	str	r3, [r7, #100]	@ 0x64
                if(!vnd_ep_busy && fB2->st == FB_READY){
 8017280:	4b12      	ldr	r3, [pc, #72]	@ (80172cc <Vendor_Stream_Task+0x844>)
 8017282:	781b      	ldrb	r3, [r3, #0]
 8017284:	b2db      	uxtb	r3, r3
 8017286:	2b00      	cmp	r3, #0
 8017288:	d148      	bne.n	801731c <Vendor_Stream_Task+0x894>
 801728a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801728c:	781b      	ldrb	r3, [r3, #0]
 801728e:	b2db      	uxtb	r3, r3
 8017290:	2b01      	cmp	r3, #1
 8017292:	d143      	bne.n	801731c <Vendor_Stream_Task+0x894>
                    if(vnd_transmit_frame(fB2->buf, fB2->frame_size, 0, 0, "ADC1-RETRY") == USBD_OK){ fB2->st = FB_SENDING; sending_channel = 1; return; }
 8017294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017296:	f103 000c 	add.w	r0, r3, #12
 801729a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801729c:	88d9      	ldrh	r1, [r3, #6]
 801729e:	4b1e      	ldr	r3, [pc, #120]	@ (8017318 <Vendor_Stream_Task+0x890>)
 80172a0:	9300      	str	r3, [sp, #0]
 80172a2:	2300      	movs	r3, #0
 80172a4:	2200      	movs	r2, #0
 80172a6:	f7fe ff6b 	bl	8016180 <vnd_transmit_frame>
 80172aa:	4603      	mov	r3, r0
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d135      	bne.n	801731c <Vendor_Stream_Task+0x894>
 80172b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80172b2:	2202      	movs	r2, #2
 80172b4:	701a      	strb	r2, [r3, #0]
 80172b6:	4b0c      	ldr	r3, [pc, #48]	@ (80172e8 <Vendor_Stream_Task+0x860>)
 80172b8:	2201      	movs	r2, #1
 80172ba:	701a      	strb	r2, [r3, #0]
 80172bc:	e342      	b.n	8017944 <Vendor_Stream_Task+0xebc>
 80172be:	bf00      	nop
 80172c0:	24018a32 	.word	0x24018a32
 80172c4:	24018a31 	.word	0x24018a31
 80172c8:	2400dd70 	.word	0x2400dd70
 80172cc:	2400c5ec 	.word	0x2400c5ec
 80172d0:	2400c5dc 	.word	0x2400c5dc
 80172d4:	0801cee8 	.word	0x0801cee8
 80172d8:	0801c9c8 	.word	0x0801c9c8
 80172dc:	0801cccc 	.word	0x0801cccc
 80172e0:	24018aad 	.word	0x24018aad
 80172e4:	0801cf0c 	.word	0x0801cf0c
 80172e8:	2400004c 	.word	0x2400004c
 80172ec:	24018ab0 	.word	0x24018ab0
 80172f0:	cccccccd 	.word	0xcccccccd
 80172f4:	0801cf2c 	.word	0x0801cf2c
 80172f8:	0801cf48 	.word	0x0801cf48
 80172fc:	24018ab4 	.word	0x24018ab4
 8017300:	24018a30 	.word	0x24018a30
 8017304:	0801cf60 	.word	0x0801cf60
 8017308:	2400c654 	.word	0x2400c654
 801730c:	2400003b 	.word	0x2400003b
 8017310:	2400c5ed 	.word	0x2400c5ed
 8017314:	0801cfa0 	.word	0x0801cfa0
 8017318:	0801cfd0 	.word	0x0801cfd0
            }
            /* Не синтезируем B: ждём реальные данные, пока EP свободен */
        }
        /* Дополнительный watchdog зависшего pending_B, даже если fB->st перешёл из READY в FILL из-за сброса */
        do {
            uint32_t now_ms2 = HAL_GetTick();
 801731c:	f7ed fa1c 	bl	8004758 <HAL_GetTick>
 8017320:	65b8      	str	r0, [r7, #88]	@ 0x58
            if(!vnd_ep_busy && sending_channel == 0xFF && (now_ms2 - vnd_last_txcplt_ms) > 40){
 8017322:	4b97      	ldr	r3, [pc, #604]	@ (8017580 <Vendor_Stream_Task+0xaf8>)
 8017324:	781b      	ldrb	r3, [r3, #0]
 8017326:	b2db      	uxtb	r3, r3
 8017328:	2b00      	cmp	r3, #0
 801732a:	f040 8153 	bne.w	80175d4 <Vendor_Stream_Task+0xb4c>
 801732e:	4b95      	ldr	r3, [pc, #596]	@ (8017584 <Vendor_Stream_Task+0xafc>)
 8017330:	781b      	ldrb	r3, [r3, #0]
 8017332:	2bff      	cmp	r3, #255	@ 0xff
 8017334:	f040 814e 	bne.w	80175d4 <Vendor_Stream_Task+0xb4c>
 8017338:	4b93      	ldr	r3, [pc, #588]	@ (8017588 <Vendor_Stream_Task+0xb00>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801733e:	1ad3      	subs	r3, r2, r3
 8017340:	2b28      	cmp	r3, #40	@ 0x28
 8017342:	f240 8147 	bls.w	80175d4 <Vendor_Stream_Task+0xb4c>
                ChanFrame *fBchk = &g_frames[pair_send_idx][1];
 8017346:	4b91      	ldr	r3, [pc, #580]	@ (801758c <Vendor_Stream_Task+0xb04>)
 8017348:	781b      	ldrb	r3, [r3, #0]
 801734a:	461a      	mov	r2, r3
 801734c:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017350:	fb02 f303 	mul.w	r3, r2, r3
 8017354:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8017358:	4a8d      	ldr	r2, [pc, #564]	@ (8017590 <Vendor_Stream_Task+0xb08>)
 801735a:	4413      	add	r3, r2
 801735c:	657b      	str	r3, [r7, #84]	@ 0x54
                ChanFrame *fAchk = &g_frames[pair_send_idx][0];
 801735e:	4b8b      	ldr	r3, [pc, #556]	@ (801758c <Vendor_Stream_Task+0xb04>)
 8017360:	781b      	ldrb	r3, [r3, #0]
 8017362:	461a      	mov	r2, r3
 8017364:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017368:	fb02 f303 	mul.w	r3, r2, r3
 801736c:	4a88      	ldr	r2, [pc, #544]	@ (8017590 <Vendor_Stream_Task+0xb08>)
 801736e:	4413      	add	r3, r2
 8017370:	653b      	str	r3, [r7, #80]	@ 0x50
                if(fAchk->st != FB_SENDING && fBchk->st != FB_SENDING){
 8017372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017374:	781b      	ldrb	r3, [r3, #0]
 8017376:	b2db      	uxtb	r3, r3
 8017378:	2b02      	cmp	r3, #2
 801737a:	f000 812b 	beq.w	80175d4 <Vendor_Stream_Task+0xb4c>
 801737e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	b2db      	uxtb	r3, r3
 8017384:	2b02      	cmp	r3, #2
 8017386:	f000 8125 	beq.w	80175d4 <Vendor_Stream_Task+0xb4c>
                    if(fBchk->st == FB_READY){
 801738a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801738c:	781b      	ldrb	r3, [r3, #0]
 801738e:	b2db      	uxtb	r3, r3
 8017390:	2b01      	cmp	r3, #1
 8017392:	d142      	bne.n	801741a <Vendor_Stream_Task+0x992>
                        /* Перед отправкой по вотчдогу также поправим seq при необходимости */
                        if(fBchk->frame_size >= VND_FRAME_HDR_SIZE){
 8017394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017396:	88db      	ldrh	r3, [r3, #6]
 8017398:	2b1f      	cmp	r3, #31
 801739a:	d920      	bls.n	80173de <Vendor_Stream_Task+0x956>
                            vnd_frame_hdr_t *hb2 = (vnd_frame_hdr_t*)fBchk->buf;
 801739c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801739e:	330c      	adds	r3, #12
 80173a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                            if(hb2->magic == 0xA55A && hb2->seq != stream_seq){ hb2->seq = stream_seq; fBchk->seq = stream_seq; VND_LOG("PATCH_B_SEQ_WDG->%lu", (unsigned long)stream_seq); }
 80173a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173a4:	881b      	ldrh	r3, [r3, #0]
 80173a6:	b29b      	uxth	r3, r3
 80173a8:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80173ac:	4293      	cmp	r3, r2
 80173ae:	d116      	bne.n	80173de <Vendor_Stream_Task+0x956>
 80173b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173b2:	685a      	ldr	r2, [r3, #4]
 80173b4:	4b77      	ldr	r3, [pc, #476]	@ (8017594 <Vendor_Stream_Task+0xb0c>)
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	429a      	cmp	r2, r3
 80173ba:	d010      	beq.n	80173de <Vendor_Stream_Task+0x956>
 80173bc:	4b75      	ldr	r3, [pc, #468]	@ (8017594 <Vendor_Stream_Task+0xb0c>)
 80173be:	681a      	ldr	r2, [r3, #0]
 80173c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173c2:	605a      	str	r2, [r3, #4]
 80173c4:	4b73      	ldr	r3, [pc, #460]	@ (8017594 <Vendor_Stream_Task+0xb0c>)
 80173c6:	681a      	ldr	r2, [r3, #0]
 80173c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173ca:	609a      	str	r2, [r3, #8]
 80173cc:	4b71      	ldr	r3, [pc, #452]	@ (8017594 <Vendor_Stream_Task+0xb0c>)
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	4619      	mov	r1, r3
 80173d2:	4871      	ldr	r0, [pc, #452]	@ (8017598 <Vendor_Stream_Task+0xb10>)
 80173d4:	f003 fae4 	bl	801a9a0 <iprintf>
 80173d8:	4870      	ldr	r0, [pc, #448]	@ (801759c <Vendor_Stream_Task+0xb14>)
 80173da:	f003 fb49 	bl	801aa70 <puts>
                        }
                        if (vnd_transmit_frame(fBchk->buf, fBchk->frame_size, 0, 0, "ADC1-WDG") == USBD_OK){
 80173de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173e0:	f103 000c 	add.w	r0, r3, #12
 80173e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173e6:	88d9      	ldrh	r1, [r3, #6]
 80173e8:	4b6d      	ldr	r3, [pc, #436]	@ (80175a0 <Vendor_Stream_Task+0xb18>)
 80173ea:	9300      	str	r3, [sp, #0]
 80173ec:	2300      	movs	r3, #0
 80173ee:	2200      	movs	r2, #0
 80173f0:	f7fe fec6 	bl	8016180 <vnd_transmit_frame>
 80173f4:	4603      	mov	r3, r0
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d10f      	bne.n	801741a <Vendor_Stream_Task+0x992>
                            fBchk->st = FB_SENDING; sending_channel = 1; VND_LOG("PEND_B_WDG_RETRY len=%u", (unsigned)fBchk->frame_size); return; }
 80173fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173fc:	2202      	movs	r2, #2
 80173fe:	701a      	strb	r2, [r3, #0]
 8017400:	4b60      	ldr	r3, [pc, #384]	@ (8017584 <Vendor_Stream_Task+0xafc>)
 8017402:	2201      	movs	r2, #1
 8017404:	701a      	strb	r2, [r3, #0]
 8017406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017408:	88db      	ldrh	r3, [r3, #6]
 801740a:	4619      	mov	r1, r3
 801740c:	4865      	ldr	r0, [pc, #404]	@ (80175a4 <Vendor_Stream_Task+0xb1c>)
 801740e:	f003 fac7 	bl	801a9a0 <iprintf>
 8017412:	4862      	ldr	r0, [pc, #392]	@ (801759c <Vendor_Stream_Task+0xb14>)
 8017414:	f003 fb2c 	bl	801aa70 <puts>
 8017418:	e294      	b.n	8017944 <Vendor_Stream_Task+0xebc>
                    }
                    /* Строгий порядок A→B: НЕ сбрасываем pending_B.
                       Ждём или синтезируем B выше (см. B_SYNTH_READY), чтобы закрыть пару. */
                    if(fBchk->st != FB_READY){
 801741a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801741c:	781b      	ldrb	r3, [r3, #0]
 801741e:	b2db      	uxtb	r3, r3
 8017420:	2b01      	cmp	r3, #1
 8017422:	f000 80d7 	beq.w	80175d4 <Vendor_Stream_Task+0xb4c>
                        VND_LOG("PEND_B_WDG_WAIT (a_st=%u b_st=%u seq=%lu)", (unsigned)fAchk->st, (unsigned)fBchk->st, (unsigned long)stream_seq);
 8017426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017428:	781b      	ldrb	r3, [r3, #0]
 801742a:	b2db      	uxtb	r3, r3
 801742c:	4619      	mov	r1, r3
 801742e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017430:	781b      	ldrb	r3, [r3, #0]
 8017432:	b2db      	uxtb	r3, r3
 8017434:	461a      	mov	r2, r3
 8017436:	4b57      	ldr	r3, [pc, #348]	@ (8017594 <Vendor_Stream_Task+0xb0c>)
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	485b      	ldr	r0, [pc, #364]	@ (80175a8 <Vendor_Stream_Task+0xb20>)
 801743c:	f003 fab0 	bl	801a9a0 <iprintf>
 8017440:	4856      	ldr	r0, [pc, #344]	@ (801759c <Vendor_Stream_Task+0xb14>)
 8017442:	f003 fb15 	bl	801aa70 <puts>
 8017446:	e0c5      	b.n	80175d4 <Vendor_Stream_Task+0xb4c>
                    }
                }
            }
        } while(0);
    } else {
    ChanFrame *fA = &g_frames[pair_send_idx][0];
 8017448:	4b50      	ldr	r3, [pc, #320]	@ (801758c <Vendor_Stream_Task+0xb04>)
 801744a:	781b      	ldrb	r3, [r3, #0]
 801744c:	461a      	mov	r2, r3
 801744e:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017452:	fb02 f303 	mul.w	r3, r2, r3
 8017456:	4a4e      	ldr	r2, [pc, #312]	@ (8017590 <Vendor_Stream_Task+0xb08>)
 8017458:	4413      	add	r3, r2
 801745a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        /* Watchdog: если A завис в SENDING и долго нет TxCplt — считаем A завершённым и переходим к B */
        do {
            uint32_t now_ms = HAL_GetTick();
 801745e:	f7ed f97b 	bl	8004758 <HAL_GetTick>
 8017462:	6778      	str	r0, [r7, #116]	@ 0x74
            if (fA->st == FB_SENDING && (now_ms - vnd_last_tx_start_ms) > 120) {
 8017464:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017468:	781b      	ldrb	r3, [r3, #0]
 801746a:	b2db      	uxtb	r3, r3
 801746c:	2b02      	cmp	r3, #2
 801746e:	d12e      	bne.n	80174ce <Vendor_Stream_Task+0xa46>
 8017470:	4b4e      	ldr	r3, [pc, #312]	@ (80175ac <Vendor_Stream_Task+0xb24>)
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8017476:	1ad3      	subs	r3, r2, r3
 8017478:	2b78      	cmp	r3, #120	@ 0x78
 801747a:	d928      	bls.n	80174ce <Vendor_Stream_Task+0xa46>
                /* Не считаем A завершённым — лишь снимаем busy, нейтрализуем старую мета и открываем ожидание B */
                VND_LOG("A_TXCPLT_WD (>120ms) -> open pending_B, neutralize A meta, continue");
 801747c:	484c      	ldr	r0, [pc, #304]	@ (80175b0 <Vendor_Stream_Task+0xb28>)
 801747e:	f003 fa8f 	bl	801a9a0 <iprintf>
 8017482:	4846      	ldr	r0, [pc, #280]	@ (801759c <Vendor_Stream_Task+0xb14>)
 8017484:	f003 faf4 	bl	801aa70 <puts>
                extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 8017488:	f001 ff24 	bl	80192d4 <USBD_VND_ForceTxIdle>
                vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0; sending_channel = 0xFF;
 801748c:	4b3c      	ldr	r3, [pc, #240]	@ (8017580 <Vendor_Stream_Task+0xaf8>)
 801748e:	2200      	movs	r2, #0
 8017490:	701a      	strb	r2, [r3, #0]
 8017492:	4b48      	ldr	r3, [pc, #288]	@ (80175b4 <Vendor_Stream_Task+0xb2c>)
 8017494:	2201      	movs	r2, #1
 8017496:	701a      	strb	r2, [r3, #0]
 8017498:	4b47      	ldr	r3, [pc, #284]	@ (80175b8 <Vendor_Stream_Task+0xb30>)
 801749a:	2200      	movs	r2, #0
 801749c:	701a      	strb	r2, [r3, #0]
 801749e:	4b39      	ldr	r3, [pc, #228]	@ (8017584 <Vendor_Stream_Task+0xafc>)
 80174a0:	22ff      	movs	r2, #255	@ 0xff
 80174a2:	701a      	strb	r2, [r3, #0]
                vnd_meta_neutralize(0x01, g_frames[pair_send_idx][0].seq);
 80174a4:	4b39      	ldr	r3, [pc, #228]	@ (801758c <Vendor_Stream_Task+0xb04>)
 80174a6:	781b      	ldrb	r3, [r3, #0]
 80174a8:	4619      	mov	r1, r3
 80174aa:	4a39      	ldr	r2, [pc, #228]	@ (8017590 <Vendor_Stream_Task+0xb08>)
 80174ac:	f241 5398 	movw	r3, #5528	@ 0x1598
 80174b0:	fb01 f303 	mul.w	r3, r1, r3
 80174b4:	4413      	add	r3, r2
 80174b6:	3308      	adds	r3, #8
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	4619      	mov	r1, r3
 80174bc:	2001      	movs	r0, #1
 80174be:	f7fd feef 	bl	80152a0 <vnd_meta_neutralize>
                pending_B = 1; pending_B_since_ms = now_ms;
 80174c2:	4b3e      	ldr	r3, [pc, #248]	@ (80175bc <Vendor_Stream_Task+0xb34>)
 80174c4:	2201      	movs	r2, #1
 80174c6:	701a      	strb	r2, [r3, #0]
 80174c8:	4a3d      	ldr	r2, [pc, #244]	@ (80175c0 <Vendor_Stream_Task+0xb38>)
 80174ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80174cc:	6013      	str	r3, [r2, #0]
            }
        } while(0);
        if(fA->st != FB_READY){ vnd_prepare_pair(); fA = &g_frames[pair_send_idx][0]; }
 80174ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80174d2:	781b      	ldrb	r3, [r3, #0]
 80174d4:	b2db      	uxtb	r3, r3
 80174d6:	2b01      	cmp	r3, #1
 80174d8:	d00c      	beq.n	80174f4 <Vendor_Stream_Task+0xa6c>
 80174da:	f7fe fba1 	bl	8015c20 <vnd_prepare_pair>
 80174de:	4b2b      	ldr	r3, [pc, #172]	@ (801758c <Vendor_Stream_Task+0xb04>)
 80174e0:	781b      	ldrb	r3, [r3, #0]
 80174e2:	461a      	mov	r2, r3
 80174e4:	f241 5398 	movw	r3, #5528	@ 0x1598
 80174e8:	fb02 f303 	mul.w	r3, r2, r3
 80174ec:	4a28      	ldr	r2, [pc, #160]	@ (8017590 <Vendor_Stream_Task+0xb08>)
 80174ee:	4413      	add	r3, r2
 80174f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if(fA->st == FB_READY){
 80174f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80174f8:	781b      	ldrb	r3, [r3, #0]
 80174fa:	b2db      	uxtb	r3, r3
 80174fc:	2b01      	cmp	r3, #1
 80174fe:	d169      	bne.n	80175d4 <Vendor_Stream_Task+0xb4c>
            /* Искусственных задержек между кадрами нет: отправляем A сразу при готовности EP и данных */
            /* Отправляем A: в режиме без TEST не проверяем test_in_flight вовсе */
#if VND_DISABLE_TEST
            VND_LOG("TRY_A len=%u hdr_seq=%lu", (unsigned)fA->frame_size, (unsigned long)((vnd_frame_hdr_t*)fA->buf)->seq);
 8017500:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017504:	88db      	ldrh	r3, [r3, #6]
 8017506:	4619      	mov	r1, r3
 8017508:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801750c:	330c      	adds	r3, #12
 801750e:	685b      	ldr	r3, [r3, #4]
 8017510:	461a      	mov	r2, r3
 8017512:	482c      	ldr	r0, [pc, #176]	@ (80175c4 <Vendor_Stream_Task+0xb3c>)
 8017514:	f003 fa44 	bl	801a9a0 <iprintf>
 8017518:	4820      	ldr	r0, [pc, #128]	@ (801759c <Vendor_Stream_Task+0xb14>)
 801751a:	f003 faa9 	bl	801aa70 <puts>
            if (vnd_transmit_frame(fA->buf, fA->frame_size, 0, 0, "ADC0") == USBD_OK) {
 801751e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017522:	f103 000c 	add.w	r0, r3, #12
 8017526:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801752a:	88d9      	ldrh	r1, [r3, #6]
 801752c:	4b26      	ldr	r3, [pc, #152]	@ (80175c8 <Vendor_Stream_Task+0xb40>)
 801752e:	9300      	str	r3, [sp, #0]
 8017530:	2300      	movs	r3, #0
 8017532:	2200      	movs	r2, #0
 8017534:	f7fe fe24 	bl	8016180 <vnd_transmit_frame>
 8017538:	4603      	mov	r3, r0
 801753a:	2b00      	cmp	r3, #0
 801753c:	d14a      	bne.n	80175d4 <Vendor_Stream_Task+0xb4c>
                static uint8_t first_a_logged = 0;
                if(!first_a_logged){ first_a_logged = 1; VND_LOG("FIRST_A queued size=%u", (unsigned)fA->frame_size); }
 801753e:	4b23      	ldr	r3, [pc, #140]	@ (80175cc <Vendor_Stream_Task+0xb44>)
 8017540:	781b      	ldrb	r3, [r3, #0]
 8017542:	2b00      	cmp	r3, #0
 8017544:	d10c      	bne.n	8017560 <Vendor_Stream_Task+0xad8>
 8017546:	4b21      	ldr	r3, [pc, #132]	@ (80175cc <Vendor_Stream_Task+0xb44>)
 8017548:	2201      	movs	r2, #1
 801754a:	701a      	strb	r2, [r3, #0]
 801754c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017550:	88db      	ldrh	r3, [r3, #6]
 8017552:	4619      	mov	r1, r3
 8017554:	481e      	ldr	r0, [pc, #120]	@ (80175d0 <Vendor_Stream_Task+0xb48>)
 8017556:	f003 fa23 	bl	801a9a0 <iprintf>
 801755a:	4810      	ldr	r0, [pc, #64]	@ (801759c <Vendor_Stream_Task+0xb14>)
 801755c:	f003 fa88 	bl	801aa70 <puts>
                fA->st = FB_SENDING; sending_channel = 0;
 8017560:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017564:	2202      	movs	r2, #2
 8017566:	701a      	strb	r2, [r3, #0]
 8017568:	4b06      	ldr	r3, [pc, #24]	@ (8017584 <Vendor_Stream_Task+0xafc>)
 801756a:	2200      	movs	r2, #0
 801756c:	701a      	strb	r2, [r3, #0]
                /* Ранний запрет STAT между A и B: сразу помечаем ожидание B */
                pending_B = 1; pending_B_since_ms = HAL_GetTick();
 801756e:	4b13      	ldr	r3, [pc, #76]	@ (80175bc <Vendor_Stream_Task+0xb34>)
 8017570:	2201      	movs	r2, #1
 8017572:	701a      	strb	r2, [r3, #0]
 8017574:	f7ed f8f0 	bl	8004758 <HAL_GetTick>
 8017578:	4603      	mov	r3, r0
 801757a:	4a11      	ldr	r2, [pc, #68]	@ (80175c0 <Vendor_Stream_Task+0xb38>)
 801757c:	6013      	str	r3, [r2, #0]
                return;
 801757e:	e1e1      	b.n	8017944 <Vendor_Stream_Task+0xebc>
 8017580:	2400c5ec 	.word	0x2400c5ec
 8017584:	2400004c 	.word	0x2400004c
 8017588:	2400c628 	.word	0x2400c628
 801758c:	24018a31 	.word	0x24018a31
 8017590:	2400dd70 	.word	0x2400dd70
 8017594:	2400c5dc 	.word	0x2400c5dc
 8017598:	0801cfdc 	.word	0x0801cfdc
 801759c:	0801c9c8 	.word	0x0801c9c8
 80175a0:	0801cff8 	.word	0x0801cff8
 80175a4:	0801d004 	.word	0x0801d004
 80175a8:	0801d024 	.word	0x0801d024
 80175ac:	2400c654 	.word	0x2400c654
 80175b0:	0801d054 	.word	0x0801d054
 80175b4:	2400003b 	.word	0x2400003b
 80175b8:	2400c5ed 	.word	0x2400c5ed
 80175bc:	24018a32 	.word	0x24018a32
 80175c0:	24018a34 	.word	0x24018a34
 80175c4:	0801d0a0 	.word	0x0801d0a0
 80175c8:	0801ccd4 	.word	0x0801ccd4
 80175cc:	24018ab8 	.word	0x24018ab8
 80175d0:	0801d0c0 	.word	0x0801d0c0
                }
            }
#endif
        }
    }
    if(vnd_tick_flag) vnd_tick_flag = 0;
 80175d4:	4b94      	ldr	r3, [pc, #592]	@ (8017828 <Vendor_Stream_Task+0xda0>)
 80175d6:	781b      	ldrb	r3, [r3, #0]
 80175d8:	b2db      	uxtb	r3, r3
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d002      	beq.n	80175e4 <Vendor_Stream_Task+0xb5c>
 80175de:	4b92      	ldr	r3, [pc, #584]	@ (8017828 <Vendor_Stream_Task+0xda0>)
 80175e0:	2200      	movs	r2, #0
 80175e2:	701a      	strb	r2, [r3, #0]
    if(cur_samples_per_frame == 0 && start_cmd_ms && (now - start_cmd_ms) > VND_DMA_TIMEOUT_MS && !no_dma_status_sent){
 80175e4:	4b91      	ldr	r3, [pc, #580]	@ (801782c <Vendor_Stream_Task+0xda4>)
 80175e6:	881b      	ldrh	r3, [r3, #0]
 80175e8:	b29b      	uxth	r3, r3
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d12e      	bne.n	801764c <Vendor_Stream_Task+0xbc4>
 80175ee:	4b90      	ldr	r3, [pc, #576]	@ (8017830 <Vendor_Stream_Task+0xda8>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d02a      	beq.n	801764c <Vendor_Stream_Task+0xbc4>
 80175f6:	4b8e      	ldr	r3, [pc, #568]	@ (8017830 <Vendor_Stream_Task+0xda8>)
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80175fe:	1ad3      	subs	r3, r2, r3
 8017600:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8017604:	d922      	bls.n	801764c <Vendor_Stream_Task+0xbc4>
 8017606:	4b8b      	ldr	r3, [pc, #556]	@ (8017834 <Vendor_Stream_Task+0xdac>)
 8017608:	781b      	ldrb	r3, [r3, #0]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d11e      	bne.n	801764c <Vendor_Stream_Task+0xbc4>
        adc_stream_debug_t dbg; adc_stream_get_debug(&dbg);
 801760e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8017612:	4618      	mov	r0, r3
 8017614:	f7e9 f8bc 	bl	8000790 <adc_stream_get_debug>
        if(dbg.dma_full0 == dma_snapshot_full0 && dbg.dma_full1 == dma_snapshot_full1){ no_dma_status_sent = 1; if(vnd_last_error == 0) vnd_last_error = 1; VND_LOG("ERR DMA_TIMEOUT"); }
 8017618:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801761a:	4b87      	ldr	r3, [pc, #540]	@ (8017838 <Vendor_Stream_Task+0xdb0>)
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	429a      	cmp	r2, r3
 8017620:	d114      	bne.n	801764c <Vendor_Stream_Task+0xbc4>
 8017622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017624:	4b85      	ldr	r3, [pc, #532]	@ (801783c <Vendor_Stream_Task+0xdb4>)
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	429a      	cmp	r2, r3
 801762a:	d10f      	bne.n	801764c <Vendor_Stream_Task+0xbc4>
 801762c:	4b81      	ldr	r3, [pc, #516]	@ (8017834 <Vendor_Stream_Task+0xdac>)
 801762e:	2201      	movs	r2, #1
 8017630:	701a      	strb	r2, [r3, #0]
 8017632:	4b83      	ldr	r3, [pc, #524]	@ (8017840 <Vendor_Stream_Task+0xdb8>)
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d102      	bne.n	8017640 <Vendor_Stream_Task+0xbb8>
 801763a:	4b81      	ldr	r3, [pc, #516]	@ (8017840 <Vendor_Stream_Task+0xdb8>)
 801763c:	2201      	movs	r2, #1
 801763e:	601a      	str	r2, [r3, #0]
 8017640:	4880      	ldr	r0, [pc, #512]	@ (8017844 <Vendor_Stream_Task+0xdbc>)
 8017642:	f003 f9ad 	bl	801a9a0 <iprintf>
 8017646:	4880      	ldr	r0, [pc, #512]	@ (8017848 <Vendor_Stream_Task+0xdc0>)
 8017648:	f003 fa12 	bl	801aa70 <puts>
    }
    /* Периодическая CDC-статистика по байтам/скорости */
    vnd_cdc_periodic_stats(now);
 801764c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8017650:	f7fd fcac 	bl	8014fac <vnd_cdc_periodic_stats>
    /* Периодическое обновление дисплея LCD с информацией о потоке */
    // stream_display_periodic_update();
    /* Небольшой NAK-watchdog: если давно не было завершений — попросим мягкий ресет класса.
       Он выполнится асинхронно и не блокирует EP0. */
    if((now - vnd_last_txcplt_ms) > 1500){
 8017654:	4b7d      	ldr	r3, [pc, #500]	@ (801784c <Vendor_Stream_Task+0xdc4>)
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801765c:	1ad3      	subs	r3, r2, r3
 801765e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8017662:	4293      	cmp	r3, r2
 8017664:	d90b      	bls.n	801767e <Vendor_Stream_Task+0xbf6>
        extern void USBD_VND_RequestSoftReset(void);
        USBD_VND_RequestSoftReset();
 8017666:	f001 fc53 	bl	8018f10 <USBD_VND_RequestSoftReset>
        vnd_last_txcplt_ms = now; /* предотвратить лавину запросов */
 801766a:	4a78      	ldr	r2, [pc, #480]	@ (801784c <Vendor_Stream_Task+0xdc4>)
 801766c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8017670:	6013      	str	r3, [r2, #0]
        VND_LOG("WDG_SOFT_RESET_REQ");
 8017672:	4877      	ldr	r0, [pc, #476]	@ (8017850 <Vendor_Stream_Task+0xdc8>)
 8017674:	f003 f994 	bl	801a9a0 <iprintf>
 8017678:	4873      	ldr	r0, [pc, #460]	@ (8017848 <Vendor_Stream_Task+0xdc0>)
 801767a:	f003 f9f9 	bl	801aa70 <puts>
    }
    /* Аварийный keepalive тестом — только в диагностике; в полном режиме не посылаем TEST повторно */
    if(!full_mode){
 801767e:	4b75      	ldr	r3, [pc, #468]	@ (8017854 <Vendor_Stream_Task+0xdcc>)
 8017680:	781b      	ldrb	r3, [r3, #0]
 8017682:	b2db      	uxtb	r3, r3
 8017684:	2b00      	cmp	r3, #0
 8017686:	d10c      	bne.n	80176a2 <Vendor_Stream_Task+0xc1a>
        /* В DIAG режиме можно слать keepalive TEST — оставляем как было. */
    if(dbg_tx_cplt == 0 && (now - start_cmd_ms) > 150 && !vnd_ep_busy){
 8017688:	4b73      	ldr	r3, [pc, #460]	@ (8017858 <Vendor_Stream_Task+0xdd0>)
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d108      	bne.n	80176a2 <Vendor_Stream_Task+0xc1a>
 8017690:	4b67      	ldr	r3, [pc, #412]	@ (8017830 <Vendor_Stream_Task+0xda8>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017698:	1ad3      	subs	r3, r2, r3
 801769a:	2b96      	cmp	r3, #150	@ 0x96
 801769c:	d901      	bls.n	80176a2 <Vendor_Stream_Task+0xc1a>
 801769e:	4b6f      	ldr	r3, [pc, #444]	@ (801785c <Vendor_Stream_Task+0xdd4>)
 80176a0:	781b      	ldrb	r3, [r3, #0]
    }
    /* Периодический диагностический лог ранней стадии: пока нет ни одного TXCPLT или отсутствует прогресс */
    do {
        static uint32_t last_diag_ms = 0;
        static uint32_t last_diag_txcplt = 0;
        if(now - last_diag_ms > 200){
 80176a2:	4b6f      	ldr	r3, [pc, #444]	@ (8017860 <Vendor_Stream_Task+0xdd8>)
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80176aa:	1ad3      	subs	r3, r2, r3
 80176ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80176ae:	d95e      	bls.n	801776e <Vendor_Stream_Task+0xce6>
            if(dbg_tx_cplt == 0 || dbg_tx_cplt != last_diag_txcplt){
 80176b0:	4b69      	ldr	r3, [pc, #420]	@ (8017858 <Vendor_Stream_Task+0xdd0>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d005      	beq.n	80176c4 <Vendor_Stream_Task+0xc3c>
 80176b8:	4b67      	ldr	r3, [pc, #412]	@ (8017858 <Vendor_Stream_Task+0xdd0>)
 80176ba:	681a      	ldr	r2, [r3, #0]
 80176bc:	4b69      	ldr	r3, [pc, #420]	@ (8017864 <Vendor_Stream_Task+0xddc>)
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	429a      	cmp	r2, r3
 80176c2:	d050      	beq.n	8017766 <Vendor_Stream_Task+0xcde>
                /* Получим отладочные счётчики DMA, если доступны */
                VND_LOG("DIAG txcplt=%lu test_sent=%u test_in_flight=%u pendB=%u ep_busy=%u inflight=%u ch=%u ackPend=%u seq=%lu prod=%lu sent0=%lu sent1=%lu wr=%lu rd=%lu metaDepth=%u", (unsigned long)dbg_tx_cplt, (unsigned)test_sent, (unsigned)test_in_flight, (unsigned)pending_B, (unsigned)vnd_ep_busy, (unsigned)vnd_inflight, (unsigned)sending_channel, (unsigned)status_ack_pending, (unsigned long)stream_seq, (unsigned long)dbg_produced_seq, (unsigned long)dbg_sent_ch0_total, (unsigned long)dbg_sent_ch1_total, (unsigned long)frame_wr_seq, (unsigned long)frame_rd_seq, (unsigned)vnd_tx_meta_depth());
 80176c4:	4b64      	ldr	r3, [pc, #400]	@ (8017858 <Vendor_Stream_Task+0xdd0>)
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80176ca:	4b67      	ldr	r3, [pc, #412]	@ (8017868 <Vendor_Stream_Task+0xde0>)
 80176cc:	781b      	ldrb	r3, [r3, #0]
 80176ce:	b2db      	uxtb	r3, r3
 80176d0:	4698      	mov	r8, r3
 80176d2:	4b66      	ldr	r3, [pc, #408]	@ (801786c <Vendor_Stream_Task+0xde4>)
 80176d4:	781b      	ldrb	r3, [r3, #0]
 80176d6:	b2db      	uxtb	r3, r3
 80176d8:	4699      	mov	r9, r3
 80176da:	4b65      	ldr	r3, [pc, #404]	@ (8017870 <Vendor_Stream_Task+0xde8>)
 80176dc:	781b      	ldrb	r3, [r3, #0]
 80176de:	b2db      	uxtb	r3, r3
 80176e0:	623b      	str	r3, [r7, #32]
 80176e2:	4b5e      	ldr	r3, [pc, #376]	@ (801785c <Vendor_Stream_Task+0xdd4>)
 80176e4:	781b      	ldrb	r3, [r3, #0]
 80176e6:	b2db      	uxtb	r3, r3
 80176e8:	61fb      	str	r3, [r7, #28]
 80176ea:	4b62      	ldr	r3, [pc, #392]	@ (8017874 <Vendor_Stream_Task+0xdec>)
 80176ec:	781b      	ldrb	r3, [r3, #0]
 80176ee:	b2db      	uxtb	r3, r3
 80176f0:	61bb      	str	r3, [r7, #24]
 80176f2:	4b61      	ldr	r3, [pc, #388]	@ (8017878 <Vendor_Stream_Task+0xdf0>)
 80176f4:	781b      	ldrb	r3, [r3, #0]
 80176f6:	617b      	str	r3, [r7, #20]
 80176f8:	4b60      	ldr	r3, [pc, #384]	@ (801787c <Vendor_Stream_Task+0xdf4>)
 80176fa:	781b      	ldrb	r3, [r3, #0]
 80176fc:	b2db      	uxtb	r3, r3
 80176fe:	613b      	str	r3, [r7, #16]
 8017700:	4b5f      	ldr	r3, [pc, #380]	@ (8017880 <Vendor_Stream_Task+0xdf8>)
 8017702:	681d      	ldr	r5, [r3, #0]
 8017704:	4b5f      	ldr	r3, [pc, #380]	@ (8017884 <Vendor_Stream_Task+0xdfc>)
 8017706:	681e      	ldr	r6, [r3, #0]
 8017708:	4b5f      	ldr	r3, [pc, #380]	@ (8017888 <Vendor_Stream_Task+0xe00>)
 801770a:	681a      	ldr	r2, [r3, #0]
 801770c:	60fa      	str	r2, [r7, #12]
 801770e:	4b5f      	ldr	r3, [pc, #380]	@ (801788c <Vendor_Stream_Task+0xe04>)
 8017710:	6818      	ldr	r0, [r3, #0]
 8017712:	60b8      	str	r0, [r7, #8]
 8017714:	4b5e      	ldr	r3, [pc, #376]	@ (8017890 <Vendor_Stream_Task+0xe08>)
 8017716:	681c      	ldr	r4, [r3, #0]
 8017718:	607c      	str	r4, [r7, #4]
 801771a:	4b5e      	ldr	r3, [pc, #376]	@ (8017894 <Vendor_Stream_Task+0xe0c>)
 801771c:	681c      	ldr	r4, [r3, #0]
 801771e:	f7fd fc9d 	bl	801505c <vnd_tx_meta_depth>
 8017722:	4603      	mov	r3, r0
 8017724:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017726:	940a      	str	r4, [sp, #40]	@ 0x28
 8017728:	687c      	ldr	r4, [r7, #4]
 801772a:	9409      	str	r4, [sp, #36]	@ 0x24
 801772c:	68b8      	ldr	r0, [r7, #8]
 801772e:	9008      	str	r0, [sp, #32]
 8017730:	68fa      	ldr	r2, [r7, #12]
 8017732:	9207      	str	r2, [sp, #28]
 8017734:	9606      	str	r6, [sp, #24]
 8017736:	9505      	str	r5, [sp, #20]
 8017738:	693a      	ldr	r2, [r7, #16]
 801773a:	9204      	str	r2, [sp, #16]
 801773c:	697a      	ldr	r2, [r7, #20]
 801773e:	9203      	str	r2, [sp, #12]
 8017740:	69ba      	ldr	r2, [r7, #24]
 8017742:	9202      	str	r2, [sp, #8]
 8017744:	69fa      	ldr	r2, [r7, #28]
 8017746:	9201      	str	r2, [sp, #4]
 8017748:	6a3a      	ldr	r2, [r7, #32]
 801774a:	9200      	str	r2, [sp, #0]
 801774c:	464b      	mov	r3, r9
 801774e:	4642      	mov	r2, r8
 8017750:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017752:	4851      	ldr	r0, [pc, #324]	@ (8017898 <Vendor_Stream_Task+0xe10>)
 8017754:	f003 f924 	bl	801a9a0 <iprintf>
 8017758:	483b      	ldr	r0, [pc, #236]	@ (8017848 <Vendor_Stream_Task+0xdc0>)
 801775a:	f003 f989 	bl	801aa70 <puts>
                last_diag_txcplt = dbg_tx_cplt;
 801775e:	4b3e      	ldr	r3, [pc, #248]	@ (8017858 <Vendor_Stream_Task+0xdd0>)
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	4a40      	ldr	r2, [pc, #256]	@ (8017864 <Vendor_Stream_Task+0xddc>)
 8017764:	6013      	str	r3, [r2, #0]
            }
            last_diag_ms = now;
 8017766:	4a3e      	ldr	r2, [pc, #248]	@ (8017860 <Vendor_Stream_Task+0xdd8>)
 8017768:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801776c:	6013      	str	r3, [r2, #0]
        }
    } while(0);

    /* Ускоренный watchdog: 600мс без завершений передачи считаем зависанием */
    if(streaming && (now - vnd_last_txcplt_ms) > 600){
 801776e:	4b4b      	ldr	r3, [pc, #300]	@ (801789c <Vendor_Stream_Task+0xe14>)
 8017770:	781b      	ldrb	r3, [r3, #0]
 8017772:	b2db      	uxtb	r3, r3
 8017774:	2b00      	cmp	r3, #0
 8017776:	f000 80e5 	beq.w	8017944 <Vendor_Stream_Task+0xebc>
 801777a:	4b34      	ldr	r3, [pc, #208]	@ (801784c <Vendor_Stream_Task+0xdc4>)
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017782:	1ad3      	subs	r3, r2, r3
 8017784:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8017788:	f240 80dc 	bls.w	8017944 <Vendor_Stream_Task+0xebc>
        VND_LOG("WDG_RESTART (no TXCPLT >600ms) reset test/pendingB");
 801778c:	4844      	ldr	r0, [pc, #272]	@ (80178a0 <Vendor_Stream_Task+0xe18>)
 801778e:	f003 f907 	bl	801a9a0 <iprintf>
 8017792:	482d      	ldr	r0, [pc, #180]	@ (8017848 <Vendor_Stream_Task+0xdc0>)
 8017794:	f003 f96c 	bl	801aa70 <puts>
        /* Полный мягкий сброс внутренней машины, без остановки DMA */
        stream_seq = 0; dbg_produced_seq = 0; cur_samples_per_frame = 0; cur_expected_frame_size = 0;
 8017798:	4b39      	ldr	r3, [pc, #228]	@ (8017880 <Vendor_Stream_Task+0xdf8>)
 801779a:	2200      	movs	r2, #0
 801779c:	601a      	str	r2, [r3, #0]
 801779e:	4b39      	ldr	r3, [pc, #228]	@ (8017884 <Vendor_Stream_Task+0xdfc>)
 80177a0:	2200      	movs	r2, #0
 80177a2:	601a      	str	r2, [r3, #0]
 80177a4:	4b21      	ldr	r3, [pc, #132]	@ (801782c <Vendor_Stream_Task+0xda4>)
 80177a6:	2200      	movs	r2, #0
 80177a8:	801a      	strh	r2, [r3, #0]
 80177aa:	4b3e      	ldr	r3, [pc, #248]	@ (80178a4 <Vendor_Stream_Task+0xe1c>)
 80177ac:	2200      	movs	r2, #0
 80177ae:	801a      	strh	r2, [r3, #0]
        vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0; sending_channel = 0xFF; pending_B = 0; pending_B_since_ms = 0;
 80177b0:	4b2a      	ldr	r3, [pc, #168]	@ (801785c <Vendor_Stream_Task+0xdd4>)
 80177b2:	2200      	movs	r2, #0
 80177b4:	701a      	strb	r2, [r3, #0]
 80177b6:	4b3c      	ldr	r3, [pc, #240]	@ (80178a8 <Vendor_Stream_Task+0xe20>)
 80177b8:	2201      	movs	r2, #1
 80177ba:	701a      	strb	r2, [r3, #0]
 80177bc:	4b2d      	ldr	r3, [pc, #180]	@ (8017874 <Vendor_Stream_Task+0xdec>)
 80177be:	2200      	movs	r2, #0
 80177c0:	701a      	strb	r2, [r3, #0]
 80177c2:	4b2d      	ldr	r3, [pc, #180]	@ (8017878 <Vendor_Stream_Task+0xdf0>)
 80177c4:	22ff      	movs	r2, #255	@ 0xff
 80177c6:	701a      	strb	r2, [r3, #0]
 80177c8:	4b29      	ldr	r3, [pc, #164]	@ (8017870 <Vendor_Stream_Task+0xde8>)
 80177ca:	2200      	movs	r2, #0
 80177cc:	701a      	strb	r2, [r3, #0]
 80177ce:	4b37      	ldr	r3, [pc, #220]	@ (80178ac <Vendor_Stream_Task+0xe24>)
 80177d0:	2200      	movs	r2, #0
 80177d2:	601a      	str	r2, [r3, #0]
        test_sent = 0; test_in_flight = 0;
 80177d4:	4b24      	ldr	r3, [pc, #144]	@ (8017868 <Vendor_Stream_Task+0xde0>)
 80177d6:	2200      	movs	r2, #0
 80177d8:	701a      	strb	r2, [r3, #0]
 80177da:	4b24      	ldr	r3, [pc, #144]	@ (801786c <Vendor_Stream_Task+0xde4>)
 80177dc:	2200      	movs	r2, #0
 80177de:	701a      	strb	r2, [r3, #0]
        start_ack_done = 1; status_ack_pending = 0;
 80177e0:	4b33      	ldr	r3, [pc, #204]	@ (80178b0 <Vendor_Stream_Task+0xe28>)
 80177e2:	2201      	movs	r2, #1
 80177e4:	701a      	strb	r2, [r3, #0]
 80177e6:	4b25      	ldr	r3, [pc, #148]	@ (801787c <Vendor_Stream_Task+0xdf4>)
 80177e8:	2200      	movs	r2, #0
 80177ea:	701a      	strb	r2, [r3, #0]
        vnd_last_txcplt_ms = now;
 80177ec:	4a17      	ldr	r2, [pc, #92]	@ (801784c <Vendor_Stream_Task+0xdc4>)
 80177ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80177f2:	6013      	str	r3, [r2, #0]
        vnd_tx_meta_head = vnd_tx_meta_tail = 0; meta_push_total = meta_pop_total = meta_empty_events = meta_overflow_events = 0; /* clear FIFO */
 80177f4:	4b2f      	ldr	r3, [pc, #188]	@ (80178b4 <Vendor_Stream_Task+0xe2c>)
 80177f6:	2200      	movs	r2, #0
 80177f8:	701a      	strb	r2, [r3, #0]
 80177fa:	4b2e      	ldr	r3, [pc, #184]	@ (80178b4 <Vendor_Stream_Task+0xe2c>)
 80177fc:	781a      	ldrb	r2, [r3, #0]
 80177fe:	4b2e      	ldr	r3, [pc, #184]	@ (80178b8 <Vendor_Stream_Task+0xe30>)
 8017800:	701a      	strb	r2, [r3, #0]
 8017802:	4b2e      	ldr	r3, [pc, #184]	@ (80178bc <Vendor_Stream_Task+0xe34>)
 8017804:	2200      	movs	r2, #0
 8017806:	601a      	str	r2, [r3, #0]
 8017808:	4b2c      	ldr	r3, [pc, #176]	@ (80178bc <Vendor_Stream_Task+0xe34>)
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	4a2c      	ldr	r2, [pc, #176]	@ (80178c0 <Vendor_Stream_Task+0xe38>)
 801780e:	6013      	str	r3, [r2, #0]
 8017810:	4b2b      	ldr	r3, [pc, #172]	@ (80178c0 <Vendor_Stream_Task+0xe38>)
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	4a2b      	ldr	r2, [pc, #172]	@ (80178c4 <Vendor_Stream_Task+0xe3c>)
 8017816:	6013      	str	r3, [r2, #0]
 8017818:	4b2a      	ldr	r3, [pc, #168]	@ (80178c4 <Vendor_Stream_Task+0xe3c>)
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	4a2a      	ldr	r2, [pc, #168]	@ (80178c8 <Vendor_Stream_Task+0xe40>)
 801781e:	6013      	str	r3, [r2, #0]
        /* Сбросить все пары в g_frames в FB_FILL состояние */
        for(unsigned i = 0; i < VND_PAIR_BUFFERS; i++){
 8017820:	2300      	movs	r3, #0
 8017822:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8017826:	e06c      	b.n	8017902 <Vendor_Stream_Task+0xe7a>
 8017828:	24018aac 	.word	0x24018aac
 801782c:	2400c5e0 	.word	0x2400c5e0
 8017830:	2400c5e4 	.word	0x2400c5e4
 8017834:	2400c644 	.word	0x2400c644
 8017838:	2400c63c 	.word	0x2400c63c
 801783c:	2400c640 	.word	0x2400c640
 8017840:	2400c5e8 	.word	0x2400c5e8
 8017844:	0801d0e0 	.word	0x0801d0e0
 8017848:	0801c9c8 	.word	0x0801c9c8
 801784c:	2400c628 	.word	0x2400c628
 8017850:	0801d0f8 	.word	0x0801d0f8
 8017854:	2400003c 	.word	0x2400003c
 8017858:	2400c61c 	.word	0x2400c61c
 801785c:	2400c5ec 	.word	0x2400c5ec
 8017860:	24018abc 	.word	0x24018abc
 8017864:	24018ac0 	.word	0x24018ac0
 8017868:	2400c5ee 	.word	0x2400c5ee
 801786c:	2400c5ef 	.word	0x2400c5ef
 8017870:	24018a32 	.word	0x24018a32
 8017874:	2400c5ed 	.word	0x2400c5ed
 8017878:	2400004c 	.word	0x2400004c
 801787c:	2400c68e 	.word	0x2400c68e
 8017880:	2400c5dc 	.word	0x2400c5dc
 8017884:	2400c5f0 	.word	0x2400c5f0
 8017888:	2400c614 	.word	0x2400c614
 801788c:	2400c618 	.word	0x2400c618
 8017890:	2400ad00 	.word	0x2400ad00
 8017894:	2400ad04 	.word	0x2400ad04
 8017898:	0801d114 	.word	0x0801d114
 801789c:	2400c5d8 	.word	0x2400c5d8
 80178a0:	0801d1bc 	.word	0x0801d1bc
 80178a4:	2400c5e2 	.word	0x2400c5e2
 80178a8:	2400003b 	.word	0x2400003b
 80178ac:	24018a34 	.word	0x24018a34
 80178b0:	2400c68d 	.word	0x2400c68d
 80178b4:	24018a99 	.word	0x24018a99
 80178b8:	24018a98 	.word	0x24018a98
 80178bc:	24018aa8 	.word	0x24018aa8
 80178c0:	24018aa4 	.word	0x24018aa4
 80178c4:	24018aa0 	.word	0x24018aa0
 80178c8:	24018a9c 	.word	0x24018a9c
            g_frames[i][0].st = FB_FILL;
 80178cc:	4a1f      	ldr	r2, [pc, #124]	@ (801794c <Vendor_Stream_Task+0xec4>)
 80178ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80178d2:	f241 5198 	movw	r1, #5528	@ 0x1598
 80178d6:	fb01 f303 	mul.w	r3, r1, r3
 80178da:	4413      	add	r3, r2
 80178dc:	2200      	movs	r2, #0
 80178de:	701a      	strb	r2, [r3, #0]
            g_frames[i][1].st = FB_FILL;
 80178e0:	4a1a      	ldr	r2, [pc, #104]	@ (801794c <Vendor_Stream_Task+0xec4>)
 80178e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80178e6:	f241 5198 	movw	r1, #5528	@ 0x1598
 80178ea:	fb01 f303 	mul.w	r3, r1, r3
 80178ee:	4413      	add	r3, r2
 80178f0:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80178f4:	2200      	movs	r2, #0
 80178f6:	701a      	strb	r2, [r3, #0]
        for(unsigned i = 0; i < VND_PAIR_BUFFERS; i++){
 80178f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80178fc:	3301      	adds	r3, #1
 80178fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8017902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017906:	2b07      	cmp	r3, #7
 8017908:	d9e0      	bls.n	80178cc <Vendor_Stream_Task+0xe44>
        }
        pair_fill_idx = 0;
 801790a:	4b11      	ldr	r3, [pc, #68]	@ (8017950 <Vendor_Stream_Task+0xec8>)
 801790c:	2200      	movs	r2, #0
 801790e:	701a      	strb	r2, [r3, #0]
        pair_send_idx = 0;
 8017910:	4b10      	ldr	r3, [pc, #64]	@ (8017954 <Vendor_Stream_Task+0xecc>)
 8017912:	2200      	movs	r2, #0
 8017914:	701a      	strb	r2, [r3, #0]
        /* Разрешаем немедленный запуск следующей пары и готовим её прямо сейчас */
        next_seq_to_assign = stream_seq;
 8017916:	4b10      	ldr	r3, [pc, #64]	@ (8017958 <Vendor_Stream_Task+0xed0>)
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	4a10      	ldr	r2, [pc, #64]	@ (801795c <Vendor_Stream_Task+0xed4>)
 801791c:	6013      	str	r3, [r2, #0]
        vnd_next_pair_ms = now; /* не ждать периода */
 801791e:	4a10      	ldr	r2, [pc, #64]	@ (8017960 <Vendor_Stream_Task+0xed8>)
 8017920:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8017924:	6013      	str	r3, [r2, #0]
        vnd_prepare_pair();
 8017926:	f7fe f97b 	bl	8015c20 <vnd_prepare_pair>
        vnd_tx_kick = 1;
 801792a:	4b0e      	ldr	r3, [pc, #56]	@ (8017964 <Vendor_Stream_Task+0xedc>)
 801792c:	2201      	movs	r2, #1
 801792e:	701a      	strb	r2, [r3, #0]
 8017930:	e008      	b.n	8017944 <Vendor_Stream_Task+0xebc>
        return; /* ждём TxCplt ACK-STOP */
 8017932:	bf00      	nop
 8017934:	e006      	b.n	8017944 <Vendor_Stream_Task+0xebc>
                if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 8017936:	bf00      	nop
 8017938:	e004      	b.n	8017944 <Vendor_Stream_Task+0xebc>
    if(!full_mode){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 801793a:	bf00      	nop
 801793c:	e002      	b.n	8017944 <Vendor_Stream_Task+0xebc>
            if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 801793e:	bf00      	nop
 8017940:	e000      	b.n	8017944 <Vendor_Stream_Task+0xebc>
    if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 8017942:	bf00      	nop
    }

    /* Если нет прогресса — не синтезируем кадры; ждём реальные данные от АЦП */
}
 8017944:	379c      	adds	r7, #156	@ 0x9c
 8017946:	46bd      	mov	sp, r7
 8017948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801794c:	2400dd70 	.word	0x2400dd70
 8017950:	24018a30 	.word	0x24018a30
 8017954:	24018a31 	.word	0x24018a31
 8017958:	2400c5dc 	.word	0x2400c5dc
 801795c:	2400c620 	.word	0x2400c620
 8017960:	2400c674 	.word	0x2400c674
 8017964:	2400c688 	.word	0x2400c688

08017968 <USBD_VND_TxCplt>:

/* Обработчик завершения передачи */
void USBD_VND_TxCplt(void)
{
 8017968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801796c:	b0ab      	sub	sp, #172	@ 0xac
 801796e:	af04      	add	r7, sp, #16
    uint8_t prev_sending = sending_channel;
 8017970:	4ba7      	ldr	r3, [pc, #668]	@ (8017c10 <USBD_VND_TxCplt+0x2a8>)
 8017972:	781b      	ldrb	r3, [r3, #0]
 8017974:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    dbg_tx_cplt++;
 8017978:	4ba6      	ldr	r3, [pc, #664]	@ (8017c14 <USBD_VND_TxCplt+0x2ac>)
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	1c5a      	adds	r2, r3, #1
 801797e:	4ba5      	ldr	r3, [pc, #660]	@ (8017c14 <USBD_VND_TxCplt+0x2ac>)
 8017980:	601a      	str	r2, [r3, #0]
    vnd_tx_ready = 1;
 8017982:	4aa5      	ldr	r2, [pc, #660]	@ (8017c18 <USBD_VND_TxCplt+0x2b0>)
 8017984:	2301      	movs	r3, #1
 8017986:	7013      	strb	r3, [r2, #0]
    vnd_ep_busy = 0;
 8017988:	4aa4      	ldr	r2, [pc, #656]	@ (8017c1c <USBD_VND_TxCplt+0x2b4>)
 801798a:	2300      	movs	r3, #0
 801798c:	7013      	strb	r3, [r2, #0]
    vnd_inflight = 0;
 801798e:	4aa4      	ldr	r2, [pc, #656]	@ (8017c20 <USBD_VND_TxCplt+0x2b8>)
 8017990:	2300      	movs	r3, #0
 8017992:	7013      	strb	r3, [r2, #0]
    vnd_last_txcplt_ms = HAL_GetTick();
 8017994:	f7ec fee0 	bl	8004758 <HAL_GetTick>
 8017998:	4602      	mov	r2, r0
 801799a:	4ba2      	ldr	r3, [pc, #648]	@ (8017c24 <USBD_VND_TxCplt+0x2bc>)
 801799c:	601a      	str	r2, [r3, #0]
    VND_LOG("TXCPLT len=%u dt=%lums depth=%u push=%lu pop=%lu empty=%lu ovf=%lu", (unsigned)vnd_last_tx_len,
 801799e:	4ba2      	ldr	r3, [pc, #648]	@ (8017c28 <USBD_VND_TxCplt+0x2c0>)
 80179a0:	881b      	ldrh	r3, [r3, #0]
 80179a2:	b29b      	uxth	r3, r3
 80179a4:	461e      	mov	r6, r3
 80179a6:	f7ec fed7 	bl	8004758 <HAL_GetTick>
 80179aa:	4602      	mov	r2, r0
 80179ac:	4b9f      	ldr	r3, [pc, #636]	@ (8017c2c <USBD_VND_TxCplt+0x2c4>)
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	1ad4      	subs	r4, r2, r3
 80179b2:	f7fd fb53 	bl	801505c <vnd_tx_meta_depth>
 80179b6:	4603      	mov	r3, r0
 80179b8:	461d      	mov	r5, r3
 80179ba:	4b9d      	ldr	r3, [pc, #628]	@ (8017c30 <USBD_VND_TxCplt+0x2c8>)
 80179bc:	6818      	ldr	r0, [r3, #0]
 80179be:	4b9d      	ldr	r3, [pc, #628]	@ (8017c34 <USBD_VND_TxCplt+0x2cc>)
 80179c0:	6819      	ldr	r1, [r3, #0]
 80179c2:	4b9d      	ldr	r3, [pc, #628]	@ (8017c38 <USBD_VND_TxCplt+0x2d0>)
 80179c4:	681a      	ldr	r2, [r3, #0]
 80179c6:	4b9d      	ldr	r3, [pc, #628]	@ (8017c3c <USBD_VND_TxCplt+0x2d4>)
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	9303      	str	r3, [sp, #12]
 80179cc:	9202      	str	r2, [sp, #8]
 80179ce:	9101      	str	r1, [sp, #4]
 80179d0:	9000      	str	r0, [sp, #0]
 80179d2:	462b      	mov	r3, r5
 80179d4:	4622      	mov	r2, r4
 80179d6:	4631      	mov	r1, r6
 80179d8:	4899      	ldr	r0, [pc, #612]	@ (8017c40 <USBD_VND_TxCplt+0x2d8>)
 80179da:	f002 ffe1 	bl	801a9a0 <iprintf>
 80179de:	4899      	ldr	r0, [pc, #612]	@ (8017c44 <USBD_VND_TxCplt+0x2dc>)
 80179e0:	f003 f846 	bl	801aa70 <puts>
        (unsigned long)(HAL_GetTick() - vnd_last_tx_start_ms), (unsigned)vnd_tx_meta_depth(),
        (unsigned long)meta_push_total, (unsigned long)meta_pop_total, (unsigned long)meta_empty_events, (unsigned long)meta_overflow_events);
    vnd_total_tx_bytes += vnd_last_tx_len; /* учитывать и тестовые, и статусные, и рабочие */
 80179e4:	4b90      	ldr	r3, [pc, #576]	@ (8017c28 <USBD_VND_TxCplt+0x2c0>)
 80179e6:	881b      	ldrh	r3, [r3, #0]
 80179e8:	b29b      	uxth	r3, r3
 80179ea:	b29b      	uxth	r3, r3
 80179ec:	2200      	movs	r2, #0
 80179ee:	4698      	mov	r8, r3
 80179f0:	4691      	mov	r9, r2
 80179f2:	4b95      	ldr	r3, [pc, #596]	@ (8017c48 <USBD_VND_TxCplt+0x2e0>)
 80179f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179f8:	eb18 0a02 	adds.w	sl, r8, r2
 80179fc:	eb49 0b03 	adc.w	fp, r9, r3
 8017a00:	4b91      	ldr	r3, [pc, #580]	@ (8017c48 <USBD_VND_TxCplt+0x2e0>)
 8017a02:	e9c3 ab00 	strd	sl, fp, [r3]
    /* Зафиксировать завершение стартового ACK (если был) */
    if(start_stat_inflight){ start_stat_inflight = 0; start_ack_done = 1; }
 8017a06:	4b91      	ldr	r3, [pc, #580]	@ (8017c4c <USBD_VND_TxCplt+0x2e4>)
 8017a08:	781b      	ldrb	r3, [r3, #0]
 8017a0a:	b2db      	uxtb	r3, r3
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d005      	beq.n	8017a1c <USBD_VND_TxCplt+0xb4>
 8017a10:	4a8e      	ldr	r2, [pc, #568]	@ (8017c4c <USBD_VND_TxCplt+0x2e4>)
 8017a12:	2300      	movs	r3, #0
 8017a14:	7013      	strb	r3, [r2, #0]
 8017a16:	4a8e      	ldr	r2, [pc, #568]	@ (8017c50 <USBD_VND_TxCplt+0x2e8>)
 8017a18:	2301      	movs	r3, #1
 8017a1a:	7013      	strb	r3, [r2, #0]

    /* Надёжная классификация завершившегося буфера (приоритет inflight_* затем meta FIFO) */
    vnd_tx_meta_t meta; int have_meta = vnd_tx_meta_pop(&meta);
 8017a1c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8017a20:	4618      	mov	r0, r3
 8017a22:	f7fd fbc5 	bl	80151b0 <vnd_tx_meta_pop>
 8017a26:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    uint8_t eff_is_frame = 0; uint8_t eff_flags = 0; uint32_t eff_seq = 0;
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8017a30:	2300      	movs	r3, #0
 8017a32:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8017a36:	2300      	movs	r3, #0
 8017a38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if(inflight_is_frame){ eff_is_frame = 1; eff_flags = inflight_flags; eff_seq = inflight_seq; }
 8017a3c:	4b85      	ldr	r3, [pc, #532]	@ (8017c54 <USBD_VND_TxCplt+0x2ec>)
 8017a3e:	781b      	ldrb	r3, [r3, #0]
 8017a40:	b2db      	uxtb	r3, r3
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d00b      	beq.n	8017a5e <USBD_VND_TxCplt+0xf6>
 8017a46:	2301      	movs	r3, #1
 8017a48:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8017a4c:	4b82      	ldr	r3, [pc, #520]	@ (8017c58 <USBD_VND_TxCplt+0x2f0>)
 8017a4e:	781b      	ldrb	r3, [r3, #0]
 8017a50:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8017a54:	4b81      	ldr	r3, [pc, #516]	@ (8017c5c <USBD_VND_TxCplt+0x2f4>)
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8017a5c:	e026      	b.n	8017aac <USBD_VND_TxCplt+0x144>
    else if(have_meta && meta.is_frame){ eff_is_frame = 1; eff_flags = meta.flags; eff_seq = meta.seq_field; }
 8017a5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d00e      	beq.n	8017a84 <USBD_VND_TxCplt+0x11c>
 8017a66:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d00a      	beq.n	8017a84 <USBD_VND_TxCplt+0x11c>
 8017a6e:	2301      	movs	r3, #1
 8017a70:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8017a74:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8017a78:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8017a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8017a82:	e013      	b.n	8017aac <USBD_VND_TxCplt+0x144>
    else if(have_meta){ eff_is_frame = 0; }
 8017a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d003      	beq.n	8017a94 <USBD_VND_TxCplt+0x12c>
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8017a92:	e00b      	b.n	8017aac <USBD_VND_TxCplt+0x144>
    else { eff_is_frame = last_tx_is_frame; eff_flags = last_tx_flags; eff_seq = last_tx_seq; }
 8017a94:	4b72      	ldr	r3, [pc, #456]	@ (8017c60 <USBD_VND_TxCplt+0x2f8>)
 8017a96:	781b      	ldrb	r3, [r3, #0]
 8017a98:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8017a9c:	4b71      	ldr	r3, [pc, #452]	@ (8017c64 <USBD_VND_TxCplt+0x2fc>)
 8017a9e:	781b      	ldrb	r3, [r3, #0]
 8017aa0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8017aa4:	4b70      	ldr	r3, [pc, #448]	@ (8017c68 <USBD_VND_TxCplt+0x300>)
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    inflight_is_frame = 0; inflight_flags = 0; inflight_seq = 0;
 8017aac:	4a69      	ldr	r2, [pc, #420]	@ (8017c54 <USBD_VND_TxCplt+0x2ec>)
 8017aae:	2300      	movs	r3, #0
 8017ab0:	7013      	strb	r3, [r2, #0]
 8017ab2:	4a69      	ldr	r2, [pc, #420]	@ (8017c58 <USBD_VND_TxCplt+0x2f0>)
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	7013      	strb	r3, [r2, #0]
 8017ab8:	4a68      	ldr	r2, [pc, #416]	@ (8017c5c <USBD_VND_TxCplt+0x2f4>)
 8017aba:	2300      	movs	r3, #0
 8017abc:	6013      	str	r3, [r2, #0]
    VND_LOG("TXCPLT_CLASS is_frame=%u fl=0x%02X seq=%lu depth_now=%u (meta_have=%d)", (unsigned)eff_is_frame, (unsigned)eff_flags, (unsigned long)eff_seq, (unsigned)vnd_tx_meta_depth(), have_meta);
 8017abe:	f897 5097 	ldrb.w	r5, [r7, #151]	@ 0x97
 8017ac2:	f897 4096 	ldrb.w	r4, [r7, #150]	@ 0x96
 8017ac6:	f7fd fac9 	bl	801505c <vnd_tx_meta_depth>
 8017aca:	4603      	mov	r3, r0
 8017acc:	461a      	mov	r2, r3
 8017ace:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017ad2:	9301      	str	r3, [sp, #4]
 8017ad4:	9200      	str	r2, [sp, #0]
 8017ad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017ada:	4622      	mov	r2, r4
 8017adc:	4629      	mov	r1, r5
 8017ade:	4863      	ldr	r0, [pc, #396]	@ (8017c6c <USBD_VND_TxCplt+0x304>)
 8017ae0:	f002 ff5e 	bl	801a9a0 <iprintf>
 8017ae4:	4857      	ldr	r0, [pc, #348]	@ (8017c44 <USBD_VND_TxCplt+0x2dc>)
 8017ae6:	f002 ffc3 	bl	801aa70 <puts>

    /* Если это был ACK на STOP — после него переводим систему в остановленное состояние */
    if(stop_stat_inflight){
 8017aea:	4b61      	ldr	r3, [pc, #388]	@ (8017c70 <USBD_VND_TxCplt+0x308>)
 8017aec:	781b      	ldrb	r3, [r3, #0]
 8017aee:	b2db      	uxtb	r3, r3
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d05f      	beq.n	8017bb4 <USBD_VND_TxCplt+0x24c>
        stop_stat_inflight = 0;
 8017af4:	4b5e      	ldr	r3, [pc, #376]	@ (8017c70 <USBD_VND_TxCplt+0x308>)
 8017af6:	2200      	movs	r2, #0
 8017af8:	701a      	strb	r2, [r3, #0]
        stop_request = 0;
 8017afa:	4b5e      	ldr	r3, [pc, #376]	@ (8017c74 <USBD_VND_TxCplt+0x30c>)
 8017afc:	2200      	movs	r2, #0
 8017afe:	701a      	strb	r2, [r3, #0]
        if(streaming){ streaming = 0; VND_LOG("STOP_STREAM after STAT"); }
 8017b00:	4b5d      	ldr	r3, [pc, #372]	@ (8017c78 <USBD_VND_TxCplt+0x310>)
 8017b02:	781b      	ldrb	r3, [r3, #0]
 8017b04:	b2db      	uxtb	r3, r3
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d008      	beq.n	8017b1c <USBD_VND_TxCplt+0x1b4>
 8017b0a:	4b5b      	ldr	r3, [pc, #364]	@ (8017c78 <USBD_VND_TxCplt+0x310>)
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	701a      	strb	r2, [r3, #0]
 8017b10:	485a      	ldr	r0, [pc, #360]	@ (8017c7c <USBD_VND_TxCplt+0x314>)
 8017b12:	f002 ff45 	bl	801a9a0 <iprintf>
 8017b16:	484b      	ldr	r0, [pc, #300]	@ (8017c44 <USBD_VND_TxCplt+0x2dc>)
 8017b18:	f002 ffaa 	bl	801aa70 <puts>
        diag_mode_active = 0;
 8017b1c:	4b58      	ldr	r3, [pc, #352]	@ (8017c80 <USBD_VND_TxCplt+0x318>)
 8017b1e:	2200      	movs	r2, #0
 8017b20:	701a      	strb	r2, [r3, #0]
        vnd_reset_buffers();
 8017b22:	f7fd fdcf 	bl	80156c4 <vnd_reset_buffers>
        sending_channel = 0xFF; pending_B = 0; test_sent = 0; test_in_flight = 0; vnd_inflight = 0;
 8017b26:	4b3a      	ldr	r3, [pc, #232]	@ (8017c10 <USBD_VND_TxCplt+0x2a8>)
 8017b28:	22ff      	movs	r2, #255	@ 0xff
 8017b2a:	701a      	strb	r2, [r3, #0]
 8017b2c:	4b55      	ldr	r3, [pc, #340]	@ (8017c84 <USBD_VND_TxCplt+0x31c>)
 8017b2e:	2200      	movs	r2, #0
 8017b30:	701a      	strb	r2, [r3, #0]
 8017b32:	4b55      	ldr	r3, [pc, #340]	@ (8017c88 <USBD_VND_TxCplt+0x320>)
 8017b34:	2200      	movs	r2, #0
 8017b36:	701a      	strb	r2, [r3, #0]
 8017b38:	4b54      	ldr	r3, [pc, #336]	@ (8017c8c <USBD_VND_TxCplt+0x324>)
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	701a      	strb	r2, [r3, #0]
 8017b3e:	4b38      	ldr	r3, [pc, #224]	@ (8017c20 <USBD_VND_TxCplt+0x2b8>)
 8017b40:	2200      	movs	r2, #0
 8017b42:	701a      	strb	r2, [r3, #0]
        /* Останавливаем DMA и сбрасываем буферы */
        extern void adc_stream_stop(void);
        adc_stream_stop();
 8017b44:	f7e8 fc56 	bl	80003f4 <adc_stream_stop>
        /* Индикация STOP: погасить пин Data_ready и вывести CDC-событие */
        HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_RESET);
 8017b48:	2200      	movs	r2, #0
 8017b4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017b4e:	4850      	ldr	r0, [pc, #320]	@ (8017c90 <USBD_VND_TxCplt+0x328>)
 8017b50:	f7f1 febe 	bl	80098d0 <HAL_GPIO_WritePin>
        {
            uint64_t cur = vnd_total_tx_bytes;
 8017b54:	4b3c      	ldr	r3, [pc, #240]	@ (8017c48 <USBD_VND_TxCplt+0x2e0>)
 8017b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b5a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
            uint64_t delta = (cur >= vnd_tx_bytes_at_start) ? (cur - vnd_tx_bytes_at_start) : 0ULL;
 8017b5e:	4b4d      	ldr	r3, [pc, #308]	@ (8017c94 <USBD_VND_TxCplt+0x32c>)
 8017b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8017b68:	4290      	cmp	r0, r2
 8017b6a:	eb71 0303 	sbcs.w	r3, r1, r3
 8017b6e:	d30a      	bcc.n	8017b86 <USBD_VND_TxCplt+0x21e>
 8017b70:	4b48      	ldr	r3, [pc, #288]	@ (8017c94 <USBD_VND_TxCplt+0x32c>)
 8017b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b76:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8017b7a:	1a84      	subs	r4, r0, r2
 8017b7c:	633c      	str	r4, [r7, #48]	@ 0x30
 8017b7e:	eb61 0303 	sbc.w	r3, r1, r3
 8017b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8017b84:	e005      	b.n	8017b92 <USBD_VND_TxCplt+0x22a>
 8017b86:	f04f 0300 	mov.w	r3, #0
 8017b8a:	f04f 0400 	mov.w	r4, #0
 8017b8e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
 8017b92:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8017b96:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
            cdc_logf("EVT STOP total=%llu delta=%llu", (unsigned long long)cur, (unsigned long long)delta);
 8017b9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8017b9e:	e9cd 2300 	strd	r2, r3, [sp]
 8017ba2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8017ba6:	483c      	ldr	r0, [pc, #240]	@ (8017c98 <USBD_VND_TxCplt+0x330>)
 8017ba8:	f7fd f9ce 	bl	8014f48 <cdc_logf>
        }
        vnd_tx_kick = 1; /* пнуть таск на всякий случай */
 8017bac:	4b3b      	ldr	r3, [pc, #236]	@ (8017c9c <USBD_VND_TxCplt+0x334>)
 8017bae:	2201      	movs	r2, #1
 8017bb0:	701a      	strb	r2, [r3, #0]
        return;
 8017bb2:	e3bd      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
    }
    if(test_in_flight)
 8017bb4:	4b35      	ldr	r3, [pc, #212]	@ (8017c8c <USBD_VND_TxCplt+0x324>)
 8017bb6:	781b      	ldrb	r3, [r3, #0]
 8017bb8:	b2db      	uxtb	r3, r3
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d011      	beq.n	8017be2 <USBD_VND_TxCplt+0x27a>
    {
        test_in_flight = 0;
 8017bbe:	4b33      	ldr	r3, [pc, #204]	@ (8017c8c <USBD_VND_TxCplt+0x324>)
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	701a      	strb	r2, [r3, #0]
        test_sent = 1; /* помечаем тест выполненным ровно один раз, не сбрасывать вне START */
 8017bc4:	4b30      	ldr	r3, [pc, #192]	@ (8017c88 <USBD_VND_TxCplt+0x320>)
 8017bc6:	2201      	movs	r2, #1
 8017bc8:	701a      	strb	r2, [r3, #0]
        first_test_sent_ms = HAL_GetTick();
 8017bca:	f7ec fdc5 	bl	8004758 <HAL_GetTick>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	4a33      	ldr	r2, [pc, #204]	@ (8017ca0 <USBD_VND_TxCplt+0x338>)
 8017bd2:	6013      	str	r3, [r2, #0]
        VND_LOG("TEST_TXCPLT");
 8017bd4:	4833      	ldr	r0, [pc, #204]	@ (8017ca4 <USBD_VND_TxCplt+0x33c>)
 8017bd6:	f002 fee3 	bl	801a9a0 <iprintf>
 8017bda:	481a      	ldr	r0, [pc, #104]	@ (8017c44 <USBD_VND_TxCplt+0x2dc>)
 8017bdc:	f002 ff48 	bl	801aa70 <puts>
        return;
 8017be0:	e3a6      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
    }
    if(!streaming){ vnd_tx_kick = 1; return; }
 8017be2:	4b25      	ldr	r3, [pc, #148]	@ (8017c78 <USBD_VND_TxCplt+0x310>)
 8017be4:	781b      	ldrb	r3, [r3, #0]
 8017be6:	b2db      	uxtb	r3, r3
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d103      	bne.n	8017bf4 <USBD_VND_TxCplt+0x28c>
 8017bec:	4b2b      	ldr	r3, [pc, #172]	@ (8017c9c <USBD_VND_TxCplt+0x334>)
 8017bee:	2201      	movs	r2, #1
 8017bf0:	701a      	strb	r2, [r3, #0]
 8017bf2:	e39d      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>

    /* Диагностический режим: используем eff_flags для точной классификации (устраняет гонку по sending_channel) */
    if(diag_mode_active){
 8017bf4:	4b22      	ldr	r3, [pc, #136]	@ (8017c80 <USBD_VND_TxCplt+0x318>)
 8017bf6:	781b      	ldrb	r3, [r3, #0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	f000 8114 	beq.w	8017e26 <USBD_VND_TxCplt+0x4be>
        if(!eff_is_frame){
 8017bfe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d150      	bne.n	8017ca8 <USBD_VND_TxCplt+0x340>
            /* STAT/ZLP — просто продолжим */
            vnd_tx_kick = 1; return;
 8017c06:	4b25      	ldr	r3, [pc, #148]	@ (8017c9c <USBD_VND_TxCplt+0x334>)
 8017c08:	2201      	movs	r2, #1
 8017c0a:	701a      	strb	r2, [r3, #0]
 8017c0c:	e390      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
 8017c0e:	bf00      	nop
 8017c10:	2400004c 	.word	0x2400004c
 8017c14:	2400c61c 	.word	0x2400c61c
 8017c18:	2400003b 	.word	0x2400003b
 8017c1c:	2400c5ec 	.word	0x2400c5ec
 8017c20:	2400c5ed 	.word	0x2400c5ed
 8017c24:	2400c628 	.word	0x2400c628
 8017c28:	2400c650 	.word	0x2400c650
 8017c2c:	2400c654 	.word	0x2400c654
 8017c30:	24018a9c 	.word	0x24018a9c
 8017c34:	24018aa0 	.word	0x24018aa0
 8017c38:	24018aa4 	.word	0x24018aa4
 8017c3c:	24018aa8 	.word	0x24018aa8
 8017c40:	0801d1f8 	.word	0x0801d1f8
 8017c44:	0801c9c8 	.word	0x0801c9c8
 8017c48:	2400c668 	.word	0x2400c668
 8017c4c:	2400c68c 	.word	0x2400c68c
 8017c50:	2400c68d 	.word	0x2400c68d
 8017c54:	2400c660 	.word	0x2400c660
 8017c58:	2400c661 	.word	0x2400c661
 8017c5c:	2400c664 	.word	0x2400c664
 8017c60:	2400c658 	.word	0x2400c658
 8017c64:	2400c659 	.word	0x2400c659
 8017c68:	2400c65c 	.word	0x2400c65c
 8017c6c:	0801d244 	.word	0x0801d244
 8017c70:	2400c690 	.word	0x2400c690
 8017c74:	2400c68f 	.word	0x2400c68f
 8017c78:	2400c5d8 	.word	0x2400c5d8
 8017c7c:	0801d294 	.word	0x0801d294
 8017c80:	2400c729 	.word	0x2400c729
 8017c84:	24018a32 	.word	0x24018a32
 8017c88:	2400c5ee 	.word	0x2400c5ee
 8017c8c:	2400c5ef 	.word	0x2400c5ef
 8017c90:	58020c00 	.word	0x58020c00
 8017c94:	2400c680 	.word	0x2400c680
 8017c98:	0801d2b4 	.word	0x0801d2b4
 8017c9c:	2400c688 	.word	0x2400c688
 8017ca0:	2400c638 	.word	0x2400c638
 8017ca4:	0801d2d4 	.word	0x0801d2d4
        }
        if(eff_flags == 0x01){
 8017ca8:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8017cac:	2b01      	cmp	r3, #1
 8017cae:	d14b      	bne.n	8017d48 <USBD_VND_TxCplt+0x3e0>
            /* Завершился A: считаем и просим отправить B */
            dbg_tx_sent++; dbg_sent_ch0_total++; dbg_sent_seq_adc0++;
 8017cb0:	4ba2      	ldr	r3, [pc, #648]	@ (8017f3c <USBD_VND_TxCplt+0x5d4>)
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	3301      	adds	r3, #1
 8017cb6:	4aa1      	ldr	r2, [pc, #644]	@ (8017f3c <USBD_VND_TxCplt+0x5d4>)
 8017cb8:	6013      	str	r3, [r2, #0]
 8017cba:	4ba1      	ldr	r3, [pc, #644]	@ (8017f40 <USBD_VND_TxCplt+0x5d8>)
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	3301      	adds	r3, #1
 8017cc0:	4a9f      	ldr	r2, [pc, #636]	@ (8017f40 <USBD_VND_TxCplt+0x5d8>)
 8017cc2:	6013      	str	r3, [r2, #0]
 8017cc4:	4b9f      	ldr	r3, [pc, #636]	@ (8017f44 <USBD_VND_TxCplt+0x5dc>)
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	3301      	adds	r3, #1
 8017cca:	4a9e      	ldr	r2, [pc, #632]	@ (8017f44 <USBD_VND_TxCplt+0x5dc>)
 8017ccc:	6013      	str	r3, [r2, #0]
            /* В DIAG считаем семплы по текущему размеру кадра */
            vnd_total_tx_samples += (uint64_t)((cur_samples_per_frame != 0) ? cur_samples_per_frame : diag_samples);
 8017cce:	4b9e      	ldr	r3, [pc, #632]	@ (8017f48 <USBD_VND_TxCplt+0x5e0>)
 8017cd0:	881b      	ldrh	r3, [r3, #0]
 8017cd2:	b29b      	uxth	r3, r3
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d007      	beq.n	8017ce8 <USBD_VND_TxCplt+0x380>
 8017cd8:	4b9b      	ldr	r3, [pc, #620]	@ (8017f48 <USBD_VND_TxCplt+0x5e0>)
 8017cda:	881b      	ldrh	r3, [r3, #0]
 8017cdc:	b29b      	uxth	r3, r3
 8017cde:	b29b      	uxth	r3, r3
 8017ce0:	2200      	movs	r2, #0
 8017ce2:	643b      	str	r3, [r7, #64]	@ 0x40
 8017ce4:	647a      	str	r2, [r7, #68]	@ 0x44
 8017ce6:	e005      	b.n	8017cf4 <USBD_VND_TxCplt+0x38c>
 8017ce8:	4b98      	ldr	r3, [pc, #608]	@ (8017f4c <USBD_VND_TxCplt+0x5e4>)
 8017cea:	881b      	ldrh	r3, [r3, #0]
 8017cec:	b29b      	uxth	r3, r3
 8017cee:	2200      	movs	r2, #0
 8017cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8017cf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8017cf4:	4b96      	ldr	r3, [pc, #600]	@ (8017f50 <USBD_VND_TxCplt+0x5e8>)
 8017cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cfa:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8017cfe:	4621      	mov	r1, r4
 8017d00:	1889      	adds	r1, r1, r2
 8017d02:	62b9      	str	r1, [r7, #40]	@ 0x28
 8017d04:	4629      	mov	r1, r5
 8017d06:	eb43 0101 	adc.w	r1, r3, r1
 8017d0a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8017d0c:	4b90      	ldr	r3, [pc, #576]	@ (8017f50 <USBD_VND_TxCplt+0x5e8>)
 8017d0e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8017d12:	e9c3 1200 	strd	r1, r2, [r3]
            sending_channel = 0; /* завершили A */
 8017d16:	4b8f      	ldr	r3, [pc, #572]	@ (8017f54 <USBD_VND_TxCplt+0x5ec>)
 8017d18:	2200      	movs	r2, #0
 8017d1a:	701a      	strb	r2, [r3, #0]
            pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8017d1c:	4b8e      	ldr	r3, [pc, #568]	@ (8017f58 <USBD_VND_TxCplt+0x5f0>)
 8017d1e:	2201      	movs	r2, #1
 8017d20:	701a      	strb	r2, [r3, #0]
 8017d22:	f7ec fd19 	bl	8004758 <HAL_GetTick>
 8017d26:	4603      	mov	r3, r0
 8017d28:	4a8c      	ldr	r2, [pc, #560]	@ (8017f5c <USBD_VND_TxCplt+0x5f4>)
 8017d2a:	6013      	str	r3, [r2, #0]
            /* Зафиксируем seq этой пары для B */
            diag_current_pair_seq = eff_seq;
 8017d2c:	4a8c      	ldr	r2, [pc, #560]	@ (8017f60 <USBD_VND_TxCplt+0x5f8>)
 8017d2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017d32:	6013      	str	r3, [r2, #0]
            /* Немедленно пытаемся отправить B, чтобы убрать паузу между A и B */
            if(!vnd_try_send_B_immediate()){
 8017d34:	f7fe fd24 	bl	8016780 <vnd_try_send_B_immediate>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	f040 82f1 	bne.w	8018322 <USBD_VND_TxCplt+0x9ba>
                /* печать в CDC отключена для максимальной скорости */
                vnd_tx_kick = 1; return;
 8017d40:	4b88      	ldr	r3, [pc, #544]	@ (8017f64 <USBD_VND_TxCplt+0x5fc>)
 8017d42:	2201      	movs	r2, #1
 8017d44:	701a      	strb	r2, [r3, #0]
 8017d46:	e2f3      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
            } else {
                /* B пошёл в полёт — дальше обычная обработка после его завершения */
                return;
            }
        } else if(eff_flags == 0x02){
 8017d48:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8017d4c:	2b02      	cmp	r3, #2
 8017d4e:	d15b      	bne.n	8017e08 <USBD_VND_TxCplt+0x4a0>
            /* Завершился B: закрываем пару, двигаем seq */
            dbg_tx_sent++; dbg_sent_ch1_total++; dbg_sent_seq_adc1++;
 8017d50:	4b7a      	ldr	r3, [pc, #488]	@ (8017f3c <USBD_VND_TxCplt+0x5d4>)
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	3301      	adds	r3, #1
 8017d56:	4a79      	ldr	r2, [pc, #484]	@ (8017f3c <USBD_VND_TxCplt+0x5d4>)
 8017d58:	6013      	str	r3, [r2, #0]
 8017d5a:	4b83      	ldr	r3, [pc, #524]	@ (8017f68 <USBD_VND_TxCplt+0x600>)
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	3301      	adds	r3, #1
 8017d60:	4a81      	ldr	r2, [pc, #516]	@ (8017f68 <USBD_VND_TxCplt+0x600>)
 8017d62:	6013      	str	r3, [r2, #0]
 8017d64:	4b81      	ldr	r3, [pc, #516]	@ (8017f6c <USBD_VND_TxCplt+0x604>)
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	3301      	adds	r3, #1
 8017d6a:	4a80      	ldr	r2, [pc, #512]	@ (8017f6c <USBD_VND_TxCplt+0x604>)
 8017d6c:	6013      	str	r3, [r2, #0]
            vnd_total_tx_samples += (uint64_t)((cur_samples_per_frame != 0) ? cur_samples_per_frame : diag_samples);
 8017d6e:	4b76      	ldr	r3, [pc, #472]	@ (8017f48 <USBD_VND_TxCplt+0x5e0>)
 8017d70:	881b      	ldrh	r3, [r3, #0]
 8017d72:	b29b      	uxth	r3, r3
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d007      	beq.n	8017d88 <USBD_VND_TxCplt+0x420>
 8017d78:	4b73      	ldr	r3, [pc, #460]	@ (8017f48 <USBD_VND_TxCplt+0x5e0>)
 8017d7a:	881b      	ldrh	r3, [r3, #0]
 8017d7c:	b29b      	uxth	r3, r3
 8017d7e:	b29b      	uxth	r3, r3
 8017d80:	2200      	movs	r2, #0
 8017d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017d84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8017d86:	e005      	b.n	8017d94 <USBD_VND_TxCplt+0x42c>
 8017d88:	4b70      	ldr	r3, [pc, #448]	@ (8017f4c <USBD_VND_TxCplt+0x5e4>)
 8017d8a:	881b      	ldrh	r3, [r3, #0]
 8017d8c:	b29b      	uxth	r3, r3
 8017d8e:	2200      	movs	r2, #0
 8017d90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017d92:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8017d94:	4b6e      	ldr	r3, [pc, #440]	@ (8017f50 <USBD_VND_TxCplt+0x5e8>)
 8017d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d9a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8017d9e:	4621      	mov	r1, r4
 8017da0:	1889      	adds	r1, r1, r2
 8017da2:	6239      	str	r1, [r7, #32]
 8017da4:	4629      	mov	r1, r5
 8017da6:	eb43 0101 	adc.w	r1, r3, r1
 8017daa:	6279      	str	r1, [r7, #36]	@ 0x24
 8017dac:	4b68      	ldr	r3, [pc, #416]	@ (8017f50 <USBD_VND_TxCplt+0x5e8>)
 8017dae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8017db2:	e9c3 1200 	strd	r1, r2, [r3]
            stream_seq++; dbg_produced_seq++;
 8017db6:	4b6e      	ldr	r3, [pc, #440]	@ (8017f70 <USBD_VND_TxCplt+0x608>)
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	3301      	adds	r3, #1
 8017dbc:	4a6c      	ldr	r2, [pc, #432]	@ (8017f70 <USBD_VND_TxCplt+0x608>)
 8017dbe:	6013      	str	r3, [r2, #0]
 8017dc0:	4b6c      	ldr	r3, [pc, #432]	@ (8017f74 <USBD_VND_TxCplt+0x60c>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	3301      	adds	r3, #1
 8017dc6:	4a6b      	ldr	r2, [pc, #428]	@ (8017f74 <USBD_VND_TxCplt+0x60c>)
 8017dc8:	6013      	str	r3, [r2, #0]
            pending_B = 0; pending_B_since_ms = 0; sending_channel = 0xFF;
 8017dca:	4b63      	ldr	r3, [pc, #396]	@ (8017f58 <USBD_VND_TxCplt+0x5f0>)
 8017dcc:	2200      	movs	r2, #0
 8017dce:	701a      	strb	r2, [r3, #0]
 8017dd0:	4b62      	ldr	r3, [pc, #392]	@ (8017f5c <USBD_VND_TxCplt+0x5f4>)
 8017dd2:	2200      	movs	r2, #0
 8017dd4:	601a      	str	r2, [r3, #0]
 8017dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8017f54 <USBD_VND_TxCplt+0x5ec>)
 8017dd8:	22ff      	movs	r2, #255	@ 0xff
 8017dda:	701a      	strb	r2, [r3, #0]
            diag_prepared_seq = 0xFFFFFFFFu; /* заставим подготовить новую пару */
 8017ddc:	4b66      	ldr	r3, [pc, #408]	@ (8017f78 <USBD_VND_TxCplt+0x610>)
 8017dde:	f04f 32ff 	mov.w	r2, #4294967295
 8017de2:	601a      	str	r2, [r3, #0]
            if(!first_pair_done){ first_pair_done = 1; }
 8017de4:	4b65      	ldr	r3, [pc, #404]	@ (8017f7c <USBD_VND_TxCplt+0x614>)
 8017de6:	781b      	ldrb	r3, [r3, #0]
 8017de8:	b2db      	uxtb	r3, r3
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d102      	bne.n	8017df4 <USBD_VND_TxCplt+0x48c>
 8017dee:	4b63      	ldr	r3, [pc, #396]	@ (8017f7c <USBD_VND_TxCplt+0x614>)
 8017df0:	2201      	movs	r2, #1
 8017df2:	701a      	strb	r2, [r3, #0]
            /* Сразу пытаемся отправить следующий A новой пары */
            if(!vnd_try_send_A_nextpair_immediate()){
 8017df4:	f7fe fd82 	bl	80168fc <vnd_try_send_A_nextpair_immediate>
 8017df8:	4603      	mov	r3, r0
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	f040 8293 	bne.w	8018326 <USBD_VND_TxCplt+0x9be>
                /* печать в CDC отключена для максимальной скорости */
                vnd_tx_kick = 1; return;
 8017e00:	4b58      	ldr	r3, [pc, #352]	@ (8017f64 <USBD_VND_TxCplt+0x5fc>)
 8017e02:	2201      	movs	r2, #1
 8017e04:	701a      	strb	r2, [r3, #0]
 8017e06:	e293      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
            } else {
                return;
            }
        } else if(eff_flags == 0x80){
 8017e08:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8017e0c:	2b80      	cmp	r3, #128	@ 0x80
 8017e0e:	d106      	bne.n	8017e1e <USBD_VND_TxCplt+0x4b6>
            /* TEST */
            sending_channel = 0xFF;
 8017e10:	4b50      	ldr	r3, [pc, #320]	@ (8017f54 <USBD_VND_TxCplt+0x5ec>)
 8017e12:	22ff      	movs	r2, #255	@ 0xff
 8017e14:	701a      	strb	r2, [r3, #0]
            vnd_tx_kick = 1; return;
 8017e16:	4b53      	ldr	r3, [pc, #332]	@ (8017f64 <USBD_VND_TxCplt+0x5fc>)
 8017e18:	2201      	movs	r2, #1
 8017e1a:	701a      	strb	r2, [r3, #0]
 8017e1c:	e288      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
        } else {
            /* неизвестный флаг — игнорируем */
            vnd_tx_kick = 1; return;
 8017e1e:	4b51      	ldr	r3, [pc, #324]	@ (8017f64 <USBD_VND_TxCplt+0x5fc>)
 8017e20:	2201      	movs	r2, #1
 8017e22:	701a      	strb	r2, [r3, #0]
 8017e24:	e284      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
        }
    }

    /* Ниже — обычная ветка для полнофункционального режима */
    if(!eff_is_frame){
 8017e26:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d176      	bne.n	8017f1c <USBD_VND_TxCplt+0x5b4>
        /* STAT или иной служебный пакет — используем предыдущее состояние канала как подсказку */
        if(prev_sending == 0){
 8017e2e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d119      	bne.n	8017e6a <USBD_VND_TxCplt+0x502>
            if(!pending_B){ pending_B = 1; pending_B_since_ms = HAL_GetTick(); VND_LOG("GUARD(NON-FRAME): pending_B"); }
 8017e36:	4b48      	ldr	r3, [pc, #288]	@ (8017f58 <USBD_VND_TxCplt+0x5f0>)
 8017e38:	781b      	ldrb	r3, [r3, #0]
 8017e3a:	b2db      	uxtb	r3, r3
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d10d      	bne.n	8017e5c <USBD_VND_TxCplt+0x4f4>
 8017e40:	4b45      	ldr	r3, [pc, #276]	@ (8017f58 <USBD_VND_TxCplt+0x5f0>)
 8017e42:	2201      	movs	r2, #1
 8017e44:	701a      	strb	r2, [r3, #0]
 8017e46:	f7ec fc87 	bl	8004758 <HAL_GetTick>
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	4a43      	ldr	r2, [pc, #268]	@ (8017f5c <USBD_VND_TxCplt+0x5f4>)
 8017e4e:	6013      	str	r3, [r2, #0]
 8017e50:	484b      	ldr	r0, [pc, #300]	@ (8017f80 <USBD_VND_TxCplt+0x618>)
 8017e52:	f002 fda5 	bl	801a9a0 <iprintf>
 8017e56:	484b      	ldr	r0, [pc, #300]	@ (8017f84 <USBD_VND_TxCplt+0x61c>)
 8017e58:	f002 fe0a 	bl	801aa70 <puts>
            sending_channel = 0xFF; vnd_tx_kick = 1; return;
 8017e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8017f54 <USBD_VND_TxCplt+0x5ec>)
 8017e5e:	22ff      	movs	r2, #255	@ 0xff
 8017e60:	701a      	strb	r2, [r3, #0]
 8017e62:	4b40      	ldr	r3, [pc, #256]	@ (8017f64 <USBD_VND_TxCplt+0x5fc>)
 8017e64:	2201      	movs	r2, #1
 8017e66:	701a      	strb	r2, [r3, #0]
 8017e68:	e262      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
        } else if(prev_sending == 1){
 8017e6a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8017e6e:	2b01      	cmp	r3, #1
 8017e70:	d14d      	bne.n	8017f0e <USBD_VND_TxCplt+0x5a6>
            /* Считаем, что завершился B: закрываем пару безопасно */
        ChanFrame *f0 = &g_frames[pair_send_idx][0];
 8017e72:	4b45      	ldr	r3, [pc, #276]	@ (8017f88 <USBD_VND_TxCplt+0x620>)
 8017e74:	781b      	ldrb	r3, [r3, #0]
 8017e76:	461a      	mov	r2, r3
 8017e78:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017e7c:	fb02 f303 	mul.w	r3, r2, r3
 8017e80:	4a42      	ldr	r2, [pc, #264]	@ (8017f8c <USBD_VND_TxCplt+0x624>)
 8017e82:	4413      	add	r3, r2
 8017e84:	673b      	str	r3, [r7, #112]	@ 0x70
        ChanFrame *f1 = &g_frames[pair_send_idx][1];
 8017e86:	4b40      	ldr	r3, [pc, #256]	@ (8017f88 <USBD_VND_TxCplt+0x620>)
 8017e88:	781b      	ldrb	r3, [r3, #0]
 8017e8a:	461a      	mov	r2, r3
 8017e8c:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017e90:	fb02 f303 	mul.w	r3, r2, r3
 8017e94:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8017e98:	4a3c      	ldr	r2, [pc, #240]	@ (8017f8c <USBD_VND_TxCplt+0x624>)
 8017e9a:	4413      	add	r3, r2
 8017e9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
        f0->st = f1->st = FB_FILL;
 8017e9e:	2100      	movs	r1, #0
 8017ea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017ea2:	460a      	mov	r2, r1
 8017ea4:	701a      	strb	r2, [r3, #0]
 8017ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017ea8:	460a      	mov	r2, r1
 8017eaa:	701a      	strb	r2, [r3, #0]
        pair_send_idx = (pair_send_idx + 1u) % VND_PAIR_BUFFERS;
 8017eac:	4b36      	ldr	r3, [pc, #216]	@ (8017f88 <USBD_VND_TxCplt+0x620>)
 8017eae:	781b      	ldrb	r3, [r3, #0]
 8017eb0:	3301      	adds	r3, #1
 8017eb2:	b2db      	uxtb	r3, r3
 8017eb4:	f003 0307 	and.w	r3, r3, #7
 8017eb8:	b2da      	uxtb	r2, r3
 8017eba:	4b33      	ldr	r3, [pc, #204]	@ (8017f88 <USBD_VND_TxCplt+0x620>)
 8017ebc:	701a      	strb	r2, [r3, #0]
        stream_seq++; dbg_produced_seq++;
 8017ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8017f70 <USBD_VND_TxCplt+0x608>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	3301      	adds	r3, #1
 8017ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8017f70 <USBD_VND_TxCplt+0x608>)
 8017ec6:	6013      	str	r3, [r2, #0]
 8017ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8017f74 <USBD_VND_TxCplt+0x60c>)
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	3301      	adds	r3, #1
 8017ece:	4a29      	ldr	r2, [pc, #164]	@ (8017f74 <USBD_VND_TxCplt+0x60c>)
 8017ed0:	6013      	str	r3, [r2, #0]
        pending_B = 0; pending_B_since_ms = 0; sending_channel = 0xFF;
 8017ed2:	4b21      	ldr	r3, [pc, #132]	@ (8017f58 <USBD_VND_TxCplt+0x5f0>)
 8017ed4:	2200      	movs	r2, #0
 8017ed6:	701a      	strb	r2, [r3, #0]
 8017ed8:	4b20      	ldr	r3, [pc, #128]	@ (8017f5c <USBD_VND_TxCplt+0x5f4>)
 8017eda:	2200      	movs	r2, #0
 8017edc:	601a      	str	r2, [r3, #0]
 8017ede:	4b1d      	ldr	r3, [pc, #116]	@ (8017f54 <USBD_VND_TxCplt+0x5ec>)
 8017ee0:	22ff      	movs	r2, #255	@ 0xff
 8017ee2:	701a      	strb	r2, [r3, #0]
    /* Не планируем задержку следующей пары: передавать сразу при готовности */
            if(!first_pair_done){ first_pair_done = 1; }
 8017ee4:	4b25      	ldr	r3, [pc, #148]	@ (8017f7c <USBD_VND_TxCplt+0x614>)
 8017ee6:	781b      	ldrb	r3, [r3, #0]
 8017ee8:	b2db      	uxtb	r3, r3
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d102      	bne.n	8017ef4 <USBD_VND_TxCplt+0x58c>
 8017eee:	4b23      	ldr	r3, [pc, #140]	@ (8017f7c <USBD_VND_TxCplt+0x614>)
 8017ef0:	2201      	movs	r2, #1
 8017ef2:	701a      	strb	r2, [r3, #0]
            VND_LOG("GUARD(NON-FRAME): assume B done -> advance seq=%lu", (unsigned long)stream_seq);
 8017ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8017f70 <USBD_VND_TxCplt+0x608>)
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	4619      	mov	r1, r3
 8017efa:	4825      	ldr	r0, [pc, #148]	@ (8017f90 <USBD_VND_TxCplt+0x628>)
 8017efc:	f002 fd50 	bl	801a9a0 <iprintf>
 8017f00:	4820      	ldr	r0, [pc, #128]	@ (8017f84 <USBD_VND_TxCplt+0x61c>)
 8017f02:	f002 fdb5 	bl	801aa70 <puts>
            vnd_tx_kick = 1; return;
 8017f06:	4b17      	ldr	r3, [pc, #92]	@ (8017f64 <USBD_VND_TxCplt+0x5fc>)
 8017f08:	2201      	movs	r2, #1
 8017f0a:	701a      	strb	r2, [r3, #0]
 8017f0c:	e210      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
        } else {
            sending_channel = 0xFF; vnd_tx_kick = 1; return;
 8017f0e:	4b11      	ldr	r3, [pc, #68]	@ (8017f54 <USBD_VND_TxCplt+0x5ec>)
 8017f10:	22ff      	movs	r2, #255	@ 0xff
 8017f12:	701a      	strb	r2, [r3, #0]
 8017f14:	4b13      	ldr	r3, [pc, #76]	@ (8017f64 <USBD_VND_TxCplt+0x5fc>)
 8017f16:	2201      	movs	r2, #1
 8017f18:	701a      	strb	r2, [r3, #0]
 8017f1a:	e209      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
        }
    }
    uint8_t fl = eff_flags;
 8017f1c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8017f20:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if(fl == 0x80){
 8017f24:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8017f28:	2b80      	cmp	r3, #128	@ 0x80
 8017f2a:	d133      	bne.n	8017f94 <USBD_VND_TxCplt+0x62c>
        /* TEST */
        sending_channel = 0xFF; /* тест одиночный */
 8017f2c:	4b09      	ldr	r3, [pc, #36]	@ (8017f54 <USBD_VND_TxCplt+0x5ec>)
 8017f2e:	22ff      	movs	r2, #255	@ 0xff
 8017f30:	701a      	strb	r2, [r3, #0]
        vnd_tx_kick = 1; return;
 8017f32:	4b0c      	ldr	r3, [pc, #48]	@ (8017f64 <USBD_VND_TxCplt+0x5fc>)
 8017f34:	2201      	movs	r2, #1
 8017f36:	701a      	strb	r2, [r3, #0]
 8017f38:	e1fa      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
 8017f3a:	bf00      	nop
 8017f3c:	2400c610 	.word	0x2400c610
 8017f40:	2400c614 	.word	0x2400c614
 8017f44:	2400c5f4 	.word	0x2400c5f4
 8017f48:	2400c5e0 	.word	0x2400c5e0
 8017f4c:	24000042 	.word	0x24000042
 8017f50:	2400c630 	.word	0x2400c630
 8017f54:	2400004c 	.word	0x2400004c
 8017f58:	24018a32 	.word	0x24018a32
 8017f5c:	24018a34 	.word	0x24018a34
 8017f60:	24000048 	.word	0x24000048
 8017f64:	2400c688 	.word	0x2400c688
 8017f68:	2400c618 	.word	0x2400c618
 8017f6c:	2400c5f8 	.word	0x2400c5f8
 8017f70:	2400c5dc 	.word	0x2400c5dc
 8017f74:	2400c5f0 	.word	0x2400c5f0
 8017f78:	24000044 	.word	0x24000044
 8017f7c:	2400c678 	.word	0x2400c678
 8017f80:	0801d2e8 	.word	0x0801d2e8
 8017f84:	0801c9c8 	.word	0x0801c9c8
 8017f88:	24018a31 	.word	0x24018a31
 8017f8c:	2400dd70 	.word	0x2400dd70
 8017f90:	0801d30c 	.word	0x0801d30c
    }
    if(fl == 0x01){
 8017f94:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8017f98:	2b01      	cmp	r3, #1
 8017f9a:	d17e      	bne.n	801809a <USBD_VND_TxCplt+0x732>
        /* Это канал A */
        if(pending_B){ VND_LOG("WARN A_WHILE_PENDING_B seq=%lu hdr.seq=%lu", (unsigned long)stream_seq, (unsigned long)eff_seq); }
 8017f9c:	4b97      	ldr	r3, [pc, #604]	@ (80181fc <USBD_VND_TxCplt+0x894>)
 8017f9e:	781b      	ldrb	r3, [r3, #0]
 8017fa0:	b2db      	uxtb	r3, r3
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d00a      	beq.n	8017fbc <USBD_VND_TxCplt+0x654>
 8017fa6:	4b96      	ldr	r3, [pc, #600]	@ (8018200 <USBD_VND_TxCplt+0x898>)
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8017fae:	4619      	mov	r1, r3
 8017fb0:	4894      	ldr	r0, [pc, #592]	@ (8018204 <USBD_VND_TxCplt+0x89c>)
 8017fb2:	f002 fcf5 	bl	801a9a0 <iprintf>
 8017fb6:	4894      	ldr	r0, [pc, #592]	@ (8018208 <USBD_VND_TxCplt+0x8a0>)
 8017fb8:	f002 fd5a 	bl	801aa70 <puts>
        if(eff_seq != stream_seq){
 8017fbc:	4b90      	ldr	r3, [pc, #576]	@ (8018200 <USBD_VND_TxCplt+0x898>)
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8017fc4:	429a      	cmp	r2, r3
 8017fc6:	d00a      	beq.n	8017fde <USBD_VND_TxCplt+0x676>
            VND_LOG("WARN A_SEQ_MISMATCH hdr=%lu stream_seq=%lu", (unsigned long)eff_seq, (unsigned long)stream_seq);
 8017fc8:	4b8d      	ldr	r3, [pc, #564]	@ (8018200 <USBD_VND_TxCplt+0x898>)
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	461a      	mov	r2, r3
 8017fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8017fd2:	488e      	ldr	r0, [pc, #568]	@ (801820c <USBD_VND_TxCplt+0x8a4>)
 8017fd4:	f002 fce4 	bl	801a9a0 <iprintf>
 8017fd8:	488b      	ldr	r0, [pc, #556]	@ (8018208 <USBD_VND_TxCplt+0x8a0>)
 8017fda:	f002 fd49 	bl	801aa70 <puts>
        }
        static uint8_t first_a_txcplt_logged = 0; if(!first_a_txcplt_logged){ first_a_txcplt_logged = 1; VND_LOG("FIRST_A txcplt seq=%lu", (unsigned long)eff_seq); }
 8017fde:	4b8c      	ldr	r3, [pc, #560]	@ (8018210 <USBD_VND_TxCplt+0x8a8>)
 8017fe0:	781b      	ldrb	r3, [r3, #0]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d10a      	bne.n	8017ffc <USBD_VND_TxCplt+0x694>
 8017fe6:	4b8a      	ldr	r3, [pc, #552]	@ (8018210 <USBD_VND_TxCplt+0x8a8>)
 8017fe8:	2201      	movs	r2, #1
 8017fea:	701a      	strb	r2, [r3, #0]
 8017fec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8017ff0:	4888      	ldr	r0, [pc, #544]	@ (8018214 <USBD_VND_TxCplt+0x8ac>)
 8017ff2:	f002 fcd5 	bl	801a9a0 <iprintf>
 8017ff6:	4884      	ldr	r0, [pc, #528]	@ (8018208 <USBD_VND_TxCplt+0x8a0>)
 8017ff8:	f002 fd3a 	bl	801aa70 <puts>
    dbg_tx_sent++; dbg_sent_ch0_total++; dbg_sent_seq_adc0++;
 8017ffc:	4b86      	ldr	r3, [pc, #536]	@ (8018218 <USBD_VND_TxCplt+0x8b0>)
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	3301      	adds	r3, #1
 8018002:	4a85      	ldr	r2, [pc, #532]	@ (8018218 <USBD_VND_TxCplt+0x8b0>)
 8018004:	6013      	str	r3, [r2, #0]
 8018006:	4b85      	ldr	r3, [pc, #532]	@ (801821c <USBD_VND_TxCplt+0x8b4>)
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	3301      	adds	r3, #1
 801800c:	4a83      	ldr	r2, [pc, #524]	@ (801821c <USBD_VND_TxCplt+0x8b4>)
 801800e:	6013      	str	r3, [r2, #0]
 8018010:	4b83      	ldr	r3, [pc, #524]	@ (8018220 <USBD_VND_TxCplt+0x8b8>)
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	3301      	adds	r3, #1
 8018016:	4a82      	ldr	r2, [pc, #520]	@ (8018220 <USBD_VND_TxCplt+0x8b8>)
 8018018:	6013      	str	r3, [r2, #0]
    /* Добавим число сэмплов канала A из текущей пары */
    vnd_total_tx_samples += (uint64_t)g_frames[pair_send_idx][0].samples;
 801801a:	4b82      	ldr	r3, [pc, #520]	@ (8018224 <USBD_VND_TxCplt+0x8bc>)
 801801c:	781b      	ldrb	r3, [r3, #0]
 801801e:	4619      	mov	r1, r3
 8018020:	4a81      	ldr	r2, [pc, #516]	@ (8018228 <USBD_VND_TxCplt+0x8c0>)
 8018022:	f241 5398 	movw	r3, #5528	@ 0x1598
 8018026:	fb01 f303 	mul.w	r3, r1, r3
 801802a:	4413      	add	r3, r2
 801802c:	3302      	adds	r3, #2
 801802e:	881b      	ldrh	r3, [r3, #0]
 8018030:	b29b      	uxth	r3, r3
 8018032:	2200      	movs	r2, #0
 8018034:	61bb      	str	r3, [r7, #24]
 8018036:	61fa      	str	r2, [r7, #28]
 8018038:	4b7c      	ldr	r3, [pc, #496]	@ (801822c <USBD_VND_TxCplt+0x8c4>)
 801803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801803e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8018042:	4621      	mov	r1, r4
 8018044:	1889      	adds	r1, r1, r2
 8018046:	6139      	str	r1, [r7, #16]
 8018048:	4629      	mov	r1, r5
 801804a:	eb43 0101 	adc.w	r1, r3, r1
 801804e:	6179      	str	r1, [r7, #20]
 8018050:	4b76      	ldr	r3, [pc, #472]	@ (801822c <USBD_VND_TxCplt+0x8c4>)
 8018052:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8018056:	e9c3 1200 	strd	r1, r2, [r3]
        /* пометим A как завершённый для наглядности статуса */
        g_frames[pair_send_idx][0].st = FB_FILL;
 801805a:	4b72      	ldr	r3, [pc, #456]	@ (8018224 <USBD_VND_TxCplt+0x8bc>)
 801805c:	781b      	ldrb	r3, [r3, #0]
 801805e:	4619      	mov	r1, r3
 8018060:	4a71      	ldr	r2, [pc, #452]	@ (8018228 <USBD_VND_TxCplt+0x8c0>)
 8018062:	f241 5398 	movw	r3, #5528	@ 0x1598
 8018066:	fb01 f303 	mul.w	r3, r1, r3
 801806a:	4413      	add	r3, r2
 801806c:	2200      	movs	r2, #0
 801806e:	701a      	strb	r2, [r3, #0]
        sending_channel = 0xFF;
 8018070:	4b6f      	ldr	r3, [pc, #444]	@ (8018230 <USBD_VND_TxCplt+0x8c8>)
 8018072:	22ff      	movs	r2, #255	@ 0xff
 8018074:	701a      	strb	r2, [r3, #0]
        /* Запускаем ожидание B ровно здесь */
        pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8018076:	4b61      	ldr	r3, [pc, #388]	@ (80181fc <USBD_VND_TxCplt+0x894>)
 8018078:	2201      	movs	r2, #1
 801807a:	701a      	strb	r2, [r3, #0]
 801807c:	f7ec fb6c 	bl	8004758 <HAL_GetTick>
 8018080:	4603      	mov	r3, r0
 8018082:	4a6c      	ldr	r2, [pc, #432]	@ (8018234 <USBD_VND_TxCplt+0x8cc>)
 8018084:	6013      	str	r3, [r2, #0]
        /* Попытаемся немедленно отправить B, чтобы не ждать захода таска */
        if(!vnd_try_send_B_immediate()){
 8018086:	f7fe fb7b 	bl	8016780 <vnd_try_send_B_immediate>
 801808a:	4603      	mov	r3, r0
 801808c:	2b00      	cmp	r3, #0
 801808e:	f040 814c 	bne.w	801832a <USBD_VND_TxCplt+0x9c2>
            vnd_tx_kick = 1; return;
 8018092:	4b69      	ldr	r3, [pc, #420]	@ (8018238 <USBD_VND_TxCplt+0x8d0>)
 8018094:	2201      	movs	r2, #1
 8018096:	701a      	strb	r2, [r3, #0]
 8018098:	e14a      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
        } else { return; }
    } else if(fl == 0x02){
 801809a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801809e:	2b02      	cmp	r3, #2
 80180a0:	f040 80dc 	bne.w	801825c <USBD_VND_TxCplt+0x8f4>
    /* Канал B завершён — закрываем пару */
        if(!pending_B){ VND_LOG("WARN B_WITHOUT_PENDING seq=%lu hdr.seq=%lu", (unsigned long)stream_seq, (unsigned long)eff_seq); }
 80180a4:	4b55      	ldr	r3, [pc, #340]	@ (80181fc <USBD_VND_TxCplt+0x894>)
 80180a6:	781b      	ldrb	r3, [r3, #0]
 80180a8:	b2db      	uxtb	r3, r3
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d10a      	bne.n	80180c4 <USBD_VND_TxCplt+0x75c>
 80180ae:	4b54      	ldr	r3, [pc, #336]	@ (8018200 <USBD_VND_TxCplt+0x898>)
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80180b6:	4619      	mov	r1, r3
 80180b8:	4860      	ldr	r0, [pc, #384]	@ (801823c <USBD_VND_TxCplt+0x8d4>)
 80180ba:	f002 fc71 	bl	801a9a0 <iprintf>
 80180be:	4852      	ldr	r0, [pc, #328]	@ (8018208 <USBD_VND_TxCplt+0x8a0>)
 80180c0:	f002 fcd6 	bl	801aa70 <puts>
        if(eff_seq != stream_seq){
 80180c4:	4b4e      	ldr	r3, [pc, #312]	@ (8018200 <USBD_VND_TxCplt+0x898>)
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80180cc:	429a      	cmp	r2, r3
 80180ce:	d00a      	beq.n	80180e6 <USBD_VND_TxCplt+0x77e>
            VND_LOG("WARN B_SEQ_MISMATCH hdr=%lu stream_seq=%lu", (unsigned long)eff_seq, (unsigned long)stream_seq);
 80180d0:	4b4b      	ldr	r3, [pc, #300]	@ (8018200 <USBD_VND_TxCplt+0x898>)
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	461a      	mov	r2, r3
 80180d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80180da:	4859      	ldr	r0, [pc, #356]	@ (8018240 <USBD_VND_TxCplt+0x8d8>)
 80180dc:	f002 fc60 	bl	801a9a0 <iprintf>
 80180e0:	4849      	ldr	r0, [pc, #292]	@ (8018208 <USBD_VND_TxCplt+0x8a0>)
 80180e2:	f002 fcc5 	bl	801aa70 <puts>
        }
        static uint8_t first_b_logged = 0; if(!first_b_logged){ first_b_logged = 1; VND_LOG("FIRST_B txcplt seq=%lu", (unsigned long)eff_seq); }
 80180e6:	4b57      	ldr	r3, [pc, #348]	@ (8018244 <USBD_VND_TxCplt+0x8dc>)
 80180e8:	781b      	ldrb	r3, [r3, #0]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d10a      	bne.n	8018104 <USBD_VND_TxCplt+0x79c>
 80180ee:	4b55      	ldr	r3, [pc, #340]	@ (8018244 <USBD_VND_TxCplt+0x8dc>)
 80180f0:	2201      	movs	r2, #1
 80180f2:	701a      	strb	r2, [r3, #0]
 80180f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80180f8:	4853      	ldr	r0, [pc, #332]	@ (8018248 <USBD_VND_TxCplt+0x8e0>)
 80180fa:	f002 fc51 	bl	801a9a0 <iprintf>
 80180fe:	4842      	ldr	r0, [pc, #264]	@ (8018208 <USBD_VND_TxCplt+0x8a0>)
 8018100:	f002 fcb6 	bl	801aa70 <puts>
    dbg_tx_sent++; dbg_sent_ch1_total++; dbg_sent_seq_adc1++;
 8018104:	4b44      	ldr	r3, [pc, #272]	@ (8018218 <USBD_VND_TxCplt+0x8b0>)
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	3301      	adds	r3, #1
 801810a:	4a43      	ldr	r2, [pc, #268]	@ (8018218 <USBD_VND_TxCplt+0x8b0>)
 801810c:	6013      	str	r3, [r2, #0]
 801810e:	4b4f      	ldr	r3, [pc, #316]	@ (801824c <USBD_VND_TxCplt+0x8e4>)
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	3301      	adds	r3, #1
 8018114:	4a4d      	ldr	r2, [pc, #308]	@ (801824c <USBD_VND_TxCplt+0x8e4>)
 8018116:	6013      	str	r3, [r2, #0]
 8018118:	4b4d      	ldr	r3, [pc, #308]	@ (8018250 <USBD_VND_TxCplt+0x8e8>)
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	3301      	adds	r3, #1
 801811e:	4a4c      	ldr	r2, [pc, #304]	@ (8018250 <USBD_VND_TxCplt+0x8e8>)
 8018120:	6013      	str	r3, [r2, #0]
    vnd_total_tx_samples += (uint64_t)g_frames[pair_send_idx][1].samples;
 8018122:	4b40      	ldr	r3, [pc, #256]	@ (8018224 <USBD_VND_TxCplt+0x8bc>)
 8018124:	781b      	ldrb	r3, [r3, #0]
 8018126:	4619      	mov	r1, r3
 8018128:	4a3f      	ldr	r2, [pc, #252]	@ (8018228 <USBD_VND_TxCplt+0x8c0>)
 801812a:	f241 5398 	movw	r3, #5528	@ 0x1598
 801812e:	fb01 f303 	mul.w	r3, r1, r3
 8018132:	4413      	add	r3, r2
 8018134:	f603 23ce 	addw	r3, r3, #2766	@ 0xace
 8018138:	881b      	ldrh	r3, [r3, #0]
 801813a:	b29b      	uxth	r3, r3
 801813c:	2200      	movs	r2, #0
 801813e:	60bb      	str	r3, [r7, #8]
 8018140:	60fa      	str	r2, [r7, #12]
 8018142:	4b3a      	ldr	r3, [pc, #232]	@ (801822c <USBD_VND_TxCplt+0x8c4>)
 8018144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018148:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801814c:	4621      	mov	r1, r4
 801814e:	1889      	adds	r1, r1, r2
 8018150:	6039      	str	r1, [r7, #0]
 8018152:	4629      	mov	r1, r5
 8018154:	eb43 0101 	adc.w	r1, r3, r1
 8018158:	6079      	str	r1, [r7, #4]
 801815a:	4b34      	ldr	r3, [pc, #208]	@ (801822c <USBD_VND_TxCplt+0x8c4>)
 801815c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8018160:	e9c3 1200 	strd	r1, r2, [r3]
        ChanFrame *f0 = &g_frames[pair_send_idx][0];
 8018164:	4b2f      	ldr	r3, [pc, #188]	@ (8018224 <USBD_VND_TxCplt+0x8bc>)
 8018166:	781b      	ldrb	r3, [r3, #0]
 8018168:	461a      	mov	r2, r3
 801816a:	f241 5398 	movw	r3, #5528	@ 0x1598
 801816e:	fb02 f303 	mul.w	r3, r2, r3
 8018172:	4a2d      	ldr	r2, [pc, #180]	@ (8018228 <USBD_VND_TxCplt+0x8c0>)
 8018174:	4413      	add	r3, r2
 8018176:	67bb      	str	r3, [r7, #120]	@ 0x78
        ChanFrame *f1 = &g_frames[pair_send_idx][1];
 8018178:	4b2a      	ldr	r3, [pc, #168]	@ (8018224 <USBD_VND_TxCplt+0x8bc>)
 801817a:	781b      	ldrb	r3, [r3, #0]
 801817c:	461a      	mov	r2, r3
 801817e:	f241 5398 	movw	r3, #5528	@ 0x1598
 8018182:	fb02 f303 	mul.w	r3, r2, r3
 8018186:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 801818a:	4a27      	ldr	r2, [pc, #156]	@ (8018228 <USBD_VND_TxCplt+0x8c0>)
 801818c:	4413      	add	r3, r2
 801818e:	677b      	str	r3, [r7, #116]	@ 0x74
        f0->st = f1->st = FB_FILL;
 8018190:	2100      	movs	r1, #0
 8018192:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018194:	460a      	mov	r2, r1
 8018196:	701a      	strb	r2, [r3, #0]
 8018198:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801819a:	460a      	mov	r2, r1
 801819c:	701a      	strb	r2, [r3, #0]
        pair_send_idx = (pair_send_idx + 1u) % VND_PAIR_BUFFERS;
 801819e:	4b21      	ldr	r3, [pc, #132]	@ (8018224 <USBD_VND_TxCplt+0x8bc>)
 80181a0:	781b      	ldrb	r3, [r3, #0]
 80181a2:	3301      	adds	r3, #1
 80181a4:	b2db      	uxtb	r3, r3
 80181a6:	f003 0307 	and.w	r3, r3, #7
 80181aa:	b2da      	uxtb	r2, r3
 80181ac:	4b1d      	ldr	r3, [pc, #116]	@ (8018224 <USBD_VND_TxCplt+0x8bc>)
 80181ae:	701a      	strb	r2, [r3, #0]
        stream_seq++; dbg_produced_seq++;
 80181b0:	4b13      	ldr	r3, [pc, #76]	@ (8018200 <USBD_VND_TxCplt+0x898>)
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	3301      	adds	r3, #1
 80181b6:	4a12      	ldr	r2, [pc, #72]	@ (8018200 <USBD_VND_TxCplt+0x898>)
 80181b8:	6013      	str	r3, [r2, #0]
 80181ba:	4b26      	ldr	r3, [pc, #152]	@ (8018254 <USBD_VND_TxCplt+0x8ec>)
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	3301      	adds	r3, #1
 80181c0:	4a24      	ldr	r2, [pc, #144]	@ (8018254 <USBD_VND_TxCplt+0x8ec>)
 80181c2:	6013      	str	r3, [r2, #0]
        pending_B = 0; pending_B_since_ms = 0; sending_channel = 0xFF;
 80181c4:	4b0d      	ldr	r3, [pc, #52]	@ (80181fc <USBD_VND_TxCplt+0x894>)
 80181c6:	2200      	movs	r2, #0
 80181c8:	701a      	strb	r2, [r3, #0]
 80181ca:	4b1a      	ldr	r3, [pc, #104]	@ (8018234 <USBD_VND_TxCplt+0x8cc>)
 80181cc:	2200      	movs	r2, #0
 80181ce:	601a      	str	r2, [r3, #0]
 80181d0:	4b17      	ldr	r3, [pc, #92]	@ (8018230 <USBD_VND_TxCplt+0x8c8>)
 80181d2:	22ff      	movs	r2, #255	@ 0xff
 80181d4:	701a      	strb	r2, [r3, #0]
        if(!first_pair_done){ first_pair_done = 1; }
 80181d6:	4b20      	ldr	r3, [pc, #128]	@ (8018258 <USBD_VND_TxCplt+0x8f0>)
 80181d8:	781b      	ldrb	r3, [r3, #0]
 80181da:	b2db      	uxtb	r3, r3
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d102      	bne.n	80181e6 <USBD_VND_TxCplt+0x87e>
 80181e0:	4b1d      	ldr	r3, [pc, #116]	@ (8018258 <USBD_VND_TxCplt+0x8f0>)
 80181e2:	2201      	movs	r2, #1
 80181e4:	701a      	strb	r2, [r3, #0]
        /* Сразу пытаемся отправить следующий A новой пары (если готов) */
        if(!vnd_try_send_A_nextpair_immediate()){
 80181e6:	f7fe fb89 	bl	80168fc <vnd_try_send_A_nextpair_immediate>
 80181ea:	4603      	mov	r3, r0
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	f040 809e 	bne.w	801832e <USBD_VND_TxCplt+0x9c6>
            /* Без планирования задержек: следующая пара начнётся как только готова */
            vnd_tx_kick = 1; return;
 80181f2:	4b11      	ldr	r3, [pc, #68]	@ (8018238 <USBD_VND_TxCplt+0x8d0>)
 80181f4:	2201      	movs	r2, #1
 80181f6:	701a      	strb	r2, [r3, #0]
 80181f8:	e09a      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
 80181fa:	bf00      	nop
 80181fc:	24018a32 	.word	0x24018a32
 8018200:	2400c5dc 	.word	0x2400c5dc
 8018204:	0801d348 	.word	0x0801d348
 8018208:	0801c9c8 	.word	0x0801c9c8
 801820c:	0801d37c 	.word	0x0801d37c
 8018210:	24018ac4 	.word	0x24018ac4
 8018214:	0801d3b0 	.word	0x0801d3b0
 8018218:	2400c610 	.word	0x2400c610
 801821c:	2400c614 	.word	0x2400c614
 8018220:	2400c5f4 	.word	0x2400c5f4
 8018224:	24018a31 	.word	0x24018a31
 8018228:	2400dd70 	.word	0x2400dd70
 801822c:	2400c630 	.word	0x2400c630
 8018230:	2400004c 	.word	0x2400004c
 8018234:	24018a34 	.word	0x24018a34
 8018238:	2400c688 	.word	0x2400c688
 801823c:	0801d3d0 	.word	0x0801d3d0
 8018240:	0801d404 	.word	0x0801d404
 8018244:	24018ac5 	.word	0x24018ac5
 8018248:	0801d438 	.word	0x0801d438
 801824c:	2400c618 	.word	0x2400c618
 8018250:	2400c5f8 	.word	0x2400c5f8
 8018254:	2400c5f0 	.word	0x2400c5f0
 8018258:	2400c678 	.word	0x2400c678
        } else { return; }
    } else {
        VND_LOG("WARN UNKNOWN FLAGS 0x%02X in TxCplt", (unsigned)fl);
 801825c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8018260:	4619      	mov	r1, r3
 8018262:	4835      	ldr	r0, [pc, #212]	@ (8018338 <USBD_VND_TxCplt+0x9d0>)
 8018264:	f002 fb9c 	bl	801a9a0 <iprintf>
 8018268:	4834      	ldr	r0, [pc, #208]	@ (801833c <USBD_VND_TxCplt+0x9d4>)
 801826a:	f002 fc01 	bl	801aa70 <puts>
        sending_channel = 0xFF;
 801826e:	4b34      	ldr	r3, [pc, #208]	@ (8018340 <USBD_VND_TxCplt+0x9d8>)
 8018270:	22ff      	movs	r2, #255	@ 0xff
 8018272:	701a      	strb	r2, [r3, #0]
        /* РЕЗЕРВ: если классификация не распознала, но прямо перед этим слали B — закроем пару */
        if(pending_B && (prev_sending == 1 || last_tx_flags == 0x02)){
 8018274:	4b33      	ldr	r3, [pc, #204]	@ (8018344 <USBD_VND_TxCplt+0x9dc>)
 8018276:	781b      	ldrb	r3, [r3, #0]
 8018278:	b2db      	uxtb	r3, r3
 801827a:	2b00      	cmp	r3, #0
 801827c:	d04d      	beq.n	801831a <USBD_VND_TxCplt+0x9b2>
 801827e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8018282:	2b01      	cmp	r3, #1
 8018284:	d004      	beq.n	8018290 <USBD_VND_TxCplt+0x928>
 8018286:	4b30      	ldr	r3, [pc, #192]	@ (8018348 <USBD_VND_TxCplt+0x9e0>)
 8018288:	781b      	ldrb	r3, [r3, #0]
 801828a:	b2db      	uxtb	r3, r3
 801828c:	2b02      	cmp	r3, #2
 801828e:	d144      	bne.n	801831a <USBD_VND_TxCplt+0x9b2>
            ChanFrame *f0 = &g_frames[pair_send_idx][0];
 8018290:	4b2e      	ldr	r3, [pc, #184]	@ (801834c <USBD_VND_TxCplt+0x9e4>)
 8018292:	781b      	ldrb	r3, [r3, #0]
 8018294:	461a      	mov	r2, r3
 8018296:	f241 5398 	movw	r3, #5528	@ 0x1598
 801829a:	fb02 f303 	mul.w	r3, r2, r3
 801829e:	4a2c      	ldr	r2, [pc, #176]	@ (8018350 <USBD_VND_TxCplt+0x9e8>)
 80182a0:	4413      	add	r3, r2
 80182a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            ChanFrame *f1 = &g_frames[pair_send_idx][1];
 80182a6:	4b29      	ldr	r3, [pc, #164]	@ (801834c <USBD_VND_TxCplt+0x9e4>)
 80182a8:	781b      	ldrb	r3, [r3, #0]
 80182aa:	461a      	mov	r2, r3
 80182ac:	f241 5398 	movw	r3, #5528	@ 0x1598
 80182b0:	fb02 f303 	mul.w	r3, r2, r3
 80182b4:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80182b8:	4a25      	ldr	r2, [pc, #148]	@ (8018350 <USBD_VND_TxCplt+0x9e8>)
 80182ba:	4413      	add	r3, r2
 80182bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
            f0->st = f1->st = FB_FILL;
 80182be:	2100      	movs	r1, #0
 80182c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80182c2:	460a      	mov	r2, r1
 80182c4:	701a      	strb	r2, [r3, #0]
 80182c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80182ca:	460a      	mov	r2, r1
 80182cc:	701a      	strb	r2, [r3, #0]
            pair_send_idx = (pair_send_idx + 1u) % VND_PAIR_BUFFERS;
 80182ce:	4b1f      	ldr	r3, [pc, #124]	@ (801834c <USBD_VND_TxCplt+0x9e4>)
 80182d0:	781b      	ldrb	r3, [r3, #0]
 80182d2:	3301      	adds	r3, #1
 80182d4:	b2db      	uxtb	r3, r3
 80182d6:	f003 0307 	and.w	r3, r3, #7
 80182da:	b2da      	uxtb	r2, r3
 80182dc:	4b1b      	ldr	r3, [pc, #108]	@ (801834c <USBD_VND_TxCplt+0x9e4>)
 80182de:	701a      	strb	r2, [r3, #0]
            stream_seq++; dbg_produced_seq++;
 80182e0:	4b1c      	ldr	r3, [pc, #112]	@ (8018354 <USBD_VND_TxCplt+0x9ec>)
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	3301      	adds	r3, #1
 80182e6:	4a1b      	ldr	r2, [pc, #108]	@ (8018354 <USBD_VND_TxCplt+0x9ec>)
 80182e8:	6013      	str	r3, [r2, #0]
 80182ea:	4b1b      	ldr	r3, [pc, #108]	@ (8018358 <USBD_VND_TxCplt+0x9f0>)
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	3301      	adds	r3, #1
 80182f0:	4a19      	ldr	r2, [pc, #100]	@ (8018358 <USBD_VND_TxCplt+0x9f0>)
 80182f2:	6013      	str	r3, [r2, #0]
            pending_B = 0; pending_B_since_ms = 0; sending_channel = 0xFF;
 80182f4:	4b13      	ldr	r3, [pc, #76]	@ (8018344 <USBD_VND_TxCplt+0x9dc>)
 80182f6:	2200      	movs	r2, #0
 80182f8:	701a      	strb	r2, [r3, #0]
 80182fa:	4b18      	ldr	r3, [pc, #96]	@ (801835c <USBD_VND_TxCplt+0x9f4>)
 80182fc:	2200      	movs	r2, #0
 80182fe:	601a      	str	r2, [r3, #0]
 8018300:	4b0f      	ldr	r3, [pc, #60]	@ (8018340 <USBD_VND_TxCplt+0x9d8>)
 8018302:	22ff      	movs	r2, #255	@ 0xff
 8018304:	701a      	strb	r2, [r3, #0]
            /* Без планирования задержек */
            VND_LOG("FALLBACK_CLOSE_PAIR after UNKNOWN meta (assume B)");
 8018306:	4816      	ldr	r0, [pc, #88]	@ (8018360 <USBD_VND_TxCplt+0x9f8>)
 8018308:	f002 fb4a 	bl	801a9a0 <iprintf>
 801830c:	480b      	ldr	r0, [pc, #44]	@ (801833c <USBD_VND_TxCplt+0x9d4>)
 801830e:	f002 fbaf 	bl	801aa70 <puts>
            vnd_tx_kick = 1; return;
 8018312:	4b14      	ldr	r3, [pc, #80]	@ (8018364 <USBD_VND_TxCplt+0x9fc>)
 8018314:	2201      	movs	r2, #1
 8018316:	701a      	strb	r2, [r3, #0]
 8018318:	e00a      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
        }
        vnd_tx_kick = 1; return;
 801831a:	4b12      	ldr	r3, [pc, #72]	@ (8018364 <USBD_VND_TxCplt+0x9fc>)
 801831c:	2201      	movs	r2, #1
 801831e:	701a      	strb	r2, [r3, #0]
 8018320:	e006      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
                return;
 8018322:	bf00      	nop
 8018324:	e004      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
                return;
 8018326:	bf00      	nop
 8018328:	e002      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
        } else { return; }
 801832a:	bf00      	nop
 801832c:	e000      	b.n	8018330 <USBD_VND_TxCplt+0x9c8>
        } else { return; }
 801832e:	bf00      	nop
    }
}
 8018330:	379c      	adds	r7, #156	@ 0x9c
 8018332:	46bd      	mov	sp, r7
 8018334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018338:	0801d458 	.word	0x0801d458
 801833c:	0801c9c8 	.word	0x0801c9c8
 8018340:	2400004c 	.word	0x2400004c
 8018344:	24018a32 	.word	0x24018a32
 8018348:	2400c659 	.word	0x2400c659
 801834c:	24018a31 	.word	0x24018a31
 8018350:	2400dd70 	.word	0x2400dd70
 8018354:	2400c5dc 	.word	0x2400c5dc
 8018358:	2400c5f0 	.word	0x2400c5f0
 801835c:	24018a34 	.word	0x24018a34
 8018360:	0801d484 	.word	0x0801d484
 8018364:	2400c688 	.word	0x2400c688

08018368 <USBD_VND_DataReceived>:

/* Приём команд */
void USBD_VND_DataReceived(const uint8_t *data, uint32_t len)
{
 8018368:	b5b0      	push	{r4, r5, r7, lr}
 801836a:	b09e      	sub	sp, #120	@ 0x78
 801836c:	af04      	add	r7, sp, #16
 801836e:	6078      	str	r0, [r7, #4]
 8018370:	6039      	str	r1, [r7, #0]
    if(!len) return;
 8018372:	683b      	ldr	r3, [r7, #0]
 8018374:	2b00      	cmp	r3, #0
 8018376:	f000 8588 	beq.w	8018e8a <USBD_VND_DataReceived+0xb22>
    uint8_t cmd = data[0];
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	781b      	ldrb	r3, [r3, #0]
 801837e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
    static uint32_t rcv_count = 0;
    rcv_count++;
 8018382:	4bbb      	ldr	r3, [pc, #748]	@ (8018670 <USBD_VND_DataReceived+0x308>)
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	3301      	adds	r3, #1
 8018388:	4ab9      	ldr	r2, [pc, #740]	@ (8018670 <USBD_VND_DataReceived+0x308>)
 801838a:	6013      	str	r3, [r2, #0]
    printf("[VND_RCV] #%lu CMD 0x%02X len=%lu\r\n", rcv_count, cmd, (unsigned long)len);
 801838c:	4bb8      	ldr	r3, [pc, #736]	@ (8018670 <USBD_VND_DataReceived+0x308>)
 801838e:	6819      	ldr	r1, [r3, #0]
 8018390:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8018394:	683b      	ldr	r3, [r7, #0]
 8018396:	48b7      	ldr	r0, [pc, #732]	@ (8018674 <USBD_VND_DataReceived+0x30c>)
 8018398:	f002 fb02 	bl	801a9a0 <iprintf>
    VND_LOG("CMD 0x%02X len=%lu", cmd, (unsigned long)len);
 801839c:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80183a0:	683a      	ldr	r2, [r7, #0]
 80183a2:	4619      	mov	r1, r3
 80183a4:	48b4      	ldr	r0, [pc, #720]	@ (8018678 <USBD_VND_DataReceived+0x310>)
 80183a6:	f002 fafb 	bl	801a9a0 <iprintf>
 80183aa:	48b4      	ldr	r0, [pc, #720]	@ (801867c <USBD_VND_DataReceived+0x314>)
 80183ac:	f002 fb60 	bl	801aa70 <puts>
    switch(cmd)
 80183b0:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80183b4:	3b10      	subs	r3, #16
 80183b6:	2b20      	cmp	r3, #32
 80183b8:	f200 855d 	bhi.w	8018e76 <USBD_VND_DataReceived+0xb0e>
 80183bc:	a201      	add	r2, pc, #4	@ (adr r2, 80183c4 <USBD_VND_DataReceived+0x5c>)
 80183be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183c2:	bf00      	nop
 80183c4:	08018ad3 	.word	0x08018ad3
 80183c8:	08018b7f 	.word	0x08018b7f
 80183cc:	08018e77 	.word	0x08018e77
 80183d0:	08018c11 	.word	0x08018c11
 80183d4:	08018db1 	.word	0x08018db1
 80183d8:	08018e39 	.word	0x08018e39
 80183dc:	08018d55 	.word	0x08018d55
 80183e0:	080187d9 	.word	0x080187d9
 80183e4:	08018e77 	.word	0x08018e77
 80183e8:	08018e77 	.word	0x08018e77
 80183ec:	08018e77 	.word	0x08018e77
 80183f0:	08018e77 	.word	0x08018e77
 80183f4:	08018e77 	.word	0x08018e77
 80183f8:	08018e77 	.word	0x08018e77
 80183fc:	08018e77 	.word	0x08018e77
 8018400:	08018e77 	.word	0x08018e77
 8018404:	08018449 	.word	0x08018449
 8018408:	08018875 	.word	0x08018875
 801840c:	08018e77 	.word	0x08018e77
 8018410:	08018e77 	.word	0x08018e77
 8018414:	08018e77 	.word	0x08018e77
 8018418:	08018e77 	.word	0x08018e77
 801841c:	08018e77 	.word	0x08018e77
 8018420:	08018e77 	.word	0x08018e77
 8018424:	08018e77 	.word	0x08018e77
 8018428:	08018e77 	.word	0x08018e77
 801842c:	08018e77 	.word	0x08018e77
 8018430:	08018e77 	.word	0x08018e77
 8018434:	08018e77 	.word	0x08018e77
 8018438:	08018e77 	.word	0x08018e77
 801843c:	08018e77 	.word	0x08018e77
 8018440:	08018e77 	.word	0x08018e77
 8018444:	08018963 	.word	0x08018963
    {
        case VND_CMD_START_STREAM:
        {
            /* Разрешаем START в любое время: мягко перезапускаем поток */
                VND_LOG("START_STREAM received");
 8018448:	488d      	ldr	r0, [pc, #564]	@ (8018680 <USBD_VND_DataReceived+0x318>)
 801844a:	f002 faa9 	bl	801a9a0 <iprintf>
 801844e:	488b      	ldr	r0, [pc, #556]	@ (801867c <USBD_VND_DataReceived+0x314>)
 8018450:	f002 fb0e 	bl	801aa70 <puts>
                vnd_reset_buffers();
 8018454:	f7fd f936 	bl	80156c4 <vnd_reset_buffers>
                pair_send_idx = 0; pair_fill_idx = 0; sending_channel = 0xFF; pending_B = 0; pending_B_since_ms = 0;
 8018458:	4b8a      	ldr	r3, [pc, #552]	@ (8018684 <USBD_VND_DataReceived+0x31c>)
 801845a:	2200      	movs	r2, #0
 801845c:	701a      	strb	r2, [r3, #0]
 801845e:	4b8a      	ldr	r3, [pc, #552]	@ (8018688 <USBD_VND_DataReceived+0x320>)
 8018460:	2200      	movs	r2, #0
 8018462:	701a      	strb	r2, [r3, #0]
 8018464:	4b89      	ldr	r3, [pc, #548]	@ (801868c <USBD_VND_DataReceived+0x324>)
 8018466:	22ff      	movs	r2, #255	@ 0xff
 8018468:	701a      	strb	r2, [r3, #0]
 801846a:	4b89      	ldr	r3, [pc, #548]	@ (8018690 <USBD_VND_DataReceived+0x328>)
 801846c:	2200      	movs	r2, #0
 801846e:	701a      	strb	r2, [r3, #0]
 8018470:	4b88      	ldr	r3, [pc, #544]	@ (8018694 <USBD_VND_DataReceived+0x32c>)
 8018472:	2200      	movs	r2, #0
 8018474:	601a      	str	r2, [r3, #0]
                /* Сброс фиксации размера и планировщика */
                cur_samples_per_frame = 0; cur_expected_frame_size = 0;
 8018476:	4b88      	ldr	r3, [pc, #544]	@ (8018698 <USBD_VND_DataReceived+0x330>)
 8018478:	2200      	movs	r2, #0
 801847a:	801a      	strh	r2, [r3, #0]
 801847c:	4b87      	ldr	r3, [pc, #540]	@ (801869c <USBD_VND_DataReceived+0x334>)
 801847e:	2200      	movs	r2, #0
 8018480:	801a      	strh	r2, [r3, #0]
                vnd_next_pair_ms = 0;
 8018482:	4b87      	ldr	r3, [pc, #540]	@ (80186a0 <USBD_VND_DataReceived+0x338>)
 8018484:	2200      	movs	r2, #0
 8018486:	601a      	str	r2, [r3, #0]
                /* Состояние теста/ACK */
                test_in_flight = 0; test_pending = 0;
 8018488:	4b86      	ldr	r3, [pc, #536]	@ (80186a4 <USBD_VND_DataReceived+0x33c>)
 801848a:	2200      	movs	r2, #0
 801848c:	701a      	strb	r2, [r3, #0]
 801848e:	4b86      	ldr	r3, [pc, #536]	@ (80186a8 <USBD_VND_DataReceived+0x340>)
 8018490:	2200      	movs	r2, #0
 8018492:	701a      	strb	r2, [r3, #0]
#if VND_DISABLE_TEST
                test_sent = 1; /* тест отключён: считать выполненным */
 8018494:	4b85      	ldr	r3, [pc, #532]	@ (80186ac <USBD_VND_DataReceived+0x344>)
 8018496:	2201      	movs	r2, #1
 8018498:	701a      	strb	r2, [r3, #0]
#else
                test_sent = 0;
#endif
                start_stat_planned = 0; start_stat_inflight = 0; start_ack_done = 1; /* ACK считаем выполненным логически */
 801849a:	4b85      	ldr	r3, [pc, #532]	@ (80186b0 <USBD_VND_DataReceived+0x348>)
 801849c:	2200      	movs	r2, #0
 801849e:	701a      	strb	r2, [r3, #0]
 80184a0:	4b84      	ldr	r3, [pc, #528]	@ (80186b4 <USBD_VND_DataReceived+0x34c>)
 80184a2:	2200      	movs	r2, #0
 80184a4:	701a      	strb	r2, [r3, #0]
 80184a6:	4b84      	ldr	r3, [pc, #528]	@ (80186b8 <USBD_VND_DataReceived+0x350>)
 80184a8:	2201      	movs	r2, #1
 80184aa:	701a      	strb	r2, [r3, #0]
                pending_status = 0; status_ack_pending = 0; /* не пытаться слать STAT через IN */
 80184ac:	4b83      	ldr	r3, [pc, #524]	@ (80186bc <USBD_VND_DataReceived+0x354>)
 80184ae:	2200      	movs	r2, #0
 80184b0:	701a      	strb	r2, [r3, #0]
 80184b2:	4b83      	ldr	r3, [pc, #524]	@ (80186c0 <USBD_VND_DataReceived+0x358>)
 80184b4:	2200      	movs	r2, #0
 80184b6:	701a      	strb	r2, [r3, #0]
                vnd_error_counter = 0;
 80184b8:	4b82      	ldr	r3, [pc, #520]	@ (80186c4 <USBD_VND_DataReceived+0x35c>)
 80184ba:	2200      	movs	r2, #0
 80184bc:	601a      	str	r2, [r3, #0]
                /* Синхронизация последовательностей пар */
                stream_seq = 0; next_seq_to_assign = 0; dbg_produced_seq = 0;
 80184be:	4b82      	ldr	r3, [pc, #520]	@ (80186c8 <USBD_VND_DataReceived+0x360>)
 80184c0:	2200      	movs	r2, #0
 80184c2:	601a      	str	r2, [r3, #0]
 80184c4:	4b81      	ldr	r3, [pc, #516]	@ (80186cc <USBD_VND_DataReceived+0x364>)
 80184c6:	2200      	movs	r2, #0
 80184c8:	601a      	str	r2, [r3, #0]
 80184ca:	4b81      	ldr	r3, [pc, #516]	@ (80186d0 <USBD_VND_DataReceived+0x368>)
 80184cc:	2200      	movs	r2, #0
 80184ce:	601a      	str	r2, [r3, #0]
                first_pair_done = 0;
 80184d0:	4b80      	ldr	r3, [pc, #512]	@ (80186d4 <USBD_VND_DataReceived+0x36c>)
 80184d2:	2200      	movs	r2, #0
 80184d4:	701a      	strb	r2, [r3, #0]
                dbg_sent_ch0_total = 0; dbg_sent_ch1_total = 0;
 80184d6:	4b80      	ldr	r3, [pc, #512]	@ (80186d8 <USBD_VND_DataReceived+0x370>)
 80184d8:	2200      	movs	r2, #0
 80184da:	601a      	str	r2, [r3, #0]
 80184dc:	4b7f      	ldr	r3, [pc, #508]	@ (80186dc <USBD_VND_DataReceived+0x374>)
 80184de:	2200      	movs	r2, #0
 80184e0:	601a      	str	r2, [r3, #0]
                start_cmd_ms = HAL_GetTick();
 80184e2:	f7ec f939 	bl	8004758 <HAL_GetTick>
 80184e6:	4603      	mov	r3, r0
 80184e8:	4a7d      	ldr	r2, [pc, #500]	@ (80186e0 <USBD_VND_DataReceived+0x378>)
 80184ea:	6013      	str	r3, [r2, #0]
                /* Снимем DMA снапшот для контроля таймаута */
                adc_stream_debug_t dbg; adc_stream_get_debug(&dbg);
 80184ec:	f107 0308 	add.w	r3, r7, #8
 80184f0:	4618      	mov	r0, r3
 80184f2:	f7e8 f94d 	bl	8000790 <adc_stream_get_debug>
                dma_snapshot_full0 = dbg.dma_full0; dma_snapshot_full1 = dbg.dma_full1;
 80184f6:	69fb      	ldr	r3, [r7, #28]
 80184f8:	4a7a      	ldr	r2, [pc, #488]	@ (80186e4 <USBD_VND_DataReceived+0x37c>)
 80184fa:	6013      	str	r3, [r2, #0]
 80184fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184fe:	4a7a      	ldr	r2, [pc, #488]	@ (80186e8 <USBD_VND_DataReceived+0x380>)
 8018500:	6013      	str	r3, [r2, #0]
                /* ПРОАКТИВНО: очистим возможный "хвост" занятости IN EP с прошлой сессии */
                do {
                    extern void USBD_VND_ForceTxIdle(void);
                    USBD_VND_ForceTxIdle();
 8018502:	f000 fee7 	bl	80192d4 <USBD_VND_ForceTxIdle>
                    vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0;
 8018506:	4b79      	ldr	r3, [pc, #484]	@ (80186ec <USBD_VND_DataReceived+0x384>)
 8018508:	2200      	movs	r2, #0
 801850a:	701a      	strb	r2, [r3, #0]
 801850c:	4b78      	ldr	r3, [pc, #480]	@ (80186f0 <USBD_VND_DataReceived+0x388>)
 801850e:	2201      	movs	r2, #1
 8018510:	701a      	strb	r2, [r3, #0]
 8018512:	4b78      	ldr	r3, [pc, #480]	@ (80186f4 <USBD_VND_DataReceived+0x38c>)
 8018514:	2200      	movs	r2, #0
 8018516:	701a      	strb	r2, [r3, #0]
                    vnd_last_tx_start_ms = 0; /* чтобы WDG не сработал по старой метке */
 8018518:	4b77      	ldr	r3, [pc, #476]	@ (80186f8 <USBD_VND_DataReceived+0x390>)
 801851a:	2200      	movs	r2, #0
 801851c:	601a      	str	r2, [r3, #0]
                    /* Полностью очистим meta-FIFO для корректной классификации первой пары */
                    vnd_tx_meta_head = vnd_tx_meta_tail = 0;
 801851e:	4b77      	ldr	r3, [pc, #476]	@ (80186fc <USBD_VND_DataReceived+0x394>)
 8018520:	2200      	movs	r2, #0
 8018522:	701a      	strb	r2, [r3, #0]
 8018524:	4b75      	ldr	r3, [pc, #468]	@ (80186fc <USBD_VND_DataReceived+0x394>)
 8018526:	781a      	ldrb	r2, [r3, #0]
 8018528:	4b75      	ldr	r3, [pc, #468]	@ (8018700 <USBD_VND_DataReceived+0x398>)
 801852a:	701a      	strb	r2, [r3, #0]
                    meta_push_total = meta_pop_total = meta_empty_events = meta_overflow_events = 0;
 801852c:	4b75      	ldr	r3, [pc, #468]	@ (8018704 <USBD_VND_DataReceived+0x39c>)
 801852e:	2200      	movs	r2, #0
 8018530:	601a      	str	r2, [r3, #0]
 8018532:	4b74      	ldr	r3, [pc, #464]	@ (8018704 <USBD_VND_DataReceived+0x39c>)
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	4a74      	ldr	r2, [pc, #464]	@ (8018708 <USBD_VND_DataReceived+0x3a0>)
 8018538:	6013      	str	r3, [r2, #0]
 801853a:	4b73      	ldr	r3, [pc, #460]	@ (8018708 <USBD_VND_DataReceived+0x3a0>)
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	4a73      	ldr	r2, [pc, #460]	@ (801870c <USBD_VND_DataReceived+0x3a4>)
 8018540:	6013      	str	r3, [r2, #0]
 8018542:	4b72      	ldr	r3, [pc, #456]	@ (801870c <USBD_VND_DataReceived+0x3a4>)
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	4a72      	ldr	r2, [pc, #456]	@ (8018710 <USBD_VND_DataReceived+0x3a8>)
 8018548:	6013      	str	r3, [r2, #0]
                } while(0);
                streaming = 1;
 801854a:	4b72      	ldr	r3, [pc, #456]	@ (8018714 <USBD_VND_DataReceived+0x3ac>)
 801854c:	2201      	movs	r2, #1
 801854e:	701a      	strb	r2, [r3, #0]
                dbg_last_forced_stat_ms = start_cmd_ms;
 8018550:	4b63      	ldr	r3, [pc, #396]	@ (80186e0 <USBD_VND_DataReceived+0x378>)
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	4a70      	ldr	r2, [pc, #448]	@ (8018718 <USBD_VND_DataReceived+0x3b0>)
 8018556:	6013      	str	r3, [r2, #0]
                vnd_tx_ready = 1; vnd_ep_busy = 0; vnd_inflight = 0;
 8018558:	4b65      	ldr	r3, [pc, #404]	@ (80186f0 <USBD_VND_DataReceived+0x388>)
 801855a:	2201      	movs	r2, #1
 801855c:	701a      	strb	r2, [r3, #0]
 801855e:	4b63      	ldr	r3, [pc, #396]	@ (80186ec <USBD_VND_DataReceived+0x384>)
 8018560:	2200      	movs	r2, #0
 8018562:	701a      	strb	r2, [r3, #0]
 8018564:	4b63      	ldr	r3, [pc, #396]	@ (80186f4 <USBD_VND_DataReceived+0x38c>)
 8018566:	2200      	movs	r2, #0
 8018568:	701a      	strb	r2, [r3, #0]
                vnd_last_txcplt_ms = HAL_GetTick();
 801856a:	f7ec f8f5 	bl	8004758 <HAL_GetTick>
 801856e:	4603      	mov	r3, r0
 8018570:	4a6a      	ldr	r2, [pc, #424]	@ (801871c <USBD_VND_DataReceived+0x3b4>)
 8018572:	6013      	str	r3, [r2, #0]
                /* Разрешим STAT только после первой завершённой пары */
                first_pair_done = 0; pending_status = 0; vnd_status_permit_once = 0;
 8018574:	4b57      	ldr	r3, [pc, #348]	@ (80186d4 <USBD_VND_DataReceived+0x36c>)
 8018576:	2200      	movs	r2, #0
 8018578:	701a      	strb	r2, [r3, #0]
 801857a:	4b50      	ldr	r3, [pc, #320]	@ (80186bc <USBD_VND_DataReceived+0x354>)
 801857c:	2200      	movs	r2, #0
 801857e:	701a      	strb	r2, [r3, #0]
 8018580:	4b67      	ldr	r3, [pc, #412]	@ (8018720 <USBD_VND_DataReceived+0x3b8>)
 8018582:	2200      	movs	r2, #0
 8018584:	701a      	strb	r2, [r3, #0]
                /* Индикация START */
                vnd_tx_bytes_at_start = vnd_total_tx_bytes;
 8018586:	4b67      	ldr	r3, [pc, #412]	@ (8018724 <USBD_VND_DataReceived+0x3bc>)
 8018588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801858c:	4966      	ldr	r1, [pc, #408]	@ (8018728 <USBD_VND_DataReceived+0x3c0>)
 801858e:	e9c1 2300 	strd	r2, r3, [r1]
                HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_SET);
 8018592:	2201      	movs	r2, #1
 8018594:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018598:	4864      	ldr	r0, [pc, #400]	@ (801872c <USBD_VND_DataReceived+0x3c4>)
 801859a:	f7f1 f999 	bl	80098d0 <HAL_GPIO_WritePin>
                /* КРИТИЧНО: перезапускаем ADC/DMA после STOP */
                {
                    extern ADC_HandleTypeDef hadc1, hadc2;
                    extern HAL_StatusTypeDef adc_stream_start(ADC_HandleTypeDef *adc1, ADC_HandleTypeDef *adc2);
                    HAL_StatusTypeDef adc_st = adc_stream_start(&hadc1, &hadc2);
 801859e:	4964      	ldr	r1, [pc, #400]	@ (8018730 <USBD_VND_DataReceived+0x3c8>)
 80185a0:	4864      	ldr	r0, [pc, #400]	@ (8018734 <USBD_VND_DataReceived+0x3cc>)
 80185a2:	f7e8 f879 	bl	8000698 <adc_stream_start>
 80185a6:	4603      	mov	r3, r0
 80185a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                    if(adc_st != HAL_OK){
 80185ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d00f      	beq.n	80185d4 <USBD_VND_DataReceived+0x26c>
                        VND_LOG("START_STREAM: adc_stream_start FAILED (%d)", adc_st);
 80185b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80185b8:	4619      	mov	r1, r3
 80185ba:	485f      	ldr	r0, [pc, #380]	@ (8018738 <USBD_VND_DataReceived+0x3d0>)
 80185bc:	f002 f9f0 	bl	801a9a0 <iprintf>
 80185c0:	482e      	ldr	r0, [pc, #184]	@ (801867c <USBD_VND_DataReceived+0x314>)
 80185c2:	f002 fa55 	bl	801aa70 <puts>
                        cdc_logf("ERR ADC_START_FAIL st=%d", adc_st);
 80185c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80185ca:	4619      	mov	r1, r3
 80185cc:	485b      	ldr	r0, [pc, #364]	@ (801873c <USBD_VND_DataReceived+0x3d4>)
 80185ce:	f7fc fcbb 	bl	8014f48 <cdc_logf>
 80185d2:	e005      	b.n	80185e0 <USBD_VND_DataReceived+0x278>
                    } else {
                        VND_LOG("START_STREAM: ADC/DMA restarted OK");
 80185d4:	485a      	ldr	r0, [pc, #360]	@ (8018740 <USBD_VND_DataReceived+0x3d8>)
 80185d6:	f002 f9e3 	bl	801a9a0 <iprintf>
 80185da:	4828      	ldr	r0, [pc, #160]	@ (801867c <USBD_VND_DataReceived+0x314>)
 80185dc:	f002 fa48 	bl	801aa70 <puts>
                    }
                }
                /* ДИАГНОСТИКА: выводим активный профиль и параметры */
                {
                    uint8_t prof = adc_stream_get_profile();
 80185e0:	f7e7 ff44 	bl	800046c <adc_stream_get_profile>
 80185e4:	4603      	mov	r3, r0
 80185e6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
                    uint16_t samp = adc_stream_get_active_samples();
 80185ea:	f7e7 ff4b 	bl	8000484 <adc_stream_get_active_samples>
 80185ee:	4603      	mov	r3, r0
 80185f0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                    uint16_t rate = adc_stream_get_buf_rate();
 80185f4:	f7e7 ff52 	bl	800049c <adc_stream_get_buf_rate>
 80185f8:	4603      	mov	r3, r0
 80185fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
                    cdc_logf("EVT START t=%lu profile=%u samples=%u rate=%u Hz bytes=%llu", 
 80185fe:	4b38      	ldr	r3, [pc, #224]	@ (80186e0 <USBD_VND_DataReceived+0x378>)
 8018600:	6818      	ldr	r0, [r3, #0]
 8018602:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8018606:	f8b7 5044 	ldrh.w	r5, [r7, #68]	@ 0x44
 801860a:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 801860e:	4b46      	ldr	r3, [pc, #280]	@ (8018728 <USBD_VND_DataReceived+0x3c0>)
 8018610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018614:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018618:	9100      	str	r1, [sp, #0]
 801861a:	462b      	mov	r3, r5
 801861c:	4622      	mov	r2, r4
 801861e:	4601      	mov	r1, r0
 8018620:	4848      	ldr	r0, [pc, #288]	@ (8018744 <USBD_VND_DataReceived+0x3dc>)
 8018622:	f7fc fc91 	bl	8014f48 <cdc_logf>
                    //     .frames_sent = 0,
                    //     .is_streaming = 1
                    // };
                    // stream_display_update(&stream_info);
                    /* Параметры хоста (профиль/окна/частоты) */
                    vnd_update_lcd_params();
 8018626:	f7fc fc3f 	bl	8014ea8 <vnd_update_lcd_params>
                }
                if(!full_mode){ diag_mode_active = 1; }
 801862a:	4b47      	ldr	r3, [pc, #284]	@ (8018748 <USBD_VND_DataReceived+0x3e0>)
 801862c:	781b      	ldrb	r3, [r3, #0]
 801862e:	b2db      	uxtb	r3, r3
 8018630:	2b00      	cmp	r3, #0
 8018632:	d102      	bne.n	801863a <USBD_VND_DataReceived+0x2d2>
 8018634:	4b45      	ldr	r3, [pc, #276]	@ (801874c <USBD_VND_DataReceived+0x3e4>)
 8018636:	2201      	movs	r2, #1
 8018638:	701a      	strb	r2, [r3, #0]
                VND_LOG("START_STREAM");
 801863a:	4845      	ldr	r0, [pc, #276]	@ (8018750 <USBD_VND_DataReceived+0x3e8>)
 801863c:	f002 f9b0 	bl	801a9a0 <iprintf>
 8018640:	480e      	ldr	r0, [pc, #56]	@ (801867c <USBD_VND_DataReceived+0x314>)
 8018642:	f002 fa15 	bl	801aa70 <puts>
                /* Не формируем синтетическую первую пару: ждём реальные данные */
#if !VND_DISABLE_TEST
                if(!test_sent && !test_in_flight && !vnd_ep_busy){ vnd_try_send_test_from_task(); }
#endif
                /* Диагностический режим: подготовка и первая отправка */
                if(diag_mode_active){
 8018646:	4b41      	ldr	r3, [pc, #260]	@ (801874c <USBD_VND_DataReceived+0x3e4>)
 8018648:	781b      	ldrb	r3, [r3, #0]
 801864a:	2b00      	cmp	r3, #0
 801864c:	f000 841f 	beq.w	8018e8e <USBD_VND_DataReceived+0xb26>
                    if(cur_samples_per_frame == 0){
 8018650:	4b11      	ldr	r3, [pc, #68]	@ (8018698 <USBD_VND_DataReceived+0x330>)
 8018652:	881b      	ldrh	r3, [r3, #0]
 8018654:	b29b      	uxth	r3, r3
 8018656:	2b00      	cmp	r3, #0
 8018658:	f040 809c 	bne.w	8018794 <USBD_VND_DataReceived+0x42c>
                        /* если хост задал samples_per_frame — используем его для DIAG */
                        uint16_t ds = (vnd_frame_samples_req != 0) ? vnd_frame_samples_req : diag_samples;
 801865c:	4b3d      	ldr	r3, [pc, #244]	@ (8018754 <USBD_VND_DataReceived+0x3ec>)
 801865e:	881b      	ldrh	r3, [r3, #0]
 8018660:	b29b      	uxth	r3, r3
 8018662:	2b00      	cmp	r3, #0
 8018664:	d078      	beq.n	8018758 <USBD_VND_DataReceived+0x3f0>
 8018666:	4b3b      	ldr	r3, [pc, #236]	@ (8018754 <USBD_VND_DataReceived+0x3ec>)
 8018668:	881b      	ldrh	r3, [r3, #0]
 801866a:	b29b      	uxth	r3, r3
 801866c:	e076      	b.n	801875c <USBD_VND_DataReceived+0x3f4>
 801866e:	bf00      	nop
 8018670:	24018ac8 	.word	0x24018ac8
 8018674:	0801d4bc 	.word	0x0801d4bc
 8018678:	0801d4e0 	.word	0x0801d4e0
 801867c:	0801c9c8 	.word	0x0801c9c8
 8018680:	0801d4fc 	.word	0x0801d4fc
 8018684:	24018a31 	.word	0x24018a31
 8018688:	24018a30 	.word	0x24018a30
 801868c:	2400004c 	.word	0x2400004c
 8018690:	24018a32 	.word	0x24018a32
 8018694:	24018a34 	.word	0x24018a34
 8018698:	2400c5e0 	.word	0x2400c5e0
 801869c:	2400c5e2 	.word	0x2400c5e2
 80186a0:	2400c674 	.word	0x2400c674
 80186a4:	2400c5ef 	.word	0x2400c5ef
 80186a8:	2400c68a 	.word	0x2400c68a
 80186ac:	2400c5ee 	.word	0x2400c5ee
 80186b0:	2400c68b 	.word	0x2400c68b
 80186b4:	2400c68c 	.word	0x2400c68c
 80186b8:	2400c68d 	.word	0x2400c68d
 80186bc:	2400c728 	.word	0x2400c728
 80186c0:	2400c68e 	.word	0x2400c68e
 80186c4:	2400c624 	.word	0x2400c624
 80186c8:	2400c5dc 	.word	0x2400c5dc
 80186cc:	2400c620 	.word	0x2400c620
 80186d0:	2400c5f0 	.word	0x2400c5f0
 80186d4:	2400c678 	.word	0x2400c678
 80186d8:	2400c614 	.word	0x2400c614
 80186dc:	2400c618 	.word	0x2400c618
 80186e0:	2400c5e4 	.word	0x2400c5e4
 80186e4:	2400c63c 	.word	0x2400c63c
 80186e8:	2400c640 	.word	0x2400c640
 80186ec:	2400c5ec 	.word	0x2400c5ec
 80186f0:	2400003b 	.word	0x2400003b
 80186f4:	2400c5ed 	.word	0x2400c5ed
 80186f8:	2400c654 	.word	0x2400c654
 80186fc:	24018a99 	.word	0x24018a99
 8018700:	24018a98 	.word	0x24018a98
 8018704:	24018aa8 	.word	0x24018aa8
 8018708:	24018aa4 	.word	0x24018aa4
 801870c:	24018aa0 	.word	0x24018aa0
 8018710:	24018a9c 	.word	0x24018a9c
 8018714:	2400c5d8 	.word	0x2400c5d8
 8018718:	2400c648 	.word	0x2400c648
 801871c:	2400c628 	.word	0x2400c628
 8018720:	2400c689 	.word	0x2400c689
 8018724:	2400c668 	.word	0x2400c668
 8018728:	2400c680 	.word	0x2400c680
 801872c:	58020c00 	.word	0x58020c00
 8018730:	2400ada4 	.word	0x2400ada4
 8018734:	2400ad34 	.word	0x2400ad34
 8018738:	0801d518 	.word	0x0801d518
 801873c:	0801d54c 	.word	0x0801d54c
 8018740:	0801d568 	.word	0x0801d568
 8018744:	0801d594 	.word	0x0801d594
 8018748:	2400003c 	.word	0x2400003c
 801874c:	2400c729 	.word	0x2400c729
 8018750:	0801d5d0 	.word	0x0801d5d0
 8018754:	2400c672 	.word	0x2400c672
 8018758:	4bab      	ldr	r3, [pc, #684]	@ (8018a08 <USBD_VND_DataReceived+0x6a0>)
 801875a:	881b      	ldrh	r3, [r3, #0]
 801875c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
                        if(ds > VND_MAX_SAMPLES) ds = VND_MAX_SAMPLES;
 8018760:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8018764:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8018768:	d903      	bls.n	8018772 <USBD_VND_DataReceived+0x40a>
 801876a:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 801876e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
                        diag_samples = ds;
 8018772:	4aa5      	ldr	r2, [pc, #660]	@ (8018a08 <USBD_VND_DataReceived+0x6a0>)
 8018774:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8018778:	8013      	strh	r3, [r2, #0]
                        cur_samples_per_frame = diag_samples;
 801877a:	4ba3      	ldr	r3, [pc, #652]	@ (8018a08 <USBD_VND_DataReceived+0x6a0>)
 801877c:	881a      	ldrh	r2, [r3, #0]
 801877e:	4ba3      	ldr	r3, [pc, #652]	@ (8018a0c <USBD_VND_DataReceived+0x6a4>)
 8018780:	801a      	strh	r2, [r3, #0]
                        cur_expected_frame_size = (uint16_t)(VND_FRAME_HDR_SIZE + cur_samples_per_frame*2u);
 8018782:	4ba2      	ldr	r3, [pc, #648]	@ (8018a0c <USBD_VND_DataReceived+0x6a4>)
 8018784:	881b      	ldrh	r3, [r3, #0]
 8018786:	b29b      	uxth	r3, r3
 8018788:	3310      	adds	r3, #16
 801878a:	b29b      	uxth	r3, r3
 801878c:	005b      	lsls	r3, r3, #1
 801878e:	b29a      	uxth	r2, r3
 8018790:	4b9f      	ldr	r3, [pc, #636]	@ (8018a10 <USBD_VND_DataReceived+0x6a8>)
 8018792:	801a      	strh	r2, [r3, #0]
                    }
                    diag_prepared_seq = 0xFFFFFFFFu; diag_current_pair_seq = 0xFFFFFFFFu;
 8018794:	4b9f      	ldr	r3, [pc, #636]	@ (8018a14 <USBD_VND_DataReceived+0x6ac>)
 8018796:	f04f 32ff 	mov.w	r2, #4294967295
 801879a:	601a      	str	r2, [r3, #0]
 801879c:	4b9e      	ldr	r3, [pc, #632]	@ (8018a18 <USBD_VND_DataReceived+0x6b0>)
 801879e:	f04f 32ff 	mov.w	r2, #4294967295
 80187a2:	601a      	str	r2, [r3, #0]
                    vnd_diag_prepare_pair(stream_seq, cur_samples_per_frame);
 80187a4:	4b9d      	ldr	r3, [pc, #628]	@ (8018a1c <USBD_VND_DataReceived+0x6b4>)
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	4a98      	ldr	r2, [pc, #608]	@ (8018a0c <USBD_VND_DataReceived+0x6a4>)
 80187aa:	8812      	ldrh	r2, [r2, #0]
 80187ac:	b292      	uxth	r2, r2
 80187ae:	4611      	mov	r1, r2
 80187b0:	4618      	mov	r0, r3
 80187b2:	f7fd fe75 	bl	80164a0 <vnd_diag_prepare_pair>
                    diag_prepared_seq = stream_seq; diag_current_pair_seq = stream_seq;
 80187b6:	4b99      	ldr	r3, [pc, #612]	@ (8018a1c <USBD_VND_DataReceived+0x6b4>)
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	4a96      	ldr	r2, [pc, #600]	@ (8018a14 <USBD_VND_DataReceived+0x6ac>)
 80187bc:	6013      	str	r3, [r2, #0]
 80187be:	4b97      	ldr	r3, [pc, #604]	@ (8018a1c <USBD_VND_DataReceived+0x6b4>)
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	4a95      	ldr	r2, [pc, #596]	@ (8018a18 <USBD_VND_DataReceived+0x6b0>)
 80187c4:	6013      	str	r3, [r2, #0]
                    if(!vnd_ep_busy){ (void)vnd_diag_try_tx(); }
 80187c6:	4b96      	ldr	r3, [pc, #600]	@ (8018a20 <USBD_VND_DataReceived+0x6b8>)
 80187c8:	781b      	ldrb	r3, [r3, #0]
 80187ca:	b2db      	uxtb	r3, r3
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	f040 835e 	bne.w	8018e8e <USBD_VND_DataReceived+0xb26>
 80187d2:	f7fd ff23 	bl	801661c <vnd_diag_try_tx>
                }
        }
        break;
 80187d6:	e35a      	b.n	8018e8e <USBD_VND_DataReceived+0xb26>
        case VND_CMD_SET_FRAME_SAMPLES:
            if(len >= 3){
 80187d8:	683b      	ldr	r3, [r7, #0]
 80187da:	2b02      	cmp	r3, #2
 80187dc:	f240 8359 	bls.w	8018e92 <USBD_VND_DataReceived+0xb2a>
                uint16_t ns = (uint16_t)(data[1] | (data[2] << 8));
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	3301      	adds	r3, #1
 80187e4:	781b      	ldrb	r3, [r3, #0]
 80187e6:	b21a      	sxth	r2, r3
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	3302      	adds	r3, #2
 80187ec:	781b      	ldrb	r3, [r3, #0]
 80187ee:	b21b      	sxth	r3, r3
 80187f0:	021b      	lsls	r3, r3, #8
 80187f2:	b21b      	sxth	r3, r3
 80187f4:	4313      	orrs	r3, r2
 80187f6:	b21b      	sxth	r3, r3
 80187f8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
                if(ns > VND_MAX_SAMPLES) ns = VND_MAX_SAMPLES;
 80187fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8018800:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8018804:	d903      	bls.n	801880e <USBD_VND_DataReceived+0x4a6>
 8018806:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 801880a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
                vnd_frame_samples_req = ns;
 801880e:	4a85      	ldr	r2, [pc, #532]	@ (8018a24 <USBD_VND_DataReceived+0x6bc>)
 8018810:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8018814:	8013      	strh	r3, [r2, #0]
                /* Применим к диагностике сразу, чтобы DIAG шёл с нужным размером */
                diag_samples = (ns != 0) ? ns : diag_samples;
 8018816:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 801881a:	2b00      	cmp	r3, #0
 801881c:	d002      	beq.n	8018824 <USBD_VND_DataReceived+0x4bc>
 801881e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8018822:	e001      	b.n	8018828 <USBD_VND_DataReceived+0x4c0>
 8018824:	4b78      	ldr	r3, [pc, #480]	@ (8018a08 <USBD_VND_DataReceived+0x6a0>)
 8018826:	881b      	ldrh	r3, [r3, #0]
 8018828:	4a77      	ldr	r2, [pc, #476]	@ (8018a08 <USBD_VND_DataReceived+0x6a0>)
 801882a:	8013      	strh	r3, [r2, #0]
                vnd_recompute_pair_timing(vnd_frame_samples_req);
 801882c:	4b7d      	ldr	r3, [pc, #500]	@ (8018a24 <USBD_VND_DataReceived+0x6bc>)
 801882e:	881b      	ldrh	r3, [r3, #0]
 8018830:	b29b      	uxth	r3, r3
 8018832:	4618      	mov	r0, r3
 8018834:	f7fc fd7e 	bl	8015334 <vnd_recompute_pair_timing>
                /* Снимем фиксацию размера, чтобы применилось при следующем build */
                cur_samples_per_frame = 0; cur_expected_frame_size = 0;
 8018838:	4b74      	ldr	r3, [pc, #464]	@ (8018a0c <USBD_VND_DataReceived+0x6a4>)
 801883a:	2200      	movs	r2, #0
 801883c:	801a      	strh	r2, [r3, #0]
 801883e:	4b74      	ldr	r3, [pc, #464]	@ (8018a10 <USBD_VND_DataReceived+0x6a8>)
 8018840:	2200      	movs	r2, #0
 8018842:	801a      	strh	r2, [r3, #0]
                VND_LOG("SET_FRAME_SAMPLES %u -> period=%ums", (unsigned)vnd_frame_samples_req, (unsigned)vnd_pair_period_ms);
 8018844:	4b77      	ldr	r3, [pc, #476]	@ (8018a24 <USBD_VND_DataReceived+0x6bc>)
 8018846:	881b      	ldrh	r3, [r3, #0]
 8018848:	b29b      	uxth	r3, r3
 801884a:	4619      	mov	r1, r3
 801884c:	4b76      	ldr	r3, [pc, #472]	@ (8018a28 <USBD_VND_DataReceived+0x6c0>)
 801884e:	881b      	ldrh	r3, [r3, #0]
 8018850:	b29b      	uxth	r3, r3
 8018852:	461a      	mov	r2, r3
 8018854:	4875      	ldr	r0, [pc, #468]	@ (8018a2c <USBD_VND_DataReceived+0x6c4>)
 8018856:	f002 f8a3 	bl	801a9a0 <iprintf>
 801885a:	4875      	ldr	r0, [pc, #468]	@ (8018a30 <USBD_VND_DataReceived+0x6c8>)
 801885c:	f002 f908 	bl	801aa70 <puts>
                cdc_logf("EVT SET_FRAME_SAMPLES %u", (unsigned)vnd_frame_samples_req);
 8018860:	4b70      	ldr	r3, [pc, #448]	@ (8018a24 <USBD_VND_DataReceived+0x6bc>)
 8018862:	881b      	ldrh	r3, [r3, #0]
 8018864:	b29b      	uxth	r3, r3
 8018866:	4619      	mov	r1, r3
 8018868:	4872      	ldr	r0, [pc, #456]	@ (8018a34 <USBD_VND_DataReceived+0x6cc>)
 801886a:	f7fc fb6d 	bl	8014f48 <cdc_logf>
                vnd_update_lcd_params();
 801886e:	f7fc fb1b 	bl	8014ea8 <vnd_update_lcd_params>
            }
            break;
 8018872:	e30e      	b.n	8018e92 <USBD_VND_DataReceived+0xb2a>
        case VND_CMD_STOP_STREAM:
        {
            /* В полном режиме: STOP с ACK-STAT между парами; в DIAG — немедленная остановка без STAT по bulk */
            if(diag_mode_active){
 8018874:	4b70      	ldr	r3, [pc, #448]	@ (8018a38 <USBD_VND_DataReceived+0x6d0>)
 8018876:	781b      	ldrb	r3, [r3, #0]
 8018878:	2b00      	cmp	r3, #0
 801887a:	d05e      	beq.n	801893a <USBD_VND_DataReceived+0x5d2>
                /* Мгновенно останавливаем стрим без ACK-STAT в bulk, чтобы не нарушать DIAG поток */
                stop_request = 0; pending_status = 0;
 801887c:	4b6f      	ldr	r3, [pc, #444]	@ (8018a3c <USBD_VND_DataReceived+0x6d4>)
 801887e:	2200      	movs	r2, #0
 8018880:	701a      	strb	r2, [r3, #0]
 8018882:	4b6f      	ldr	r3, [pc, #444]	@ (8018a40 <USBD_VND_DataReceived+0x6d8>)
 8018884:	2200      	movs	r2, #0
 8018886:	701a      	strb	r2, [r3, #0]
                if(streaming){ streaming = 0; VND_LOG("STOP_STREAM (diag, immediate)"); }
 8018888:	4b6e      	ldr	r3, [pc, #440]	@ (8018a44 <USBD_VND_DataReceived+0x6dc>)
 801888a:	781b      	ldrb	r3, [r3, #0]
 801888c:	b2db      	uxtb	r3, r3
 801888e:	2b00      	cmp	r3, #0
 8018890:	d008      	beq.n	80188a4 <USBD_VND_DataReceived+0x53c>
 8018892:	4b6c      	ldr	r3, [pc, #432]	@ (8018a44 <USBD_VND_DataReceived+0x6dc>)
 8018894:	2200      	movs	r2, #0
 8018896:	701a      	strb	r2, [r3, #0]
 8018898:	486b      	ldr	r0, [pc, #428]	@ (8018a48 <USBD_VND_DataReceived+0x6e0>)
 801889a:	f002 f881 	bl	801a9a0 <iprintf>
 801889e:	4864      	ldr	r0, [pc, #400]	@ (8018a30 <USBD_VND_DataReceived+0x6c8>)
 80188a0:	f002 f8e6 	bl	801aa70 <puts>
                diag_mode_active = 0;
 80188a4:	4b64      	ldr	r3, [pc, #400]	@ (8018a38 <USBD_VND_DataReceived+0x6d0>)
 80188a6:	2200      	movs	r2, #0
 80188a8:	701a      	strb	r2, [r3, #0]
                vnd_reset_buffers();
 80188aa:	f7fc ff0b 	bl	80156c4 <vnd_reset_buffers>
                sending_channel = 0xFF; pending_B = 0; pending_B_since_ms = 0; test_sent = 0; test_in_flight = 0; vnd_inflight = 0;
 80188ae:	4b67      	ldr	r3, [pc, #412]	@ (8018a4c <USBD_VND_DataReceived+0x6e4>)
 80188b0:	22ff      	movs	r2, #255	@ 0xff
 80188b2:	701a      	strb	r2, [r3, #0]
 80188b4:	4b66      	ldr	r3, [pc, #408]	@ (8018a50 <USBD_VND_DataReceived+0x6e8>)
 80188b6:	2200      	movs	r2, #0
 80188b8:	701a      	strb	r2, [r3, #0]
 80188ba:	4b66      	ldr	r3, [pc, #408]	@ (8018a54 <USBD_VND_DataReceived+0x6ec>)
 80188bc:	2200      	movs	r2, #0
 80188be:	601a      	str	r2, [r3, #0]
 80188c0:	4b65      	ldr	r3, [pc, #404]	@ (8018a58 <USBD_VND_DataReceived+0x6f0>)
 80188c2:	2200      	movs	r2, #0
 80188c4:	701a      	strb	r2, [r3, #0]
 80188c6:	4b65      	ldr	r3, [pc, #404]	@ (8018a5c <USBD_VND_DataReceived+0x6f4>)
 80188c8:	2200      	movs	r2, #0
 80188ca:	701a      	strb	r2, [r3, #0]
 80188cc:	4b64      	ldr	r3, [pc, #400]	@ (8018a60 <USBD_VND_DataReceived+0x6f8>)
 80188ce:	2200      	movs	r2, #0
 80188d0:	701a      	strb	r2, [r3, #0]
                /* Останавливаем DMA/источник данных */
                extern void adc_stream_stop(void);
                adc_stream_stop();
 80188d2:	f7e7 fd8f 	bl	80003f4 <adc_stream_stop>
                HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_RESET);
 80188d6:	2200      	movs	r2, #0
 80188d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80188dc:	4861      	ldr	r0, [pc, #388]	@ (8018a64 <USBD_VND_DataReceived+0x6fc>)
 80188de:	f7f0 fff7 	bl	80098d0 <HAL_GPIO_WritePin>
                {
                    uint64_t cur = vnd_total_tx_bytes;
 80188e2:	4b61      	ldr	r3, [pc, #388]	@ (8018a68 <USBD_VND_DataReceived+0x700>)
 80188e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188e8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
                    uint64_t delta = (cur >= vnd_tx_bytes_at_start) ? (cur - vnd_tx_bytes_at_start) : 0ULL;
 80188ec:	4b5f      	ldr	r3, [pc, #380]	@ (8018a6c <USBD_VND_DataReceived+0x704>)
 80188ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80188f6:	4290      	cmp	r0, r2
 80188f8:	eb71 0303 	sbcs.w	r3, r1, r3
 80188fc:	d308      	bcc.n	8018910 <USBD_VND_DataReceived+0x5a8>
 80188fe:	4b5b      	ldr	r3, [pc, #364]	@ (8018a6c <USBD_VND_DataReceived+0x704>)
 8018900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018904:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8018908:	1a84      	subs	r4, r0, r2
 801890a:	eb61 0503 	sbc.w	r5, r1, r3
 801890e:	e003      	b.n	8018918 <USBD_VND_DataReceived+0x5b0>
 8018910:	f04f 0400 	mov.w	r4, #0
 8018914:	f04f 0500 	mov.w	r5, #0
 8018918:	e9c7 4512 	strd	r4, r5, [r7, #72]	@ 0x48
                    cdc_logf("EVT STOP total=%llu delta=%llu", (unsigned long long)cur, (unsigned long long)delta);
 801891c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8018920:	e9cd 2300 	strd	r2, r3, [sp]
 8018924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8018928:	4851      	ldr	r0, [pc, #324]	@ (8018a70 <USBD_VND_DataReceived+0x708>)
 801892a:	f7fc fb0d 	bl	8014f48 <cdc_logf>
                    //     .sample_count = 0,
                    //     .frames_sent = dbg_sent_ch0_total + dbg_sent_ch1_total,
                    //     .is_streaming = 0
                    // };
                    // stream_display_update(&stream_info);
                    vnd_update_lcd_params();
 801892e:	f7fc fabb 	bl	8014ea8 <vnd_update_lcd_params>
                }
                vnd_tx_kick = 1; /* пнуть таск на всякий случай */
 8018932:	4b50      	ldr	r3, [pc, #320]	@ (8018a74 <USBD_VND_DataReceived+0x70c>)
 8018934:	2201      	movs	r2, #1
 8018936:	701a      	strb	r2, [r3, #0]
                pending_status = 1; /* попросим отправить STAT между парами */
                VND_LOG("STOP_STREAM request -> queue STAT");
                cdc_logf("EVT STOP_REQ t=%lu", (unsigned long)HAL_GetTick());
            }
        }
        break;
 8018938:	e2ba      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
                stop_request = 1; /* помечаем запрос остановки */
 801893a:	4b40      	ldr	r3, [pc, #256]	@ (8018a3c <USBD_VND_DataReceived+0x6d4>)
 801893c:	2201      	movs	r2, #1
 801893e:	701a      	strb	r2, [r3, #0]
                pending_status = 1; /* попросим отправить STAT между парами */
 8018940:	4b3f      	ldr	r3, [pc, #252]	@ (8018a40 <USBD_VND_DataReceived+0x6d8>)
 8018942:	2201      	movs	r2, #1
 8018944:	701a      	strb	r2, [r3, #0]
                VND_LOG("STOP_STREAM request -> queue STAT");
 8018946:	484c      	ldr	r0, [pc, #304]	@ (8018a78 <USBD_VND_DataReceived+0x710>)
 8018948:	f002 f82a 	bl	801a9a0 <iprintf>
 801894c:	4838      	ldr	r0, [pc, #224]	@ (8018a30 <USBD_VND_DataReceived+0x6c8>)
 801894e:	f002 f88f 	bl	801aa70 <puts>
                cdc_logf("EVT STOP_REQ t=%lu", (unsigned long)HAL_GetTick());
 8018952:	f7eb ff01 	bl	8004758 <HAL_GetTick>
 8018956:	4603      	mov	r3, r0
 8018958:	4619      	mov	r1, r3
 801895a:	4848      	ldr	r0, [pc, #288]	@ (8018a7c <USBD_VND_DataReceived+0x714>)
 801895c:	f7fc faf4 	bl	8014f48 <cdc_logf>
        break;
 8018960:	e2a6      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
        case VND_CMD_GET_STATUS:
        {
            /* GET_STATUS всегда допускается: во время стрима — только между парами */
            if(streaming){
 8018962:	4b38      	ldr	r3, [pc, #224]	@ (8018a44 <USBD_VND_DataReceived+0x6dc>)
 8018964:	781b      	ldrb	r3, [r3, #0]
 8018966:	b2db      	uxtb	r3, r3
 8018968:	2b00      	cmp	r3, #0
 801896a:	d014      	beq.n	8018996 <USBD_VND_DataReceived+0x62e>
                /* В DIAG-режиме исключаем любые STAT в bulk-потоке: используйте EP0 (ctrl) */
                if(diag_mode_active){ VND_LOG("GET_STATUS bulk ignored in DIAG (use EP0)"); break; }
 801896c:	4b32      	ldr	r3, [pc, #200]	@ (8018a38 <USBD_VND_DataReceived+0x6d0>)
 801896e:	781b      	ldrb	r3, [r3, #0]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d006      	beq.n	8018982 <USBD_VND_DataReceived+0x61a>
 8018974:	4842      	ldr	r0, [pc, #264]	@ (8018a80 <USBD_VND_DataReceived+0x718>)
 8018976:	f002 f813 	bl	801a9a0 <iprintf>
 801897a:	482d      	ldr	r0, [pc, #180]	@ (8018a30 <USBD_VND_DataReceived+0x6c8>)
 801897c:	f002 f878 	bl	801aa70 <puts>
 8018980:	e296      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
                pending_status = 1; VND_LOG("GET_STATUS queued"); break;
 8018982:	4b2f      	ldr	r3, [pc, #188]	@ (8018a40 <USBD_VND_DataReceived+0x6d8>)
 8018984:	2201      	movs	r2, #1
 8018986:	701a      	strb	r2, [r3, #0]
 8018988:	483e      	ldr	r0, [pc, #248]	@ (8018a84 <USBD_VND_DataReceived+0x71c>)
 801898a:	f002 f809 	bl	801a9a0 <iprintf>
 801898e:	4828      	ldr	r0, [pc, #160]	@ (8018a30 <USBD_VND_DataReceived+0x6c8>)
 8018990:	f002 f86e 	bl	801aa70 <puts>
 8018994:	e28c      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
            }
            if(!vnd_ep_busy)
 8018996:	4b22      	ldr	r3, [pc, #136]	@ (8018a20 <USBD_VND_DataReceived+0x6b8>)
 8018998:	781b      	ldrb	r3, [r3, #0]
 801899a:	b2db      	uxtb	r3, r3
 801899c:	2b00      	cmp	r3, #0
 801899e:	f040 808e 	bne.w	8018abe <USBD_VND_DataReceived+0x756>
            {
                vnd_status_permit_once = 1;
 80189a2:	4b39      	ldr	r3, [pc, #228]	@ (8018a88 <USBD_VND_DataReceived+0x720>)
 80189a4:	2201      	movs	r2, #1
 80189a6:	701a      	strb	r2, [r3, #0]
                uint16_t l = vnd_build_status((uint8_t*)status_buf, sizeof(status_buf));
 80189a8:	2140      	movs	r1, #64	@ 0x40
 80189aa:	4838      	ldr	r0, [pc, #224]	@ (8018a8c <USBD_VND_DataReceived+0x724>)
 80189ac:	f7fc ff34 	bl	8015818 <vnd_build_status>
 80189b0:	4603      	mov	r3, r0
 80189b2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                if(l)
 80189b6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	f000 826b 	beq.w	8018e96 <USBD_VND_DataReceived+0xb2e>
                {
                    vnd_tx_ready = 0; vnd_ep_busy = 1; vnd_last_tx_len = l; vnd_last_tx_start_ms = HAL_GetTick();
 80189c0:	4b33      	ldr	r3, [pc, #204]	@ (8018a90 <USBD_VND_DataReceived+0x728>)
 80189c2:	2200      	movs	r2, #0
 80189c4:	701a      	strb	r2, [r3, #0]
 80189c6:	4b16      	ldr	r3, [pc, #88]	@ (8018a20 <USBD_VND_DataReceived+0x6b8>)
 80189c8:	2201      	movs	r2, #1
 80189ca:	701a      	strb	r2, [r3, #0]
 80189cc:	4a31      	ldr	r2, [pc, #196]	@ (8018a94 <USBD_VND_DataReceived+0x72c>)
 80189ce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80189d2:	8013      	strh	r3, [r2, #0]
 80189d4:	f7eb fec0 	bl	8004758 <HAL_GetTick>
 80189d8:	4603      	mov	r3, r0
 80189da:	4a2f      	ldr	r2, [pc, #188]	@ (8018a98 <USBD_VND_DataReceived+0x730>)
 80189dc:	6013      	str	r3, [r2, #0]
                    if(USBD_VND_Transmit(&hUsbDeviceHS, (uint8_t*)status_buf, l) == USBD_OK)
 80189de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80189e2:	461a      	mov	r2, r3
 80189e4:	4929      	ldr	r1, [pc, #164]	@ (8018a8c <USBD_VND_DataReceived+0x724>)
 80189e6:	482d      	ldr	r0, [pc, #180]	@ (8018a9c <USBD_VND_DataReceived+0x734>)
 80189e8:	f000 fb5c 	bl	80190a4 <USBD_VND_Transmit>
 80189ec:	4603      	mov	r3, r0
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d158      	bne.n	8018aa4 <USBD_VND_DataReceived+0x73c>
                        VND_LOG("STAT_TX req len=%u", l);
 80189f2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80189f6:	4619      	mov	r1, r3
 80189f8:	4829      	ldr	r0, [pc, #164]	@ (8018aa0 <USBD_VND_DataReceived+0x738>)
 80189fa:	f001 ffd1 	bl	801a9a0 <iprintf>
 80189fe:	480c      	ldr	r0, [pc, #48]	@ (8018a30 <USBD_VND_DataReceived+0x6c8>)
 8018a00:	f002 f836 	bl	801aa70 <puts>
                }
            } else {
                pending_status = 1; VND_LOG("STAT_PENDING on GET_STATUS");
            }
        }
        break;
 8018a04:	e247      	b.n	8018e96 <USBD_VND_DataReceived+0xb2e>
 8018a06:	bf00      	nop
 8018a08:	24000042 	.word	0x24000042
 8018a0c:	2400c5e0 	.word	0x2400c5e0
 8018a10:	2400c5e2 	.word	0x2400c5e2
 8018a14:	24000044 	.word	0x24000044
 8018a18:	24000048 	.word	0x24000048
 8018a1c:	2400c5dc 	.word	0x2400c5dc
 8018a20:	2400c5ec 	.word	0x2400c5ec
 8018a24:	2400c672 	.word	0x2400c672
 8018a28:	2400003e 	.word	0x2400003e
 8018a2c:	0801d5e4 	.word	0x0801d5e4
 8018a30:	0801c9c8 	.word	0x0801c9c8
 8018a34:	0801d610 	.word	0x0801d610
 8018a38:	2400c729 	.word	0x2400c729
 8018a3c:	2400c68f 	.word	0x2400c68f
 8018a40:	2400c728 	.word	0x2400c728
 8018a44:	2400c5d8 	.word	0x2400c5d8
 8018a48:	0801d62c 	.word	0x0801d62c
 8018a4c:	2400004c 	.word	0x2400004c
 8018a50:	24018a32 	.word	0x24018a32
 8018a54:	24018a34 	.word	0x24018a34
 8018a58:	2400c5ee 	.word	0x2400c5ee
 8018a5c:	2400c5ef 	.word	0x2400c5ef
 8018a60:	2400c5ed 	.word	0x2400c5ed
 8018a64:	58020c00 	.word	0x58020c00
 8018a68:	2400c668 	.word	0x2400c668
 8018a6c:	2400c680 	.word	0x2400c680
 8018a70:	0801d2b4 	.word	0x0801d2b4
 8018a74:	2400c688 	.word	0x2400c688
 8018a78:	0801d650 	.word	0x0801d650
 8018a7c:	0801d678 	.word	0x0801d678
 8018a80:	0801d68c 	.word	0x0801d68c
 8018a84:	0801d6bc 	.word	0x0801d6bc
 8018a88:	2400c689 	.word	0x2400c689
 8018a8c:	2400c6a8 	.word	0x2400c6a8
 8018a90:	2400003b 	.word	0x2400003b
 8018a94:	2400c650 	.word	0x2400c650
 8018a98:	2400c654 	.word	0x2400c654
 8018a9c:	2400c2fc 	.word	0x2400c2fc
 8018aa0:	0801d6d4 	.word	0x0801d6d4
                    else { VND_LOG("STAT_BUSY_FAIL"); vnd_tx_ready = 1; vnd_ep_busy = 0; }
 8018aa4:	4890      	ldr	r0, [pc, #576]	@ (8018ce8 <USBD_VND_DataReceived+0x980>)
 8018aa6:	f001 ff7b 	bl	801a9a0 <iprintf>
 8018aaa:	4890      	ldr	r0, [pc, #576]	@ (8018cec <USBD_VND_DataReceived+0x984>)
 8018aac:	f001 ffe0 	bl	801aa70 <puts>
 8018ab0:	4b8f      	ldr	r3, [pc, #572]	@ (8018cf0 <USBD_VND_DataReceived+0x988>)
 8018ab2:	2201      	movs	r2, #1
 8018ab4:	701a      	strb	r2, [r3, #0]
 8018ab6:	4b8f      	ldr	r3, [pc, #572]	@ (8018cf4 <USBD_VND_DataReceived+0x98c>)
 8018ab8:	2200      	movs	r2, #0
 8018aba:	701a      	strb	r2, [r3, #0]
        break;
 8018abc:	e1eb      	b.n	8018e96 <USBD_VND_DataReceived+0xb2e>
                pending_status = 1; VND_LOG("STAT_PENDING on GET_STATUS");
 8018abe:	4b8e      	ldr	r3, [pc, #568]	@ (8018cf8 <USBD_VND_DataReceived+0x990>)
 8018ac0:	2201      	movs	r2, #1
 8018ac2:	701a      	strb	r2, [r3, #0]
 8018ac4:	488d      	ldr	r0, [pc, #564]	@ (8018cfc <USBD_VND_DataReceived+0x994>)
 8018ac6:	f001 ff6b 	bl	801a9a0 <iprintf>
 8018aca:	4888      	ldr	r0, [pc, #544]	@ (8018cec <USBD_VND_DataReceived+0x984>)
 8018acc:	f001 ffd0 	bl	801aa70 <puts>
        break;
 8018ad0:	e1e1      	b.n	8018e96 <USBD_VND_DataReceived+0xb2e>
        case VND_CMD_SET_WINDOWS:
            if(len >= 9)
 8018ad2:	683b      	ldr	r3, [r7, #0]
 8018ad4:	2b08      	cmp	r3, #8
 8018ad6:	f240 81e0 	bls.w	8018e9a <USBD_VND_DataReceived+0xb32>
            {
                /* 1 + 8 байт */
                win_start0 = (uint16_t)(data[1] | (data[2] << 8));
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	3301      	adds	r3, #1
 8018ade:	781b      	ldrb	r3, [r3, #0]
 8018ae0:	b21a      	sxth	r2, r3
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	3302      	adds	r3, #2
 8018ae6:	781b      	ldrb	r3, [r3, #0]
 8018ae8:	b21b      	sxth	r3, r3
 8018aea:	021b      	lsls	r3, r3, #8
 8018aec:	b21b      	sxth	r3, r3
 8018aee:	4313      	orrs	r3, r2
 8018af0:	b21b      	sxth	r3, r3
 8018af2:	b29a      	uxth	r2, r3
 8018af4:	4b82      	ldr	r3, [pc, #520]	@ (8018d00 <USBD_VND_DataReceived+0x998>)
 8018af6:	801a      	strh	r2, [r3, #0]
                win_len0   = (uint16_t)(data[3] | (data[4] << 8));
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	3303      	adds	r3, #3
 8018afc:	781b      	ldrb	r3, [r3, #0]
 8018afe:	b21a      	sxth	r2, r3
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	3304      	adds	r3, #4
 8018b04:	781b      	ldrb	r3, [r3, #0]
 8018b06:	b21b      	sxth	r3, r3
 8018b08:	021b      	lsls	r3, r3, #8
 8018b0a:	b21b      	sxth	r3, r3
 8018b0c:	4313      	orrs	r3, r2
 8018b0e:	b21b      	sxth	r3, r3
 8018b10:	b29a      	uxth	r2, r3
 8018b12:	4b7c      	ldr	r3, [pc, #496]	@ (8018d04 <USBD_VND_DataReceived+0x99c>)
 8018b14:	801a      	strh	r2, [r3, #0]
                win_start1 = (uint16_t)(data[5] | (data[6] << 8));
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	3305      	adds	r3, #5
 8018b1a:	781b      	ldrb	r3, [r3, #0]
 8018b1c:	b21a      	sxth	r2, r3
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	3306      	adds	r3, #6
 8018b22:	781b      	ldrb	r3, [r3, #0]
 8018b24:	b21b      	sxth	r3, r3
 8018b26:	021b      	lsls	r3, r3, #8
 8018b28:	b21b      	sxth	r3, r3
 8018b2a:	4313      	orrs	r3, r2
 8018b2c:	b21b      	sxth	r3, r3
 8018b2e:	b29a      	uxth	r2, r3
 8018b30:	4b75      	ldr	r3, [pc, #468]	@ (8018d08 <USBD_VND_DataReceived+0x9a0>)
 8018b32:	801a      	strh	r2, [r3, #0]
                win_len1   = (uint16_t)(data[7] | (data[8] << 8));
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	3307      	adds	r3, #7
 8018b38:	781b      	ldrb	r3, [r3, #0]
 8018b3a:	b21a      	sxth	r2, r3
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	3308      	adds	r3, #8
 8018b40:	781b      	ldrb	r3, [r3, #0]
 8018b42:	b21b      	sxth	r3, r3
 8018b44:	021b      	lsls	r3, r3, #8
 8018b46:	b21b      	sxth	r3, r3
 8018b48:	4313      	orrs	r3, r2
 8018b4a:	b21b      	sxth	r3, r3
 8018b4c:	b29a      	uxth	r2, r3
 8018b4e:	4b6f      	ldr	r3, [pc, #444]	@ (8018d0c <USBD_VND_DataReceived+0x9a4>)
 8018b50:	801a      	strh	r2, [r3, #0]
                VND_LOG("SET_WINDOWS s0=%u l0=%u s1=%u l1=%u", win_start0, win_len0, win_start1, win_len1);
 8018b52:	4b6b      	ldr	r3, [pc, #428]	@ (8018d00 <USBD_VND_DataReceived+0x998>)
 8018b54:	881b      	ldrh	r3, [r3, #0]
 8018b56:	4619      	mov	r1, r3
 8018b58:	4b6a      	ldr	r3, [pc, #424]	@ (8018d04 <USBD_VND_DataReceived+0x99c>)
 8018b5a:	881b      	ldrh	r3, [r3, #0]
 8018b5c:	461a      	mov	r2, r3
 8018b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8018d08 <USBD_VND_DataReceived+0x9a0>)
 8018b60:	881b      	ldrh	r3, [r3, #0]
 8018b62:	4618      	mov	r0, r3
 8018b64:	4b69      	ldr	r3, [pc, #420]	@ (8018d0c <USBD_VND_DataReceived+0x9a4>)
 8018b66:	881b      	ldrh	r3, [r3, #0]
 8018b68:	9300      	str	r3, [sp, #0]
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	4868      	ldr	r0, [pc, #416]	@ (8018d10 <USBD_VND_DataReceived+0x9a8>)
 8018b6e:	f001 ff17 	bl	801a9a0 <iprintf>
 8018b72:	485e      	ldr	r0, [pc, #376]	@ (8018cec <USBD_VND_DataReceived+0x984>)
 8018b74:	f001 ff7c 	bl	801aa70 <puts>
                vnd_update_lcd_params();
 8018b78:	f7fc f996 	bl	8014ea8 <vnd_update_lcd_params>
            }
            break;
 8018b7c:	e18d      	b.n	8018e9a <USBD_VND_DataReceived+0xb32>
        case VND_CMD_SET_BLOCK_HZ:
            if(len >= 3)
 8018b7e:	683b      	ldr	r3, [r7, #0]
 8018b80:	2b02      	cmp	r3, #2
 8018b82:	f240 818c 	bls.w	8018e9e <USBD_VND_DataReceived+0xb36>
            {
                uint16_t hz = (uint16_t)(data[1] | (data[2] << 8));
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	3301      	adds	r3, #1
 8018b8a:	781b      	ldrb	r3, [r3, #0]
 8018b8c:	b21a      	sxth	r2, r3
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	3302      	adds	r3, #2
 8018b92:	781b      	ldrb	r3, [r3, #0]
 8018b94:	b21b      	sxth	r3, r3
 8018b96:	021b      	lsls	r3, r3, #8
 8018b98:	b21b      	sxth	r3, r3
 8018b9a:	4313      	orrs	r3, r2
 8018b9c:	b21b      	sxth	r3, r3
 8018b9e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
                if(hz == 0xFFFF) hz = 100;
 8018ba2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8018ba6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018baa:	4293      	cmp	r3, r2
 8018bac:	d102      	bne.n	8018bb4 <USBD_VND_DataReceived+0x84c>
 8018bae:	2364      	movs	r3, #100	@ 0x64
 8018bb0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
                if(hz < 20) hz = 20;
 8018bb4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8018bb8:	2b13      	cmp	r3, #19
 8018bba:	d802      	bhi.n	8018bc2 <USBD_VND_DataReceived+0x85a>
 8018bbc:	2314      	movs	r3, #20
 8018bbe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
                if(hz > 100) hz = 100;
 8018bc2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8018bc6:	2b64      	cmp	r3, #100	@ 0x64
 8018bc8:	d902      	bls.n	8018bd0 <USBD_VND_DataReceived+0x868>
 8018bca:	2364      	movs	r3, #100	@ 0x64
 8018bcc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
                diag_hz = hz;
 8018bd0:	4a50      	ldr	r2, [pc, #320]	@ (8018d14 <USBD_VND_DataReceived+0x9ac>)
 8018bd2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8018bd6:	8013      	strh	r3, [r2, #0]
                diag_period_ms = 1000 / diag_hz;
 8018bd8:	4b4e      	ldr	r3, [pc, #312]	@ (8018d14 <USBD_VND_DataReceived+0x9ac>)
 8018bda:	881b      	ldrh	r3, [r3, #0]
 8018bdc:	461a      	mov	r2, r3
 8018bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018be2:	fb93 f3f2 	sdiv	r3, r3, r2
 8018be6:	461a      	mov	r2, r3
 8018be8:	4b4b      	ldr	r3, [pc, #300]	@ (8018d18 <USBD_VND_DataReceived+0x9b0>)
 8018bea:	601a      	str	r2, [r3, #0]
                VND_LOG("SET_BLOCK_HZ %u", diag_hz);
 8018bec:	4b49      	ldr	r3, [pc, #292]	@ (8018d14 <USBD_VND_DataReceived+0x9ac>)
 8018bee:	881b      	ldrh	r3, [r3, #0]
 8018bf0:	4619      	mov	r1, r3
 8018bf2:	484a      	ldr	r0, [pc, #296]	@ (8018d1c <USBD_VND_DataReceived+0x9b4>)
 8018bf4:	f001 fed4 	bl	801a9a0 <iprintf>
 8018bf8:	483c      	ldr	r0, [pc, #240]	@ (8018cec <USBD_VND_DataReceived+0x984>)
 8018bfa:	f001 ff39 	bl	801aa70 <puts>
                cdc_logf("EVT SET_BLOCK_HZ %u", (unsigned)diag_hz);
 8018bfe:	4b45      	ldr	r3, [pc, #276]	@ (8018d14 <USBD_VND_DataReceived+0x9ac>)
 8018c00:	881b      	ldrh	r3, [r3, #0]
 8018c02:	4619      	mov	r1, r3
 8018c04:	4846      	ldr	r0, [pc, #280]	@ (8018d20 <USBD_VND_DataReceived+0x9b8>)
 8018c06:	f7fc f99f 	bl	8014f48 <cdc_logf>
                vnd_update_lcd_params();
 8018c0a:	f7fc f94d 	bl	8014ea8 <vnd_update_lcd_params>
            }
            break;
 8018c0e:	e146      	b.n	8018e9e <USBD_VND_DataReceived+0xb36>
        case VND_CMD_SET_FULL_MODE:
            if(len >= 2)
 8018c10:	683b      	ldr	r3, [r7, #0]
 8018c12:	2b01      	cmp	r3, #1
 8018c14:	f240 8145 	bls.w	8018ea2 <USBD_VND_DataReceived+0xb3a>
            {
                uint8_t full = data[1] ? 1 : 0;
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	3301      	adds	r3, #1
 8018c1c:	781b      	ldrb	r3, [r3, #0]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	bf14      	ite	ne
 8018c22:	2301      	movne	r3, #1
 8018c24:	2300      	moveq	r3, #0
 8018c26:	b2db      	uxtb	r3, r3
 8018c28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                full_mode = full;
 8018c2c:	4a3d      	ldr	r2, [pc, #244]	@ (8018d24 <USBD_VND_DataReceived+0x9bc>)
 8018c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018c32:	7013      	strb	r3, [r2, #0]
                VND_LOG("SET_FULL_MODE %u", full_mode);
 8018c34:	4b3b      	ldr	r3, [pc, #236]	@ (8018d24 <USBD_VND_DataReceived+0x9bc>)
 8018c36:	781b      	ldrb	r3, [r3, #0]
 8018c38:	b2db      	uxtb	r3, r3
 8018c3a:	4619      	mov	r1, r3
 8018c3c:	483a      	ldr	r0, [pc, #232]	@ (8018d28 <USBD_VND_DataReceived+0x9c0>)
 8018c3e:	f001 feaf 	bl	801a9a0 <iprintf>
 8018c42:	482a      	ldr	r0, [pc, #168]	@ (8018cec <USBD_VND_DataReceived+0x984>)
 8018c44:	f001 ff14 	bl	801aa70 <puts>
                cdc_logf("EVT SET_FULL_MODE %u", (unsigned)full_mode);
 8018c48:	4b36      	ldr	r3, [pc, #216]	@ (8018d24 <USBD_VND_DataReceived+0x9bc>)
 8018c4a:	781b      	ldrb	r3, [r3, #0]
 8018c4c:	b2db      	uxtb	r3, r3
 8018c4e:	4619      	mov	r1, r3
 8018c50:	4836      	ldr	r0, [pc, #216]	@ (8018d2c <USBD_VND_DataReceived+0x9c4>)
 8018c52:	f7fc f979 	bl	8014f48 <cdc_logf>
                if(streaming){
 8018c56:	4b36      	ldr	r3, [pc, #216]	@ (8018d30 <USBD_VND_DataReceived+0x9c8>)
 8018c58:	781b      	ldrb	r3, [r3, #0]
 8018c5a:	b2db      	uxtb	r3, r3
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d005      	beq.n	8018c6c <USBD_VND_DataReceived+0x904>
                    /* Переключение режима на лету: сброс пары и разрешение TEST не требуется */
                    pending_B = 0; sending_channel = 0xFF;
 8018c60:	4b34      	ldr	r3, [pc, #208]	@ (8018d34 <USBD_VND_DataReceived+0x9cc>)
 8018c62:	2200      	movs	r2, #0
 8018c64:	701a      	strb	r2, [r3, #0]
 8018c66:	4b34      	ldr	r3, [pc, #208]	@ (8018d38 <USBD_VND_DataReceived+0x9d0>)
 8018c68:	22ff      	movs	r2, #255	@ 0xff
 8018c6a:	701a      	strb	r2, [r3, #0]
                }
                if(full_mode){
 8018c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8018d24 <USBD_VND_DataReceived+0x9bc>)
 8018c6e:	781b      	ldrb	r3, [r3, #0]
 8018c70:	b2db      	uxtb	r3, r3
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d007      	beq.n	8018c86 <USBD_VND_DataReceived+0x91e>
                    /* Возврат к нормальному режиму ADC */
                    diag_mode_active = 0; diag_prepared_seq = 0xFFFFFFFFu;
 8018c76:	4b31      	ldr	r3, [pc, #196]	@ (8018d3c <USBD_VND_DataReceived+0x9d4>)
 8018c78:	2200      	movs	r2, #0
 8018c7a:	701a      	strb	r2, [r3, #0]
 8018c7c:	4b30      	ldr	r3, [pc, #192]	@ (8018d40 <USBD_VND_DataReceived+0x9d8>)
 8018c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8018c82:	601a      	str	r2, [r3, #0]
 8018c84:	e02d      	b.n	8018ce2 <USBD_VND_DataReceived+0x97a>
                } else {
                    /* Включаем диагностический режим (пила) */
                    diag_mode_active = 1;
 8018c86:	4b2d      	ldr	r3, [pc, #180]	@ (8018d3c <USBD_VND_DataReceived+0x9d4>)
 8018c88:	2201      	movs	r2, #1
 8018c8a:	701a      	strb	r2, [r3, #0]
                    diag_samples = (cur_samples_per_frame != 0) ? cur_samples_per_frame : VND_DEFAULT_TEST_SAMPLES;
 8018c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8018d44 <USBD_VND_DataReceived+0x9dc>)
 8018c8e:	881b      	ldrh	r3, [r3, #0]
 8018c90:	b29b      	uxth	r3, r3
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d003      	beq.n	8018c9e <USBD_VND_DataReceived+0x936>
 8018c96:	4b2b      	ldr	r3, [pc, #172]	@ (8018d44 <USBD_VND_DataReceived+0x9dc>)
 8018c98:	881b      	ldrh	r3, [r3, #0]
 8018c9a:	b29b      	uxth	r3, r3
 8018c9c:	e000      	b.n	8018ca0 <USBD_VND_DataReceived+0x938>
 8018c9e:	2350      	movs	r3, #80	@ 0x50
 8018ca0:	4a29      	ldr	r2, [pc, #164]	@ (8018d48 <USBD_VND_DataReceived+0x9e0>)
 8018ca2:	8013      	strh	r3, [r2, #0]
                    if(diag_samples > VND_MAX_SAMPLES) diag_samples = VND_MAX_SAMPLES;
 8018ca4:	4b28      	ldr	r3, [pc, #160]	@ (8018d48 <USBD_VND_DataReceived+0x9e0>)
 8018ca6:	881b      	ldrh	r3, [r3, #0]
 8018ca8:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8018cac:	d903      	bls.n	8018cb6 <USBD_VND_DataReceived+0x94e>
 8018cae:	4b26      	ldr	r3, [pc, #152]	@ (8018d48 <USBD_VND_DataReceived+0x9e0>)
 8018cb0:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 8018cb4:	801a      	strh	r2, [r3, #0]
                    cur_samples_per_frame = diag_samples;
 8018cb6:	4b24      	ldr	r3, [pc, #144]	@ (8018d48 <USBD_VND_DataReceived+0x9e0>)
 8018cb8:	881a      	ldrh	r2, [r3, #0]
 8018cba:	4b22      	ldr	r3, [pc, #136]	@ (8018d44 <USBD_VND_DataReceived+0x9dc>)
 8018cbc:	801a      	strh	r2, [r3, #0]
                    cur_expected_frame_size = (uint16_t)(VND_FRAME_HDR_SIZE + cur_samples_per_frame*2u);
 8018cbe:	4b21      	ldr	r3, [pc, #132]	@ (8018d44 <USBD_VND_DataReceived+0x9dc>)
 8018cc0:	881b      	ldrh	r3, [r3, #0]
 8018cc2:	b29b      	uxth	r3, r3
 8018cc4:	3310      	adds	r3, #16
 8018cc6:	b29b      	uxth	r3, r3
 8018cc8:	005b      	lsls	r3, r3, #1
 8018cca:	b29a      	uxth	r2, r3
 8018ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8018d4c <USBD_VND_DataReceived+0x9e4>)
 8018cce:	801a      	strh	r2, [r3, #0]
                    /* Разрешаем немедленную отправку диагностических кадров */
                    diag_next_ms = HAL_GetTick(); diag_prepared_seq = 0xFFFFFFFFu;
 8018cd0:	f7eb fd42 	bl	8004758 <HAL_GetTick>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8018d50 <USBD_VND_DataReceived+0x9e8>)
 8018cd8:	6013      	str	r3, [r2, #0]
 8018cda:	4b19      	ldr	r3, [pc, #100]	@ (8018d40 <USBD_VND_DataReceived+0x9d8>)
 8018cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8018ce0:	601a      	str	r2, [r3, #0]
                }
                vnd_update_lcd_params();
 8018ce2:	f7fc f8e1 	bl	8014ea8 <vnd_update_lcd_params>
            }
            break;
 8018ce6:	e0dc      	b.n	8018ea2 <USBD_VND_DataReceived+0xb3a>
 8018ce8:	0801d6f0 	.word	0x0801d6f0
 8018cec:	0801c9c8 	.word	0x0801c9c8
 8018cf0:	2400003b 	.word	0x2400003b
 8018cf4:	2400c5ec 	.word	0x2400c5ec
 8018cf8:	2400c728 	.word	0x2400c728
 8018cfc:	0801d708 	.word	0x0801d708
 8018d00:	2400dcb8 	.word	0x2400dcb8
 8018d04:	2400dcba 	.word	0x2400dcba
 8018d08:	2400dcbc 	.word	0x2400dcbc
 8018d0c:	2400dcbe 	.word	0x2400dcbe
 8018d10:	0801d72c 	.word	0x0801d72c
 8018d14:	24000040 	.word	0x24000040
 8018d18:	2400c72c 	.word	0x2400c72c
 8018d1c:	0801d758 	.word	0x0801d758
 8018d20:	0801d770 	.word	0x0801d770
 8018d24:	2400003c 	.word	0x2400003c
 8018d28:	0801d784 	.word	0x0801d784
 8018d2c:	0801d79c 	.word	0x0801d79c
 8018d30:	2400c5d8 	.word	0x2400c5d8
 8018d34:	24018a32 	.word	0x24018a32
 8018d38:	2400004c 	.word	0x2400004c
 8018d3c:	2400c729 	.word	0x2400c729
 8018d40:	24000044 	.word	0x24000044
 8018d44:	2400c5e0 	.word	0x2400c5e0
 8018d48:	24000042 	.word	0x24000042
 8018d4c:	2400c5e2 	.word	0x2400c5e2
 8018d50:	2400c730 	.word	0x2400c730
        case VND_CMD_SET_TRUNC_SAMPLES:
            if(len >= 3){
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	2b02      	cmp	r3, #2
 8018d58:	f240 80a5 	bls.w	8018ea6 <USBD_VND_DataReceived+0xb3e>
                uint16_t ns = (uint16_t)(data[1] | (data[2] << 8));
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	3301      	adds	r3, #1
 8018d60:	781b      	ldrb	r3, [r3, #0]
 8018d62:	b21a      	sxth	r2, r3
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	3302      	adds	r3, #2
 8018d68:	781b      	ldrb	r3, [r3, #0]
 8018d6a:	b21b      	sxth	r3, r3
 8018d6c:	021b      	lsls	r3, r3, #8
 8018d6e:	b21b      	sxth	r3, r3
 8018d70:	4313      	orrs	r3, r2
 8018d72:	b21b      	sxth	r3, r3
 8018d74:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                vnd_trunc_samples = ns;
 8018d78:	4a4f      	ldr	r2, [pc, #316]	@ (8018eb8 <USBD_VND_DataReceived+0xb50>)
 8018d7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018d7e:	8013      	strh	r3, [r2, #0]
                VND_LOG("SET_TRUNC_SAMPLES %u", (unsigned)vnd_trunc_samples);
 8018d80:	4b4d      	ldr	r3, [pc, #308]	@ (8018eb8 <USBD_VND_DataReceived+0xb50>)
 8018d82:	881b      	ldrh	r3, [r3, #0]
 8018d84:	b29b      	uxth	r3, r3
 8018d86:	4619      	mov	r1, r3
 8018d88:	484c      	ldr	r0, [pc, #304]	@ (8018ebc <USBD_VND_DataReceived+0xb54>)
 8018d8a:	f001 fe09 	bl	801a9a0 <iprintf>
 8018d8e:	484c      	ldr	r0, [pc, #304]	@ (8018ec0 <USBD_VND_DataReceived+0xb58>)
 8018d90:	f001 fe6e 	bl	801aa70 <puts>
                cdc_logf("EVT SET_TRUNC %u", (unsigned)vnd_trunc_samples);
 8018d94:	4b48      	ldr	r3, [pc, #288]	@ (8018eb8 <USBD_VND_DataReceived+0xb50>)
 8018d96:	881b      	ldrh	r3, [r3, #0]
 8018d98:	b29b      	uxth	r3, r3
 8018d9a:	4619      	mov	r1, r3
 8018d9c:	4849      	ldr	r0, [pc, #292]	@ (8018ec4 <USBD_VND_DataReceived+0xb5c>)
 8018d9e:	f7fc f8d3 	bl	8014f48 <cdc_logf>
                /* Сбросим текущий lock размера, чтобы статус отразил новые размеры, применится при следующем кадре */
                cur_samples_per_frame = 0;
 8018da2:	4b49      	ldr	r3, [pc, #292]	@ (8018ec8 <USBD_VND_DataReceived+0xb60>)
 8018da4:	2200      	movs	r2, #0
 8018da6:	801a      	strh	r2, [r3, #0]
                cur_expected_frame_size = 0;
 8018da8:	4b48      	ldr	r3, [pc, #288]	@ (8018ecc <USBD_VND_DataReceived+0xb64>)
 8018daa:	2200      	movs	r2, #0
 8018dac:	801a      	strh	r2, [r3, #0]
            }
            break;
 8018dae:	e07a      	b.n	8018ea6 <USBD_VND_DataReceived+0xb3e>
        case VND_CMD_SET_PROFILE:
            if(len >= 2)
 8018db0:	683b      	ldr	r3, [r7, #0]
 8018db2:	2b01      	cmp	r3, #1
 8018db4:	d979      	bls.n	8018eaa <USBD_VND_DataReceived+0xb42>
            {
                uint8_t profile = data[1];
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	3301      	adds	r3, #1
 8018dba:	781b      	ldrb	r3, [r3, #0]
 8018dbc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t prof_id = ADC_PROFILE_B_DEFAULT;
 8018dc0:	2301      	movs	r3, #1
 8018dc2:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                if(profile == 1) prof_id = ADC_PROFILE_A_200HZ;
 8018dc6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8018dca:	2b01      	cmp	r3, #1
 8018dcc:	d103      	bne.n	8018dd6 <USBD_VND_DataReceived+0xa6e>
 8018dce:	2300      	movs	r3, #0
 8018dd0:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 8018dd4:	e006      	b.n	8018de4 <USBD_VND_DataReceived+0xa7c>
                else if(profile == 2) prof_id = ADC_PROFILE_B_DEFAULT;
 8018dd6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8018dda:	2b02      	cmp	r3, #2
 8018ddc:	d102      	bne.n	8018de4 <USBD_VND_DataReceived+0xa7c>
 8018dde:	2301      	movs	r3, #1
 8018de0:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                int rc = adc_stream_set_profile(prof_id);
 8018de4:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8018de8:	4618      	mov	r0, r3
 8018dea:	f7e7 fc01 	bl	80005f0 <adc_stream_set_profile>
 8018dee:	6378      	str	r0, [r7, #52]	@ 0x34
                VND_LOG("SET_PROFILE %u -> prof_id=%u rc=%d", profile, prof_id, rc);
 8018df0:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 8018df4:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 8018df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dfa:	4835      	ldr	r0, [pc, #212]	@ (8018ed0 <USBD_VND_DataReceived+0xb68>)
 8018dfc:	f001 fdd0 	bl	801a9a0 <iprintf>
 8018e00:	482f      	ldr	r0, [pc, #188]	@ (8018ec0 <USBD_VND_DataReceived+0xb58>)
 8018e02:	f001 fe35 	bl	801aa70 <puts>
                /* ДИАГНОСТИКА: вывести текущее состояние после смены профиля */
                if(rc == 0) {
 8018e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d14e      	bne.n	8018eaa <USBD_VND_DataReceived+0xb42>
                    host_profile = profile; /* запомним для LCD ровно то, что прислал хост */
 8018e0c:	4a31      	ldr	r2, [pc, #196]	@ (8018ed4 <USBD_VND_DataReceived+0xb6c>)
 8018e0e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8018e12:	7013      	strb	r3, [r2, #0]
                    uint16_t cur_samples = adc_stream_get_active_samples();
 8018e14:	f7e7 fb36 	bl	8000484 <adc_stream_get_active_samples>
 8018e18:	4603      	mov	r3, r0
 8018e1a:	867b      	strh	r3, [r7, #50]	@ 0x32
                    uint16_t cur_rate = adc_stream_get_buf_rate();
 8018e1c:	f7e7 fb3e 	bl	800049c <adc_stream_get_buf_rate>
 8018e20:	4603      	mov	r3, r0
 8018e22:	863b      	strh	r3, [r7, #48]	@ 0x30
                    cdc_logf("EVT SET_PROFILE p=%u samples=%u rate=%u Hz", profile, cur_samples, cur_rate);
 8018e24:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 8018e28:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8018e2a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8018e2c:	482a      	ldr	r0, [pc, #168]	@ (8018ed8 <USBD_VND_DataReceived+0xb70>)
 8018e2e:	f7fc f88b 	bl	8014f48 <cdc_logf>
                    vnd_update_lcd_params();
 8018e32:	f7fc f839 	bl	8014ea8 <vnd_update_lcd_params>
                }
            }
            break;
 8018e36:	e038      	b.n	8018eaa <USBD_VND_DataReceived+0xb42>
        case VND_CMD_SET_ROI_US:
            if(len >= 5)
 8018e38:	683b      	ldr	r3, [r7, #0]
 8018e3a:	2b04      	cmp	r3, #4
 8018e3c:	d937      	bls.n	8018eae <USBD_VND_DataReceived+0xb46>
            {
                uint32_t us = (uint32_t)(data[1] | (data[2] << 8) | (data[3] << 16) | (data[4] << 24));
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	3301      	adds	r3, #1
 8018e42:	781b      	ldrb	r3, [r3, #0]
 8018e44:	461a      	mov	r2, r3
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	3302      	adds	r3, #2
 8018e4a:	781b      	ldrb	r3, [r3, #0]
 8018e4c:	021b      	lsls	r3, r3, #8
 8018e4e:	431a      	orrs	r2, r3
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	3303      	adds	r3, #3
 8018e54:	781b      	ldrb	r3, [r3, #0]
 8018e56:	041b      	lsls	r3, r3, #16
 8018e58:	431a      	orrs	r2, r3
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	3304      	adds	r3, #4
 8018e5e:	781b      	ldrb	r3, [r3, #0]
 8018e60:	061b      	lsls	r3, r3, #24
 8018e62:	4313      	orrs	r3, r2
 8018e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
                /* TODO: применить ROI к цепочке выборки */
                VND_LOG("SET_ROI_US %lu", (unsigned long)us);
 8018e66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018e68:	481c      	ldr	r0, [pc, #112]	@ (8018edc <USBD_VND_DataReceived+0xb74>)
 8018e6a:	f001 fd99 	bl	801a9a0 <iprintf>
 8018e6e:	4814      	ldr	r0, [pc, #80]	@ (8018ec0 <USBD_VND_DataReceived+0xb58>)
 8018e70:	f001 fdfe 	bl	801aa70 <puts>
            }
            break;
 8018e74:	e01b      	b.n	8018eae <USBD_VND_DataReceived+0xb46>
        default:
            VND_LOG("IGN %02X", cmd);
 8018e76:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8018e7a:	4619      	mov	r1, r3
 8018e7c:	4818      	ldr	r0, [pc, #96]	@ (8018ee0 <USBD_VND_DataReceived+0xb78>)
 8018e7e:	f001 fd8f 	bl	801a9a0 <iprintf>
 8018e82:	480f      	ldr	r0, [pc, #60]	@ (8018ec0 <USBD_VND_DataReceived+0xb58>)
 8018e84:	f001 fdf4 	bl	801aa70 <puts>
            break;
 8018e88:	e012      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
    if(!len) return;
 8018e8a:	bf00      	nop
 8018e8c:	e010      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
        break;
 8018e8e:	bf00      	nop
 8018e90:	e00e      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
            break;
 8018e92:	bf00      	nop
 8018e94:	e00c      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
        break;
 8018e96:	bf00      	nop
 8018e98:	e00a      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
            break;
 8018e9a:	bf00      	nop
 8018e9c:	e008      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
            break;
 8018e9e:	bf00      	nop
 8018ea0:	e006      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
            break;
 8018ea2:	bf00      	nop
 8018ea4:	e004      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
            break;
 8018ea6:	bf00      	nop
 8018ea8:	e002      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
            break;
 8018eaa:	bf00      	nop
 8018eac:	e000      	b.n	8018eb0 <USBD_VND_DataReceived+0xb48>
            break;
 8018eae:	bf00      	nop
    }
}
 8018eb0:	3768      	adds	r7, #104	@ 0x68
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8018eb6:	bf00      	nop
 8018eb8:	2400c670 	.word	0x2400c670
 8018ebc:	0801d7b4 	.word	0x0801d7b4
 8018ec0:	0801c9c8 	.word	0x0801c9c8
 8018ec4:	0801d7d0 	.word	0x0801d7d0
 8018ec8:	2400c5e0 	.word	0x2400c5e0
 8018ecc:	2400c5e2 	.word	0x2400c5e2
 8018ed0:	0801d7e4 	.word	0x0801d7e4
 8018ed4:	2400c64e 	.word	0x2400c64e
 8018ed8:	0801d810 	.word	0x0801d810
 8018edc:	0801d83c 	.word	0x0801d83c
 8018ee0:	0801d854 	.word	0x0801d854

08018ee4 <adc_stream_on_new_frames>:
    return vnd_total_tx_samples;
}

/* Хук от цепочки ADC: когда появились новые кадры — пинаем таск */
void adc_stream_on_new_frames(uint32_t frames_added)
{
 8018ee4:	b480      	push	{r7}
 8018ee6:	b083      	sub	sp, #12
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
    (void)frames_added;
    /* минимальный kick: если не заняты и идёт стрим — дать шанс таску отправить */
    if(streaming){ vnd_tx_kick = 1; }
 8018eec:	4b06      	ldr	r3, [pc, #24]	@ (8018f08 <adc_stream_on_new_frames+0x24>)
 8018eee:	781b      	ldrb	r3, [r3, #0]
 8018ef0:	b2db      	uxtb	r3, r3
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d002      	beq.n	8018efc <adc_stream_on_new_frames+0x18>
 8018ef6:	4b05      	ldr	r3, [pc, #20]	@ (8018f0c <adc_stream_on_new_frames+0x28>)
 8018ef8:	2201      	movs	r2, #1
 8018efa:	701a      	strb	r2, [r3, #0]
}
 8018efc:	bf00      	nop
 8018efe:	370c      	adds	r7, #12
 8018f00:	46bd      	mov	sp, r7
 8018f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f06:	4770      	bx	lr
 8018f08:	2400c5d8 	.word	0x2400c5d8
 8018f0c:	2400c688 	.word	0x2400c688

08018f10 <USBD_VND_RequestSoftReset>:
static volatile uint8_t vnd_tx_busy = 0;
static volatile uint8_t vnd_last_tx_rc = 0xFF; /* последний rc из USBD_LL_Transmit */
static volatile uint16_t vnd_last_tx_len = 0;

/* Запросить soft/deep reset откуда угодно (в т.ч. из приложения) */
void USBD_VND_RequestSoftReset(void){ g_req_soft_reset = 1; }
 8018f10:	b480      	push	{r7}
 8018f12:	af00      	add	r7, sp, #0
 8018f14:	4b03      	ldr	r3, [pc, #12]	@ (8018f24 <USBD_VND_RequestSoftReset+0x14>)
 8018f16:	2201      	movs	r2, #1
 8018f18:	701a      	strb	r2, [r3, #0]
 8018f1a:	bf00      	nop
 8018f1c:	46bd      	mov	sp, r7
 8018f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f22:	4770      	bx	lr
 8018f24:	24018acc 	.word	0x24018acc

08018f28 <VND_Class_SoftReset>:
void USBD_VND_RequestDeepReset(void){ g_req_deep_reset = 1; }

/* Выполнить мягкий/глубокий ресет класса Vendor (без ре-энумерации USB) */
static void VND_Class_SoftReset(USBD_HandleTypeDef *pdev)
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b082      	sub	sp, #8
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	6078      	str	r0, [r7, #4]
  /* Снять занятость, очистить возможные STALL, флешнуть FIFO EP */
  USBD_VND_ForceTxIdle();
 8018f30:	f000 f9d0 	bl	80192d4 <USBD_VND_ForceTxIdle>
  (void)USBD_LL_FlushEP(pdev, VND_IN_EP);
 8018f34:	2183      	movs	r1, #131	@ 0x83
 8018f36:	6878      	ldr	r0, [r7, #4]
 8018f38:	f001 fb2c 	bl	801a594 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, VND_OUT_EP);
 8018f3c:	2103      	movs	r1, #3
 8018f3e:	6878      	ldr	r0, [r7, #4]
 8018f40:	f001 fb28 	bl	801a594 <USBD_LL_FlushEP>
  (void)USBD_LL_ClearStallEP(pdev, VND_IN_EP);
 8018f44:	2183      	movs	r1, #131	@ 0x83
 8018f46:	6878      	ldr	r0, [r7, #4]
 8018f48:	f001 fb62 	bl	801a610 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, VND_OUT_EP);
 8018f4c:	2103      	movs	r1, #3
 8018f4e:	6878      	ldr	r0, [r7, #4]
 8018f50:	f001 fb5e 	bl	801a610 <USBD_LL_ClearStallEP>
  /* Реарм приёма */
  if (g_alt_if2 == 1) {
 8018f54:	4b0e      	ldr	r3, [pc, #56]	@ (8018f90 <VND_Class_SoftReset+0x68>)
 8018f56:	781b      	ldrb	r3, [r3, #0]
 8018f58:	b2db      	uxtb	r3, r3
 8018f5a:	2b01      	cmp	r3, #1
 8018f5c:	d111      	bne.n	8018f82 <VND_Class_SoftReset+0x5a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	7c1b      	ldrb	r3, [r3, #16]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d107      	bne.n	8018f76 <VND_Class_SoftReset+0x4e>
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_HS_MAX_PACKET_SIZE);
 8018f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8018f94 <VND_Class_SoftReset+0x6c>)
 8018f6c:	2103      	movs	r1, #3
 8018f6e:	6878      	ldr	r0, [r7, #4]
 8018f70:	f001 fbd9 	bl	801a726 <USBD_LL_PrepareReceive>
 8018f74:	e005      	b.n	8018f82 <VND_Class_SoftReset+0x5a>
    else
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_FS_MAX_PACKET_SIZE);
 8018f76:	2340      	movs	r3, #64	@ 0x40
 8018f78:	4a06      	ldr	r2, [pc, #24]	@ (8018f94 <VND_Class_SoftReset+0x6c>)
 8018f7a:	2103      	movs	r1, #3
 8018f7c:	6878      	ldr	r0, [r7, #4]
 8018f7e:	f001 fbd2 	bl	801a726 <USBD_LL_PrepareReceive>
  }
  /* Остановить и очистить пайплайн приложения */
  vnd_pipeline_stop_reset(0);
 8018f82:	2000      	movs	r0, #0
 8018f84:	f7fc fa1e 	bl	80153c4 <vnd_pipeline_stop_reset>
}
 8018f88:	bf00      	nop
 8018f8a:	3708      	adds	r7, #8
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	bd80      	pop	{r7, pc}
 8018f90:	24018ace 	.word	0x24018ace
 8018f94:	24018ad0 	.word	0x24018ad0

08018f98 <VND_Class_DeepReset>:

static void VND_Class_DeepReset(USBD_HandleTypeDef *pdev)
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b082      	sub	sp, #8
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	6078      	str	r0, [r7, #4]
  /* Закрыть и переоткрыть конечные точки Vendor */
  (void)USBD_LL_CloseEP(pdev, VND_IN_EP);  pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 0U;
 8018fa0:	2183      	movs	r1, #131	@ 0x83
 8018fa2:	6878      	ldr	r0, [r7, #4]
 8018fa4:	f001 fad7 	bl	801a556 <USBD_LL_CloseEP>
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	2200      	movs	r2, #0
 8018fac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  (void)USBD_LL_CloseEP(pdev, VND_OUT_EP); pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 0U;
 8018fb0:	2103      	movs	r1, #3
 8018fb2:	6878      	ldr	r0, [r7, #4]
 8018fb4:	f001 facf 	bl	801a556 <USBD_LL_CloseEP>
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	2200      	movs	r2, #0
 8018fbc:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
  if (g_alt_if2 == 1) {
 8018fc0:	4b26      	ldr	r3, [pc, #152]	@ (801905c <VND_Class_DeepReset+0xc4>)
 8018fc2:	781b      	ldrb	r3, [r3, #0]
 8018fc4:	b2db      	uxtb	r3, r3
 8018fc6:	2b01      	cmp	r3, #1
 8018fc8:	d140      	bne.n	801904c <VND_Class_DeepReset+0xb4>
    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	7c1b      	ldrb	r3, [r3, #16]
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d116      	bne.n	8019000 <VND_Class_DeepReset+0x68>
      (void)USBD_LL_OpenEP(pdev, VND_IN_EP,  USBD_EP_TYPE_BULK, VND_DATA_HS_MAX_PACKET_SIZE);
 8018fd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018fd6:	2202      	movs	r2, #2
 8018fd8:	2183      	movs	r1, #131	@ 0x83
 8018fda:	6878      	ldr	r0, [r7, #4]
 8018fdc:	f001 fa95 	bl	801a50a <USBD_LL_OpenEP>
      pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 1U;
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	2201      	movs	r2, #1
 8018fe4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      (void)USBD_LL_OpenEP(pdev, VND_OUT_EP, USBD_EP_TYPE_BULK, VND_DATA_HS_MAX_PACKET_SIZE);
 8018fe8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018fec:	2202      	movs	r2, #2
 8018fee:	2103      	movs	r1, #3
 8018ff0:	6878      	ldr	r0, [r7, #4]
 8018ff2:	f001 fa8a 	bl	801a50a <USBD_LL_OpenEP>
      pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 1U;
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	2201      	movs	r2, #1
 8018ffa:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
 8018ffe:	e013      	b.n	8019028 <VND_Class_DeepReset+0x90>
    } else {
      (void)USBD_LL_OpenEP(pdev, VND_IN_EP,  USBD_EP_TYPE_BULK, VND_DATA_FS_MAX_PACKET_SIZE);
 8019000:	2340      	movs	r3, #64	@ 0x40
 8019002:	2202      	movs	r2, #2
 8019004:	2183      	movs	r1, #131	@ 0x83
 8019006:	6878      	ldr	r0, [r7, #4]
 8019008:	f001 fa7f 	bl	801a50a <USBD_LL_OpenEP>
      pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 1U;
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	2201      	movs	r2, #1
 8019010:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      (void)USBD_LL_OpenEP(pdev, VND_OUT_EP, USBD_EP_TYPE_BULK, VND_DATA_FS_MAX_PACKET_SIZE);
 8019014:	2340      	movs	r3, #64	@ 0x40
 8019016:	2202      	movs	r2, #2
 8019018:	2103      	movs	r1, #3
 801901a:	6878      	ldr	r0, [r7, #4]
 801901c:	f001 fa75 	bl	801a50a <USBD_LL_OpenEP>
      pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 1U;
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	2201      	movs	r2, #1
 8019024:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
    }
    /* Реарм приёма */
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	7c1b      	ldrb	r3, [r3, #16]
 801902c:	2b00      	cmp	r3, #0
 801902e:	d107      	bne.n	8019040 <VND_Class_DeepReset+0xa8>
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_HS_MAX_PACKET_SIZE);
 8019030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019034:	4a0a      	ldr	r2, [pc, #40]	@ (8019060 <VND_Class_DeepReset+0xc8>)
 8019036:	2103      	movs	r1, #3
 8019038:	6878      	ldr	r0, [r7, #4]
 801903a:	f001 fb74 	bl	801a726 <USBD_LL_PrepareReceive>
 801903e:	e005      	b.n	801904c <VND_Class_DeepReset+0xb4>
    else
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_FS_MAX_PACKET_SIZE);
 8019040:	2340      	movs	r3, #64	@ 0x40
 8019042:	4a07      	ldr	r2, [pc, #28]	@ (8019060 <VND_Class_DeepReset+0xc8>)
 8019044:	2103      	movs	r1, #3
 8019046:	6878      	ldr	r0, [r7, #4]
 8019048:	f001 fb6d 	bl	801a726 <USBD_LL_PrepareReceive>
  }
  /* Полная переинициализация пайплайна приложения */
  vnd_pipeline_stop_reset(1);
 801904c:	2001      	movs	r0, #1
 801904e:	f7fc f9b9 	bl	80153c4 <vnd_pipeline_stop_reset>
}
 8019052:	bf00      	nop
 8019054:	3708      	adds	r7, #8
 8019056:	46bd      	mov	sp, r7
 8019058:	bd80      	pop	{r7, pc}
 801905a:	bf00      	nop
 801905c:	24018ace 	.word	0x24018ace
 8019060:	24018ad0 	.word	0x24018ad0

08019064 <USBD_VND_ProcessControlRequests>:

/* Фоновый сервис для исполнения заявок управления */
void USBD_VND_ProcessControlRequests(void)
{
 8019064:	b580      	push	{r7, lr}
 8019066:	af00      	add	r7, sp, #0
  if (g_req_deep_reset) { g_req_deep_reset = 0; VND_Class_DeepReset(&hUsbDeviceHS); }
 8019068:	4b0b      	ldr	r3, [pc, #44]	@ (8019098 <USBD_VND_ProcessControlRequests+0x34>)
 801906a:	781b      	ldrb	r3, [r3, #0]
 801906c:	b2db      	uxtb	r3, r3
 801906e:	2b00      	cmp	r3, #0
 8019070:	d005      	beq.n	801907e <USBD_VND_ProcessControlRequests+0x1a>
 8019072:	4b09      	ldr	r3, [pc, #36]	@ (8019098 <USBD_VND_ProcessControlRequests+0x34>)
 8019074:	2200      	movs	r2, #0
 8019076:	701a      	strb	r2, [r3, #0]
 8019078:	4808      	ldr	r0, [pc, #32]	@ (801909c <USBD_VND_ProcessControlRequests+0x38>)
 801907a:	f7ff ff8d 	bl	8018f98 <VND_Class_DeepReset>
  if (g_req_soft_reset) { g_req_soft_reset = 0; VND_Class_SoftReset(&hUsbDeviceHS); }
 801907e:	4b08      	ldr	r3, [pc, #32]	@ (80190a0 <USBD_VND_ProcessControlRequests+0x3c>)
 8019080:	781b      	ldrb	r3, [r3, #0]
 8019082:	b2db      	uxtb	r3, r3
 8019084:	2b00      	cmp	r3, #0
 8019086:	d005      	beq.n	8019094 <USBD_VND_ProcessControlRequests+0x30>
 8019088:	4b05      	ldr	r3, [pc, #20]	@ (80190a0 <USBD_VND_ProcessControlRequests+0x3c>)
 801908a:	2200      	movs	r2, #0
 801908c:	701a      	strb	r2, [r3, #0]
 801908e:	4803      	ldr	r0, [pc, #12]	@ (801909c <USBD_VND_ProcessControlRequests+0x38>)
 8019090:	f7ff ff4a 	bl	8018f28 <VND_Class_SoftReset>
}
 8019094:	bf00      	nop
 8019096:	bd80      	pop	{r7, pc}
 8019098:	24018acd 	.word	0x24018acd
 801909c:	2400c2fc 	.word	0x2400c2fc
 80190a0:	24018acc 	.word	0x24018acc

080190a4 <USBD_VND_Transmit>:
/* Слабый callback завершения передачи Vendor IN */
__weak void USBD_VND_TxCplt(void) {}

/* API для передачи по Vendor */
uint8_t USBD_VND_Transmit(USBD_HandleTypeDef *pdev, const uint8_t *data, uint16_t len)
{
 80190a4:	b5b0      	push	{r4, r5, r7, lr}
 80190a6:	b088      	sub	sp, #32
 80190a8:	af04      	add	r7, sp, #16
 80190aa:	60f8      	str	r0, [r7, #12]
 80190ac:	60b9      	str	r1, [r7, #8]
 80190ae:	4613      	mov	r3, r2
 80190b0:	80fb      	strh	r3, [r7, #6]
  if (len > (uint16_t)sizeof(vnd_tx_buf)) return (uint8_t)USBD_FAIL; /* недопустимо: кадр больше ожидаемого */
 80190b2:	88fb      	ldrh	r3, [r7, #6]
 80190b4:	f5b3 6f02 	cmp.w	r3, #2080	@ 0x820
 80190b8:	d901      	bls.n	80190be <USBD_VND_Transmit+0x1a>
 80190ba:	2303      	movs	r3, #3
 80190bc:	e0c5      	b.n	801924a <USBD_VND_Transmit+0x1a6>
  /* Сначала проверяем занятость; при BUSY — минимальный лог без засорения основного [VND_TX] */
  if (vnd_tx_busy) {
 80190be:	4b65      	ldr	r3, [pc, #404]	@ (8019254 <USBD_VND_Transmit+0x1b0>)
 80190c0:	781b      	ldrb	r3, [r3, #0]
 80190c2:	b2db      	uxtb	r3, r3
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d022      	beq.n	801910e <USBD_VND_Transmit+0x6a>
    if (len >= 4) {
 80190c8:	88fb      	ldrh	r3, [r7, #6]
 80190ca:	2b03      	cmp	r3, #3
 80190cc:	d917      	bls.n	80190fe <USBD_VND_Transmit+0x5a>
      VND_LOGF("[VND_BUSY] ep=0x%02X len=%u head=%02X %02X %02X %02X\r\n", (unsigned)VND_IN_EP, (unsigned)len,
 80190ce:	88fa      	ldrh	r2, [r7, #6]
 80190d0:	68bb      	ldr	r3, [r7, #8]
 80190d2:	781b      	ldrb	r3, [r3, #0]
 80190d4:	461c      	mov	r4, r3
 80190d6:	68bb      	ldr	r3, [r7, #8]
 80190d8:	3301      	adds	r3, #1
 80190da:	781b      	ldrb	r3, [r3, #0]
 80190dc:	4619      	mov	r1, r3
 80190de:	68bb      	ldr	r3, [r7, #8]
 80190e0:	3302      	adds	r3, #2
 80190e2:	781b      	ldrb	r3, [r3, #0]
 80190e4:	4618      	mov	r0, r3
 80190e6:	68bb      	ldr	r3, [r7, #8]
 80190e8:	3303      	adds	r3, #3
 80190ea:	781b      	ldrb	r3, [r3, #0]
 80190ec:	9302      	str	r3, [sp, #8]
 80190ee:	9001      	str	r0, [sp, #4]
 80190f0:	9100      	str	r1, [sp, #0]
 80190f2:	4623      	mov	r3, r4
 80190f4:	2183      	movs	r1, #131	@ 0x83
 80190f6:	4858      	ldr	r0, [pc, #352]	@ (8019258 <USBD_VND_Transmit+0x1b4>)
 80190f8:	f001 fc52 	bl	801a9a0 <iprintf>
 80190fc:	e005      	b.n	801910a <USBD_VND_Transmit+0x66>
             (unsigned)data[0], (unsigned)data[1], (unsigned)data[2], (unsigned)data[3]);
    } else {
      VND_LOGF("[VND_BUSY] ep=0x%02X len=%u\r\n", (unsigned)VND_IN_EP, (unsigned)len);
 80190fe:	88fb      	ldrh	r3, [r7, #6]
 8019100:	461a      	mov	r2, r3
 8019102:	2183      	movs	r1, #131	@ 0x83
 8019104:	4855      	ldr	r0, [pc, #340]	@ (801925c <USBD_VND_Transmit+0x1b8>)
 8019106:	f001 fc4b 	bl	801a9a0 <iprintf>
    }
    return (uint8_t)USBD_BUSY;
 801910a:	2301      	movs	r3, #1
 801910c:	e09d      	b.n	801924a <USBD_VND_Transmit+0x1a6>
  }
  memcpy(vnd_tx_buf, data, len);
 801910e:	88fb      	ldrh	r3, [r7, #6]
 8019110:	461a      	mov	r2, r3
 8019112:	68b9      	ldr	r1, [r7, #8]
 8019114:	4852      	ldr	r0, [pc, #328]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 8019116:	f001 ff3e 	bl	801af96 <memcpy>
  }
#endif
  /* Жёсткий запрет STAT mid-stream: если это не рабочий кадр (не 0x5A 0xA5) и идёт стрим, разрешаем только при явном разрешении */
  extern uint8_t streaming; /* из usb_vendor_app.c */
  extern volatile uint8_t vnd_status_permit_once; /* одноразовое разрешение STAT */
  if (streaming) {
 801911a:	4b52      	ldr	r3, [pc, #328]	@ (8019264 <USBD_VND_Transmit+0x1c0>)
 801911c:	781b      	ldrb	r3, [r3, #0]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d033      	beq.n	801918a <USBD_VND_Transmit+0xe6>
    if (!(len >= 2 && vnd_tx_buf[0]==0x5A && vnd_tx_buf[1]==0xA5)) {
 8019122:	88fb      	ldrh	r3, [r7, #6]
 8019124:	2b01      	cmp	r3, #1
 8019126:	d907      	bls.n	8019138 <USBD_VND_Transmit+0x94>
 8019128:	4b4d      	ldr	r3, [pc, #308]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 801912a:	781b      	ldrb	r3, [r3, #0]
 801912c:	2b5a      	cmp	r3, #90	@ 0x5a
 801912e:	d103      	bne.n	8019138 <USBD_VND_Transmit+0x94>
 8019130:	4b4b      	ldr	r3, [pc, #300]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 8019132:	785b      	ldrb	r3, [r3, #1]
 8019134:	2ba5      	cmp	r3, #165	@ 0xa5
 8019136:	d028      	beq.n	801918a <USBD_VND_Transmit+0xe6>
      if (vnd_status_permit_once) {
 8019138:	4b4b      	ldr	r3, [pc, #300]	@ (8019268 <USBD_VND_Transmit+0x1c4>)
 801913a:	781b      	ldrb	r3, [r3, #0]
 801913c:	b2db      	uxtb	r3, r3
 801913e:	2b00      	cmp	r3, #0
 8019140:	d003      	beq.n	801914a <USBD_VND_Transmit+0xa6>
        vnd_status_permit_once = 0; /* использовать разрешение один раз */
 8019142:	4b49      	ldr	r3, [pc, #292]	@ (8019268 <USBD_VND_Transmit+0x1c4>)
 8019144:	2200      	movs	r2, #0
 8019146:	701a      	strb	r2, [r3, #0]
 8019148:	e01f      	b.n	801918a <USBD_VND_Transmit+0xe6>
      } else {
        /* Блокируем STAT mid-stream */
        /* Лёгкая диагностика блокировки */
        if (len >= 4) {
 801914a:	88fb      	ldrh	r3, [r7, #6]
 801914c:	2b03      	cmp	r3, #3
 801914e:	d914      	bls.n	801917a <USBD_VND_Transmit+0xd6>
          VND_LOGF("[VND_BLOCK] ep=0x%02X len=%u head=%02X %02X %02X %02X\r\n", (unsigned)VND_IN_EP, (unsigned)len,
 8019150:	88fa      	ldrh	r2, [r7, #6]
 8019152:	4b43      	ldr	r3, [pc, #268]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 8019154:	781b      	ldrb	r3, [r3, #0]
 8019156:	461c      	mov	r4, r3
 8019158:	4b41      	ldr	r3, [pc, #260]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 801915a:	785b      	ldrb	r3, [r3, #1]
 801915c:	4619      	mov	r1, r3
 801915e:	4b40      	ldr	r3, [pc, #256]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 8019160:	789b      	ldrb	r3, [r3, #2]
 8019162:	4618      	mov	r0, r3
 8019164:	4b3e      	ldr	r3, [pc, #248]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 8019166:	78db      	ldrb	r3, [r3, #3]
 8019168:	9302      	str	r3, [sp, #8]
 801916a:	9001      	str	r0, [sp, #4]
 801916c:	9100      	str	r1, [sp, #0]
 801916e:	4623      	mov	r3, r4
 8019170:	2183      	movs	r1, #131	@ 0x83
 8019172:	483e      	ldr	r0, [pc, #248]	@ (801926c <USBD_VND_Transmit+0x1c8>)
 8019174:	f001 fc14 	bl	801a9a0 <iprintf>
 8019178:	e005      	b.n	8019186 <USBD_VND_Transmit+0xe2>
                 (unsigned)vnd_tx_buf[0], (unsigned)vnd_tx_buf[1], (unsigned)vnd_tx_buf[2], (unsigned)vnd_tx_buf[3]);
        } else {
          VND_LOGF("[VND_BLOCK] ep=0x%02X len=%u\r\n", (unsigned)VND_IN_EP, (unsigned)len);
 801917a:	88fb      	ldrh	r3, [r7, #6]
 801917c:	461a      	mov	r2, r3
 801917e:	2183      	movs	r1, #131	@ 0x83
 8019180:	483b      	ldr	r0, [pc, #236]	@ (8019270 <USBD_VND_Transmit+0x1cc>)
 8019182:	f001 fc0d 	bl	801a9a0 <iprintf>
        }
        return (uint8_t)USBD_BUSY;
 8019186:	2301      	movs	r3, #1
 8019188:	e05f      	b.n	801924a <USBD_VND_Transmit+0x1a6>
      }
    }
  }
  vnd_tx_busy = 1U;
 801918a:	4b32      	ldr	r3, [pc, #200]	@ (8019254 <USBD_VND_Transmit+0x1b0>)
 801918c:	2201      	movs	r2, #1
 801918e:	701a      	strb	r2, [r3, #0]
  /* Убираем установку total_length - она может вызывать задержку TxCplt */
  /* pdev->ep_in[VND_IN_EP & 0x0FU].total_length = len; */
  vnd_last_tx_len = len;
 8019190:	4a38      	ldr	r2, [pc, #224]	@ (8019274 <USBD_VND_Transmit+0x1d0>)
 8019192:	88fb      	ldrh	r3, [r7, #6]
 8019194:	8013      	strh	r3, [r2, #0]
  vnd_last_tx_rc = (uint8_t)USBD_LL_Transmit(pdev, VND_IN_EP, vnd_tx_buf, len);
 8019196:	88fb      	ldrh	r3, [r7, #6]
 8019198:	4a31      	ldr	r2, [pc, #196]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 801919a:	2183      	movs	r1, #131	@ 0x83
 801919c:	68f8      	ldr	r0, [r7, #12]
 801919e:	f001 faa1 	bl	801a6e4 <USBD_LL_Transmit>
 80191a2:	4603      	mov	r3, r0
 80191a4:	461a      	mov	r2, r3
 80191a6:	4b34      	ldr	r3, [pc, #208]	@ (8019278 <USBD_VND_Transmit+0x1d4>)
 80191a8:	701a      	strb	r2, [r3, #0]
  /* Логируем только реально поставленные в LL передачи как [VND_TX] */
  if (vnd_last_tx_rc == (uint8_t)USBD_OK) {
 80191aa:	4b33      	ldr	r3, [pc, #204]	@ (8019278 <USBD_VND_Transmit+0x1d4>)
 80191ac:	781b      	ldrb	r3, [r3, #0]
 80191ae:	b2db      	uxtb	r3, r3
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d11e      	bne.n	80191f2 <USBD_VND_Transmit+0x14e>
    if (len >= 4) {
 80191b4:	88fb      	ldrh	r3, [r7, #6]
 80191b6:	2b03      	cmp	r3, #3
 80191b8:	d914      	bls.n	80191e4 <USBD_VND_Transmit+0x140>
      VND_LOGF("[VND_TX] ep=0x%02X len=%u head=%02X %02X %02X %02X\r\n", (unsigned)VND_IN_EP, (unsigned)len,
 80191ba:	88fa      	ldrh	r2, [r7, #6]
 80191bc:	4b28      	ldr	r3, [pc, #160]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 80191be:	781b      	ldrb	r3, [r3, #0]
 80191c0:	461c      	mov	r4, r3
 80191c2:	4b27      	ldr	r3, [pc, #156]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 80191c4:	785b      	ldrb	r3, [r3, #1]
 80191c6:	4619      	mov	r1, r3
 80191c8:	4b25      	ldr	r3, [pc, #148]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 80191ca:	789b      	ldrb	r3, [r3, #2]
 80191cc:	4618      	mov	r0, r3
 80191ce:	4b24      	ldr	r3, [pc, #144]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 80191d0:	78db      	ldrb	r3, [r3, #3]
 80191d2:	9302      	str	r3, [sp, #8]
 80191d4:	9001      	str	r0, [sp, #4]
 80191d6:	9100      	str	r1, [sp, #0]
 80191d8:	4623      	mov	r3, r4
 80191da:	2183      	movs	r1, #131	@ 0x83
 80191dc:	4827      	ldr	r0, [pc, #156]	@ (801927c <USBD_VND_Transmit+0x1d8>)
 80191de:	f001 fbdf 	bl	801a9a0 <iprintf>
 80191e2:	e02f      	b.n	8019244 <USBD_VND_Transmit+0x1a0>
             (unsigned)vnd_tx_buf[0], (unsigned)vnd_tx_buf[1], (unsigned)vnd_tx_buf[2], (unsigned)vnd_tx_buf[3]);
    } else {
      VND_LOGF("[VND_TX] ep=0x%02X len=%u\r\n", (unsigned)VND_IN_EP, (unsigned)len);
 80191e4:	88fb      	ldrh	r3, [r7, #6]
 80191e6:	461a      	mov	r2, r3
 80191e8:	2183      	movs	r1, #131	@ 0x83
 80191ea:	4825      	ldr	r0, [pc, #148]	@ (8019280 <USBD_VND_Transmit+0x1dc>)
 80191ec:	f001 fbd8 	bl	801a9a0 <iprintf>
 80191f0:	e028      	b.n	8019244 <USBD_VND_Transmit+0x1a0>
    }
  } else {
    /* Если LL вернул BUSY/FAIL — снимаем флаг занятости и логируем как FAIL */
    vnd_tx_busy = 0U;
 80191f2:	4b18      	ldr	r3, [pc, #96]	@ (8019254 <USBD_VND_Transmit+0x1b0>)
 80191f4:	2200      	movs	r2, #0
 80191f6:	701a      	strb	r2, [r3, #0]
    if (len >= 4) {
 80191f8:	88fb      	ldrh	r3, [r7, #6]
 80191fa:	2b03      	cmp	r3, #3
 80191fc:	d919      	bls.n	8019232 <USBD_VND_Transmit+0x18e>
      VND_LOGF("[VND_FAIL] ep=0x%02X rc=%u len=%u head=%02X %02X %02X %02X\r\n", (unsigned)VND_IN_EP, (unsigned)vnd_last_tx_rc, (unsigned)len,
 80191fe:	4b1e      	ldr	r3, [pc, #120]	@ (8019278 <USBD_VND_Transmit+0x1d4>)
 8019200:	781b      	ldrb	r3, [r3, #0]
 8019202:	b2db      	uxtb	r3, r3
 8019204:	461d      	mov	r5, r3
 8019206:	88fb      	ldrh	r3, [r7, #6]
 8019208:	4a15      	ldr	r2, [pc, #84]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 801920a:	7812      	ldrb	r2, [r2, #0]
 801920c:	4611      	mov	r1, r2
 801920e:	4a14      	ldr	r2, [pc, #80]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 8019210:	7852      	ldrb	r2, [r2, #1]
 8019212:	4610      	mov	r0, r2
 8019214:	4a12      	ldr	r2, [pc, #72]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 8019216:	7892      	ldrb	r2, [r2, #2]
 8019218:	4614      	mov	r4, r2
 801921a:	4a11      	ldr	r2, [pc, #68]	@ (8019260 <USBD_VND_Transmit+0x1bc>)
 801921c:	78d2      	ldrb	r2, [r2, #3]
 801921e:	9203      	str	r2, [sp, #12]
 8019220:	9402      	str	r4, [sp, #8]
 8019222:	9001      	str	r0, [sp, #4]
 8019224:	9100      	str	r1, [sp, #0]
 8019226:	462a      	mov	r2, r5
 8019228:	2183      	movs	r1, #131	@ 0x83
 801922a:	4816      	ldr	r0, [pc, #88]	@ (8019284 <USBD_VND_Transmit+0x1e0>)
 801922c:	f001 fbb8 	bl	801a9a0 <iprintf>
 8019230:	e008      	b.n	8019244 <USBD_VND_Transmit+0x1a0>
             (unsigned)vnd_tx_buf[0], (unsigned)vnd_tx_buf[1], (unsigned)vnd_tx_buf[2], (unsigned)vnd_tx_buf[3]);
    } else {
      VND_LOGF("[VND_FAIL] ep=0x%02X rc=%u len=%u\r\n", (unsigned)VND_IN_EP, (unsigned)vnd_last_tx_rc, (unsigned)len);
 8019232:	4b11      	ldr	r3, [pc, #68]	@ (8019278 <USBD_VND_Transmit+0x1d4>)
 8019234:	781b      	ldrb	r3, [r3, #0]
 8019236:	b2db      	uxtb	r3, r3
 8019238:	461a      	mov	r2, r3
 801923a:	88fb      	ldrh	r3, [r7, #6]
 801923c:	2183      	movs	r1, #131	@ 0x83
 801923e:	4812      	ldr	r0, [pc, #72]	@ (8019288 <USBD_VND_Transmit+0x1e4>)
 8019240:	f001 fbae 	bl	801a9a0 <iprintf>
    }
  }
  return vnd_last_tx_rc;
 8019244:	4b0c      	ldr	r3, [pc, #48]	@ (8019278 <USBD_VND_Transmit+0x1d4>)
 8019246:	781b      	ldrb	r3, [r3, #0]
 8019248:	b2db      	uxtb	r3, r3
}
 801924a:	4618      	mov	r0, r3
 801924c:	3710      	adds	r7, #16
 801924e:	46bd      	mov	sp, r7
 8019250:	bdb0      	pop	{r4, r5, r7, pc}
 8019252:	bf00      	nop
 8019254:	240194f4 	.word	0x240194f4
 8019258:	0801d91c 	.word	0x0801d91c
 801925c:	0801d954 	.word	0x0801d954
 8019260:	24018cd0 	.word	0x24018cd0
 8019264:	2400c5d8 	.word	0x2400c5d8
 8019268:	2400c689 	.word	0x2400c689
 801926c:	0801d974 	.word	0x0801d974
 8019270:	0801d9ac 	.word	0x0801d9ac
 8019274:	240194f6 	.word	0x240194f6
 8019278:	24000054 	.word	0x24000054
 801927c:	0801d9cc 	.word	0x0801d9cc
 8019280:	0801da04 	.word	0x0801da04
 8019284:	0801da20 	.word	0x0801da20
 8019288:	0801da60 	.word	0x0801da60

0801928c <USBD_VND_TxIsBusy>:
  vnd_rx_len = 0; /* помечаем прочитанным */
  return copy;
}

/* Диагностика состояния Vendor IN */
uint8_t USBD_VND_TxIsBusy(void) { return vnd_tx_busy; }
 801928c:	b480      	push	{r7}
 801928e:	af00      	add	r7, sp, #0
 8019290:	4b03      	ldr	r3, [pc, #12]	@ (80192a0 <USBD_VND_TxIsBusy+0x14>)
 8019292:	781b      	ldrb	r3, [r3, #0]
 8019294:	b2db      	uxtb	r3, r3
 8019296:	4618      	mov	r0, r3
 8019298:	46bd      	mov	sp, r7
 801929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929e:	4770      	bx	lr
 80192a0:	240194f4 	.word	0x240194f4

080192a4 <USBD_VND_LastTxRC>:
uint8_t USBD_VND_LastTxRC(void) { return vnd_last_tx_rc; }
 80192a4:	b480      	push	{r7}
 80192a6:	af00      	add	r7, sp, #0
 80192a8:	4b03      	ldr	r3, [pc, #12]	@ (80192b8 <USBD_VND_LastTxRC+0x14>)
 80192aa:	781b      	ldrb	r3, [r3, #0]
 80192ac:	b2db      	uxtb	r3, r3
 80192ae:	4618      	mov	r0, r3
 80192b0:	46bd      	mov	sp, r7
 80192b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b6:	4770      	bx	lr
 80192b8:	24000054 	.word	0x24000054

080192bc <USBD_VND_LastTxLen>:
uint16_t USBD_VND_LastTxLen(void) { return vnd_last_tx_len; }
 80192bc:	b480      	push	{r7}
 80192be:	af00      	add	r7, sp, #0
 80192c0:	4b03      	ldr	r3, [pc, #12]	@ (80192d0 <USBD_VND_LastTxLen+0x14>)
 80192c2:	881b      	ldrh	r3, [r3, #0]
 80192c4:	b29b      	uxth	r3, r3
 80192c6:	4618      	mov	r0, r3
 80192c8:	46bd      	mov	sp, r7
 80192ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ce:	4770      	bx	lr
 80192d0:	240194f6 	.word	0x240194f6

080192d4 <USBD_VND_ForceTxIdle>:

/* Форсируем свободное состояние TX (использовать осторожно: только при подтверждённом клине) */
void USBD_VND_ForceTxIdle(void)
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	af00      	add	r7, sp, #0
  if (vnd_tx_busy) {
 80192d8:	4b0a      	ldr	r3, [pc, #40]	@ (8019304 <USBD_VND_ForceTxIdle+0x30>)
 80192da:	781b      	ldrb	r3, [r3, #0]
 80192dc:	b2db      	uxtb	r3, r3
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d00a      	beq.n	80192f8 <USBD_VND_ForceTxIdle+0x24>
    VND_LOGF("[VND_FORCE_IDLE] clearing busy (last len=%u rc=%u)\r\n", (unsigned)vnd_last_tx_len, (unsigned)vnd_last_tx_rc);
 80192e2:	4b09      	ldr	r3, [pc, #36]	@ (8019308 <USBD_VND_ForceTxIdle+0x34>)
 80192e4:	881b      	ldrh	r3, [r3, #0]
 80192e6:	b29b      	uxth	r3, r3
 80192e8:	4619      	mov	r1, r3
 80192ea:	4b08      	ldr	r3, [pc, #32]	@ (801930c <USBD_VND_ForceTxIdle+0x38>)
 80192ec:	781b      	ldrb	r3, [r3, #0]
 80192ee:	b2db      	uxtb	r3, r3
 80192f0:	461a      	mov	r2, r3
 80192f2:	4807      	ldr	r0, [pc, #28]	@ (8019310 <USBD_VND_ForceTxIdle+0x3c>)
 80192f4:	f001 fb54 	bl	801a9a0 <iprintf>
  }
  vnd_tx_busy = 0U;
 80192f8:	4b02      	ldr	r3, [pc, #8]	@ (8019304 <USBD_VND_ForceTxIdle+0x30>)
 80192fa:	2200      	movs	r2, #0
 80192fc:	701a      	strb	r2, [r3, #0]
}
 80192fe:	bf00      	nop
 8019300:	bd80      	pop	{r7, pc}
 8019302:	bf00      	nop
 8019304:	240194f4 	.word	0x240194f4
 8019308:	240194f6 	.word	0x240194f6
 801930c:	24000054 	.word	0x24000054
 8019310:	0801da84 	.word	0x0801da84

08019314 <USBD_CDCVND_Init>:
  USBD_CDCVND_GetDeviceQualifierDescriptor,
};

/* ---------------- Реализация коллбэков ---------------- */
static uint8_t USBD_CDCVND_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019314:	b580      	push	{r7, lr}
 8019316:	b084      	sub	sp, #16
 8019318:	af00      	add	r7, sp, #0
 801931a:	6078      	str	r0, [r7, #4]
 801931c:	460b      	mov	r3, r1
 801931e:	70fb      	strb	r3, [r7, #3]
  g_alt_if2 = 0; /* при конфигурации по умолчанию IF2 в alt0 (idle) */
 8019320:	4b4a      	ldr	r3, [pc, #296]	@ (801944c <USBD_CDCVND_Init+0x138>)
 8019322:	2200      	movs	r2, #0
 8019324:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8019326:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 801932a:	f001 fa31 	bl	801a790 <USBD_static_malloc>
 801932e:	60f8      	str	r0, [r7, #12]
  if (!hcdc) { pdev->pClassData = NULL; return (uint8_t)USBD_EMEM; }
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d105      	bne.n	8019342 <USBD_CDCVND_Init+0x2e>
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	2200      	movs	r2, #0
 801933a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
 801933e:	2302      	movs	r3, #2
 8019340:	e080      	b.n	8019444 <USBD_CDCVND_Init+0x130>
  pdev->pClassData = hcdc;
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	68fa      	ldr	r2, [r7, #12]
 8019346:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH) {
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	7c1b      	ldrb	r3, [r3, #16]
 801934e:	2b00      	cmp	r3, #0
 8019350:	d119      	bne.n	8019386 <USBD_CDCVND_Init+0x72>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP,  USBD_EP_TYPE_BULK, CDC_DATA_HS_IN_PACKET_SIZE);
 8019352:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019356:	2202      	movs	r2, #2
 8019358:	2181      	movs	r1, #129	@ 0x81
 801935a:	6878      	ldr	r0, [r7, #4]
 801935c:	f001 f8d5 	bl	801a50a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	2201      	movs	r2, #1
 8019364:	871a      	strh	r2, [r3, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK, CDC_DATA_HS_OUT_PACKET_SIZE);
 8019366:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801936a:	2202      	movs	r2, #2
 801936c:	2101      	movs	r1, #1
 801936e:	6878      	ldr	r0, [r7, #4]
 8019370:	f001 f8cb 	bl	801a50a <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	2201      	movs	r2, #1
 8019378:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	2210      	movs	r2, #16
 8019380:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8019384:	e016      	b.n	80193b4 <USBD_CDCVND_Init+0xa0>
    /* Vendor IF#2 alt0 по умолчанию — EP будут открыты по SET_INTERFACE(alt=1) */
  } else {
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP,  USBD_EP_TYPE_BULK, CDC_DATA_FS_IN_PACKET_SIZE);
 8019386:	2340      	movs	r3, #64	@ 0x40
 8019388:	2202      	movs	r2, #2
 801938a:	2181      	movs	r1, #129	@ 0x81
 801938c:	6878      	ldr	r0, [r7, #4]
 801938e:	f001 f8bc 	bl	801a50a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	2201      	movs	r2, #1
 8019396:	871a      	strh	r2, [r3, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK, CDC_DATA_FS_OUT_PACKET_SIZE);
 8019398:	2340      	movs	r3, #64	@ 0x40
 801939a:	2202      	movs	r2, #2
 801939c:	2101      	movs	r1, #1
 801939e:	6878      	ldr	r0, [r7, #4]
 80193a0:	f001 f8b3 	bl	801a50a <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	2201      	movs	r2, #1
 80193a8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	2210      	movs	r2, #16
 80193b0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    /* Vendor IF#2 alt0 по умолчанию — EP будут открыты по SET_INTERFACE(alt=1) */
  }
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80193b4:	2308      	movs	r3, #8
 80193b6:	2203      	movs	r2, #3
 80193b8:	2182      	movs	r1, #130	@ 0x82
 80193ba:	6878      	ldr	r0, [r7, #4]
 80193bc:	f001 f8a5 	bl	801a50a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	2201      	movs	r2, #1
 80193c4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  if (CDC_USR(pdev)) CDC_USR(pdev)->Init();
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d004      	beq.n	80193dc <USBD_CDCVND_Init+0xc8>
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	4798      	blx	r3
  hcdc->TxState = 0; hcdc->RxState = 0;
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	2200      	movs	r2, #0
 80193e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	2200      	movs	r2, #0
 80193e8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  /* Готовим приём CDC OUT; Vendor OUT готовим только после включения alt1 */
  if (pdev->dev_speed == USBD_SPEED_HIGH) {
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	7c1b      	ldrb	r3, [r3, #16]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d109      	bne.n	8019408 <USBD_CDCVND_Init+0xf4>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer, CDC_DATA_HS_OUT_PACKET_SIZE);
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80193fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80193fe:	2101      	movs	r1, #1
 8019400:	6878      	ldr	r0, [r7, #4]
 8019402:	f001 f990 	bl	801a726 <USBD_LL_PrepareReceive>
 8019406:	e007      	b.n	8019418 <USBD_CDCVND_Init+0x104>
  } else {
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer, CDC_DATA_FS_OUT_PACKET_SIZE);
 8019408:	68fb      	ldr	r3, [r7, #12]
 801940a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801940e:	2340      	movs	r3, #64	@ 0x40
 8019410:	2101      	movs	r1, #1
 8019412:	6878      	ldr	r0, [r7, #4]
 8019414:	f001 f987 	bl	801a726 <USBD_LL_PrepareReceive>

  /* ОТКЛЮЧЕНО: не отправляем ничего по Vendor IN до явного START_STREAM,
    чтобы не занимать endpoint до того, как хост начнёт читать. */

  /* Диагностический лог скорости USB и maxpacket Vendor IN */
  if(pdev->dev_speed == USBD_SPEED_HIGH){
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	7c1b      	ldrb	r3, [r3, #16]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d108      	bne.n	8019432 <USBD_CDCVND_Init+0x11e>
    VND_LOGF("[VND_INIT] SPEED=HS vnd_mps=%u cdc_in_mps=%u\r\n",
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019428:	461a      	mov	r2, r3
 801942a:	4809      	ldr	r0, [pc, #36]	@ (8019450 <USBD_CDCVND_Init+0x13c>)
 801942c:	f001 fab8 	bl	801a9a0 <iprintf>
 8019430:	e007      	b.n	8019442 <USBD_CDCVND_Init+0x12e>
             (unsigned)pdev->ep_in[VND_IN_EP & 0x0FU].maxpacket,
             (unsigned)pdev->ep_in[CDC_IN_EP & 0x0FU].maxpacket);
  } else {
    VND_LOGF("[VND_INIT] SPEED=FS vnd_mps=%u cdc_in_mps=%u\r\n",
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801943a:	461a      	mov	r2, r3
 801943c:	4805      	ldr	r0, [pc, #20]	@ (8019454 <USBD_CDCVND_Init+0x140>)
 801943e:	f001 faaf 	bl	801a9a0 <iprintf>
             (unsigned)pdev->ep_in[VND_IN_EP & 0x0FU].maxpacket,
             (unsigned)pdev->ep_in[CDC_IN_EP & 0x0FU].maxpacket);
  }

  return (uint8_t)USBD_OK;
 8019442:	2300      	movs	r3, #0
}
 8019444:	4618      	mov	r0, r3
 8019446:	3710      	adds	r7, #16
 8019448:	46bd      	mov	sp, r7
 801944a:	bd80      	pop	{r7, pc}
 801944c:	24018ace 	.word	0x24018ace
 8019450:	0801dabc 	.word	0x0801dabc
 8019454:	0801daec 	.word	0x0801daec

08019458 <USBD_CDCVND_DeInit>:

static uint8_t USBD_CDCVND_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b082      	sub	sp, #8
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
 8019460:	460b      	mov	r3, r1
 8019462:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8019464:	2181      	movs	r1, #129	@ 0x81
 8019466:	6878      	ldr	r0, [r7, #4]
 8019468:	f001 f875 	bl	801a556 <USBD_LL_CloseEP>
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	2200      	movs	r2, #0
 8019470:	871a      	strh	r2, [r3, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP); pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8019472:	2101      	movs	r1, #1
 8019474:	6878      	ldr	r0, [r7, #4]
 8019476:	f001 f86e 	bl	801a556 <USBD_LL_CloseEP>
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	2200      	movs	r2, #0
 801947e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP); pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U; pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8019482:	2182      	movs	r1, #130	@ 0x82
 8019484:	6878      	ldr	r0, [r7, #4]
 8019486:	f001 f866 	bl	801a556 <USBD_LL_CloseEP>
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	2200      	movs	r2, #0
 801948e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	2200      	movs	r2, #0
 8019496:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  (void)USBD_LL_CloseEP(pdev, VND_IN_EP);  pdev->ep_in[VND_IN_EP & 0xFU].is_used = 0U;
 801949a:	2183      	movs	r1, #131	@ 0x83
 801949c:	6878      	ldr	r0, [r7, #4]
 801949e:	f001 f85a 	bl	801a556 <USBD_LL_CloseEP>
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	2200      	movs	r2, #0
 80194a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  (void)USBD_LL_CloseEP(pdev, VND_OUT_EP); pdev->ep_out[VND_OUT_EP & 0xFU].is_used = 0U;
 80194aa:	2103      	movs	r1, #3
 80194ac:	6878      	ldr	r0, [r7, #4]
 80194ae:	f001 f852 	bl	801a556 <USBD_LL_CloseEP>
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	2200      	movs	r2, #0
 80194b6:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
  if (pdev->pClassData) {
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d013      	beq.n	80194ec <USBD_CDCVND_DeInit+0x94>
    if (CDC_USR(pdev)) CDC_USR(pdev)->DeInit();
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d004      	beq.n	80194d8 <USBD_CDCVND_DeInit+0x80>
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80194d4:	685b      	ldr	r3, [r3, #4]
 80194d6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80194de:	4618      	mov	r0, r3
 80194e0:	f001 f964 	bl	801a7ac <USBD_static_free>
    pdev->pClassData = NULL;
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	2200      	movs	r2, #0
 80194e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }
  return (uint8_t)USBD_OK;
 80194ec:	2300      	movs	r3, #0
}
 80194ee:	4618      	mov	r0, r3
 80194f0:	3708      	adds	r7, #8
 80194f2:	46bd      	mov	sp, r7
 80194f4:	bd80      	pop	{r7, pc}
	...

080194f8 <USBD_CDCVND_Setup>:

static uint8_t USBD_CDCVND_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80194f8:	b580      	push	{r7, lr}
 80194fa:	b098      	sub	sp, #96	@ 0x60
 80194fc:	af02      	add	r7, sp, #8
 80194fe:	6078      	str	r0, [r7, #4]
 8019500:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8019508:	657b      	str	r3, [r7, #84]	@ 0x54
  if (!hcdc) return (uint8_t)USBD_FAIL;
 801950a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801950c:	2b00      	cmp	r3, #0
 801950e:	d101      	bne.n	8019514 <USBD_CDCVND_Setup+0x1c>
 8019510:	2303      	movs	r3, #3
 8019512:	e1b9      	b.n	8019888 <USBD_CDCVND_Setup+0x390>
  uint16_t status_info = 0; uint16_t len;
 8019514:	2300      	movs	r3, #0
 8019516:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  /* ДОБАВЛЕНО: ветка обработки vendor-specific control (GET_STATUS / SOFT/DEEP RESET) */
  if ( (req->bmRequest & USB_REQ_TYPE_MASK) == USB_REQ_TYPE_VENDOR ) {
 801951a:	683b      	ldr	r3, [r7, #0]
 801951c:	781b      	ldrb	r3, [r3, #0]
 801951e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8019522:	2b40      	cmp	r3, #64	@ 0x40
 8019524:	d16e      	bne.n	8019604 <USBD_CDCVND_Setup+0x10c>
    VND_LOGF("[SETUP:VND] bm=0x%02X bReq=0x%02X wIndex=%u wLength=%u", (unsigned)req->bmRequest, (unsigned)req->bRequest, (unsigned)req->wIndex, (unsigned)req->wLength);
 8019526:	683b      	ldr	r3, [r7, #0]
 8019528:	781b      	ldrb	r3, [r3, #0]
 801952a:	4619      	mov	r1, r3
 801952c:	683b      	ldr	r3, [r7, #0]
 801952e:	785b      	ldrb	r3, [r3, #1]
 8019530:	461a      	mov	r2, r3
 8019532:	683b      	ldr	r3, [r7, #0]
 8019534:	889b      	ldrh	r3, [r3, #4]
 8019536:	4618      	mov	r0, r3
 8019538:	683b      	ldr	r3, [r7, #0]
 801953a:	88db      	ldrh	r3, [r3, #6]
 801953c:	9300      	str	r3, [sp, #0]
 801953e:	4603      	mov	r3, r0
 8019540:	4898      	ldr	r0, [pc, #608]	@ (80197a4 <USBD_CDCVND_Setup+0x2ac>)
 8019542:	f001 fa2d 	bl	801a9a0 <iprintf>
    /* Принимаем IN GET_STATUS вне зависимости от получателя и номера интерфейса (wIndex),
       чтобы упростить жизнь хостам, где CTRL к Interface может быть ограничен. */
    if ( (req->bmRequest & 0x80U) && req->bRequest == VND_CMD_GET_STATUS ) {
 8019546:	683b      	ldr	r3, [r7, #0]
 8019548:	781b      	ldrb	r3, [r3, #0]
 801954a:	b25b      	sxtb	r3, r3
 801954c:	2b00      	cmp	r3, #0
 801954e:	da26      	bge.n	801959e <USBD_CDCVND_Setup+0xa6>
 8019550:	683b      	ldr	r3, [r7, #0]
 8019552:	785b      	ldrb	r3, [r3, #1]
 8019554:	2b30      	cmp	r3, #48	@ 0x30
 8019556:	d122      	bne.n	801959e <USBD_CDCVND_Setup+0xa6>
      uint8_t buf[64];
      uint16_t l = vnd_build_status(buf, sizeof(buf));
 8019558:	f107 0308 	add.w	r3, r7, #8
 801955c:	2140      	movs	r1, #64	@ 0x40
 801955e:	4618      	mov	r0, r3
 8019560:	f7fc f95a 	bl	8015818 <vnd_build_status>
 8019564:	4603      	mov	r3, r0
 8019566:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      if(!l){ USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 801956a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801956e:	2b00      	cmp	r3, #0
 8019570:	d105      	bne.n	801957e <USBD_CDCVND_Setup+0x86>
 8019572:	6839      	ldr	r1, [r7, #0]
 8019574:	6878      	ldr	r0, [r7, #4]
 8019576:	f7fb faf4 	bl	8014b62 <USBD_CtlError>
 801957a:	2303      	movs	r3, #3
 801957c:	e184      	b.n	8019888 <USBD_CDCVND_Setup+0x390>
      VND_LOGF("[SETUP:VND] -> STAT %uB", (unsigned)l);
 801957e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8019582:	4619      	mov	r1, r3
 8019584:	4888      	ldr	r0, [pc, #544]	@ (80197a8 <USBD_CDCVND_Setup+0x2b0>)
 8019586:	f001 fa0b 	bl	801a9a0 <iprintf>
      USBD_CtlSendData(pdev, buf, l);
 801958a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801958e:	f107 0308 	add.w	r3, r7, #8
 8019592:	4619      	mov	r1, r3
 8019594:	6878      	ldr	r0, [r7, #4]
 8019596:	f7fb fb61 	bl	8014c5c <USBD_CtlSendData>
      return (uint8_t)USBD_OK;
 801959a:	2300      	movs	r3, #0
 801959c:	e174      	b.n	8019888 <USBD_CDCVND_Setup+0x390>
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength == 0 && req->bRequest == 0x7Eu ) {
 801959e:	683b      	ldr	r3, [r7, #0]
 80195a0:	781b      	ldrb	r3, [r3, #0]
 80195a2:	b25b      	sxtb	r3, r3
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	db0f      	blt.n	80195c8 <USBD_CDCVND_Setup+0xd0>
 80195a8:	683b      	ldr	r3, [r7, #0]
 80195aa:	88db      	ldrh	r3, [r3, #6]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d10b      	bne.n	80195c8 <USBD_CDCVND_Setup+0xd0>
 80195b0:	683b      	ldr	r3, [r7, #0]
 80195b2:	785b      	ldrb	r3, [r3, #1]
 80195b4:	2b7e      	cmp	r3, #126	@ 0x7e
 80195b6:	d107      	bne.n	80195c8 <USBD_CDCVND_Setup+0xd0>
      /* SOFT_RESET: мгновенно подтверждаем статусом и выполняем ресет в фоне */
      g_req_soft_reset = 1; USBD_CtlSendStatus(pdev); return (uint8_t)USBD_OK;
 80195b8:	4b7c      	ldr	r3, [pc, #496]	@ (80197ac <USBD_CDCVND_Setup+0x2b4>)
 80195ba:	2201      	movs	r2, #1
 80195bc:	701a      	strb	r2, [r3, #0]
 80195be:	6878      	ldr	r0, [r7, #4]
 80195c0:	f7fb fba6 	bl	8014d10 <USBD_CtlSendStatus>
 80195c4:	2300      	movs	r3, #0
 80195c6:	e15f      	b.n	8019888 <USBD_CDCVND_Setup+0x390>
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength == 0 && req->bRequest == 0x7Fu ) {
 80195c8:	683b      	ldr	r3, [r7, #0]
 80195ca:	781b      	ldrb	r3, [r3, #0]
 80195cc:	b25b      	sxtb	r3, r3
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	db0f      	blt.n	80195f2 <USBD_CDCVND_Setup+0xfa>
 80195d2:	683b      	ldr	r3, [r7, #0]
 80195d4:	88db      	ldrh	r3, [r3, #6]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d10b      	bne.n	80195f2 <USBD_CDCVND_Setup+0xfa>
 80195da:	683b      	ldr	r3, [r7, #0]
 80195dc:	785b      	ldrb	r3, [r3, #1]
 80195de:	2b7f      	cmp	r3, #127	@ 0x7f
 80195e0:	d107      	bne.n	80195f2 <USBD_CDCVND_Setup+0xfa>
      /* DEEP_RESET: то же, но с переоткрытием EP */
      g_req_deep_reset = 1; USBD_CtlSendStatus(pdev); return (uint8_t)USBD_OK;
 80195e2:	4b73      	ldr	r3, [pc, #460]	@ (80197b0 <USBD_CDCVND_Setup+0x2b8>)
 80195e4:	2201      	movs	r2, #1
 80195e6:	701a      	strb	r2, [r3, #0]
 80195e8:	6878      	ldr	r0, [r7, #4]
 80195ea:	f7fb fb91 	bl	8014d10 <USBD_CtlSendStatus>
 80195ee:	2300      	movs	r3, #0
 80195f0:	e14a      	b.n	8019888 <USBD_CDCVND_Setup+0x390>
    } else {
      VND_LOGF("[SETUP:VND] unsupported -> STALL");
 80195f2:	4870      	ldr	r0, [pc, #448]	@ (80197b4 <USBD_CDCVND_Setup+0x2bc>)
 80195f4:	f001 f9d4 	bl	801a9a0 <iprintf>
      USBD_CtlError(pdev, req);
 80195f8:	6839      	ldr	r1, [r7, #0]
 80195fa:	6878      	ldr	r0, [r7, #4]
 80195fc:	f7fb fab1 	bl	8014b62 <USBD_CtlError>
      return (uint8_t)USBD_FAIL;
 8019600:	2303      	movs	r3, #3
 8019602:	e141      	b.n	8019888 <USBD_CDCVND_Setup+0x390>
    }
  }
  switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8019604:	683b      	ldr	r3, [r7, #0]
 8019606:	781b      	ldrb	r3, [r3, #0]
 8019608:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801960c:	2b00      	cmp	r3, #0
 801960e:	d04c      	beq.n	80196aa <USBD_CDCVND_Setup+0x1b2>
 8019610:	2b20      	cmp	r3, #32
 8019612:	f040 8131 	bne.w	8019878 <USBD_CDCVND_Setup+0x380>
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U) {
 8019616:	683b      	ldr	r3, [r7, #0]
 8019618:	88db      	ldrh	r3, [r3, #6]
 801961a:	2b00      	cmp	r3, #0
 801961c:	d035      	beq.n	801968a <USBD_CDCVND_Setup+0x192>
        if (req->bmRequest & 0x80U) {
 801961e:	683b      	ldr	r3, [r7, #0]
 8019620:	781b      	ldrb	r3, [r3, #0]
 8019622:	b25b      	sxtb	r3, r3
 8019624:	2b00      	cmp	r3, #0
 8019626:	da1d      	bge.n	8019664 <USBD_CDCVND_Setup+0x16c>
          if (CDC_USR(pdev)) CDC_USR(pdev)->Control(req->bRequest, (uint8_t*)hcdc->data, req->wLength); // cast
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801962e:	2b00      	cmp	r3, #0
 8019630:	d009      	beq.n	8019646 <USBD_CDCVND_Setup+0x14e>
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019638:	689b      	ldr	r3, [r3, #8]
 801963a:	683a      	ldr	r2, [r7, #0]
 801963c:	7850      	ldrb	r0, [r2, #1]
 801963e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019640:	683a      	ldr	r2, [r7, #0]
 8019642:	88d2      	ldrh	r2, [r2, #6]
 8019644:	4798      	blx	r3
          len = (uint16_t)MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8019646:	683b      	ldr	r3, [r7, #0]
 8019648:	88db      	ldrh	r3, [r3, #6]
 801964a:	2b07      	cmp	r3, #7
 801964c:	bf28      	it	cs
 801964e:	2307      	movcs	r3, #7
 8019650:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
          USBD_CtlSendData(pdev, (uint8_t*)hcdc->data, len); // cast
 8019654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019656:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 801965a:	4619      	mov	r1, r3
 801965c:	6878      	ldr	r0, [r7, #4]
 801965e:	f7fb fafd 	bl	8014c5c <USBD_CtlSendData>
          USBD_CtlPrepareRx(pdev, (uint8_t*)hcdc->data, req->wLength); // cast
        }
      } else {
        if (CDC_USR(pdev)) CDC_USR(pdev)->Control(req->bRequest, (uint8_t*)req, 0U);
      }
      break;
 8019662:	e10f      	b.n	8019884 <USBD_CDCVND_Setup+0x38c>
          hcdc->CmdOpCode = req->bRequest; hcdc->CmdLength = (uint8_t)req->wLength;
 8019664:	683b      	ldr	r3, [r7, #0]
 8019666:	785a      	ldrb	r2, [r3, #1]
 8019668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801966a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
 801966e:	683b      	ldr	r3, [r7, #0]
 8019670:	88db      	ldrh	r3, [r3, #6]
 8019672:	b2da      	uxtb	r2, r3
 8019674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019676:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t*)hcdc->data, req->wLength); // cast
 801967a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801967c:	683b      	ldr	r3, [r7, #0]
 801967e:	88db      	ldrh	r3, [r3, #6]
 8019680:	461a      	mov	r2, r3
 8019682:	6878      	ldr	r0, [r7, #4]
 8019684:	f7fb fb16 	bl	8014cb4 <USBD_CtlPrepareRx>
      break;
 8019688:	e0fc      	b.n	8019884 <USBD_CDCVND_Setup+0x38c>
        if (CDC_USR(pdev)) CDC_USR(pdev)->Control(req->bRequest, (uint8_t*)req, 0U);
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019690:	2b00      	cmp	r3, #0
 8019692:	f000 80f7 	beq.w	8019884 <USBD_CDCVND_Setup+0x38c>
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801969c:	689b      	ldr	r3, [r3, #8]
 801969e:	683a      	ldr	r2, [r7, #0]
 80196a0:	7850      	ldrb	r0, [r2, #1]
 80196a2:	2200      	movs	r2, #0
 80196a4:	6839      	ldr	r1, [r7, #0]
 80196a6:	4798      	blx	r3
      break;
 80196a8:	e0ec      	b.n	8019884 <USBD_CDCVND_Setup+0x38c>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest) {
 80196aa:	683b      	ldr	r3, [r7, #0]
 80196ac:	785b      	ldrb	r3, [r3, #1]
 80196ae:	2b0b      	cmp	r3, #11
 80196b0:	d03b      	beq.n	801972a <USBD_CDCVND_Setup+0x232>
 80196b2:	2b0b      	cmp	r3, #11
 80196b4:	f300 80d9 	bgt.w	801986a <USBD_CDCVND_Setup+0x372>
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d002      	beq.n	80196c2 <USBD_CDCVND_Setup+0x1ca>
 80196bc:	2b0a      	cmp	r3, #10
 80196be:	d014      	beq.n	80196ea <USBD_CDCVND_Setup+0x1f2>
 80196c0:	e0d3      	b.n	801986a <USBD_CDCVND_Setup+0x372>
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED) USBD_CtlSendData(pdev, (uint8_t*)&status_info, 2U); else { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80196c8:	b2db      	uxtb	r3, r3
 80196ca:	2b03      	cmp	r3, #3
 80196cc:	d107      	bne.n	80196de <USBD_CDCVND_Setup+0x1e6>
 80196ce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80196d2:	2202      	movs	r2, #2
 80196d4:	4619      	mov	r1, r3
 80196d6:	6878      	ldr	r0, [r7, #4]
 80196d8:	f7fb fac0 	bl	8014c5c <USBD_CtlSendData>
          break;
 80196dc:	e0cb      	b.n	8019876 <USBD_CDCVND_Setup+0x37e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED) USBD_CtlSendData(pdev, (uint8_t*)&status_info, 2U); else { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 80196de:	6839      	ldr	r1, [r7, #0]
 80196e0:	6878      	ldr	r0, [r7, #4]
 80196e2:	f7fb fa3e 	bl	8014b62 <USBD_CtlError>
 80196e6:	2303      	movs	r3, #3
 80196e8:	e0ce      	b.n	8019888 <USBD_CDCVND_Setup+0x390>
        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80196f0:	b2db      	uxtb	r3, r3
 80196f2:	2b03      	cmp	r3, #3
 80196f4:	d113      	bne.n	801971e <USBD_CDCVND_Setup+0x226>
            uint8_t cur = 0;
 80196f6:	2300      	movs	r3, #0
 80196f8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            if (req->wIndex == 2) cur = (uint8_t)g_alt_if2; /* наш Vendor IF */
 80196fc:	683b      	ldr	r3, [r7, #0]
 80196fe:	889b      	ldrh	r3, [r3, #4]
 8019700:	2b02      	cmp	r3, #2
 8019702:	d104      	bne.n	801970e <USBD_CDCVND_Setup+0x216>
 8019704:	4b2c      	ldr	r3, [pc, #176]	@ (80197b8 <USBD_CDCVND_Setup+0x2c0>)
 8019706:	781b      	ldrb	r3, [r3, #0]
 8019708:	b2db      	uxtb	r3, r3
 801970a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            /* CDC интерфейсы IF0/IF1 всегда alt0 */
            USBD_CtlSendData(pdev, &cur, 1U);
 801970e:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 8019712:	2201      	movs	r2, #1
 8019714:	4619      	mov	r1, r3
 8019716:	6878      	ldr	r0, [r7, #4]
 8019718:	f7fb faa0 	bl	8014c5c <USBD_CtlSendData>
          } else { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
          break;
 801971c:	e0ab      	b.n	8019876 <USBD_CDCVND_Setup+0x37e>
          } else { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 801971e:	6839      	ldr	r1, [r7, #0]
 8019720:	6878      	ldr	r0, [r7, #4]
 8019722:	f7fb fa1e 	bl	8014b62 <USBD_CtlError>
 8019726:	2303      	movs	r3, #3
 8019728:	e0ae      	b.n	8019888 <USBD_CDCVND_Setup+0x390>
        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED) { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019730:	b2db      	uxtb	r3, r3
 8019732:	2b03      	cmp	r3, #3
 8019734:	d005      	beq.n	8019742 <USBD_CDCVND_Setup+0x24a>
 8019736:	6839      	ldr	r1, [r7, #0]
 8019738:	6878      	ldr	r0, [r7, #4]
 801973a:	f7fb fa12 	bl	8014b62 <USBD_CtlError>
 801973e:	2303      	movs	r3, #3
 8019740:	e0a2      	b.n	8019888 <USBD_CDCVND_Setup+0x390>
          /* Поддержка altsetting для IF#2: 0 -> idle (закрыть EP), 1 -> stream (открыть EP) */
          if (req->wIndex == 2) {
 8019742:	683b      	ldr	r3, [r7, #0]
 8019744:	889b      	ldrh	r3, [r3, #4]
 8019746:	2b02      	cmp	r3, #2
 8019748:	f040 808a 	bne.w	8019860 <USBD_CDCVND_Setup+0x368>
            uint16_t alt = req->wValue;
 801974c:	683b      	ldr	r3, [r7, #0]
 801974e:	885b      	ldrh	r3, [r3, #2]
 8019750:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
            if (alt == 0) {
 8019754:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8019758:	2b00      	cmp	r3, #0
 801975a:	d119      	bne.n	8019790 <USBD_CDCVND_Setup+0x298>
              /* Остановить пайплайн приложения и закрыть EP */
              printf("[USB_IF2] SET_INTERFACE alt=0 (CLOSE)\r\n");
 801975c:	4817      	ldr	r0, [pc, #92]	@ (80197bc <USBD_CDCVND_Setup+0x2c4>)
 801975e:	f001 f987 	bl	801aa70 <puts>
              vnd_pipeline_stop_reset(0);
 8019762:	2000      	movs	r0, #0
 8019764:	f7fb fe2e 	bl	80153c4 <vnd_pipeline_stop_reset>
              (void)USBD_LL_CloseEP(pdev, VND_IN_EP);  pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 0U;
 8019768:	2183      	movs	r1, #131	@ 0x83
 801976a:	6878      	ldr	r0, [r7, #4]
 801976c:	f000 fef3 	bl	801a556 <USBD_LL_CloseEP>
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	2200      	movs	r2, #0
 8019774:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
              (void)USBD_LL_CloseEP(pdev, VND_OUT_EP); pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 0U;
 8019778:	2103      	movs	r1, #3
 801977a:	6878      	ldr	r0, [r7, #4]
 801977c:	f000 feeb 	bl	801a556 <USBD_LL_CloseEP>
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	2200      	movs	r2, #0
 8019784:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
              g_alt_if2 = 0;
 8019788:	4b0b      	ldr	r3, [pc, #44]	@ (80197b8 <USBD_CDCVND_Setup+0x2c0>)
 801978a:	2200      	movs	r2, #0
 801978c:	701a      	strb	r2, [r3, #0]
 801978e:	e060      	b.n	8019852 <USBD_CDCVND_Setup+0x35a>
            } else if (alt == 1) {
 8019790:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8019794:	2b01      	cmp	r3, #1
 8019796:	d15c      	bne.n	8019852 <USBD_CDCVND_Setup+0x35a>
              /* Открыть EP и реармить приём */
              printf("[USB_IF2] SET_INTERFACE alt=1 (OPEN) speed=%s\r\n", 
                     pdev->dev_speed == USBD_SPEED_HIGH ? "HS" : "FS");
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	7c1b      	ldrb	r3, [r3, #16]
              printf("[USB_IF2] SET_INTERFACE alt=1 (OPEN) speed=%s\r\n", 
 801979c:	2b00      	cmp	r3, #0
 801979e:	d111      	bne.n	80197c4 <USBD_CDCVND_Setup+0x2cc>
 80197a0:	4b07      	ldr	r3, [pc, #28]	@ (80197c0 <USBD_CDCVND_Setup+0x2c8>)
 80197a2:	e010      	b.n	80197c6 <USBD_CDCVND_Setup+0x2ce>
 80197a4:	0801db1c 	.word	0x0801db1c
 80197a8:	0801db54 	.word	0x0801db54
 80197ac:	24018acc 	.word	0x24018acc
 80197b0:	24018acd 	.word	0x24018acd
 80197b4:	0801db6c 	.word	0x0801db6c
 80197b8:	24018ace 	.word	0x24018ace
 80197bc:	0801db90 	.word	0x0801db90
 80197c0:	0801dbb8 	.word	0x0801dbb8
 80197c4:	4b32      	ldr	r3, [pc, #200]	@ (8019890 <USBD_CDCVND_Setup+0x398>)
 80197c6:	4619      	mov	r1, r3
 80197c8:	4832      	ldr	r0, [pc, #200]	@ (8019894 <USBD_CDCVND_Setup+0x39c>)
 80197ca:	f001 f8e9 	bl	801a9a0 <iprintf>
              if (pdev->dev_speed == USBD_SPEED_HIGH) {
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	7c1b      	ldrb	r3, [r3, #16]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d11d      	bne.n	8019812 <USBD_CDCVND_Setup+0x31a>
                (void)USBD_LL_OpenEP(pdev, VND_IN_EP,  USBD_EP_TYPE_BULK, VND_DATA_HS_MAX_PACKET_SIZE);
 80197d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80197da:	2202      	movs	r2, #2
 80197dc:	2183      	movs	r1, #131	@ 0x83
 80197de:	6878      	ldr	r0, [r7, #4]
 80197e0:	f000 fe93 	bl	801a50a <USBD_LL_OpenEP>
                pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 1U;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	2201      	movs	r2, #1
 80197e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                (void)USBD_LL_OpenEP(pdev, VND_OUT_EP, USBD_EP_TYPE_BULK, VND_DATA_HS_MAX_PACKET_SIZE);
 80197ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80197f0:	2202      	movs	r2, #2
 80197f2:	2103      	movs	r1, #3
 80197f4:	6878      	ldr	r0, [r7, #4]
 80197f6:	f000 fe88 	bl	801a50a <USBD_LL_OpenEP>
                pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 1U;
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	2201      	movs	r2, #1
 80197fe:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
                (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_HS_MAX_PACKET_SIZE);
 8019802:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019806:	4a24      	ldr	r2, [pc, #144]	@ (8019898 <USBD_CDCVND_Setup+0x3a0>)
 8019808:	2103      	movs	r1, #3
 801980a:	6878      	ldr	r0, [r7, #4]
 801980c:	f000 ff8b 	bl	801a726 <USBD_LL_PrepareReceive>
 8019810:	e019      	b.n	8019846 <USBD_CDCVND_Setup+0x34e>
              } else {
                (void)USBD_LL_OpenEP(pdev, VND_IN_EP,  USBD_EP_TYPE_BULK, VND_DATA_FS_MAX_PACKET_SIZE);
 8019812:	2340      	movs	r3, #64	@ 0x40
 8019814:	2202      	movs	r2, #2
 8019816:	2183      	movs	r1, #131	@ 0x83
 8019818:	6878      	ldr	r0, [r7, #4]
 801981a:	f000 fe76 	bl	801a50a <USBD_LL_OpenEP>
                pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 1U;
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	2201      	movs	r2, #1
 8019822:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                (void)USBD_LL_OpenEP(pdev, VND_OUT_EP, USBD_EP_TYPE_BULK, VND_DATA_FS_MAX_PACKET_SIZE);
 8019826:	2340      	movs	r3, #64	@ 0x40
 8019828:	2202      	movs	r2, #2
 801982a:	2103      	movs	r1, #3
 801982c:	6878      	ldr	r0, [r7, #4]
 801982e:	f000 fe6c 	bl	801a50a <USBD_LL_OpenEP>
                pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 1U;
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	2201      	movs	r2, #1
 8019836:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
                (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_FS_MAX_PACKET_SIZE);
 801983a:	2340      	movs	r3, #64	@ 0x40
 801983c:	4a16      	ldr	r2, [pc, #88]	@ (8019898 <USBD_CDCVND_Setup+0x3a0>)
 801983e:	2103      	movs	r1, #3
 8019840:	6878      	ldr	r0, [r7, #4]
 8019842:	f000 ff70 	bl	801a726 <USBD_LL_PrepareReceive>
              }
              g_alt_if2 = 1;
 8019846:	4b15      	ldr	r3, [pc, #84]	@ (801989c <USBD_CDCVND_Setup+0x3a4>)
 8019848:	2201      	movs	r2, #1
 801984a:	701a      	strb	r2, [r3, #0]
              printf("[USB_IF2] EP#3 and EP#83 opened, receiving enabled\r\n");
 801984c:	4814      	ldr	r0, [pc, #80]	@ (80198a0 <USBD_CDCVND_Setup+0x3a8>)
 801984e:	f001 f90f 	bl	801aa70 <puts>
            }
            USBD_CtlSendStatus(pdev);
 8019852:	6878      	ldr	r0, [r7, #4]
 8019854:	f7fb fa5c 	bl	8014d10 <USBD_CtlSendStatus>
            /* Выполним возможные отложенные сервисы */
            USBD_VND_ProcessControlRequests();
 8019858:	f7ff fc04 	bl	8019064 <USBD_VND_ProcessControlRequests>
            return (uint8_t)USBD_OK;
 801985c:	2300      	movs	r3, #0
 801985e:	e013      	b.n	8019888 <USBD_CDCVND_Setup+0x390>
          }
          /* Иные интерфейсы (CDC IF0/IF1) — поддерживают только alt=0. Подтверждаем статусом без действий. */
          USBD_CtlSendStatus(pdev);
 8019860:	6878      	ldr	r0, [r7, #4]
 8019862:	f7fb fa55 	bl	8014d10 <USBD_CtlSendStatus>
          return (uint8_t)USBD_OK;
 8019866:	2300      	movs	r3, #0
 8019868:	e00e      	b.n	8019888 <USBD_CDCVND_Setup+0x390>
        default: USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL;
 801986a:	6839      	ldr	r1, [r7, #0]
 801986c:	6878      	ldr	r0, [r7, #4]
 801986e:	f7fb f978 	bl	8014b62 <USBD_CtlError>
 8019872:	2303      	movs	r3, #3
 8019874:	e008      	b.n	8019888 <USBD_CDCVND_Setup+0x390>
      }
      break;
 8019876:	e006      	b.n	8019886 <USBD_CDCVND_Setup+0x38e>
    default: USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL;
 8019878:	6839      	ldr	r1, [r7, #0]
 801987a:	6878      	ldr	r0, [r7, #4]
 801987c:	f7fb f971 	bl	8014b62 <USBD_CtlError>
 8019880:	2303      	movs	r3, #3
 8019882:	e001      	b.n	8019888 <USBD_CDCVND_Setup+0x390>
      break;
 8019884:	bf00      	nop
  }
  return (uint8_t)USBD_OK;
 8019886:	2300      	movs	r3, #0
}
 8019888:	4618      	mov	r0, r3
 801988a:	3758      	adds	r7, #88	@ 0x58
 801988c:	46bd      	mov	sp, r7
 801988e:	bd80      	pop	{r7, pc}
 8019890:	0801dbbc 	.word	0x0801dbbc
 8019894:	0801dbc0 	.word	0x0801dbc0
 8019898:	24018ad0 	.word	0x24018ad0
 801989c:	24018ace 	.word	0x24018ace
 80198a0:	0801dbf0 	.word	0x0801dbf0

080198a4 <USBD_CDCVND_DataIn>:

static uint8_t USBD_CDCVND_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80198a4:	b590      	push	{r4, r7, lr}
 80198a6:	b089      	sub	sp, #36	@ 0x24
 80198a8:	af02      	add	r7, sp, #8
 80198aa:	6078      	str	r0, [r7, #4]
 80198ac:	460b      	mov	r3, r1
 80198ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80198b6:	617b      	str	r3, [r7, #20]
  if (!hcdc) return (uint8_t)USBD_FAIL;
 80198b8:	697b      	ldr	r3, [r7, #20]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d101      	bne.n	80198c2 <USBD_CDCVND_DataIn+0x1e>
 80198be:	2303      	movs	r3, #3
 80198c0:	e0be      	b.n	8019a40 <USBD_CDCVND_DataIn+0x19c>
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80198c8:	613b      	str	r3, [r7, #16]
  if ((CDC_IN_EP & 0x7FU) == epnum) {
 80198ca:	78fb      	ldrb	r3, [r7, #3]
 80198cc:	2b01      	cmp	r3, #1
 80198ce:	d150      	bne.n	8019972 <USBD_CDCVND_DataIn+0xce>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U)) {
 80198d0:	78fa      	ldrb	r2, [r7, #3]
 80198d2:	6879      	ldr	r1, [r7, #4]
 80198d4:	4613      	mov	r3, r2
 80198d6:	009b      	lsls	r3, r3, #2
 80198d8:	4413      	add	r3, r2
 80198da:	009b      	lsls	r3, r3, #2
 80198dc:	440b      	add	r3, r1
 80198de:	3318      	adds	r3, #24
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d029      	beq.n	801993a <USBD_CDCVND_DataIn+0x96>
 80198e6:	78fa      	ldrb	r2, [r7, #3]
 80198e8:	6879      	ldr	r1, [r7, #4]
 80198ea:	4613      	mov	r3, r2
 80198ec:	009b      	lsls	r3, r3, #2
 80198ee:	4413      	add	r3, r2
 80198f0:	009b      	lsls	r3, r3, #2
 80198f2:	440b      	add	r3, r1
 80198f4:	3318      	adds	r3, #24
 80198f6:	681a      	ldr	r2, [r3, #0]
 80198f8:	78f9      	ldrb	r1, [r7, #3]
 80198fa:	6938      	ldr	r0, [r7, #16]
 80198fc:	460b      	mov	r3, r1
 80198fe:	00db      	lsls	r3, r3, #3
 8019900:	440b      	add	r3, r1
 8019902:	009b      	lsls	r3, r3, #2
 8019904:	4403      	add	r3, r0
 8019906:	331c      	adds	r3, #28
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	fbb2 f1f3 	udiv	r1, r2, r3
 801990e:	fb01 f303 	mul.w	r3, r1, r3
 8019912:	1ad3      	subs	r3, r2, r3
 8019914:	2b00      	cmp	r3, #0
 8019916:	d110      	bne.n	801993a <USBD_CDCVND_DataIn+0x96>
      pdev->ep_in[epnum].total_length = 0U;
 8019918:	78fa      	ldrb	r2, [r7, #3]
 801991a:	6879      	ldr	r1, [r7, #4]
 801991c:	4613      	mov	r3, r2
 801991e:	009b      	lsls	r3, r3, #2
 8019920:	4413      	add	r3, r2
 8019922:	009b      	lsls	r3, r3, #2
 8019924:	440b      	add	r3, r1
 8019926:	3318      	adds	r3, #24
 8019928:	2200      	movs	r2, #0
 801992a:	601a      	str	r2, [r3, #0]
      (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U); /* ZLP */
 801992c:	78f9      	ldrb	r1, [r7, #3]
 801992e:	2300      	movs	r3, #0
 8019930:	2200      	movs	r2, #0
 8019932:	6878      	ldr	r0, [r7, #4]
 8019934:	f000 fed6 	bl	801a6e4 <USBD_LL_Transmit>
 8019938:	e081      	b.n	8019a3e <USBD_CDCVND_DataIn+0x19a>
    } else {
      hcdc->TxState = 0U;
 801993a:	697b      	ldr	r3, [r7, #20]
 801993c:	2200      	movs	r2, #0
 801993e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
      if (CDC_USR(pdev) && CDC_USR(pdev)->TransmitCplt) CDC_USR(pdev)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019948:	2b00      	cmp	r3, #0
 801994a:	d078      	beq.n	8019a3e <USBD_CDCVND_DataIn+0x19a>
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019952:	691b      	ldr	r3, [r3, #16]
 8019954:	2b00      	cmp	r3, #0
 8019956:	d072      	beq.n	8019a3e <USBD_CDCVND_DataIn+0x19a>
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801995e:	691b      	ldr	r3, [r3, #16]
 8019960:	697a      	ldr	r2, [r7, #20]
 8019962:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8019966:	697a      	ldr	r2, [r7, #20]
 8019968:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 801996c:	78fa      	ldrb	r2, [r7, #3]
 801996e:	4798      	blx	r3
 8019970:	e065      	b.n	8019a3e <USBD_CDCVND_DataIn+0x19a>
    }
  } else if ((VND_IN_EP & 0x7FU) == epnum) {
 8019972:	78fb      	ldrb	r3, [r7, #3]
 8019974:	2b03      	cmp	r3, #3
 8019976:	d162      	bne.n	8019a3e <USBD_CDCVND_DataIn+0x19a>
    /* Vendor Bulk IN: CDC-подобная схема завершения.
       Если длина передачи кратна размеру пакета (MPS), требуется отправить ZLP,
       иначе некоторые хосты (Windows/libusb FS) будут ждать продолжения и в итоге
       получать таймаут. Поведение аналогично CDC. */
    uint16_t tl = pdev->ep_in[epnum].total_length;
 8019978:	78fa      	ldrb	r2, [r7, #3]
 801997a:	6879      	ldr	r1, [r7, #4]
 801997c:	4613      	mov	r3, r2
 801997e:	009b      	lsls	r3, r3, #2
 8019980:	4413      	add	r3, r2
 8019982:	009b      	lsls	r3, r3, #2
 8019984:	440b      	add	r3, r1
 8019986:	3318      	adds	r3, #24
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	81fb      	strh	r3, [r7, #14]
    uint16_t mps = hpcd->IN_ep[epnum].maxpacket;
 801998c:	78fa      	ldrb	r2, [r7, #3]
 801998e:	6939      	ldr	r1, [r7, #16]
 8019990:	4613      	mov	r3, r2
 8019992:	00db      	lsls	r3, r3, #3
 8019994:	4413      	add	r3, r2
 8019996:	009b      	lsls	r3, r3, #2
 8019998:	440b      	add	r3, r1
 801999a:	331c      	adds	r3, #28
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	81bb      	strh	r3, [r7, #12]
    static uint32_t vnd_dataIn_counter = 0; vnd_dataIn_counter++;
 80199a0:	4b29      	ldr	r3, [pc, #164]	@ (8019a48 <USBD_CDCVND_DataIn+0x1a4>)
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	3301      	adds	r3, #1
 80199a6:	4a28      	ldr	r2, [pc, #160]	@ (8019a48 <USBD_CDCVND_DataIn+0x1a4>)
 80199a8:	6013      	str	r3, [r2, #0]
    VND_LOGF("[VND_DataIn:ENTER] ep=%u tl=%u mps=%u busy=%u cnt=%lu\r\n", (unsigned)epnum, (unsigned)tl,(unsigned)mps,(unsigned)vnd_tx_busy,(unsigned long)vnd_dataIn_counter);
 80199aa:	78f9      	ldrb	r1, [r7, #3]
 80199ac:	89fa      	ldrh	r2, [r7, #14]
 80199ae:	89b8      	ldrh	r0, [r7, #12]
 80199b0:	4b26      	ldr	r3, [pc, #152]	@ (8019a4c <USBD_CDCVND_DataIn+0x1a8>)
 80199b2:	781b      	ldrb	r3, [r3, #0]
 80199b4:	b2db      	uxtb	r3, r3
 80199b6:	461c      	mov	r4, r3
 80199b8:	4b23      	ldr	r3, [pc, #140]	@ (8019a48 <USBD_CDCVND_DataIn+0x1a4>)
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	9301      	str	r3, [sp, #4]
 80199be:	9400      	str	r4, [sp, #0]
 80199c0:	4603      	mov	r3, r0
 80199c2:	4823      	ldr	r0, [pc, #140]	@ (8019a50 <USBD_CDCVND_DataIn+0x1ac>)
 80199c4:	f000 ffec 	bl	801a9a0 <iprintf>
    if ((tl > 0U) && ((tl % mps) == 0U)) {
 80199c8:	89fb      	ldrh	r3, [r7, #14]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d021      	beq.n	8019a12 <USBD_CDCVND_DataIn+0x16e>
 80199ce:	89fb      	ldrh	r3, [r7, #14]
 80199d0:	89ba      	ldrh	r2, [r7, #12]
 80199d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80199d6:	fb01 f202 	mul.w	r2, r1, r2
 80199da:	1a9b      	subs	r3, r3, r2
 80199dc:	b29b      	uxth	r3, r3
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d117      	bne.n	8019a12 <USBD_CDCVND_DataIn+0x16e>
      /* Нужен ZLP для корректного завершения трансфера */
      VND_LOGF("[VND_DataIn] ep=%u total=%u -> SEND ZLP (phase1) cnt=%lu\r\n", (unsigned)epnum, (unsigned)tl, (unsigned long)vnd_dataIn_counter);
 80199e2:	78f9      	ldrb	r1, [r7, #3]
 80199e4:	89fa      	ldrh	r2, [r7, #14]
 80199e6:	4b18      	ldr	r3, [pc, #96]	@ (8019a48 <USBD_CDCVND_DataIn+0x1a4>)
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	481a      	ldr	r0, [pc, #104]	@ (8019a54 <USBD_CDCVND_DataIn+0x1b0>)
 80199ec:	f000 ffd8 	bl	801a9a0 <iprintf>
      pdev->ep_in[epnum].total_length = 0U;
 80199f0:	78fa      	ldrb	r2, [r7, #3]
 80199f2:	6879      	ldr	r1, [r7, #4]
 80199f4:	4613      	mov	r3, r2
 80199f6:	009b      	lsls	r3, r3, #2
 80199f8:	4413      	add	r3, r2
 80199fa:	009b      	lsls	r3, r3, #2
 80199fc:	440b      	add	r3, r1
 80199fe:	3318      	adds	r3, #24
 8019a00:	2200      	movs	r2, #0
 8019a02:	601a      	str	r2, [r3, #0]
      (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U); /* ZLP */
 8019a04:	78f9      	ldrb	r1, [r7, #3]
 8019a06:	2300      	movs	r3, #0
 8019a08:	2200      	movs	r2, #0
 8019a0a:	6878      	ldr	r0, [r7, #4]
 8019a0c:	f000 fe6a 	bl	801a6e4 <USBD_LL_Transmit>
 8019a10:	e015      	b.n	8019a3e <USBD_CDCVND_DataIn+0x19a>
    } else {
      /* Обычное завершение */
      VND_LOGF("[VND_DataIn] ep=%u total=%u -> COMPLETE (TxCplt) cnt=%lu\r\n", (unsigned)epnum, (unsigned)tl, (unsigned long)vnd_dataIn_counter);
 8019a12:	78f9      	ldrb	r1, [r7, #3]
 8019a14:	89fa      	ldrh	r2, [r7, #14]
 8019a16:	4b0c      	ldr	r3, [pc, #48]	@ (8019a48 <USBD_CDCVND_DataIn+0x1a4>)
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	480f      	ldr	r0, [pc, #60]	@ (8019a58 <USBD_CDCVND_DataIn+0x1b4>)
 8019a1c:	f000 ffc0 	bl	801a9a0 <iprintf>
      pdev->ep_in[epnum].total_length = 0U; /* очистить остаток для надёжности */
 8019a20:	78fa      	ldrb	r2, [r7, #3]
 8019a22:	6879      	ldr	r1, [r7, #4]
 8019a24:	4613      	mov	r3, r2
 8019a26:	009b      	lsls	r3, r3, #2
 8019a28:	4413      	add	r3, r2
 8019a2a:	009b      	lsls	r3, r3, #2
 8019a2c:	440b      	add	r3, r1
 8019a2e:	3318      	adds	r3, #24
 8019a30:	2200      	movs	r2, #0
 8019a32:	601a      	str	r2, [r3, #0]
      vnd_tx_busy = 0U;
 8019a34:	4b05      	ldr	r3, [pc, #20]	@ (8019a4c <USBD_CDCVND_DataIn+0x1a8>)
 8019a36:	2200      	movs	r2, #0
 8019a38:	701a      	strb	r2, [r3, #0]
      USBD_VND_TxCplt();
 8019a3a:	f7fd ff95 	bl	8017968 <USBD_VND_TxCplt>
    }
  }
  return (uint8_t)USBD_OK;
 8019a3e:	2300      	movs	r3, #0
}
 8019a40:	4618      	mov	r0, r3
 8019a42:	371c      	adds	r7, #28
 8019a44:	46bd      	mov	sp, r7
 8019a46:	bd90      	pop	{r4, r7, pc}
 8019a48:	240194f8 	.word	0x240194f8
 8019a4c:	240194f4 	.word	0x240194f4
 8019a50:	0801dc24 	.word	0x0801dc24
 8019a54:	0801dc5c 	.word	0x0801dc5c
 8019a58:	0801dc98 	.word	0x0801dc98

08019a5c <USBD_CDCVND_DataOut>:

static uint8_t USBD_CDCVND_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019a5c:	b580      	push	{r7, lr}
 8019a5e:	b084      	sub	sp, #16
 8019a60:	af00      	add	r7, sp, #0
 8019a62:	6078      	str	r0, [r7, #4]
 8019a64:	460b      	mov	r3, r1
 8019a66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8019a6e:	60fb      	str	r3, [r7, #12]
  if (!hcdc) return (uint8_t)USBD_FAIL;
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d101      	bne.n	8019a7a <USBD_CDCVND_DataOut+0x1e>
 8019a76:	2303      	movs	r3, #3
 8019a78:	e054      	b.n	8019b24 <USBD_CDCVND_DataOut+0xc8>
  if (epnum == (CDC_OUT_EP & 0x7FU)) {
 8019a7a:	78fb      	ldrb	r3, [r7, #3]
 8019a7c:	2b01      	cmp	r3, #1
 8019a7e:	d120      	bne.n	8019ac2 <USBD_CDCVND_DataOut+0x66>
    hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8019a80:	78fb      	ldrb	r3, [r7, #3]
 8019a82:	4619      	mov	r1, r3
 8019a84:	6878      	ldr	r0, [r7, #4]
 8019a86:	f000 fe6f 	bl	801a768 <USBD_LL_GetRxDataSize>
 8019a8a:	4602      	mov	r2, r0
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
    if (CDC_USR(pdev) && CDC_USR(pdev)->Receive) CDC_USR(pdev)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d042      	beq.n	8019b22 <USBD_CDCVND_DataOut+0xc6>
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019aa2:	68db      	ldr	r3, [r3, #12]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d03c      	beq.n	8019b22 <USBD_CDCVND_DataOut+0xc6>
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019aae:	68db      	ldr	r3, [r3, #12]
 8019ab0:	68fa      	ldr	r2, [r7, #12]
 8019ab2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8019ab6:	68fa      	ldr	r2, [r7, #12]
 8019ab8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8019abc:	4611      	mov	r1, r2
 8019abe:	4798      	blx	r3
 8019ac0:	e02f      	b.n	8019b22 <USBD_CDCVND_DataOut+0xc6>
  } else if (epnum == (VND_OUT_EP & 0x7FU)) {
 8019ac2:	78fb      	ldrb	r3, [r7, #3]
 8019ac4:	2b03      	cmp	r3, #3
 8019ac6:	d12c      	bne.n	8019b22 <USBD_CDCVND_DataOut+0xc6>
    vnd_rx_len = USBD_LL_GetRxDataSize(pdev, epnum);
 8019ac8:	78fb      	ldrb	r3, [r7, #3]
 8019aca:	4619      	mov	r1, r3
 8019acc:	6878      	ldr	r0, [r7, #4]
 8019ace:	f000 fe4b 	bl	801a768 <USBD_LL_GetRxDataSize>
 8019ad2:	4603      	mov	r3, r0
 8019ad4:	4a15      	ldr	r2, [pc, #84]	@ (8019b2c <USBD_CDCVND_DataOut+0xd0>)
 8019ad6:	6013      	str	r3, [r2, #0]
    /* Мини-лог: подтверждаем приём однобайтовой команды */
    if (vnd_rx_len > 0) {
 8019ad8:	4b14      	ldr	r3, [pc, #80]	@ (8019b2c <USBD_CDCVND_DataOut+0xd0>)
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d008      	beq.n	8019af2 <USBD_CDCVND_DataOut+0x96>
      printf("[CMD] 0x%02X len=%lu\r\n", (unsigned)vnd_rx_buf[0], (unsigned long)vnd_rx_len);
 8019ae0:	4b13      	ldr	r3, [pc, #76]	@ (8019b30 <USBD_CDCVND_DataOut+0xd4>)
 8019ae2:	781b      	ldrb	r3, [r3, #0]
 8019ae4:	4619      	mov	r1, r3
 8019ae6:	4b11      	ldr	r3, [pc, #68]	@ (8019b2c <USBD_CDCVND_DataOut+0xd0>)
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	461a      	mov	r2, r3
 8019aec:	4811      	ldr	r0, [pc, #68]	@ (8019b34 <USBD_CDCVND_DataOut+0xd8>)
 8019aee:	f000 ff57 	bl	801a9a0 <iprintf>
    }
    USBD_VND_DataReceived(vnd_rx_buf, vnd_rx_len);
 8019af2:	4b0e      	ldr	r3, [pc, #56]	@ (8019b2c <USBD_CDCVND_DataOut+0xd0>)
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	4619      	mov	r1, r3
 8019af8:	480d      	ldr	r0, [pc, #52]	@ (8019b30 <USBD_CDCVND_DataOut+0xd4>)
 8019afa:	f7fe fc35 	bl	8018368 <USBD_VND_DataReceived>
    /* Реармим */
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	7c1b      	ldrb	r3, [r3, #16]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d107      	bne.n	8019b16 <USBD_CDCVND_DataOut+0xba>
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_HS_MAX_PACKET_SIZE);
 8019b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019b0a:	4a09      	ldr	r2, [pc, #36]	@ (8019b30 <USBD_CDCVND_DataOut+0xd4>)
 8019b0c:	2103      	movs	r1, #3
 8019b0e:	6878      	ldr	r0, [r7, #4]
 8019b10:	f000 fe09 	bl	801a726 <USBD_LL_PrepareReceive>
 8019b14:	e005      	b.n	8019b22 <USBD_CDCVND_DataOut+0xc6>
    else
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_FS_MAX_PACKET_SIZE);
 8019b16:	2340      	movs	r3, #64	@ 0x40
 8019b18:	4a05      	ldr	r2, [pc, #20]	@ (8019b30 <USBD_CDCVND_DataOut+0xd4>)
 8019b1a:	2103      	movs	r1, #3
 8019b1c:	6878      	ldr	r0, [r7, #4]
 8019b1e:	f000 fe02 	bl	801a726 <USBD_LL_PrepareReceive>
  }
  return (uint8_t)USBD_OK;
 8019b22:	2300      	movs	r3, #0
}
 8019b24:	4618      	mov	r0, r3
 8019b26:	3710      	adds	r7, #16
 8019b28:	46bd      	mov	sp, r7
 8019b2a:	bd80      	pop	{r7, pc}
 8019b2c:	240194f0 	.word	0x240194f0
 8019b30:	24018ad0 	.word	0x24018ad0
 8019b34:	0801dcd4 	.word	0x0801dcd4

08019b38 <USBD_CDCVND_EP0_RxReady>:

static uint8_t USBD_CDCVND_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8019b38:	b580      	push	{r7, lr}
 8019b3a:	b084      	sub	sp, #16
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8019b46:	60fb      	str	r3, [r7, #12]
  if (!hcdc) return (uint8_t)USBD_FAIL;
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d101      	bne.n	8019b52 <USBD_CDCVND_EP0_RxReady+0x1a>
 8019b4e:	2303      	movs	r3, #3
 8019b50:	e01a      	b.n	8019b88 <USBD_CDCVND_EP0_RxReady+0x50>
  if (CDC_USR(pdev) && (hcdc->CmdOpCode != 0xFFU)) {
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d014      	beq.n	8019b86 <USBD_CDCVND_EP0_RxReady+0x4e>
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8019b62:	2bff      	cmp	r3, #255	@ 0xff
 8019b64:	d00f      	beq.n	8019b86 <USBD_CDCVND_EP0_RxReady+0x4e>
    CDC_USR(pdev)->Control(hcdc->CmdOpCode, (uint8_t*)hcdc->data, hcdc->CmdLength); // cast
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019b6c:	689b      	ldr	r3, [r3, #8]
 8019b6e:	68fa      	ldr	r2, [r7, #12]
 8019b70:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
 8019b74:	68f9      	ldr	r1, [r7, #12]
 8019b76:	68fa      	ldr	r2, [r7, #12]
 8019b78:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
 8019b7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	22ff      	movs	r2, #255	@ 0xff
 8019b82:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }
  return (uint8_t)USBD_OK;
 8019b86:	2300      	movs	r3, #0
}
 8019b88:	4618      	mov	r0, r3
 8019b8a:	3710      	adds	r7, #16
 8019b8c:	46bd      	mov	sp, r7
 8019b8e:	bd80      	pop	{r7, pc}

08019b90 <USBD_CDCVND_GetFSCfgDesc>:

static uint8_t *USBD_CDCVND_GetFSCfgDesc(uint16_t *length) { *length = sizeof(USBD_CDCVND_CfgFSDesc); return USBD_CDCVND_CfgFSDesc; }
 8019b90:	b480      	push	{r7}
 8019b92:	b083      	sub	sp, #12
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	226b      	movs	r2, #107	@ 0x6b
 8019b9c:	801a      	strh	r2, [r3, #0]
 8019b9e:	4b03      	ldr	r3, [pc, #12]	@ (8019bac <USBD_CDCVND_GetFSCfgDesc+0x1c>)
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	370c      	adds	r7, #12
 8019ba4:	46bd      	mov	sp, r7
 8019ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019baa:	4770      	bx	lr
 8019bac:	240000d0 	.word	0x240000d0

08019bb0 <USBD_CDCVND_GetHSCfgDesc>:
static uint8_t *USBD_CDCVND_GetHSCfgDesc(uint16_t *length) { *length = sizeof(USBD_CDCVND_CfgHSDesc); return USBD_CDCVND_CfgHSDesc; }
 8019bb0:	b480      	push	{r7}
 8019bb2:	b083      	sub	sp, #12
 8019bb4:	af00      	add	r7, sp, #0
 8019bb6:	6078      	str	r0, [r7, #4]
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	226b      	movs	r2, #107	@ 0x6b
 8019bbc:	801a      	strh	r2, [r3, #0]
 8019bbe:	4b03      	ldr	r3, [pc, #12]	@ (8019bcc <USBD_CDCVND_GetHSCfgDesc+0x1c>)
 8019bc0:	4618      	mov	r0, r3
 8019bc2:	370c      	adds	r7, #12
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bca:	4770      	bx	lr
 8019bcc:	24000064 	.word	0x24000064

08019bd0 <USBD_CDCVND_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_CDCVND_GetOtherSpeedCfgDesc(uint16_t *length) { *length = sizeof(USBD_CDCVND_OtherSpeedCfgDesc); return USBD_CDCVND_OtherSpeedCfgDesc; }
 8019bd0:	b480      	push	{r7}
 8019bd2:	b083      	sub	sp, #12
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	6078      	str	r0, [r7, #4]
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	226b      	movs	r2, #107	@ 0x6b
 8019bdc:	801a      	strh	r2, [r3, #0]
 8019bde:	4b03      	ldr	r3, [pc, #12]	@ (8019bec <USBD_CDCVND_GetOtherSpeedCfgDesc+0x1c>)
 8019be0:	4618      	mov	r0, r3
 8019be2:	370c      	adds	r7, #12
 8019be4:	46bd      	mov	sp, r7
 8019be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bea:	4770      	bx	lr
 8019bec:	2400013c 	.word	0x2400013c

08019bf0 <USBD_CDCVND_GetDeviceQualifierDescriptor>:
static uint8_t *USBD_CDCVND_GetDeviceQualifierDescriptor(uint16_t *length) { *length = USB_LEN_DEV_QUALIFIER_DESC; return USBD_CDCVND_DeviceQualifierDesc; }
 8019bf0:	b480      	push	{r7}
 8019bf2:	b083      	sub	sp, #12
 8019bf4:	af00      	add	r7, sp, #0
 8019bf6:	6078      	str	r0, [r7, #4]
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	220a      	movs	r2, #10
 8019bfc:	801a      	strh	r2, [r3, #0]
 8019bfe:	4b03      	ldr	r3, [pc, #12]	@ (8019c0c <USBD_CDCVND_GetDeviceQualifierDescriptor+0x1c>)
 8019c00:	4618      	mov	r0, r3
 8019c02:	370c      	adds	r7, #12
 8019c04:	46bd      	mov	sp, r7
 8019c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c0a:	4770      	bx	lr
 8019c0c:	24000058 	.word	0x24000058

08019c10 <__NVIC_SystemReset>:
{
 8019c10:	b480      	push	{r7}
 8019c12:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8019c14:	f3bf 8f4f 	dsb	sy
}
 8019c18:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8019c1a:	4b06      	ldr	r3, [pc, #24]	@ (8019c34 <__NVIC_SystemReset+0x24>)
 8019c1c:	68db      	ldr	r3, [r3, #12]
 8019c1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8019c22:	4904      	ldr	r1, [pc, #16]	@ (8019c34 <__NVIC_SystemReset+0x24>)
 8019c24:	4b04      	ldr	r3, [pc, #16]	@ (8019c38 <__NVIC_SystemReset+0x28>)
 8019c26:	4313      	orrs	r3, r2
 8019c28:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8019c2a:	f3bf 8f4f 	dsb	sy
}
 8019c2e:	bf00      	nop
    __NOP();
 8019c30:	bf00      	nop
 8019c32:	e7fd      	b.n	8019c30 <__NVIC_SystemReset+0x20>
 8019c34:	e000ed00 	.word	0xe000ed00
 8019c38:	05fa0004 	.word	0x05fa0004

08019c3c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8019c3c:	b580      	push	{r7, lr}
 8019c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8019c40:	2200      	movs	r2, #0
 8019c42:	4906      	ldr	r1, [pc, #24]	@ (8019c5c <CDC_Init_HS+0x20>)
 8019c44:	4806      	ldr	r0, [pc, #24]	@ (8019c60 <CDC_Init_HS+0x24>)
 8019c46:	f7f9 fcfc 	bl	8013642 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8019c4a:	4906      	ldr	r1, [pc, #24]	@ (8019c64 <CDC_Init_HS+0x28>)
 8019c4c:	4804      	ldr	r0, [pc, #16]	@ (8019c60 <CDC_Init_HS+0x24>)
 8019c4e:	f7f9 fd1a 	bl	8013686 <USBD_CDC_SetRxBuffer>
  usb_stream_init(); // инициализация протокол/стрим
 8019c52:	f7ea f96f 	bl	8003f34 <usb_stream_init>
  return (USBD_OK);
 8019c56:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8019c58:	4618      	mov	r0, r3
 8019c5a:	bd80      	pop	{r7, pc}
 8019c5c:	24019cfc 	.word	0x24019cfc
 8019c60:	2400c2fc 	.word	0x2400c2fc
 8019c64:	240194fc 	.word	0x240194fc

08019c68 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8019c68:	b480      	push	{r7}
 8019c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8019c6c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8019c6e:	4618      	mov	r0, r3
 8019c70:	46bd      	mov	sp, r7
 8019c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c76:	4770      	bx	lr

08019c78 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019c78:	b480      	push	{r7}
 8019c7a:	b083      	sub	sp, #12
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	4603      	mov	r3, r0
 8019c80:	6039      	str	r1, [r7, #0]
 8019c82:	71fb      	strb	r3, [r7, #7]
 8019c84:	4613      	mov	r3, r2
 8019c86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8019c88:	79fb      	ldrb	r3, [r7, #7]
 8019c8a:	2b23      	cmp	r3, #35	@ 0x23
 8019c8c:	d84a      	bhi.n	8019d24 <CDC_Control_HS+0xac>
 8019c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8019c94 <CDC_Control_HS+0x1c>)
 8019c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c94:	08019d25 	.word	0x08019d25
 8019c98:	08019d25 	.word	0x08019d25
 8019c9c:	08019d25 	.word	0x08019d25
 8019ca0:	08019d25 	.word	0x08019d25
 8019ca4:	08019d25 	.word	0x08019d25
 8019ca8:	08019d25 	.word	0x08019d25
 8019cac:	08019d25 	.word	0x08019d25
 8019cb0:	08019d25 	.word	0x08019d25
 8019cb4:	08019d25 	.word	0x08019d25
 8019cb8:	08019d25 	.word	0x08019d25
 8019cbc:	08019d25 	.word	0x08019d25
 8019cc0:	08019d25 	.word	0x08019d25
 8019cc4:	08019d25 	.word	0x08019d25
 8019cc8:	08019d25 	.word	0x08019d25
 8019ccc:	08019d25 	.word	0x08019d25
 8019cd0:	08019d25 	.word	0x08019d25
 8019cd4:	08019d25 	.word	0x08019d25
 8019cd8:	08019d25 	.word	0x08019d25
 8019cdc:	08019d25 	.word	0x08019d25
 8019ce0:	08019d25 	.word	0x08019d25
 8019ce4:	08019d25 	.word	0x08019d25
 8019ce8:	08019d25 	.word	0x08019d25
 8019cec:	08019d25 	.word	0x08019d25
 8019cf0:	08019d25 	.word	0x08019d25
 8019cf4:	08019d25 	.word	0x08019d25
 8019cf8:	08019d25 	.word	0x08019d25
 8019cfc:	08019d25 	.word	0x08019d25
 8019d00:	08019d25 	.word	0x08019d25
 8019d04:	08019d25 	.word	0x08019d25
 8019d08:	08019d25 	.word	0x08019d25
 8019d0c:	08019d25 	.word	0x08019d25
 8019d10:	08019d25 	.word	0x08019d25
 8019d14:	08019d25 	.word	0x08019d25
 8019d18:	08019d25 	.word	0x08019d25
 8019d1c:	08019d25 	.word	0x08019d25
 8019d20:	08019d25 	.word	0x08019d25
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019d24:	bf00      	nop
  }

  return (USBD_OK);
 8019d26:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8019d28:	4618      	mov	r0, r3
 8019d2a:	370c      	adds	r7, #12
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d32:	4770      	bx	lr

08019d34 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8019d34:	b580      	push	{r7, lr}
 8019d36:	b084      	sub	sp, #16
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	6078      	str	r0, [r7, #4]
 8019d3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  // Проверка текстовой команды RESET
  if (*Len >= 5 && Buf[0] == 'R' && Buf[1] == 'E' && Buf[2] == 'S' && Buf[3] == 'E' && Buf[4] == 'T') {
 8019d3e:	683b      	ldr	r3, [r7, #0]
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	2b04      	cmp	r3, #4
 8019d44:	d91f      	bls.n	8019d86 <CDC_Receive_HS+0x52>
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	781b      	ldrb	r3, [r3, #0]
 8019d4a:	2b52      	cmp	r3, #82	@ 0x52
 8019d4c:	d11b      	bne.n	8019d86 <CDC_Receive_HS+0x52>
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	3301      	adds	r3, #1
 8019d52:	781b      	ldrb	r3, [r3, #0]
 8019d54:	2b45      	cmp	r3, #69	@ 0x45
 8019d56:	d116      	bne.n	8019d86 <CDC_Receive_HS+0x52>
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	3302      	adds	r3, #2
 8019d5c:	781b      	ldrb	r3, [r3, #0]
 8019d5e:	2b53      	cmp	r3, #83	@ 0x53
 8019d60:	d111      	bne.n	8019d86 <CDC_Receive_HS+0x52>
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	3303      	adds	r3, #3
 8019d66:	781b      	ldrb	r3, [r3, #0]
 8019d68:	2b45      	cmp	r3, #69	@ 0x45
 8019d6a:	d10c      	bne.n	8019d86 <CDC_Receive_HS+0x52>
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	3304      	adds	r3, #4
 8019d70:	781b      	ldrb	r3, [r3, #0]
 8019d72:	2b54      	cmp	r3, #84	@ 0x54
 8019d74:	d107      	bne.n	8019d86 <CDC_Receive_HS+0x52>
    printf("[CDC] RESET command received - performing software reset\r\n");
 8019d76:	4822      	ldr	r0, [pc, #136]	@ (8019e00 <CDC_Receive_HS+0xcc>)
 8019d78:	f000 fe7a 	bl	801aa70 <puts>
    HAL_Delay(100); // Дать время на отправку сообщения
 8019d7c:	2064      	movs	r0, #100	@ 0x64
 8019d7e:	f7ea fcf7 	bl	8004770 <HAL_Delay>
    NVIC_SystemReset(); // Программный сброс
 8019d82:	f7ff ff45 	bl	8019c10 <__NVIC_SystemReset>
  }
  
  // Проксируем команды протокола в Vendor и отключаем CDC-протокол для этих команд,
  // чтобы не запускалась параллельная передача кадров по CDC.
  uint8_t vendor_forwarded = 0;
 8019d86:	2300      	movs	r3, #0
 8019d88:	73fb      	strb	r3, [r7, #15]
  if (*Len >= 1) {
 8019d8a:	683b      	ldr	r3, [r7, #0]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d021      	beq.n	8019dd6 <CDC_Receive_HS+0xa2>
    uint8_t cmd = Buf[0];
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	781b      	ldrb	r3, [r3, #0]
 8019d96:	73bb      	strb	r3, [r7, #14]
    switch (cmd) {
 8019d98:	7bbb      	ldrb	r3, [r7, #14]
 8019d9a:	3b13      	subs	r3, #19
 8019d9c:	2b1d      	cmp	r3, #29
 8019d9e:	bf8c      	ite	hi
 8019da0:	2201      	movhi	r2, #1
 8019da2:	2200      	movls	r2, #0
 8019da4:	b2d2      	uxtb	r2, r2
 8019da6:	2a00      	cmp	r2, #0
 8019da8:	d114      	bne.n	8019dd4 <CDC_Receive_HS+0xa0>
 8019daa:	4a16      	ldr	r2, [pc, #88]	@ (8019e04 <CDC_Receive_HS+0xd0>)
 8019dac:	fa22 f303 	lsr.w	r3, r2, r3
 8019db0:	f003 0301 	and.w	r3, r3, #1
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	bf14      	ite	ne
 8019db8:	2301      	movne	r3, #1
 8019dba:	2300      	moveq	r3, #0
 8019dbc:	b2db      	uxtb	r3, r3
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d008      	beq.n	8019dd4 <CDC_Receive_HS+0xa0>
      case 0x14u: // VND_CMD_SET_PROFILE
      case 0x15u: // VND_CMD_SET_ROI_US
      case 0x20u: // VND_CMD_START_STREAM
      case 0x21u: // VND_CMD_STOP_STREAM
      case 0x30u: // VND_CMD_GET_STATUS
        USBD_VND_DataReceived(Buf, *Len);
 8019dc2:	683b      	ldr	r3, [r7, #0]
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	4619      	mov	r1, r3
 8019dc8:	6878      	ldr	r0, [r7, #4]
 8019dca:	f7fe facd 	bl	8018368 <USBD_VND_DataReceived>
        vendor_forwarded = 1;
 8019dce:	2301      	movs	r3, #1
 8019dd0:	73fb      	strb	r3, [r7, #15]
        break;
 8019dd2:	e000      	b.n	8019dd6 <CDC_Receive_HS+0xa2>
      default:
        break;
 8019dd4:	bf00      	nop
    }
  }
  // В CDC-протокол НЕ передаём пакеты, которые были распознаны как Vendor команды
  if (!vendor_forwarded) {
 8019dd6:	7bfb      	ldrb	r3, [r7, #15]
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d105      	bne.n	8019de8 <CDC_Receive_HS+0xb4>
    usb_stream_on_rx_bytes(Buf, *Len);
 8019ddc:	683b      	ldr	r3, [r7, #0]
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	4619      	mov	r1, r3
 8019de2:	6878      	ldr	r0, [r7, #4]
 8019de4:	f7e9 ff4e 	bl	8003c84 <usb_stream_on_rx_bytes>
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8019de8:	6879      	ldr	r1, [r7, #4]
 8019dea:	4807      	ldr	r0, [pc, #28]	@ (8019e08 <CDC_Receive_HS+0xd4>)
 8019dec:	f7f9 fc4b 	bl	8013686 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8019df0:	4805      	ldr	r0, [pc, #20]	@ (8019e08 <CDC_Receive_HS+0xd4>)
 8019df2:	f7f9 fca5 	bl	8013740 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019df6:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8019df8:	4618      	mov	r0, r3
 8019dfa:	3710      	adds	r7, #16
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	bd80      	pop	{r7, pc}
 8019e00:	0801dcec 	.word	0x0801dcec
 8019e04:	20006007 	.word	0x20006007
 8019e08:	2400c2fc 	.word	0x2400c2fc

08019e0c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b084      	sub	sp, #16
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
 8019e14:	460b      	mov	r3, r1
 8019e16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8019e18:	2300      	movs	r3, #0
 8019e1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8019e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8019e54 <CDC_Transmit_HS+0x48>)
 8019e1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8019e22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8019e24:	68bb      	ldr	r3, [r7, #8]
 8019e26:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d001      	beq.n	8019e32 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8019e2e:	2301      	movs	r3, #1
 8019e30:	e00b      	b.n	8019e4a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8019e32:	887b      	ldrh	r3, [r7, #2]
 8019e34:	461a      	mov	r2, r3
 8019e36:	6879      	ldr	r1, [r7, #4]
 8019e38:	4806      	ldr	r0, [pc, #24]	@ (8019e54 <CDC_Transmit_HS+0x48>)
 8019e3a:	f7f9 fc02 	bl	8013642 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8019e3e:	4805      	ldr	r0, [pc, #20]	@ (8019e54 <CDC_Transmit_HS+0x48>)
 8019e40:	f7f9 fc3e 	bl	80136c0 <USBD_CDC_TransmitPacket>
 8019e44:	4603      	mov	r3, r0
 8019e46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8019e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	3710      	adds	r7, #16
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	bd80      	pop	{r7, pc}
 8019e52:	bf00      	nop
 8019e54:	2400c2fc 	.word	0x2400c2fc

08019e58 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019e58:	b480      	push	{r7}
 8019e5a:	b087      	sub	sp, #28
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	60f8      	str	r0, [r7, #12]
 8019e60:	60b9      	str	r1, [r7, #8]
 8019e62:	4613      	mov	r3, r2
 8019e64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019e66:	2300      	movs	r3, #0
 8019e68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8019e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019e6e:	4618      	mov	r0, r3
 8019e70:	371c      	adds	r7, #28
 8019e72:	46bd      	mov	sp, r7
 8019e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e78:	4770      	bx	lr
	...

08019e7c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019e7c:	b480      	push	{r7}
 8019e7e:	b083      	sub	sp, #12
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	4603      	mov	r3, r0
 8019e84:	6039      	str	r1, [r7, #0]
 8019e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8019e88:	683b      	ldr	r3, [r7, #0]
 8019e8a:	2212      	movs	r2, #18
 8019e8c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8019e8e:	4b03      	ldr	r3, [pc, #12]	@ (8019e9c <USBD_HS_DeviceDescriptor+0x20>)
}
 8019e90:	4618      	mov	r0, r3
 8019e92:	370c      	adds	r7, #12
 8019e94:	46bd      	mov	sp, r7
 8019e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e9a:	4770      	bx	lr
 8019e9c:	24000214 	.word	0x24000214

08019ea0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019ea0:	b480      	push	{r7}
 8019ea2:	b083      	sub	sp, #12
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	4603      	mov	r3, r0
 8019ea8:	6039      	str	r1, [r7, #0]
 8019eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019eac:	683b      	ldr	r3, [r7, #0]
 8019eae:	2204      	movs	r2, #4
 8019eb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019eb2:	4b03      	ldr	r3, [pc, #12]	@ (8019ec0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	370c      	adds	r7, #12
 8019eb8:	46bd      	mov	sp, r7
 8019eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ebe:	4770      	bx	lr
 8019ec0:	24000228 	.word	0x24000228

08019ec4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019ec4:	b580      	push	{r7, lr}
 8019ec6:	b082      	sub	sp, #8
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	4603      	mov	r3, r0
 8019ecc:	6039      	str	r1, [r7, #0]
 8019ece:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019ed0:	79fb      	ldrb	r3, [r7, #7]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d105      	bne.n	8019ee2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8019ed6:	683a      	ldr	r2, [r7, #0]
 8019ed8:	4907      	ldr	r1, [pc, #28]	@ (8019ef8 <USBD_HS_ProductStrDescriptor+0x34>)
 8019eda:	4808      	ldr	r0, [pc, #32]	@ (8019efc <USBD_HS_ProductStrDescriptor+0x38>)
 8019edc:	f7fa fe52 	bl	8014b84 <USBD_GetString>
 8019ee0:	e004      	b.n	8019eec <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8019ee2:	683a      	ldr	r2, [r7, #0]
 8019ee4:	4904      	ldr	r1, [pc, #16]	@ (8019ef8 <USBD_HS_ProductStrDescriptor+0x34>)
 8019ee6:	4805      	ldr	r0, [pc, #20]	@ (8019efc <USBD_HS_ProductStrDescriptor+0x38>)
 8019ee8:	f7fa fe4c 	bl	8014b84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019eec:	4b02      	ldr	r3, [pc, #8]	@ (8019ef8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8019eee:	4618      	mov	r0, r3
 8019ef0:	3708      	adds	r7, #8
 8019ef2:	46bd      	mov	sp, r7
 8019ef4:	bd80      	pop	{r7, pc}
 8019ef6:	bf00      	nop
 8019ef8:	2401a4fc 	.word	0x2401a4fc
 8019efc:	0801dd28 	.word	0x0801dd28

08019f00 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019f00:	b580      	push	{r7, lr}
 8019f02:	b082      	sub	sp, #8
 8019f04:	af00      	add	r7, sp, #0
 8019f06:	4603      	mov	r3, r0
 8019f08:	6039      	str	r1, [r7, #0]
 8019f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019f0c:	683a      	ldr	r2, [r7, #0]
 8019f0e:	4904      	ldr	r1, [pc, #16]	@ (8019f20 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8019f10:	4804      	ldr	r0, [pc, #16]	@ (8019f24 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8019f12:	f7fa fe37 	bl	8014b84 <USBD_GetString>
  return USBD_StrDesc;
 8019f16:	4b02      	ldr	r3, [pc, #8]	@ (8019f20 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8019f18:	4618      	mov	r0, r3
 8019f1a:	3708      	adds	r7, #8
 8019f1c:	46bd      	mov	sp, r7
 8019f1e:	bd80      	pop	{r7, pc}
 8019f20:	2401a4fc 	.word	0x2401a4fc
 8019f24:	0801dd34 	.word	0x0801dd34

08019f28 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019f28:	b580      	push	{r7, lr}
 8019f2a:	b082      	sub	sp, #8
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	4603      	mov	r3, r0
 8019f30:	6039      	str	r1, [r7, #0]
 8019f32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019f34:	683b      	ldr	r3, [r7, #0]
 8019f36:	221a      	movs	r2, #26
 8019f38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019f3a:	f000 f843 	bl	8019fc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8019f3e:	4b02      	ldr	r3, [pc, #8]	@ (8019f48 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8019f40:	4618      	mov	r0, r3
 8019f42:	3708      	adds	r7, #8
 8019f44:	46bd      	mov	sp, r7
 8019f46:	bd80      	pop	{r7, pc}
 8019f48:	2400022c 	.word	0x2400022c

08019f4c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019f4c:	b580      	push	{r7, lr}
 8019f4e:	b082      	sub	sp, #8
 8019f50:	af00      	add	r7, sp, #0
 8019f52:	4603      	mov	r3, r0
 8019f54:	6039      	str	r1, [r7, #0]
 8019f56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019f58:	79fb      	ldrb	r3, [r7, #7]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d105      	bne.n	8019f6a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8019f5e:	683a      	ldr	r2, [r7, #0]
 8019f60:	4907      	ldr	r1, [pc, #28]	@ (8019f80 <USBD_HS_ConfigStrDescriptor+0x34>)
 8019f62:	4808      	ldr	r0, [pc, #32]	@ (8019f84 <USBD_HS_ConfigStrDescriptor+0x38>)
 8019f64:	f7fa fe0e 	bl	8014b84 <USBD_GetString>
 8019f68:	e004      	b.n	8019f74 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8019f6a:	683a      	ldr	r2, [r7, #0]
 8019f6c:	4904      	ldr	r1, [pc, #16]	@ (8019f80 <USBD_HS_ConfigStrDescriptor+0x34>)
 8019f6e:	4805      	ldr	r0, [pc, #20]	@ (8019f84 <USBD_HS_ConfigStrDescriptor+0x38>)
 8019f70:	f7fa fe08 	bl	8014b84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019f74:	4b02      	ldr	r3, [pc, #8]	@ (8019f80 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8019f76:	4618      	mov	r0, r3
 8019f78:	3708      	adds	r7, #8
 8019f7a:	46bd      	mov	sp, r7
 8019f7c:	bd80      	pop	{r7, pc}
 8019f7e:	bf00      	nop
 8019f80:	2401a4fc 	.word	0x2401a4fc
 8019f84:	0801dd40 	.word	0x0801dd40

08019f88 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b082      	sub	sp, #8
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	4603      	mov	r3, r0
 8019f90:	6039      	str	r1, [r7, #0]
 8019f92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019f94:	79fb      	ldrb	r3, [r7, #7]
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d105      	bne.n	8019fa6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8019f9a:	683a      	ldr	r2, [r7, #0]
 8019f9c:	4907      	ldr	r1, [pc, #28]	@ (8019fbc <USBD_HS_InterfaceStrDescriptor+0x34>)
 8019f9e:	4808      	ldr	r0, [pc, #32]	@ (8019fc0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8019fa0:	f7fa fdf0 	bl	8014b84 <USBD_GetString>
 8019fa4:	e004      	b.n	8019fb0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8019fa6:	683a      	ldr	r2, [r7, #0]
 8019fa8:	4904      	ldr	r1, [pc, #16]	@ (8019fbc <USBD_HS_InterfaceStrDescriptor+0x34>)
 8019faa:	4805      	ldr	r0, [pc, #20]	@ (8019fc0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8019fac:	f7fa fdea 	bl	8014b84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019fb0:	4b02      	ldr	r3, [pc, #8]	@ (8019fbc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8019fb2:	4618      	mov	r0, r3
 8019fb4:	3708      	adds	r7, #8
 8019fb6:	46bd      	mov	sp, r7
 8019fb8:	bd80      	pop	{r7, pc}
 8019fba:	bf00      	nop
 8019fbc:	2401a4fc 	.word	0x2401a4fc
 8019fc0:	0801dd54 	.word	0x0801dd54

08019fc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b084      	sub	sp, #16
 8019fc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019fca:	4b0f      	ldr	r3, [pc, #60]	@ (801a008 <Get_SerialNum+0x44>)
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019fd0:	4b0e      	ldr	r3, [pc, #56]	@ (801a00c <Get_SerialNum+0x48>)
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019fd6:	4b0e      	ldr	r3, [pc, #56]	@ (801a010 <Get_SerialNum+0x4c>)
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019fdc:	68fa      	ldr	r2, [r7, #12]
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	4413      	add	r3, r2
 8019fe2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d009      	beq.n	8019ffe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019fea:	2208      	movs	r2, #8
 8019fec:	4909      	ldr	r1, [pc, #36]	@ (801a014 <Get_SerialNum+0x50>)
 8019fee:	68f8      	ldr	r0, [r7, #12]
 8019ff0:	f000 f814 	bl	801a01c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019ff4:	2204      	movs	r2, #4
 8019ff6:	4908      	ldr	r1, [pc, #32]	@ (801a018 <Get_SerialNum+0x54>)
 8019ff8:	68b8      	ldr	r0, [r7, #8]
 8019ffa:	f000 f80f 	bl	801a01c <IntToUnicode>
  }
}
 8019ffe:	bf00      	nop
 801a000:	3710      	adds	r7, #16
 801a002:	46bd      	mov	sp, r7
 801a004:	bd80      	pop	{r7, pc}
 801a006:	bf00      	nop
 801a008:	1ff1e800 	.word	0x1ff1e800
 801a00c:	1ff1e804 	.word	0x1ff1e804
 801a010:	1ff1e808 	.word	0x1ff1e808
 801a014:	2400022e 	.word	0x2400022e
 801a018:	2400023e 	.word	0x2400023e

0801a01c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a01c:	b480      	push	{r7}
 801a01e:	b087      	sub	sp, #28
 801a020:	af00      	add	r7, sp, #0
 801a022:	60f8      	str	r0, [r7, #12]
 801a024:	60b9      	str	r1, [r7, #8]
 801a026:	4613      	mov	r3, r2
 801a028:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a02a:	2300      	movs	r3, #0
 801a02c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a02e:	2300      	movs	r3, #0
 801a030:	75fb      	strb	r3, [r7, #23]
 801a032:	e027      	b.n	801a084 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a034:	68fb      	ldr	r3, [r7, #12]
 801a036:	0f1b      	lsrs	r3, r3, #28
 801a038:	2b09      	cmp	r3, #9
 801a03a:	d80b      	bhi.n	801a054 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	0f1b      	lsrs	r3, r3, #28
 801a040:	b2da      	uxtb	r2, r3
 801a042:	7dfb      	ldrb	r3, [r7, #23]
 801a044:	005b      	lsls	r3, r3, #1
 801a046:	4619      	mov	r1, r3
 801a048:	68bb      	ldr	r3, [r7, #8]
 801a04a:	440b      	add	r3, r1
 801a04c:	3230      	adds	r2, #48	@ 0x30
 801a04e:	b2d2      	uxtb	r2, r2
 801a050:	701a      	strb	r2, [r3, #0]
 801a052:	e00a      	b.n	801a06a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a054:	68fb      	ldr	r3, [r7, #12]
 801a056:	0f1b      	lsrs	r3, r3, #28
 801a058:	b2da      	uxtb	r2, r3
 801a05a:	7dfb      	ldrb	r3, [r7, #23]
 801a05c:	005b      	lsls	r3, r3, #1
 801a05e:	4619      	mov	r1, r3
 801a060:	68bb      	ldr	r3, [r7, #8]
 801a062:	440b      	add	r3, r1
 801a064:	3237      	adds	r2, #55	@ 0x37
 801a066:	b2d2      	uxtb	r2, r2
 801a068:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a06a:	68fb      	ldr	r3, [r7, #12]
 801a06c:	011b      	lsls	r3, r3, #4
 801a06e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a070:	7dfb      	ldrb	r3, [r7, #23]
 801a072:	005b      	lsls	r3, r3, #1
 801a074:	3301      	adds	r3, #1
 801a076:	68ba      	ldr	r2, [r7, #8]
 801a078:	4413      	add	r3, r2
 801a07a:	2200      	movs	r2, #0
 801a07c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a07e:	7dfb      	ldrb	r3, [r7, #23]
 801a080:	3301      	adds	r3, #1
 801a082:	75fb      	strb	r3, [r7, #23]
 801a084:	7dfa      	ldrb	r2, [r7, #23]
 801a086:	79fb      	ldrb	r3, [r7, #7]
 801a088:	429a      	cmp	r2, r3
 801a08a:	d3d3      	bcc.n	801a034 <IntToUnicode+0x18>
  }
}
 801a08c:	bf00      	nop
 801a08e:	bf00      	nop
 801a090:	371c      	adds	r7, #28
 801a092:	46bd      	mov	sp, r7
 801a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a098:	4770      	bx	lr

0801a09a <USBD_Desc_GetVID>:
/* USER CODE BEGIN 1 */
/* Simple accessors for boot-time diagnostics */
uint16_t USBD_Desc_GetVID(void) { return (uint16_t)USBD_VID; }
 801a09a:	b480      	push	{r7}
 801a09c:	af00      	add	r7, sp, #0
 801a09e:	f64c 23fe 	movw	r3, #51966	@ 0xcafe
 801a0a2:	4618      	mov	r0, r3
 801a0a4:	46bd      	mov	sp, r7
 801a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0aa:	4770      	bx	lr

0801a0ac <USBD_Desc_GetPID>:
uint16_t USBD_Desc_GetPID(void) { return (uint16_t)USBD_PID_HS; }
 801a0ac:	b480      	push	{r7}
 801a0ae:	af00      	add	r7, sp, #0
 801a0b0:	f244 0301 	movw	r3, #16385	@ 0x4001
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0bc:	4770      	bx	lr

0801a0be <USBD_Desc_GetLangID>:
uint16_t USBD_Desc_GetLangID(void) { return (uint16_t)USBD_LANGID_STRING; }
 801a0be:	b480      	push	{r7}
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	f240 4309 	movw	r3, #1033	@ 0x409
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ce:	4770      	bx	lr

0801a0d0 <USBD_Desc_GetManufacturer>:
const char* USBD_Desc_GetManufacturer(void) { return USBD_MANUFACTURER_STRING; }
 801a0d0:	b480      	push	{r7}
 801a0d2:	af00      	add	r7, sp, #0
 801a0d4:	4b02      	ldr	r3, [pc, #8]	@ (801a0e0 <USBD_Desc_GetManufacturer+0x10>)
 801a0d6:	4618      	mov	r0, r3
 801a0d8:	46bd      	mov	sp, r7
 801a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0de:	4770      	bx	lr
 801a0e0:	0801dd34 	.word	0x0801dd34

0801a0e4 <USBD_Desc_GetProduct>:
const char* USBD_Desc_GetProduct(void) { return USBD_PRODUCT_STRING_HS; }
 801a0e4:	b480      	push	{r7}
 801a0e6:	af00      	add	r7, sp, #0
 801a0e8:	4b02      	ldr	r3, [pc, #8]	@ (801a0f4 <USBD_Desc_GetProduct+0x10>)
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	46bd      	mov	sp, r7
 801a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0f2:	4770      	bx	lr
 801a0f4:	0801dd28 	.word	0x0801dd28

0801a0f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	b0b8      	sub	sp, #224	@ 0xe0
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a100:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801a104:	22b8      	movs	r2, #184	@ 0xb8
 801a106:	2100      	movs	r1, #0
 801a108:	4618      	mov	r0, r3
 801a10a:	f000 feb5 	bl	801ae78 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	4a2e      	ldr	r2, [pc, #184]	@ (801a1cc <HAL_PCD_MspInit+0xd4>)
 801a114:	4293      	cmp	r3, r2
 801a116:	d154      	bne.n	801a1c2 <HAL_PCD_MspInit+0xca>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */
  /* Настройка GPIO DM/DP (PA11/PA12) для встроенного FS PHY */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a118:	4b2d      	ldr	r3, [pc, #180]	@ (801a1d0 <HAL_PCD_MspInit+0xd8>)
 801a11a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a11e:	4a2c      	ldr	r2, [pc, #176]	@ (801a1d0 <HAL_PCD_MspInit+0xd8>)
 801a120:	f043 0301 	orr.w	r3, r3, #1
 801a124:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801a128:	4b29      	ldr	r3, [pc, #164]	@ (801a1d0 <HAL_PCD_MspInit+0xd8>)
 801a12a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a12e:	f003 0301 	and.w	r3, r3, #1
 801a132:	613b      	str	r3, [r7, #16]
 801a134:	693b      	ldr	r3, [r7, #16]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a136:	f107 0314 	add.w	r3, r7, #20
 801a13a:	2200      	movs	r2, #0
 801a13c:	601a      	str	r2, [r3, #0]
 801a13e:	605a      	str	r2, [r3, #4]
 801a140:	609a      	str	r2, [r3, #8]
 801a142:	60da      	str	r2, [r3, #12]
 801a144:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12; // DM / DP
 801a146:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801a14a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a14c:	2302      	movs	r3, #2
 801a14e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a150:	2300      	movs	r3, #0
 801a152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a154:	2303      	movs	r3, #3
 801a156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 801a158:	230a      	movs	r3, #10
 801a15a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a15c:	f107 0314 	add.w	r3, r7, #20
 801a160:	4619      	mov	r1, r3
 801a162:	481c      	ldr	r0, [pc, #112]	@ (801a1d4 <HAL_PCD_MspInit+0xdc>)
 801a164:	f7ef fa0c 	bl	8009580 <HAL_GPIO_Init>
  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a168:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801a16c:	f04f 0300 	mov.w	r3, #0
 801a170:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801a174:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 801a178:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a17c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801a180:	4618      	mov	r0, r3
 801a182:	f7f1 febf 	bl	800bf04 <HAL_RCCEx_PeriphCLKConfig>
 801a186:	4603      	mov	r3, r0
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d001      	beq.n	801a190 <HAL_PCD_MspInit+0x98>
    {
      Error_Handler();
 801a18c:	f7e8 faca 	bl	8002724 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a190:	f7f0 fed8 	bl	800af44 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801a194:	4b0e      	ldr	r3, [pc, #56]	@ (801a1d0 <HAL_PCD_MspInit+0xd8>)
 801a196:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a19a:	4a0d      	ldr	r2, [pc, #52]	@ (801a1d0 <HAL_PCD_MspInit+0xd8>)
 801a19c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801a1a0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801a1a4:	4b0a      	ldr	r3, [pc, #40]	@ (801a1d0 <HAL_PCD_MspInit+0xd8>)
 801a1a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a1aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a1ae:	60fb      	str	r3, [r7, #12]
 801a1b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 801a1b2:	2200      	movs	r2, #0
 801a1b4:	2105      	movs	r1, #5
 801a1b6:	204d      	movs	r0, #77	@ 0x4d
 801a1b8:	f7ec fbdb 	bl	8006972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801a1bc:	204d      	movs	r0, #77	@ 0x4d
 801a1be:	f7ec fbf2 	bl	80069a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */
    // (Опционально) включить VBUS sensing, если линия VBUS заведена на соответствующий пин:
    // MODIFY_REG(USB_OTG_HS->GCCFG, 0, USB_OTG_GCCFG_VBDEN);
  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801a1c2:	bf00      	nop
 801a1c4:	37e0      	adds	r7, #224	@ 0xe0
 801a1c6:	46bd      	mov	sp, r7
 801a1c8:	bd80      	pop	{r7, pc}
 801a1ca:	bf00      	nop
 801a1cc:	40040000 	.word	0x40040000
 801a1d0:	58024400 	.word	0x58024400
 801a1d4:	58020000 	.word	0x58020000

0801a1d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a1d8:	b580      	push	{r7, lr}
 801a1da:	b082      	sub	sp, #8
 801a1dc:	af00      	add	r7, sp, #0
 801a1de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801a1ec:	4619      	mov	r1, r3
 801a1ee:	4610      	mov	r0, r2
 801a1f0:	f7f9 fb8f 	bl	8013912 <USBD_LL_SetupStage>
}
 801a1f4:	bf00      	nop
 801a1f6:	3708      	adds	r7, #8
 801a1f8:	46bd      	mov	sp, r7
 801a1fa:	bd80      	pop	{r7, pc}

0801a1fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a1fc:	b580      	push	{r7, lr}
 801a1fe:	b082      	sub	sp, #8
 801a200:	af00      	add	r7, sp, #0
 801a202:	6078      	str	r0, [r7, #4]
 801a204:	460b      	mov	r3, r1
 801a206:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a20e:	78fa      	ldrb	r2, [r7, #3]
 801a210:	6879      	ldr	r1, [r7, #4]
 801a212:	4613      	mov	r3, r2
 801a214:	00db      	lsls	r3, r3, #3
 801a216:	4413      	add	r3, r2
 801a218:	009b      	lsls	r3, r3, #2
 801a21a:	440b      	add	r3, r1
 801a21c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801a220:	681a      	ldr	r2, [r3, #0]
 801a222:	78fb      	ldrb	r3, [r7, #3]
 801a224:	4619      	mov	r1, r3
 801a226:	f7f9 fbc9 	bl	80139bc <USBD_LL_DataOutStage>
}
 801a22a:	bf00      	nop
 801a22c:	3708      	adds	r7, #8
 801a22e:	46bd      	mov	sp, r7
 801a230:	bd80      	pop	{r7, pc}

0801a232 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a232:	b580      	push	{r7, lr}
 801a234:	b082      	sub	sp, #8
 801a236:	af00      	add	r7, sp, #0
 801a238:	6078      	str	r0, [r7, #4]
 801a23a:	460b      	mov	r3, r1
 801a23c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a244:	78fa      	ldrb	r2, [r7, #3]
 801a246:	6879      	ldr	r1, [r7, #4]
 801a248:	4613      	mov	r3, r2
 801a24a:	00db      	lsls	r3, r3, #3
 801a24c:	4413      	add	r3, r2
 801a24e:	009b      	lsls	r3, r3, #2
 801a250:	440b      	add	r3, r1
 801a252:	3320      	adds	r3, #32
 801a254:	681a      	ldr	r2, [r3, #0]
 801a256:	78fb      	ldrb	r3, [r7, #3]
 801a258:	4619      	mov	r1, r3
 801a25a:	f7f9 fc62 	bl	8013b22 <USBD_LL_DataInStage>
}
 801a25e:	bf00      	nop
 801a260:	3708      	adds	r7, #8
 801a262:	46bd      	mov	sp, r7
 801a264:	bd80      	pop	{r7, pc}
	...

0801a268 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a268:	b580      	push	{r7, lr}
 801a26a:	b084      	sub	sp, #16
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a276:	4618      	mov	r0, r3
 801a278:	f7f9 fd9b 	bl	8013db2 <USBD_LL_SOF>
  /* USER CODE BEGIN SOF_TS */
  /* Update last SOF timestamp (ms) for host presence detection */
  g_usb_last_sof_ms = HAL_GetTick();
 801a27c:	f7ea fa6c 	bl	8004758 <HAL_GetTick>
 801a280:	4603      	mov	r3, r0
 801a282:	4a09      	ldr	r2, [pc, #36]	@ (801a2a8 <HAL_PCD_SOFCallback+0x40>)
 801a284:	6013      	str	r3, [r2, #0]
  /* Периодически проверяем таймаут отсутствия SOF (>1000мс) и сбрасываем метку для UI */
  uint32_t now = g_usb_last_sof_ms;
 801a286:	4b08      	ldr	r3, [pc, #32]	@ (801a2a8 <HAL_PCD_SOFCallback+0x40>)
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	60fb      	str	r3, [r7, #12]
  if(now - g_usb_last_poll_ms >= 250){
 801a28c:	4b07      	ldr	r3, [pc, #28]	@ (801a2ac <HAL_PCD_SOFCallback+0x44>)
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	68fa      	ldr	r2, [r7, #12]
 801a292:	1ad3      	subs	r3, r2, r3
 801a294:	2bf9      	cmp	r3, #249	@ 0xf9
 801a296:	d902      	bls.n	801a29e <HAL_PCD_SOFCallback+0x36>
    g_usb_last_poll_ms = now;
 801a298:	4a04      	ldr	r2, [pc, #16]	@ (801a2ac <HAL_PCD_SOFCallback+0x44>)
 801a29a:	68fb      	ldr	r3, [r7, #12]
 801a29c:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SOF_TS */
}
 801a29e:	bf00      	nop
 801a2a0:	3710      	adds	r7, #16
 801a2a2:	46bd      	mov	sp, r7
 801a2a4:	bd80      	pop	{r7, pc}
 801a2a6:	bf00      	nop
 801a2a8:	2401a6fc 	.word	0x2401a6fc
 801a2ac:	2401a700 	.word	0x2401a700

0801a2b0 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b084      	sub	sp, #16
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a2b8:	2301      	movs	r3, #1
 801a2ba:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	79db      	ldrb	r3, [r3, #7]
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d102      	bne.n	801a2ca <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	73fb      	strb	r3, [r7, #15]
 801a2c8:	e008      	b.n	801a2dc <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	79db      	ldrb	r3, [r3, #7]
 801a2ce:	2b02      	cmp	r3, #2
 801a2d0:	d102      	bne.n	801a2d8 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a2d2:	2301      	movs	r3, #1
 801a2d4:	73fb      	strb	r3, [r7, #15]
 801a2d6:	e001      	b.n	801a2dc <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a2d8:	f7e8 fa24 	bl	8002724 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a2e2:	7bfa      	ldrb	r2, [r7, #15]
 801a2e4:	4611      	mov	r1, r2
 801a2e6:	4618      	mov	r0, r3
 801a2e8:	f7f9 fd1f 	bl	8013d2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	f7f9 fcc7 	bl	8013c86 <USBD_LL_Reset>
}
 801a2f8:	bf00      	nop
 801a2fa:	3710      	adds	r7, #16
 801a2fc:	46bd      	mov	sp, r7
 801a2fe:	bd80      	pop	{r7, pc}

0801a300 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a300:	b580      	push	{r7, lr}
 801a302:	b082      	sub	sp, #8
 801a304:	af00      	add	r7, sp, #0
 801a306:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a30e:	4618      	mov	r0, r3
 801a310:	f7f9 fd1b 	bl	8013d4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	687a      	ldr	r2, [r7, #4]
 801a320:	6812      	ldr	r2, [r2, #0]
 801a322:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801a326:	f043 0301 	orr.w	r3, r3, #1
 801a32a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	7adb      	ldrb	r3, [r3, #11]
 801a330:	2b00      	cmp	r3, #0
 801a332:	d005      	beq.n	801a340 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a334:	4b04      	ldr	r3, [pc, #16]	@ (801a348 <HAL_PCD_SuspendCallback+0x48>)
 801a336:	691b      	ldr	r3, [r3, #16]
 801a338:	4a03      	ldr	r2, [pc, #12]	@ (801a348 <HAL_PCD_SuspendCallback+0x48>)
 801a33a:	f043 0306 	orr.w	r3, r3, #6
 801a33e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a340:	bf00      	nop
 801a342:	3708      	adds	r7, #8
 801a344:	46bd      	mov	sp, r7
 801a346:	bd80      	pop	{r7, pc}
 801a348:	e000ed00 	.word	0xe000ed00

0801a34c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b082      	sub	sp, #8
 801a350:	af00      	add	r7, sp, #0
 801a352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a35a:	4618      	mov	r0, r3
 801a35c:	f7f9 fd11 	bl	8013d82 <USBD_LL_Resume>
}
 801a360:	bf00      	nop
 801a362:	3708      	adds	r7, #8
 801a364:	46bd      	mov	sp, r7
 801a366:	bd80      	pop	{r7, pc}

0801a368 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a368:	b580      	push	{r7, lr}
 801a36a:	b082      	sub	sp, #8
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
 801a370:	460b      	mov	r3, r1
 801a372:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a37a:	78fa      	ldrb	r2, [r7, #3]
 801a37c:	4611      	mov	r1, r2
 801a37e:	4618      	mov	r0, r3
 801a380:	f7f9 fd69 	bl	8013e56 <USBD_LL_IsoOUTIncomplete>
}
 801a384:	bf00      	nop
 801a386:	3708      	adds	r7, #8
 801a388:	46bd      	mov	sp, r7
 801a38a:	bd80      	pop	{r7, pc}

0801a38c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a38c:	b580      	push	{r7, lr}
 801a38e:	b082      	sub	sp, #8
 801a390:	af00      	add	r7, sp, #0
 801a392:	6078      	str	r0, [r7, #4]
 801a394:	460b      	mov	r3, r1
 801a396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a39e:	78fa      	ldrb	r2, [r7, #3]
 801a3a0:	4611      	mov	r1, r2
 801a3a2:	4618      	mov	r0, r3
 801a3a4:	f7f9 fd25 	bl	8013df2 <USBD_LL_IsoINIncomplete>
}
 801a3a8:	bf00      	nop
 801a3aa:	3708      	adds	r7, #8
 801a3ac:	46bd      	mov	sp, r7
 801a3ae:	bd80      	pop	{r7, pc}

0801a3b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a3b0:	b580      	push	{r7, lr}
 801a3b2:	b082      	sub	sp, #8
 801a3b4:	af00      	add	r7, sp, #0
 801a3b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a3be:	4618      	mov	r0, r3
 801a3c0:	f7f9 fd7b 	bl	8013eba <USBD_LL_DevConnected>
  /* USER CODE BEGIN CONNECT_EVT */
  g_usb_last_sof_ms = HAL_GetTick();
 801a3c4:	f7ea f9c8 	bl	8004758 <HAL_GetTick>
 801a3c8:	4603      	mov	r3, r0
 801a3ca:	4a03      	ldr	r2, [pc, #12]	@ (801a3d8 <HAL_PCD_ConnectCallback+0x28>)
 801a3cc:	6013      	str	r3, [r2, #0]
  /* USER CODE END CONNECT_EVT */
}
 801a3ce:	bf00      	nop
 801a3d0:	3708      	adds	r7, #8
 801a3d2:	46bd      	mov	sp, r7
 801a3d4:	bd80      	pop	{r7, pc}
 801a3d6:	bf00      	nop
 801a3d8:	2401a6fc 	.word	0x2401a6fc

0801a3dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a3dc:	b580      	push	{r7, lr}
 801a3de:	b082      	sub	sp, #8
 801a3e0:	af00      	add	r7, sp, #0
 801a3e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	f7f9 fd70 	bl	8013ed0 <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN DISCONNECT_EVT */
  /* On disconnect, clear the timestamp so UI can show USB:-- */
  g_usb_last_sof_ms = 0;
 801a3f0:	4b04      	ldr	r3, [pc, #16]	@ (801a404 <HAL_PCD_DisconnectCallback+0x28>)
 801a3f2:	2200      	movs	r2, #0
 801a3f4:	601a      	str	r2, [r3, #0]
  g_usb_last_poll_ms = 0;
 801a3f6:	4b04      	ldr	r3, [pc, #16]	@ (801a408 <HAL_PCD_DisconnectCallback+0x2c>)
 801a3f8:	2200      	movs	r2, #0
 801a3fa:	601a      	str	r2, [r3, #0]
  /* USER CODE END DISCONNECT_EVT */
}
 801a3fc:	bf00      	nop
 801a3fe:	3708      	adds	r7, #8
 801a400:	46bd      	mov	sp, r7
 801a402:	bd80      	pop	{r7, pc}
 801a404:	2401a6fc 	.word	0x2401a6fc
 801a408:	2401a700 	.word	0x2401a700

0801a40c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b082      	sub	sp, #8
 801a410:	af00      	add	r7, sp, #0
 801a412:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	781b      	ldrb	r3, [r3, #0]
 801a418:	2b01      	cmp	r3, #1
 801a41a:	d151      	bne.n	801a4c0 <USBD_LL_Init+0xb4>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801a41c:	4a2b      	ldr	r2, [pc, #172]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	4a29      	ldr	r2, [pc, #164]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a428:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801a42c:	4b27      	ldr	r3, [pc, #156]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a42e:	4a28      	ldr	r2, [pc, #160]	@ (801a4d0 <USBD_LL_Init+0xc4>)
 801a430:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801a432:	4b26      	ldr	r3, [pc, #152]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a434:	2209      	movs	r2, #9
 801a436:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801a438:	4b24      	ldr	r3, [pc, #144]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a43a:	2202      	movs	r2, #2
 801a43c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801a43e:	4b23      	ldr	r3, [pc, #140]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a440:	2200      	movs	r2, #0
 801a442:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801a444:	4b21      	ldr	r3, [pc, #132]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a446:	2202      	movs	r2, #2
 801a448:	725a      	strb	r2, [r3, #9]
  /* Включаем генерацию SOF, чтобы UI мог отслеживать активность хоста */
  hpcd_USB_OTG_HS.Init.Sof_enable = ENABLE;
 801a44a:	4b20      	ldr	r3, [pc, #128]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a44c:	2201      	movs	r2, #1
 801a44e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801a450:	4b1e      	ldr	r3, [pc, #120]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a452:	2200      	movs	r2, #0
 801a454:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801a456:	4b1d      	ldr	r3, [pc, #116]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a458:	2200      	movs	r2, #0
 801a45a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE; /* VBUS sensing отключен, как в оригинале */
 801a45c:	4b1b      	ldr	r3, [pc, #108]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a45e:	2200      	movs	r2, #0
 801a460:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801a462:	4b1a      	ldr	r3, [pc, #104]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a464:	2200      	movs	r2, #0
 801a466:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801a468:	4b18      	ldr	r3, [pc, #96]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a46a:	2200      	movs	r2, #0
 801a46c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801a46e:	4817      	ldr	r0, [pc, #92]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a470:	f7ef fa61 	bl	8009936 <HAL_PCD_Init>
 801a474:	4603      	mov	r3, r0
 801a476:	2b00      	cmp	r3, #0
 801a478:	d001      	beq.n	801a47e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801a47a:	f7e8 f953 	bl	8002724 <Error_Handler>
  }

  /* Включаем pull-up для enumeration */
  MODIFY_REG(USB_OTG_HS->GCCFG, 0, USB_OTG_GCCFG_PWRDWN);
 801a47e:	4b14      	ldr	r3, [pc, #80]	@ (801a4d0 <USBD_LL_Init+0xc4>)
 801a480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a482:	4a13      	ldr	r2, [pc, #76]	@ (801a4d0 <USBD_LL_Init+0xc4>)
 801a484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a488:	6393      	str	r3, [r2, #56]	@ 0x38
     TX0 (EP0)   0x40  (64)
     TX1 (CDC IN)0x100 (256)
    TX2 (CDC CMD IN)0x40  (64)
     TX3 (VND IN)0x100 (256)
  */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801a48a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801a48e:	480f      	ldr	r0, [pc, #60]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a490:	f7f0 fcdd 	bl	800ae4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x40);
 801a494:	2240      	movs	r2, #64	@ 0x40
 801a496:	2100      	movs	r1, #0
 801a498:	480c      	ldr	r0, [pc, #48]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a49a:	f7f0 fc91 	bl	800adc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x100);
 801a49e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a4a2:	2101      	movs	r1, #1
 801a4a4:	4809      	ldr	r0, [pc, #36]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a4a6:	f7f0 fc8b 	bl	800adc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 2, 0x40);
 801a4aa:	2240      	movs	r2, #64	@ 0x40
 801a4ac:	2102      	movs	r1, #2
 801a4ae:	4807      	ldr	r0, [pc, #28]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a4b0:	f7f0 fc86 	bl	800adc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 3, 0x100);
 801a4b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a4b8:	2103      	movs	r1, #3
 801a4ba:	4804      	ldr	r0, [pc, #16]	@ (801a4cc <USBD_LL_Init+0xc0>)
 801a4bc:	f7f0 fc80 	bl	800adc0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801a4c0:	2300      	movs	r3, #0
}
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	3708      	adds	r7, #8
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	bd80      	pop	{r7, pc}
 801a4ca:	bf00      	nop
 801a4cc:	2401a704 	.word	0x2401a704
 801a4d0:	40040000 	.word	0x40040000

0801a4d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a4d4:	b580      	push	{r7, lr}
 801a4d6:	b084      	sub	sp, #16
 801a4d8:	af00      	add	r7, sp, #0
 801a4da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a4dc:	2300      	movs	r3, #0
 801a4de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	f7ef fb2f 	bl	8009b4e <HAL_PCD_Start>
 801a4f0:	4603      	mov	r3, r0
 801a4f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a4f4:	7bfb      	ldrb	r3, [r7, #15]
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	f000 f962 	bl	801a7c0 <USBD_Get_USB_Status>
 801a4fc:	4603      	mov	r3, r0
 801a4fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a500:	7bbb      	ldrb	r3, [r7, #14]
}
 801a502:	4618      	mov	r0, r3
 801a504:	3710      	adds	r7, #16
 801a506:	46bd      	mov	sp, r7
 801a508:	bd80      	pop	{r7, pc}

0801a50a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a50a:	b580      	push	{r7, lr}
 801a50c:	b084      	sub	sp, #16
 801a50e:	af00      	add	r7, sp, #0
 801a510:	6078      	str	r0, [r7, #4]
 801a512:	4608      	mov	r0, r1
 801a514:	4611      	mov	r1, r2
 801a516:	461a      	mov	r2, r3
 801a518:	4603      	mov	r3, r0
 801a51a:	70fb      	strb	r3, [r7, #3]
 801a51c:	460b      	mov	r3, r1
 801a51e:	70bb      	strb	r3, [r7, #2]
 801a520:	4613      	mov	r3, r2
 801a522:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a524:	2300      	movs	r3, #0
 801a526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a528:	2300      	movs	r3, #0
 801a52a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a532:	78bb      	ldrb	r3, [r7, #2]
 801a534:	883a      	ldrh	r2, [r7, #0]
 801a536:	78f9      	ldrb	r1, [r7, #3]
 801a538:	f7f0 f830 	bl	800a59c <HAL_PCD_EP_Open>
 801a53c:	4603      	mov	r3, r0
 801a53e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a540:	7bfb      	ldrb	r3, [r7, #15]
 801a542:	4618      	mov	r0, r3
 801a544:	f000 f93c 	bl	801a7c0 <USBD_Get_USB_Status>
 801a548:	4603      	mov	r3, r0
 801a54a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a54c:	7bbb      	ldrb	r3, [r7, #14]
}
 801a54e:	4618      	mov	r0, r3
 801a550:	3710      	adds	r7, #16
 801a552:	46bd      	mov	sp, r7
 801a554:	bd80      	pop	{r7, pc}

0801a556 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a556:	b580      	push	{r7, lr}
 801a558:	b084      	sub	sp, #16
 801a55a:	af00      	add	r7, sp, #0
 801a55c:	6078      	str	r0, [r7, #4]
 801a55e:	460b      	mov	r3, r1
 801a560:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a562:	2300      	movs	r3, #0
 801a564:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a566:	2300      	movs	r3, #0
 801a568:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a570:	78fa      	ldrb	r2, [r7, #3]
 801a572:	4611      	mov	r1, r2
 801a574:	4618      	mov	r0, r3
 801a576:	f7f0 f87b 	bl	800a670 <HAL_PCD_EP_Close>
 801a57a:	4603      	mov	r3, r0
 801a57c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a57e:	7bfb      	ldrb	r3, [r7, #15]
 801a580:	4618      	mov	r0, r3
 801a582:	f000 f91d 	bl	801a7c0 <USBD_Get_USB_Status>
 801a586:	4603      	mov	r3, r0
 801a588:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a58a:	7bbb      	ldrb	r3, [r7, #14]
}
 801a58c:	4618      	mov	r0, r3
 801a58e:	3710      	adds	r7, #16
 801a590:	46bd      	mov	sp, r7
 801a592:	bd80      	pop	{r7, pc}

0801a594 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b084      	sub	sp, #16
 801a598:	af00      	add	r7, sp, #0
 801a59a:	6078      	str	r0, [r7, #4]
 801a59c:	460b      	mov	r3, r1
 801a59e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5a0:	2300      	movs	r3, #0
 801a5a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a5ae:	78fa      	ldrb	r2, [r7, #3]
 801a5b0:	4611      	mov	r1, r2
 801a5b2:	4618      	mov	r0, r3
 801a5b4:	f7f0 fa1d 	bl	800a9f2 <HAL_PCD_EP_Flush>
 801a5b8:	4603      	mov	r3, r0
 801a5ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a5bc:	7bfb      	ldrb	r3, [r7, #15]
 801a5be:	4618      	mov	r0, r3
 801a5c0:	f000 f8fe 	bl	801a7c0 <USBD_Get_USB_Status>
 801a5c4:	4603      	mov	r3, r0
 801a5c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a5c8:	7bbb      	ldrb	r3, [r7, #14]
}
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	3710      	adds	r7, #16
 801a5ce:	46bd      	mov	sp, r7
 801a5d0:	bd80      	pop	{r7, pc}

0801a5d2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a5d2:	b580      	push	{r7, lr}
 801a5d4:	b084      	sub	sp, #16
 801a5d6:	af00      	add	r7, sp, #0
 801a5d8:	6078      	str	r0, [r7, #4]
 801a5da:	460b      	mov	r3, r1
 801a5dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5de:	2300      	movs	r3, #0
 801a5e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a5ec:	78fa      	ldrb	r2, [r7, #3]
 801a5ee:	4611      	mov	r1, r2
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	f7f0 f914 	bl	800a81e <HAL_PCD_EP_SetStall>
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a5fa:	7bfb      	ldrb	r3, [r7, #15]
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	f000 f8df 	bl	801a7c0 <USBD_Get_USB_Status>
 801a602:	4603      	mov	r3, r0
 801a604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a606:	7bbb      	ldrb	r3, [r7, #14]
}
 801a608:	4618      	mov	r0, r3
 801a60a:	3710      	adds	r7, #16
 801a60c:	46bd      	mov	sp, r7
 801a60e:	bd80      	pop	{r7, pc}

0801a610 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b084      	sub	sp, #16
 801a614:	af00      	add	r7, sp, #0
 801a616:	6078      	str	r0, [r7, #4]
 801a618:	460b      	mov	r3, r1
 801a61a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a61c:	2300      	movs	r3, #0
 801a61e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a620:	2300      	movs	r3, #0
 801a622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a62a:	78fa      	ldrb	r2, [r7, #3]
 801a62c:	4611      	mov	r1, r2
 801a62e:	4618      	mov	r0, r3
 801a630:	f7f0 f958 	bl	800a8e4 <HAL_PCD_EP_ClrStall>
 801a634:	4603      	mov	r3, r0
 801a636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a638:	7bfb      	ldrb	r3, [r7, #15]
 801a63a:	4618      	mov	r0, r3
 801a63c:	f000 f8c0 	bl	801a7c0 <USBD_Get_USB_Status>
 801a640:	4603      	mov	r3, r0
 801a642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a644:	7bbb      	ldrb	r3, [r7, #14]
}
 801a646:	4618      	mov	r0, r3
 801a648:	3710      	adds	r7, #16
 801a64a:	46bd      	mov	sp, r7
 801a64c:	bd80      	pop	{r7, pc}

0801a64e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a64e:	b480      	push	{r7}
 801a650:	b085      	sub	sp, #20
 801a652:	af00      	add	r7, sp, #0
 801a654:	6078      	str	r0, [r7, #4]
 801a656:	460b      	mov	r3, r1
 801a658:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a660:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a662:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a666:	2b00      	cmp	r3, #0
 801a668:	da0b      	bge.n	801a682 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a66a:	78fb      	ldrb	r3, [r7, #3]
 801a66c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a670:	68f9      	ldr	r1, [r7, #12]
 801a672:	4613      	mov	r3, r2
 801a674:	00db      	lsls	r3, r3, #3
 801a676:	4413      	add	r3, r2
 801a678:	009b      	lsls	r3, r3, #2
 801a67a:	440b      	add	r3, r1
 801a67c:	3316      	adds	r3, #22
 801a67e:	781b      	ldrb	r3, [r3, #0]
 801a680:	e00b      	b.n	801a69a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a682:	78fb      	ldrb	r3, [r7, #3]
 801a684:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a688:	68f9      	ldr	r1, [r7, #12]
 801a68a:	4613      	mov	r3, r2
 801a68c:	00db      	lsls	r3, r3, #3
 801a68e:	4413      	add	r3, r2
 801a690:	009b      	lsls	r3, r3, #2
 801a692:	440b      	add	r3, r1
 801a694:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801a698:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a69a:	4618      	mov	r0, r3
 801a69c:	3714      	adds	r7, #20
 801a69e:	46bd      	mov	sp, r7
 801a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a4:	4770      	bx	lr

0801a6a6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a6a6:	b580      	push	{r7, lr}
 801a6a8:	b084      	sub	sp, #16
 801a6aa:	af00      	add	r7, sp, #0
 801a6ac:	6078      	str	r0, [r7, #4]
 801a6ae:	460b      	mov	r3, r1
 801a6b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6b6:	2300      	movs	r3, #0
 801a6b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a6c0:	78fa      	ldrb	r2, [r7, #3]
 801a6c2:	4611      	mov	r1, r2
 801a6c4:	4618      	mov	r0, r3
 801a6c6:	f7ef ff45 	bl	800a554 <HAL_PCD_SetAddress>
 801a6ca:	4603      	mov	r3, r0
 801a6cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a6ce:	7bfb      	ldrb	r3, [r7, #15]
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	f000 f875 	bl	801a7c0 <USBD_Get_USB_Status>
 801a6d6:	4603      	mov	r3, r0
 801a6d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a6da:	7bbb      	ldrb	r3, [r7, #14]
}
 801a6dc:	4618      	mov	r0, r3
 801a6de:	3710      	adds	r7, #16
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	bd80      	pop	{r7, pc}

0801a6e4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a6e4:	b580      	push	{r7, lr}
 801a6e6:	b086      	sub	sp, #24
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	60f8      	str	r0, [r7, #12]
 801a6ec:	607a      	str	r2, [r7, #4]
 801a6ee:	603b      	str	r3, [r7, #0]
 801a6f0:	460b      	mov	r3, r1
 801a6f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6f4:	2300      	movs	r3, #0
 801a6f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6f8:	2300      	movs	r3, #0
 801a6fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a702:	7af9      	ldrb	r1, [r7, #11]
 801a704:	683b      	ldr	r3, [r7, #0]
 801a706:	687a      	ldr	r2, [r7, #4]
 801a708:	f7f0 f84f 	bl	800a7aa <HAL_PCD_EP_Transmit>
 801a70c:	4603      	mov	r3, r0
 801a70e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a710:	7dfb      	ldrb	r3, [r7, #23]
 801a712:	4618      	mov	r0, r3
 801a714:	f000 f854 	bl	801a7c0 <USBD_Get_USB_Status>
 801a718:	4603      	mov	r3, r0
 801a71a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a71c:	7dbb      	ldrb	r3, [r7, #22]
}
 801a71e:	4618      	mov	r0, r3
 801a720:	3718      	adds	r7, #24
 801a722:	46bd      	mov	sp, r7
 801a724:	bd80      	pop	{r7, pc}

0801a726 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a726:	b580      	push	{r7, lr}
 801a728:	b086      	sub	sp, #24
 801a72a:	af00      	add	r7, sp, #0
 801a72c:	60f8      	str	r0, [r7, #12]
 801a72e:	607a      	str	r2, [r7, #4]
 801a730:	603b      	str	r3, [r7, #0]
 801a732:	460b      	mov	r3, r1
 801a734:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a736:	2300      	movs	r3, #0
 801a738:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a73a:	2300      	movs	r3, #0
 801a73c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a73e:	68fb      	ldr	r3, [r7, #12]
 801a740:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a744:	7af9      	ldrb	r1, [r7, #11]
 801a746:	683b      	ldr	r3, [r7, #0]
 801a748:	687a      	ldr	r2, [r7, #4]
 801a74a:	f7ef ffdb 	bl	800a704 <HAL_PCD_EP_Receive>
 801a74e:	4603      	mov	r3, r0
 801a750:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a752:	7dfb      	ldrb	r3, [r7, #23]
 801a754:	4618      	mov	r0, r3
 801a756:	f000 f833 	bl	801a7c0 <USBD_Get_USB_Status>
 801a75a:	4603      	mov	r3, r0
 801a75c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a75e:	7dbb      	ldrb	r3, [r7, #22]
}
 801a760:	4618      	mov	r0, r3
 801a762:	3718      	adds	r7, #24
 801a764:	46bd      	mov	sp, r7
 801a766:	bd80      	pop	{r7, pc}

0801a768 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a768:	b580      	push	{r7, lr}
 801a76a:	b082      	sub	sp, #8
 801a76c:	af00      	add	r7, sp, #0
 801a76e:	6078      	str	r0, [r7, #4]
 801a770:	460b      	mov	r3, r1
 801a772:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a77a:	78fa      	ldrb	r2, [r7, #3]
 801a77c:	4611      	mov	r1, r2
 801a77e:	4618      	mov	r0, r3
 801a780:	f7ef fffb 	bl	800a77a <HAL_PCD_EP_GetRxCount>
 801a784:	4603      	mov	r3, r0
}
 801a786:	4618      	mov	r0, r3
 801a788:	3708      	adds	r7, #8
 801a78a:	46bd      	mov	sp, r7
 801a78c:	bd80      	pop	{r7, pc}
	...

0801a790 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a790:	b480      	push	{r7}
 801a792:	b083      	sub	sp, #12
 801a794:	af00      	add	r7, sp, #0
 801a796:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a798:	4b03      	ldr	r3, [pc, #12]	@ (801a7a8 <USBD_static_malloc+0x18>)
}
 801a79a:	4618      	mov	r0, r3
 801a79c:	370c      	adds	r7, #12
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a4:	4770      	bx	lr
 801a7a6:	bf00      	nop
 801a7a8:	2401abe8 	.word	0x2401abe8

0801a7ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a7ac:	b480      	push	{r7}
 801a7ae:	b083      	sub	sp, #12
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801a7b4:	bf00      	nop
 801a7b6:	370c      	adds	r7, #12
 801a7b8:	46bd      	mov	sp, r7
 801a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7be:	4770      	bx	lr

0801a7c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a7c0:	b480      	push	{r7}
 801a7c2:	b085      	sub	sp, #20
 801a7c4:	af00      	add	r7, sp, #0
 801a7c6:	4603      	mov	r3, r0
 801a7c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a7ce:	79fb      	ldrb	r3, [r7, #7]
 801a7d0:	2b03      	cmp	r3, #3
 801a7d2:	d817      	bhi.n	801a804 <USBD_Get_USB_Status+0x44>
 801a7d4:	a201      	add	r2, pc, #4	@ (adr r2, 801a7dc <USBD_Get_USB_Status+0x1c>)
 801a7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7da:	bf00      	nop
 801a7dc:	0801a7ed 	.word	0x0801a7ed
 801a7e0:	0801a7f3 	.word	0x0801a7f3
 801a7e4:	0801a7f9 	.word	0x0801a7f9
 801a7e8:	0801a7ff 	.word	0x0801a7ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a7ec:	2300      	movs	r3, #0
 801a7ee:	73fb      	strb	r3, [r7, #15]
    break;
 801a7f0:	e00b      	b.n	801a80a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a7f2:	2303      	movs	r3, #3
 801a7f4:	73fb      	strb	r3, [r7, #15]
    break;
 801a7f6:	e008      	b.n	801a80a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a7f8:	2301      	movs	r3, #1
 801a7fa:	73fb      	strb	r3, [r7, #15]
    break;
 801a7fc:	e005      	b.n	801a80a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a7fe:	2303      	movs	r3, #3
 801a800:	73fb      	strb	r3, [r7, #15]
    break;
 801a802:	e002      	b.n	801a80a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a804:	2303      	movs	r3, #3
 801a806:	73fb      	strb	r3, [r7, #15]
    break;
 801a808:	bf00      	nop
  }
  return usb_status;
 801a80a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a80c:	4618      	mov	r0, r3
 801a80e:	3714      	adds	r7, #20
 801a810:	46bd      	mov	sp, r7
 801a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a816:	4770      	bx	lr

0801a818 <std>:
 801a818:	2300      	movs	r3, #0
 801a81a:	b510      	push	{r4, lr}
 801a81c:	4604      	mov	r4, r0
 801a81e:	e9c0 3300 	strd	r3, r3, [r0]
 801a822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a826:	6083      	str	r3, [r0, #8]
 801a828:	8181      	strh	r1, [r0, #12]
 801a82a:	6643      	str	r3, [r0, #100]	@ 0x64
 801a82c:	81c2      	strh	r2, [r0, #14]
 801a82e:	6183      	str	r3, [r0, #24]
 801a830:	4619      	mov	r1, r3
 801a832:	2208      	movs	r2, #8
 801a834:	305c      	adds	r0, #92	@ 0x5c
 801a836:	f000 fb1f 	bl	801ae78 <memset>
 801a83a:	4b0d      	ldr	r3, [pc, #52]	@ (801a870 <std+0x58>)
 801a83c:	6263      	str	r3, [r4, #36]	@ 0x24
 801a83e:	4b0d      	ldr	r3, [pc, #52]	@ (801a874 <std+0x5c>)
 801a840:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a842:	4b0d      	ldr	r3, [pc, #52]	@ (801a878 <std+0x60>)
 801a844:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a846:	4b0d      	ldr	r3, [pc, #52]	@ (801a87c <std+0x64>)
 801a848:	6323      	str	r3, [r4, #48]	@ 0x30
 801a84a:	4b0d      	ldr	r3, [pc, #52]	@ (801a880 <std+0x68>)
 801a84c:	6224      	str	r4, [r4, #32]
 801a84e:	429c      	cmp	r4, r3
 801a850:	d006      	beq.n	801a860 <std+0x48>
 801a852:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a856:	4294      	cmp	r4, r2
 801a858:	d002      	beq.n	801a860 <std+0x48>
 801a85a:	33d0      	adds	r3, #208	@ 0xd0
 801a85c:	429c      	cmp	r4, r3
 801a85e:	d105      	bne.n	801a86c <std+0x54>
 801a860:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a868:	f000 bb92 	b.w	801af90 <__retarget_lock_init_recursive>
 801a86c:	bd10      	pop	{r4, pc}
 801a86e:	bf00      	nop
 801a870:	0801ac55 	.word	0x0801ac55
 801a874:	0801ac77 	.word	0x0801ac77
 801a878:	0801acaf 	.word	0x0801acaf
 801a87c:	0801acd5 	.word	0x0801acd5
 801a880:	2401ae08 	.word	0x2401ae08

0801a884 <stdio_exit_handler>:
 801a884:	4a02      	ldr	r2, [pc, #8]	@ (801a890 <stdio_exit_handler+0xc>)
 801a886:	4903      	ldr	r1, [pc, #12]	@ (801a894 <stdio_exit_handler+0x10>)
 801a888:	4803      	ldr	r0, [pc, #12]	@ (801a898 <stdio_exit_handler+0x14>)
 801a88a:	f000 b86b 	b.w	801a964 <_fwalk_sglue>
 801a88e:	bf00      	nop
 801a890:	24000248 	.word	0x24000248
 801a894:	0801bb11 	.word	0x0801bb11
 801a898:	24000258 	.word	0x24000258

0801a89c <cleanup_stdio>:
 801a89c:	6841      	ldr	r1, [r0, #4]
 801a89e:	4b0c      	ldr	r3, [pc, #48]	@ (801a8d0 <cleanup_stdio+0x34>)
 801a8a0:	4299      	cmp	r1, r3
 801a8a2:	b510      	push	{r4, lr}
 801a8a4:	4604      	mov	r4, r0
 801a8a6:	d001      	beq.n	801a8ac <cleanup_stdio+0x10>
 801a8a8:	f001 f932 	bl	801bb10 <_fflush_r>
 801a8ac:	68a1      	ldr	r1, [r4, #8]
 801a8ae:	4b09      	ldr	r3, [pc, #36]	@ (801a8d4 <cleanup_stdio+0x38>)
 801a8b0:	4299      	cmp	r1, r3
 801a8b2:	d002      	beq.n	801a8ba <cleanup_stdio+0x1e>
 801a8b4:	4620      	mov	r0, r4
 801a8b6:	f001 f92b 	bl	801bb10 <_fflush_r>
 801a8ba:	68e1      	ldr	r1, [r4, #12]
 801a8bc:	4b06      	ldr	r3, [pc, #24]	@ (801a8d8 <cleanup_stdio+0x3c>)
 801a8be:	4299      	cmp	r1, r3
 801a8c0:	d004      	beq.n	801a8cc <cleanup_stdio+0x30>
 801a8c2:	4620      	mov	r0, r4
 801a8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8c8:	f001 b922 	b.w	801bb10 <_fflush_r>
 801a8cc:	bd10      	pop	{r4, pc}
 801a8ce:	bf00      	nop
 801a8d0:	2401ae08 	.word	0x2401ae08
 801a8d4:	2401ae70 	.word	0x2401ae70
 801a8d8:	2401aed8 	.word	0x2401aed8

0801a8dc <global_stdio_init.part.0>:
 801a8dc:	4b0c      	ldr	r3, [pc, #48]	@ (801a910 <global_stdio_init.part.0+0x34>)
 801a8de:	4a0d      	ldr	r2, [pc, #52]	@ (801a914 <global_stdio_init.part.0+0x38>)
 801a8e0:	480d      	ldr	r0, [pc, #52]	@ (801a918 <global_stdio_init.part.0+0x3c>)
 801a8e2:	b510      	push	{r4, lr}
 801a8e4:	2104      	movs	r1, #4
 801a8e6:	601a      	str	r2, [r3, #0]
 801a8e8:	2200      	movs	r2, #0
 801a8ea:	f7ff ff95 	bl	801a818 <std>
 801a8ee:	4b0a      	ldr	r3, [pc, #40]	@ (801a918 <global_stdio_init.part.0+0x3c>)
 801a8f0:	2201      	movs	r2, #1
 801a8f2:	461c      	mov	r4, r3
 801a8f4:	2109      	movs	r1, #9
 801a8f6:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 801a8fa:	f7ff ff8d 	bl	801a818 <std>
 801a8fe:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a902:	2202      	movs	r2, #2
 801a904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a908:	2112      	movs	r1, #18
 801a90a:	f7ff bf85 	b.w	801a818 <std>
 801a90e:	bf00      	nop
 801a910:	2401af40 	.word	0x2401af40
 801a914:	0801a885 	.word	0x0801a885
 801a918:	2401ae08 	.word	0x2401ae08

0801a91c <__sfp_lock_acquire>:
 801a91c:	4801      	ldr	r0, [pc, #4]	@ (801a924 <__sfp_lock_acquire+0x8>)
 801a91e:	f000 bb38 	b.w	801af92 <__retarget_lock_acquire_recursive>
 801a922:	bf00      	nop
 801a924:	2401af49 	.word	0x2401af49

0801a928 <__sfp_lock_release>:
 801a928:	4801      	ldr	r0, [pc, #4]	@ (801a930 <__sfp_lock_release+0x8>)
 801a92a:	f000 bb33 	b.w	801af94 <__retarget_lock_release_recursive>
 801a92e:	bf00      	nop
 801a930:	2401af49 	.word	0x2401af49

0801a934 <__sinit>:
 801a934:	b510      	push	{r4, lr}
 801a936:	4604      	mov	r4, r0
 801a938:	f7ff fff0 	bl	801a91c <__sfp_lock_acquire>
 801a93c:	6a23      	ldr	r3, [r4, #32]
 801a93e:	b11b      	cbz	r3, 801a948 <__sinit+0x14>
 801a940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a944:	f7ff bff0 	b.w	801a928 <__sfp_lock_release>
 801a948:	4b04      	ldr	r3, [pc, #16]	@ (801a95c <__sinit+0x28>)
 801a94a:	6223      	str	r3, [r4, #32]
 801a94c:	4b04      	ldr	r3, [pc, #16]	@ (801a960 <__sinit+0x2c>)
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	2b00      	cmp	r3, #0
 801a952:	d1f5      	bne.n	801a940 <__sinit+0xc>
 801a954:	f7ff ffc2 	bl	801a8dc <global_stdio_init.part.0>
 801a958:	e7f2      	b.n	801a940 <__sinit+0xc>
 801a95a:	bf00      	nop
 801a95c:	0801a89d 	.word	0x0801a89d
 801a960:	2401af40 	.word	0x2401af40

0801a964 <_fwalk_sglue>:
 801a964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a968:	4607      	mov	r7, r0
 801a96a:	4688      	mov	r8, r1
 801a96c:	4614      	mov	r4, r2
 801a96e:	2600      	movs	r6, #0
 801a970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a974:	f1b9 0901 	subs.w	r9, r9, #1
 801a978:	d505      	bpl.n	801a986 <_fwalk_sglue+0x22>
 801a97a:	6824      	ldr	r4, [r4, #0]
 801a97c:	2c00      	cmp	r4, #0
 801a97e:	d1f7      	bne.n	801a970 <_fwalk_sglue+0xc>
 801a980:	4630      	mov	r0, r6
 801a982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a986:	89ab      	ldrh	r3, [r5, #12]
 801a988:	2b01      	cmp	r3, #1
 801a98a:	d907      	bls.n	801a99c <_fwalk_sglue+0x38>
 801a98c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a990:	3301      	adds	r3, #1
 801a992:	d003      	beq.n	801a99c <_fwalk_sglue+0x38>
 801a994:	4629      	mov	r1, r5
 801a996:	4638      	mov	r0, r7
 801a998:	47c0      	blx	r8
 801a99a:	4306      	orrs	r6, r0
 801a99c:	3568      	adds	r5, #104	@ 0x68
 801a99e:	e7e9      	b.n	801a974 <_fwalk_sglue+0x10>

0801a9a0 <iprintf>:
 801a9a0:	b40f      	push	{r0, r1, r2, r3}
 801a9a2:	b507      	push	{r0, r1, r2, lr}
 801a9a4:	4906      	ldr	r1, [pc, #24]	@ (801a9c0 <iprintf+0x20>)
 801a9a6:	ab04      	add	r3, sp, #16
 801a9a8:	6808      	ldr	r0, [r1, #0]
 801a9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9ae:	6881      	ldr	r1, [r0, #8]
 801a9b0:	9301      	str	r3, [sp, #4]
 801a9b2:	f000 fd85 	bl	801b4c0 <_vfiprintf_r>
 801a9b6:	b003      	add	sp, #12
 801a9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a9bc:	b004      	add	sp, #16
 801a9be:	4770      	bx	lr
 801a9c0:	24000254 	.word	0x24000254

0801a9c4 <_puts_r>:
 801a9c4:	6a03      	ldr	r3, [r0, #32]
 801a9c6:	b570      	push	{r4, r5, r6, lr}
 801a9c8:	6884      	ldr	r4, [r0, #8]
 801a9ca:	4605      	mov	r5, r0
 801a9cc:	460e      	mov	r6, r1
 801a9ce:	b90b      	cbnz	r3, 801a9d4 <_puts_r+0x10>
 801a9d0:	f7ff ffb0 	bl	801a934 <__sinit>
 801a9d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a9d6:	07db      	lsls	r3, r3, #31
 801a9d8:	d405      	bmi.n	801a9e6 <_puts_r+0x22>
 801a9da:	89a3      	ldrh	r3, [r4, #12]
 801a9dc:	0598      	lsls	r0, r3, #22
 801a9de:	d402      	bmi.n	801a9e6 <_puts_r+0x22>
 801a9e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a9e2:	f000 fad6 	bl	801af92 <__retarget_lock_acquire_recursive>
 801a9e6:	89a3      	ldrh	r3, [r4, #12]
 801a9e8:	0719      	lsls	r1, r3, #28
 801a9ea:	d502      	bpl.n	801a9f2 <_puts_r+0x2e>
 801a9ec:	6923      	ldr	r3, [r4, #16]
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d135      	bne.n	801aa5e <_puts_r+0x9a>
 801a9f2:	4621      	mov	r1, r4
 801a9f4:	4628      	mov	r0, r5
 801a9f6:	f000 f9eb 	bl	801add0 <__swsetup_r>
 801a9fa:	b380      	cbz	r0, 801aa5e <_puts_r+0x9a>
 801a9fc:	f04f 35ff 	mov.w	r5, #4294967295
 801aa00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801aa02:	07da      	lsls	r2, r3, #31
 801aa04:	d405      	bmi.n	801aa12 <_puts_r+0x4e>
 801aa06:	89a3      	ldrh	r3, [r4, #12]
 801aa08:	059b      	lsls	r3, r3, #22
 801aa0a:	d402      	bmi.n	801aa12 <_puts_r+0x4e>
 801aa0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801aa0e:	f000 fac1 	bl	801af94 <__retarget_lock_release_recursive>
 801aa12:	4628      	mov	r0, r5
 801aa14:	bd70      	pop	{r4, r5, r6, pc}
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	da04      	bge.n	801aa24 <_puts_r+0x60>
 801aa1a:	69a2      	ldr	r2, [r4, #24]
 801aa1c:	4293      	cmp	r3, r2
 801aa1e:	db17      	blt.n	801aa50 <_puts_r+0x8c>
 801aa20:	290a      	cmp	r1, #10
 801aa22:	d015      	beq.n	801aa50 <_puts_r+0x8c>
 801aa24:	6823      	ldr	r3, [r4, #0]
 801aa26:	1c5a      	adds	r2, r3, #1
 801aa28:	6022      	str	r2, [r4, #0]
 801aa2a:	7019      	strb	r1, [r3, #0]
 801aa2c:	68a3      	ldr	r3, [r4, #8]
 801aa2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801aa32:	3b01      	subs	r3, #1
 801aa34:	60a3      	str	r3, [r4, #8]
 801aa36:	2900      	cmp	r1, #0
 801aa38:	d1ed      	bne.n	801aa16 <_puts_r+0x52>
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	da11      	bge.n	801aa62 <_puts_r+0x9e>
 801aa3e:	4622      	mov	r2, r4
 801aa40:	210a      	movs	r1, #10
 801aa42:	4628      	mov	r0, r5
 801aa44:	f000 f986 	bl	801ad54 <__swbuf_r>
 801aa48:	3001      	adds	r0, #1
 801aa4a:	d0d7      	beq.n	801a9fc <_puts_r+0x38>
 801aa4c:	250a      	movs	r5, #10
 801aa4e:	e7d7      	b.n	801aa00 <_puts_r+0x3c>
 801aa50:	4622      	mov	r2, r4
 801aa52:	4628      	mov	r0, r5
 801aa54:	f000 f97e 	bl	801ad54 <__swbuf_r>
 801aa58:	3001      	adds	r0, #1
 801aa5a:	d1e7      	bne.n	801aa2c <_puts_r+0x68>
 801aa5c:	e7ce      	b.n	801a9fc <_puts_r+0x38>
 801aa5e:	3e01      	subs	r6, #1
 801aa60:	e7e4      	b.n	801aa2c <_puts_r+0x68>
 801aa62:	6823      	ldr	r3, [r4, #0]
 801aa64:	1c5a      	adds	r2, r3, #1
 801aa66:	6022      	str	r2, [r4, #0]
 801aa68:	220a      	movs	r2, #10
 801aa6a:	701a      	strb	r2, [r3, #0]
 801aa6c:	e7ee      	b.n	801aa4c <_puts_r+0x88>
	...

0801aa70 <puts>:
 801aa70:	4b02      	ldr	r3, [pc, #8]	@ (801aa7c <puts+0xc>)
 801aa72:	4601      	mov	r1, r0
 801aa74:	6818      	ldr	r0, [r3, #0]
 801aa76:	f7ff bfa5 	b.w	801a9c4 <_puts_r>
 801aa7a:	bf00      	nop
 801aa7c:	24000254 	.word	0x24000254

0801aa80 <setvbuf>:
 801aa80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801aa84:	461d      	mov	r5, r3
 801aa86:	4b57      	ldr	r3, [pc, #348]	@ (801abe4 <setvbuf+0x164>)
 801aa88:	681f      	ldr	r7, [r3, #0]
 801aa8a:	4604      	mov	r4, r0
 801aa8c:	460e      	mov	r6, r1
 801aa8e:	4690      	mov	r8, r2
 801aa90:	b127      	cbz	r7, 801aa9c <setvbuf+0x1c>
 801aa92:	6a3b      	ldr	r3, [r7, #32]
 801aa94:	b913      	cbnz	r3, 801aa9c <setvbuf+0x1c>
 801aa96:	4638      	mov	r0, r7
 801aa98:	f7ff ff4c 	bl	801a934 <__sinit>
 801aa9c:	f1b8 0f02 	cmp.w	r8, #2
 801aaa0:	d006      	beq.n	801aab0 <setvbuf+0x30>
 801aaa2:	f1b8 0f01 	cmp.w	r8, #1
 801aaa6:	f200 809a 	bhi.w	801abde <setvbuf+0x15e>
 801aaaa:	2d00      	cmp	r5, #0
 801aaac:	f2c0 8097 	blt.w	801abde <setvbuf+0x15e>
 801aab0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801aab2:	07d9      	lsls	r1, r3, #31
 801aab4:	d405      	bmi.n	801aac2 <setvbuf+0x42>
 801aab6:	89a3      	ldrh	r3, [r4, #12]
 801aab8:	059a      	lsls	r2, r3, #22
 801aaba:	d402      	bmi.n	801aac2 <setvbuf+0x42>
 801aabc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801aabe:	f000 fa68 	bl	801af92 <__retarget_lock_acquire_recursive>
 801aac2:	4621      	mov	r1, r4
 801aac4:	4638      	mov	r0, r7
 801aac6:	f001 f823 	bl	801bb10 <_fflush_r>
 801aaca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801aacc:	b141      	cbz	r1, 801aae0 <setvbuf+0x60>
 801aace:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801aad2:	4299      	cmp	r1, r3
 801aad4:	d002      	beq.n	801aadc <setvbuf+0x5c>
 801aad6:	4638      	mov	r0, r7
 801aad8:	f000 fa6c 	bl	801afb4 <_free_r>
 801aadc:	2300      	movs	r3, #0
 801aade:	6363      	str	r3, [r4, #52]	@ 0x34
 801aae0:	2300      	movs	r3, #0
 801aae2:	61a3      	str	r3, [r4, #24]
 801aae4:	6063      	str	r3, [r4, #4]
 801aae6:	89a3      	ldrh	r3, [r4, #12]
 801aae8:	061b      	lsls	r3, r3, #24
 801aaea:	d503      	bpl.n	801aaf4 <setvbuf+0x74>
 801aaec:	6921      	ldr	r1, [r4, #16]
 801aaee:	4638      	mov	r0, r7
 801aaf0:	f000 fa60 	bl	801afb4 <_free_r>
 801aaf4:	89a3      	ldrh	r3, [r4, #12]
 801aaf6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 801aafa:	f023 0303 	bic.w	r3, r3, #3
 801aafe:	f1b8 0f02 	cmp.w	r8, #2
 801ab02:	81a3      	strh	r3, [r4, #12]
 801ab04:	d061      	beq.n	801abca <setvbuf+0x14a>
 801ab06:	ab01      	add	r3, sp, #4
 801ab08:	466a      	mov	r2, sp
 801ab0a:	4621      	mov	r1, r4
 801ab0c:	4638      	mov	r0, r7
 801ab0e:	f001 f827 	bl	801bb60 <__swhatbuf_r>
 801ab12:	89a3      	ldrh	r3, [r4, #12]
 801ab14:	4318      	orrs	r0, r3
 801ab16:	81a0      	strh	r0, [r4, #12]
 801ab18:	bb2d      	cbnz	r5, 801ab66 <setvbuf+0xe6>
 801ab1a:	9d00      	ldr	r5, [sp, #0]
 801ab1c:	4628      	mov	r0, r5
 801ab1e:	f000 fa93 	bl	801b048 <malloc>
 801ab22:	4606      	mov	r6, r0
 801ab24:	2800      	cmp	r0, #0
 801ab26:	d152      	bne.n	801abce <setvbuf+0x14e>
 801ab28:	f8dd 9000 	ldr.w	r9, [sp]
 801ab2c:	45a9      	cmp	r9, r5
 801ab2e:	d140      	bne.n	801abb2 <setvbuf+0x132>
 801ab30:	f04f 35ff 	mov.w	r5, #4294967295
 801ab34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab38:	f043 0202 	orr.w	r2, r3, #2
 801ab3c:	81a2      	strh	r2, [r4, #12]
 801ab3e:	2200      	movs	r2, #0
 801ab40:	60a2      	str	r2, [r4, #8]
 801ab42:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 801ab46:	6022      	str	r2, [r4, #0]
 801ab48:	6122      	str	r2, [r4, #16]
 801ab4a:	2201      	movs	r2, #1
 801ab4c:	6162      	str	r2, [r4, #20]
 801ab4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ab50:	07d6      	lsls	r6, r2, #31
 801ab52:	d404      	bmi.n	801ab5e <setvbuf+0xde>
 801ab54:	0598      	lsls	r0, r3, #22
 801ab56:	d402      	bmi.n	801ab5e <setvbuf+0xde>
 801ab58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ab5a:	f000 fa1b 	bl	801af94 <__retarget_lock_release_recursive>
 801ab5e:	4628      	mov	r0, r5
 801ab60:	b003      	add	sp, #12
 801ab62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ab66:	2e00      	cmp	r6, #0
 801ab68:	d0d8      	beq.n	801ab1c <setvbuf+0x9c>
 801ab6a:	6a3b      	ldr	r3, [r7, #32]
 801ab6c:	b913      	cbnz	r3, 801ab74 <setvbuf+0xf4>
 801ab6e:	4638      	mov	r0, r7
 801ab70:	f7ff fee0 	bl	801a934 <__sinit>
 801ab74:	f1b8 0f01 	cmp.w	r8, #1
 801ab78:	bf08      	it	eq
 801ab7a:	89a3      	ldrheq	r3, [r4, #12]
 801ab7c:	6026      	str	r6, [r4, #0]
 801ab7e:	bf04      	itt	eq
 801ab80:	f043 0301 	orreq.w	r3, r3, #1
 801ab84:	81a3      	strheq	r3, [r4, #12]
 801ab86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab8a:	f013 0208 	ands.w	r2, r3, #8
 801ab8e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801ab92:	d01e      	beq.n	801abd2 <setvbuf+0x152>
 801ab94:	07d9      	lsls	r1, r3, #31
 801ab96:	bf41      	itttt	mi
 801ab98:	2200      	movmi	r2, #0
 801ab9a:	426d      	negmi	r5, r5
 801ab9c:	60a2      	strmi	r2, [r4, #8]
 801ab9e:	61a5      	strmi	r5, [r4, #24]
 801aba0:	bf58      	it	pl
 801aba2:	60a5      	strpl	r5, [r4, #8]
 801aba4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801aba6:	07d2      	lsls	r2, r2, #31
 801aba8:	d401      	bmi.n	801abae <setvbuf+0x12e>
 801abaa:	059b      	lsls	r3, r3, #22
 801abac:	d513      	bpl.n	801abd6 <setvbuf+0x156>
 801abae:	2500      	movs	r5, #0
 801abb0:	e7d5      	b.n	801ab5e <setvbuf+0xde>
 801abb2:	4648      	mov	r0, r9
 801abb4:	f000 fa48 	bl	801b048 <malloc>
 801abb8:	4606      	mov	r6, r0
 801abba:	2800      	cmp	r0, #0
 801abbc:	d0b8      	beq.n	801ab30 <setvbuf+0xb0>
 801abbe:	89a3      	ldrh	r3, [r4, #12]
 801abc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801abc4:	81a3      	strh	r3, [r4, #12]
 801abc6:	464d      	mov	r5, r9
 801abc8:	e7cf      	b.n	801ab6a <setvbuf+0xea>
 801abca:	2500      	movs	r5, #0
 801abcc:	e7b2      	b.n	801ab34 <setvbuf+0xb4>
 801abce:	46a9      	mov	r9, r5
 801abd0:	e7f5      	b.n	801abbe <setvbuf+0x13e>
 801abd2:	60a2      	str	r2, [r4, #8]
 801abd4:	e7e6      	b.n	801aba4 <setvbuf+0x124>
 801abd6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801abd8:	f000 f9dc 	bl	801af94 <__retarget_lock_release_recursive>
 801abdc:	e7e7      	b.n	801abae <setvbuf+0x12e>
 801abde:	f04f 35ff 	mov.w	r5, #4294967295
 801abe2:	e7bc      	b.n	801ab5e <setvbuf+0xde>
 801abe4:	24000254 	.word	0x24000254

0801abe8 <sniprintf>:
 801abe8:	b40c      	push	{r2, r3}
 801abea:	b530      	push	{r4, r5, lr}
 801abec:	4b18      	ldr	r3, [pc, #96]	@ (801ac50 <sniprintf+0x68>)
 801abee:	1e0c      	subs	r4, r1, #0
 801abf0:	681d      	ldr	r5, [r3, #0]
 801abf2:	b09d      	sub	sp, #116	@ 0x74
 801abf4:	da08      	bge.n	801ac08 <sniprintf+0x20>
 801abf6:	238b      	movs	r3, #139	@ 0x8b
 801abf8:	602b      	str	r3, [r5, #0]
 801abfa:	f04f 30ff 	mov.w	r0, #4294967295
 801abfe:	b01d      	add	sp, #116	@ 0x74
 801ac00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ac04:	b002      	add	sp, #8
 801ac06:	4770      	bx	lr
 801ac08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801ac0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ac10:	f04f 0300 	mov.w	r3, #0
 801ac14:	931b      	str	r3, [sp, #108]	@ 0x6c
 801ac16:	bf14      	ite	ne
 801ac18:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ac1c:	4623      	moveq	r3, r4
 801ac1e:	9304      	str	r3, [sp, #16]
 801ac20:	9307      	str	r3, [sp, #28]
 801ac22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ac26:	9002      	str	r0, [sp, #8]
 801ac28:	9006      	str	r0, [sp, #24]
 801ac2a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ac2e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ac30:	ab21      	add	r3, sp, #132	@ 0x84
 801ac32:	a902      	add	r1, sp, #8
 801ac34:	4628      	mov	r0, r5
 801ac36:	9301      	str	r3, [sp, #4]
 801ac38:	f000 fb1c 	bl	801b274 <_svfiprintf_r>
 801ac3c:	1c43      	adds	r3, r0, #1
 801ac3e:	bfbc      	itt	lt
 801ac40:	238b      	movlt	r3, #139	@ 0x8b
 801ac42:	602b      	strlt	r3, [r5, #0]
 801ac44:	2c00      	cmp	r4, #0
 801ac46:	d0da      	beq.n	801abfe <sniprintf+0x16>
 801ac48:	9b02      	ldr	r3, [sp, #8]
 801ac4a:	2200      	movs	r2, #0
 801ac4c:	701a      	strb	r2, [r3, #0]
 801ac4e:	e7d6      	b.n	801abfe <sniprintf+0x16>
 801ac50:	24000254 	.word	0x24000254

0801ac54 <__sread>:
 801ac54:	b510      	push	{r4, lr}
 801ac56:	460c      	mov	r4, r1
 801ac58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac5c:	f000 f94a 	bl	801aef4 <_read_r>
 801ac60:	2800      	cmp	r0, #0
 801ac62:	bfab      	itete	ge
 801ac64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ac66:	89a3      	ldrhlt	r3, [r4, #12]
 801ac68:	181b      	addge	r3, r3, r0
 801ac6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ac6e:	bfac      	ite	ge
 801ac70:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ac72:	81a3      	strhlt	r3, [r4, #12]
 801ac74:	bd10      	pop	{r4, pc}

0801ac76 <__swrite>:
 801ac76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac7a:	461f      	mov	r7, r3
 801ac7c:	898b      	ldrh	r3, [r1, #12]
 801ac7e:	05db      	lsls	r3, r3, #23
 801ac80:	4605      	mov	r5, r0
 801ac82:	460c      	mov	r4, r1
 801ac84:	4616      	mov	r6, r2
 801ac86:	d505      	bpl.n	801ac94 <__swrite+0x1e>
 801ac88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac8c:	2302      	movs	r3, #2
 801ac8e:	2200      	movs	r2, #0
 801ac90:	f000 f91e 	bl	801aed0 <_lseek_r>
 801ac94:	89a3      	ldrh	r3, [r4, #12]
 801ac96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ac9e:	81a3      	strh	r3, [r4, #12]
 801aca0:	4632      	mov	r2, r6
 801aca2:	463b      	mov	r3, r7
 801aca4:	4628      	mov	r0, r5
 801aca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801acaa:	f000 b935 	b.w	801af18 <_write_r>

0801acae <__sseek>:
 801acae:	b510      	push	{r4, lr}
 801acb0:	460c      	mov	r4, r1
 801acb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801acb6:	f000 f90b 	bl	801aed0 <_lseek_r>
 801acba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801acbe:	1c42      	adds	r2, r0, #1
 801acc0:	bf0b      	itete	eq
 801acc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801acc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801acca:	81a3      	strheq	r3, [r4, #12]
 801accc:	81a3      	strhne	r3, [r4, #12]
 801acce:	bf18      	it	ne
 801acd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801acd2:	bd10      	pop	{r4, pc}

0801acd4 <__sclose>:
 801acd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801acd8:	f000 b8ea 	b.w	801aeb0 <_close_r>

0801acdc <_vsniprintf_r>:
 801acdc:	b530      	push	{r4, r5, lr}
 801acde:	4614      	mov	r4, r2
 801ace0:	2c00      	cmp	r4, #0
 801ace2:	b09b      	sub	sp, #108	@ 0x6c
 801ace4:	4605      	mov	r5, r0
 801ace6:	461a      	mov	r2, r3
 801ace8:	da05      	bge.n	801acf6 <_vsniprintf_r+0x1a>
 801acea:	238b      	movs	r3, #139	@ 0x8b
 801acec:	6003      	str	r3, [r0, #0]
 801acee:	f04f 30ff 	mov.w	r0, #4294967295
 801acf2:	b01b      	add	sp, #108	@ 0x6c
 801acf4:	bd30      	pop	{r4, r5, pc}
 801acf6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801acfa:	f8ad 300c 	strh.w	r3, [sp, #12]
 801acfe:	f04f 0300 	mov.w	r3, #0
 801ad02:	9319      	str	r3, [sp, #100]	@ 0x64
 801ad04:	bf14      	ite	ne
 801ad06:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ad0a:	4623      	moveq	r3, r4
 801ad0c:	9302      	str	r3, [sp, #8]
 801ad0e:	9305      	str	r3, [sp, #20]
 801ad10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ad14:	9100      	str	r1, [sp, #0]
 801ad16:	9104      	str	r1, [sp, #16]
 801ad18:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ad1c:	4669      	mov	r1, sp
 801ad1e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ad20:	f000 faa8 	bl	801b274 <_svfiprintf_r>
 801ad24:	1c43      	adds	r3, r0, #1
 801ad26:	bfbc      	itt	lt
 801ad28:	238b      	movlt	r3, #139	@ 0x8b
 801ad2a:	602b      	strlt	r3, [r5, #0]
 801ad2c:	2c00      	cmp	r4, #0
 801ad2e:	d0e0      	beq.n	801acf2 <_vsniprintf_r+0x16>
 801ad30:	9b00      	ldr	r3, [sp, #0]
 801ad32:	2200      	movs	r2, #0
 801ad34:	701a      	strb	r2, [r3, #0]
 801ad36:	e7dc      	b.n	801acf2 <_vsniprintf_r+0x16>

0801ad38 <vsniprintf>:
 801ad38:	b507      	push	{r0, r1, r2, lr}
 801ad3a:	9300      	str	r3, [sp, #0]
 801ad3c:	4613      	mov	r3, r2
 801ad3e:	460a      	mov	r2, r1
 801ad40:	4601      	mov	r1, r0
 801ad42:	4803      	ldr	r0, [pc, #12]	@ (801ad50 <vsniprintf+0x18>)
 801ad44:	6800      	ldr	r0, [r0, #0]
 801ad46:	f7ff ffc9 	bl	801acdc <_vsniprintf_r>
 801ad4a:	b003      	add	sp, #12
 801ad4c:	f85d fb04 	ldr.w	pc, [sp], #4
 801ad50:	24000254 	.word	0x24000254

0801ad54 <__swbuf_r>:
 801ad54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad56:	460e      	mov	r6, r1
 801ad58:	4614      	mov	r4, r2
 801ad5a:	4605      	mov	r5, r0
 801ad5c:	b118      	cbz	r0, 801ad66 <__swbuf_r+0x12>
 801ad5e:	6a03      	ldr	r3, [r0, #32]
 801ad60:	b90b      	cbnz	r3, 801ad66 <__swbuf_r+0x12>
 801ad62:	f7ff fde7 	bl	801a934 <__sinit>
 801ad66:	69a3      	ldr	r3, [r4, #24]
 801ad68:	60a3      	str	r3, [r4, #8]
 801ad6a:	89a3      	ldrh	r3, [r4, #12]
 801ad6c:	071a      	lsls	r2, r3, #28
 801ad6e:	d501      	bpl.n	801ad74 <__swbuf_r+0x20>
 801ad70:	6923      	ldr	r3, [r4, #16]
 801ad72:	b943      	cbnz	r3, 801ad86 <__swbuf_r+0x32>
 801ad74:	4621      	mov	r1, r4
 801ad76:	4628      	mov	r0, r5
 801ad78:	f000 f82a 	bl	801add0 <__swsetup_r>
 801ad7c:	b118      	cbz	r0, 801ad86 <__swbuf_r+0x32>
 801ad7e:	f04f 37ff 	mov.w	r7, #4294967295
 801ad82:	4638      	mov	r0, r7
 801ad84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad86:	6823      	ldr	r3, [r4, #0]
 801ad88:	6922      	ldr	r2, [r4, #16]
 801ad8a:	1a98      	subs	r0, r3, r2
 801ad8c:	6963      	ldr	r3, [r4, #20]
 801ad8e:	b2f6      	uxtb	r6, r6
 801ad90:	4283      	cmp	r3, r0
 801ad92:	4637      	mov	r7, r6
 801ad94:	dc05      	bgt.n	801ada2 <__swbuf_r+0x4e>
 801ad96:	4621      	mov	r1, r4
 801ad98:	4628      	mov	r0, r5
 801ad9a:	f000 feb9 	bl	801bb10 <_fflush_r>
 801ad9e:	2800      	cmp	r0, #0
 801ada0:	d1ed      	bne.n	801ad7e <__swbuf_r+0x2a>
 801ada2:	68a3      	ldr	r3, [r4, #8]
 801ada4:	3b01      	subs	r3, #1
 801ada6:	60a3      	str	r3, [r4, #8]
 801ada8:	6823      	ldr	r3, [r4, #0]
 801adaa:	1c5a      	adds	r2, r3, #1
 801adac:	6022      	str	r2, [r4, #0]
 801adae:	701e      	strb	r6, [r3, #0]
 801adb0:	6962      	ldr	r2, [r4, #20]
 801adb2:	1c43      	adds	r3, r0, #1
 801adb4:	429a      	cmp	r2, r3
 801adb6:	d004      	beq.n	801adc2 <__swbuf_r+0x6e>
 801adb8:	89a3      	ldrh	r3, [r4, #12]
 801adba:	07db      	lsls	r3, r3, #31
 801adbc:	d5e1      	bpl.n	801ad82 <__swbuf_r+0x2e>
 801adbe:	2e0a      	cmp	r6, #10
 801adc0:	d1df      	bne.n	801ad82 <__swbuf_r+0x2e>
 801adc2:	4621      	mov	r1, r4
 801adc4:	4628      	mov	r0, r5
 801adc6:	f000 fea3 	bl	801bb10 <_fflush_r>
 801adca:	2800      	cmp	r0, #0
 801adcc:	d0d9      	beq.n	801ad82 <__swbuf_r+0x2e>
 801adce:	e7d6      	b.n	801ad7e <__swbuf_r+0x2a>

0801add0 <__swsetup_r>:
 801add0:	b538      	push	{r3, r4, r5, lr}
 801add2:	4b28      	ldr	r3, [pc, #160]	@ (801ae74 <__swsetup_r+0xa4>)
 801add4:	4605      	mov	r5, r0
 801add6:	6818      	ldr	r0, [r3, #0]
 801add8:	460c      	mov	r4, r1
 801adda:	b118      	cbz	r0, 801ade4 <__swsetup_r+0x14>
 801addc:	6a03      	ldr	r3, [r0, #32]
 801adde:	b90b      	cbnz	r3, 801ade4 <__swsetup_r+0x14>
 801ade0:	f7ff fda8 	bl	801a934 <__sinit>
 801ade4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ade8:	071a      	lsls	r2, r3, #28
 801adea:	d421      	bmi.n	801ae30 <__swsetup_r+0x60>
 801adec:	06d8      	lsls	r0, r3, #27
 801adee:	d407      	bmi.n	801ae00 <__swsetup_r+0x30>
 801adf0:	2209      	movs	r2, #9
 801adf2:	602a      	str	r2, [r5, #0]
 801adf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801adf8:	81a3      	strh	r3, [r4, #12]
 801adfa:	f04f 30ff 	mov.w	r0, #4294967295
 801adfe:	e030      	b.n	801ae62 <__swsetup_r+0x92>
 801ae00:	0759      	lsls	r1, r3, #29
 801ae02:	d512      	bpl.n	801ae2a <__swsetup_r+0x5a>
 801ae04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ae06:	b141      	cbz	r1, 801ae1a <__swsetup_r+0x4a>
 801ae08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ae0c:	4299      	cmp	r1, r3
 801ae0e:	d002      	beq.n	801ae16 <__swsetup_r+0x46>
 801ae10:	4628      	mov	r0, r5
 801ae12:	f000 f8cf 	bl	801afb4 <_free_r>
 801ae16:	2300      	movs	r3, #0
 801ae18:	6363      	str	r3, [r4, #52]	@ 0x34
 801ae1a:	2200      	movs	r2, #0
 801ae1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae20:	6062      	str	r2, [r4, #4]
 801ae22:	6922      	ldr	r2, [r4, #16]
 801ae24:	6022      	str	r2, [r4, #0]
 801ae26:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ae2a:	f043 0308 	orr.w	r3, r3, #8
 801ae2e:	81a3      	strh	r3, [r4, #12]
 801ae30:	6922      	ldr	r2, [r4, #16]
 801ae32:	b93a      	cbnz	r2, 801ae44 <__swsetup_r+0x74>
 801ae34:	059a      	lsls	r2, r3, #22
 801ae36:	d501      	bpl.n	801ae3c <__swsetup_r+0x6c>
 801ae38:	0618      	lsls	r0, r3, #24
 801ae3a:	d503      	bpl.n	801ae44 <__swsetup_r+0x74>
 801ae3c:	4621      	mov	r1, r4
 801ae3e:	4628      	mov	r0, r5
 801ae40:	f000 feb2 	bl	801bba8 <__smakebuf_r>
 801ae44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae48:	f013 0201 	ands.w	r2, r3, #1
 801ae4c:	d00a      	beq.n	801ae64 <__swsetup_r+0x94>
 801ae4e:	2200      	movs	r2, #0
 801ae50:	60a2      	str	r2, [r4, #8]
 801ae52:	6962      	ldr	r2, [r4, #20]
 801ae54:	4252      	negs	r2, r2
 801ae56:	61a2      	str	r2, [r4, #24]
 801ae58:	6922      	ldr	r2, [r4, #16]
 801ae5a:	b942      	cbnz	r2, 801ae6e <__swsetup_r+0x9e>
 801ae5c:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ae60:	d1c8      	bne.n	801adf4 <__swsetup_r+0x24>
 801ae62:	bd38      	pop	{r3, r4, r5, pc}
 801ae64:	0799      	lsls	r1, r3, #30
 801ae66:	bf58      	it	pl
 801ae68:	6962      	ldrpl	r2, [r4, #20]
 801ae6a:	60a2      	str	r2, [r4, #8]
 801ae6c:	e7f4      	b.n	801ae58 <__swsetup_r+0x88>
 801ae6e:	2000      	movs	r0, #0
 801ae70:	e7f7      	b.n	801ae62 <__swsetup_r+0x92>
 801ae72:	bf00      	nop
 801ae74:	24000254 	.word	0x24000254

0801ae78 <memset>:
 801ae78:	4402      	add	r2, r0
 801ae7a:	4603      	mov	r3, r0
 801ae7c:	4293      	cmp	r3, r2
 801ae7e:	d100      	bne.n	801ae82 <memset+0xa>
 801ae80:	4770      	bx	lr
 801ae82:	f803 1b01 	strb.w	r1, [r3], #1
 801ae86:	e7f9      	b.n	801ae7c <memset+0x4>

0801ae88 <strncpy>:
 801ae88:	b510      	push	{r4, lr}
 801ae8a:	3901      	subs	r1, #1
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	b132      	cbz	r2, 801ae9e <strncpy+0x16>
 801ae90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ae94:	f803 4b01 	strb.w	r4, [r3], #1
 801ae98:	3a01      	subs	r2, #1
 801ae9a:	2c00      	cmp	r4, #0
 801ae9c:	d1f7      	bne.n	801ae8e <strncpy+0x6>
 801ae9e:	441a      	add	r2, r3
 801aea0:	2100      	movs	r1, #0
 801aea2:	4293      	cmp	r3, r2
 801aea4:	d100      	bne.n	801aea8 <strncpy+0x20>
 801aea6:	bd10      	pop	{r4, pc}
 801aea8:	f803 1b01 	strb.w	r1, [r3], #1
 801aeac:	e7f9      	b.n	801aea2 <strncpy+0x1a>
	...

0801aeb0 <_close_r>:
 801aeb0:	b538      	push	{r3, r4, r5, lr}
 801aeb2:	4d06      	ldr	r5, [pc, #24]	@ (801aecc <_close_r+0x1c>)
 801aeb4:	2300      	movs	r3, #0
 801aeb6:	4604      	mov	r4, r0
 801aeb8:	4608      	mov	r0, r1
 801aeba:	602b      	str	r3, [r5, #0]
 801aebc:	f7e8 fa7c 	bl	80033b8 <_close>
 801aec0:	1c43      	adds	r3, r0, #1
 801aec2:	d102      	bne.n	801aeca <_close_r+0x1a>
 801aec4:	682b      	ldr	r3, [r5, #0]
 801aec6:	b103      	cbz	r3, 801aeca <_close_r+0x1a>
 801aec8:	6023      	str	r3, [r4, #0]
 801aeca:	bd38      	pop	{r3, r4, r5, pc}
 801aecc:	2401af44 	.word	0x2401af44

0801aed0 <_lseek_r>:
 801aed0:	b538      	push	{r3, r4, r5, lr}
 801aed2:	4d07      	ldr	r5, [pc, #28]	@ (801aef0 <_lseek_r+0x20>)
 801aed4:	4604      	mov	r4, r0
 801aed6:	4608      	mov	r0, r1
 801aed8:	4611      	mov	r1, r2
 801aeda:	2200      	movs	r2, #0
 801aedc:	602a      	str	r2, [r5, #0]
 801aede:	461a      	mov	r2, r3
 801aee0:	f7e8 fa91 	bl	8003406 <_lseek>
 801aee4:	1c43      	adds	r3, r0, #1
 801aee6:	d102      	bne.n	801aeee <_lseek_r+0x1e>
 801aee8:	682b      	ldr	r3, [r5, #0]
 801aeea:	b103      	cbz	r3, 801aeee <_lseek_r+0x1e>
 801aeec:	6023      	str	r3, [r4, #0]
 801aeee:	bd38      	pop	{r3, r4, r5, pc}
 801aef0:	2401af44 	.word	0x2401af44

0801aef4 <_read_r>:
 801aef4:	b538      	push	{r3, r4, r5, lr}
 801aef6:	4d07      	ldr	r5, [pc, #28]	@ (801af14 <_read_r+0x20>)
 801aef8:	4604      	mov	r4, r0
 801aefa:	4608      	mov	r0, r1
 801aefc:	4611      	mov	r1, r2
 801aefe:	2200      	movs	r2, #0
 801af00:	602a      	str	r2, [r5, #0]
 801af02:	461a      	mov	r2, r3
 801af04:	f7e8 fa08 	bl	8003318 <_read>
 801af08:	1c43      	adds	r3, r0, #1
 801af0a:	d102      	bne.n	801af12 <_read_r+0x1e>
 801af0c:	682b      	ldr	r3, [r5, #0]
 801af0e:	b103      	cbz	r3, 801af12 <_read_r+0x1e>
 801af10:	6023      	str	r3, [r4, #0]
 801af12:	bd38      	pop	{r3, r4, r5, pc}
 801af14:	2401af44 	.word	0x2401af44

0801af18 <_write_r>:
 801af18:	b538      	push	{r3, r4, r5, lr}
 801af1a:	4d07      	ldr	r5, [pc, #28]	@ (801af38 <_write_r+0x20>)
 801af1c:	4604      	mov	r4, r0
 801af1e:	4608      	mov	r0, r1
 801af20:	4611      	mov	r1, r2
 801af22:	2200      	movs	r2, #0
 801af24:	602a      	str	r2, [r5, #0]
 801af26:	461a      	mov	r2, r3
 801af28:	f7e8 fa13 	bl	8003352 <_write>
 801af2c:	1c43      	adds	r3, r0, #1
 801af2e:	d102      	bne.n	801af36 <_write_r+0x1e>
 801af30:	682b      	ldr	r3, [r5, #0]
 801af32:	b103      	cbz	r3, 801af36 <_write_r+0x1e>
 801af34:	6023      	str	r3, [r4, #0]
 801af36:	bd38      	pop	{r3, r4, r5, pc}
 801af38:	2401af44 	.word	0x2401af44

0801af3c <__errno>:
 801af3c:	4b01      	ldr	r3, [pc, #4]	@ (801af44 <__errno+0x8>)
 801af3e:	6818      	ldr	r0, [r3, #0]
 801af40:	4770      	bx	lr
 801af42:	bf00      	nop
 801af44:	24000254 	.word	0x24000254

0801af48 <__libc_init_array>:
 801af48:	b570      	push	{r4, r5, r6, lr}
 801af4a:	4b0d      	ldr	r3, [pc, #52]	@ (801af80 <__libc_init_array+0x38>)
 801af4c:	4d0d      	ldr	r5, [pc, #52]	@ (801af84 <__libc_init_array+0x3c>)
 801af4e:	1b5b      	subs	r3, r3, r5
 801af50:	109c      	asrs	r4, r3, #2
 801af52:	2600      	movs	r6, #0
 801af54:	42a6      	cmp	r6, r4
 801af56:	d109      	bne.n	801af6c <__libc_init_array+0x24>
 801af58:	f001 f85c 	bl	801c014 <_init>
 801af5c:	4d0a      	ldr	r5, [pc, #40]	@ (801af88 <__libc_init_array+0x40>)
 801af5e:	4b0b      	ldr	r3, [pc, #44]	@ (801af8c <__libc_init_array+0x44>)
 801af60:	1b5b      	subs	r3, r3, r5
 801af62:	109c      	asrs	r4, r3, #2
 801af64:	2600      	movs	r6, #0
 801af66:	42a6      	cmp	r6, r4
 801af68:	d105      	bne.n	801af76 <__libc_init_array+0x2e>
 801af6a:	bd70      	pop	{r4, r5, r6, pc}
 801af6c:	f855 3b04 	ldr.w	r3, [r5], #4
 801af70:	4798      	blx	r3
 801af72:	3601      	adds	r6, #1
 801af74:	e7ee      	b.n	801af54 <__libc_init_array+0xc>
 801af76:	f855 3b04 	ldr.w	r3, [r5], #4
 801af7a:	4798      	blx	r3
 801af7c:	3601      	adds	r6, #1
 801af7e:	e7f2      	b.n	801af66 <__libc_init_array+0x1e>
 801af80:	0801efc0 	.word	0x0801efc0
 801af84:	0801efc0 	.word	0x0801efc0
 801af88:	0801efc0 	.word	0x0801efc0
 801af8c:	0801efc4 	.word	0x0801efc4

0801af90 <__retarget_lock_init_recursive>:
 801af90:	4770      	bx	lr

0801af92 <__retarget_lock_acquire_recursive>:
 801af92:	4770      	bx	lr

0801af94 <__retarget_lock_release_recursive>:
 801af94:	4770      	bx	lr

0801af96 <memcpy>:
 801af96:	440a      	add	r2, r1
 801af98:	4291      	cmp	r1, r2
 801af9a:	f100 33ff 	add.w	r3, r0, #4294967295
 801af9e:	d100      	bne.n	801afa2 <memcpy+0xc>
 801afa0:	4770      	bx	lr
 801afa2:	b510      	push	{r4, lr}
 801afa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801afa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801afac:	4291      	cmp	r1, r2
 801afae:	d1f9      	bne.n	801afa4 <memcpy+0xe>
 801afb0:	bd10      	pop	{r4, pc}
	...

0801afb4 <_free_r>:
 801afb4:	b538      	push	{r3, r4, r5, lr}
 801afb6:	4605      	mov	r5, r0
 801afb8:	2900      	cmp	r1, #0
 801afba:	d041      	beq.n	801b040 <_free_r+0x8c>
 801afbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801afc0:	1f0c      	subs	r4, r1, #4
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	bfb8      	it	lt
 801afc6:	18e4      	addlt	r4, r4, r3
 801afc8:	f000 f8e8 	bl	801b19c <__malloc_lock>
 801afcc:	4a1d      	ldr	r2, [pc, #116]	@ (801b044 <_free_r+0x90>)
 801afce:	6813      	ldr	r3, [r2, #0]
 801afd0:	b933      	cbnz	r3, 801afe0 <_free_r+0x2c>
 801afd2:	6063      	str	r3, [r4, #4]
 801afd4:	6014      	str	r4, [r2, #0]
 801afd6:	4628      	mov	r0, r5
 801afd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801afdc:	f000 b8e4 	b.w	801b1a8 <__malloc_unlock>
 801afe0:	42a3      	cmp	r3, r4
 801afe2:	d908      	bls.n	801aff6 <_free_r+0x42>
 801afe4:	6820      	ldr	r0, [r4, #0]
 801afe6:	1821      	adds	r1, r4, r0
 801afe8:	428b      	cmp	r3, r1
 801afea:	bf01      	itttt	eq
 801afec:	6819      	ldreq	r1, [r3, #0]
 801afee:	685b      	ldreq	r3, [r3, #4]
 801aff0:	1809      	addeq	r1, r1, r0
 801aff2:	6021      	streq	r1, [r4, #0]
 801aff4:	e7ed      	b.n	801afd2 <_free_r+0x1e>
 801aff6:	461a      	mov	r2, r3
 801aff8:	685b      	ldr	r3, [r3, #4]
 801affa:	b10b      	cbz	r3, 801b000 <_free_r+0x4c>
 801affc:	42a3      	cmp	r3, r4
 801affe:	d9fa      	bls.n	801aff6 <_free_r+0x42>
 801b000:	6811      	ldr	r1, [r2, #0]
 801b002:	1850      	adds	r0, r2, r1
 801b004:	42a0      	cmp	r0, r4
 801b006:	d10b      	bne.n	801b020 <_free_r+0x6c>
 801b008:	6820      	ldr	r0, [r4, #0]
 801b00a:	4401      	add	r1, r0
 801b00c:	1850      	adds	r0, r2, r1
 801b00e:	4283      	cmp	r3, r0
 801b010:	6011      	str	r1, [r2, #0]
 801b012:	d1e0      	bne.n	801afd6 <_free_r+0x22>
 801b014:	6818      	ldr	r0, [r3, #0]
 801b016:	685b      	ldr	r3, [r3, #4]
 801b018:	6053      	str	r3, [r2, #4]
 801b01a:	4408      	add	r0, r1
 801b01c:	6010      	str	r0, [r2, #0]
 801b01e:	e7da      	b.n	801afd6 <_free_r+0x22>
 801b020:	d902      	bls.n	801b028 <_free_r+0x74>
 801b022:	230c      	movs	r3, #12
 801b024:	602b      	str	r3, [r5, #0]
 801b026:	e7d6      	b.n	801afd6 <_free_r+0x22>
 801b028:	6820      	ldr	r0, [r4, #0]
 801b02a:	1821      	adds	r1, r4, r0
 801b02c:	428b      	cmp	r3, r1
 801b02e:	bf04      	itt	eq
 801b030:	6819      	ldreq	r1, [r3, #0]
 801b032:	685b      	ldreq	r3, [r3, #4]
 801b034:	6063      	str	r3, [r4, #4]
 801b036:	bf04      	itt	eq
 801b038:	1809      	addeq	r1, r1, r0
 801b03a:	6021      	streq	r1, [r4, #0]
 801b03c:	6054      	str	r4, [r2, #4]
 801b03e:	e7ca      	b.n	801afd6 <_free_r+0x22>
 801b040:	bd38      	pop	{r3, r4, r5, pc}
 801b042:	bf00      	nop
 801b044:	2401af50 	.word	0x2401af50

0801b048 <malloc>:
 801b048:	4b02      	ldr	r3, [pc, #8]	@ (801b054 <malloc+0xc>)
 801b04a:	4601      	mov	r1, r0
 801b04c:	6818      	ldr	r0, [r3, #0]
 801b04e:	f000 b825 	b.w	801b09c <_malloc_r>
 801b052:	bf00      	nop
 801b054:	24000254 	.word	0x24000254

0801b058 <sbrk_aligned>:
 801b058:	b570      	push	{r4, r5, r6, lr}
 801b05a:	4e0f      	ldr	r6, [pc, #60]	@ (801b098 <sbrk_aligned+0x40>)
 801b05c:	460c      	mov	r4, r1
 801b05e:	6831      	ldr	r1, [r6, #0]
 801b060:	4605      	mov	r5, r0
 801b062:	b911      	cbnz	r1, 801b06a <sbrk_aligned+0x12>
 801b064:	f000 fe14 	bl	801bc90 <_sbrk_r>
 801b068:	6030      	str	r0, [r6, #0]
 801b06a:	4621      	mov	r1, r4
 801b06c:	4628      	mov	r0, r5
 801b06e:	f000 fe0f 	bl	801bc90 <_sbrk_r>
 801b072:	1c43      	adds	r3, r0, #1
 801b074:	d103      	bne.n	801b07e <sbrk_aligned+0x26>
 801b076:	f04f 34ff 	mov.w	r4, #4294967295
 801b07a:	4620      	mov	r0, r4
 801b07c:	bd70      	pop	{r4, r5, r6, pc}
 801b07e:	1cc4      	adds	r4, r0, #3
 801b080:	f024 0403 	bic.w	r4, r4, #3
 801b084:	42a0      	cmp	r0, r4
 801b086:	d0f8      	beq.n	801b07a <sbrk_aligned+0x22>
 801b088:	1a21      	subs	r1, r4, r0
 801b08a:	4628      	mov	r0, r5
 801b08c:	f000 fe00 	bl	801bc90 <_sbrk_r>
 801b090:	3001      	adds	r0, #1
 801b092:	d1f2      	bne.n	801b07a <sbrk_aligned+0x22>
 801b094:	e7ef      	b.n	801b076 <sbrk_aligned+0x1e>
 801b096:	bf00      	nop
 801b098:	2401af4c 	.word	0x2401af4c

0801b09c <_malloc_r>:
 801b09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0a0:	1ccd      	adds	r5, r1, #3
 801b0a2:	f025 0503 	bic.w	r5, r5, #3
 801b0a6:	3508      	adds	r5, #8
 801b0a8:	2d0c      	cmp	r5, #12
 801b0aa:	bf38      	it	cc
 801b0ac:	250c      	movcc	r5, #12
 801b0ae:	2d00      	cmp	r5, #0
 801b0b0:	4606      	mov	r6, r0
 801b0b2:	db01      	blt.n	801b0b8 <_malloc_r+0x1c>
 801b0b4:	42a9      	cmp	r1, r5
 801b0b6:	d904      	bls.n	801b0c2 <_malloc_r+0x26>
 801b0b8:	230c      	movs	r3, #12
 801b0ba:	6033      	str	r3, [r6, #0]
 801b0bc:	2000      	movs	r0, #0
 801b0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b0c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b198 <_malloc_r+0xfc>
 801b0c6:	f000 f869 	bl	801b19c <__malloc_lock>
 801b0ca:	f8d8 3000 	ldr.w	r3, [r8]
 801b0ce:	461c      	mov	r4, r3
 801b0d0:	bb44      	cbnz	r4, 801b124 <_malloc_r+0x88>
 801b0d2:	4629      	mov	r1, r5
 801b0d4:	4630      	mov	r0, r6
 801b0d6:	f7ff ffbf 	bl	801b058 <sbrk_aligned>
 801b0da:	1c43      	adds	r3, r0, #1
 801b0dc:	4604      	mov	r4, r0
 801b0de:	d158      	bne.n	801b192 <_malloc_r+0xf6>
 801b0e0:	f8d8 4000 	ldr.w	r4, [r8]
 801b0e4:	4627      	mov	r7, r4
 801b0e6:	2f00      	cmp	r7, #0
 801b0e8:	d143      	bne.n	801b172 <_malloc_r+0xd6>
 801b0ea:	2c00      	cmp	r4, #0
 801b0ec:	d04b      	beq.n	801b186 <_malloc_r+0xea>
 801b0ee:	6823      	ldr	r3, [r4, #0]
 801b0f0:	4639      	mov	r1, r7
 801b0f2:	4630      	mov	r0, r6
 801b0f4:	eb04 0903 	add.w	r9, r4, r3
 801b0f8:	f000 fdca 	bl	801bc90 <_sbrk_r>
 801b0fc:	4581      	cmp	r9, r0
 801b0fe:	d142      	bne.n	801b186 <_malloc_r+0xea>
 801b100:	6821      	ldr	r1, [r4, #0]
 801b102:	1a6d      	subs	r5, r5, r1
 801b104:	4629      	mov	r1, r5
 801b106:	4630      	mov	r0, r6
 801b108:	f7ff ffa6 	bl	801b058 <sbrk_aligned>
 801b10c:	3001      	adds	r0, #1
 801b10e:	d03a      	beq.n	801b186 <_malloc_r+0xea>
 801b110:	6823      	ldr	r3, [r4, #0]
 801b112:	442b      	add	r3, r5
 801b114:	6023      	str	r3, [r4, #0]
 801b116:	f8d8 3000 	ldr.w	r3, [r8]
 801b11a:	685a      	ldr	r2, [r3, #4]
 801b11c:	bb62      	cbnz	r2, 801b178 <_malloc_r+0xdc>
 801b11e:	f8c8 7000 	str.w	r7, [r8]
 801b122:	e00f      	b.n	801b144 <_malloc_r+0xa8>
 801b124:	6822      	ldr	r2, [r4, #0]
 801b126:	1b52      	subs	r2, r2, r5
 801b128:	d420      	bmi.n	801b16c <_malloc_r+0xd0>
 801b12a:	2a0b      	cmp	r2, #11
 801b12c:	d917      	bls.n	801b15e <_malloc_r+0xc2>
 801b12e:	1961      	adds	r1, r4, r5
 801b130:	42a3      	cmp	r3, r4
 801b132:	6025      	str	r5, [r4, #0]
 801b134:	bf18      	it	ne
 801b136:	6059      	strne	r1, [r3, #4]
 801b138:	6863      	ldr	r3, [r4, #4]
 801b13a:	bf08      	it	eq
 801b13c:	f8c8 1000 	streq.w	r1, [r8]
 801b140:	5162      	str	r2, [r4, r5]
 801b142:	604b      	str	r3, [r1, #4]
 801b144:	4630      	mov	r0, r6
 801b146:	f000 f82f 	bl	801b1a8 <__malloc_unlock>
 801b14a:	f104 000b 	add.w	r0, r4, #11
 801b14e:	1d23      	adds	r3, r4, #4
 801b150:	f020 0007 	bic.w	r0, r0, #7
 801b154:	1ac2      	subs	r2, r0, r3
 801b156:	bf1c      	itt	ne
 801b158:	1a1b      	subne	r3, r3, r0
 801b15a:	50a3      	strne	r3, [r4, r2]
 801b15c:	e7af      	b.n	801b0be <_malloc_r+0x22>
 801b15e:	6862      	ldr	r2, [r4, #4]
 801b160:	42a3      	cmp	r3, r4
 801b162:	bf0c      	ite	eq
 801b164:	f8c8 2000 	streq.w	r2, [r8]
 801b168:	605a      	strne	r2, [r3, #4]
 801b16a:	e7eb      	b.n	801b144 <_malloc_r+0xa8>
 801b16c:	4623      	mov	r3, r4
 801b16e:	6864      	ldr	r4, [r4, #4]
 801b170:	e7ae      	b.n	801b0d0 <_malloc_r+0x34>
 801b172:	463c      	mov	r4, r7
 801b174:	687f      	ldr	r7, [r7, #4]
 801b176:	e7b6      	b.n	801b0e6 <_malloc_r+0x4a>
 801b178:	461a      	mov	r2, r3
 801b17a:	685b      	ldr	r3, [r3, #4]
 801b17c:	42a3      	cmp	r3, r4
 801b17e:	d1fb      	bne.n	801b178 <_malloc_r+0xdc>
 801b180:	2300      	movs	r3, #0
 801b182:	6053      	str	r3, [r2, #4]
 801b184:	e7de      	b.n	801b144 <_malloc_r+0xa8>
 801b186:	230c      	movs	r3, #12
 801b188:	6033      	str	r3, [r6, #0]
 801b18a:	4630      	mov	r0, r6
 801b18c:	f000 f80c 	bl	801b1a8 <__malloc_unlock>
 801b190:	e794      	b.n	801b0bc <_malloc_r+0x20>
 801b192:	6005      	str	r5, [r0, #0]
 801b194:	e7d6      	b.n	801b144 <_malloc_r+0xa8>
 801b196:	bf00      	nop
 801b198:	2401af50 	.word	0x2401af50

0801b19c <__malloc_lock>:
 801b19c:	4801      	ldr	r0, [pc, #4]	@ (801b1a4 <__malloc_lock+0x8>)
 801b19e:	f7ff bef8 	b.w	801af92 <__retarget_lock_acquire_recursive>
 801b1a2:	bf00      	nop
 801b1a4:	2401af48 	.word	0x2401af48

0801b1a8 <__malloc_unlock>:
 801b1a8:	4801      	ldr	r0, [pc, #4]	@ (801b1b0 <__malloc_unlock+0x8>)
 801b1aa:	f7ff bef3 	b.w	801af94 <__retarget_lock_release_recursive>
 801b1ae:	bf00      	nop
 801b1b0:	2401af48 	.word	0x2401af48

0801b1b4 <__ssputs_r>:
 801b1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1b8:	688e      	ldr	r6, [r1, #8]
 801b1ba:	461f      	mov	r7, r3
 801b1bc:	42be      	cmp	r6, r7
 801b1be:	4682      	mov	sl, r0
 801b1c0:	460c      	mov	r4, r1
 801b1c2:	4690      	mov	r8, r2
 801b1c4:	4633      	mov	r3, r6
 801b1c6:	d853      	bhi.n	801b270 <__ssputs_r+0xbc>
 801b1c8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801b1cc:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 801b1d0:	d02b      	beq.n	801b22a <__ssputs_r+0x76>
 801b1d2:	6965      	ldr	r5, [r4, #20]
 801b1d4:	6823      	ldr	r3, [r4, #0]
 801b1d6:	6909      	ldr	r1, [r1, #16]
 801b1d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b1dc:	eba3 0901 	sub.w	r9, r3, r1
 801b1e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b1e4:	1c7b      	adds	r3, r7, #1
 801b1e6:	106d      	asrs	r5, r5, #1
 801b1e8:	444b      	add	r3, r9
 801b1ea:	42ab      	cmp	r3, r5
 801b1ec:	462a      	mov	r2, r5
 801b1ee:	bf84      	itt	hi
 801b1f0:	461d      	movhi	r5, r3
 801b1f2:	462a      	movhi	r2, r5
 801b1f4:	0543      	lsls	r3, r0, #21
 801b1f6:	d527      	bpl.n	801b248 <__ssputs_r+0x94>
 801b1f8:	4611      	mov	r1, r2
 801b1fa:	4650      	mov	r0, sl
 801b1fc:	f7ff ff4e 	bl	801b09c <_malloc_r>
 801b200:	4606      	mov	r6, r0
 801b202:	b358      	cbz	r0, 801b25c <__ssputs_r+0xa8>
 801b204:	6921      	ldr	r1, [r4, #16]
 801b206:	464a      	mov	r2, r9
 801b208:	f7ff fec5 	bl	801af96 <memcpy>
 801b20c:	89a3      	ldrh	r3, [r4, #12]
 801b20e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b216:	81a3      	strh	r3, [r4, #12]
 801b218:	6126      	str	r6, [r4, #16]
 801b21a:	6165      	str	r5, [r4, #20]
 801b21c:	444e      	add	r6, r9
 801b21e:	eba5 0509 	sub.w	r5, r5, r9
 801b222:	6026      	str	r6, [r4, #0]
 801b224:	60a5      	str	r5, [r4, #8]
 801b226:	463e      	mov	r6, r7
 801b228:	463b      	mov	r3, r7
 801b22a:	461f      	mov	r7, r3
 801b22c:	6820      	ldr	r0, [r4, #0]
 801b22e:	463a      	mov	r2, r7
 801b230:	4641      	mov	r1, r8
 801b232:	f000 fcf2 	bl	801bc1a <memmove>
 801b236:	68a3      	ldr	r3, [r4, #8]
 801b238:	1b9b      	subs	r3, r3, r6
 801b23a:	60a3      	str	r3, [r4, #8]
 801b23c:	6823      	ldr	r3, [r4, #0]
 801b23e:	443b      	add	r3, r7
 801b240:	6023      	str	r3, [r4, #0]
 801b242:	2000      	movs	r0, #0
 801b244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b248:	4650      	mov	r0, sl
 801b24a:	f000 fd31 	bl	801bcb0 <_realloc_r>
 801b24e:	4606      	mov	r6, r0
 801b250:	2800      	cmp	r0, #0
 801b252:	d1e1      	bne.n	801b218 <__ssputs_r+0x64>
 801b254:	6921      	ldr	r1, [r4, #16]
 801b256:	4650      	mov	r0, sl
 801b258:	f7ff feac 	bl	801afb4 <_free_r>
 801b25c:	230c      	movs	r3, #12
 801b25e:	f8ca 3000 	str.w	r3, [sl]
 801b262:	89a3      	ldrh	r3, [r4, #12]
 801b264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b268:	81a3      	strh	r3, [r4, #12]
 801b26a:	f04f 30ff 	mov.w	r0, #4294967295
 801b26e:	e7e9      	b.n	801b244 <__ssputs_r+0x90>
 801b270:	463e      	mov	r6, r7
 801b272:	e7db      	b.n	801b22c <__ssputs_r+0x78>

0801b274 <_svfiprintf_r>:
 801b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b278:	4698      	mov	r8, r3
 801b27a:	898b      	ldrh	r3, [r1, #12]
 801b27c:	061b      	lsls	r3, r3, #24
 801b27e:	b09d      	sub	sp, #116	@ 0x74
 801b280:	4607      	mov	r7, r0
 801b282:	460d      	mov	r5, r1
 801b284:	4614      	mov	r4, r2
 801b286:	d510      	bpl.n	801b2aa <_svfiprintf_r+0x36>
 801b288:	690b      	ldr	r3, [r1, #16]
 801b28a:	b973      	cbnz	r3, 801b2aa <_svfiprintf_r+0x36>
 801b28c:	2140      	movs	r1, #64	@ 0x40
 801b28e:	f7ff ff05 	bl	801b09c <_malloc_r>
 801b292:	6028      	str	r0, [r5, #0]
 801b294:	6128      	str	r0, [r5, #16]
 801b296:	b930      	cbnz	r0, 801b2a6 <_svfiprintf_r+0x32>
 801b298:	230c      	movs	r3, #12
 801b29a:	603b      	str	r3, [r7, #0]
 801b29c:	f04f 30ff 	mov.w	r0, #4294967295
 801b2a0:	b01d      	add	sp, #116	@ 0x74
 801b2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2a6:	2340      	movs	r3, #64	@ 0x40
 801b2a8:	616b      	str	r3, [r5, #20]
 801b2aa:	2300      	movs	r3, #0
 801b2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 801b2ae:	2320      	movs	r3, #32
 801b2b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b2b4:	f8cd 800c 	str.w	r8, [sp, #12]
 801b2b8:	2330      	movs	r3, #48	@ 0x30
 801b2ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b458 <_svfiprintf_r+0x1e4>
 801b2be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b2c2:	f04f 0901 	mov.w	r9, #1
 801b2c6:	4623      	mov	r3, r4
 801b2c8:	469a      	mov	sl, r3
 801b2ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2ce:	b10a      	cbz	r2, 801b2d4 <_svfiprintf_r+0x60>
 801b2d0:	2a25      	cmp	r2, #37	@ 0x25
 801b2d2:	d1f9      	bne.n	801b2c8 <_svfiprintf_r+0x54>
 801b2d4:	ebba 0b04 	subs.w	fp, sl, r4
 801b2d8:	d00b      	beq.n	801b2f2 <_svfiprintf_r+0x7e>
 801b2da:	465b      	mov	r3, fp
 801b2dc:	4622      	mov	r2, r4
 801b2de:	4629      	mov	r1, r5
 801b2e0:	4638      	mov	r0, r7
 801b2e2:	f7ff ff67 	bl	801b1b4 <__ssputs_r>
 801b2e6:	3001      	adds	r0, #1
 801b2e8:	f000 80a7 	beq.w	801b43a <_svfiprintf_r+0x1c6>
 801b2ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b2ee:	445a      	add	r2, fp
 801b2f0:	9209      	str	r2, [sp, #36]	@ 0x24
 801b2f2:	f89a 3000 	ldrb.w	r3, [sl]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	f000 809f 	beq.w	801b43a <_svfiprintf_r+0x1c6>
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	f04f 32ff 	mov.w	r2, #4294967295
 801b302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b306:	f10a 0a01 	add.w	sl, sl, #1
 801b30a:	9304      	str	r3, [sp, #16]
 801b30c:	9307      	str	r3, [sp, #28]
 801b30e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b312:	931a      	str	r3, [sp, #104]	@ 0x68
 801b314:	4654      	mov	r4, sl
 801b316:	2205      	movs	r2, #5
 801b318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b31c:	484e      	ldr	r0, [pc, #312]	@ (801b458 <_svfiprintf_r+0x1e4>)
 801b31e:	f7e4 ffdf 	bl	80002e0 <memchr>
 801b322:	9a04      	ldr	r2, [sp, #16]
 801b324:	b9d8      	cbnz	r0, 801b35e <_svfiprintf_r+0xea>
 801b326:	06d0      	lsls	r0, r2, #27
 801b328:	bf44      	itt	mi
 801b32a:	2320      	movmi	r3, #32
 801b32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b330:	0711      	lsls	r1, r2, #28
 801b332:	bf44      	itt	mi
 801b334:	232b      	movmi	r3, #43	@ 0x2b
 801b336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b33a:	f89a 3000 	ldrb.w	r3, [sl]
 801b33e:	2b2a      	cmp	r3, #42	@ 0x2a
 801b340:	d015      	beq.n	801b36e <_svfiprintf_r+0xfa>
 801b342:	9a07      	ldr	r2, [sp, #28]
 801b344:	4654      	mov	r4, sl
 801b346:	2000      	movs	r0, #0
 801b348:	f04f 0c0a 	mov.w	ip, #10
 801b34c:	4621      	mov	r1, r4
 801b34e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b352:	3b30      	subs	r3, #48	@ 0x30
 801b354:	2b09      	cmp	r3, #9
 801b356:	d94b      	bls.n	801b3f0 <_svfiprintf_r+0x17c>
 801b358:	b1b0      	cbz	r0, 801b388 <_svfiprintf_r+0x114>
 801b35a:	9207      	str	r2, [sp, #28]
 801b35c:	e014      	b.n	801b388 <_svfiprintf_r+0x114>
 801b35e:	eba0 0308 	sub.w	r3, r0, r8
 801b362:	fa09 f303 	lsl.w	r3, r9, r3
 801b366:	4313      	orrs	r3, r2
 801b368:	9304      	str	r3, [sp, #16]
 801b36a:	46a2      	mov	sl, r4
 801b36c:	e7d2      	b.n	801b314 <_svfiprintf_r+0xa0>
 801b36e:	9b03      	ldr	r3, [sp, #12]
 801b370:	1d19      	adds	r1, r3, #4
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	9103      	str	r1, [sp, #12]
 801b376:	2b00      	cmp	r3, #0
 801b378:	bfbb      	ittet	lt
 801b37a:	425b      	neglt	r3, r3
 801b37c:	f042 0202 	orrlt.w	r2, r2, #2
 801b380:	9307      	strge	r3, [sp, #28]
 801b382:	9307      	strlt	r3, [sp, #28]
 801b384:	bfb8      	it	lt
 801b386:	9204      	strlt	r2, [sp, #16]
 801b388:	7823      	ldrb	r3, [r4, #0]
 801b38a:	2b2e      	cmp	r3, #46	@ 0x2e
 801b38c:	d10a      	bne.n	801b3a4 <_svfiprintf_r+0x130>
 801b38e:	7863      	ldrb	r3, [r4, #1]
 801b390:	2b2a      	cmp	r3, #42	@ 0x2a
 801b392:	d132      	bne.n	801b3fa <_svfiprintf_r+0x186>
 801b394:	9b03      	ldr	r3, [sp, #12]
 801b396:	1d1a      	adds	r2, r3, #4
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	9203      	str	r2, [sp, #12]
 801b39c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b3a0:	3402      	adds	r4, #2
 801b3a2:	9305      	str	r3, [sp, #20]
 801b3a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b468 <_svfiprintf_r+0x1f4>
 801b3a8:	7821      	ldrb	r1, [r4, #0]
 801b3aa:	2203      	movs	r2, #3
 801b3ac:	4650      	mov	r0, sl
 801b3ae:	f7e4 ff97 	bl	80002e0 <memchr>
 801b3b2:	b138      	cbz	r0, 801b3c4 <_svfiprintf_r+0x150>
 801b3b4:	9b04      	ldr	r3, [sp, #16]
 801b3b6:	eba0 000a 	sub.w	r0, r0, sl
 801b3ba:	2240      	movs	r2, #64	@ 0x40
 801b3bc:	4082      	lsls	r2, r0
 801b3be:	4313      	orrs	r3, r2
 801b3c0:	3401      	adds	r4, #1
 801b3c2:	9304      	str	r3, [sp, #16]
 801b3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b3c8:	4824      	ldr	r0, [pc, #144]	@ (801b45c <_svfiprintf_r+0x1e8>)
 801b3ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b3ce:	2206      	movs	r2, #6
 801b3d0:	f7e4 ff86 	bl	80002e0 <memchr>
 801b3d4:	2800      	cmp	r0, #0
 801b3d6:	d036      	beq.n	801b446 <_svfiprintf_r+0x1d2>
 801b3d8:	4b21      	ldr	r3, [pc, #132]	@ (801b460 <_svfiprintf_r+0x1ec>)
 801b3da:	bb1b      	cbnz	r3, 801b424 <_svfiprintf_r+0x1b0>
 801b3dc:	9b03      	ldr	r3, [sp, #12]
 801b3de:	3307      	adds	r3, #7
 801b3e0:	f023 0307 	bic.w	r3, r3, #7
 801b3e4:	3308      	adds	r3, #8
 801b3e6:	9303      	str	r3, [sp, #12]
 801b3e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b3ea:	4433      	add	r3, r6
 801b3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 801b3ee:	e76a      	b.n	801b2c6 <_svfiprintf_r+0x52>
 801b3f0:	fb0c 3202 	mla	r2, ip, r2, r3
 801b3f4:	460c      	mov	r4, r1
 801b3f6:	2001      	movs	r0, #1
 801b3f8:	e7a8      	b.n	801b34c <_svfiprintf_r+0xd8>
 801b3fa:	2300      	movs	r3, #0
 801b3fc:	3401      	adds	r4, #1
 801b3fe:	9305      	str	r3, [sp, #20]
 801b400:	4619      	mov	r1, r3
 801b402:	f04f 0c0a 	mov.w	ip, #10
 801b406:	4620      	mov	r0, r4
 801b408:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b40c:	3a30      	subs	r2, #48	@ 0x30
 801b40e:	2a09      	cmp	r2, #9
 801b410:	d903      	bls.n	801b41a <_svfiprintf_r+0x1a6>
 801b412:	2b00      	cmp	r3, #0
 801b414:	d0c6      	beq.n	801b3a4 <_svfiprintf_r+0x130>
 801b416:	9105      	str	r1, [sp, #20]
 801b418:	e7c4      	b.n	801b3a4 <_svfiprintf_r+0x130>
 801b41a:	fb0c 2101 	mla	r1, ip, r1, r2
 801b41e:	4604      	mov	r4, r0
 801b420:	2301      	movs	r3, #1
 801b422:	e7f0      	b.n	801b406 <_svfiprintf_r+0x192>
 801b424:	ab03      	add	r3, sp, #12
 801b426:	9300      	str	r3, [sp, #0]
 801b428:	462a      	mov	r2, r5
 801b42a:	4b0e      	ldr	r3, [pc, #56]	@ (801b464 <_svfiprintf_r+0x1f0>)
 801b42c:	a904      	add	r1, sp, #16
 801b42e:	4638      	mov	r0, r7
 801b430:	f3af 8000 	nop.w
 801b434:	1c42      	adds	r2, r0, #1
 801b436:	4606      	mov	r6, r0
 801b438:	d1d6      	bne.n	801b3e8 <_svfiprintf_r+0x174>
 801b43a:	89ab      	ldrh	r3, [r5, #12]
 801b43c:	065b      	lsls	r3, r3, #25
 801b43e:	f53f af2d 	bmi.w	801b29c <_svfiprintf_r+0x28>
 801b442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b444:	e72c      	b.n	801b2a0 <_svfiprintf_r+0x2c>
 801b446:	ab03      	add	r3, sp, #12
 801b448:	9300      	str	r3, [sp, #0]
 801b44a:	462a      	mov	r2, r5
 801b44c:	4b05      	ldr	r3, [pc, #20]	@ (801b464 <_svfiprintf_r+0x1f0>)
 801b44e:	a904      	add	r1, sp, #16
 801b450:	4638      	mov	r0, r7
 801b452:	f000 f9bb 	bl	801b7cc <_printf_i>
 801b456:	e7ed      	b.n	801b434 <_svfiprintf_r+0x1c0>
 801b458:	0801ef84 	.word	0x0801ef84
 801b45c:	0801ef8e 	.word	0x0801ef8e
 801b460:	00000000 	.word	0x00000000
 801b464:	0801b1b5 	.word	0x0801b1b5
 801b468:	0801ef8a 	.word	0x0801ef8a

0801b46c <__sfputc_r>:
 801b46c:	6893      	ldr	r3, [r2, #8]
 801b46e:	3b01      	subs	r3, #1
 801b470:	2b00      	cmp	r3, #0
 801b472:	b410      	push	{r4}
 801b474:	6093      	str	r3, [r2, #8]
 801b476:	da08      	bge.n	801b48a <__sfputc_r+0x1e>
 801b478:	6994      	ldr	r4, [r2, #24]
 801b47a:	42a3      	cmp	r3, r4
 801b47c:	db01      	blt.n	801b482 <__sfputc_r+0x16>
 801b47e:	290a      	cmp	r1, #10
 801b480:	d103      	bne.n	801b48a <__sfputc_r+0x1e>
 801b482:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b486:	f7ff bc65 	b.w	801ad54 <__swbuf_r>
 801b48a:	6813      	ldr	r3, [r2, #0]
 801b48c:	1c58      	adds	r0, r3, #1
 801b48e:	6010      	str	r0, [r2, #0]
 801b490:	7019      	strb	r1, [r3, #0]
 801b492:	4608      	mov	r0, r1
 801b494:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b498:	4770      	bx	lr

0801b49a <__sfputs_r>:
 801b49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b49c:	4606      	mov	r6, r0
 801b49e:	460f      	mov	r7, r1
 801b4a0:	4614      	mov	r4, r2
 801b4a2:	18d5      	adds	r5, r2, r3
 801b4a4:	42ac      	cmp	r4, r5
 801b4a6:	d101      	bne.n	801b4ac <__sfputs_r+0x12>
 801b4a8:	2000      	movs	r0, #0
 801b4aa:	e007      	b.n	801b4bc <__sfputs_r+0x22>
 801b4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4b0:	463a      	mov	r2, r7
 801b4b2:	4630      	mov	r0, r6
 801b4b4:	f7ff ffda 	bl	801b46c <__sfputc_r>
 801b4b8:	1c43      	adds	r3, r0, #1
 801b4ba:	d1f3      	bne.n	801b4a4 <__sfputs_r+0xa>
 801b4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b4c0 <_vfiprintf_r>:
 801b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4c4:	460d      	mov	r5, r1
 801b4c6:	b09d      	sub	sp, #116	@ 0x74
 801b4c8:	4614      	mov	r4, r2
 801b4ca:	4698      	mov	r8, r3
 801b4cc:	4606      	mov	r6, r0
 801b4ce:	b118      	cbz	r0, 801b4d8 <_vfiprintf_r+0x18>
 801b4d0:	6a03      	ldr	r3, [r0, #32]
 801b4d2:	b90b      	cbnz	r3, 801b4d8 <_vfiprintf_r+0x18>
 801b4d4:	f7ff fa2e 	bl	801a934 <__sinit>
 801b4d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b4da:	07d9      	lsls	r1, r3, #31
 801b4dc:	d405      	bmi.n	801b4ea <_vfiprintf_r+0x2a>
 801b4de:	89ab      	ldrh	r3, [r5, #12]
 801b4e0:	059a      	lsls	r2, r3, #22
 801b4e2:	d402      	bmi.n	801b4ea <_vfiprintf_r+0x2a>
 801b4e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b4e6:	f7ff fd54 	bl	801af92 <__retarget_lock_acquire_recursive>
 801b4ea:	89ab      	ldrh	r3, [r5, #12]
 801b4ec:	071b      	lsls	r3, r3, #28
 801b4ee:	d501      	bpl.n	801b4f4 <_vfiprintf_r+0x34>
 801b4f0:	692b      	ldr	r3, [r5, #16]
 801b4f2:	b99b      	cbnz	r3, 801b51c <_vfiprintf_r+0x5c>
 801b4f4:	4629      	mov	r1, r5
 801b4f6:	4630      	mov	r0, r6
 801b4f8:	f7ff fc6a 	bl	801add0 <__swsetup_r>
 801b4fc:	b170      	cbz	r0, 801b51c <_vfiprintf_r+0x5c>
 801b4fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b500:	07dc      	lsls	r4, r3, #31
 801b502:	d504      	bpl.n	801b50e <_vfiprintf_r+0x4e>
 801b504:	f04f 30ff 	mov.w	r0, #4294967295
 801b508:	b01d      	add	sp, #116	@ 0x74
 801b50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b50e:	89ab      	ldrh	r3, [r5, #12]
 801b510:	0598      	lsls	r0, r3, #22
 801b512:	d4f7      	bmi.n	801b504 <_vfiprintf_r+0x44>
 801b514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b516:	f7ff fd3d 	bl	801af94 <__retarget_lock_release_recursive>
 801b51a:	e7f3      	b.n	801b504 <_vfiprintf_r+0x44>
 801b51c:	2300      	movs	r3, #0
 801b51e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b520:	2320      	movs	r3, #32
 801b522:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b526:	f8cd 800c 	str.w	r8, [sp, #12]
 801b52a:	2330      	movs	r3, #48	@ 0x30
 801b52c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b6dc <_vfiprintf_r+0x21c>
 801b530:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b534:	f04f 0901 	mov.w	r9, #1
 801b538:	4623      	mov	r3, r4
 801b53a:	469a      	mov	sl, r3
 801b53c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b540:	b10a      	cbz	r2, 801b546 <_vfiprintf_r+0x86>
 801b542:	2a25      	cmp	r2, #37	@ 0x25
 801b544:	d1f9      	bne.n	801b53a <_vfiprintf_r+0x7a>
 801b546:	ebba 0b04 	subs.w	fp, sl, r4
 801b54a:	d00b      	beq.n	801b564 <_vfiprintf_r+0xa4>
 801b54c:	465b      	mov	r3, fp
 801b54e:	4622      	mov	r2, r4
 801b550:	4629      	mov	r1, r5
 801b552:	4630      	mov	r0, r6
 801b554:	f7ff ffa1 	bl	801b49a <__sfputs_r>
 801b558:	3001      	adds	r0, #1
 801b55a:	f000 80a7 	beq.w	801b6ac <_vfiprintf_r+0x1ec>
 801b55e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b560:	445a      	add	r2, fp
 801b562:	9209      	str	r2, [sp, #36]	@ 0x24
 801b564:	f89a 3000 	ldrb.w	r3, [sl]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	f000 809f 	beq.w	801b6ac <_vfiprintf_r+0x1ec>
 801b56e:	2300      	movs	r3, #0
 801b570:	f04f 32ff 	mov.w	r2, #4294967295
 801b574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b578:	f10a 0a01 	add.w	sl, sl, #1
 801b57c:	9304      	str	r3, [sp, #16]
 801b57e:	9307      	str	r3, [sp, #28]
 801b580:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b584:	931a      	str	r3, [sp, #104]	@ 0x68
 801b586:	4654      	mov	r4, sl
 801b588:	2205      	movs	r2, #5
 801b58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b58e:	4853      	ldr	r0, [pc, #332]	@ (801b6dc <_vfiprintf_r+0x21c>)
 801b590:	f7e4 fea6 	bl	80002e0 <memchr>
 801b594:	9a04      	ldr	r2, [sp, #16]
 801b596:	b9d8      	cbnz	r0, 801b5d0 <_vfiprintf_r+0x110>
 801b598:	06d1      	lsls	r1, r2, #27
 801b59a:	bf44      	itt	mi
 801b59c:	2320      	movmi	r3, #32
 801b59e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b5a2:	0713      	lsls	r3, r2, #28
 801b5a4:	bf44      	itt	mi
 801b5a6:	232b      	movmi	r3, #43	@ 0x2b
 801b5a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b5ac:	f89a 3000 	ldrb.w	r3, [sl]
 801b5b0:	2b2a      	cmp	r3, #42	@ 0x2a
 801b5b2:	d015      	beq.n	801b5e0 <_vfiprintf_r+0x120>
 801b5b4:	9a07      	ldr	r2, [sp, #28]
 801b5b6:	4654      	mov	r4, sl
 801b5b8:	2000      	movs	r0, #0
 801b5ba:	f04f 0c0a 	mov.w	ip, #10
 801b5be:	4621      	mov	r1, r4
 801b5c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b5c4:	3b30      	subs	r3, #48	@ 0x30
 801b5c6:	2b09      	cmp	r3, #9
 801b5c8:	d94b      	bls.n	801b662 <_vfiprintf_r+0x1a2>
 801b5ca:	b1b0      	cbz	r0, 801b5fa <_vfiprintf_r+0x13a>
 801b5cc:	9207      	str	r2, [sp, #28]
 801b5ce:	e014      	b.n	801b5fa <_vfiprintf_r+0x13a>
 801b5d0:	eba0 0308 	sub.w	r3, r0, r8
 801b5d4:	fa09 f303 	lsl.w	r3, r9, r3
 801b5d8:	4313      	orrs	r3, r2
 801b5da:	9304      	str	r3, [sp, #16]
 801b5dc:	46a2      	mov	sl, r4
 801b5de:	e7d2      	b.n	801b586 <_vfiprintf_r+0xc6>
 801b5e0:	9b03      	ldr	r3, [sp, #12]
 801b5e2:	1d19      	adds	r1, r3, #4
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	9103      	str	r1, [sp, #12]
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	bfbb      	ittet	lt
 801b5ec:	425b      	neglt	r3, r3
 801b5ee:	f042 0202 	orrlt.w	r2, r2, #2
 801b5f2:	9307      	strge	r3, [sp, #28]
 801b5f4:	9307      	strlt	r3, [sp, #28]
 801b5f6:	bfb8      	it	lt
 801b5f8:	9204      	strlt	r2, [sp, #16]
 801b5fa:	7823      	ldrb	r3, [r4, #0]
 801b5fc:	2b2e      	cmp	r3, #46	@ 0x2e
 801b5fe:	d10a      	bne.n	801b616 <_vfiprintf_r+0x156>
 801b600:	7863      	ldrb	r3, [r4, #1]
 801b602:	2b2a      	cmp	r3, #42	@ 0x2a
 801b604:	d132      	bne.n	801b66c <_vfiprintf_r+0x1ac>
 801b606:	9b03      	ldr	r3, [sp, #12]
 801b608:	1d1a      	adds	r2, r3, #4
 801b60a:	681b      	ldr	r3, [r3, #0]
 801b60c:	9203      	str	r2, [sp, #12]
 801b60e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b612:	3402      	adds	r4, #2
 801b614:	9305      	str	r3, [sp, #20]
 801b616:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b6ec <_vfiprintf_r+0x22c>
 801b61a:	7821      	ldrb	r1, [r4, #0]
 801b61c:	2203      	movs	r2, #3
 801b61e:	4650      	mov	r0, sl
 801b620:	f7e4 fe5e 	bl	80002e0 <memchr>
 801b624:	b138      	cbz	r0, 801b636 <_vfiprintf_r+0x176>
 801b626:	9b04      	ldr	r3, [sp, #16]
 801b628:	eba0 000a 	sub.w	r0, r0, sl
 801b62c:	2240      	movs	r2, #64	@ 0x40
 801b62e:	4082      	lsls	r2, r0
 801b630:	4313      	orrs	r3, r2
 801b632:	3401      	adds	r4, #1
 801b634:	9304      	str	r3, [sp, #16]
 801b636:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b63a:	4829      	ldr	r0, [pc, #164]	@ (801b6e0 <_vfiprintf_r+0x220>)
 801b63c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b640:	2206      	movs	r2, #6
 801b642:	f7e4 fe4d 	bl	80002e0 <memchr>
 801b646:	2800      	cmp	r0, #0
 801b648:	d03f      	beq.n	801b6ca <_vfiprintf_r+0x20a>
 801b64a:	4b26      	ldr	r3, [pc, #152]	@ (801b6e4 <_vfiprintf_r+0x224>)
 801b64c:	bb1b      	cbnz	r3, 801b696 <_vfiprintf_r+0x1d6>
 801b64e:	9b03      	ldr	r3, [sp, #12]
 801b650:	3307      	adds	r3, #7
 801b652:	f023 0307 	bic.w	r3, r3, #7
 801b656:	3308      	adds	r3, #8
 801b658:	9303      	str	r3, [sp, #12]
 801b65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b65c:	443b      	add	r3, r7
 801b65e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b660:	e76a      	b.n	801b538 <_vfiprintf_r+0x78>
 801b662:	fb0c 3202 	mla	r2, ip, r2, r3
 801b666:	460c      	mov	r4, r1
 801b668:	2001      	movs	r0, #1
 801b66a:	e7a8      	b.n	801b5be <_vfiprintf_r+0xfe>
 801b66c:	2300      	movs	r3, #0
 801b66e:	3401      	adds	r4, #1
 801b670:	9305      	str	r3, [sp, #20]
 801b672:	4619      	mov	r1, r3
 801b674:	f04f 0c0a 	mov.w	ip, #10
 801b678:	4620      	mov	r0, r4
 801b67a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b67e:	3a30      	subs	r2, #48	@ 0x30
 801b680:	2a09      	cmp	r2, #9
 801b682:	d903      	bls.n	801b68c <_vfiprintf_r+0x1cc>
 801b684:	2b00      	cmp	r3, #0
 801b686:	d0c6      	beq.n	801b616 <_vfiprintf_r+0x156>
 801b688:	9105      	str	r1, [sp, #20]
 801b68a:	e7c4      	b.n	801b616 <_vfiprintf_r+0x156>
 801b68c:	fb0c 2101 	mla	r1, ip, r1, r2
 801b690:	4604      	mov	r4, r0
 801b692:	2301      	movs	r3, #1
 801b694:	e7f0      	b.n	801b678 <_vfiprintf_r+0x1b8>
 801b696:	ab03      	add	r3, sp, #12
 801b698:	9300      	str	r3, [sp, #0]
 801b69a:	462a      	mov	r2, r5
 801b69c:	4b12      	ldr	r3, [pc, #72]	@ (801b6e8 <_vfiprintf_r+0x228>)
 801b69e:	a904      	add	r1, sp, #16
 801b6a0:	4630      	mov	r0, r6
 801b6a2:	f3af 8000 	nop.w
 801b6a6:	4607      	mov	r7, r0
 801b6a8:	1c78      	adds	r0, r7, #1
 801b6aa:	d1d6      	bne.n	801b65a <_vfiprintf_r+0x19a>
 801b6ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b6ae:	07d9      	lsls	r1, r3, #31
 801b6b0:	d405      	bmi.n	801b6be <_vfiprintf_r+0x1fe>
 801b6b2:	89ab      	ldrh	r3, [r5, #12]
 801b6b4:	059a      	lsls	r2, r3, #22
 801b6b6:	d402      	bmi.n	801b6be <_vfiprintf_r+0x1fe>
 801b6b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b6ba:	f7ff fc6b 	bl	801af94 <__retarget_lock_release_recursive>
 801b6be:	89ab      	ldrh	r3, [r5, #12]
 801b6c0:	065b      	lsls	r3, r3, #25
 801b6c2:	f53f af1f 	bmi.w	801b504 <_vfiprintf_r+0x44>
 801b6c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b6c8:	e71e      	b.n	801b508 <_vfiprintf_r+0x48>
 801b6ca:	ab03      	add	r3, sp, #12
 801b6cc:	9300      	str	r3, [sp, #0]
 801b6ce:	462a      	mov	r2, r5
 801b6d0:	4b05      	ldr	r3, [pc, #20]	@ (801b6e8 <_vfiprintf_r+0x228>)
 801b6d2:	a904      	add	r1, sp, #16
 801b6d4:	4630      	mov	r0, r6
 801b6d6:	f000 f879 	bl	801b7cc <_printf_i>
 801b6da:	e7e4      	b.n	801b6a6 <_vfiprintf_r+0x1e6>
 801b6dc:	0801ef84 	.word	0x0801ef84
 801b6e0:	0801ef8e 	.word	0x0801ef8e
 801b6e4:	00000000 	.word	0x00000000
 801b6e8:	0801b49b 	.word	0x0801b49b
 801b6ec:	0801ef8a 	.word	0x0801ef8a

0801b6f0 <_printf_common>:
 801b6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6f4:	4616      	mov	r6, r2
 801b6f6:	4698      	mov	r8, r3
 801b6f8:	688a      	ldr	r2, [r1, #8]
 801b6fa:	690b      	ldr	r3, [r1, #16]
 801b6fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b700:	4293      	cmp	r3, r2
 801b702:	bfb8      	it	lt
 801b704:	4613      	movlt	r3, r2
 801b706:	6033      	str	r3, [r6, #0]
 801b708:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b70c:	4607      	mov	r7, r0
 801b70e:	460c      	mov	r4, r1
 801b710:	b10a      	cbz	r2, 801b716 <_printf_common+0x26>
 801b712:	3301      	adds	r3, #1
 801b714:	6033      	str	r3, [r6, #0]
 801b716:	6823      	ldr	r3, [r4, #0]
 801b718:	0699      	lsls	r1, r3, #26
 801b71a:	bf42      	ittt	mi
 801b71c:	6833      	ldrmi	r3, [r6, #0]
 801b71e:	3302      	addmi	r3, #2
 801b720:	6033      	strmi	r3, [r6, #0]
 801b722:	6825      	ldr	r5, [r4, #0]
 801b724:	f015 0506 	ands.w	r5, r5, #6
 801b728:	d106      	bne.n	801b738 <_printf_common+0x48>
 801b72a:	f104 0a19 	add.w	sl, r4, #25
 801b72e:	68e3      	ldr	r3, [r4, #12]
 801b730:	6832      	ldr	r2, [r6, #0]
 801b732:	1a9b      	subs	r3, r3, r2
 801b734:	42ab      	cmp	r3, r5
 801b736:	dc26      	bgt.n	801b786 <_printf_common+0x96>
 801b738:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b73c:	6822      	ldr	r2, [r4, #0]
 801b73e:	3b00      	subs	r3, #0
 801b740:	bf18      	it	ne
 801b742:	2301      	movne	r3, #1
 801b744:	0692      	lsls	r2, r2, #26
 801b746:	d42b      	bmi.n	801b7a0 <_printf_common+0xb0>
 801b748:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b74c:	4641      	mov	r1, r8
 801b74e:	4638      	mov	r0, r7
 801b750:	47c8      	blx	r9
 801b752:	3001      	adds	r0, #1
 801b754:	d01e      	beq.n	801b794 <_printf_common+0xa4>
 801b756:	6823      	ldr	r3, [r4, #0]
 801b758:	6922      	ldr	r2, [r4, #16]
 801b75a:	f003 0306 	and.w	r3, r3, #6
 801b75e:	2b04      	cmp	r3, #4
 801b760:	bf02      	ittt	eq
 801b762:	68e5      	ldreq	r5, [r4, #12]
 801b764:	6833      	ldreq	r3, [r6, #0]
 801b766:	1aed      	subeq	r5, r5, r3
 801b768:	68a3      	ldr	r3, [r4, #8]
 801b76a:	bf0c      	ite	eq
 801b76c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b770:	2500      	movne	r5, #0
 801b772:	4293      	cmp	r3, r2
 801b774:	bfc4      	itt	gt
 801b776:	1a9b      	subgt	r3, r3, r2
 801b778:	18ed      	addgt	r5, r5, r3
 801b77a:	2600      	movs	r6, #0
 801b77c:	341a      	adds	r4, #26
 801b77e:	42b5      	cmp	r5, r6
 801b780:	d11a      	bne.n	801b7b8 <_printf_common+0xc8>
 801b782:	2000      	movs	r0, #0
 801b784:	e008      	b.n	801b798 <_printf_common+0xa8>
 801b786:	2301      	movs	r3, #1
 801b788:	4652      	mov	r2, sl
 801b78a:	4641      	mov	r1, r8
 801b78c:	4638      	mov	r0, r7
 801b78e:	47c8      	blx	r9
 801b790:	3001      	adds	r0, #1
 801b792:	d103      	bne.n	801b79c <_printf_common+0xac>
 801b794:	f04f 30ff 	mov.w	r0, #4294967295
 801b798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b79c:	3501      	adds	r5, #1
 801b79e:	e7c6      	b.n	801b72e <_printf_common+0x3e>
 801b7a0:	18e1      	adds	r1, r4, r3
 801b7a2:	1c5a      	adds	r2, r3, #1
 801b7a4:	2030      	movs	r0, #48	@ 0x30
 801b7a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b7aa:	4422      	add	r2, r4
 801b7ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b7b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b7b4:	3302      	adds	r3, #2
 801b7b6:	e7c7      	b.n	801b748 <_printf_common+0x58>
 801b7b8:	2301      	movs	r3, #1
 801b7ba:	4622      	mov	r2, r4
 801b7bc:	4641      	mov	r1, r8
 801b7be:	4638      	mov	r0, r7
 801b7c0:	47c8      	blx	r9
 801b7c2:	3001      	adds	r0, #1
 801b7c4:	d0e6      	beq.n	801b794 <_printf_common+0xa4>
 801b7c6:	3601      	adds	r6, #1
 801b7c8:	e7d9      	b.n	801b77e <_printf_common+0x8e>
	...

0801b7cc <_printf_i>:
 801b7cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b7d0:	7e0f      	ldrb	r7, [r1, #24]
 801b7d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b7d4:	2f78      	cmp	r7, #120	@ 0x78
 801b7d6:	4691      	mov	r9, r2
 801b7d8:	4680      	mov	r8, r0
 801b7da:	460c      	mov	r4, r1
 801b7dc:	469a      	mov	sl, r3
 801b7de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b7e2:	d807      	bhi.n	801b7f4 <_printf_i+0x28>
 801b7e4:	2f62      	cmp	r7, #98	@ 0x62
 801b7e6:	d80a      	bhi.n	801b7fe <_printf_i+0x32>
 801b7e8:	2f00      	cmp	r7, #0
 801b7ea:	f000 80d2 	beq.w	801b992 <_printf_i+0x1c6>
 801b7ee:	2f58      	cmp	r7, #88	@ 0x58
 801b7f0:	f000 80b7 	beq.w	801b962 <_printf_i+0x196>
 801b7f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b7f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b7fc:	e03a      	b.n	801b874 <_printf_i+0xa8>
 801b7fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b802:	2b15      	cmp	r3, #21
 801b804:	d8f6      	bhi.n	801b7f4 <_printf_i+0x28>
 801b806:	a101      	add	r1, pc, #4	@ (adr r1, 801b80c <_printf_i+0x40>)
 801b808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b80c:	0801b865 	.word	0x0801b865
 801b810:	0801b879 	.word	0x0801b879
 801b814:	0801b7f5 	.word	0x0801b7f5
 801b818:	0801b7f5 	.word	0x0801b7f5
 801b81c:	0801b7f5 	.word	0x0801b7f5
 801b820:	0801b7f5 	.word	0x0801b7f5
 801b824:	0801b879 	.word	0x0801b879
 801b828:	0801b7f5 	.word	0x0801b7f5
 801b82c:	0801b7f5 	.word	0x0801b7f5
 801b830:	0801b7f5 	.word	0x0801b7f5
 801b834:	0801b7f5 	.word	0x0801b7f5
 801b838:	0801b979 	.word	0x0801b979
 801b83c:	0801b8a3 	.word	0x0801b8a3
 801b840:	0801b92f 	.word	0x0801b92f
 801b844:	0801b7f5 	.word	0x0801b7f5
 801b848:	0801b7f5 	.word	0x0801b7f5
 801b84c:	0801b99b 	.word	0x0801b99b
 801b850:	0801b7f5 	.word	0x0801b7f5
 801b854:	0801b8a3 	.word	0x0801b8a3
 801b858:	0801b7f5 	.word	0x0801b7f5
 801b85c:	0801b7f5 	.word	0x0801b7f5
 801b860:	0801b937 	.word	0x0801b937
 801b864:	6833      	ldr	r3, [r6, #0]
 801b866:	1d1a      	adds	r2, r3, #4
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	6032      	str	r2, [r6, #0]
 801b86c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b870:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b874:	2301      	movs	r3, #1
 801b876:	e09d      	b.n	801b9b4 <_printf_i+0x1e8>
 801b878:	6833      	ldr	r3, [r6, #0]
 801b87a:	6820      	ldr	r0, [r4, #0]
 801b87c:	1d19      	adds	r1, r3, #4
 801b87e:	6031      	str	r1, [r6, #0]
 801b880:	0606      	lsls	r6, r0, #24
 801b882:	d501      	bpl.n	801b888 <_printf_i+0xbc>
 801b884:	681d      	ldr	r5, [r3, #0]
 801b886:	e003      	b.n	801b890 <_printf_i+0xc4>
 801b888:	0645      	lsls	r5, r0, #25
 801b88a:	d5fb      	bpl.n	801b884 <_printf_i+0xb8>
 801b88c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b890:	2d00      	cmp	r5, #0
 801b892:	da03      	bge.n	801b89c <_printf_i+0xd0>
 801b894:	232d      	movs	r3, #45	@ 0x2d
 801b896:	426d      	negs	r5, r5
 801b898:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b89c:	4859      	ldr	r0, [pc, #356]	@ (801ba04 <_printf_i+0x238>)
 801b89e:	230a      	movs	r3, #10
 801b8a0:	e010      	b.n	801b8c4 <_printf_i+0xf8>
 801b8a2:	6821      	ldr	r1, [r4, #0]
 801b8a4:	6833      	ldr	r3, [r6, #0]
 801b8a6:	0608      	lsls	r0, r1, #24
 801b8a8:	f853 5b04 	ldr.w	r5, [r3], #4
 801b8ac:	d402      	bmi.n	801b8b4 <_printf_i+0xe8>
 801b8ae:	0649      	lsls	r1, r1, #25
 801b8b0:	bf48      	it	mi
 801b8b2:	b2ad      	uxthmi	r5, r5
 801b8b4:	2f6f      	cmp	r7, #111	@ 0x6f
 801b8b6:	4853      	ldr	r0, [pc, #332]	@ (801ba04 <_printf_i+0x238>)
 801b8b8:	6033      	str	r3, [r6, #0]
 801b8ba:	d159      	bne.n	801b970 <_printf_i+0x1a4>
 801b8bc:	2308      	movs	r3, #8
 801b8be:	2100      	movs	r1, #0
 801b8c0:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b8c4:	6866      	ldr	r6, [r4, #4]
 801b8c6:	60a6      	str	r6, [r4, #8]
 801b8c8:	2e00      	cmp	r6, #0
 801b8ca:	db05      	blt.n	801b8d8 <_printf_i+0x10c>
 801b8cc:	6821      	ldr	r1, [r4, #0]
 801b8ce:	432e      	orrs	r6, r5
 801b8d0:	f021 0104 	bic.w	r1, r1, #4
 801b8d4:	6021      	str	r1, [r4, #0]
 801b8d6:	d04d      	beq.n	801b974 <_printf_i+0x1a8>
 801b8d8:	4616      	mov	r6, r2
 801b8da:	fbb5 f1f3 	udiv	r1, r5, r3
 801b8de:	fb03 5711 	mls	r7, r3, r1, r5
 801b8e2:	5dc7      	ldrb	r7, [r0, r7]
 801b8e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b8e8:	462f      	mov	r7, r5
 801b8ea:	42bb      	cmp	r3, r7
 801b8ec:	460d      	mov	r5, r1
 801b8ee:	d9f4      	bls.n	801b8da <_printf_i+0x10e>
 801b8f0:	2b08      	cmp	r3, #8
 801b8f2:	d10b      	bne.n	801b90c <_printf_i+0x140>
 801b8f4:	6823      	ldr	r3, [r4, #0]
 801b8f6:	07df      	lsls	r7, r3, #31
 801b8f8:	d508      	bpl.n	801b90c <_printf_i+0x140>
 801b8fa:	6923      	ldr	r3, [r4, #16]
 801b8fc:	6861      	ldr	r1, [r4, #4]
 801b8fe:	4299      	cmp	r1, r3
 801b900:	bfde      	ittt	le
 801b902:	2330      	movle	r3, #48	@ 0x30
 801b904:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b908:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b90c:	1b92      	subs	r2, r2, r6
 801b90e:	6122      	str	r2, [r4, #16]
 801b910:	f8cd a000 	str.w	sl, [sp]
 801b914:	464b      	mov	r3, r9
 801b916:	aa03      	add	r2, sp, #12
 801b918:	4621      	mov	r1, r4
 801b91a:	4640      	mov	r0, r8
 801b91c:	f7ff fee8 	bl	801b6f0 <_printf_common>
 801b920:	3001      	adds	r0, #1
 801b922:	d14c      	bne.n	801b9be <_printf_i+0x1f2>
 801b924:	f04f 30ff 	mov.w	r0, #4294967295
 801b928:	b004      	add	sp, #16
 801b92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b92e:	6823      	ldr	r3, [r4, #0]
 801b930:	f043 0320 	orr.w	r3, r3, #32
 801b934:	6023      	str	r3, [r4, #0]
 801b936:	4834      	ldr	r0, [pc, #208]	@ (801ba08 <_printf_i+0x23c>)
 801b938:	2778      	movs	r7, #120	@ 0x78
 801b93a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b93e:	6823      	ldr	r3, [r4, #0]
 801b940:	6831      	ldr	r1, [r6, #0]
 801b942:	061f      	lsls	r7, r3, #24
 801b944:	f851 5b04 	ldr.w	r5, [r1], #4
 801b948:	d402      	bmi.n	801b950 <_printf_i+0x184>
 801b94a:	065f      	lsls	r7, r3, #25
 801b94c:	bf48      	it	mi
 801b94e:	b2ad      	uxthmi	r5, r5
 801b950:	6031      	str	r1, [r6, #0]
 801b952:	07d9      	lsls	r1, r3, #31
 801b954:	bf44      	itt	mi
 801b956:	f043 0320 	orrmi.w	r3, r3, #32
 801b95a:	6023      	strmi	r3, [r4, #0]
 801b95c:	b11d      	cbz	r5, 801b966 <_printf_i+0x19a>
 801b95e:	2310      	movs	r3, #16
 801b960:	e7ad      	b.n	801b8be <_printf_i+0xf2>
 801b962:	4828      	ldr	r0, [pc, #160]	@ (801ba04 <_printf_i+0x238>)
 801b964:	e7e9      	b.n	801b93a <_printf_i+0x16e>
 801b966:	6823      	ldr	r3, [r4, #0]
 801b968:	f023 0320 	bic.w	r3, r3, #32
 801b96c:	6023      	str	r3, [r4, #0]
 801b96e:	e7f6      	b.n	801b95e <_printf_i+0x192>
 801b970:	230a      	movs	r3, #10
 801b972:	e7a4      	b.n	801b8be <_printf_i+0xf2>
 801b974:	4616      	mov	r6, r2
 801b976:	e7bb      	b.n	801b8f0 <_printf_i+0x124>
 801b978:	6833      	ldr	r3, [r6, #0]
 801b97a:	6825      	ldr	r5, [r4, #0]
 801b97c:	6961      	ldr	r1, [r4, #20]
 801b97e:	1d18      	adds	r0, r3, #4
 801b980:	6030      	str	r0, [r6, #0]
 801b982:	062e      	lsls	r6, r5, #24
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	d501      	bpl.n	801b98c <_printf_i+0x1c0>
 801b988:	6019      	str	r1, [r3, #0]
 801b98a:	e002      	b.n	801b992 <_printf_i+0x1c6>
 801b98c:	0668      	lsls	r0, r5, #25
 801b98e:	d5fb      	bpl.n	801b988 <_printf_i+0x1bc>
 801b990:	8019      	strh	r1, [r3, #0]
 801b992:	2300      	movs	r3, #0
 801b994:	6123      	str	r3, [r4, #16]
 801b996:	4616      	mov	r6, r2
 801b998:	e7ba      	b.n	801b910 <_printf_i+0x144>
 801b99a:	6833      	ldr	r3, [r6, #0]
 801b99c:	1d1a      	adds	r2, r3, #4
 801b99e:	6032      	str	r2, [r6, #0]
 801b9a0:	681e      	ldr	r6, [r3, #0]
 801b9a2:	6862      	ldr	r2, [r4, #4]
 801b9a4:	2100      	movs	r1, #0
 801b9a6:	4630      	mov	r0, r6
 801b9a8:	f7e4 fc9a 	bl	80002e0 <memchr>
 801b9ac:	b108      	cbz	r0, 801b9b2 <_printf_i+0x1e6>
 801b9ae:	1b80      	subs	r0, r0, r6
 801b9b0:	6060      	str	r0, [r4, #4]
 801b9b2:	6863      	ldr	r3, [r4, #4]
 801b9b4:	6123      	str	r3, [r4, #16]
 801b9b6:	2300      	movs	r3, #0
 801b9b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b9bc:	e7a8      	b.n	801b910 <_printf_i+0x144>
 801b9be:	6923      	ldr	r3, [r4, #16]
 801b9c0:	4632      	mov	r2, r6
 801b9c2:	4649      	mov	r1, r9
 801b9c4:	4640      	mov	r0, r8
 801b9c6:	47d0      	blx	sl
 801b9c8:	3001      	adds	r0, #1
 801b9ca:	d0ab      	beq.n	801b924 <_printf_i+0x158>
 801b9cc:	6823      	ldr	r3, [r4, #0]
 801b9ce:	079b      	lsls	r3, r3, #30
 801b9d0:	d413      	bmi.n	801b9fa <_printf_i+0x22e>
 801b9d2:	68e0      	ldr	r0, [r4, #12]
 801b9d4:	9b03      	ldr	r3, [sp, #12]
 801b9d6:	4298      	cmp	r0, r3
 801b9d8:	bfb8      	it	lt
 801b9da:	4618      	movlt	r0, r3
 801b9dc:	e7a4      	b.n	801b928 <_printf_i+0x15c>
 801b9de:	2301      	movs	r3, #1
 801b9e0:	4632      	mov	r2, r6
 801b9e2:	4649      	mov	r1, r9
 801b9e4:	4640      	mov	r0, r8
 801b9e6:	47d0      	blx	sl
 801b9e8:	3001      	adds	r0, #1
 801b9ea:	d09b      	beq.n	801b924 <_printf_i+0x158>
 801b9ec:	3501      	adds	r5, #1
 801b9ee:	68e3      	ldr	r3, [r4, #12]
 801b9f0:	9903      	ldr	r1, [sp, #12]
 801b9f2:	1a5b      	subs	r3, r3, r1
 801b9f4:	42ab      	cmp	r3, r5
 801b9f6:	dcf2      	bgt.n	801b9de <_printf_i+0x212>
 801b9f8:	e7eb      	b.n	801b9d2 <_printf_i+0x206>
 801b9fa:	2500      	movs	r5, #0
 801b9fc:	f104 0619 	add.w	r6, r4, #25
 801ba00:	e7f5      	b.n	801b9ee <_printf_i+0x222>
 801ba02:	bf00      	nop
 801ba04:	0801ef95 	.word	0x0801ef95
 801ba08:	0801efa6 	.word	0x0801efa6

0801ba0c <__sflush_r>:
 801ba0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ba10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba14:	0716      	lsls	r6, r2, #28
 801ba16:	4605      	mov	r5, r0
 801ba18:	460c      	mov	r4, r1
 801ba1a:	d451      	bmi.n	801bac0 <__sflush_r+0xb4>
 801ba1c:	684b      	ldr	r3, [r1, #4]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	dc02      	bgt.n	801ba28 <__sflush_r+0x1c>
 801ba22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	dd49      	ble.n	801babc <__sflush_r+0xb0>
 801ba28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ba2a:	2e00      	cmp	r6, #0
 801ba2c:	d046      	beq.n	801babc <__sflush_r+0xb0>
 801ba2e:	2300      	movs	r3, #0
 801ba30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ba34:	682f      	ldr	r7, [r5, #0]
 801ba36:	602b      	str	r3, [r5, #0]
 801ba38:	d031      	beq.n	801ba9e <__sflush_r+0x92>
 801ba3a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ba3c:	89a3      	ldrh	r3, [r4, #12]
 801ba3e:	0759      	lsls	r1, r3, #29
 801ba40:	d505      	bpl.n	801ba4e <__sflush_r+0x42>
 801ba42:	6863      	ldr	r3, [r4, #4]
 801ba44:	1ad2      	subs	r2, r2, r3
 801ba46:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ba48:	b10b      	cbz	r3, 801ba4e <__sflush_r+0x42>
 801ba4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ba4c:	1ad2      	subs	r2, r2, r3
 801ba4e:	2300      	movs	r3, #0
 801ba50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ba52:	6a21      	ldr	r1, [r4, #32]
 801ba54:	4628      	mov	r0, r5
 801ba56:	47b0      	blx	r6
 801ba58:	1c42      	adds	r2, r0, #1
 801ba5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba5e:	d106      	bne.n	801ba6e <__sflush_r+0x62>
 801ba60:	6829      	ldr	r1, [r5, #0]
 801ba62:	291d      	cmp	r1, #29
 801ba64:	d846      	bhi.n	801baf4 <__sflush_r+0xe8>
 801ba66:	4a29      	ldr	r2, [pc, #164]	@ (801bb0c <__sflush_r+0x100>)
 801ba68:	40ca      	lsrs	r2, r1
 801ba6a:	07d6      	lsls	r6, r2, #31
 801ba6c:	d542      	bpl.n	801baf4 <__sflush_r+0xe8>
 801ba6e:	2200      	movs	r2, #0
 801ba70:	6062      	str	r2, [r4, #4]
 801ba72:	04d9      	lsls	r1, r3, #19
 801ba74:	6922      	ldr	r2, [r4, #16]
 801ba76:	6022      	str	r2, [r4, #0]
 801ba78:	d504      	bpl.n	801ba84 <__sflush_r+0x78>
 801ba7a:	1c42      	adds	r2, r0, #1
 801ba7c:	d101      	bne.n	801ba82 <__sflush_r+0x76>
 801ba7e:	682b      	ldr	r3, [r5, #0]
 801ba80:	b903      	cbnz	r3, 801ba84 <__sflush_r+0x78>
 801ba82:	6560      	str	r0, [r4, #84]	@ 0x54
 801ba84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ba86:	602f      	str	r7, [r5, #0]
 801ba88:	b1c1      	cbz	r1, 801babc <__sflush_r+0xb0>
 801ba8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ba8e:	4299      	cmp	r1, r3
 801ba90:	d002      	beq.n	801ba98 <__sflush_r+0x8c>
 801ba92:	4628      	mov	r0, r5
 801ba94:	f7ff fa8e 	bl	801afb4 <_free_r>
 801ba98:	2300      	movs	r3, #0
 801ba9a:	6363      	str	r3, [r4, #52]	@ 0x34
 801ba9c:	e00e      	b.n	801babc <__sflush_r+0xb0>
 801ba9e:	6a21      	ldr	r1, [r4, #32]
 801baa0:	2301      	movs	r3, #1
 801baa2:	4628      	mov	r0, r5
 801baa4:	47b0      	blx	r6
 801baa6:	4602      	mov	r2, r0
 801baa8:	1c50      	adds	r0, r2, #1
 801baaa:	d1c7      	bne.n	801ba3c <__sflush_r+0x30>
 801baac:	682b      	ldr	r3, [r5, #0]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d0c4      	beq.n	801ba3c <__sflush_r+0x30>
 801bab2:	2b1d      	cmp	r3, #29
 801bab4:	d001      	beq.n	801baba <__sflush_r+0xae>
 801bab6:	2b16      	cmp	r3, #22
 801bab8:	d11a      	bne.n	801baf0 <__sflush_r+0xe4>
 801baba:	602f      	str	r7, [r5, #0]
 801babc:	2000      	movs	r0, #0
 801babe:	e01e      	b.n	801bafe <__sflush_r+0xf2>
 801bac0:	690f      	ldr	r7, [r1, #16]
 801bac2:	2f00      	cmp	r7, #0
 801bac4:	d0fa      	beq.n	801babc <__sflush_r+0xb0>
 801bac6:	0793      	lsls	r3, r2, #30
 801bac8:	680e      	ldr	r6, [r1, #0]
 801baca:	bf08      	it	eq
 801bacc:	694b      	ldreq	r3, [r1, #20]
 801bace:	600f      	str	r7, [r1, #0]
 801bad0:	bf18      	it	ne
 801bad2:	2300      	movne	r3, #0
 801bad4:	eba6 0807 	sub.w	r8, r6, r7
 801bad8:	608b      	str	r3, [r1, #8]
 801bada:	f1b8 0f00 	cmp.w	r8, #0
 801bade:	dded      	ble.n	801babc <__sflush_r+0xb0>
 801bae0:	6a21      	ldr	r1, [r4, #32]
 801bae2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bae4:	4643      	mov	r3, r8
 801bae6:	463a      	mov	r2, r7
 801bae8:	4628      	mov	r0, r5
 801baea:	47b0      	blx	r6
 801baec:	2800      	cmp	r0, #0
 801baee:	dc08      	bgt.n	801bb02 <__sflush_r+0xf6>
 801baf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801baf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801baf8:	81a3      	strh	r3, [r4, #12]
 801bafa:	f04f 30ff 	mov.w	r0, #4294967295
 801bafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb02:	4407      	add	r7, r0
 801bb04:	eba8 0800 	sub.w	r8, r8, r0
 801bb08:	e7e7      	b.n	801bada <__sflush_r+0xce>
 801bb0a:	bf00      	nop
 801bb0c:	20400001 	.word	0x20400001

0801bb10 <_fflush_r>:
 801bb10:	b538      	push	{r3, r4, r5, lr}
 801bb12:	690b      	ldr	r3, [r1, #16]
 801bb14:	4605      	mov	r5, r0
 801bb16:	460c      	mov	r4, r1
 801bb18:	b913      	cbnz	r3, 801bb20 <_fflush_r+0x10>
 801bb1a:	2500      	movs	r5, #0
 801bb1c:	4628      	mov	r0, r5
 801bb1e:	bd38      	pop	{r3, r4, r5, pc}
 801bb20:	b118      	cbz	r0, 801bb2a <_fflush_r+0x1a>
 801bb22:	6a03      	ldr	r3, [r0, #32]
 801bb24:	b90b      	cbnz	r3, 801bb2a <_fflush_r+0x1a>
 801bb26:	f7fe ff05 	bl	801a934 <__sinit>
 801bb2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	d0f3      	beq.n	801bb1a <_fflush_r+0xa>
 801bb32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bb34:	07d0      	lsls	r0, r2, #31
 801bb36:	d404      	bmi.n	801bb42 <_fflush_r+0x32>
 801bb38:	0599      	lsls	r1, r3, #22
 801bb3a:	d402      	bmi.n	801bb42 <_fflush_r+0x32>
 801bb3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bb3e:	f7ff fa28 	bl	801af92 <__retarget_lock_acquire_recursive>
 801bb42:	4628      	mov	r0, r5
 801bb44:	4621      	mov	r1, r4
 801bb46:	f7ff ff61 	bl	801ba0c <__sflush_r>
 801bb4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bb4c:	07da      	lsls	r2, r3, #31
 801bb4e:	4605      	mov	r5, r0
 801bb50:	d4e4      	bmi.n	801bb1c <_fflush_r+0xc>
 801bb52:	89a3      	ldrh	r3, [r4, #12]
 801bb54:	059b      	lsls	r3, r3, #22
 801bb56:	d4e1      	bmi.n	801bb1c <_fflush_r+0xc>
 801bb58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bb5a:	f7ff fa1b 	bl	801af94 <__retarget_lock_release_recursive>
 801bb5e:	e7dd      	b.n	801bb1c <_fflush_r+0xc>

0801bb60 <__swhatbuf_r>:
 801bb60:	b570      	push	{r4, r5, r6, lr}
 801bb62:	460c      	mov	r4, r1
 801bb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb68:	2900      	cmp	r1, #0
 801bb6a:	b096      	sub	sp, #88	@ 0x58
 801bb6c:	4615      	mov	r5, r2
 801bb6e:	461e      	mov	r6, r3
 801bb70:	da0a      	bge.n	801bb88 <__swhatbuf_r+0x28>
 801bb72:	89a1      	ldrh	r1, [r4, #12]
 801bb74:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 801bb78:	d113      	bne.n	801bba2 <__swhatbuf_r+0x42>
 801bb7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801bb7e:	2000      	movs	r0, #0
 801bb80:	6031      	str	r1, [r6, #0]
 801bb82:	602a      	str	r2, [r5, #0]
 801bb84:	b016      	add	sp, #88	@ 0x58
 801bb86:	bd70      	pop	{r4, r5, r6, pc}
 801bb88:	466a      	mov	r2, sp
 801bb8a:	f000 f85f 	bl	801bc4c <_fstat_r>
 801bb8e:	2800      	cmp	r0, #0
 801bb90:	dbef      	blt.n	801bb72 <__swhatbuf_r+0x12>
 801bb92:	9901      	ldr	r1, [sp, #4]
 801bb94:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801bb98:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801bb9c:	4259      	negs	r1, r3
 801bb9e:	4159      	adcs	r1, r3
 801bba0:	e7eb      	b.n	801bb7a <__swhatbuf_r+0x1a>
 801bba2:	2100      	movs	r1, #0
 801bba4:	2240      	movs	r2, #64	@ 0x40
 801bba6:	e7ea      	b.n	801bb7e <__swhatbuf_r+0x1e>

0801bba8 <__smakebuf_r>:
 801bba8:	898b      	ldrh	r3, [r1, #12]
 801bbaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bbac:	079e      	lsls	r6, r3, #30
 801bbae:	4605      	mov	r5, r0
 801bbb0:	460c      	mov	r4, r1
 801bbb2:	d507      	bpl.n	801bbc4 <__smakebuf_r+0x1c>
 801bbb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801bbb8:	6023      	str	r3, [r4, #0]
 801bbba:	6123      	str	r3, [r4, #16]
 801bbbc:	2301      	movs	r3, #1
 801bbbe:	6163      	str	r3, [r4, #20]
 801bbc0:	b002      	add	sp, #8
 801bbc2:	bd70      	pop	{r4, r5, r6, pc}
 801bbc4:	ab01      	add	r3, sp, #4
 801bbc6:	466a      	mov	r2, sp
 801bbc8:	f7ff ffca 	bl	801bb60 <__swhatbuf_r>
 801bbcc:	9e00      	ldr	r6, [sp, #0]
 801bbce:	4628      	mov	r0, r5
 801bbd0:	4631      	mov	r1, r6
 801bbd2:	f7ff fa63 	bl	801b09c <_malloc_r>
 801bbd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bbda:	b938      	cbnz	r0, 801bbec <__smakebuf_r+0x44>
 801bbdc:	059a      	lsls	r2, r3, #22
 801bbde:	d4ef      	bmi.n	801bbc0 <__smakebuf_r+0x18>
 801bbe0:	f023 0303 	bic.w	r3, r3, #3
 801bbe4:	f043 0302 	orr.w	r3, r3, #2
 801bbe8:	81a3      	strh	r3, [r4, #12]
 801bbea:	e7e3      	b.n	801bbb4 <__smakebuf_r+0xc>
 801bbec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bbf0:	81a3      	strh	r3, [r4, #12]
 801bbf2:	9b01      	ldr	r3, [sp, #4]
 801bbf4:	6020      	str	r0, [r4, #0]
 801bbf6:	e9c4 0604 	strd	r0, r6, [r4, #16]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d0e0      	beq.n	801bbc0 <__smakebuf_r+0x18>
 801bbfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bc02:	4628      	mov	r0, r5
 801bc04:	f000 f834 	bl	801bc70 <_isatty_r>
 801bc08:	2800      	cmp	r0, #0
 801bc0a:	d0d9      	beq.n	801bbc0 <__smakebuf_r+0x18>
 801bc0c:	89a3      	ldrh	r3, [r4, #12]
 801bc0e:	f023 0303 	bic.w	r3, r3, #3
 801bc12:	f043 0301 	orr.w	r3, r3, #1
 801bc16:	81a3      	strh	r3, [r4, #12]
 801bc18:	e7d2      	b.n	801bbc0 <__smakebuf_r+0x18>

0801bc1a <memmove>:
 801bc1a:	4288      	cmp	r0, r1
 801bc1c:	b510      	push	{r4, lr}
 801bc1e:	eb01 0402 	add.w	r4, r1, r2
 801bc22:	d902      	bls.n	801bc2a <memmove+0x10>
 801bc24:	4284      	cmp	r4, r0
 801bc26:	4623      	mov	r3, r4
 801bc28:	d807      	bhi.n	801bc3a <memmove+0x20>
 801bc2a:	1e43      	subs	r3, r0, #1
 801bc2c:	42a1      	cmp	r1, r4
 801bc2e:	d007      	beq.n	801bc40 <memmove+0x26>
 801bc30:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bc34:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bc38:	e7f8      	b.n	801bc2c <memmove+0x12>
 801bc3a:	4402      	add	r2, r0
 801bc3c:	4282      	cmp	r2, r0
 801bc3e:	d100      	bne.n	801bc42 <memmove+0x28>
 801bc40:	bd10      	pop	{r4, pc}
 801bc42:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801bc46:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801bc4a:	e7f7      	b.n	801bc3c <memmove+0x22>

0801bc4c <_fstat_r>:
 801bc4c:	b538      	push	{r3, r4, r5, lr}
 801bc4e:	4d07      	ldr	r5, [pc, #28]	@ (801bc6c <_fstat_r+0x20>)
 801bc50:	2300      	movs	r3, #0
 801bc52:	4604      	mov	r4, r0
 801bc54:	4608      	mov	r0, r1
 801bc56:	4611      	mov	r1, r2
 801bc58:	602b      	str	r3, [r5, #0]
 801bc5a:	f7e7 fbb9 	bl	80033d0 <_fstat>
 801bc5e:	1c43      	adds	r3, r0, #1
 801bc60:	d102      	bne.n	801bc68 <_fstat_r+0x1c>
 801bc62:	682b      	ldr	r3, [r5, #0]
 801bc64:	b103      	cbz	r3, 801bc68 <_fstat_r+0x1c>
 801bc66:	6023      	str	r3, [r4, #0]
 801bc68:	bd38      	pop	{r3, r4, r5, pc}
 801bc6a:	bf00      	nop
 801bc6c:	2401af44 	.word	0x2401af44

0801bc70 <_isatty_r>:
 801bc70:	b538      	push	{r3, r4, r5, lr}
 801bc72:	4d06      	ldr	r5, [pc, #24]	@ (801bc8c <_isatty_r+0x1c>)
 801bc74:	2300      	movs	r3, #0
 801bc76:	4604      	mov	r4, r0
 801bc78:	4608      	mov	r0, r1
 801bc7a:	602b      	str	r3, [r5, #0]
 801bc7c:	f7e7 fbb8 	bl	80033f0 <_isatty>
 801bc80:	1c43      	adds	r3, r0, #1
 801bc82:	d102      	bne.n	801bc8a <_isatty_r+0x1a>
 801bc84:	682b      	ldr	r3, [r5, #0]
 801bc86:	b103      	cbz	r3, 801bc8a <_isatty_r+0x1a>
 801bc88:	6023      	str	r3, [r4, #0]
 801bc8a:	bd38      	pop	{r3, r4, r5, pc}
 801bc8c:	2401af44 	.word	0x2401af44

0801bc90 <_sbrk_r>:
 801bc90:	b538      	push	{r3, r4, r5, lr}
 801bc92:	4d06      	ldr	r5, [pc, #24]	@ (801bcac <_sbrk_r+0x1c>)
 801bc94:	2300      	movs	r3, #0
 801bc96:	4604      	mov	r4, r0
 801bc98:	4608      	mov	r0, r1
 801bc9a:	602b      	str	r3, [r5, #0]
 801bc9c:	f7e7 fbc0 	bl	8003420 <_sbrk>
 801bca0:	1c43      	adds	r3, r0, #1
 801bca2:	d102      	bne.n	801bcaa <_sbrk_r+0x1a>
 801bca4:	682b      	ldr	r3, [r5, #0]
 801bca6:	b103      	cbz	r3, 801bcaa <_sbrk_r+0x1a>
 801bca8:	6023      	str	r3, [r4, #0]
 801bcaa:	bd38      	pop	{r3, r4, r5, pc}
 801bcac:	2401af44 	.word	0x2401af44

0801bcb0 <_realloc_r>:
 801bcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcb4:	4607      	mov	r7, r0
 801bcb6:	4614      	mov	r4, r2
 801bcb8:	460d      	mov	r5, r1
 801bcba:	b921      	cbnz	r1, 801bcc6 <_realloc_r+0x16>
 801bcbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bcc0:	4611      	mov	r1, r2
 801bcc2:	f7ff b9eb 	b.w	801b09c <_malloc_r>
 801bcc6:	b92a      	cbnz	r2, 801bcd4 <_realloc_r+0x24>
 801bcc8:	f7ff f974 	bl	801afb4 <_free_r>
 801bccc:	4625      	mov	r5, r4
 801bcce:	4628      	mov	r0, r5
 801bcd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcd4:	f000 f81a 	bl	801bd0c <_malloc_usable_size_r>
 801bcd8:	4284      	cmp	r4, r0
 801bcda:	4606      	mov	r6, r0
 801bcdc:	d802      	bhi.n	801bce4 <_realloc_r+0x34>
 801bcde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bce2:	d8f4      	bhi.n	801bcce <_realloc_r+0x1e>
 801bce4:	4621      	mov	r1, r4
 801bce6:	4638      	mov	r0, r7
 801bce8:	f7ff f9d8 	bl	801b09c <_malloc_r>
 801bcec:	4680      	mov	r8, r0
 801bcee:	b908      	cbnz	r0, 801bcf4 <_realloc_r+0x44>
 801bcf0:	4645      	mov	r5, r8
 801bcf2:	e7ec      	b.n	801bcce <_realloc_r+0x1e>
 801bcf4:	42b4      	cmp	r4, r6
 801bcf6:	4622      	mov	r2, r4
 801bcf8:	4629      	mov	r1, r5
 801bcfa:	bf28      	it	cs
 801bcfc:	4632      	movcs	r2, r6
 801bcfe:	f7ff f94a 	bl	801af96 <memcpy>
 801bd02:	4629      	mov	r1, r5
 801bd04:	4638      	mov	r0, r7
 801bd06:	f7ff f955 	bl	801afb4 <_free_r>
 801bd0a:	e7f1      	b.n	801bcf0 <_realloc_r+0x40>

0801bd0c <_malloc_usable_size_r>:
 801bd0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bd10:	1f18      	subs	r0, r3, #4
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	bfbc      	itt	lt
 801bd16:	580b      	ldrlt	r3, [r1, r0]
 801bd18:	18c0      	addlt	r0, r0, r3
 801bd1a:	4770      	bx	lr

0801bd1c <__udivmoddi4>:
 801bd1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd20:	9d08      	ldr	r5, [sp, #32]
 801bd22:	460f      	mov	r7, r1
 801bd24:	4604      	mov	r4, r0
 801bd26:	468c      	mov	ip, r1
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d148      	bne.n	801bdbe <__udivmoddi4+0xa2>
 801bd2c:	428a      	cmp	r2, r1
 801bd2e:	4616      	mov	r6, r2
 801bd30:	d961      	bls.n	801bdf6 <__udivmoddi4+0xda>
 801bd32:	fab2 f382 	clz	r3, r2
 801bd36:	b14b      	cbz	r3, 801bd4c <__udivmoddi4+0x30>
 801bd38:	f1c3 0220 	rsb	r2, r3, #32
 801bd3c:	fa01 fc03 	lsl.w	ip, r1, r3
 801bd40:	fa20 f202 	lsr.w	r2, r0, r2
 801bd44:	409e      	lsls	r6, r3
 801bd46:	ea42 0c0c 	orr.w	ip, r2, ip
 801bd4a:	409c      	lsls	r4, r3
 801bd4c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801bd50:	b2b7      	uxth	r7, r6
 801bd52:	fbbc f1fe 	udiv	r1, ip, lr
 801bd56:	0c22      	lsrs	r2, r4, #16
 801bd58:	fb0e cc11 	mls	ip, lr, r1, ip
 801bd5c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 801bd60:	fb01 f007 	mul.w	r0, r1, r7
 801bd64:	4290      	cmp	r0, r2
 801bd66:	d909      	bls.n	801bd7c <__udivmoddi4+0x60>
 801bd68:	18b2      	adds	r2, r6, r2
 801bd6a:	f101 3cff 	add.w	ip, r1, #4294967295
 801bd6e:	f080 80ee 	bcs.w	801bf4e <__udivmoddi4+0x232>
 801bd72:	4290      	cmp	r0, r2
 801bd74:	f240 80eb 	bls.w	801bf4e <__udivmoddi4+0x232>
 801bd78:	3902      	subs	r1, #2
 801bd7a:	4432      	add	r2, r6
 801bd7c:	1a12      	subs	r2, r2, r0
 801bd7e:	b2a4      	uxth	r4, r4
 801bd80:	fbb2 f0fe 	udiv	r0, r2, lr
 801bd84:	fb0e 2210 	mls	r2, lr, r0, r2
 801bd88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801bd8c:	fb00 f707 	mul.w	r7, r0, r7
 801bd90:	42a7      	cmp	r7, r4
 801bd92:	d909      	bls.n	801bda8 <__udivmoddi4+0x8c>
 801bd94:	1934      	adds	r4, r6, r4
 801bd96:	f100 32ff 	add.w	r2, r0, #4294967295
 801bd9a:	f080 80da 	bcs.w	801bf52 <__udivmoddi4+0x236>
 801bd9e:	42a7      	cmp	r7, r4
 801bda0:	f240 80d7 	bls.w	801bf52 <__udivmoddi4+0x236>
 801bda4:	4434      	add	r4, r6
 801bda6:	3802      	subs	r0, #2
 801bda8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801bdac:	1be4      	subs	r4, r4, r7
 801bdae:	2100      	movs	r1, #0
 801bdb0:	b11d      	cbz	r5, 801bdba <__udivmoddi4+0x9e>
 801bdb2:	40dc      	lsrs	r4, r3
 801bdb4:	2300      	movs	r3, #0
 801bdb6:	e9c5 4300 	strd	r4, r3, [r5]
 801bdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdbe:	428b      	cmp	r3, r1
 801bdc0:	d906      	bls.n	801bdd0 <__udivmoddi4+0xb4>
 801bdc2:	b10d      	cbz	r5, 801bdc8 <__udivmoddi4+0xac>
 801bdc4:	e9c5 0100 	strd	r0, r1, [r5]
 801bdc8:	2100      	movs	r1, #0
 801bdca:	4608      	mov	r0, r1
 801bdcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdd0:	fab3 f183 	clz	r1, r3
 801bdd4:	2900      	cmp	r1, #0
 801bdd6:	d148      	bne.n	801be6a <__udivmoddi4+0x14e>
 801bdd8:	42bb      	cmp	r3, r7
 801bdda:	d302      	bcc.n	801bde2 <__udivmoddi4+0xc6>
 801bddc:	4282      	cmp	r2, r0
 801bdde:	f200 8107 	bhi.w	801bff0 <__udivmoddi4+0x2d4>
 801bde2:	1a84      	subs	r4, r0, r2
 801bde4:	eb67 0203 	sbc.w	r2, r7, r3
 801bde8:	2001      	movs	r0, #1
 801bdea:	4694      	mov	ip, r2
 801bdec:	2d00      	cmp	r5, #0
 801bdee:	d0e4      	beq.n	801bdba <__udivmoddi4+0x9e>
 801bdf0:	e9c5 4c00 	strd	r4, ip, [r5]
 801bdf4:	e7e1      	b.n	801bdba <__udivmoddi4+0x9e>
 801bdf6:	2a00      	cmp	r2, #0
 801bdf8:	f000 8092 	beq.w	801bf20 <__udivmoddi4+0x204>
 801bdfc:	fab2 f382 	clz	r3, r2
 801be00:	2b00      	cmp	r3, #0
 801be02:	f040 80a8 	bne.w	801bf56 <__udivmoddi4+0x23a>
 801be06:	1a8a      	subs	r2, r1, r2
 801be08:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801be0c:	fa1f fc86 	uxth.w	ip, r6
 801be10:	2101      	movs	r1, #1
 801be12:	0c20      	lsrs	r0, r4, #16
 801be14:	fbb2 f7fe 	udiv	r7, r2, lr
 801be18:	fb0e 2217 	mls	r2, lr, r7, r2
 801be1c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 801be20:	fb0c f007 	mul.w	r0, ip, r7
 801be24:	4290      	cmp	r0, r2
 801be26:	d907      	bls.n	801be38 <__udivmoddi4+0x11c>
 801be28:	18b2      	adds	r2, r6, r2
 801be2a:	f107 38ff 	add.w	r8, r7, #4294967295
 801be2e:	d202      	bcs.n	801be36 <__udivmoddi4+0x11a>
 801be30:	4290      	cmp	r0, r2
 801be32:	f200 80e2 	bhi.w	801bffa <__udivmoddi4+0x2de>
 801be36:	4647      	mov	r7, r8
 801be38:	1a12      	subs	r2, r2, r0
 801be3a:	b2a4      	uxth	r4, r4
 801be3c:	fbb2 f0fe 	udiv	r0, r2, lr
 801be40:	fb0e 2210 	mls	r2, lr, r0, r2
 801be44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801be48:	fb0c fc00 	mul.w	ip, ip, r0
 801be4c:	45a4      	cmp	ip, r4
 801be4e:	d907      	bls.n	801be60 <__udivmoddi4+0x144>
 801be50:	1934      	adds	r4, r6, r4
 801be52:	f100 32ff 	add.w	r2, r0, #4294967295
 801be56:	d202      	bcs.n	801be5e <__udivmoddi4+0x142>
 801be58:	45a4      	cmp	ip, r4
 801be5a:	f200 80cb 	bhi.w	801bff4 <__udivmoddi4+0x2d8>
 801be5e:	4610      	mov	r0, r2
 801be60:	eba4 040c 	sub.w	r4, r4, ip
 801be64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 801be68:	e7a2      	b.n	801bdb0 <__udivmoddi4+0x94>
 801be6a:	f1c1 0620 	rsb	r6, r1, #32
 801be6e:	408b      	lsls	r3, r1
 801be70:	fa22 fc06 	lsr.w	ip, r2, r6
 801be74:	ea4c 0c03 	orr.w	ip, ip, r3
 801be78:	fa07 f401 	lsl.w	r4, r7, r1
 801be7c:	fa20 f306 	lsr.w	r3, r0, r6
 801be80:	40f7      	lsrs	r7, r6
 801be82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 801be86:	4323      	orrs	r3, r4
 801be88:	fa00 f801 	lsl.w	r8, r0, r1
 801be8c:	fa1f fe8c 	uxth.w	lr, ip
 801be90:	fbb7 f0f9 	udiv	r0, r7, r9
 801be94:	0c1c      	lsrs	r4, r3, #16
 801be96:	fb09 7710 	mls	r7, r9, r0, r7
 801be9a:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 801be9e:	fb00 f70e 	mul.w	r7, r0, lr
 801bea2:	42a7      	cmp	r7, r4
 801bea4:	fa02 f201 	lsl.w	r2, r2, r1
 801bea8:	d90a      	bls.n	801bec0 <__udivmoddi4+0x1a4>
 801beaa:	eb1c 0404 	adds.w	r4, ip, r4
 801beae:	f100 3aff 	add.w	sl, r0, #4294967295
 801beb2:	f080 809b 	bcs.w	801bfec <__udivmoddi4+0x2d0>
 801beb6:	42a7      	cmp	r7, r4
 801beb8:	f240 8098 	bls.w	801bfec <__udivmoddi4+0x2d0>
 801bebc:	3802      	subs	r0, #2
 801bebe:	4464      	add	r4, ip
 801bec0:	1be4      	subs	r4, r4, r7
 801bec2:	b29f      	uxth	r7, r3
 801bec4:	fbb4 f3f9 	udiv	r3, r4, r9
 801bec8:	fb09 4413 	mls	r4, r9, r3, r4
 801becc:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 801bed0:	fb03 fe0e 	mul.w	lr, r3, lr
 801bed4:	45a6      	cmp	lr, r4
 801bed6:	d909      	bls.n	801beec <__udivmoddi4+0x1d0>
 801bed8:	eb1c 0404 	adds.w	r4, ip, r4
 801bedc:	f103 37ff 	add.w	r7, r3, #4294967295
 801bee0:	f080 8082 	bcs.w	801bfe8 <__udivmoddi4+0x2cc>
 801bee4:	45a6      	cmp	lr, r4
 801bee6:	d97f      	bls.n	801bfe8 <__udivmoddi4+0x2cc>
 801bee8:	3b02      	subs	r3, #2
 801beea:	4464      	add	r4, ip
 801beec:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801bef0:	eba4 040e 	sub.w	r4, r4, lr
 801bef4:	fba0 e702 	umull	lr, r7, r0, r2
 801bef8:	42bc      	cmp	r4, r7
 801befa:	4673      	mov	r3, lr
 801befc:	46b9      	mov	r9, r7
 801befe:	d363      	bcc.n	801bfc8 <__udivmoddi4+0x2ac>
 801bf00:	d060      	beq.n	801bfc4 <__udivmoddi4+0x2a8>
 801bf02:	b15d      	cbz	r5, 801bf1c <__udivmoddi4+0x200>
 801bf04:	ebb8 0203 	subs.w	r2, r8, r3
 801bf08:	eb64 0409 	sbc.w	r4, r4, r9
 801bf0c:	fa04 f606 	lsl.w	r6, r4, r6
 801bf10:	fa22 f301 	lsr.w	r3, r2, r1
 801bf14:	431e      	orrs	r6, r3
 801bf16:	40cc      	lsrs	r4, r1
 801bf18:	e9c5 6400 	strd	r6, r4, [r5]
 801bf1c:	2100      	movs	r1, #0
 801bf1e:	e74c      	b.n	801bdba <__udivmoddi4+0x9e>
 801bf20:	0862      	lsrs	r2, r4, #1
 801bf22:	0848      	lsrs	r0, r1, #1
 801bf24:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 801bf28:	0c0b      	lsrs	r3, r1, #16
 801bf2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801bf2e:	b28a      	uxth	r2, r1
 801bf30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801bf34:	fbb3 f1f6 	udiv	r1, r3, r6
 801bf38:	07e4      	lsls	r4, r4, #31
 801bf3a:	46b4      	mov	ip, r6
 801bf3c:	4637      	mov	r7, r6
 801bf3e:	46b6      	mov	lr, r6
 801bf40:	231f      	movs	r3, #31
 801bf42:	fbb0 f0f6 	udiv	r0, r0, r6
 801bf46:	1bd2      	subs	r2, r2, r7
 801bf48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bf4c:	e761      	b.n	801be12 <__udivmoddi4+0xf6>
 801bf4e:	4661      	mov	r1, ip
 801bf50:	e714      	b.n	801bd7c <__udivmoddi4+0x60>
 801bf52:	4610      	mov	r0, r2
 801bf54:	e728      	b.n	801bda8 <__udivmoddi4+0x8c>
 801bf56:	f1c3 0120 	rsb	r1, r3, #32
 801bf5a:	fa20 f201 	lsr.w	r2, r0, r1
 801bf5e:	409e      	lsls	r6, r3
 801bf60:	fa27 f101 	lsr.w	r1, r7, r1
 801bf64:	409f      	lsls	r7, r3
 801bf66:	433a      	orrs	r2, r7
 801bf68:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801bf6c:	fa1f fc86 	uxth.w	ip, r6
 801bf70:	fbb1 f7fe 	udiv	r7, r1, lr
 801bf74:	fb0e 1017 	mls	r0, lr, r7, r1
 801bf78:	0c11      	lsrs	r1, r2, #16
 801bf7a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bf7e:	fb07 f80c 	mul.w	r8, r7, ip
 801bf82:	4588      	cmp	r8, r1
 801bf84:	fa04 f403 	lsl.w	r4, r4, r3
 801bf88:	d93a      	bls.n	801c000 <__udivmoddi4+0x2e4>
 801bf8a:	1871      	adds	r1, r6, r1
 801bf8c:	f107 30ff 	add.w	r0, r7, #4294967295
 801bf90:	d201      	bcs.n	801bf96 <__udivmoddi4+0x27a>
 801bf92:	4588      	cmp	r8, r1
 801bf94:	d81f      	bhi.n	801bfd6 <__udivmoddi4+0x2ba>
 801bf96:	eba1 0108 	sub.w	r1, r1, r8
 801bf9a:	fbb1 f8fe 	udiv	r8, r1, lr
 801bf9e:	fb08 f70c 	mul.w	r7, r8, ip
 801bfa2:	fb0e 1118 	mls	r1, lr, r8, r1
 801bfa6:	b292      	uxth	r2, r2
 801bfa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801bfac:	42ba      	cmp	r2, r7
 801bfae:	d22f      	bcs.n	801c010 <__udivmoddi4+0x2f4>
 801bfb0:	18b2      	adds	r2, r6, r2
 801bfb2:	f108 31ff 	add.w	r1, r8, #4294967295
 801bfb6:	d2c6      	bcs.n	801bf46 <__udivmoddi4+0x22a>
 801bfb8:	42ba      	cmp	r2, r7
 801bfba:	d2c4      	bcs.n	801bf46 <__udivmoddi4+0x22a>
 801bfbc:	f1a8 0102 	sub.w	r1, r8, #2
 801bfc0:	4432      	add	r2, r6
 801bfc2:	e7c0      	b.n	801bf46 <__udivmoddi4+0x22a>
 801bfc4:	45f0      	cmp	r8, lr
 801bfc6:	d29c      	bcs.n	801bf02 <__udivmoddi4+0x1e6>
 801bfc8:	ebbe 0302 	subs.w	r3, lr, r2
 801bfcc:	eb67 070c 	sbc.w	r7, r7, ip
 801bfd0:	3801      	subs	r0, #1
 801bfd2:	46b9      	mov	r9, r7
 801bfd4:	e795      	b.n	801bf02 <__udivmoddi4+0x1e6>
 801bfd6:	eba6 0808 	sub.w	r8, r6, r8
 801bfda:	4441      	add	r1, r8
 801bfdc:	1eb8      	subs	r0, r7, #2
 801bfde:	fbb1 f8fe 	udiv	r8, r1, lr
 801bfe2:	fb08 f70c 	mul.w	r7, r8, ip
 801bfe6:	e7dc      	b.n	801bfa2 <__udivmoddi4+0x286>
 801bfe8:	463b      	mov	r3, r7
 801bfea:	e77f      	b.n	801beec <__udivmoddi4+0x1d0>
 801bfec:	4650      	mov	r0, sl
 801bfee:	e767      	b.n	801bec0 <__udivmoddi4+0x1a4>
 801bff0:	4608      	mov	r0, r1
 801bff2:	e6fb      	b.n	801bdec <__udivmoddi4+0xd0>
 801bff4:	4434      	add	r4, r6
 801bff6:	3802      	subs	r0, #2
 801bff8:	e732      	b.n	801be60 <__udivmoddi4+0x144>
 801bffa:	3f02      	subs	r7, #2
 801bffc:	4432      	add	r2, r6
 801bffe:	e71b      	b.n	801be38 <__udivmoddi4+0x11c>
 801c000:	eba1 0108 	sub.w	r1, r1, r8
 801c004:	4638      	mov	r0, r7
 801c006:	fbb1 f8fe 	udiv	r8, r1, lr
 801c00a:	fb08 f70c 	mul.w	r7, r8, ip
 801c00e:	e7c8      	b.n	801bfa2 <__udivmoddi4+0x286>
 801c010:	4641      	mov	r1, r8
 801c012:	e798      	b.n	801bf46 <__udivmoddi4+0x22a>

0801c014 <_init>:
 801c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c016:	bf00      	nop
 801c018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c01a:	bc08      	pop	{r3}
 801c01c:	469e      	mov	lr, r3
 801c01e:	4770      	bx	lr

0801c020 <_fini>:
 801c020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c022:	bf00      	nop
 801c024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c026:	bc08      	pop	{r3}
 801c028:	469e      	mov	lr, r3
 801c02a:	4770      	bx	lr
