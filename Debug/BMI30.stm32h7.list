
BMI30.stm32h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c3e0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000202c  0801c6b0  0801c6b0  0001d6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e6dc  0801e6dc  0001f6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e6e4  0801e6e4  0001f6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801e6e8  0801e6e8  0001f6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002a8  24000000  0801e6ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001c260  240002c0  0801e994  000202c0  2**5
                  ALLOC
  8 .noinit       000000a8  2401c520  0801e994  00020520  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2401c5c8  0801e994  000205c8  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 11 .comment      00000039  00000000  00000000  000202d6  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035d30  00000000  00000000  0002030f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c0a  00000000  00000000  0005603f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026a8  00000000  00000000  0005cc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e29  00000000  00000000  0005f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003de66  00000000  00000000  00061121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003849b  00000000  00000000  0009ef87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00175466  00000000  00000000  000d7422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000a314  00000000  00000000  0024c888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000019d  00000000  00000000  00256b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000b15  00000000  00000000  00256d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b80c 	b.w	80003b0 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f01b fffe 	bl	801c3a0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_idiv0>:
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop

080003b4 <__do_global_dtors_aux>:
 80003b4:	b510      	push	{r4, lr}
 80003b6:	4c05      	ldr	r4, [pc, #20]	@ (80003cc <__do_global_dtors_aux+0x18>)
 80003b8:	7823      	ldrb	r3, [r4, #0]
 80003ba:	b933      	cbnz	r3, 80003ca <__do_global_dtors_aux+0x16>
 80003bc:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <__do_global_dtors_aux+0x1c>)
 80003be:	b113      	cbz	r3, 80003c6 <__do_global_dtors_aux+0x12>
 80003c0:	4804      	ldr	r0, [pc, #16]	@ (80003d4 <__do_global_dtors_aux+0x20>)
 80003c2:	f3af 8000 	nop.w
 80003c6:	2301      	movs	r3, #1
 80003c8:	7023      	strb	r3, [r4, #0]
 80003ca:	bd10      	pop	{r4, pc}
 80003cc:	240002c0 	.word	0x240002c0
 80003d0:	00000000 	.word	0x00000000
 80003d4:	0801c698 	.word	0x0801c698

080003d8 <frame_dummy>:
 80003d8:	b508      	push	{r3, lr}
 80003da:	4b03      	ldr	r3, [pc, #12]	@ (80003e8 <frame_dummy+0x10>)
 80003dc:	b11b      	cbz	r3, 80003e6 <frame_dummy+0xe>
 80003de:	4903      	ldr	r1, [pc, #12]	@ (80003ec <frame_dummy+0x14>)
 80003e0:	4803      	ldr	r0, [pc, #12]	@ (80003f0 <frame_dummy+0x18>)
 80003e2:	f3af 8000 	nop.w
 80003e6:	bd08      	pop	{r3, pc}
 80003e8:	00000000 	.word	0x00000000
 80003ec:	240002c4 	.word	0x240002c4
 80003f0:	0801c698 	.word	0x0801c698

080003f4 <adc_stream_stop>:
        ADC_LOGF("%u ", buf[i]);
    }
    ADC_LOGF("\r\n");
}
// Остановка стрима ADC: корректно останавливает DMA и ADC, сбрасывает буферы
void adc_stream_stop(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
    if (s_adc1) {
 80003f8:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <adc_stream_stop+0x5c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d009      	beq.n	8000414 <adc_stream_stop+0x20>
        HAL_ADC_Stop_DMA(s_adc1);
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <adc_stream_stop+0x5c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4618      	mov	r0, r3
 8000406:	f005 fc4f 	bl	8005ca8 <HAL_ADC_Stop_DMA>
        HAL_ADC_Stop(s_adc1);
 800040a:	4b11      	ldr	r3, [pc, #68]	@ (8000450 <adc_stream_stop+0x5c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4618      	mov	r0, r3
 8000410:	f005 fb3a 	bl	8005a88 <HAL_ADC_Stop>
    }
    if (s_adc2) {
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <adc_stream_stop+0x60>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d009      	beq.n	8000430 <adc_stream_stop+0x3c>
        HAL_ADC_Stop_DMA(s_adc2);
 800041c:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <adc_stream_stop+0x60>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f005 fc41 	bl	8005ca8 <HAL_ADC_Stop_DMA>
        HAL_ADC_Stop(s_adc2);
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <adc_stream_stop+0x60>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f005 fb2c 	bl	8005a88 <HAL_ADC_Stop>
    }
    frame_wr_seq = frame_rd_seq = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	4a09      	ldr	r2, [pc, #36]	@ (8000458 <adc_stream_stop+0x64>)
 8000434:	6013      	str	r3, [r2, #0]
 8000436:	4a09      	ldr	r2, [pc, #36]	@ (800045c <adc_stream_stop+0x68>)
 8000438:	6013      	str	r3, [r2, #0]
    frame_overflow_drops = 0;
 800043a:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <adc_stream_stop+0x6c>)
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
    frame_backlog_max = 0;
 8000440:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <adc_stream_stop+0x70>)
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
    s_next_ring_index = 0;
 8000446:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <adc_stream_stop+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
    ADC_LOGF("[ADC][STOP] DMA и ADC остановлены, буферы сброшены\r\n");
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2400ad2c 	.word	0x2400ad2c
 8000454:	2400ad30 	.word	0x2400ad30
 8000458:	2400ad04 	.word	0x2400ad04
 800045c:	2400ad00 	.word	0x2400ad00
 8000460:	2400ad08 	.word	0x2400ad08
 8000464:	2400ad0c 	.word	0x2400ad0c
 8000468:	2400ad28 	.word	0x2400ad28

0800046c <adc_addr_to_index>:
static volatile uint8_t s_pair_ready_mask[FIFO_FRAMES];
static volatile uint32_t s_pair_ready_idx = 0; /* следующий индекс, который ждём к публикации */

/* Вспомогательная функция: вычислить индекс кольца по адресу M0AR/M1AR */
static inline uint32_t adc_addr_to_index(uint32_t addr, uint16_t buf[FIFO_FRAMES][MAX_FRAME_SAMPLES])
{
 800046c:	b480      	push	{r7}
 800046e:	b087      	sub	sp, #28
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
    uint32_t base = (uint32_t)&buf[0][0];
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	617b      	str	r3, [r7, #20]
    uint32_t stride = (uint32_t)(MAX_FRAME_SAMPLES * sizeof(uint16_t));
 800047a:	f44f 632a 	mov.w	r3, #2720	@ 0xaa0
 800047e:	613b      	str	r3, [r7, #16]
    if(addr < base) return 0;
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	429a      	cmp	r2, r3
 8000486:	d201      	bcs.n	800048c <adc_addr_to_index+0x20>
 8000488:	2300      	movs	r3, #0
 800048a:	e009      	b.n	80004a0 <adc_addr_to_index+0x34>
    uint32_t diff = addr - base;
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	1ad3      	subs	r3, r2, r3
 8000492:	60fb      	str	r3, [r7, #12]
    return (diff / stride) & (FIFO_FRAMES - 1u);
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	fbb2 f3f3 	udiv	r3, r2, r3
 800049c:	f003 0307 	and.w	r3, r3, #7
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	371c      	adds	r7, #28
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <adc_mark_ready_and_publish>:

/* Отметить готовность канала и, если пара на очередном индексе готова, опубликовать её */
static inline void adc_mark_ready_and_publish(uint8_t ch_bit)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
    /* Попробуем публиковать подряд готовые пары (в правильном порядке) */
    while (s_pair_ready_mask[s_pair_ready_idx] == 0x3u) {
 80004b6:	e033      	b.n	8000520 <adc_mark_ready_and_publish+0x74>
        /* Очередная пара полностью готова */
        s_pair_ready_mask[s_pair_ready_idx] = 0;
 80004b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000538 <adc_mark_ready_and_publish+0x8c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a1f      	ldr	r2, [pc, #124]	@ (800053c <adc_mark_ready_and_publish+0x90>)
 80004be:	2100      	movs	r1, #0
 80004c0:	54d1      	strb	r1, [r2, r3]
        s_pair_ready_idx = (s_pair_ready_idx + 1u) & (FIFO_FRAMES - 1u);
 80004c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000538 <adc_mark_ready_and_publish+0x8c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	3301      	adds	r3, #1
 80004c8:	f003 0307 	and.w	r3, r3, #7
 80004cc:	4a1a      	ldr	r2, [pc, #104]	@ (8000538 <adc_mark_ready_and_publish+0x8c>)
 80004ce:	6013      	str	r3, [r2, #0]
        /* публикуем + уведомляем верхний уровень */
        frame_wr_seq += 1u;
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <adc_mark_ready_and_publish+0x94>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3301      	adds	r3, #1
 80004d6:	4a1a      	ldr	r2, [pc, #104]	@ (8000540 <adc_mark_ready_and_publish+0x94>)
 80004d8:	6013      	str	r3, [r2, #0]
        uint32_t backlog = frame_wr_seq - frame_rd_seq;
 80004da:	4b19      	ldr	r3, [pc, #100]	@ (8000540 <adc_mark_ready_and_publish+0x94>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b19      	ldr	r3, [pc, #100]	@ (8000544 <adc_mark_ready_and_publish+0x98>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	60fb      	str	r3, [r7, #12]
        if (backlog > frame_backlog_max) frame_backlog_max = backlog;
 80004e6:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <adc_mark_ready_and_publish+0x9c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d902      	bls.n	80004f6 <adc_mark_ready_and_publish+0x4a>
 80004f0:	4a15      	ldr	r2, [pc, #84]	@ (8000548 <adc_mark_ready_and_publish+0x9c>)
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	6013      	str	r3, [r2, #0]
        if (backlog > FIFO_FRAMES) {
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b08      	cmp	r3, #8
 80004fa:	d90e      	bls.n	800051a <adc_mark_ready_and_publish+0x6e>
            uint32_t excess = backlog - FIFO_FRAMES;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	3b08      	subs	r3, #8
 8000500:	60bb      	str	r3, [r7, #8]
            frame_overflow_drops += excess;
 8000502:	4b12      	ldr	r3, [pc, #72]	@ (800054c <adc_mark_ready_and_publish+0xa0>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4413      	add	r3, r2
 800050a:	4a10      	ldr	r2, [pc, #64]	@ (800054c <adc_mark_ready_and_publish+0xa0>)
 800050c:	6013      	str	r3, [r2, #0]
            frame_rd_seq += excess;
 800050e:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <adc_mark_ready_and_publish+0x98>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4413      	add	r3, r2
 8000516:	4a0b      	ldr	r2, [pc, #44]	@ (8000544 <adc_mark_ready_and_publish+0x98>)
 8000518:	6013      	str	r3, [r2, #0]
        }
        adc_stream_on_new_frames(1u);
 800051a:	2001      	movs	r0, #1
 800051c:	f019 f82a 	bl	8019574 <adc_stream_on_new_frames>
    while (s_pair_ready_mask[s_pair_ready_idx] == 0x3u) {
 8000520:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <adc_mark_ready_and_publish+0x8c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a05      	ldr	r2, [pc, #20]	@ (800053c <adc_mark_ready_and_publish+0x90>)
 8000526:	5cd3      	ldrb	r3, [r2, r3]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b03      	cmp	r3, #3
 800052c:	d0c4      	beq.n	80004b8 <adc_mark_ready_and_publish+0xc>
    }
    (void)ch_bit; /* параметр оставлен на будущее для расширенной диагностики */
}
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	2400ad3c 	.word	0x2400ad3c
 800053c:	2400ad34 	.word	0x2400ad34
 8000540:	2400ad00 	.word	0x2400ad00
 8000544:	2400ad04 	.word	0x2400ad04
 8000548:	2400ad0c 	.word	0x2400ad0c
 800054c:	2400ad08 	.word	0x2400ad08

08000550 <adc_stream_get_profile>:

// Публичные функции профиля
uint8_t adc_stream_get_profile(void) { return g_active_profile; }
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
 8000554:	4b03      	ldr	r3, [pc, #12]	@ (8000564 <adc_stream_get_profile+0x14>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	24000000 	.word	0x24000000

08000568 <adc_stream_get_active_samples>:
uint16_t adc_stream_get_active_samples(void) { return g_active_samples; }
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
 800056c:	4b03      	ldr	r3, [pc, #12]	@ (800057c <adc_stream_get_active_samples+0x14>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	24000002 	.word	0x24000002

08000580 <adc_stream_get_buf_rate>:
uint16_t adc_stream_get_buf_rate(void) { return g_profiles[g_active_profile].buf_rate_hz; }
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
 8000584:	4b05      	ldr	r3, [pc, #20]	@ (800059c <adc_stream_get_buf_rate+0x1c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4a05      	ldr	r2, [pc, #20]	@ (80005a0 <adc_stream_get_buf_rate+0x20>)
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	4413      	add	r3, r2
 800058e:	885b      	ldrh	r3, [r3, #2]
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	24000000 	.word	0x24000000
 80005a0:	0801d488 	.word	0x0801d488

080005a4 <adc_stream_apply_profile>:
uint32_t adc_stream_get_fs(void) { return g_profiles[g_active_profile].fs_hz; }

static HAL_StatusTypeDef adc_stream_apply_profile(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
    if (!s_adc1 || !s_adc2) {
 80005aa:	4b3d      	ldr	r3, [pc, #244]	@ (80006a0 <adc_stream_apply_profile+0xfc>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d003      	beq.n	80005ba <adc_stream_apply_profile+0x16>
 80005b2:	4b3c      	ldr	r3, [pc, #240]	@ (80006a4 <adc_stream_apply_profile+0x100>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d101      	bne.n	80005be <adc_stream_apply_profile+0x1a>
        ADC_LOGF("[ADC][APPLY_PROFILE] ERROR: s_adc1/s_adc2 не инициализированы!\r\n");
        return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e06c      	b.n	8000698 <adc_stream_apply_profile+0xf4>
    }
    uint32_t total_samples = (uint32_t)g_active_samples;
 80005be:	4b3a      	ldr	r3, [pc, #232]	@ (80006a8 <adc_stream_apply_profile+0x104>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	613b      	str	r3, [r7, #16]
    ADC_LOGF("[ADC][APPLY_PROFILE] profile=%u samples=%u\r\n", (unsigned)g_active_profile, (unsigned)g_active_samples);
    // Остановить DMA перед запуском с новым размером
    HAL_ADC_Stop_DMA(s_adc1);
 80005c4:	4b36      	ldr	r3, [pc, #216]	@ (80006a0 <adc_stream_apply_profile+0xfc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f005 fb6d 	bl	8005ca8 <HAL_ADC_Stop_DMA>
    HAL_ADC_Stop_DMA(s_adc2);
 80005ce:	4b35      	ldr	r3, [pc, #212]	@ (80006a4 <adc_stream_apply_profile+0x100>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 fb68 	bl	8005ca8 <HAL_ADC_Stop_DMA>
    ADC_LOGF("[ADC][APPLY_PROFILE] DMA остановлен, подготовка к запуску\r\n");
    frame_wr_seq = frame_rd_seq = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	4a34      	ldr	r2, [pc, #208]	@ (80006ac <adc_stream_apply_profile+0x108>)
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	4a34      	ldr	r2, [pc, #208]	@ (80006b0 <adc_stream_apply_profile+0x10c>)
 80005e0:	6013      	str	r3, [r2, #0]
    frame_overflow_drops = 0;
 80005e2:	4b34      	ldr	r3, [pc, #208]	@ (80006b4 <adc_stream_apply_profile+0x110>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
    frame_backlog_max = 0;
 80005e8:	4b33      	ldr	r3, [pc, #204]	@ (80006b8 <adc_stream_apply_profile+0x114>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
    /* Сброс новой синхронизации пар */
    for (unsigned i = 0; i < FIFO_FRAMES; ++i) s_pair_ready_mask[i] = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	e007      	b.n	8000604 <adc_stream_apply_profile+0x60>
 80005f4:	4a31      	ldr	r2, [pc, #196]	@ (80006bc <adc_stream_apply_profile+0x118>)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	4413      	add	r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	3301      	adds	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	2b07      	cmp	r3, #7
 8000608:	d9f4      	bls.n	80005f4 <adc_stream_apply_profile+0x50>
    s_pair_ready_idx = 0;
 800060a:	4b2d      	ldr	r3, [pc, #180]	@ (80006c0 <adc_stream_apply_profile+0x11c>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
    s_next_ring_index = 2 % FIFO_FRAMES; // M0->buf0, M1->buf1 уже заняты при старте; начнём с 2
 8000610:	4b2c      	ldr	r3, [pc, #176]	@ (80006c4 <adc_stream_apply_profile+0x120>)
 8000612:	2202      	movs	r2, #2
 8000614:	601a      	str	r2, [r3, #0]
    #if DIAG_DISABLE_ADC_DMA
        ADC_LOGF("[ADC][DIAG] DMA start suppressed (DIAG_DISABLE_ADC_DMA=1) total_samples=%lu\r\n", (unsigned long)total_samples);
        return HAL_OK;
    #else
        // Старт ADC1 DMA на буфер[0] длиной N
    HAL_StatusTypeDef rc1 = HAL_ADC_Start_DMA(s_adc1, (uint32_t*)adc1_buffers[0], total_samples);
 8000616:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <adc_stream_apply_profile+0xfc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	492a      	ldr	r1, [pc, #168]	@ (80006c8 <adc_stream_apply_profile+0x124>)
 800061e:	4618      	mov	r0, r3
 8000620:	f005 fa66 	bl	8005af0 <HAL_ADC_Start_DMA>
 8000624:	4603      	mov	r3, r0
 8000626:	73fb      	strb	r3, [r7, #15]
    ADC_LOGF("[ADC][APPLY_PROFILE] HAL_ADC_Start_DMA ADC1 rc=%d\r\n", (int)rc1);
    if (rc1 != HAL_OK) return HAL_ERROR;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <adc_stream_apply_profile+0x8e>
 800062e:	2301      	movs	r3, #1
 8000630:	e032      	b.n	8000698 <adc_stream_apply_profile+0xf4>
        #if !DIAG_SINGLE_ADC1
    HAL_StatusTypeDef rc2 = HAL_ADC_Start_DMA(s_adc2, (uint32_t*)adc2_buffers[0], total_samples);
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <adc_stream_apply_profile+0x100>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	4924      	ldr	r1, [pc, #144]	@ (80006cc <adc_stream_apply_profile+0x128>)
 800063a:	4618      	mov	r0, r3
 800063c:	f005 fa58 	bl	8005af0 <HAL_ADC_Start_DMA>
 8000640:	4603      	mov	r3, r0
 8000642:	73bb      	strb	r3, [r7, #14]
    ADC_LOGF("[ADC][APPLY_PROFILE] HAL_ADC_Start_DMA ADC2 rc=%d\r\n", (int)rc2);
    if (rc2 != HAL_OK) return HAL_ERROR;
 8000644:	7bbb      	ldrb	r3, [r7, #14]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <adc_stream_apply_profile+0xaa>
 800064a:	2301      	movs	r3, #1
 800064c:	e024      	b.n	8000698 <adc_stream_apply_profile+0xf4>
                /* NVIC: Полностью выключаем IRQ DMA1_Stream1 */
                HAL_NVIC_DisableIRQ(DMA1_Stream1_IRQn);
            } while (0);
        #else
            /* Убедимся, что IRQ для ADC2 DMA включены (Half/Full не требуем, достаточно TC) */
            HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800064e:	200c      	movs	r0, #12
 8000650:	f006 fdb3 	bl	80071ba <HAL_NVIC_EnableIRQ>
        #endif
        #endif
        /* Включаем Double-Buffer Mode (DBM) и задаём второй банк M1 на buf[1] */
        {
            DMA_Stream_TypeDef *st = (DMA_Stream_TypeDef*)hdma_adc1.Instance;
 8000654:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <adc_stream_apply_profile+0x12c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	60bb      	str	r3, [r7, #8]
            st->M1AR = (uint32_t)adc1_buffers[1];
 800065a:	4a1e      	ldr	r2, [pc, #120]	@ (80006d4 <adc_stream_apply_profile+0x130>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	611a      	str	r2, [r3, #16]
            st->CR  |= (uint32_t)(1u<<18); /* DBM */
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	601a      	str	r2, [r3, #0]
            /* Отключаем HTIE (half) — оставляем только TC */
            st->CR &= ~((uint32_t)(1u<<3));
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f023 0208 	bic.w	r2, r3, #8
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	601a      	str	r2, [r3, #0]
        }
        #if !DIAG_SINGLE_ADC1
        {
            DMA_Stream_TypeDef *st = (DMA_Stream_TypeDef*)hdma_adc2.Instance;
 8000678:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <adc_stream_apply_profile+0x134>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	607b      	str	r3, [r7, #4]
            st->M1AR = (uint32_t)adc2_buffers[1];
 800067e:	4a17      	ldr	r2, [pc, #92]	@ (80006dc <adc_stream_apply_profile+0x138>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	611a      	str	r2, [r3, #16]
            st->CR  |= (uint32_t)(1u<<18); /* DBM */
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	601a      	str	r2, [r3, #0]
            /* Для ADC2 все IRQ уже выключены выше */
        }
        #endif
        /* Одноразовый вывод регистров DMA для ADC1 */
        {
            DMA_Stream_TypeDef *st = (DMA_Stream_TypeDef*)hdma_adc1.Instance;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <adc_stream_apply_profile+0x12c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	603b      	str	r3, [r7, #0]
                   (unsigned long)st->M0AR,
                   (unsigned long)st->FCR,
                   (unsigned)DIAG_SINGLE_ADC1);
        }
    #endif
    return HAL_OK;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2400ad2c 	.word	0x2400ad2c
 80006a4:	2400ad30 	.word	0x2400ad30
 80006a8:	24000002 	.word	0x24000002
 80006ac:	2400ad04 	.word	0x2400ad04
 80006b0:	2400ad00 	.word	0x2400ad00
 80006b4:	2400ad08 	.word	0x2400ad08
 80006b8:	2400ad0c 	.word	0x2400ad0c
 80006bc:	2400ad34 	.word	0x2400ad34
 80006c0:	2400ad3c 	.word	0x2400ad3c
 80006c4:	2400ad28 	.word	0x2400ad28
 80006c8:	24000300 	.word	0x24000300
 80006cc:	24005800 	.word	0x24005800
 80006d0:	2400b154 	.word	0x2400b154
 80006d4:	24000da0 	.word	0x24000da0
 80006d8:	2400b1cc 	.word	0x2400b1cc
 80006dc:	240062a0 	.word	0x240062a0

080006e0 <adc_stream_set_profile>:

int adc_stream_set_profile(uint8_t prof_id) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
    if (prof_id >= ADC_PROFILE_COUNT) return -1;
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	d902      	bls.n	80006f6 <adc_stream_set_profile+0x16>
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	e020      	b.n	8000738 <adc_stream_set_profile+0x58>
    if (prof_id == g_active_profile) return 0; // уже
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <adc_stream_set_profile+0x60>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d101      	bne.n	8000704 <adc_stream_set_profile+0x24>
 8000700:	2300      	movs	r3, #0
 8000702:	e019      	b.n	8000738 <adc_stream_set_profile+0x58>
    g_active_profile = prof_id;
 8000704:	4a0e      	ldr	r2, [pc, #56]	@ (8000740 <adc_stream_set_profile+0x60>)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	7013      	strb	r3, [r2, #0]
    g_active_samples = g_profiles[prof_id].samples_per_buf;
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <adc_stream_set_profile+0x64>)
 800070e:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <adc_stream_set_profile+0x68>)
 8000714:	801a      	strh	r2, [r3, #0]
    if (s_adc1 && s_adc2) {
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <adc_stream_set_profile+0x6c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00b      	beq.n	8000736 <adc_stream_set_profile+0x56>
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <adc_stream_set_profile+0x70>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d007      	beq.n	8000736 <adc_stream_set_profile+0x56>
        if (adc_stream_apply_profile() != HAL_OK) return -2;
 8000726:	f7ff ff3d 	bl	80005a4 <adc_stream_apply_profile>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <adc_stream_set_profile+0x56>
 8000730:	f06f 0301 	mvn.w	r3, #1
 8000734:	e000      	b.n	8000738 <adc_stream_set_profile+0x58>
    }
    return 0;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	24000000 	.word	0x24000000
 8000744:	0801d488 	.word	0x0801d488
 8000748:	24000002 	.word	0x24000002
 800074c:	2400ad2c 	.word	0x2400ad2c
 8000750:	2400ad30 	.word	0x2400ad30

08000754 <adc_stream_init>:

void adc_stream_init(void) {
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
    frame_wr_seq = frame_rd_seq = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	4a07      	ldr	r2, [pc, #28]	@ (8000778 <adc_stream_init+0x24>)
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	4a07      	ldr	r2, [pc, #28]	@ (800077c <adc_stream_init+0x28>)
 8000760:	6013      	str	r3, [r2, #0]
    frame_overflow_drops = 0;
 8000762:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <adc_stream_init+0x2c>)
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
    frame_backlog_max = 0;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <adc_stream_init+0x30>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	2400ad04 	.word	0x2400ad04
 800077c:	2400ad00 	.word	0x2400ad00
 8000780:	2400ad08 	.word	0x2400ad08
 8000784:	2400ad0c 	.word	0x2400ad0c

08000788 <adc_stream_start>:

HAL_StatusTypeDef adc_stream_start(ADC_HandleTypeDef* a1, ADC_HandleTypeDef* a2) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
    s_adc1 = a1; s_adc2 = a2;
 8000792:	4a0c      	ldr	r2, [pc, #48]	@ (80007c4 <adc_stream_start+0x3c>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4a0b      	ldr	r2, [pc, #44]	@ (80007c8 <adc_stream_start+0x40>)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	6013      	str	r3, [r2, #0]
    /* Не переустанавливаем профиль по умолчанию здесь.
       Используем текущий g_active_profile (может быть задан хостом через SET_PROFILE до START).
       При инициализации по умолчанию он уже установлен в ADC_PROFILE_B_DEFAULT. */
    g_active_samples = g_profiles[g_active_profile].samples_per_buf;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <adc_stream_start+0x44>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <adc_stream_start+0x48>)
 80007a6:	f833 2032 	ldrh.w	r2, [r3, r2, lsl #3]
 80007aa:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <adc_stream_start+0x4c>)
 80007ac:	801a      	strh	r2, [r3, #0]
    adc_stream_init();
 80007ae:	f7ff ffd1 	bl	8000754 <adc_stream_init>
    ADC_LOGF("[ADC][START] profile=%u samples=%u\r\n", (unsigned)g_active_profile, (unsigned)g_active_samples);
    HAL_StatusTypeDef rc = adc_stream_apply_profile();
 80007b2:	f7ff fef7 	bl	80005a4 <adc_stream_apply_profile>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73fb      	strb	r3, [r7, #15]
    ADC_LOGF("[ADC][START] adc_stream_apply_profile rc=%d\r\n", (int)rc);
    return rc;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2400ad2c 	.word	0x2400ad2c
 80007c8:	2400ad30 	.word	0x2400ad30
 80007cc:	24000000 	.word	0x24000000
 80007d0:	0801d488 	.word	0x0801d488
 80007d4:	24000002 	.word	0x24000002

080007d8 <adc_get_frame>:
    if (a1) s_adc1 = a1;
    if (a2) s_adc2 = a2;
    return adc_stream_apply_profile();
}

uint8_t adc_get_frame(uint16_t **ch1, uint16_t **ch2, uint16_t *samples) {
 80007d8:	b480      	push	{r7}
 80007da:	b087      	sub	sp, #28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
    if (!ch1 || !ch2 || !samples) {
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d005      	beq.n	80007f6 <adc_get_frame+0x1e>
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <adc_get_frame+0x1e>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d101      	bne.n	80007fa <adc_get_frame+0x22>
        ADC_LOGF("[ADC][GET_FRAME] ERROR: ch1/ch2/samples NULL\r\n");
        return 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e02e      	b.n	8000858 <adc_get_frame+0x80>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fa:	b672      	cpsid	i
}
 80007fc:	bf00      	nop
    }
    __disable_irq();
    if (frame_rd_seq == frame_wr_seq) {
 80007fe:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <adc_get_frame+0x8c>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <adc_get_frame+0x90>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	429a      	cmp	r2, r3
 8000808:	d103      	bne.n	8000812 <adc_get_frame+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 800080a:	b662      	cpsie	i
}
 800080c:	bf00      	nop
        __enable_irq();
        ADC_LOGF("[ADC][GET_FRAME] Нет новых кадров: frame_wr_seq=%lu frame_rd_seq=%lu\r\n", (unsigned long)frame_wr_seq, (unsigned long)frame_rd_seq);
        return 0;
 800080e:	2300      	movs	r3, #0
 8000810:	e022      	b.n	8000858 <adc_get_frame+0x80>
    }
    uint32_t seq = frame_rd_seq++;
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <adc_get_frame+0x8c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	4912      	ldr	r1, [pc, #72]	@ (8000864 <adc_get_frame+0x8c>)
 800081a:	600a      	str	r2, [r1, #0]
 800081c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 800081e:	b662      	cpsie	i
}
 8000820:	bf00      	nop
    __enable_irq();
    uint32_t index = seq & (FIFO_FRAMES - 1u);
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	f003 0307 	and.w	r3, r3, #7
 8000828:	613b      	str	r3, [r7, #16]
    *ch1 = adc1_buffers[index];
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8000830:	fb02 f303 	mul.w	r3, r2, r3
 8000834:	4a0d      	ldr	r2, [pc, #52]	@ (800086c <adc_get_frame+0x94>)
 8000836:	441a      	add	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	601a      	str	r2, [r3, #0]
    *ch2 = adc2_buffers[index];
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8000842:	fb02 f303 	mul.w	r3, r2, r3
 8000846:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <adc_get_frame+0x98>)
 8000848:	441a      	add	r2, r3
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	601a      	str	r2, [r3, #0]
    *samples = g_active_samples;
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <adc_get_frame+0x9c>)
 8000850:	881a      	ldrh	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	801a      	strh	r2, [r3, #0]
    ADC_LOGF("[ADC][GET_FRAME] OK: seq=%lu index=%lu samples=%u\r\n", (unsigned long)seq, (unsigned long)index, (unsigned)g_active_samples);
    return 1;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	371c      	adds	r7, #28
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	2400ad04 	.word	0x2400ad04
 8000868:	2400ad00 	.word	0x2400ad00
 800086c:	24000300 	.word	0x24000300
 8000870:	24005800 	.word	0x24005800
 8000874:	24000002 	.word	0x24000002

08000878 <adc_stream_get_debug>:

void adc_stream_get_debug(adc_stream_debug_t *out) {
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    if (!out) return;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d027      	beq.n	80008d6 <adc_stream_get_debug+0x5e>
    out->frame_wr_seq = frame_wr_seq;
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <adc_stream_get_debug+0x6c>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	601a      	str	r2, [r3, #0]
    out->frame_rd_seq = frame_rd_seq;
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <adc_stream_get_debug+0x70>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	605a      	str	r2, [r3, #4]
    out->frame_overflow_drops = frame_overflow_drops;
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <adc_stream_get_debug+0x74>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	609a      	str	r2, [r3, #8]
    out->frame_backlog_max = frame_backlog_max;
 800089e:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <adc_stream_get_debug+0x78>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	60da      	str	r2, [r3, #12]
    out->dma_half0 = dma_half0; out->dma_full0 = dma_full0;
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <adc_stream_get_debug+0x7c>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	611a      	str	r2, [r3, #16]
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <adc_stream_get_debug+0x80>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	615a      	str	r2, [r3, #20]
    out->dma_half1 = dma_half1; out->dma_full1 = dma_full1;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <adc_stream_get_debug+0x84>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	619a      	str	r2, [r3, #24]
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <adc_stream_get_debug+0x88>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	61da      	str	r2, [r3, #28]
    out->active_samples = g_active_samples;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <adc_stream_get_debug+0x8c>)
 80008c8:	881a      	ldrh	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	841a      	strh	r2, [r3, #32]
    out->reserved = 0;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	845a      	strh	r2, [r3, #34]	@ 0x22
 80008d4:	e000      	b.n	80008d8 <adc_stream_get_debug+0x60>
    if (!out) return;
 80008d6:	bf00      	nop
}
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	2400ad00 	.word	0x2400ad00
 80008e8:	2400ad04 	.word	0x2400ad04
 80008ec:	2400ad08 	.word	0x2400ad08
 80008f0:	2400ad0c 	.word	0x2400ad0c
 80008f4:	2400ad18 	.word	0x2400ad18
 80008f8:	2400ad1c 	.word	0x2400ad1c
 80008fc:	2400ad20 	.word	0x2400ad20
 8000900:	2400ad24 	.word	0x2400ad24
 8000904:	24000002 	.word	0x24000002

08000908 <HAL_ADC_ConvHalfCpltCallback>:

// Weak hook (can be overridden in higher-level module, e.g. USB)
void __attribute__((weak)) adc_stream_on_new_frames(uint32_t frames_added) { (void)frames_added; }

// --- HAL callbacks ---
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == (s_adc1 ? s_adc1->Instance : NULL)) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d003      	beq.n	8000924 <HAL_ADC_ConvHalfCpltCallback+0x1c>
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	e000      	b.n	8000926 <HAL_ADC_ConvHalfCpltCallback+0x1e>
 8000924:	2300      	movs	r3, #0
 8000926:	4293      	cmp	r3, r2
 8000928:	d10a      	bne.n	8000940 <HAL_ADC_ConvHalfCpltCallback+0x38>
    dma_half0++; dbg_dma1_half_count++;
 800092a:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	4a10      	ldr	r2, [pc, #64]	@ (8000974 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	4a0f      	ldr	r2, [pc, #60]	@ (8000978 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 800093c:	6013      	str	r3, [r2, #0]
        /* Half-Complete игнорируем (IRQ отключён), оставлено для счётчиков */
        (void)0;
    } else if (hadc->Instance == (s_adc2 ? s_adc2->Instance : NULL)) {
        dma_half1++; // используем только для диагностики
    }
}
 800093e:	e011      	b.n	8000964 <HAL_ADC_ConvHalfCpltCallback+0x5c>
    } else if (hadc->Instance == (s_adc2 ? s_adc2->Instance : NULL)) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d003      	beq.n	8000954 <HAL_ADC_ConvHalfCpltCallback+0x4c>
 800094c:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <HAL_ADC_ConvHalfCpltCallback+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	e000      	b.n	8000956 <HAL_ADC_ConvHalfCpltCallback+0x4e>
 8000954:	2300      	movs	r3, #0
 8000956:	4293      	cmp	r3, r2
 8000958:	d104      	bne.n	8000964 <HAL_ADC_ConvHalfCpltCallback+0x5c>
        dma_half1++; // используем только для диагностики
 800095a:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	4a07      	ldr	r2, [pc, #28]	@ (8000980 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	2400ad2c 	.word	0x2400ad2c
 8000974:	2400ad18 	.word	0x2400ad18
 8000978:	240002dc 	.word	0x240002dc
 800097c:	2400ad30 	.word	0x2400ad30
 8000980:	2400ad20 	.word	0x2400ad20

08000984 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b090      	sub	sp, #64	@ 0x40
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == (s_adc1 ? s_adc1->Instance : NULL)) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b6c      	ldr	r3, [pc, #432]	@ (8000b44 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d003      	beq.n	80009a0 <HAL_ADC_ConvCpltCallback+0x1c>
 8000998:	4b6a      	ldr	r3, [pc, #424]	@ (8000b44 <HAL_ADC_ConvCpltCallback+0x1c0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	e000      	b.n	80009a2 <HAL_ADC_ConvCpltCallback+0x1e>
 80009a0:	2300      	movs	r3, #0
 80009a2:	4293      	cmp	r3, r2
 80009a4:	f040 8086 	bne.w	8000ab4 <HAL_ADC_ConvCpltCallback+0x130>
    dma_full0++; dbg_dma1_full_count++;
 80009a8:	4b67      	ldr	r3, [pc, #412]	@ (8000b48 <HAL_ADC_ConvCpltCallback+0x1c4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	4a66      	ldr	r2, [pc, #408]	@ (8000b48 <HAL_ADC_ConvCpltCallback+0x1c4>)
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	4b66      	ldr	r3, [pc, #408]	@ (8000b4c <HAL_ADC_ConvCpltCallback+0x1c8>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	4a64      	ldr	r2, [pc, #400]	@ (8000b4c <HAL_ADC_ConvCpltCallback+0x1c8>)
 80009ba:	6013      	str	r3, [r2, #0]
           (unsigned long)dbg_dma1_half_count,
           (unsigned long)dbg_dma1_full_count);
        return;
    }
#endif
        adc_last_full0_ms = HAL_GetTick();
 80009bc:	f004 fad6 	bl	8004f6c <HAL_GetTick>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4a63      	ldr	r2, [pc, #396]	@ (8000b50 <HAL_ADC_ConvCpltCallback+0x1cc>)
 80009c4:	6013      	str	r3, [r2, #0]
        /* Определим, какой банк у ADC1 только что завершился, и отметим индекс кольца как готовый для CH0. */
        do {
            DMA_Stream_TypeDef *st1 = (DMA_Stream_TypeDef*)hdma_adc1.Instance;
 80009c6:	4b63      	ldr	r3, [pc, #396]	@ (8000b54 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t cr1 = st1->CR;
 80009cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	623b      	str	r3, [r7, #32]
            uint32_t ct1 = (cr1 >> 19) & 1u; /* текущий таргет */
 80009d2:	6a3b      	ldr	r3, [r7, #32]
 80009d4:	0cdb      	lsrs	r3, r3, #19
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	61fb      	str	r3, [r7, #28]
            /* завершился банк противоположный текущему */
            uint32_t done_addr1 = ct1 ? st1->M0AR : st1->M1AR;
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <HAL_ADC_ConvCpltCallback+0x64>
 80009e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	e001      	b.n	80009ec <HAL_ADC_ConvCpltCallback+0x68>
 80009e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	61bb      	str	r3, [r7, #24]
            uint32_t done_idx1 = adc_addr_to_index(done_addr1, adc1_buffers);
 80009ee:	495a      	ldr	r1, [pc, #360]	@ (8000b58 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80009f0:	69b8      	ldr	r0, [r7, #24]
 80009f2:	f7ff fd3b 	bl	800046c <adc_addr_to_index>
 80009f6:	6178      	str	r0, [r7, #20]
            if (done_idx1 < FIFO_FRAMES) { s_pair_ready_mask[done_idx1] |= 0x01u; }
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	2b07      	cmp	r3, #7
 80009fc:	d80c      	bhi.n	8000a18 <HAL_ADC_ConvCpltCallback+0x94>
 80009fe:	4a57      	ldr	r2, [pc, #348]	@ (8000b5c <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	4413      	add	r3, r2
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	b2d9      	uxtb	r1, r3
 8000a0e:	4a53      	ldr	r2, [pc, #332]	@ (8000b5c <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	4413      	add	r3, r2
 8000a14:	460a      	mov	r2, r1
 8000a16:	701a      	strb	r2, [r3, #0]

            /* Продвинем адрес свободного банка DMA на следующий слот кольца — для ADC1 и ADC2.
               В DBM разрешено писать в неактивный банк: определяем по биту CT (CR[19]). */
            uint32_t idx = s_next_ring_index; // выбрать следующий буфер для назначения в свободный банк
 8000a18:	4b51      	ldr	r3, [pc, #324]	@ (8000b60 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (idx >= FIFO_FRAMES) idx &= (FIFO_FRAMES-1u);
 8000a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a20:	2b07      	cmp	r3, #7
 8000a22:	d903      	bls.n	8000a2c <HAL_ADC_ConvCpltCallback+0xa8>
 8000a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (cr1 & (1u<<19)) {
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d00a      	beq.n	8000a4c <HAL_ADC_ConvCpltCallback+0xc8>
                /* CT=1 => сейчас активен M1, значит завершился M0 -> переадресуем M0 на следующий */
                st1->M0AR = (uint32_t)adc1_buffers[idx];
 8000a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a38:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8000a3c:	fb02 f303 	mul.w	r3, r2, r3
 8000a40:	4a45      	ldr	r2, [pc, #276]	@ (8000b58 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000a42:	4413      	add	r3, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	e009      	b.n	8000a60 <HAL_ADC_ConvCpltCallback+0xdc>
            } else {
                /* CT=0 => активен M0, завершился M1 */
                st1->M1AR = (uint32_t)adc1_buffers[idx];
 8000a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a4e:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8000a52:	fb02 f303 	mul.w	r3, r2, r3
 8000a56:	4a40      	ldr	r2, [pc, #256]	@ (8000b58 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000a58:	4413      	add	r3, r2
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5e:	611a      	str	r2, [r3, #16]
            }
            #if !DIAG_SINGLE_ADC1
            DMA_Stream_TypeDef *st2 = (DMA_Stream_TypeDef*)hdma_adc2.Instance;
 8000a60:	4b40      	ldr	r3, [pc, #256]	@ (8000b64 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	613b      	str	r3, [r7, #16]
            uint32_t cr2 = st2->CR;
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	60fb      	str	r3, [r7, #12]
            if (cr2 & (1u<<19)) {
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00a      	beq.n	8000a8c <HAL_ADC_ConvCpltCallback+0x108>
                st2->M0AR = (uint32_t)adc2_buffers[idx];
 8000a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a78:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	4a39      	ldr	r2, [pc, #228]	@ (8000b68 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000a82:	4413      	add	r3, r2
 8000a84:	461a      	mov	r2, r3
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	e009      	b.n	8000aa0 <HAL_ADC_ConvCpltCallback+0x11c>
            } else {
                st2->M1AR = (uint32_t)adc2_buffers[idx];
 8000a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a8e:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8000a92:	fb02 f303 	mul.w	r3, r2, r3
 8000a96:	4a34      	ldr	r2, [pc, #208]	@ (8000b68 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000a98:	4413      	add	r3, r2
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	611a      	str	r2, [r3, #16]
            }
            #endif
            s_next_ring_index = (idx + 1u) & (FIFO_FRAMES - 1u);
 8000aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	4a2d      	ldr	r2, [pc, #180]	@ (8000b60 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000aaa:	6013      	str	r3, [r2, #0]
        } while(0);
        /* Попробуем опубликовать готовые подряд пары */
        adc_mark_ready_and_publish(0x01);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fcfd 	bl	80004ac <adc_mark_ready_and_publish>
        uint32_t done_addr2 = ct2 ? st2->M0AR : st2->M1AR;
        uint32_t done_idx2 = adc_addr_to_index(done_addr2, adc2_buffers);
        if (done_idx2 < FIFO_FRAMES) { s_pair_ready_mask[done_idx2] |= 0x02u; }
        adc_mark_ready_and_publish(0x02);
    }
 8000ab2:	e042      	b.n	8000b3a <HAL_ADC_ConvCpltCallback+0x1b6>
    } else if (hadc->Instance == (s_adc2 ? s_adc2->Instance : NULL)) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <HAL_ADC_ConvCpltCallback+0x144>
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b6c <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	e000      	b.n	8000aca <HAL_ADC_ConvCpltCallback+0x146>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d135      	bne.n	8000b3a <HAL_ADC_ConvCpltCallback+0x1b6>
        dma_full1++;
 8000ace:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	4a26      	ldr	r2, [pc, #152]	@ (8000b70 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000ad6:	6013      	str	r3, [r2, #0]
        adc_last_full1_ms = HAL_GetTick();
 8000ad8:	f004 fa48 	bl	8004f6c <HAL_GetTick>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a25      	ldr	r2, [pc, #148]	@ (8000b74 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000ae0:	6013      	str	r3, [r2, #0]
        DMA_Stream_TypeDef *st2 = (DMA_Stream_TypeDef*)hdma_adc2.Instance;
 8000ae2:	4b20      	ldr	r3, [pc, #128]	@ (8000b64 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t cr2 = st2->CR;
 8000ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ct2 = (cr2 >> 19) & 1u;
 8000aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000af0:	0cdb      	lsrs	r3, r3, #19
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t done_addr2 = ct2 ? st2->M0AR : st2->M1AR;
 8000af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d002      	beq.n	8000b04 <HAL_ADC_ConvCpltCallback+0x180>
 8000afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	e001      	b.n	8000b08 <HAL_ADC_ConvCpltCallback+0x184>
 8000b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t done_idx2 = adc_addr_to_index(done_addr2, adc2_buffers);
 8000b0a:	4917      	ldr	r1, [pc, #92]	@ (8000b68 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000b0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000b0e:	f7ff fcad 	bl	800046c <adc_addr_to_index>
 8000b12:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (done_idx2 < FIFO_FRAMES) { s_pair_ready_mask[done_idx2] |= 0x02u; }
 8000b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b16:	2b07      	cmp	r3, #7
 8000b18:	d80c      	bhi.n	8000b34 <HAL_ADC_ConvCpltCallback+0x1b0>
 8000b1a:	4a10      	ldr	r2, [pc, #64]	@ (8000b5c <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	b2d9      	uxtb	r1, r3
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b5c <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b2e:	4413      	add	r3, r2
 8000b30:	460a      	mov	r2, r1
 8000b32:	701a      	strb	r2, [r3, #0]
        adc_mark_ready_and_publish(0x02);
 8000b34:	2002      	movs	r0, #2
 8000b36:	f7ff fcb9 	bl	80004ac <adc_mark_ready_and_publish>
 8000b3a:	bf00      	nop
 8000b3c:	3740      	adds	r7, #64	@ 0x40
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2400ad2c 	.word	0x2400ad2c
 8000b48:	2400ad1c 	.word	0x2400ad1c
 8000b4c:	240002e0 	.word	0x240002e0
 8000b50:	2400ad10 	.word	0x2400ad10
 8000b54:	2400b154 	.word	0x2400b154
 8000b58:	24000300 	.word	0x24000300
 8000b5c:	2400ad34 	.word	0x2400ad34
 8000b60:	2400ad28 	.word	0x2400ad28
 8000b64:	2400b1cc 	.word	0x2400b1cc
 8000b68:	24005800 	.word	0x24005800
 8000b6c:	2400ad30 	.word	0x2400ad30
 8000b70:	2400ad24 	.word	0x2400ad24
 8000b74:	2400ad14 	.word	0x2400ad14

08000b78 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7c:	f3bf 8f4f 	dsb	sy
}
 8000b80:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <__NVIC_SystemReset+0x24>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b8a:	4904      	ldr	r1, [pc, #16]	@ (8000b9c <__NVIC_SystemReset+0x24>)
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <__NVIC_SystemReset+0x28>)
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b92:	f3bf 8f4f 	dsb	sy
}
 8000b96:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <__NVIC_SystemReset+0x20>
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	05fa0004 	.word	0x05fa0004

08000ba4 <reset_trace_record>:
  uint32_t hardfault_count;  // число HardFault сессий
  uint32_t busfault_count;   // число BusFault
  uint32_t usagefault_count; // число UsageFault
} reset_trace_t;
static reset_trace_t __attribute__((section(".noinit"))) g_reset_trace;
static void reset_trace_record(uint32_t rsr){
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(g_reset_trace.magic != 0x21524553UL){ // '!RES'
 8000bac:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <reset_trace_record+0x78>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c20 <reset_trace_record+0x7c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d01d      	beq.n	8000bf2 <reset_trace_record+0x4e>
    g_reset_trace.magic = 0x21524553UL;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <reset_trace_record+0x78>)
 8000bb8:	4a19      	ldr	r2, [pc, #100]	@ (8000c20 <reset_trace_record+0x7c>)
 8000bba:	601a      	str	r2, [r3, #0]
    g_reset_trace.index = 0;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <reset_trace_record+0x78>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
    for(int i=0;i<8;i++) g_reset_trace.rsr[i]=0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	e008      	b.n	8000bda <reset_trace_record+0x36>
 8000bc8:	4a14      	ldr	r2, [pc, #80]	@ (8000c1c <reset_trace_record+0x78>)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3302      	adds	r3, #2
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b07      	cmp	r3, #7
 8000bde:	ddf3      	ble.n	8000bc8 <reset_trace_record+0x24>
    g_reset_trace.hardfault_count = 0;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <reset_trace_record+0x78>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	@ 0x28
    g_reset_trace.busfault_count = 0;
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <reset_trace_record+0x78>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	62da      	str	r2, [r3, #44]	@ 0x2c
    g_reset_trace.usagefault_count = 0;
 8000bec:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <reset_trace_record+0x78>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  g_reset_trace.rsr[g_reset_trace.index & 7U] = rsr;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <reset_trace_record+0x78>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	4908      	ldr	r1, [pc, #32]	@ (8000c1c <reset_trace_record+0x78>)
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  g_reset_trace.index++;
 8000c04:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <reset_trace_record+0x78>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <reset_trace_record+0x78>)
 8000c0c:	6053      	str	r3, [r2, #4]
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	2401c520 	.word	0x2401c520
 8000c20:	21524553 	.word	0x21524553

08000c24 <reset_cause_str>:

static const char* reset_cause_str(uint32_t rsr){
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(rsr & RCC_RSR_IWDG1RSTF) return "IWDG";   // Independent watchdog
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <reset_cause_str+0x16>
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <reset_cause_str+0x78>)
 8000c38:	e02a      	b.n	8000c90 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_WWDG1RSTF) return "WWDG";   // Window watchdog
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <reset_cause_str+0x24>
 8000c44:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <reset_cause_str+0x7c>)
 8000c46:	e023      	b.n	8000c90 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_LPWRRSTF)  return "LPWR";   // Low-power reset
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <reset_cause_str+0x32>
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <reset_cause_str+0x80>)
 8000c54:	e01c      	b.n	8000c90 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_BORRSTF)   return "BOR";    // Brown-out reset
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <reset_cause_str+0x40>
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <reset_cause_str+0x84>)
 8000c62:	e015      	b.n	8000c90 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_PINRSTF)   return "PIN";    // NRST pin
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <reset_cause_str+0x4e>
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <reset_cause_str+0x88>)
 8000c70:	e00e      	b.n	8000c90 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_SFTRSTF)   return "SOFT";   // Software reset
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <reset_cause_str+0x5c>
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <reset_cause_str+0x8c>)
 8000c7e:	e007      	b.n	8000c90 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_PORRSTF)   return "POR";    // Power-on reset
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <reset_cause_str+0x6a>
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <reset_cause_str+0x90>)
 8000c8c:	e000      	b.n	8000c90 <reset_cause_str+0x6c>
  return "UNK";
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <reset_cause_str+0x94>)
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	0801c6b0 	.word	0x0801c6b0
 8000ca0:	0801c6b8 	.word	0x0801c6b8
 8000ca4:	0801c6c0 	.word	0x0801c6c0
 8000ca8:	0801c6c8 	.word	0x0801c6c8
 8000cac:	0801c6cc 	.word	0x0801c6cc
 8000cb0:	0801c6d0 	.word	0x0801c6d0
 8000cb4:	0801c6d8 	.word	0x0801c6d8
 8000cb8:	0801c6dc 	.word	0x0801c6dc

08000cbc <log_reset_cause>:
static void log_reset_cause(void){
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b09d      	sub	sp, #116	@ 0x74
 8000cc0:	af02      	add	r7, sp, #8
  // Считываем и сразу очищаем флаги (запись 1 очищает)
  reset_cause_raw = RCC->RSR;
 8000cc2:	4ba3      	ldr	r3, [pc, #652]	@ (8000f50 <log_reset_cause+0x294>)
 8000cc4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000cc8:	4aa2      	ldr	r2, [pc, #648]	@ (8000f54 <log_reset_cause+0x298>)
 8000cca:	6013      	str	r3, [r2, #0]
  reset_trace_record(reset_cause_raw);
 8000ccc:	4ba1      	ldr	r3, [pc, #644]	@ (8000f54 <log_reset_cause+0x298>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff67 	bl	8000ba4 <reset_trace_record>
  char flags[96];
  flags[0]='\0';
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	703b      	strb	r3, [r7, #0]
  #define ADD_FLAG(bit,name) do{ if(reset_cause_raw & (bit)){ if(flags[0]) strncat(flags, ",", sizeof(flags)-1); strncat(flags, (name), sizeof(flags)-1);} }while(0)
  ADD_FLAG(RCC_RSR_IWDG1RSTF, "IWDG");
 8000cda:	4b9e      	ldr	r3, [pc, #632]	@ (8000f54 <log_reset_cause+0x298>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d01c      	beq.n	8000d20 <log_reset_cause+0x64>
 8000ce6:	783b      	ldrb	r3, [r7, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d00c      	beq.n	8000d06 <log_reset_cause+0x4a>
 8000cec:	463b      	mov	r3, r7
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff faee 	bl	80002d0 <strlen>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4996      	ldr	r1, [pc, #600]	@ (8000f58 <log_reset_cause+0x29c>)
 8000cfe:	461a      	mov	r2, r3
 8000d00:	460b      	mov	r3, r1
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	8013      	strh	r3, [r2, #0]
 8000d06:	463b      	mov	r3, r7
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fae1 	bl	80002d0 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	461a      	mov	r2, r3
 8000d12:	463b      	mov	r3, r7
 8000d14:	4413      	add	r3, r2
 8000d16:	4a91      	ldr	r2, [pc, #580]	@ (8000f5c <log_reset_cause+0x2a0>)
 8000d18:	6810      	ldr	r0, [r2, #0]
 8000d1a:	6018      	str	r0, [r3, #0]
 8000d1c:	7912      	ldrb	r2, [r2, #4]
 8000d1e:	711a      	strb	r2, [r3, #4]
  ADD_FLAG(RCC_RSR_WWDG1RSTF, "WWDG");
 8000d20:	4b8c      	ldr	r3, [pc, #560]	@ (8000f54 <log_reset_cause+0x298>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d01c      	beq.n	8000d66 <log_reset_cause+0xaa>
 8000d2c:	783b      	ldrb	r3, [r7, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00c      	beq.n	8000d4c <log_reset_cause+0x90>
 8000d32:	463b      	mov	r3, r7
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff facb 	bl	80002d0 <strlen>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4413      	add	r3, r2
 8000d42:	4985      	ldr	r1, [pc, #532]	@ (8000f58 <log_reset_cause+0x29c>)
 8000d44:	461a      	mov	r2, r3
 8000d46:	460b      	mov	r3, r1
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	8013      	strh	r3, [r2, #0]
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fabe 	bl	80002d0 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	463b      	mov	r3, r7
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a80      	ldr	r2, [pc, #512]	@ (8000f60 <log_reset_cause+0x2a4>)
 8000d5e:	6810      	ldr	r0, [r2, #0]
 8000d60:	6018      	str	r0, [r3, #0]
 8000d62:	7912      	ldrb	r2, [r2, #4]
 8000d64:	711a      	strb	r2, [r3, #4]
  ADD_FLAG(RCC_RSR_LPWRRSTF,  "LPWR");
 8000d66:	4b7b      	ldr	r3, [pc, #492]	@ (8000f54 <log_reset_cause+0x298>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d01c      	beq.n	8000dac <log_reset_cause+0xf0>
 8000d72:	783b      	ldrb	r3, [r7, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d00c      	beq.n	8000d92 <log_reset_cause+0xd6>
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff faa8 	bl	80002d0 <strlen>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	463b      	mov	r3, r7
 8000d86:	4413      	add	r3, r2
 8000d88:	4973      	ldr	r1, [pc, #460]	@ (8000f58 <log_reset_cause+0x29c>)
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	8013      	strh	r3, [r2, #0]
 8000d92:	463b      	mov	r3, r7
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fa9b 	bl	80002d0 <strlen>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4413      	add	r3, r2
 8000da2:	4a70      	ldr	r2, [pc, #448]	@ (8000f64 <log_reset_cause+0x2a8>)
 8000da4:	6810      	ldr	r0, [r2, #0]
 8000da6:	6018      	str	r0, [r3, #0]
 8000da8:	7912      	ldrb	r2, [r2, #4]
 8000daa:	711a      	strb	r2, [r3, #4]
  ADD_FLAG(RCC_RSR_BORRSTF,   "BOR");
 8000dac:	4b69      	ldr	r3, [pc, #420]	@ (8000f54 <log_reset_cause+0x298>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d01a      	beq.n	8000dee <log_reset_cause+0x132>
 8000db8:	783b      	ldrb	r3, [r7, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00c      	beq.n	8000dd8 <log_reset_cause+0x11c>
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fa85 	bl	80002d0 <strlen>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4413      	add	r3, r2
 8000dce:	4962      	ldr	r1, [pc, #392]	@ (8000f58 <log_reset_cause+0x29c>)
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	8013      	strh	r3, [r2, #0]
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fa78 	bl	80002d0 <strlen>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	463b      	mov	r3, r7
 8000de6:	4413      	add	r3, r2
 8000de8:	4a5f      	ldr	r2, [pc, #380]	@ (8000f68 <log_reset_cause+0x2ac>)
 8000dea:	6810      	ldr	r0, [r2, #0]
 8000dec:	6018      	str	r0, [r3, #0]
  ADD_FLAG(RCC_RSR_PINRSTF,   "PIN");
 8000dee:	4b59      	ldr	r3, [pc, #356]	@ (8000f54 <log_reset_cause+0x298>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d01a      	beq.n	8000e30 <log_reset_cause+0x174>
 8000dfa:	783b      	ldrb	r3, [r7, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00c      	beq.n	8000e1a <log_reset_cause+0x15e>
 8000e00:	463b      	mov	r3, r7
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fa64 	bl	80002d0 <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4413      	add	r3, r2
 8000e10:	4951      	ldr	r1, [pc, #324]	@ (8000f58 <log_reset_cause+0x29c>)
 8000e12:	461a      	mov	r2, r3
 8000e14:	460b      	mov	r3, r1
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	8013      	strh	r3, [r2, #0]
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fa57 	bl	80002d0 <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	463b      	mov	r3, r7
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a50      	ldr	r2, [pc, #320]	@ (8000f6c <log_reset_cause+0x2b0>)
 8000e2c:	6810      	ldr	r0, [r2, #0]
 8000e2e:	6018      	str	r0, [r3, #0]
  ADD_FLAG(RCC_RSR_SFTRSTF,   "SOFT");
 8000e30:	4b48      	ldr	r3, [pc, #288]	@ (8000f54 <log_reset_cause+0x298>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d01c      	beq.n	8000e76 <log_reset_cause+0x1ba>
 8000e3c:	783b      	ldrb	r3, [r7, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00c      	beq.n	8000e5c <log_reset_cause+0x1a0>
 8000e42:	463b      	mov	r3, r7
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fa43 	bl	80002d0 <strlen>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4413      	add	r3, r2
 8000e52:	4941      	ldr	r1, [pc, #260]	@ (8000f58 <log_reset_cause+0x29c>)
 8000e54:	461a      	mov	r2, r3
 8000e56:	460b      	mov	r3, r1
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	8013      	strh	r3, [r2, #0]
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fa36 	bl	80002d0 <strlen>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a40      	ldr	r2, [pc, #256]	@ (8000f70 <log_reset_cause+0x2b4>)
 8000e6e:	6810      	ldr	r0, [r2, #0]
 8000e70:	6018      	str	r0, [r3, #0]
 8000e72:	7912      	ldrb	r2, [r2, #4]
 8000e74:	711a      	strb	r2, [r3, #4]
  ADD_FLAG(RCC_RSR_PORRSTF,   "POR");
 8000e76:	4b37      	ldr	r3, [pc, #220]	@ (8000f54 <log_reset_cause+0x298>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d01a      	beq.n	8000eb8 <log_reset_cause+0x1fc>
 8000e82:	783b      	ldrb	r3, [r7, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00c      	beq.n	8000ea2 <log_reset_cause+0x1e6>
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fa20 	bl	80002d0 <strlen>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	463b      	mov	r3, r7
 8000e96:	4413      	add	r3, r2
 8000e98:	492f      	ldr	r1, [pc, #188]	@ (8000f58 <log_reset_cause+0x29c>)
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	8013      	strh	r3, [r2, #0]
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fa13 	bl	80002d0 <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a30      	ldr	r2, [pc, #192]	@ (8000f74 <log_reset_cause+0x2b8>)
 8000eb4:	6810      	ldr	r0, [r2, #0]
 8000eb6:	6018      	str	r0, [r3, #0]
  if(!flags[0]) strncpy(flags, "NONE", sizeof(flags)-1);
 8000eb8:	783b      	ldrb	r3, [r7, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d105      	bne.n	8000eca <log_reset_cause+0x20e>
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	225f      	movs	r2, #95	@ 0x5f
 8000ec2:	492d      	ldr	r1, [pc, #180]	@ (8000f78 <log_reset_cause+0x2bc>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f01a fb21 	bl	801b50c <strncpy>
  printf("[BOOT] RSR=0x%08lX FLAGS=%s PRIMARY=%s SIGN=0x%08lX\r\n", (unsigned long)reset_cause_raw, flags, reset_cause_str(reset_cause_raw), (unsigned long)build_signature_hex);
 8000eca:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <log_reset_cause+0x298>)
 8000ecc:	681c      	ldr	r4, [r3, #0]
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <log_reset_cause+0x298>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fea6 	bl	8000c24 <reset_cause_str>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4928      	ldr	r1, [pc, #160]	@ (8000f7c <log_reset_cause+0x2c0>)
 8000edc:	463a      	mov	r2, r7
 8000ede:	9100      	str	r1, [sp, #0]
 8000ee0:	4621      	mov	r1, r4
 8000ee2:	4827      	ldr	r0, [pc, #156]	@ (8000f80 <log_reset_cause+0x2c4>)
 8000ee4:	f01a f88c 	bl	801b000 <iprintf>
  // Печатаем трассу (последние до 8 значений)
  printf("[BOOT] RSR_TRACE idx=%lu: ", (unsigned long)g_reset_trace.index);
 8000ee8:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <log_reset_cause+0x2c8>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4826      	ldr	r0, [pc, #152]	@ (8000f88 <log_reset_cause+0x2cc>)
 8000ef0:	f01a f886 	bl	801b000 <iprintf>
  for(int i=0;i<8;i++){
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	667b      	str	r3, [r7, #100]	@ 0x64
 8000ef8:	e018      	b.n	8000f2c <log_reset_cause+0x270>
    uint32_t v = g_reset_trace.rsr[(g_reset_trace.index - 1 - i) & 7U];
 8000efa:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <log_reset_cause+0x2c8>)
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	4a1e      	ldr	r2, [pc, #120]	@ (8000f84 <log_reset_cause+0x2c8>)
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f10:	663b      	str	r3, [r7, #96]	@ 0x60
    printf(i?",0x%08lX":"0x%08lX", (unsigned long)v);
 8000f12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <log_reset_cause+0x260>
 8000f18:	4b1c      	ldr	r3, [pc, #112]	@ (8000f8c <log_reset_cause+0x2d0>)
 8000f1a:	e000      	b.n	8000f1e <log_reset_cause+0x262>
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <log_reset_cause+0x2d4>)
 8000f1e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000f20:	4618      	mov	r0, r3
 8000f22:	f01a f86d 	bl	801b000 <iprintf>
  for(int i=0;i<8;i++){
 8000f26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f28:	3301      	adds	r3, #1
 8000f2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8000f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f2e:	2b07      	cmp	r3, #7
 8000f30:	dde3      	ble.n	8000efa <log_reset_cause+0x23e>
  }
  printf("\r\n");
 8000f32:	4818      	ldr	r0, [pc, #96]	@ (8000f94 <log_reset_cause+0x2d8>)
 8000f34:	f01a f8cc 	bl	801b0d0 <puts>
  RCC->RSR |= RCC_RSR_RMVF; // снять флаги
 8000f38:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <log_reset_cause+0x294>)
 8000f3a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000f3e:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <log_reset_cause+0x294>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f44:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
}
 8000f48:	bf00      	nop
 8000f4a:	376c      	adds	r7, #108	@ 0x6c
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd90      	pop	{r4, r7, pc}
 8000f50:	58024400 	.word	0x58024400
 8000f54:	2400b278 	.word	0x2400b278
 8000f58:	0801c6e0 	.word	0x0801c6e0
 8000f5c:	0801c6b0 	.word	0x0801c6b0
 8000f60:	0801c6b8 	.word	0x0801c6b8
 8000f64:	0801c6c0 	.word	0x0801c6c0
 8000f68:	0801c6c8 	.word	0x0801c6c8
 8000f6c:	0801c6cc 	.word	0x0801c6cc
 8000f70:	0801c6d0 	.word	0x0801c6d0
 8000f74:	0801c6d8 	.word	0x0801c6d8
 8000f78:	0801c6e4 	.word	0x0801c6e4
 8000f7c:	a5b6c7d8 	.word	0xa5b6c7d8
 8000f80:	0801c6ec 	.word	0x0801c6ec
 8000f84:	2401c520 	.word	0x2401c520
 8000f88:	0801c724 	.word	0x0801c724
 8000f8c:	0801c740 	.word	0x0801c740
 8000f90:	0801c74c 	.word	0x0801c74c
 8000f94:	0801c754 	.word	0x0801c754

08000f98 <boot_diag_init>:
  BOOT_PROGRESS_AFTER_ADC      = (1u<<2),
  BOOT_PROGRESS_ENTER_LOOP     = (1u<<3)
};
static uint32_t g_progress_flags = 0;

static void boot_diag_init(uint32_t current_rsr){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if(g_boot_diag.magic != 0x42444731UL){ // 'BDG1'
 8000fa0:	4b33      	ldr	r3, [pc, #204]	@ (8001070 <boot_diag_init+0xd8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a33      	ldr	r2, [pc, #204]	@ (8001074 <boot_diag_init+0xdc>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d007      	beq.n	8000fba <boot_diag_init+0x22>
    memset(&g_boot_diag, 0, sizeof(g_boot_diag));
 8000faa:	226c      	movs	r2, #108	@ 0x6c
 8000fac:	2100      	movs	r1, #0
 8000fae:	4830      	ldr	r0, [pc, #192]	@ (8001070 <boot_diag_init+0xd8>)
 8000fb0:	f01a fa92 	bl	801b4d8 <memset>
    g_boot_diag.magic = 0x42444731UL;
 8000fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001070 <boot_diag_init+0xd8>)
 8000fb6:	4a2f      	ldr	r2, [pc, #188]	@ (8001074 <boot_diag_init+0xdc>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }
  g_boot_diag.boot_counter++;
 8000fba:	4b2d      	ldr	r3, [pc, #180]	@ (8001070 <boot_diag_init+0xd8>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8001070 <boot_diag_init+0xd8>)
 8000fc2:	6053      	str	r3, [r2, #4]
  // Ничего не пишем сейчас – запись произойдёт перед потенциальным сбросом / периодически
  // Для визуализации напечатаем последние 4 аптайма
  printf("[BOOT] LAST_UPTIMES(ms): ");
 8000fc4:	482c      	ldr	r0, [pc, #176]	@ (8001078 <boot_diag_init+0xe0>)
 8000fc6:	f01a f81b 	bl	801b000 <iprintf>
  for(int i=0;i<8;i++){
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e01c      	b.n	800100a <boot_diag_init+0x72>
    uint32_t v = g_boot_diag.rec[(g_boot_diag.slot - 1 - i) & 7u].uptime_ms;
 8000fd0:	4b27      	ldr	r3, [pc, #156]	@ (8001070 <boot_diag_init+0xd8>)
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	f003 0207 	and.w	r2, r3, #7
 8000fde:	4924      	ldr	r1, [pc, #144]	@ (8001070 <boot_diag_init+0xd8>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	330c      	adds	r3, #12
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	60bb      	str	r3, [r7, #8]
    printf(i?",%lu":"%lu", (unsigned long)v);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <boot_diag_init+0x62>
 8000ff6:	4b21      	ldr	r3, [pc, #132]	@ (800107c <boot_diag_init+0xe4>)
 8000ff8:	e000      	b.n	8000ffc <boot_diag_init+0x64>
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <boot_diag_init+0xe8>)
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f019 fffe 	bl	801b000 <iprintf>
  for(int i=0;i<8;i++){
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b07      	cmp	r3, #7
 800100e:	dddf      	ble.n	8000fd0 <boot_diag_init+0x38>
  }
  printf("\r\n");
 8001010:	481c      	ldr	r0, [pc, #112]	@ (8001084 <boot_diag_init+0xec>)
 8001012:	f01a f85d 	bl	801b0d0 <puts>
  printf("[BOOT] LAST_PROGRESS: ");
 8001016:	481c      	ldr	r0, [pc, #112]	@ (8001088 <boot_diag_init+0xf0>)
 8001018:	f019 fff2 	bl	801b000 <iprintf>
  for(int i=0;i<4;i++){
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	e01c      	b.n	800105c <boot_diag_init+0xc4>
    uint32_t pf = g_boot_diag.rec[(g_boot_diag.slot - 1 - i) & 7u].progress_flags;
 8001022:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <boot_diag_init+0xd8>)
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	3b01      	subs	r3, #1
 800102c:	f003 0207 	and.w	r2, r3, #7
 8001030:	490f      	ldr	r1, [pc, #60]	@ (8001070 <boot_diag_init+0xd8>)
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	3310      	adds	r3, #16
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	60fb      	str	r3, [r7, #12]
    printf(i?",0x%02lX":"0x%02lX", (unsigned long)pf);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <boot_diag_init+0xb4>
 8001048:	4b10      	ldr	r3, [pc, #64]	@ (800108c <boot_diag_init+0xf4>)
 800104a:	e000      	b.n	800104e <boot_diag_init+0xb6>
 800104c:	4b10      	ldr	r3, [pc, #64]	@ (8001090 <boot_diag_init+0xf8>)
 800104e:	68f9      	ldr	r1, [r7, #12]
 8001050:	4618      	mov	r0, r3
 8001052:	f019 ffd5 	bl	801b000 <iprintf>
  for(int i=0;i<4;i++){
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	3301      	adds	r3, #1
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	2b03      	cmp	r3, #3
 8001060:	dddf      	ble.n	8001022 <boot_diag_init+0x8a>
  }
  printf("\r\n");
 8001062:	4808      	ldr	r0, [pc, #32]	@ (8001084 <boot_diag_init+0xec>)
 8001064:	f01a f834 	bl	801b0d0 <puts>
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2401c554 	.word	0x2401c554
 8001074:	42444731 	.word	0x42444731
 8001078:	0801c758 	.word	0x0801c758
 800107c:	0801c774 	.word	0x0801c774
 8001080:	0801c77c 	.word	0x0801c77c
 8001084:	0801c754 	.word	0x0801c754
 8001088:	0801c780 	.word	0x0801c780
 800108c:	0801c798 	.word	0x0801c798
 8001090:	0801c7a4 	.word	0x0801c7a4

08001094 <boot_diag_periodic>:

static void boot_diag_periodic(uint32_t uptime_ms){
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  // Периодическое обновление текущего слота, чтобы при внезапном PIN reset мы имели аптайм
  uint32_t s = (g_boot_diag.slot) & 7u; // текущий рабочий слот
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <boot_diag_periodic+0x60>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	60fb      	str	r3, [r7, #12]
  g_boot_diag.rec[s].uptime_ms = uptime_ms;
 80010a6:	4913      	ldr	r1, [pc, #76]	@ (80010f4 <boot_diag_periodic+0x60>)
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	330c      	adds	r3, #12
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
  g_boot_diag.rec[s].progress_flags = g_progress_flags;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <boot_diag_periodic+0x64>)
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	480d      	ldr	r0, [pc, #52]	@ (80010f4 <boot_diag_periodic+0x60>)
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4403      	add	r3, r0
 80010cc:	3310      	adds	r3, #16
 80010ce:	6019      	str	r1, [r3, #0]
  g_boot_diag.rec[s].rsr = reset_cause_raw; // последний считанный (текущая сессия)
 80010d0:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <boot_diag_periodic+0x68>)
 80010d2:	6819      	ldr	r1, [r3, #0]
 80010d4:	4807      	ldr	r0, [pc, #28]	@ (80010f4 <boot_diag_periodic+0x60>)
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4403      	add	r3, r0
 80010e2:	3314      	adds	r3, #20
 80010e4:	6019      	str	r1, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2401c554 	.word	0x2401c554
 80010f8:	2400b280 	.word	0x2400b280
 80010fc:	2400b278 	.word	0x2400b278

08001100 <boot_diag_finalize_before_reset>:

static void boot_diag_finalize_before_reset(uint32_t uptime_ms){
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  // Завершаем текущий слот и переходим к следующему
  uint32_t s = (g_boot_diag.slot) & 7u;
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <boot_diag_finalize_before_reset+0x68>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	60fb      	str	r3, [r7, #12]
  g_boot_diag.rec[s].uptime_ms = uptime_ms;
 8001112:	4915      	ldr	r1, [pc, #84]	@ (8001168 <boot_diag_finalize_before_reset+0x68>)
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	330c      	adds	r3, #12
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	601a      	str	r2, [r3, #0]
  g_boot_diag.rec[s].progress_flags = g_progress_flags;
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <boot_diag_finalize_before_reset+0x6c>)
 8001128:	6819      	ldr	r1, [r3, #0]
 800112a:	480f      	ldr	r0, [pc, #60]	@ (8001168 <boot_diag_finalize_before_reset+0x68>)
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4403      	add	r3, r0
 8001138:	3310      	adds	r3, #16
 800113a:	6019      	str	r1, [r3, #0]
  g_boot_diag.rec[s].rsr = reset_cause_raw;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <boot_diag_finalize_before_reset+0x70>)
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	4809      	ldr	r0, [pc, #36]	@ (8001168 <boot_diag_finalize_before_reset+0x68>)
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4403      	add	r3, r0
 800114e:	3314      	adds	r3, #20
 8001150:	6019      	str	r1, [r3, #0]
  g_boot_diag.slot++;
 8001152:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <boot_diag_finalize_before_reset+0x68>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	3301      	adds	r3, #1
 8001158:	4a03      	ldr	r2, [pc, #12]	@ (8001168 <boot_diag_finalize_before_reset+0x68>)
 800115a:	6093      	str	r3, [r2, #8]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	2401c554 	.word	0x2401c554
 800116c:	2400b280 	.word	0x2400b280
 8001170:	2400b278 	.word	0x2400b278

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001176:	b0b1      	sub	sp, #196	@ 0xc4
 8001178:	af06      	add	r7, sp, #24
  /* TEST MARKER: Check if new code is running */
  printf("[MARKER_MAIN] Entered main() function\r\n");
 800117a:	4875      	ldr	r0, [pc, #468]	@ (8001350 <main+0x1dc>)
 800117c:	f019 ffa8 	bl	801b0d0 <puts>

  /* USER CODE BEGIN 1 */
  static uint32_t early_rsr_raw = 0; // первое чтение до HAL_Init
  early_rsr_raw = RCC->RSR; /* читаем как можно раньше */
 8001180:	4b74      	ldr	r3, [pc, #464]	@ (8001354 <main+0x1e0>)
 8001182:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001186:	4a74      	ldr	r2, [pc, #464]	@ (8001358 <main+0x1e4>)
 8001188:	6013      	str	r3, [r2, #0]
  uint8_t iwdg_extended_early = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  }
#else
  // Сверхранняя индикация: мигаем LED и подсветкой до HAL_Init (на случай раннего fault)
  // Обе линии висят на порте E по схеме платы; используем макросы HAL для портов/пинов
  // Включаем тактирование основных портов GPIO (A, B, C, D, E, H), чтобы точно покрыть задействованные линии
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b70      	ldr	r3, [pc, #448]	@ (8001354 <main+0x1e0>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001196:	4a6f      	ldr	r2, [pc, #444]	@ (8001354 <main+0x1e0>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001354 <main+0x1e0>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80011ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b69      	ldr	r3, [pc, #420]	@ (8001354 <main+0x1e0>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b4:	4a67      	ldr	r2, [pc, #412]	@ (8001354 <main+0x1e0>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011be:	4b65      	ldr	r3, [pc, #404]	@ (8001354 <main+0x1e0>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	4b61      	ldr	r3, [pc, #388]	@ (8001354 <main+0x1e0>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d2:	4a60      	ldr	r2, [pc, #384]	@ (8001354 <main+0x1e0>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011dc:	4b5d      	ldr	r3, [pc, #372]	@ (8001354 <main+0x1e0>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001354 <main+0x1e0>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f0:	4a58      	ldr	r2, [pc, #352]	@ (8001354 <main+0x1e0>)
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011fa:	4b56      	ldr	r3, [pc, #344]	@ (8001354 <main+0x1e0>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	647b      	str	r3, [r7, #68]	@ 0x44
 8001206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001208:	4b52      	ldr	r3, [pc, #328]	@ (8001354 <main+0x1e0>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120e:	4a51      	ldr	r2, [pc, #324]	@ (8001354 <main+0x1e0>)
 8001210:	f043 0310 	orr.w	r3, r3, #16
 8001214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001218:	4b4e      	ldr	r3, [pc, #312]	@ (8001354 <main+0x1e0>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	643b      	str	r3, [r7, #64]	@ 0x40
 8001224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	4b4b      	ldr	r3, [pc, #300]	@ (8001354 <main+0x1e0>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122c:	4a49      	ldr	r2, [pc, #292]	@ (8001354 <main+0x1e0>)
 800122e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001236:	4b47      	ldr	r3, [pc, #284]	@ (8001354 <main+0x1e0>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  GPIO_TypeDef *led_port = Led_Test_GPIO_Port;
 8001244:	4b45      	ldr	r3, [pc, #276]	@ (800135c <main+0x1e8>)
 8001246:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_TypeDef *bl_port  = LCD_Led_GPIO_Port;
 800124a:	4b44      	ldr	r3, [pc, #272]	@ (800135c <main+0x1e8>)
 800124c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  uint32_t led_mask = Led_Test_Pin;     // битовая маска
 8001250:	2308      	movs	r3, #8
 8001252:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t bl_mask  = LCD_Led_Pin;      // битовая маска
 8001256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800125a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int led_idx = __builtin_ctz(led_mask); // индекс пина 0..15
 800125e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001262:	fa93 f3a3 	rbit	r3, r3
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int bl_idx  = __builtin_ctz(bl_mask);
 800126e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	fab3 f383 	clz	r3, r3
 800127a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  // Настраиваем режим Output для обеих линий (очистить 2 бита MODER и выставить 01)
  led_port->MODER &= ~(3u << (led_idx*2));
 800127e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2103      	movs	r1, #3
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	401a      	ands	r2, r3
 8001294:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001298:	601a      	str	r2, [r3, #0]
  led_port->MODER |=  (1u << (led_idx*2));
 800129a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2101      	movs	r1, #1
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	431a      	orrs	r2, r3
 80012ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012b2:	601a      	str	r2, [r3, #0]
  bl_port->MODER  &= ~(3u << (bl_idx*2));
 80012b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2103      	movs	r1, #3
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	401a      	ands	r2, r3
 80012ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80012ce:	601a      	str	r2, [r3, #0]
  bl_port->MODER  |=  (1u << (bl_idx*2));
 80012d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2101      	movs	r1, #1
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	431a      	orrs	r2, r3
 80012e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80012e8:	601a      	str	r2, [r3, #0]
  // Короткая задержка и три мигания
  for(volatile int i=0;i<100000;i++){ __NOP(); }
 80012ea:	2300      	movs	r3, #0
 80012ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012ee:	e003      	b.n	80012f8 <main+0x184>
 80012f0:	bf00      	nop
 80012f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012f4:	3301      	adds	r3, #1
 80012f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012fa:	4a19      	ldr	r2, [pc, #100]	@ (8001360 <main+0x1ec>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	ddf7      	ble.n	80012f0 <main+0x17c>
  for(int k=0;k<3;k++){
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001306:	e03c      	b.n	8001382 <main+0x20e>
    led_port->BSRR = led_mask;  // set
 8001308:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800130c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001310:	619a      	str	r2, [r3, #24]
    bl_port->BSRR  = bl_mask;   // set
 8001312:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001316:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800131a:	619a      	str	r2, [r3, #24]
    for(volatile int i=0;i<200000;i++){ __NOP(); }
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001320:	e003      	b.n	800132a <main+0x1b6>
 8001322:	bf00      	nop
 8001324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001326:	3301      	adds	r3, #1
 8001328:	637b      	str	r3, [r7, #52]	@ 0x34
 800132a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800132c:	4a0d      	ldr	r2, [pc, #52]	@ (8001364 <main+0x1f0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	ddf7      	ble.n	8001322 <main+0x1ae>
    led_port->BSRR = (led_mask << 16); // reset
 8001332:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001336:	041a      	lsls	r2, r3, #16
 8001338:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800133c:	619a      	str	r2, [r3, #24]
    bl_port->BSRR  = (bl_mask  << 16); // reset
 800133e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001342:	041a      	lsls	r2, r3, #16
 8001344:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001348:	619a      	str	r2, [r3, #24]
    for(volatile int i=0;i<200000;i++){ __NOP(); }
 800134a:	2300      	movs	r3, #0
 800134c:	633b      	str	r3, [r7, #48]	@ 0x30
 800134e:	e00f      	b.n	8001370 <main+0x1fc>
 8001350:	0801c7ac 	.word	0x0801c7ac
 8001354:	58024400 	.word	0x58024400
 8001358:	2400b288 	.word	0x2400b288
 800135c:	58021000 	.word	0x58021000
 8001360:	0001869f 	.word	0x0001869f
 8001364:	00030d3f 	.word	0x00030d3f
 8001368:	bf00      	nop
 800136a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800136c:	3301      	adds	r3, #1
 800136e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001372:	4a71      	ldr	r2, [pc, #452]	@ (8001538 <main+0x3c4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	ddf7      	ble.n	8001368 <main+0x1f4>
  for(int k=0;k<3;k++){
 8001378:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800137c:	3301      	adds	r3, #1
 800137e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001386:	2b02      	cmp	r3, #2
 8001388:	ddbe      	ble.n	8001308 <main+0x194>
  }
  // Оставляем финальное состояние: LED = ON, Подсветка = ON (активный высокий)
  led_port->BSRR = led_mask;  // LED on
 800138a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800138e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001392:	619a      	str	r2, [r3, #24]
  bl_port->BSRR  = bl_mask;   // BL on
 8001394:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001398:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800139c:	619a      	str	r2, [r3, #24]
#endif
#if DIAG_EXTEND_EXISTING_IWDG
  if(early_rsr_raw & RCC_RSR_IWDG1RSTF){
 800139e:	4b67      	ldr	r3, [pc, #412]	@ (800153c <main+0x3c8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d016      	beq.n	80013d8 <main+0x264>
    // Переинициализация параметров IWDG (его нельзя остановить, но можно растянуть таймаут)
    // Ключ разблокировки
    IWDG1->KR = 0x5555;
 80013aa:	4b65      	ldr	r3, [pc, #404]	@ (8001540 <main+0x3cc>)
 80013ac:	f245 5255 	movw	r2, #21845	@ 0x5555
 80013b0:	601a      	str	r2, [r3, #0]
    // Prescaler = 256 (0x06), максимум для делителя
    IWDG1->PR = 0x06;
 80013b2:	4b63      	ldr	r3, [pc, #396]	@ (8001540 <main+0x3cc>)
 80013b4:	2206      	movs	r2, #6
 80013b6:	605a      	str	r2, [r3, #4]
    // Reload максимум 0x0FFF
    IWDG1->RLR = 0x0FFF;
 80013b8:	4b61      	ldr	r3, [pc, #388]	@ (8001540 <main+0x3cc>)
 80013ba:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80013be:	609a      	str	r2, [r3, #8]
    // Дождаться применения (PVU/RVU сброшены)
    while(IWDG1->SR != 0) { /* wait */ }
 80013c0:	bf00      	nop
 80013c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001540 <main+0x3cc>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1fb      	bne.n	80013c2 <main+0x24e>
    // Немедленно перезагрузим
    IWDG1->KR = 0xAAAA;
 80013ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001540 <main+0x3cc>)
 80013cc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80013d0:	601a      	str	r2, [r3, #0]
    iwdg_extended_early = 1;
 80013d2:	2301      	movs	r3, #1
 80013d4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#endif

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d8:	f003 fd42 	bl	8004e60 <HAL_Init>
#endif

  /* USER CODE BEGIN Init */
  // Счетчик перезагрузок для диагностики
  static uint32_t reboot_count __attribute__((section(".noinit"))) = 0;
  reboot_count++;
 80013dc:	4b59      	ldr	r3, [pc, #356]	@ (8001544 <main+0x3d0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	4a58      	ldr	r2, [pc, #352]	@ (8001544 <main+0x3d0>)
 80013e4:	6013      	str	r3, [r2, #0]
  printf("[BOOT] Device reboot count: %lu\r\n", (unsigned long)reboot_count);
 80013e6:	4b57      	ldr	r3, [pc, #348]	@ (8001544 <main+0x3d0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4856      	ldr	r0, [pc, #344]	@ (8001548 <main+0x3d4>)
 80013ee:	f019 fe07 	bl	801b000 <iprintf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f2:	f000 fb61 	bl	8001ab8 <SystemClock_Config>
#if defined(DIAG_TRAP_STAGE) && (DIAG_TRAP_STAGE==2)
  diag_trap(2);
#endif

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013f6:	f000 fbdb 	bl	8001bb0 <PeriphCommonClock_Config>
  diag_trap(3);
#endif

  /* USER CODE BEGIN SysInit */
  /* РАННИЙ UART для диагностики: инициализация сразу после тактирования */
  MX_USART1_UART_Init();
 80013fa:	f001 f8ad 	bl	8002558 <MX_USART1_UART_Init>
  setvbuf(stdout, NULL, _IONBF, 0);
 80013fe:	4b53      	ldr	r3, [pc, #332]	@ (800154c <main+0x3d8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6898      	ldr	r0, [r3, #8]
 8001404:	2300      	movs	r3, #0
 8001406:	2202      	movs	r2, #2
 8001408:	2100      	movs	r1, #0
 800140a:	f019 fe69 	bl	801b0e0 <setvbuf>
  static uint32_t build_counter __attribute__((section(".noinit"))) = 0;
  build_counter++;
 800140e:	4b50      	ldr	r3, [pc, #320]	@ (8001550 <main+0x3dc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a4e      	ldr	r2, [pc, #312]	@ (8001550 <main+0x3dc>)
 8001416:	6013      	str	r3, [r2, #0]
  printf("[BOOT] BUILD_TS=%s-%s COUNT=%lu SIGN=0x%08lX\r\n", __DATE__, __TIME__, (unsigned long)build_counter, (unsigned long)build_signature_hex);
 8001418:	4b4d      	ldr	r3, [pc, #308]	@ (8001550 <main+0x3dc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a4d      	ldr	r2, [pc, #308]	@ (8001554 <main+0x3e0>)
 800141e:	9200      	str	r2, [sp, #0]
 8001420:	4a4d      	ldr	r2, [pc, #308]	@ (8001558 <main+0x3e4>)
 8001422:	494e      	ldr	r1, [pc, #312]	@ (800155c <main+0x3e8>)
 8001424:	484e      	ldr	r0, [pc, #312]	@ (8001560 <main+0x3ec>)
 8001426:	f019 fdeb 	bl	801b000 <iprintf>
  printf("[BOOT] DIAG_REV=%d\r\n", 4);
 800142a:	2104      	movs	r1, #4
 800142c:	484d      	ldr	r0, [pc, #308]	@ (8001564 <main+0x3f0>)
 800142e:	f019 fde7 	bl	801b000 <iprintf>
  printf("[EARLY] RSR=0x%08lX (pre-HAL_Init snapshot)\r\n", (unsigned long)early_rsr_raw);
 8001432:	4b42      	ldr	r3, [pc, #264]	@ (800153c <main+0x3c8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4619      	mov	r1, r3
 8001438:	484b      	ldr	r0, [pc, #300]	@ (8001568 <main+0x3f4>)
 800143a:	f019 fde1 	bl	801b000 <iprintf>
  if(iwdg_extended_early){ printf("[EARLY] IWDG_EXTENDED presc=256 reload=0x0FFF\r\n"); }
 800143e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <main+0x2d8>
 8001446:	4849      	ldr	r0, [pc, #292]	@ (800156c <main+0x3f8>)
 8001448:	f019 fe42 	bl	801b0d0 <puts>
  log_reset_cause();
 800144c:	f7ff fc36 	bl	8000cbc <log_reset_cause>
  printf("[BOOT] FW_VERSION=%s DATE=%s TIME=%s HASH=%s\r\n", fw_version, fw_build_date, fw_build_time, fw_git_hash);
 8001450:	4b47      	ldr	r3, [pc, #284]	@ (8001570 <main+0x3fc>)
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4b47      	ldr	r3, [pc, #284]	@ (8001574 <main+0x400>)
 8001456:	4a48      	ldr	r2, [pc, #288]	@ (8001578 <main+0x404>)
 8001458:	4948      	ldr	r1, [pc, #288]	@ (800157c <main+0x408>)
 800145a:	4849      	ldr	r0, [pc, #292]	@ (8001580 <main+0x40c>)
 800145c:	f019 fdd0 	bl	801b000 <iprintf>
  printf("[BOOT] %s\r\n", fw_build_full);
 8001460:	4948      	ldr	r1, [pc, #288]	@ (8001584 <main+0x410>)
 8001462:	4849      	ldr	r0, [pc, #292]	@ (8001588 <main+0x414>)
 8001464:	f019 fdcc 	bl	801b000 <iprintf>
  printf("[UART] USART1=115200 8N1 ready\r\n");
 8001468:	4848      	ldr	r0, [pc, #288]	@ (800158c <main+0x418>)
 800146a:	f019 fe31 	bl	801b0d0 <puts>
#if 1
  // Дополнительная диагностика debug и option bytes
  uint32_t dhcsr = CoreDebug->DHCSR;
 800146e:	4b48      	ldr	r3, [pc, #288]	@ (8001590 <main+0x41c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t dbg_cr = DBGMCU->CR;
 8001476:	4b47      	ldr	r3, [pc, #284]	@ (8001594 <main+0x420>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint32_t opt_raw = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	67fb      	str	r3, [r7, #124]	@ 0x7c
#ifdef FLASH_OPTSR_CUR
  opt_raw = FLASH->OPTSR_CUR; // Текущие опции (read-only)
#elif defined(FLASH_OPTSR_PRG)
  opt_raw = FLASH->OPTSR_PRG;
#endif
  printf("[BOOT] DBG:DHCSR=0x%08lX C_DEBUGEN=%lu S_SLEEP=%lu S_LOCKUP=%lu CR=0x%08lX OPTSR=0x%08lX\r\n",
 8001482:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001486:	f003 0101 	and.w	r1, r3, #1
         (unsigned long)dhcsr,
         (unsigned long)((dhcsr>>0) & 1),
         (unsigned long)((dhcsr>>18)&1),
 800148a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800148e:	0c9b      	lsrs	r3, r3, #18
  printf("[BOOT] DBG:DHCSR=0x%08lX C_DEBUGEN=%lu S_SLEEP=%lu S_LOCKUP=%lu CR=0x%08lX OPTSR=0x%08lX\r\n",
 8001490:	f003 0001 	and.w	r0, r3, #1
         (unsigned long)((dhcsr>>19)&1),
 8001494:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001498:	0cdb      	lsrs	r3, r3, #19
  printf("[BOOT] DBG:DHCSR=0x%08lX C_DEBUGEN=%lu S_SLEEP=%lu S_LOCKUP=%lu CR=0x%08lX OPTSR=0x%08lX\r\n",
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80014a0:	9202      	str	r2, [sp, #8]
 80014a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80014a6:	9201      	str	r2, [sp, #4]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	4603      	mov	r3, r0
 80014ac:	460a      	mov	r2, r1
 80014ae:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80014b2:	4839      	ldr	r0, [pc, #228]	@ (8001598 <main+0x424>)
 80014b4:	f019 fda4 	bl	801b000 <iprintf>
         (unsigned long)dbg_cr,
         (unsigned long)opt_raw);
#endif
  #ifdef DIAG_DISABLE_IWDG
    printf("[BOOT] IWDG_CFG=DISABLED (compile-time macro)\r\n");
 80014b8:	4838      	ldr	r0, [pc, #224]	@ (800159c <main+0x428>)
 80014ba:	f019 fe09 	bl	801b0d0 <puts>
  #else
    printf("[BOOT] IWDG_CFG=ENABLED (will init later)\r\n");
  #endif
  boot_diag_init(early_rsr_raw);
 80014be:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <main+0x3c8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fd68 	bl	8000f98 <boot_diag_init>
  LCD_ShowString_Size(2, 2, "HELLO LCD", 16, YELLOW, BLACK);
  LCD_ShowString_Size(2, 20, "SAFE_MINIMAL", 12, WHITE, BLACK);
  printf("[SAFE] LCD init done, text rendered.\r\n");
  /* USB CDC в этой ветке не инициализируем, т.к. кабеля нет */
#else
  MX_GPIO_Init();
 80014c8:	f001 f8b6 	bl	8002638 <MX_GPIO_Init>
  MX_DMA_Init();
 80014cc:	f001 f890 	bl	80025f0 <MX_DMA_Init>
  MX_SPI4_Init();
 80014d0:	f000 fd20 	bl	8001f14 <MX_SPI4_Init>
  MX_TIM1_Init();
 80014d4:	f000 fd76 	bl	8001fc4 <MX_TIM1_Init>
  MX_SPI2_Init();
 80014d8:	f000 fcc6 	bl	8001e68 <MX_SPI2_Init>
  MX_TIM6_Init();
 80014dc:	f000 ff40 	bl	8002360 <MX_TIM6_Init>
  MX_ADC1_Init();
 80014e0:	f000 fba0 	bl	8001c24 <MX_ADC1_Init>
  MX_ADC2_Init();
 80014e4:	f000 fc1a 	bl	8001d1c <MX_ADC2_Init>
  MX_DAC1_Init();
 80014e8:	f000 fc82 	bl	8001df0 <MX_DAC1_Init>
  MX_TIM2_Init();
 80014ec:	f000 fe0e 	bl	800210c <MX_TIM2_Init>
  MX_TIM3_Init();
 80014f0:	f000 fea4 	bl	800223c <MX_TIM3_Init>
  MX_TIM15_Init();
 80014f4:	f000 ff74 	bl	80023e0 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 80014f8:	f001 f82e 	bl	8002558 <MX_USART1_UART_Init>
  printf("[INIT] Before USB_DEVICE_Init\r\n");
 80014fc:	4828      	ldr	r0, [pc, #160]	@ (80015a0 <main+0x42c>)
 80014fe:	f019 fde7 	bl	801b0d0 <puts>
  MX_USB_DEVICE_Init();
 8001502:	f013 ff19 	bl	8015338 <MX_USB_DEVICE_Init>
  /* Полностью исключаем инициализацию IWDG (даже если где-то потерян DIAG_DISABLE_IWDG) */
  printf("[DIAG] IWDG hard-disabled (no init call)\r\n");
 8001506:	4827      	ldr	r0, [pc, #156]	@ (80015a4 <main+0x430>)
 8001508:	f019 fde2 	bl	801b0d0 <puts>
  g_progress_flags |= BOOT_PROGRESS_AFTER_USB_INIT;
 800150c:	4b26      	ldr	r3, [pc, #152]	@ (80015a8 <main+0x434>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	4a24      	ldr	r2, [pc, #144]	@ (80015a8 <main+0x434>)
 8001516:	6013      	str	r3, [r2, #0]
#endif
  /* USER CODE BEGIN 2 */
  // Безбуферный stdout, баннер сборки (перенесено выше)
  printf("[USB] DEVICE_INIT\r\n");
 8001518:	4824      	ldr	r0, [pc, #144]	@ (80015ac <main+0x438>)
 800151a:	f019 fdd9 	bl	801b0d0 <puts>
  HAL_GPIO_WritePin(DATA_READY_GPIO_Port, DATA_READY_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001524:	4822      	ldr	r0, [pc, #136]	@ (80015b0 <main+0x43c>)
 8001526:	f008 fddd 	bl	800a0e4 <HAL_GPIO_WritePin>
  // Запускаем TIM6 с прерыванием для диагностического мигания (LED в HAL_TIM_PeriodElapsedCallback)
  HAL_TIM_Base_Start_IT(&htim6);
 800152a:	4822      	ldr	r0, [pc, #136]	@ (80015b4 <main+0x440>)
 800152c:	f00e f9aa 	bl	800f884 <HAL_TIM_Base_Start_IT>

  // Запуск каналов для TIM2
#if !SAFE_MINIMAL
    for(volatile uint32_t d=0; d<200000000UL; ++d){ __NOP(); }
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001534:	e044      	b.n	80015c0 <main+0x44c>
 8001536:	bf00      	nop
 8001538:	00030d3f 	.word	0x00030d3f
 800153c:	2400b288 	.word	0x2400b288
 8001540:	58004800 	.word	0x58004800
 8001544:	2401c5c0 	.word	0x2401c5c0
 8001548:	0801c7d4 	.word	0x0801c7d4
 800154c:	24000258 	.word	0x24000258
 8001550:	2401c5c4 	.word	0x2401c5c4
 8001554:	a5b6c7d8 	.word	0xa5b6c7d8
 8001558:	0801c7f8 	.word	0x0801c7f8
 800155c:	0801c804 	.word	0x0801c804
 8001560:	0801c810 	.word	0x0801c810
 8001564:	0801c840 	.word	0x0801c840
 8001568:	0801c858 	.word	0x0801c858
 800156c:	0801c888 	.word	0x0801c888
 8001570:	0801d4c8 	.word	0x0801d4c8
 8001574:	0801d4bc 	.word	0x0801d4bc
 8001578:	0801d4b0 	.word	0x0801d4b0
 800157c:	0801d4a8 	.word	0x0801d4a8
 8001580:	0801c8b8 	.word	0x0801c8b8
 8001584:	0801d4d0 	.word	0x0801d4d0
 8001588:	0801c8e8 	.word	0x0801c8e8
 800158c:	0801c8f4 	.word	0x0801c8f4
 8001590:	e000edf0 	.word	0xe000edf0
 8001594:	5c001000 	.word	0x5c001000
 8001598:	0801c914 	.word	0x0801c914
 800159c:	0801c970 	.word	0x0801c970
 80015a0:	0801c9a0 	.word	0x0801c9a0
 80015a4:	0801c9c0 	.word	0x0801c9c0
 80015a8:	2400b280 	.word	0x2400b280
 80015ac:	0801c9ec 	.word	0x0801c9ec
 80015b0:	58020c00 	.word	0x58020c00
 80015b4:	2400b014 	.word	0x2400b014
 80015b8:	bf00      	nop
 80015ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015bc:	3301      	adds	r3, #1
 80015be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c2:	4ab1      	ldr	r2, [pc, #708]	@ (8001888 <main+0x714>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d9f7      	bls.n	80015b8 <main+0x444>
  MX_GPIO_Init();
 80015c8:	f001 f836 	bl	8002638 <MX_GPIO_Init>
  /* Trap после MX_GPIO_Init */
#if defined(DIAG_TRAP_STAGE) && (DIAG_TRAP_STAGE==4)
  diag_trap(4);
#endif
  // Запускаем PWM на TIM2 CH1/CH2/CH3 c периодом 200 Гц и скважностью 50%
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2499);
 80015cc:	4baf      	ldr	r3, [pc, #700]	@ (800188c <main+0x718>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80015d4:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 2499);
 80015d6:	4bad      	ldr	r3, [pc, #692]	@ (800188c <main+0x718>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80015de:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 2499);
 80015e0:	4baa      	ldr	r3, [pc, #680]	@ (800188c <main+0x718>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80015e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80015ea:	2100      	movs	r1, #0
 80015ec:	48a7      	ldr	r0, [pc, #668]	@ (800188c <main+0x718>)
 80015ee:	f00e fa27 	bl	800fa40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80015f2:	2104      	movs	r1, #4
 80015f4:	48a5      	ldr	r0, [pc, #660]	@ (800188c <main+0x718>)
 80015f6:	f00e fa23 	bl	800fa40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Контроль
 80015fa:	2108      	movs	r1, #8
 80015fc:	48a3      	ldr	r0, [pc, #652]	@ (800188c <main+0x718>)
 80015fe:	f00e fa1f 	bl	800fa40 <HAL_TIM_PWM_Start>

  // Включить прерывание TIM2 Update для генерации тестовых данных @ 200 Hz и запустить таймер
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8001602:	4ba2      	ldr	r3, [pc, #648]	@ (800188c <main+0x718>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	4ba0      	ldr	r3, [pc, #640]	@ (800188c <main+0x718>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0201 	orr.w	r2, r2, #1
 8001610:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim2);
 8001612:	489e      	ldr	r0, [pc, #632]	@ (800188c <main+0x718>)
 8001614:	f00e f936 	bl	800f884 <HAL_TIM_Base_Start_IT>

  // Запуск каналов для TIM3
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Фаза
 8001618:	2100      	movs	r1, #0
 800161a:	489d      	ldr	r0, [pc, #628]	@ (8001890 <main+0x71c>)
 800161c:	f00e fa10 	bl	800fa40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Меандр
 8001620:	2104      	movs	r1, #4
 8001622:	489b      	ldr	r0, [pc, #620]	@ (8001890 <main+0x71c>)
 8001624:	f00e fa0c 	bl	800fa40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Контроль
 8001628:	2108      	movs	r1, #8
 800162a:	4899      	ldr	r0, [pc, #612]	@ (8001890 <main+0x71c>)
 800162c:	f00e fa08 	bl	800fa40 <HAL_TIM_PWM_Start>

  // Установка скважности для TIM3 (CH1, CH2, CH3) — 50%
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2499); // 50% скважность
 8001630:	4b97      	ldr	r3, [pc, #604]	@ (8001890 <main+0x71c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001638:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2499); // 50% скважность
 800163a:	4b95      	ldr	r3, [pc, #596]	@ (8001890 <main+0x71c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001642:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 2499); // 50% скважность
 8001644:	4b92      	ldr	r3, [pc, #584]	@ (8001890 <main+0x71c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800164c:	63da      	str	r2, [r3, #60]	@ 0x3c
  g_progress_flags |= BOOT_PROGRESS_AFTER_ADC;
 800164e:	4b91      	ldr	r3, [pc, #580]	@ (8001894 <main+0x720>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	4a8f      	ldr	r2, [pc, #572]	@ (8001894 <main+0x720>)
 8001658:	6013      	str	r3, [r2, #0]
*/


  // --- ИНИЦИАЛИЗАЦИЯ LCD ---
#if !SAFE_MINIMAL
  LCD_Init();
 800165a:	f003 f8b9 	bl	80047d0 <LCD_Init>
  LCD_FillRect(0, 0, LCD_W, LCD_H, BLACK);
 800165e:	2300      	movs	r3, #0
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2350      	movs	r3, #80	@ 0x50
 8001664:	22a0      	movs	r2, #160	@ 0xa0
 8001666:	2100      	movs	r1, #0
 8001668:	2000      	movs	r0, #0
 800166a:	f003 f9cb 	bl	8004a04 <LCD_FillRect>
  /* Гарантированно включаем подсветку после инициализации LCD независимо от режима PWM/GPIO */
  BL_ON();
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001674:	4888      	ldr	r0, [pc, #544]	@ (8001898 <main+0x724>)
 8001676:	f008 fd35 	bl	800a0e4 <HAL_GPIO_WritePin>
#if 1
  g_progress_flags |= BOOT_PROGRESS_AFTER_PWM;
 800167a:	4b86      	ldr	r3, [pc, #536]	@ (8001894 <main+0x720>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	4a84      	ldr	r2, [pc, #528]	@ (8001894 <main+0x720>)
 8001684:	6013      	str	r3, [r2, #0]
  for (int y = stage_count*12; y < 160; y += 8) {
    LCD_FillRect(0, y, 160, 8, BLACK);
  }
#endif
#else
  printf("[PWM] PWM disabled by DISABLE_PWM_TEST or FORCE_BL_GPIO\r\n");
 8001686:	4885      	ldr	r0, [pc, #532]	@ (800189c <main+0x728>)
 8001688:	f019 fd22 	bl	801b0d0 <puts>
#endif
#endif // !SAFE_MINIMAL

  // Код инициализации, который должен выполняться всегда
  printf("[INIT] Starting common initialization...\r\n");
 800168c:	4884      	ldr	r0, [pc, #528]	@ (80018a0 <main+0x72c>)
 800168e:	f019 fd1f 	bl	801b0d0 <puts>

  // Подготавливаем инициализационные сообщения (отключено)
  init_messages_ready = 0; // ничего не выводим
 8001692:	4b84      	ldr	r3, [pc, #528]	@ (80018a4 <main+0x730>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]

  // Включаем детектор USB питания (для встроенного FS PHY)
  HAL_PWREx_EnableUSBVoltageDetector();
 8001698:	f00a f85e 	bl	800b758 <HAL_PWREx_EnableUSBVoltageDetector>
  printf("[INIT] USB voltage detector enabled\r\n");
 800169c:	4882      	ldr	r0, [pc, #520]	@ (80018a8 <main+0x734>)
 800169e:	f019 fd17 	bl	801b0d0 <puts>
  // В минимальном режиме теперь тоже запускаем USB для отображения статуса
  usb_cdc_init();
  usb_cdc_cfg()->streaming = 0; // пока отключено
#else
  #if !SAFE_MINIMAL
    usb_cdc_init();
 80016a2:	f003 f813 	bl	80046cc <usb_stream_init>
    usb_cdc_cfg()->streaming = 0;
 80016a6:	f002 fe6b 	bl	8004380 <usb_stream_cfg>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
  #endif
#endif

  // Первичная отметка для вывода статуса USB / буквы U
  UpdateLCDStatus();
 80016b0:	f001 f966 	bl	8002980 <UpdateLCDStatus>

  // Вывод краткой информации об устройстве USB при запуске
  #if !SAFE_MINIMAL
  {
    uint16_t vid = USBD_Desc_GetVID();
 80016b4:	f019 f821 	bl	801a6fa <USBD_Desc_GetVID>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    uint16_t pid = USBD_Desc_GetPID();
 80016be:	f019 f825 	bl	801a70c <USBD_Desc_GetPID>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    uint16_t lang= USBD_Desc_GetLangID();
 80016c8:	f019 f829 	bl	801a71e <USBD_Desc_GetLangID>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    const char* mfg = USBD_Desc_GetManufacturer();
 80016d2:	f019 f82d 	bl	801a730 <USBD_Desc_GetManufacturer>
 80016d6:	6738      	str	r0, [r7, #112]	@ 0x70
    const char* prd = USBD_Desc_GetProduct();
 80016d8:	f019 f834 	bl	801a744 <USBD_Desc_GetProduct>
 80016dc:	66f8      	str	r0, [r7, #108]	@ 0x6c
    printf("[USB] VID=0x%04X PID=0x%04X LANGID=%u\r\n", vid, pid, (unsigned)lang);
 80016de:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 80016e2:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80016e6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80016ea:	4870      	ldr	r0, [pc, #448]	@ (80018ac <main+0x738>)
 80016ec:	f019 fc88 	bl	801b000 <iprintf>
    printf("[USB] MFG=\"%s\" PROD=\"%s\"\r\n", mfg, prd);
 80016f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016f2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80016f4:	486e      	ldr	r0, [pc, #440]	@ (80018b0 <main+0x73c>)
 80016f6:	f019 fc83 	bl	801b000 <iprintf>
    // Короткая строка на LCD
    char line[32];
  /* Переносим строку VID/PID ниже (y=36), чтобы не конфликтовать с динамической строкой TX */
  snprintf(line, sizeof(line), "VID:%04X PID:%04X", vid, pid);
 80016fa:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80016fe:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8001702:	f107 000c 	add.w	r0, r7, #12
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	4a6a      	ldr	r2, [pc, #424]	@ (80018b4 <main+0x740>)
 800170c:	2120      	movs	r1, #32
 800170e:	f019 fd9b 	bl	801b248 <sniprintf>
  LCD_ShowString_Size(1, 56, line, 16, WHITE, BLACK);
 8001712:	f107 020c 	add.w	r2, r7, #12
 8001716:	2300      	movs	r3, #0
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2310      	movs	r3, #16
 8001722:	2138      	movs	r1, #56	@ 0x38
 8001724:	2001      	movs	r0, #1
 8001726:	f003 f923 	bl	8004970 <LCD_ShowString_Size>
  }
  #endif

  #if !SAFE_MINIMAL
  printf("[INIT] USB initialization completed\r\n");
 800172a:	4863      	ldr	r0, [pc, #396]	@ (80018b8 <main+0x744>)
 800172c:	f019 fcd0 	bl	801b0d0 <puts>
  #endif


  // Запуск АЦП с DMA через модуль adc_stream (перенумеровано после LCD)
#if !MINIMAL_BRINGUP && !SAFE_MINIMAL
  CHECK(adc_stream_start(&hadc1, &hadc2), 1001); // если ошибка -> Error_Handler
 8001730:	4962      	ldr	r1, [pc, #392]	@ (80018bc <main+0x748>)
 8001732:	4863      	ldr	r0, [pc, #396]	@ (80018c0 <main+0x74c>)
 8001734:	f7ff f828 	bl	8000788 <adc_stream_start>
 8001738:	4603      	mov	r3, r0
 800173a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800173e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <main+0x5de>
 8001746:	4b5f      	ldr	r3, [pc, #380]	@ (80018c4 <main+0x750>)
 8001748:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	f001 fba5 	bl	8002e9c <Error_Handler>
  STAGE(21,"ADCSTR");
  // --- FIX TIM15 SLAVE RESET HANG ---
  __HAL_TIM_DISABLE(&htim15);
 8001752:	4b5d      	ldr	r3, [pc, #372]	@ (80018c8 <main+0x754>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6a1a      	ldr	r2, [r3, #32]
 8001758:	f241 1311 	movw	r3, #4369	@ 0x1111
 800175c:	4013      	ands	r3, r2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10f      	bne.n	8001782 <main+0x60e>
 8001762:	4b59      	ldr	r3, [pc, #356]	@ (80018c8 <main+0x754>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	f240 4344 	movw	r3, #1092	@ 0x444
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d107      	bne.n	8001782 <main+0x60e>
 8001772:	4b55      	ldr	r3, [pc, #340]	@ (80018c8 <main+0x754>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b53      	ldr	r3, [pc, #332]	@ (80018c8 <main+0x754>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0201 	bic.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]
  /* keep SMCR as configured (slave reset to ITR1) */
  __HAL_TIM_SET_COUNTER(&htim15,0);
 8001782:	4b51      	ldr	r3, [pc, #324]	@ (80018c8 <main+0x754>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	@ 0x24

  // Диагностика перед запуском TIM15
  printf("[TIM15] Pre-Start: CR1=0x%08lX CR2=0x%08lX SMCR=0x%08lX SR=0x%08lX DIER=0x%08lX PSC=%lu ARR=%lu CNT=%lu\r\n",
     (unsigned long)TIM15->CR1, (unsigned long)TIM15->CR2, (unsigned long)TIM15->SMCR,
 800178a:	4b50      	ldr	r3, [pc, #320]	@ (80018cc <main+0x758>)
 800178c:	681d      	ldr	r5, [r3, #0]
 800178e:	4b4f      	ldr	r3, [pc, #316]	@ (80018cc <main+0x758>)
 8001790:	685e      	ldr	r6, [r3, #4]
 8001792:	4b4e      	ldr	r3, [pc, #312]	@ (80018cc <main+0x758>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	607b      	str	r3, [r7, #4]
     (unsigned long)TIM15->SR, (unsigned long)TIM15->DIER,
 8001798:	4b4c      	ldr	r3, [pc, #304]	@ (80018cc <main+0x758>)
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	4a4b      	ldr	r2, [pc, #300]	@ (80018cc <main+0x758>)
 800179e:	68d2      	ldr	r2, [r2, #12]
     (unsigned long)TIM15->PSC, (unsigned long)TIM15->ARR, (unsigned long)TIM15->CNT);
 80017a0:	494a      	ldr	r1, [pc, #296]	@ (80018cc <main+0x758>)
 80017a2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80017a4:	4849      	ldr	r0, [pc, #292]	@ (80018cc <main+0x758>)
 80017a6:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80017a8:	4c48      	ldr	r4, [pc, #288]	@ (80018cc <main+0x758>)
 80017aa:	6a64      	ldr	r4, [r4, #36]	@ 0x24
  printf("[TIM15] Pre-Start: CR1=0x%08lX CR2=0x%08lX SMCR=0x%08lX SR=0x%08lX DIER=0x%08lX PSC=%lu ARR=%lu CNT=%lu\r\n",
 80017ac:	9404      	str	r4, [sp, #16]
 80017ae:	9003      	str	r0, [sp, #12]
 80017b0:	9102      	str	r1, [sp, #8]
 80017b2:	9201      	str	r2, [sp, #4]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4632      	mov	r2, r6
 80017ba:	4629      	mov	r1, r5
 80017bc:	4844      	ldr	r0, [pc, #272]	@ (80018d0 <main+0x75c>)
 80017be:	f019 fc1f 	bl	801b000 <iprintf>
  // Если состояние HAL не READY, попытаемся принудительно вернуть READY для обхода зависания
  if (htim15.State != HAL_TIM_STATE_READY) {
 80017c2:	4b41      	ldr	r3, [pc, #260]	@ (80018c8 <main+0x754>)
 80017c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d00b      	beq.n	80017e6 <main+0x672>
    printf("[TIM15] State=%d (not READY), forcing READY\r\n", htim15.State);
 80017ce:	4b3e      	ldr	r3, [pc, #248]	@ (80018c8 <main+0x754>)
 80017d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	4619      	mov	r1, r3
 80017d8:	483e      	ldr	r0, [pc, #248]	@ (80018d4 <main+0x760>)
 80017da:	f019 fc11 	bl	801b000 <iprintf>
    htim15.State = HAL_TIM_STATE_READY;
 80017de:	4b3a      	ldr	r3, [pc, #232]	@ (80018c8 <main+0x754>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }
  {
    HAL_StatusTypeDef st = HAL_TIM_Base_Start(&htim15);
 80017e6:	4838      	ldr	r0, [pc, #224]	@ (80018c8 <main+0x754>)
 80017e8:	f00d ffce 	bl	800f788 <HAL_TIM_Base_Start>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
    if (st != HAL_OK) {
 80017f2:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00f      	beq.n	800181a <main+0x6a6>
      printf("[TIM15][ERR] HAL_TIM_Base_Start status=%d (state=%d) -> entering Error_Handler\r\n", st, htim15.State);
 80017fa:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80017fe:	4a32      	ldr	r2, [pc, #200]	@ (80018c8 <main+0x754>)
 8001800:	f892 203d 	ldrb.w	r2, [r2, #61]	@ 0x3d
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	4619      	mov	r1, r3
 8001808:	4833      	ldr	r0, [pc, #204]	@ (80018d8 <main+0x764>)
 800180a:	f019 fbf9 	bl	801b000 <iprintf>
      err_code = 1002;
 800180e:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <main+0x750>)
 8001810:	f240 32ea 	movw	r2, #1002	@ 0x3ea
 8001814:	601a      	str	r2, [r3, #0]
      Error_Handler();
 8001816:	f001 fb41 	bl	8002e9c <Error_Handler>
    }
  }
  printf("[TIM15] Started: CR1=0x%08lX SR=0x%08lX CNT=%lu\r\n", (unsigned long)TIM15->CR1, (unsigned long)TIM15->SR, (unsigned long)TIM15->CNT);
 800181a:	4b2c      	ldr	r3, [pc, #176]	@ (80018cc <main+0x758>)
 800181c:	6819      	ldr	r1, [r3, #0]
 800181e:	4b2b      	ldr	r3, [pc, #172]	@ (80018cc <main+0x758>)
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <main+0x758>)
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	482d      	ldr	r0, [pc, #180]	@ (80018dc <main+0x768>)
 8001828:	f019 fbea 	bl	801b000 <iprintf>

  
  // Запускаем PWM канал TIM15_CH1 (PE5) для наблюдения на осциллографе
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800182c:	2100      	movs	r1, #0
 800182e:	4826      	ldr	r0, [pc, #152]	@ (80018c8 <main+0x754>)
 8001830:	f00e f906 	bl	800fa40 <HAL_TIM_PWM_Start>
  STAGE(22,"TRGON");
  
  HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800183a:	4829      	ldr	r0, [pc, #164]	@ (80018e0 <main+0x76c>)
 800183c:	f008 fc52 	bl	800a0e4 <HAL_GPIO_WritePin>
  UpdateLCDStatus();
 8001840:	f001 f89e 	bl	8002980 <UpdateLCDStatus>
  // SAFE_MINIMAL: ничего не запускаем из ADC/TIM15
#endif



  printf("[INIT] ADC and TIM15 initialization completed\r\n");
 8001844:	4827      	ldr	r0, [pc, #156]	@ (80018e4 <main+0x770>)
 8001846:	f019 fc43 	bl	801b0d0 <puts>

  printf("[INIT] Entering main loop...\r\n");
 800184a:	4827      	ldr	r0, [pc, #156]	@ (80018e8 <main+0x774>)
 800184c:	f019 fc40 	bl	801b0d0 <puts>
  /* Trap перед входом в основной цикл */
#if defined(DIAG_TRAP_STAGE) && (DIAG_TRAP_STAGE==5)
  diag_trap(5);
#endif
  g_progress_flags |= BOOT_PROGRESS_ENTER_LOOP;
 8001850:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <main+0x720>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	4a0e      	ldr	r2, [pc, #56]	@ (8001894 <main+0x720>)
 800185a:	6013      	str	r3, [r2, #0]
  /* Включаем DWT счётчик циклов (если не включён) для диагностики зависания */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800185c:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <main+0x778>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4a22      	ldr	r2, [pc, #136]	@ (80018ec <main+0x778>)
 8001862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001866:	60d3      	str	r3, [r2, #12]
  DWT->LAR = 0xC5ACCE55; /* разблокировка (для некоторых ревизий) */
 8001868:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <main+0x77c>)
 800186a:	4a22      	ldr	r2, [pc, #136]	@ (80018f4 <main+0x780>)
 800186c:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
  DWT->CYCCNT = 0;
 8001870:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <main+0x77c>)
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001876:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <main+0x77c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a1d      	ldr	r2, [pc, #116]	@ (80018f0 <main+0x77c>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6013      	str	r3, [r2, #0]
  uint32_t last_diag_ms = 0; /* для периодического аварийного принта даже если * не печатается */
 8001882:	2300      	movs	r3, #0
 8001884:	667b      	str	r3, [r7, #100]	@ 0x64
 8001886:	e037      	b.n	80018f8 <main+0x784>
 8001888:	0bebc1ff 	.word	0x0bebc1ff
 800188c:	2400af7c 	.word	0x2400af7c
 8001890:	2400afc8 	.word	0x2400afc8
 8001894:	2400b280 	.word	0x2400b280
 8001898:	58021000 	.word	0x58021000
 800189c:	0801ca00 	.word	0x0801ca00
 80018a0:	0801ca3c 	.word	0x0801ca3c
 80018a4:	2400b270 	.word	0x2400b270
 80018a8:	0801ca68 	.word	0x0801ca68
 80018ac:	0801ca90 	.word	0x0801ca90
 80018b0:	0801cab8 	.word	0x0801cab8
 80018b4:	0801cad4 	.word	0x0801cad4
 80018b8:	0801cae8 	.word	0x0801cae8
 80018bc:	2400adb0 	.word	0x2400adb0
 80018c0:	2400ad40 	.word	0x2400ad40
 80018c4:	2400b274 	.word	0x2400b274
 80018c8:	2400b060 	.word	0x2400b060
 80018cc:	40014000 	.word	0x40014000
 80018d0:	0801cb10 	.word	0x0801cb10
 80018d4:	0801cb7c 	.word	0x0801cb7c
 80018d8:	0801cbac 	.word	0x0801cbac
 80018dc:	0801cc00 	.word	0x0801cc00
 80018e0:	58020c00 	.word	0x58020c00
 80018e4:	0801cc34 	.word	0x0801cc34
 80018e8:	0801cc64 	.word	0x0801cc64
 80018ec:	e000edf0 	.word	0xe000edf0
 80018f0:	e0001000 	.word	0xe0001000
 80018f4:	c5acce55 	.word	0xc5acce55

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  uint32_t dwt_start = DWT->CYCCNT; /* начало итерации */
 80018f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001a68 <main+0x8f4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	663b      	str	r3, [r7, #96]	@ 0x60
    static uint32_t loop_count = 0;
    loop_count++;
 80018fe:	4b5b      	ldr	r3, [pc, #364]	@ (8001a6c <main+0x8f8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	4a59      	ldr	r2, [pc, #356]	@ (8001a6c <main+0x8f8>)
 8001906:	6013      	str	r3, [r2, #0]
    main_loop_heartbeat++;
 8001908:	4b59      	ldr	r3, [pc, #356]	@ (8001a70 <main+0x8fc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	4a58      	ldr	r2, [pc, #352]	@ (8001a70 <main+0x8fc>)
 8001910:	6013      	str	r3, [r2, #0]
    last_heartbeat_ms = HAL_GetTick();
 8001912:	f003 fb2b 	bl	8004f6c <HAL_GetTick>
 8001916:	4603      	mov	r3, r0
 8001918:	4a56      	ldr	r2, [pc, #344]	@ (8001a74 <main+0x900>)
 800191a:	6013      	str	r3, [r2, #0]
    uint32_t now = last_heartbeat_ms;
 800191c:	4b55      	ldr	r3, [pc, #340]	@ (8001a74 <main+0x900>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	65fb      	str	r3, [r7, #92]	@ 0x5c
  static uint8_t first_loop=1; if(first_loop){ PROG('M'); first_loop=0; }
 8001922:	4b55      	ldr	r3, [pc, #340]	@ (8001a78 <main+0x904>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <main+0x7bc>
 800192a:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <main+0x904>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
  PROG('A'); // loop start

  // Отложенный лог из TIM6 (убран printf из ISR)
  if (tim6_led_toggled_flag) { tim6_led_toggled_flag = 0; PROG('L'); }
 8001930:	4b52      	ldr	r3, [pc, #328]	@ (8001a7c <main+0x908>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <main+0x7cc>
 800193a:	4b50      	ldr	r3, [pc, #320]	@ (8001a7c <main+0x908>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
    }
  }
  #endif

    // Логируем каждые 10 итераций цикла
  if ((loop_count & 0x3F)==0) { PROG('T'); boot_diag_periodic(now); }
 8001940:	4b4a      	ldr	r3, [pc, #296]	@ (8001a6c <main+0x8f8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <main+0x7de>
 800194c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800194e:	f7ff fba1 	bl	8001094 <boot_diag_periodic>
  /* Periodic integrity check for guarded need_recovery */
  if((loop_count & 0x3F)==0){
 8001952:	4b46      	ldr	r3, [pc, #280]	@ (8001a6c <main+0x8f8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800195a:	2b00      	cmp	r3, #0
 800195c:	d126      	bne.n	80019ac <main+0x838>
    if(need_recovery_guard.c1 != 0xDEADBEEFUL || need_recovery_guard.c2 != 0xA55AA55AUL){
 800195e:	4b48      	ldr	r3, [pc, #288]	@ (8001a80 <main+0x90c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a48      	ldr	r2, [pc, #288]	@ (8001a84 <main+0x910>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d104      	bne.n	8001972 <main+0x7fe>
 8001968:	4b45      	ldr	r3, [pc, #276]	@ (8001a80 <main+0x90c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a46      	ldr	r2, [pc, #280]	@ (8001a88 <main+0x914>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00c      	beq.n	800198c <main+0x818>
      printf("[DIAG][MEM] GUARD_FAIL c1=0x%08lX c2=0x%08lX flag=%u @%p size=%u\r\n",
             (unsigned long)need_recovery_guard.c1, (unsigned long)need_recovery_guard.c2,
 8001972:	4b43      	ldr	r3, [pc, #268]	@ (8001a80 <main+0x90c>)
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	4b42      	ldr	r3, [pc, #264]	@ (8001a80 <main+0x90c>)
 8001978:	689a      	ldr	r2, [r3, #8]
             (unsigned int)need_recovery_guard.flag, (void*)&need_recovery_guard, (unsigned)sizeof(need_recovery_guard));
 800197a:	4b41      	ldr	r3, [pc, #260]	@ (8001a80 <main+0x90c>)
 800197c:	685b      	ldr	r3, [r3, #4]
      printf("[DIAG][MEM] GUARD_FAIL c1=0x%08lX c2=0x%08lX flag=%u @%p size=%u\r\n",
 800197e:	200c      	movs	r0, #12
 8001980:	9001      	str	r0, [sp, #4]
 8001982:	483f      	ldr	r0, [pc, #252]	@ (8001a80 <main+0x90c>)
 8001984:	9000      	str	r0, [sp, #0]
 8001986:	4841      	ldr	r0, [pc, #260]	@ (8001a8c <main+0x918>)
 8001988:	f019 fb3a 	bl	801b000 <iprintf>
    }
    if(need_recovery_guard.flag != 0){
 800198c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a80 <main+0x90c>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00b      	beq.n	80019ac <main+0x838>
      printf("[DIAG][MEM] need_recovery FLAG SET=%u (c1=0x%08lX c2=0x%08lX) clear->0\r\n",
             (unsigned int)need_recovery_guard.flag,
 8001994:	4b3a      	ldr	r3, [pc, #232]	@ (8001a80 <main+0x90c>)
 8001996:	6859      	ldr	r1, [r3, #4]
             (unsigned long)need_recovery_guard.c1, (unsigned long)need_recovery_guard.c2);
 8001998:	4b39      	ldr	r3, [pc, #228]	@ (8001a80 <main+0x90c>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b38      	ldr	r3, [pc, #224]	@ (8001a80 <main+0x90c>)
 800199e:	689b      	ldr	r3, [r3, #8]
      printf("[DIAG][MEM] need_recovery FLAG SET=%u (c1=0x%08lX c2=0x%08lX) clear->0\r\n",
 80019a0:	483b      	ldr	r0, [pc, #236]	@ (8001a90 <main+0x91c>)
 80019a2:	f019 fb2d 	bl	801b000 <iprintf>
      need_recovery_guard.flag = 0; /* предотвращаем цикл */
 80019a6:	4b36      	ldr	r3, [pc, #216]	@ (8001a80 <main+0x90c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	605a      	str	r2, [r3, #4]
  /* Запуск задачи стриминга: вызываем при сигнале kick ИЛИ активном стриме */
  // vendor stream task
#if !SAFE_MINIMAL
  extern volatile uint8_t vnd_tx_kick;
  extern uint8_t vnd_is_streaming(void);
  if (vnd_tx_kick || vnd_is_streaming()) {
 80019ac:	4b39      	ldr	r3, [pc, #228]	@ (8001a94 <main+0x920>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d104      	bne.n	80019c0 <main+0x84c>
 80019b6:	f014 fbc5 	bl	8016144 <vnd_is_streaming>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <main+0x850>
    extern void Vendor_Stream_Task(void);
    Vendor_Stream_Task();
 80019c0:	f015 fb54 	bl	801706c <Vendor_Stream_Task>
#endif

  /* Периодическое обновление статуса на LCD (вернули после отката) */
  {
    static uint32_t last_lcd_ms = 0;
    if (now - last_lcd_ms >= 100) { // ~10 Гц
 80019c4:	4b34      	ldr	r3, [pc, #208]	@ (8001a98 <main+0x924>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b63      	cmp	r3, #99	@ 0x63
 80019ce:	d904      	bls.n	80019da <main+0x866>
      last_lcd_ms = now;
 80019d0:	4a31      	ldr	r2, [pc, #196]	@ (8001a98 <main+0x924>)
 80019d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019d4:	6013      	str	r3, [r2, #0]
      DrawUSBStatus();
 80019d6:	f000 ffdf 	bl	8002998 <DrawUSBStatus>
    }
  }

    if (need_recovery) {
 80019da:	4b30      	ldr	r3, [pc, #192]	@ (8001a9c <main+0x928>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <main+0x880>
        USBD_DeInit(&hUsbDeviceHS);
#endif
        MX_USB_DEVICE_Init();
        auto_stream_started = 0;
#else
  boot_diag_finalize_before_reset(HAL_GetTick());
 80019e4:	f003 fac2 	bl	8004f6c <HAL_GetTick>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fb88 	bl	8001100 <boot_diag_finalize_before_reset>
  NVIC_SystemReset();
 80019f0:	f7ff f8c2 	bl	8000b78 <__NVIC_SystemReset>
    }

  #if ENABLE_UART_HEARTBEAT
  if ((loop_count % 1000u)==0) uart1_raw_putc('.');
  #endif
  if(iwdg_enabled_runtime){ printf("[WARN] IWDG active unexpected\r\n"); }
 80019f4:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa0 <main+0x92c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <main+0x890>
 80019fe:	4829      	ldr	r0, [pc, #164]	@ (8001aa4 <main+0x930>)
 8001a00:	f019 fb66 	bl	801b0d0 <puts>
  /* Подсчёт длительности итерации */
  uint32_t dwt_end = DWT->CYCCNT;
 8001a04:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <main+0x8f4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	65bb      	str	r3, [r7, #88]	@ 0x58
  loop_cycle_accum += (uint32_t)(dwt_end - dwt_start);
 8001a0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001a0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a0e:	1ad2      	subs	r2, r2, r3
 8001a10:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <main+0x934>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a24      	ldr	r2, [pc, #144]	@ (8001aa8 <main+0x934>)
 8001a18:	6013      	str	r3, [r2, #0]
  loop_cycle_count++;
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <main+0x938>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	4a22      	ldr	r2, [pc, #136]	@ (8001aac <main+0x938>)
 8001a22:	6013      	str	r3, [r2, #0]
  uint32_t ms_now = HAL_GetTick();
 8001a24:	f003 faa2 	bl	8004f6c <HAL_GetTick>
 8001a28:	6578      	str	r0, [r7, #84]	@ 0x54
  if(ms_now - loop_cycle_last_report_ms >= 1000 && loop_cycle_count){
 8001a2a:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <main+0x93c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a36:	f4ff af5f 	bcc.w	80018f8 <main+0x784>
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <main+0x938>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f43f af5a 	beq.w	80018f8 <main+0x784>
    loop_cycle_last_avg = (uint32_t)(loop_cycle_accum / loop_cycle_count);
 8001a44:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <main+0x934>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <main+0x938>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	4a18      	ldr	r2, [pc, #96]	@ (8001ab4 <main+0x940>)
 8001a52:	6013      	str	r3, [r2, #0]
    loop_cycle_accum = 0; loop_cycle_count = 0; loop_cycle_last_report_ms = ms_now;
 8001a54:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <main+0x934>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <main+0x938>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	4a13      	ldr	r2, [pc, #76]	@ (8001ab0 <main+0x93c>)
 8001a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a64:	6013      	str	r3, [r2, #0]
  {
 8001a66:	e747      	b.n	80018f8 <main+0x784>
 8001a68:	e0001000 	.word	0xe0001000
 8001a6c:	2400b28c 	.word	0x2400b28c
 8001a70:	2400b250 	.word	0x2400b250
 8001a74:	2400b254 	.word	0x2400b254
 8001a78:	24000010 	.word	0x24000010
 8001a7c:	2400b248 	.word	0x2400b248
 8001a80:	24000004 	.word	0x24000004
 8001a84:	deadbeef 	.word	0xdeadbeef
 8001a88:	a55aa55a 	.word	0xa55aa55a
 8001a8c:	0801cc84 	.word	0x0801cc84
 8001a90:	0801ccc8 	.word	0x0801ccc8
 8001a94:	2400dc50 	.word	0x2400dc50
 8001a98:	2400b290 	.word	0x2400b290
 8001a9c:	2400b268 	.word	0x2400b268
 8001aa0:	2400b27c 	.word	0x2400b27c
 8001aa4:	0801cd14 	.word	0x0801cd14
 8001aa8:	2400b258 	.word	0x2400b258
 8001aac:	2400b25c 	.word	0x2400b25c
 8001ab0:	2400b260 	.word	0x2400b260
 8001ab4:	2400b264 	.word	0x2400b264

08001ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b09c      	sub	sp, #112	@ 0x70
 8001abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac2:	224c      	movs	r2, #76	@ 0x4c
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f019 fd06 	bl	801b4d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2220      	movs	r2, #32
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f019 fd00 	bl	801b4d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f009 fe03 	bl	800b6e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001ade:	2300      	movs	r3, #0
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	4b32      	ldr	r3, [pc, #200]	@ (8001bac <SystemClock_Config+0xf4>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	4a31      	ldr	r2, [pc, #196]	@ (8001bac <SystemClock_Config+0xf4>)
 8001ae8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001aec:	6193      	str	r3, [r2, #24]
 8001aee:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <SystemClock_Config+0xf4>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001afa:	bf00      	nop
 8001afc:	4b2b      	ldr	r3, [pc, #172]	@ (8001bac <SystemClock_Config+0xf4>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b08:	d1f8      	bne.n	8001afc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001b0a:	232b      	movs	r3, #43	@ 0x2b
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001b18:	2340      	movs	r3, #64	@ 0x40
 8001b1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b20:	2301      	movs	r3, #1
 8001b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b24:	2302      	movs	r3, #2
 8001b26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001b30:	232c      	movs	r3, #44	@ 0x2c
 8001b32:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001b38:	2305      	movs	r3, #5
 8001b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b40:	230c      	movs	r3, #12
 8001b42:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b50:	4618      	mov	r0, r3
 8001b52:	f009 fe11 	bl	800b778 <HAL_RCC_OscConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001b5c:	f001 f99e 	bl	8002e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b60:	233f      	movs	r3, #63	@ 0x3f
 8001b62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b64:	2303      	movs	r3, #3
 8001b66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b70:	2340      	movs	r3, #64	@ 0x40
 8001b72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b74:	2340      	movs	r3, #64	@ 0x40
 8001b76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b7e:	2340      	movs	r3, #64	@ 0x40
 8001b80:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2103      	movs	r1, #3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00a f9d0 	bl	800bf2c <HAL_RCC_ClockConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001b92:	f001 f983 	bl	8002e9c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001b96:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f00a fb7b 	bl	800c298 <HAL_RCC_MCOConfig>
}
 8001ba2:	bf00      	nop
 8001ba4:	3770      	adds	r7, #112	@ 0x70
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	58024800 	.word	0x58024800

08001bb0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b0ae      	sub	sp, #184	@ 0xb8
 8001bb4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	22b8      	movs	r2, #184	@ 0xb8
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f019 fc8b 	bl	801b4d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2
 8001bc2:	4a17      	ldr	r2, [pc, #92]	@ (8001c20 <PeriphCommonClock_Config+0x70>)
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_TIM;
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001bcc:	2305      	movs	r3, #5
 8001bce:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8001bd0:	2380      	movs	r3, #128	@ 0x80
 8001bd2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001be0:	2380      	movs	r3, #128	@ 0x80
 8001be2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8001bf2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bf6:	663b      	str	r3, [r7, #96]	@ 0x60
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8001bfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c06:	463b      	mov	r3, r7
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f00a fd85 	bl	800c718 <HAL_RCCEx_PeriphCLKConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <PeriphCommonClock_Config+0x68>
  {
    Error_Handler();
 8001c14:	f001 f942 	bl	8002e9c <Error_Handler>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	37b8      	adds	r7, #184	@ 0xb8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40083000 	.word	0x40083000

08001c24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	@ 0x30
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c36:	463b      	mov	r3, r7
 8001c38:	2224      	movs	r2, #36	@ 0x24
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f019 fc4b 	bl	801b4d8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c42:	4b33      	ldr	r3, [pc, #204]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c44:	4a33      	ldr	r2, [pc, #204]	@ (8001d14 <MX_ADC1_Init+0xf0>)
 8001c46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c48:	4b31      	ldr	r3, [pc, #196]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001c4e:	4b30      	ldr	r3, [pc, #192]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c54:	4b2e      	ldr	r3, [pc, #184]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c60:	4b2b      	ldr	r3, [pc, #172]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c66:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c6c:	4b28      	ldr	r3, [pc, #160]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c72:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001c7a:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c7c:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001c80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c82:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001c8a:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c90:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c96:	4b1e      	ldr	r3, [pc, #120]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001caa:	4819      	ldr	r0, [pc, #100]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001cac:	f003 fce4 	bl	8005678 <HAL_ADC_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001cb6:	f001 f8f1 	bl	8002e9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4812      	ldr	r0, [pc, #72]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001cc6:	f005 f87d 	bl	8006dc4 <HAL_ADCEx_MultiModeConfigChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001cd0:	f001 f8e4 	bl	8002e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cd4:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <MX_ADC1_Init+0xf4>)
 8001cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cd8:	2306      	movs	r3, #6
 8001cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ce0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001ce4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_ADC1_Init+0xec>)
 8001cfa:	f004 f841 	bl	8005d80 <HAL_ADC_ConfigChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001d04:	f001 f8ca 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	3730      	adds	r7, #48	@ 0x30
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	2400ad40 	.word	0x2400ad40
 8001d14:	40022000 	.word	0x40022000
 8001d18:	0c900008 	.word	0x0c900008

08001d1c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */
  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2224      	movs	r2, #36	@ 0x24
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f019 fbd5 	bl	801b4d8 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */
  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d30:	4a2d      	ldr	r2, [pc, #180]	@ (8001de8 <MX_ADC2_Init+0xcc>)
 8001d32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d34:	4b2b      	ldr	r3, [pc, #172]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d40:	4b28      	ldr	r3, [pc, #160]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d46:	4b27      	ldr	r3, [pc, #156]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d48:	2204      	movs	r2, #4
 8001d4a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001d4c:	4b25      	ldr	r3, [pc, #148]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d52:	4b24      	ldr	r3, [pc, #144]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001d58:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d5e:	4b21      	ldr	r3, [pc, #132]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001d66:	4b1f      	ldr	r3, [pc, #124]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d68:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001d76:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d78:	2203      	movs	r2, #3
 8001d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d7c:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d82:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8001d88:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8001d90:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d96:	4813      	ldr	r0, [pc, #76]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001d98:	f003 fc6e 	bl	8005678 <HAL_ADC_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001da2:	f001 f87b 	bl	8002e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001da6:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <MX_ADC2_Init+0xd0>)
 8001da8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001daa:	2306      	movs	r3, #6
 8001dac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001db2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001db6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001db8:	2304      	movs	r3, #4
 8001dba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	@ (8001de4 <MX_ADC2_Init+0xc8>)
 8001dcc:	f003 ffd8 	bl	8005d80 <HAL_ADC_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 8001dd6:	f001 f861 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  /* USER CODE END ADC2_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	@ 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2400adb0 	.word	0x2400adb0
 8001de8:	40022100 	.word	0x40022100
 8001dec:	10c00010 	.word	0x10c00010

08001df0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	@ 0x28
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2224      	movs	r2, #36	@ 0x24
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f019 fb6b 	bl	801b4d8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */
  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001e02:	4b17      	ldr	r3, [pc, #92]	@ (8001e60 <MX_DAC1_Init+0x70>)
 8001e04:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <MX_DAC1_Init+0x74>)
 8001e06:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001e08:	4815      	ldr	r0, [pc, #84]	@ (8001e60 <MX_DAC1_Init+0x70>)
 8001e0a:	f005 f9fe 	bl	800720a <HAL_DAC_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001e14:	f001 f842 	bl	8002e9c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8001e24:	2302      	movs	r3, #2
 8001e26:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4619      	mov	r1, r3
 8001e32:	480b      	ldr	r0, [pc, #44]	@ (8001e60 <MX_DAC1_Init+0x70>)
 8001e34:	f005 fa6c 	bl	8007310 <HAL_DAC_ConfigChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001e3e:	f001 f82d 	bl	8002e9c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2210      	movs	r2, #16
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_DAC1_Init+0x70>)
 8001e4a:	f005 fa61 	bl	8007310 <HAL_DAC_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001e54:	f001 f822 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  /* USER CODE END DAC1_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	@ 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2400b140 	.word	0x2400b140
 8001e64:	40007400 	.word	0x40007400

08001e68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e6c:	4b27      	ldr	r3, [pc, #156]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001e6e:	4a28      	ldr	r2, [pc, #160]	@ (8001f10 <MX_SPI2_Init+0xa8>)
 8001e70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e72:	4b26      	ldr	r3, [pc, #152]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001e74:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e80:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001e82:	2203      	movs	r2, #3
 8001e84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e86:	4b21      	ldr	r3, [pc, #132]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e92:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001e94:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ea6:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eac:	4b17      	ldr	r3, [pc, #92]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001eb2:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001eb8:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001eba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ebe:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ec0:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ef6:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <MX_SPI2_Init+0xa4>)
 8001ef8:	f00c fff4 	bl	800eee4 <HAL_SPI_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001f02:	f000 ffcb 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2400ae20 	.word	0x2400ae20
 8001f10:	40003800 	.word	0x40003800

08001f14 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */
  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001f18:	4b28      	ldr	r3, [pc, #160]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f1a:	4a29      	ldr	r2, [pc, #164]	@ (8001fc0 <MX_SPI4_Init+0xac>)
 8001f1c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001f1e:	4b27      	ldr	r3, [pc, #156]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f20:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001f24:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001f26:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f2c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f2e:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f30:	2207      	movs	r2, #7
 8001f32:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f34:	4b21      	ldr	r3, [pc, #132]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f3a:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001f40:	4b1e      	ldr	r3, [pc, #120]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f42:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f46:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f48:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f4e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f50:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f56:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f5c:	4b17      	ldr	r3, [pc, #92]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001f62:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f68:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f6e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f70:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f76:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	@ (8001fbc <MX_SPI4_Init+0xa8>)
 8001fa8:	f00c ff9c 	bl	800eee4 <HAL_SPI_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8001fb2:	f000 ff73 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */
  /* USER CODE END SPI4_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	2400aea8 	.word	0x2400aea8
 8001fc0:	40013400 	.word	0x40013400

08001fc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b098      	sub	sp, #96	@ 0x60
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	611a      	str	r2, [r3, #16]
 8001fe6:	615a      	str	r2, [r3, #20]
 8001fe8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	2234      	movs	r2, #52	@ 0x34
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f019 fa71 	bl	801b4d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ff6:	4b42      	ldr	r3, [pc, #264]	@ (8002100 <MX_TIM1_Init+0x13c>)
 8001ff8:	4a42      	ldr	r2, [pc, #264]	@ (8002104 <MX_TIM1_Init+0x140>)
 8001ffa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 274;
 8001ffc:	4b40      	ldr	r3, [pc, #256]	@ (8002100 <MX_TIM1_Init+0x13c>)
 8001ffe:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8002002:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002004:	4b3e      	ldr	r3, [pc, #248]	@ (8002100 <MX_TIM1_Init+0x13c>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 800200a:	4b3d      	ldr	r3, [pc, #244]	@ (8002100 <MX_TIM1_Init+0x13c>)
 800200c:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8002010:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002012:	4b3b      	ldr	r3, [pc, #236]	@ (8002100 <MX_TIM1_Init+0x13c>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002018:	4b39      	ldr	r3, [pc, #228]	@ (8002100 <MX_TIM1_Init+0x13c>)
 800201a:	2200      	movs	r2, #0
 800201c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800201e:	4b38      	ldr	r3, [pc, #224]	@ (8002100 <MX_TIM1_Init+0x13c>)
 8002020:	2280      	movs	r2, #128	@ 0x80
 8002022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002024:	4836      	ldr	r0, [pc, #216]	@ (8002100 <MX_TIM1_Init+0x13c>)
 8002026:	f00d fcb3 	bl	800f990 <HAL_TIM_PWM_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8002030:	f000 ff34 	bl	8002e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002034:	2320      	movs	r3, #32
 8002036:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8002038:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800203c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002042:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002046:	4619      	mov	r1, r3
 8002048:	482d      	ldr	r0, [pc, #180]	@ (8002100 <MX_TIM1_Init+0x13c>)
 800204a:	f00e fec3 	bl	8010dd4 <HAL_TIMEx_MasterConfigSynchronization>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002054:	f000 ff22 	bl	8002e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002058:	2360      	movs	r3, #96	@ 0x60
 800205a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002060:	2300      	movs	r3, #0
 8002062:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002064:	2300      	movs	r3, #0
 8002066:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800206c:	2300      	movs	r3, #0
 800206e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002074:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002078:	2204      	movs	r2, #4
 800207a:	4619      	mov	r1, r3
 800207c:	4820      	ldr	r0, [pc, #128]	@ (8002100 <MX_TIM1_Init+0x13c>)
 800207e:	f00d ff03 	bl	800fe88 <HAL_TIM_PWM_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002088:	f000 ff08 	bl	8002e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	4619      	mov	r1, r3
 80020c0:	480f      	ldr	r0, [pc, #60]	@ (8002100 <MX_TIM1_Init+0x13c>)
 80020c2:	f00e ff23 	bl	8010f0c <HAL_TIMEx_ConfigBreakDeadTime>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80020cc:	f000 fee6 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  // Разрешаем автоматическое включение основного выхода (MOE) для надёжного старта CH2N
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80020d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	4809      	ldr	r0, [pc, #36]	@ (8002100 <MX_TIM1_Init+0x13c>)
 80020dc:	f00e ff16 	bl	8010f0c <HAL_TIMEx_ConfigBreakDeadTime>
  printf("[PWM] TIM1 initialized: ARR=%lu, PSC=%lu\r\n",
         (unsigned long)htim1.Init.Period, (unsigned long)htim1.Init.Prescaler);
 80020e0:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <MX_TIM1_Init+0x13c>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a06      	ldr	r2, [pc, #24]	@ (8002100 <MX_TIM1_Init+0x13c>)
 80020e6:	6852      	ldr	r2, [r2, #4]
  printf("[PWM] TIM1 initialized: ARR=%lu, PSC=%lu\r\n",
 80020e8:	4619      	mov	r1, r3
 80020ea:	4807      	ldr	r0, [pc, #28]	@ (8002108 <MX_TIM1_Init+0x144>)
 80020ec:	f018 ff88 	bl	801b000 <iprintf>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020f0:	4803      	ldr	r0, [pc, #12]	@ (8002100 <MX_TIM1_Init+0x13c>)
 80020f2:	f001 f9c3 	bl	800347c <HAL_TIM_MspPostInit>

}
 80020f6:	bf00      	nop
 80020f8:	3760      	adds	r7, #96	@ 0x60
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	2400af30 	.word	0x2400af30
 8002104:	40010000 	.word	0x40010000
 8002108:	0801cd60 	.word	0x0801cd60

0800210c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b090      	sub	sp, #64	@ 0x40
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002112:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002122:	f107 0320 	add.w	r3, r7, #32
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
 800213c:	615a      	str	r2, [r3, #20]
 800213e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002140:	4b3d      	ldr	r3, [pc, #244]	@ (8002238 <MX_TIM2_Init+0x12c>)
 8002142:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002146:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8002148:	4b3b      	ldr	r3, [pc, #236]	@ (8002238 <MX_TIM2_Init+0x12c>)
 800214a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800214e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002150:	4b39      	ldr	r3, [pc, #228]	@ (8002238 <MX_TIM2_Init+0x12c>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8002156:	4b38      	ldr	r3, [pc, #224]	@ (8002238 <MX_TIM2_Init+0x12c>)
 8002158:	f241 3287 	movw	r2, #4999	@ 0x1387
 800215c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215e:	4b36      	ldr	r3, [pc, #216]	@ (8002238 <MX_TIM2_Init+0x12c>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002164:	4b34      	ldr	r3, [pc, #208]	@ (8002238 <MX_TIM2_Init+0x12c>)
 8002166:	2200      	movs	r2, #0
 8002168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800216a:	4833      	ldr	r0, [pc, #204]	@ (8002238 <MX_TIM2_Init+0x12c>)
 800216c:	f00d fab5 	bl	800f6da <HAL_TIM_Base_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002176:	f000 fe91 	bl	8002e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800217a:	482f      	ldr	r0, [pc, #188]	@ (8002238 <MX_TIM2_Init+0x12c>)
 800217c:	f00d fc08 	bl	800f990 <HAL_TIM_PWM_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002186:	f000 fe89 	bl	8002e9c <Error_Handler>
  }
  /* TIM2 uses internal clock; we will use its TRGO to sync others */
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800218e:	2300      	movs	r3, #0
 8002190:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002192:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002196:	4619      	mov	r1, r3
 8002198:	4827      	ldr	r0, [pc, #156]	@ (8002238 <MX_TIM2_Init+0x12c>)
 800219a:	f00e f881 	bl	80102a0 <HAL_TIM_SlaveConfigSynchro>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80021a4:	f000 fe7a 	bl	8002e9c <Error_Handler>
  }
  /* Emit TRGO on update to reset TIM15/ADCs periodically */
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021a8:	2320      	movs	r3, #32
 80021aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021b0:	f107 0320 	add.w	r3, r7, #32
 80021b4:	4619      	mov	r1, r3
 80021b6:	4820      	ldr	r0, [pc, #128]	@ (8002238 <MX_TIM2_Init+0x12c>)
 80021b8:	f00e fe0c 	bl	8010dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80021c2:	f000 fe6b 	bl	8002e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021c6:	2360      	movs	r3, #96	@ 0x60
 80021c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2499;
 80021ca:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 80021ce:	60bb      	str	r3, [r7, #8]
 
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	2200      	movs	r2, #0
 80021dc:	4619      	mov	r1, r3
 80021de:	4816      	ldr	r0, [pc, #88]	@ (8002238 <MX_TIM2_Init+0x12c>)
 80021e0:	f00d fe52 	bl	800fe88 <HAL_TIM_PWM_ConfigChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80021ea:	f000 fe57 	bl	8002e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2204      	movs	r2, #4
 80021f2:	4619      	mov	r1, r3
 80021f4:	4810      	ldr	r0, [pc, #64]	@ (8002238 <MX_TIM2_Init+0x12c>)
 80021f6:	f00d fe47 	bl	800fe88 <HAL_TIM_PWM_ConfigChannel>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8002200:	f000 fe4c 	bl	8002e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	2208      	movs	r2, #8
 8002208:	4619      	mov	r1, r3
 800220a:	480b      	ldr	r0, [pc, #44]	@ (8002238 <MX_TIM2_Init+0x12c>)
 800220c:	f00d fe3c 	bl	800fe88 <HAL_TIM_PWM_ConfigChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8002216:	f000 fe41 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // Разрешаем прерывания TIM2
  HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2106      	movs	r1, #6
 800221e:	201c      	movs	r0, #28
 8002220:	f004 ffb1 	bl	8007186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002224:	201c      	movs	r0, #28
 8002226:	f004 ffc8 	bl	80071ba <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800222a:	4803      	ldr	r0, [pc, #12]	@ (8002238 <MX_TIM2_Init+0x12c>)
 800222c:	f001 f926 	bl	800347c <HAL_TIM_MspPostInit>

}
 8002230:	bf00      	nop
 8002232:	3740      	adds	r7, #64	@ 0x40
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	2400af7c 	.word	0x2400af7c

0800223c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b090      	sub	sp, #64	@ 0x40
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002242:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002252:	f107 0320 	add.w	r3, r7, #32
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
 800226c:	615a      	str	r2, [r3, #20]
 800226e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002270:	4b39      	ldr	r3, [pc, #228]	@ (8002358 <MX_TIM3_Init+0x11c>)
 8002272:	4a3a      	ldr	r2, [pc, #232]	@ (800235c <MX_TIM3_Init+0x120>)
 8002274:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 274;
 8002276:	4b38      	ldr	r3, [pc, #224]	@ (8002358 <MX_TIM3_Init+0x11c>)
 8002278:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800227c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227e:	4b36      	ldr	r3, [pc, #216]	@ (8002358 <MX_TIM3_Init+0x11c>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8002284:	4b34      	ldr	r3, [pc, #208]	@ (8002358 <MX_TIM3_Init+0x11c>)
 8002286:	f241 3287 	movw	r2, #4999	@ 0x1387
 800228a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228c:	4b32      	ldr	r3, [pc, #200]	@ (8002358 <MX_TIM3_Init+0x11c>)
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002292:	4b31      	ldr	r3, [pc, #196]	@ (8002358 <MX_TIM3_Init+0x11c>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002298:	482f      	ldr	r0, [pc, #188]	@ (8002358 <MX_TIM3_Init+0x11c>)
 800229a:	f00d fa1e 	bl	800f6da <HAL_TIM_Base_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80022a4:	f000 fdfa 	bl	8002e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022a8:	482b      	ldr	r0, [pc, #172]	@ (8002358 <MX_TIM3_Init+0x11c>)
 80022aa:	f00d fb71 	bl	800f990 <HAL_TIM_PWM_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80022b4:	f000 fdf2 	bl	8002e9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80022b8:	2304      	movs	r3, #4
 80022ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80022bc:	2330      	movs	r3, #48	@ 0x30
 80022be:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80022c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022c4:	4619      	mov	r1, r3
 80022c6:	4824      	ldr	r0, [pc, #144]	@ (8002358 <MX_TIM3_Init+0x11c>)
 80022c8:	f00d ffea 	bl	80102a0 <HAL_TIM_SlaveConfigSynchro>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80022d2:	f000 fde3 	bl	8002e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80022d6:	2350      	movs	r3, #80	@ 0x50
 80022d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022de:	f107 0320 	add.w	r3, r7, #32
 80022e2:	4619      	mov	r1, r3
 80022e4:	481c      	ldr	r0, [pc, #112]	@ (8002358 <MX_TIM3_Init+0x11c>)
 80022e6:	f00e fd75 	bl	8010dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80022f0:	f000 fdd4 	bl	8002e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f4:	2360      	movs	r3, #96	@ 0x60
 80022f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2499;
 80022f8:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 80022fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	2200      	movs	r2, #0
 800230a:	4619      	mov	r1, r3
 800230c:	4812      	ldr	r0, [pc, #72]	@ (8002358 <MX_TIM3_Init+0x11c>)
 800230e:	f00d fdbb 	bl	800fe88 <HAL_TIM_PWM_ConfigChannel>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8002318:	f000 fdc0 	bl	8002e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	2204      	movs	r2, #4
 8002320:	4619      	mov	r1, r3
 8002322:	480d      	ldr	r0, [pc, #52]	@ (8002358 <MX_TIM3_Init+0x11c>)
 8002324:	f00d fdb0 	bl	800fe88 <HAL_TIM_PWM_ConfigChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800232e:	f000 fdb5 	bl	8002e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	2208      	movs	r2, #8
 8002336:	4619      	mov	r1, r3
 8002338:	4807      	ldr	r0, [pc, #28]	@ (8002358 <MX_TIM3_Init+0x11c>)
 800233a:	f00d fda5 	bl	800fe88 <HAL_TIM_PWM_ConfigChannel>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8002344:	f000 fdaa 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002348:	4803      	ldr	r0, [pc, #12]	@ (8002358 <MX_TIM3_Init+0x11c>)
 800234a:	f001 f897 	bl	800347c <HAL_TIM_MspPostInit>

}
 800234e:	bf00      	nop
 8002350:	3740      	adds	r7, #64	@ 0x40
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2400afc8 	.word	0x2400afc8
 800235c:	40000400 	.word	0x40000400

08002360 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */
  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */
  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002370:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <MX_TIM6_Init+0x78>)
 8002372:	4a1a      	ldr	r2, [pc, #104]	@ (80023dc <MX_TIM6_Init+0x7c>)
 8002374:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 274;
 8002376:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <MX_TIM6_Init+0x78>)
 8002378:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800237c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237e:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <MX_TIM6_Init+0x78>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8002384:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <MX_TIM6_Init+0x78>)
 8002386:	f241 3287 	movw	r2, #4999	@ 0x1387
 800238a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800238c:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <MX_TIM6_Init+0x78>)
 800238e:	2280      	movs	r2, #128	@ 0x80
 8002390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002392:	4811      	ldr	r0, [pc, #68]	@ (80023d8 <MX_TIM6_Init+0x78>)
 8002394:	f00d f9a1 	bl	800f6da <HAL_TIM_Base_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800239e:	f000 fd7d 	bl	8002e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023a2:	2320      	movs	r3, #32
 80023a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	4619      	mov	r1, r3
 80023ae:	480a      	ldr	r0, [pc, #40]	@ (80023d8 <MX_TIM6_Init+0x78>)
 80023b0:	f00e fd10 	bl	8010dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80023ba:	f000 fd6f 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  // Включаем прерывание TIM6 (для мигания светодиодом в HAL_TIM_PeriodElapsedCallback)
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2106      	movs	r1, #6
 80023c2:	2036      	movs	r0, #54	@ 0x36
 80023c4:	f004 fedf 	bl	8007186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023c8:	2036      	movs	r0, #54	@ 0x36
 80023ca:	f004 fef6 	bl	80071ba <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2400b014 	.word	0x2400b014
 80023dc:	40001000 	.word	0x40001000

080023e0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0a0      	sub	sp, #128	@ 0x80
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */
  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80023f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002404:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002410:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
 8002420:	615a      	str	r2, [r3, #20]
 8002422:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002424:	463b      	mov	r3, r7
 8002426:	2234      	movs	r2, #52	@ 0x34
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f019 f854 	bl	801b4d8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */
  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002430:	4b47      	ldr	r3, [pc, #284]	@ (8002550 <MX_TIM15_Init+0x170>)
 8002432:	4a48      	ldr	r2, [pc, #288]	@ (8002554 <MX_TIM15_Init+0x174>)
 8002434:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002436:	4b46      	ldr	r3, [pc, #280]	@ (8002550 <MX_TIM15_Init+0x170>)
 8002438:	2200      	movs	r2, #0
 800243a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243c:	4b44      	ldr	r3, [pc, #272]	@ (8002550 <MX_TIM15_Init+0x170>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8002442:	4b43      	ldr	r3, [pc, #268]	@ (8002550 <MX_TIM15_Init+0x170>)
 8002444:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002448:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244a:	4b41      	ldr	r3, [pc, #260]	@ (8002550 <MX_TIM15_Init+0x170>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002450:	4b3f      	ldr	r3, [pc, #252]	@ (8002550 <MX_TIM15_Init+0x170>)
 8002452:	2200      	movs	r2, #0
 8002454:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002456:	4b3e      	ldr	r3, [pc, #248]	@ (8002550 <MX_TIM15_Init+0x170>)
 8002458:	2280      	movs	r2, #128	@ 0x80
 800245a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800245c:	483c      	ldr	r0, [pc, #240]	@ (8002550 <MX_TIM15_Init+0x170>)
 800245e:	f00d f93c 	bl	800f6da <HAL_TIM_Base_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002468:	f000 fd18 	bl	8002e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002470:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002472:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002476:	4619      	mov	r1, r3
 8002478:	4835      	ldr	r0, [pc, #212]	@ (8002550 <MX_TIM15_Init+0x170>)
 800247a:	f00d fe19 	bl	80100b0 <HAL_TIM_ConfigClockSource>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8002484:	f000 fd0a 	bl	8002e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002488:	4831      	ldr	r0, [pc, #196]	@ (8002550 <MX_TIM15_Init+0x170>)
 800248a:	f00d fa81 	bl	800f990 <HAL_TIM_PWM_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM15_Init+0xb8>
  {
    Error_Handler();
 8002494:	f000 fd02 	bl	8002e9c <Error_Handler>
  }
  /* TIM15 resets on TIM2 TRGO (ITR1) for aligned restart */
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002498:	2304      	movs	r3, #4
 800249a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800249c:	2310      	movs	r3, #16
 800249e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 80024a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024a4:	4619      	mov	r1, r3
 80024a6:	482a      	ldr	r0, [pc, #168]	@ (8002550 <MX_TIM15_Init+0x170>)
 80024a8:	f00d fefa 	bl	80102a0 <HAL_TIM_SlaveConfigSynchro>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM15_Init+0xd6>
  {
    Error_Handler();
 80024b2:	f000 fcf3 	bl	8002e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024b6:	2320      	movs	r3, #32
 80024b8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80024be:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024c2:	4619      	mov	r1, r3
 80024c4:	4822      	ldr	r0, [pc, #136]	@ (8002550 <MX_TIM15_Init+0x170>)
 80024c6:	f00e fc85 	bl	8010dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 80024d0:	f000 fce4 	bl	8002e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d4:	2360      	movs	r3, #96	@ 0x60
 80024d6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 499;
 80024d8:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80024dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024de:	2300      	movs	r3, #0
 80024e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024e2:	2300      	movs	r3, #0
 80024e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024f6:	2200      	movs	r2, #0
 80024f8:	4619      	mov	r1, r3
 80024fa:	4815      	ldr	r0, [pc, #84]	@ (8002550 <MX_TIM15_Init+0x170>)
 80024fc:	f00d fcc4 	bl	800fe88 <HAL_TIM_PWM_ConfigChannel>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM15_Init+0x12a>
  {
    Error_Handler();
 8002506:	f000 fcc9 	bl	8002e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800250a:	2300      	movs	r3, #0
 800250c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800251e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002522:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800252c:	463b      	mov	r3, r7
 800252e:	4619      	mov	r1, r3
 8002530:	4807      	ldr	r0, [pc, #28]	@ (8002550 <MX_TIM15_Init+0x170>)
 8002532:	f00e fceb 	bl	8010f0c <HAL_TIMEx_ConfigBreakDeadTime>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM15_Init+0x160>
  {
    Error_Handler();
 800253c:	f000 fcae 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002540:	4803      	ldr	r0, [pc, #12]	@ (8002550 <MX_TIM15_Init+0x170>)
 8002542:	f000 ff9b 	bl	800347c <HAL_TIM_MspPostInit>

}
 8002546:	bf00      	nop
 8002548:	3780      	adds	r7, #128	@ 0x80
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2400b060 	.word	0x2400b060
 8002554:	40014000 	.word	0x40014000

08002558 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800255c:	4b22      	ldr	r3, [pc, #136]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 800255e:	4a23      	ldr	r2, [pc, #140]	@ (80025ec <MX_USART1_UART_Init+0x94>)
 8002560:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002562:	4b21      	ldr	r3, [pc, #132]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 8002564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002568:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800256a:	4b1f      	ldr	r3, [pc, #124]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002570:	4b1d      	ldr	r3, [pc, #116]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002576:	4b1c      	ldr	r3, [pc, #112]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800257c:	4b1a      	ldr	r3, [pc, #104]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 800257e:	220c      	movs	r2, #12
 8002580:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002582:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002588:	4b17      	ldr	r3, [pc, #92]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800258e:	4b16      	ldr	r3, [pc, #88]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 8002590:	2200      	movs	r2, #0
 8002592:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002594:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 8002596:	2200      	movs	r2, #0
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800259a:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 800259c:	2200      	movs	r2, #0
 800259e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025a0:	4811      	ldr	r0, [pc, #68]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 80025a2:	f00e fd5d 	bl	8011060 <HAL_UART_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80025ac:	f000 fc76 	bl	8002e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025b0:	2100      	movs	r1, #0
 80025b2:	480d      	ldr	r0, [pc, #52]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 80025b4:	f00f fef7 	bl	80123a6 <HAL_UARTEx_SetTxFifoThreshold>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80025be:	f000 fc6d 	bl	8002e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025c2:	2100      	movs	r1, #0
 80025c4:	4808      	ldr	r0, [pc, #32]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 80025c6:	f00f ff2c 	bl	8012422 <HAL_UARTEx_SetRxFifoThreshold>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80025d0:	f000 fc64 	bl	8002e9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80025d4:	4804      	ldr	r0, [pc, #16]	@ (80025e8 <MX_USART1_UART_Init+0x90>)
 80025d6:	f00f fead 	bl	8012334 <HAL_UARTEx_DisableFifoMode>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80025e0:	f000 fc5c 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2400b0ac 	.word	0x2400b0ac
 80025ec:	40011000 	.word	0x40011000

080025f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <MX_DMA_Init+0x44>)
 80025f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002634 <MX_DMA_Init+0x44>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002606:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <MX_DMA_Init+0x44>)
 8002608:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	2106      	movs	r1, #6
 8002618:	200b      	movs	r0, #11
 800261a:	f004 fdb4 	bl	8007186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800261e:	200b      	movs	r0, #11
 8002620:	f004 fdcb 	bl	80071ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn disabled intentionally (ADC2 DMA runs without IRQ) */
  HAL_NVIC_DisableIRQ(DMA1_Stream1_IRQn);
 8002624:	200c      	movs	r0, #12
 8002626:	f004 fdd6 	bl	80071d6 <HAL_NVIC_DisableIRQ>

}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	58024400 	.word	0x58024400

08002638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	@ 0x30
 800263c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263e:	f107 031c 	add.w	r3, r7, #28
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800264e:	4b71      	ldr	r3, [pc, #452]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 8002650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002654:	4a6f      	ldr	r2, [pc, #444]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 8002656:	f043 0310 	orr.w	r3, r3, #16
 800265a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800265e:	4b6d      	ldr	r3, [pc, #436]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 8002660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800266c:	4b69      	ldr	r3, [pc, #420]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 800266e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002672:	4a68      	ldr	r2, [pc, #416]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800267c:	4b65      	ldr	r3, [pc, #404]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 800267e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800268a:	4b62      	ldr	r3, [pc, #392]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 800268c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002690:	4a60      	ldr	r2, [pc, #384]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 8002692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800269a:	4b5e      	ldr	r3, [pc, #376]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 800269c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 80026aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ae:	4a59      	ldr	r2, [pc, #356]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026b8:	4b56      	ldr	r3, [pc, #344]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 80026ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c6:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 80026c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026cc:	4a51      	ldr	r2, [pc, #324]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 80026ce:	f043 0302 	orr.w	r3, r3, #2
 80026d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026d6:	4b4f      	ldr	r3, [pc, #316]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 80026d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 80026e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 80026ec:	f043 0308 	orr.w	r3, r3, #8
 80026f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026f4:	4b47      	ldr	r3, [pc, #284]	@ (8002814 <MX_GPIO_Init+0x1dc>)
 80026f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Led_Test_Pin|LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8002702:	2200      	movs	r2, #0
 8002704:	f642 0108 	movw	r1, #10248	@ 0x2808
 8002708:	4843      	ldr	r0, [pc, #268]	@ (8002818 <MX_GPIO_Init+0x1e0>)
 800270a:	f007 fceb 	bl	800a0e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_RESET);
 800270e:	2200      	movs	r2, #0
 8002710:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002714:	4841      	ldr	r0, [pc, #260]	@ (800281c <MX_GPIO_Init+0x1e4>)
 8002716:	f007 fce5 	bl	800a0e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Test_Pin */
  GPIO_InitStruct.Pin = Led_Test_Pin;
 800271a:	2308      	movs	r3, #8
 800271c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271e:	2301      	movs	r3, #1
 8002720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Led_Test_GPIO_Port, &GPIO_InitStruct);
 800272a:	f107 031c 	add.w	r3, r7, #28
 800272e:	4619      	mov	r1, r3
 8002730:	4839      	ldr	r0, [pc, #228]	@ (8002818 <MX_GPIO_Init+0x1e0>)
 8002732:	f007 fb2f 	bl	8009d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8002736:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800273a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273c:	2301      	movs	r3, #1
 800273e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002744:	2303      	movs	r3, #3
 8002746:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	4619      	mov	r1, r3
 800274e:	4832      	ldr	r0, [pc, #200]	@ (8002818 <MX_GPIO_Init+0x1e0>)
 8002750:	f007 fb20 	bl	8009d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : Data_ready_GPIO22_Pin */
  GPIO_InitStruct.Pin = Data_ready_GPIO22_Pin;
 8002754:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275a:	2301      	movs	r3, #1
 800275c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Data_ready_GPIO22_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	4619      	mov	r1, r3
 800276c:	482b      	ldr	r0, [pc, #172]	@ (800281c <MX_GPIO_Init+0x1e4>)
 800276e:	f007 fb11 	bl	8009d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002784:	2300      	movs	r3, #0
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	4619      	mov	r1, r3
 800278e:	4824      	ldr	r0, [pc, #144]	@ (8002820 <MX_GPIO_Init+0x1e8>)
 8002790:	f007 fb00 	bl	8009d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // Настройка RST дисплея и подсветки как GPIO до старта PWM
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8002794:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279a:	2301      	movs	r3, #1
 800279c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a2:	2303      	movs	r3, #3
 80027a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f107 031c 	add.w	r3, r7, #28
 80027aa:	4619      	mov	r1, r3
 80027ac:	481a      	ldr	r0, [pc, #104]	@ (8002818 <MX_GPIO_Init+0x1e0>)
 80027ae:	f007 faf1 	bl	8009d94 <HAL_GPIO_Init>
  // Жёсткий аппаратный сброс LCD: low->delay->high
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80027b2:	2200      	movs	r2, #0
 80027b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027b8:	4817      	ldr	r0, [pc, #92]	@ (8002818 <MX_GPIO_Init+0x1e0>)
 80027ba:	f007 fc93 	bl	800a0e4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80027be:	200a      	movs	r0, #10
 80027c0:	f002 fbe0 	bl	8004f84 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80027c4:	2201      	movs	r2, #1
 80027c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027ca:	4813      	ldr	r0, [pc, #76]	@ (8002818 <MX_GPIO_Init+0x1e0>)
 80027cc:	f007 fc8a 	bl	800a0e4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80027d0:	200a      	movs	r0, #10
 80027d2:	f002 fbd7 	bl	8004f84 <HAL_Delay>

#if FORCE_BL_GPIO
  // Настройка подсветки как GPIO ТОЛЬКО если используется GPIO режим
  GPIO_InitStruct.Pin = LCD_Led_Pin; /* PE10 */
 80027d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027dc:	2301      	movs	r3, #1
 80027de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e4:	2303      	movs	r3, #3
 80027e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_Led_GPIO_Port, &GPIO_InitStruct);
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	4619      	mov	r1, r3
 80027ee:	480a      	ldr	r0, [pc, #40]	@ (8002818 <MX_GPIO_Init+0x1e0>)
 80027f0:	f007 fad0 	bl	8009d94 <HAL_GPIO_Init>
  // По умолчанию выключаем подсветку (active low -> высокий уровень)
  BL_OFF();
 80027f4:	2201      	movs	r2, #1
 80027f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027fa:	4807      	ldr	r0, [pc, #28]	@ (8002818 <MX_GPIO_Init+0x1e0>)
 80027fc:	f007 fc72 	bl	800a0e4 <HAL_GPIO_WritePin>
#endif
  HAL_GPIO_WritePin(Led_Test_GPIO_Port, Led_Test_Pin, GPIO_PIN_SET);
 8002800:	2201      	movs	r2, #1
 8002802:	2108      	movs	r1, #8
 8002804:	4804      	ldr	r0, [pc, #16]	@ (8002818 <MX_GPIO_Init+0x1e0>)
 8002806:	f007 fc6d 	bl	800a0e4 <HAL_GPIO_WritePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 800280a:	bf00      	nop
 800280c:	3730      	adds	r7, #48	@ 0x30
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	58024400 	.word	0x58024400
 8002818:	58021000 	.word	0x58021000
 800281c:	58020c00 	.word	0x58020c00
 8002820:	58020000 	.word	0x58020000

08002824 <HAL_TIM_PeriodElapsedCallback>:

// Мигание светодиодом и сторож
static volatile uint32_t tim2_irq_counter = 0; /* диагностика TIM2 IRQ */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002834:	d107      	bne.n	8002846 <HAL_TIM_PeriodElapsedCallback+0x22>
    tim2_irq_counter++; /* счётчик для измерения реальной частоты */
 8002836:	4b18      	ldr	r3, [pc, #96]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3301      	adds	r3, #1
 800283c:	4a16      	ldr	r2, [pc, #88]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800283e:	6013      	str	r3, [r2, #0]
    /* TIM2 @ 200 Hz: генерация тестового пилообразного сигнала */
    #if !SAFE_MINIMAL
      extern void vnd_generate_test_sawtooth(void);
      vnd_generate_test_sawtooth();
 8002840:	f001 ff5c 	bl	80046fc <vnd_generate_test_sawtooth>
    #if !SAFE_MINIMAL
      extern void usb_vendor_periodic_tick(void);
      usb_vendor_periodic_tick();
    #endif
  }
}
 8002844:	e024      	b.n	8002890 <HAL_TIM_PeriodElapsedCallback+0x6c>
  else if (htim->Instance == TIM6) {
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a14      	ldr	r2, [pc, #80]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d11f      	bne.n	8002890 <HAL_TIM_PeriodElapsedCallback+0x6c>
    tim6_irq_count++;
 8002850:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	4a12      	ldr	r2, [pc, #72]	@ (80028a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002858:	6013      	str	r3, [r2, #0]
    if (++div >= 20) {       // быстреее мигание для наглядности (~2–4 Гц в зависимости от частоты TIM6)
 800285a:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002864:	801a      	strh	r2, [r3, #0]
 8002866:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	2b13      	cmp	r3, #19
 800286c:	d90e      	bls.n	800288c <HAL_TIM_PeriodElapsedCallback+0x68>
      div = 0;
 800286e:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002870:	2200      	movs	r2, #0
 8002872:	801a      	strh	r2, [r3, #0]
        HAL_GPIO_TogglePin(Led_Test_GPIO_Port, Led_Test_Pin);
 8002874:	2108      	movs	r1, #8
 8002876:	480c      	ldr	r0, [pc, #48]	@ (80028a8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002878:	f007 fc4d 	bl	800a116 <HAL_GPIO_TogglePin>
        tim6_led_toggled_flag = 1; // попросим main вывести лог
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_TIM_PeriodElapsedCallback+0x88>)
 800287e:	2201      	movs	r2, #1
 8002880:	701a      	strb	r2, [r3, #0]
        tim6_led_toggle_counter++;
 8002882:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	4a09      	ldr	r2, [pc, #36]	@ (80028b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800288a:	6013      	str	r3, [r2, #0]
      usb_vendor_periodic_tick();
 800288c:	f013 f9ac 	bl	8015be8 <usb_vendor_periodic_tick>
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	2400b284 	.word	0x2400b284
 800289c:	40001000 	.word	0x40001000
 80028a0:	2400b244 	.word	0x2400b244
 80028a4:	2400b294 	.word	0x2400b294
 80028a8:	58021000 	.word	0x58021000
 80028ac:	2400b248 	.word	0x2400b248
 80028b0:	2400b24c 	.word	0x2400b24c

080028b4 <lcd_print_padded_if_changed>:

static void lcd_print_padded_if_changed(int x, int y, const char* new_text,
                                        char *prev, size_t buf_sz,
                                        uint8_t max_len, uint8_t font_height,
                                        uint16_t fg, uint16_t bg)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b091      	sub	sp, #68	@ 0x44
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
    if(!new_text || !prev || buf_sz == 0) return;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d055      	beq.n	8002974 <lcd_print_padded_if_changed+0xc0>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d052      	beq.n	8002974 <lcd_print_padded_if_changed+0xc0>
 80028ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d04f      	beq.n	8002974 <lcd_print_padded_if_changed+0xc0>
    if(strncmp(new_text, prev, buf_sz-1) == 0) return;
 80028d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028d6:	3b01      	subs	r3, #1
 80028d8:	461a      	mov	r2, r3
 80028da:	6839      	ldr	r1, [r7, #0]
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f018 fe03 	bl	801b4e8 <strncmp>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d047      	beq.n	8002978 <lcd_print_padded_if_changed+0xc4>
    char line[32];
    size_t n = strlen(new_text);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7fd fcf1 	bl	80002d0 <strlen>
 80028ee:	6378      	str	r0, [r7, #52]	@ 0x34
    if(n > max_len) n = max_len;
 80028f0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80028f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d902      	bls.n	8002900 <lcd_print_padded_if_changed+0x4c>
 80028fa:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80028fe:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(line, new_text, n);
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4618      	mov	r0, r3
 800290a:	f018 fe86 	bl	801b61a <memcpy>
    while(n < max_len) line[n++] = ' ';
 800290e:	e007      	b.n	8002920 <lcd_print_padded_if_changed+0x6c>
 8002910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	637a      	str	r2, [r7, #52]	@ 0x34
 8002916:	3338      	adds	r3, #56	@ 0x38
 8002918:	443b      	add	r3, r7
 800291a:	2220      	movs	r2, #32
 800291c:	f803 2c24 	strb.w	r2, [r3, #-36]
 8002920:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002924:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002926:	429a      	cmp	r2, r3
 8002928:	d3f2      	bcc.n	8002910 <lcd_print_padded_if_changed+0x5c>
    line[n] = 0;
 800292a:	f107 0214 	add.w	r2, r7, #20
 800292e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002930:	4413      	add	r3, r2
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
    LCD_ShowString_Size((uint16_t)x, (uint16_t)y, line, font_height, fg, bg);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	b298      	uxth	r0, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	b299      	uxth	r1, r3
 800293e:	f897 4050 	ldrb.w	r4, [r7, #80]	@ 0x50
 8002942:	f107 0214 	add.w	r2, r7, #20
 8002946:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	4623      	mov	r3, r4
 8002954:	f002 f80c 	bl	8004970 <LCD_ShowString_Size>
    strncpy(prev, new_text, buf_sz-1);
 8002958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800295a:	3b01      	subs	r3, #1
 800295c:	461a      	mov	r2, r3
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	6838      	ldr	r0, [r7, #0]
 8002962:	f018 fdd3 	bl	801b50c <strncpy>
    prev[buf_sz-1] = 0;
 8002966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002968:	3b01      	subs	r3, #1
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	4413      	add	r3, r2
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e002      	b.n	800297a <lcd_print_padded_if_changed+0xc6>
    if(!new_text || !prev || buf_sz == 0) return;
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <lcd_print_padded_if_changed+0xc6>
    if(strncmp(new_text, prev, buf_sz-1) == 0) return;
 8002978:	bf00      	nop
}
 800297a:	373c      	adds	r7, #60	@ 0x3c
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}

08002980 <UpdateLCDStatus>:

void UpdateLCDStatus(void){ need_usb_status_refresh = 1; }
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
 8002984:	4b03      	ldr	r3, [pc, #12]	@ (8002994 <UpdateLCDStatus+0x14>)
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	2400b269 	.word	0x2400b269

08002998 <DrawUSBStatus>:
    }
    */
  PROG('s');
}

void DrawUSBStatus(void){
 8002998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800299c:	b0b4      	sub	sp, #208	@ 0xd0
 800299e:	af06      	add	r7, sp, #24
  PROG('U');
#if DIAG_SKIP_LCD
  PROG('u');
  return;
#endif
    if(!lcd_ready) {
 80029a0:	4b77      	ldr	r3, [pc, #476]	@ (8002b80 <DrawUSBStatus+0x1e8>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8254 	beq.w	8002e52 <DrawUSBStatus+0x4ba>
  static uint64_t prev_tx_bytes = 0ULL;
  static uint64_t prev_tx_samples = 0ULL;
  static uint32_t prev_rate_calc_ms = 0;
  static uint32_t last_rate_bps = 0; /* приблизительно bytes/sec */
  static uint32_t last_rate_sps = 0; /* семплов в секунду (оба канала суммарно) */
  uint32_t now = HAL_GetTick();
 80029aa:	f002 fadf 	bl	8004f6c <HAL_GetTick>
 80029ae:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
  /* Хост присутствует только при свежем SOF (<400мс) или SUSPENDED */
  uint32_t dt_sof = now - g_usb_last_sof_ms;
 80029b2:	4b74      	ldr	r3, [pc, #464]	@ (8002b84 <DrawUSBStatus+0x1ec>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint8_t host_present = (hUsbDeviceHS.dev_state == USBD_STATE_SUSPENDED) || (dt_sof < 400);
 80029c0:	4b71      	ldr	r3, [pc, #452]	@ (8002b88 <DrawUSBStatus+0x1f0>)
 80029c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d004      	beq.n	80029d6 <DrawUSBStatus+0x3e>
 80029cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029d0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80029d4:	d201      	bcs.n	80029da <DrawUSBStatus+0x42>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <DrawUSBStatus+0x44>
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    uint8_t s = hUsbDeviceHS.dev_state;
 80029e0:	4b69      	ldr	r3, [pc, #420]	@ (8002b88 <DrawUSBStatus+0x1f0>)
 80029e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80029e6:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

    const char *text0; uint16_t color0;
    if(!host_present){ text0 = "USB:--"; color0 = RED; }
 80029ea:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d107      	bne.n	8002a02 <DrawUSBStatus+0x6a>
 80029f2:	4b66      	ldr	r3, [pc, #408]	@ (8002b8c <DrawUSBStatus+0x1f4>)
 80029f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029f8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80029fc:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8002a00:	e02a      	b.n	8002a58 <DrawUSBStatus+0xc0>
    else {
        switch(s){
 8002a02:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d016      	beq.n	8002a38 <DrawUSBStatus+0xa0>
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	dc1c      	bgt.n	8002a48 <DrawUSBStatus+0xb0>
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d002      	beq.n	8002a18 <DrawUSBStatus+0x80>
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d008      	beq.n	8002a28 <DrawUSBStatus+0x90>
 8002a16:	e017      	b.n	8002a48 <DrawUSBStatus+0xb0>
            case USBD_STATE_ADDRESSED: text0 = "USB:ADR"; color0 = YELLOW; break;
 8002a18:	4b5d      	ldr	r3, [pc, #372]	@ (8002b90 <DrawUSBStatus+0x1f8>)
 8002a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a1e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a22:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8002a26:	e017      	b.n	8002a58 <DrawUSBStatus+0xc0>
            case USBD_STATE_CONFIGURED: text0 = "USB:CFG"; color0 = GREEN; break;
 8002a28:	4b5a      	ldr	r3, [pc, #360]	@ (8002b94 <DrawUSBStatus+0x1fc>)
 8002a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a2e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002a32:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8002a36:	e00f      	b.n	8002a58 <DrawUSBStatus+0xc0>
            case USBD_STATE_SUSPENDED:  text0 = "USB:SUS"; color0 = CYAN;  break;
 8002a38:	4b57      	ldr	r3, [pc, #348]	@ (8002b98 <DrawUSBStatus+0x200>)
 8002a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a3e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002a42:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8002a46:	e007      	b.n	8002a58 <DrawUSBStatus+0xc0>
            default: text0 = "USB:--"; color0 = RED; break;
 8002a48:	4b50      	ldr	r3, [pc, #320]	@ (8002b8c <DrawUSBStatus+0x1f4>)
 8002a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a4e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a52:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8002a56:	bf00      	nop
        }
    }
    lcd_print_padded_if_changed(0,0,text0, prev_line0, sizeof(prev_line0), 7, 16, color0, BLACK);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	9304      	str	r3, [sp, #16]
 8002a5c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8002a60:	9303      	str	r3, [sp, #12]
 8002a62:	2310      	movs	r3, #16
 8002a64:	9302      	str	r3, [sp, #8]
 8002a66:	2307      	movs	r3, #7
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b9c <DrawUSBStatus+0x204>)
 8002a70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a74:	2100      	movs	r1, #0
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7ff ff1c 	bl	80028b4 <lcd_print_padded_if_changed>
  /* Диагностика частоты TIM2 IRQ */
  static uint32_t prev_tim2_count = 0;
  static uint32_t prev_tim2_calc_ms = 0;
  static uint32_t tim2_hz_display = 0;
  char ds_buf[16];
  uint32_t dt_tim2 = now - prev_tim2_calc_ms;
 8002a7c:	4b48      	ldr	r3, [pc, #288]	@ (8002ba0 <DrawUSBStatus+0x208>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if(dt_tim2 >= 1000) {
 8002a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a92:	d312      	bcc.n	8002aba <DrawUSBStatus+0x122>
    uint32_t tim2_delta = tim2_irq_counter - prev_tim2_count;
 8002a94:	4b43      	ldr	r3, [pc, #268]	@ (8002ba4 <DrawUSBStatus+0x20c>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b43      	ldr	r3, [pc, #268]	@ (8002ba8 <DrawUSBStatus+0x210>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tim2_hz_display = tim2_delta; /* частота за последнюю секунду */
 8002aa2:	4a42      	ldr	r2, [pc, #264]	@ (8002bac <DrawUSBStatus+0x214>)
 8002aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002aa8:	6013      	str	r3, [r2, #0]
    prev_tim2_count = tim2_irq_counter;
 8002aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba4 <DrawUSBStatus+0x20c>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba8 <DrawUSBStatus+0x210>)
 8002ab0:	601a      	str	r2, [r3, #0]
    prev_tim2_calc_ms = now;
 8002ab2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ba0 <DrawUSBStatus+0x208>)
 8002ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ab8:	6013      	str	r3, [r2, #0]
  }
  snprintf(ds_buf,sizeof(ds_buf),"T2:%u Hz", (unsigned)tim2_hz_display);
 8002aba:	4b3c      	ldr	r3, [pc, #240]	@ (8002bac <DrawUSBStatus+0x214>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8002ac2:	4a3b      	ldr	r2, [pc, #236]	@ (8002bb0 <DrawUSBStatus+0x218>)
 8002ac4:	2110      	movs	r1, #16
 8002ac6:	f018 fbbf 	bl	801b248 <sniprintf>
    lcd_print_padded_if_changed(0,14, ds_buf, prev_line1, sizeof(prev_line1), 12, 16, CYAN, BLACK);
 8002aca:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9304      	str	r3, [sp, #16]
 8002ad2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002ad6:	9303      	str	r3, [sp, #12]
 8002ad8:	2310      	movs	r3, #16
 8002ada:	9302      	str	r3, [sp, #8]
 8002adc:	230c      	movs	r3, #12
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	4b33      	ldr	r3, [pc, #204]	@ (8002bb4 <DrawUSBStatus+0x21c>)
 8002ae6:	210e      	movs	r1, #14
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7ff fee3 	bl	80028b4 <lcd_print_padded_if_changed>

  /* Скорость обмена: считаем раз в ~500мс (байты/с и семплы/с) */
  if(host_present && s == USBD_STATE_CONFIGURED){
 8002aee:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 815e 	beq.w	8002db4 <DrawUSBStatus+0x41c>
 8002af8:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	f040 8159 	bne.w	8002db4 <DrawUSBStatus+0x41c>
    uint32_t dt = now - prev_rate_calc_ms;
 8002b02:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb8 <DrawUSBStatus+0x220>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if(dt >= 500){
 8002b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b14:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b18:	f0c0 80f0 	bcc.w	8002cfc <DrawUSBStatus+0x364>
      uint64_t cur = vnd_get_total_tx_bytes();
 8002b1c:	f016 fd0e 	bl	801953c <vnd_get_total_tx_bytes>
 8002b20:	e9c7 0124 	strd	r0, r1, [r7, #144]	@ 0x90
      uint64_t cur_samples = vnd_get_total_tx_samples();
 8002b24:	f016 fd18 	bl	8019558 <vnd_get_total_tx_samples>
 8002b28:	e9c7 0122 	strd	r0, r1, [r7, #136]	@ 0x88
      uint64_t dbytes = (cur >= prev_tx_bytes)? (cur - prev_tx_bytes):0ULL;
 8002b2c:	4b23      	ldr	r3, [pc, #140]	@ (8002bbc <DrawUSBStatus+0x224>)
 8002b2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b32:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002b36:	4282      	cmp	r2, r0
 8002b38:	418b      	sbcs	r3, r1
 8002b3a:	d308      	bcc.n	8002b4e <DrawUSBStatus+0x1b6>
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bbc <DrawUSBStatus+0x224>)
 8002b3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b42:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002b46:	1a14      	subs	r4, r2, r0
 8002b48:	eb63 0501 	sbc.w	r5, r3, r1
 8002b4c:	e003      	b.n	8002b56 <DrawUSBStatus+0x1be>
 8002b4e:	f04f 0400 	mov.w	r4, #0
 8002b52:	f04f 0500 	mov.w	r5, #0
 8002b56:	e9c7 4520 	strd	r4, r5, [r7, #128]	@ 0x80
      uint64_t dsamps = (cur_samples >= prev_tx_samples)? (cur_samples - prev_tx_samples):0ULL;
 8002b5a:	4b19      	ldr	r3, [pc, #100]	@ (8002bc0 <DrawUSBStatus+0x228>)
 8002b5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b64:	4282      	cmp	r2, r0
 8002b66:	418b      	sbcs	r3, r1
 8002b68:	d32c      	bcc.n	8002bc4 <DrawUSBStatus+0x22c>
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <DrawUSBStatus+0x228>)
 8002b6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b70:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b74:	1a14      	subs	r4, r2, r0
 8002b76:	623c      	str	r4, [r7, #32]
 8002b78:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b7e:	e027      	b.n	8002bd0 <DrawUSBStatus+0x238>
 8002b80:	2400d8bc 	.word	0x2400d8bc
 8002b84:	2401bcc8 	.word	0x2401bcc8
 8002b88:	2400d8c8 	.word	0x2400d8c8
 8002b8c:	0801cd98 	.word	0x0801cd98
 8002b90:	0801cda0 	.word	0x0801cda0
 8002b94:	0801cda8 	.word	0x0801cda8
 8002b98:	0801cdb0 	.word	0x0801cdb0
 8002b9c:	2400b298 	.word	0x2400b298
 8002ba0:	2400b2a8 	.word	0x2400b2a8
 8002ba4:	2400b284 	.word	0x2400b284
 8002ba8:	2400b2ac 	.word	0x2400b2ac
 8002bac:	2400b2b0 	.word	0x2400b2b0
 8002bb0:	0801cdb8 	.word	0x0801cdb8
 8002bb4:	2400b2b4 	.word	0x2400b2b4
 8002bb8:	2400b2c4 	.word	0x2400b2c4
 8002bbc:	2400b2c8 	.word	0x2400b2c8
 8002bc0:	2400b2d0 	.word	0x2400b2d0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	f04f 0400 	mov.w	r4, #0
 8002bcc:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8002bd0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002bd4:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      /* bytes per second approximation */
      if(dt > 0){
 8002bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d07f      	beq.n	8002ce0 <DrawUSBStatus+0x348>
        last_rate_bps = (uint32_t)( (dbytes * 1000ULL) / dt );
 8002be0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8002be4:	4622      	mov	r2, r4
 8002be6:	462b      	mov	r3, r5
 8002be8:	f04f 0000 	mov.w	r0, #0
 8002bec:	f04f 0100 	mov.w	r1, #0
 8002bf0:	0159      	lsls	r1, r3, #5
 8002bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf6:	0150      	lsls	r0, r2, #5
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	ebb2 0804 	subs.w	r8, r2, r4
 8002c00:	eb63 0905 	sbc.w	r9, r3, r5
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8002c10:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8002c14:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8002c18:	4690      	mov	r8, r2
 8002c1a:	4699      	mov	r9, r3
 8002c1c:	eb18 0304 	adds.w	r3, r8, r4
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	eb49 0305 	adc.w	r3, r9, r5
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c34:	4629      	mov	r1, r5
 8002c36:	00cb      	lsls	r3, r1, #3
 8002c38:	4621      	mov	r1, r4
 8002c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c3e:	4621      	mov	r1, r4
 8002c40:	00ca      	lsls	r2, r1, #3
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	61fa      	str	r2, [r7, #28]
 8002c50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c54:	f7fd fb94 	bl	8000380 <__aeabi_uldivmod>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4b7f      	ldr	r3, [pc, #508]	@ (8002e5c <DrawUSBStatus+0x4c4>)
 8002c5e:	601a      	str	r2, [r3, #0]
        last_rate_sps = (uint32_t)( (dsamps * 1000ULL) / dt );
 8002c60:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	f04f 0400 	mov.w	r4, #0
 8002c6c:	f04f 0500 	mov.w	r5, #0
 8002c70:	015d      	lsls	r5, r3, #5
 8002c72:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002c76:	0154      	lsls	r4, r2, #5
 8002c78:	4622      	mov	r2, r4
 8002c7a:	462b      	mov	r3, r5
 8002c7c:	ebb2 0a00 	subs.w	sl, r2, r0
 8002c80:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8002c90:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8002c94:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8002c98:	4692      	mov	sl, r2
 8002c9a:	469b      	mov	fp, r3
 8002c9c:	eb1a 0300 	adds.w	r3, sl, r0
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	eb4b 0301 	adc.w	r3, fp, r1
 8002ca6:	607b      	str	r3, [r7, #4]
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	00cb      	lsls	r3, r1, #3
 8002cb8:	4621      	mov	r1, r4
 8002cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	00ca      	lsls	r2, r1, #3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cca:	2200      	movs	r2, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	617a      	str	r2, [r7, #20]
 8002cd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cd4:	f7fd fb54 	bl	8000380 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4b60      	ldr	r3, [pc, #384]	@ (8002e60 <DrawUSBStatus+0x4c8>)
 8002cde:	601a      	str	r2, [r3, #0]
      }
      prev_tx_bytes = cur;
 8002ce0:	4960      	ldr	r1, [pc, #384]	@ (8002e64 <DrawUSBStatus+0x4cc>)
 8002ce2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002ce6:	e9c1 2300 	strd	r2, r3, [r1]
      prev_tx_samples = cur_samples;
 8002cea:	495f      	ldr	r1, [pc, #380]	@ (8002e68 <DrawUSBStatus+0x4d0>)
 8002cec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002cf0:	e9c1 2300 	strd	r2, r3, [r1]
      prev_rate_calc_ms = now;
 8002cf4:	4a5d      	ldr	r2, [pc, #372]	@ (8002e6c <DrawUSBStatus+0x4d4>)
 8002cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cfa:	6013      	str	r3, [r2, #0]
    }
    /* Формат строки: S:xxxxx (sps) на первом плане; экономный вывод */
    char rate_buf[16];
    if(last_rate_sps >= 100000){
 8002cfc:	4b58      	ldr	r3, [pc, #352]	@ (8002e60 <DrawUSBStatus+0x4c8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a5b      	ldr	r2, [pc, #364]	@ (8002e70 <DrawUSBStatus+0x4d8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d90e      	bls.n	8002d24 <DrawUSBStatus+0x38c>
      uint32_t ks = last_rate_sps / 1000U;
 8002d06:	4b56      	ldr	r3, [pc, #344]	@ (8002e60 <DrawUSBStatus+0x4c8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002e74 <DrawUSBStatus+0x4dc>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	677b      	str	r3, [r7, #116]	@ 0x74
      snprintf(rate_buf, sizeof(rate_buf), "S:%3uK", (unsigned)ks);
 8002d14:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8002d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d1a:	4a57      	ldr	r2, [pc, #348]	@ (8002e78 <DrawUSBStatus+0x4e0>)
 8002d1c:	2110      	movs	r1, #16
 8002d1e:	f018 fa93 	bl	801b248 <sniprintf>
 8002d22:	e007      	b.n	8002d34 <DrawUSBStatus+0x39c>
    } else {
      snprintf(rate_buf, sizeof(rate_buf), "S:%4u", (unsigned)last_rate_sps);
 8002d24:	4b4e      	ldr	r3, [pc, #312]	@ (8002e60 <DrawUSBStatus+0x4c8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8002d2c:	4a53      	ldr	r2, [pc, #332]	@ (8002e7c <DrawUSBStatus+0x4e4>)
 8002d2e:	2110      	movs	r1, #16
 8002d30:	f018 fa8a 	bl	801b248 <sniprintf>
    }
  /* Очистка legacy VID/PID убрана */
    /* Используем ширину 12 символов для гарантированного затирания хвоста */
    lcd_print_padded_if_changed(0,28, rate_buf, prev_line2, sizeof(prev_line2), 12, 16, vnd_is_streaming()?GREEN:WHITE, BLACK);
 8002d34:	f013 fa06 	bl	8016144 <vnd_is_streaming>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <DrawUSBStatus+0x3ac>
 8002d3e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002d42:	e001      	b.n	8002d48 <DrawUSBStatus+0x3b0>
 8002d44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d48:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	9104      	str	r1, [sp, #16]
 8002d50:	9303      	str	r3, [sp, #12]
 8002d52:	2310      	movs	r3, #16
 8002d54:	9302      	str	r3, [sp, #8]
 8002d56:	230c      	movs	r3, #12
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	4b48      	ldr	r3, [pc, #288]	@ (8002e80 <DrawUSBStatus+0x4e8>)
 8002d60:	211c      	movs	r1, #28
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7ff fda6 	bl	80028b4 <lcd_print_padded_if_changed>
    /* Показываем время компиляции для контроля версии - ПРИНУДИТЕЛЬНО при первом запуске */
    {
      extern const char fw_build_time[];
      static uint8_t build_time_shown = 0;
      char build_time[20];
      snprintf(build_time, sizeof(build_time), "Build:%s", fw_build_time);
 8002d68:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8002d6c:	4b45      	ldr	r3, [pc, #276]	@ (8002e84 <DrawUSBStatus+0x4ec>)
 8002d6e:	4a46      	ldr	r2, [pc, #280]	@ (8002e88 <DrawUSBStatus+0x4f0>)
 8002d70:	2114      	movs	r1, #20
 8002d72:	f018 fa69 	bl	801b248 <sniprintf>
      if(!build_time_shown) {
 8002d76:	4b45      	ldr	r3, [pc, #276]	@ (8002e8c <DrawUSBStatus+0x4f4>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d107      	bne.n	8002d8e <DrawUSBStatus+0x3f6>
        memset(prev_line3, 0, sizeof(prev_line3)); // Сбросить для принудительного обновления
 8002d7e:	2210      	movs	r2, #16
 8002d80:	2100      	movs	r1, #0
 8002d82:	4843      	ldr	r0, [pc, #268]	@ (8002e90 <DrawUSBStatus+0x4f8>)
 8002d84:	f018 fba8 	bl	801b4d8 <memset>
        build_time_shown = 1;
 8002d88:	4b40      	ldr	r3, [pc, #256]	@ (8002e8c <DrawUSBStatus+0x4f4>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
      }
      lcd_print_padded_if_changed(0,42, build_time, prev_line3, sizeof(prev_line3), 16, 16, YELLOW, BLACK);
 8002d8e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002d92:	2300      	movs	r3, #0
 8002d94:	9304      	str	r3, [sp, #16]
 8002d96:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002d9a:	9303      	str	r3, [sp, #12]
 8002d9c:	2310      	movs	r3, #16
 8002d9e:	9302      	str	r3, [sp, #8]
 8002da0:	2310      	movs	r3, #16
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	2310      	movs	r3, #16
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	4b39      	ldr	r3, [pc, #228]	@ (8002e90 <DrawUSBStatus+0x4f8>)
 8002daa:	212a      	movs	r1, #42	@ 0x2a
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7ff fd81 	bl	80028b4 <lcd_print_padded_if_changed>
  if(host_present && s == USBD_STATE_CONFIGURED){
 8002db2:	e04f      	b.n	8002e54 <DrawUSBStatus+0x4bc>
    }
  } else {
  /* Очистка legacy VID/PID убрана */
    lcd_print_padded_if_changed(0,28, host_present?"S:----":"S:----", prev_line2, sizeof(prev_line2), 12, 16, WHITE, BLACK);
 8002db4:	2300      	movs	r3, #0
 8002db6:	9304      	str	r3, [sp, #16]
 8002db8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dbc:	9303      	str	r3, [sp, #12]
 8002dbe:	2310      	movs	r3, #16
 8002dc0:	9302      	str	r3, [sp, #8]
 8002dc2:	230c      	movs	r3, #12
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	2310      	movs	r3, #16
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	4b2d      	ldr	r3, [pc, #180]	@ (8002e80 <DrawUSBStatus+0x4e8>)
 8002dcc:	4a31      	ldr	r2, [pc, #196]	@ (8002e94 <DrawUSBStatus+0x4fc>)
 8002dce:	211c      	movs	r1, #28
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7ff fd6f 	bl	80028b4 <lcd_print_padded_if_changed>
    /* При отсутствии хоста показываем время компиляции */
    {
      extern const char fw_build_time[];
      static uint8_t build_time_shown2 = 0;
      char build_time[20];
      snprintf(build_time, sizeof(build_time), "Build:%s", fw_build_time);
 8002dd6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002dda:	4b2a      	ldr	r3, [pc, #168]	@ (8002e84 <DrawUSBStatus+0x4ec>)
 8002ddc:	4a2a      	ldr	r2, [pc, #168]	@ (8002e88 <DrawUSBStatus+0x4f0>)
 8002dde:	2114      	movs	r1, #20
 8002de0:	f018 fa32 	bl	801b248 <sniprintf>
      if(!build_time_shown2) {
 8002de4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e98 <DrawUSBStatus+0x500>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d107      	bne.n	8002dfc <DrawUSBStatus+0x464>
        memset(prev_line3, 0, sizeof(prev_line3));
 8002dec:	2210      	movs	r2, #16
 8002dee:	2100      	movs	r1, #0
 8002df0:	4827      	ldr	r0, [pc, #156]	@ (8002e90 <DrawUSBStatus+0x4f8>)
 8002df2:	f018 fb71 	bl	801b4d8 <memset>
        build_time_shown2 = 1;
 8002df6:	4b28      	ldr	r3, [pc, #160]	@ (8002e98 <DrawUSBStatus+0x500>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
      }
      lcd_print_padded_if_changed(0,42, build_time, prev_line3, sizeof(prev_line3), 16, 16, YELLOW, BLACK);
 8002dfc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002e00:	2300      	movs	r3, #0
 8002e02:	9304      	str	r3, [sp, #16]
 8002e04:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002e08:	9303      	str	r3, [sp, #12]
 8002e0a:	2310      	movs	r3, #16
 8002e0c:	9302      	str	r3, [sp, #8]
 8002e0e:	2310      	movs	r3, #16
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	2310      	movs	r3, #16
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	4b1e      	ldr	r3, [pc, #120]	@ (8002e90 <DrawUSBStatus+0x4f8>)
 8002e18:	212a      	movs	r1, #42	@ 0x2a
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7ff fd4a 	bl	80028b4 <lcd_print_padded_if_changed>
    }
    prev_rate_calc_ms = now;
 8002e20:	4a12      	ldr	r2, [pc, #72]	@ (8002e6c <DrawUSBStatus+0x4d4>)
 8002e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e26:	6013      	str	r3, [r2, #0]
    prev_tx_bytes = vnd_get_total_tx_bytes();
 8002e28:	f016 fb88 	bl	801953c <vnd_get_total_tx_bytes>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	490c      	ldr	r1, [pc, #48]	@ (8002e64 <DrawUSBStatus+0x4cc>)
 8002e32:	e9c1 2300 	strd	r2, r3, [r1]
    prev_tx_samples = vnd_get_total_tx_samples();
 8002e36:	f016 fb8f 	bl	8019558 <vnd_get_total_tx_samples>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	490a      	ldr	r1, [pc, #40]	@ (8002e68 <DrawUSBStatus+0x4d0>)
 8002e40:	e9c1 2300 	strd	r2, r3, [r1]
    last_rate_bps = 0;
 8002e44:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <DrawUSBStatus+0x4c4>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
    last_rate_sps = 0;
 8002e4a:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <DrawUSBStatus+0x4c8>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	e000      	b.n	8002e54 <DrawUSBStatus+0x4bc>
        return;
 8002e52:	bf00      	nop
  }
  PROG('u');
}
 8002e54:	37b8      	adds	r7, #184	@ 0xb8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e5c:	2400b2d8 	.word	0x2400b2d8
 8002e60:	2400b2dc 	.word	0x2400b2dc
 8002e64:	2400b2c8 	.word	0x2400b2c8
 8002e68:	2400b2d0 	.word	0x2400b2d0
 8002e6c:	2400b2c4 	.word	0x2400b2c4
 8002e70:	0001869f 	.word	0x0001869f
 8002e74:	10624dd3 	.word	0x10624dd3
 8002e78:	0801cdc4 	.word	0x0801cdc4
 8002e7c:	0801cdcc 	.word	0x0801cdcc
 8002e80:	2400b2e0 	.word	0x2400b2e0
 8002e84:	0801d4bc 	.word	0x0801d4bc
 8002e88:	0801cdd4 	.word	0x0801cdd4
 8002e8c:	2400b2f0 	.word	0x2400b2f0
 8002e90:	2400b2f4 	.word	0x2400b2f4
 8002e94:	0801cde0 	.word	0x0801cde0
 8002e98:	2400b304 	.word	0x2400b304

08002e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea2:	b672      	cpsid	i
}
 8002ea4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Визуальный индикатор ошибки: мигание подсветкой LCD_Led (PE10, active-low) и LED (PE3) */
  __disable_irq();
  /* Включаем тактирование GPIOE на случай ранней ошибки */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ea6:	4b31      	ldr	r3, [pc, #196]	@ (8002f6c <Error_Handler+0xd0>)
 8002ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eac:	4a2f      	ldr	r2, [pc, #188]	@ (8002f6c <Error_Handler+0xd0>)
 8002eae:	f043 0310 	orr.w	r3, r3, #16
 8002eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f6c <Error_Handler+0xd0>)
 8002eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
  int led_idx = __builtin_ctz(Led_Test_Pin);
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	617b      	str	r3, [r7, #20]
  int bl_idx  = __builtin_ctz(LCD_Led_Pin);
 8002ec8:	230a      	movs	r3, #10
 8002eca:	613b      	str	r3, [r7, #16]
  GPIOE->MODER &= ~(3u << (led_idx*2));
 8002ecc:	4b28      	ldr	r3, [pc, #160]	@ (8002f70 <Error_Handler+0xd4>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	2103      	movs	r1, #3
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	4924      	ldr	r1, [pc, #144]	@ (8002f70 <Error_Handler+0xd4>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
  GPIOE->MODER |=  (1u << (led_idx*2));
 8002ee2:	4b23      	ldr	r3, [pc, #140]	@ (8002f70 <Error_Handler+0xd4>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	491f      	ldr	r1, [pc, #124]	@ (8002f70 <Error_Handler+0xd4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
  GPIOE->MODER &= ~(3u << (bl_idx*2));
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f70 <Error_Handler+0xd4>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	2103      	movs	r1, #3
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	491a      	ldr	r1, [pc, #104]	@ (8002f70 <Error_Handler+0xd4>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
  GPIOE->MODER |=  (1u << (bl_idx*2));
 8002f0c:	4b18      	ldr	r3, [pc, #96]	@ (8002f70 <Error_Handler+0xd4>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2101      	movs	r1, #1
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	4915      	ldr	r1, [pc, #84]	@ (8002f70 <Error_Handler+0xd4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]
  for(;;){
    /* LED ON, BL ON (active-low -> reset) */
    GPIOE->BSRR = Led_Test_Pin;
 8002f20:	4b13      	ldr	r3, [pc, #76]	@ (8002f70 <Error_Handler+0xd4>)
 8002f22:	2208      	movs	r2, #8
 8002f24:	619a      	str	r2, [r3, #24]
    GPIOE->BSRR = (LCD_Led_Pin << 16);
 8002f26:	4b12      	ldr	r3, [pc, #72]	@ (8002f70 <Error_Handler+0xd4>)
 8002f28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f2c:	619a      	str	r2, [r3, #24]
    for(volatile uint32_t d=0; d<24000000UL; ++d){ __NOP(); }
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	e003      	b.n	8002f3c <Error_Handler+0xa0>
 8002f34:	bf00      	nop
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8002f74 <Error_Handler+0xd8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d3f7      	bcc.n	8002f34 <Error_Handler+0x98>
    /* LED OFF, BL OFF (active-low -> set) */
    GPIOE->BSRR = (Led_Test_Pin << 16);
 8002f44:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <Error_Handler+0xd4>)
 8002f46:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002f4a:	619a      	str	r2, [r3, #24]
    GPIOE->BSRR = LCD_Led_Pin;
 8002f4c:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <Error_Handler+0xd4>)
 8002f4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f52:	619a      	str	r2, [r3, #24]
    for(volatile uint32_t d=0; d<12000000UL; ++d){ __NOP(); }
 8002f54:	2300      	movs	r3, #0
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	e003      	b.n	8002f62 <Error_Handler+0xc6>
 8002f5a:	bf00      	nop
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a04      	ldr	r2, [pc, #16]	@ (8002f78 <Error_Handler+0xdc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d3f7      	bcc.n	8002f5a <Error_Handler+0xbe>
    GPIOE->BSRR = Led_Test_Pin;
 8002f6a:	e7d9      	b.n	8002f20 <Error_Handler+0x84>
 8002f6c:	58024400 	.word	0x58024400
 8002f70:	58021000 	.word	0x58021000
 8002f74:	016e3600 	.word	0x016e3600
 8002f78:	00b71b00 	.word	0x00b71b00

08002f7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f82:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <HAL_MspInit+0x30>)
 8002f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f88:	4a08      	ldr	r2, [pc, #32]	@ (8002fac <HAL_MspInit+0x30>)
 8002f8a:	f043 0302 	orr.w	r3, r3, #2
 8002f8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002f92:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <HAL_MspInit+0x30>)
 8002f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	58024400 	.word	0x58024400

08002fb0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	@ 0x30
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 031c 	add.w	r3, r7, #28
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a69      	ldr	r2, [pc, #420]	@ (8003174 <HAL_ADC_MspInit+0x1c4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d163      	bne.n	800309a <HAL_ADC_MspInit+0xea>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002fd2:	4b69      	ldr	r3, [pc, #420]	@ (8003178 <HAL_ADC_MspInit+0x1c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	4a67      	ldr	r2, [pc, #412]	@ (8003178 <HAL_ADC_MspInit+0x1c8>)
 8002fda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002fdc:	4b66      	ldr	r3, [pc, #408]	@ (8003178 <HAL_ADC_MspInit+0x1c8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d10e      	bne.n	8003002 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002fe4:	4b65      	ldr	r3, [pc, #404]	@ (800317c <HAL_ADC_MspInit+0x1cc>)
 8002fe6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002fea:	4a64      	ldr	r2, [pc, #400]	@ (800317c <HAL_ADC_MspInit+0x1cc>)
 8002fec:	f043 0320 	orr.w	r3, r3, #32
 8002ff0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002ff4:	4b61      	ldr	r3, [pc, #388]	@ (800317c <HAL_ADC_MspInit+0x1cc>)
 8002ff6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	4b5e      	ldr	r3, [pc, #376]	@ (800317c <HAL_ADC_MspInit+0x1cc>)
 8003004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003008:	4a5c      	ldr	r2, [pc, #368]	@ (800317c <HAL_ADC_MspInit+0x1cc>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003012:	4b5a      	ldr	r3, [pc, #360]	@ (800317c <HAL_ADC_MspInit+0x1cc>)
 8003014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003020:	2340      	movs	r3, #64	@ 0x40
 8003022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003024:	2303      	movs	r3, #3
 8003026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	4619      	mov	r1, r3
 8003032:	4853      	ldr	r0, [pc, #332]	@ (8003180 <HAL_ADC_MspInit+0x1d0>)
 8003034:	f006 feae 	bl	8009d94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003038:	4b52      	ldr	r3, [pc, #328]	@ (8003184 <HAL_ADC_MspInit+0x1d4>)
 800303a:	4a53      	ldr	r2, [pc, #332]	@ (8003188 <HAL_ADC_MspInit+0x1d8>)
 800303c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800303e:	4b51      	ldr	r3, [pc, #324]	@ (8003184 <HAL_ADC_MspInit+0x1d4>)
 8003040:	2209      	movs	r2, #9
 8003042:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003044:	4b4f      	ldr	r3, [pc, #316]	@ (8003184 <HAL_ADC_MspInit+0x1d4>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800304a:	4b4e      	ldr	r3, [pc, #312]	@ (8003184 <HAL_ADC_MspInit+0x1d4>)
 800304c:	2200      	movs	r2, #0
 800304e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003050:	4b4c      	ldr	r3, [pc, #304]	@ (8003184 <HAL_ADC_MspInit+0x1d4>)
 8003052:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003056:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003058:	4b4a      	ldr	r3, [pc, #296]	@ (8003184 <HAL_ADC_MspInit+0x1d4>)
 800305a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800305e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003060:	4b48      	ldr	r3, [pc, #288]	@ (8003184 <HAL_ADC_MspInit+0x1d4>)
 8003062:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003066:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003068:	4b46      	ldr	r3, [pc, #280]	@ (8003184 <HAL_ADC_MspInit+0x1d4>)
 800306a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800306e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003070:	4b44      	ldr	r3, [pc, #272]	@ (8003184 <HAL_ADC_MspInit+0x1d4>)
 8003072:	2200      	movs	r2, #0
 8003074:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003076:	4b43      	ldr	r3, [pc, #268]	@ (8003184 <HAL_ADC_MspInit+0x1d4>)
 8003078:	2200      	movs	r2, #0
 800307a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800307c:	4841      	ldr	r0, [pc, #260]	@ (8003184 <HAL_ADC_MspInit+0x1d4>)
 800307e:	f004 fa97 	bl	80075b0 <HAL_DMA_Init>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8003088:	f7ff ff08 	bl	8002e9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a3d      	ldr	r2, [pc, #244]	@ (8003184 <HAL_ADC_MspInit+0x1d4>)
 8003090:	659a      	str	r2, [r3, #88]	@ 0x58
 8003092:	4a3c      	ldr	r2, [pc, #240]	@ (8003184 <HAL_ADC_MspInit+0x1d4>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003098:	e067      	b.n	800316a <HAL_ADC_MspInit+0x1ba>
  else if(hadc->Instance==ADC2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a3b      	ldr	r2, [pc, #236]	@ (800318c <HAL_ADC_MspInit+0x1dc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d162      	bne.n	800316a <HAL_ADC_MspInit+0x1ba>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80030a4:	4b34      	ldr	r3, [pc, #208]	@ (8003178 <HAL_ADC_MspInit+0x1c8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3301      	adds	r3, #1
 80030aa:	4a33      	ldr	r2, [pc, #204]	@ (8003178 <HAL_ADC_MspInit+0x1c8>)
 80030ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80030ae:	4b32      	ldr	r3, [pc, #200]	@ (8003178 <HAL_ADC_MspInit+0x1c8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d10e      	bne.n	80030d4 <HAL_ADC_MspInit+0x124>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80030b6:	4b31      	ldr	r3, [pc, #196]	@ (800317c <HAL_ADC_MspInit+0x1cc>)
 80030b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030bc:	4a2f      	ldr	r2, [pc, #188]	@ (800317c <HAL_ADC_MspInit+0x1cc>)
 80030be:	f043 0320 	orr.w	r3, r3, #32
 80030c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030c6:	4b2d      	ldr	r3, [pc, #180]	@ (800317c <HAL_ADC_MspInit+0x1cc>)
 80030c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d4:	4b29      	ldr	r3, [pc, #164]	@ (800317c <HAL_ADC_MspInit+0x1cc>)
 80030d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030da:	4a28      	ldr	r2, [pc, #160]	@ (800317c <HAL_ADC_MspInit+0x1cc>)
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030e4:	4b25      	ldr	r3, [pc, #148]	@ (800317c <HAL_ADC_MspInit+0x1cc>)
 80030e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030f2:	2310      	movs	r3, #16
 80030f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030f6:	2303      	movs	r3, #3
 80030f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030fe:	f107 031c 	add.w	r3, r7, #28
 8003102:	4619      	mov	r1, r3
 8003104:	4822      	ldr	r0, [pc, #136]	@ (8003190 <HAL_ADC_MspInit+0x1e0>)
 8003106:	f006 fe45 	bl	8009d94 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 800310a:	4b22      	ldr	r3, [pc, #136]	@ (8003194 <HAL_ADC_MspInit+0x1e4>)
 800310c:	4a22      	ldr	r2, [pc, #136]	@ (8003198 <HAL_ADC_MspInit+0x1e8>)
 800310e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003110:	4b20      	ldr	r3, [pc, #128]	@ (8003194 <HAL_ADC_MspInit+0x1e4>)
 8003112:	220a      	movs	r2, #10
 8003114:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003116:	4b1f      	ldr	r3, [pc, #124]	@ (8003194 <HAL_ADC_MspInit+0x1e4>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800311c:	4b1d      	ldr	r3, [pc, #116]	@ (8003194 <HAL_ADC_MspInit+0x1e4>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003122:	4b1c      	ldr	r3, [pc, #112]	@ (8003194 <HAL_ADC_MspInit+0x1e4>)
 8003124:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003128:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800312a:	4b1a      	ldr	r3, [pc, #104]	@ (8003194 <HAL_ADC_MspInit+0x1e4>)
 800312c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003130:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003132:	4b18      	ldr	r3, [pc, #96]	@ (8003194 <HAL_ADC_MspInit+0x1e4>)
 8003134:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003138:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800313a:	4b16      	ldr	r3, [pc, #88]	@ (8003194 <HAL_ADC_MspInit+0x1e4>)
 800313c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003140:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003142:	4b14      	ldr	r3, [pc, #80]	@ (8003194 <HAL_ADC_MspInit+0x1e4>)
 8003144:	2200      	movs	r2, #0
 8003146:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003148:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <HAL_ADC_MspInit+0x1e4>)
 800314a:	2200      	movs	r2, #0
 800314c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800314e:	4811      	ldr	r0, [pc, #68]	@ (8003194 <HAL_ADC_MspInit+0x1e4>)
 8003150:	f004 fa2e 	bl	80075b0 <HAL_DMA_Init>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 800315a:	f7ff fe9f 	bl	8002e9c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a0c      	ldr	r2, [pc, #48]	@ (8003194 <HAL_ADC_MspInit+0x1e4>)
 8003162:	659a      	str	r2, [r3, #88]	@ 0x58
 8003164:	4a0b      	ldr	r2, [pc, #44]	@ (8003194 <HAL_ADC_MspInit+0x1e4>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800316a:	bf00      	nop
 800316c:	3730      	adds	r7, #48	@ 0x30
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40022000 	.word	0x40022000
 8003178:	2400b308 	.word	0x2400b308
 800317c:	58024400 	.word	0x58024400
 8003180:	58020000 	.word	0x58020000
 8003184:	2400b154 	.word	0x2400b154
 8003188:	40020010 	.word	0x40020010
 800318c:	40022100 	.word	0x40022100
 8003190:	58020800 	.word	0x58020800
 8003194:	2400b1cc 	.word	0x2400b1cc
 8003198:	40020028 	.word	0x40020028

0800319c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	@ 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1c      	ldr	r2, [pc, #112]	@ (800322c <HAL_DAC_MspInit+0x90>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d131      	bne.n	8003222 <HAL_DAC_MspInit+0x86>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80031be:	4b1c      	ldr	r3, [pc, #112]	@ (8003230 <HAL_DAC_MspInit+0x94>)
 80031c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003230 <HAL_DAC_MspInit+0x94>)
 80031c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80031ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031ce:	4b18      	ldr	r3, [pc, #96]	@ (8003230 <HAL_DAC_MspInit+0x94>)
 80031d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031dc:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <HAL_DAC_MspInit+0x94>)
 80031de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e2:	4a13      	ldr	r2, [pc, #76]	@ (8003230 <HAL_DAC_MspInit+0x94>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031ec:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <HAL_DAC_MspInit+0x94>)
 80031ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80031fa:	2330      	movs	r3, #48	@ 0x30
 80031fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031fe:	2303      	movs	r3, #3
 8003200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003206:	f107 0314 	add.w	r3, r7, #20
 800320a:	4619      	mov	r1, r3
 800320c:	4809      	ldr	r0, [pc, #36]	@ (8003234 <HAL_DAC_MspInit+0x98>)
 800320e:	f006 fdc1 	bl	8009d94 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	2036      	movs	r0, #54	@ 0x36
 8003218:	f003 ffb5 	bl	8007186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800321c:	2036      	movs	r0, #54	@ 0x36
 800321e:	f003 ffcc 	bl	80071ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8003222:	bf00      	nop
 8003224:	3728      	adds	r7, #40	@ 0x28
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40007400 	.word	0x40007400
 8003230:	58024400 	.word	0x58024400
 8003234:	58020000 	.word	0x58020000

08003238 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	@ 0x30
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a3d      	ldr	r2, [pc, #244]	@ (800334c <HAL_SPI_MspInit+0x114>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d12f      	bne.n	80032ba <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800325a:	4b3d      	ldr	r3, [pc, #244]	@ (8003350 <HAL_SPI_MspInit+0x118>)
 800325c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003260:	4a3b      	ldr	r2, [pc, #236]	@ (8003350 <HAL_SPI_MspInit+0x118>)
 8003262:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003266:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800326a:	4b39      	ldr	r3, [pc, #228]	@ (8003350 <HAL_SPI_MspInit+0x118>)
 800326c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003278:	4b35      	ldr	r3, [pc, #212]	@ (8003350 <HAL_SPI_MspInit+0x118>)
 800327a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800327e:	4a34      	ldr	r2, [pc, #208]	@ (8003350 <HAL_SPI_MspInit+0x118>)
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003288:	4b31      	ldr	r3, [pc, #196]	@ (8003350 <HAL_SPI_MspInit+0x118>)
 800328a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	697b      	ldr	r3, [r7, #20]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003296:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800329a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329c:	2302      	movs	r3, #2
 800329e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032a0:	2301      	movs	r3, #1
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a4:	2303      	movs	r3, #3
 80032a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032a8:	2305      	movs	r3, #5
 80032aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ac:	f107 031c 	add.w	r3, r7, #28
 80032b0:	4619      	mov	r1, r3
 80032b2:	4828      	ldr	r0, [pc, #160]	@ (8003354 <HAL_SPI_MspInit+0x11c>)
 80032b4:	f006 fd6e 	bl	8009d94 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 80032b8:	e044      	b.n	8003344 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI4)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a26      	ldr	r2, [pc, #152]	@ (8003358 <HAL_SPI_MspInit+0x120>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d13f      	bne.n	8003344 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80032c4:	4b22      	ldr	r3, [pc, #136]	@ (8003350 <HAL_SPI_MspInit+0x118>)
 80032c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032ca:	4a21      	ldr	r2, [pc, #132]	@ (8003350 <HAL_SPI_MspInit+0x118>)
 80032cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80032d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003350 <HAL_SPI_MspInit+0x118>)
 80032d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003350 <HAL_SPI_MspInit+0x118>)
 80032e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032e8:	4a19      	ldr	r2, [pc, #100]	@ (8003350 <HAL_SPI_MspInit+0x118>)
 80032ea:	f043 0310 	orr.w	r3, r3, #16
 80032ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032f2:	4b17      	ldr	r3, [pc, #92]	@ (8003350 <HAL_SPI_MspInit+0x118>)
 80032f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin;
 8003300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003306:	2302      	movs	r3, #2
 8003308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330a:	2300      	movs	r3, #0
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800330e:	2302      	movs	r3, #2
 8003310:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003312:	2305      	movs	r3, #5
 8003314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 8003316:	f107 031c 	add.w	r3, r7, #28
 800331a:	4619      	mov	r1, r3
 800331c:	480f      	ldr	r0, [pc, #60]	@ (800335c <HAL_SPI_MspInit+0x124>)
 800331e:	f006 fd39 	bl	8009d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_SDA_Pin;
 8003322:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003334:	2305      	movs	r3, #5
 8003336:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	4619      	mov	r1, r3
 800333e:	4807      	ldr	r0, [pc, #28]	@ (800335c <HAL_SPI_MspInit+0x124>)
 8003340:	f006 fd28 	bl	8009d94 <HAL_GPIO_Init>
}
 8003344:	bf00      	nop
 8003346:	3730      	adds	r7, #48	@ 0x30
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40003800 	.word	0x40003800
 8003350:	58024400 	.word	0x58024400
 8003354:	58020400 	.word	0x58020400
 8003358:	40013400 	.word	0x40013400
 800335c:	58021000 	.word	0x58021000

08003360 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0b      	ldr	r2, [pc, #44]	@ (800339c <HAL_TIM_PWM_MspInit+0x3c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10e      	bne.n	8003390 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003372:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <HAL_TIM_PWM_MspInit+0x40>)
 8003374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003378:	4a09      	ldr	r2, [pc, #36]	@ (80033a0 <HAL_TIM_PWM_MspInit+0x40>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003382:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <HAL_TIM_PWM_MspInit+0x40>)
 8003384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40010000 	.word	0x40010000
 80033a0:	58024400 	.word	0x58024400

080033a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b4:	d10f      	bne.n	80033d6 <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033b6:	4b2d      	ldr	r3, [pc, #180]	@ (800346c <HAL_TIM_Base_MspInit+0xc8>)
 80033b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033bc:	4a2b      	ldr	r2, [pc, #172]	@ (800346c <HAL_TIM_Base_MspInit+0xc8>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033c6:	4b29      	ldr	r3, [pc, #164]	@ (800346c <HAL_TIM_Base_MspInit+0xc8>)
 80033c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM15_MspInit 1 */

    /* USER CODE END TIM15_MspInit 1 */
  }

}
 80033d4:	e045      	b.n	8003462 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM3)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a25      	ldr	r2, [pc, #148]	@ (8003470 <HAL_TIM_Base_MspInit+0xcc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d10f      	bne.n	8003400 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033e0:	4b22      	ldr	r3, [pc, #136]	@ (800346c <HAL_TIM_Base_MspInit+0xc8>)
 80033e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033e6:	4a21      	ldr	r2, [pc, #132]	@ (800346c <HAL_TIM_Base_MspInit+0xc8>)
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033f0:	4b1e      	ldr	r3, [pc, #120]	@ (800346c <HAL_TIM_Base_MspInit+0xc8>)
 80033f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]
}
 80033fe:	e030      	b.n	8003462 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM6)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1b      	ldr	r2, [pc, #108]	@ (8003474 <HAL_TIM_Base_MspInit+0xd0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d117      	bne.n	800343a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800340a:	4b18      	ldr	r3, [pc, #96]	@ (800346c <HAL_TIM_Base_MspInit+0xc8>)
 800340c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003410:	4a16      	ldr	r2, [pc, #88]	@ (800346c <HAL_TIM_Base_MspInit+0xc8>)
 8003412:	f043 0310 	orr.w	r3, r3, #16
 8003416:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800341a:	4b14      	ldr	r3, [pc, #80]	@ (800346c <HAL_TIM_Base_MspInit+0xc8>)
 800341c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003428:	2200      	movs	r2, #0
 800342a:	2100      	movs	r1, #0
 800342c:	2036      	movs	r0, #54	@ 0x36
 800342e:	f003 feaa 	bl	8007186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003432:	2036      	movs	r0, #54	@ 0x36
 8003434:	f003 fec1 	bl	80071ba <HAL_NVIC_EnableIRQ>
}
 8003438:	e013      	b.n	8003462 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM15)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a0e      	ldr	r2, [pc, #56]	@ (8003478 <HAL_TIM_Base_MspInit+0xd4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d10e      	bne.n	8003462 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003444:	4b09      	ldr	r3, [pc, #36]	@ (800346c <HAL_TIM_Base_MspInit+0xc8>)
 8003446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800344a:	4a08      	ldr	r2, [pc, #32]	@ (800346c <HAL_TIM_Base_MspInit+0xc8>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003450:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003454:	4b05      	ldr	r3, [pc, #20]	@ (800346c <HAL_TIM_Base_MspInit+0xc8>)
 8003456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800345a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
}
 8003462:	bf00      	nop
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	58024400 	.word	0x58024400
 8003470:	40000400 	.word	0x40000400
 8003474:	40001000 	.word	0x40001000
 8003478:	40014000 	.word	0x40014000

0800347c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08e      	sub	sp, #56	@ 0x38
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a69      	ldr	r2, [pc, #420]	@ (8003640 <HAL_TIM_MspPostInit+0x1c4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d120      	bne.n	80034e0 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800349e:	4b69      	ldr	r3, [pc, #420]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 80034a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034a4:	4a67      	ldr	r2, [pc, #412]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 80034a6:	f043 0310 	orr.w	r3, r3, #16
 80034aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034ae:	4b65      	ldr	r3, [pc, #404]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 80034b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	623b      	str	r3, [r7, #32]
 80034ba:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = LCD_Led_Pin;
 80034bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ca:	2303      	movs	r3, #3
 80034cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_Led_GPIO_Port, &GPIO_InitStruct);
 80034d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034d6:	4619      	mov	r1, r3
 80034d8:	485b      	ldr	r0, [pc, #364]	@ (8003648 <HAL_TIM_MspPostInit+0x1cc>)
 80034da:	f006 fc5b 	bl	8009d94 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80034de:	e0ab      	b.n	8003638 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034e8:	d11f      	bne.n	800352a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ea:	4b56      	ldr	r3, [pc, #344]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 80034ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034f0:	4a54      	ldr	r2, [pc, #336]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034fa:	4b52      	ldr	r3, [pc, #328]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 80034fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003508:	2307      	movs	r3, #7
 800350a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	2302      	movs	r3, #2
 800350e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003514:	2303      	movs	r3, #3
 8003516:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003518:	2301      	movs	r3, #1
 800351a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003520:	4619      	mov	r1, r3
 8003522:	484a      	ldr	r0, [pc, #296]	@ (800364c <HAL_TIM_MspPostInit+0x1d0>)
 8003524:	f006 fc36 	bl	8009d94 <HAL_GPIO_Init>
}
 8003528:	e086      	b.n	8003638 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM3)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a48      	ldr	r2, [pc, #288]	@ (8003650 <HAL_TIM_MspPostInit+0x1d4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d15d      	bne.n	80035f0 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003534:	4b43      	ldr	r3, [pc, #268]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 8003536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800353a:	4a42      	ldr	r2, [pc, #264]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003544:	4b3f      	ldr	r3, [pc, #252]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 8003546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	61bb      	str	r3, [r7, #24]
 8003550:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003552:	4b3c      	ldr	r3, [pc, #240]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 8003554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003558:	4a3a      	ldr	r2, [pc, #232]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 800355a:	f043 0302 	orr.w	r3, r3, #2
 800355e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003562:	4b38      	ldr	r3, [pc, #224]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 8003564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003570:	4b34      	ldr	r3, [pc, #208]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 8003572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003576:	4a33      	ldr	r2, [pc, #204]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 8003578:	f043 0304 	orr.w	r3, r3, #4
 800357c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003580:	4b30      	ldr	r3, [pc, #192]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 8003582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800358e:	2380      	movs	r3, #128	@ 0x80
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	2302      	movs	r3, #2
 8003594:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359a:	2300      	movs	r3, #0
 800359c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800359e:	2302      	movs	r3, #2
 80035a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035a6:	4619      	mov	r1, r3
 80035a8:	4828      	ldr	r0, [pc, #160]	@ (800364c <HAL_TIM_MspPostInit+0x1d0>)
 80035aa:	f006 fbf3 	bl	8009d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035ae:	2301      	movs	r3, #1
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b2:	2302      	movs	r3, #2
 80035b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ba:	2300      	movs	r3, #0
 80035bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035be:	2302      	movs	r3, #2
 80035c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035c6:	4619      	mov	r1, r3
 80035c8:	4822      	ldr	r0, [pc, #136]	@ (8003654 <HAL_TIM_MspPostInit+0x1d8>)
 80035ca:	f006 fbe3 	bl	8009d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035ce:	2340      	movs	r3, #64	@ 0x40
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d2:	2302      	movs	r3, #2
 80035d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035da:	2300      	movs	r3, #0
 80035dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035de:	2302      	movs	r3, #2
 80035e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035e6:	4619      	mov	r1, r3
 80035e8:	481b      	ldr	r0, [pc, #108]	@ (8003658 <HAL_TIM_MspPostInit+0x1dc>)
 80035ea:	f006 fbd3 	bl	8009d94 <HAL_GPIO_Init>
}
 80035ee:	e023      	b.n	8003638 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM15)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a19      	ldr	r2, [pc, #100]	@ (800365c <HAL_TIM_MspPostInit+0x1e0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d11e      	bne.n	8003638 <HAL_TIM_MspPostInit+0x1bc>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035fa:	4b12      	ldr	r3, [pc, #72]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 80035fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003600:	4a10      	ldr	r2, [pc, #64]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 8003602:	f043 0310 	orr.w	r3, r3, #16
 8003606:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800360a:	4b0e      	ldr	r3, [pc, #56]	@ (8003644 <HAL_TIM_MspPostInit+0x1c8>)
 800360c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003618:	2320      	movs	r3, #32
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361c:	2302      	movs	r3, #2
 800361e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003624:	2303      	movs	r3, #3
 8003626:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003628:	2304      	movs	r3, #4
 800362a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800362c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003630:	4619      	mov	r1, r3
 8003632:	4805      	ldr	r0, [pc, #20]	@ (8003648 <HAL_TIM_MspPostInit+0x1cc>)
 8003634:	f006 fbae 	bl	8009d94 <HAL_GPIO_Init>
}
 8003638:	bf00      	nop
 800363a:	3738      	adds	r7, #56	@ 0x38
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40010000 	.word	0x40010000
 8003644:	58024400 	.word	0x58024400
 8003648:	58021000 	.word	0x58021000
 800364c:	58020000 	.word	0x58020000
 8003650:	40000400 	.word	0x40000400
 8003654:	58020400 	.word	0x58020400
 8003658:	58020800 	.word	0x58020800
 800365c:	40014000 	.word	0x40014000

08003660 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b0b8      	sub	sp, #224	@ 0xe0
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003678:	f107 0310 	add.w	r3, r7, #16
 800367c:	22b8      	movs	r2, #184	@ 0xb8
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f017 ff29 	bl	801b4d8 <memset>
  if(huart->Instance==USART1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a26      	ldr	r2, [pc, #152]	@ (8003724 <HAL_UART_MspInit+0xc4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d145      	bne.n	800371c <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003690:	f04f 0201 	mov.w	r2, #1
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036a2:	f107 0310 	add.w	r3, r7, #16
 80036a6:	4618      	mov	r0, r3
 80036a8:	f009 f836 	bl	800c718 <HAL_RCCEx_PeriphCLKConfig>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80036b2:	f7ff fbf3 	bl	8002e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003728 <HAL_UART_MspInit+0xc8>)
 80036b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003728 <HAL_UART_MspInit+0xc8>)
 80036be:	f043 0310 	orr.w	r3, r3, #16
 80036c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036c6:	4b18      	ldr	r3, [pc, #96]	@ (8003728 <HAL_UART_MspInit+0xc8>)
 80036c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d4:	4b14      	ldr	r3, [pc, #80]	@ (8003728 <HAL_UART_MspInit+0xc8>)
 80036d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036da:	4a13      	ldr	r2, [pc, #76]	@ (8003728 <HAL_UART_MspInit+0xc8>)
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036e4:	4b10      	ldr	r3, [pc, #64]	@ (8003728 <HAL_UART_MspInit+0xc8>)
 80036e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036f2:	23c0      	movs	r3, #192	@ 0xc0
 80036f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f8:	2302      	movs	r3, #2
 80036fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003704:	2303      	movs	r3, #3
 8003706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800370a:	2307      	movs	r3, #7
 800370c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003710:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003714:	4619      	mov	r1, r3
 8003716:	4805      	ldr	r0, [pc, #20]	@ (800372c <HAL_UART_MspInit+0xcc>)
 8003718:	f006 fb3c 	bl	8009d94 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800371c:	bf00      	nop
 800371e:	37e0      	adds	r7, #224	@ 0xe0
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40011000 	.word	0x40011000
 8003728:	58024400 	.word	0x58024400
 800372c:	58020400 	.word	0x58020400

08003730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <NMI_Handler+0x4>

08003738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  __asm volatile(
 800373c:	f01e 0f04 	tst.w	lr, #4
 8003740:	bf0c      	ite	eq
 8003742:	f3ef 8008 	mrseq	r0, MSP
 8003746:	f3ef 8009 	mrsne	r0, PSP
 800374a:	f000 b947 	b.w	80039dc <HardFault_Capture>
    "mrseq r0, msp         \n"
    "mrsne r0, psp         \n"
    "b HardFault_Capture   \n"
  );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800374e:	bf00      	nop
 8003750:	e7fd      	b.n	800374e <HardFault_Handler+0x16>

08003752 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003752:	b480      	push	{r7}
 8003754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003756:	bf00      	nop
 8003758:	e7fd      	b.n	8003756 <MemManage_Handler+0x4>

0800375a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800375e:	bf00      	nop
 8003760:	e7fd      	b.n	800375e <BusFault_Handler+0x4>

08003762 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003766:	bf00      	nop
 8003768:	e7fd      	b.n	8003766 <UsageFault_Handler+0x4>

0800376a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern volatile uint32_t systick_heartbeat; // локальное extern для совместимости
  systick_heartbeat++; // инкремент счётчика
 8003798:	4b04      	ldr	r3, [pc, #16]	@ (80037ac <SysTick_Handler+0x18>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	4a03      	ldr	r2, [pc, #12]	@ (80037ac <SysTick_Handler+0x18>)
 80037a0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037a2:	f001 fbcf 	bl	8004f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	2400b26c 	.word	0x2400b26c

080037b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  /* minimized: no UART in IRQ */
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037b4:	4802      	ldr	r0, [pc, #8]	@ (80037c0 <DMA1_Stream0_IRQHandler+0x10>)
 80037b6:	f004 ffdb 	bl	8008770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	2400b154 	.word	0x2400b154

080037c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  /* minimized: no UART in IRQ */
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80037c8:	4802      	ldr	r0, [pc, #8]	@ (80037d4 <DMA1_Stream1_IRQHandler+0x10>)
 80037ca:	f004 ffd1 	bl	8008770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	2400b1cc 	.word	0x2400b1cc

080037d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037dc:	4802      	ldr	r0, [pc, #8]	@ (80037e8 <TIM2_IRQHandler+0x10>)
 80037de:	f00c fa4b 	bl	800fc78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	2400af7c 	.word	0x2400af7c

080037ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  /* minimized: no UART in IRQ */
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80037f0:	4803      	ldr	r0, [pc, #12]	@ (8003800 <TIM6_DAC_IRQHandler+0x14>)
 80037f2:	f003 fd2c 	bl	800724e <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80037f6:	4803      	ldr	r0, [pc, #12]	@ (8003804 <TIM6_DAC_IRQHandler+0x18>)
 80037f8:	f00c fa3e 	bl	800fc78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037fc:	bf00      	nop
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	2400b140 	.word	0x2400b140
 8003804:	2400b014 	.word	0x2400b014

08003808 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */
  /* Счётчик вызовов ISR для диагностики */
  usb_isr_counter++;
 800380c:	4b04      	ldr	r3, [pc, #16]	@ (8003820 <OTG_HS_IRQHandler+0x18>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3301      	adds	r3, #1
 8003812:	4a03      	ldr	r2, [pc, #12]	@ (8003820 <OTG_HS_IRQHandler+0x18>)
 8003814:	6013      	str	r3, [r2, #0]
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003816:	4803      	ldr	r0, [pc, #12]	@ (8003824 <OTG_HS_IRQHandler+0x1c>)
 8003818:	f006 fdd8 	bl	800a3cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800381c:	bf00      	nop
 800381e:	bd80      	pop	{r7, pc}
 8003820:	2400b30c 	.word	0x2400b30c
 8003824:	2401bcd0 	.word	0x2401bcd0

08003828 <hf_hex>:

/* USER CODE BEGIN 1 */
// Вспомогательная функция форматирования 32-битного значения в HEX (8 символов)
static void hf_hex(char *dst, uint32_t v){
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
    static const char *hx = "0123456789ABCDEF";
    for(int i=0;i<8;i++){ dst[7-i] = hx[v & 0xF]; v >>= 4; }
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e013      	b.n	8003860 <hf_hex+0x38>
 8003838:	4b10      	ldr	r3, [pc, #64]	@ (800387c <hf_hex+0x54>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	441a      	add	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f1c3 0307 	rsb	r3, r3, #7
 800384a:	4619      	mov	r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	440b      	add	r3, r1
 8003850:	7812      	ldrb	r2, [r2, #0]
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3301      	adds	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b07      	cmp	r3, #7
 8003864:	dde8      	ble.n	8003838 <hf_hex+0x10>
    dst[8] = 0;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3308      	adds	r3, #8
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
}
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	24000014 	.word	0x24000014

08003880 <hf_print_line>:
// Печать регистра на заданной строке: label + ':' + hex
static void hf_print_line(uint16_t y, const char *label, uint32_t val){
 8003880:	b580      	push	{r7, lr}
 8003882:	b090      	sub	sp, #64	@ 0x40
 8003884:	af02      	add	r7, sp, #8
 8003886:	4603      	mov	r3, r0
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	81fb      	strh	r3, [r7, #14]
    char buf[20];
    char hex[9];
    hf_hex(hex,val);
 800388e:	f107 0310 	add.w	r3, r7, #16
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ffc7 	bl	8003828 <hf_hex>
    // Формат: LBL:XXXXXXXX
    int i=0; while(label[i] && i<5){ buf[i]=label[i]; i++; }
 800389a:	2300      	movs	r3, #0
 800389c:	637b      	str	r3, [r7, #52]	@ 0x34
 800389e:	e00c      	b.n	80038ba <hf_print_line+0x3a>
 80038a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	4413      	add	r3, r2
 80038a6:	7819      	ldrb	r1, [r3, #0]
 80038a8:	f107 021c 	add.w	r2, r7, #28
 80038ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ae:	4413      	add	r3, r2
 80038b0:	460a      	mov	r2, r1
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b6:	3301      	adds	r3, #1
 80038b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	4413      	add	r3, r2
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <hf_print_line+0x4c>
 80038c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	dde9      	ble.n	80038a0 <hf_print_line+0x20>
    buf[i++]=':'; for(int j=0;j<8 && i<sizeof(buf)-1;j++) buf[i++]=hex[j];
 80038cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80038d2:	3338      	adds	r3, #56	@ 0x38
 80038d4:	443b      	add	r3, r7
 80038d6:	223a      	movs	r2, #58	@ 0x3a
 80038d8:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80038dc:	2300      	movs	r3, #0
 80038de:	633b      	str	r3, [r7, #48]	@ 0x30
 80038e0:	e00e      	b.n	8003900 <hf_print_line+0x80>
 80038e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	637a      	str	r2, [r7, #52]	@ 0x34
 80038e8:	f107 0110 	add.w	r1, r7, #16
 80038ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ee:	440a      	add	r2, r1
 80038f0:	7812      	ldrb	r2, [r2, #0]
 80038f2:	3338      	adds	r3, #56	@ 0x38
 80038f4:	443b      	add	r3, r7
 80038f6:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80038fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fc:	3301      	adds	r3, #1
 80038fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003902:	2b07      	cmp	r3, #7
 8003904:	dc02      	bgt.n	800390c <hf_print_line+0x8c>
 8003906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003908:	2b12      	cmp	r3, #18
 800390a:	d9ea      	bls.n	80038e2 <hf_print_line+0x62>
    buf[i]=0;
 800390c:	f107 021c 	add.w	r2, r7, #28
 8003910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003912:	4413      	add	r3, r2
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
    LCD_ShowString_Size(0,y,buf,12,WHITE,BLACK);
 8003918:	f107 021c 	add.w	r2, r7, #28
 800391c:	89f9      	ldrh	r1, [r7, #14]
 800391e:	2300      	movs	r3, #0
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	230c      	movs	r3, #12
 800392a:	2000      	movs	r0, #0
 800392c:	f001 f820 	bl	8004970 <LCD_ShowString_Size>
}
 8003930:	bf00      	nop
 8003932:	3738      	adds	r7, #56	@ 0x38
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HardFault_Display>:
static void HardFault_Display(void){
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af02      	add	r7, sp, #8
    // очистим область
    LCD_FillRect(0,0,160,80,BLACK);
 800393e:	2300      	movs	r3, #0
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	2350      	movs	r3, #80	@ 0x50
 8003944:	22a0      	movs	r2, #160	@ 0xa0
 8003946:	2100      	movs	r1, #0
 8003948:	2000      	movs	r0, #0
 800394a:	f001 f85b 	bl	8004a04 <LCD_FillRect>
    LCD_ShowString_Size(0,0,"HARDFAULT",12,RED,BLACK);
 800394e:	2300      	movs	r3, #0
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	230c      	movs	r3, #12
 800395a:	4a15      	ldr	r2, [pc, #84]	@ (80039b0 <HardFault_Display+0x78>)
 800395c:	2100      	movs	r1, #0
 800395e:	2000      	movs	r0, #0
 8003960:	f001 f806 	bl	8004970 <LCD_ShowString_Size>
    hf_print_line(12,"PC",hardfault_pc);
 8003964:	4b13      	ldr	r3, [pc, #76]	@ (80039b4 <HardFault_Display+0x7c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	4913      	ldr	r1, [pc, #76]	@ (80039b8 <HardFault_Display+0x80>)
 800396c:	200c      	movs	r0, #12
 800396e:	f7ff ff87 	bl	8003880 <hf_print_line>
    hf_print_line(24,"LR",hardfault_lr);
 8003972:	4b12      	ldr	r3, [pc, #72]	@ (80039bc <HardFault_Display+0x84>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	4911      	ldr	r1, [pc, #68]	@ (80039c0 <HardFault_Display+0x88>)
 800397a:	2018      	movs	r0, #24
 800397c:	f7ff ff80 	bl	8003880 <hf_print_line>
    hf_print_line(36,"CFSR",hardfault_cfsr);
 8003980:	4b10      	ldr	r3, [pc, #64]	@ (80039c4 <HardFault_Display+0x8c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	4910      	ldr	r1, [pc, #64]	@ (80039c8 <HardFault_Display+0x90>)
 8003988:	2024      	movs	r0, #36	@ 0x24
 800398a:	f7ff ff79 	bl	8003880 <hf_print_line>
    hf_print_line(48,"BFAR",hardfault_bfar);
 800398e:	4b0f      	ldr	r3, [pc, #60]	@ (80039cc <HardFault_Display+0x94>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	490e      	ldr	r1, [pc, #56]	@ (80039d0 <HardFault_Display+0x98>)
 8003996:	2030      	movs	r0, #48	@ 0x30
 8003998:	f7ff ff72 	bl	8003880 <hf_print_line>
    hf_print_line(60,"HFSR",hardfault_hfsr);
 800399c:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <HardFault_Display+0x9c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	490d      	ldr	r1, [pc, #52]	@ (80039d8 <HardFault_Display+0xa0>)
 80039a4:	203c      	movs	r0, #60	@ 0x3c
 80039a6:	f7ff ff6b 	bl	8003880 <hf_print_line>
}
 80039aa:	bf00      	nop
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	0801cde8 	.word	0x0801cde8
 80039b4:	2400b328 	.word	0x2400b328
 80039b8:	0801cdf4 	.word	0x0801cdf4
 80039bc:	2400b324 	.word	0x2400b324
 80039c0:	0801cdf8 	.word	0x0801cdf8
 80039c4:	2400b330 	.word	0x2400b330
 80039c8:	0801cdfc 	.word	0x0801cdfc
 80039cc:	2400b338 	.word	0x2400b338
 80039d0:	0801ce04 	.word	0x0801ce04
 80039d4:	2400b334 	.word	0x2400b334
 80039d8:	0801ce0c 	.word	0x0801ce0c

080039dc <HardFault_Capture>:
// Реализация захвата контекста HardFault
void HardFault_Capture(uint32_t *stack_addr)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  hardfault_r0  = stack_addr[0];
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a21      	ldr	r2, [pc, #132]	@ (8003a70 <HardFault_Capture+0x94>)
 80039ea:	6013      	str	r3, [r2, #0]
  hardfault_r1  = stack_addr[1];
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a20      	ldr	r2, [pc, #128]	@ (8003a74 <HardFault_Capture+0x98>)
 80039f2:	6013      	str	r3, [r2, #0]
  hardfault_r2  = stack_addr[2];
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003a78 <HardFault_Capture+0x9c>)
 80039fa:	6013      	str	r3, [r2, #0]
  hardfault_r3  = stack_addr[3];
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a1e      	ldr	r2, [pc, #120]	@ (8003a7c <HardFault_Capture+0xa0>)
 8003a02:	6013      	str	r3, [r2, #0]
  hardfault_r12 = stack_addr[4];
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	4a1d      	ldr	r2, [pc, #116]	@ (8003a80 <HardFault_Capture+0xa4>)
 8003a0a:	6013      	str	r3, [r2, #0]
  hardfault_lr  = stack_addr[5];
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	4a1c      	ldr	r2, [pc, #112]	@ (8003a84 <HardFault_Capture+0xa8>)
 8003a12:	6013      	str	r3, [r2, #0]
  hardfault_pc  = stack_addr[6];
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	4a1b      	ldr	r2, [pc, #108]	@ (8003a88 <HardFault_Capture+0xac>)
 8003a1a:	6013      	str	r3, [r2, #0]
  hardfault_psr = stack_addr[7];
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	4a1a      	ldr	r2, [pc, #104]	@ (8003a8c <HardFault_Capture+0xb0>)
 8003a22:	6013      	str	r3, [r2, #0]
  // Чтение системных регистров Fault
  hardfault_cfsr = SCB->CFSR;
 8003a24:	4b1a      	ldr	r3, [pc, #104]	@ (8003a90 <HardFault_Capture+0xb4>)
 8003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a28:	4a1a      	ldr	r2, [pc, #104]	@ (8003a94 <HardFault_Capture+0xb8>)
 8003a2a:	6013      	str	r3, [r2, #0]
  hardfault_hfsr = SCB->HFSR;
 8003a2c:	4b18      	ldr	r3, [pc, #96]	@ (8003a90 <HardFault_Capture+0xb4>)
 8003a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a30:	4a19      	ldr	r2, [pc, #100]	@ (8003a98 <HardFault_Capture+0xbc>)
 8003a32:	6013      	str	r3, [r2, #0]
  hardfault_bfar = SCB->BFAR;
 8003a34:	4b16      	ldr	r3, [pc, #88]	@ (8003a90 <HardFault_Capture+0xb4>)
 8003a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a38:	4a18      	ldr	r2, [pc, #96]	@ (8003a9c <HardFault_Capture+0xc0>)
 8003a3a:	6013      	str	r3, [r2, #0]
  hardfault_mmfar= SCB->MMFAR;
 8003a3c:	4b14      	ldr	r3, [pc, #80]	@ (8003a90 <HardFault_Capture+0xb4>)
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a40:	4a17      	ldr	r2, [pc, #92]	@ (8003aa0 <HardFault_Capture+0xc4>)
 8003a42:	6013      	str	r3, [r2, #0]
  hardfault_active = 1;
 8003a44:	4b17      	ldr	r3, [pc, #92]	@ (8003aa4 <HardFault_Capture+0xc8>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
  // Пытаемся вывести на LCD (если инициализирован). Даже если нет — SPI просто не даст эффекта.
  HardFault_Display();
 8003a4a:	f7ff ff75 	bl	8003938 <HardFault_Display>
  // Мигание LED для индикации HardFault
  while(1){
    HAL_GPIO_TogglePin(Led_Test_GPIO_Port, Led_Test_Pin);
 8003a4e:	2108      	movs	r1, #8
 8003a50:	4815      	ldr	r0, [pc, #84]	@ (8003aa8 <HardFault_Capture+0xcc>)
 8003a52:	f006 fb60 	bl	800a116 <HAL_GPIO_TogglePin>
    for(volatile uint32_t d=0; d<500000; ++d){ __NOP(); }
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e003      	b.n	8003a64 <HardFault_Capture+0x88>
 8003a5c:	bf00      	nop
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3301      	adds	r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a11      	ldr	r2, [pc, #68]	@ (8003aac <HardFault_Capture+0xd0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d9f7      	bls.n	8003a5c <HardFault_Capture+0x80>
    HAL_GPIO_TogglePin(Led_Test_GPIO_Port, Led_Test_Pin);
 8003a6c:	e7ef      	b.n	8003a4e <HardFault_Capture+0x72>
 8003a6e:	bf00      	nop
 8003a70:	2400b310 	.word	0x2400b310
 8003a74:	2400b314 	.word	0x2400b314
 8003a78:	2400b318 	.word	0x2400b318
 8003a7c:	2400b31c 	.word	0x2400b31c
 8003a80:	2400b320 	.word	0x2400b320
 8003a84:	2400b324 	.word	0x2400b324
 8003a88:	2400b328 	.word	0x2400b328
 8003a8c:	2400b32c 	.word	0x2400b32c
 8003a90:	e000ed00 	.word	0xe000ed00
 8003a94:	2400b330 	.word	0x2400b330
 8003a98:	2400b334 	.word	0x2400b334
 8003a9c:	2400b338 	.word	0x2400b338
 8003aa0:	2400b33c 	.word	0x2400b33c
 8003aa4:	2400b340 	.word	0x2400b340
 8003aa8:	58021000 	.word	0x58021000
 8003aac:	0007a11f 	.word	0x0007a11f

08003ab0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	e00a      	b.n	8003ad8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ac2:	f3af 8000 	nop.w
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	60ba      	str	r2, [r7, #8]
 8003ace:	b2ca      	uxtb	r2, r1
 8003ad0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	dbf0      	blt.n	8003ac2 <_read+0x12>
  }

  return len;
 8003ae0:	687b      	ldr	r3, [r7, #4]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e009      	b.n	8003b10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	60ba      	str	r2, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 f80d 	bl	8003b24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	dbf1      	blt.n	8003afc <_write+0x12>
  }
  return len;
 8003b18:	687b      	ldr	r3, [r7, #4]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <__io_putchar>:

/* Provide __io_putchar to send characters over USART1 */
int __io_putchar(int ch)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint8_t c = (uint8_t)ch;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	73fb      	strb	r3, [r7, #15]
  /* Transmit in blocking mode; small timeout is OK for logs */
  (void)HAL_UART_Transmit(&huart1, &c, 1, 10);
 8003b32:	f107 010f 	add.w	r1, r7, #15
 8003b36:	230a      	movs	r3, #10
 8003b38:	2201      	movs	r2, #1
 8003b3a:	4804      	ldr	r0, [pc, #16]	@ (8003b4c <__io_putchar+0x28>)
 8003b3c:	f00d fae0 	bl	8011100 <HAL_UART_Transmit>
  return ch;
 8003b40:	687b      	ldr	r3, [r7, #4]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	2400b0ac 	.word	0x2400b0ac

08003b50 <_close>:

int _close(int file)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b78:	605a      	str	r2, [r3, #4]
  return 0;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <_isatty>:

int _isatty(int file)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b90:	2301      	movs	r3, #1
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bc0:	4a14      	ldr	r2, [pc, #80]	@ (8003c14 <_sbrk+0x5c>)
 8003bc2:	4b15      	ldr	r3, [pc, #84]	@ (8003c18 <_sbrk+0x60>)
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bcc:	4b13      	ldr	r3, [pc, #76]	@ (8003c1c <_sbrk+0x64>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bd4:	4b11      	ldr	r3, [pc, #68]	@ (8003c1c <_sbrk+0x64>)
 8003bd6:	4a12      	ldr	r2, [pc, #72]	@ (8003c20 <_sbrk+0x68>)
 8003bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bda:	4b10      	ldr	r3, [pc, #64]	@ (8003c1c <_sbrk+0x64>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d207      	bcs.n	8003bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003be8:	f017 fcea 	bl	801b5c0 <__errno>
 8003bec:	4603      	mov	r3, r0
 8003bee:	220c      	movs	r2, #12
 8003bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf6:	e009      	b.n	8003c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bf8:	4b08      	ldr	r3, [pc, #32]	@ (8003c1c <_sbrk+0x64>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bfe:	4b07      	ldr	r3, [pc, #28]	@ (8003c1c <_sbrk+0x64>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	4a05      	ldr	r2, [pc, #20]	@ (8003c1c <_sbrk+0x64>)
 8003c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	24050000 	.word	0x24050000
 8003c18:	00000400 	.word	0x00000400
 8003c1c:	2400b344 	.word	0x2400b344
 8003c20:	2401c5c8 	.word	0x2401c5c8

08003c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c28:	4b3e      	ldr	r3, [pc, #248]	@ (8003d24 <SystemInit+0x100>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2e:	4a3d      	ldr	r2, [pc, #244]	@ (8003d24 <SystemInit+0x100>)
 8003c30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c38:	4b3b      	ldr	r3, [pc, #236]	@ (8003d28 <SystemInit+0x104>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	2b06      	cmp	r3, #6
 8003c42:	d807      	bhi.n	8003c54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c44:	4b38      	ldr	r3, [pc, #224]	@ (8003d28 <SystemInit+0x104>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f023 030f 	bic.w	r3, r3, #15
 8003c4c:	4a36      	ldr	r2, [pc, #216]	@ (8003d28 <SystemInit+0x104>)
 8003c4e:	f043 0307 	orr.w	r3, r3, #7
 8003c52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c54:	4b35      	ldr	r3, [pc, #212]	@ (8003d2c <SystemInit+0x108>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a34      	ldr	r2, [pc, #208]	@ (8003d2c <SystemInit+0x108>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c60:	4b32      	ldr	r3, [pc, #200]	@ (8003d2c <SystemInit+0x108>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003c66:	4b31      	ldr	r3, [pc, #196]	@ (8003d2c <SystemInit+0x108>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4930      	ldr	r1, [pc, #192]	@ (8003d2c <SystemInit+0x108>)
 8003c6c:	4b30      	ldr	r3, [pc, #192]	@ (8003d30 <SystemInit+0x10c>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c72:	4b2d      	ldr	r3, [pc, #180]	@ (8003d28 <SystemInit+0x104>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d28 <SystemInit+0x104>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 030f 	bic.w	r3, r3, #15
 8003c86:	4a28      	ldr	r2, [pc, #160]	@ (8003d28 <SystemInit+0x104>)
 8003c88:	f043 0307 	orr.w	r3, r3, #7
 8003c8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003c8e:	4b27      	ldr	r3, [pc, #156]	@ (8003d2c <SystemInit+0x108>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003c94:	4b25      	ldr	r3, [pc, #148]	@ (8003d2c <SystemInit+0x108>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003c9a:	4b24      	ldr	r3, [pc, #144]	@ (8003d2c <SystemInit+0x108>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003ca0:	4b22      	ldr	r3, [pc, #136]	@ (8003d2c <SystemInit+0x108>)
 8003ca2:	4a24      	ldr	r2, [pc, #144]	@ (8003d34 <SystemInit+0x110>)
 8003ca4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003ca6:	4b21      	ldr	r3, [pc, #132]	@ (8003d2c <SystemInit+0x108>)
 8003ca8:	4a23      	ldr	r2, [pc, #140]	@ (8003d38 <SystemInit+0x114>)
 8003caa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003cac:	4b1f      	ldr	r3, [pc, #124]	@ (8003d2c <SystemInit+0x108>)
 8003cae:	4a23      	ldr	r2, [pc, #140]	@ (8003d3c <SystemInit+0x118>)
 8003cb0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d2c <SystemInit+0x108>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d2c <SystemInit+0x108>)
 8003cba:	4a20      	ldr	r2, [pc, #128]	@ (8003d3c <SystemInit+0x118>)
 8003cbc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003d2c <SystemInit+0x108>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003cc4:	4b19      	ldr	r3, [pc, #100]	@ (8003d2c <SystemInit+0x108>)
 8003cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d3c <SystemInit+0x118>)
 8003cc8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003cca:	4b18      	ldr	r3, [pc, #96]	@ (8003d2c <SystemInit+0x108>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cd0:	4b16      	ldr	r3, [pc, #88]	@ (8003d2c <SystemInit+0x108>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a15      	ldr	r2, [pc, #84]	@ (8003d2c <SystemInit+0x108>)
 8003cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003cdc:	4b13      	ldr	r3, [pc, #76]	@ (8003d2c <SystemInit+0x108>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8003ce2:	4b12      	ldr	r3, [pc, #72]	@ (8003d2c <SystemInit+0x108>)
 8003ce4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003ce8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d113      	bne.n	8003d18 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8003d2c <SystemInit+0x108>)
 8003cf2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8003d2c <SystemInit+0x108>)
 8003cf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cfc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d00:	4b0f      	ldr	r3, [pc, #60]	@ (8003d40 <SystemInit+0x11c>)
 8003d02:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003d06:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003d08:	4b08      	ldr	r3, [pc, #32]	@ (8003d2c <SystemInit+0x108>)
 8003d0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003d0e:	4a07      	ldr	r2, [pc, #28]	@ (8003d2c <SystemInit+0x108>)
 8003d10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d14:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000ed00 	.word	0xe000ed00
 8003d28:	52002000 	.word	0x52002000
 8003d2c:	58024400 	.word	0x58024400
 8003d30:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d34:	02020200 	.word	0x02020200
 8003d38:	01ff0000 	.word	0x01ff0000
 8003d3c:	01010280 	.word	0x01010280
 8003d40:	52004000 	.word	0x52004000

08003d44 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8003d48:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <ExitRun0Mode+0x2c>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a08      	ldr	r2, [pc, #32]	@ (8003d70 <ExitRun0Mode+0x2c>)
 8003d4e:	f043 0302 	orr.w	r3, r3, #2
 8003d52:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003d54:	bf00      	nop
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <ExitRun0Mode+0x2c>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f9      	beq.n	8003d56 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	58024800 	.word	0x58024800

08003d74 <usb_cdc_ll_write>:
#include <stdint.h>
#include <stdbool.h>

// Простейшая блокирующая отправка. Если шина занята (USBD_BUSY) делаем короткие попытки.
// В дальнейшем можно заменить на кольцевой буфер и ISR завершения передачи.
bool usb_cdc_ll_write(const uint8_t *data, size_t len) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
    if (!data || !len) return false;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <usb_cdc_ll_write+0x16>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <usb_cdc_ll_write+0x1a>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e023      	b.n	8003dd6 <usb_cdc_ll_write+0x62>
    if (len > 0xFFFFu) len = 0xFFFFu; // ограничение API
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d94:	d302      	bcc.n	8003d9c <usb_cdc_ll_write+0x28>
 8003d96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d9a:	603b      	str	r3, [r7, #0]
    uint32_t t0 = HAL_GetTick();
 8003d9c:	f001 f8e6 	bl	8004f6c <HAL_GetTick>
 8003da0:	60f8      	str	r0, [r7, #12]
    while (1) {
        uint8_t st = CDC_Transmit_HS((uint8_t*)data, (uint16_t)len);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	4619      	mov	r1, r3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f016 fb5f 	bl	801a46c <CDC_Transmit_HS>
 8003dae:	4603      	mov	r3, r0
 8003db0:	72fb      	strb	r3, [r7, #11]
        if (st == USBD_OK) return true;
 8003db2:	7afb      	ldrb	r3, [r7, #11]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <usb_cdc_ll_write+0x48>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e00c      	b.n	8003dd6 <usb_cdc_ll_write+0x62>
        if (st != USBD_BUSY) return false; // ошибка
 8003dbc:	7afb      	ldrb	r3, [r7, #11]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d001      	beq.n	8003dc6 <usb_cdc_ll_write+0x52>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e007      	b.n	8003dd6 <usb_cdc_ll_write+0x62>
        if ((HAL_GetTick() - t0) > 10) return false; // таймаут ~10 мс
 8003dc6:	f001 f8d1 	bl	8004f6c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b0a      	cmp	r3, #10
 8003dd2:	d9e6      	bls.n	8003da2 <usb_cdc_ll_write+0x2e>
 8003dd4:	2300      	movs	r3, #0
    }
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <usb_stream_send_status>:

// Внешняя низкоуровневая отправка
extern bool usb_cdc_ll_write(const uint8_t *data, size_t len);

// Локальная функция отправки статусного пакета
void usb_stream_send_status(void) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b098      	sub	sp, #96	@ 0x60
 8003de4:	af00      	add	r7, sp, #0
    vendor_status_v1_t st; memset(&st,0,sizeof(st));
 8003de6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003dea:	2234      	movs	r2, #52	@ 0x34
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f017 fb72 	bl	801b4d8 <memset>
    memcpy(st.sig, "STAT", 4);
 8003df4:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea4 <usb_stream_send_status+0xc4>)
 8003df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    st.version = 1;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    st.cur_samples = g_locked_samples;
 8003dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea8 <usb_stream_send_status+0xc8>)
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t ws = g_locked_samples ? (uint16_t)(32 + 2u * g_locked_samples) : 0;
 8003e04:	4b28      	ldr	r3, [pc, #160]	@ (8003ea8 <usb_stream_send_status+0xc8>)
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d006      	beq.n	8003e1a <usb_stream_send_status+0x3a>
 8003e0c:	4b26      	ldr	r3, [pc, #152]	@ (8003ea8 <usb_stream_send_status+0xc8>)
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	3310      	adds	r3, #16
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	e000      	b.n	8003e1c <usb_stream_send_status+0x3c>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    st.frame_bytes = ws;
 8003e20:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003e24:	863b      	strh	r3, [r7, #48]	@ 0x30
    st.test_frames = (uint16_t)g_test_frames;
 8003e26:	4b21      	ldr	r3, [pc, #132]	@ (8003eac <usb_stream_send_status+0xcc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	867b      	strh	r3, [r7, #50]	@ 0x32
    st.produced_seq = g_pair_seq;
 8003e2e:	4b20      	ldr	r3, [pc, #128]	@ (8003eb0 <usb_stream_send_status+0xd0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	637b      	str	r3, [r7, #52]	@ 0x34
    st.sent0 = g_sent_adc0; st.sent1 = g_sent_adc1;
 8003e34:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb4 <usb_stream_send_status+0xd4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb8 <usb_stream_send_status+0xd8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    st.dbg_tx_cplt = g_dbg_tx_cplt;
 8003e40:	4b1e      	ldr	r3, [pc, #120]	@ (8003ebc <usb_stream_send_status+0xdc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	643b      	str	r3, [r7, #64]	@ 0x40
    st.dbg_partial_frame_abort = g_dbg_partial_frame_abort;
 8003e46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec0 <usb_stream_send_status+0xe0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	647b      	str	r3, [r7, #68]	@ 0x44
    st.dbg_size_mismatch = g_dbg_size_mismatch;
 8003e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec4 <usb_stream_send_status+0xe4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	64bb      	str	r3, [r7, #72]	@ 0x48
    adc_stream_debug_t dbg; adc_stream_get_debug(&dbg);
 8003e52:	1d3b      	adds	r3, r7, #4
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fc fd0f 	bl	8000878 <adc_stream_get_debug>
    st.dma_done0 = dbg.dma_full0; st.dma_done1 = dbg.dma_full1;
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	653b      	str	r3, [r7, #80]	@ 0x50
    st.frame_wr_seq_copy = dbg.frame_wr_seq;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	657b      	str	r3, [r7, #84]	@ 0x54
    st.flags_runtime = (usb_stream_cfg()->streaming?1u:0u) | (g_locked_samples?2u:0u);
 8003e66:	f000 fa8b 	bl	8004380 <usb_stream_cfg>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <usb_stream_send_status+0x96>
 8003e72:	2201      	movs	r2, #1
 8003e74:	e000      	b.n	8003e78 <usb_stream_send_status+0x98>
 8003e76:	2200      	movs	r2, #0
 8003e78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea8 <usb_stream_send_status+0xc8>)
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <usb_stream_send_status+0xa4>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e000      	b.n	8003e86 <usb_stream_send_status+0xa6>
 8003e84:	2300      	movs	r3, #0
 8003e86:	4313      	orrs	r3, r2
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
    usb_cdc_ll_write((uint8_t*)&st, sizeof(st));
 8003e8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e92:	2134      	movs	r1, #52	@ 0x34
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff6d 	bl	8003d74 <usb_cdc_ll_write>
}
 8003e9a:	bf00      	nop
 8003e9c:	3760      	adds	r7, #96	@ 0x60
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	54415453 	.word	0x54415453
 8003ea8:	2400b34c 	.word	0x2400b34c
 8003eac:	2400b364 	.word	0x2400b364
 8003eb0:	2400b348 	.word	0x2400b348
 8003eb4:	2400b350 	.word	0x2400b350
 8003eb8:	2400b354 	.word	0x2400b354
 8003ebc:	2400b360 	.word	0x2400b360
 8003ec0:	2400b358 	.word	0x2400b358
 8003ec4:	2400b35c 	.word	0x2400b35c

08003ec8 <usb_stream_send_test_frame>:

// Тестовый кадр (8 сэмплов, флаги TEST+ADC0, не влияет на фиксацию)
void usb_stream_send_test_frame(void) {
 8003ec8:	b5b0      	push	{r4, r5, r7, lr}
 8003eca:	b0b0      	sub	sp, #192	@ 0xc0
 8003ecc:	af00      	add	r7, sp, #0
    uint16_t pattern[8]; for (uint16_t i=0;i<8;i++) pattern[i]=i;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8003ed4:	e00d      	b.n	8003ef2 <usb_stream_send_test_frame+0x2a>
 8003ed6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	33c0      	adds	r3, #192	@ 0xc0
 8003ede:	443b      	add	r3, r7
 8003ee0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ee4:	f823 2c2c 	strh.w	r2, [r3, #-44]
 8003ee8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003eec:	3301      	adds	r3, #1
 8003eee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8003ef2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ef6:	2b07      	cmp	r3, #7
 8003ef8:	d9ed      	bls.n	8003ed6 <usb_stream_send_test_frame+0xe>
    vendor_frame_hdr_t hdr; memset(&hdr,0,sizeof(hdr));
 8003efa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003efe:	2220      	movs	r2, #32
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f017 fae8 	bl	801b4d8 <memset>
    hdr.magic = 0xA55A; hdr.version = 1; hdr.flags = (uint8_t)(VFLAG_TEST | VFLAG_ADC0);
 8003f08:	f24a 535a 	movw	r3, #42330	@ 0xa55a
 8003f0c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8003f16:	2381      	movs	r3, #129	@ 0x81
 8003f18:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    hdr.seq = 0; // seq=0 для тестового (не относится к рабочим парам)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	67bb      	str	r3, [r7, #120]	@ 0x78
    hdr.timestamp = HAL_GetTick();
 8003f20:	f001 f824 	bl	8004f6c <HAL_GetTick>
 8003f24:	4603      	mov	r3, r0
 8003f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
    hdr.total_samples = 8;
 8003f28:	2308      	movs	r3, #8
 8003f2a:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    // CRC
    hdr.flags |= VFLAG_CRC;
 8003f2e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003f32:	f043 0304 	orr.w	r3, r3, #4
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    hdr.crc16 = 0;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    uint8_t buf[32 + 8*2 + 64]; // header + payload + возможный паддинг
    memcpy(buf, &hdr, sizeof(hdr));
 8003f42:	1d3c      	adds	r4, r7, #4
 8003f44:	f107 0574 	add.w	r5, r7, #116	@ 0x74
 8003f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003f50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memcpy(buf + sizeof(hdr), pattern, sizeof(pattern));
 8003f54:	1d3b      	adds	r3, r7, #4
 8003f56:	3320      	adds	r3, #32
 8003f58:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f017 fb5b 	bl	801b61a <memcpy>
    // CRC16 по 30 байтам заголовка + payload
    uint16_t crc = 0xFFFFu; const uint8_t* p = buf; size_t len = 30 + sizeof(pattern);
 8003f64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f68:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f72:	232e      	movs	r3, #46	@ 0x2e
 8003f74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    for (size_t i=0;i<len;i++){ crc ^= (uint16_t)p[i] << 8; for (int b=0;b<8;b++){ crc = (crc & 0x8000)? (uint16_t)((crc<<1)^0x1021):(uint16_t)(crc<<1); } }
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f7e:	e034      	b.n	8003fea <usb_stream_send_test_frame+0x122>
 8003f80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f88:	4413      	add	r3, r2
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	b21b      	sxth	r3, r3
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	b21a      	sxth	r2, r3
 8003f92:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8003f96:	4053      	eors	r3, r2
 8003f98:	b21b      	sxth	r3, r3
 8003f9a:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fa4:	e018      	b.n	8003fd8 <usb_stream_send_test_frame+0x110>
 8003fa6:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da09      	bge.n	8003fc2 <usb_stream_send_test_frame+0xfa>
 8003fae:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	b21a      	sxth	r2, r3
 8003fb6:	f241 0321 	movw	r3, #4129	@ 0x1021
 8003fba:	4053      	eors	r3, r2
 8003fbc:	b21b      	sxth	r3, r3
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	e003      	b.n	8003fca <usb_stream_send_test_frame+0x102>
 8003fc2:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 8003fce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fdc:	2b07      	cmp	r3, #7
 8003fde:	dde2      	ble.n	8003fa6 <usb_stream_send_test_frame+0xde>
 8003fe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003fee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d3c4      	bcc.n	8003f80 <usb_stream_send_test_frame+0xb8>
    ((vendor_frame_hdr_t*)buf)->crc16 = crc;
 8003ff6:	1d3b      	adds	r3, r7, #4
 8003ff8:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8003ffc:	83da      	strh	r2, [r3, #30]
    // Паддинг до 64
    size_t total = sizeof(hdr) + sizeof(pattern);
 8003ffe:	2330      	movs	r3, #48	@ 0x30
 8004000:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    size_t pad = (64 - (total & 63u)) & 63u; if (pad) memset(buf+total,0,pad), total+=pad;
 8004004:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004008:	425b      	negs	r3, r3
 800400a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800400e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004012:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d010      	beq.n	800403c <usb_stream_send_test_frame+0x174>
 800401a:	1d3a      	adds	r2, r7, #4
 800401c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004020:	4413      	add	r3, r2
 8004022:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f017 fa55 	bl	801b4d8 <memset>
 800402e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004032:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004036:	4413      	add	r3, r2
 8004038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    usb_cdc_ll_write(buf, total);
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fe96 	bl	8003d74 <usb_cdc_ll_write>
    g_test_frames++;
 8004048:	4b04      	ldr	r3, [pc, #16]	@ (800405c <usb_stream_send_test_frame+0x194>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3301      	adds	r3, #1
 800404e:	4a03      	ldr	r2, [pc, #12]	@ (800405c <usb_stream_send_test_frame+0x194>)
 8004050:	6013      	str	r3, [r2, #0]
}
 8004052:	bf00      	nop
 8004054:	37c0      	adds	r7, #192	@ 0xc0
 8004056:	46bd      	mov	sp, r7
 8004058:	bdb0      	pop	{r4, r5, r7, pc}
 800405a:	bf00      	nop
 800405c:	2400b364 	.word	0x2400b364

08004060 <crc16_buf>:
static uint16_t  s_frame_samples = 0; // полное количество выборок
static uint8_t   s_next_channel_to_send = 0; // 0 -> отправим ADC0, 1 -> ADC1
static uint8_t   s_frame_active = 0;

// CRC16 helper
static uint16_t crc16_buf(const uint8_t* data, size_t len){ uint16_t crc=0xFFFFu; for(size_t i=0;i<len;i++){ crc^=(uint16_t)data[i]<<8; for(int b=0;b<8;b++){ if(crc&0x8000) crc=(uint16_t)((crc<<1)^0x1021); else crc=(uint16_t)(crc<<1);} } return crc; }
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
 800406a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800406e:	82fb      	strh	r3, [r7, #22]
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	e028      	b.n	80040c8 <crc16_buf+0x68>
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4413      	add	r3, r2
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	b21b      	sxth	r3, r3
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	b21a      	sxth	r2, r3
 8004084:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004088:	4053      	eors	r3, r2
 800408a:	b21b      	sxth	r3, r3
 800408c:	82fb      	strh	r3, [r7, #22]
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e013      	b.n	80040bc <crc16_buf+0x5c>
 8004094:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004098:	2b00      	cmp	r3, #0
 800409a:	da09      	bge.n	80040b0 <crc16_buf+0x50>
 800409c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	b21a      	sxth	r2, r3
 80040a4:	f241 0321 	movw	r3, #4129	@ 0x1021
 80040a8:	4053      	eors	r3, r2
 80040aa:	b21b      	sxth	r3, r3
 80040ac:	82fb      	strh	r3, [r7, #22]
 80040ae:	e002      	b.n	80040b6 <crc16_buf+0x56>
 80040b0:	8afb      	ldrh	r3, [r7, #22]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	82fb      	strh	r3, [r7, #22]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3301      	adds	r3, #1
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b07      	cmp	r3, #7
 80040c0:	dde8      	ble.n	8004094 <crc16_buf+0x34>
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	3301      	adds	r3, #1
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d3d2      	bcc.n	8004076 <crc16_buf+0x16>
 80040d0:	8afb      	ldrh	r3, [r7, #22]
 80040d2:	4618      	mov	r0, r3
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <try_send_one_adc_frame>:

// Попытка отправить один USB кадр (один канал). Возврат 1 если отправлено.
static uint8_t try_send_one_adc_frame(void){
 80040e0:	b5b0      	push	{r4, r5, r7, lr}
 80040e2:	b090      	sub	sp, #64	@ 0x40
 80040e4:	af00      	add	r7, sp, #0
    if (!s_frame_active) return 0;
 80040e6:	4b55      	ldr	r3, [pc, #340]	@ (800423c <try_send_one_adc_frame+0x15c>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <try_send_one_adc_frame+0x12>
 80040ee:	2300      	movs	r3, #0
 80040f0:	e0a0      	b.n	8004234 <try_send_one_adc_frame+0x154>
    uint8_t ch = s_next_channel_to_send; // 0 или 1
 80040f2:	4b53      	ldr	r3, [pc, #332]	@ (8004240 <try_send_one_adc_frame+0x160>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    // Формируем заголовок
    vendor_frame_hdr_t hdr; memset(&hdr,0,sizeof(hdr));
 80040fa:	1d3b      	adds	r3, r7, #4
 80040fc:	2220      	movs	r2, #32
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f017 f9e9 	bl	801b4d8 <memset>
    hdr.magic = 0xA55A; hdr.version = 1; hdr.flags = (ch==0)? VFLAG_ADC0 : VFLAG_ADC1;
 8004106:	f24a 535a 	movw	r3, #42330	@ 0xa55a
 800410a:	80bb      	strh	r3, [r7, #4]
 800410c:	2301      	movs	r3, #1
 800410e:	71bb      	strb	r3, [r7, #6]
 8004110:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <try_send_one_adc_frame+0x3c>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <try_send_one_adc_frame+0x3e>
 800411c:	2302      	movs	r3, #2
 800411e:	71fb      	strb	r3, [r7, #7]
    hdr.seq = g_pair_seq; // общий seq пары
 8004120:	4b48      	ldr	r3, [pc, #288]	@ (8004244 <try_send_one_adc_frame+0x164>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60bb      	str	r3, [r7, #8]
    hdr.timestamp = HAL_GetTick();
 8004126:	f000 ff21 	bl	8004f6c <HAL_GetTick>
 800412a:	4603      	mov	r3, r0
 800412c:	60fb      	str	r3, [r7, #12]
    hdr.total_samples = s_frame_samples; // уже проверено / зафиксировано
 800412e:	4b46      	ldr	r3, [pc, #280]	@ (8004248 <try_send_one_adc_frame+0x168>)
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	823b      	strh	r3, [r7, #16]
    hdr.zone_count = 0; // пока не используем зоны
 8004134:	2300      	movs	r3, #0
 8004136:	827b      	strh	r3, [r7, #18]
    // Включаем CRC
    hdr.flags |= VFLAG_CRC;
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	f043 0304 	orr.w	r3, r3, #4
 800413e:	b2db      	uxtb	r3, r3
 8004140:	71fb      	strb	r3, [r7, #7]
    hdr.crc16 = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	847b      	strh	r3, [r7, #34]	@ 0x22
    size_t payload_bytes = (size_t)s_frame_samples * 2u;
 8004146:	4b40      	ldr	r3, [pc, #256]	@ (8004248 <try_send_one_adc_frame+0x168>)
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	637b      	str	r3, [r7, #52]	@ 0x34
    size_t max_needed = sizeof(hdr) + payload_bytes + 64; // +паддинг
 800414e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004150:	3360      	adds	r3, #96	@ 0x60
 8004152:	633b      	str	r3, [r7, #48]	@ 0x30
    static uint8_t txbuf[4096]; // с запасом
    if (max_needed > sizeof(txbuf)) return 0; // слишком большой (не должен происходить)
 8004154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800415a:	d901      	bls.n	8004160 <try_send_one_adc_frame+0x80>
 800415c:	2300      	movs	r3, #0
 800415e:	e069      	b.n	8004234 <try_send_one_adc_frame+0x154>
    memcpy(txbuf, &hdr, sizeof(hdr));
 8004160:	4b3a      	ldr	r3, [pc, #232]	@ (800424c <try_send_one_adc_frame+0x16c>)
 8004162:	461d      	mov	r5, r3
 8004164:	1d3c      	adds	r4, r7, #4
 8004166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800416a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800416e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const uint16_t *src = (ch==0)? s_frame_ch0 : s_frame_ch1;
 8004172:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004176:	2b00      	cmp	r3, #0
 8004178:	d102      	bne.n	8004180 <try_send_one_adc_frame+0xa0>
 800417a:	4b35      	ldr	r3, [pc, #212]	@ (8004250 <try_send_one_adc_frame+0x170>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	e001      	b.n	8004184 <try_send_one_adc_frame+0xa4>
 8004180:	4b34      	ldr	r3, [pc, #208]	@ (8004254 <try_send_one_adc_frame+0x174>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(txbuf + sizeof(hdr), src, payload_bytes);
 8004186:	4b34      	ldr	r3, [pc, #208]	@ (8004258 <try_send_one_adc_frame+0x178>)
 8004188:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800418a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800418c:	4618      	mov	r0, r3
 800418e:	f017 fa44 	bl	801b61a <memcpy>
    // CRC по 30 байтам заголовка + payload
    uint16_t crc = crc16_buf(txbuf, 30 + payload_bytes);
 8004192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004194:	331e      	adds	r3, #30
 8004196:	4619      	mov	r1, r3
 8004198:	482c      	ldr	r0, [pc, #176]	@ (800424c <try_send_one_adc_frame+0x16c>)
 800419a:	f7ff ff61 	bl	8004060 <crc16_buf>
 800419e:	4603      	mov	r3, r0
 80041a0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    ((vendor_frame_hdr_t*)txbuf)->crc16 = crc;
 80041a2:	4b2a      	ldr	r3, [pc, #168]	@ (800424c <try_send_one_adc_frame+0x16c>)
 80041a4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80041a6:	83da      	strh	r2, [r3, #30]
    size_t total = sizeof(hdr) + payload_bytes;
 80041a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041aa:	3320      	adds	r3, #32
 80041ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    size_t pad = (64 - (total & 63u)) & 63u; if (pad){ memset(txbuf+total,0,pad); total += pad; }
 80041ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b0:	425b      	negs	r3, r3
 80041b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <try_send_one_adc_frame+0xf6>
 80041be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c0:	4a22      	ldr	r2, [pc, #136]	@ (800424c <try_send_one_adc_frame+0x16c>)
 80041c2:	4413      	add	r3, r2
 80041c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f017 f985 	bl	801b4d8 <memset>
 80041ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	4413      	add	r3, r2
 80041d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (!usb_cdc_ll_write(txbuf, total)) return 0; // endpoint занят
 80041d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041d8:	481c      	ldr	r0, [pc, #112]	@ (800424c <try_send_one_adc_frame+0x16c>)
 80041da:	f7ff fdcb 	bl	8003d74 <usb_cdc_ll_write>
 80041de:	4603      	mov	r3, r0
 80041e0:	f083 0301 	eor.w	r3, r3, #1
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <try_send_one_adc_frame+0x10e>
 80041ea:	2300      	movs	r3, #0
 80041ec:	e022      	b.n	8004234 <try_send_one_adc_frame+0x154>
    // Учёт
    if (ch==0) g_sent_adc0++; else g_sent_adc1++;
 80041ee:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d105      	bne.n	8004202 <try_send_one_adc_frame+0x122>
 80041f6:	4b19      	ldr	r3, [pc, #100]	@ (800425c <try_send_one_adc_frame+0x17c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	4a17      	ldr	r2, [pc, #92]	@ (800425c <try_send_one_adc_frame+0x17c>)
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	e004      	b.n	800420c <try_send_one_adc_frame+0x12c>
 8004202:	4b17      	ldr	r3, [pc, #92]	@ (8004260 <try_send_one_adc_frame+0x180>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3301      	adds	r3, #1
 8004208:	4a15      	ldr	r2, [pc, #84]	@ (8004260 <try_send_one_adc_frame+0x180>)
 800420a:	6013      	str	r3, [r2, #0]
    // Переключение или завершение пары
    if (s_next_channel_to_send == 0){ s_next_channel_to_send = 1; }
 800420c:	4b0c      	ldr	r3, [pc, #48]	@ (8004240 <try_send_one_adc_frame+0x160>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d103      	bne.n	800421c <try_send_one_adc_frame+0x13c>
 8004214:	4b0a      	ldr	r3, [pc, #40]	@ (8004240 <try_send_one_adc_frame+0x160>)
 8004216:	2201      	movs	r2, #1
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	e00a      	b.n	8004232 <try_send_one_adc_frame+0x152>
    else { // пара завершена
        s_frame_active = 0; s_next_channel_to_send = 0; g_pair_seq++; }
 800421c:	4b07      	ldr	r3, [pc, #28]	@ (800423c <try_send_one_adc_frame+0x15c>)
 800421e:	2200      	movs	r2, #0
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <try_send_one_adc_frame+0x160>)
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]
 8004228:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <try_send_one_adc_frame+0x164>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3301      	adds	r3, #1
 800422e:	4a05      	ldr	r2, [pc, #20]	@ (8004244 <try_send_one_adc_frame+0x164>)
 8004230:	6013      	str	r3, [r2, #0]
    return 1;
 8004232:	2301      	movs	r3, #1
}
 8004234:	4618      	mov	r0, r3
 8004236:	3740      	adds	r7, #64	@ 0x40
 8004238:	46bd      	mov	sp, r7
 800423a:	bdb0      	pop	{r4, r5, r7, pc}
 800423c:	2400b377 	.word	0x2400b377
 8004240:	2400b376 	.word	0x2400b376
 8004244:	2400b348 	.word	0x2400b348
 8004248:	2400b374 	.word	0x2400b374
 800424c:	2400b378 	.word	0x2400b378
 8004250:	2400b36c 	.word	0x2400b36c
 8004254:	2400b370 	.word	0x2400b370
 8004258:	2400b398 	.word	0x2400b398
 800425c:	2400b350 	.word	0x2400b350
 8004260:	2400b354 	.word	0x2400b354

08004264 <usb_stream_service>:

// Сервис автоматической отправки (ограниченные итерации, без зависимости от main loop)
static void usb_stream_service(void) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
    if (!usb_stream_cfg()->streaming) return;
 800426a:	f000 f889 	bl	8004380 <usb_stream_cfg>
 800426e:	4603      	mov	r3, r0
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01b      	beq.n	80042ae <usb_stream_service+0x4a>
    if (g_service_lock) return; // избегаем вложенности
 8004276:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <usb_stream_service+0x58>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d118      	bne.n	80042b2 <usb_stream_service+0x4e>
    g_service_lock = 1;
 8004280:	4b0e      	ldr	r3, [pc, #56]	@ (80042bc <usb_stream_service+0x58>)
 8004282:	2201      	movs	r2, #1
 8004284:	701a      	strb	r2, [r3, #0]
    // Ограничим количество попыток за одно обращение, чтобы ISR были короткими
    for (uint8_t i=0; i<4; ++i) {
 8004286:	2300      	movs	r3, #0
 8004288:	71fb      	strb	r3, [r7, #7]
 800428a:	e007      	b.n	800429c <usb_stream_service+0x38>
        if (!usb_stream_try_send_frame()) break; // либо нечего, либо endpoint занят
 800428c:	f000 f818 	bl	80042c0 <usb_stream_try_send_frame>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d006      	beq.n	80042a4 <usb_stream_service+0x40>
    for (uint8_t i=0; i<4; ++i) {
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	3301      	adds	r3, #1
 800429a:	71fb      	strb	r3, [r7, #7]
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d9f4      	bls.n	800428c <usb_stream_service+0x28>
 80042a2:	e000      	b.n	80042a6 <usb_stream_service+0x42>
        if (!usb_stream_try_send_frame()) break; // либо нечего, либо endpoint занят
 80042a4:	bf00      	nop
    }
    g_service_lock = 0;
 80042a6:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <usb_stream_service+0x58>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	e002      	b.n	80042b4 <usb_stream_service+0x50>
    if (!usb_stream_cfg()->streaming) return;
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <usb_stream_service+0x50>
    if (g_service_lock) return; // избегаем вложенности
 80042b2:	bf00      	nop
}
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	2400b368 	.word	0x2400b368

080042c0 <usb_stream_try_send_frame>:

uint8_t usb_stream_try_send_frame(void) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
    if (!usb_stream_cfg()->streaming) return 0;
 80042c6:	f000 f85b 	bl	8004380 <usb_stream_cfg>
 80042ca:	4603      	mov	r3, r0
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <usb_stream_try_send_frame+0x16>
 80042d2:	2300      	movs	r3, #0
 80042d4:	e041      	b.n	800435a <usb_stream_try_send_frame+0x9a>
    // Если нет активного кадра — попробуем взять новый из FIFO
    if (!s_frame_active){
 80042d6:	4b23      	ldr	r3, [pc, #140]	@ (8004364 <usb_stream_try_send_frame+0xa4>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d135      	bne.n	800434a <usb_stream_try_send_frame+0x8a>
        uint16_t *c0=NULL,*c1=NULL; uint16_t samples=0;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	2300      	movs	r3, #0
 80042e8:	80fb      	strh	r3, [r7, #6]
        if (!adc_get_frame(&c0,&c1,&samples)) return 0; // нет данных
 80042ea:	1dba      	adds	r2, r7, #6
 80042ec:	f107 0108 	add.w	r1, r7, #8
 80042f0:	f107 030c 	add.w	r3, r7, #12
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fc fa6f 	bl	80007d8 <adc_get_frame>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <usb_stream_try_send_frame+0x44>
 8004300:	2300      	movs	r3, #0
 8004302:	e02a      	b.n	800435a <usb_stream_try_send_frame+0x9a>
        // Фиксация размера
        if (g_locked_samples == 0){
 8004304:	4b18      	ldr	r3, [pc, #96]	@ (8004368 <usb_stream_try_send_frame+0xa8>)
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d103      	bne.n	8004314 <usb_stream_try_send_frame+0x54>
            g_locked_samples = samples; // фиксируем
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	4b16      	ldr	r3, [pc, #88]	@ (8004368 <usb_stream_try_send_frame+0xa8>)
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e00b      	b.n	800432c <usb_stream_try_send_frame+0x6c>
        } else if (samples != g_locked_samples){
 8004314:	88fa      	ldrh	r2, [r7, #6]
 8004316:	4b14      	ldr	r3, [pc, #80]	@ (8004368 <usb_stream_try_send_frame+0xa8>)
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d006      	beq.n	800432c <usb_stream_try_send_frame+0x6c>
            // Несоответствие размера — отбрасываем кадр целиком
            g_dbg_size_mismatch++;
 800431e:	4b13      	ldr	r3, [pc, #76]	@ (800436c <usb_stream_try_send_frame+0xac>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	4a11      	ldr	r2, [pc, #68]	@ (800436c <usb_stream_try_send_frame+0xac>)
 8004326:	6013      	str	r3, [r2, #0]
            return 1; // «формально обработали» чтобы попробовать следующий
 8004328:	2301      	movs	r3, #1
 800432a:	e016      	b.n	800435a <usb_stream_try_send_frame+0x9a>
        }
        // Подготовка активного
        s_frame_ch0 = c0; s_frame_ch1 = c1; s_frame_samples = samples; s_frame_active = 1; s_next_channel_to_send = 0;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4a10      	ldr	r2, [pc, #64]	@ (8004370 <usb_stream_try_send_frame+0xb0>)
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4a0f      	ldr	r2, [pc, #60]	@ (8004374 <usb_stream_try_send_frame+0xb4>)
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <usb_stream_try_send_frame+0xb8>)
 800433c:	801a      	strh	r2, [r3, #0]
 800433e:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <usb_stream_try_send_frame+0xa4>)
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	4b0d      	ldr	r3, [pc, #52]	@ (800437c <usb_stream_try_send_frame+0xbc>)
 8004346:	2200      	movs	r2, #0
 8004348:	701a      	strb	r2, [r3, #0]
    }
    // Пытаемся отправить следующий канал кадра
    if (try_send_one_adc_frame()) return 1;
 800434a:	f7ff fec9 	bl	80040e0 <try_send_one_adc_frame>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <usb_stream_try_send_frame+0x98>
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <usb_stream_try_send_frame+0x9a>
    return 0;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	2400b377 	.word	0x2400b377
 8004368:	2400b34c 	.word	0x2400b34c
 800436c:	2400b35c 	.word	0x2400b35c
 8004370:	2400b36c 	.word	0x2400b36c
 8004374:	2400b370 	.word	0x2400b370
 8004378:	2400b374 	.word	0x2400b374
 800437c:	2400b376 	.word	0x2400b376

08004380 <usb_stream_cfg>:
    if (g_new_frames_flag) { g_new_frames_flag = 0; usb_stream_service(); }
}

// Глобальная конфигурация потока (доступ через usb_stream_cfg())
static usb_stream_cfg_t g_cfg = { .streaming = 0, .full_mode = 1, .profile_id = 0, .roi_offset_us = 0, .roi_length_us = 0, .seq_adc = {0,0} };
usb_stream_cfg_t* usb_stream_cfg(void) { return &g_cfg; }
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
 8004384:	4b02      	ldr	r3, [pc, #8]	@ (8004390 <usb_stream_cfg+0x10>)
 8004386:	4618      	mov	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	24000020 	.word	0x24000020

08004394 <stream_send_ack>:

// ACK/NACK helpers
static void stream_send_ack(uint8_t cmd) { uint8_t pkt[2] = { RSP_ACK, cmd }; usb_cdc_ll_write(pkt, sizeof(pkt)); }
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	71fb      	strb	r3, [r7, #7]
 800439e:	2380      	movs	r3, #128	@ 0x80
 80043a0:	733b      	strb	r3, [r7, #12]
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	737b      	strb	r3, [r7, #13]
 80043a6:	f107 030c 	add.w	r3, r7, #12
 80043aa:	2102      	movs	r1, #2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fce1 	bl	8003d74 <usb_cdc_ll_write>
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <stream_send_ack_param>:
void stream_send_ack_param(uint8_t cmd, uint8_t param) { uint8_t pkt[3] = { RSP_ACK, cmd, param }; usb_cdc_ll_write(pkt, sizeof(pkt)); }
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	4603      	mov	r3, r0
 80043c2:	460a      	mov	r2, r1
 80043c4:	71fb      	strb	r3, [r7, #7]
 80043c6:	4613      	mov	r3, r2
 80043c8:	71bb      	strb	r3, [r7, #6]
 80043ca:	2380      	movs	r3, #128	@ 0x80
 80043cc:	733b      	strb	r3, [r7, #12]
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	737b      	strb	r3, [r7, #13]
 80043d2:	79bb      	ldrb	r3, [r7, #6]
 80043d4:	73bb      	strb	r3, [r7, #14]
 80043d6:	f107 030c 	add.w	r3, r7, #12
 80043da:	2103      	movs	r1, #3
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff fcc9 	bl	8003d74 <usb_cdc_ll_write>
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <stream_send_nack>:
static void stream_send_nack(uint8_t cmd, uint8_t code) { uint8_t pkt[3] = { RSP_NACK, cmd, code }; usb_cdc_ll_write(pkt, sizeof(pkt)); }
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	4603      	mov	r3, r0
 80043f2:	460a      	mov	r2, r1
 80043f4:	71fb      	strb	r3, [r7, #7]
 80043f6:	4613      	mov	r3, r2
 80043f8:	71bb      	strb	r3, [r7, #6]
 80043fa:	2381      	movs	r3, #129	@ 0x81
 80043fc:	733b      	strb	r3, [r7, #12]
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	737b      	strb	r3, [r7, #13]
 8004402:	79bb      	ldrb	r3, [r7, #6]
 8004404:	73bb      	strb	r3, [r7, #14]
 8004406:	f107 030c 	add.w	r3, r7, #12
 800440a:	2103      	movs	r1, #3
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff fcb1 	bl	8003d74 <usb_cdc_ll_write>
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <usb_stream_on_rx_bytes>:

// --- Команды --- (переработанные согласно спецификации)
void usb_stream_on_rx_bytes(const uint8_t* data, size_t len) {
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
    if (!data || !len) return;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 813b 	beq.w	80046a4 <usb_stream_on_rx_bytes+0x288>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8137 	beq.w	80046a4 <usb_stream_on_rx_bytes+0x288>
    size_t i = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
    while (i < len) {
 800443a:	e12d      	b.n	8004698 <usb_stream_on_rx_bytes+0x27c>
        uint8_t cmd = data[i++];
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	617a      	str	r2, [r7, #20]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	74fb      	strb	r3, [r7, #19]
        switch (cmd) {
 800444a:	7cfb      	ldrb	r3, [r7, #19]
 800444c:	3b01      	subs	r3, #1
 800444e:	2b2f      	cmp	r3, #47	@ 0x2f
 8004450:	f200 811c 	bhi.w	800468c <usb_stream_on_rx_bytes+0x270>
 8004454:	a201      	add	r2, pc, #4	@ (adr r2, 800445c <usb_stream_on_rx_bytes+0x40>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	0800451d 	.word	0x0800451d
 8004460:	0800468d 	.word	0x0800468d
 8004464:	0800468d 	.word	0x0800468d
 8004468:	0800468d 	.word	0x0800468d
 800446c:	0800468d 	.word	0x0800468d
 8004470:	0800468d 	.word	0x0800468d
 8004474:	0800468d 	.word	0x0800468d
 8004478:	0800468d 	.word	0x0800468d
 800447c:	0800468d 	.word	0x0800468d
 8004480:	0800468d 	.word	0x0800468d
 8004484:	0800468d 	.word	0x0800468d
 8004488:	0800468d 	.word	0x0800468d
 800448c:	0800468d 	.word	0x0800468d
 8004490:	0800468d 	.word	0x0800468d
 8004494:	0800468d 	.word	0x0800468d
 8004498:	0800468d 	.word	0x0800468d
 800449c:	0800468d 	.word	0x0800468d
 80044a0:	0800468d 	.word	0x0800468d
 80044a4:	08004599 	.word	0x08004599
 80044a8:	080045e5 	.word	0x080045e5
 80044ac:	08004639 	.word	0x08004639
 80044b0:	0800468d 	.word	0x0800468d
 80044b4:	0800468d 	.word	0x0800468d
 80044b8:	0800468d 	.word	0x0800468d
 80044bc:	0800468d 	.word	0x0800468d
 80044c0:	0800468d 	.word	0x0800468d
 80044c4:	0800468d 	.word	0x0800468d
 80044c8:	0800468d 	.word	0x0800468d
 80044cc:	0800468d 	.word	0x0800468d
 80044d0:	0800468d 	.word	0x0800468d
 80044d4:	0800468d 	.word	0x0800468d
 80044d8:	08004527 	.word	0x08004527
 80044dc:	08004575 	.word	0x08004575
 80044e0:	0800468d 	.word	0x0800468d
 80044e4:	0800468d 	.word	0x0800468d
 80044e8:	0800468d 	.word	0x0800468d
 80044ec:	0800468d 	.word	0x0800468d
 80044f0:	0800468d 	.word	0x0800468d
 80044f4:	0800468d 	.word	0x0800468d
 80044f8:	0800468d 	.word	0x0800468d
 80044fc:	0800468d 	.word	0x0800468d
 8004500:	0800468d 	.word	0x0800468d
 8004504:	0800468d 	.word	0x0800468d
 8004508:	0800468d 	.word	0x0800468d
 800450c:	0800468d 	.word	0x0800468d
 8004510:	0800468d 	.word	0x0800468d
 8004514:	0800468d 	.word	0x0800468d
 8004518:	08004593 	.word	0x08004593
            case CMD_PING: { stream_send_ack(cmd); break; }
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff ff38 	bl	8004394 <stream_send_ack>
 8004524:	e0b8      	b.n	8004698 <usb_stream_on_rx_bytes+0x27c>
            case CMD_START_STREAM: {
                // Сброс состояния
                g_pair_seq = 1; // начинаем с 1, тестовый кадр seq=0
 8004526:	4b61      	ldr	r3, [pc, #388]	@ (80046ac <usb_stream_on_rx_bytes+0x290>)
 8004528:	2201      	movs	r2, #1
 800452a:	601a      	str	r2, [r3, #0]
                g_sent_adc0=g_sent_adc1=0; g_locked_samples=0;
 800452c:	4b60      	ldr	r3, [pc, #384]	@ (80046b0 <usb_stream_on_rx_bytes+0x294>)
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	4b5f      	ldr	r3, [pc, #380]	@ (80046b0 <usb_stream_on_rx_bytes+0x294>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a5f      	ldr	r2, [pc, #380]	@ (80046b4 <usb_stream_on_rx_bytes+0x298>)
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b5f      	ldr	r3, [pc, #380]	@ (80046b8 <usb_stream_on_rx_bytes+0x29c>)
 800453c:	2200      	movs	r2, #0
 800453e:	801a      	strh	r2, [r3, #0]
                g_dbg_partial_frame_abort=0; g_dbg_size_mismatch=0; s_frame_active=0; s_next_channel_to_send=0;
 8004540:	4b5e      	ldr	r3, [pc, #376]	@ (80046bc <usb_stream_on_rx_bytes+0x2a0>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	4b5e      	ldr	r3, [pc, #376]	@ (80046c0 <usb_stream_on_rx_bytes+0x2a4>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	4b5d      	ldr	r3, [pc, #372]	@ (80046c4 <usb_stream_on_rx_bytes+0x2a8>)
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	4b5d      	ldr	r3, [pc, #372]	@ (80046c8 <usb_stream_on_rx_bytes+0x2ac>)
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
                usb_stream_cfg()->streaming = 1;
 8004558:	f7ff ff12 	bl	8004380 <usb_stream_cfg>
 800455c:	4603      	mov	r3, r0
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]
                usb_stream_send_test_frame();
 8004562:	f7ff fcb1 	bl	8003ec8 <usb_stream_send_test_frame>
                stream_send_ack(cmd);
 8004566:	7cfb      	ldrb	r3, [r7, #19]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff ff13 	bl	8004394 <stream_send_ack>
                // Попытка немедленной передачи если уже есть буферы
                usb_stream_service();
 800456e:	f7ff fe79 	bl	8004264 <usb_stream_service>
                break; }
 8004572:	e091      	b.n	8004698 <usb_stream_on_rx_bytes+0x27c>
            case CMD_STOP_STREAM: {
                usb_stream_cfg()->streaming = 0; s_frame_active=0; // остановка
 8004574:	f7ff ff04 	bl	8004380 <usb_stream_cfg>
 8004578:	4603      	mov	r3, r0
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	4b51      	ldr	r3, [pc, #324]	@ (80046c4 <usb_stream_on_rx_bytes+0x2a8>)
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
                stream_send_ack(cmd);
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff ff04 	bl	8004394 <stream_send_ack>
                usb_stream_send_status();
 800458c:	f7ff fc28 	bl	8003de0 <usb_stream_send_status>
                break; }
 8004590:	e082      	b.n	8004698 <usb_stream_on_rx_bytes+0x27c>
            case CMD_GET_STATUS: {
                usb_stream_send_status(); break; }
 8004592:	f7ff fc25 	bl	8003de0 <usb_stream_send_status>
 8004596:	e07f      	b.n	8004698 <usb_stream_on_rx_bytes+0x27c>
            case CMD_SET_FULL_MODE: {
                if (i>=len){ stream_send_nack(cmd,1); break; }
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d305      	bcc.n	80045ac <usb_stream_on_rx_bytes+0x190>
 80045a0:	7cfb      	ldrb	r3, [r7, #19]
 80045a2:	2101      	movs	r1, #1
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff ff20 	bl	80043ea <stream_send_nack>
 80045aa:	e075      	b.n	8004698 <usb_stream_on_rx_bytes+0x27c>
                uint8_t m = data[i++]; usb_stream_cfg()->full_mode = m?1:0; stream_send_ack_param(cmd, usb_stream_cfg()->full_mode); break; }
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	617a      	str	r2, [r7, #20]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	747b      	strb	r3, [r7, #17]
 80045ba:	7c7b      	ldrb	r3, [r7, #17]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf14      	ite	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	2300      	moveq	r3, #0
 80045c4:	b2dc      	uxtb	r4, r3
 80045c6:	f7ff fedb 	bl	8004380 <usb_stream_cfg>
 80045ca:	4603      	mov	r3, r0
 80045cc:	4622      	mov	r2, r4
 80045ce:	705a      	strb	r2, [r3, #1]
 80045d0:	f7ff fed6 	bl	8004380 <usb_stream_cfg>
 80045d4:	4603      	mov	r3, r0
 80045d6:	785a      	ldrb	r2, [r3, #1]
 80045d8:	7cfb      	ldrb	r3, [r7, #19]
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff feec 	bl	80043ba <stream_send_ack_param>
 80045e2:	e059      	b.n	8004698 <usb_stream_on_rx_bytes+0x27c>
            case CMD_SET_PROFILE: {
                if (i>=len){ stream_send_nack(cmd,1); break; }
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d305      	bcc.n	80045f8 <usb_stream_on_rx_bytes+0x1dc>
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	2101      	movs	r1, #1
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fefa 	bl	80043ea <stream_send_nack>
 80045f6:	e04f      	b.n	8004698 <usb_stream_on_rx_bytes+0x27c>
                uint8_t p = data[i++]; if (adc_stream_set_profile(p)!=0){ stream_send_nack(cmd,2); break; }
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	617a      	str	r2, [r7, #20]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4413      	add	r3, r2
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	74bb      	strb	r3, [r7, #18]
 8004606:	7cbb      	ldrb	r3, [r7, #18]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fc f869 	bl	80006e0 <adc_stream_set_profile>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <usb_stream_on_rx_bytes+0x204>
 8004614:	7cfb      	ldrb	r3, [r7, #19]
 8004616:	2102      	movs	r1, #2
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fee6 	bl	80043ea <stream_send_nack>
 800461e:	e03b      	b.n	8004698 <usb_stream_on_rx_bytes+0x27c>
                usb_stream_cfg()->profile_id = p; stream_send_ack_param(cmd,p); break; }
 8004620:	f7ff feae 	bl	8004380 <usb_stream_cfg>
 8004624:	4602      	mov	r2, r0
 8004626:	7cbb      	ldrb	r3, [r7, #18]
 8004628:	7093      	strb	r3, [r2, #2]
 800462a:	7cba      	ldrb	r2, [r7, #18]
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	4611      	mov	r1, r2
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fec2 	bl	80043ba <stream_send_ack_param>
 8004636:	e02f      	b.n	8004698 <usb_stream_on_rx_bytes+0x27c>
            case CMD_SET_ROI_US: {
                if (i+8>len){ stream_send_nack(cmd,1); i=len; break; }
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3308      	adds	r3, #8
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d207      	bcs.n	8004652 <usb_stream_on_rx_bytes+0x236>
 8004642:	7cfb      	ldrb	r3, [r7, #19]
 8004644:	2101      	movs	r1, #1
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fecf 	bl	80043ea <stream_send_nack>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e022      	b.n	8004698 <usb_stream_on_rx_bytes+0x27c>
                uint32_t off_us,len_us; memcpy(&off_us,&data[i],4); memcpy(&len_us,&data[i+4],4); i+=8;
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	4413      	add	r3, r2
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	3304      	adds	r3, #4
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	4413      	add	r3, r2
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	3308      	adds	r3, #8
 800466c:	617b      	str	r3, [r7, #20]
                usb_stream_cfg()->roi_offset_us = off_us; usb_stream_cfg()->roi_length_us = len_us; stream_send_ack(cmd); break; }
 800466e:	f7ff fe87 	bl	8004380 <usb_stream_cfg>
 8004672:	4602      	mov	r2, r0
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6053      	str	r3, [r2, #4]
 8004678:	f7ff fe82 	bl	8004380 <usb_stream_cfg>
 800467c:	4602      	mov	r2, r0
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6093      	str	r3, [r2, #8]
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fe85 	bl	8004394 <stream_send_ack>
 800468a:	e005      	b.n	8004698 <usb_stream_on_rx_bytes+0x27c>
            default: { stream_send_nack(cmd,0xFF); break; }
 800468c:	7cfb      	ldrb	r3, [r7, #19]
 800468e:	21ff      	movs	r1, #255	@ 0xff
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff feaa 	bl	80043ea <stream_send_nack>
 8004696:	bf00      	nop
    while (i < len) {
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	f4ff aecd 	bcc.w	800443c <usb_stream_on_rx_bytes+0x20>
 80046a2:	e000      	b.n	80046a6 <usb_stream_on_rx_bytes+0x28a>
    if (!data || !len) return;
 80046a4:	bf00      	nop
        }
    }
}
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd90      	pop	{r4, r7, pc}
 80046ac:	2400b348 	.word	0x2400b348
 80046b0:	2400b354 	.word	0x2400b354
 80046b4:	2400b350 	.word	0x2400b350
 80046b8:	2400b34c 	.word	0x2400b34c
 80046bc:	2400b358 	.word	0x2400b358
 80046c0:	2400b35c 	.word	0x2400b35c
 80046c4:	2400b377 	.word	0x2400b377
 80046c8:	2400b376 	.word	0x2400b376

080046cc <usb_stream_init>:

// Инициализация оставлена (profile id уже установлен в adc_stream)
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	f7fb ff3e 	bl	8000550 <adc_stream_get_profile>
 80046d4:	4603      	mov	r3, r0
 80046d6:	461a      	mov	r2, r3
 80046d8:	4b07      	ldr	r3, [pc, #28]	@ (80046f8 <usb_stream_init+0x2c>)
 80046da:	709a      	strb	r2, [r3, #2]
 80046dc:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <usb_stream_init+0x2c>)
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <usb_stream_init+0x2c>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	705a      	strb	r2, [r3, #1]
 80046e8:	4b03      	ldr	r3, [pc, #12]	@ (80046f8 <usb_stream_init+0x2c>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	4b02      	ldr	r3, [pc, #8]	@ (80046f8 <usb_stream_init+0x2c>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	bf00      	nop
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	24000020 	.word	0x24000020

080046fc <vnd_generate_test_sawtooth>:
    *out_samples = act;
    return 1;
}

void vnd_generate_test_sawtooth(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
    /* Выбор числа сэмплов: в тестовом режиме берём активное значение/дефолт */
    uint16_t samples = adc_stream_get_active_samples();
 8004702:	f7fb ff31 	bl	8000568 <adc_stream_get_active_samples>
 8004706:	4603      	mov	r3, r0
 8004708:	80fb      	strh	r3, [r7, #6]
    if(samples == 0 || samples > VND_MAX_SAMPLES) samples = VND_FULL_DEFAULT_SAMPLES;
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <vnd_generate_test_sawtooth+0x1c>
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8004716:	d902      	bls.n	800471e <vnd_generate_test_sawtooth+0x22>
 8004718:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800471c:	80fb      	strh	r3, [r7, #6]

    /* Последовательность проверки: счёт 1..N в каждом канале */
    for(uint16_t i = 0; i < samples; i++){
 800471e:	2300      	movs	r3, #0
 8004720:	80bb      	strh	r3, [r7, #4]
 8004722:	e010      	b.n	8004746 <vnd_generate_test_sawtooth+0x4a>
        int16_t v = (int16_t)(i + 1); /* 1..N */
 8004724:	88bb      	ldrh	r3, [r7, #4]
 8004726:	3301      	adds	r3, #1
 8004728:	b29b      	uxth	r3, r3
 800472a:	807b      	strh	r3, [r7, #2]
        s_test_buf0[i] = v;
 800472c:	88bb      	ldrh	r3, [r7, #4]
 800472e:	490e      	ldr	r1, [pc, #56]	@ (8004768 <vnd_generate_test_sawtooth+0x6c>)
 8004730:	887a      	ldrh	r2, [r7, #2]
 8004732:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        s_test_buf1[i] = v;
 8004736:	88bb      	ldrh	r3, [r7, #4]
 8004738:	490c      	ldr	r1, [pc, #48]	@ (800476c <vnd_generate_test_sawtooth+0x70>)
 800473a:	887a      	ldrh	r2, [r7, #2]
 800473c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint16_t i = 0; i < samples; i++){
 8004740:	88bb      	ldrh	r3, [r7, #4]
 8004742:	3301      	adds	r3, #1
 8004744:	80bb      	strh	r3, [r7, #4]
 8004746:	88ba      	ldrh	r2, [r7, #4]
 8004748:	88fb      	ldrh	r3, [r7, #6]
 800474a:	429a      	cmp	r2, r3
 800474c:	d3ea      	bcc.n	8004724 <vnd_generate_test_sawtooth+0x28>
    }
    /* Фаза не используется в этом режиме — оставлена для совместимости */

    s_test_frame_counter++;
 800474e:	4b08      	ldr	r3, [pc, #32]	@ (8004770 <vnd_generate_test_sawtooth+0x74>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3301      	adds	r3, #1
 8004754:	4a06      	ldr	r2, [pc, #24]	@ (8004770 <vnd_generate_test_sawtooth+0x74>)
 8004756:	6013      	str	r3, [r2, #0]
    vnd_tx_kick = 1; /* разбудить пайплайн */
 8004758:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <vnd_generate_test_sawtooth+0x78>)
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	2400c378 	.word	0x2400c378
 800476c:	2400ce18 	.word	0x2400ce18
 8004770:	2400d8b8 	.word	0x2400d8b8
 8004774:	2400dc50 	.word	0x2400dc50

08004778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set initial stack */
 8004778:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80047b4 <Reset_Handler+0x3c>
  bl  ExitRun0Mode        /* (generated by CubeMX) configure supply if needed */
 800477c:	f7ff fae2 	bl	8003d44 <ExitRun0Mode>
  bl  SystemInit          /* CMSIS system clock init */
 8004780:	f7ff fa50 	bl	8003c24 <SystemInit>
/* Copy .data from flash to SRAM */
  ldr r0, =_sidata        /* flash source */
 8004784:	480c      	ldr	r0, [pc, #48]	@ (80047b8 <Reset_Handler+0x40>)
  ldr r1, =_sdata         /* ram destination start */
 8004786:	490d      	ldr	r1, [pc, #52]	@ (80047bc <Reset_Handler+0x44>)
  ldr r2, =_edata         /* ram destination end */
 8004788:	4a0d      	ldr	r2, [pc, #52]	@ (80047c0 <Reset_Handler+0x48>)
1: cmp r1, r2
 800478a:	4291      	cmp	r1, r2
  ittt lt
 800478c:	bfbe      	ittt	lt
  ldrlt r3, [r0], #4
 800478e:	f850 3b04 	ldrlt.w	r3, [r0], #4
  strlt r3, [r1], #4
 8004792:	f841 3b04 	strlt.w	r3, [r1], #4
  blt 1b
 8004796:	e7f8      	blt.n	800478a <Reset_Handler+0x12>
/* Zero .bss */
  ldr r0, =_sbss
 8004798:	480a      	ldr	r0, [pc, #40]	@ (80047c4 <Reset_Handler+0x4c>)
  ldr r1, =_ebss
 800479a:	490b      	ldr	r1, [pc, #44]	@ (80047c8 <Reset_Handler+0x50>)
  movs r2, #0
 800479c:	2200      	movs	r2, #0
2: cmp r0, r1
 800479e:	4288      	cmp	r0, r1
  itt lt
 80047a0:	bfbc      	itt	lt
  strlt r2, [r0], #4
 80047a2:	f840 2b04 	strlt.w	r2, [r0], #4
  blt 2b
 80047a6:	e7fa      	blt.n	800479e <Reset_Handler+0x26>
/* C/C++ runtime init */
  bl __libc_init_array
 80047a8:	f016 ff10 	bl	801b5cc <__libc_init_array>
/* Call main */
  bl main
 80047ac:	f7fc fce2 	bl	8001174 <main>
/* If main returns, loop forever */
3: b 3b
 80047b0:	e7fe      	b.n	80047b0 <Reset_Handler+0x38>
 80047b2:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set initial stack */
 80047b4:	24050000 	.word	0x24050000
  ldr r0, =_sidata        /* flash source */
 80047b8:	0801e6ec 	.word	0x0801e6ec
  ldr r1, =_sdata         /* ram destination start */
 80047bc:	24000000 	.word	0x24000000
  ldr r2, =_edata         /* ram destination end */
 80047c0:	240002a8 	.word	0x240002a8
  ldr r0, =_sbss
 80047c4:	240002c0 	.word	0x240002c0
  ldr r1, =_ebss
 80047c8:	2401c520 	.word	0x2401c520

080047cc <ADC3_IRQHandler>:
  .size  Reset_Handler, .-Reset_Handler
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047cc:	e7fe      	b.n	80047cc <ADC3_IRQHandler>
	...

080047d0 <LCD_Init>:
 * @brief Инициализация LCD.
 * @note Эта функция является "оберткой" и просто вызывает
 *       низкоуровневую функцию инициализации из драйвера st7735.
 */
void LCD_Init(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
	ST7735_Init();
 80047d4:	f000 f9d8 	bl	8004b88 <ST7735_Init>
    lcd_ready = 1; // сигнал готовности LCD
 80047d8:	4b02      	ldr	r3, [pc, #8]	@ (80047e4 <LCD_Init+0x14>)
 80047da:	2201      	movs	r2, #1
 80047dc:	701a      	strb	r2, [r3, #0]
}
 80047de:	bf00      	nop
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	2400d8bc 	.word	0x2400d8bc

080047e8 <LCD_DrawPoint>:
 *       Для заливки областей лучше использовать ST7735_Fill.
 * @param x, y - Координаты пикселя.
 * @param color - Цвет пикселя.
 */
void LCD_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	80fb      	strh	r3, [r7, #6]
 80047f2:	460b      	mov	r3, r1
 80047f4:	80bb      	strh	r3, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	807b      	strh	r3, [r7, #2]
	LCD_CS_LOW();
 80047fa:	2200      	movs	r2, #0
 80047fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004800:	480f      	ldr	r0, [pc, #60]	@ (8004840 <LCD_DrawPoint+0x58>)
 8004802:	f005 fc6f 	bl	800a0e4 <HAL_GPIO_WritePin>
	ST7735_AddrSet(x,y,x,y);
 8004806:	88bb      	ldrh	r3, [r7, #4]
 8004808:	88fa      	ldrh	r2, [r7, #6]
 800480a:	88b9      	ldrh	r1, [r7, #4]
 800480c:	88f8      	ldrh	r0, [r7, #6]
 800480e:	f000 fad3 	bl	8004db8 <ST7735_AddrSet>
	ST7735_WriteData(color>>8);
 8004812:	887b      	ldrh	r3, [r7, #2]
 8004814:	0a1b      	lsrs	r3, r3, #8
 8004816:	b29b      	uxth	r3, r3
 8004818:	b2db      	uxtb	r3, r3
 800481a:	4618      	mov	r0, r3
 800481c:	f000 f992 	bl	8004b44 <ST7735_WriteData>
	ST7735_WriteData(color);
 8004820:	887b      	ldrh	r3, [r7, #2]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f98d 	bl	8004b44 <ST7735_WriteData>
	LCD_CS_HIGH();
 800482a:	2201      	movs	r2, #1
 800482c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004830:	4803      	ldr	r0, [pc, #12]	@ (8004840 <LCD_DrawPoint+0x58>)
 8004832:	f005 fc57 	bl	800a0e4 <HAL_GPIO_WritePin>
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	58021000 	.word	0x58021000

08004844 <LCD_ShowChar>:
 * @param size - Размер шрифта (12 или 16).
 * @param color - Цвет самого символа.
 * @param back_color - Цвет фона (используйте TRANSPARENT для прозрачного фона).
 */
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size, uint16_t color, uint16_t back_color)
{
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	4604      	mov	r4, r0
 800484c:	4608      	mov	r0, r1
 800484e:	4611      	mov	r1, r2
 8004850:	461a      	mov	r2, r3
 8004852:	4623      	mov	r3, r4
 8004854:	80fb      	strh	r3, [r7, #6]
 8004856:	4603      	mov	r3, r0
 8004858:	80bb      	strh	r3, [r7, #4]
 800485a:	460b      	mov	r3, r1
 800485c:	70fb      	strb	r3, [r7, #3]
 800485e:	4613      	mov	r3, r2
 8004860:	70bb      	strb	r3, [r7, #2]
    uint8_t temp;
    uint8_t pos, t;
    uint16_t y0 = y;
 8004862:	88bb      	ldrh	r3, [r7, #4]
 8004864:	817b      	strh	r3, [r7, #10]
    uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);
 8004866:	78bb      	ldrb	r3, [r7, #2]
 8004868:	08db      	lsrs	r3, r3, #3
 800486a:	b2db      	uxtb	r3, r3
 800486c:	461a      	mov	r2, r3
 800486e:	78bb      	ldrb	r3, [r7, #2]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	4413      	add	r3, r2
 8004882:	b2da      	uxtb	r2, r3
 8004884:	78bb      	ldrb	r3, [r7, #2]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	b2db      	uxtb	r3, r3
 800488a:	fb12 f303 	smulbb	r3, r2, r3
 800488e:	727b      	strb	r3, [r7, #9]

    num = num - ' ';
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	3b20      	subs	r3, #32
 8004894:	70fb      	strb	r3, [r7, #3]
    if (num < 0 || num >= 159) return; // Проверка диапазона
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	2b9e      	cmp	r3, #158	@ 0x9e
 800489a:	d85d      	bhi.n	8004958 <LCD_ShowChar+0x114>
    for (pos = 0; pos < csize; pos++)
 800489c:	2300      	movs	r3, #0
 800489e:	73bb      	strb	r3, [r7, #14]
 80048a0:	e055      	b.n	800494e <LCD_ShowChar+0x10a>
    {
        if (size == 12)
 80048a2:	78bb      	ldrb	r3, [r7, #2]
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	d10b      	bne.n	80048c0 <LCD_ShowChar+0x7c>
            temp = asc2_1206[num][pos];
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	7bb9      	ldrb	r1, [r7, #14]
 80048ac:	482e      	ldr	r0, [pc, #184]	@ (8004968 <LCD_ShowChar+0x124>)
 80048ae:	4613      	mov	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4403      	add	r3, r0
 80048b8:	440b      	add	r3, r1
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	73fb      	strb	r3, [r7, #15]
 80048be:	e00a      	b.n	80048d6 <LCD_ShowChar+0x92>
        else if (size == 16)
 80048c0:	78bb      	ldrb	r3, [r7, #2]
 80048c2:	2b10      	cmp	r3, #16
 80048c4:	d14a      	bne.n	800495c <LCD_ShowChar+0x118>
            temp = asc2_1608[num][pos];
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	7bbb      	ldrb	r3, [r7, #14]
 80048ca:	4928      	ldr	r1, [pc, #160]	@ (800496c <LCD_ShowChar+0x128>)
 80048cc:	0112      	lsls	r2, r2, #4
 80048ce:	440a      	add	r2, r1
 80048d0:	4413      	add	r3, r2
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	73fb      	strb	r3, [r7, #15]
        else
            return;
        for (t = 0; t < 8; t++)
 80048d6:	2300      	movs	r3, #0
 80048d8:	737b      	strb	r3, [r7, #13]
 80048da:	e030      	b.n	800493e <LCD_ShowChar+0xfa>
        {
            if (temp & 0x80)
 80048dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	da06      	bge.n	80048f2 <LCD_ShowChar+0xae>
                LCD_DrawPoint(x, y, color);
 80048e4:	8c3a      	ldrh	r2, [r7, #32]
 80048e6:	88b9      	ldrh	r1, [r7, #4]
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff ff7c 	bl	80047e8 <LCD_DrawPoint>
 80048f0:	e00a      	b.n	8004908 <LCD_ShowChar+0xc4>
            else if (back_color != TRANSPARENT)  // Рисуем фон только если он НЕ прозрачный
 80048f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80048f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d005      	beq.n	8004908 <LCD_ShowChar+0xc4>
                LCD_DrawPoint(x, y, back_color);
 80048fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80048fe:	88b9      	ldrh	r1, [r7, #4]
 8004900:	88fb      	ldrh	r3, [r7, #6]
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff ff70 	bl	80047e8 <LCD_DrawPoint>
            temp <<= 1;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
            y++;
 800490e:	88bb      	ldrh	r3, [r7, #4]
 8004910:	3301      	adds	r3, #1
 8004912:	80bb      	strh	r3, [r7, #4]
            if (y >= LCD_H) return;
 8004914:	88bb      	ldrh	r3, [r7, #4]
 8004916:	2b4f      	cmp	r3, #79	@ 0x4f
 8004918:	d822      	bhi.n	8004960 <LCD_ShowChar+0x11c>
            if ((y - y0) == size)
 800491a:	88ba      	ldrh	r2, [r7, #4]
 800491c:	897b      	ldrh	r3, [r7, #10]
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	78bb      	ldrb	r3, [r7, #2]
 8004922:	429a      	cmp	r2, r3
 8004924:	d108      	bne.n	8004938 <LCD_ShowChar+0xf4>
            {
                y = y0;
 8004926:	897b      	ldrh	r3, [r7, #10]
 8004928:	80bb      	strh	r3, [r7, #4]
                x++;
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	3301      	adds	r3, #1
 800492e:	80fb      	strh	r3, [r7, #6]
                if (x >= LCD_W) return;
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b9f      	cmp	r3, #159	@ 0x9f
 8004934:	d907      	bls.n	8004946 <LCD_ShowChar+0x102>
 8004936:	e014      	b.n	8004962 <LCD_ShowChar+0x11e>
        for (t = 0; t < 8; t++)
 8004938:	7b7b      	ldrb	r3, [r7, #13]
 800493a:	3301      	adds	r3, #1
 800493c:	737b      	strb	r3, [r7, #13]
 800493e:	7b7b      	ldrb	r3, [r7, #13]
 8004940:	2b07      	cmp	r3, #7
 8004942:	d9cb      	bls.n	80048dc <LCD_ShowChar+0x98>
 8004944:	e000      	b.n	8004948 <LCD_ShowChar+0x104>
                break;
 8004946:	bf00      	nop
    for (pos = 0; pos < csize; pos++)
 8004948:	7bbb      	ldrb	r3, [r7, #14]
 800494a:	3301      	adds	r3, #1
 800494c:	73bb      	strb	r3, [r7, #14]
 800494e:	7bba      	ldrb	r2, [r7, #14]
 8004950:	7a7b      	ldrb	r3, [r7, #9]
 8004952:	429a      	cmp	r2, r3
 8004954:	d3a5      	bcc.n	80048a2 <LCD_ShowChar+0x5e>
 8004956:	e004      	b.n	8004962 <LCD_ShowChar+0x11e>
    if (num < 0 || num >= 159) return; // Проверка диапазона
 8004958:	bf00      	nop
 800495a:	e002      	b.n	8004962 <LCD_ShowChar+0x11e>
            return;
 800495c:	bf00      	nop
 800495e:	e000      	b.n	8004962 <LCD_ShowChar+0x11e>
            if (y >= LCD_H) return;
 8004960:	bf00      	nop
            }
        }
    }
}
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	bd90      	pop	{r4, r7, pc}
 8004968:	0801d514 	.word	0x0801d514
 800496c:	0801dc88 	.word	0x0801dc88

08004970 <LCD_ShowString_Size>:
 * @param size - Размер шрифта (12 или 16).
 * @param color - Цвет текста.
 * @param back_color - Цвет фона.
 */
void LCD_ShowString_Size(uint16_t x, uint16_t y, const char *p, uint8_t size, uint16_t color, uint16_t back_color)
{
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b089      	sub	sp, #36	@ 0x24
 8004974:	af02      	add	r7, sp, #8
 8004976:	60ba      	str	r2, [r7, #8]
 8004978:	461a      	mov	r2, r3
 800497a:	4603      	mov	r3, r0
 800497c:	81fb      	strh	r3, [r7, #14]
 800497e:	460b      	mov	r3, r1
 8004980:	81bb      	strh	r3, [r7, #12]
 8004982:	4613      	mov	r3, r2
 8004984:	71fb      	strb	r3, [r7, #7]
    uint8_t char_width = (size == 12) ? 6 : 8;  // Ширина символа зависит от размера
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d101      	bne.n	8004990 <LCD_ShowString_Size+0x20>
 800498c:	2306      	movs	r3, #6
 800498e:	e000      	b.n	8004992 <LCD_ShowString_Size+0x22>
 8004990:	2308      	movs	r3, #8
 8004992:	75fb      	strb	r3, [r7, #23]
    uint8_t char_height = size;                  // Высота символа равна размеру
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	75bb      	strb	r3, [r7, #22]
    
    while (*p != '\0')
 8004998:	e02a      	b.n	80049f0 <LCD_ShowString_Size+0x80>
    {
        // Проверяем, помещается ли символ на текущей строке
        if (x > (LCD_W - char_width))
 800499a:	89fa      	ldrh	r2, [r7, #14]
 800499c:	7dfb      	ldrb	r3, [r7, #23]
 800499e:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 80049a2:	429a      	cmp	r2, r3
 80049a4:	dd06      	ble.n	80049b4 <LCD_ShowString_Size+0x44>
        {
            x = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	81fb      	strh	r3, [r7, #14]
            y += char_height;
 80049aa:	7dbb      	ldrb	r3, [r7, #22]
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	89bb      	ldrh	r3, [r7, #12]
 80049b0:	4413      	add	r3, r2
 80049b2:	81bb      	strh	r3, [r7, #12]
        }
        
        // Проверяем, помещается ли строка на экране
        if (y > (LCD_H - char_height))
 80049b4:	89ba      	ldrh	r2, [r7, #12]
 80049b6:	7dbb      	ldrb	r3, [r7, #22]
 80049b8:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 80049bc:	429a      	cmp	r2, r3
 80049be:	dd03      	ble.n	80049c8 <LCD_ShowString_Size+0x58>
        {
            y = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	81bb      	strh	r3, [r7, #12]
            x = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	81fb      	strh	r3, [r7, #14]
        }
        
        LCD_ShowChar(x, y, *p, size, color, back_color);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	781a      	ldrb	r2, [r3, #0]
 80049cc:	79fc      	ldrb	r4, [r7, #7]
 80049ce:	89b9      	ldrh	r1, [r7, #12]
 80049d0:	89f8      	ldrh	r0, [r7, #14]
 80049d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	4623      	mov	r3, r4
 80049dc:	f7ff ff32 	bl	8004844 <LCD_ShowChar>
        x += char_width;
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	89fb      	ldrh	r3, [r7, #14]
 80049e6:	4413      	add	r3, r2
 80049e8:	81fb      	strh	r3, [r7, #14]
        p++;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	3301      	adds	r3, #1
 80049ee:	60bb      	str	r3, [r7, #8]
    while (*p != '\0')
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1d0      	bne.n	800499a <LCD_ShowString_Size+0x2a>
    }
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd90      	pop	{r4, r7, pc}
	...

08004a04 <LCD_FillRect>:
 * @param x, y - Координаты верхнего левого угла.
 * @param w, h - Ширина и высота прямоугольника.
 * @param color - Цвет для заливки.
 */
void LCD_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	4611      	mov	r1, r2
 8004a10:	461a      	mov	r2, r3
 8004a12:	4623      	mov	r3, r4
 8004a14:	80fb      	strh	r3, [r7, #6]
 8004a16:	4603      	mov	r3, r0
 8004a18:	80bb      	strh	r3, [r7, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	807b      	strh	r3, [r7, #2]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	803b      	strh	r3, [r7, #0]
    uint32_t i;
    uint32_t total_pixels = w * h;
 8004a22:	887b      	ldrh	r3, [r7, #2]
 8004a24:	883a      	ldrh	r2, [r7, #0]
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	60bb      	str	r3, [r7, #8]

    // Проверяем границы
    if (x >= LCD_W || y >= LCD_H) return;
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	2b9f      	cmp	r3, #159	@ 0x9f
 8004a30:	d84e      	bhi.n	8004ad0 <LCD_FillRect+0xcc>
 8004a32:	88bb      	ldrh	r3, [r7, #4]
 8004a34:	2b4f      	cmp	r3, #79	@ 0x4f
 8004a36:	d84b      	bhi.n	8004ad0 <LCD_FillRect+0xcc>
    if (x + w > LCD_W) w = LCD_W - x;
 8004a38:	88fa      	ldrh	r2, [r7, #6]
 8004a3a:	887b      	ldrh	r3, [r7, #2]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004a40:	dd03      	ble.n	8004a4a <LCD_FillRect+0x46>
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8004a48:	807b      	strh	r3, [r7, #2]
    if (y + h > LCD_H) h = LCD_H - y;
 8004a4a:	88ba      	ldrh	r2, [r7, #4]
 8004a4c:	883b      	ldrh	r3, [r7, #0]
 8004a4e:	4413      	add	r3, r2
 8004a50:	2b50      	cmp	r3, #80	@ 0x50
 8004a52:	dd03      	ble.n	8004a5c <LCD_FillRect+0x58>
 8004a54:	88bb      	ldrh	r3, [r7, #4]
 8004a56:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8004a5a:	803b      	strh	r3, [r7, #0]

    // Устанавливаем окно для рисования
    ST7735_AddrSet(x, y, x + w - 1, y + h - 1);
 8004a5c:	88fa      	ldrh	r2, [r7, #6]
 8004a5e:	887b      	ldrh	r3, [r7, #2]
 8004a60:	4413      	add	r3, r2
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29c      	uxth	r4, r3
 8004a68:	88ba      	ldrh	r2, [r7, #4]
 8004a6a:	883b      	ldrh	r3, [r7, #0]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	88b9      	ldrh	r1, [r7, #4]
 8004a76:	88f8      	ldrh	r0, [r7, #6]
 8004a78:	4622      	mov	r2, r4
 8004a7a:	f000 f99d 	bl	8004db8 <ST7735_AddrSet>
    
    // Теперь отправляем данные пикселей
    LCD_CS_LOW();
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a84:	4814      	ldr	r0, [pc, #80]	@ (8004ad8 <LCD_FillRect+0xd4>)
 8004a86:	f005 fb2d 	bl	800a0e4 <HAL_GPIO_WritePin>
    LCD_RS_HIGH(); // Режим данных
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a90:	4811      	ldr	r0, [pc, #68]	@ (8004ad8 <LCD_FillRect+0xd4>)
 8004a92:	f005 fb27 	bl	800a0e4 <HAL_GPIO_WritePin>
    
    for (i = 0; i < total_pixels; i++)
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	e00e      	b.n	8004aba <LCD_FillRect+0xb6>
    {
        ST7735_SPI_Send(color >> 8);
 8004a9c:	8c3b      	ldrh	r3, [r7, #32]
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f819 	bl	8004adc <ST7735_SPI_Send>
        ST7735_SPI_Send(color);
 8004aaa:	8c3b      	ldrh	r3, [r7, #32]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f814 	bl	8004adc <ST7735_SPI_Send>
    for (i = 0; i < total_pixels; i++)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d3ec      	bcc.n	8004a9c <LCD_FillRect+0x98>
    }
    
    LCD_CS_HIGH();
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ac8:	4803      	ldr	r0, [pc, #12]	@ (8004ad8 <LCD_FillRect+0xd4>)
 8004aca:	f005 fb0b 	bl	800a0e4 <HAL_GPIO_WritePin>
 8004ace:	e000      	b.n	8004ad2 <LCD_FillRect+0xce>
    if (x >= LCD_W || y >= LCD_H) return;
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd90      	pop	{r4, r7, pc}
 8004ad8:	58021000 	.word	0x58021000

08004adc <ST7735_SPI_Send>:
extern SPI_HandleTypeDef hspi4;

// --- Приватные функции для отправки данных по SPI ---

void ST7735_SPI_Send(uint8_t data)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	71fb      	strb	r3, [r7, #7]
    // Упрощенная версия без проверки флагов - HAL_SPI_Transmit уже содержит все необходимые проверки
    HAL_SPI_Transmit(&hspi4, &data, 1, 100);
 8004ae6:	1df9      	adds	r1, r7, #7
 8004ae8:	2364      	movs	r3, #100	@ 0x64
 8004aea:	2201      	movs	r2, #1
 8004aec:	4803      	ldr	r0, [pc, #12]	@ (8004afc <ST7735_SPI_Send+0x20>)
 8004aee:	f00a fb1d 	bl	800f12c <HAL_SPI_Transmit>
}
 8004af2:	bf00      	nop
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	2400aea8 	.word	0x2400aea8

08004b00 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();   // Активируем CS
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b10:	480b      	ldr	r0, [pc, #44]	@ (8004b40 <ST7735_WriteCommand+0x40>)
 8004b12:	f005 fae7 	bl	800a0e4 <HAL_GPIO_WritePin>
    LCD_RS_LOW();   // Режим команды
 8004b16:	2200      	movs	r2, #0
 8004b18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b1c:	4808      	ldr	r0, [pc, #32]	@ (8004b40 <ST7735_WriteCommand+0x40>)
 8004b1e:	f005 fae1 	bl	800a0e4 <HAL_GPIO_WritePin>
    ST7735_SPI_Send(cmd);
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff ffd9 	bl	8004adc <ST7735_SPI_Send>
    LCD_CS_HIGH();  // Деактивируем CS
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b30:	4803      	ldr	r0, [pc, #12]	@ (8004b40 <ST7735_WriteCommand+0x40>)
 8004b32:	f005 fad7 	bl	800a0e4 <HAL_GPIO_WritePin>
}
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	58021000 	.word	0x58021000

08004b44 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t data)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();   // Активируем CS
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b54:	480b      	ldr	r0, [pc, #44]	@ (8004b84 <ST7735_WriteData+0x40>)
 8004b56:	f005 fac5 	bl	800a0e4 <HAL_GPIO_WritePin>
    LCD_RS_HIGH();  // Режим данных
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b60:	4808      	ldr	r0, [pc, #32]	@ (8004b84 <ST7735_WriteData+0x40>)
 8004b62:	f005 fabf 	bl	800a0e4 <HAL_GPIO_WritePin>
    ST7735_SPI_Send(data);
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff ffb7 	bl	8004adc <ST7735_SPI_Send>
    LCD_CS_HIGH();  // Деактивируем CS
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b74:	4803      	ldr	r0, [pc, #12]	@ (8004b84 <ST7735_WriteData+0x40>)
 8004b76:	f005 fab5 	bl	800a0e4 <HAL_GPIO_WritePin>
}
 8004b7a:	bf00      	nop
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	58021000 	.word	0x58021000

08004b88 <ST7735_Init>:
/**
 * @brief Инициализирует дисплей ST7735.
 * @note Последовательность команд взята из рабочего примера WeAct.
 */
void ST7735_Init(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
    LCD_CS_LOW();
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b92:	4888      	ldr	r0, [pc, #544]	@ (8004db4 <ST7735_Init+0x22c>)
 8004b94:	f005 faa6 	bl	800a0e4 <HAL_GPIO_WritePin>
    LCD_RST_LOW();
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b9e:	4885      	ldr	r0, [pc, #532]	@ (8004db4 <ST7735_Init+0x22c>)
 8004ba0:	f005 faa0 	bl	800a0e4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8004ba4:	2064      	movs	r0, #100	@ 0x64
 8004ba6:	f000 f9ed 	bl	8004f84 <HAL_Delay>
    LCD_RST_HIGH();
 8004baa:	2201      	movs	r2, #1
 8004bac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bb0:	4880      	ldr	r0, [pc, #512]	@ (8004db4 <ST7735_Init+0x22c>)
 8004bb2:	f005 fa97 	bl	800a0e4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8004bb6:	2064      	movs	r0, #100	@ 0x64
 8004bb8:	f000 f9e4 	bl	8004f84 <HAL_Delay>

    ST7735_WriteCommand(ST7735_SWRESET); // 1: Software reset
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	f7ff ff9f 	bl	8004b00 <ST7735_WriteCommand>
    HAL_Delay(150);
 8004bc2:	2096      	movs	r0, #150	@ 0x96
 8004bc4:	f000 f9de 	bl	8004f84 <HAL_Delay>

    ST7735_WriteCommand(ST7735_SLPOUT);  // 2: Out of sleep mode
 8004bc8:	2011      	movs	r0, #17
 8004bca:	f7ff ff99 	bl	8004b00 <ST7735_WriteCommand>
    HAL_Delay(255);
 8004bce:	20ff      	movs	r0, #255	@ 0xff
 8004bd0:	f000 f9d8 	bl	8004f84 <HAL_Delay>

    // 3: Frame rate control
    ST7735_WriteCommand(ST7735_FRMCTR1);
 8004bd4:	20b1      	movs	r0, #177	@ 0xb1
 8004bd6:	f7ff ff93 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0x01);
 8004bda:	2001      	movs	r0, #1
 8004bdc:	f7ff ffb2 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 8004be0:	202c      	movs	r0, #44	@ 0x2c
 8004be2:	f7ff ffaf 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 8004be6:	202d      	movs	r0, #45	@ 0x2d
 8004be8:	f7ff ffac 	bl	8004b44 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_FRMCTR2);
 8004bec:	20b2      	movs	r0, #178	@ 0xb2
 8004bee:	f7ff ff87 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0x01);
 8004bf2:	2001      	movs	r0, #1
 8004bf4:	f7ff ffa6 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 8004bf8:	202c      	movs	r0, #44	@ 0x2c
 8004bfa:	f7ff ffa3 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 8004bfe:	202d      	movs	r0, #45	@ 0x2d
 8004c00:	f7ff ffa0 	bl	8004b44 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_FRMCTR3);
 8004c04:	20b3      	movs	r0, #179	@ 0xb3
 8004c06:	f7ff ff7b 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0x01);
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	f7ff ff9a 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 8004c10:	202c      	movs	r0, #44	@ 0x2c
 8004c12:	f7ff ff97 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 8004c16:	202d      	movs	r0, #45	@ 0x2d
 8004c18:	f7ff ff94 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x01);
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	f7ff ff91 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 8004c22:	202c      	movs	r0, #44	@ 0x2c
 8004c24:	f7ff ff8e 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 8004c28:	202d      	movs	r0, #45	@ 0x2d
 8004c2a:	f7ff ff8b 	bl	8004b44 <ST7735_WriteData>

    // 4: Display inversion control
    ST7735_WriteCommand(ST7735_INVCTR);
 8004c2e:	20b4      	movs	r0, #180	@ 0xb4
 8004c30:	f7ff ff66 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0x07);
 8004c34:	2007      	movs	r0, #7
 8004c36:	f7ff ff85 	bl	8004b44 <ST7735_WriteData>

    // 5: Power control
    ST7735_WriteCommand(ST7735_PWCTR1);
 8004c3a:	20c0      	movs	r0, #192	@ 0xc0
 8004c3c:	f7ff ff60 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0xA2);
 8004c40:	20a2      	movs	r0, #162	@ 0xa2
 8004c42:	f7ff ff7f 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x02);
 8004c46:	2002      	movs	r0, #2
 8004c48:	f7ff ff7c 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x84);
 8004c4c:	2084      	movs	r0, #132	@ 0x84
 8004c4e:	f7ff ff79 	bl	8004b44 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_PWCTR2);
 8004c52:	20c1      	movs	r0, #193	@ 0xc1
 8004c54:	f7ff ff54 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0xC5);
 8004c58:	20c5      	movs	r0, #197	@ 0xc5
 8004c5a:	f7ff ff73 	bl	8004b44 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_PWCTR3);
 8004c5e:	20c2      	movs	r0, #194	@ 0xc2
 8004c60:	f7ff ff4e 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0x0A);
 8004c64:	200a      	movs	r0, #10
 8004c66:	f7ff ff6d 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x00);
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f7ff ff6a 	bl	8004b44 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_PWCTR4);
 8004c70:	20c3      	movs	r0, #195	@ 0xc3
 8004c72:	f7ff ff45 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0x8A);
 8004c76:	208a      	movs	r0, #138	@ 0x8a
 8004c78:	f7ff ff64 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2A);
 8004c7c:	202a      	movs	r0, #42	@ 0x2a
 8004c7e:	f7ff ff61 	bl	8004b44 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_PWCTR5);
 8004c82:	20c4      	movs	r0, #196	@ 0xc4
 8004c84:	f7ff ff3c 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0x8A);
 8004c88:	208a      	movs	r0, #138	@ 0x8a
 8004c8a:	f7ff ff5b 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0xEE);
 8004c8e:	20ee      	movs	r0, #238	@ 0xee
 8004c90:	f7ff ff58 	bl	8004b44 <ST7735_WriteData>

    // 6: VCOM control
    ST7735_WriteCommand(ST7735_VMCTR1);
 8004c94:	20c5      	movs	r0, #197	@ 0xc5
 8004c96:	f7ff ff33 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0x0E);
 8004c9a:	200e      	movs	r0, #14
 8004c9c:	f7ff ff52 	bl	8004b44 <ST7735_WriteData>

    // 7: Inversion on
    ST7735_WriteCommand(ST7735_INVON);
 8004ca0:	2021      	movs	r0, #33	@ 0x21
 8004ca2:	f7ff ff2d 	bl	8004b00 <ST7735_WriteCommand>

    // 8: Memory access control
    ST7735_WriteCommand(ST7735_MADCTL);
 8004ca6:	2036      	movs	r0, #54	@ 0x36
 8004ca8:	f7ff ff2a 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0xA8); // Landscape rotated 180° с правильным порядком цветов (0xA0 + BGR бит)
 8004cac:	20a8      	movs	r0, #168	@ 0xa8
 8004cae:	f7ff ff49 	bl	8004b44 <ST7735_WriteData>

    // 9: Color mode
    ST7735_WriteCommand(ST7735_COLMOD);
 8004cb2:	203a      	movs	r0, #58	@ 0x3a
 8004cb4:	f7ff ff24 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0x05); // 16-bit color
 8004cb8:	2005      	movs	r0, #5
 8004cba:	f7ff ff43 	bl	8004b44 <ST7735_WriteData>

    // 10: Gamma correction
    ST7735_WriteCommand(ST7735_GMCTRP1);
 8004cbe:	20e0      	movs	r0, #224	@ 0xe0
 8004cc0:	f7ff ff1e 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0x02);
 8004cc4:	2002      	movs	r0, #2
 8004cc6:	f7ff ff3d 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x1c);
 8004cca:	201c      	movs	r0, #28
 8004ccc:	f7ff ff3a 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x07);
 8004cd0:	2007      	movs	r0, #7
 8004cd2:	f7ff ff37 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x12);
 8004cd6:	2012      	movs	r0, #18
 8004cd8:	f7ff ff34 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x37);
 8004cdc:	2037      	movs	r0, #55	@ 0x37
 8004cde:	f7ff ff31 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x32);
 8004ce2:	2032      	movs	r0, #50	@ 0x32
 8004ce4:	f7ff ff2e 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x29);
 8004ce8:	2029      	movs	r0, #41	@ 0x29
 8004cea:	f7ff ff2b 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2d);
 8004cee:	202d      	movs	r0, #45	@ 0x2d
 8004cf0:	f7ff ff28 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x29);
 8004cf4:	2029      	movs	r0, #41	@ 0x29
 8004cf6:	f7ff ff25 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x25);
 8004cfa:	2025      	movs	r0, #37	@ 0x25
 8004cfc:	f7ff ff22 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2B);
 8004d00:	202b      	movs	r0, #43	@ 0x2b
 8004d02:	f7ff ff1f 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x39);
 8004d06:	2039      	movs	r0, #57	@ 0x39
 8004d08:	f7ff ff1c 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x00);
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f7ff ff19 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x01);
 8004d12:	2001      	movs	r0, #1
 8004d14:	f7ff ff16 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x03);
 8004d18:	2003      	movs	r0, #3
 8004d1a:	f7ff ff13 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x10);
 8004d1e:	2010      	movs	r0, #16
 8004d20:	f7ff ff10 	bl	8004b44 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_GMCTRN1);
 8004d24:	20e1      	movs	r0, #225	@ 0xe1
 8004d26:	f7ff feeb 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData(0x03);
 8004d2a:	2003      	movs	r0, #3
 8004d2c:	f7ff ff0a 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x1d);
 8004d30:	201d      	movs	r0, #29
 8004d32:	f7ff ff07 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x07);
 8004d36:	2007      	movs	r0, #7
 8004d38:	f7ff ff04 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x06);
 8004d3c:	2006      	movs	r0, #6
 8004d3e:	f7ff ff01 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2E);
 8004d42:	202e      	movs	r0, #46	@ 0x2e
 8004d44:	f7ff fefe 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 8004d48:	202c      	movs	r0, #44	@ 0x2c
 8004d4a:	f7ff fefb 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x29);
 8004d4e:	2029      	movs	r0, #41	@ 0x29
 8004d50:	f7ff fef8 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 8004d54:	202d      	movs	r0, #45	@ 0x2d
 8004d56:	f7ff fef5 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2E);
 8004d5a:	202e      	movs	r0, #46	@ 0x2e
 8004d5c:	f7ff fef2 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x2E);
 8004d60:	202e      	movs	r0, #46	@ 0x2e
 8004d62:	f7ff feef 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x37);
 8004d66:	2037      	movs	r0, #55	@ 0x37
 8004d68:	f7ff feec 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x3F);
 8004d6c:	203f      	movs	r0, #63	@ 0x3f
 8004d6e:	f7ff fee9 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x00);
 8004d72:	2000      	movs	r0, #0
 8004d74:	f7ff fee6 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x00);
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f7ff fee3 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x02);
 8004d7e:	2002      	movs	r0, #2
 8004d80:	f7ff fee0 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData(0x10);
 8004d84:	2010      	movs	r0, #16
 8004d86:	f7ff fedd 	bl	8004b44 <ST7735_WriteData>

    // 11: Normal display on
    ST7735_WriteCommand(ST7735_NORON);
 8004d8a:	2013      	movs	r0, #19
 8004d8c:	f7ff feb8 	bl	8004b00 <ST7735_WriteCommand>
    HAL_Delay(10);
 8004d90:	200a      	movs	r0, #10
 8004d92:	f000 f8f7 	bl	8004f84 <HAL_Delay>

    // 12: Display on
    ST7735_WriteCommand(ST7735_DISPON);
 8004d96:	2029      	movs	r0, #41	@ 0x29
 8004d98:	f7ff feb2 	bl	8004b00 <ST7735_WriteCommand>
    HAL_Delay(100);
 8004d9c:	2064      	movs	r0, #100	@ 0x64
 8004d9e:	f000 f8f1 	bl	8004f84 <HAL_Delay>

    LCD_CS_HIGH();
 8004da2:	2201      	movs	r2, #1
 8004da4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004da8:	4802      	ldr	r0, [pc, #8]	@ (8004db4 <ST7735_Init+0x22c>)
 8004daa:	f005 f99b 	bl	800a0e4 <HAL_GPIO_WritePin>
}
 8004dae:	bf00      	nop
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	58021000 	.word	0x58021000

08004db8 <ST7735_AddrSet>:
/**
 * @brief Устанавливает "окно" для отрисовки.
 * @note Использует смещения из lcd.h.
 */
void ST7735_AddrSet(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	4608      	mov	r0, r1
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4623      	mov	r3, r4
 8004dc8:	80fb      	strh	r3, [r7, #6]
 8004dca:	4603      	mov	r3, r0
 8004dcc:	80bb      	strh	r3, [r7, #4]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	807b      	strh	r3, [r7, #2]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	803b      	strh	r3, [r7, #0]
    ST7735_WriteCommand(ST7735_CASET);
 8004dd6:	202a      	movs	r0, #42	@ 0x2a
 8004dd8:	f7ff fe92 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData((x1 + LCD_X_SHIFT) >> 8);
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	3301      	adds	r3, #1
 8004de0:	121b      	asrs	r3, r3, #8
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fead 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData((x1 + LCD_X_SHIFT) & 0xFF);
 8004dea:	88fb      	ldrh	r3, [r7, #6]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	3301      	adds	r3, #1
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff fea6 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData((x2 + LCD_X_SHIFT) >> 8);
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	121b      	asrs	r3, r3, #8
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fe9f 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData((x2 + LCD_X_SHIFT) & 0xFF);
 8004e06:	887b      	ldrh	r3, [r7, #2]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fe98 	bl	8004b44 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_RASET);
 8004e14:	202b      	movs	r0, #43	@ 0x2b
 8004e16:	f7ff fe73 	bl	8004b00 <ST7735_WriteCommand>
    ST7735_WriteData((y1 + LCD_Y_SHIFT) >> 8);
 8004e1a:	88bb      	ldrh	r3, [r7, #4]
 8004e1c:	331a      	adds	r3, #26
 8004e1e:	121b      	asrs	r3, r3, #8
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fe8e 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData((y1 + LCD_Y_SHIFT) & 0xFF);
 8004e28:	88bb      	ldrh	r3, [r7, #4]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	331a      	adds	r3, #26
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff fe87 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData((y2 + LCD_Y_SHIFT) >> 8);
 8004e36:	883b      	ldrh	r3, [r7, #0]
 8004e38:	331a      	adds	r3, #26
 8004e3a:	121b      	asrs	r3, r3, #8
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff fe80 	bl	8004b44 <ST7735_WriteData>
    ST7735_WriteData((y2 + LCD_Y_SHIFT) & 0xFF);
 8004e44:	883b      	ldrh	r3, [r7, #0]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	331a      	adds	r3, #26
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fe79 	bl	8004b44 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_RAMWR);
 8004e52:	202c      	movs	r0, #44	@ 0x2c
 8004e54:	f7ff fe54 	bl	8004b00 <ST7735_WriteCommand>
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd90      	pop	{r4, r7, pc}

08004e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e66:	2003      	movs	r0, #3
 8004e68:	f002 f982 	bl	8007170 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e6c:	f007 fa7e 	bl	800c36c <HAL_RCC_GetSysClockFreq>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4b15      	ldr	r3, [pc, #84]	@ (8004ec8 <HAL_Init+0x68>)
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	0a1b      	lsrs	r3, r3, #8
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	4913      	ldr	r1, [pc, #76]	@ (8004ecc <HAL_Init+0x6c>)
 8004e7e:	5ccb      	ldrb	r3, [r1, r3]
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
 8004e88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec8 <HAL_Init+0x68>)
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	4a0e      	ldr	r2, [pc, #56]	@ (8004ecc <HAL_Init+0x6c>)
 8004e94:	5cd3      	ldrb	r3, [r2, r3]
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8004ed0 <HAL_Init+0x70>)
 8004ea2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ed4 <HAL_Init+0x74>)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004eaa:	200f      	movs	r0, #15
 8004eac:	f000 f814 	bl	8004ed8 <HAL_InitTick>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e002      	b.n	8004ec0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004eba:	f7fe f85f 	bl	8002f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	58024400 	.word	0x58024400
 8004ecc:	0801d504 	.word	0x0801d504
 8004ed0:	2400001c 	.word	0x2400001c
 8004ed4:	24000018 	.word	0x24000018

08004ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004ee0:	4b15      	ldr	r3, [pc, #84]	@ (8004f38 <HAL_InitTick+0x60>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e021      	b.n	8004f30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004eec:	4b13      	ldr	r3, [pc, #76]	@ (8004f3c <HAL_InitTick+0x64>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	4b11      	ldr	r3, [pc, #68]	@ (8004f38 <HAL_InitTick+0x60>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f02:	4618      	mov	r0, r3
 8004f04:	f002 f975 	bl	80071f2 <HAL_SYSTICK_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e00e      	b.n	8004f30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b0f      	cmp	r3, #15
 8004f16:	d80a      	bhi.n	8004f2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f18:	2200      	movs	r2, #0
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	f002 f931 	bl	8007186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f24:	4a06      	ldr	r2, [pc, #24]	@ (8004f40 <HAL_InitTick+0x68>)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e000      	b.n	8004f30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	24000038 	.word	0x24000038
 8004f3c:	24000018 	.word	0x24000018
 8004f40:	24000034 	.word	0x24000034

08004f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f48:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <HAL_IncTick+0x20>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	4b06      	ldr	r3, [pc, #24]	@ (8004f68 <HAL_IncTick+0x24>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4413      	add	r3, r2
 8004f54:	4a04      	ldr	r2, [pc, #16]	@ (8004f68 <HAL_IncTick+0x24>)
 8004f56:	6013      	str	r3, [r2, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	24000038 	.word	0x24000038
 8004f68:	2400d8c0 	.word	0x2400d8c0

08004f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f70:	4b03      	ldr	r3, [pc, #12]	@ (8004f80 <HAL_GetTick+0x14>)
 8004f72:	681b      	ldr	r3, [r3, #0]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	2400d8c0 	.word	0x2400d8c0

08004f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f8c:	f7ff ffee 	bl	8004f6c <HAL_GetTick>
 8004f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9c:	d005      	beq.n	8004faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc8 <HAL_Delay+0x44>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004faa:	bf00      	nop
 8004fac:	f7ff ffde 	bl	8004f6c <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d8f7      	bhi.n	8004fac <HAL_Delay+0x28>
  {
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	bf00      	nop
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	24000038 	.word	0x24000038

08004fcc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	609a      	str	r2, [r3, #8]
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a18      	ldr	r2, [pc, #96]	@ (80050a4 <LL_ADC_SetChannelPreselection+0x70>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d027      	beq.n	8005096 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800504c:	2b00      	cmp	r3, #0
 800504e:	d107      	bne.n	8005060 <LL_ADC_SetChannelPreselection+0x2c>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	0e9b      	lsrs	r3, r3, #26
 8005054:	f003 031f 	and.w	r3, r3, #31
 8005058:	2201      	movs	r2, #1
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	e015      	b.n	800508c <LL_ADC_SetChannelPreselection+0x58>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8005076:	2320      	movs	r3, #32
 8005078:	e003      	b.n	8005082 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	2201      	movs	r2, #1
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	69d2      	ldr	r2, [r2, #28]
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	58026000 	.word	0x58026000

080050a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3360      	adds	r3, #96	@ 0x60
 80050ba:	461a      	mov	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4a10      	ldr	r2, [pc, #64]	@ (8005108 <LL_ADC_SetOffset+0x60>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d10b      	bne.n	80050e4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	4313      	orrs	r3, r2
 80050da:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80050e2:	e00b      	b.n	80050fc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	430b      	orrs	r3, r1
 80050f6:	431a      	orrs	r2, r3
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	601a      	str	r2, [r3, #0]
}
 80050fc:	bf00      	nop
 80050fe:	371c      	adds	r7, #28
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	58026000 	.word	0x58026000

0800510c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3360      	adds	r3, #96	@ 0x60
 800511a:	461a      	mov	r2, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 031f 	and.w	r3, r3, #31
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	fa01 f303 	lsl.w	r3, r1, r3
 8005158:	431a      	orrs	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	611a      	str	r2, [r3, #16]
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4a0c      	ldr	r2, [pc, #48]	@ (80051ac <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00e      	beq.n	800519e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3360      	adds	r3, #96	@ 0x60
 8005184:	461a      	mov	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	431a      	orrs	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	601a      	str	r2, [r3, #0]
  }
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	58026000 	.word	0x58026000

080051b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a0c      	ldr	r2, [pc, #48]	@ (80051f0 <LL_ADC_SetOffsetSaturation+0x40>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d10e      	bne.n	80051e2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3360      	adds	r3, #96	@ 0x60
 80051c8:	461a      	mov	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	431a      	orrs	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	58026000 	.word	0x58026000

080051f4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a0c      	ldr	r2, [pc, #48]	@ (8005234 <LL_ADC_SetOffsetSign+0x40>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d10e      	bne.n	8005226 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3360      	adds	r3, #96	@ 0x60
 800520c:	461a      	mov	r2, r3
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	431a      	orrs	r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	58026000 	.word	0x58026000

08005238 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3360      	adds	r3, #96	@ 0x60
 8005248:	461a      	mov	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4a0c      	ldr	r2, [pc, #48]	@ (8005288 <LL_ADC_SetOffsetState+0x50>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d108      	bne.n	800526c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	431a      	orrs	r2, r3
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800526a:	e007      	b.n	800527c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	431a      	orrs	r2, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	601a      	str	r2, [r3, #0]
}
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	58026000 	.word	0x58026000

0800528c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80052a0:	2301      	movs	r3, #1
 80052a2:	e000      	b.n	80052a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b087      	sub	sp, #28
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3330      	adds	r3, #48	@ 0x30
 80052c2:	461a      	mov	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	f003 030c 	and.w	r3, r3, #12
 80052ce:	4413      	add	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	211f      	movs	r1, #31
 80052de:	fa01 f303 	lsl.w	r3, r1, r3
 80052e2:	43db      	mvns	r3, r3
 80052e4:	401a      	ands	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	0e9b      	lsrs	r3, r3, #26
 80052ea:	f003 011f 	and.w	r1, r3, #31
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f003 031f 	and.w	r3, r3, #31
 80052f4:	fa01 f303 	lsl.w	r3, r1, r3
 80052f8:	431a      	orrs	r2, r3
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f023 0203 	bic.w	r2, r3, #3
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60da      	str	r2, [r3, #12]
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f043 0201 	orr.w	r2, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	60da      	str	r2, [r3, #12]
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a08      	ldr	r2, [pc, #32]	@ (8005380 <LL_ADC_REG_SetDMATransferMode+0x30>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d107      	bne.n	8005372 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f023 0203 	bic.w	r2, r3, #3
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60da      	str	r2, [r3, #12]
  }
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	58026000 	.word	0x58026000

08005384 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3314      	adds	r3, #20
 8005394:	461a      	mov	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	0e5b      	lsrs	r3, r3, #25
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	4413      	add	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	0d1b      	lsrs	r3, r3, #20
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	2107      	movs	r1, #7
 80053b2:	fa01 f303 	lsl.w	r3, r1, r3
 80053b6:	43db      	mvns	r3, r3
 80053b8:	401a      	ands	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	0d1b      	lsrs	r3, r3, #20
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	fa01 f303 	lsl.w	r3, r1, r3
 80053c8:	431a      	orrs	r2, r3
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005454 <LL_ADC_SetChannelSingleDiff+0x78>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d115      	bne.n	800541c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053fc:	43db      	mvns	r3, r3
 80053fe:	401a      	ands	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f003 0318 	and.w	r3, r3, #24
 8005406:	4914      	ldr	r1, [pc, #80]	@ (8005458 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005408:	40d9      	lsrs	r1, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	400b      	ands	r3, r1
 800540e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005412:	431a      	orrs	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800541a:	e014      	b.n	8005446 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005428:	43db      	mvns	r3, r3
 800542a:	401a      	ands	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f003 0318 	and.w	r3, r3, #24
 8005432:	4909      	ldr	r1, [pc, #36]	@ (8005458 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005434:	40d9      	lsrs	r1, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	400b      	ands	r3, r1
 800543a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800543e:	431a      	orrs	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	58026000 	.word	0x58026000
 8005458:	000fffff 	.word	0x000fffff

0800545c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 031f 	and.w	r3, r3, #31
}
 800546c:	4618      	mov	r0, r3
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	4b04      	ldr	r3, [pc, #16]	@ (8005498 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005486:	4013      	ands	r3, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6093      	str	r3, [r2, #8]
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	5fffffc0 	.word	0x5fffffc0

0800549c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054b0:	d101      	bne.n	80054b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	4b05      	ldr	r3, [pc, #20]	@ (80054e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80054d2:	4013      	ands	r3, r2
 80054d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	6fffffc0 	.word	0x6fffffc0

080054ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005500:	d101      	bne.n	8005506 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005502:	2301      	movs	r3, #1
 8005504:	e000      	b.n	8005508 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <LL_ADC_Enable+0x24>)
 8005522:	4013      	ands	r3, r2
 8005524:	f043 0201 	orr.w	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	7fffffc0 	.word	0x7fffffc0

0800553c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <LL_ADC_Disable+0x24>)
 800554a:	4013      	ands	r3, r2
 800554c:	f043 0202 	orr.w	r2, r3, #2
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	7fffffc0 	.word	0x7fffffc0

08005564 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <LL_ADC_IsEnabled+0x18>
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <LL_ADC_IsEnabled+0x1a>
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d101      	bne.n	80055a2 <LL_ADC_IsDisableOngoing+0x18>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <LL_ADC_IsDisableOngoing+0x1a>
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <LL_ADC_REG_StartConversion+0x24>)
 80055be:	4013      	ands	r3, r2
 80055c0:	f043 0204 	orr.w	r2, r3, #4
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	7fffffc0 	.word	0x7fffffc0

080055d8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	4b05      	ldr	r3, [pc, #20]	@ (80055fc <LL_ADC_REG_StopConversion+0x24>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	f043 0210 	orr.w	r2, r3, #16
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	7fffffc0 	.word	0x7fffffc0

08005600 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b04      	cmp	r3, #4
 8005612:	d101      	bne.n	8005618 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	4b05      	ldr	r3, [pc, #20]	@ (800564c <LL_ADC_INJ_StopConversion+0x24>)
 8005636:	4013      	ands	r3, r2
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	7fffffc0 	.word	0x7fffffc0

08005650 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b08      	cmp	r3, #8
 8005662:	d101      	bne.n	8005668 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b089      	sub	sp, #36	@ 0x24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005684:	2300      	movs	r3, #0
 8005686:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e1ee      	b.n	8005a70 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7fd fc85 	bl	8002fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff feef 	bl	800549c <LL_ADC_IsDeepPowerDownEnabled>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff fed5 	bl	8005478 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff ff0a 	bl	80054ec <LL_ADC_IsInternalRegulatorEnabled>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d114      	bne.n	8005708 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff feee 	bl	80054c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056e8:	4b8e      	ldr	r3, [pc, #568]	@ (8005924 <HAL_ADC_Init+0x2ac>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	099b      	lsrs	r3, r3, #6
 80056ee:	4a8e      	ldr	r2, [pc, #568]	@ (8005928 <HAL_ADC_Init+0x2b0>)
 80056f0:	fba2 2303 	umull	r2, r3, r2, r3
 80056f4:	099b      	lsrs	r3, r3, #6
 80056f6:	3301      	adds	r3, #1
 80056f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80056fa:	e002      	b.n	8005702 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	3b01      	subs	r3, #1
 8005700:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f9      	bne.n	80056fc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff feed 	bl	80054ec <LL_ADC_IsInternalRegulatorEnabled>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10d      	bne.n	8005734 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800571c:	f043 0210 	orr.w	r2, r3, #16
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005728:	f043 0201 	orr.w	r2, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff ff61 	bl	8005600 <LL_ADC_REG_IsConversionOngoing>
 800573e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b00      	cmp	r3, #0
 800574a:	f040 8188 	bne.w	8005a5e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f040 8184 	bne.w	8005a5e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800575e:	f043 0202 	orr.w	r2, r3, #2
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fefa 	bl	8005564 <LL_ADC_IsEnabled>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d136      	bne.n	80057e4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a6c      	ldr	r2, [pc, #432]	@ (800592c <HAL_ADC_Init+0x2b4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_ADC_Init+0x112>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a6a      	ldr	r2, [pc, #424]	@ (8005930 <HAL_ADC_Init+0x2b8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d10e      	bne.n	80057a8 <HAL_ADC_Init+0x130>
 800578a:	4868      	ldr	r0, [pc, #416]	@ (800592c <HAL_ADC_Init+0x2b4>)
 800578c:	f7ff feea 	bl	8005564 <LL_ADC_IsEnabled>
 8005790:	4604      	mov	r4, r0
 8005792:	4867      	ldr	r0, [pc, #412]	@ (8005930 <HAL_ADC_Init+0x2b8>)
 8005794:	f7ff fee6 	bl	8005564 <LL_ADC_IsEnabled>
 8005798:	4603      	mov	r3, r0
 800579a:	4323      	orrs	r3, r4
 800579c:	2b00      	cmp	r3, #0
 800579e:	bf0c      	ite	eq
 80057a0:	2301      	moveq	r3, #1
 80057a2:	2300      	movne	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	e008      	b.n	80057ba <HAL_ADC_Init+0x142>
 80057a8:	4862      	ldr	r0, [pc, #392]	@ (8005934 <HAL_ADC_Init+0x2bc>)
 80057aa:	f7ff fedb 	bl	8005564 <LL_ADC_IsEnabled>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bf0c      	ite	eq
 80057b4:	2301      	moveq	r3, #1
 80057b6:	2300      	movne	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d012      	beq.n	80057e4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a5a      	ldr	r2, [pc, #360]	@ (800592c <HAL_ADC_Init+0x2b4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_ADC_Init+0x15a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a58      	ldr	r2, [pc, #352]	@ (8005930 <HAL_ADC_Init+0x2b8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d101      	bne.n	80057d6 <HAL_ADC_Init+0x15e>
 80057d2:	4a59      	ldr	r2, [pc, #356]	@ (8005938 <HAL_ADC_Init+0x2c0>)
 80057d4:	e000      	b.n	80057d8 <HAL_ADC_Init+0x160>
 80057d6:	4a59      	ldr	r2, [pc, #356]	@ (800593c <HAL_ADC_Init+0x2c4>)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	4619      	mov	r1, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	f7ff fbf4 	bl	8004fcc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a52      	ldr	r2, [pc, #328]	@ (8005934 <HAL_ADC_Init+0x2bc>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d129      	bne.n	8005842 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	7e5b      	ldrb	r3, [r3, #25]
 80057f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80057f8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80057fe:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d013      	beq.n	8005830 <HAL_ADC_Init+0x1b8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b0c      	cmp	r3, #12
 800580e:	d00d      	beq.n	800582c <HAL_ADC_Init+0x1b4>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b1c      	cmp	r3, #28
 8005816:	d007      	beq.n	8005828 <HAL_ADC_Init+0x1b0>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b18      	cmp	r3, #24
 800581e:	d101      	bne.n	8005824 <HAL_ADC_Init+0x1ac>
 8005820:	2318      	movs	r3, #24
 8005822:	e006      	b.n	8005832 <HAL_ADC_Init+0x1ba>
 8005824:	2300      	movs	r3, #0
 8005826:	e004      	b.n	8005832 <HAL_ADC_Init+0x1ba>
 8005828:	2310      	movs	r3, #16
 800582a:	e002      	b.n	8005832 <HAL_ADC_Init+0x1ba>
 800582c:	2308      	movs	r3, #8
 800582e:	e000      	b.n	8005832 <HAL_ADC_Init+0x1ba>
 8005830:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8005832:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800583a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800583c:	4313      	orrs	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
 8005840:	e00e      	b.n	8005860 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	7e5b      	ldrb	r3, [r3, #25]
 8005846:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800584c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005852:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800585a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800585c:	4313      	orrs	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d106      	bne.n	8005878 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586e:	3b01      	subs	r3, #1
 8005870:	045b      	lsls	r3, r3, #17
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4313      	orrs	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587c:	2b00      	cmp	r3, #0
 800587e:	d009      	beq.n	8005894 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005884:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	4313      	orrs	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a26      	ldr	r2, [pc, #152]	@ (8005934 <HAL_ADC_Init+0x2bc>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d115      	bne.n	80058ca <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	4b26      	ldr	r3, [pc, #152]	@ (8005940 <HAL_ADC_Init+0x2c8>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	69b9      	ldr	r1, [r7, #24]
 80058ae:	430b      	orrs	r3, r1
 80058b0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	611a      	str	r2, [r3, #16]
 80058c8:	e009      	b.n	80058de <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005944 <HAL_ADC_Init+0x2cc>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	69b9      	ldr	r1, [r7, #24]
 80058da:	430b      	orrs	r3, r1
 80058dc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff fe8c 	bl	8005600 <LL_ADC_REG_IsConversionOngoing>
 80058e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff feae 	bl	8005650 <LL_ADC_INJ_IsConversionOngoing>
 80058f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f040 808e 	bne.w	8005a1a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	f040 808a 	bne.w	8005a1a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a0a      	ldr	r2, [pc, #40]	@ (8005934 <HAL_ADC_Init+0x2bc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d11b      	bne.n	8005948 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	7e1b      	ldrb	r3, [r3, #24]
 8005914:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800591c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800591e:	4313      	orrs	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
 8005922:	e018      	b.n	8005956 <HAL_ADC_Init+0x2de>
 8005924:	24000018 	.word	0x24000018
 8005928:	053e2d63 	.word	0x053e2d63
 800592c:	40022000 	.word	0x40022000
 8005930:	40022100 	.word	0x40022100
 8005934:	58026000 	.word	0x58026000
 8005938:	40022300 	.word	0x40022300
 800593c:	58026300 	.word	0x58026300
 8005940:	fff04007 	.word	0xfff04007
 8005944:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	7e1b      	ldrb	r3, [r3, #24]
 800594c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8005952:	4313      	orrs	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	4b46      	ldr	r3, [pc, #280]	@ (8005a78 <HAL_ADC_Init+0x400>)
 800595e:	4013      	ands	r3, r2
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	69b9      	ldr	r1, [r7, #24]
 8005966:	430b      	orrs	r3, r1
 8005968:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005970:	2b01      	cmp	r3, #1
 8005972:	d137      	bne.n	80059e4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a3f      	ldr	r2, [pc, #252]	@ (8005a7c <HAL_ADC_Init+0x404>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d116      	bne.n	80059b2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a80 <HAL_ADC_Init+0x408>)
 800598c:	4013      	ands	r3, r2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005996:	4311      	orrs	r1, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800599c:	4311      	orrs	r1, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80059a2:	430a      	orrs	r2, r1
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0201 	orr.w	r2, r2, #1
 80059ae:	611a      	str	r2, [r3, #16]
 80059b0:	e020      	b.n	80059f4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	4b32      	ldr	r3, [pc, #200]	@ (8005a84 <HAL_ADC_Init+0x40c>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80059c0:	3a01      	subs	r2, #1
 80059c2:	0411      	lsls	r1, r2, #16
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80059c8:	4311      	orrs	r1, r2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80059ce:	4311      	orrs	r1, r2
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80059d4:	430a      	orrs	r2, r1
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	611a      	str	r2, [r3, #16]
 80059e2:	e007      	b.n	80059f4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0201 	bic.w	r2, r2, #1
 80059f2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005a7c <HAL_ADC_Init+0x404>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d002      	beq.n	8005a1a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f001 f8c1 	bl	8006b9c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d10c      	bne.n	8005a3c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a28:	f023 010f 	bic.w	r1, r3, #15
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	1e5a      	subs	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a3a:	e007      	b.n	8005a4c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 020f 	bic.w	r2, r2, #15
 8005a4a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a50:	f023 0303 	bic.w	r3, r3, #3
 8005a54:	f043 0201 	orr.w	r2, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	661a      	str	r2, [r3, #96]	@ 0x60
 8005a5c:	e007      	b.n	8005a6e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a62:	f043 0210 	orr.w	r2, r3, #16
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3724      	adds	r7, #36	@ 0x24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd90      	pop	{r4, r7, pc}
 8005a78:	ffffbffc 	.word	0xffffbffc
 8005a7c:	58026000 	.word	0x58026000
 8005a80:	fc00f81f 	.word	0xfc00f81f
 8005a84:	fc00f81e 	.word	0xfc00f81e

08005a88 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_ADC_Stop+0x16>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e021      	b.n	8005ae2 <HAL_ADC_Stop+0x5a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005aa6:	2103      	movs	r1, #3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fe3d 	bl	8006728 <ADC_ConversionStop>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10f      	bne.n	8005ad8 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 ff7b 	bl	80069b4 <ADC_Disable>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d107      	bne.n	8005ad8 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005acc:	4b07      	ldr	r3, [pc, #28]	@ (8005aec <HAL_ADC_Stop+0x64>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	f043 0201 	orr.w	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	ffffeefe 	.word	0xffffeefe

08005af0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a60      	ldr	r2, [pc, #384]	@ (8005c84 <HAL_ADC_Start_DMA+0x194>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <HAL_ADC_Start_DMA+0x20>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a5f      	ldr	r2, [pc, #380]	@ (8005c88 <HAL_ADC_Start_DMA+0x198>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d101      	bne.n	8005b14 <HAL_ADC_Start_DMA+0x24>
 8005b10:	4b5e      	ldr	r3, [pc, #376]	@ (8005c8c <HAL_ADC_Start_DMA+0x19c>)
 8005b12:	e000      	b.n	8005b16 <HAL_ADC_Start_DMA+0x26>
 8005b14:	4b5e      	ldr	r3, [pc, #376]	@ (8005c90 <HAL_ADC_Start_DMA+0x1a0>)
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff fca0 	bl	800545c <LL_ADC_GetMultimode>
 8005b1c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff fd6c 	bl	8005600 <LL_ADC_REG_IsConversionOngoing>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f040 80a2 	bne.w	8005c74 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_ADC_Start_DMA+0x4e>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e09d      	b.n	8005c7a <HAL_ADC_Start_DMA+0x18a>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d006      	beq.n	8005b5a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d003      	beq.n	8005b5a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b09      	cmp	r3, #9
 8005b56:	f040 8086 	bne.w	8005c66 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 fea0 	bl	80068a0 <ADC_Enable>
 8005b60:	4603      	mov	r3, r0
 8005b62:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d178      	bne.n	8005c5c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b6e:	4b49      	ldr	r3, [pc, #292]	@ (8005c94 <HAL_ADC_Start_DMA+0x1a4>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a42      	ldr	r2, [pc, #264]	@ (8005c88 <HAL_ADC_Start_DMA+0x198>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d002      	beq.n	8005b8a <HAL_ADC_Start_DMA+0x9a>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	e000      	b.n	8005b8c <HAL_ADC_Start_DMA+0x9c>
 8005b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c84 <HAL_ADC_Start_DMA+0x194>)
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d002      	beq.n	8005b9a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d105      	bne.n	8005ba6 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b9e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d006      	beq.n	8005bc0 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bb6:	f023 0206 	bic.w	r2, r3, #6
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	665a      	str	r2, [r3, #100]	@ 0x64
 8005bbe:	e002      	b.n	8005bc6 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bca:	4a33      	ldr	r2, [pc, #204]	@ (8005c98 <HAL_ADC_Start_DMA+0x1a8>)
 8005bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd2:	4a32      	ldr	r2, [pc, #200]	@ (8005c9c <HAL_ADC_Start_DMA+0x1ac>)
 8005bd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bda:	4a31      	ldr	r2, [pc, #196]	@ (8005ca0 <HAL_ADC_Start_DMA+0x1b0>)
 8005bdc:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	221c      	movs	r2, #28
 8005be4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0210 	orr.w	r2, r2, #16
 8005bfc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a28      	ldr	r2, [pc, #160]	@ (8005ca4 <HAL_ADC_Start_DMA+0x1b4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d10f      	bne.n	8005c28 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	4619      	mov	r1, r3
 8005c16:	4610      	mov	r0, r2
 8005c18:	f7ff fb9a 	bl	8005350 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fb85 	bl	8005330 <LL_ADC_EnableDMAReq>
 8005c26:	e007      	b.n	8005c38 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7ff fb69 	bl	800530a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3340      	adds	r3, #64	@ 0x40
 8005c42:	4619      	mov	r1, r3
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f002 f80a 	bl	8007c60 <HAL_DMA_Start_IT>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff fcab 	bl	80055b0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005c5a:	e00d      	b.n	8005c78 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8005c64:	e008      	b.n	8005c78 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005c72:	e001      	b.n	8005c78 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005c74:	2302      	movs	r3, #2
 8005c76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40022000 	.word	0x40022000
 8005c88:	40022100 	.word	0x40022100
 8005c8c:	40022300 	.word	0x40022300
 8005c90:	58026300 	.word	0x58026300
 8005c94:	fffff0fe 	.word	0xfffff0fe
 8005c98:	08006a73 	.word	0x08006a73
 8005c9c:	08006b4b 	.word	0x08006b4b
 8005ca0:	08006b67 	.word	0x08006b67
 8005ca4:	58026000 	.word	0x58026000

08005ca8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_ADC_Stop_DMA+0x16>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e04f      	b.n	8005d5e <HAL_ADC_Stop_DMA+0xb6>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005cc6:	2103      	movs	r1, #3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fd2d 	bl	8006728 <ADC_ConversionStop>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d13d      	bne.n	8005d54 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0203 	bic.w	r2, r2, #3
 8005ce6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d10f      	bne.n	8005d16 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f002 fa1a 	bl	8008134 <HAL_DMA_Abort>
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0210 	bic.w	r2, r2, #16
 8005d24:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d105      	bne.n	8005d38 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fe41 	bl	80069b4 <ADC_Disable>
 8005d32:	4603      	mov	r3, r0
 8005d34:	73fb      	strb	r3, [r7, #15]
 8005d36:	e002      	b.n	8005d3e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fe3b 	bl	80069b4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d107      	bne.n	8005d54 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005d48:	4b07      	ldr	r3, [pc, #28]	@ (8005d68 <HAL_ADC_Stop_DMA+0xc0>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	f043 0201 	orr.w	r2, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	661a      	str	r2, [r3, #96]	@ 0x60
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	ffffeefe 	.word	0xffffeefe

08005d6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005d80:	b590      	push	{r4, r7, lr}
 8005d82:	b0a5      	sub	sp, #148	@ 0x94
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d9a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	4aa4      	ldr	r2, [pc, #656]	@ (8006034 <HAL_ADC_ConfigChannel+0x2b4>)
 8005da2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d102      	bne.n	8005db4 <HAL_ADC_ConfigChannel+0x34>
 8005dae:	2302      	movs	r3, #2
 8005db0:	f000 bca2 	b.w	80066f8 <HAL_ADC_ConfigChannel+0x978>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fc1d 	bl	8005600 <LL_ADC_REG_IsConversionOngoing>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f040 8486 	bne.w	80066da <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	db31      	blt.n	8005e3a <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a97      	ldr	r2, [pc, #604]	@ (8006038 <HAL_ADC_ConfigChannel+0x2b8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d02c      	beq.n	8005e3a <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d108      	bne.n	8005dfe <HAL_ADC_ConfigChannel+0x7e>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	0e9b      	lsrs	r3, r3, #26
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	2201      	movs	r2, #1
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	e016      	b.n	8005e2c <HAL_ADC_ConfigChannel+0xac>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e06:	fa93 f3a3 	rbit	r3, r3
 8005e0a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005e0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e0e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005e10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8005e16:	2320      	movs	r3, #32
 8005e18:	e003      	b.n	8005e22 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8005e1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e1c:	fab3 f383 	clz	r3, r3
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	2201      	movs	r2, #1
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	69d1      	ldr	r1, [r2, #28]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6812      	ldr	r2, [r2, #0]
 8005e36:	430b      	orrs	r3, r1
 8005e38:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6859      	ldr	r1, [r3, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	f7ff fa33 	bl	80052b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff fbd5 	bl	8005600 <LL_ADC_REG_IsConversionOngoing>
 8005e56:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fbf6 	bl	8005650 <LL_ADC_INJ_IsConversionOngoing>
 8005e64:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f040 824a 	bne.w	8006306 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f040 8245 	bne.w	8006306 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f7ff fa7b 	bl	8005384 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a69      	ldr	r2, [pc, #420]	@ (8006038 <HAL_ADC_ConfigChannel+0x2b8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d10d      	bne.n	8005eb4 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	695a      	ldr	r2, [r3, #20]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	08db      	lsrs	r3, r3, #3
 8005ea4:	f003 0303 	and.w	r3, r3, #3
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005eb2:	e032      	b.n	8005f1a <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005eb4:	4b61      	ldr	r3, [pc, #388]	@ (800603c <HAL_ADC_ConfigChannel+0x2bc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ec0:	d10b      	bne.n	8005eda <HAL_ADC_ConfigChannel+0x15a>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	695a      	ldr	r2, [r3, #20]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	089b      	lsrs	r3, r3, #2
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	e01d      	b.n	8005f16 <HAL_ADC_ConfigChannel+0x196>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10b      	bne.n	8005f00 <HAL_ADC_ConfigChannel+0x180>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	089b      	lsrs	r3, r3, #2
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	e00a      	b.n	8005f16 <HAL_ADC_ConfigChannel+0x196>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	695a      	ldr	r2, [r3, #20]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	089b      	lsrs	r3, r3, #2
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d048      	beq.n	8005fb4 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6919      	ldr	r1, [r3, #16]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f32:	f7ff f8b9 	bl	80050a8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a3f      	ldr	r2, [pc, #252]	@ (8006038 <HAL_ADC_ConfigChannel+0x2b8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d119      	bne.n	8005f74 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	6919      	ldr	r1, [r3, #16]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f7ff f951 	bl	80051f4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6919      	ldr	r1, [r3, #16]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d102      	bne.n	8005f6a <HAL_ADC_ConfigChannel+0x1ea>
 8005f64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f68:	e000      	b.n	8005f6c <HAL_ADC_ConfigChannel+0x1ec>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f7ff f91f 	bl	80051b0 <LL_ADC_SetOffsetSaturation>
 8005f72:	e1c8      	b.n	8006306 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	6919      	ldr	r1, [r3, #16]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d102      	bne.n	8005f8c <HAL_ADC_ConfigChannel+0x20c>
 8005f86:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005f8a:	e000      	b.n	8005f8e <HAL_ADC_ConfigChannel+0x20e>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f7ff f8ec 	bl	800516c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	6919      	ldr	r1, [r3, #16]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	7e1b      	ldrb	r3, [r3, #24]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d102      	bne.n	8005faa <HAL_ADC_ConfigChannel+0x22a>
 8005fa4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005fa8:	e000      	b.n	8005fac <HAL_ADC_ConfigChannel+0x22c>
 8005faa:	2300      	movs	r3, #0
 8005fac:	461a      	mov	r2, r3
 8005fae:	f7ff f8c3 	bl	8005138 <LL_ADC_SetDataRightShift>
 8005fb2:	e1a8      	b.n	8006306 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8006038 <HAL_ADC_ConfigChannel+0x2b8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	f040 815b 	bne.w	8006276 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff f8a0 	bl	800510c <LL_ADC_GetOffsetChannel>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <HAL_ADC_ConfigChannel+0x26c>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2100      	movs	r1, #0
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff f895 	bl	800510c <LL_ADC_GetOffsetChannel>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	0e9b      	lsrs	r3, r3, #26
 8005fe6:	f003 021f 	and.w	r2, r3, #31
 8005fea:	e017      	b.n	800601c <HAL_ADC_ConfigChannel+0x29c>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff f88a 	bl	800510c <LL_ADC_GetOffsetChannel>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ffc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ffe:	fa93 f3a3 	rbit	r3, r3
 8006002:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006006:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800600e:	2320      	movs	r3, #32
 8006010:	e003      	b.n	800601a <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8006012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006014:	fab3 f383 	clz	r3, r3
 8006018:	b2db      	uxtb	r3, r3
 800601a:	461a      	mov	r2, r3
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <HAL_ADC_ConfigChannel+0x2c0>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	0e9b      	lsrs	r3, r3, #26
 800602e:	f003 031f 	and.w	r3, r3, #31
 8006032:	e017      	b.n	8006064 <HAL_ADC_ConfigChannel+0x2e4>
 8006034:	47ff0000 	.word	0x47ff0000
 8006038:	58026000 	.word	0x58026000
 800603c:	5c001000 	.word	0x5c001000
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006046:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006048:	fa93 f3a3 	rbit	r3, r3
 800604c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800604e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006050:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006052:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8006058:	2320      	movs	r3, #32
 800605a:	e003      	b.n	8006064 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800605c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800605e:	fab3 f383 	clz	r3, r3
 8006062:	b2db      	uxtb	r3, r3
 8006064:	429a      	cmp	r2, r3
 8006066:	d106      	bne.n	8006076 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2200      	movs	r2, #0
 800606e:	2100      	movs	r1, #0
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff f8e1 	bl	8005238 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2101      	movs	r1, #1
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff f845 	bl	800510c <LL_ADC_GetOffsetChannel>
 8006082:	4603      	mov	r3, r0
 8006084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10a      	bne.n	80060a2 <HAL_ADC_ConfigChannel+0x322>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2101      	movs	r1, #1
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff f83a 	bl	800510c <LL_ADC_GetOffsetChannel>
 8006098:	4603      	mov	r3, r0
 800609a:	0e9b      	lsrs	r3, r3, #26
 800609c:	f003 021f 	and.w	r2, r3, #31
 80060a0:	e017      	b.n	80060d2 <HAL_ADC_ConfigChannel+0x352>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2101      	movs	r1, #1
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff f82f 	bl	800510c <LL_ADC_GetOffsetChannel>
 80060ae:	4603      	mov	r3, r0
 80060b0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060b4:	fa93 f3a3 	rbit	r3, r3
 80060b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80060ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80060be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 80060c4:	2320      	movs	r3, #32
 80060c6:	e003      	b.n	80060d0 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 80060c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ca:	fab3 f383 	clz	r3, r3
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	461a      	mov	r2, r3
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d105      	bne.n	80060ea <HAL_ADC_ConfigChannel+0x36a>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	0e9b      	lsrs	r3, r3, #26
 80060e4:	f003 031f 	and.w	r3, r3, #31
 80060e8:	e011      	b.n	800610e <HAL_ADC_ConfigChannel+0x38e>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060f2:	fa93 f3a3 	rbit	r3, r3
 80060f6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80060f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80060fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8006102:	2320      	movs	r3, #32
 8006104:	e003      	b.n	800610e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8006106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006108:	fab3 f383 	clz	r3, r3
 800610c:	b2db      	uxtb	r3, r3
 800610e:	429a      	cmp	r2, r3
 8006110:	d106      	bne.n	8006120 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2200      	movs	r2, #0
 8006118:	2101      	movs	r1, #1
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff f88c 	bl	8005238 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2102      	movs	r1, #2
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fff0 	bl	800510c <LL_ADC_GetOffsetChannel>
 800612c:	4603      	mov	r3, r0
 800612e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <HAL_ADC_ConfigChannel+0x3cc>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2102      	movs	r1, #2
 800613c:	4618      	mov	r0, r3
 800613e:	f7fe ffe5 	bl	800510c <LL_ADC_GetOffsetChannel>
 8006142:	4603      	mov	r3, r0
 8006144:	0e9b      	lsrs	r3, r3, #26
 8006146:	f003 021f 	and.w	r2, r3, #31
 800614a:	e017      	b.n	800617c <HAL_ADC_ConfigChannel+0x3fc>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2102      	movs	r1, #2
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe ffda 	bl	800510c <LL_ADC_GetOffsetChannel>
 8006158:	4603      	mov	r3, r0
 800615a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615e:	fa93 f3a3 	rbit	r3, r3
 8006162:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006166:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800616e:	2320      	movs	r3, #32
 8006170:	e003      	b.n	800617a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8006172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006174:	fab3 f383 	clz	r3, r3
 8006178:	b2db      	uxtb	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006184:	2b00      	cmp	r3, #0
 8006186:	d105      	bne.n	8006194 <HAL_ADC_ConfigChannel+0x414>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	0e9b      	lsrs	r3, r3, #26
 800618e:	f003 031f 	and.w	r3, r3, #31
 8006192:	e011      	b.n	80061b8 <HAL_ADC_ConfigChannel+0x438>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619c:	fa93 f3a3 	rbit	r3, r3
 80061a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80061a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80061ac:	2320      	movs	r3, #32
 80061ae:	e003      	b.n	80061b8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	fab3 f383 	clz	r3, r3
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d106      	bne.n	80061ca <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2200      	movs	r2, #0
 80061c2:	2102      	movs	r1, #2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff f837 	bl	8005238 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2103      	movs	r1, #3
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe ff9b 	bl	800510c <LL_ADC_GetOffsetChannel>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <HAL_ADC_ConfigChannel+0x476>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2103      	movs	r1, #3
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe ff90 	bl	800510c <LL_ADC_GetOffsetChannel>
 80061ec:	4603      	mov	r3, r0
 80061ee:	0e9b      	lsrs	r3, r3, #26
 80061f0:	f003 021f 	and.w	r2, r3, #31
 80061f4:	e017      	b.n	8006226 <HAL_ADC_ConfigChannel+0x4a6>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2103      	movs	r1, #3
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe ff85 	bl	800510c <LL_ADC_GetOffsetChannel>
 8006202:	4603      	mov	r3, r0
 8006204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	fa93 f3a3 	rbit	r3, r3
 800620c:	61fb      	str	r3, [r7, #28]
  return result;
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006218:	2320      	movs	r3, #32
 800621a:	e003      	b.n	8006224 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621e:	fab3 f383 	clz	r3, r3
 8006222:	b2db      	uxtb	r3, r3
 8006224:	461a      	mov	r2, r3
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800622e:	2b00      	cmp	r3, #0
 8006230:	d105      	bne.n	800623e <HAL_ADC_ConfigChannel+0x4be>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	0e9b      	lsrs	r3, r3, #26
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	e011      	b.n	8006262 <HAL_ADC_ConfigChannel+0x4e2>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	fa93 f3a3 	rbit	r3, r3
 800624a:	613b      	str	r3, [r7, #16]
  return result;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8006256:	2320      	movs	r3, #32
 8006258:	e003      	b.n	8006262 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	fab3 f383 	clz	r3, r3
 8006260:	b2db      	uxtb	r3, r3
 8006262:	429a      	cmp	r2, r3
 8006264:	d14f      	bne.n	8006306 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2200      	movs	r2, #0
 800626c:	2103      	movs	r1, #3
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe ffe2 	bl	8005238 <LL_ADC_SetOffsetState>
 8006274:	e047      	b.n	8006306 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	069b      	lsls	r3, r3, #26
 8006286:	429a      	cmp	r2, r3
 8006288:	d107      	bne.n	800629a <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006298:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	069b      	lsls	r3, r3, #26
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d107      	bne.n	80062be <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80062bc:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	069b      	lsls	r3, r3, #26
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d107      	bne.n	80062e2 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80062e0:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	069b      	lsls	r3, r3, #26
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d107      	bne.n	8006306 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006304:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff f92a 	bl	8005564 <LL_ADC_IsEnabled>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	f040 81ea 	bne.w	80066ec <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6818      	ldr	r0, [r3, #0]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	6819      	ldr	r1, [r3, #0]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	461a      	mov	r2, r3
 8006326:	f7ff f859 	bl	80053dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	4a7a      	ldr	r2, [pc, #488]	@ (8006518 <HAL_ADC_ConfigChannel+0x798>)
 8006330:	4293      	cmp	r3, r2
 8006332:	f040 80e0 	bne.w	80064f6 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4977      	ldr	r1, [pc, #476]	@ (800651c <HAL_ADC_ConfigChannel+0x79c>)
 8006340:	428b      	cmp	r3, r1
 8006342:	d147      	bne.n	80063d4 <HAL_ADC_ConfigChannel+0x654>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4975      	ldr	r1, [pc, #468]	@ (8006520 <HAL_ADC_ConfigChannel+0x7a0>)
 800634a:	428b      	cmp	r3, r1
 800634c:	d040      	beq.n	80063d0 <HAL_ADC_ConfigChannel+0x650>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4974      	ldr	r1, [pc, #464]	@ (8006524 <HAL_ADC_ConfigChannel+0x7a4>)
 8006354:	428b      	cmp	r3, r1
 8006356:	d039      	beq.n	80063cc <HAL_ADC_ConfigChannel+0x64c>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4972      	ldr	r1, [pc, #456]	@ (8006528 <HAL_ADC_ConfigChannel+0x7a8>)
 800635e:	428b      	cmp	r3, r1
 8006360:	d032      	beq.n	80063c8 <HAL_ADC_ConfigChannel+0x648>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4971      	ldr	r1, [pc, #452]	@ (800652c <HAL_ADC_ConfigChannel+0x7ac>)
 8006368:	428b      	cmp	r3, r1
 800636a:	d02b      	beq.n	80063c4 <HAL_ADC_ConfigChannel+0x644>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	496f      	ldr	r1, [pc, #444]	@ (8006530 <HAL_ADC_ConfigChannel+0x7b0>)
 8006372:	428b      	cmp	r3, r1
 8006374:	d024      	beq.n	80063c0 <HAL_ADC_ConfigChannel+0x640>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	496e      	ldr	r1, [pc, #440]	@ (8006534 <HAL_ADC_ConfigChannel+0x7b4>)
 800637c:	428b      	cmp	r3, r1
 800637e:	d01d      	beq.n	80063bc <HAL_ADC_ConfigChannel+0x63c>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	496c      	ldr	r1, [pc, #432]	@ (8006538 <HAL_ADC_ConfigChannel+0x7b8>)
 8006386:	428b      	cmp	r3, r1
 8006388:	d016      	beq.n	80063b8 <HAL_ADC_ConfigChannel+0x638>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	496b      	ldr	r1, [pc, #428]	@ (800653c <HAL_ADC_ConfigChannel+0x7bc>)
 8006390:	428b      	cmp	r3, r1
 8006392:	d00f      	beq.n	80063b4 <HAL_ADC_ConfigChannel+0x634>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4969      	ldr	r1, [pc, #420]	@ (8006540 <HAL_ADC_ConfigChannel+0x7c0>)
 800639a:	428b      	cmp	r3, r1
 800639c:	d008      	beq.n	80063b0 <HAL_ADC_ConfigChannel+0x630>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4968      	ldr	r1, [pc, #416]	@ (8006544 <HAL_ADC_ConfigChannel+0x7c4>)
 80063a4:	428b      	cmp	r3, r1
 80063a6:	d101      	bne.n	80063ac <HAL_ADC_ConfigChannel+0x62c>
 80063a8:	4b67      	ldr	r3, [pc, #412]	@ (8006548 <HAL_ADC_ConfigChannel+0x7c8>)
 80063aa:	e0a0      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80063ac:	2300      	movs	r3, #0
 80063ae:	e09e      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80063b0:	4b66      	ldr	r3, [pc, #408]	@ (800654c <HAL_ADC_ConfigChannel+0x7cc>)
 80063b2:	e09c      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80063b4:	4b66      	ldr	r3, [pc, #408]	@ (8006550 <HAL_ADC_ConfigChannel+0x7d0>)
 80063b6:	e09a      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80063b8:	4b60      	ldr	r3, [pc, #384]	@ (800653c <HAL_ADC_ConfigChannel+0x7bc>)
 80063ba:	e098      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80063bc:	4b5e      	ldr	r3, [pc, #376]	@ (8006538 <HAL_ADC_ConfigChannel+0x7b8>)
 80063be:	e096      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80063c0:	4b64      	ldr	r3, [pc, #400]	@ (8006554 <HAL_ADC_ConfigChannel+0x7d4>)
 80063c2:	e094      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80063c4:	4b64      	ldr	r3, [pc, #400]	@ (8006558 <HAL_ADC_ConfigChannel+0x7d8>)
 80063c6:	e092      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80063c8:	4b64      	ldr	r3, [pc, #400]	@ (800655c <HAL_ADC_ConfigChannel+0x7dc>)
 80063ca:	e090      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80063cc:	4b64      	ldr	r3, [pc, #400]	@ (8006560 <HAL_ADC_ConfigChannel+0x7e0>)
 80063ce:	e08e      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e08c      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4962      	ldr	r1, [pc, #392]	@ (8006564 <HAL_ADC_ConfigChannel+0x7e4>)
 80063da:	428b      	cmp	r3, r1
 80063dc:	d140      	bne.n	8006460 <HAL_ADC_ConfigChannel+0x6e0>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	494f      	ldr	r1, [pc, #316]	@ (8006520 <HAL_ADC_ConfigChannel+0x7a0>)
 80063e4:	428b      	cmp	r3, r1
 80063e6:	d039      	beq.n	800645c <HAL_ADC_ConfigChannel+0x6dc>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	494d      	ldr	r1, [pc, #308]	@ (8006524 <HAL_ADC_ConfigChannel+0x7a4>)
 80063ee:	428b      	cmp	r3, r1
 80063f0:	d032      	beq.n	8006458 <HAL_ADC_ConfigChannel+0x6d8>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	494c      	ldr	r1, [pc, #304]	@ (8006528 <HAL_ADC_ConfigChannel+0x7a8>)
 80063f8:	428b      	cmp	r3, r1
 80063fa:	d02b      	beq.n	8006454 <HAL_ADC_ConfigChannel+0x6d4>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	494a      	ldr	r1, [pc, #296]	@ (800652c <HAL_ADC_ConfigChannel+0x7ac>)
 8006402:	428b      	cmp	r3, r1
 8006404:	d024      	beq.n	8006450 <HAL_ADC_ConfigChannel+0x6d0>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4949      	ldr	r1, [pc, #292]	@ (8006530 <HAL_ADC_ConfigChannel+0x7b0>)
 800640c:	428b      	cmp	r3, r1
 800640e:	d01d      	beq.n	800644c <HAL_ADC_ConfigChannel+0x6cc>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4947      	ldr	r1, [pc, #284]	@ (8006534 <HAL_ADC_ConfigChannel+0x7b4>)
 8006416:	428b      	cmp	r3, r1
 8006418:	d016      	beq.n	8006448 <HAL_ADC_ConfigChannel+0x6c8>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4946      	ldr	r1, [pc, #280]	@ (8006538 <HAL_ADC_ConfigChannel+0x7b8>)
 8006420:	428b      	cmp	r3, r1
 8006422:	d00f      	beq.n	8006444 <HAL_ADC_ConfigChannel+0x6c4>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4944      	ldr	r1, [pc, #272]	@ (800653c <HAL_ADC_ConfigChannel+0x7bc>)
 800642a:	428b      	cmp	r3, r1
 800642c:	d008      	beq.n	8006440 <HAL_ADC_ConfigChannel+0x6c0>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4944      	ldr	r1, [pc, #272]	@ (8006544 <HAL_ADC_ConfigChannel+0x7c4>)
 8006434:	428b      	cmp	r3, r1
 8006436:	d101      	bne.n	800643c <HAL_ADC_ConfigChannel+0x6bc>
 8006438:	4b43      	ldr	r3, [pc, #268]	@ (8006548 <HAL_ADC_ConfigChannel+0x7c8>)
 800643a:	e058      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 800643c:	2300      	movs	r3, #0
 800643e:	e056      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 8006440:	4b43      	ldr	r3, [pc, #268]	@ (8006550 <HAL_ADC_ConfigChannel+0x7d0>)
 8006442:	e054      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 8006444:	4b3d      	ldr	r3, [pc, #244]	@ (800653c <HAL_ADC_ConfigChannel+0x7bc>)
 8006446:	e052      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 8006448:	4b3b      	ldr	r3, [pc, #236]	@ (8006538 <HAL_ADC_ConfigChannel+0x7b8>)
 800644a:	e050      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 800644c:	4b41      	ldr	r3, [pc, #260]	@ (8006554 <HAL_ADC_ConfigChannel+0x7d4>)
 800644e:	e04e      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 8006450:	4b41      	ldr	r3, [pc, #260]	@ (8006558 <HAL_ADC_ConfigChannel+0x7d8>)
 8006452:	e04c      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 8006454:	4b41      	ldr	r3, [pc, #260]	@ (800655c <HAL_ADC_ConfigChannel+0x7dc>)
 8006456:	e04a      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 8006458:	4b41      	ldr	r3, [pc, #260]	@ (8006560 <HAL_ADC_ConfigChannel+0x7e0>)
 800645a:	e048      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 800645c:	2301      	movs	r3, #1
 800645e:	e046      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4940      	ldr	r1, [pc, #256]	@ (8006568 <HAL_ADC_ConfigChannel+0x7e8>)
 8006466:	428b      	cmp	r3, r1
 8006468:	d140      	bne.n	80064ec <HAL_ADC_ConfigChannel+0x76c>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	492c      	ldr	r1, [pc, #176]	@ (8006520 <HAL_ADC_ConfigChannel+0x7a0>)
 8006470:	428b      	cmp	r3, r1
 8006472:	d039      	beq.n	80064e8 <HAL_ADC_ConfigChannel+0x768>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	492a      	ldr	r1, [pc, #168]	@ (8006524 <HAL_ADC_ConfigChannel+0x7a4>)
 800647a:	428b      	cmp	r3, r1
 800647c:	d032      	beq.n	80064e4 <HAL_ADC_ConfigChannel+0x764>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4929      	ldr	r1, [pc, #164]	@ (8006528 <HAL_ADC_ConfigChannel+0x7a8>)
 8006484:	428b      	cmp	r3, r1
 8006486:	d02b      	beq.n	80064e0 <HAL_ADC_ConfigChannel+0x760>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4927      	ldr	r1, [pc, #156]	@ (800652c <HAL_ADC_ConfigChannel+0x7ac>)
 800648e:	428b      	cmp	r3, r1
 8006490:	d024      	beq.n	80064dc <HAL_ADC_ConfigChannel+0x75c>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4926      	ldr	r1, [pc, #152]	@ (8006530 <HAL_ADC_ConfigChannel+0x7b0>)
 8006498:	428b      	cmp	r3, r1
 800649a:	d01d      	beq.n	80064d8 <HAL_ADC_ConfigChannel+0x758>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4924      	ldr	r1, [pc, #144]	@ (8006534 <HAL_ADC_ConfigChannel+0x7b4>)
 80064a2:	428b      	cmp	r3, r1
 80064a4:	d016      	beq.n	80064d4 <HAL_ADC_ConfigChannel+0x754>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4923      	ldr	r1, [pc, #140]	@ (8006538 <HAL_ADC_ConfigChannel+0x7b8>)
 80064ac:	428b      	cmp	r3, r1
 80064ae:	d00f      	beq.n	80064d0 <HAL_ADC_ConfigChannel+0x750>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4926      	ldr	r1, [pc, #152]	@ (8006550 <HAL_ADC_ConfigChannel+0x7d0>)
 80064b6:	428b      	cmp	r3, r1
 80064b8:	d008      	beq.n	80064cc <HAL_ADC_ConfigChannel+0x74c>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	492b      	ldr	r1, [pc, #172]	@ (800656c <HAL_ADC_ConfigChannel+0x7ec>)
 80064c0:	428b      	cmp	r3, r1
 80064c2:	d101      	bne.n	80064c8 <HAL_ADC_ConfigChannel+0x748>
 80064c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006570 <HAL_ADC_ConfigChannel+0x7f0>)
 80064c6:	e012      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80064c8:	2300      	movs	r3, #0
 80064ca:	e010      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80064cc:	4b27      	ldr	r3, [pc, #156]	@ (800656c <HAL_ADC_ConfigChannel+0x7ec>)
 80064ce:	e00e      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80064d0:	4b1a      	ldr	r3, [pc, #104]	@ (800653c <HAL_ADC_ConfigChannel+0x7bc>)
 80064d2:	e00c      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80064d4:	4b18      	ldr	r3, [pc, #96]	@ (8006538 <HAL_ADC_ConfigChannel+0x7b8>)
 80064d6:	e00a      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80064d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006554 <HAL_ADC_ConfigChannel+0x7d4>)
 80064da:	e008      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80064dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006558 <HAL_ADC_ConfigChannel+0x7d8>)
 80064de:	e006      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80064e0:	4b1e      	ldr	r3, [pc, #120]	@ (800655c <HAL_ADC_ConfigChannel+0x7dc>)
 80064e2:	e004      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80064e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006560 <HAL_ADC_ConfigChannel+0x7e0>)
 80064e6:	e002      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e000      	b.n	80064ee <HAL_ADC_ConfigChannel+0x76e>
 80064ec:	2300      	movs	r3, #0
 80064ee:	4619      	mov	r1, r3
 80064f0:	4610      	mov	r0, r2
 80064f2:	f7fe fd9f 	bl	8005034 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f280 80f6 	bge.w	80066ec <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a05      	ldr	r2, [pc, #20]	@ (800651c <HAL_ADC_ConfigChannel+0x79c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d004      	beq.n	8006514 <HAL_ADC_ConfigChannel+0x794>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a15      	ldr	r2, [pc, #84]	@ (8006564 <HAL_ADC_ConfigChannel+0x7e4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d131      	bne.n	8006578 <HAL_ADC_ConfigChannel+0x7f8>
 8006514:	4b17      	ldr	r3, [pc, #92]	@ (8006574 <HAL_ADC_ConfigChannel+0x7f4>)
 8006516:	e030      	b.n	800657a <HAL_ADC_ConfigChannel+0x7fa>
 8006518:	47ff0000 	.word	0x47ff0000
 800651c:	40022000 	.word	0x40022000
 8006520:	04300002 	.word	0x04300002
 8006524:	08600004 	.word	0x08600004
 8006528:	0c900008 	.word	0x0c900008
 800652c:	10c00010 	.word	0x10c00010
 8006530:	14f00020 	.word	0x14f00020
 8006534:	2a000400 	.word	0x2a000400
 8006538:	2e300800 	.word	0x2e300800
 800653c:	32601000 	.word	0x32601000
 8006540:	43210000 	.word	0x43210000
 8006544:	4b840000 	.word	0x4b840000
 8006548:	4fb80000 	.word	0x4fb80000
 800654c:	47520000 	.word	0x47520000
 8006550:	36902000 	.word	0x36902000
 8006554:	25b00200 	.word	0x25b00200
 8006558:	21800100 	.word	0x21800100
 800655c:	1d500080 	.word	0x1d500080
 8006560:	19200040 	.word	0x19200040
 8006564:	40022100 	.word	0x40022100
 8006568:	58026000 	.word	0x58026000
 800656c:	3ac04000 	.word	0x3ac04000
 8006570:	3ef08000 	.word	0x3ef08000
 8006574:	40022300 	.word	0x40022300
 8006578:	4b61      	ldr	r3, [pc, #388]	@ (8006700 <HAL_ADC_ConfigChannel+0x980>)
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe fd4c 	bl	8005018 <LL_ADC_GetCommonPathInternalCh>
 8006580:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a5f      	ldr	r2, [pc, #380]	@ (8006704 <HAL_ADC_ConfigChannel+0x984>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d004      	beq.n	8006596 <HAL_ADC_ConfigChannel+0x816>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a5d      	ldr	r2, [pc, #372]	@ (8006708 <HAL_ADC_ConfigChannel+0x988>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d10e      	bne.n	80065b4 <HAL_ADC_ConfigChannel+0x834>
 8006596:	485b      	ldr	r0, [pc, #364]	@ (8006704 <HAL_ADC_ConfigChannel+0x984>)
 8006598:	f7fe ffe4 	bl	8005564 <LL_ADC_IsEnabled>
 800659c:	4604      	mov	r4, r0
 800659e:	485a      	ldr	r0, [pc, #360]	@ (8006708 <HAL_ADC_ConfigChannel+0x988>)
 80065a0:	f7fe ffe0 	bl	8005564 <LL_ADC_IsEnabled>
 80065a4:	4603      	mov	r3, r0
 80065a6:	4323      	orrs	r3, r4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bf0c      	ite	eq
 80065ac:	2301      	moveq	r3, #1
 80065ae:	2300      	movne	r3, #0
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	e008      	b.n	80065c6 <HAL_ADC_ConfigChannel+0x846>
 80065b4:	4855      	ldr	r0, [pc, #340]	@ (800670c <HAL_ADC_ConfigChannel+0x98c>)
 80065b6:	f7fe ffd5 	bl	8005564 <LL_ADC_IsEnabled>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bf0c      	ite	eq
 80065c0:	2301      	moveq	r3, #1
 80065c2:	2300      	movne	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d07d      	beq.n	80066c6 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a50      	ldr	r2, [pc, #320]	@ (8006710 <HAL_ADC_ConfigChannel+0x990>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d130      	bne.n	8006636 <HAL_ADC_ConfigChannel+0x8b6>
 80065d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80065d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d12b      	bne.n	8006636 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a4a      	ldr	r2, [pc, #296]	@ (800670c <HAL_ADC_ConfigChannel+0x98c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	f040 8081 	bne.w	80066ec <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a45      	ldr	r2, [pc, #276]	@ (8006704 <HAL_ADC_ConfigChannel+0x984>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d004      	beq.n	80065fe <HAL_ADC_ConfigChannel+0x87e>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a43      	ldr	r2, [pc, #268]	@ (8006708 <HAL_ADC_ConfigChannel+0x988>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d101      	bne.n	8006602 <HAL_ADC_ConfigChannel+0x882>
 80065fe:	4a45      	ldr	r2, [pc, #276]	@ (8006714 <HAL_ADC_ConfigChannel+0x994>)
 8006600:	e000      	b.n	8006604 <HAL_ADC_ConfigChannel+0x884>
 8006602:	4a3f      	ldr	r2, [pc, #252]	@ (8006700 <HAL_ADC_ConfigChannel+0x980>)
 8006604:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006606:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800660a:	4619      	mov	r1, r3
 800660c:	4610      	mov	r0, r2
 800660e:	f7fe fcf0 	bl	8004ff2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006612:	4b41      	ldr	r3, [pc, #260]	@ (8006718 <HAL_ADC_ConfigChannel+0x998>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	4a40      	ldr	r2, [pc, #256]	@ (800671c <HAL_ADC_ConfigChannel+0x99c>)
 800661a:	fba2 2303 	umull	r2, r3, r2, r3
 800661e:	099b      	lsrs	r3, r3, #6
 8006620:	3301      	adds	r3, #1
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8006626:	e002      	b.n	800662e <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3b01      	subs	r3, #1
 800662c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1f9      	bne.n	8006628 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006634:	e05a      	b.n	80066ec <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a39      	ldr	r2, [pc, #228]	@ (8006720 <HAL_ADC_ConfigChannel+0x9a0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d11e      	bne.n	800667e <HAL_ADC_ConfigChannel+0x8fe>
 8006640:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006642:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d119      	bne.n	800667e <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a2f      	ldr	r2, [pc, #188]	@ (800670c <HAL_ADC_ConfigChannel+0x98c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d14b      	bne.n	80066ec <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a2a      	ldr	r2, [pc, #168]	@ (8006704 <HAL_ADC_ConfigChannel+0x984>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_ADC_ConfigChannel+0x8e8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a29      	ldr	r2, [pc, #164]	@ (8006708 <HAL_ADC_ConfigChannel+0x988>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d101      	bne.n	800666c <HAL_ADC_ConfigChannel+0x8ec>
 8006668:	4a2a      	ldr	r2, [pc, #168]	@ (8006714 <HAL_ADC_ConfigChannel+0x994>)
 800666a:	e000      	b.n	800666e <HAL_ADC_ConfigChannel+0x8ee>
 800666c:	4a24      	ldr	r2, [pc, #144]	@ (8006700 <HAL_ADC_ConfigChannel+0x980>)
 800666e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006670:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f7fe fcbb 	bl	8004ff2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800667c:	e036      	b.n	80066ec <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a28      	ldr	r2, [pc, #160]	@ (8006724 <HAL_ADC_ConfigChannel+0x9a4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d131      	bne.n	80066ec <HAL_ADC_ConfigChannel+0x96c>
 8006688:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800668a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d12c      	bne.n	80066ec <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1d      	ldr	r2, [pc, #116]	@ (800670c <HAL_ADC_ConfigChannel+0x98c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d127      	bne.n	80066ec <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a18      	ldr	r2, [pc, #96]	@ (8006704 <HAL_ADC_ConfigChannel+0x984>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d004      	beq.n	80066b0 <HAL_ADC_ConfigChannel+0x930>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a17      	ldr	r2, [pc, #92]	@ (8006708 <HAL_ADC_ConfigChannel+0x988>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d101      	bne.n	80066b4 <HAL_ADC_ConfigChannel+0x934>
 80066b0:	4a18      	ldr	r2, [pc, #96]	@ (8006714 <HAL_ADC_ConfigChannel+0x994>)
 80066b2:	e000      	b.n	80066b6 <HAL_ADC_ConfigChannel+0x936>
 80066b4:	4a12      	ldr	r2, [pc, #72]	@ (8006700 <HAL_ADC_ConfigChannel+0x980>)
 80066b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80066bc:	4619      	mov	r1, r3
 80066be:	4610      	mov	r0, r2
 80066c0:	f7fe fc97 	bl	8004ff2 <LL_ADC_SetCommonPathInternalCh>
 80066c4:	e012      	b.n	80066ec <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ca:	f043 0220 	orr.w	r2, r3, #32
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80066d8:	e008      	b.n	80066ec <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066de:	f043 0220 	orr.w	r2, r3, #32
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80066f4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3794      	adds	r7, #148	@ 0x94
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd90      	pop	{r4, r7, pc}
 8006700:	58026300 	.word	0x58026300
 8006704:	40022000 	.word	0x40022000
 8006708:	40022100 	.word	0x40022100
 800670c:	58026000 	.word	0x58026000
 8006710:	c7520000 	.word	0xc7520000
 8006714:	40022300 	.word	0x40022300
 8006718:	24000018 	.word	0x24000018
 800671c:	053e2d63 	.word	0x053e2d63
 8006720:	c3210000 	.word	0xc3210000
 8006724:	cb840000 	.word	0xcb840000

08006728 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b088      	sub	sp, #32
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006732:	2300      	movs	r3, #0
 8006734:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe ff5e 	bl	8005600 <LL_ADC_REG_IsConversionOngoing>
 8006744:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4618      	mov	r0, r3
 800674c:	f7fe ff80 	bl	8005650 <LL_ADC_INJ_IsConversionOngoing>
 8006750:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d103      	bne.n	8006760 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 8098 	beq.w	8006890 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d02a      	beq.n	80067c4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	7e5b      	ldrb	r3, [r3, #25]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d126      	bne.n	80067c4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	7e1b      	ldrb	r3, [r3, #24]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d122      	bne.n	80067c4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800677e:	2301      	movs	r3, #1
 8006780:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006782:	e014      	b.n	80067ae <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	4a45      	ldr	r2, [pc, #276]	@ (800689c <ADC_ConversionStop+0x174>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d90d      	bls.n	80067a8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006790:	f043 0210 	orr.w	r2, r3, #16
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800679c:	f043 0201 	orr.w	r2, r3, #1
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e074      	b.n	8006892 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	3301      	adds	r3, #1
 80067ac:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b8:	2b40      	cmp	r3, #64	@ 0x40
 80067ba:	d1e3      	bne.n	8006784 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2240      	movs	r2, #64	@ 0x40
 80067c2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d014      	beq.n	80067f4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe ff16 	bl	8005600 <LL_ADC_REG_IsConversionOngoing>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00c      	beq.n	80067f4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fe fed3 	bl	800558a <LL_ADC_IsDisableOngoing>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d104      	bne.n	80067f4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fef2 	bl	80055d8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d014      	beq.n	8006824 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe ff26 	bl	8005650 <LL_ADC_INJ_IsConversionOngoing>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00c      	beq.n	8006824 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe febb 	bl	800558a <LL_ADC_IsDisableOngoing>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d104      	bne.n	8006824 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe ff02 	bl	8005628 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d005      	beq.n	8006836 <ADC_ConversionStop+0x10e>
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d105      	bne.n	800683c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006830:	230c      	movs	r3, #12
 8006832:	617b      	str	r3, [r7, #20]
        break;
 8006834:	e005      	b.n	8006842 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006836:	2308      	movs	r3, #8
 8006838:	617b      	str	r3, [r7, #20]
        break;
 800683a:	e002      	b.n	8006842 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800683c:	2304      	movs	r3, #4
 800683e:	617b      	str	r3, [r7, #20]
        break;
 8006840:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006842:	f7fe fb93 	bl	8004f6c <HAL_GetTick>
 8006846:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006848:	e01b      	b.n	8006882 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800684a:	f7fe fb8f 	bl	8004f6c <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b05      	cmp	r3, #5
 8006856:	d914      	bls.n	8006882 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	4013      	ands	r3, r2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00d      	beq.n	8006882 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800686a:	f043 0210 	orr.w	r2, r3, #16
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006876:	f043 0201 	orr.w	r2, r3, #1
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e007      	b.n	8006892 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	4013      	ands	r3, r2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1dc      	bne.n	800684a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3720      	adds	r7, #32
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	000cdbff 	.word	0x000cdbff

080068a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fe fe59 	bl	8005564 <LL_ADC_IsEnabled>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d16e      	bne.n	8006996 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	4b38      	ldr	r3, [pc, #224]	@ (80069a0 <ADC_Enable+0x100>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00d      	beq.n	80068e2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ca:	f043 0210 	orr.w	r2, r3, #16
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068d6:	f043 0201 	orr.w	r2, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e05a      	b.n	8006998 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fe14 	bl	8005514 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80068ec:	f7fe fb3e 	bl	8004f6c <HAL_GetTick>
 80068f0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a2b      	ldr	r2, [pc, #172]	@ (80069a4 <ADC_Enable+0x104>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d004      	beq.n	8006906 <ADC_Enable+0x66>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a29      	ldr	r2, [pc, #164]	@ (80069a8 <ADC_Enable+0x108>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d101      	bne.n	800690a <ADC_Enable+0x6a>
 8006906:	4b29      	ldr	r3, [pc, #164]	@ (80069ac <ADC_Enable+0x10c>)
 8006908:	e000      	b.n	800690c <ADC_Enable+0x6c>
 800690a:	4b29      	ldr	r3, [pc, #164]	@ (80069b0 <ADC_Enable+0x110>)
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe fda5 	bl	800545c <LL_ADC_GetMultimode>
 8006912:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a23      	ldr	r2, [pc, #140]	@ (80069a8 <ADC_Enable+0x108>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d002      	beq.n	8006924 <ADC_Enable+0x84>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	e000      	b.n	8006926 <ADC_Enable+0x86>
 8006924:	4b1f      	ldr	r3, [pc, #124]	@ (80069a4 <ADC_Enable+0x104>)
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	4293      	cmp	r3, r2
 800692c:	d02c      	beq.n	8006988 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d130      	bne.n	8006996 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006934:	e028      	b.n	8006988 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe fe12 	bl	8005564 <LL_ADC_IsEnabled>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d104      	bne.n	8006950 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe fde2 	bl	8005514 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006950:	f7fe fb0c 	bl	8004f6c <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b02      	cmp	r3, #2
 800695c:	d914      	bls.n	8006988 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b01      	cmp	r3, #1
 800696a:	d00d      	beq.n	8006988 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006970:	f043 0210 	orr.w	r2, r3, #16
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800697c:	f043 0201 	orr.w	r2, r3, #1
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e007      	b.n	8006998 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b01      	cmp	r3, #1
 8006994:	d1cf      	bne.n	8006936 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	8000003f 	.word	0x8000003f
 80069a4:	40022000 	.word	0x40022000
 80069a8:	40022100 	.word	0x40022100
 80069ac:	40022300 	.word	0x40022300
 80069b0:	58026300 	.word	0x58026300

080069b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe fde2 	bl	800558a <LL_ADC_IsDisableOngoing>
 80069c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fdc9 	bl	8005564 <LL_ADC_IsEnabled>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d047      	beq.n	8006a68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d144      	bne.n	8006a68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f003 030d 	and.w	r3, r3, #13
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d10c      	bne.n	8006a06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fe fda3 	bl	800553c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2203      	movs	r2, #3
 80069fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80069fe:	f7fe fab5 	bl	8004f6c <HAL_GetTick>
 8006a02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a04:	e029      	b.n	8006a5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a0a:	f043 0210 	orr.w	r2, r3, #16
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a16:	f043 0201 	orr.w	r2, r3, #1
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e023      	b.n	8006a6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a22:	f7fe faa3 	bl	8004f6c <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d914      	bls.n	8006a5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00d      	beq.n	8006a5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a42:	f043 0210 	orr.w	r2, r3, #16
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a4e:	f043 0201 	orr.w	r2, r3, #1
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e007      	b.n	8006a6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1dc      	bne.n	8006a22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d14b      	bne.n	8006b24 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d021      	beq.n	8006aea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fbee 	bl	800528c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d032      	beq.n	8006b1c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d12b      	bne.n	8006b1c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ac8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ad4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d11f      	bne.n	8006b1c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ae0:	f043 0201 	orr.w	r2, r3, #1
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	661a      	str	r2, [r3, #96]	@ 0x60
 8006ae8:	e018      	b.n	8006b1c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d111      	bne.n	8006b1c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006afc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d105      	bne.n	8006b1c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b14:	f043 0201 	orr.w	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f7f9 ff31 	bl	8000984 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b22:	e00e      	b.n	8006b42 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f7ff f91b 	bl	8005d6c <HAL_ADC_ErrorCallback>
}
 8006b36:	e004      	b.n	8006b42 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	4798      	blx	r3
}
 8006b42:	bf00      	nop
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7f9 fed5 	bl	8000908 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b5e:	bf00      	nop
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b84:	f043 0204 	orr.w	r2, r3, #4
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff f8ed 	bl	8005d6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a6c      	ldr	r2, [pc, #432]	@ (8006d5c <ADC_ConfigureBoostMode+0x1c0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d004      	beq.n	8006bb8 <ADC_ConfigureBoostMode+0x1c>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a6b      	ldr	r2, [pc, #428]	@ (8006d60 <ADC_ConfigureBoostMode+0x1c4>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d109      	bne.n	8006bcc <ADC_ConfigureBoostMode+0x30>
 8006bb8:	4b6a      	ldr	r3, [pc, #424]	@ (8006d64 <ADC_ConfigureBoostMode+0x1c8>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	bf14      	ite	ne
 8006bc4:	2301      	movne	r3, #1
 8006bc6:	2300      	moveq	r3, #0
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	e008      	b.n	8006bde <ADC_ConfigureBoostMode+0x42>
 8006bcc:	4b66      	ldr	r3, [pc, #408]	@ (8006d68 <ADC_ConfigureBoostMode+0x1cc>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	bf14      	ite	ne
 8006bd8:	2301      	movne	r3, #1
 8006bda:	2300      	moveq	r3, #0
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d01c      	beq.n	8006c1c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006be2:	f005 fd3d 	bl	800c660 <HAL_RCC_GetHCLKFreq>
 8006be6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bf0:	d010      	beq.n	8006c14 <ADC_ConfigureBoostMode+0x78>
 8006bf2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bf6:	d873      	bhi.n	8006ce0 <ADC_ConfigureBoostMode+0x144>
 8006bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bfc:	d002      	beq.n	8006c04 <ADC_ConfigureBoostMode+0x68>
 8006bfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c02:	d16d      	bne.n	8006ce0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	0c1b      	lsrs	r3, r3, #16
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c10:	60fb      	str	r3, [r7, #12]
        break;
 8006c12:	e068      	b.n	8006ce6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	089b      	lsrs	r3, r3, #2
 8006c18:	60fb      	str	r3, [r7, #12]
        break;
 8006c1a:	e064      	b.n	8006ce6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006c1c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006c20:	f04f 0100 	mov.w	r1, #0
 8006c24:	f006 ff18 	bl	800da58 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c28:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006c32:	d051      	beq.n	8006cd8 <ADC_ConfigureBoostMode+0x13c>
 8006c34:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006c38:	d854      	bhi.n	8006ce4 <ADC_ConfigureBoostMode+0x148>
 8006c3a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006c3e:	d047      	beq.n	8006cd0 <ADC_ConfigureBoostMode+0x134>
 8006c40:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006c44:	d84e      	bhi.n	8006ce4 <ADC_ConfigureBoostMode+0x148>
 8006c46:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006c4a:	d03d      	beq.n	8006cc8 <ADC_ConfigureBoostMode+0x12c>
 8006c4c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006c50:	d848      	bhi.n	8006ce4 <ADC_ConfigureBoostMode+0x148>
 8006c52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c56:	d033      	beq.n	8006cc0 <ADC_ConfigureBoostMode+0x124>
 8006c58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c5c:	d842      	bhi.n	8006ce4 <ADC_ConfigureBoostMode+0x148>
 8006c5e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006c62:	d029      	beq.n	8006cb8 <ADC_ConfigureBoostMode+0x11c>
 8006c64:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006c68:	d83c      	bhi.n	8006ce4 <ADC_ConfigureBoostMode+0x148>
 8006c6a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c6e:	d01a      	beq.n	8006ca6 <ADC_ConfigureBoostMode+0x10a>
 8006c70:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c74:	d836      	bhi.n	8006ce4 <ADC_ConfigureBoostMode+0x148>
 8006c76:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006c7a:	d014      	beq.n	8006ca6 <ADC_ConfigureBoostMode+0x10a>
 8006c7c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006c80:	d830      	bhi.n	8006ce4 <ADC_ConfigureBoostMode+0x148>
 8006c82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c86:	d00e      	beq.n	8006ca6 <ADC_ConfigureBoostMode+0x10a>
 8006c88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c8c:	d82a      	bhi.n	8006ce4 <ADC_ConfigureBoostMode+0x148>
 8006c8e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c92:	d008      	beq.n	8006ca6 <ADC_ConfigureBoostMode+0x10a>
 8006c94:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c98:	d824      	bhi.n	8006ce4 <ADC_ConfigureBoostMode+0x148>
 8006c9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c9e:	d002      	beq.n	8006ca6 <ADC_ConfigureBoostMode+0x10a>
 8006ca0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ca4:	d11e      	bne.n	8006ce4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	0c9b      	lsrs	r3, r3, #18
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb4:	60fb      	str	r3, [r7, #12]
        break;
 8006cb6:	e016      	b.n	8006ce6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	091b      	lsrs	r3, r3, #4
 8006cbc:	60fb      	str	r3, [r7, #12]
        break;
 8006cbe:	e012      	b.n	8006ce6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	60fb      	str	r3, [r7, #12]
        break;
 8006cc6:	e00e      	b.n	8006ce6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	099b      	lsrs	r3, r3, #6
 8006ccc:	60fb      	str	r3, [r7, #12]
        break;
 8006cce:	e00a      	b.n	8006ce6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	09db      	lsrs	r3, r3, #7
 8006cd4:	60fb      	str	r3, [r7, #12]
        break;
 8006cd6:	e006      	b.n	8006ce6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	0a1b      	lsrs	r3, r3, #8
 8006cdc:	60fb      	str	r3, [r7, #12]
        break;
 8006cde:	e002      	b.n	8006ce6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006ce0:	bf00      	nop
 8006ce2:	e000      	b.n	8006ce6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006ce4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	085b      	lsrs	r3, r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4a1f      	ldr	r2, [pc, #124]	@ (8006d6c <ADC_ConfigureBoostMode+0x1d0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d808      	bhi.n	8006d06 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006d02:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006d04:	e025      	b.n	8006d52 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a19      	ldr	r2, [pc, #100]	@ (8006d70 <ADC_ConfigureBoostMode+0x1d4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d80a      	bhi.n	8006d24 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d20:	609a      	str	r2, [r3, #8]
}
 8006d22:	e016      	b.n	8006d52 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4a13      	ldr	r2, [pc, #76]	@ (8006d74 <ADC_ConfigureBoostMode+0x1d8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d80a      	bhi.n	8006d42 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d3e:	609a      	str	r2, [r3, #8]
}
 8006d40:	e007      	b.n	8006d52 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006d50:	609a      	str	r2, [r3, #8]
}
 8006d52:	bf00      	nop
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40022000 	.word	0x40022000
 8006d60:	40022100 	.word	0x40022100
 8006d64:	40022300 	.word	0x40022300
 8006d68:	58026300 	.word	0x58026300
 8006d6c:	005f5e10 	.word	0x005f5e10
 8006d70:	00bebc20 	.word	0x00bebc20
 8006d74:	017d7840 	.word	0x017d7840

08006d78 <LL_ADC_IsEnabled>:
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d101      	bne.n	8006d90 <LL_ADC_IsEnabled+0x18>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <LL_ADC_IsEnabled+0x1a>
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <LL_ADC_REG_IsConversionOngoing>:
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d101      	bne.n	8006db6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006dc4:	b590      	push	{r4, r7, lr}
 8006dc6:	b0a3      	sub	sp, #140	@ 0x8c
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e0c1      	b.n	8006f66 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006dea:	2300      	movs	r3, #0
 8006dec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006dee:	2300      	movs	r3, #0
 8006df0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a5e      	ldr	r2, [pc, #376]	@ (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d102      	bne.n	8006e02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006dfc:	4b5d      	ldr	r3, [pc, #372]	@ (8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e001      	b.n	8006e06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10b      	bne.n	8006e24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e10:	f043 0220 	orr.w	r2, r3, #32
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0a0      	b.n	8006f66 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff ffb9 	bl	8006d9e <LL_ADC_REG_IsConversionOngoing>
 8006e2c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7ff ffb2 	bl	8006d9e <LL_ADC_REG_IsConversionOngoing>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f040 8081 	bne.w	8006f44 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d17c      	bne.n	8006f44 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a48      	ldr	r2, [pc, #288]	@ (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d004      	beq.n	8006e5e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a46      	ldr	r2, [pc, #280]	@ (8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d101      	bne.n	8006e62 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006e5e:	4b46      	ldr	r3, [pc, #280]	@ (8006f78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006e60:	e000      	b.n	8006e64 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006e62:	4b46      	ldr	r3, [pc, #280]	@ (8006f7c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006e64:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d039      	beq.n	8006ee2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006e6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a3a      	ldr	r2, [pc, #232]	@ (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d004      	beq.n	8006e94 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a39      	ldr	r2, [pc, #228]	@ (8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d10e      	bne.n	8006eb2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006e94:	4836      	ldr	r0, [pc, #216]	@ (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e96:	f7ff ff6f 	bl	8006d78 <LL_ADC_IsEnabled>
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4835      	ldr	r0, [pc, #212]	@ (8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e9e:	f7ff ff6b 	bl	8006d78 <LL_ADC_IsEnabled>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	4323      	orrs	r3, r4
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	bf0c      	ite	eq
 8006eaa:	2301      	moveq	r3, #1
 8006eac:	2300      	movne	r3, #0
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	e008      	b.n	8006ec4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006eb2:	4833      	ldr	r0, [pc, #204]	@ (8006f80 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006eb4:	f7ff ff60 	bl	8006d78 <LL_ADC_IsEnabled>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	bf0c      	ite	eq
 8006ebe:	2301      	moveq	r3, #1
 8006ec0:	2300      	movne	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d047      	beq.n	8006f58 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006ec8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8006f84 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006ece:	4013      	ands	r3, r2
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	6811      	ldr	r1, [r2, #0]
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	6892      	ldr	r2, [r2, #8]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	431a      	orrs	r2, r3
 8006edc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ede:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ee0:	e03a      	b.n	8006f58 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006ee2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006eea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006eec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d004      	beq.n	8006f02 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a1d      	ldr	r2, [pc, #116]	@ (8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d10e      	bne.n	8006f20 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8006f02:	481b      	ldr	r0, [pc, #108]	@ (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006f04:	f7ff ff38 	bl	8006d78 <LL_ADC_IsEnabled>
 8006f08:	4604      	mov	r4, r0
 8006f0a:	481a      	ldr	r0, [pc, #104]	@ (8006f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006f0c:	f7ff ff34 	bl	8006d78 <LL_ADC_IsEnabled>
 8006f10:	4603      	mov	r3, r0
 8006f12:	4323      	orrs	r3, r4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bf0c      	ite	eq
 8006f18:	2301      	moveq	r3, #1
 8006f1a:	2300      	movne	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	e008      	b.n	8006f32 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8006f20:	4817      	ldr	r0, [pc, #92]	@ (8006f80 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006f22:	f7ff ff29 	bl	8006d78 <LL_ADC_IsEnabled>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bf0c      	ite	eq
 8006f2c:	2301      	moveq	r3, #1
 8006f2e:	2300      	movne	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d010      	beq.n	8006f58 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006f36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	4b12      	ldr	r3, [pc, #72]	@ (8006f84 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006f40:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f42:	e009      	b.n	8006f58 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f48:	f043 0220 	orr.w	r2, r3, #32
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8006f56:	e000      	b.n	8006f5a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006f62:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	378c      	adds	r7, #140	@ 0x8c
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd90      	pop	{r4, r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40022000 	.word	0x40022000
 8006f74:	40022100 	.word	0x40022100
 8006f78:	40022300 	.word	0x40022300
 8006f7c:	58026300 	.word	0x58026300
 8006f80:	58026000 	.word	0x58026000
 8006f84:	fffff0e0 	.word	0xfffff0e0

08006f88 <__NVIC_SetPriorityGrouping>:
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f98:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006fb0:	4b06      	ldr	r3, [pc, #24]	@ (8006fcc <__NVIC_SetPriorityGrouping+0x44>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fb6:	4a04      	ldr	r2, [pc, #16]	@ (8006fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	60d3      	str	r3, [r2, #12]
}
 8006fbc:	bf00      	nop
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	e000ed00 	.word	0xe000ed00
 8006fcc:	05fa0000 	.word	0x05fa0000

08006fd0 <__NVIC_GetPriorityGrouping>:
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fd4:	4b04      	ldr	r3, [pc, #16]	@ (8006fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	0a1b      	lsrs	r3, r3, #8
 8006fda:	f003 0307 	and.w	r3, r3, #7
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	e000ed00 	.word	0xe000ed00

08006fec <__NVIC_EnableIRQ>:
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	db0b      	blt.n	8007016 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ffe:	88fb      	ldrh	r3, [r7, #6]
 8007000:	f003 021f 	and.w	r2, r3, #31
 8007004:	4907      	ldr	r1, [pc, #28]	@ (8007024 <__NVIC_EnableIRQ+0x38>)
 8007006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	2001      	movs	r0, #1
 800700e:	fa00 f202 	lsl.w	r2, r0, r2
 8007012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007016:	bf00      	nop
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	e000e100 	.word	0xe000e100

08007028 <__NVIC_DisableIRQ>:
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007036:	2b00      	cmp	r3, #0
 8007038:	db12      	blt.n	8007060 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	f003 021f 	and.w	r2, r3, #31
 8007040:	490a      	ldr	r1, [pc, #40]	@ (800706c <__NVIC_DisableIRQ+0x44>)
 8007042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007046:	095b      	lsrs	r3, r3, #5
 8007048:	2001      	movs	r0, #1
 800704a:	fa00 f202 	lsl.w	r2, r0, r2
 800704e:	3320      	adds	r3, #32
 8007050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007054:	f3bf 8f4f 	dsb	sy
}
 8007058:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800705a:	f3bf 8f6f 	isb	sy
}
 800705e:	bf00      	nop
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	e000e100 	.word	0xe000e100

08007070 <__NVIC_SetPriority>:
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	6039      	str	r1, [r7, #0]
 800707a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800707c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007080:	2b00      	cmp	r3, #0
 8007082:	db0a      	blt.n	800709a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	b2da      	uxtb	r2, r3
 8007088:	490c      	ldr	r1, [pc, #48]	@ (80070bc <__NVIC_SetPriority+0x4c>)
 800708a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800708e:	0112      	lsls	r2, r2, #4
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	440b      	add	r3, r1
 8007094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007098:	e00a      	b.n	80070b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	b2da      	uxtb	r2, r3
 800709e:	4908      	ldr	r1, [pc, #32]	@ (80070c0 <__NVIC_SetPriority+0x50>)
 80070a0:	88fb      	ldrh	r3, [r7, #6]
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	3b04      	subs	r3, #4
 80070a8:	0112      	lsls	r2, r2, #4
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	440b      	add	r3, r1
 80070ae:	761a      	strb	r2, [r3, #24]
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	e000e100 	.word	0xe000e100
 80070c0:	e000ed00 	.word	0xe000ed00

080070c4 <NVIC_EncodePriority>:
{
 80070c4:	b480      	push	{r7}
 80070c6:	b089      	sub	sp, #36	@ 0x24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f1c3 0307 	rsb	r3, r3, #7
 80070de:	2b04      	cmp	r3, #4
 80070e0:	bf28      	it	cs
 80070e2:	2304      	movcs	r3, #4
 80070e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	3304      	adds	r3, #4
 80070ea:	2b06      	cmp	r3, #6
 80070ec:	d902      	bls.n	80070f4 <NVIC_EncodePriority+0x30>
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	3b03      	subs	r3, #3
 80070f2:	e000      	b.n	80070f6 <NVIC_EncodePriority+0x32>
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070f8:	f04f 32ff 	mov.w	r2, #4294967295
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007102:	43da      	mvns	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	401a      	ands	r2, r3
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800710c:	f04f 31ff 	mov.w	r1, #4294967295
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	fa01 f303 	lsl.w	r3, r1, r3
 8007116:	43d9      	mvns	r1, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800711c:	4313      	orrs	r3, r2
}
 800711e:	4618      	mov	r0, r3
 8007120:	3724      	adds	r7, #36	@ 0x24
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
	...

0800712c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3b01      	subs	r3, #1
 8007138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800713c:	d301      	bcc.n	8007142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800713e:	2301      	movs	r3, #1
 8007140:	e00f      	b.n	8007162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007142:	4a0a      	ldr	r2, [pc, #40]	@ (800716c <SysTick_Config+0x40>)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3b01      	subs	r3, #1
 8007148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800714a:	210f      	movs	r1, #15
 800714c:	f04f 30ff 	mov.w	r0, #4294967295
 8007150:	f7ff ff8e 	bl	8007070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007154:	4b05      	ldr	r3, [pc, #20]	@ (800716c <SysTick_Config+0x40>)
 8007156:	2200      	movs	r2, #0
 8007158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800715a:	4b04      	ldr	r3, [pc, #16]	@ (800716c <SysTick_Config+0x40>)
 800715c:	2207      	movs	r2, #7
 800715e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	e000e010 	.word	0xe000e010

08007170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff ff05 	bl	8006f88 <__NVIC_SetPriorityGrouping>
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b086      	sub	sp, #24
 800718a:	af00      	add	r7, sp, #0
 800718c:	4603      	mov	r3, r0
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007194:	f7ff ff1c 	bl	8006fd0 <__NVIC_GetPriorityGrouping>
 8007198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	6978      	ldr	r0, [r7, #20]
 80071a0:	f7ff ff90 	bl	80070c4 <NVIC_EncodePriority>
 80071a4:	4602      	mov	r2, r0
 80071a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80071aa:	4611      	mov	r1, r2
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff ff5f 	bl	8007070 <__NVIC_SetPriority>
}
 80071b2:	bf00      	nop
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	4603      	mov	r3, r0
 80071c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7ff ff0f 	bl	8006fec <__NVIC_EnableIRQ>
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	4603      	mov	r3, r0
 80071de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80071e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7ff ff1f 	bl	8007028 <__NVIC_DisableIRQ>
}
 80071ea:	bf00      	nop
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b082      	sub	sp, #8
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff ff96 	bl	800712c <SysTick_Config>
 8007200:	4603      	mov	r3, r0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b082      	sub	sp, #8
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e014      	b.n	8007246 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	791b      	ldrb	r3, [r3, #4]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d105      	bne.n	8007232 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7fb ffb5 	bl	800319c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007264:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01d      	beq.n	80072ac <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d018      	beq.n	80072ac <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2204      	movs	r2, #4
 800727e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f043 0201 	orr.w	r2, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007294:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80072a4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f827 	bl	80072fa <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d01d      	beq.n	80072f2 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d018      	beq.n	80072f2 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2204      	movs	r2, #4
 80072c4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	f043 0202 	orr.w	r2, r3, #2
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80072da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80072ea:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f955 	bl	800759c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80072f2:	bf00      	nop
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
	...

08007310 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08a      	sub	sp, #40	@ 0x28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <HAL_DAC_ConfigChannel+0x1e>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e12d      	b.n	800758e <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	795b      	ldrb	r3, [r3, #5]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d101      	bne.n	8007344 <HAL_DAC_ConfigChannel+0x34>
 8007340:	2302      	movs	r3, #2
 8007342:	e124      	b.n	800758e <HAL_DAC_ConfigChannel+0x27e>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2202      	movs	r2, #2
 800734e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b04      	cmp	r3, #4
 8007356:	d17a      	bne.n	800744e <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007358:	f7fd fe08 	bl	8004f6c <HAL_GetTick>
 800735c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d13d      	bne.n	80073e0 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007364:	e018      	b.n	8007398 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007366:	f7fd fe01 	bl	8004f6c <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b01      	cmp	r3, #1
 8007372:	d911      	bls.n	8007398 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800737a:	4b87      	ldr	r3, [pc, #540]	@ (8007598 <HAL_DAC_ConfigChannel+0x288>)
 800737c:	4013      	ands	r3, r2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00a      	beq.n	8007398 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f043 0208 	orr.w	r2, r3, #8
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2203      	movs	r2, #3
 8007392:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e0fa      	b.n	800758e <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800739e:	4b7e      	ldr	r3, [pc, #504]	@ (8007598 <HAL_DAC_ConfigChannel+0x288>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1df      	bne.n	8007366 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	6992      	ldr	r2, [r2, #24]
 80073ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80073b0:	e020      	b.n	80073f4 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80073b2:	f7fd fddb 	bl	8004f6c <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d90f      	bls.n	80073e0 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	da0a      	bge.n	80073e0 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f043 0208 	orr.w	r2, r3, #8
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2203      	movs	r2, #3
 80073da:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e0d6      	b.n	800758e <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	dbe3      	blt.n	80073b2 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	6992      	ldr	r2, [r2, #24]
 80073f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f003 0310 	and.w	r3, r3, #16
 8007400:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007404:	fa01 f303 	lsl.w	r3, r1, r3
 8007408:	43db      	mvns	r3, r3
 800740a:	ea02 0103 	and.w	r1, r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	69da      	ldr	r2, [r3, #28]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f003 0310 	and.w	r3, r3, #16
 8007418:	409a      	lsls	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	21ff      	movs	r1, #255	@ 0xff
 8007430:	fa01 f303 	lsl.w	r3, r1, r3
 8007434:	43db      	mvns	r3, r3
 8007436:	ea02 0103 	and.w	r1, r2, r3
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6a1a      	ldr	r2, [r3, #32]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f003 0310 	and.w	r3, r3, #16
 8007444:	409a      	lsls	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d11d      	bne.n	8007492 <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f003 0310 	and.w	r3, r3, #16
 8007464:	221f      	movs	r2, #31
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	43db      	mvns	r3, r3
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	4013      	ands	r3, r2
 8007470:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f003 0310 	and.w	r3, r3, #16
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	fa02 f303 	lsl.w	r3, r2, r3
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	4313      	orrs	r3, r2
 8007488:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007498:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f003 0310 	and.w	r3, r3, #16
 80074a0:	2207      	movs	r2, #7
 80074a2:	fa02 f303 	lsl.w	r3, r2, r3
 80074a6:	43db      	mvns	r3, r3
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	4013      	ands	r3, r2
 80074ac:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d102      	bne.n	80074bc <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ba:	e00f      	b.n	80074dc <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d102      	bne.n	80074ca <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80074c4:	2301      	movs	r3, #1
 80074c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80074c8:	e008      	b.n	80074dc <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d102      	bne.n	80074d8 <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80074d2:	2301      	movs	r3, #1
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80074d6:	e001      	b.n	80074dc <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80074d8:	2300      	movs	r3, #0
 80074da:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e8:	4313      	orrs	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f003 0310 	and.w	r3, r3, #16
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	fa02 f303 	lsl.w	r3, r2, r3
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6819      	ldr	r1, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f003 0310 	and.w	r3, r3, #16
 8007512:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007516:	fa02 f303 	lsl.w	r3, r2, r3
 800751a:	43da      	mvns	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	400a      	ands	r2, r1
 8007522:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f003 0310 	and.w	r3, r3, #16
 8007532:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8007536:	fa02 f303 	lsl.w	r3, r2, r3
 800753a:	43db      	mvns	r3, r3
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	4013      	ands	r3, r2
 8007540:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f003 0310 	and.w	r3, r3, #16
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	fa02 f303 	lsl.w	r3, r2, r3
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	4313      	orrs	r3, r2
 8007558:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6819      	ldr	r1, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f003 0310 	and.w	r3, r3, #16
 800756e:	22c0      	movs	r2, #192	@ 0xc0
 8007570:	fa02 f303 	lsl.w	r3, r2, r3
 8007574:	43da      	mvns	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	400a      	ands	r2, r1
 800757c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2201      	movs	r2, #1
 8007582:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800758a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800758e:	4618      	mov	r0, r3
 8007590:	3728      	adds	r7, #40	@ 0x28
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20008000 	.word	0x20008000

0800759c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80075b8:	f7fd fcd8 	bl	8004f6c <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e312      	b.n	8007bee <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a66      	ldr	r2, [pc, #408]	@ (8007768 <HAL_DMA_Init+0x1b8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d04a      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a65      	ldr	r2, [pc, #404]	@ (800776c <HAL_DMA_Init+0x1bc>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d045      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a63      	ldr	r2, [pc, #396]	@ (8007770 <HAL_DMA_Init+0x1c0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d040      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a62      	ldr	r2, [pc, #392]	@ (8007774 <HAL_DMA_Init+0x1c4>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d03b      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a60      	ldr	r2, [pc, #384]	@ (8007778 <HAL_DMA_Init+0x1c8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d036      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a5f      	ldr	r2, [pc, #380]	@ (800777c <HAL_DMA_Init+0x1cc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d031      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a5d      	ldr	r2, [pc, #372]	@ (8007780 <HAL_DMA_Init+0x1d0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d02c      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a5c      	ldr	r2, [pc, #368]	@ (8007784 <HAL_DMA_Init+0x1d4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d027      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a5a      	ldr	r2, [pc, #360]	@ (8007788 <HAL_DMA_Init+0x1d8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d022      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a59      	ldr	r2, [pc, #356]	@ (800778c <HAL_DMA_Init+0x1dc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d01d      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a57      	ldr	r2, [pc, #348]	@ (8007790 <HAL_DMA_Init+0x1e0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d018      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a56      	ldr	r2, [pc, #344]	@ (8007794 <HAL_DMA_Init+0x1e4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d013      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a54      	ldr	r2, [pc, #336]	@ (8007798 <HAL_DMA_Init+0x1e8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00e      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a53      	ldr	r2, [pc, #332]	@ (800779c <HAL_DMA_Init+0x1ec>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d009      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a51      	ldr	r2, [pc, #324]	@ (80077a0 <HAL_DMA_Init+0x1f0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d004      	beq.n	8007668 <HAL_DMA_Init+0xb8>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a50      	ldr	r2, [pc, #320]	@ (80077a4 <HAL_DMA_Init+0x1f4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d101      	bne.n	800766c <HAL_DMA_Init+0xbc>
 8007668:	2301      	movs	r3, #1
 800766a:	e000      	b.n	800766e <HAL_DMA_Init+0xbe>
 800766c:	2300      	movs	r3, #0
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 813c 	beq.w	80078ec <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2202      	movs	r2, #2
 8007678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a37      	ldr	r2, [pc, #220]	@ (8007768 <HAL_DMA_Init+0x1b8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d04a      	beq.n	8007724 <HAL_DMA_Init+0x174>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a36      	ldr	r2, [pc, #216]	@ (800776c <HAL_DMA_Init+0x1bc>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d045      	beq.n	8007724 <HAL_DMA_Init+0x174>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a34      	ldr	r2, [pc, #208]	@ (8007770 <HAL_DMA_Init+0x1c0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d040      	beq.n	8007724 <HAL_DMA_Init+0x174>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a33      	ldr	r2, [pc, #204]	@ (8007774 <HAL_DMA_Init+0x1c4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d03b      	beq.n	8007724 <HAL_DMA_Init+0x174>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a31      	ldr	r2, [pc, #196]	@ (8007778 <HAL_DMA_Init+0x1c8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d036      	beq.n	8007724 <HAL_DMA_Init+0x174>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a30      	ldr	r2, [pc, #192]	@ (800777c <HAL_DMA_Init+0x1cc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d031      	beq.n	8007724 <HAL_DMA_Init+0x174>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a2e      	ldr	r2, [pc, #184]	@ (8007780 <HAL_DMA_Init+0x1d0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d02c      	beq.n	8007724 <HAL_DMA_Init+0x174>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a2d      	ldr	r2, [pc, #180]	@ (8007784 <HAL_DMA_Init+0x1d4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d027      	beq.n	8007724 <HAL_DMA_Init+0x174>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a2b      	ldr	r2, [pc, #172]	@ (8007788 <HAL_DMA_Init+0x1d8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d022      	beq.n	8007724 <HAL_DMA_Init+0x174>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a2a      	ldr	r2, [pc, #168]	@ (800778c <HAL_DMA_Init+0x1dc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d01d      	beq.n	8007724 <HAL_DMA_Init+0x174>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a28      	ldr	r2, [pc, #160]	@ (8007790 <HAL_DMA_Init+0x1e0>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d018      	beq.n	8007724 <HAL_DMA_Init+0x174>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a27      	ldr	r2, [pc, #156]	@ (8007794 <HAL_DMA_Init+0x1e4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d013      	beq.n	8007724 <HAL_DMA_Init+0x174>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a25      	ldr	r2, [pc, #148]	@ (8007798 <HAL_DMA_Init+0x1e8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00e      	beq.n	8007724 <HAL_DMA_Init+0x174>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a24      	ldr	r2, [pc, #144]	@ (800779c <HAL_DMA_Init+0x1ec>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d009      	beq.n	8007724 <HAL_DMA_Init+0x174>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a22      	ldr	r2, [pc, #136]	@ (80077a0 <HAL_DMA_Init+0x1f0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d004      	beq.n	8007724 <HAL_DMA_Init+0x174>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a21      	ldr	r2, [pc, #132]	@ (80077a4 <HAL_DMA_Init+0x1f4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d108      	bne.n	8007736 <HAL_DMA_Init+0x186>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0201 	bic.w	r2, r2, #1
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	e007      	b.n	8007746 <HAL_DMA_Init+0x196>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0201 	bic.w	r2, r2, #1
 8007744:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007746:	e02f      	b.n	80077a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007748:	f7fd fc10 	bl	8004f6c <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b05      	cmp	r3, #5
 8007754:	d928      	bls.n	80077a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2220      	movs	r2, #32
 800775a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2203      	movs	r2, #3
 8007760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e242      	b.n	8007bee <HAL_DMA_Init+0x63e>
 8007768:	40020010 	.word	0x40020010
 800776c:	40020028 	.word	0x40020028
 8007770:	40020040 	.word	0x40020040
 8007774:	40020058 	.word	0x40020058
 8007778:	40020070 	.word	0x40020070
 800777c:	40020088 	.word	0x40020088
 8007780:	400200a0 	.word	0x400200a0
 8007784:	400200b8 	.word	0x400200b8
 8007788:	40020410 	.word	0x40020410
 800778c:	40020428 	.word	0x40020428
 8007790:	40020440 	.word	0x40020440
 8007794:	40020458 	.word	0x40020458
 8007798:	40020470 	.word	0x40020470
 800779c:	40020488 	.word	0x40020488
 80077a0:	400204a0 	.word	0x400204a0
 80077a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1c8      	bne.n	8007748 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	4b83      	ldr	r3, [pc, #524]	@ (80079d0 <HAL_DMA_Init+0x420>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80077ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d107      	bne.n	800780c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007804:	4313      	orrs	r3, r2
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	4313      	orrs	r3, r2
 800780a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	2b28      	cmp	r3, #40	@ 0x28
 8007812:	d903      	bls.n	800781c <HAL_DMA_Init+0x26c>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	2b2e      	cmp	r3, #46	@ 0x2e
 800781a:	d91f      	bls.n	800785c <HAL_DMA_Init+0x2ac>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	2b3e      	cmp	r3, #62	@ 0x3e
 8007822:	d903      	bls.n	800782c <HAL_DMA_Init+0x27c>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b42      	cmp	r3, #66	@ 0x42
 800782a:	d917      	bls.n	800785c <HAL_DMA_Init+0x2ac>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2b46      	cmp	r3, #70	@ 0x46
 8007832:	d903      	bls.n	800783c <HAL_DMA_Init+0x28c>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	2b48      	cmp	r3, #72	@ 0x48
 800783a:	d90f      	bls.n	800785c <HAL_DMA_Init+0x2ac>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	2b4e      	cmp	r3, #78	@ 0x4e
 8007842:	d903      	bls.n	800784c <HAL_DMA_Init+0x29c>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2b52      	cmp	r3, #82	@ 0x52
 800784a:	d907      	bls.n	800785c <HAL_DMA_Init+0x2ac>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2b73      	cmp	r3, #115	@ 0x73
 8007852:	d905      	bls.n	8007860 <HAL_DMA_Init+0x2b0>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	2b77      	cmp	r3, #119	@ 0x77
 800785a:	d801      	bhi.n	8007860 <HAL_DMA_Init+0x2b0>
 800785c:	2301      	movs	r3, #1
 800785e:	e000      	b.n	8007862 <HAL_DMA_Init+0x2b2>
 8007860:	2300      	movs	r3, #0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800786c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f023 0307 	bic.w	r3, r3, #7
 8007884:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4313      	orrs	r3, r2
 800788e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007894:	2b04      	cmp	r3, #4
 8007896:	d117      	bne.n	80078c8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	4313      	orrs	r3, r2
 80078a0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00e      	beq.n	80078c8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f002 f8e8 	bl	8009a80 <DMA_CheckFifoParam>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2240      	movs	r2, #64	@ 0x40
 80078ba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e192      	b.n	8007bee <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f002 f823 	bl	800991c <DMA_CalcBaseAndBitshift>
 80078d6:	4603      	mov	r3, r0
 80078d8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078de:	f003 031f 	and.w	r3, r3, #31
 80078e2:	223f      	movs	r2, #63	@ 0x3f
 80078e4:	409a      	lsls	r2, r3
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	609a      	str	r2, [r3, #8]
 80078ea:	e0c8      	b.n	8007a7e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a38      	ldr	r2, [pc, #224]	@ (80079d4 <HAL_DMA_Init+0x424>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d022      	beq.n	800793c <HAL_DMA_Init+0x38c>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a37      	ldr	r2, [pc, #220]	@ (80079d8 <HAL_DMA_Init+0x428>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d01d      	beq.n	800793c <HAL_DMA_Init+0x38c>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a35      	ldr	r2, [pc, #212]	@ (80079dc <HAL_DMA_Init+0x42c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d018      	beq.n	800793c <HAL_DMA_Init+0x38c>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a34      	ldr	r2, [pc, #208]	@ (80079e0 <HAL_DMA_Init+0x430>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d013      	beq.n	800793c <HAL_DMA_Init+0x38c>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a32      	ldr	r2, [pc, #200]	@ (80079e4 <HAL_DMA_Init+0x434>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d00e      	beq.n	800793c <HAL_DMA_Init+0x38c>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a31      	ldr	r2, [pc, #196]	@ (80079e8 <HAL_DMA_Init+0x438>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d009      	beq.n	800793c <HAL_DMA_Init+0x38c>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a2f      	ldr	r2, [pc, #188]	@ (80079ec <HAL_DMA_Init+0x43c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d004      	beq.n	800793c <HAL_DMA_Init+0x38c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a2e      	ldr	r2, [pc, #184]	@ (80079f0 <HAL_DMA_Init+0x440>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d101      	bne.n	8007940 <HAL_DMA_Init+0x390>
 800793c:	2301      	movs	r3, #1
 800793e:	e000      	b.n	8007942 <HAL_DMA_Init+0x392>
 8007940:	2300      	movs	r3, #0
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 8092 	beq.w	8007a6c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a21      	ldr	r2, [pc, #132]	@ (80079d4 <HAL_DMA_Init+0x424>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d021      	beq.n	8007996 <HAL_DMA_Init+0x3e6>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a20      	ldr	r2, [pc, #128]	@ (80079d8 <HAL_DMA_Init+0x428>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d01c      	beq.n	8007996 <HAL_DMA_Init+0x3e6>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a1e      	ldr	r2, [pc, #120]	@ (80079dc <HAL_DMA_Init+0x42c>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d017      	beq.n	8007996 <HAL_DMA_Init+0x3e6>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a1d      	ldr	r2, [pc, #116]	@ (80079e0 <HAL_DMA_Init+0x430>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d012      	beq.n	8007996 <HAL_DMA_Init+0x3e6>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a1b      	ldr	r2, [pc, #108]	@ (80079e4 <HAL_DMA_Init+0x434>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d00d      	beq.n	8007996 <HAL_DMA_Init+0x3e6>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a1a      	ldr	r2, [pc, #104]	@ (80079e8 <HAL_DMA_Init+0x438>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d008      	beq.n	8007996 <HAL_DMA_Init+0x3e6>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a18      	ldr	r2, [pc, #96]	@ (80079ec <HAL_DMA_Init+0x43c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d003      	beq.n	8007996 <HAL_DMA_Init+0x3e6>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a17      	ldr	r2, [pc, #92]	@ (80079f0 <HAL_DMA_Init+0x440>)
 8007994:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2202      	movs	r2, #2
 800799a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4b10      	ldr	r3, [pc, #64]	@ (80079f4 <HAL_DMA_Init+0x444>)
 80079b2:	4013      	ands	r3, r2
 80079b4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	2b40      	cmp	r3, #64	@ 0x40
 80079bc:	d01c      	beq.n	80079f8 <HAL_DMA_Init+0x448>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	2b80      	cmp	r3, #128	@ 0x80
 80079c4:	d102      	bne.n	80079cc <HAL_DMA_Init+0x41c>
 80079c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80079ca:	e016      	b.n	80079fa <HAL_DMA_Init+0x44a>
 80079cc:	2300      	movs	r3, #0
 80079ce:	e014      	b.n	80079fa <HAL_DMA_Init+0x44a>
 80079d0:	fe10803f 	.word	0xfe10803f
 80079d4:	58025408 	.word	0x58025408
 80079d8:	5802541c 	.word	0x5802541c
 80079dc:	58025430 	.word	0x58025430
 80079e0:	58025444 	.word	0x58025444
 80079e4:	58025458 	.word	0x58025458
 80079e8:	5802546c 	.word	0x5802546c
 80079ec:	58025480 	.word	0x58025480
 80079f0:	58025494 	.word	0x58025494
 80079f4:	fffe000f 	.word	0xfffe000f
 80079f8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	68d2      	ldr	r2, [r2, #12]
 80079fe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007a00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007a08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007a10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007a18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007a20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007a28:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	4b6e      	ldr	r3, [pc, #440]	@ (8007bf8 <HAL_DMA_Init+0x648>)
 8007a40:	4413      	add	r3, r2
 8007a42:	4a6e      	ldr	r2, [pc, #440]	@ (8007bfc <HAL_DMA_Init+0x64c>)
 8007a44:	fba2 2303 	umull	r2, r3, r2, r3
 8007a48:	091b      	lsrs	r3, r3, #4
 8007a4a:	009a      	lsls	r2, r3, #2
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 ff63 	bl	800991c <DMA_CalcBaseAndBitshift>
 8007a56:	4603      	mov	r3, r0
 8007a58:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a5e:	f003 031f 	and.w	r3, r3, #31
 8007a62:	2201      	movs	r2, #1
 8007a64:	409a      	lsls	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	605a      	str	r2, [r3, #4]
 8007a6a:	e008      	b.n	8007a7e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2240      	movs	r2, #64	@ 0x40
 8007a70:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2203      	movs	r2, #3
 8007a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e0b7      	b.n	8007bee <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a5f      	ldr	r2, [pc, #380]	@ (8007c00 <HAL_DMA_Init+0x650>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d072      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a5d      	ldr	r2, [pc, #372]	@ (8007c04 <HAL_DMA_Init+0x654>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d06d      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a5c      	ldr	r2, [pc, #368]	@ (8007c08 <HAL_DMA_Init+0x658>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d068      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a5a      	ldr	r2, [pc, #360]	@ (8007c0c <HAL_DMA_Init+0x65c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d063      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a59      	ldr	r2, [pc, #356]	@ (8007c10 <HAL_DMA_Init+0x660>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d05e      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a57      	ldr	r2, [pc, #348]	@ (8007c14 <HAL_DMA_Init+0x664>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d059      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a56      	ldr	r2, [pc, #344]	@ (8007c18 <HAL_DMA_Init+0x668>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d054      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a54      	ldr	r2, [pc, #336]	@ (8007c1c <HAL_DMA_Init+0x66c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d04f      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a53      	ldr	r2, [pc, #332]	@ (8007c20 <HAL_DMA_Init+0x670>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d04a      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a51      	ldr	r2, [pc, #324]	@ (8007c24 <HAL_DMA_Init+0x674>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d045      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a50      	ldr	r2, [pc, #320]	@ (8007c28 <HAL_DMA_Init+0x678>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d040      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a4e      	ldr	r2, [pc, #312]	@ (8007c2c <HAL_DMA_Init+0x67c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d03b      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a4d      	ldr	r2, [pc, #308]	@ (8007c30 <HAL_DMA_Init+0x680>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d036      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a4b      	ldr	r2, [pc, #300]	@ (8007c34 <HAL_DMA_Init+0x684>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d031      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a4a      	ldr	r2, [pc, #296]	@ (8007c38 <HAL_DMA_Init+0x688>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d02c      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a48      	ldr	r2, [pc, #288]	@ (8007c3c <HAL_DMA_Init+0x68c>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d027      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a47      	ldr	r2, [pc, #284]	@ (8007c40 <HAL_DMA_Init+0x690>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d022      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a45      	ldr	r2, [pc, #276]	@ (8007c44 <HAL_DMA_Init+0x694>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d01d      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a44      	ldr	r2, [pc, #272]	@ (8007c48 <HAL_DMA_Init+0x698>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d018      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a42      	ldr	r2, [pc, #264]	@ (8007c4c <HAL_DMA_Init+0x69c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d013      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a41      	ldr	r2, [pc, #260]	@ (8007c50 <HAL_DMA_Init+0x6a0>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00e      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a3f      	ldr	r2, [pc, #252]	@ (8007c54 <HAL_DMA_Init+0x6a4>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d009      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a3e      	ldr	r2, [pc, #248]	@ (8007c58 <HAL_DMA_Init+0x6a8>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d004      	beq.n	8007b6e <HAL_DMA_Init+0x5be>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a3c      	ldr	r2, [pc, #240]	@ (8007c5c <HAL_DMA_Init+0x6ac>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d101      	bne.n	8007b72 <HAL_DMA_Init+0x5c2>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <HAL_DMA_Init+0x5c4>
 8007b72:	2300      	movs	r3, #0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d032      	beq.n	8007bde <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 fffd 	bl	8009b78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	2b80      	cmp	r3, #128	@ 0x80
 8007b84:	d102      	bne.n	8007b8c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b94:	b2d2      	uxtb	r2, r2
 8007b96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007ba0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d010      	beq.n	8007bcc <HAL_DMA_Init+0x61c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	2b08      	cmp	r3, #8
 8007bb0:	d80c      	bhi.n	8007bcc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f002 f87a 	bl	8009cac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007bc8:	605a      	str	r2, [r3, #4]
 8007bca:	e008      	b.n	8007bde <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	a7fdabf8 	.word	0xa7fdabf8
 8007bfc:	cccccccd 	.word	0xcccccccd
 8007c00:	40020010 	.word	0x40020010
 8007c04:	40020028 	.word	0x40020028
 8007c08:	40020040 	.word	0x40020040
 8007c0c:	40020058 	.word	0x40020058
 8007c10:	40020070 	.word	0x40020070
 8007c14:	40020088 	.word	0x40020088
 8007c18:	400200a0 	.word	0x400200a0
 8007c1c:	400200b8 	.word	0x400200b8
 8007c20:	40020410 	.word	0x40020410
 8007c24:	40020428 	.word	0x40020428
 8007c28:	40020440 	.word	0x40020440
 8007c2c:	40020458 	.word	0x40020458
 8007c30:	40020470 	.word	0x40020470
 8007c34:	40020488 	.word	0x40020488
 8007c38:	400204a0 	.word	0x400204a0
 8007c3c:	400204b8 	.word	0x400204b8
 8007c40:	58025408 	.word	0x58025408
 8007c44:	5802541c 	.word	0x5802541c
 8007c48:	58025430 	.word	0x58025430
 8007c4c:	58025444 	.word	0x58025444
 8007c50:	58025458 	.word	0x58025458
 8007c54:	5802546c 	.word	0x5802546c
 8007c58:	58025480 	.word	0x58025480
 8007c5c:	58025494 	.word	0x58025494

08007c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e226      	b.n	80080ca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d101      	bne.n	8007c8a <HAL_DMA_Start_IT+0x2a>
 8007c86:	2302      	movs	r3, #2
 8007c88:	e21f      	b.n	80080ca <HAL_DMA_Start_IT+0x46a>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	f040 820a 	bne.w	80080b4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a68      	ldr	r2, [pc, #416]	@ (8007e54 <HAL_DMA_Start_IT+0x1f4>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d04a      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a66      	ldr	r2, [pc, #408]	@ (8007e58 <HAL_DMA_Start_IT+0x1f8>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d045      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a65      	ldr	r2, [pc, #404]	@ (8007e5c <HAL_DMA_Start_IT+0x1fc>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d040      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a63      	ldr	r2, [pc, #396]	@ (8007e60 <HAL_DMA_Start_IT+0x200>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d03b      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a62      	ldr	r2, [pc, #392]	@ (8007e64 <HAL_DMA_Start_IT+0x204>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d036      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a60      	ldr	r2, [pc, #384]	@ (8007e68 <HAL_DMA_Start_IT+0x208>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d031      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a5f      	ldr	r2, [pc, #380]	@ (8007e6c <HAL_DMA_Start_IT+0x20c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d02c      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a5d      	ldr	r2, [pc, #372]	@ (8007e70 <HAL_DMA_Start_IT+0x210>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d027      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a5c      	ldr	r2, [pc, #368]	@ (8007e74 <HAL_DMA_Start_IT+0x214>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d022      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a5a      	ldr	r2, [pc, #360]	@ (8007e78 <HAL_DMA_Start_IT+0x218>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d01d      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a59      	ldr	r2, [pc, #356]	@ (8007e7c <HAL_DMA_Start_IT+0x21c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d018      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a57      	ldr	r2, [pc, #348]	@ (8007e80 <HAL_DMA_Start_IT+0x220>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a56      	ldr	r2, [pc, #344]	@ (8007e84 <HAL_DMA_Start_IT+0x224>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00e      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a54      	ldr	r2, [pc, #336]	@ (8007e88 <HAL_DMA_Start_IT+0x228>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d009      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a53      	ldr	r2, [pc, #332]	@ (8007e8c <HAL_DMA_Start_IT+0x22c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d004      	beq.n	8007d4e <HAL_DMA_Start_IT+0xee>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a51      	ldr	r2, [pc, #324]	@ (8007e90 <HAL_DMA_Start_IT+0x230>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d108      	bne.n	8007d60 <HAL_DMA_Start_IT+0x100>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0201 	bic.w	r2, r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	e007      	b.n	8007d70 <HAL_DMA_Start_IT+0x110>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0201 	bic.w	r2, r2, #1
 8007d6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	68b9      	ldr	r1, [r7, #8]
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f001 fc24 	bl	80095c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a34      	ldr	r2, [pc, #208]	@ (8007e54 <HAL_DMA_Start_IT+0x1f4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d04a      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a33      	ldr	r2, [pc, #204]	@ (8007e58 <HAL_DMA_Start_IT+0x1f8>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d045      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a31      	ldr	r2, [pc, #196]	@ (8007e5c <HAL_DMA_Start_IT+0x1fc>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d040      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a30      	ldr	r2, [pc, #192]	@ (8007e60 <HAL_DMA_Start_IT+0x200>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d03b      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a2e      	ldr	r2, [pc, #184]	@ (8007e64 <HAL_DMA_Start_IT+0x204>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d036      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a2d      	ldr	r2, [pc, #180]	@ (8007e68 <HAL_DMA_Start_IT+0x208>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d031      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8007e6c <HAL_DMA_Start_IT+0x20c>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d02c      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8007e70 <HAL_DMA_Start_IT+0x210>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d027      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a28      	ldr	r2, [pc, #160]	@ (8007e74 <HAL_DMA_Start_IT+0x214>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d022      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a27      	ldr	r2, [pc, #156]	@ (8007e78 <HAL_DMA_Start_IT+0x218>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d01d      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a25      	ldr	r2, [pc, #148]	@ (8007e7c <HAL_DMA_Start_IT+0x21c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d018      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a24      	ldr	r2, [pc, #144]	@ (8007e80 <HAL_DMA_Start_IT+0x220>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d013      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a22      	ldr	r2, [pc, #136]	@ (8007e84 <HAL_DMA_Start_IT+0x224>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d00e      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a21      	ldr	r2, [pc, #132]	@ (8007e88 <HAL_DMA_Start_IT+0x228>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d009      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8007e8c <HAL_DMA_Start_IT+0x22c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d004      	beq.n	8007e1c <HAL_DMA_Start_IT+0x1bc>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a1e      	ldr	r2, [pc, #120]	@ (8007e90 <HAL_DMA_Start_IT+0x230>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d101      	bne.n	8007e20 <HAL_DMA_Start_IT+0x1c0>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e000      	b.n	8007e22 <HAL_DMA_Start_IT+0x1c2>
 8007e20:	2300      	movs	r3, #0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d036      	beq.n	8007e94 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f023 021e 	bic.w	r2, r3, #30
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f042 0216 	orr.w	r2, r2, #22
 8007e38:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d03e      	beq.n	8007ec0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f042 0208 	orr.w	r2, r2, #8
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	e035      	b.n	8007ec0 <HAL_DMA_Start_IT+0x260>
 8007e54:	40020010 	.word	0x40020010
 8007e58:	40020028 	.word	0x40020028
 8007e5c:	40020040 	.word	0x40020040
 8007e60:	40020058 	.word	0x40020058
 8007e64:	40020070 	.word	0x40020070
 8007e68:	40020088 	.word	0x40020088
 8007e6c:	400200a0 	.word	0x400200a0
 8007e70:	400200b8 	.word	0x400200b8
 8007e74:	40020410 	.word	0x40020410
 8007e78:	40020428 	.word	0x40020428
 8007e7c:	40020440 	.word	0x40020440
 8007e80:	40020458 	.word	0x40020458
 8007e84:	40020470 	.word	0x40020470
 8007e88:	40020488 	.word	0x40020488
 8007e8c:	400204a0 	.word	0x400204a0
 8007e90:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f023 020e 	bic.w	r2, r3, #14
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 020a 	orr.w	r2, r2, #10
 8007ea6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d007      	beq.n	8007ec0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0204 	orr.w	r2, r2, #4
 8007ebe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a83      	ldr	r2, [pc, #524]	@ (80080d4 <HAL_DMA_Start_IT+0x474>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d072      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a82      	ldr	r2, [pc, #520]	@ (80080d8 <HAL_DMA_Start_IT+0x478>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d06d      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a80      	ldr	r2, [pc, #512]	@ (80080dc <HAL_DMA_Start_IT+0x47c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d068      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a7f      	ldr	r2, [pc, #508]	@ (80080e0 <HAL_DMA_Start_IT+0x480>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d063      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a7d      	ldr	r2, [pc, #500]	@ (80080e4 <HAL_DMA_Start_IT+0x484>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d05e      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a7c      	ldr	r2, [pc, #496]	@ (80080e8 <HAL_DMA_Start_IT+0x488>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d059      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a7a      	ldr	r2, [pc, #488]	@ (80080ec <HAL_DMA_Start_IT+0x48c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d054      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a79      	ldr	r2, [pc, #484]	@ (80080f0 <HAL_DMA_Start_IT+0x490>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d04f      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a77      	ldr	r2, [pc, #476]	@ (80080f4 <HAL_DMA_Start_IT+0x494>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d04a      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a76      	ldr	r2, [pc, #472]	@ (80080f8 <HAL_DMA_Start_IT+0x498>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d045      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a74      	ldr	r2, [pc, #464]	@ (80080fc <HAL_DMA_Start_IT+0x49c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d040      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a73      	ldr	r2, [pc, #460]	@ (8008100 <HAL_DMA_Start_IT+0x4a0>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d03b      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a71      	ldr	r2, [pc, #452]	@ (8008104 <HAL_DMA_Start_IT+0x4a4>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d036      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a70      	ldr	r2, [pc, #448]	@ (8008108 <HAL_DMA_Start_IT+0x4a8>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d031      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a6e      	ldr	r2, [pc, #440]	@ (800810c <HAL_DMA_Start_IT+0x4ac>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d02c      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a6d      	ldr	r2, [pc, #436]	@ (8008110 <HAL_DMA_Start_IT+0x4b0>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d027      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a6b      	ldr	r2, [pc, #428]	@ (8008114 <HAL_DMA_Start_IT+0x4b4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d022      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a6a      	ldr	r2, [pc, #424]	@ (8008118 <HAL_DMA_Start_IT+0x4b8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d01d      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a68      	ldr	r2, [pc, #416]	@ (800811c <HAL_DMA_Start_IT+0x4bc>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d018      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a67      	ldr	r2, [pc, #412]	@ (8008120 <HAL_DMA_Start_IT+0x4c0>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d013      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a65      	ldr	r2, [pc, #404]	@ (8008124 <HAL_DMA_Start_IT+0x4c4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00e      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a64      	ldr	r2, [pc, #400]	@ (8008128 <HAL_DMA_Start_IT+0x4c8>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d009      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a62      	ldr	r2, [pc, #392]	@ (800812c <HAL_DMA_Start_IT+0x4cc>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d004      	beq.n	8007fb0 <HAL_DMA_Start_IT+0x350>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a61      	ldr	r2, [pc, #388]	@ (8008130 <HAL_DMA_Start_IT+0x4d0>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d101      	bne.n	8007fb4 <HAL_DMA_Start_IT+0x354>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e000      	b.n	8007fb6 <HAL_DMA_Start_IT+0x356>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d01a      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d007      	beq.n	8007fd8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fd6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d007      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a37      	ldr	r2, [pc, #220]	@ (80080d4 <HAL_DMA_Start_IT+0x474>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d04a      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a36      	ldr	r2, [pc, #216]	@ (80080d8 <HAL_DMA_Start_IT+0x478>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d045      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a34      	ldr	r2, [pc, #208]	@ (80080dc <HAL_DMA_Start_IT+0x47c>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d040      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a33      	ldr	r2, [pc, #204]	@ (80080e0 <HAL_DMA_Start_IT+0x480>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d03b      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a31      	ldr	r2, [pc, #196]	@ (80080e4 <HAL_DMA_Start_IT+0x484>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d036      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a30      	ldr	r2, [pc, #192]	@ (80080e8 <HAL_DMA_Start_IT+0x488>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d031      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a2e      	ldr	r2, [pc, #184]	@ (80080ec <HAL_DMA_Start_IT+0x48c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d02c      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a2d      	ldr	r2, [pc, #180]	@ (80080f0 <HAL_DMA_Start_IT+0x490>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d027      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a2b      	ldr	r2, [pc, #172]	@ (80080f4 <HAL_DMA_Start_IT+0x494>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d022      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a2a      	ldr	r2, [pc, #168]	@ (80080f8 <HAL_DMA_Start_IT+0x498>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d01d      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a28      	ldr	r2, [pc, #160]	@ (80080fc <HAL_DMA_Start_IT+0x49c>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d018      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a27      	ldr	r2, [pc, #156]	@ (8008100 <HAL_DMA_Start_IT+0x4a0>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d013      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a25      	ldr	r2, [pc, #148]	@ (8008104 <HAL_DMA_Start_IT+0x4a4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d00e      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a24      	ldr	r2, [pc, #144]	@ (8008108 <HAL_DMA_Start_IT+0x4a8>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d009      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a22      	ldr	r2, [pc, #136]	@ (800810c <HAL_DMA_Start_IT+0x4ac>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d004      	beq.n	8008090 <HAL_DMA_Start_IT+0x430>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a21      	ldr	r2, [pc, #132]	@ (8008110 <HAL_DMA_Start_IT+0x4b0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d108      	bne.n	80080a2 <HAL_DMA_Start_IT+0x442>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0201 	orr.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	e012      	b.n	80080c8 <HAL_DMA_Start_IT+0x468>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f042 0201 	orr.w	r2, r2, #1
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	e009      	b.n	80080c8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40020010 	.word	0x40020010
 80080d8:	40020028 	.word	0x40020028
 80080dc:	40020040 	.word	0x40020040
 80080e0:	40020058 	.word	0x40020058
 80080e4:	40020070 	.word	0x40020070
 80080e8:	40020088 	.word	0x40020088
 80080ec:	400200a0 	.word	0x400200a0
 80080f0:	400200b8 	.word	0x400200b8
 80080f4:	40020410 	.word	0x40020410
 80080f8:	40020428 	.word	0x40020428
 80080fc:	40020440 	.word	0x40020440
 8008100:	40020458 	.word	0x40020458
 8008104:	40020470 	.word	0x40020470
 8008108:	40020488 	.word	0x40020488
 800810c:	400204a0 	.word	0x400204a0
 8008110:	400204b8 	.word	0x400204b8
 8008114:	58025408 	.word	0x58025408
 8008118:	5802541c 	.word	0x5802541c
 800811c:	58025430 	.word	0x58025430
 8008120:	58025444 	.word	0x58025444
 8008124:	58025458 	.word	0x58025458
 8008128:	5802546c 	.word	0x5802546c
 800812c:	58025480 	.word	0x58025480
 8008130:	58025494 	.word	0x58025494

08008134 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800813c:	f7fc ff16 	bl	8004f6c <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e2dc      	b.n	8008706 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b02      	cmp	r3, #2
 8008156:	d008      	beq.n	800816a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2280      	movs	r2, #128	@ 0x80
 800815c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e2cd      	b.n	8008706 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a76      	ldr	r2, [pc, #472]	@ (8008348 <HAL_DMA_Abort+0x214>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d04a      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a74      	ldr	r2, [pc, #464]	@ (800834c <HAL_DMA_Abort+0x218>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d045      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a73      	ldr	r2, [pc, #460]	@ (8008350 <HAL_DMA_Abort+0x21c>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d040      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a71      	ldr	r2, [pc, #452]	@ (8008354 <HAL_DMA_Abort+0x220>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d03b      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a70      	ldr	r2, [pc, #448]	@ (8008358 <HAL_DMA_Abort+0x224>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d036      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a6e      	ldr	r2, [pc, #440]	@ (800835c <HAL_DMA_Abort+0x228>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d031      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a6d      	ldr	r2, [pc, #436]	@ (8008360 <HAL_DMA_Abort+0x22c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d02c      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a6b      	ldr	r2, [pc, #428]	@ (8008364 <HAL_DMA_Abort+0x230>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d027      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a6a      	ldr	r2, [pc, #424]	@ (8008368 <HAL_DMA_Abort+0x234>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d022      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a68      	ldr	r2, [pc, #416]	@ (800836c <HAL_DMA_Abort+0x238>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d01d      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a67      	ldr	r2, [pc, #412]	@ (8008370 <HAL_DMA_Abort+0x23c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d018      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a65      	ldr	r2, [pc, #404]	@ (8008374 <HAL_DMA_Abort+0x240>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d013      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a64      	ldr	r2, [pc, #400]	@ (8008378 <HAL_DMA_Abort+0x244>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d00e      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a62      	ldr	r2, [pc, #392]	@ (800837c <HAL_DMA_Abort+0x248>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d009      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a61      	ldr	r2, [pc, #388]	@ (8008380 <HAL_DMA_Abort+0x24c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d004      	beq.n	800820a <HAL_DMA_Abort+0xd6>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a5f      	ldr	r2, [pc, #380]	@ (8008384 <HAL_DMA_Abort+0x250>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d101      	bne.n	800820e <HAL_DMA_Abort+0xda>
 800820a:	2301      	movs	r3, #1
 800820c:	e000      	b.n	8008210 <HAL_DMA_Abort+0xdc>
 800820e:	2300      	movs	r3, #0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d013      	beq.n	800823c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 021e 	bic.w	r2, r2, #30
 8008222:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	695a      	ldr	r2, [r3, #20]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008232:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	617b      	str	r3, [r7, #20]
 800823a:	e00a      	b.n	8008252 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 020e 	bic.w	r2, r2, #14
 800824a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a3c      	ldr	r2, [pc, #240]	@ (8008348 <HAL_DMA_Abort+0x214>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d072      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a3a      	ldr	r2, [pc, #232]	@ (800834c <HAL_DMA_Abort+0x218>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d06d      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a39      	ldr	r2, [pc, #228]	@ (8008350 <HAL_DMA_Abort+0x21c>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d068      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a37      	ldr	r2, [pc, #220]	@ (8008354 <HAL_DMA_Abort+0x220>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d063      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a36      	ldr	r2, [pc, #216]	@ (8008358 <HAL_DMA_Abort+0x224>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d05e      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a34      	ldr	r2, [pc, #208]	@ (800835c <HAL_DMA_Abort+0x228>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d059      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a33      	ldr	r2, [pc, #204]	@ (8008360 <HAL_DMA_Abort+0x22c>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d054      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a31      	ldr	r2, [pc, #196]	@ (8008364 <HAL_DMA_Abort+0x230>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d04f      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a30      	ldr	r2, [pc, #192]	@ (8008368 <HAL_DMA_Abort+0x234>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d04a      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a2e      	ldr	r2, [pc, #184]	@ (800836c <HAL_DMA_Abort+0x238>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d045      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a2d      	ldr	r2, [pc, #180]	@ (8008370 <HAL_DMA_Abort+0x23c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d040      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a2b      	ldr	r2, [pc, #172]	@ (8008374 <HAL_DMA_Abort+0x240>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d03b      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a2a      	ldr	r2, [pc, #168]	@ (8008378 <HAL_DMA_Abort+0x244>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d036      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a28      	ldr	r2, [pc, #160]	@ (800837c <HAL_DMA_Abort+0x248>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d031      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a27      	ldr	r2, [pc, #156]	@ (8008380 <HAL_DMA_Abort+0x24c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d02c      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a25      	ldr	r2, [pc, #148]	@ (8008384 <HAL_DMA_Abort+0x250>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d027      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a24      	ldr	r2, [pc, #144]	@ (8008388 <HAL_DMA_Abort+0x254>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d022      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a22      	ldr	r2, [pc, #136]	@ (800838c <HAL_DMA_Abort+0x258>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d01d      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a21      	ldr	r2, [pc, #132]	@ (8008390 <HAL_DMA_Abort+0x25c>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d018      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a1f      	ldr	r2, [pc, #124]	@ (8008394 <HAL_DMA_Abort+0x260>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d013      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a1e      	ldr	r2, [pc, #120]	@ (8008398 <HAL_DMA_Abort+0x264>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d00e      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a1c      	ldr	r2, [pc, #112]	@ (800839c <HAL_DMA_Abort+0x268>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d009      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a1b      	ldr	r2, [pc, #108]	@ (80083a0 <HAL_DMA_Abort+0x26c>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d004      	beq.n	8008342 <HAL_DMA_Abort+0x20e>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a19      	ldr	r2, [pc, #100]	@ (80083a4 <HAL_DMA_Abort+0x270>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d132      	bne.n	80083a8 <HAL_DMA_Abort+0x274>
 8008342:	2301      	movs	r3, #1
 8008344:	e031      	b.n	80083aa <HAL_DMA_Abort+0x276>
 8008346:	bf00      	nop
 8008348:	40020010 	.word	0x40020010
 800834c:	40020028 	.word	0x40020028
 8008350:	40020040 	.word	0x40020040
 8008354:	40020058 	.word	0x40020058
 8008358:	40020070 	.word	0x40020070
 800835c:	40020088 	.word	0x40020088
 8008360:	400200a0 	.word	0x400200a0
 8008364:	400200b8 	.word	0x400200b8
 8008368:	40020410 	.word	0x40020410
 800836c:	40020428 	.word	0x40020428
 8008370:	40020440 	.word	0x40020440
 8008374:	40020458 	.word	0x40020458
 8008378:	40020470 	.word	0x40020470
 800837c:	40020488 	.word	0x40020488
 8008380:	400204a0 	.word	0x400204a0
 8008384:	400204b8 	.word	0x400204b8
 8008388:	58025408 	.word	0x58025408
 800838c:	5802541c 	.word	0x5802541c
 8008390:	58025430 	.word	0x58025430
 8008394:	58025444 	.word	0x58025444
 8008398:	58025458 	.word	0x58025458
 800839c:	5802546c 	.word	0x5802546c
 80083a0:	58025480 	.word	0x58025480
 80083a4:	58025494 	.word	0x58025494
 80083a8:	2300      	movs	r3, #0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d007      	beq.n	80083be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a6d      	ldr	r2, [pc, #436]	@ (8008578 <HAL_DMA_Abort+0x444>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d04a      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a6b      	ldr	r2, [pc, #428]	@ (800857c <HAL_DMA_Abort+0x448>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d045      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a6a      	ldr	r2, [pc, #424]	@ (8008580 <HAL_DMA_Abort+0x44c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d040      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a68      	ldr	r2, [pc, #416]	@ (8008584 <HAL_DMA_Abort+0x450>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d03b      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a67      	ldr	r2, [pc, #412]	@ (8008588 <HAL_DMA_Abort+0x454>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d036      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a65      	ldr	r2, [pc, #404]	@ (800858c <HAL_DMA_Abort+0x458>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d031      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a64      	ldr	r2, [pc, #400]	@ (8008590 <HAL_DMA_Abort+0x45c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d02c      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a62      	ldr	r2, [pc, #392]	@ (8008594 <HAL_DMA_Abort+0x460>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d027      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a61      	ldr	r2, [pc, #388]	@ (8008598 <HAL_DMA_Abort+0x464>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d022      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a5f      	ldr	r2, [pc, #380]	@ (800859c <HAL_DMA_Abort+0x468>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d01d      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a5e      	ldr	r2, [pc, #376]	@ (80085a0 <HAL_DMA_Abort+0x46c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d018      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a5c      	ldr	r2, [pc, #368]	@ (80085a4 <HAL_DMA_Abort+0x470>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d013      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a5b      	ldr	r2, [pc, #364]	@ (80085a8 <HAL_DMA_Abort+0x474>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d00e      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a59      	ldr	r2, [pc, #356]	@ (80085ac <HAL_DMA_Abort+0x478>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d009      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a58      	ldr	r2, [pc, #352]	@ (80085b0 <HAL_DMA_Abort+0x47c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d004      	beq.n	800845e <HAL_DMA_Abort+0x32a>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a56      	ldr	r2, [pc, #344]	@ (80085b4 <HAL_DMA_Abort+0x480>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d108      	bne.n	8008470 <HAL_DMA_Abort+0x33c>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0201 	bic.w	r2, r2, #1
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	e007      	b.n	8008480 <HAL_DMA_Abort+0x34c>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0201 	bic.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008480:	e013      	b.n	80084aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008482:	f7fc fd73 	bl	8004f6c <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b05      	cmp	r3, #5
 800848e:	d90c      	bls.n	80084aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2220      	movs	r2, #32
 8008494:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2203      	movs	r2, #3
 800849a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e12d      	b.n	8008706 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e5      	bne.n	8008482 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a2f      	ldr	r2, [pc, #188]	@ (8008578 <HAL_DMA_Abort+0x444>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d04a      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a2d      	ldr	r2, [pc, #180]	@ (800857c <HAL_DMA_Abort+0x448>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d045      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a2c      	ldr	r2, [pc, #176]	@ (8008580 <HAL_DMA_Abort+0x44c>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d040      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a2a      	ldr	r2, [pc, #168]	@ (8008584 <HAL_DMA_Abort+0x450>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d03b      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a29      	ldr	r2, [pc, #164]	@ (8008588 <HAL_DMA_Abort+0x454>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d036      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a27      	ldr	r2, [pc, #156]	@ (800858c <HAL_DMA_Abort+0x458>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d031      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a26      	ldr	r2, [pc, #152]	@ (8008590 <HAL_DMA_Abort+0x45c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d02c      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a24      	ldr	r2, [pc, #144]	@ (8008594 <HAL_DMA_Abort+0x460>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d027      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a23      	ldr	r2, [pc, #140]	@ (8008598 <HAL_DMA_Abort+0x464>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d022      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a21      	ldr	r2, [pc, #132]	@ (800859c <HAL_DMA_Abort+0x468>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d01d      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a20      	ldr	r2, [pc, #128]	@ (80085a0 <HAL_DMA_Abort+0x46c>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d018      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a1e      	ldr	r2, [pc, #120]	@ (80085a4 <HAL_DMA_Abort+0x470>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d013      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a1d      	ldr	r2, [pc, #116]	@ (80085a8 <HAL_DMA_Abort+0x474>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d00e      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a1b      	ldr	r2, [pc, #108]	@ (80085ac <HAL_DMA_Abort+0x478>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d009      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a1a      	ldr	r2, [pc, #104]	@ (80085b0 <HAL_DMA_Abort+0x47c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d004      	beq.n	8008556 <HAL_DMA_Abort+0x422>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a18      	ldr	r2, [pc, #96]	@ (80085b4 <HAL_DMA_Abort+0x480>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d101      	bne.n	800855a <HAL_DMA_Abort+0x426>
 8008556:	2301      	movs	r3, #1
 8008558:	e000      	b.n	800855c <HAL_DMA_Abort+0x428>
 800855a:	2300      	movs	r3, #0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d02b      	beq.n	80085b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008564:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800856a:	f003 031f 	and.w	r3, r3, #31
 800856e:	223f      	movs	r2, #63	@ 0x3f
 8008570:	409a      	lsls	r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	609a      	str	r2, [r3, #8]
 8008576:	e02a      	b.n	80085ce <HAL_DMA_Abort+0x49a>
 8008578:	40020010 	.word	0x40020010
 800857c:	40020028 	.word	0x40020028
 8008580:	40020040 	.word	0x40020040
 8008584:	40020058 	.word	0x40020058
 8008588:	40020070 	.word	0x40020070
 800858c:	40020088 	.word	0x40020088
 8008590:	400200a0 	.word	0x400200a0
 8008594:	400200b8 	.word	0x400200b8
 8008598:	40020410 	.word	0x40020410
 800859c:	40020428 	.word	0x40020428
 80085a0:	40020440 	.word	0x40020440
 80085a4:	40020458 	.word	0x40020458
 80085a8:	40020470 	.word	0x40020470
 80085ac:	40020488 	.word	0x40020488
 80085b0:	400204a0 	.word	0x400204a0
 80085b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085c2:	f003 031f 	and.w	r3, r3, #31
 80085c6:	2201      	movs	r2, #1
 80085c8:	409a      	lsls	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a4f      	ldr	r2, [pc, #316]	@ (8008710 <HAL_DMA_Abort+0x5dc>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d072      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a4d      	ldr	r2, [pc, #308]	@ (8008714 <HAL_DMA_Abort+0x5e0>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d06d      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a4c      	ldr	r2, [pc, #304]	@ (8008718 <HAL_DMA_Abort+0x5e4>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d068      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a4a      	ldr	r2, [pc, #296]	@ (800871c <HAL_DMA_Abort+0x5e8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d063      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a49      	ldr	r2, [pc, #292]	@ (8008720 <HAL_DMA_Abort+0x5ec>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d05e      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a47      	ldr	r2, [pc, #284]	@ (8008724 <HAL_DMA_Abort+0x5f0>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d059      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a46      	ldr	r2, [pc, #280]	@ (8008728 <HAL_DMA_Abort+0x5f4>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d054      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a44      	ldr	r2, [pc, #272]	@ (800872c <HAL_DMA_Abort+0x5f8>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d04f      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a43      	ldr	r2, [pc, #268]	@ (8008730 <HAL_DMA_Abort+0x5fc>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d04a      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a41      	ldr	r2, [pc, #260]	@ (8008734 <HAL_DMA_Abort+0x600>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d045      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a40      	ldr	r2, [pc, #256]	@ (8008738 <HAL_DMA_Abort+0x604>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d040      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a3e      	ldr	r2, [pc, #248]	@ (800873c <HAL_DMA_Abort+0x608>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d03b      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a3d      	ldr	r2, [pc, #244]	@ (8008740 <HAL_DMA_Abort+0x60c>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d036      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a3b      	ldr	r2, [pc, #236]	@ (8008744 <HAL_DMA_Abort+0x610>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d031      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a3a      	ldr	r2, [pc, #232]	@ (8008748 <HAL_DMA_Abort+0x614>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d02c      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a38      	ldr	r2, [pc, #224]	@ (800874c <HAL_DMA_Abort+0x618>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d027      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a37      	ldr	r2, [pc, #220]	@ (8008750 <HAL_DMA_Abort+0x61c>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d022      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a35      	ldr	r2, [pc, #212]	@ (8008754 <HAL_DMA_Abort+0x620>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d01d      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a34      	ldr	r2, [pc, #208]	@ (8008758 <HAL_DMA_Abort+0x624>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d018      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a32      	ldr	r2, [pc, #200]	@ (800875c <HAL_DMA_Abort+0x628>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d013      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a31      	ldr	r2, [pc, #196]	@ (8008760 <HAL_DMA_Abort+0x62c>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d00e      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a2f      	ldr	r2, [pc, #188]	@ (8008764 <HAL_DMA_Abort+0x630>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d009      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a2e      	ldr	r2, [pc, #184]	@ (8008768 <HAL_DMA_Abort+0x634>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d004      	beq.n	80086be <HAL_DMA_Abort+0x58a>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a2c      	ldr	r2, [pc, #176]	@ (800876c <HAL_DMA_Abort+0x638>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d101      	bne.n	80086c2 <HAL_DMA_Abort+0x58e>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <HAL_DMA_Abort+0x590>
 80086c2:	2300      	movs	r3, #0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d015      	beq.n	80086f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80086d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00c      	beq.n	80086f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80086e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80086f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	40020010 	.word	0x40020010
 8008714:	40020028 	.word	0x40020028
 8008718:	40020040 	.word	0x40020040
 800871c:	40020058 	.word	0x40020058
 8008720:	40020070 	.word	0x40020070
 8008724:	40020088 	.word	0x40020088
 8008728:	400200a0 	.word	0x400200a0
 800872c:	400200b8 	.word	0x400200b8
 8008730:	40020410 	.word	0x40020410
 8008734:	40020428 	.word	0x40020428
 8008738:	40020440 	.word	0x40020440
 800873c:	40020458 	.word	0x40020458
 8008740:	40020470 	.word	0x40020470
 8008744:	40020488 	.word	0x40020488
 8008748:	400204a0 	.word	0x400204a0
 800874c:	400204b8 	.word	0x400204b8
 8008750:	58025408 	.word	0x58025408
 8008754:	5802541c 	.word	0x5802541c
 8008758:	58025430 	.word	0x58025430
 800875c:	58025444 	.word	0x58025444
 8008760:	58025458 	.word	0x58025458
 8008764:	5802546c 	.word	0x5802546c
 8008768:	58025480 	.word	0x58025480
 800876c:	58025494 	.word	0x58025494

08008770 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08a      	sub	sp, #40	@ 0x28
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800877c:	4b67      	ldr	r3, [pc, #412]	@ (800891c <HAL_DMA_IRQHandler+0x1ac>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a67      	ldr	r2, [pc, #412]	@ (8008920 <HAL_DMA_IRQHandler+0x1b0>)
 8008782:	fba2 2303 	umull	r2, r3, r2, r3
 8008786:	0a9b      	lsrs	r3, r3, #10
 8008788:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800878e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008794:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008796:	6a3b      	ldr	r3, [r7, #32]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a5f      	ldr	r2, [pc, #380]	@ (8008924 <HAL_DMA_IRQHandler+0x1b4>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d04a      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a5d      	ldr	r2, [pc, #372]	@ (8008928 <HAL_DMA_IRQHandler+0x1b8>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d045      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a5c      	ldr	r2, [pc, #368]	@ (800892c <HAL_DMA_IRQHandler+0x1bc>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d040      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a5a      	ldr	r2, [pc, #360]	@ (8008930 <HAL_DMA_IRQHandler+0x1c0>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d03b      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a59      	ldr	r2, [pc, #356]	@ (8008934 <HAL_DMA_IRQHandler+0x1c4>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d036      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a57      	ldr	r2, [pc, #348]	@ (8008938 <HAL_DMA_IRQHandler+0x1c8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d031      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a56      	ldr	r2, [pc, #344]	@ (800893c <HAL_DMA_IRQHandler+0x1cc>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d02c      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a54      	ldr	r2, [pc, #336]	@ (8008940 <HAL_DMA_IRQHandler+0x1d0>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d027      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a53      	ldr	r2, [pc, #332]	@ (8008944 <HAL_DMA_IRQHandler+0x1d4>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d022      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a51      	ldr	r2, [pc, #324]	@ (8008948 <HAL_DMA_IRQHandler+0x1d8>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d01d      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a50      	ldr	r2, [pc, #320]	@ (800894c <HAL_DMA_IRQHandler+0x1dc>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d018      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a4e      	ldr	r2, [pc, #312]	@ (8008950 <HAL_DMA_IRQHandler+0x1e0>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d013      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a4d      	ldr	r2, [pc, #308]	@ (8008954 <HAL_DMA_IRQHandler+0x1e4>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00e      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a4b      	ldr	r2, [pc, #300]	@ (8008958 <HAL_DMA_IRQHandler+0x1e8>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d009      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a4a      	ldr	r2, [pc, #296]	@ (800895c <HAL_DMA_IRQHandler+0x1ec>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d004      	beq.n	8008842 <HAL_DMA_IRQHandler+0xd2>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a48      	ldr	r2, [pc, #288]	@ (8008960 <HAL_DMA_IRQHandler+0x1f0>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d101      	bne.n	8008846 <HAL_DMA_IRQHandler+0xd6>
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <HAL_DMA_IRQHandler+0xd8>
 8008846:	2300      	movs	r3, #0
 8008848:	2b00      	cmp	r3, #0
 800884a:	f000 842b 	beq.w	80090a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008852:	f003 031f 	and.w	r3, r3, #31
 8008856:	2208      	movs	r2, #8
 8008858:	409a      	lsls	r2, r3
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	4013      	ands	r3, r2
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 80a2 	beq.w	80089a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a2e      	ldr	r2, [pc, #184]	@ (8008924 <HAL_DMA_IRQHandler+0x1b4>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d04a      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a2d      	ldr	r2, [pc, #180]	@ (8008928 <HAL_DMA_IRQHandler+0x1b8>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d045      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a2b      	ldr	r2, [pc, #172]	@ (800892c <HAL_DMA_IRQHandler+0x1bc>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d040      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a2a      	ldr	r2, [pc, #168]	@ (8008930 <HAL_DMA_IRQHandler+0x1c0>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d03b      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a28      	ldr	r2, [pc, #160]	@ (8008934 <HAL_DMA_IRQHandler+0x1c4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d036      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a27      	ldr	r2, [pc, #156]	@ (8008938 <HAL_DMA_IRQHandler+0x1c8>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d031      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a25      	ldr	r2, [pc, #148]	@ (800893c <HAL_DMA_IRQHandler+0x1cc>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d02c      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a24      	ldr	r2, [pc, #144]	@ (8008940 <HAL_DMA_IRQHandler+0x1d0>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d027      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a22      	ldr	r2, [pc, #136]	@ (8008944 <HAL_DMA_IRQHandler+0x1d4>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d022      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a21      	ldr	r2, [pc, #132]	@ (8008948 <HAL_DMA_IRQHandler+0x1d8>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d01d      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1f      	ldr	r2, [pc, #124]	@ (800894c <HAL_DMA_IRQHandler+0x1dc>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d018      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008950 <HAL_DMA_IRQHandler+0x1e0>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d013      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008954 <HAL_DMA_IRQHandler+0x1e4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d00e      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008958 <HAL_DMA_IRQHandler+0x1e8>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d009      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a19      	ldr	r2, [pc, #100]	@ (800895c <HAL_DMA_IRQHandler+0x1ec>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d004      	beq.n	8008904 <HAL_DMA_IRQHandler+0x194>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a18      	ldr	r2, [pc, #96]	@ (8008960 <HAL_DMA_IRQHandler+0x1f0>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d12f      	bne.n	8008964 <HAL_DMA_IRQHandler+0x1f4>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0304 	and.w	r3, r3, #4
 800890e:	2b00      	cmp	r3, #0
 8008910:	bf14      	ite	ne
 8008912:	2301      	movne	r3, #1
 8008914:	2300      	moveq	r3, #0
 8008916:	b2db      	uxtb	r3, r3
 8008918:	e02e      	b.n	8008978 <HAL_DMA_IRQHandler+0x208>
 800891a:	bf00      	nop
 800891c:	24000018 	.word	0x24000018
 8008920:	1b4e81b5 	.word	0x1b4e81b5
 8008924:	40020010 	.word	0x40020010
 8008928:	40020028 	.word	0x40020028
 800892c:	40020040 	.word	0x40020040
 8008930:	40020058 	.word	0x40020058
 8008934:	40020070 	.word	0x40020070
 8008938:	40020088 	.word	0x40020088
 800893c:	400200a0 	.word	0x400200a0
 8008940:	400200b8 	.word	0x400200b8
 8008944:	40020410 	.word	0x40020410
 8008948:	40020428 	.word	0x40020428
 800894c:	40020440 	.word	0x40020440
 8008950:	40020458 	.word	0x40020458
 8008954:	40020470 	.word	0x40020470
 8008958:	40020488 	.word	0x40020488
 800895c:	400204a0 	.word	0x400204a0
 8008960:	400204b8 	.word	0x400204b8
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0308 	and.w	r3, r3, #8
 800896e:	2b00      	cmp	r3, #0
 8008970:	bf14      	ite	ne
 8008972:	2301      	movne	r3, #1
 8008974:	2300      	moveq	r3, #0
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d015      	beq.n	80089a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0204 	bic.w	r2, r2, #4
 800898a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008990:	f003 031f 	and.w	r3, r3, #31
 8008994:	2208      	movs	r2, #8
 8008996:	409a      	lsls	r2, r3
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a0:	f043 0201 	orr.w	r2, r3, #1
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089ac:	f003 031f 	and.w	r3, r3, #31
 80089b0:	69ba      	ldr	r2, [r7, #24]
 80089b2:	fa22 f303 	lsr.w	r3, r2, r3
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d06e      	beq.n	8008a9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a69      	ldr	r2, [pc, #420]	@ (8008b68 <HAL_DMA_IRQHandler+0x3f8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d04a      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a67      	ldr	r2, [pc, #412]	@ (8008b6c <HAL_DMA_IRQHandler+0x3fc>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d045      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a66      	ldr	r2, [pc, #408]	@ (8008b70 <HAL_DMA_IRQHandler+0x400>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d040      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a64      	ldr	r2, [pc, #400]	@ (8008b74 <HAL_DMA_IRQHandler+0x404>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d03b      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a63      	ldr	r2, [pc, #396]	@ (8008b78 <HAL_DMA_IRQHandler+0x408>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d036      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a61      	ldr	r2, [pc, #388]	@ (8008b7c <HAL_DMA_IRQHandler+0x40c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d031      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a60      	ldr	r2, [pc, #384]	@ (8008b80 <HAL_DMA_IRQHandler+0x410>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d02c      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a5e      	ldr	r2, [pc, #376]	@ (8008b84 <HAL_DMA_IRQHandler+0x414>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d027      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a5d      	ldr	r2, [pc, #372]	@ (8008b88 <HAL_DMA_IRQHandler+0x418>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d022      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a5b      	ldr	r2, [pc, #364]	@ (8008b8c <HAL_DMA_IRQHandler+0x41c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d01d      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a5a      	ldr	r2, [pc, #360]	@ (8008b90 <HAL_DMA_IRQHandler+0x420>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d018      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a58      	ldr	r2, [pc, #352]	@ (8008b94 <HAL_DMA_IRQHandler+0x424>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d013      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a57      	ldr	r2, [pc, #348]	@ (8008b98 <HAL_DMA_IRQHandler+0x428>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d00e      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a55      	ldr	r2, [pc, #340]	@ (8008b9c <HAL_DMA_IRQHandler+0x42c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d009      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a54      	ldr	r2, [pc, #336]	@ (8008ba0 <HAL_DMA_IRQHandler+0x430>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d004      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x2ee>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a52      	ldr	r2, [pc, #328]	@ (8008ba4 <HAL_DMA_IRQHandler+0x434>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d10a      	bne.n	8008a74 <HAL_DMA_IRQHandler+0x304>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	bf14      	ite	ne
 8008a6c:	2301      	movne	r3, #1
 8008a6e:	2300      	moveq	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	e003      	b.n	8008a7c <HAL_DMA_IRQHandler+0x30c>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00d      	beq.n	8008a9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a84:	f003 031f 	and.w	r3, r3, #31
 8008a88:	2201      	movs	r2, #1
 8008a8a:	409a      	lsls	r2, r3
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a94:	f043 0202 	orr.w	r2, r3, #2
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aa0:	f003 031f 	and.w	r3, r3, #31
 8008aa4:	2204      	movs	r2, #4
 8008aa6:	409a      	lsls	r2, r3
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	4013      	ands	r3, r2
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 808f 	beq.w	8008bd0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8008b68 <HAL_DMA_IRQHandler+0x3f8>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d04a      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8008b6c <HAL_DMA_IRQHandler+0x3fc>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d045      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a29      	ldr	r2, [pc, #164]	@ (8008b70 <HAL_DMA_IRQHandler+0x400>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d040      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a27      	ldr	r2, [pc, #156]	@ (8008b74 <HAL_DMA_IRQHandler+0x404>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d03b      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a26      	ldr	r2, [pc, #152]	@ (8008b78 <HAL_DMA_IRQHandler+0x408>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d036      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a24      	ldr	r2, [pc, #144]	@ (8008b7c <HAL_DMA_IRQHandler+0x40c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d031      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a23      	ldr	r2, [pc, #140]	@ (8008b80 <HAL_DMA_IRQHandler+0x410>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d02c      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a21      	ldr	r2, [pc, #132]	@ (8008b84 <HAL_DMA_IRQHandler+0x414>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d027      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a20      	ldr	r2, [pc, #128]	@ (8008b88 <HAL_DMA_IRQHandler+0x418>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d022      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a1e      	ldr	r2, [pc, #120]	@ (8008b8c <HAL_DMA_IRQHandler+0x41c>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d01d      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8008b90 <HAL_DMA_IRQHandler+0x420>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d018      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a1b      	ldr	r2, [pc, #108]	@ (8008b94 <HAL_DMA_IRQHandler+0x424>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d013      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8008b98 <HAL_DMA_IRQHandler+0x428>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d00e      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a18      	ldr	r2, [pc, #96]	@ (8008b9c <HAL_DMA_IRQHandler+0x42c>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d009      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a17      	ldr	r2, [pc, #92]	@ (8008ba0 <HAL_DMA_IRQHandler+0x430>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d004      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x3e2>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a15      	ldr	r2, [pc, #84]	@ (8008ba4 <HAL_DMA_IRQHandler+0x434>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d12a      	bne.n	8008ba8 <HAL_DMA_IRQHandler+0x438>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0302 	and.w	r3, r3, #2
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	bf14      	ite	ne
 8008b60:	2301      	movne	r3, #1
 8008b62:	2300      	moveq	r3, #0
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	e023      	b.n	8008bb0 <HAL_DMA_IRQHandler+0x440>
 8008b68:	40020010 	.word	0x40020010
 8008b6c:	40020028 	.word	0x40020028
 8008b70:	40020040 	.word	0x40020040
 8008b74:	40020058 	.word	0x40020058
 8008b78:	40020070 	.word	0x40020070
 8008b7c:	40020088 	.word	0x40020088
 8008b80:	400200a0 	.word	0x400200a0
 8008b84:	400200b8 	.word	0x400200b8
 8008b88:	40020410 	.word	0x40020410
 8008b8c:	40020428 	.word	0x40020428
 8008b90:	40020440 	.word	0x40020440
 8008b94:	40020458 	.word	0x40020458
 8008b98:	40020470 	.word	0x40020470
 8008b9c:	40020488 	.word	0x40020488
 8008ba0:	400204a0 	.word	0x400204a0
 8008ba4:	400204b8 	.word	0x400204b8
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00d      	beq.n	8008bd0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bb8:	f003 031f 	and.w	r3, r3, #31
 8008bbc:	2204      	movs	r2, #4
 8008bbe:	409a      	lsls	r2, r3
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc8:	f043 0204 	orr.w	r2, r3, #4
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bd4:	f003 031f 	and.w	r3, r3, #31
 8008bd8:	2210      	movs	r2, #16
 8008bda:	409a      	lsls	r2, r3
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	4013      	ands	r3, r2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 80a6 	beq.w	8008d32 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a85      	ldr	r2, [pc, #532]	@ (8008e00 <HAL_DMA_IRQHandler+0x690>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d04a      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a83      	ldr	r2, [pc, #524]	@ (8008e04 <HAL_DMA_IRQHandler+0x694>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d045      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a82      	ldr	r2, [pc, #520]	@ (8008e08 <HAL_DMA_IRQHandler+0x698>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d040      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a80      	ldr	r2, [pc, #512]	@ (8008e0c <HAL_DMA_IRQHandler+0x69c>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d03b      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a7f      	ldr	r2, [pc, #508]	@ (8008e10 <HAL_DMA_IRQHandler+0x6a0>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d036      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a7d      	ldr	r2, [pc, #500]	@ (8008e14 <HAL_DMA_IRQHandler+0x6a4>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d031      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a7c      	ldr	r2, [pc, #496]	@ (8008e18 <HAL_DMA_IRQHandler+0x6a8>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d02c      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a7a      	ldr	r2, [pc, #488]	@ (8008e1c <HAL_DMA_IRQHandler+0x6ac>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d027      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a79      	ldr	r2, [pc, #484]	@ (8008e20 <HAL_DMA_IRQHandler+0x6b0>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d022      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a77      	ldr	r2, [pc, #476]	@ (8008e24 <HAL_DMA_IRQHandler+0x6b4>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d01d      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a76      	ldr	r2, [pc, #472]	@ (8008e28 <HAL_DMA_IRQHandler+0x6b8>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d018      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a74      	ldr	r2, [pc, #464]	@ (8008e2c <HAL_DMA_IRQHandler+0x6bc>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d013      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a73      	ldr	r2, [pc, #460]	@ (8008e30 <HAL_DMA_IRQHandler+0x6c0>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d00e      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a71      	ldr	r2, [pc, #452]	@ (8008e34 <HAL_DMA_IRQHandler+0x6c4>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d009      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a70      	ldr	r2, [pc, #448]	@ (8008e38 <HAL_DMA_IRQHandler+0x6c8>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d004      	beq.n	8008c86 <HAL_DMA_IRQHandler+0x516>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a6e      	ldr	r2, [pc, #440]	@ (8008e3c <HAL_DMA_IRQHandler+0x6cc>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d10a      	bne.n	8008c9c <HAL_DMA_IRQHandler+0x52c>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0308 	and.w	r3, r3, #8
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	bf14      	ite	ne
 8008c94:	2301      	movne	r3, #1
 8008c96:	2300      	moveq	r3, #0
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	e009      	b.n	8008cb0 <HAL_DMA_IRQHandler+0x540>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0304 	and.w	r3, r3, #4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bf14      	ite	ne
 8008caa:	2301      	movne	r3, #1
 8008cac:	2300      	moveq	r3, #0
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d03e      	beq.n	8008d32 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cb8:	f003 031f 	and.w	r3, r3, #31
 8008cbc:	2210      	movs	r2, #16
 8008cbe:	409a      	lsls	r2, r3
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d018      	beq.n	8008d04 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d108      	bne.n	8008cf2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d024      	beq.n	8008d32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	4798      	blx	r3
 8008cf0:	e01f      	b.n	8008d32 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d01b      	beq.n	8008d32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	4798      	blx	r3
 8008d02:	e016      	b.n	8008d32 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d107      	bne.n	8008d22 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 0208 	bic.w	r2, r2, #8
 8008d20:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d36:	f003 031f 	and.w	r3, r3, #31
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	409a      	lsls	r2, r3
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	4013      	ands	r3, r2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 8110 	beq.w	8008f68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8008e00 <HAL_DMA_IRQHandler+0x690>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d04a      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a2b      	ldr	r2, [pc, #172]	@ (8008e04 <HAL_DMA_IRQHandler+0x694>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d045      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a29      	ldr	r2, [pc, #164]	@ (8008e08 <HAL_DMA_IRQHandler+0x698>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d040      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a28      	ldr	r2, [pc, #160]	@ (8008e0c <HAL_DMA_IRQHandler+0x69c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d03b      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a26      	ldr	r2, [pc, #152]	@ (8008e10 <HAL_DMA_IRQHandler+0x6a0>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d036      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a25      	ldr	r2, [pc, #148]	@ (8008e14 <HAL_DMA_IRQHandler+0x6a4>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d031      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a23      	ldr	r2, [pc, #140]	@ (8008e18 <HAL_DMA_IRQHandler+0x6a8>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d02c      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a22      	ldr	r2, [pc, #136]	@ (8008e1c <HAL_DMA_IRQHandler+0x6ac>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d027      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a20      	ldr	r2, [pc, #128]	@ (8008e20 <HAL_DMA_IRQHandler+0x6b0>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d022      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a1f      	ldr	r2, [pc, #124]	@ (8008e24 <HAL_DMA_IRQHandler+0x6b4>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d01d      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e28 <HAL_DMA_IRQHandler+0x6b8>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d018      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a1c      	ldr	r2, [pc, #112]	@ (8008e2c <HAL_DMA_IRQHandler+0x6bc>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d013      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8008e30 <HAL_DMA_IRQHandler+0x6c0>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d00e      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a19      	ldr	r2, [pc, #100]	@ (8008e34 <HAL_DMA_IRQHandler+0x6c4>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d009      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a17      	ldr	r2, [pc, #92]	@ (8008e38 <HAL_DMA_IRQHandler+0x6c8>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d004      	beq.n	8008de8 <HAL_DMA_IRQHandler+0x678>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a16      	ldr	r2, [pc, #88]	@ (8008e3c <HAL_DMA_IRQHandler+0x6cc>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d12b      	bne.n	8008e40 <HAL_DMA_IRQHandler+0x6d0>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0310 	and.w	r3, r3, #16
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	bf14      	ite	ne
 8008df6:	2301      	movne	r3, #1
 8008df8:	2300      	moveq	r3, #0
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	e02a      	b.n	8008e54 <HAL_DMA_IRQHandler+0x6e4>
 8008dfe:	bf00      	nop
 8008e00:	40020010 	.word	0x40020010
 8008e04:	40020028 	.word	0x40020028
 8008e08:	40020040 	.word	0x40020040
 8008e0c:	40020058 	.word	0x40020058
 8008e10:	40020070 	.word	0x40020070
 8008e14:	40020088 	.word	0x40020088
 8008e18:	400200a0 	.word	0x400200a0
 8008e1c:	400200b8 	.word	0x400200b8
 8008e20:	40020410 	.word	0x40020410
 8008e24:	40020428 	.word	0x40020428
 8008e28:	40020440 	.word	0x40020440
 8008e2c:	40020458 	.word	0x40020458
 8008e30:	40020470 	.word	0x40020470
 8008e34:	40020488 	.word	0x40020488
 8008e38:	400204a0 	.word	0x400204a0
 8008e3c:	400204b8 	.word	0x400204b8
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	bf14      	ite	ne
 8008e4e:	2301      	movne	r3, #1
 8008e50:	2300      	moveq	r3, #0
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 8087 	beq.w	8008f68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e5e:	f003 031f 	and.w	r3, r3, #31
 8008e62:	2220      	movs	r2, #32
 8008e64:	409a      	lsls	r2, r3
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d139      	bne.n	8008eea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f022 0216 	bic.w	r2, r2, #22
 8008e84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	695a      	ldr	r2, [r3, #20]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d103      	bne.n	8008ea6 <HAL_DMA_IRQHandler+0x736>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d007      	beq.n	8008eb6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f022 0208 	bic.w	r2, r2, #8
 8008eb4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eba:	f003 031f 	and.w	r3, r3, #31
 8008ebe:	223f      	movs	r2, #63	@ 0x3f
 8008ec0:	409a      	lsls	r2, r3
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 834a 	beq.w	8009574 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	4798      	blx	r3
          }
          return;
 8008ee8:	e344      	b.n	8009574 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d018      	beq.n	8008f2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d108      	bne.n	8008f18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d02c      	beq.n	8008f68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	4798      	blx	r3
 8008f16:	e027      	b.n	8008f68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d023      	beq.n	8008f68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	4798      	blx	r3
 8008f28:	e01e      	b.n	8008f68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10f      	bne.n	8008f58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f022 0210 	bic.w	r2, r2, #16
 8008f46:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 8306 	beq.w	800957e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 8088 	beq.w	8009090 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2204      	movs	r2, #4
 8008f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a7a      	ldr	r2, [pc, #488]	@ (8009178 <HAL_DMA_IRQHandler+0xa08>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d04a      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a79      	ldr	r2, [pc, #484]	@ (800917c <HAL_DMA_IRQHandler+0xa0c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d045      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a77      	ldr	r2, [pc, #476]	@ (8009180 <HAL_DMA_IRQHandler+0xa10>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d040      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a76      	ldr	r2, [pc, #472]	@ (8009184 <HAL_DMA_IRQHandler+0xa14>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d03b      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a74      	ldr	r2, [pc, #464]	@ (8009188 <HAL_DMA_IRQHandler+0xa18>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d036      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a73      	ldr	r2, [pc, #460]	@ (800918c <HAL_DMA_IRQHandler+0xa1c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d031      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a71      	ldr	r2, [pc, #452]	@ (8009190 <HAL_DMA_IRQHandler+0xa20>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d02c      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a70      	ldr	r2, [pc, #448]	@ (8009194 <HAL_DMA_IRQHandler+0xa24>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d027      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a6e      	ldr	r2, [pc, #440]	@ (8009198 <HAL_DMA_IRQHandler+0xa28>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d022      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a6d      	ldr	r2, [pc, #436]	@ (800919c <HAL_DMA_IRQHandler+0xa2c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d01d      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a6b      	ldr	r2, [pc, #428]	@ (80091a0 <HAL_DMA_IRQHandler+0xa30>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d018      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a6a      	ldr	r2, [pc, #424]	@ (80091a4 <HAL_DMA_IRQHandler+0xa34>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d013      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a68      	ldr	r2, [pc, #416]	@ (80091a8 <HAL_DMA_IRQHandler+0xa38>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d00e      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a67      	ldr	r2, [pc, #412]	@ (80091ac <HAL_DMA_IRQHandler+0xa3c>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d009      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a65      	ldr	r2, [pc, #404]	@ (80091b0 <HAL_DMA_IRQHandler+0xa40>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d004      	beq.n	8009028 <HAL_DMA_IRQHandler+0x8b8>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a64      	ldr	r2, [pc, #400]	@ (80091b4 <HAL_DMA_IRQHandler+0xa44>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d108      	bne.n	800903a <HAL_DMA_IRQHandler+0x8ca>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f022 0201 	bic.w	r2, r2, #1
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	e007      	b.n	800904a <HAL_DMA_IRQHandler+0x8da>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f022 0201 	bic.w	r2, r2, #1
 8009048:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	3301      	adds	r3, #1
 800904e:	60fb      	str	r3, [r7, #12]
 8009050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009052:	429a      	cmp	r2, r3
 8009054:	d307      	bcc.n	8009066 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1f2      	bne.n	800904a <HAL_DMA_IRQHandler+0x8da>
 8009064:	e000      	b.n	8009068 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009066:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d004      	beq.n	8009080 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2203      	movs	r2, #3
 800907a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800907e:	e003      	b.n	8009088 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 8272 	beq.w	800957e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	4798      	blx	r3
 80090a2:	e26c      	b.n	800957e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a43      	ldr	r2, [pc, #268]	@ (80091b8 <HAL_DMA_IRQHandler+0xa48>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d022      	beq.n	80090f4 <HAL_DMA_IRQHandler+0x984>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a42      	ldr	r2, [pc, #264]	@ (80091bc <HAL_DMA_IRQHandler+0xa4c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d01d      	beq.n	80090f4 <HAL_DMA_IRQHandler+0x984>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a40      	ldr	r2, [pc, #256]	@ (80091c0 <HAL_DMA_IRQHandler+0xa50>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d018      	beq.n	80090f4 <HAL_DMA_IRQHandler+0x984>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a3f      	ldr	r2, [pc, #252]	@ (80091c4 <HAL_DMA_IRQHandler+0xa54>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d013      	beq.n	80090f4 <HAL_DMA_IRQHandler+0x984>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a3d      	ldr	r2, [pc, #244]	@ (80091c8 <HAL_DMA_IRQHandler+0xa58>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d00e      	beq.n	80090f4 <HAL_DMA_IRQHandler+0x984>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a3c      	ldr	r2, [pc, #240]	@ (80091cc <HAL_DMA_IRQHandler+0xa5c>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d009      	beq.n	80090f4 <HAL_DMA_IRQHandler+0x984>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a3a      	ldr	r2, [pc, #232]	@ (80091d0 <HAL_DMA_IRQHandler+0xa60>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d004      	beq.n	80090f4 <HAL_DMA_IRQHandler+0x984>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a39      	ldr	r2, [pc, #228]	@ (80091d4 <HAL_DMA_IRQHandler+0xa64>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d101      	bne.n	80090f8 <HAL_DMA_IRQHandler+0x988>
 80090f4:	2301      	movs	r3, #1
 80090f6:	e000      	b.n	80090fa <HAL_DMA_IRQHandler+0x98a>
 80090f8:	2300      	movs	r3, #0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 823f 	beq.w	800957e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800910c:	f003 031f 	and.w	r3, r3, #31
 8009110:	2204      	movs	r2, #4
 8009112:	409a      	lsls	r2, r3
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	4013      	ands	r3, r2
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 80cd 	beq.w	80092b8 <HAL_DMA_IRQHandler+0xb48>
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	f003 0304 	and.w	r3, r3, #4
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 80c7 	beq.w	80092b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800912e:	f003 031f 	and.w	r3, r3, #31
 8009132:	2204      	movs	r2, #4
 8009134:	409a      	lsls	r2, r3
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d049      	beq.n	80091d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d109      	bne.n	8009162 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009152:	2b00      	cmp	r3, #0
 8009154:	f000 8210 	beq.w	8009578 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009160:	e20a      	b.n	8009578 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 8206 	beq.w	8009578 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009174:	e200      	b.n	8009578 <HAL_DMA_IRQHandler+0xe08>
 8009176:	bf00      	nop
 8009178:	40020010 	.word	0x40020010
 800917c:	40020028 	.word	0x40020028
 8009180:	40020040 	.word	0x40020040
 8009184:	40020058 	.word	0x40020058
 8009188:	40020070 	.word	0x40020070
 800918c:	40020088 	.word	0x40020088
 8009190:	400200a0 	.word	0x400200a0
 8009194:	400200b8 	.word	0x400200b8
 8009198:	40020410 	.word	0x40020410
 800919c:	40020428 	.word	0x40020428
 80091a0:	40020440 	.word	0x40020440
 80091a4:	40020458 	.word	0x40020458
 80091a8:	40020470 	.word	0x40020470
 80091ac:	40020488 	.word	0x40020488
 80091b0:	400204a0 	.word	0x400204a0
 80091b4:	400204b8 	.word	0x400204b8
 80091b8:	58025408 	.word	0x58025408
 80091bc:	5802541c 	.word	0x5802541c
 80091c0:	58025430 	.word	0x58025430
 80091c4:	58025444 	.word	0x58025444
 80091c8:	58025458 	.word	0x58025458
 80091cc:	5802546c 	.word	0x5802546c
 80091d0:	58025480 	.word	0x58025480
 80091d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	f003 0320 	and.w	r3, r3, #32
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d160      	bne.n	80092a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a7f      	ldr	r2, [pc, #508]	@ (80093e4 <HAL_DMA_IRQHandler+0xc74>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d04a      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a7d      	ldr	r2, [pc, #500]	@ (80093e8 <HAL_DMA_IRQHandler+0xc78>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d045      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a7c      	ldr	r2, [pc, #496]	@ (80093ec <HAL_DMA_IRQHandler+0xc7c>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d040      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a7a      	ldr	r2, [pc, #488]	@ (80093f0 <HAL_DMA_IRQHandler+0xc80>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d03b      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a79      	ldr	r2, [pc, #484]	@ (80093f4 <HAL_DMA_IRQHandler+0xc84>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d036      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a77      	ldr	r2, [pc, #476]	@ (80093f8 <HAL_DMA_IRQHandler+0xc88>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d031      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a76      	ldr	r2, [pc, #472]	@ (80093fc <HAL_DMA_IRQHandler+0xc8c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d02c      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a74      	ldr	r2, [pc, #464]	@ (8009400 <HAL_DMA_IRQHandler+0xc90>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d027      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a73      	ldr	r2, [pc, #460]	@ (8009404 <HAL_DMA_IRQHandler+0xc94>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d022      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a71      	ldr	r2, [pc, #452]	@ (8009408 <HAL_DMA_IRQHandler+0xc98>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d01d      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a70      	ldr	r2, [pc, #448]	@ (800940c <HAL_DMA_IRQHandler+0xc9c>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d018      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a6e      	ldr	r2, [pc, #440]	@ (8009410 <HAL_DMA_IRQHandler+0xca0>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d013      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a6d      	ldr	r2, [pc, #436]	@ (8009414 <HAL_DMA_IRQHandler+0xca4>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d00e      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a6b      	ldr	r2, [pc, #428]	@ (8009418 <HAL_DMA_IRQHandler+0xca8>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d009      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a6a      	ldr	r2, [pc, #424]	@ (800941c <HAL_DMA_IRQHandler+0xcac>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d004      	beq.n	8009282 <HAL_DMA_IRQHandler+0xb12>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a68      	ldr	r2, [pc, #416]	@ (8009420 <HAL_DMA_IRQHandler+0xcb0>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d108      	bne.n	8009294 <HAL_DMA_IRQHandler+0xb24>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 0208 	bic.w	r2, r2, #8
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	e007      	b.n	80092a4 <HAL_DMA_IRQHandler+0xb34>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f022 0204 	bic.w	r2, r2, #4
 80092a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 8165 	beq.w	8009578 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092b6:	e15f      	b.n	8009578 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092bc:	f003 031f 	and.w	r3, r3, #31
 80092c0:	2202      	movs	r2, #2
 80092c2:	409a      	lsls	r2, r3
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	4013      	ands	r3, r2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 80c5 	beq.w	8009458 <HAL_DMA_IRQHandler+0xce8>
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	f003 0302 	and.w	r3, r3, #2
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 80bf 	beq.w	8009458 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092de:	f003 031f 	and.w	r3, r3, #31
 80092e2:	2202      	movs	r2, #2
 80092e4:	409a      	lsls	r2, r3
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d018      	beq.n	8009326 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d109      	bne.n	8009312 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 813a 	beq.w	800957c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009310:	e134      	b.n	800957c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 8130 	beq.w	800957c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009324:	e12a      	b.n	800957c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	f003 0320 	and.w	r3, r3, #32
 800932c:	2b00      	cmp	r3, #0
 800932e:	f040 8089 	bne.w	8009444 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a2b      	ldr	r2, [pc, #172]	@ (80093e4 <HAL_DMA_IRQHandler+0xc74>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d04a      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a29      	ldr	r2, [pc, #164]	@ (80093e8 <HAL_DMA_IRQHandler+0xc78>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d045      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a28      	ldr	r2, [pc, #160]	@ (80093ec <HAL_DMA_IRQHandler+0xc7c>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d040      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a26      	ldr	r2, [pc, #152]	@ (80093f0 <HAL_DMA_IRQHandler+0xc80>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d03b      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a25      	ldr	r2, [pc, #148]	@ (80093f4 <HAL_DMA_IRQHandler+0xc84>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d036      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a23      	ldr	r2, [pc, #140]	@ (80093f8 <HAL_DMA_IRQHandler+0xc88>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d031      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a22      	ldr	r2, [pc, #136]	@ (80093fc <HAL_DMA_IRQHandler+0xc8c>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d02c      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a20      	ldr	r2, [pc, #128]	@ (8009400 <HAL_DMA_IRQHandler+0xc90>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d027      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a1f      	ldr	r2, [pc, #124]	@ (8009404 <HAL_DMA_IRQHandler+0xc94>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d022      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a1d      	ldr	r2, [pc, #116]	@ (8009408 <HAL_DMA_IRQHandler+0xc98>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d01d      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1c      	ldr	r2, [pc, #112]	@ (800940c <HAL_DMA_IRQHandler+0xc9c>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d018      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a1a      	ldr	r2, [pc, #104]	@ (8009410 <HAL_DMA_IRQHandler+0xca0>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d013      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a19      	ldr	r2, [pc, #100]	@ (8009414 <HAL_DMA_IRQHandler+0xca4>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d00e      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a17      	ldr	r2, [pc, #92]	@ (8009418 <HAL_DMA_IRQHandler+0xca8>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d009      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a16      	ldr	r2, [pc, #88]	@ (800941c <HAL_DMA_IRQHandler+0xcac>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d004      	beq.n	80093d2 <HAL_DMA_IRQHandler+0xc62>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a14      	ldr	r2, [pc, #80]	@ (8009420 <HAL_DMA_IRQHandler+0xcb0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d128      	bne.n	8009424 <HAL_DMA_IRQHandler+0xcb4>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f022 0214 	bic.w	r2, r2, #20
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	e027      	b.n	8009434 <HAL_DMA_IRQHandler+0xcc4>
 80093e4:	40020010 	.word	0x40020010
 80093e8:	40020028 	.word	0x40020028
 80093ec:	40020040 	.word	0x40020040
 80093f0:	40020058 	.word	0x40020058
 80093f4:	40020070 	.word	0x40020070
 80093f8:	40020088 	.word	0x40020088
 80093fc:	400200a0 	.word	0x400200a0
 8009400:	400200b8 	.word	0x400200b8
 8009404:	40020410 	.word	0x40020410
 8009408:	40020428 	.word	0x40020428
 800940c:	40020440 	.word	0x40020440
 8009410:	40020458 	.word	0x40020458
 8009414:	40020470 	.word	0x40020470
 8009418:	40020488 	.word	0x40020488
 800941c:	400204a0 	.word	0x400204a0
 8009420:	400204b8 	.word	0x400204b8
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 020a 	bic.w	r2, r2, #10
 8009432:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 8097 	beq.w	800957c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009456:	e091      	b.n	800957c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800945c:	f003 031f 	and.w	r3, r3, #31
 8009460:	2208      	movs	r2, #8
 8009462:	409a      	lsls	r2, r3
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	4013      	ands	r3, r2
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 8088 	beq.w	800957e <HAL_DMA_IRQHandler+0xe0e>
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f003 0308 	and.w	r3, r3, #8
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 8082 	beq.w	800957e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a41      	ldr	r2, [pc, #260]	@ (8009584 <HAL_DMA_IRQHandler+0xe14>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d04a      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a3f      	ldr	r2, [pc, #252]	@ (8009588 <HAL_DMA_IRQHandler+0xe18>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d045      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a3e      	ldr	r2, [pc, #248]	@ (800958c <HAL_DMA_IRQHandler+0xe1c>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d040      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a3c      	ldr	r2, [pc, #240]	@ (8009590 <HAL_DMA_IRQHandler+0xe20>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d03b      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a3b      	ldr	r2, [pc, #236]	@ (8009594 <HAL_DMA_IRQHandler+0xe24>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d036      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a39      	ldr	r2, [pc, #228]	@ (8009598 <HAL_DMA_IRQHandler+0xe28>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d031      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a38      	ldr	r2, [pc, #224]	@ (800959c <HAL_DMA_IRQHandler+0xe2c>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d02c      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a36      	ldr	r2, [pc, #216]	@ (80095a0 <HAL_DMA_IRQHandler+0xe30>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d027      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a35      	ldr	r2, [pc, #212]	@ (80095a4 <HAL_DMA_IRQHandler+0xe34>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d022      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a33      	ldr	r2, [pc, #204]	@ (80095a8 <HAL_DMA_IRQHandler+0xe38>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d01d      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a32      	ldr	r2, [pc, #200]	@ (80095ac <HAL_DMA_IRQHandler+0xe3c>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d018      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a30      	ldr	r2, [pc, #192]	@ (80095b0 <HAL_DMA_IRQHandler+0xe40>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d013      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a2f      	ldr	r2, [pc, #188]	@ (80095b4 <HAL_DMA_IRQHandler+0xe44>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d00e      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a2d      	ldr	r2, [pc, #180]	@ (80095b8 <HAL_DMA_IRQHandler+0xe48>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d009      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a2c      	ldr	r2, [pc, #176]	@ (80095bc <HAL_DMA_IRQHandler+0xe4c>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d004      	beq.n	800951a <HAL_DMA_IRQHandler+0xdaa>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a2a      	ldr	r2, [pc, #168]	@ (80095c0 <HAL_DMA_IRQHandler+0xe50>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d108      	bne.n	800952c <HAL_DMA_IRQHandler+0xdbc>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f022 021c 	bic.w	r2, r2, #28
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	e007      	b.n	800953c <HAL_DMA_IRQHandler+0xdcc>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 020e 	bic.w	r2, r2, #14
 800953a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009540:	f003 031f 	and.w	r3, r3, #31
 8009544:	2201      	movs	r2, #1
 8009546:	409a      	lsls	r2, r3
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009566:	2b00      	cmp	r3, #0
 8009568:	d009      	beq.n	800957e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	4798      	blx	r3
 8009572:	e004      	b.n	800957e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009574:	bf00      	nop
 8009576:	e002      	b.n	800957e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009578:	bf00      	nop
 800957a:	e000      	b.n	800957e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800957c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800957e:	3728      	adds	r7, #40	@ 0x28
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	40020010 	.word	0x40020010
 8009588:	40020028 	.word	0x40020028
 800958c:	40020040 	.word	0x40020040
 8009590:	40020058 	.word	0x40020058
 8009594:	40020070 	.word	0x40020070
 8009598:	40020088 	.word	0x40020088
 800959c:	400200a0 	.word	0x400200a0
 80095a0:	400200b8 	.word	0x400200b8
 80095a4:	40020410 	.word	0x40020410
 80095a8:	40020428 	.word	0x40020428
 80095ac:	40020440 	.word	0x40020440
 80095b0:	40020458 	.word	0x40020458
 80095b4:	40020470 	.word	0x40020470
 80095b8:	40020488 	.word	0x40020488
 80095bc:	400204a0 	.word	0x400204a0
 80095c0:	400204b8 	.word	0x400204b8

080095c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a7f      	ldr	r2, [pc, #508]	@ (80097e0 <DMA_SetConfig+0x21c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d072      	beq.n	80096ce <DMA_SetConfig+0x10a>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a7d      	ldr	r2, [pc, #500]	@ (80097e4 <DMA_SetConfig+0x220>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d06d      	beq.n	80096ce <DMA_SetConfig+0x10a>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a7c      	ldr	r2, [pc, #496]	@ (80097e8 <DMA_SetConfig+0x224>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d068      	beq.n	80096ce <DMA_SetConfig+0x10a>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a7a      	ldr	r2, [pc, #488]	@ (80097ec <DMA_SetConfig+0x228>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d063      	beq.n	80096ce <DMA_SetConfig+0x10a>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a79      	ldr	r2, [pc, #484]	@ (80097f0 <DMA_SetConfig+0x22c>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d05e      	beq.n	80096ce <DMA_SetConfig+0x10a>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a77      	ldr	r2, [pc, #476]	@ (80097f4 <DMA_SetConfig+0x230>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d059      	beq.n	80096ce <DMA_SetConfig+0x10a>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a76      	ldr	r2, [pc, #472]	@ (80097f8 <DMA_SetConfig+0x234>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d054      	beq.n	80096ce <DMA_SetConfig+0x10a>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a74      	ldr	r2, [pc, #464]	@ (80097fc <DMA_SetConfig+0x238>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d04f      	beq.n	80096ce <DMA_SetConfig+0x10a>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a73      	ldr	r2, [pc, #460]	@ (8009800 <DMA_SetConfig+0x23c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d04a      	beq.n	80096ce <DMA_SetConfig+0x10a>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a71      	ldr	r2, [pc, #452]	@ (8009804 <DMA_SetConfig+0x240>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d045      	beq.n	80096ce <DMA_SetConfig+0x10a>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a70      	ldr	r2, [pc, #448]	@ (8009808 <DMA_SetConfig+0x244>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d040      	beq.n	80096ce <DMA_SetConfig+0x10a>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a6e      	ldr	r2, [pc, #440]	@ (800980c <DMA_SetConfig+0x248>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d03b      	beq.n	80096ce <DMA_SetConfig+0x10a>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a6d      	ldr	r2, [pc, #436]	@ (8009810 <DMA_SetConfig+0x24c>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d036      	beq.n	80096ce <DMA_SetConfig+0x10a>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a6b      	ldr	r2, [pc, #428]	@ (8009814 <DMA_SetConfig+0x250>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d031      	beq.n	80096ce <DMA_SetConfig+0x10a>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a6a      	ldr	r2, [pc, #424]	@ (8009818 <DMA_SetConfig+0x254>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d02c      	beq.n	80096ce <DMA_SetConfig+0x10a>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a68      	ldr	r2, [pc, #416]	@ (800981c <DMA_SetConfig+0x258>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d027      	beq.n	80096ce <DMA_SetConfig+0x10a>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a67      	ldr	r2, [pc, #412]	@ (8009820 <DMA_SetConfig+0x25c>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d022      	beq.n	80096ce <DMA_SetConfig+0x10a>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a65      	ldr	r2, [pc, #404]	@ (8009824 <DMA_SetConfig+0x260>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d01d      	beq.n	80096ce <DMA_SetConfig+0x10a>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a64      	ldr	r2, [pc, #400]	@ (8009828 <DMA_SetConfig+0x264>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d018      	beq.n	80096ce <DMA_SetConfig+0x10a>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a62      	ldr	r2, [pc, #392]	@ (800982c <DMA_SetConfig+0x268>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d013      	beq.n	80096ce <DMA_SetConfig+0x10a>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a61      	ldr	r2, [pc, #388]	@ (8009830 <DMA_SetConfig+0x26c>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d00e      	beq.n	80096ce <DMA_SetConfig+0x10a>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a5f      	ldr	r2, [pc, #380]	@ (8009834 <DMA_SetConfig+0x270>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d009      	beq.n	80096ce <DMA_SetConfig+0x10a>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a5e      	ldr	r2, [pc, #376]	@ (8009838 <DMA_SetConfig+0x274>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d004      	beq.n	80096ce <DMA_SetConfig+0x10a>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a5c      	ldr	r2, [pc, #368]	@ (800983c <DMA_SetConfig+0x278>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d101      	bne.n	80096d2 <DMA_SetConfig+0x10e>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e000      	b.n	80096d4 <DMA_SetConfig+0x110>
 80096d2:	2300      	movs	r3, #0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00d      	beq.n	80096f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80096e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d004      	beq.n	80096f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80096f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a39      	ldr	r2, [pc, #228]	@ (80097e0 <DMA_SetConfig+0x21c>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d04a      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a38      	ldr	r2, [pc, #224]	@ (80097e4 <DMA_SetConfig+0x220>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d045      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a36      	ldr	r2, [pc, #216]	@ (80097e8 <DMA_SetConfig+0x224>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d040      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a35      	ldr	r2, [pc, #212]	@ (80097ec <DMA_SetConfig+0x228>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d03b      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a33      	ldr	r2, [pc, #204]	@ (80097f0 <DMA_SetConfig+0x22c>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d036      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a32      	ldr	r2, [pc, #200]	@ (80097f4 <DMA_SetConfig+0x230>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d031      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a30      	ldr	r2, [pc, #192]	@ (80097f8 <DMA_SetConfig+0x234>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d02c      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a2f      	ldr	r2, [pc, #188]	@ (80097fc <DMA_SetConfig+0x238>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d027      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a2d      	ldr	r2, [pc, #180]	@ (8009800 <DMA_SetConfig+0x23c>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d022      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a2c      	ldr	r2, [pc, #176]	@ (8009804 <DMA_SetConfig+0x240>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d01d      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a2a      	ldr	r2, [pc, #168]	@ (8009808 <DMA_SetConfig+0x244>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d018      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a29      	ldr	r2, [pc, #164]	@ (800980c <DMA_SetConfig+0x248>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d013      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a27      	ldr	r2, [pc, #156]	@ (8009810 <DMA_SetConfig+0x24c>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00e      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a26      	ldr	r2, [pc, #152]	@ (8009814 <DMA_SetConfig+0x250>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d009      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a24      	ldr	r2, [pc, #144]	@ (8009818 <DMA_SetConfig+0x254>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d004      	beq.n	8009794 <DMA_SetConfig+0x1d0>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a23      	ldr	r2, [pc, #140]	@ (800981c <DMA_SetConfig+0x258>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d101      	bne.n	8009798 <DMA_SetConfig+0x1d4>
 8009794:	2301      	movs	r3, #1
 8009796:	e000      	b.n	800979a <DMA_SetConfig+0x1d6>
 8009798:	2300      	movs	r3, #0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d059      	beq.n	8009852 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097a2:	f003 031f 	and.w	r3, r3, #31
 80097a6:	223f      	movs	r2, #63	@ 0x3f
 80097a8:	409a      	lsls	r2, r3
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80097bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	2b40      	cmp	r3, #64	@ 0x40
 80097cc:	d138      	bne.n	8009840 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80097de:	e086      	b.n	80098ee <DMA_SetConfig+0x32a>
 80097e0:	40020010 	.word	0x40020010
 80097e4:	40020028 	.word	0x40020028
 80097e8:	40020040 	.word	0x40020040
 80097ec:	40020058 	.word	0x40020058
 80097f0:	40020070 	.word	0x40020070
 80097f4:	40020088 	.word	0x40020088
 80097f8:	400200a0 	.word	0x400200a0
 80097fc:	400200b8 	.word	0x400200b8
 8009800:	40020410 	.word	0x40020410
 8009804:	40020428 	.word	0x40020428
 8009808:	40020440 	.word	0x40020440
 800980c:	40020458 	.word	0x40020458
 8009810:	40020470 	.word	0x40020470
 8009814:	40020488 	.word	0x40020488
 8009818:	400204a0 	.word	0x400204a0
 800981c:	400204b8 	.word	0x400204b8
 8009820:	58025408 	.word	0x58025408
 8009824:	5802541c 	.word	0x5802541c
 8009828:	58025430 	.word	0x58025430
 800982c:	58025444 	.word	0x58025444
 8009830:	58025458 	.word	0x58025458
 8009834:	5802546c 	.word	0x5802546c
 8009838:	58025480 	.word	0x58025480
 800983c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	60da      	str	r2, [r3, #12]
}
 8009850:	e04d      	b.n	80098ee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a29      	ldr	r2, [pc, #164]	@ (80098fc <DMA_SetConfig+0x338>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d022      	beq.n	80098a2 <DMA_SetConfig+0x2de>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a27      	ldr	r2, [pc, #156]	@ (8009900 <DMA_SetConfig+0x33c>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d01d      	beq.n	80098a2 <DMA_SetConfig+0x2de>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a26      	ldr	r2, [pc, #152]	@ (8009904 <DMA_SetConfig+0x340>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d018      	beq.n	80098a2 <DMA_SetConfig+0x2de>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a24      	ldr	r2, [pc, #144]	@ (8009908 <DMA_SetConfig+0x344>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d013      	beq.n	80098a2 <DMA_SetConfig+0x2de>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a23      	ldr	r2, [pc, #140]	@ (800990c <DMA_SetConfig+0x348>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d00e      	beq.n	80098a2 <DMA_SetConfig+0x2de>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a21      	ldr	r2, [pc, #132]	@ (8009910 <DMA_SetConfig+0x34c>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d009      	beq.n	80098a2 <DMA_SetConfig+0x2de>
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a20      	ldr	r2, [pc, #128]	@ (8009914 <DMA_SetConfig+0x350>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d004      	beq.n	80098a2 <DMA_SetConfig+0x2de>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a1e      	ldr	r2, [pc, #120]	@ (8009918 <DMA_SetConfig+0x354>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d101      	bne.n	80098a6 <DMA_SetConfig+0x2e2>
 80098a2:	2301      	movs	r3, #1
 80098a4:	e000      	b.n	80098a8 <DMA_SetConfig+0x2e4>
 80098a6:	2300      	movs	r3, #0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d020      	beq.n	80098ee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098b0:	f003 031f 	and.w	r3, r3, #31
 80098b4:	2201      	movs	r2, #1
 80098b6:	409a      	lsls	r2, r3
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	2b40      	cmp	r3, #64	@ 0x40
 80098ca:	d108      	bne.n	80098de <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	60da      	str	r2, [r3, #12]
}
 80098dc:	e007      	b.n	80098ee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	60da      	str	r2, [r3, #12]
}
 80098ee:	bf00      	nop
 80098f0:	371c      	adds	r7, #28
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	58025408 	.word	0x58025408
 8009900:	5802541c 	.word	0x5802541c
 8009904:	58025430 	.word	0x58025430
 8009908:	58025444 	.word	0x58025444
 800990c:	58025458 	.word	0x58025458
 8009910:	5802546c 	.word	0x5802546c
 8009914:	58025480 	.word	0x58025480
 8009918:	58025494 	.word	0x58025494

0800991c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a42      	ldr	r2, [pc, #264]	@ (8009a34 <DMA_CalcBaseAndBitshift+0x118>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d04a      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a41      	ldr	r2, [pc, #260]	@ (8009a38 <DMA_CalcBaseAndBitshift+0x11c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d045      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a3f      	ldr	r2, [pc, #252]	@ (8009a3c <DMA_CalcBaseAndBitshift+0x120>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d040      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a3e      	ldr	r2, [pc, #248]	@ (8009a40 <DMA_CalcBaseAndBitshift+0x124>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d03b      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a3c      	ldr	r2, [pc, #240]	@ (8009a44 <DMA_CalcBaseAndBitshift+0x128>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d036      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a3b      	ldr	r2, [pc, #236]	@ (8009a48 <DMA_CalcBaseAndBitshift+0x12c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d031      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a39      	ldr	r2, [pc, #228]	@ (8009a4c <DMA_CalcBaseAndBitshift+0x130>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d02c      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a38      	ldr	r2, [pc, #224]	@ (8009a50 <DMA_CalcBaseAndBitshift+0x134>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d027      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a36      	ldr	r2, [pc, #216]	@ (8009a54 <DMA_CalcBaseAndBitshift+0x138>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d022      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a35      	ldr	r2, [pc, #212]	@ (8009a58 <DMA_CalcBaseAndBitshift+0x13c>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d01d      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a33      	ldr	r2, [pc, #204]	@ (8009a5c <DMA_CalcBaseAndBitshift+0x140>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d018      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a32      	ldr	r2, [pc, #200]	@ (8009a60 <DMA_CalcBaseAndBitshift+0x144>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d013      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a30      	ldr	r2, [pc, #192]	@ (8009a64 <DMA_CalcBaseAndBitshift+0x148>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d00e      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a2f      	ldr	r2, [pc, #188]	@ (8009a68 <DMA_CalcBaseAndBitshift+0x14c>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d009      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a2d      	ldr	r2, [pc, #180]	@ (8009a6c <DMA_CalcBaseAndBitshift+0x150>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d004      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a2c      	ldr	r2, [pc, #176]	@ (8009a70 <DMA_CalcBaseAndBitshift+0x154>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d101      	bne.n	80099c8 <DMA_CalcBaseAndBitshift+0xac>
 80099c4:	2301      	movs	r3, #1
 80099c6:	e000      	b.n	80099ca <DMA_CalcBaseAndBitshift+0xae>
 80099c8:	2300      	movs	r3, #0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d024      	beq.n	8009a18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	3b10      	subs	r3, #16
 80099d6:	4a27      	ldr	r2, [pc, #156]	@ (8009a74 <DMA_CalcBaseAndBitshift+0x158>)
 80099d8:	fba2 2303 	umull	r2, r3, r2, r3
 80099dc:	091b      	lsrs	r3, r3, #4
 80099de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f003 0307 	and.w	r3, r3, #7
 80099e6:	4a24      	ldr	r2, [pc, #144]	@ (8009a78 <DMA_CalcBaseAndBitshift+0x15c>)
 80099e8:	5cd3      	ldrb	r3, [r2, r3]
 80099ea:	461a      	mov	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	d908      	bls.n	8009a08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	4b1f      	ldr	r3, [pc, #124]	@ (8009a7c <DMA_CalcBaseAndBitshift+0x160>)
 80099fe:	4013      	ands	r3, r2
 8009a00:	1d1a      	adds	r2, r3, #4
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	659a      	str	r2, [r3, #88]	@ 0x58
 8009a06:	e00d      	b.n	8009a24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8009a7c <DMA_CalcBaseAndBitshift+0x160>)
 8009a10:	4013      	ands	r3, r2
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a16:	e005      	b.n	8009a24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	40020010 	.word	0x40020010
 8009a38:	40020028 	.word	0x40020028
 8009a3c:	40020040 	.word	0x40020040
 8009a40:	40020058 	.word	0x40020058
 8009a44:	40020070 	.word	0x40020070
 8009a48:	40020088 	.word	0x40020088
 8009a4c:	400200a0 	.word	0x400200a0
 8009a50:	400200b8 	.word	0x400200b8
 8009a54:	40020410 	.word	0x40020410
 8009a58:	40020428 	.word	0x40020428
 8009a5c:	40020440 	.word	0x40020440
 8009a60:	40020458 	.word	0x40020458
 8009a64:	40020470 	.word	0x40020470
 8009a68:	40020488 	.word	0x40020488
 8009a6c:	400204a0 	.word	0x400204a0
 8009a70:	400204b8 	.word	0x400204b8
 8009a74:	aaaaaaab 	.word	0xaaaaaaab
 8009a78:	0801e678 	.word	0x0801e678
 8009a7c:	fffffc00 	.word	0xfffffc00

08009a80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d120      	bne.n	8009ad6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a98:	2b03      	cmp	r3, #3
 8009a9a:	d858      	bhi.n	8009b4e <DMA_CheckFifoParam+0xce>
 8009a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa4 <DMA_CheckFifoParam+0x24>)
 8009a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa2:	bf00      	nop
 8009aa4:	08009ab5 	.word	0x08009ab5
 8009aa8:	08009ac7 	.word	0x08009ac7
 8009aac:	08009ab5 	.word	0x08009ab5
 8009ab0:	08009b4f 	.word	0x08009b4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d048      	beq.n	8009b52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ac4:	e045      	b.n	8009b52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009ace:	d142      	bne.n	8009b56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ad4:	e03f      	b.n	8009b56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ade:	d123      	bne.n	8009b28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d838      	bhi.n	8009b5a <DMA_CheckFifoParam+0xda>
 8009ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8009af0 <DMA_CheckFifoParam+0x70>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b01 	.word	0x08009b01
 8009af4:	08009b07 	.word	0x08009b07
 8009af8:	08009b01 	.word	0x08009b01
 8009afc:	08009b19 	.word	0x08009b19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	73fb      	strb	r3, [r7, #15]
        break;
 8009b04:	e030      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d025      	beq.n	8009b5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b16:	e022      	b.n	8009b5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009b20:	d11f      	bne.n	8009b62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b26:	e01c      	b.n	8009b62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d902      	bls.n	8009b36 <DMA_CheckFifoParam+0xb6>
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	d003      	beq.n	8009b3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009b34:	e018      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	73fb      	strb	r3, [r7, #15]
        break;
 8009b3a:	e015      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00e      	beq.n	8009b66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4c:	e00b      	b.n	8009b66 <DMA_CheckFifoParam+0xe6>
        break;
 8009b4e:	bf00      	nop
 8009b50:	e00a      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        break;
 8009b52:	bf00      	nop
 8009b54:	e008      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        break;
 8009b56:	bf00      	nop
 8009b58:	e006      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        break;
 8009b5a:	bf00      	nop
 8009b5c:	e004      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        break;
 8009b5e:	bf00      	nop
 8009b60:	e002      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        break;
 8009b62:	bf00      	nop
 8009b64:	e000      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
    break;
 8009b66:	bf00      	nop
    }
  }

  return status;
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop

08009b78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a38      	ldr	r2, [pc, #224]	@ (8009c6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d022      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a36      	ldr	r2, [pc, #216]	@ (8009c70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d01d      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a35      	ldr	r2, [pc, #212]	@ (8009c74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d018      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a33      	ldr	r2, [pc, #204]	@ (8009c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d013      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a32      	ldr	r2, [pc, #200]	@ (8009c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d00e      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a30      	ldr	r2, [pc, #192]	@ (8009c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d009      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a2f      	ldr	r2, [pc, #188]	@ (8009c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d004      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8009c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d101      	bne.n	8009bda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01a      	beq.n	8009c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	3b08      	subs	r3, #8
 8009be8:	4a28      	ldr	r2, [pc, #160]	@ (8009c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009bea:	fba2 2303 	umull	r2, r3, r2, r3
 8009bee:	091b      	lsrs	r3, r3, #4
 8009bf0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	4b26      	ldr	r3, [pc, #152]	@ (8009c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009bf6:	4413      	add	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a24      	ldr	r2, [pc, #144]	@ (8009c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009c04:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f003 031f 	and.w	r3, r3, #31
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	409a      	lsls	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009c14:	e024      	b.n	8009c60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	3b10      	subs	r3, #16
 8009c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8009c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009c20:	fba2 2303 	umull	r2, r3, r2, r3
 8009c24:	091b      	lsrs	r3, r3, #4
 8009c26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8009c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d806      	bhi.n	8009c3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	4a1b      	ldr	r2, [pc, #108]	@ (8009ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d902      	bls.n	8009c3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	3308      	adds	r3, #8
 8009c3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	4b18      	ldr	r3, [pc, #96]	@ (8009ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009c42:	4413      	add	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	461a      	mov	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a16      	ldr	r2, [pc, #88]	@ (8009ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009c50:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f003 031f 	and.w	r3, r3, #31
 8009c58:	2201      	movs	r2, #1
 8009c5a:	409a      	lsls	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009c60:	bf00      	nop
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	58025408 	.word	0x58025408
 8009c70:	5802541c 	.word	0x5802541c
 8009c74:	58025430 	.word	0x58025430
 8009c78:	58025444 	.word	0x58025444
 8009c7c:	58025458 	.word	0x58025458
 8009c80:	5802546c 	.word	0x5802546c
 8009c84:	58025480 	.word	0x58025480
 8009c88:	58025494 	.word	0x58025494
 8009c8c:	cccccccd 	.word	0xcccccccd
 8009c90:	16009600 	.word	0x16009600
 8009c94:	58025880 	.word	0x58025880
 8009c98:	aaaaaaab 	.word	0xaaaaaaab
 8009c9c:	400204b8 	.word	0x400204b8
 8009ca0:	4002040f 	.word	0x4002040f
 8009ca4:	10008200 	.word	0x10008200
 8009ca8:	40020880 	.word	0x40020880

08009cac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d04a      	beq.n	8009d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2b08      	cmp	r3, #8
 8009cc6:	d847      	bhi.n	8009d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a25      	ldr	r2, [pc, #148]	@ (8009d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d022      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a24      	ldr	r2, [pc, #144]	@ (8009d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d01d      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a22      	ldr	r2, [pc, #136]	@ (8009d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d018      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a21      	ldr	r2, [pc, #132]	@ (8009d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d013      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8009d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00e      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8009d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d009      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a1c      	ldr	r2, [pc, #112]	@ (8009d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d004      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a1b      	ldr	r2, [pc, #108]	@ (8009d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d101      	bne.n	8009d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e000      	b.n	8009d1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00a      	beq.n	8009d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	4b17      	ldr	r3, [pc, #92]	@ (8009d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009d26:	4413      	add	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a15      	ldr	r2, [pc, #84]	@ (8009d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009d34:	671a      	str	r2, [r3, #112]	@ 0x70
 8009d36:	e009      	b.n	8009d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	4b14      	ldr	r3, [pc, #80]	@ (8009d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009d3c:	4413      	add	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	461a      	mov	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a11      	ldr	r2, [pc, #68]	@ (8009d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009d4a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	2201      	movs	r2, #1
 8009d52:	409a      	lsls	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009d58:	bf00      	nop
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	58025408 	.word	0x58025408
 8009d68:	5802541c 	.word	0x5802541c
 8009d6c:	58025430 	.word	0x58025430
 8009d70:	58025444 	.word	0x58025444
 8009d74:	58025458 	.word	0x58025458
 8009d78:	5802546c 	.word	0x5802546c
 8009d7c:	58025480 	.word	0x58025480
 8009d80:	58025494 	.word	0x58025494
 8009d84:	1600963f 	.word	0x1600963f
 8009d88:	58025940 	.word	0x58025940
 8009d8c:	1000823f 	.word	0x1000823f
 8009d90:	40020940 	.word	0x40020940

08009d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b089      	sub	sp, #36	@ 0x24
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009da2:	4b86      	ldr	r3, [pc, #536]	@ (8009fbc <HAL_GPIO_Init+0x228>)
 8009da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009da6:	e18c      	b.n	800a0c2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	2101      	movs	r1, #1
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	fa01 f303 	lsl.w	r3, r1, r3
 8009db4:	4013      	ands	r3, r2
 8009db6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 817e 	beq.w	800a0bc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f003 0303 	and.w	r3, r3, #3
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d005      	beq.n	8009dd8 <HAL_GPIO_Init+0x44>
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	f003 0303 	and.w	r3, r3, #3
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d130      	bne.n	8009e3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	2203      	movs	r2, #3
 8009de4:	fa02 f303 	lsl.w	r3, r2, r3
 8009de8:	43db      	mvns	r3, r3
 8009dea:	69ba      	ldr	r2, [r7, #24]
 8009dec:	4013      	ands	r3, r2
 8009dee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	68da      	ldr	r2, [r3, #12]
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	005b      	lsls	r3, r3, #1
 8009df8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	69ba      	ldr	r2, [r7, #24]
 8009e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009e0e:	2201      	movs	r2, #1
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	fa02 f303 	lsl.w	r3, r2, r3
 8009e16:	43db      	mvns	r3, r3
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	091b      	lsrs	r3, r3, #4
 8009e24:	f003 0201 	and.w	r2, r3, #1
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2e:	69ba      	ldr	r2, [r7, #24]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	69ba      	ldr	r2, [r7, #24]
 8009e38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f003 0303 	and.w	r3, r3, #3
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d017      	beq.n	8009e76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	005b      	lsls	r3, r3, #1
 8009e50:	2203      	movs	r2, #3
 8009e52:	fa02 f303 	lsl.w	r3, r2, r3
 8009e56:	43db      	mvns	r3, r3
 8009e58:	69ba      	ldr	r2, [r7, #24]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	689a      	ldr	r2, [r3, #8]
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	fa02 f303 	lsl.w	r3, r2, r3
 8009e6a:	69ba      	ldr	r2, [r7, #24]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	69ba      	ldr	r2, [r7, #24]
 8009e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f003 0303 	and.w	r3, r3, #3
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d123      	bne.n	8009eca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	08da      	lsrs	r2, r3, #3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	3208      	adds	r2, #8
 8009e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	f003 0307 	and.w	r3, r3, #7
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	220f      	movs	r2, #15
 8009e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9e:	43db      	mvns	r3, r3
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	691a      	ldr	r2, [r3, #16]
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	f003 0307 	and.w	r3, r3, #7
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	08da      	lsrs	r2, r3, #3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3208      	adds	r2, #8
 8009ec4:	69b9      	ldr	r1, [r7, #24]
 8009ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	005b      	lsls	r3, r3, #1
 8009ed4:	2203      	movs	r2, #3
 8009ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eda:	43db      	mvns	r3, r3
 8009edc:	69ba      	ldr	r2, [r7, #24]
 8009ede:	4013      	ands	r3, r2
 8009ee0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f003 0203 	and.w	r2, r3, #3
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	005b      	lsls	r3, r3, #1
 8009eee:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef2:	69ba      	ldr	r2, [r7, #24]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	69ba      	ldr	r2, [r7, #24]
 8009efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 80d8 	beq.w	800a0bc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8009fc0 <HAL_GPIO_Init+0x22c>)
 8009f0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009f12:	4a2b      	ldr	r2, [pc, #172]	@ (8009fc0 <HAL_GPIO_Init+0x22c>)
 8009f14:	f043 0302 	orr.w	r3, r3, #2
 8009f18:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009f1c:	4b28      	ldr	r3, [pc, #160]	@ (8009fc0 <HAL_GPIO_Init+0x22c>)
 8009f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009f22:	f003 0302 	and.w	r3, r3, #2
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009f2a:	4a26      	ldr	r2, [pc, #152]	@ (8009fc4 <HAL_GPIO_Init+0x230>)
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	089b      	lsrs	r3, r3, #2
 8009f30:	3302      	adds	r3, #2
 8009f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	220f      	movs	r2, #15
 8009f42:	fa02 f303 	lsl.w	r3, r2, r3
 8009f46:	43db      	mvns	r3, r3
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a1d      	ldr	r2, [pc, #116]	@ (8009fc8 <HAL_GPIO_Init+0x234>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d04a      	beq.n	8009fec <HAL_GPIO_Init+0x258>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a1c      	ldr	r2, [pc, #112]	@ (8009fcc <HAL_GPIO_Init+0x238>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d02b      	beq.n	8009fb6 <HAL_GPIO_Init+0x222>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a1b      	ldr	r2, [pc, #108]	@ (8009fd0 <HAL_GPIO_Init+0x23c>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d025      	beq.n	8009fb2 <HAL_GPIO_Init+0x21e>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4a1a      	ldr	r2, [pc, #104]	@ (8009fd4 <HAL_GPIO_Init+0x240>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d01f      	beq.n	8009fae <HAL_GPIO_Init+0x21a>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a19      	ldr	r2, [pc, #100]	@ (8009fd8 <HAL_GPIO_Init+0x244>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d019      	beq.n	8009faa <HAL_GPIO_Init+0x216>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a18      	ldr	r2, [pc, #96]	@ (8009fdc <HAL_GPIO_Init+0x248>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d013      	beq.n	8009fa6 <HAL_GPIO_Init+0x212>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a17      	ldr	r2, [pc, #92]	@ (8009fe0 <HAL_GPIO_Init+0x24c>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d00d      	beq.n	8009fa2 <HAL_GPIO_Init+0x20e>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a16      	ldr	r2, [pc, #88]	@ (8009fe4 <HAL_GPIO_Init+0x250>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d007      	beq.n	8009f9e <HAL_GPIO_Init+0x20a>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a15      	ldr	r2, [pc, #84]	@ (8009fe8 <HAL_GPIO_Init+0x254>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d101      	bne.n	8009f9a <HAL_GPIO_Init+0x206>
 8009f96:	2309      	movs	r3, #9
 8009f98:	e029      	b.n	8009fee <HAL_GPIO_Init+0x25a>
 8009f9a:	230a      	movs	r3, #10
 8009f9c:	e027      	b.n	8009fee <HAL_GPIO_Init+0x25a>
 8009f9e:	2307      	movs	r3, #7
 8009fa0:	e025      	b.n	8009fee <HAL_GPIO_Init+0x25a>
 8009fa2:	2306      	movs	r3, #6
 8009fa4:	e023      	b.n	8009fee <HAL_GPIO_Init+0x25a>
 8009fa6:	2305      	movs	r3, #5
 8009fa8:	e021      	b.n	8009fee <HAL_GPIO_Init+0x25a>
 8009faa:	2304      	movs	r3, #4
 8009fac:	e01f      	b.n	8009fee <HAL_GPIO_Init+0x25a>
 8009fae:	2303      	movs	r3, #3
 8009fb0:	e01d      	b.n	8009fee <HAL_GPIO_Init+0x25a>
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	e01b      	b.n	8009fee <HAL_GPIO_Init+0x25a>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e019      	b.n	8009fee <HAL_GPIO_Init+0x25a>
 8009fba:	bf00      	nop
 8009fbc:	58000080 	.word	0x58000080
 8009fc0:	58024400 	.word	0x58024400
 8009fc4:	58000400 	.word	0x58000400
 8009fc8:	58020000 	.word	0x58020000
 8009fcc:	58020400 	.word	0x58020400
 8009fd0:	58020800 	.word	0x58020800
 8009fd4:	58020c00 	.word	0x58020c00
 8009fd8:	58021000 	.word	0x58021000
 8009fdc:	58021400 	.word	0x58021400
 8009fe0:	58021800 	.word	0x58021800
 8009fe4:	58021c00 	.word	0x58021c00
 8009fe8:	58022400 	.word	0x58022400
 8009fec:	2300      	movs	r3, #0
 8009fee:	69fa      	ldr	r2, [r7, #28]
 8009ff0:	f002 0203 	and.w	r2, r2, #3
 8009ff4:	0092      	lsls	r2, r2, #2
 8009ff6:	4093      	lsls	r3, r2
 8009ff8:	69ba      	ldr	r2, [r7, #24]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009ffe:	4938      	ldr	r1, [pc, #224]	@ (800a0e0 <HAL_GPIO_Init+0x34c>)
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	089b      	lsrs	r3, r3, #2
 800a004:	3302      	adds	r3, #2
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a00c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	43db      	mvns	r3, r3
 800a018:	69ba      	ldr	r2, [r7, #24]
 800a01a:	4013      	ands	r3, r2
 800a01c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a02a:	69ba      	ldr	r2, [r7, #24]
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	4313      	orrs	r3, r2
 800a030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a032:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a03a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	43db      	mvns	r3, r3
 800a046:	69ba      	ldr	r2, [r7, #24]
 800a048:	4013      	ands	r3, r2
 800a04a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d003      	beq.n	800a060 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a060:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	43db      	mvns	r3, r3
 800a072:	69ba      	ldr	r2, [r7, #24]
 800a074:	4013      	ands	r3, r2
 800a076:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d003      	beq.n	800a08c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a084:	69ba      	ldr	r2, [r7, #24]
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	4313      	orrs	r3, r2
 800a08a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	69ba      	ldr	r2, [r7, #24]
 800a090:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	43db      	mvns	r3, r3
 800a09c:	69ba      	ldr	r2, [r7, #24]
 800a09e:	4013      	ands	r3, r2
 800a0a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a0ae:	69ba      	ldr	r2, [r7, #24]
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	69ba      	ldr	r2, [r7, #24]
 800a0ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f47f ae6b 	bne.w	8009da8 <HAL_GPIO_Init+0x14>
  }
}
 800a0d2:	bf00      	nop
 800a0d4:	bf00      	nop
 800a0d6:	3724      	adds	r7, #36	@ 0x24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	58000400 	.word	0x58000400

0800a0e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	807b      	strh	r3, [r7, #2]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a0f4:	787b      	ldrb	r3, [r7, #1]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d003      	beq.n	800a102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a0fa:	887a      	ldrh	r2, [r7, #2]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a100:	e003      	b.n	800a10a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a102:	887b      	ldrh	r3, [r7, #2]
 800a104:	041a      	lsls	r2, r3, #16
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	619a      	str	r2, [r3, #24]
}
 800a10a:	bf00      	nop
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a116:	b480      	push	{r7}
 800a118:	b085      	sub	sp, #20
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	460b      	mov	r3, r1
 800a120:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a128:	887a      	ldrh	r2, [r7, #2]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	4013      	ands	r3, r2
 800a12e:	041a      	lsls	r2, r3, #16
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	43d9      	mvns	r1, r3
 800a134:	887b      	ldrh	r3, [r7, #2]
 800a136:	400b      	ands	r3, r1
 800a138:	431a      	orrs	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	619a      	str	r2, [r3, #24]
}
 800a13e:	bf00      	nop
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr

0800a14a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b086      	sub	sp, #24
 800a14e:	af02      	add	r7, sp, #8
 800a150:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e0fe      	b.n	800a35a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	d106      	bne.n	800a176 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f010 faf1 	bl	801a758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2203      	movs	r2, #3
 800a17a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4618      	mov	r0, r3
 800a184:	f008 faff 	bl	8012786 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6818      	ldr	r0, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	7c1a      	ldrb	r2, [r3, #16]
 800a190:	f88d 2000 	strb.w	r2, [sp]
 800a194:	3304      	adds	r3, #4
 800a196:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a198:	f008 f9d0 	bl	801253c <USB_CoreInit>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d005      	beq.n	800a1ae <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2202      	movs	r2, #2
 800a1a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e0d5      	b.n	800a35a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f008 faf7 	bl	80127a8 <USB_SetCurrentMode>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d005      	beq.n	800a1cc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e0c6      	b.n	800a35a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	73fb      	strb	r3, [r7, #15]
 800a1d0:	e04a      	b.n	800a268 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a1d2:	7bfa      	ldrb	r2, [r7, #15]
 800a1d4:	6879      	ldr	r1, [r7, #4]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	00db      	lsls	r3, r3, #3
 800a1da:	4413      	add	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	440b      	add	r3, r1
 800a1e0:	3315      	adds	r3, #21
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a1e6:	7bfa      	ldrb	r2, [r7, #15]
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	00db      	lsls	r3, r3, #3
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	3314      	adds	r3, #20
 800a1f6:	7bfa      	ldrb	r2, [r7, #15]
 800a1f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a1fa:	7bfa      	ldrb	r2, [r7, #15]
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	b298      	uxth	r0, r3
 800a200:	6879      	ldr	r1, [r7, #4]
 800a202:	4613      	mov	r3, r2
 800a204:	00db      	lsls	r3, r3, #3
 800a206:	4413      	add	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	440b      	add	r3, r1
 800a20c:	332e      	adds	r3, #46	@ 0x2e
 800a20e:	4602      	mov	r2, r0
 800a210:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a212:	7bfa      	ldrb	r2, [r7, #15]
 800a214:	6879      	ldr	r1, [r7, #4]
 800a216:	4613      	mov	r3, r2
 800a218:	00db      	lsls	r3, r3, #3
 800a21a:	4413      	add	r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	440b      	add	r3, r1
 800a220:	3318      	adds	r3, #24
 800a222:	2200      	movs	r2, #0
 800a224:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a226:	7bfa      	ldrb	r2, [r7, #15]
 800a228:	6879      	ldr	r1, [r7, #4]
 800a22a:	4613      	mov	r3, r2
 800a22c:	00db      	lsls	r3, r3, #3
 800a22e:	4413      	add	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	440b      	add	r3, r1
 800a234:	331c      	adds	r3, #28
 800a236:	2200      	movs	r2, #0
 800a238:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a23a:	7bfa      	ldrb	r2, [r7, #15]
 800a23c:	6879      	ldr	r1, [r7, #4]
 800a23e:	4613      	mov	r3, r2
 800a240:	00db      	lsls	r3, r3, #3
 800a242:	4413      	add	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	440b      	add	r3, r1
 800a248:	3320      	adds	r3, #32
 800a24a:	2200      	movs	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a24e:	7bfa      	ldrb	r2, [r7, #15]
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	4613      	mov	r3, r2
 800a254:	00db      	lsls	r3, r3, #3
 800a256:	4413      	add	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	440b      	add	r3, r1
 800a25c:	3324      	adds	r3, #36	@ 0x24
 800a25e:	2200      	movs	r2, #0
 800a260:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	3301      	adds	r3, #1
 800a266:	73fb      	strb	r3, [r7, #15]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	791b      	ldrb	r3, [r3, #4]
 800a26c:	7bfa      	ldrb	r2, [r7, #15]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d3af      	bcc.n	800a1d2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a272:	2300      	movs	r3, #0
 800a274:	73fb      	strb	r3, [r7, #15]
 800a276:	e044      	b.n	800a302 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a278:	7bfa      	ldrb	r2, [r7, #15]
 800a27a:	6879      	ldr	r1, [r7, #4]
 800a27c:	4613      	mov	r3, r2
 800a27e:	00db      	lsls	r3, r3, #3
 800a280:	4413      	add	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	440b      	add	r3, r1
 800a286:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800a28a:	2200      	movs	r2, #0
 800a28c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a28e:	7bfa      	ldrb	r2, [r7, #15]
 800a290:	6879      	ldr	r1, [r7, #4]
 800a292:	4613      	mov	r3, r2
 800a294:	00db      	lsls	r3, r3, #3
 800a296:	4413      	add	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	440b      	add	r3, r1
 800a29c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a2a0:	7bfa      	ldrb	r2, [r7, #15]
 800a2a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a2a4:	7bfa      	ldrb	r2, [r7, #15]
 800a2a6:	6879      	ldr	r1, [r7, #4]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	00db      	lsls	r3, r3, #3
 800a2ac:	4413      	add	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	440b      	add	r3, r1
 800a2b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a2ba:	7bfa      	ldrb	r2, [r7, #15]
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	00db      	lsls	r3, r3, #3
 800a2c2:	4413      	add	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	440b      	add	r3, r1
 800a2c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a2d0:	7bfa      	ldrb	r2, [r7, #15]
 800a2d2:	6879      	ldr	r1, [r7, #4]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	4413      	add	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	440b      	add	r3, r1
 800a2de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a2e6:	7bfa      	ldrb	r2, [r7, #15]
 800a2e8:	6879      	ldr	r1, [r7, #4]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	00db      	lsls	r3, r3, #3
 800a2ee:	4413      	add	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	440b      	add	r3, r1
 800a2f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	3301      	adds	r3, #1
 800a300:	73fb      	strb	r3, [r7, #15]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	791b      	ldrb	r3, [r3, #4]
 800a306:	7bfa      	ldrb	r2, [r7, #15]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d3b5      	bcc.n	800a278 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6818      	ldr	r0, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	7c1a      	ldrb	r2, [r3, #16]
 800a314:	f88d 2000 	strb.w	r2, [sp]
 800a318:	3304      	adds	r3, #4
 800a31a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a31c:	f008 fa90 	bl	8012840 <USB_DevInit>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d005      	beq.n	800a332 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2202      	movs	r2, #2
 800a32a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e013      	b.n	800a35a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7b1b      	ldrb	r3, [r3, #12]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d102      	bne.n	800a34e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f001 f99b 	bl	800b684 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4618      	mov	r0, r3
 800a354:	f009 fad3 	bl	80138fe <USB_DevDisconnect>

  return HAL_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b084      	sub	sp, #16
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a376:	2b01      	cmp	r3, #1
 800a378:	d101      	bne.n	800a37e <HAL_PCD_Start+0x1c>
 800a37a:	2302      	movs	r3, #2
 800a37c:	e022      	b.n	800a3c4 <HAL_PCD_Start+0x62>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d009      	beq.n	800a3a6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a396:	2b01      	cmp	r3, #1
 800a398:	d105      	bne.n	800a3a6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a39e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f008 f9da 	bl	8012764 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f009 fa81 	bl	80138bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a3cc:	b590      	push	{r4, r7, lr}
 800a3ce:	b08d      	sub	sp, #52	@ 0x34
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f009 fb3f 	bl	8013a66 <USB_GetMode>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f040 84b9 	bne.w	800ad62 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f009 faa3 	bl	8013940 <USB_ReadInterrupts>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f000 84af 	beq.w	800ad60 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	0a1b      	lsrs	r3, r3, #8
 800a40c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f009 fa90 	bl	8013940 <USB_ReadInterrupts>
 800a420:	4603      	mov	r3, r0
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b02      	cmp	r3, #2
 800a428:	d107      	bne.n	800a43a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	695a      	ldr	r2, [r3, #20]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f002 0202 	and.w	r2, r2, #2
 800a438:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f009 fa7e 	bl	8013940 <USB_ReadInterrupts>
 800a444:	4603      	mov	r3, r0
 800a446:	f003 0310 	and.w	r3, r3, #16
 800a44a:	2b10      	cmp	r3, #16
 800a44c:	d161      	bne.n	800a512 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	699a      	ldr	r2, [r3, #24]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f022 0210 	bic.w	r2, r2, #16
 800a45c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a45e:	6a3b      	ldr	r3, [r7, #32]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	f003 020f 	and.w	r2, r3, #15
 800a46a:	4613      	mov	r3, r2
 800a46c:	00db      	lsls	r3, r3, #3
 800a46e:	4413      	add	r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	4413      	add	r3, r2
 800a47a:	3304      	adds	r3, #4
 800a47c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800a484:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a488:	d124      	bne.n	800a4d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a48a:	69ba      	ldr	r2, [r7, #24]
 800a48c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800a490:	4013      	ands	r3, r2
 800a492:	2b00      	cmp	r3, #0
 800a494:	d035      	beq.n	800a502 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	091b      	lsrs	r3, r3, #4
 800a49e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a4a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	6a38      	ldr	r0, [r7, #32]
 800a4aa:	f009 f8b5 	bl	8013618 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	68da      	ldr	r2, [r3, #12]
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	091b      	lsrs	r3, r3, #4
 800a4b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4ba:	441a      	add	r2, r3
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	695a      	ldr	r2, [r3, #20]
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	091b      	lsrs	r3, r3, #4
 800a4c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4cc:	441a      	add	r2, r3
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	615a      	str	r2, [r3, #20]
 800a4d2:	e016      	b.n	800a502 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800a4da:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a4de:	d110      	bne.n	800a502 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a4e6:	2208      	movs	r2, #8
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6a38      	ldr	r0, [r7, #32]
 800a4ec:	f009 f894 	bl	8013618 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	695a      	ldr	r2, [r3, #20]
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	091b      	lsrs	r3, r3, #4
 800a4f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4fc:	441a      	add	r2, r3
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	699a      	ldr	r2, [r3, #24]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f042 0210 	orr.w	r2, r2, #16
 800a510:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4618      	mov	r0, r3
 800a518:	f009 fa12 	bl	8013940 <USB_ReadInterrupts>
 800a51c:	4603      	mov	r3, r0
 800a51e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a522:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a526:	f040 80a7 	bne.w	800a678 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a52a:	2300      	movs	r3, #0
 800a52c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4618      	mov	r0, r3
 800a534:	f009 fa17 	bl	8013966 <USB_ReadDevAllOutEpInterrupt>
 800a538:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800a53a:	e099      	b.n	800a670 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	f000 808e 	beq.w	800a664 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a54e:	b2d2      	uxtb	r2, r2
 800a550:	4611      	mov	r1, r2
 800a552:	4618      	mov	r0, r3
 800a554:	f009 fa3b 	bl	80139ce <USB_ReadDevOutEPInterrupt>
 800a558:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f003 0301 	and.w	r3, r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00c      	beq.n	800a57e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a570:	461a      	mov	r2, r3
 800a572:	2301      	movs	r3, #1
 800a574:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a576:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fefd 	bl	800b378 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	f003 0308 	and.w	r3, r3, #8
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00c      	beq.n	800a5a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a594:	461a      	mov	r2, r3
 800a596:	2308      	movs	r3, #8
 800a598:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a59a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 ffd3 	bl	800b548 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	f003 0310 	and.w	r3, r3, #16
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d008      	beq.n	800a5be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	2310      	movs	r3, #16
 800a5bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f003 0302 	and.w	r3, r3, #2
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d030      	beq.n	800a62a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a5c8:	6a3b      	ldr	r3, [r7, #32]
 800a5ca:	695b      	ldr	r3, [r3, #20]
 800a5cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5d0:	2b80      	cmp	r3, #128	@ 0x80
 800a5d2:	d109      	bne.n	800a5e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	69fa      	ldr	r2, [r7, #28]
 800a5de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a5e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a5e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	00db      	lsls	r3, r3, #3
 800a5ee:	4413      	add	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	3304      	adds	r3, #4
 800a5fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	78db      	ldrb	r3, [r3, #3]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d108      	bne.n	800a618 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2200      	movs	r2, #0
 800a60a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	4619      	mov	r1, r3
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f010 f9d8 	bl	801a9c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61a:	015a      	lsls	r2, r3, #5
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	4413      	add	r3, r2
 800a620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a624:	461a      	mov	r2, r3
 800a626:	2302      	movs	r3, #2
 800a628:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	f003 0320 	and.w	r3, r3, #32
 800a630:	2b00      	cmp	r3, #0
 800a632:	d008      	beq.n	800a646 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a636:	015a      	lsls	r2, r3, #5
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	4413      	add	r3, r2
 800a63c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a640:	461a      	mov	r2, r3
 800a642:	2320      	movs	r3, #32
 800a644:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d009      	beq.n	800a664 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a65c:	461a      	mov	r2, r3
 800a65e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a662:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a666:	3301      	adds	r3, #1
 800a668:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66c:	085b      	lsrs	r3, r3, #1
 800a66e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a672:	2b00      	cmp	r3, #0
 800a674:	f47f af62 	bne.w	800a53c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f009 f95f 	bl	8013940 <USB_ReadInterrupts>
 800a682:	4603      	mov	r3, r0
 800a684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a688:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a68c:	f040 80db 	bne.w	800a846 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4618      	mov	r0, r3
 800a696:	f009 f980 	bl	801399a <USB_ReadDevAllInEpInterrupt>
 800a69a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800a6a0:	e0cd      	b.n	800a83e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a4:	f003 0301 	and.w	r3, r3, #1
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 80c2 	beq.w	800a832 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6b4:	b2d2      	uxtb	r2, r2
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f009 f9a6 	bl	8013a0a <USB_ReadDevInEPInterrupt>
 800a6be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d057      	beq.n	800a77a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6cc:	f003 030f 	and.w	r3, r3, #15
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	43db      	mvns	r3, r3
 800a6e4:	69f9      	ldr	r1, [r7, #28]
 800a6e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f0:	015a      	lsls	r2, r3, #5
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	799b      	ldrb	r3, [r3, #6]
 800a704:	2b01      	cmp	r3, #1
 800a706:	d132      	bne.n	800a76e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a708:	6879      	ldr	r1, [r7, #4]
 800a70a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a70c:	4613      	mov	r3, r2
 800a70e:	00db      	lsls	r3, r3, #3
 800a710:	4413      	add	r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	440b      	add	r3, r1
 800a716:	3320      	adds	r3, #32
 800a718:	6819      	ldr	r1, [r3, #0]
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a71e:	4613      	mov	r3, r2
 800a720:	00db      	lsls	r3, r3, #3
 800a722:	4413      	add	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4403      	add	r3, r0
 800a728:	331c      	adds	r3, #28
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4419      	add	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a732:	4613      	mov	r3, r2
 800a734:	00db      	lsls	r3, r3, #3
 800a736:	4413      	add	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4403      	add	r3, r0
 800a73c:	3320      	adds	r3, #32
 800a73e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a742:	2b00      	cmp	r3, #0
 800a744:	d113      	bne.n	800a76e <HAL_PCD_IRQHandler+0x3a2>
 800a746:	6879      	ldr	r1, [r7, #4]
 800a748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a74a:	4613      	mov	r3, r2
 800a74c:	00db      	lsls	r3, r3, #3
 800a74e:	4413      	add	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	440b      	add	r3, r1
 800a754:	3324      	adds	r3, #36	@ 0x24
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d108      	bne.n	800a76e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6818      	ldr	r0, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a766:	461a      	mov	r2, r3
 800a768:	2101      	movs	r1, #1
 800a76a:	f009 f9af 	bl	8013acc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a770:	b2db      	uxtb	r3, r3
 800a772:	4619      	mov	r1, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f010 f88c 	bl	801a892 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	f003 0308 	and.w	r3, r3, #8
 800a780:	2b00      	cmp	r3, #0
 800a782:	d008      	beq.n	800a796 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a790:	461a      	mov	r2, r3
 800a792:	2308      	movs	r3, #8
 800a794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	f003 0310 	and.w	r3, r3, #16
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d008      	beq.n	800a7b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	2310      	movs	r3, #16
 800a7b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d008      	beq.n	800a7ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	2340      	movs	r3, #64	@ 0x40
 800a7cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d023      	beq.n	800a820 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a7d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a7da:	6a38      	ldr	r0, [r7, #32]
 800a7dc:	f008 f98e 	bl	8012afc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a7e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	00db      	lsls	r3, r3, #3
 800a7e6:	4413      	add	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	3310      	adds	r3, #16
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	78db      	ldrb	r3, [r3, #3]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d108      	bne.n	800a80e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	2200      	movs	r2, #0
 800a800:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a804:	b2db      	uxtb	r3, r3
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f010 f8ef 	bl	801a9ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a810:	015a      	lsls	r2, r3, #5
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	4413      	add	r3, r2
 800a816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a81a:	461a      	mov	r2, r3
 800a81c:	2302      	movs	r3, #2
 800a81e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a82a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fd17 	bl	800b260 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a834:	3301      	adds	r3, #1
 800a836:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83a:	085b      	lsrs	r3, r3, #1
 800a83c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a840:	2b00      	cmp	r3, #0
 800a842:	f47f af2e 	bne.w	800a6a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f009 f878 	bl	8013940 <USB_ReadInterrupts>
 800a850:	4603      	mov	r3, r0
 800a852:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a85a:	d122      	bne.n	800a8a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	69fa      	ldr	r2, [r7, #28]
 800a866:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a86a:	f023 0301 	bic.w	r3, r3, #1
 800a86e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800a876:	2b01      	cmp	r3, #1
 800a878:	d108      	bne.n	800a88c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a882:	2100      	movs	r1, #0
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 ff21 	bl	800b6cc <HAL_PCDEx_LPM_Callback>
 800a88a:	e002      	b.n	800a892 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f010 f88d 	bl	801a9ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	695a      	ldr	r2, [r3, #20]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800a8a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f009 f84a 	bl	8013940 <USB_ReadInterrupts>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8b6:	d112      	bne.n	800a8de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	f003 0301 	and.w	r3, r3, #1
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d102      	bne.n	800a8ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f010 f849 	bl	801a960 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	695a      	ldr	r2, [r3, #20]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800a8dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f009 f82c 	bl	8013940 <USB_ReadInterrupts>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8f2:	d121      	bne.n	800a938 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	695a      	ldr	r2, [r3, #20]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800a902:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d111      	bne.n	800a932 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a91c:	089b      	lsrs	r3, r3, #2
 800a91e:	f003 020f 	and.w	r2, r3, #15
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a928:	2101      	movs	r1, #1
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fece 	bl	800b6cc <HAL_PCDEx_LPM_Callback>
 800a930:	e002      	b.n	800a938 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f010 f814 	bl	801a960 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f008 ffff 	bl	8013940 <USB_ReadInterrupts>
 800a942:	4603      	mov	r3, r0
 800a944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a94c:	f040 80b7 	bne.w	800aabe <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	69fa      	ldr	r2, [r7, #28]
 800a95a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a95e:	f023 0301 	bic.w	r3, r3, #1
 800a962:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2110      	movs	r1, #16
 800a96a:	4618      	mov	r0, r3
 800a96c:	f008 f8c6 	bl	8012afc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a970:	2300      	movs	r3, #0
 800a972:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a974:	e046      	b.n	800aa04 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a978:	015a      	lsls	r2, r3, #5
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	4413      	add	r3, r2
 800a97e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a982:	461a      	mov	r2, r3
 800a984:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a988:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a99a:	0151      	lsls	r1, r2, #5
 800a99c:	69fa      	ldr	r2, [r7, #28]
 800a99e:	440a      	add	r2, r1
 800a9a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a9a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a9bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9ce:	0151      	lsls	r1, r2, #5
 800a9d0:	69fa      	ldr	r2, [r7, #28]
 800a9d2:	440a      	add	r2, r1
 800a9d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a9dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e0:	015a      	lsls	r2, r3, #5
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9ee:	0151      	lsls	r1, r2, #5
 800a9f0:	69fa      	ldr	r2, [r7, #28]
 800a9f2:	440a      	add	r2, r1
 800a9f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a9fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa00:	3301      	adds	r3, #1
 800aa02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	791b      	ldrb	r3, [r3, #4]
 800aa08:	461a      	mov	r2, r3
 800aa0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d3b2      	bcc.n	800a976 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	69fa      	ldr	r2, [r7, #28]
 800aa1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa1e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800aa22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	7bdb      	ldrb	r3, [r3, #15]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d016      	beq.n	800aa5a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa36:	69fa      	ldr	r2, [r7, #28]
 800aa38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa3c:	f043 030b 	orr.w	r3, r3, #11
 800aa40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa4c:	69fa      	ldr	r2, [r7, #28]
 800aa4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa52:	f043 030b 	orr.w	r3, r3, #11
 800aa56:	6453      	str	r3, [r2, #68]	@ 0x44
 800aa58:	e015      	b.n	800aa86 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa60:	695a      	ldr	r2, [r3, #20]
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa68:	4619      	mov	r1, r3
 800aa6a:	f242 032b 	movw	r3, #8235	@ 0x202b
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	69fa      	ldr	r2, [r7, #28]
 800aa7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa80:	f043 030b 	orr.w	r3, r3, #11
 800aa84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	69fa      	ldr	r2, [r7, #28]
 800aa90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa94:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800aa98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6818      	ldr	r0, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	f009 f80f 	bl	8013acc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	695a      	ldr	r2, [r3, #20]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800aabc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f008 ff3c 	bl	8013940 <USB_ReadInterrupts>
 800aac8:	4603      	mov	r3, r0
 800aaca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aad2:	d123      	bne.n	800ab1c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4618      	mov	r0, r3
 800aada:	f008 ffd3 	bl	8013a84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f008 f883 	bl	8012bee <USB_GetDevSpeed>
 800aae8:	4603      	mov	r3, r0
 800aaea:	461a      	mov	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681c      	ldr	r4, [r3, #0]
 800aaf4:	f001 fdb4 	bl	800c660 <HAL_RCC_GetHCLKFreq>
 800aaf8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800aafe:	461a      	mov	r2, r3
 800ab00:	4620      	mov	r0, r4
 800ab02:	f007 fd8d 	bl	8012620 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f00f ff02 	bl	801a910 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	695a      	ldr	r2, [r3, #20]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800ab1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f008 ff0d 	bl	8013940 <USB_ReadInterrupts>
 800ab26:	4603      	mov	r3, r0
 800ab28:	f003 0308 	and.w	r3, r3, #8
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	d10a      	bne.n	800ab46 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f00f fec9 	bl	801a8c8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	695a      	ldr	r2, [r3, #20]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f002 0208 	and.w	r2, r2, #8
 800ab44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f008 fef8 	bl	8013940 <USB_ReadInterrupts>
 800ab50:	4603      	mov	r3, r0
 800ab52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab56:	2b80      	cmp	r3, #128	@ 0x80
 800ab58:	d123      	bne.n	800aba2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	699b      	ldr	r3, [r3, #24]
 800ab5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab66:	2301      	movs	r3, #1
 800ab68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab6a:	e014      	b.n	800ab96 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800ab6c:	6879      	ldr	r1, [r7, #4]
 800ab6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab70:	4613      	mov	r3, r2
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	4413      	add	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	440b      	add	r3, r1
 800ab7a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d105      	bne.n	800ab90 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800ab84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fb0a 	bl	800b1a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab92:	3301      	adds	r3, #1
 800ab94:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	791b      	ldrb	r3, [r3, #4]
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d3e4      	bcc.n	800ab6c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f008 feca 	bl	8013940 <USB_ReadInterrupts>
 800abac:	4603      	mov	r3, r0
 800abae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800abb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abb6:	d13c      	bne.n	800ac32 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800abb8:	2301      	movs	r3, #1
 800abba:	627b      	str	r3, [r7, #36]	@ 0x24
 800abbc:	e02b      	b.n	800ac16 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800abbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc0:	015a      	lsls	r2, r3, #5
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	4413      	add	r3, r2
 800abc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800abce:	6879      	ldr	r1, [r7, #4]
 800abd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abd2:	4613      	mov	r3, r2
 800abd4:	00db      	lsls	r3, r3, #3
 800abd6:	4413      	add	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	440b      	add	r3, r1
 800abdc:	3318      	adds	r3, #24
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d115      	bne.n	800ac10 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800abe4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	da12      	bge.n	800ac10 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800abea:	6879      	ldr	r1, [r7, #4]
 800abec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abee:	4613      	mov	r3, r2
 800abf0:	00db      	lsls	r3, r3, #3
 800abf2:	4413      	add	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	440b      	add	r3, r1
 800abf8:	3317      	adds	r3, #23
 800abfa:	2201      	movs	r2, #1
 800abfc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800abfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 faca 	bl	800b1a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ac10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac12:	3301      	adds	r3, #1
 800ac14:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	791b      	ldrb	r3, [r3, #4]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d3cd      	bcc.n	800abbe <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	695a      	ldr	r2, [r3, #20]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800ac30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f008 fe82 	bl	8013940 <USB_ReadInterrupts>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ac42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac46:	d156      	bne.n	800acf6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ac48:	2301      	movs	r3, #1
 800ac4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac4c:	e045      	b.n	800acda <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac50:	015a      	lsls	r2, r3, #5
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	4413      	add	r3, r2
 800ac56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac62:	4613      	mov	r3, r2
 800ac64:	00db      	lsls	r3, r3, #3
 800ac66:	4413      	add	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	440b      	add	r3, r1
 800ac6c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d12e      	bne.n	800acd4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ac76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	da2b      	bge.n	800acd4 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	0c1a      	lsrs	r2, r3, #16
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800ac86:	4053      	eors	r3, r2
 800ac88:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d121      	bne.n	800acd4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac94:	4613      	mov	r3, r2
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	440b      	add	r3, r1
 800ac9e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800aca2:	2201      	movs	r2, #1
 800aca4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800aca6:	6a3b      	ldr	r3, [r7, #32]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800acae:	6a3b      	ldr	r3, [r7, #32]
 800acb0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800acb2:	6a3b      	ldr	r3, [r7, #32]
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10a      	bne.n	800acd4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	69fa      	ldr	r2, [r7, #28]
 800acc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800accc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800acd0:	6053      	str	r3, [r2, #4]
            break;
 800acd2:	e008      	b.n	800ace6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800acd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd6:	3301      	adds	r3, #1
 800acd8:	627b      	str	r3, [r7, #36]	@ 0x24
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	791b      	ldrb	r3, [r3, #4]
 800acde:	461a      	mov	r2, r3
 800ace0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d3b3      	bcc.n	800ac4e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	695a      	ldr	r2, [r3, #20]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800acf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f008 fe20 	bl	8013940 <USB_ReadInterrupts>
 800ad00:	4603      	mov	r3, r0
 800ad02:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad0a:	d10a      	bne.n	800ad22 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f00f fe7f 	bl	801aa10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	695a      	ldr	r2, [r3, #20]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800ad20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4618      	mov	r0, r3
 800ad28:	f008 fe0a 	bl	8013940 <USB_ReadInterrupts>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	f003 0304 	and.w	r3, r3, #4
 800ad32:	2b04      	cmp	r3, #4
 800ad34:	d115      	bne.n	800ad62 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	f003 0304 	and.w	r3, r3, #4
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f00f fe77 	bl	801aa3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	6859      	ldr	r1, [r3, #4]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	430a      	orrs	r2, r1
 800ad5c:	605a      	str	r2, [r3, #4]
 800ad5e:	e000      	b.n	800ad62 <HAL_PCD_IRQHandler+0x996>
      return;
 800ad60:	bf00      	nop
    }
  }
}
 800ad62:	3734      	adds	r7, #52	@ 0x34
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd90      	pop	{r4, r7, pc}

0800ad68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	460b      	mov	r3, r1
 800ad72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d101      	bne.n	800ad82 <HAL_PCD_SetAddress+0x1a>
 800ad7e:	2302      	movs	r3, #2
 800ad80:	e012      	b.n	800ada8 <HAL_PCD_SetAddress+0x40>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2201      	movs	r2, #1
 800ad86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	78fa      	ldrb	r2, [r7, #3]
 800ad8e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	78fa      	ldrb	r2, [r7, #3]
 800ad96:	4611      	mov	r1, r2
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f008 fd69 	bl	8013870 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	4608      	mov	r0, r1
 800adba:	4611      	mov	r1, r2
 800adbc:	461a      	mov	r2, r3
 800adbe:	4603      	mov	r3, r0
 800adc0:	70fb      	strb	r3, [r7, #3]
 800adc2:	460b      	mov	r3, r1
 800adc4:	803b      	strh	r3, [r7, #0]
 800adc6:	4613      	mov	r3, r2
 800adc8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800adca:	2300      	movs	r3, #0
 800adcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800adce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800add2:	2b00      	cmp	r3, #0
 800add4:	da0f      	bge.n	800adf6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800add6:	78fb      	ldrb	r3, [r7, #3]
 800add8:	f003 020f 	and.w	r2, r3, #15
 800addc:	4613      	mov	r3, r2
 800adde:	00db      	lsls	r3, r3, #3
 800ade0:	4413      	add	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	3310      	adds	r3, #16
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	4413      	add	r3, r2
 800adea:	3304      	adds	r3, #4
 800adec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2201      	movs	r2, #1
 800adf2:	705a      	strb	r2, [r3, #1]
 800adf4:	e00f      	b.n	800ae16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800adf6:	78fb      	ldrb	r3, [r7, #3]
 800adf8:	f003 020f 	and.w	r2, r3, #15
 800adfc:	4613      	mov	r3, r2
 800adfe:	00db      	lsls	r3, r3, #3
 800ae00:	4413      	add	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ae16:	78fb      	ldrb	r3, [r7, #3]
 800ae18:	f003 030f 	and.w	r3, r3, #15
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800ae22:	883b      	ldrh	r3, [r7, #0]
 800ae24:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	78ba      	ldrb	r2, [r7, #2]
 800ae30:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	785b      	ldrb	r3, [r3, #1]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d004      	beq.n	800ae44 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ae44:	78bb      	ldrb	r3, [r7, #2]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d102      	bne.n	800ae50 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d101      	bne.n	800ae5e <HAL_PCD_EP_Open+0xae>
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	e00e      	b.n	800ae7c <HAL_PCD_EP_Open+0xcc>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68f9      	ldr	r1, [r7, #12]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f007 fee3 	bl	8012c38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800ae7a:	7afb      	ldrb	r3, [r7, #11]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ae90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	da0f      	bge.n	800aeb8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae98:	78fb      	ldrb	r3, [r7, #3]
 800ae9a:	f003 020f 	and.w	r2, r3, #15
 800ae9e:	4613      	mov	r3, r2
 800aea0:	00db      	lsls	r3, r3, #3
 800aea2:	4413      	add	r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	3310      	adds	r3, #16
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	4413      	add	r3, r2
 800aeac:	3304      	adds	r3, #4
 800aeae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	705a      	strb	r2, [r3, #1]
 800aeb6:	e00f      	b.n	800aed8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aeb8:	78fb      	ldrb	r3, [r7, #3]
 800aeba:	f003 020f 	and.w	r2, r3, #15
 800aebe:	4613      	mov	r3, r2
 800aec0:	00db      	lsls	r3, r3, #3
 800aec2:	4413      	add	r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	4413      	add	r3, r2
 800aece:	3304      	adds	r3, #4
 800aed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800aed8:	78fb      	ldrb	r3, [r7, #3]
 800aeda:	f003 030f 	and.w	r3, r3, #15
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d101      	bne.n	800aef2 <HAL_PCD_EP_Close+0x6e>
 800aeee:	2302      	movs	r3, #2
 800aef0:	e00e      	b.n	800af10 <HAL_PCD_EP_Close+0x8c>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68f9      	ldr	r1, [r7, #12]
 800af00:	4618      	mov	r0, r3
 800af02:	f007 ff21 	bl	8012d48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	607a      	str	r2, [r7, #4]
 800af22:	603b      	str	r3, [r7, #0]
 800af24:	460b      	mov	r3, r1
 800af26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800af28:	7afb      	ldrb	r3, [r7, #11]
 800af2a:	f003 020f 	and.w	r2, r3, #15
 800af2e:	4613      	mov	r3, r2
 800af30:	00db      	lsls	r3, r3, #3
 800af32:	4413      	add	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	4413      	add	r3, r2
 800af3e:	3304      	adds	r3, #4
 800af40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2200      	movs	r2, #0
 800af52:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	2200      	movs	r2, #0
 800af58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800af5a:	7afb      	ldrb	r3, [r7, #11]
 800af5c:	f003 030f 	and.w	r3, r3, #15
 800af60:	b2da      	uxtb	r2, r3
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	799b      	ldrb	r3, [r3, #6]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d102      	bne.n	800af74 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6818      	ldr	r0, [r3, #0]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	799b      	ldrb	r3, [r3, #6]
 800af7c:	461a      	mov	r2, r3
 800af7e:	6979      	ldr	r1, [r7, #20]
 800af80:	f007 ffbe 	bl	8012f00 <USB_EPStartXfer>

  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3718      	adds	r7, #24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800af8e:	b480      	push	{r7}
 800af90:	b083      	sub	sp, #12
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	460b      	mov	r3, r1
 800af98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800af9a:	78fb      	ldrb	r3, [r7, #3]
 800af9c:	f003 020f 	and.w	r2, r3, #15
 800afa0:	6879      	ldr	r1, [r7, #4]
 800afa2:	4613      	mov	r3, r2
 800afa4:	00db      	lsls	r3, r3, #3
 800afa6:	4413      	add	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	440b      	add	r3, r1
 800afac:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800afb0:	681b      	ldr	r3, [r3, #0]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b086      	sub	sp, #24
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	60f8      	str	r0, [r7, #12]
 800afc6:	607a      	str	r2, [r7, #4]
 800afc8:	603b      	str	r3, [r7, #0]
 800afca:	460b      	mov	r3, r1
 800afcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800afce:	7afb      	ldrb	r3, [r7, #11]
 800afd0:	f003 020f 	and.w	r2, r3, #15
 800afd4:	4613      	mov	r3, r2
 800afd6:	00db      	lsls	r3, r3, #3
 800afd8:	4413      	add	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	3310      	adds	r3, #16
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	4413      	add	r3, r2
 800afe2:	3304      	adds	r3, #4
 800afe4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	2200      	movs	r2, #0
 800aff6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	2201      	movs	r2, #1
 800affc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800affe:	7afb      	ldrb	r3, [r7, #11]
 800b000:	f003 030f 	and.w	r3, r3, #15
 800b004:	b2da      	uxtb	r2, r3
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	799b      	ldrb	r3, [r3, #6]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d102      	bne.n	800b018 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6818      	ldr	r0, [r3, #0]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	799b      	ldrb	r3, [r3, #6]
 800b020:	461a      	mov	r2, r3
 800b022:	6979      	ldr	r1, [r7, #20]
 800b024:	f007 ff6c 	bl	8012f00 <USB_EPStartXfer>

  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b084      	sub	sp, #16
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	460b      	mov	r3, r1
 800b03c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b03e:	78fb      	ldrb	r3, [r7, #3]
 800b040:	f003 030f 	and.w	r3, r3, #15
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	7912      	ldrb	r2, [r2, #4]
 800b048:	4293      	cmp	r3, r2
 800b04a:	d901      	bls.n	800b050 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	e04f      	b.n	800b0f0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b054:	2b00      	cmp	r3, #0
 800b056:	da0f      	bge.n	800b078 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b058:	78fb      	ldrb	r3, [r7, #3]
 800b05a:	f003 020f 	and.w	r2, r3, #15
 800b05e:	4613      	mov	r3, r2
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	3310      	adds	r3, #16
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	4413      	add	r3, r2
 800b06c:	3304      	adds	r3, #4
 800b06e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2201      	movs	r2, #1
 800b074:	705a      	strb	r2, [r3, #1]
 800b076:	e00d      	b.n	800b094 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b078:	78fa      	ldrb	r2, [r7, #3]
 800b07a:	4613      	mov	r3, r2
 800b07c:	00db      	lsls	r3, r3, #3
 800b07e:	4413      	add	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	4413      	add	r3, r2
 800b08a:	3304      	adds	r3, #4
 800b08c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2201      	movs	r2, #1
 800b098:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b09a:	78fb      	ldrb	r3, [r7, #3]
 800b09c:	f003 030f 	and.w	r3, r3, #15
 800b0a0:	b2da      	uxtb	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d101      	bne.n	800b0b4 <HAL_PCD_EP_SetStall+0x82>
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	e01d      	b.n	800b0f0 <HAL_PCD_EP_SetStall+0xbe>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68f9      	ldr	r1, [r7, #12]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f008 fb00 	bl	80136c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b0c8:	78fb      	ldrb	r3, [r7, #3]
 800b0ca:	f003 030f 	and.w	r3, r3, #15
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d109      	bne.n	800b0e6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	7999      	ldrb	r1, [r3, #6]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	f008 fcf3 	bl	8013acc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b104:	78fb      	ldrb	r3, [r7, #3]
 800b106:	f003 030f 	and.w	r3, r3, #15
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	7912      	ldrb	r2, [r2, #4]
 800b10e:	4293      	cmp	r3, r2
 800b110:	d901      	bls.n	800b116 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	e042      	b.n	800b19c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	da0f      	bge.n	800b13e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b11e:	78fb      	ldrb	r3, [r7, #3]
 800b120:	f003 020f 	and.w	r2, r3, #15
 800b124:	4613      	mov	r3, r2
 800b126:	00db      	lsls	r3, r3, #3
 800b128:	4413      	add	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	3310      	adds	r3, #16
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	4413      	add	r3, r2
 800b132:	3304      	adds	r3, #4
 800b134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2201      	movs	r2, #1
 800b13a:	705a      	strb	r2, [r3, #1]
 800b13c:	e00f      	b.n	800b15e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b13e:	78fb      	ldrb	r3, [r7, #3]
 800b140:	f003 020f 	and.w	r2, r3, #15
 800b144:	4613      	mov	r3, r2
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	4413      	add	r3, r2
 800b154:	3304      	adds	r3, #4
 800b156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2200      	movs	r2, #0
 800b15c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b164:	78fb      	ldrb	r3, [r7, #3]
 800b166:	f003 030f 	and.w	r3, r3, #15
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b176:	2b01      	cmp	r3, #1
 800b178:	d101      	bne.n	800b17e <HAL_PCD_EP_ClrStall+0x86>
 800b17a:	2302      	movs	r3, #2
 800b17c:	e00e      	b.n	800b19c <HAL_PCD_EP_ClrStall+0xa4>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68f9      	ldr	r1, [r7, #12]
 800b18c:	4618      	mov	r0, r3
 800b18e:	f008 fb09 	bl	80137a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b1b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	da0c      	bge.n	800b1d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b1b8:	78fb      	ldrb	r3, [r7, #3]
 800b1ba:	f003 020f 	and.w	r2, r3, #15
 800b1be:	4613      	mov	r3, r2
 800b1c0:	00db      	lsls	r3, r3, #3
 800b1c2:	4413      	add	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	3310      	adds	r3, #16
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	60fb      	str	r3, [r7, #12]
 800b1d0:	e00c      	b.n	800b1ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b1d2:	78fb      	ldrb	r3, [r7, #3]
 800b1d4:	f003 020f 	and.w	r2, r3, #15
 800b1d8:	4613      	mov	r3, r2
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	4413      	add	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68f9      	ldr	r1, [r7, #12]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f008 f928 	bl	8013448 <USB_EPStopXfer>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b1fc:	7afb      	ldrb	r3, [r7, #11]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b082      	sub	sp, #8
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	460b      	mov	r3, r1
 800b210:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d101      	bne.n	800b220 <HAL_PCD_EP_Flush+0x1a>
 800b21c:	2302      	movs	r3, #2
 800b21e:	e01b      	b.n	800b258 <HAL_PCD_EP_Flush+0x52>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 800b228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	da09      	bge.n	800b244 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	78fb      	ldrb	r3, [r7, #3]
 800b236:	f003 030f 	and.w	r3, r3, #15
 800b23a:	4619      	mov	r1, r3
 800b23c:	4610      	mov	r0, r2
 800b23e:	f007 fc5d 	bl	8012afc <USB_FlushTxFifo>
 800b242:	e004      	b.n	800b24e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4618      	mov	r0, r3
 800b24a:	f007 fc89 	bl	8012b60 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b08a      	sub	sp, #40	@ 0x28
 800b264:	af02      	add	r7, sp, #8
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	4613      	mov	r3, r2
 800b278:	00db      	lsls	r3, r3, #3
 800b27a:	4413      	add	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	3310      	adds	r3, #16
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	4413      	add	r3, r2
 800b284:	3304      	adds	r3, #4
 800b286:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	695a      	ldr	r2, [r3, #20]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	429a      	cmp	r2, r3
 800b292:	d901      	bls.n	800b298 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	e06b      	b.n	800b370 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	691a      	ldr	r2, [r3, #16]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	69fa      	ldr	r2, [r7, #28]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d902      	bls.n	800b2b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	3303      	adds	r3, #3
 800b2b8:	089b      	lsrs	r3, r3, #2
 800b2ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b2bc:	e02a      	b.n	800b314 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	691a      	ldr	r2, [r3, #16]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	695b      	ldr	r3, [r3, #20]
 800b2c6:	1ad3      	subs	r3, r2, r3
 800b2c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d902      	bls.n	800b2da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	3303      	adds	r3, #3
 800b2de:	089b      	lsrs	r3, r3, #2
 800b2e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	68d9      	ldr	r1, [r3, #12]
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	b2da      	uxtb	r2, r3
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	6978      	ldr	r0, [r7, #20]
 800b2f8:	f008 f950 	bl	801359c <USB_WritePacket>

    ep->xfer_buff  += len;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	68da      	ldr	r2, [r3, #12]
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	441a      	add	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	695a      	ldr	r2, [r3, #20]
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	441a      	add	r2, r3
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	015a      	lsls	r2, r3, #5
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	4413      	add	r3, r2
 800b31c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b324:	69ba      	ldr	r2, [r7, #24]
 800b326:	429a      	cmp	r2, r3
 800b328:	d809      	bhi.n	800b33e <PCD_WriteEmptyTxFifo+0xde>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	695a      	ldr	r2, [r3, #20]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b332:	429a      	cmp	r2, r3
 800b334:	d203      	bcs.n	800b33e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1bf      	bne.n	800b2be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	691a      	ldr	r2, [r3, #16]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	695b      	ldr	r3, [r3, #20]
 800b346:	429a      	cmp	r2, r3
 800b348:	d811      	bhi.n	800b36e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	f003 030f 	and.w	r3, r3, #15
 800b350:	2201      	movs	r2, #1
 800b352:	fa02 f303 	lsl.w	r3, r2, r3
 800b356:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b35e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	43db      	mvns	r3, r3
 800b364:	6939      	ldr	r1, [r7, #16]
 800b366:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b36a:	4013      	ands	r3, r2
 800b36c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3720      	adds	r7, #32
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b088      	sub	sp, #32
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	333c      	adds	r3, #60	@ 0x3c
 800b390:	3304      	adds	r3, #4
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	015a      	lsls	r2, r3, #5
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	4413      	add	r3, r2
 800b39e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	799b      	ldrb	r3, [r3, #6]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d17b      	bne.n	800b4a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	f003 0308 	and.w	r3, r3, #8
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d015      	beq.n	800b3e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	4a61      	ldr	r2, [pc, #388]	@ (800b540 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	f240 80b9 	bls.w	800b534 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f000 80b3 	beq.w	800b534 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	015a      	lsls	r2, r3, #5
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3da:	461a      	mov	r2, r3
 800b3dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3e0:	6093      	str	r3, [r2, #8]
 800b3e2:	e0a7      	b.n	800b534 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	f003 0320 	and.w	r3, r3, #32
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d009      	beq.n	800b402 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	015a      	lsls	r2, r3, #5
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	2320      	movs	r3, #32
 800b3fe:	6093      	str	r3, [r2, #8]
 800b400:	e098      	b.n	800b534 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f040 8093 	bne.w	800b534 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	4a4b      	ldr	r2, [pc, #300]	@ (800b540 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d90f      	bls.n	800b436 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00a      	beq.n	800b436 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	015a      	lsls	r2, r3, #5
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	4413      	add	r3, r2
 800b428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b42c:	461a      	mov	r2, r3
 800b42e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b432:	6093      	str	r3, [r2, #8]
 800b434:	e07e      	b.n	800b534 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	4613      	mov	r3, r2
 800b43a:	00db      	lsls	r3, r3, #3
 800b43c:	4413      	add	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	4413      	add	r3, r2
 800b448:	3304      	adds	r3, #4
 800b44a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6a1a      	ldr	r2, [r3, #32]
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	0159      	lsls	r1, r3, #5
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	440b      	add	r3, r1
 800b458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b462:	1ad2      	subs	r2, r2, r3
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d114      	bne.n	800b498 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d109      	bne.n	800b48a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6818      	ldr	r0, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b480:	461a      	mov	r2, r3
 800b482:	2101      	movs	r1, #1
 800b484:	f008 fb22 	bl	8013acc <USB_EP0_OutStart>
 800b488:	e006      	b.n	800b498 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	68da      	ldr	r2, [r3, #12]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	441a      	add	r2, r3
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	4619      	mov	r1, r3
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f00f f9dc 	bl	801a85c <HAL_PCD_DataOutStageCallback>
 800b4a4:	e046      	b.n	800b534 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	4a26      	ldr	r2, [pc, #152]	@ (800b544 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d124      	bne.n	800b4f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00a      	beq.n	800b4ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	015a      	lsls	r2, r3, #5
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	4413      	add	r3, r2
 800b4c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4ca:	6093      	str	r3, [r2, #8]
 800b4cc:	e032      	b.n	800b534 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	f003 0320 	and.w	r3, r3, #32
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d008      	beq.n	800b4ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	2320      	movs	r3, #32
 800b4e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f00f f9b3 	bl	801a85c <HAL_PCD_DataOutStageCallback>
 800b4f6:	e01d      	b.n	800b534 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d114      	bne.n	800b528 <PCD_EP_OutXfrComplete_int+0x1b0>
 800b4fe:	6879      	ldr	r1, [r7, #4]
 800b500:	683a      	ldr	r2, [r7, #0]
 800b502:	4613      	mov	r3, r2
 800b504:	00db      	lsls	r3, r3, #3
 800b506:	4413      	add	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	440b      	add	r3, r1
 800b50c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d108      	bne.n	800b528 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6818      	ldr	r0, [r3, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b520:	461a      	mov	r2, r3
 800b522:	2100      	movs	r1, #0
 800b524:	f008 fad2 	bl	8013acc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	4619      	mov	r1, r3
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f00f f994 	bl	801a85c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3720      	adds	r7, #32
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	4f54300a 	.word	0x4f54300a
 800b544:	4f54310a 	.word	0x4f54310a

0800b548 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b086      	sub	sp, #24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	333c      	adds	r3, #60	@ 0x3c
 800b560:	3304      	adds	r3, #4
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	4a15      	ldr	r2, [pc, #84]	@ (800b5d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d90e      	bls.n	800b59c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b584:	2b00      	cmp	r3, #0
 800b586:	d009      	beq.n	800b59c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	015a      	lsls	r2, r3, #5
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	4413      	add	r3, r2
 800b590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b594:	461a      	mov	r2, r3
 800b596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b59a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f00f f94b 	bl	801a838 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	4a0a      	ldr	r2, [pc, #40]	@ (800b5d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d90c      	bls.n	800b5c4 <PCD_EP_OutSetupPacket_int+0x7c>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	799b      	ldrb	r3, [r3, #6]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d108      	bne.n	800b5c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6818      	ldr	r0, [r3, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b5bc:	461a      	mov	r2, r3
 800b5be:	2101      	movs	r1, #1
 800b5c0:	f008 fa84 	bl	8013acc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3718      	adds	r7, #24
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	4f54300a 	.word	0x4f54300a

0800b5d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	70fb      	strb	r3, [r7, #3]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b5ec:	78fb      	ldrb	r3, [r7, #3]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d107      	bne.n	800b602 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b5f2:	883b      	ldrh	r3, [r7, #0]
 800b5f4:	0419      	lsls	r1, r3, #16
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	430a      	orrs	r2, r1
 800b5fe:	629a      	str	r2, [r3, #40]	@ 0x28
 800b600:	e028      	b.n	800b654 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b608:	0c1b      	lsrs	r3, r3, #16
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	4413      	add	r3, r2
 800b60e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b610:	2300      	movs	r3, #0
 800b612:	73fb      	strb	r3, [r7, #15]
 800b614:	e00d      	b.n	800b632 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
 800b61c:	3340      	adds	r3, #64	@ 0x40
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	0c1b      	lsrs	r3, r3, #16
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	4413      	add	r3, r2
 800b62a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
 800b62e:	3301      	adds	r3, #1
 800b630:	73fb      	strb	r3, [r7, #15]
 800b632:	7bfa      	ldrb	r2, [r7, #15]
 800b634:	78fb      	ldrb	r3, [r7, #3]
 800b636:	3b01      	subs	r3, #1
 800b638:	429a      	cmp	r2, r3
 800b63a:	d3ec      	bcc.n	800b616 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b63c:	883b      	ldrh	r3, [r7, #0]
 800b63e:	0418      	lsls	r0, r3, #16
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6819      	ldr	r1, [r3, #0]
 800b644:	78fb      	ldrb	r3, [r7, #3]
 800b646:	3b01      	subs	r3, #1
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	4302      	orrs	r2, r0
 800b64c:	3340      	adds	r3, #64	@ 0x40
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	440b      	add	r3, r1
 800b652:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3714      	adds	r7, #20
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b662:	b480      	push	{r7}
 800b664:	b083      	sub	sp, #12
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	887a      	ldrh	r2, [r7, #2]
 800b674:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	699b      	ldr	r3, [r3, #24]
 800b6a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6b2:	4b05      	ldr	r3, [pc, #20]	@ (800b6c8 <HAL_PCDEx_ActivateLPM+0x44>)
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	10000003 	.word	0x10000003

0800b6cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b6d8:	bf00      	nop
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b6ec:	4b19      	ldr	r3, [pc, #100]	@ (800b754 <HAL_PWREx_ConfigSupply+0x70>)
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	f003 0304 	and.w	r3, r3, #4
 800b6f4:	2b04      	cmp	r3, #4
 800b6f6:	d00a      	beq.n	800b70e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b6f8:	4b16      	ldr	r3, [pc, #88]	@ (800b754 <HAL_PWREx_ConfigSupply+0x70>)
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	f003 0307 	and.w	r3, r3, #7
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	429a      	cmp	r2, r3
 800b704:	d001      	beq.n	800b70a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	e01f      	b.n	800b74a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b70a:	2300      	movs	r3, #0
 800b70c:	e01d      	b.n	800b74a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b70e:	4b11      	ldr	r3, [pc, #68]	@ (800b754 <HAL_PWREx_ConfigSupply+0x70>)
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	f023 0207 	bic.w	r2, r3, #7
 800b716:	490f      	ldr	r1, [pc, #60]	@ (800b754 <HAL_PWREx_ConfigSupply+0x70>)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b71e:	f7f9 fc25 	bl	8004f6c <HAL_GetTick>
 800b722:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b724:	e009      	b.n	800b73a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b726:	f7f9 fc21 	bl	8004f6c <HAL_GetTick>
 800b72a:	4602      	mov	r2, r0
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b734:	d901      	bls.n	800b73a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	e007      	b.n	800b74a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b73a:	4b06      	ldr	r3, [pc, #24]	@ (800b754 <HAL_PWREx_ConfigSupply+0x70>)
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b746:	d1ee      	bne.n	800b726 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	58024800 	.word	0x58024800

0800b758 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b758:	b480      	push	{r7}
 800b75a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b75c:	4b05      	ldr	r3, [pc, #20]	@ (800b774 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	4a04      	ldr	r2, [pc, #16]	@ (800b774 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b766:	60d3      	str	r3, [r2, #12]
}
 800b768:	bf00      	nop
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	58024800 	.word	0x58024800

0800b778 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b08c      	sub	sp, #48	@ 0x30
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d101      	bne.n	800b78a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e3c8      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f003 0301 	and.w	r3, r3, #1
 800b792:	2b00      	cmp	r3, #0
 800b794:	f000 8087 	beq.w	800b8a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b798:	4b88      	ldr	r3, [pc, #544]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b7a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b7a2:	4b86      	ldr	r3, [pc, #536]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b7a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7aa:	2b10      	cmp	r3, #16
 800b7ac:	d007      	beq.n	800b7be <HAL_RCC_OscConfig+0x46>
 800b7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b0:	2b18      	cmp	r3, #24
 800b7b2:	d110      	bne.n	800b7d6 <HAL_RCC_OscConfig+0x5e>
 800b7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b6:	f003 0303 	and.w	r3, r3, #3
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d10b      	bne.n	800b7d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7be:	4b7f      	ldr	r3, [pc, #508]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d06c      	beq.n	800b8a4 <HAL_RCC_OscConfig+0x12c>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d168      	bne.n	800b8a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e3a2      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7de:	d106      	bne.n	800b7ee <HAL_RCC_OscConfig+0x76>
 800b7e0:	4b76      	ldr	r3, [pc, #472]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a75      	ldr	r2, [pc, #468]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b7e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7ea:	6013      	str	r3, [r2, #0]
 800b7ec:	e02e      	b.n	800b84c <HAL_RCC_OscConfig+0xd4>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10c      	bne.n	800b810 <HAL_RCC_OscConfig+0x98>
 800b7f6:	4b71      	ldr	r3, [pc, #452]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a70      	ldr	r2, [pc, #448]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b7fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b800:	6013      	str	r3, [r2, #0]
 800b802:	4b6e      	ldr	r3, [pc, #440]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a6d      	ldr	r2, [pc, #436]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b808:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b80c:	6013      	str	r3, [r2, #0]
 800b80e:	e01d      	b.n	800b84c <HAL_RCC_OscConfig+0xd4>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b818:	d10c      	bne.n	800b834 <HAL_RCC_OscConfig+0xbc>
 800b81a:	4b68      	ldr	r3, [pc, #416]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a67      	ldr	r2, [pc, #412]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b824:	6013      	str	r3, [r2, #0]
 800b826:	4b65      	ldr	r3, [pc, #404]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a64      	ldr	r2, [pc, #400]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b82c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b830:	6013      	str	r3, [r2, #0]
 800b832:	e00b      	b.n	800b84c <HAL_RCC_OscConfig+0xd4>
 800b834:	4b61      	ldr	r3, [pc, #388]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a60      	ldr	r2, [pc, #384]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b83a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b83e:	6013      	str	r3, [r2, #0]
 800b840:	4b5e      	ldr	r3, [pc, #376]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a5d      	ldr	r2, [pc, #372]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b84a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d013      	beq.n	800b87c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b854:	f7f9 fb8a 	bl	8004f6c <HAL_GetTick>
 800b858:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b85a:	e008      	b.n	800b86e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b85c:	f7f9 fb86 	bl	8004f6c <HAL_GetTick>
 800b860:	4602      	mov	r2, r0
 800b862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b864:	1ad3      	subs	r3, r2, r3
 800b866:	2b64      	cmp	r3, #100	@ 0x64
 800b868:	d901      	bls.n	800b86e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b86a:	2303      	movs	r3, #3
 800b86c:	e356      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b86e:	4b53      	ldr	r3, [pc, #332]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b876:	2b00      	cmp	r3, #0
 800b878:	d0f0      	beq.n	800b85c <HAL_RCC_OscConfig+0xe4>
 800b87a:	e014      	b.n	800b8a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b87c:	f7f9 fb76 	bl	8004f6c <HAL_GetTick>
 800b880:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b882:	e008      	b.n	800b896 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b884:	f7f9 fb72 	bl	8004f6c <HAL_GetTick>
 800b888:	4602      	mov	r2, r0
 800b88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b88c:	1ad3      	subs	r3, r2, r3
 800b88e:	2b64      	cmp	r3, #100	@ 0x64
 800b890:	d901      	bls.n	800b896 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b892:	2303      	movs	r3, #3
 800b894:	e342      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b896:	4b49      	ldr	r3, [pc, #292]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1f0      	bne.n	800b884 <HAL_RCC_OscConfig+0x10c>
 800b8a2:	e000      	b.n	800b8a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f003 0302 	and.w	r3, r3, #2
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f000 808c 	beq.w	800b9cc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b8b4:	4b41      	ldr	r3, [pc, #260]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b8bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b8be:	4b3f      	ldr	r3, [pc, #252]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b8c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d007      	beq.n	800b8da <HAL_RCC_OscConfig+0x162>
 800b8ca:	6a3b      	ldr	r3, [r7, #32]
 800b8cc:	2b18      	cmp	r3, #24
 800b8ce:	d137      	bne.n	800b940 <HAL_RCC_OscConfig+0x1c8>
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	f003 0303 	and.w	r3, r3, #3
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d132      	bne.n	800b940 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b8da:	4b38      	ldr	r3, [pc, #224]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f003 0304 	and.w	r3, r3, #4
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d005      	beq.n	800b8f2 <HAL_RCC_OscConfig+0x17a>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d101      	bne.n	800b8f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e314      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b8f2:	4b32      	ldr	r3, [pc, #200]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f023 0219 	bic.w	r2, r3, #25
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	492f      	ldr	r1, [pc, #188]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b900:	4313      	orrs	r3, r2
 800b902:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b904:	f7f9 fb32 	bl	8004f6c <HAL_GetTick>
 800b908:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b90a:	e008      	b.n	800b91e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b90c:	f7f9 fb2e 	bl	8004f6c <HAL_GetTick>
 800b910:	4602      	mov	r2, r0
 800b912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	2b02      	cmp	r3, #2
 800b918:	d901      	bls.n	800b91e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b91a:	2303      	movs	r3, #3
 800b91c:	e2fe      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b91e:	4b27      	ldr	r3, [pc, #156]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f003 0304 	and.w	r3, r3, #4
 800b926:	2b00      	cmp	r3, #0
 800b928:	d0f0      	beq.n	800b90c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b92a:	4b24      	ldr	r3, [pc, #144]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	061b      	lsls	r3, r3, #24
 800b938:	4920      	ldr	r1, [pc, #128]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b93a:	4313      	orrs	r3, r2
 800b93c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b93e:	e045      	b.n	800b9cc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d026      	beq.n	800b996 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b948:	4b1c      	ldr	r3, [pc, #112]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f023 0219 	bic.w	r2, r3, #25
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	4919      	ldr	r1, [pc, #100]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b956:	4313      	orrs	r3, r2
 800b958:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b95a:	f7f9 fb07 	bl	8004f6c <HAL_GetTick>
 800b95e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b960:	e008      	b.n	800b974 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b962:	f7f9 fb03 	bl	8004f6c <HAL_GetTick>
 800b966:	4602      	mov	r2, r0
 800b968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d901      	bls.n	800b974 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b970:	2303      	movs	r3, #3
 800b972:	e2d3      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b974:	4b11      	ldr	r3, [pc, #68]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d0f0      	beq.n	800b962 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b980:	4b0e      	ldr	r3, [pc, #56]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	061b      	lsls	r3, r3, #24
 800b98e:	490b      	ldr	r1, [pc, #44]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b990:	4313      	orrs	r3, r2
 800b992:	604b      	str	r3, [r1, #4]
 800b994:	e01a      	b.n	800b9cc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b996:	4b09      	ldr	r3, [pc, #36]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a08      	ldr	r2, [pc, #32]	@ (800b9bc <HAL_RCC_OscConfig+0x244>)
 800b99c:	f023 0301 	bic.w	r3, r3, #1
 800b9a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9a2:	f7f9 fae3 	bl	8004f6c <HAL_GetTick>
 800b9a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b9a8:	e00a      	b.n	800b9c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9aa:	f7f9 fadf 	bl	8004f6c <HAL_GetTick>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d903      	bls.n	800b9c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	e2af      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
 800b9bc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b9c0:	4b96      	ldr	r3, [pc, #600]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 0304 	and.w	r3, r3, #4
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1ee      	bne.n	800b9aa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 0310 	and.w	r3, r3, #16
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d06a      	beq.n	800baae <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b9d8:	4b90      	ldr	r3, [pc, #576]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b9e0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b9e2:	4b8e      	ldr	r3, [pc, #568]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800b9e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9e6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	2b08      	cmp	r3, #8
 800b9ec:	d007      	beq.n	800b9fe <HAL_RCC_OscConfig+0x286>
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	2b18      	cmp	r3, #24
 800b9f2:	d11b      	bne.n	800ba2c <HAL_RCC_OscConfig+0x2b4>
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	f003 0303 	and.w	r3, r3, #3
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d116      	bne.n	800ba2c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b9fe:	4b87      	ldr	r3, [pc, #540]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d005      	beq.n	800ba16 <HAL_RCC_OscConfig+0x29e>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	69db      	ldr	r3, [r3, #28]
 800ba0e:	2b80      	cmp	r3, #128	@ 0x80
 800ba10:	d001      	beq.n	800ba16 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e282      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ba16:	4b81      	ldr	r3, [pc, #516]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a1b      	ldr	r3, [r3, #32]
 800ba22:	061b      	lsls	r3, r3, #24
 800ba24:	497d      	ldr	r1, [pc, #500]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800ba26:	4313      	orrs	r3, r2
 800ba28:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ba2a:	e040      	b.n	800baae <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	69db      	ldr	r3, [r3, #28]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d023      	beq.n	800ba7c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ba34:	4b79      	ldr	r3, [pc, #484]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a78      	ldr	r2, [pc, #480]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800ba3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba40:	f7f9 fa94 	bl	8004f6c <HAL_GetTick>
 800ba44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ba46:	e008      	b.n	800ba5a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ba48:	f7f9 fa90 	bl	8004f6c <HAL_GetTick>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba50:	1ad3      	subs	r3, r2, r3
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d901      	bls.n	800ba5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ba56:	2303      	movs	r3, #3
 800ba58:	e260      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ba5a:	4b70      	ldr	r3, [pc, #448]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d0f0      	beq.n	800ba48 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ba66:	4b6d      	ldr	r3, [pc, #436]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a1b      	ldr	r3, [r3, #32]
 800ba72:	061b      	lsls	r3, r3, #24
 800ba74:	4969      	ldr	r1, [pc, #420]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800ba76:	4313      	orrs	r3, r2
 800ba78:	60cb      	str	r3, [r1, #12]
 800ba7a:	e018      	b.n	800baae <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ba7c:	4b67      	ldr	r3, [pc, #412]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a66      	ldr	r2, [pc, #408]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800ba82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba88:	f7f9 fa70 	bl	8004f6c <HAL_GetTick>
 800ba8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ba8e:	e008      	b.n	800baa2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ba90:	f7f9 fa6c 	bl	8004f6c <HAL_GetTick>
 800ba94:	4602      	mov	r2, r0
 800ba96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d901      	bls.n	800baa2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	e23c      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800baa2:	4b5e      	ldr	r3, [pc, #376]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d1f0      	bne.n	800ba90 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 0308 	and.w	r3, r3, #8
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d036      	beq.n	800bb28 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	695b      	ldr	r3, [r3, #20]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d019      	beq.n	800baf6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bac2:	4b56      	ldr	r3, [pc, #344]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bac6:	4a55      	ldr	r2, [pc, #340]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bac8:	f043 0301 	orr.w	r3, r3, #1
 800bacc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bace:	f7f9 fa4d 	bl	8004f6c <HAL_GetTick>
 800bad2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bad4:	e008      	b.n	800bae8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bad6:	f7f9 fa49 	bl	8004f6c <HAL_GetTick>
 800bada:	4602      	mov	r2, r0
 800badc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	d901      	bls.n	800bae8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800bae4:	2303      	movs	r3, #3
 800bae6:	e219      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bae8:	4b4c      	ldr	r3, [pc, #304]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800baea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baec:	f003 0302 	and.w	r3, r3, #2
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d0f0      	beq.n	800bad6 <HAL_RCC_OscConfig+0x35e>
 800baf4:	e018      	b.n	800bb28 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800baf6:	4b49      	ldr	r3, [pc, #292]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800baf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bafa:	4a48      	ldr	r2, [pc, #288]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bafc:	f023 0301 	bic.w	r3, r3, #1
 800bb00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb02:	f7f9 fa33 	bl	8004f6c <HAL_GetTick>
 800bb06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bb08:	e008      	b.n	800bb1c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bb0a:	f7f9 fa2f 	bl	8004f6c <HAL_GetTick>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb12:	1ad3      	subs	r3, r2, r3
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d901      	bls.n	800bb1c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	e1ff      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bb1c:	4b3f      	ldr	r3, [pc, #252]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bb1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb20:	f003 0302 	and.w	r3, r3, #2
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1f0      	bne.n	800bb0a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f003 0320 	and.w	r3, r3, #32
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d036      	beq.n	800bba2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	699b      	ldr	r3, [r3, #24]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d019      	beq.n	800bb70 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bb3c:	4b37      	ldr	r3, [pc, #220]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a36      	ldr	r2, [pc, #216]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bb42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bb46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bb48:	f7f9 fa10 	bl	8004f6c <HAL_GetTick>
 800bb4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bb4e:	e008      	b.n	800bb62 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb50:	f7f9 fa0c 	bl	8004f6c <HAL_GetTick>
 800bb54:	4602      	mov	r2, r0
 800bb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb58:	1ad3      	subs	r3, r2, r3
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d901      	bls.n	800bb62 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	e1dc      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bb62:	4b2e      	ldr	r3, [pc, #184]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d0f0      	beq.n	800bb50 <HAL_RCC_OscConfig+0x3d8>
 800bb6e:	e018      	b.n	800bba2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bb70:	4b2a      	ldr	r3, [pc, #168]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a29      	ldr	r2, [pc, #164]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bb76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bb7c:	f7f9 f9f6 	bl	8004f6c <HAL_GetTick>
 800bb80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bb82:	e008      	b.n	800bb96 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb84:	f7f9 f9f2 	bl	8004f6c <HAL_GetTick>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	d901      	bls.n	800bb96 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800bb92:	2303      	movs	r3, #3
 800bb94:	e1c2      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bb96:	4b21      	ldr	r3, [pc, #132]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d1f0      	bne.n	800bb84 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f003 0304 	and.w	r3, r3, #4
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 8086 	beq.w	800bcbc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bbb0:	4b1b      	ldr	r3, [pc, #108]	@ (800bc20 <HAL_RCC_OscConfig+0x4a8>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a1a      	ldr	r2, [pc, #104]	@ (800bc20 <HAL_RCC_OscConfig+0x4a8>)
 800bbb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bbba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bbbc:	f7f9 f9d6 	bl	8004f6c <HAL_GetTick>
 800bbc0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbc2:	e008      	b.n	800bbd6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bbc4:	f7f9 f9d2 	bl	8004f6c <HAL_GetTick>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbcc:	1ad3      	subs	r3, r2, r3
 800bbce:	2b64      	cmp	r3, #100	@ 0x64
 800bbd0:	d901      	bls.n	800bbd6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800bbd2:	2303      	movs	r3, #3
 800bbd4:	e1a2      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbd6:	4b12      	ldr	r3, [pc, #72]	@ (800bc20 <HAL_RCC_OscConfig+0x4a8>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d0f0      	beq.n	800bbc4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d106      	bne.n	800bbf8 <HAL_RCC_OscConfig+0x480>
 800bbea:	4b0c      	ldr	r3, [pc, #48]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bbec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbee:	4a0b      	ldr	r2, [pc, #44]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bbf0:	f043 0301 	orr.w	r3, r3, #1
 800bbf4:	6713      	str	r3, [r2, #112]	@ 0x70
 800bbf6:	e032      	b.n	800bc5e <HAL_RCC_OscConfig+0x4e6>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d111      	bne.n	800bc24 <HAL_RCC_OscConfig+0x4ac>
 800bc00:	4b06      	ldr	r3, [pc, #24]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bc02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc04:	4a05      	ldr	r2, [pc, #20]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bc06:	f023 0301 	bic.w	r3, r3, #1
 800bc0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800bc0c:	4b03      	ldr	r3, [pc, #12]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bc0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc10:	4a02      	ldr	r2, [pc, #8]	@ (800bc1c <HAL_RCC_OscConfig+0x4a4>)
 800bc12:	f023 0304 	bic.w	r3, r3, #4
 800bc16:	6713      	str	r3, [r2, #112]	@ 0x70
 800bc18:	e021      	b.n	800bc5e <HAL_RCC_OscConfig+0x4e6>
 800bc1a:	bf00      	nop
 800bc1c:	58024400 	.word	0x58024400
 800bc20:	58024800 	.word	0x58024800
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	2b05      	cmp	r3, #5
 800bc2a:	d10c      	bne.n	800bc46 <HAL_RCC_OscConfig+0x4ce>
 800bc2c:	4b83      	ldr	r3, [pc, #524]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bc2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc30:	4a82      	ldr	r2, [pc, #520]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bc32:	f043 0304 	orr.w	r3, r3, #4
 800bc36:	6713      	str	r3, [r2, #112]	@ 0x70
 800bc38:	4b80      	ldr	r3, [pc, #512]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bc3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc3c:	4a7f      	ldr	r2, [pc, #508]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bc3e:	f043 0301 	orr.w	r3, r3, #1
 800bc42:	6713      	str	r3, [r2, #112]	@ 0x70
 800bc44:	e00b      	b.n	800bc5e <HAL_RCC_OscConfig+0x4e6>
 800bc46:	4b7d      	ldr	r3, [pc, #500]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bc48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc4a:	4a7c      	ldr	r2, [pc, #496]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bc4c:	f023 0301 	bic.w	r3, r3, #1
 800bc50:	6713      	str	r3, [r2, #112]	@ 0x70
 800bc52:	4b7a      	ldr	r3, [pc, #488]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bc54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc56:	4a79      	ldr	r2, [pc, #484]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bc58:	f023 0304 	bic.w	r3, r3, #4
 800bc5c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d015      	beq.n	800bc92 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc66:	f7f9 f981 	bl	8004f6c <HAL_GetTick>
 800bc6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc6c:	e00a      	b.n	800bc84 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc6e:	f7f9 f97d 	bl	8004f6c <HAL_GetTick>
 800bc72:	4602      	mov	r2, r0
 800bc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d901      	bls.n	800bc84 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800bc80:	2303      	movs	r3, #3
 800bc82:	e14b      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc84:	4b6d      	ldr	r3, [pc, #436]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bc86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc88:	f003 0302 	and.w	r3, r3, #2
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d0ee      	beq.n	800bc6e <HAL_RCC_OscConfig+0x4f6>
 800bc90:	e014      	b.n	800bcbc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc92:	f7f9 f96b 	bl	8004f6c <HAL_GetTick>
 800bc96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc98:	e00a      	b.n	800bcb0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc9a:	f7f9 f967 	bl	8004f6c <HAL_GetTick>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca2:	1ad3      	subs	r3, r2, r3
 800bca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d901      	bls.n	800bcb0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800bcac:	2303      	movs	r3, #3
 800bcae:	e135      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bcb0:	4b62      	ldr	r3, [pc, #392]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bcb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bcb4:	f003 0302 	and.w	r3, r3, #2
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d1ee      	bne.n	800bc9a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f000 812a 	beq.w	800bf1a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bcc6:	4b5d      	ldr	r3, [pc, #372]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bcce:	2b18      	cmp	r3, #24
 800bcd0:	f000 80ba 	beq.w	800be48 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	f040 8095 	bne.w	800be08 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcde:	4b57      	ldr	r3, [pc, #348]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a56      	ldr	r2, [pc, #344]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bce4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcea:	f7f9 f93f 	bl	8004f6c <HAL_GetTick>
 800bcee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bcf0:	e008      	b.n	800bd04 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcf2:	f7f9 f93b 	bl	8004f6c <HAL_GetTick>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfa:	1ad3      	subs	r3, r2, r3
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d901      	bls.n	800bd04 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800bd00:	2303      	movs	r3, #3
 800bd02:	e10b      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bd04:	4b4d      	ldr	r3, [pc, #308]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1f0      	bne.n	800bcf2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bd10:	4b4a      	ldr	r3, [pc, #296]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bd12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd14:	4b4a      	ldr	r3, [pc, #296]	@ (800be40 <HAL_RCC_OscConfig+0x6c8>)
 800bd16:	4013      	ands	r3, r2
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bd20:	0112      	lsls	r2, r2, #4
 800bd22:	430a      	orrs	r2, r1
 800bd24:	4945      	ldr	r1, [pc, #276]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bd26:	4313      	orrs	r3, r2
 800bd28:	628b      	str	r3, [r1, #40]	@ 0x28
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	025b      	lsls	r3, r3, #9
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd44:	3b01      	subs	r3, #1
 800bd46:	041b      	lsls	r3, r3, #16
 800bd48:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bd4c:	431a      	orrs	r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd52:	3b01      	subs	r3, #1
 800bd54:	061b      	lsls	r3, r3, #24
 800bd56:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bd5a:	4938      	ldr	r1, [pc, #224]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bd60:	4b36      	ldr	r3, [pc, #216]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bd62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd64:	4a35      	ldr	r2, [pc, #212]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bd66:	f023 0301 	bic.w	r3, r3, #1
 800bd6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bd6c:	4b33      	ldr	r3, [pc, #204]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bd6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd70:	4b34      	ldr	r3, [pc, #208]	@ (800be44 <HAL_RCC_OscConfig+0x6cc>)
 800bd72:	4013      	ands	r3, r2
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bd78:	00d2      	lsls	r2, r2, #3
 800bd7a:	4930      	ldr	r1, [pc, #192]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bd80:	4b2e      	ldr	r3, [pc, #184]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bd82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd84:	f023 020c 	bic.w	r2, r3, #12
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd8c:	492b      	ldr	r1, [pc, #172]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bd92:	4b2a      	ldr	r3, [pc, #168]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bd94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd96:	f023 0202 	bic.w	r2, r3, #2
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd9e:	4927      	ldr	r1, [pc, #156]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bda0:	4313      	orrs	r3, r2
 800bda2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bda4:	4b25      	ldr	r3, [pc, #148]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda8:	4a24      	ldr	r2, [pc, #144]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bdaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bdae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdb0:	4b22      	ldr	r3, [pc, #136]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bdb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb4:	4a21      	ldr	r2, [pc, #132]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bdb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bdbc:	4b1f      	ldr	r3, [pc, #124]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bdbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc0:	4a1e      	ldr	r2, [pc, #120]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bdc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bdc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bdc8:	4b1c      	ldr	r3, [pc, #112]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bdca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdcc:	4a1b      	ldr	r2, [pc, #108]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bdce:	f043 0301 	orr.w	r3, r3, #1
 800bdd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bdd4:	4b19      	ldr	r3, [pc, #100]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a18      	ldr	r2, [pc, #96]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bdda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bdde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bde0:	f7f9 f8c4 	bl	8004f6c <HAL_GetTick>
 800bde4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bde6:	e008      	b.n	800bdfa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bde8:	f7f9 f8c0 	bl	8004f6c <HAL_GetTick>
 800bdec:	4602      	mov	r2, r0
 800bdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d901      	bls.n	800bdfa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	e090      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bdfa:	4b10      	ldr	r3, [pc, #64]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be02:	2b00      	cmp	r3, #0
 800be04:	d0f0      	beq.n	800bde8 <HAL_RCC_OscConfig+0x670>
 800be06:	e088      	b.n	800bf1a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be08:	4b0c      	ldr	r3, [pc, #48]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a0b      	ldr	r2, [pc, #44]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800be0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800be12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be14:	f7f9 f8aa 	bl	8004f6c <HAL_GetTick>
 800be18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800be1a:	e008      	b.n	800be2e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be1c:	f7f9 f8a6 	bl	8004f6c <HAL_GetTick>
 800be20:	4602      	mov	r2, r0
 800be22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	2b02      	cmp	r3, #2
 800be28:	d901      	bls.n	800be2e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800be2a:	2303      	movs	r3, #3
 800be2c:	e076      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800be2e:	4b03      	ldr	r3, [pc, #12]	@ (800be3c <HAL_RCC_OscConfig+0x6c4>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1f0      	bne.n	800be1c <HAL_RCC_OscConfig+0x6a4>
 800be3a:	e06e      	b.n	800bf1a <HAL_RCC_OscConfig+0x7a2>
 800be3c:	58024400 	.word	0x58024400
 800be40:	fffffc0c 	.word	0xfffffc0c
 800be44:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800be48:	4b36      	ldr	r3, [pc, #216]	@ (800bf24 <HAL_RCC_OscConfig+0x7ac>)
 800be4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800be4e:	4b35      	ldr	r3, [pc, #212]	@ (800bf24 <HAL_RCC_OscConfig+0x7ac>)
 800be50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be52:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d031      	beq.n	800bec0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	f003 0203 	and.w	r2, r3, #3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be66:	429a      	cmp	r2, r3
 800be68:	d12a      	bne.n	800bec0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	091b      	lsrs	r3, r3, #4
 800be6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be76:	429a      	cmp	r2, r3
 800be78:	d122      	bne.n	800bec0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be84:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800be86:	429a      	cmp	r2, r3
 800be88:	d11a      	bne.n	800bec0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	0a5b      	lsrs	r3, r3, #9
 800be8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be96:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800be98:	429a      	cmp	r2, r3
 800be9a:	d111      	bne.n	800bec0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	0c1b      	lsrs	r3, r3, #16
 800bea0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bea8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800beaa:	429a      	cmp	r2, r3
 800beac:	d108      	bne.n	800bec0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	0e1b      	lsrs	r3, r3, #24
 800beb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d001      	beq.n	800bec4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e02b      	b.n	800bf1c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bec4:	4b17      	ldr	r3, [pc, #92]	@ (800bf24 <HAL_RCC_OscConfig+0x7ac>)
 800bec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bec8:	08db      	lsrs	r3, r3, #3
 800beca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bece:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bed4:	693a      	ldr	r2, [r7, #16]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d01f      	beq.n	800bf1a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800beda:	4b12      	ldr	r3, [pc, #72]	@ (800bf24 <HAL_RCC_OscConfig+0x7ac>)
 800bedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bede:	4a11      	ldr	r2, [pc, #68]	@ (800bf24 <HAL_RCC_OscConfig+0x7ac>)
 800bee0:	f023 0301 	bic.w	r3, r3, #1
 800bee4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bee6:	f7f9 f841 	bl	8004f6c <HAL_GetTick>
 800beea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800beec:	bf00      	nop
 800beee:	f7f9 f83d 	bl	8004f6c <HAL_GetTick>
 800bef2:	4602      	mov	r2, r0
 800bef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d0f9      	beq.n	800beee <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800befa:	4b0a      	ldr	r3, [pc, #40]	@ (800bf24 <HAL_RCC_OscConfig+0x7ac>)
 800befc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800befe:	4b0a      	ldr	r3, [pc, #40]	@ (800bf28 <HAL_RCC_OscConfig+0x7b0>)
 800bf00:	4013      	ands	r3, r2
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bf06:	00d2      	lsls	r2, r2, #3
 800bf08:	4906      	ldr	r1, [pc, #24]	@ (800bf24 <HAL_RCC_OscConfig+0x7ac>)
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800bf0e:	4b05      	ldr	r3, [pc, #20]	@ (800bf24 <HAL_RCC_OscConfig+0x7ac>)
 800bf10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf12:	4a04      	ldr	r2, [pc, #16]	@ (800bf24 <HAL_RCC_OscConfig+0x7ac>)
 800bf14:	f043 0301 	orr.w	r3, r3, #1
 800bf18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3730      	adds	r7, #48	@ 0x30
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	58024400 	.word	0x58024400
 800bf28:	ffff0007 	.word	0xffff0007

0800bf2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d101      	bne.n	800bf40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e19c      	b.n	800c27a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bf40:	4b8a      	ldr	r3, [pc, #552]	@ (800c16c <HAL_RCC_ClockConfig+0x240>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f003 030f 	and.w	r3, r3, #15
 800bf48:	683a      	ldr	r2, [r7, #0]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d910      	bls.n	800bf70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf4e:	4b87      	ldr	r3, [pc, #540]	@ (800c16c <HAL_RCC_ClockConfig+0x240>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f023 020f 	bic.w	r2, r3, #15
 800bf56:	4985      	ldr	r1, [pc, #532]	@ (800c16c <HAL_RCC_ClockConfig+0x240>)
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf5e:	4b83      	ldr	r3, [pc, #524]	@ (800c16c <HAL_RCC_ClockConfig+0x240>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f003 030f 	and.w	r3, r3, #15
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d001      	beq.n	800bf70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e184      	b.n	800c27a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 0304 	and.w	r3, r3, #4
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d010      	beq.n	800bf9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	691a      	ldr	r2, [r3, #16]
 800bf80:	4b7b      	ldr	r3, [pc, #492]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800bf82:	699b      	ldr	r3, [r3, #24]
 800bf84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d908      	bls.n	800bf9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bf8c:	4b78      	ldr	r3, [pc, #480]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	4975      	ldr	r1, [pc, #468]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f003 0308 	and.w	r3, r3, #8
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d010      	beq.n	800bfcc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	695a      	ldr	r2, [r3, #20]
 800bfae:	4b70      	ldr	r3, [pc, #448]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800bfb0:	69db      	ldr	r3, [r3, #28]
 800bfb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d908      	bls.n	800bfcc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bfba:	4b6d      	ldr	r3, [pc, #436]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800bfbc:	69db      	ldr	r3, [r3, #28]
 800bfbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	695b      	ldr	r3, [r3, #20]
 800bfc6:	496a      	ldr	r1, [pc, #424]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f003 0310 	and.w	r3, r3, #16
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d010      	beq.n	800bffa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	699a      	ldr	r2, [r3, #24]
 800bfdc:	4b64      	ldr	r3, [pc, #400]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800bfde:	69db      	ldr	r3, [r3, #28]
 800bfe0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d908      	bls.n	800bffa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bfe8:	4b61      	ldr	r3, [pc, #388]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800bfea:	69db      	ldr	r3, [r3, #28]
 800bfec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	699b      	ldr	r3, [r3, #24]
 800bff4:	495e      	ldr	r1, [pc, #376]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800bff6:	4313      	orrs	r3, r2
 800bff8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f003 0320 	and.w	r3, r3, #32
 800c002:	2b00      	cmp	r3, #0
 800c004:	d010      	beq.n	800c028 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	69da      	ldr	r2, [r3, #28]
 800c00a:	4b59      	ldr	r3, [pc, #356]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c012:	429a      	cmp	r2, r3
 800c014:	d908      	bls.n	800c028 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c016:	4b56      	ldr	r3, [pc, #344]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c018:	6a1b      	ldr	r3, [r3, #32]
 800c01a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	69db      	ldr	r3, [r3, #28]
 800c022:	4953      	ldr	r1, [pc, #332]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c024:	4313      	orrs	r3, r2
 800c026:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f003 0302 	and.w	r3, r3, #2
 800c030:	2b00      	cmp	r3, #0
 800c032:	d010      	beq.n	800c056 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68da      	ldr	r2, [r3, #12]
 800c038:	4b4d      	ldr	r3, [pc, #308]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c03a:	699b      	ldr	r3, [r3, #24]
 800c03c:	f003 030f 	and.w	r3, r3, #15
 800c040:	429a      	cmp	r2, r3
 800c042:	d908      	bls.n	800c056 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c044:	4b4a      	ldr	r3, [pc, #296]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c046:	699b      	ldr	r3, [r3, #24]
 800c048:	f023 020f 	bic.w	r2, r3, #15
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	4947      	ldr	r1, [pc, #284]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c052:	4313      	orrs	r3, r2
 800c054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d055      	beq.n	800c10e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c062:	4b43      	ldr	r3, [pc, #268]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	4940      	ldr	r1, [pc, #256]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c070:	4313      	orrs	r3, r2
 800c072:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d107      	bne.n	800c08c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c07c:	4b3c      	ldr	r3, [pc, #240]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c084:	2b00      	cmp	r3, #0
 800c086:	d121      	bne.n	800c0cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	e0f6      	b.n	800c27a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	2b03      	cmp	r3, #3
 800c092:	d107      	bne.n	800c0a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c094:	4b36      	ldr	r3, [pc, #216]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d115      	bne.n	800c0cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e0ea      	b.n	800c27a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d107      	bne.n	800c0bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c0ac:	4b30      	ldr	r3, [pc, #192]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d109      	bne.n	800c0cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e0de      	b.n	800c27a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c0bc:	4b2c      	ldr	r3, [pc, #176]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 0304 	and.w	r3, r3, #4
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e0d6      	b.n	800c27a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c0cc:	4b28      	ldr	r3, [pc, #160]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	f023 0207 	bic.w	r2, r3, #7
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	4925      	ldr	r1, [pc, #148]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0de:	f7f8 ff45 	bl	8004f6c <HAL_GetTick>
 800c0e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0e4:	e00a      	b.n	800c0fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c0e6:	f7f8 ff41 	bl	8004f6c <HAL_GetTick>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d901      	bls.n	800c0fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	e0be      	b.n	800c27a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0fc:	4b1c      	ldr	r3, [pc, #112]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c0fe:	691b      	ldr	r3, [r3, #16]
 800c100:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	00db      	lsls	r3, r3, #3
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d1eb      	bne.n	800c0e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f003 0302 	and.w	r3, r3, #2
 800c116:	2b00      	cmp	r3, #0
 800c118:	d010      	beq.n	800c13c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68da      	ldr	r2, [r3, #12]
 800c11e:	4b14      	ldr	r3, [pc, #80]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c120:	699b      	ldr	r3, [r3, #24]
 800c122:	f003 030f 	and.w	r3, r3, #15
 800c126:	429a      	cmp	r2, r3
 800c128:	d208      	bcs.n	800c13c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c12a:	4b11      	ldr	r3, [pc, #68]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c12c:	699b      	ldr	r3, [r3, #24]
 800c12e:	f023 020f 	bic.w	r2, r3, #15
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	490e      	ldr	r1, [pc, #56]	@ (800c170 <HAL_RCC_ClockConfig+0x244>)
 800c138:	4313      	orrs	r3, r2
 800c13a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c13c:	4b0b      	ldr	r3, [pc, #44]	@ (800c16c <HAL_RCC_ClockConfig+0x240>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f003 030f 	and.w	r3, r3, #15
 800c144:	683a      	ldr	r2, [r7, #0]
 800c146:	429a      	cmp	r2, r3
 800c148:	d214      	bcs.n	800c174 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c14a:	4b08      	ldr	r3, [pc, #32]	@ (800c16c <HAL_RCC_ClockConfig+0x240>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f023 020f 	bic.w	r2, r3, #15
 800c152:	4906      	ldr	r1, [pc, #24]	@ (800c16c <HAL_RCC_ClockConfig+0x240>)
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	4313      	orrs	r3, r2
 800c158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c15a:	4b04      	ldr	r3, [pc, #16]	@ (800c16c <HAL_RCC_ClockConfig+0x240>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f003 030f 	and.w	r3, r3, #15
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	429a      	cmp	r2, r3
 800c166:	d005      	beq.n	800c174 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	e086      	b.n	800c27a <HAL_RCC_ClockConfig+0x34e>
 800c16c:	52002000 	.word	0x52002000
 800c170:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 0304 	and.w	r3, r3, #4
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d010      	beq.n	800c1a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	691a      	ldr	r2, [r3, #16]
 800c184:	4b3f      	ldr	r3, [pc, #252]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c186:	699b      	ldr	r3, [r3, #24]
 800c188:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d208      	bcs.n	800c1a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c190:	4b3c      	ldr	r3, [pc, #240]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c192:	699b      	ldr	r3, [r3, #24]
 800c194:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	691b      	ldr	r3, [r3, #16]
 800c19c:	4939      	ldr	r1, [pc, #228]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f003 0308 	and.w	r3, r3, #8
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d010      	beq.n	800c1d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	695a      	ldr	r2, [r3, #20]
 800c1b2:	4b34      	ldr	r3, [pc, #208]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d208      	bcs.n	800c1d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c1be:	4b31      	ldr	r3, [pc, #196]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c1c0:	69db      	ldr	r3, [r3, #28]
 800c1c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	695b      	ldr	r3, [r3, #20]
 800c1ca:	492e      	ldr	r1, [pc, #184]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 0310 	and.w	r3, r3, #16
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d010      	beq.n	800c1fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	699a      	ldr	r2, [r3, #24]
 800c1e0:	4b28      	ldr	r3, [pc, #160]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c1e2:	69db      	ldr	r3, [r3, #28]
 800c1e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d208      	bcs.n	800c1fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c1ec:	4b25      	ldr	r3, [pc, #148]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c1ee:	69db      	ldr	r3, [r3, #28]
 800c1f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	699b      	ldr	r3, [r3, #24]
 800c1f8:	4922      	ldr	r1, [pc, #136]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f003 0320 	and.w	r3, r3, #32
 800c206:	2b00      	cmp	r3, #0
 800c208:	d010      	beq.n	800c22c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	69da      	ldr	r2, [r3, #28]
 800c20e:	4b1d      	ldr	r3, [pc, #116]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c210:	6a1b      	ldr	r3, [r3, #32]
 800c212:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c216:	429a      	cmp	r2, r3
 800c218:	d208      	bcs.n	800c22c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c21a:	4b1a      	ldr	r3, [pc, #104]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c21c:	6a1b      	ldr	r3, [r3, #32]
 800c21e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	69db      	ldr	r3, [r3, #28]
 800c226:	4917      	ldr	r1, [pc, #92]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c228:	4313      	orrs	r3, r2
 800c22a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c22c:	f000 f89e 	bl	800c36c <HAL_RCC_GetSysClockFreq>
 800c230:	4602      	mov	r2, r0
 800c232:	4b14      	ldr	r3, [pc, #80]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c234:	699b      	ldr	r3, [r3, #24]
 800c236:	0a1b      	lsrs	r3, r3, #8
 800c238:	f003 030f 	and.w	r3, r3, #15
 800c23c:	4912      	ldr	r1, [pc, #72]	@ (800c288 <HAL_RCC_ClockConfig+0x35c>)
 800c23e:	5ccb      	ldrb	r3, [r1, r3]
 800c240:	f003 031f 	and.w	r3, r3, #31
 800c244:	fa22 f303 	lsr.w	r3, r2, r3
 800c248:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c24a:	4b0e      	ldr	r3, [pc, #56]	@ (800c284 <HAL_RCC_ClockConfig+0x358>)
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	f003 030f 	and.w	r3, r3, #15
 800c252:	4a0d      	ldr	r2, [pc, #52]	@ (800c288 <HAL_RCC_ClockConfig+0x35c>)
 800c254:	5cd3      	ldrb	r3, [r2, r3]
 800c256:	f003 031f 	and.w	r3, r3, #31
 800c25a:	693a      	ldr	r2, [r7, #16]
 800c25c:	fa22 f303 	lsr.w	r3, r2, r3
 800c260:	4a0a      	ldr	r2, [pc, #40]	@ (800c28c <HAL_RCC_ClockConfig+0x360>)
 800c262:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c264:	4a0a      	ldr	r2, [pc, #40]	@ (800c290 <HAL_RCC_ClockConfig+0x364>)
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c26a:	4b0a      	ldr	r3, [pc, #40]	@ (800c294 <HAL_RCC_ClockConfig+0x368>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4618      	mov	r0, r3
 800c270:	f7f8 fe32 	bl	8004ed8 <HAL_InitTick>
 800c274:	4603      	mov	r3, r0
 800c276:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c278:	7bfb      	ldrb	r3, [r7, #15]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3718      	adds	r7, #24
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	58024400 	.word	0x58024400
 800c288:	0801d504 	.word	0x0801d504
 800c28c:	2400001c 	.word	0x2400001c
 800c290:	24000018 	.word	0x24000018
 800c294:	24000034 	.word	0x24000034

0800c298 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b08c      	sub	sp, #48	@ 0x30
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d12a      	bne.n	800c300 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800c2aa:	4b2d      	ldr	r3, [pc, #180]	@ (800c360 <HAL_RCC_MCOConfig+0xc8>)
 800c2ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2b0:	4a2b      	ldr	r2, [pc, #172]	@ (800c360 <HAL_RCC_MCOConfig+0xc8>)
 800c2b2:	f043 0301 	orr.w	r3, r3, #1
 800c2b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c2ba:	4b29      	ldr	r3, [pc, #164]	@ (800c360 <HAL_RCC_MCOConfig+0xc8>)
 800c2bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2c0:	f003 0301 	and.w	r3, r3, #1
 800c2c4:	61bb      	str	r3, [r7, #24]
 800c2c6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800c2c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800c2de:	f107 031c 	add.w	r3, r7, #28
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	481f      	ldr	r0, [pc, #124]	@ (800c364 <HAL_RCC_MCOConfig+0xcc>)
 800c2e6:	f7fd fd55 	bl	8009d94 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800c2ea:	4b1d      	ldr	r3, [pc, #116]	@ (800c360 <HAL_RCC_MCOConfig+0xc8>)
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800c2f2:	68b9      	ldr	r1, [r7, #8]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	430b      	orrs	r3, r1
 800c2f8:	4919      	ldr	r1, [pc, #100]	@ (800c360 <HAL_RCC_MCOConfig+0xc8>)
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800c2fe:	e02a      	b.n	800c356 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800c300:	4b17      	ldr	r3, [pc, #92]	@ (800c360 <HAL_RCC_MCOConfig+0xc8>)
 800c302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c306:	4a16      	ldr	r2, [pc, #88]	@ (800c360 <HAL_RCC_MCOConfig+0xc8>)
 800c308:	f043 0304 	orr.w	r3, r3, #4
 800c30c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c310:	4b13      	ldr	r3, [pc, #76]	@ (800c360 <HAL_RCC_MCOConfig+0xc8>)
 800c312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c316:	f003 0304 	and.w	r3, r3, #4
 800c31a:	617b      	str	r3, [r7, #20]
 800c31c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800c31e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c324:	2302      	movs	r3, #2
 800c326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c328:	2303      	movs	r3, #3
 800c32a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c32c:	2300      	movs	r3, #0
 800c32e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c330:	2300      	movs	r3, #0
 800c332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c334:	f107 031c 	add.w	r3, r7, #28
 800c338:	4619      	mov	r1, r3
 800c33a:	480b      	ldr	r0, [pc, #44]	@ (800c368 <HAL_RCC_MCOConfig+0xd0>)
 800c33c:	f7fd fd2a 	bl	8009d94 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800c340:	4b07      	ldr	r3, [pc, #28]	@ (800c360 <HAL_RCC_MCOConfig+0xc8>)
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	01d9      	lsls	r1, r3, #7
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	430b      	orrs	r3, r1
 800c350:	4903      	ldr	r1, [pc, #12]	@ (800c360 <HAL_RCC_MCOConfig+0xc8>)
 800c352:	4313      	orrs	r3, r2
 800c354:	610b      	str	r3, [r1, #16]
}
 800c356:	bf00      	nop
 800c358:	3730      	adds	r7, #48	@ 0x30
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	58024400 	.word	0x58024400
 800c364:	58020000 	.word	0x58020000
 800c368:	58020800 	.word	0x58020800

0800c36c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b089      	sub	sp, #36	@ 0x24
 800c370:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c372:	4bb3      	ldr	r3, [pc, #716]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c37a:	2b18      	cmp	r3, #24
 800c37c:	f200 8155 	bhi.w	800c62a <HAL_RCC_GetSysClockFreq+0x2be>
 800c380:	a201      	add	r2, pc, #4	@ (adr r2, 800c388 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c386:	bf00      	nop
 800c388:	0800c3ed 	.word	0x0800c3ed
 800c38c:	0800c62b 	.word	0x0800c62b
 800c390:	0800c62b 	.word	0x0800c62b
 800c394:	0800c62b 	.word	0x0800c62b
 800c398:	0800c62b 	.word	0x0800c62b
 800c39c:	0800c62b 	.word	0x0800c62b
 800c3a0:	0800c62b 	.word	0x0800c62b
 800c3a4:	0800c62b 	.word	0x0800c62b
 800c3a8:	0800c413 	.word	0x0800c413
 800c3ac:	0800c62b 	.word	0x0800c62b
 800c3b0:	0800c62b 	.word	0x0800c62b
 800c3b4:	0800c62b 	.word	0x0800c62b
 800c3b8:	0800c62b 	.word	0x0800c62b
 800c3bc:	0800c62b 	.word	0x0800c62b
 800c3c0:	0800c62b 	.word	0x0800c62b
 800c3c4:	0800c62b 	.word	0x0800c62b
 800c3c8:	0800c419 	.word	0x0800c419
 800c3cc:	0800c62b 	.word	0x0800c62b
 800c3d0:	0800c62b 	.word	0x0800c62b
 800c3d4:	0800c62b 	.word	0x0800c62b
 800c3d8:	0800c62b 	.word	0x0800c62b
 800c3dc:	0800c62b 	.word	0x0800c62b
 800c3e0:	0800c62b 	.word	0x0800c62b
 800c3e4:	0800c62b 	.word	0x0800c62b
 800c3e8:	0800c41f 	.word	0x0800c41f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3ec:	4b94      	ldr	r3, [pc, #592]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f003 0320 	and.w	r3, r3, #32
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d009      	beq.n	800c40c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3f8:	4b91      	ldr	r3, [pc, #580]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	08db      	lsrs	r3, r3, #3
 800c3fe:	f003 0303 	and.w	r3, r3, #3
 800c402:	4a90      	ldr	r2, [pc, #576]	@ (800c644 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c404:	fa22 f303 	lsr.w	r3, r2, r3
 800c408:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c40a:	e111      	b.n	800c630 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c40c:	4b8d      	ldr	r3, [pc, #564]	@ (800c644 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c40e:	61bb      	str	r3, [r7, #24]
      break;
 800c410:	e10e      	b.n	800c630 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c412:	4b8d      	ldr	r3, [pc, #564]	@ (800c648 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c414:	61bb      	str	r3, [r7, #24]
      break;
 800c416:	e10b      	b.n	800c630 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c418:	4b8c      	ldr	r3, [pc, #560]	@ (800c64c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c41a:	61bb      	str	r3, [r7, #24]
      break;
 800c41c:	e108      	b.n	800c630 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c41e:	4b88      	ldr	r3, [pc, #544]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c422:	f003 0303 	and.w	r3, r3, #3
 800c426:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c428:	4b85      	ldr	r3, [pc, #532]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c42c:	091b      	lsrs	r3, r3, #4
 800c42e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c432:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c434:	4b82      	ldr	r3, [pc, #520]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c43e:	4b80      	ldr	r3, [pc, #512]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c442:	08db      	lsrs	r3, r3, #3
 800c444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	fb02 f303 	mul.w	r3, r2, r3
 800c44e:	ee07 3a90 	vmov	s15, r3
 800c452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c456:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f000 80e1 	beq.w	800c624 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	2b02      	cmp	r3, #2
 800c466:	f000 8083 	beq.w	800c570 <HAL_RCC_GetSysClockFreq+0x204>
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	f200 80a1 	bhi.w	800c5b4 <HAL_RCC_GetSysClockFreq+0x248>
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d003      	beq.n	800c480 <HAL_RCC_GetSysClockFreq+0x114>
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d056      	beq.n	800c52c <HAL_RCC_GetSysClockFreq+0x1c0>
 800c47e:	e099      	b.n	800c5b4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c480:	4b6f      	ldr	r3, [pc, #444]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 0320 	and.w	r3, r3, #32
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d02d      	beq.n	800c4e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c48c:	4b6c      	ldr	r3, [pc, #432]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	08db      	lsrs	r3, r3, #3
 800c492:	f003 0303 	and.w	r3, r3, #3
 800c496:	4a6b      	ldr	r2, [pc, #428]	@ (800c644 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c498:	fa22 f303 	lsr.w	r3, r2, r3
 800c49c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	ee07 3a90 	vmov	s15, r3
 800c4a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	ee07 3a90 	vmov	s15, r3
 800c4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4b6:	4b62      	ldr	r3, [pc, #392]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4be:	ee07 3a90 	vmov	s15, r3
 800c4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c4ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c650 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c4ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c4e6:	e087      	b.n	800c5f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	ee07 3a90 	vmov	s15, r3
 800c4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c654 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c4f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4fa:	4b51      	ldr	r3, [pc, #324]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c502:	ee07 3a90 	vmov	s15, r3
 800c506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c50a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c50e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c650 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c51a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c51e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c522:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c526:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c52a:	e065      	b.n	800c5f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	ee07 3a90 	vmov	s15, r3
 800c532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c536:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c658 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c53a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c53e:	4b40      	ldr	r3, [pc, #256]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c546:	ee07 3a90 	vmov	s15, r3
 800c54a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c54e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c552:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c650 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c55a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c55e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c56a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c56e:	e043      	b.n	800c5f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	ee07 3a90 	vmov	s15, r3
 800c576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c57a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c65c <HAL_RCC_GetSysClockFreq+0x2f0>
 800c57e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c582:	4b2f      	ldr	r3, [pc, #188]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c58a:	ee07 3a90 	vmov	s15, r3
 800c58e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c592:	ed97 6a02 	vldr	s12, [r7, #8]
 800c596:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c650 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c59a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c5b2:	e021      	b.n	800c5f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	ee07 3a90 	vmov	s15, r3
 800c5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c658 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c5c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5c6:	4b1e      	ldr	r3, [pc, #120]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ce:	ee07 3a90 	vmov	s15, r3
 800c5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c5da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c650 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c5de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c5f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c5f8:	4b11      	ldr	r3, [pc, #68]	@ (800c640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5fc:	0a5b      	lsrs	r3, r3, #9
 800c5fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c602:	3301      	adds	r3, #1
 800c604:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	ee07 3a90 	vmov	s15, r3
 800c60c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c610:	edd7 6a07 	vldr	s13, [r7, #28]
 800c614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c61c:	ee17 3a90 	vmov	r3, s15
 800c620:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c622:	e005      	b.n	800c630 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c624:	2300      	movs	r3, #0
 800c626:	61bb      	str	r3, [r7, #24]
      break;
 800c628:	e002      	b.n	800c630 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c62a:	4b07      	ldr	r3, [pc, #28]	@ (800c648 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c62c:	61bb      	str	r3, [r7, #24]
      break;
 800c62e:	bf00      	nop
  }

  return sysclockfreq;
 800c630:	69bb      	ldr	r3, [r7, #24]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3724      	adds	r7, #36	@ 0x24
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	58024400 	.word	0x58024400
 800c644:	03d09000 	.word	0x03d09000
 800c648:	003d0900 	.word	0x003d0900
 800c64c:	017d7840 	.word	0x017d7840
 800c650:	46000000 	.word	0x46000000
 800c654:	4c742400 	.word	0x4c742400
 800c658:	4a742400 	.word	0x4a742400
 800c65c:	4bbebc20 	.word	0x4bbebc20

0800c660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c666:	f7ff fe81 	bl	800c36c <HAL_RCC_GetSysClockFreq>
 800c66a:	4602      	mov	r2, r0
 800c66c:	4b10      	ldr	r3, [pc, #64]	@ (800c6b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800c66e:	699b      	ldr	r3, [r3, #24]
 800c670:	0a1b      	lsrs	r3, r3, #8
 800c672:	f003 030f 	and.w	r3, r3, #15
 800c676:	490f      	ldr	r1, [pc, #60]	@ (800c6b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800c678:	5ccb      	ldrb	r3, [r1, r3]
 800c67a:	f003 031f 	and.w	r3, r3, #31
 800c67e:	fa22 f303 	lsr.w	r3, r2, r3
 800c682:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c684:	4b0a      	ldr	r3, [pc, #40]	@ (800c6b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800c686:	699b      	ldr	r3, [r3, #24]
 800c688:	f003 030f 	and.w	r3, r3, #15
 800c68c:	4a09      	ldr	r2, [pc, #36]	@ (800c6b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800c68e:	5cd3      	ldrb	r3, [r2, r3]
 800c690:	f003 031f 	and.w	r3, r3, #31
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	fa22 f303 	lsr.w	r3, r2, r3
 800c69a:	4a07      	ldr	r2, [pc, #28]	@ (800c6b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800c69c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c69e:	4a07      	ldr	r2, [pc, #28]	@ (800c6bc <HAL_RCC_GetHCLKFreq+0x5c>)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c6a4:	4b04      	ldr	r3, [pc, #16]	@ (800c6b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3708      	adds	r7, #8
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	58024400 	.word	0x58024400
 800c6b4:	0801d504 	.word	0x0801d504
 800c6b8:	2400001c 	.word	0x2400001c
 800c6bc:	24000018 	.word	0x24000018

0800c6c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c6c4:	f7ff ffcc 	bl	800c660 <HAL_RCC_GetHCLKFreq>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	4b06      	ldr	r3, [pc, #24]	@ (800c6e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c6cc:	69db      	ldr	r3, [r3, #28]
 800c6ce:	091b      	lsrs	r3, r3, #4
 800c6d0:	f003 0307 	and.w	r3, r3, #7
 800c6d4:	4904      	ldr	r1, [pc, #16]	@ (800c6e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c6d6:	5ccb      	ldrb	r3, [r1, r3]
 800c6d8:	f003 031f 	and.w	r3, r3, #31
 800c6dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	58024400 	.word	0x58024400
 800c6e8:	0801d504 	.word	0x0801d504

0800c6ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c6f0:	f7ff ffb6 	bl	800c660 <HAL_RCC_GetHCLKFreq>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	4b06      	ldr	r3, [pc, #24]	@ (800c710 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c6f8:	69db      	ldr	r3, [r3, #28]
 800c6fa:	0a1b      	lsrs	r3, r3, #8
 800c6fc:	f003 0307 	and.w	r3, r3, #7
 800c700:	4904      	ldr	r1, [pc, #16]	@ (800c714 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c702:	5ccb      	ldrb	r3, [r1, r3]
 800c704:	f003 031f 	and.w	r3, r3, #31
 800c708:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	58024400 	.word	0x58024400
 800c714:	0801d504 	.word	0x0801d504

0800c718 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c71c:	b0c6      	sub	sp, #280	@ 0x118
 800c71e:	af00      	add	r7, sp, #0
 800c720:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c724:	2300      	movs	r3, #0
 800c726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c72a:	2300      	movs	r3, #0
 800c72c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c73c:	2500      	movs	r5, #0
 800c73e:	ea54 0305 	orrs.w	r3, r4, r5
 800c742:	d049      	beq.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c748:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c74a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c74e:	d02f      	beq.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c750:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c754:	d828      	bhi.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c756:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c75a:	d01a      	beq.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c75c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c760:	d822      	bhi.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c762:	2b00      	cmp	r3, #0
 800c764:	d003      	beq.n	800c76e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c76a:	d007      	beq.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c76c:	e01c      	b.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c76e:	4bab      	ldr	r3, [pc, #684]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c772:	4aaa      	ldr	r2, [pc, #680]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c778:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c77a:	e01a      	b.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c780:	3308      	adds	r3, #8
 800c782:	2102      	movs	r1, #2
 800c784:	4618      	mov	r0, r3
 800c786:	f002 fa49 	bl	800ec1c <RCCEx_PLL2_Config>
 800c78a:	4603      	mov	r3, r0
 800c78c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c790:	e00f      	b.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c796:	3328      	adds	r3, #40	@ 0x28
 800c798:	2102      	movs	r1, #2
 800c79a:	4618      	mov	r0, r3
 800c79c:	f002 faf0 	bl	800ed80 <RCCEx_PLL3_Config>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c7a6:	e004      	b.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7ae:	e000      	b.n	800c7b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c7b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d10a      	bne.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c7ba:	4b98      	ldr	r3, [pc, #608]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c7bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7c8:	4a94      	ldr	r2, [pc, #592]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c7ca:	430b      	orrs	r3, r1
 800c7cc:	6513      	str	r3, [r2, #80]	@ 0x50
 800c7ce:	e003      	b.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c7e4:	f04f 0900 	mov.w	r9, #0
 800c7e8:	ea58 0309 	orrs.w	r3, r8, r9
 800c7ec:	d047      	beq.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7f4:	2b04      	cmp	r3, #4
 800c7f6:	d82a      	bhi.n	800c84e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c7f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c800 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7fe:	bf00      	nop
 800c800:	0800c815 	.word	0x0800c815
 800c804:	0800c823 	.word	0x0800c823
 800c808:	0800c839 	.word	0x0800c839
 800c80c:	0800c857 	.word	0x0800c857
 800c810:	0800c857 	.word	0x0800c857
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c814:	4b81      	ldr	r3, [pc, #516]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c818:	4a80      	ldr	r2, [pc, #512]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c81a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c81e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c820:	e01a      	b.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c826:	3308      	adds	r3, #8
 800c828:	2100      	movs	r1, #0
 800c82a:	4618      	mov	r0, r3
 800c82c:	f002 f9f6 	bl	800ec1c <RCCEx_PLL2_Config>
 800c830:	4603      	mov	r3, r0
 800c832:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c836:	e00f      	b.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c83c:	3328      	adds	r3, #40	@ 0x28
 800c83e:	2100      	movs	r1, #0
 800c840:	4618      	mov	r0, r3
 800c842:	f002 fa9d 	bl	800ed80 <RCCEx_PLL3_Config>
 800c846:	4603      	mov	r3, r0
 800c848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c84c:	e004      	b.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c84e:	2301      	movs	r3, #1
 800c850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c854:	e000      	b.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c856:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c858:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d10a      	bne.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c860:	4b6e      	ldr	r3, [pc, #440]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c864:	f023 0107 	bic.w	r1, r3, #7
 800c868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c86c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c86e:	4a6b      	ldr	r2, [pc, #428]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c870:	430b      	orrs	r3, r1
 800c872:	6513      	str	r3, [r2, #80]	@ 0x50
 800c874:	e003      	b.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c876:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c87a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800c88a:	f04f 0b00 	mov.w	fp, #0
 800c88e:	ea5a 030b 	orrs.w	r3, sl, fp
 800c892:	d05b      	beq.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c898:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c89c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c8a0:	d03b      	beq.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c8a2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c8a6:	d834      	bhi.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c8a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c8ac:	d037      	beq.n	800c91e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c8ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c8b2:	d82e      	bhi.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c8b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c8b8:	d033      	beq.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800c8ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c8be:	d828      	bhi.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c8c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c8c4:	d01a      	beq.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c8c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c8ca:	d822      	bhi.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d003      	beq.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c8d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c8d4:	d007      	beq.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800c8d6:	e01c      	b.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8d8:	4b50      	ldr	r3, [pc, #320]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8dc:	4a4f      	ldr	r2, [pc, #316]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c8de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c8e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c8e4:	e01e      	b.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ea:	3308      	adds	r3, #8
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f002 f994 	bl	800ec1c <RCCEx_PLL2_Config>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c8fa:	e013      	b.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c900:	3328      	adds	r3, #40	@ 0x28
 800c902:	2100      	movs	r1, #0
 800c904:	4618      	mov	r0, r3
 800c906:	f002 fa3b 	bl	800ed80 <RCCEx_PLL3_Config>
 800c90a:	4603      	mov	r3, r0
 800c90c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c910:	e008      	b.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c918:	e004      	b.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c91a:	bf00      	nop
 800c91c:	e002      	b.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c91e:	bf00      	nop
 800c920:	e000      	b.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c922:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10b      	bne.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c92c:	4b3b      	ldr	r3, [pc, #236]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c92e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c930:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c938:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c93c:	4a37      	ldr	r2, [pc, #220]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c93e:	430b      	orrs	r3, r1
 800c940:	6593      	str	r3, [r2, #88]	@ 0x58
 800c942:	e003      	b.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c944:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c948:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c954:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c958:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c95c:	2300      	movs	r3, #0
 800c95e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c962:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c966:	460b      	mov	r3, r1
 800c968:	4313      	orrs	r3, r2
 800c96a:	d05d      	beq.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c970:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c974:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c978:	d03b      	beq.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c97a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c97e:	d834      	bhi.n	800c9ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c980:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c984:	d037      	beq.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c986:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c98a:	d82e      	bhi.n	800c9ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c98c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c990:	d033      	beq.n	800c9fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c992:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c996:	d828      	bhi.n	800c9ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c998:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c99c:	d01a      	beq.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c99e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c9a2:	d822      	bhi.n	800c9ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d003      	beq.n	800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c9a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c9ac:	d007      	beq.n	800c9be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c9ae:	e01c      	b.n	800c9ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9b0:	4b1a      	ldr	r3, [pc, #104]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9b4:	4a19      	ldr	r2, [pc, #100]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c9b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c9bc:	e01e      	b.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9c2:	3308      	adds	r3, #8
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f002 f928 	bl	800ec1c <RCCEx_PLL2_Config>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c9d2:	e013      	b.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d8:	3328      	adds	r3, #40	@ 0x28
 800c9da:	2100      	movs	r1, #0
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f002 f9cf 	bl	800ed80 <RCCEx_PLL3_Config>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c9e8:	e008      	b.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c9f0:	e004      	b.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c9f2:	bf00      	nop
 800c9f4:	e002      	b.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c9f6:	bf00      	nop
 800c9f8:	e000      	b.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c9fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10d      	bne.n	800ca20 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ca04:	4b05      	ldr	r3, [pc, #20]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ca06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca08:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ca0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ca14:	4a01      	ldr	r2, [pc, #4]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ca16:	430b      	orrs	r3, r1
 800ca18:	6593      	str	r3, [r2, #88]	@ 0x58
 800ca1a:	e005      	b.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ca1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ca28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca30:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800ca34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ca38:	2300      	movs	r3, #0
 800ca3a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ca3e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4313      	orrs	r3, r2
 800ca46:	d03a      	beq.n	800cabe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ca48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca4e:	2b30      	cmp	r3, #48	@ 0x30
 800ca50:	d01f      	beq.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ca52:	2b30      	cmp	r3, #48	@ 0x30
 800ca54:	d819      	bhi.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ca56:	2b20      	cmp	r3, #32
 800ca58:	d00c      	beq.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ca5a:	2b20      	cmp	r3, #32
 800ca5c:	d815      	bhi.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d019      	beq.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ca62:	2b10      	cmp	r3, #16
 800ca64:	d111      	bne.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca66:	4baa      	ldr	r3, [pc, #680]	@ (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ca68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca6a:	4aa9      	ldr	r2, [pc, #676]	@ (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ca6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ca72:	e011      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca78:	3308      	adds	r3, #8
 800ca7a:	2102      	movs	r1, #2
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f002 f8cd 	bl	800ec1c <RCCEx_PLL2_Config>
 800ca82:	4603      	mov	r3, r0
 800ca84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ca88:	e006      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ca90:	e002      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ca92:	bf00      	nop
 800ca94:	e000      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ca96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d10a      	bne.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800caa0:	4b9b      	ldr	r3, [pc, #620]	@ (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800caa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800caa4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800caa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800caae:	4a98      	ldr	r2, [pc, #608]	@ (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cab0:	430b      	orrs	r3, r1
 800cab2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cab4:	e003      	b.n	800cabe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cab6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800caba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800caca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cace:	2300      	movs	r3, #0
 800cad0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cad4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800cad8:	460b      	mov	r3, r1
 800cada:	4313      	orrs	r3, r2
 800cadc:	d051      	beq.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800cade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cae8:	d035      	beq.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800caea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800caee:	d82e      	bhi.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800caf0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800caf4:	d031      	beq.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800caf6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cafa:	d828      	bhi.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800cafc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb00:	d01a      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800cb02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb06:	d822      	bhi.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d003      	beq.n	800cb14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800cb0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb10:	d007      	beq.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800cb12:	e01c      	b.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb14:	4b7e      	ldr	r3, [pc, #504]	@ (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb18:	4a7d      	ldr	r2, [pc, #500]	@ (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cb20:	e01c      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb26:	3308      	adds	r3, #8
 800cb28:	2100      	movs	r1, #0
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f002 f876 	bl	800ec1c <RCCEx_PLL2_Config>
 800cb30:	4603      	mov	r3, r0
 800cb32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cb36:	e011      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb3c:	3328      	adds	r3, #40	@ 0x28
 800cb3e:	2100      	movs	r1, #0
 800cb40:	4618      	mov	r0, r3
 800cb42:	f002 f91d 	bl	800ed80 <RCCEx_PLL3_Config>
 800cb46:	4603      	mov	r3, r0
 800cb48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cb4c:	e006      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb54:	e002      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800cb56:	bf00      	nop
 800cb58:	e000      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800cb5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10a      	bne.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cb64:	4b6a      	ldr	r3, [pc, #424]	@ (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb68:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800cb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb72:	4a67      	ldr	r2, [pc, #412]	@ (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb74:	430b      	orrs	r3, r1
 800cb76:	6513      	str	r3, [r2, #80]	@ 0x50
 800cb78:	e003      	b.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cb82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800cb8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cb92:	2300      	movs	r3, #0
 800cb94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cb98:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	d053      	beq.n	800cc4a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800cba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cbac:	d033      	beq.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800cbae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cbb2:	d82c      	bhi.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800cbb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cbb8:	d02f      	beq.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800cbba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cbbe:	d826      	bhi.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800cbc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cbc4:	d02b      	beq.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800cbc6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cbca:	d820      	bhi.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800cbcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbd0:	d012      	beq.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800cbd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbd6:	d81a      	bhi.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d022      	beq.n	800cc22 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800cbdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbe0:	d115      	bne.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cbe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbe6:	3308      	adds	r3, #8
 800cbe8:	2101      	movs	r1, #1
 800cbea:	4618      	mov	r0, r3
 800cbec:	f002 f816 	bl	800ec1c <RCCEx_PLL2_Config>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cbf6:	e015      	b.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbfc:	3328      	adds	r3, #40	@ 0x28
 800cbfe:	2101      	movs	r1, #1
 800cc00:	4618      	mov	r0, r3
 800cc02:	f002 f8bd 	bl	800ed80 <RCCEx_PLL3_Config>
 800cc06:	4603      	mov	r3, r0
 800cc08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cc0c:	e00a      	b.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc14:	e006      	b.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800cc16:	bf00      	nop
 800cc18:	e004      	b.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800cc1a:	bf00      	nop
 800cc1c:	e002      	b.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800cc1e:	bf00      	nop
 800cc20:	e000      	b.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800cc22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10a      	bne.n	800cc42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cc2c:	4b38      	ldr	r3, [pc, #224]	@ (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cc2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc30:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800cc34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cc3a:	4a35      	ldr	r2, [pc, #212]	@ (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cc3c:	430b      	orrs	r3, r1
 800cc3e:	6513      	str	r3, [r2, #80]	@ 0x50
 800cc40:	e003      	b.n	800cc4a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cc4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc52:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800cc56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cc60:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cc64:	460b      	mov	r3, r1
 800cc66:	4313      	orrs	r3, r2
 800cc68:	d058      	beq.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cc6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cc72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cc76:	d033      	beq.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800cc78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cc7c:	d82c      	bhi.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cc7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc82:	d02f      	beq.n	800cce4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800cc84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc88:	d826      	bhi.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cc8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cc8e:	d02b      	beq.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800cc90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cc94:	d820      	bhi.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cc96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc9a:	d012      	beq.n	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800cc9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cca0:	d81a      	bhi.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d022      	beq.n	800ccec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cca6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccaa:	d115      	bne.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ccac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccb0:	3308      	adds	r3, #8
 800ccb2:	2101      	movs	r1, #1
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f001 ffb1 	bl	800ec1c <RCCEx_PLL2_Config>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ccc0:	e015      	b.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ccc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccc6:	3328      	adds	r3, #40	@ 0x28
 800ccc8:	2101      	movs	r1, #1
 800ccca:	4618      	mov	r0, r3
 800cccc:	f002 f858 	bl	800ed80 <RCCEx_PLL3_Config>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ccd6:	e00a      	b.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ccde:	e006      	b.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cce0:	bf00      	nop
 800cce2:	e004      	b.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cce4:	bf00      	nop
 800cce6:	e002      	b.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cce8:	bf00      	nop
 800ccea:	e000      	b.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ccec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d10e      	bne.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ccf6:	4b06      	ldr	r3, [pc, #24]	@ (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ccf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccfa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ccfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cd06:	4a02      	ldr	r2, [pc, #8]	@ (800cd10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cd08:	430b      	orrs	r3, r1
 800cd0a:	6593      	str	r3, [r2, #88]	@ 0x58
 800cd0c:	e006      	b.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800cd0e:	bf00      	nop
 800cd10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cd1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800cd28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cd32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800cd36:	460b      	mov	r3, r1
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	d037      	beq.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cd3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd46:	d00e      	beq.n	800cd66 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800cd48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd4c:	d816      	bhi.n	800cd7c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d018      	beq.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800cd52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd56:	d111      	bne.n	800cd7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd58:	4bc4      	ldr	r3, [pc, #784]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd5c:	4ac3      	ldr	r2, [pc, #780]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cd64:	e00f      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd6a:	3308      	adds	r3, #8
 800cd6c:	2101      	movs	r1, #1
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f001 ff54 	bl	800ec1c <RCCEx_PLL2_Config>
 800cd74:	4603      	mov	r3, r0
 800cd76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cd7a:	e004      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cd82:	e000      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800cd84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10a      	bne.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cd8e:	4bb7      	ldr	r3, [pc, #732]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cd96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd9c:	4ab3      	ldr	r2, [pc, #716]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd9e:	430b      	orrs	r3, r1
 800cda0:	6513      	str	r3, [r2, #80]	@ 0x50
 800cda2:	e003      	b.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cda4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cda8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cdac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800cdb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cdc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	d039      	beq.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800cdcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cdd2:	2b03      	cmp	r3, #3
 800cdd4:	d81c      	bhi.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800cdd6:	a201      	add	r2, pc, #4	@ (adr r2, 800cddc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800cdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cddc:	0800ce19 	.word	0x0800ce19
 800cde0:	0800cded 	.word	0x0800cded
 800cde4:	0800cdfb 	.word	0x0800cdfb
 800cde8:	0800ce19 	.word	0x0800ce19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdec:	4b9f      	ldr	r3, [pc, #636]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdf0:	4a9e      	ldr	r2, [pc, #632]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cdf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cdf8:	e00f      	b.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cdfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdfe:	3308      	adds	r3, #8
 800ce00:	2102      	movs	r1, #2
 800ce02:	4618      	mov	r0, r3
 800ce04:	f001 ff0a 	bl	800ec1c <RCCEx_PLL2_Config>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ce0e:	e004      	b.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ce10:	2301      	movs	r3, #1
 800ce12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ce16:	e000      	b.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ce18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d10a      	bne.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ce22:	4b92      	ldr	r3, [pc, #584]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce26:	f023 0103 	bic.w	r1, r3, #3
 800ce2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce30:	4a8e      	ldr	r2, [pc, #568]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce32:	430b      	orrs	r3, r1
 800ce34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ce36:	e003      	b.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ce40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce48:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ce4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce50:	2300      	movs	r3, #0
 800ce52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ce56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	f000 8099 	beq.w	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ce62:	4b83      	ldr	r3, [pc, #524]	@ (800d070 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4a82      	ldr	r2, [pc, #520]	@ (800d070 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ce68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ce6e:	f7f8 f87d 	bl	8004f6c <HAL_GetTick>
 800ce72:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ce76:	e00b      	b.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce78:	f7f8 f878 	bl	8004f6c <HAL_GetTick>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ce82:	1ad3      	subs	r3, r2, r3
 800ce84:	2b64      	cmp	r3, #100	@ 0x64
 800ce86:	d903      	bls.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ce88:	2303      	movs	r3, #3
 800ce8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ce8e:	e005      	b.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ce90:	4b77      	ldr	r3, [pc, #476]	@ (800d070 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d0ed      	beq.n	800ce78 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ce9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d173      	bne.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cea4:	4b71      	ldr	r3, [pc, #452]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cea6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800cea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ceb0:	4053      	eors	r3, r2
 800ceb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d015      	beq.n	800cee6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ceba:	4b6c      	ldr	r3, [pc, #432]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cec2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cec6:	4b69      	ldr	r3, [pc, #420]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ceca:	4a68      	ldr	r2, [pc, #416]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ced0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ced2:	4b66      	ldr	r3, [pc, #408]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ced4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ced6:	4a65      	ldr	r2, [pc, #404]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ced8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cedc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cede:	4a63      	ldr	r2, [pc, #396]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cee4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ceee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cef2:	d118      	bne.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cef4:	f7f8 f83a 	bl	8004f6c <HAL_GetTick>
 800cef8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cefc:	e00d      	b.n	800cf1a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cefe:	f7f8 f835 	bl	8004f6c <HAL_GetTick>
 800cf02:	4602      	mov	r2, r0
 800cf04:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800cf08:	1ad2      	subs	r2, r2, r3
 800cf0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d903      	bls.n	800cf1a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800cf12:	2303      	movs	r3, #3
 800cf14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800cf18:	e005      	b.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf1a:	4b54      	ldr	r3, [pc, #336]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf1e:	f003 0302 	and.w	r3, r3, #2
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d0eb      	beq.n	800cefe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800cf26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d129      	bne.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cf36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cf3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf3e:	d10e      	bne.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800cf40:	4b4a      	ldr	r3, [pc, #296]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800cf48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cf50:	091a      	lsrs	r2, r3, #4
 800cf52:	4b48      	ldr	r3, [pc, #288]	@ (800d074 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800cf54:	4013      	ands	r3, r2
 800cf56:	4a45      	ldr	r2, [pc, #276]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf58:	430b      	orrs	r3, r1
 800cf5a:	6113      	str	r3, [r2, #16]
 800cf5c:	e005      	b.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800cf5e:	4b43      	ldr	r3, [pc, #268]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	4a42      	ldr	r2, [pc, #264]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cf68:	6113      	str	r3, [r2, #16]
 800cf6a:	4b40      	ldr	r3, [pc, #256]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf6c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800cf6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cf76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf7a:	4a3c      	ldr	r2, [pc, #240]	@ (800d06c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf7c:	430b      	orrs	r3, r1
 800cf7e:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf80:	e008      	b.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cf82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800cf8a:	e003      	b.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	f002 0301 	and.w	r3, r2, #1
 800cfa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cfaa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800cfae:	460b      	mov	r3, r1
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	f000 808f 	beq.w	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800cfb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cfbc:	2b28      	cmp	r3, #40	@ 0x28
 800cfbe:	d871      	bhi.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800cfc0:	a201      	add	r2, pc, #4	@ (adr r2, 800cfc8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800cfc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc6:	bf00      	nop
 800cfc8:	0800d0ad 	.word	0x0800d0ad
 800cfcc:	0800d0a5 	.word	0x0800d0a5
 800cfd0:	0800d0a5 	.word	0x0800d0a5
 800cfd4:	0800d0a5 	.word	0x0800d0a5
 800cfd8:	0800d0a5 	.word	0x0800d0a5
 800cfdc:	0800d0a5 	.word	0x0800d0a5
 800cfe0:	0800d0a5 	.word	0x0800d0a5
 800cfe4:	0800d0a5 	.word	0x0800d0a5
 800cfe8:	0800d079 	.word	0x0800d079
 800cfec:	0800d0a5 	.word	0x0800d0a5
 800cff0:	0800d0a5 	.word	0x0800d0a5
 800cff4:	0800d0a5 	.word	0x0800d0a5
 800cff8:	0800d0a5 	.word	0x0800d0a5
 800cffc:	0800d0a5 	.word	0x0800d0a5
 800d000:	0800d0a5 	.word	0x0800d0a5
 800d004:	0800d0a5 	.word	0x0800d0a5
 800d008:	0800d08f 	.word	0x0800d08f
 800d00c:	0800d0a5 	.word	0x0800d0a5
 800d010:	0800d0a5 	.word	0x0800d0a5
 800d014:	0800d0a5 	.word	0x0800d0a5
 800d018:	0800d0a5 	.word	0x0800d0a5
 800d01c:	0800d0a5 	.word	0x0800d0a5
 800d020:	0800d0a5 	.word	0x0800d0a5
 800d024:	0800d0a5 	.word	0x0800d0a5
 800d028:	0800d0ad 	.word	0x0800d0ad
 800d02c:	0800d0a5 	.word	0x0800d0a5
 800d030:	0800d0a5 	.word	0x0800d0a5
 800d034:	0800d0a5 	.word	0x0800d0a5
 800d038:	0800d0a5 	.word	0x0800d0a5
 800d03c:	0800d0a5 	.word	0x0800d0a5
 800d040:	0800d0a5 	.word	0x0800d0a5
 800d044:	0800d0a5 	.word	0x0800d0a5
 800d048:	0800d0ad 	.word	0x0800d0ad
 800d04c:	0800d0a5 	.word	0x0800d0a5
 800d050:	0800d0a5 	.word	0x0800d0a5
 800d054:	0800d0a5 	.word	0x0800d0a5
 800d058:	0800d0a5 	.word	0x0800d0a5
 800d05c:	0800d0a5 	.word	0x0800d0a5
 800d060:	0800d0a5 	.word	0x0800d0a5
 800d064:	0800d0a5 	.word	0x0800d0a5
 800d068:	0800d0ad 	.word	0x0800d0ad
 800d06c:	58024400 	.word	0x58024400
 800d070:	58024800 	.word	0x58024800
 800d074:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d07c:	3308      	adds	r3, #8
 800d07e:	2101      	movs	r1, #1
 800d080:	4618      	mov	r0, r3
 800d082:	f001 fdcb 	bl	800ec1c <RCCEx_PLL2_Config>
 800d086:	4603      	mov	r3, r0
 800d088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d08c:	e00f      	b.n	800d0ae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d092:	3328      	adds	r3, #40	@ 0x28
 800d094:	2101      	movs	r1, #1
 800d096:	4618      	mov	r0, r3
 800d098:	f001 fe72 	bl	800ed80 <RCCEx_PLL3_Config>
 800d09c:	4603      	mov	r3, r0
 800d09e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d0a2:	e004      	b.n	800d0ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d0aa:	e000      	b.n	800d0ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800d0ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10a      	bne.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d0b6:	4bbf      	ldr	r3, [pc, #764]	@ (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d0b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0ba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800d0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d0c4:	4abb      	ldr	r2, [pc, #748]	@ (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d0c6:	430b      	orrs	r3, r1
 800d0c8:	6553      	str	r3, [r2, #84]	@ 0x54
 800d0ca:	e003      	b.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0dc:	f002 0302 	and.w	r3, r2, #2
 800d0e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d0ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	d041      	beq.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d0f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0fa:	2b05      	cmp	r3, #5
 800d0fc:	d824      	bhi.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800d0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d104 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800d100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d104:	0800d151 	.word	0x0800d151
 800d108:	0800d11d 	.word	0x0800d11d
 800d10c:	0800d133 	.word	0x0800d133
 800d110:	0800d151 	.word	0x0800d151
 800d114:	0800d151 	.word	0x0800d151
 800d118:	0800d151 	.word	0x0800d151
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d120:	3308      	adds	r3, #8
 800d122:	2101      	movs	r1, #1
 800d124:	4618      	mov	r0, r3
 800d126:	f001 fd79 	bl	800ec1c <RCCEx_PLL2_Config>
 800d12a:	4603      	mov	r3, r0
 800d12c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d130:	e00f      	b.n	800d152 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d136:	3328      	adds	r3, #40	@ 0x28
 800d138:	2101      	movs	r1, #1
 800d13a:	4618      	mov	r0, r3
 800d13c:	f001 fe20 	bl	800ed80 <RCCEx_PLL3_Config>
 800d140:	4603      	mov	r3, r0
 800d142:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d146:	e004      	b.n	800d152 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d148:	2301      	movs	r3, #1
 800d14a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d14e:	e000      	b.n	800d152 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800d150:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d152:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d156:	2b00      	cmp	r3, #0
 800d158:	d10a      	bne.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d15a:	4b96      	ldr	r3, [pc, #600]	@ (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d15c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d15e:	f023 0107 	bic.w	r1, r3, #7
 800d162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d168:	4a92      	ldr	r2, [pc, #584]	@ (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d16a:	430b      	orrs	r3, r1
 800d16c:	6553      	str	r3, [r2, #84]	@ 0x54
 800d16e:	e003      	b.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d170:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d174:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d180:	f002 0304 	and.w	r3, r2, #4
 800d184:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d188:	2300      	movs	r3, #0
 800d18a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d18e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d192:	460b      	mov	r3, r1
 800d194:	4313      	orrs	r3, r2
 800d196:	d044      	beq.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1a0:	2b05      	cmp	r3, #5
 800d1a2:	d825      	bhi.n	800d1f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800d1a4:	a201      	add	r2, pc, #4	@ (adr r2, 800d1ac <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800d1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1aa:	bf00      	nop
 800d1ac:	0800d1f9 	.word	0x0800d1f9
 800d1b0:	0800d1c5 	.word	0x0800d1c5
 800d1b4:	0800d1db 	.word	0x0800d1db
 800d1b8:	0800d1f9 	.word	0x0800d1f9
 800d1bc:	0800d1f9 	.word	0x0800d1f9
 800d1c0:	0800d1f9 	.word	0x0800d1f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1c8:	3308      	adds	r3, #8
 800d1ca:	2101      	movs	r1, #1
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f001 fd25 	bl	800ec1c <RCCEx_PLL2_Config>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d1d8:	e00f      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1de:	3328      	adds	r3, #40	@ 0x28
 800d1e0:	2101      	movs	r1, #1
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f001 fdcc 	bl	800ed80 <RCCEx_PLL3_Config>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d1ee:	e004      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d1f6:	e000      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800d1f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10b      	bne.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d202:	4b6c      	ldr	r3, [pc, #432]	@ (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d206:	f023 0107 	bic.w	r1, r3, #7
 800d20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d20e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d212:	4a68      	ldr	r2, [pc, #416]	@ (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d214:	430b      	orrs	r3, r1
 800d216:	6593      	str	r3, [r2, #88]	@ 0x58
 800d218:	e003      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d21a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d21e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22a:	f002 0320 	and.w	r3, r2, #32
 800d22e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d232:	2300      	movs	r3, #0
 800d234:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d238:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d23c:	460b      	mov	r3, r1
 800d23e:	4313      	orrs	r3, r2
 800d240:	d055      	beq.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d246:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d24a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d24e:	d033      	beq.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800d250:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d254:	d82c      	bhi.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d25a:	d02f      	beq.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800d25c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d260:	d826      	bhi.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d262:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d266:	d02b      	beq.n	800d2c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800d268:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d26c:	d820      	bhi.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d26e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d272:	d012      	beq.n	800d29a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800d274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d278:	d81a      	bhi.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d022      	beq.n	800d2c4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800d27e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d282:	d115      	bne.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d288:	3308      	adds	r3, #8
 800d28a:	2100      	movs	r1, #0
 800d28c:	4618      	mov	r0, r3
 800d28e:	f001 fcc5 	bl	800ec1c <RCCEx_PLL2_Config>
 800d292:	4603      	mov	r3, r0
 800d294:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d298:	e015      	b.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d29e:	3328      	adds	r3, #40	@ 0x28
 800d2a0:	2102      	movs	r1, #2
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f001 fd6c 	bl	800ed80 <RCCEx_PLL3_Config>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d2ae:	e00a      	b.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d2b6:	e006      	b.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d2b8:	bf00      	nop
 800d2ba:	e004      	b.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d2bc:	bf00      	nop
 800d2be:	e002      	b.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d2c0:	bf00      	nop
 800d2c2:	e000      	b.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d2c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d10b      	bne.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d2ce:	4b39      	ldr	r3, [pc, #228]	@ (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d2d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d2de:	4a35      	ldr	r2, [pc, #212]	@ (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d2e0:	430b      	orrs	r3, r1
 800d2e2:	6553      	str	r3, [r2, #84]	@ 0x54
 800d2e4:	e003      	b.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d2fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d2fe:	2300      	movs	r3, #0
 800d300:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d304:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d308:	460b      	mov	r3, r1
 800d30a:	4313      	orrs	r3, r2
 800d30c:	d058      	beq.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d312:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d316:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d31a:	d033      	beq.n	800d384 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800d31c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d320:	d82c      	bhi.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d326:	d02f      	beq.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800d328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d32c:	d826      	bhi.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d32e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d332:	d02b      	beq.n	800d38c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800d334:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d338:	d820      	bhi.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d33a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d33e:	d012      	beq.n	800d366 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800d340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d344:	d81a      	bhi.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d346:	2b00      	cmp	r3, #0
 800d348:	d022      	beq.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800d34a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d34e:	d115      	bne.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d354:	3308      	adds	r3, #8
 800d356:	2100      	movs	r1, #0
 800d358:	4618      	mov	r0, r3
 800d35a:	f001 fc5f 	bl	800ec1c <RCCEx_PLL2_Config>
 800d35e:	4603      	mov	r3, r0
 800d360:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d364:	e015      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d36a:	3328      	adds	r3, #40	@ 0x28
 800d36c:	2102      	movs	r1, #2
 800d36e:	4618      	mov	r0, r3
 800d370:	f001 fd06 	bl	800ed80 <RCCEx_PLL3_Config>
 800d374:	4603      	mov	r3, r0
 800d376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d37a:	e00a      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d37c:	2301      	movs	r3, #1
 800d37e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d382:	e006      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d384:	bf00      	nop
 800d386:	e004      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d388:	bf00      	nop
 800d38a:	e002      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d38c:	bf00      	nop
 800d38e:	e000      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d390:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d392:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d396:	2b00      	cmp	r3, #0
 800d398:	d10e      	bne.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d39a:	4b06      	ldr	r3, [pc, #24]	@ (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d39c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d39e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d3aa:	4a02      	ldr	r2, [pc, #8]	@ (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d3ac:	430b      	orrs	r3, r1
 800d3ae:	6593      	str	r3, [r2, #88]	@ 0x58
 800d3b0:	e006      	b.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800d3b2:	bf00      	nop
 800d3b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d3cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d3d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d3da:	460b      	mov	r3, r1
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	d055      	beq.n	800d48c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d3e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d3ec:	d033      	beq.n	800d456 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800d3ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d3f2:	d82c      	bhi.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d3f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d3f8:	d02f      	beq.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800d3fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d3fe:	d826      	bhi.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d400:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d404:	d02b      	beq.n	800d45e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800d406:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d40a:	d820      	bhi.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d40c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d410:	d012      	beq.n	800d438 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800d412:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d416:	d81a      	bhi.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d022      	beq.n	800d462 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800d41c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d420:	d115      	bne.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d426:	3308      	adds	r3, #8
 800d428:	2100      	movs	r1, #0
 800d42a:	4618      	mov	r0, r3
 800d42c:	f001 fbf6 	bl	800ec1c <RCCEx_PLL2_Config>
 800d430:	4603      	mov	r3, r0
 800d432:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d436:	e015      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d43c:	3328      	adds	r3, #40	@ 0x28
 800d43e:	2102      	movs	r1, #2
 800d440:	4618      	mov	r0, r3
 800d442:	f001 fc9d 	bl	800ed80 <RCCEx_PLL3_Config>
 800d446:	4603      	mov	r3, r0
 800d448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d44c:	e00a      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d44e:	2301      	movs	r3, #1
 800d450:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d454:	e006      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d456:	bf00      	nop
 800d458:	e004      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d45a:	bf00      	nop
 800d45c:	e002      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d45e:	bf00      	nop
 800d460:	e000      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d462:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10b      	bne.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d46c:	4ba0      	ldr	r3, [pc, #640]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d46e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d470:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d478:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d47c:	4a9c      	ldr	r2, [pc, #624]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d47e:	430b      	orrs	r3, r1
 800d480:	6593      	str	r3, [r2, #88]	@ 0x58
 800d482:	e003      	b.n	800d48c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d488:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800d48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d494:	f002 0308 	and.w	r3, r2, #8
 800d498:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d49c:	2300      	movs	r3, #0
 800d49e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d4a2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	d01e      	beq.n	800d4ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800d4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4b8:	d10c      	bne.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4be:	3328      	adds	r3, #40	@ 0x28
 800d4c0:	2102      	movs	r1, #2
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f001 fc5c 	bl	800ed80 <RCCEx_PLL3_Config>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d002      	beq.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800d4d4:	4b86      	ldr	r3, [pc, #536]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d4d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4e4:	4a82      	ldr	r2, [pc, #520]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d4e6:	430b      	orrs	r3, r1
 800d4e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f2:	f002 0310 	and.w	r3, r2, #16
 800d4f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d500:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d504:	460b      	mov	r3, r1
 800d506:	4313      	orrs	r3, r2
 800d508:	d01e      	beq.n	800d548 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d50e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d516:	d10c      	bne.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d51c:	3328      	adds	r3, #40	@ 0x28
 800d51e:	2102      	movs	r1, #2
 800d520:	4618      	mov	r0, r3
 800d522:	f001 fc2d 	bl	800ed80 <RCCEx_PLL3_Config>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d002      	beq.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800d52c:	2301      	movs	r3, #1
 800d52e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d532:	4b6f      	ldr	r3, [pc, #444]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d536:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d53e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d542:	4a6b      	ldr	r2, [pc, #428]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d544:	430b      	orrs	r3, r1
 800d546:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d550:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d554:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d556:	2300      	movs	r3, #0
 800d558:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d55a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d55e:	460b      	mov	r3, r1
 800d560:	4313      	orrs	r3, r2
 800d562:	d03e      	beq.n	800d5e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d568:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d56c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d570:	d022      	beq.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800d572:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d576:	d81b      	bhi.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d003      	beq.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800d57c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d580:	d00b      	beq.n	800d59a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800d582:	e015      	b.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d588:	3308      	adds	r3, #8
 800d58a:	2100      	movs	r1, #0
 800d58c:	4618      	mov	r0, r3
 800d58e:	f001 fb45 	bl	800ec1c <RCCEx_PLL2_Config>
 800d592:	4603      	mov	r3, r0
 800d594:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d598:	e00f      	b.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d59e:	3328      	adds	r3, #40	@ 0x28
 800d5a0:	2102      	movs	r1, #2
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f001 fbec 	bl	800ed80 <RCCEx_PLL3_Config>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d5ae:	e004      	b.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d5b6:	e000      	b.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800d5b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d10b      	bne.n	800d5da <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d5c2:	4b4b      	ldr	r3, [pc, #300]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d5c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d5d2:	4a47      	ldr	r2, [pc, #284]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d5d4:	430b      	orrs	r3, r1
 800d5d6:	6593      	str	r3, [r2, #88]	@ 0x58
 800d5d8:	e003      	b.n	800d5e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d5ee:	673b      	str	r3, [r7, #112]	@ 0x70
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	677b      	str	r3, [r7, #116]	@ 0x74
 800d5f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	d03b      	beq.n	800d676 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d606:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d60a:	d01f      	beq.n	800d64c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d60c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d610:	d818      	bhi.n	800d644 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800d612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d616:	d003      	beq.n	800d620 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800d618:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d61c:	d007      	beq.n	800d62e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800d61e:	e011      	b.n	800d644 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d620:	4b33      	ldr	r3, [pc, #204]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d624:	4a32      	ldr	r2, [pc, #200]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d62a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d62c:	e00f      	b.n	800d64e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d632:	3328      	adds	r3, #40	@ 0x28
 800d634:	2101      	movs	r1, #1
 800d636:	4618      	mov	r0, r3
 800d638:	f001 fba2 	bl	800ed80 <RCCEx_PLL3_Config>
 800d63c:	4603      	mov	r3, r0
 800d63e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800d642:	e004      	b.n	800d64e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d644:	2301      	movs	r3, #1
 800d646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d64a:	e000      	b.n	800d64e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800d64c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d64e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d652:	2b00      	cmp	r3, #0
 800d654:	d10b      	bne.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d656:	4b26      	ldr	r3, [pc, #152]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d65a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d666:	4a22      	ldr	r2, [pc, #136]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d668:	430b      	orrs	r3, r1
 800d66a:	6553      	str	r3, [r2, #84]	@ 0x54
 800d66c:	e003      	b.n	800d676 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d66e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d672:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d682:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d684:	2300      	movs	r3, #0
 800d686:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d688:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d68c:	460b      	mov	r3, r1
 800d68e:	4313      	orrs	r3, r2
 800d690:	d034      	beq.n	800d6fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d003      	beq.n	800d6a4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800d69c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6a0:	d007      	beq.n	800d6b2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800d6a2:	e011      	b.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d6a4:	4b12      	ldr	r3, [pc, #72]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d6a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6a8:	4a11      	ldr	r2, [pc, #68]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d6aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d6ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d6b0:	e00e      	b.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d6b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6b6:	3308      	adds	r3, #8
 800d6b8:	2102      	movs	r1, #2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f001 faae 	bl	800ec1c <RCCEx_PLL2_Config>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d6c6:	e003      	b.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d6ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d10d      	bne.n	800d6f4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d6d8:	4b05      	ldr	r3, [pc, #20]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d6da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6e6:	4a02      	ldr	r2, [pc, #8]	@ (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d6e8:	430b      	orrs	r3, r1
 800d6ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d6ec:	e006      	b.n	800d6fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800d6ee:	bf00      	nop
 800d6f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d6f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d704:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d708:	663b      	str	r3, [r7, #96]	@ 0x60
 800d70a:	2300      	movs	r3, #0
 800d70c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d70e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d712:	460b      	mov	r3, r1
 800d714:	4313      	orrs	r3, r2
 800d716:	d00c      	beq.n	800d732 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d71c:	3328      	adds	r3, #40	@ 0x28
 800d71e:	2102      	movs	r1, #2
 800d720:	4618      	mov	r0, r3
 800d722:	f001 fb2d 	bl	800ed80 <RCCEx_PLL3_Config>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d002      	beq.n	800d732 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800d72c:	2301      	movs	r3, #1
 800d72e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d73e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d740:	2300      	movs	r3, #0
 800d742:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d744:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d748:	460b      	mov	r3, r1
 800d74a:	4313      	orrs	r3, r2
 800d74c:	d036      	beq.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d752:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d754:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d758:	d018      	beq.n	800d78c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800d75a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d75e:	d811      	bhi.n	800d784 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d764:	d014      	beq.n	800d790 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800d766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d76a:	d80b      	bhi.n	800d784 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d011      	beq.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800d770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d774:	d106      	bne.n	800d784 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d776:	4bb7      	ldr	r3, [pc, #732]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d77a:	4ab6      	ldr	r2, [pc, #728]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d77c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d780:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d782:	e008      	b.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d784:	2301      	movs	r3, #1
 800d786:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d78a:	e004      	b.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d78c:	bf00      	nop
 800d78e:	e002      	b.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d790:	bf00      	nop
 800d792:	e000      	b.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d794:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d796:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d10a      	bne.n	800d7b4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d79e:	4bad      	ldr	r3, [pc, #692]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d7a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d7ac:	4aa9      	ldr	r2, [pc, #676]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d7ae:	430b      	orrs	r3, r1
 800d7b0:	6553      	str	r3, [r2, #84]	@ 0x54
 800d7b2:	e003      	b.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d7b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d7c8:	653b      	str	r3, [r7, #80]	@ 0x50
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	657b      	str	r3, [r7, #84]	@ 0x54
 800d7ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	d009      	beq.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d7d8:	4b9e      	ldr	r3, [pc, #632]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d7da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7e6:	4a9b      	ldr	r2, [pc, #620]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d7e8:	430b      	orrs	r3, r1
 800d7ea:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d7f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7fe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d802:	460b      	mov	r3, r1
 800d804:	4313      	orrs	r3, r2
 800d806:	d009      	beq.n	800d81c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d808:	4b92      	ldr	r3, [pc, #584]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d80a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d80c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d816:	4a8f      	ldr	r2, [pc, #572]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d818:	430b      	orrs	r3, r1
 800d81a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d824:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d828:	643b      	str	r3, [r7, #64]	@ 0x40
 800d82a:	2300      	movs	r3, #0
 800d82c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d82e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d832:	460b      	mov	r3, r1
 800d834:	4313      	orrs	r3, r2
 800d836:	d00e      	beq.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d838:	4b86      	ldr	r3, [pc, #536]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d83a:	691b      	ldr	r3, [r3, #16]
 800d83c:	4a85      	ldr	r2, [pc, #532]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d83e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d842:	6113      	str	r3, [r2, #16]
 800d844:	4b83      	ldr	r3, [pc, #524]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d846:	6919      	ldr	r1, [r3, #16]
 800d848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d84c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d850:	4a80      	ldr	r2, [pc, #512]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d852:	430b      	orrs	r3, r1
 800d854:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d862:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d864:	2300      	movs	r3, #0
 800d866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d868:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d86c:	460b      	mov	r3, r1
 800d86e:	4313      	orrs	r3, r2
 800d870:	d009      	beq.n	800d886 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d872:	4b78      	ldr	r3, [pc, #480]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d876:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d87e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d880:	4a74      	ldr	r2, [pc, #464]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d882:	430b      	orrs	r3, r1
 800d884:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d892:	633b      	str	r3, [r7, #48]	@ 0x30
 800d894:	2300      	movs	r3, #0
 800d896:	637b      	str	r3, [r7, #52]	@ 0x34
 800d898:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d89c:	460b      	mov	r3, r1
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	d00a      	beq.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d8a2:	4b6c      	ldr	r3, [pc, #432]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d8a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8a6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d8aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8b2:	4a68      	ldr	r2, [pc, #416]	@ (800da54 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d8b4:	430b      	orrs	r3, r1
 800d8b6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d8c4:	f003 0301 	and.w	r3, r3, #1
 800d8c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	d011      	beq.n	800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8d8:	3308      	adds	r3, #8
 800d8da:	2100      	movs	r1, #0
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f001 f99d 	bl	800ec1c <RCCEx_PLL2_Config>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d8e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d003      	beq.n	800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d8f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d900:	2100      	movs	r1, #0
 800d902:	6239      	str	r1, [r7, #32]
 800d904:	f003 0302 	and.w	r3, r3, #2
 800d908:	627b      	str	r3, [r7, #36]	@ 0x24
 800d90a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d90e:	460b      	mov	r3, r1
 800d910:	4313      	orrs	r3, r2
 800d912:	d011      	beq.n	800d938 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d918:	3308      	adds	r3, #8
 800d91a:	2101      	movs	r1, #1
 800d91c:	4618      	mov	r0, r3
 800d91e:	f001 f97d 	bl	800ec1c <RCCEx_PLL2_Config>
 800d922:	4603      	mov	r3, r0
 800d924:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d928:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d003      	beq.n	800d938 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d934:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d940:	2100      	movs	r1, #0
 800d942:	61b9      	str	r1, [r7, #24]
 800d944:	f003 0304 	and.w	r3, r3, #4
 800d948:	61fb      	str	r3, [r7, #28]
 800d94a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d94e:	460b      	mov	r3, r1
 800d950:	4313      	orrs	r3, r2
 800d952:	d011      	beq.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d958:	3308      	adds	r3, #8
 800d95a:	2102      	movs	r1, #2
 800d95c:	4618      	mov	r0, r3
 800d95e:	f001 f95d 	bl	800ec1c <RCCEx_PLL2_Config>
 800d962:	4603      	mov	r3, r0
 800d964:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d968:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d003      	beq.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d970:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d974:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d980:	2100      	movs	r1, #0
 800d982:	6139      	str	r1, [r7, #16]
 800d984:	f003 0308 	and.w	r3, r3, #8
 800d988:	617b      	str	r3, [r7, #20]
 800d98a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d98e:	460b      	mov	r3, r1
 800d990:	4313      	orrs	r3, r2
 800d992:	d011      	beq.n	800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d998:	3328      	adds	r3, #40	@ 0x28
 800d99a:	2100      	movs	r1, #0
 800d99c:	4618      	mov	r0, r3
 800d99e:	f001 f9ef 	bl	800ed80 <RCCEx_PLL3_Config>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d9a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d003      	beq.n	800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d9b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	60b9      	str	r1, [r7, #8]
 800d9c4:	f003 0310 	and.w	r3, r3, #16
 800d9c8:	60fb      	str	r3, [r7, #12]
 800d9ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	d011      	beq.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9d8:	3328      	adds	r3, #40	@ 0x28
 800d9da:	2101      	movs	r1, #1
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f001 f9cf 	bl	800ed80 <RCCEx_PLL3_Config>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d9e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d003      	beq.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d9f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da00:	2100      	movs	r1, #0
 800da02:	6039      	str	r1, [r7, #0]
 800da04:	f003 0320 	and.w	r3, r3, #32
 800da08:	607b      	str	r3, [r7, #4]
 800da0a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800da0e:	460b      	mov	r3, r1
 800da10:	4313      	orrs	r3, r2
 800da12:	d011      	beq.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800da14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da18:	3328      	adds	r3, #40	@ 0x28
 800da1a:	2102      	movs	r1, #2
 800da1c:	4618      	mov	r0, r3
 800da1e:	f001 f9af 	bl	800ed80 <RCCEx_PLL3_Config>
 800da22:	4603      	mov	r3, r0
 800da24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800da28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d003      	beq.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800da34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800da38:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d101      	bne.n	800da44 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800da40:	2300      	movs	r3, #0
 800da42:	e000      	b.n	800da46 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800da44:	2301      	movs	r3, #1
}
 800da46:	4618      	mov	r0, r3
 800da48:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800da4c:	46bd      	mov	sp, r7
 800da4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800da52:	bf00      	nop
 800da54:	58024400 	.word	0x58024400

0800da58 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b090      	sub	sp, #64	@ 0x40
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800da62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da66:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800da6a:	430b      	orrs	r3, r1
 800da6c:	f040 8094 	bne.w	800db98 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800da70:	4b9b      	ldr	r3, [pc, #620]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800da72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da74:	f003 0307 	and.w	r3, r3, #7
 800da78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800da7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da7c:	2b04      	cmp	r3, #4
 800da7e:	f200 8087 	bhi.w	800db90 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800da82:	a201      	add	r2, pc, #4	@ (adr r2, 800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800da84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da88:	0800da9d 	.word	0x0800da9d
 800da8c:	0800dac5 	.word	0x0800dac5
 800da90:	0800daed 	.word	0x0800daed
 800da94:	0800db89 	.word	0x0800db89
 800da98:	0800db15 	.word	0x0800db15
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800da9c:	4b90      	ldr	r3, [pc, #576]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800daa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800daa8:	d108      	bne.n	800dabc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800daaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800daae:	4618      	mov	r0, r3
 800dab0:	f000 ff62 	bl	800e978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dab8:	f000 bc93 	b.w	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dabc:	2300      	movs	r3, #0
 800dabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dac0:	f000 bc8f 	b.w	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dac4:	4b86      	ldr	r3, [pc, #536]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dacc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dad0:	d108      	bne.n	800dae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dad2:	f107 0318 	add.w	r3, r7, #24
 800dad6:	4618      	mov	r0, r3
 800dad8:	f000 fca6 	bl	800e428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dae0:	f000 bc7f 	b.w	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dae4:	2300      	movs	r3, #0
 800dae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dae8:	f000 bc7b 	b.w	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800daec:	4b7c      	ldr	r3, [pc, #496]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800daf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800daf8:	d108      	bne.n	800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dafa:	f107 030c 	add.w	r3, r7, #12
 800dafe:	4618      	mov	r0, r3
 800db00:	f000 fde6 	bl	800e6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db08:	f000 bc6b 	b.w	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db0c:	2300      	movs	r3, #0
 800db0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db10:	f000 bc67 	b.w	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800db14:	4b72      	ldr	r3, [pc, #456]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800db16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800db1c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800db1e:	4b70      	ldr	r3, [pc, #448]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f003 0304 	and.w	r3, r3, #4
 800db26:	2b04      	cmp	r3, #4
 800db28:	d10c      	bne.n	800db44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800db2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d109      	bne.n	800db44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db30:	4b6b      	ldr	r3, [pc, #428]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	08db      	lsrs	r3, r3, #3
 800db36:	f003 0303 	and.w	r3, r3, #3
 800db3a:	4a6a      	ldr	r2, [pc, #424]	@ (800dce4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800db3c:	fa22 f303 	lsr.w	r3, r2, r3
 800db40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db42:	e01f      	b.n	800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800db44:	4b66      	ldr	r3, [pc, #408]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db50:	d106      	bne.n	800db60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800db52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db58:	d102      	bne.n	800db60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800db5a:	4b63      	ldr	r3, [pc, #396]	@ (800dce8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800db5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db5e:	e011      	b.n	800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800db60:	4b5f      	ldr	r3, [pc, #380]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db6c:	d106      	bne.n	800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800db6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db74:	d102      	bne.n	800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800db76:	4b5d      	ldr	r3, [pc, #372]	@ (800dcec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db7a:	e003      	b.n	800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800db7c:	2300      	movs	r3, #0
 800db7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800db80:	f000 bc2f 	b.w	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800db84:	f000 bc2d 	b.w	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800db88:	4b59      	ldr	r3, [pc, #356]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800db8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db8c:	f000 bc29 	b.w	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800db90:	2300      	movs	r3, #0
 800db92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db94:	f000 bc25 	b.w	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800db98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db9c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800dba0:	430b      	orrs	r3, r1
 800dba2:	f040 80a7 	bne.w	800dcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800dba6:	4b4e      	ldr	r3, [pc, #312]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbaa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800dbae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800dbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dbb6:	d054      	beq.n	800dc62 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dbbe:	f200 808b 	bhi.w	800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800dbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dbc8:	f000 8083 	beq.w	800dcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800dbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dbd2:	f200 8081 	bhi.w	800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800dbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dbdc:	d02f      	beq.n	800dc3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800dbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dbe4:	d878      	bhi.n	800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d004      	beq.n	800dbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800dbec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dbf2:	d012      	beq.n	800dc1a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800dbf4:	e070      	b.n	800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dbf6:	4b3a      	ldr	r3, [pc, #232]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc02:	d107      	bne.n	800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f000 feb5 	bl	800e978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc12:	e3e6      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc14:	2300      	movs	r3, #0
 800dc16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc18:	e3e3      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dc1a:	4b31      	ldr	r3, [pc, #196]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dc26:	d107      	bne.n	800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc28:	f107 0318 	add.w	r3, r7, #24
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f000 fbfb 	bl	800e428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc36:	e3d4      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc3c:	e3d1      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dc3e:	4b28      	ldr	r3, [pc, #160]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dc46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc4a:	d107      	bne.n	800dc5c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc4c:	f107 030c 	add.w	r3, r7, #12
 800dc50:	4618      	mov	r0, r3
 800dc52:	f000 fd3d 	bl	800e6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc5a:	e3c2      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc60:	e3bf      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dc62:	4b1f      	ldr	r3, [pc, #124]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dc64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800dc6a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dc6c:	4b1c      	ldr	r3, [pc, #112]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f003 0304 	and.w	r3, r3, #4
 800dc74:	2b04      	cmp	r3, #4
 800dc76:	d10c      	bne.n	800dc92 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800dc78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d109      	bne.n	800dc92 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc7e:	4b18      	ldr	r3, [pc, #96]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	08db      	lsrs	r3, r3, #3
 800dc84:	f003 0303 	and.w	r3, r3, #3
 800dc88:	4a16      	ldr	r2, [pc, #88]	@ (800dce4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800dc8a:	fa22 f303 	lsr.w	r3, r2, r3
 800dc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc90:	e01e      	b.n	800dcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dc92:	4b13      	ldr	r3, [pc, #76]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc9e:	d106      	bne.n	800dcae <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800dca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dca2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dca6:	d102      	bne.n	800dcae <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dca8:	4b0f      	ldr	r3, [pc, #60]	@ (800dce8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800dcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dcac:	e010      	b.n	800dcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dcae:	4b0c      	ldr	r3, [pc, #48]	@ (800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dcb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dcba:	d106      	bne.n	800dcca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800dcbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dcc2:	d102      	bne.n	800dcca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dcc4:	4b09      	ldr	r3, [pc, #36]	@ (800dcec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dcc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dcc8:	e002      	b.n	800dcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dcca:	2300      	movs	r3, #0
 800dccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800dcce:	e388      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dcd0:	e387      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dcd2:	4b07      	ldr	r3, [pc, #28]	@ (800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800dcd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcd6:	e384      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcdc:	e381      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dcde:	bf00      	nop
 800dce0:	58024400 	.word	0x58024400
 800dce4:	03d09000 	.word	0x03d09000
 800dce8:	003d0900 	.word	0x003d0900
 800dcec:	017d7840 	.word	0x017d7840
 800dcf0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800dcf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcf8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800dcfc:	430b      	orrs	r3, r1
 800dcfe:	f040 809c 	bne.w	800de3a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800dd02:	4b9e      	ldr	r3, [pc, #632]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd06:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800dd0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dd12:	d054      	beq.n	800ddbe <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800dd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dd1a:	f200 808b 	bhi.w	800de34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800dd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dd24:	f000 8083 	beq.w	800de2e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800dd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dd2e:	f200 8081 	bhi.w	800de34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800dd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd38:	d02f      	beq.n	800dd9a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800dd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd40:	d878      	bhi.n	800de34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800dd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d004      	beq.n	800dd52 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800dd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd4e:	d012      	beq.n	800dd76 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800dd50:	e070      	b.n	800de34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dd52:	4b8a      	ldr	r3, [pc, #552]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd5e:	d107      	bne.n	800dd70 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dd60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd64:	4618      	mov	r0, r3
 800dd66:	f000 fe07 	bl	800e978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dd6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd6e:	e338      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd70:	2300      	movs	r3, #0
 800dd72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd74:	e335      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dd76:	4b81      	ldr	r3, [pc, #516]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dd82:	d107      	bne.n	800dd94 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd84:	f107 0318 	add.w	r3, r7, #24
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f000 fb4d 	bl	800e428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd92:	e326      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd94:	2300      	movs	r3, #0
 800dd96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd98:	e323      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dd9a:	4b78      	ldr	r3, [pc, #480]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dda2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dda6:	d107      	bne.n	800ddb8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dda8:	f107 030c 	add.w	r3, r7, #12
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 fc8f 	bl	800e6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddb6:	e314      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddbc:	e311      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ddbe:	4b6f      	ldr	r3, [pc, #444]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ddc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ddc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ddc6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ddc8:	4b6c      	ldr	r3, [pc, #432]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f003 0304 	and.w	r3, r3, #4
 800ddd0:	2b04      	cmp	r3, #4
 800ddd2:	d10c      	bne.n	800ddee <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ddd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d109      	bne.n	800ddee <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ddda:	4b68      	ldr	r3, [pc, #416]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	08db      	lsrs	r3, r3, #3
 800dde0:	f003 0303 	and.w	r3, r3, #3
 800dde4:	4a66      	ldr	r2, [pc, #408]	@ (800df80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800dde6:	fa22 f303 	lsr.w	r3, r2, r3
 800ddea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ddec:	e01e      	b.n	800de2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ddee:	4b63      	ldr	r3, [pc, #396]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ddf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ddfa:	d106      	bne.n	800de0a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ddfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de02:	d102      	bne.n	800de0a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800de04:	4b5f      	ldr	r3, [pc, #380]	@ (800df84 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800de06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800de08:	e010      	b.n	800de2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800de0a:	4b5c      	ldr	r3, [pc, #368]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de16:	d106      	bne.n	800de26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800de18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de1e:	d102      	bne.n	800de26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800de20:	4b59      	ldr	r3, [pc, #356]	@ (800df88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800de22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800de24:	e002      	b.n	800de2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800de26:	2300      	movs	r3, #0
 800de28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800de2a:	e2da      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800de2c:	e2d9      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800de2e:	4b57      	ldr	r3, [pc, #348]	@ (800df8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800de30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de32:	e2d6      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800de34:	2300      	movs	r3, #0
 800de36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de38:	e2d3      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800de3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de3e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800de42:	430b      	orrs	r3, r1
 800de44:	f040 80a7 	bne.w	800df96 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800de48:	4b4c      	ldr	r3, [pc, #304]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800de4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de4c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800de50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800de52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800de58:	d055      	beq.n	800df06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800de5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800de60:	f200 8096 	bhi.w	800df90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800de64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800de6a:	f000 8084 	beq.w	800df76 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800de6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800de74:	f200 808c 	bhi.w	800df90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800de78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de7e:	d030      	beq.n	800dee2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800de80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de86:	f200 8083 	bhi.w	800df90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800de8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d004      	beq.n	800de9a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800de90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de96:	d012      	beq.n	800debe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800de98:	e07a      	b.n	800df90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800de9a:	4b38      	ldr	r3, [pc, #224]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dea2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dea6:	d107      	bne.n	800deb8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800deac:	4618      	mov	r0, r3
 800deae:	f000 fd63 	bl	800e978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800deb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800deb6:	e294      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800deb8:	2300      	movs	r3, #0
 800deba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800debc:	e291      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800debe:	4b2f      	ldr	r3, [pc, #188]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800deca:	d107      	bne.n	800dedc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800decc:	f107 0318 	add.w	r3, r7, #24
 800ded0:	4618      	mov	r0, r3
 800ded2:	f000 faa9 	bl	800e428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800deda:	e282      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dedc:	2300      	movs	r3, #0
 800dede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dee0:	e27f      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dee2:	4b26      	ldr	r3, [pc, #152]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800deea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800deee:	d107      	bne.n	800df00 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800def0:	f107 030c 	add.w	r3, r7, #12
 800def4:	4618      	mov	r0, r3
 800def6:	f000 fbeb 	bl	800e6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800defe:	e270      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800df00:	2300      	movs	r3, #0
 800df02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df04:	e26d      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800df06:	4b1d      	ldr	r3, [pc, #116]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800df08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800df0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800df10:	4b1a      	ldr	r3, [pc, #104]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f003 0304 	and.w	r3, r3, #4
 800df18:	2b04      	cmp	r3, #4
 800df1a:	d10c      	bne.n	800df36 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800df1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d109      	bne.n	800df36 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800df22:	4b16      	ldr	r3, [pc, #88]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	08db      	lsrs	r3, r3, #3
 800df28:	f003 0303 	and.w	r3, r3, #3
 800df2c:	4a14      	ldr	r2, [pc, #80]	@ (800df80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800df2e:	fa22 f303 	lsr.w	r3, r2, r3
 800df32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df34:	e01e      	b.n	800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800df36:	4b11      	ldr	r3, [pc, #68]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df42:	d106      	bne.n	800df52 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800df44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df4a:	d102      	bne.n	800df52 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800df4c:	4b0d      	ldr	r3, [pc, #52]	@ (800df84 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800df4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df50:	e010      	b.n	800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800df52:	4b0a      	ldr	r3, [pc, #40]	@ (800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df5e:	d106      	bne.n	800df6e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800df60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df66:	d102      	bne.n	800df6e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800df68:	4b07      	ldr	r3, [pc, #28]	@ (800df88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800df6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df6c:	e002      	b.n	800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800df6e:	2300      	movs	r3, #0
 800df70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800df72:	e236      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800df74:	e235      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800df76:	4b05      	ldr	r3, [pc, #20]	@ (800df8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800df78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df7a:	e232      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800df7c:	58024400 	.word	0x58024400
 800df80:	03d09000 	.word	0x03d09000
 800df84:	003d0900 	.word	0x003d0900
 800df88:	017d7840 	.word	0x017d7840
 800df8c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800df90:	2300      	movs	r3, #0
 800df92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df94:	e225      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800df96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df9a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800df9e:	430b      	orrs	r3, r1
 800dfa0:	f040 8085 	bne.w	800e0ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800dfa4:	4b9c      	ldr	r3, [pc, #624]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dfa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfa8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800dfac:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800dfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dfb4:	d06b      	beq.n	800e08e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dfbc:	d874      	bhi.n	800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800dfbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dfc4:	d056      	beq.n	800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800dfc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dfcc:	d86c      	bhi.n	800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800dfce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dfd4:	d03b      	beq.n	800e04e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800dfd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dfdc:	d864      	bhi.n	800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800dfde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dfe4:	d021      	beq.n	800e02a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800dfe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dfec:	d85c      	bhi.n	800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800dfee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d004      	beq.n	800dffe <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800dff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dffa:	d004      	beq.n	800e006 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800dffc:	e054      	b.n	800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800dffe:	f7fe fb5f 	bl	800c6c0 <HAL_RCC_GetPCLK1Freq>
 800e002:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e004:	e1ed      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e006:	4b84      	ldr	r3, [pc, #528]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e00e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e012:	d107      	bne.n	800e024 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e014:	f107 0318 	add.w	r3, r7, #24
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 fa05 	bl	800e428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e022:	e1de      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e024:	2300      	movs	r3, #0
 800e026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e028:	e1db      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e02a:	4b7b      	ldr	r3, [pc, #492]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e036:	d107      	bne.n	800e048 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e038:	f107 030c 	add.w	r3, r7, #12
 800e03c:	4618      	mov	r0, r3
 800e03e:	f000 fb47 	bl	800e6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e046:	e1cc      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e048:	2300      	movs	r3, #0
 800e04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e04c:	e1c9      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e04e:	4b72      	ldr	r3, [pc, #456]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f003 0304 	and.w	r3, r3, #4
 800e056:	2b04      	cmp	r3, #4
 800e058:	d109      	bne.n	800e06e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e05a:	4b6f      	ldr	r3, [pc, #444]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	08db      	lsrs	r3, r3, #3
 800e060:	f003 0303 	and.w	r3, r3, #3
 800e064:	4a6d      	ldr	r2, [pc, #436]	@ (800e21c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800e066:	fa22 f303 	lsr.w	r3, r2, r3
 800e06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e06c:	e1b9      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e06e:	2300      	movs	r3, #0
 800e070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e072:	e1b6      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e074:	4b68      	ldr	r3, [pc, #416]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e07c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e080:	d102      	bne.n	800e088 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800e082:	4b67      	ldr	r3, [pc, #412]	@ (800e220 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800e084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e086:	e1ac      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e088:	2300      	movs	r3, #0
 800e08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e08c:	e1a9      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e08e:	4b62      	ldr	r3, [pc, #392]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e096:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e09a:	d102      	bne.n	800e0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800e09c:	4b61      	ldr	r3, [pc, #388]	@ (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800e09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0a0:	e19f      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0a6:	e19c      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0ac:	e199      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e0ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0b2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800e0b6:	430b      	orrs	r3, r1
 800e0b8:	d173      	bne.n	800e1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e0ba:	4b57      	ldr	r3, [pc, #348]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e0bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e0c2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e0ca:	d02f      	beq.n	800e12c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800e0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e0d2:	d863      	bhi.n	800e19c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800e0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d004      	beq.n	800e0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800e0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0e0:	d012      	beq.n	800e108 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800e0e2:	e05b      	b.n	800e19c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e0e4:	4b4c      	ldr	r3, [pc, #304]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e0ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e0f0:	d107      	bne.n	800e102 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0f2:	f107 0318 	add.w	r3, r7, #24
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f000 f996 	bl	800e428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e100:	e16f      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e102:	2300      	movs	r3, #0
 800e104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e106:	e16c      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e108:	4b43      	ldr	r3, [pc, #268]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e114:	d107      	bne.n	800e126 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e116:	f107 030c 	add.w	r3, r7, #12
 800e11a:	4618      	mov	r0, r3
 800e11c:	f000 fad8 	bl	800e6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e124:	e15d      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e126:	2300      	movs	r3, #0
 800e128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e12a:	e15a      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e12c:	4b3a      	ldr	r3, [pc, #232]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e12e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e130:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e134:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e136:	4b38      	ldr	r3, [pc, #224]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f003 0304 	and.w	r3, r3, #4
 800e13e:	2b04      	cmp	r3, #4
 800e140:	d10c      	bne.n	800e15c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800e142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e144:	2b00      	cmp	r3, #0
 800e146:	d109      	bne.n	800e15c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e148:	4b33      	ldr	r3, [pc, #204]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	08db      	lsrs	r3, r3, #3
 800e14e:	f003 0303 	and.w	r3, r3, #3
 800e152:	4a32      	ldr	r2, [pc, #200]	@ (800e21c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800e154:	fa22 f303 	lsr.w	r3, r2, r3
 800e158:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e15a:	e01e      	b.n	800e19a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e15c:	4b2e      	ldr	r3, [pc, #184]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e168:	d106      	bne.n	800e178 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800e16a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e16c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e170:	d102      	bne.n	800e178 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e172:	4b2b      	ldr	r3, [pc, #172]	@ (800e220 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800e174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e176:	e010      	b.n	800e19a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e178:	4b27      	ldr	r3, [pc, #156]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e180:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e184:	d106      	bne.n	800e194 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800e186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e18c:	d102      	bne.n	800e194 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e18e:	4b25      	ldr	r3, [pc, #148]	@ (800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800e190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e192:	e002      	b.n	800e19a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e194:	2300      	movs	r3, #0
 800e196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e198:	e123      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e19a:	e122      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e19c:	2300      	movs	r3, #0
 800e19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1a0:	e11f      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e1a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1a6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800e1aa:	430b      	orrs	r3, r1
 800e1ac:	d13c      	bne.n	800e228 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e1ae:	4b1a      	ldr	r3, [pc, #104]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e1b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e1b6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d004      	beq.n	800e1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800e1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1c4:	d012      	beq.n	800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800e1c6:	e023      	b.n	800e210 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e1c8:	4b13      	ldr	r3, [pc, #76]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e1d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e1d4:	d107      	bne.n	800e1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e1d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f000 fbcc 	bl	800e978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1e4:	e0fd      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1ea:	e0fa      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e1f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e1f8:	d107      	bne.n	800e20a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1fa:	f107 0318 	add.w	r3, r7, #24
 800e1fe:	4618      	mov	r0, r3
 800e200:	f000 f912 	bl	800e428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e204:	6a3b      	ldr	r3, [r7, #32]
 800e206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e208:	e0eb      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e20a:	2300      	movs	r3, #0
 800e20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e20e:	e0e8      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e210:	2300      	movs	r3, #0
 800e212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e214:	e0e5      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e216:	bf00      	nop
 800e218:	58024400 	.word	0x58024400
 800e21c:	03d09000 	.word	0x03d09000
 800e220:	003d0900 	.word	0x003d0900
 800e224:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e22c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800e230:	430b      	orrs	r3, r1
 800e232:	f040 8085 	bne.w	800e340 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e236:	4b6d      	ldr	r3, [pc, #436]	@ (800e3ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e23a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800e23e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e242:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e246:	d06b      	beq.n	800e320 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800e248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e24a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e24e:	d874      	bhi.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e256:	d056      	beq.n	800e306 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800e258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e25e:	d86c      	bhi.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e262:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e266:	d03b      	beq.n	800e2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800e268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e26a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e26e:	d864      	bhi.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e276:	d021      	beq.n	800e2bc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800e278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e27a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e27e:	d85c      	bhi.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e282:	2b00      	cmp	r3, #0
 800e284:	d004      	beq.n	800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800e286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e28c:	d004      	beq.n	800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800e28e:	e054      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e290:	f000 f8b4 	bl	800e3fc <HAL_RCCEx_GetD3PCLK1Freq>
 800e294:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e296:	e0a4      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e298:	4b54      	ldr	r3, [pc, #336]	@ (800e3ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e2a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e2a4:	d107      	bne.n	800e2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2a6:	f107 0318 	add.w	r3, r7, #24
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f000 f8bc 	bl	800e428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2b4:	e095      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2ba:	e092      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e2bc:	4b4b      	ldr	r3, [pc, #300]	@ (800e3ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e2c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e2c8:	d107      	bne.n	800e2da <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2ca:	f107 030c 	add.w	r3, r7, #12
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f000 f9fe 	bl	800e6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2d8:	e083      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2de:	e080      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e2e0:	4b42      	ldr	r3, [pc, #264]	@ (800e3ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f003 0304 	and.w	r3, r3, #4
 800e2e8:	2b04      	cmp	r3, #4
 800e2ea:	d109      	bne.n	800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e2ec:	4b3f      	ldr	r3, [pc, #252]	@ (800e3ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	08db      	lsrs	r3, r3, #3
 800e2f2:	f003 0303 	and.w	r3, r3, #3
 800e2f6:	4a3e      	ldr	r2, [pc, #248]	@ (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800e2f8:	fa22 f303 	lsr.w	r3, r2, r3
 800e2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2fe:	e070      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e300:	2300      	movs	r3, #0
 800e302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e304:	e06d      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e306:	4b39      	ldr	r3, [pc, #228]	@ (800e3ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e30e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e312:	d102      	bne.n	800e31a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800e314:	4b37      	ldr	r3, [pc, #220]	@ (800e3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e318:	e063      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e31e:	e060      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e320:	4b32      	ldr	r3, [pc, #200]	@ (800e3ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e328:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e32c:	d102      	bne.n	800e334 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800e32e:	4b32      	ldr	r3, [pc, #200]	@ (800e3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800e330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e332:	e056      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e334:	2300      	movs	r3, #0
 800e336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e338:	e053      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e33a:	2300      	movs	r3, #0
 800e33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e33e:	e050      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e340:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e344:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800e348:	430b      	orrs	r3, r1
 800e34a:	d148      	bne.n	800e3de <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e34c:	4b27      	ldr	r3, [pc, #156]	@ (800e3ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e34e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e350:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e354:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e35c:	d02a      	beq.n	800e3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800e35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e364:	d838      	bhi.n	800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800e366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d004      	beq.n	800e376 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800e36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e36e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e372:	d00d      	beq.n	800e390 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800e374:	e030      	b.n	800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e376:	4b1d      	ldr	r3, [pc, #116]	@ (800e3ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e37e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e382:	d102      	bne.n	800e38a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800e384:	4b1c      	ldr	r3, [pc, #112]	@ (800e3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800e386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e388:	e02b      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e38e:	e028      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e390:	4b16      	ldr	r3, [pc, #88]	@ (800e3ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e398:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e39c:	d107      	bne.n	800e3ae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e39e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f000 fae8 	bl	800e978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3ac:	e019      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3b2:	e016      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e3b4:	4b0d      	ldr	r3, [pc, #52]	@ (800e3ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e3bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e3c0:	d107      	bne.n	800e3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3c2:	f107 0318 	add.w	r3, r7, #24
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f000 f82e 	bl	800e428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3d0:	e007      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3d6:	e004      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3dc:	e001      	b.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800e3e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3740      	adds	r7, #64	@ 0x40
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	58024400 	.word	0x58024400
 800e3f0:	03d09000 	.word	0x03d09000
 800e3f4:	003d0900 	.word	0x003d0900
 800e3f8:	017d7840 	.word	0x017d7840

0800e3fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e400:	f7fe f92e 	bl	800c660 <HAL_RCC_GetHCLKFreq>
 800e404:	4602      	mov	r2, r0
 800e406:	4b06      	ldr	r3, [pc, #24]	@ (800e420 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e408:	6a1b      	ldr	r3, [r3, #32]
 800e40a:	091b      	lsrs	r3, r3, #4
 800e40c:	f003 0307 	and.w	r3, r3, #7
 800e410:	4904      	ldr	r1, [pc, #16]	@ (800e424 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e412:	5ccb      	ldrb	r3, [r1, r3]
 800e414:	f003 031f 	and.w	r3, r3, #31
 800e418:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	58024400 	.word	0x58024400
 800e424:	0801d504 	.word	0x0801d504

0800e428 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e428:	b480      	push	{r7}
 800e42a:	b089      	sub	sp, #36	@ 0x24
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e430:	4ba1      	ldr	r3, [pc, #644]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e434:	f003 0303 	and.w	r3, r3, #3
 800e438:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e43a:	4b9f      	ldr	r3, [pc, #636]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e43e:	0b1b      	lsrs	r3, r3, #12
 800e440:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e444:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e446:	4b9c      	ldr	r3, [pc, #624]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e44a:	091b      	lsrs	r3, r3, #4
 800e44c:	f003 0301 	and.w	r3, r3, #1
 800e450:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e452:	4b99      	ldr	r3, [pc, #612]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e456:	08db      	lsrs	r3, r3, #3
 800e458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e45c:	693a      	ldr	r2, [r7, #16]
 800e45e:	fb02 f303 	mul.w	r3, r2, r3
 800e462:	ee07 3a90 	vmov	s15, r3
 800e466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e46a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	2b00      	cmp	r3, #0
 800e472:	f000 8111 	beq.w	800e698 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e476:	69bb      	ldr	r3, [r7, #24]
 800e478:	2b02      	cmp	r3, #2
 800e47a:	f000 8083 	beq.w	800e584 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	2b02      	cmp	r3, #2
 800e482:	f200 80a1 	bhi.w	800e5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d003      	beq.n	800e494 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d056      	beq.n	800e540 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e492:	e099      	b.n	800e5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e494:	4b88      	ldr	r3, [pc, #544]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f003 0320 	and.w	r3, r3, #32
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d02d      	beq.n	800e4fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e4a0:	4b85      	ldr	r3, [pc, #532]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	08db      	lsrs	r3, r3, #3
 800e4a6:	f003 0303 	and.w	r3, r3, #3
 800e4aa:	4a84      	ldr	r2, [pc, #528]	@ (800e6bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800e4b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	ee07 3a90 	vmov	s15, r3
 800e4b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	ee07 3a90 	vmov	s15, r3
 800e4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4ca:	4b7b      	ldr	r3, [pc, #492]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e4cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4d2:	ee07 3a90 	vmov	s15, r3
 800e4d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4da:	ed97 6a03 	vldr	s12, [r7, #12]
 800e4de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e4e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e4e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e4ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e4fa:	e087      	b.n	800e60c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	ee07 3a90 	vmov	s15, r3
 800e502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e506:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e50a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e50e:	4b6a      	ldr	r3, [pc, #424]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e516:	ee07 3a90 	vmov	s15, r3
 800e51a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e51e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e522:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e52a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e52e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e53a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e53e:	e065      	b.n	800e60c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	ee07 3a90 	vmov	s15, r3
 800e546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e54a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e54e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e552:	4b59      	ldr	r3, [pc, #356]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e55a:	ee07 3a90 	vmov	s15, r3
 800e55e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e562:	ed97 6a03 	vldr	s12, [r7, #12]
 800e566:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e56a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e56e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e57e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e582:	e043      	b.n	800e60c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	ee07 3a90 	vmov	s15, r3
 800e58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e58e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e6cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e596:	4b48      	ldr	r3, [pc, #288]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e59e:	ee07 3a90 	vmov	s15, r3
 800e5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e5ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5c6:	e021      	b.n	800e60c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	ee07 3a90 	vmov	s15, r3
 800e5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e5d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5da:	4b37      	ldr	r3, [pc, #220]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5e2:	ee07 3a90 	vmov	s15, r3
 800e5e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e5f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e602:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e60a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e60c:	4b2a      	ldr	r3, [pc, #168]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e610:	0a5b      	lsrs	r3, r3, #9
 800e612:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e616:	ee07 3a90 	vmov	s15, r3
 800e61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e61e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e622:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e626:	edd7 6a07 	vldr	s13, [r7, #28]
 800e62a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e62e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e632:	ee17 2a90 	vmov	r2, s15
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e63a:	4b1f      	ldr	r3, [pc, #124]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e63c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e63e:	0c1b      	lsrs	r3, r3, #16
 800e640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e644:	ee07 3a90 	vmov	s15, r3
 800e648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e64c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e650:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e654:	edd7 6a07 	vldr	s13, [r7, #28]
 800e658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e65c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e660:	ee17 2a90 	vmov	r2, s15
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e668:	4b13      	ldr	r3, [pc, #76]	@ (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e66a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e66c:	0e1b      	lsrs	r3, r3, #24
 800e66e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e672:	ee07 3a90 	vmov	s15, r3
 800e676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e67a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e67e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e682:	edd7 6a07 	vldr	s13, [r7, #28]
 800e686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e68a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e68e:	ee17 2a90 	vmov	r2, s15
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e696:	e008      	b.n	800e6aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	609a      	str	r2, [r3, #8]
}
 800e6aa:	bf00      	nop
 800e6ac:	3724      	adds	r7, #36	@ 0x24
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr
 800e6b6:	bf00      	nop
 800e6b8:	58024400 	.word	0x58024400
 800e6bc:	03d09000 	.word	0x03d09000
 800e6c0:	46000000 	.word	0x46000000
 800e6c4:	4c742400 	.word	0x4c742400
 800e6c8:	4a742400 	.word	0x4a742400
 800e6cc:	4bbebc20 	.word	0x4bbebc20

0800e6d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b089      	sub	sp, #36	@ 0x24
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e6d8:	4ba1      	ldr	r3, [pc, #644]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6dc:	f003 0303 	and.w	r3, r3, #3
 800e6e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e6e2:	4b9f      	ldr	r3, [pc, #636]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6e6:	0d1b      	lsrs	r3, r3, #20
 800e6e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e6ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e6ee:	4b9c      	ldr	r3, [pc, #624]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f2:	0a1b      	lsrs	r3, r3, #8
 800e6f4:	f003 0301 	and.w	r3, r3, #1
 800e6f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e6fa:	4b99      	ldr	r3, [pc, #612]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6fe:	08db      	lsrs	r3, r3, #3
 800e700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e704:	693a      	ldr	r2, [r7, #16]
 800e706:	fb02 f303 	mul.w	r3, r2, r3
 800e70a:	ee07 3a90 	vmov	s15, r3
 800e70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e712:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f000 8111 	beq.w	800e940 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e71e:	69bb      	ldr	r3, [r7, #24]
 800e720:	2b02      	cmp	r3, #2
 800e722:	f000 8083 	beq.w	800e82c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	2b02      	cmp	r3, #2
 800e72a:	f200 80a1 	bhi.w	800e870 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d003      	beq.n	800e73c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	2b01      	cmp	r3, #1
 800e738:	d056      	beq.n	800e7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e73a:	e099      	b.n	800e870 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e73c:	4b88      	ldr	r3, [pc, #544]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f003 0320 	and.w	r3, r3, #32
 800e744:	2b00      	cmp	r3, #0
 800e746:	d02d      	beq.n	800e7a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e748:	4b85      	ldr	r3, [pc, #532]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	08db      	lsrs	r3, r3, #3
 800e74e:	f003 0303 	and.w	r3, r3, #3
 800e752:	4a84      	ldr	r2, [pc, #528]	@ (800e964 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e754:	fa22 f303 	lsr.w	r3, r2, r3
 800e758:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	ee07 3a90 	vmov	s15, r3
 800e760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	ee07 3a90 	vmov	s15, r3
 800e76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e76e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e772:	4b7b      	ldr	r3, [pc, #492]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e77a:	ee07 3a90 	vmov	s15, r3
 800e77e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e782:	ed97 6a03 	vldr	s12, [r7, #12]
 800e786:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e78a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e78e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e79a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e79e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e7a2:	e087      	b.n	800e8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	ee07 3a90 	vmov	s15, r3
 800e7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e96c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e7b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7b6:	4b6a      	ldr	r3, [pc, #424]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7be:	ee07 3a90 	vmov	s15, r3
 800e7c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e7ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e7ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e7da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e7e6:	e065      	b.n	800e8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	ee07 3a90 	vmov	s15, r3
 800e7ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e7f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7fa:	4b59      	ldr	r3, [pc, #356]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e802:	ee07 3a90 	vmov	s15, r3
 800e806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e80a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e80e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e81a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e81e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e822:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e82a:	e043      	b.n	800e8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	ee07 3a90 	vmov	s15, r3
 800e832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e836:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e974 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e83a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e83e:	4b48      	ldr	r3, [pc, #288]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e846:	ee07 3a90 	vmov	s15, r3
 800e84a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e84e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e852:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e85a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e85e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e86a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e86e:	e021      	b.n	800e8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	ee07 3a90 	vmov	s15, r3
 800e876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e87a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e87e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e882:	4b37      	ldr	r3, [pc, #220]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e88a:	ee07 3a90 	vmov	s15, r3
 800e88e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e892:	ed97 6a03 	vldr	s12, [r7, #12]
 800e896:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e89a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e89e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e8a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e8b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e8b4:	4b2a      	ldr	r3, [pc, #168]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8b8:	0a5b      	lsrs	r3, r3, #9
 800e8ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e8be:	ee07 3a90 	vmov	s15, r3
 800e8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e8ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e8ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800e8d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e8da:	ee17 2a90 	vmov	r2, s15
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e8e2:	4b1f      	ldr	r3, [pc, #124]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8e6:	0c1b      	lsrs	r3, r3, #16
 800e8e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e8ec:	ee07 3a90 	vmov	s15, r3
 800e8f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e8f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e8fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800e900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e908:	ee17 2a90 	vmov	r2, s15
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e910:	4b13      	ldr	r3, [pc, #76]	@ (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e914:	0e1b      	lsrs	r3, r3, #24
 800e916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e91a:	ee07 3a90 	vmov	s15, r3
 800e91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e926:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e92a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e92e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e936:	ee17 2a90 	vmov	r2, s15
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e93e:	e008      	b.n	800e952 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	609a      	str	r2, [r3, #8]
}
 800e952:	bf00      	nop
 800e954:	3724      	adds	r7, #36	@ 0x24
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	58024400 	.word	0x58024400
 800e964:	03d09000 	.word	0x03d09000
 800e968:	46000000 	.word	0x46000000
 800e96c:	4c742400 	.word	0x4c742400
 800e970:	4a742400 	.word	0x4a742400
 800e974:	4bbebc20 	.word	0x4bbebc20

0800e978 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e978:	b480      	push	{r7}
 800e97a:	b089      	sub	sp, #36	@ 0x24
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e980:	4ba0      	ldr	r3, [pc, #640]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e984:	f003 0303 	and.w	r3, r3, #3
 800e988:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e98a:	4b9e      	ldr	r3, [pc, #632]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e98e:	091b      	lsrs	r3, r3, #4
 800e990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e994:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e996:	4b9b      	ldr	r3, [pc, #620]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e99a:	f003 0301 	and.w	r3, r3, #1
 800e99e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e9a0:	4b98      	ldr	r3, [pc, #608]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9a4:	08db      	lsrs	r3, r3, #3
 800e9a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9aa:	693a      	ldr	r2, [r7, #16]
 800e9ac:	fb02 f303 	mul.w	r3, r2, r3
 800e9b0:	ee07 3a90 	vmov	s15, r3
 800e9b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f000 8111 	beq.w	800ebe6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	2b02      	cmp	r3, #2
 800e9c8:	f000 8083 	beq.w	800ead2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	2b02      	cmp	r3, #2
 800e9d0:	f200 80a1 	bhi.w	800eb16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e9d4:	69bb      	ldr	r3, [r7, #24]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d003      	beq.n	800e9e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d056      	beq.n	800ea8e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e9e0:	e099      	b.n	800eb16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9e2:	4b88      	ldr	r3, [pc, #544]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f003 0320 	and.w	r3, r3, #32
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d02d      	beq.n	800ea4a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e9ee:	4b85      	ldr	r3, [pc, #532]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	08db      	lsrs	r3, r3, #3
 800e9f4:	f003 0303 	and.w	r3, r3, #3
 800e9f8:	4a83      	ldr	r2, [pc, #524]	@ (800ec08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e9fa:	fa22 f303 	lsr.w	r3, r2, r3
 800e9fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	ee07 3a90 	vmov	s15, r3
 800ea06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	ee07 3a90 	vmov	s15, r3
 800ea10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea18:	4b7a      	ldr	r3, [pc, #488]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea20:	ee07 3a90 	vmov	s15, r3
 800ea24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea28:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea2c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ec0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ea30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea44:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ea48:	e087      	b.n	800eb5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	ee07 3a90 	vmov	s15, r3
 800ea50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea54:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ec10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ea58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea5c:	4b69      	ldr	r3, [pc, #420]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea64:	ee07 3a90 	vmov	s15, r3
 800ea68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea70:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ec0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ea74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea8c:	e065      	b.n	800eb5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	ee07 3a90 	vmov	s15, r3
 800ea94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea98:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ec14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ea9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eaa0:	4b58      	ldr	r3, [pc, #352]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eaa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eaa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaa8:	ee07 3a90 	vmov	s15, r3
 800eaac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eab0:	ed97 6a03 	vldr	s12, [r7, #12]
 800eab4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ec0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eabc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eac0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eacc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ead0:	e043      	b.n	800eb5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	ee07 3a90 	vmov	s15, r3
 800ead8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eadc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ec18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800eae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eae4:	4b47      	ldr	r3, [pc, #284]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaec:	ee07 3a90 	vmov	s15, r3
 800eaf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eaf4:	ed97 6a03 	vldr	s12, [r7, #12]
 800eaf8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ec0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eafc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eb08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eb14:	e021      	b.n	800eb5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	ee07 3a90 	vmov	s15, r3
 800eb1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb20:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ec10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800eb24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb28:	4b36      	ldr	r3, [pc, #216]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb30:	ee07 3a90 	vmov	s15, r3
 800eb34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb38:	ed97 6a03 	vldr	s12, [r7, #12]
 800eb3c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ec0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eb40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eb4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eb58:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800eb5a:	4b2a      	ldr	r3, [pc, #168]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb5e:	0a5b      	lsrs	r3, r3, #9
 800eb60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb64:	ee07 3a90 	vmov	s15, r3
 800eb68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eb70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb74:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb80:	ee17 2a90 	vmov	r2, s15
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800eb88:	4b1e      	ldr	r3, [pc, #120]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb8c:	0c1b      	lsrs	r3, r3, #16
 800eb8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb92:	ee07 3a90 	vmov	s15, r3
 800eb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eb9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eba2:	edd7 6a07 	vldr	s13, [r7, #28]
 800eba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebae:	ee17 2a90 	vmov	r2, s15
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ebb6:	4b13      	ldr	r3, [pc, #76]	@ (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ebb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebba:	0e1b      	lsrs	r3, r3, #24
 800ebbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ebc0:	ee07 3a90 	vmov	s15, r3
 800ebc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ebcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ebd0:	edd7 6a07 	vldr	s13, [r7, #28]
 800ebd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebdc:	ee17 2a90 	vmov	r2, s15
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ebe4:	e008      	b.n	800ebf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	609a      	str	r2, [r3, #8]
}
 800ebf8:	bf00      	nop
 800ebfa:	3724      	adds	r7, #36	@ 0x24
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr
 800ec04:	58024400 	.word	0x58024400
 800ec08:	03d09000 	.word	0x03d09000
 800ec0c:	46000000 	.word	0x46000000
 800ec10:	4c742400 	.word	0x4c742400
 800ec14:	4a742400 	.word	0x4a742400
 800ec18:	4bbebc20 	.word	0x4bbebc20

0800ec1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ec26:	2300      	movs	r3, #0
 800ec28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ec2a:	4b53      	ldr	r3, [pc, #332]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ec2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec2e:	f003 0303 	and.w	r3, r3, #3
 800ec32:	2b03      	cmp	r3, #3
 800ec34:	d101      	bne.n	800ec3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ec36:	2301      	movs	r3, #1
 800ec38:	e099      	b.n	800ed6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ec3a:	4b4f      	ldr	r3, [pc, #316]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a4e      	ldr	r2, [pc, #312]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ec40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ec44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec46:	f7f6 f991 	bl	8004f6c <HAL_GetTick>
 800ec4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ec4c:	e008      	b.n	800ec60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ec4e:	f7f6 f98d 	bl	8004f6c <HAL_GetTick>
 800ec52:	4602      	mov	r2, r0
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	1ad3      	subs	r3, r2, r3
 800ec58:	2b02      	cmp	r3, #2
 800ec5a:	d901      	bls.n	800ec60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ec5c:	2303      	movs	r3, #3
 800ec5e:	e086      	b.n	800ed6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ec60:	4b45      	ldr	r3, [pc, #276]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1f0      	bne.n	800ec4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ec6c:	4b42      	ldr	r3, [pc, #264]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ec6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec70:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	031b      	lsls	r3, r3, #12
 800ec7a:	493f      	ldr	r1, [pc, #252]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	628b      	str	r3, [r1, #40]	@ 0x28
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	685b      	ldr	r3, [r3, #4]
 800ec84:	3b01      	subs	r3, #1
 800ec86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	689b      	ldr	r3, [r3, #8]
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	025b      	lsls	r3, r3, #9
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	431a      	orrs	r2, r3
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	3b01      	subs	r3, #1
 800ec9c:	041b      	lsls	r3, r3, #16
 800ec9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800eca2:	431a      	orrs	r2, r3
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	3b01      	subs	r3, #1
 800ecaa:	061b      	lsls	r3, r3, #24
 800ecac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ecb0:	4931      	ldr	r1, [pc, #196]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ecb6:	4b30      	ldr	r3, [pc, #192]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ecb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	695b      	ldr	r3, [r3, #20]
 800ecc2:	492d      	ldr	r1, [pc, #180]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ecc8:	4b2b      	ldr	r3, [pc, #172]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ecca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eccc:	f023 0220 	bic.w	r2, r3, #32
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	699b      	ldr	r3, [r3, #24]
 800ecd4:	4928      	ldr	r1, [pc, #160]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ecda:	4b27      	ldr	r3, [pc, #156]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ecdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecde:	4a26      	ldr	r2, [pc, #152]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ece0:	f023 0310 	bic.w	r3, r3, #16
 800ece4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ece6:	4b24      	ldr	r3, [pc, #144]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ece8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ecea:	4b24      	ldr	r3, [pc, #144]	@ (800ed7c <RCCEx_PLL2_Config+0x160>)
 800ecec:	4013      	ands	r3, r2
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	69d2      	ldr	r2, [r2, #28]
 800ecf2:	00d2      	lsls	r2, r2, #3
 800ecf4:	4920      	ldr	r1, [pc, #128]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ecfa:	4b1f      	ldr	r3, [pc, #124]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ecfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecfe:	4a1e      	ldr	r2, [pc, #120]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ed00:	f043 0310 	orr.w	r3, r3, #16
 800ed04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d106      	bne.n	800ed1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ed0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ed0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed10:	4a19      	ldr	r2, [pc, #100]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ed12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ed16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ed18:	e00f      	b.n	800ed3a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d106      	bne.n	800ed2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ed20:	4b15      	ldr	r3, [pc, #84]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ed22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed24:	4a14      	ldr	r2, [pc, #80]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ed26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ed2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ed2c:	e005      	b.n	800ed3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ed2e:	4b12      	ldr	r3, [pc, #72]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ed30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed32:	4a11      	ldr	r2, [pc, #68]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ed34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ed38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ed3a:	4b0f      	ldr	r3, [pc, #60]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4a0e      	ldr	r2, [pc, #56]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ed40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ed44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed46:	f7f6 f911 	bl	8004f6c <HAL_GetTick>
 800ed4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ed4c:	e008      	b.n	800ed60 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ed4e:	f7f6 f90d 	bl	8004f6c <HAL_GetTick>
 800ed52:	4602      	mov	r2, r0
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	1ad3      	subs	r3, r2, r3
 800ed58:	2b02      	cmp	r3, #2
 800ed5a:	d901      	bls.n	800ed60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ed5c:	2303      	movs	r3, #3
 800ed5e:	e006      	b.n	800ed6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ed60:	4b05      	ldr	r3, [pc, #20]	@ (800ed78 <RCCEx_PLL2_Config+0x15c>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d0f0      	beq.n	800ed4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ed6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3710      	adds	r7, #16
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	58024400 	.word	0x58024400
 800ed7c:	ffff0007 	.word	0xffff0007

0800ed80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ed8e:	4b53      	ldr	r3, [pc, #332]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ed90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed92:	f003 0303 	and.w	r3, r3, #3
 800ed96:	2b03      	cmp	r3, #3
 800ed98:	d101      	bne.n	800ed9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e099      	b.n	800eed2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ed9e:	4b4f      	ldr	r3, [pc, #316]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4a4e      	ldr	r2, [pc, #312]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800eda4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eda8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800edaa:	f7f6 f8df 	bl	8004f6c <HAL_GetTick>
 800edae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800edb0:	e008      	b.n	800edc4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800edb2:	f7f6 f8db 	bl	8004f6c <HAL_GetTick>
 800edb6:	4602      	mov	r2, r0
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d901      	bls.n	800edc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800edc0:	2303      	movs	r3, #3
 800edc2:	e086      	b.n	800eed2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800edc4:	4b45      	ldr	r3, [pc, #276]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d1f0      	bne.n	800edb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800edd0:	4b42      	ldr	r3, [pc, #264]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800edd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edd4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	051b      	lsls	r3, r3, #20
 800edde:	493f      	ldr	r1, [pc, #252]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ede0:	4313      	orrs	r3, r2
 800ede2:	628b      	str	r3, [r1, #40]	@ 0x28
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	3b01      	subs	r3, #1
 800edea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	3b01      	subs	r3, #1
 800edf4:	025b      	lsls	r3, r3, #9
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	431a      	orrs	r2, r3
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	3b01      	subs	r3, #1
 800ee00:	041b      	lsls	r3, r3, #16
 800ee02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ee06:	431a      	orrs	r2, r3
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	691b      	ldr	r3, [r3, #16]
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	061b      	lsls	r3, r3, #24
 800ee10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ee14:	4931      	ldr	r1, [pc, #196]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee16:	4313      	orrs	r3, r2
 800ee18:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ee1a:	4b30      	ldr	r3, [pc, #192]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	695b      	ldr	r3, [r3, #20]
 800ee26:	492d      	ldr	r1, [pc, #180]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ee2c:	4b2b      	ldr	r3, [pc, #172]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	699b      	ldr	r3, [r3, #24]
 800ee38:	4928      	ldr	r1, [pc, #160]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee3a:	4313      	orrs	r3, r2
 800ee3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ee3e:	4b27      	ldr	r3, [pc, #156]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee42:	4a26      	ldr	r2, [pc, #152]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ee48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ee4a:	4b24      	ldr	r3, [pc, #144]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee4e:	4b24      	ldr	r3, [pc, #144]	@ (800eee0 <RCCEx_PLL3_Config+0x160>)
 800ee50:	4013      	ands	r3, r2
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	69d2      	ldr	r2, [r2, #28]
 800ee56:	00d2      	lsls	r2, r2, #3
 800ee58:	4920      	ldr	r1, [pc, #128]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee5a:	4313      	orrs	r3, r2
 800ee5c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ee5e:	4b1f      	ldr	r3, [pc, #124]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee62:	4a1e      	ldr	r2, [pc, #120]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ee68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d106      	bne.n	800ee7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ee70:	4b1a      	ldr	r3, [pc, #104]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee74:	4a19      	ldr	r2, [pc, #100]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ee7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ee7c:	e00f      	b.n	800ee9e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d106      	bne.n	800ee92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ee84:	4b15      	ldr	r3, [pc, #84]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee88:	4a14      	ldr	r2, [pc, #80]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ee8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ee90:	e005      	b.n	800ee9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ee92:	4b12      	ldr	r3, [pc, #72]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee96:	4a11      	ldr	r2, [pc, #68]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800ee98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ee9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ee9e:	4b0f      	ldr	r3, [pc, #60]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a0e      	ldr	r2, [pc, #56]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800eea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eeaa:	f7f6 f85f 	bl	8004f6c <HAL_GetTick>
 800eeae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eeb0:	e008      	b.n	800eec4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800eeb2:	f7f6 f85b 	bl	8004f6c <HAL_GetTick>
 800eeb6:	4602      	mov	r2, r0
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	1ad3      	subs	r3, r2, r3
 800eebc:	2b02      	cmp	r3, #2
 800eebe:	d901      	bls.n	800eec4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800eec0:	2303      	movs	r3, #3
 800eec2:	e006      	b.n	800eed2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eec4:	4b05      	ldr	r3, [pc, #20]	@ (800eedc <RCCEx_PLL3_Config+0x15c>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d0f0      	beq.n	800eeb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800eed0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3710      	adds	r7, #16
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop
 800eedc:	58024400 	.word	0x58024400
 800eee0:	ffff0007 	.word	0xffff0007

0800eee4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d101      	bne.n	800eef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eef2:	2301      	movs	r3, #1
 800eef4:	e10f      	b.n	800f116 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2200      	movs	r2, #0
 800eefa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a87      	ldr	r2, [pc, #540]	@ (800f120 <HAL_SPI_Init+0x23c>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d00f      	beq.n	800ef26 <HAL_SPI_Init+0x42>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a86      	ldr	r2, [pc, #536]	@ (800f124 <HAL_SPI_Init+0x240>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d00a      	beq.n	800ef26 <HAL_SPI_Init+0x42>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4a84      	ldr	r2, [pc, #528]	@ (800f128 <HAL_SPI_Init+0x244>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d005      	beq.n	800ef26 <HAL_SPI_Init+0x42>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	2b0f      	cmp	r3, #15
 800ef20:	d901      	bls.n	800ef26 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ef22:	2301      	movs	r3, #1
 800ef24:	e0f7      	b.n	800f116 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 fbbc 	bl	800f6a4 <SPI_GetPacketSize>
 800ef2c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	4a7b      	ldr	r2, [pc, #492]	@ (800f120 <HAL_SPI_Init+0x23c>)
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d00c      	beq.n	800ef52 <HAL_SPI_Init+0x6e>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4a79      	ldr	r2, [pc, #484]	@ (800f124 <HAL_SPI_Init+0x240>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d007      	beq.n	800ef52 <HAL_SPI_Init+0x6e>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	4a78      	ldr	r2, [pc, #480]	@ (800f128 <HAL_SPI_Init+0x244>)
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d002      	beq.n	800ef52 <HAL_SPI_Init+0x6e>
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2b08      	cmp	r3, #8
 800ef50:	d811      	bhi.n	800ef76 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ef56:	4a72      	ldr	r2, [pc, #456]	@ (800f120 <HAL_SPI_Init+0x23c>)
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d009      	beq.n	800ef70 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	4a70      	ldr	r2, [pc, #448]	@ (800f124 <HAL_SPI_Init+0x240>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d004      	beq.n	800ef70 <HAL_SPI_Init+0x8c>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4a6f      	ldr	r2, [pc, #444]	@ (800f128 <HAL_SPI_Init+0x244>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d104      	bne.n	800ef7a <HAL_SPI_Init+0x96>
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2b10      	cmp	r3, #16
 800ef74:	d901      	bls.n	800ef7a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ef76:	2301      	movs	r3, #1
 800ef78:	e0cd      	b.n	800f116 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d106      	bne.n	800ef94 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7f4 f952 	bl	8003238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2202      	movs	r2, #2
 800ef98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f022 0201 	bic.w	r2, r2, #1
 800efaa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800efb6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	699b      	ldr	r3, [r3, #24]
 800efbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800efc0:	d119      	bne.n	800eff6 <HAL_SPI_Init+0x112>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800efca:	d103      	bne.n	800efd4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d008      	beq.n	800efe6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d10c      	bne.n	800eff6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800efe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800efe4:	d107      	bne.n	800eff6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800eff4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800effe:	2b00      	cmp	r3, #0
 800f000:	d00f      	beq.n	800f022 <HAL_SPI_Init+0x13e>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	2b06      	cmp	r3, #6
 800f008:	d90b      	bls.n	800f022 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	430a      	orrs	r2, r1
 800f01e:	601a      	str	r2, [r3, #0]
 800f020:	e007      	b.n	800f032 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f030:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	69da      	ldr	r2, [r3, #28]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f03a:	431a      	orrs	r2, r3
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	431a      	orrs	r2, r3
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f044:	ea42 0103 	orr.w	r1, r2, r3
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	68da      	ldr	r2, [r3, #12]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	430a      	orrs	r2, r1
 800f052:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f05c:	431a      	orrs	r2, r3
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f062:	431a      	orrs	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	699b      	ldr	r3, [r3, #24]
 800f068:	431a      	orrs	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	431a      	orrs	r2, r3
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	695b      	ldr	r3, [r3, #20]
 800f074:	431a      	orrs	r2, r3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6a1b      	ldr	r3, [r3, #32]
 800f07a:	431a      	orrs	r2, r3
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	431a      	orrs	r2, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f086:	431a      	orrs	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	689b      	ldr	r3, [r3, #8]
 800f08c:	431a      	orrs	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f092:	ea42 0103 	orr.w	r1, r2, r3
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	430a      	orrs	r2, r1
 800f0a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d113      	bne.n	800f0d2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	689b      	ldr	r3, [r3, #8]
 800f0b0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f0bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	689b      	ldr	r3, [r3, #8]
 800f0c4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f0d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f022 0201 	bic.w	r2, r2, #1
 800f0e0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00a      	beq.n	800f104 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	430a      	orrs	r2, r1
 800f102:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2201      	movs	r2, #1
 800f110:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3710      	adds	r7, #16
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	40013000 	.word	0x40013000
 800f124:	40003800 	.word	0x40003800
 800f128:	40003c00 	.word	0x40003c00

0800f12c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b088      	sub	sp, #32
 800f130:	af02      	add	r7, sp, #8
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	603b      	str	r3, [r7, #0]
 800f138:	4613      	mov	r3, r2
 800f13a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	3320      	adds	r3, #32
 800f142:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f144:	f7f5 ff12 	bl	8004f6c <HAL_GetTick>
 800f148:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f150:	b2db      	uxtb	r3, r3
 800f152:	2b01      	cmp	r3, #1
 800f154:	d001      	beq.n	800f15a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800f156:	2302      	movs	r3, #2
 800f158:	e1d1      	b.n	800f4fe <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d002      	beq.n	800f166 <HAL_SPI_Transmit+0x3a>
 800f160:	88fb      	ldrh	r3, [r7, #6]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d101      	bne.n	800f16a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800f166:	2301      	movs	r3, #1
 800f168:	e1c9      	b.n	800f4fe <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f170:	2b01      	cmp	r3, #1
 800f172:	d101      	bne.n	800f178 <HAL_SPI_Transmit+0x4c>
 800f174:	2302      	movs	r3, #2
 800f176:	e1c2      	b.n	800f4fe <HAL_SPI_Transmit+0x3d2>
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2203      	movs	r2, #3
 800f184:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2200      	movs	r2, #0
 800f18c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	68ba      	ldr	r2, [r7, #8]
 800f194:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	88fa      	ldrh	r2, [r7, #6]
 800f19a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	88fa      	ldrh	r2, [r7, #6]
 800f1a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	689b      	ldr	r3, [r3, #8]
 800f1cc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f1d0:	d108      	bne.n	800f1e4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f1e0:	601a      	str	r2, [r3, #0]
 800f1e2:	e009      	b.n	800f1f8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f1f6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	685a      	ldr	r2, [r3, #4]
 800f1fe:	4b96      	ldr	r3, [pc, #600]	@ (800f458 <HAL_SPI_Transmit+0x32c>)
 800f200:	4013      	ands	r3, r2
 800f202:	88f9      	ldrh	r1, [r7, #6]
 800f204:	68fa      	ldr	r2, [r7, #12]
 800f206:	6812      	ldr	r2, [r2, #0]
 800f208:	430b      	orrs	r3, r1
 800f20a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f042 0201 	orr.w	r2, r2, #1
 800f21a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f224:	d107      	bne.n	800f236 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	681a      	ldr	r2, [r3, #0]
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f234:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	68db      	ldr	r3, [r3, #12]
 800f23a:	2b0f      	cmp	r3, #15
 800f23c:	d947      	bls.n	800f2ce <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f23e:	e03f      	b.n	800f2c0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	695b      	ldr	r3, [r3, #20]
 800f246:	f003 0302 	and.w	r3, r3, #2
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d114      	bne.n	800f278 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	6812      	ldr	r2, [r2, #0]
 800f258:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f25e:	1d1a      	adds	r2, r3, #4
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	3b01      	subs	r3, #1
 800f26e:	b29a      	uxth	r2, r3
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f276:	e023      	b.n	800f2c0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f278:	f7f5 fe78 	bl	8004f6c <HAL_GetTick>
 800f27c:	4602      	mov	r2, r0
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	1ad3      	subs	r3, r2, r3
 800f282:	683a      	ldr	r2, [r7, #0]
 800f284:	429a      	cmp	r2, r3
 800f286:	d803      	bhi.n	800f290 <HAL_SPI_Transmit+0x164>
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f28e:	d102      	bne.n	800f296 <HAL_SPI_Transmit+0x16a>
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d114      	bne.n	800f2c0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f296:	68f8      	ldr	r0, [r7, #12]
 800f298:	f000 f936 	bl	800f508 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f2bc:	2303      	movs	r3, #3
 800f2be:	e11e      	b.n	800f4fe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d1b9      	bne.n	800f240 <HAL_SPI_Transmit+0x114>
 800f2cc:	e0f1      	b.n	800f4b2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	68db      	ldr	r3, [r3, #12]
 800f2d2:	2b07      	cmp	r3, #7
 800f2d4:	f240 80e6 	bls.w	800f4a4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f2d8:	e05d      	b.n	800f396 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	695b      	ldr	r3, [r3, #20]
 800f2e0:	f003 0302 	and.w	r3, r3, #2
 800f2e4:	2b02      	cmp	r3, #2
 800f2e6:	d132      	bne.n	800f34e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d918      	bls.n	800f326 <HAL_SPI_Transmit+0x1fa>
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d014      	beq.n	800f326 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	6812      	ldr	r2, [r2, #0]
 800f306:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f30c:	1d1a      	adds	r2, r3, #4
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f318:	b29b      	uxth	r3, r3
 800f31a:	3b02      	subs	r3, #2
 800f31c:	b29a      	uxth	r2, r3
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f324:	e037      	b.n	800f396 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f32a:	881a      	ldrh	r2, [r3, #0]
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f334:	1c9a      	adds	r2, r3, #2
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f340:	b29b      	uxth	r3, r3
 800f342:	3b01      	subs	r3, #1
 800f344:	b29a      	uxth	r2, r3
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f34c:	e023      	b.n	800f396 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f34e:	f7f5 fe0d 	bl	8004f6c <HAL_GetTick>
 800f352:	4602      	mov	r2, r0
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	1ad3      	subs	r3, r2, r3
 800f358:	683a      	ldr	r2, [r7, #0]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d803      	bhi.n	800f366 <HAL_SPI_Transmit+0x23a>
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f364:	d102      	bne.n	800f36c <HAL_SPI_Transmit+0x240>
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d114      	bne.n	800f396 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f36c:	68f8      	ldr	r0, [r7, #12]
 800f36e:	f000 f8cb 	bl	800f508 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f378:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2201      	movs	r2, #1
 800f386:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2200      	movs	r2, #0
 800f38e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f392:	2303      	movs	r3, #3
 800f394:	e0b3      	b.n	800f4fe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d19b      	bne.n	800f2da <HAL_SPI_Transmit+0x1ae>
 800f3a2:	e086      	b.n	800f4b2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	695b      	ldr	r3, [r3, #20]
 800f3aa:	f003 0302 	and.w	r3, r3, #2
 800f3ae:	2b02      	cmp	r3, #2
 800f3b0:	d154      	bne.n	800f45c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	2b03      	cmp	r3, #3
 800f3bc:	d918      	bls.n	800f3f0 <HAL_SPI_Transmit+0x2c4>
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3c2:	2b40      	cmp	r3, #64	@ 0x40
 800f3c4:	d914      	bls.n	800f3f0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	6812      	ldr	r2, [r2, #0]
 800f3d0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f3d6:	1d1a      	adds	r2, r3, #4
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	3b04      	subs	r3, #4
 800f3e6:	b29a      	uxth	r2, r3
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f3ee:	e059      	b.n	800f4a4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	d917      	bls.n	800f42c <HAL_SPI_Transmit+0x300>
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f400:	2b00      	cmp	r3, #0
 800f402:	d013      	beq.n	800f42c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f408:	881a      	ldrh	r2, [r3, #0]
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f412:	1c9a      	adds	r2, r3, #2
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f41e:	b29b      	uxth	r3, r3
 800f420:	3b02      	subs	r3, #2
 800f422:	b29a      	uxth	r2, r3
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f42a:	e03b      	b.n	800f4a4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	3320      	adds	r3, #32
 800f436:	7812      	ldrb	r2, [r2, #0]
 800f438:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f43e:	1c5a      	adds	r2, r3, #1
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	3b01      	subs	r3, #1
 800f44e:	b29a      	uxth	r2, r3
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f456:	e025      	b.n	800f4a4 <HAL_SPI_Transmit+0x378>
 800f458:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f45c:	f7f5 fd86 	bl	8004f6c <HAL_GetTick>
 800f460:	4602      	mov	r2, r0
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	1ad3      	subs	r3, r2, r3
 800f466:	683a      	ldr	r2, [r7, #0]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d803      	bhi.n	800f474 <HAL_SPI_Transmit+0x348>
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f472:	d102      	bne.n	800f47a <HAL_SPI_Transmit+0x34e>
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d114      	bne.n	800f4a4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	f000 f844 	bl	800f508 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f486:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2201      	movs	r2, #1
 800f494:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2200      	movs	r2, #0
 800f49c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f4a0:	2303      	movs	r3, #3
 800f4a2:	e02c      	b.n	800f4fe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f4aa:	b29b      	uxth	r3, r3
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	f47f af79 	bne.w	800f3a4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	9300      	str	r3, [sp, #0]
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	2108      	movs	r1, #8
 800f4bc:	68f8      	ldr	r0, [r7, #12]
 800f4be:	f000 f8c3 	bl	800f648 <SPI_WaitOnFlagUntilTimeout>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d007      	beq.n	800f4d8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4ce:	f043 0220 	orr.w	r2, r3, #32
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f4d8:	68f8      	ldr	r0, [r7, #12]
 800f4da:	f000 f815 	bl	800f508 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2201      	movs	r2, #1
 800f4e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d001      	beq.n	800f4fc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e000      	b.n	800f4fe <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800f4fc:	2300      	movs	r3, #0
  }
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3718      	adds	r7, #24
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop

0800f508 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f508:	b480      	push	{r7}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	695b      	ldr	r3, [r3, #20]
 800f516:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	699a      	ldr	r2, [r3, #24]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f042 0208 	orr.w	r2, r2, #8
 800f526:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	699a      	ldr	r2, [r3, #24]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f042 0210 	orr.w	r2, r2, #16
 800f536:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f022 0201 	bic.w	r2, r2, #1
 800f546:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	6919      	ldr	r1, [r3, #16]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681a      	ldr	r2, [r3, #0]
 800f552:	4b3c      	ldr	r3, [pc, #240]	@ (800f644 <SPI_CloseTransfer+0x13c>)
 800f554:	400b      	ands	r3, r1
 800f556:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	689a      	ldr	r2, [r3, #8]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800f566:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	2b04      	cmp	r3, #4
 800f572:	d014      	beq.n	800f59e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f003 0320 	and.w	r3, r3, #32
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00f      	beq.n	800f59e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f584:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	699a      	ldr	r2, [r3, #24]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f042 0220 	orr.w	r2, r2, #32
 800f59c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	2b03      	cmp	r3, #3
 800f5a8:	d014      	beq.n	800f5d4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d00f      	beq.n	800f5d4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f5ba:	f043 0204 	orr.w	r2, r3, #4
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	699a      	ldr	r2, [r3, #24]
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f5d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00f      	beq.n	800f5fe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f5e4:	f043 0201 	orr.w	r2, r3, #1
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	699a      	ldr	r2, [r3, #24]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f5fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f604:	2b00      	cmp	r3, #0
 800f606:	d00f      	beq.n	800f628 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f60e:	f043 0208 	orr.w	r2, r3, #8
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	699a      	ldr	r2, [r3, #24]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f626:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2200      	movs	r2, #0
 800f62c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2200      	movs	r2, #0
 800f634:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800f638:	bf00      	nop
 800f63a:	3714      	adds	r7, #20
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr
 800f644:	fffffc90 	.word	0xfffffc90

0800f648 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	603b      	str	r3, [r7, #0]
 800f654:	4613      	mov	r3, r2
 800f656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f658:	e010      	b.n	800f67c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f65a:	f7f5 fc87 	bl	8004f6c <HAL_GetTick>
 800f65e:	4602      	mov	r2, r0
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	1ad3      	subs	r3, r2, r3
 800f664:	683a      	ldr	r2, [r7, #0]
 800f666:	429a      	cmp	r2, r3
 800f668:	d803      	bhi.n	800f672 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f670:	d102      	bne.n	800f678 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d101      	bne.n	800f67c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f678:	2303      	movs	r3, #3
 800f67a:	e00f      	b.n	800f69c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	695a      	ldr	r2, [r3, #20]
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	4013      	ands	r3, r2
 800f686:	68ba      	ldr	r2, [r7, #8]
 800f688:	429a      	cmp	r2, r3
 800f68a:	bf0c      	ite	eq
 800f68c:	2301      	moveq	r3, #1
 800f68e:	2300      	movne	r3, #0
 800f690:	b2db      	uxtb	r3, r3
 800f692:	461a      	mov	r2, r3
 800f694:	79fb      	ldrb	r3, [r7, #7]
 800f696:	429a      	cmp	r2, r3
 800f698:	d0df      	beq.n	800f65a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3710      	adds	r7, #16
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b085      	sub	sp, #20
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6b0:	095b      	lsrs	r3, r3, #5
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	68db      	ldr	r3, [r3, #12]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	3307      	adds	r3, #7
 800f6c2:	08db      	lsrs	r3, r3, #3
 800f6c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	68fa      	ldr	r2, [r7, #12]
 800f6ca:	fb02 f303 	mul.w	r3, r2, r3
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3714      	adds	r7, #20
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d8:	4770      	bx	lr

0800f6da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f6da:	b580      	push	{r7, lr}
 800f6dc:	b082      	sub	sp, #8
 800f6de:	af00      	add	r7, sp, #0
 800f6e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d101      	bne.n	800f6ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	e049      	b.n	800f780 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d106      	bne.n	800f706 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f7f3 fe4f 	bl	80033a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2202      	movs	r2, #2
 800f70a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681a      	ldr	r2, [r3, #0]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	3304      	adds	r3, #4
 800f716:	4619      	mov	r1, r3
 800f718:	4610      	mov	r0, r2
 800f71a:	f000 fe2b 	bl	8010374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2201      	movs	r2, #1
 800f722:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2201      	movs	r2, #1
 800f72a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2201      	movs	r2, #1
 800f732:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2201      	movs	r2, #1
 800f73a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2201      	movs	r2, #1
 800f742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2201      	movs	r2, #1
 800f74a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2201      	movs	r2, #1
 800f752:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2201      	movs	r2, #1
 800f75a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2201      	movs	r2, #1
 800f762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2201      	movs	r2, #1
 800f76a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2201      	movs	r2, #1
 800f772:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2201      	movs	r2, #1
 800f77a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f77e:	2300      	movs	r3, #0
}
 800f780:	4618      	mov	r0, r3
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f788:	b480      	push	{r7}
 800f78a:	b085      	sub	sp, #20
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f796:	b2db      	uxtb	r3, r3
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d001      	beq.n	800f7a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f79c:	2301      	movs	r3, #1
 800f79e:	e056      	b.n	800f84e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2202      	movs	r2, #2
 800f7a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4a2b      	ldr	r2, [pc, #172]	@ (800f85c <HAL_TIM_Base_Start+0xd4>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d02c      	beq.n	800f80c <HAL_TIM_Base_Start+0x84>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f7ba:	d027      	beq.n	800f80c <HAL_TIM_Base_Start+0x84>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4a27      	ldr	r2, [pc, #156]	@ (800f860 <HAL_TIM_Base_Start+0xd8>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d022      	beq.n	800f80c <HAL_TIM_Base_Start+0x84>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4a26      	ldr	r2, [pc, #152]	@ (800f864 <HAL_TIM_Base_Start+0xdc>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d01d      	beq.n	800f80c <HAL_TIM_Base_Start+0x84>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4a24      	ldr	r2, [pc, #144]	@ (800f868 <HAL_TIM_Base_Start+0xe0>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d018      	beq.n	800f80c <HAL_TIM_Base_Start+0x84>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	4a23      	ldr	r2, [pc, #140]	@ (800f86c <HAL_TIM_Base_Start+0xe4>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d013      	beq.n	800f80c <HAL_TIM_Base_Start+0x84>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4a21      	ldr	r2, [pc, #132]	@ (800f870 <HAL_TIM_Base_Start+0xe8>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d00e      	beq.n	800f80c <HAL_TIM_Base_Start+0x84>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	4a20      	ldr	r2, [pc, #128]	@ (800f874 <HAL_TIM_Base_Start+0xec>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d009      	beq.n	800f80c <HAL_TIM_Base_Start+0x84>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a1e      	ldr	r2, [pc, #120]	@ (800f878 <HAL_TIM_Base_Start+0xf0>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d004      	beq.n	800f80c <HAL_TIM_Base_Start+0x84>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	4a1d      	ldr	r2, [pc, #116]	@ (800f87c <HAL_TIM_Base_Start+0xf4>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	d115      	bne.n	800f838 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	689a      	ldr	r2, [r3, #8]
 800f812:	4b1b      	ldr	r3, [pc, #108]	@ (800f880 <HAL_TIM_Base_Start+0xf8>)
 800f814:	4013      	ands	r3, r2
 800f816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2b06      	cmp	r3, #6
 800f81c:	d015      	beq.n	800f84a <HAL_TIM_Base_Start+0xc2>
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f824:	d011      	beq.n	800f84a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	681a      	ldr	r2, [r3, #0]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f042 0201 	orr.w	r2, r2, #1
 800f834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f836:	e008      	b.n	800f84a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f042 0201 	orr.w	r2, r2, #1
 800f846:	601a      	str	r2, [r3, #0]
 800f848:	e000      	b.n	800f84c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f84a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f84c:	2300      	movs	r3, #0
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3714      	adds	r7, #20
 800f852:	46bd      	mov	sp, r7
 800f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	40010000 	.word	0x40010000
 800f860:	40000400 	.word	0x40000400
 800f864:	40000800 	.word	0x40000800
 800f868:	40000c00 	.word	0x40000c00
 800f86c:	40010400 	.word	0x40010400
 800f870:	40001800 	.word	0x40001800
 800f874:	40014000 	.word	0x40014000
 800f878:	4000e000 	.word	0x4000e000
 800f87c:	4000e400 	.word	0x4000e400
 800f880:	00010007 	.word	0x00010007

0800f884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f884:	b480      	push	{r7}
 800f886:	b085      	sub	sp, #20
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f892:	b2db      	uxtb	r3, r3
 800f894:	2b01      	cmp	r3, #1
 800f896:	d001      	beq.n	800f89c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f898:	2301      	movs	r3, #1
 800f89a:	e05e      	b.n	800f95a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2202      	movs	r2, #2
 800f8a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	68da      	ldr	r2, [r3, #12]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f042 0201 	orr.w	r2, r2, #1
 800f8b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a2b      	ldr	r2, [pc, #172]	@ (800f968 <HAL_TIM_Base_Start_IT+0xe4>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d02c      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x94>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8c6:	d027      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x94>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a27      	ldr	r2, [pc, #156]	@ (800f96c <HAL_TIM_Base_Start_IT+0xe8>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d022      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x94>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4a26      	ldr	r2, [pc, #152]	@ (800f970 <HAL_TIM_Base_Start_IT+0xec>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d01d      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x94>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a24      	ldr	r2, [pc, #144]	@ (800f974 <HAL_TIM_Base_Start_IT+0xf0>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d018      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x94>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4a23      	ldr	r2, [pc, #140]	@ (800f978 <HAL_TIM_Base_Start_IT+0xf4>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d013      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x94>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4a21      	ldr	r2, [pc, #132]	@ (800f97c <HAL_TIM_Base_Start_IT+0xf8>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d00e      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x94>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4a20      	ldr	r2, [pc, #128]	@ (800f980 <HAL_TIM_Base_Start_IT+0xfc>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d009      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x94>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	4a1e      	ldr	r2, [pc, #120]	@ (800f984 <HAL_TIM_Base_Start_IT+0x100>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d004      	beq.n	800f918 <HAL_TIM_Base_Start_IT+0x94>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4a1d      	ldr	r2, [pc, #116]	@ (800f988 <HAL_TIM_Base_Start_IT+0x104>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d115      	bne.n	800f944 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	689a      	ldr	r2, [r3, #8]
 800f91e:	4b1b      	ldr	r3, [pc, #108]	@ (800f98c <HAL_TIM_Base_Start_IT+0x108>)
 800f920:	4013      	ands	r3, r2
 800f922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2b06      	cmp	r3, #6
 800f928:	d015      	beq.n	800f956 <HAL_TIM_Base_Start_IT+0xd2>
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f930:	d011      	beq.n	800f956 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f042 0201 	orr.w	r2, r2, #1
 800f940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f942:	e008      	b.n	800f956 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f042 0201 	orr.w	r2, r2, #1
 800f952:	601a      	str	r2, [r3, #0]
 800f954:	e000      	b.n	800f958 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f956:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f958:	2300      	movs	r3, #0
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3714      	adds	r7, #20
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr
 800f966:	bf00      	nop
 800f968:	40010000 	.word	0x40010000
 800f96c:	40000400 	.word	0x40000400
 800f970:	40000800 	.word	0x40000800
 800f974:	40000c00 	.word	0x40000c00
 800f978:	40010400 	.word	0x40010400
 800f97c:	40001800 	.word	0x40001800
 800f980:	40014000 	.word	0x40014000
 800f984:	4000e000 	.word	0x4000e000
 800f988:	4000e400 	.word	0x4000e400
 800f98c:	00010007 	.word	0x00010007

0800f990 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d101      	bne.n	800f9a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	e049      	b.n	800fa36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d106      	bne.n	800f9bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f7f3 fcd2 	bl	8003360 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2202      	movs	r2, #2
 800f9c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681a      	ldr	r2, [r3, #0]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	4610      	mov	r0, r2
 800f9d0:	f000 fcd0 	bl	8010374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2201      	movs	r2, #1
 800fa00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2201      	movs	r2, #1
 800fa08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2201      	movs	r2, #1
 800fa10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2201      	movs	r2, #1
 800fa18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2201      	movs	r2, #1
 800fa20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2201      	movs	r2, #1
 800fa28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2201      	movs	r2, #1
 800fa30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fa34:	2300      	movs	r3, #0
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3708      	adds	r7, #8
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
	...

0800fa40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b084      	sub	sp, #16
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d109      	bne.n	800fa64 <HAL_TIM_PWM_Start+0x24>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	bf14      	ite	ne
 800fa5c:	2301      	movne	r3, #1
 800fa5e:	2300      	moveq	r3, #0
 800fa60:	b2db      	uxtb	r3, r3
 800fa62:	e03c      	b.n	800fade <HAL_TIM_PWM_Start+0x9e>
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	2b04      	cmp	r3, #4
 800fa68:	d109      	bne.n	800fa7e <HAL_TIM_PWM_Start+0x3e>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	bf14      	ite	ne
 800fa76:	2301      	movne	r3, #1
 800fa78:	2300      	moveq	r3, #0
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	e02f      	b.n	800fade <HAL_TIM_PWM_Start+0x9e>
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	2b08      	cmp	r3, #8
 800fa82:	d109      	bne.n	800fa98 <HAL_TIM_PWM_Start+0x58>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fa8a:	b2db      	uxtb	r3, r3
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	bf14      	ite	ne
 800fa90:	2301      	movne	r3, #1
 800fa92:	2300      	moveq	r3, #0
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	e022      	b.n	800fade <HAL_TIM_PWM_Start+0x9e>
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	2b0c      	cmp	r3, #12
 800fa9c:	d109      	bne.n	800fab2 <HAL_TIM_PWM_Start+0x72>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	2b01      	cmp	r3, #1
 800faa8:	bf14      	ite	ne
 800faaa:	2301      	movne	r3, #1
 800faac:	2300      	moveq	r3, #0
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	e015      	b.n	800fade <HAL_TIM_PWM_Start+0x9e>
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	2b10      	cmp	r3, #16
 800fab6:	d109      	bne.n	800facc <HAL_TIM_PWM_Start+0x8c>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	bf14      	ite	ne
 800fac4:	2301      	movne	r3, #1
 800fac6:	2300      	moveq	r3, #0
 800fac8:	b2db      	uxtb	r3, r3
 800faca:	e008      	b.n	800fade <HAL_TIM_PWM_Start+0x9e>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	bf14      	ite	ne
 800fad8:	2301      	movne	r3, #1
 800fada:	2300      	moveq	r3, #0
 800fadc:	b2db      	uxtb	r3, r3
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d001      	beq.n	800fae6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fae2:	2301      	movs	r3, #1
 800fae4:	e0ab      	b.n	800fc3e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d104      	bne.n	800faf6 <HAL_TIM_PWM_Start+0xb6>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2202      	movs	r2, #2
 800faf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800faf4:	e023      	b.n	800fb3e <HAL_TIM_PWM_Start+0xfe>
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	2b04      	cmp	r3, #4
 800fafa:	d104      	bne.n	800fb06 <HAL_TIM_PWM_Start+0xc6>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2202      	movs	r2, #2
 800fb00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fb04:	e01b      	b.n	800fb3e <HAL_TIM_PWM_Start+0xfe>
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	2b08      	cmp	r3, #8
 800fb0a:	d104      	bne.n	800fb16 <HAL_TIM_PWM_Start+0xd6>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2202      	movs	r2, #2
 800fb10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fb14:	e013      	b.n	800fb3e <HAL_TIM_PWM_Start+0xfe>
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	2b0c      	cmp	r3, #12
 800fb1a:	d104      	bne.n	800fb26 <HAL_TIM_PWM_Start+0xe6>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2202      	movs	r2, #2
 800fb20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fb24:	e00b      	b.n	800fb3e <HAL_TIM_PWM_Start+0xfe>
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	2b10      	cmp	r3, #16
 800fb2a:	d104      	bne.n	800fb36 <HAL_TIM_PWM_Start+0xf6>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2202      	movs	r2, #2
 800fb30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fb34:	e003      	b.n	800fb3e <HAL_TIM_PWM_Start+0xfe>
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2202      	movs	r2, #2
 800fb3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2201      	movs	r2, #1
 800fb44:	6839      	ldr	r1, [r7, #0]
 800fb46:	4618      	mov	r0, r3
 800fb48:	f001 f91e 	bl	8010d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4a3d      	ldr	r2, [pc, #244]	@ (800fc48 <HAL_TIM_PWM_Start+0x208>)
 800fb52:	4293      	cmp	r3, r2
 800fb54:	d013      	beq.n	800fb7e <HAL_TIM_PWM_Start+0x13e>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4a3c      	ldr	r2, [pc, #240]	@ (800fc4c <HAL_TIM_PWM_Start+0x20c>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d00e      	beq.n	800fb7e <HAL_TIM_PWM_Start+0x13e>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4a3a      	ldr	r2, [pc, #232]	@ (800fc50 <HAL_TIM_PWM_Start+0x210>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d009      	beq.n	800fb7e <HAL_TIM_PWM_Start+0x13e>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	4a39      	ldr	r2, [pc, #228]	@ (800fc54 <HAL_TIM_PWM_Start+0x214>)
 800fb70:	4293      	cmp	r3, r2
 800fb72:	d004      	beq.n	800fb7e <HAL_TIM_PWM_Start+0x13e>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	4a37      	ldr	r2, [pc, #220]	@ (800fc58 <HAL_TIM_PWM_Start+0x218>)
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d101      	bne.n	800fb82 <HAL_TIM_PWM_Start+0x142>
 800fb7e:	2301      	movs	r3, #1
 800fb80:	e000      	b.n	800fb84 <HAL_TIM_PWM_Start+0x144>
 800fb82:	2300      	movs	r3, #0
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d007      	beq.n	800fb98 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fb96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a2a      	ldr	r2, [pc, #168]	@ (800fc48 <HAL_TIM_PWM_Start+0x208>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d02c      	beq.n	800fbfc <HAL_TIM_PWM_Start+0x1bc>
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fbaa:	d027      	beq.n	800fbfc <HAL_TIM_PWM_Start+0x1bc>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	4a2a      	ldr	r2, [pc, #168]	@ (800fc5c <HAL_TIM_PWM_Start+0x21c>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d022      	beq.n	800fbfc <HAL_TIM_PWM_Start+0x1bc>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	4a29      	ldr	r2, [pc, #164]	@ (800fc60 <HAL_TIM_PWM_Start+0x220>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d01d      	beq.n	800fbfc <HAL_TIM_PWM_Start+0x1bc>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4a27      	ldr	r2, [pc, #156]	@ (800fc64 <HAL_TIM_PWM_Start+0x224>)
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d018      	beq.n	800fbfc <HAL_TIM_PWM_Start+0x1bc>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	4a1f      	ldr	r2, [pc, #124]	@ (800fc4c <HAL_TIM_PWM_Start+0x20c>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d013      	beq.n	800fbfc <HAL_TIM_PWM_Start+0x1bc>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a23      	ldr	r2, [pc, #140]	@ (800fc68 <HAL_TIM_PWM_Start+0x228>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d00e      	beq.n	800fbfc <HAL_TIM_PWM_Start+0x1bc>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4a1b      	ldr	r2, [pc, #108]	@ (800fc50 <HAL_TIM_PWM_Start+0x210>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d009      	beq.n	800fbfc <HAL_TIM_PWM_Start+0x1bc>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	4a1f      	ldr	r2, [pc, #124]	@ (800fc6c <HAL_TIM_PWM_Start+0x22c>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d004      	beq.n	800fbfc <HAL_TIM_PWM_Start+0x1bc>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4a1e      	ldr	r2, [pc, #120]	@ (800fc70 <HAL_TIM_PWM_Start+0x230>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d115      	bne.n	800fc28 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	689a      	ldr	r2, [r3, #8]
 800fc02:	4b1c      	ldr	r3, [pc, #112]	@ (800fc74 <HAL_TIM_PWM_Start+0x234>)
 800fc04:	4013      	ands	r3, r2
 800fc06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2b06      	cmp	r3, #6
 800fc0c:	d015      	beq.n	800fc3a <HAL_TIM_PWM_Start+0x1fa>
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc14:	d011      	beq.n	800fc3a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	681a      	ldr	r2, [r3, #0]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f042 0201 	orr.w	r2, r2, #1
 800fc24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc26:	e008      	b.n	800fc3a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	681a      	ldr	r2, [r3, #0]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f042 0201 	orr.w	r2, r2, #1
 800fc36:	601a      	str	r2, [r3, #0]
 800fc38:	e000      	b.n	800fc3c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fc3c:	2300      	movs	r3, #0
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3710      	adds	r7, #16
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	40010000 	.word	0x40010000
 800fc4c:	40010400 	.word	0x40010400
 800fc50:	40014000 	.word	0x40014000
 800fc54:	40014400 	.word	0x40014400
 800fc58:	40014800 	.word	0x40014800
 800fc5c:	40000400 	.word	0x40000400
 800fc60:	40000800 	.word	0x40000800
 800fc64:	40000c00 	.word	0x40000c00
 800fc68:	40001800 	.word	0x40001800
 800fc6c:	4000e000 	.word	0x4000e000
 800fc70:	4000e400 	.word	0x4000e400
 800fc74:	00010007 	.word	0x00010007

0800fc78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b084      	sub	sp, #16
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	68db      	ldr	r3, [r3, #12]
 800fc86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	691b      	ldr	r3, [r3, #16]
 800fc8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	f003 0302 	and.w	r3, r3, #2
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d020      	beq.n	800fcdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f003 0302 	and.w	r3, r3, #2
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d01b      	beq.n	800fcdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f06f 0202 	mvn.w	r2, #2
 800fcac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	699b      	ldr	r3, [r3, #24]
 800fcba:	f003 0303 	and.w	r3, r3, #3
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d003      	beq.n	800fcca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 fb38 	bl	8010338 <HAL_TIM_IC_CaptureCallback>
 800fcc8:	e005      	b.n	800fcd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 fb2a 	bl	8010324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 fb3b 	bl	801034c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	f003 0304 	and.w	r3, r3, #4
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d020      	beq.n	800fd28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f003 0304 	and.w	r3, r3, #4
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d01b      	beq.n	800fd28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f06f 0204 	mvn.w	r2, #4
 800fcf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2202      	movs	r2, #2
 800fcfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	699b      	ldr	r3, [r3, #24]
 800fd06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d003      	beq.n	800fd16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f000 fb12 	bl	8010338 <HAL_TIM_IC_CaptureCallback>
 800fd14:	e005      	b.n	800fd22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f000 fb04 	bl	8010324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f000 fb15 	bl	801034c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2200      	movs	r2, #0
 800fd26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	f003 0308 	and.w	r3, r3, #8
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d020      	beq.n	800fd74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f003 0308 	and.w	r3, r3, #8
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d01b      	beq.n	800fd74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f06f 0208 	mvn.w	r2, #8
 800fd44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2204      	movs	r2, #4
 800fd4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	69db      	ldr	r3, [r3, #28]
 800fd52:	f003 0303 	and.w	r3, r3, #3
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d003      	beq.n	800fd62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 faec 	bl	8010338 <HAL_TIM_IC_CaptureCallback>
 800fd60:	e005      	b.n	800fd6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f000 fade 	bl	8010324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 faef 	bl	801034c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2200      	movs	r2, #0
 800fd72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	f003 0310 	and.w	r3, r3, #16
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d020      	beq.n	800fdc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f003 0310 	and.w	r3, r3, #16
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d01b      	beq.n	800fdc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	f06f 0210 	mvn.w	r2, #16
 800fd90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2208      	movs	r2, #8
 800fd96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	69db      	ldr	r3, [r3, #28]
 800fd9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d003      	beq.n	800fdae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 fac6 	bl	8010338 <HAL_TIM_IC_CaptureCallback>
 800fdac:	e005      	b.n	800fdba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f000 fab8 	bl	8010324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f000 fac9 	bl	801034c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	f003 0301 	and.w	r3, r3, #1
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d00c      	beq.n	800fde4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	f003 0301 	and.w	r3, r3, #1
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d007      	beq.n	800fde4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f06f 0201 	mvn.w	r2, #1
 800fddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f7f2 fd20 	bl	8002824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d104      	bne.n	800fdf8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d00c      	beq.n	800fe12 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d007      	beq.n	800fe12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800fe0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f001 f913 	bl	8011038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d00c      	beq.n	800fe36 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d007      	beq.n	800fe36 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800fe2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f001 f90b 	bl	801104c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d00c      	beq.n	800fe5a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d007      	beq.n	800fe5a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fe52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f000 fa83 	bl	8010360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	f003 0320 	and.w	r3, r3, #32
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d00c      	beq.n	800fe7e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f003 0320 	and.w	r3, r3, #32
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d007      	beq.n	800fe7e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	f06f 0220 	mvn.w	r2, #32
 800fe76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f001 f8d3 	bl	8011024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe7e:	bf00      	nop
 800fe80:	3710      	adds	r7, #16
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
	...

0800fe88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b086      	sub	sp, #24
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe94:	2300      	movs	r3, #0
 800fe96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fe9e:	2b01      	cmp	r3, #1
 800fea0:	d101      	bne.n	800fea6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fea2:	2302      	movs	r3, #2
 800fea4:	e0ff      	b.n	80100a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2201      	movs	r2, #1
 800feaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2b14      	cmp	r3, #20
 800feb2:	f200 80f0 	bhi.w	8010096 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800feb6:	a201      	add	r2, pc, #4	@ (adr r2, 800febc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800feb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800febc:	0800ff11 	.word	0x0800ff11
 800fec0:	08010097 	.word	0x08010097
 800fec4:	08010097 	.word	0x08010097
 800fec8:	08010097 	.word	0x08010097
 800fecc:	0800ff51 	.word	0x0800ff51
 800fed0:	08010097 	.word	0x08010097
 800fed4:	08010097 	.word	0x08010097
 800fed8:	08010097 	.word	0x08010097
 800fedc:	0800ff93 	.word	0x0800ff93
 800fee0:	08010097 	.word	0x08010097
 800fee4:	08010097 	.word	0x08010097
 800fee8:	08010097 	.word	0x08010097
 800feec:	0800ffd3 	.word	0x0800ffd3
 800fef0:	08010097 	.word	0x08010097
 800fef4:	08010097 	.word	0x08010097
 800fef8:	08010097 	.word	0x08010097
 800fefc:	08010015 	.word	0x08010015
 800ff00:	08010097 	.word	0x08010097
 800ff04:	08010097 	.word	0x08010097
 800ff08:	08010097 	.word	0x08010097
 800ff0c:	08010055 	.word	0x08010055
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	68b9      	ldr	r1, [r7, #8]
 800ff16:	4618      	mov	r0, r3
 800ff18:	f000 fad8 	bl	80104cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	699a      	ldr	r2, [r3, #24]
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f042 0208 	orr.w	r2, r2, #8
 800ff2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	699a      	ldr	r2, [r3, #24]
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	f022 0204 	bic.w	r2, r2, #4
 800ff3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	6999      	ldr	r1, [r3, #24]
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	691a      	ldr	r2, [r3, #16]
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	430a      	orrs	r2, r1
 800ff4c:	619a      	str	r2, [r3, #24]
      break;
 800ff4e:	e0a5      	b.n	801009c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	68b9      	ldr	r1, [r7, #8]
 800ff56:	4618      	mov	r0, r3
 800ff58:	f000 fb48 	bl	80105ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	699a      	ldr	r2, [r3, #24]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ff6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	699a      	ldr	r2, [r3, #24]
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ff7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	6999      	ldr	r1, [r3, #24]
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	691b      	ldr	r3, [r3, #16]
 800ff86:	021a      	lsls	r2, r3, #8
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	430a      	orrs	r2, r1
 800ff8e:	619a      	str	r2, [r3, #24]
      break;
 800ff90:	e084      	b.n	801009c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	68b9      	ldr	r1, [r7, #8]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f000 fbb1 	bl	8010700 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	69da      	ldr	r2, [r3, #28]
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f042 0208 	orr.w	r2, r2, #8
 800ffac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	69da      	ldr	r2, [r3, #28]
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f022 0204 	bic.w	r2, r2, #4
 800ffbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	69d9      	ldr	r1, [r3, #28]
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	691a      	ldr	r2, [r3, #16]
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	430a      	orrs	r2, r1
 800ffce:	61da      	str	r2, [r3, #28]
      break;
 800ffd0:	e064      	b.n	801009c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	68b9      	ldr	r1, [r7, #8]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f000 fc19 	bl	8010810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	69da      	ldr	r2, [r3, #28]
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ffec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	69da      	ldr	r2, [r3, #28]
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	69d9      	ldr	r1, [r3, #28]
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	691b      	ldr	r3, [r3, #16]
 8010008:	021a      	lsls	r2, r3, #8
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	430a      	orrs	r2, r1
 8010010:	61da      	str	r2, [r3, #28]
      break;
 8010012:	e043      	b.n	801009c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	68b9      	ldr	r1, [r7, #8]
 801001a:	4618      	mov	r0, r3
 801001c:	f000 fc62 	bl	80108e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f042 0208 	orr.w	r2, r2, #8
 801002e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f022 0204 	bic.w	r2, r2, #4
 801003e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	691a      	ldr	r2, [r3, #16]
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	430a      	orrs	r2, r1
 8010050:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010052:	e023      	b.n	801009c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	68b9      	ldr	r1, [r7, #8]
 801005a:	4618      	mov	r0, r3
 801005c:	f000 fca6 	bl	80109ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801006e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801007e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	691b      	ldr	r3, [r3, #16]
 801008a:	021a      	lsls	r2, r3, #8
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	430a      	orrs	r2, r1
 8010092:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010094:	e002      	b.n	801009c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010096:	2301      	movs	r3, #1
 8010098:	75fb      	strb	r3, [r7, #23]
      break;
 801009a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2200      	movs	r2, #0
 80100a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80100a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3718      	adds	r7, #24
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop

080100b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b084      	sub	sp, #16
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80100ba:	2300      	movs	r3, #0
 80100bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d101      	bne.n	80100cc <HAL_TIM_ConfigClockSource+0x1c>
 80100c8:	2302      	movs	r3, #2
 80100ca:	e0dc      	b.n	8010286 <HAL_TIM_ConfigClockSource+0x1d6>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2201      	movs	r2, #1
 80100d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2202      	movs	r2, #2
 80100d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	689b      	ldr	r3, [r3, #8]
 80100e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80100e4:	68ba      	ldr	r2, [r7, #8]
 80100e6:	4b6a      	ldr	r3, [pc, #424]	@ (8010290 <HAL_TIM_ConfigClockSource+0x1e0>)
 80100e8:	4013      	ands	r3, r2
 80100ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80100f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4a64      	ldr	r2, [pc, #400]	@ (8010294 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010102:	4293      	cmp	r3, r2
 8010104:	f000 80a9 	beq.w	801025a <HAL_TIM_ConfigClockSource+0x1aa>
 8010108:	4a62      	ldr	r2, [pc, #392]	@ (8010294 <HAL_TIM_ConfigClockSource+0x1e4>)
 801010a:	4293      	cmp	r3, r2
 801010c:	f200 80ae 	bhi.w	801026c <HAL_TIM_ConfigClockSource+0x1bc>
 8010110:	4a61      	ldr	r2, [pc, #388]	@ (8010298 <HAL_TIM_ConfigClockSource+0x1e8>)
 8010112:	4293      	cmp	r3, r2
 8010114:	f000 80a1 	beq.w	801025a <HAL_TIM_ConfigClockSource+0x1aa>
 8010118:	4a5f      	ldr	r2, [pc, #380]	@ (8010298 <HAL_TIM_ConfigClockSource+0x1e8>)
 801011a:	4293      	cmp	r3, r2
 801011c:	f200 80a6 	bhi.w	801026c <HAL_TIM_ConfigClockSource+0x1bc>
 8010120:	4a5e      	ldr	r2, [pc, #376]	@ (801029c <HAL_TIM_ConfigClockSource+0x1ec>)
 8010122:	4293      	cmp	r3, r2
 8010124:	f000 8099 	beq.w	801025a <HAL_TIM_ConfigClockSource+0x1aa>
 8010128:	4a5c      	ldr	r2, [pc, #368]	@ (801029c <HAL_TIM_ConfigClockSource+0x1ec>)
 801012a:	4293      	cmp	r3, r2
 801012c:	f200 809e 	bhi.w	801026c <HAL_TIM_ConfigClockSource+0x1bc>
 8010130:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010134:	f000 8091 	beq.w	801025a <HAL_TIM_ConfigClockSource+0x1aa>
 8010138:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801013c:	f200 8096 	bhi.w	801026c <HAL_TIM_ConfigClockSource+0x1bc>
 8010140:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010144:	f000 8089 	beq.w	801025a <HAL_TIM_ConfigClockSource+0x1aa>
 8010148:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801014c:	f200 808e 	bhi.w	801026c <HAL_TIM_ConfigClockSource+0x1bc>
 8010150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010154:	d03e      	beq.n	80101d4 <HAL_TIM_ConfigClockSource+0x124>
 8010156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801015a:	f200 8087 	bhi.w	801026c <HAL_TIM_ConfigClockSource+0x1bc>
 801015e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010162:	f000 8086 	beq.w	8010272 <HAL_TIM_ConfigClockSource+0x1c2>
 8010166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801016a:	d87f      	bhi.n	801026c <HAL_TIM_ConfigClockSource+0x1bc>
 801016c:	2b70      	cmp	r3, #112	@ 0x70
 801016e:	d01a      	beq.n	80101a6 <HAL_TIM_ConfigClockSource+0xf6>
 8010170:	2b70      	cmp	r3, #112	@ 0x70
 8010172:	d87b      	bhi.n	801026c <HAL_TIM_ConfigClockSource+0x1bc>
 8010174:	2b60      	cmp	r3, #96	@ 0x60
 8010176:	d050      	beq.n	801021a <HAL_TIM_ConfigClockSource+0x16a>
 8010178:	2b60      	cmp	r3, #96	@ 0x60
 801017a:	d877      	bhi.n	801026c <HAL_TIM_ConfigClockSource+0x1bc>
 801017c:	2b50      	cmp	r3, #80	@ 0x50
 801017e:	d03c      	beq.n	80101fa <HAL_TIM_ConfigClockSource+0x14a>
 8010180:	2b50      	cmp	r3, #80	@ 0x50
 8010182:	d873      	bhi.n	801026c <HAL_TIM_ConfigClockSource+0x1bc>
 8010184:	2b40      	cmp	r3, #64	@ 0x40
 8010186:	d058      	beq.n	801023a <HAL_TIM_ConfigClockSource+0x18a>
 8010188:	2b40      	cmp	r3, #64	@ 0x40
 801018a:	d86f      	bhi.n	801026c <HAL_TIM_ConfigClockSource+0x1bc>
 801018c:	2b30      	cmp	r3, #48	@ 0x30
 801018e:	d064      	beq.n	801025a <HAL_TIM_ConfigClockSource+0x1aa>
 8010190:	2b30      	cmp	r3, #48	@ 0x30
 8010192:	d86b      	bhi.n	801026c <HAL_TIM_ConfigClockSource+0x1bc>
 8010194:	2b20      	cmp	r3, #32
 8010196:	d060      	beq.n	801025a <HAL_TIM_ConfigClockSource+0x1aa>
 8010198:	2b20      	cmp	r3, #32
 801019a:	d867      	bhi.n	801026c <HAL_TIM_ConfigClockSource+0x1bc>
 801019c:	2b00      	cmp	r3, #0
 801019e:	d05c      	beq.n	801025a <HAL_TIM_ConfigClockSource+0x1aa>
 80101a0:	2b10      	cmp	r3, #16
 80101a2:	d05a      	beq.n	801025a <HAL_TIM_ConfigClockSource+0x1aa>
 80101a4:	e062      	b.n	801026c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80101b6:	f000 fdc7 	bl	8010d48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80101c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	68ba      	ldr	r2, [r7, #8]
 80101d0:	609a      	str	r2, [r3, #8]
      break;
 80101d2:	e04f      	b.n	8010274 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80101e4:	f000 fdb0 	bl	8010d48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	689a      	ldr	r2, [r3, #8]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80101f6:	609a      	str	r2, [r3, #8]
      break;
 80101f8:	e03c      	b.n	8010274 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010206:	461a      	mov	r2, r3
 8010208:	f000 fd20 	bl	8010c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2150      	movs	r1, #80	@ 0x50
 8010212:	4618      	mov	r0, r3
 8010214:	f000 fd7a 	bl	8010d0c <TIM_ITRx_SetConfig>
      break;
 8010218:	e02c      	b.n	8010274 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010226:	461a      	mov	r2, r3
 8010228:	f000 fd3f 	bl	8010caa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2160      	movs	r1, #96	@ 0x60
 8010232:	4618      	mov	r0, r3
 8010234:	f000 fd6a 	bl	8010d0c <TIM_ITRx_SetConfig>
      break;
 8010238:	e01c      	b.n	8010274 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010246:	461a      	mov	r2, r3
 8010248:	f000 fd00 	bl	8010c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2140      	movs	r1, #64	@ 0x40
 8010252:	4618      	mov	r0, r3
 8010254:	f000 fd5a 	bl	8010d0c <TIM_ITRx_SetConfig>
      break;
 8010258:	e00c      	b.n	8010274 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	4619      	mov	r1, r3
 8010264:	4610      	mov	r0, r2
 8010266:	f000 fd51 	bl	8010d0c <TIM_ITRx_SetConfig>
      break;
 801026a:	e003      	b.n	8010274 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801026c:	2301      	movs	r3, #1
 801026e:	73fb      	strb	r3, [r7, #15]
      break;
 8010270:	e000      	b.n	8010274 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8010272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2201      	movs	r2, #1
 8010278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2200      	movs	r2, #0
 8010280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010284:	7bfb      	ldrb	r3, [r7, #15]
}
 8010286:	4618      	mov	r0, r3
 8010288:	3710      	adds	r7, #16
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	ffceff88 	.word	0xffceff88
 8010294:	00100040 	.word	0x00100040
 8010298:	00100030 	.word	0x00100030
 801029c:	00100020 	.word	0x00100020

080102a0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80102b0:	2b01      	cmp	r3, #1
 80102b2:	d101      	bne.n	80102b8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80102b4:	2302      	movs	r3, #2
 80102b6:	e031      	b.n	801031c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2201      	movs	r2, #1
 80102bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2202      	movs	r2, #2
 80102c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80102c8:	6839      	ldr	r1, [r7, #0]
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f000 fbd4 	bl	8010a78 <TIM_SlaveTimer_SetConfig>
 80102d0:	4603      	mov	r3, r0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d009      	beq.n	80102ea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2201      	movs	r2, #1
 80102da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2200      	movs	r2, #0
 80102e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80102e6:	2301      	movs	r3, #1
 80102e8:	e018      	b.n	801031c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	68da      	ldr	r2, [r3, #12]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80102f8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	68da      	ldr	r2, [r3, #12]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010308:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2201      	movs	r2, #1
 801030e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801031a:	2300      	movs	r3, #0
}
 801031c:	4618      	mov	r0, r3
 801031e:	3708      	adds	r7, #8
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}

08010324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010324:	b480      	push	{r7}
 8010326:	b083      	sub	sp, #12
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801032c:	bf00      	nop
 801032e:	370c      	adds	r7, #12
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010340:	bf00      	nop
 8010342:	370c      	adds	r7, #12
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr

0801034c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801034c:	b480      	push	{r7}
 801034e:	b083      	sub	sp, #12
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010354:	bf00      	nop
 8010356:	370c      	adds	r7, #12
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr

08010360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010360:	b480      	push	{r7}
 8010362:	b083      	sub	sp, #12
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010368:	bf00      	nop
 801036a:	370c      	adds	r7, #12
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	4770      	bx	lr

08010374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010374:	b480      	push	{r7}
 8010376:	b085      	sub	sp, #20
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	4a47      	ldr	r2, [pc, #284]	@ (80104a4 <TIM_Base_SetConfig+0x130>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d013      	beq.n	80103b4 <TIM_Base_SetConfig+0x40>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010392:	d00f      	beq.n	80103b4 <TIM_Base_SetConfig+0x40>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	4a44      	ldr	r2, [pc, #272]	@ (80104a8 <TIM_Base_SetConfig+0x134>)
 8010398:	4293      	cmp	r3, r2
 801039a:	d00b      	beq.n	80103b4 <TIM_Base_SetConfig+0x40>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4a43      	ldr	r2, [pc, #268]	@ (80104ac <TIM_Base_SetConfig+0x138>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d007      	beq.n	80103b4 <TIM_Base_SetConfig+0x40>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	4a42      	ldr	r2, [pc, #264]	@ (80104b0 <TIM_Base_SetConfig+0x13c>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d003      	beq.n	80103b4 <TIM_Base_SetConfig+0x40>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	4a41      	ldr	r2, [pc, #260]	@ (80104b4 <TIM_Base_SetConfig+0x140>)
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d108      	bne.n	80103c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80103ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	68fa      	ldr	r2, [r7, #12]
 80103c2:	4313      	orrs	r3, r2
 80103c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	4a36      	ldr	r2, [pc, #216]	@ (80104a4 <TIM_Base_SetConfig+0x130>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d027      	beq.n	801041e <TIM_Base_SetConfig+0xaa>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80103d4:	d023      	beq.n	801041e <TIM_Base_SetConfig+0xaa>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	4a33      	ldr	r2, [pc, #204]	@ (80104a8 <TIM_Base_SetConfig+0x134>)
 80103da:	4293      	cmp	r3, r2
 80103dc:	d01f      	beq.n	801041e <TIM_Base_SetConfig+0xaa>
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	4a32      	ldr	r2, [pc, #200]	@ (80104ac <TIM_Base_SetConfig+0x138>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d01b      	beq.n	801041e <TIM_Base_SetConfig+0xaa>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	4a31      	ldr	r2, [pc, #196]	@ (80104b0 <TIM_Base_SetConfig+0x13c>)
 80103ea:	4293      	cmp	r3, r2
 80103ec:	d017      	beq.n	801041e <TIM_Base_SetConfig+0xaa>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	4a30      	ldr	r2, [pc, #192]	@ (80104b4 <TIM_Base_SetConfig+0x140>)
 80103f2:	4293      	cmp	r3, r2
 80103f4:	d013      	beq.n	801041e <TIM_Base_SetConfig+0xaa>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	4a2f      	ldr	r2, [pc, #188]	@ (80104b8 <TIM_Base_SetConfig+0x144>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d00f      	beq.n	801041e <TIM_Base_SetConfig+0xaa>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	4a2e      	ldr	r2, [pc, #184]	@ (80104bc <TIM_Base_SetConfig+0x148>)
 8010402:	4293      	cmp	r3, r2
 8010404:	d00b      	beq.n	801041e <TIM_Base_SetConfig+0xaa>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	4a2d      	ldr	r2, [pc, #180]	@ (80104c0 <TIM_Base_SetConfig+0x14c>)
 801040a:	4293      	cmp	r3, r2
 801040c:	d007      	beq.n	801041e <TIM_Base_SetConfig+0xaa>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	4a2c      	ldr	r2, [pc, #176]	@ (80104c4 <TIM_Base_SetConfig+0x150>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d003      	beq.n	801041e <TIM_Base_SetConfig+0xaa>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	4a2b      	ldr	r2, [pc, #172]	@ (80104c8 <TIM_Base_SetConfig+0x154>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d108      	bne.n	8010430 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	68db      	ldr	r3, [r3, #12]
 801042a:	68fa      	ldr	r2, [r7, #12]
 801042c:	4313      	orrs	r3, r2
 801042e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	695b      	ldr	r3, [r3, #20]
 801043a:	4313      	orrs	r3, r2
 801043c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	689a      	ldr	r2, [r3, #8]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	4a14      	ldr	r2, [pc, #80]	@ (80104a4 <TIM_Base_SetConfig+0x130>)
 8010452:	4293      	cmp	r3, r2
 8010454:	d00f      	beq.n	8010476 <TIM_Base_SetConfig+0x102>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	4a16      	ldr	r2, [pc, #88]	@ (80104b4 <TIM_Base_SetConfig+0x140>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d00b      	beq.n	8010476 <TIM_Base_SetConfig+0x102>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	4a15      	ldr	r2, [pc, #84]	@ (80104b8 <TIM_Base_SetConfig+0x144>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d007      	beq.n	8010476 <TIM_Base_SetConfig+0x102>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	4a14      	ldr	r2, [pc, #80]	@ (80104bc <TIM_Base_SetConfig+0x148>)
 801046a:	4293      	cmp	r3, r2
 801046c:	d003      	beq.n	8010476 <TIM_Base_SetConfig+0x102>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	4a13      	ldr	r2, [pc, #76]	@ (80104c0 <TIM_Base_SetConfig+0x14c>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d103      	bne.n	801047e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	691a      	ldr	r2, [r3, #16]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	f043 0204 	orr.w	r2, r3, #4
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2201      	movs	r2, #1
 801048e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	68fa      	ldr	r2, [r7, #12]
 8010494:	601a      	str	r2, [r3, #0]
}
 8010496:	bf00      	nop
 8010498:	3714      	adds	r7, #20
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop
 80104a4:	40010000 	.word	0x40010000
 80104a8:	40000400 	.word	0x40000400
 80104ac:	40000800 	.word	0x40000800
 80104b0:	40000c00 	.word	0x40000c00
 80104b4:	40010400 	.word	0x40010400
 80104b8:	40014000 	.word	0x40014000
 80104bc:	40014400 	.word	0x40014400
 80104c0:	40014800 	.word	0x40014800
 80104c4:	4000e000 	.word	0x4000e000
 80104c8:	4000e400 	.word	0x4000e400

080104cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80104cc:	b480      	push	{r7}
 80104ce:	b087      	sub	sp, #28
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6a1b      	ldr	r3, [r3, #32]
 80104da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6a1b      	ldr	r3, [r3, #32]
 80104e0:	f023 0201 	bic.w	r2, r3, #1
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	685b      	ldr	r3, [r3, #4]
 80104ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	699b      	ldr	r3, [r3, #24]
 80104f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80104f4:	68fa      	ldr	r2, [r7, #12]
 80104f6:	4b37      	ldr	r3, [pc, #220]	@ (80105d4 <TIM_OC1_SetConfig+0x108>)
 80104f8:	4013      	ands	r3, r2
 80104fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	f023 0303 	bic.w	r3, r3, #3
 8010502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	68fa      	ldr	r2, [r7, #12]
 801050a:	4313      	orrs	r3, r2
 801050c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	f023 0302 	bic.w	r3, r3, #2
 8010514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	689b      	ldr	r3, [r3, #8]
 801051a:	697a      	ldr	r2, [r7, #20]
 801051c:	4313      	orrs	r3, r2
 801051e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	4a2d      	ldr	r2, [pc, #180]	@ (80105d8 <TIM_OC1_SetConfig+0x10c>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d00f      	beq.n	8010548 <TIM_OC1_SetConfig+0x7c>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	4a2c      	ldr	r2, [pc, #176]	@ (80105dc <TIM_OC1_SetConfig+0x110>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d00b      	beq.n	8010548 <TIM_OC1_SetConfig+0x7c>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	4a2b      	ldr	r2, [pc, #172]	@ (80105e0 <TIM_OC1_SetConfig+0x114>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d007      	beq.n	8010548 <TIM_OC1_SetConfig+0x7c>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	4a2a      	ldr	r2, [pc, #168]	@ (80105e4 <TIM_OC1_SetConfig+0x118>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d003      	beq.n	8010548 <TIM_OC1_SetConfig+0x7c>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	4a29      	ldr	r2, [pc, #164]	@ (80105e8 <TIM_OC1_SetConfig+0x11c>)
 8010544:	4293      	cmp	r3, r2
 8010546:	d10c      	bne.n	8010562 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	f023 0308 	bic.w	r3, r3, #8
 801054e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	68db      	ldr	r3, [r3, #12]
 8010554:	697a      	ldr	r2, [r7, #20]
 8010556:	4313      	orrs	r3, r2
 8010558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	f023 0304 	bic.w	r3, r3, #4
 8010560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	4a1c      	ldr	r2, [pc, #112]	@ (80105d8 <TIM_OC1_SetConfig+0x10c>)
 8010566:	4293      	cmp	r3, r2
 8010568:	d00f      	beq.n	801058a <TIM_OC1_SetConfig+0xbe>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4a1b      	ldr	r2, [pc, #108]	@ (80105dc <TIM_OC1_SetConfig+0x110>)
 801056e:	4293      	cmp	r3, r2
 8010570:	d00b      	beq.n	801058a <TIM_OC1_SetConfig+0xbe>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	4a1a      	ldr	r2, [pc, #104]	@ (80105e0 <TIM_OC1_SetConfig+0x114>)
 8010576:	4293      	cmp	r3, r2
 8010578:	d007      	beq.n	801058a <TIM_OC1_SetConfig+0xbe>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4a19      	ldr	r2, [pc, #100]	@ (80105e4 <TIM_OC1_SetConfig+0x118>)
 801057e:	4293      	cmp	r3, r2
 8010580:	d003      	beq.n	801058a <TIM_OC1_SetConfig+0xbe>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	4a18      	ldr	r2, [pc, #96]	@ (80105e8 <TIM_OC1_SetConfig+0x11c>)
 8010586:	4293      	cmp	r3, r2
 8010588:	d111      	bne.n	80105ae <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	695b      	ldr	r3, [r3, #20]
 801059e:	693a      	ldr	r2, [r7, #16]
 80105a0:	4313      	orrs	r3, r2
 80105a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	699b      	ldr	r3, [r3, #24]
 80105a8:	693a      	ldr	r2, [r7, #16]
 80105aa:	4313      	orrs	r3, r2
 80105ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	693a      	ldr	r2, [r7, #16]
 80105b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	68fa      	ldr	r2, [r7, #12]
 80105b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	685a      	ldr	r2, [r3, #4]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	697a      	ldr	r2, [r7, #20]
 80105c6:	621a      	str	r2, [r3, #32]
}
 80105c8:	bf00      	nop
 80105ca:	371c      	adds	r7, #28
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr
 80105d4:	fffeff8f 	.word	0xfffeff8f
 80105d8:	40010000 	.word	0x40010000
 80105dc:	40010400 	.word	0x40010400
 80105e0:	40014000 	.word	0x40014000
 80105e4:	40014400 	.word	0x40014400
 80105e8:	40014800 	.word	0x40014800

080105ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b087      	sub	sp, #28
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6a1b      	ldr	r3, [r3, #32]
 80105fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6a1b      	ldr	r3, [r3, #32]
 8010600:	f023 0210 	bic.w	r2, r3, #16
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	699b      	ldr	r3, [r3, #24]
 8010612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010614:	68fa      	ldr	r2, [r7, #12]
 8010616:	4b34      	ldr	r3, [pc, #208]	@ (80106e8 <TIM_OC2_SetConfig+0xfc>)
 8010618:	4013      	ands	r3, r2
 801061a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	021b      	lsls	r3, r3, #8
 801062a:	68fa      	ldr	r2, [r7, #12]
 801062c:	4313      	orrs	r3, r2
 801062e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	f023 0320 	bic.w	r3, r3, #32
 8010636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	689b      	ldr	r3, [r3, #8]
 801063c:	011b      	lsls	r3, r3, #4
 801063e:	697a      	ldr	r2, [r7, #20]
 8010640:	4313      	orrs	r3, r2
 8010642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	4a29      	ldr	r2, [pc, #164]	@ (80106ec <TIM_OC2_SetConfig+0x100>)
 8010648:	4293      	cmp	r3, r2
 801064a:	d003      	beq.n	8010654 <TIM_OC2_SetConfig+0x68>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	4a28      	ldr	r2, [pc, #160]	@ (80106f0 <TIM_OC2_SetConfig+0x104>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d10d      	bne.n	8010670 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801065a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	68db      	ldr	r3, [r3, #12]
 8010660:	011b      	lsls	r3, r3, #4
 8010662:	697a      	ldr	r2, [r7, #20]
 8010664:	4313      	orrs	r3, r2
 8010666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801066e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	4a1e      	ldr	r2, [pc, #120]	@ (80106ec <TIM_OC2_SetConfig+0x100>)
 8010674:	4293      	cmp	r3, r2
 8010676:	d00f      	beq.n	8010698 <TIM_OC2_SetConfig+0xac>
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	4a1d      	ldr	r2, [pc, #116]	@ (80106f0 <TIM_OC2_SetConfig+0x104>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d00b      	beq.n	8010698 <TIM_OC2_SetConfig+0xac>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	4a1c      	ldr	r2, [pc, #112]	@ (80106f4 <TIM_OC2_SetConfig+0x108>)
 8010684:	4293      	cmp	r3, r2
 8010686:	d007      	beq.n	8010698 <TIM_OC2_SetConfig+0xac>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	4a1b      	ldr	r2, [pc, #108]	@ (80106f8 <TIM_OC2_SetConfig+0x10c>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d003      	beq.n	8010698 <TIM_OC2_SetConfig+0xac>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	4a1a      	ldr	r2, [pc, #104]	@ (80106fc <TIM_OC2_SetConfig+0x110>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d113      	bne.n	80106c0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801069e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80106a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	695b      	ldr	r3, [r3, #20]
 80106ac:	009b      	lsls	r3, r3, #2
 80106ae:	693a      	ldr	r2, [r7, #16]
 80106b0:	4313      	orrs	r3, r2
 80106b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	699b      	ldr	r3, [r3, #24]
 80106b8:	009b      	lsls	r3, r3, #2
 80106ba:	693a      	ldr	r2, [r7, #16]
 80106bc:	4313      	orrs	r3, r2
 80106be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	693a      	ldr	r2, [r7, #16]
 80106c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	68fa      	ldr	r2, [r7, #12]
 80106ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	685a      	ldr	r2, [r3, #4]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	697a      	ldr	r2, [r7, #20]
 80106d8:	621a      	str	r2, [r3, #32]
}
 80106da:	bf00      	nop
 80106dc:	371c      	adds	r7, #28
 80106de:	46bd      	mov	sp, r7
 80106e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e4:	4770      	bx	lr
 80106e6:	bf00      	nop
 80106e8:	feff8fff 	.word	0xfeff8fff
 80106ec:	40010000 	.word	0x40010000
 80106f0:	40010400 	.word	0x40010400
 80106f4:	40014000 	.word	0x40014000
 80106f8:	40014400 	.word	0x40014400
 80106fc:	40014800 	.word	0x40014800

08010700 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010700:	b480      	push	{r7}
 8010702:	b087      	sub	sp, #28
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6a1b      	ldr	r3, [r3, #32]
 801070e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6a1b      	ldr	r3, [r3, #32]
 8010714:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	685b      	ldr	r3, [r3, #4]
 8010720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	69db      	ldr	r3, [r3, #28]
 8010726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010728:	68fa      	ldr	r2, [r7, #12]
 801072a:	4b33      	ldr	r3, [pc, #204]	@ (80107f8 <TIM_OC3_SetConfig+0xf8>)
 801072c:	4013      	ands	r3, r2
 801072e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f023 0303 	bic.w	r3, r3, #3
 8010736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	4313      	orrs	r3, r2
 8010740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	689b      	ldr	r3, [r3, #8]
 801074e:	021b      	lsls	r3, r3, #8
 8010750:	697a      	ldr	r2, [r7, #20]
 8010752:	4313      	orrs	r3, r2
 8010754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	4a28      	ldr	r2, [pc, #160]	@ (80107fc <TIM_OC3_SetConfig+0xfc>)
 801075a:	4293      	cmp	r3, r2
 801075c:	d003      	beq.n	8010766 <TIM_OC3_SetConfig+0x66>
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	4a27      	ldr	r2, [pc, #156]	@ (8010800 <TIM_OC3_SetConfig+0x100>)
 8010762:	4293      	cmp	r3, r2
 8010764:	d10d      	bne.n	8010782 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801076c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	68db      	ldr	r3, [r3, #12]
 8010772:	021b      	lsls	r3, r3, #8
 8010774:	697a      	ldr	r2, [r7, #20]
 8010776:	4313      	orrs	r3, r2
 8010778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	4a1d      	ldr	r2, [pc, #116]	@ (80107fc <TIM_OC3_SetConfig+0xfc>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d00f      	beq.n	80107aa <TIM_OC3_SetConfig+0xaa>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	4a1c      	ldr	r2, [pc, #112]	@ (8010800 <TIM_OC3_SetConfig+0x100>)
 801078e:	4293      	cmp	r3, r2
 8010790:	d00b      	beq.n	80107aa <TIM_OC3_SetConfig+0xaa>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	4a1b      	ldr	r2, [pc, #108]	@ (8010804 <TIM_OC3_SetConfig+0x104>)
 8010796:	4293      	cmp	r3, r2
 8010798:	d007      	beq.n	80107aa <TIM_OC3_SetConfig+0xaa>
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	4a1a      	ldr	r2, [pc, #104]	@ (8010808 <TIM_OC3_SetConfig+0x108>)
 801079e:	4293      	cmp	r3, r2
 80107a0:	d003      	beq.n	80107aa <TIM_OC3_SetConfig+0xaa>
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	4a19      	ldr	r2, [pc, #100]	@ (801080c <TIM_OC3_SetConfig+0x10c>)
 80107a6:	4293      	cmp	r3, r2
 80107a8:	d113      	bne.n	80107d2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80107b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80107b2:	693b      	ldr	r3, [r7, #16]
 80107b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80107b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	695b      	ldr	r3, [r3, #20]
 80107be:	011b      	lsls	r3, r3, #4
 80107c0:	693a      	ldr	r2, [r7, #16]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	699b      	ldr	r3, [r3, #24]
 80107ca:	011b      	lsls	r3, r3, #4
 80107cc:	693a      	ldr	r2, [r7, #16]
 80107ce:	4313      	orrs	r3, r2
 80107d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	693a      	ldr	r2, [r7, #16]
 80107d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	68fa      	ldr	r2, [r7, #12]
 80107dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	685a      	ldr	r2, [r3, #4]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	697a      	ldr	r2, [r7, #20]
 80107ea:	621a      	str	r2, [r3, #32]
}
 80107ec:	bf00      	nop
 80107ee:	371c      	adds	r7, #28
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr
 80107f8:	fffeff8f 	.word	0xfffeff8f
 80107fc:	40010000 	.word	0x40010000
 8010800:	40010400 	.word	0x40010400
 8010804:	40014000 	.word	0x40014000
 8010808:	40014400 	.word	0x40014400
 801080c:	40014800 	.word	0x40014800

08010810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010810:	b480      	push	{r7}
 8010812:	b087      	sub	sp, #28
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6a1b      	ldr	r3, [r3, #32]
 801081e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6a1b      	ldr	r3, [r3, #32]
 8010824:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	69db      	ldr	r3, [r3, #28]
 8010836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010838:	68fa      	ldr	r2, [r7, #12]
 801083a:	4b24      	ldr	r3, [pc, #144]	@ (80108cc <TIM_OC4_SetConfig+0xbc>)
 801083c:	4013      	ands	r3, r2
 801083e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	021b      	lsls	r3, r3, #8
 801084e:	68fa      	ldr	r2, [r7, #12]
 8010850:	4313      	orrs	r3, r2
 8010852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801085a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	689b      	ldr	r3, [r3, #8]
 8010860:	031b      	lsls	r3, r3, #12
 8010862:	693a      	ldr	r2, [r7, #16]
 8010864:	4313      	orrs	r3, r2
 8010866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	4a19      	ldr	r2, [pc, #100]	@ (80108d0 <TIM_OC4_SetConfig+0xc0>)
 801086c:	4293      	cmp	r3, r2
 801086e:	d00f      	beq.n	8010890 <TIM_OC4_SetConfig+0x80>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	4a18      	ldr	r2, [pc, #96]	@ (80108d4 <TIM_OC4_SetConfig+0xc4>)
 8010874:	4293      	cmp	r3, r2
 8010876:	d00b      	beq.n	8010890 <TIM_OC4_SetConfig+0x80>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	4a17      	ldr	r2, [pc, #92]	@ (80108d8 <TIM_OC4_SetConfig+0xc8>)
 801087c:	4293      	cmp	r3, r2
 801087e:	d007      	beq.n	8010890 <TIM_OC4_SetConfig+0x80>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	4a16      	ldr	r2, [pc, #88]	@ (80108dc <TIM_OC4_SetConfig+0xcc>)
 8010884:	4293      	cmp	r3, r2
 8010886:	d003      	beq.n	8010890 <TIM_OC4_SetConfig+0x80>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	4a15      	ldr	r2, [pc, #84]	@ (80108e0 <TIM_OC4_SetConfig+0xd0>)
 801088c:	4293      	cmp	r3, r2
 801088e:	d109      	bne.n	80108a4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	695b      	ldr	r3, [r3, #20]
 801089c:	019b      	lsls	r3, r3, #6
 801089e:	697a      	ldr	r2, [r7, #20]
 80108a0:	4313      	orrs	r3, r2
 80108a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	697a      	ldr	r2, [r7, #20]
 80108a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	68fa      	ldr	r2, [r7, #12]
 80108ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	685a      	ldr	r2, [r3, #4]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	693a      	ldr	r2, [r7, #16]
 80108bc:	621a      	str	r2, [r3, #32]
}
 80108be:	bf00      	nop
 80108c0:	371c      	adds	r7, #28
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr
 80108ca:	bf00      	nop
 80108cc:	feff8fff 	.word	0xfeff8fff
 80108d0:	40010000 	.word	0x40010000
 80108d4:	40010400 	.word	0x40010400
 80108d8:	40014000 	.word	0x40014000
 80108dc:	40014400 	.word	0x40014400
 80108e0:	40014800 	.word	0x40014800

080108e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b087      	sub	sp, #28
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6a1b      	ldr	r3, [r3, #32]
 80108f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6a1b      	ldr	r3, [r3, #32]
 80108f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801090a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801090c:	68fa      	ldr	r2, [r7, #12]
 801090e:	4b21      	ldr	r3, [pc, #132]	@ (8010994 <TIM_OC5_SetConfig+0xb0>)
 8010910:	4013      	ands	r3, r2
 8010912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	68fa      	ldr	r2, [r7, #12]
 801091a:	4313      	orrs	r3, r2
 801091c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010924:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	689b      	ldr	r3, [r3, #8]
 801092a:	041b      	lsls	r3, r3, #16
 801092c:	693a      	ldr	r2, [r7, #16]
 801092e:	4313      	orrs	r3, r2
 8010930:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	4a18      	ldr	r2, [pc, #96]	@ (8010998 <TIM_OC5_SetConfig+0xb4>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d00f      	beq.n	801095a <TIM_OC5_SetConfig+0x76>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4a17      	ldr	r2, [pc, #92]	@ (801099c <TIM_OC5_SetConfig+0xb8>)
 801093e:	4293      	cmp	r3, r2
 8010940:	d00b      	beq.n	801095a <TIM_OC5_SetConfig+0x76>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4a16      	ldr	r2, [pc, #88]	@ (80109a0 <TIM_OC5_SetConfig+0xbc>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d007      	beq.n	801095a <TIM_OC5_SetConfig+0x76>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	4a15      	ldr	r2, [pc, #84]	@ (80109a4 <TIM_OC5_SetConfig+0xc0>)
 801094e:	4293      	cmp	r3, r2
 8010950:	d003      	beq.n	801095a <TIM_OC5_SetConfig+0x76>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	4a14      	ldr	r2, [pc, #80]	@ (80109a8 <TIM_OC5_SetConfig+0xc4>)
 8010956:	4293      	cmp	r3, r2
 8010958:	d109      	bne.n	801096e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	695b      	ldr	r3, [r3, #20]
 8010966:	021b      	lsls	r3, r3, #8
 8010968:	697a      	ldr	r2, [r7, #20]
 801096a:	4313      	orrs	r3, r2
 801096c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	697a      	ldr	r2, [r7, #20]
 8010972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	68fa      	ldr	r2, [r7, #12]
 8010978:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	685a      	ldr	r2, [r3, #4]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	693a      	ldr	r2, [r7, #16]
 8010986:	621a      	str	r2, [r3, #32]
}
 8010988:	bf00      	nop
 801098a:	371c      	adds	r7, #28
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr
 8010994:	fffeff8f 	.word	0xfffeff8f
 8010998:	40010000 	.word	0x40010000
 801099c:	40010400 	.word	0x40010400
 80109a0:	40014000 	.word	0x40014000
 80109a4:	40014400 	.word	0x40014400
 80109a8:	40014800 	.word	0x40014800

080109ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b087      	sub	sp, #28
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6a1b      	ldr	r3, [r3, #32]
 80109ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6a1b      	ldr	r3, [r3, #32]
 80109c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80109d4:	68fa      	ldr	r2, [r7, #12]
 80109d6:	4b22      	ldr	r3, [pc, #136]	@ (8010a60 <TIM_OC6_SetConfig+0xb4>)
 80109d8:	4013      	ands	r3, r2
 80109da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	021b      	lsls	r3, r3, #8
 80109e2:	68fa      	ldr	r2, [r7, #12]
 80109e4:	4313      	orrs	r3, r2
 80109e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80109ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	689b      	ldr	r3, [r3, #8]
 80109f4:	051b      	lsls	r3, r3, #20
 80109f6:	693a      	ldr	r2, [r7, #16]
 80109f8:	4313      	orrs	r3, r2
 80109fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	4a19      	ldr	r2, [pc, #100]	@ (8010a64 <TIM_OC6_SetConfig+0xb8>)
 8010a00:	4293      	cmp	r3, r2
 8010a02:	d00f      	beq.n	8010a24 <TIM_OC6_SetConfig+0x78>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	4a18      	ldr	r2, [pc, #96]	@ (8010a68 <TIM_OC6_SetConfig+0xbc>)
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	d00b      	beq.n	8010a24 <TIM_OC6_SetConfig+0x78>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	4a17      	ldr	r2, [pc, #92]	@ (8010a6c <TIM_OC6_SetConfig+0xc0>)
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d007      	beq.n	8010a24 <TIM_OC6_SetConfig+0x78>
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	4a16      	ldr	r2, [pc, #88]	@ (8010a70 <TIM_OC6_SetConfig+0xc4>)
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	d003      	beq.n	8010a24 <TIM_OC6_SetConfig+0x78>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	4a15      	ldr	r2, [pc, #84]	@ (8010a74 <TIM_OC6_SetConfig+0xc8>)
 8010a20:	4293      	cmp	r3, r2
 8010a22:	d109      	bne.n	8010a38 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	695b      	ldr	r3, [r3, #20]
 8010a30:	029b      	lsls	r3, r3, #10
 8010a32:	697a      	ldr	r2, [r7, #20]
 8010a34:	4313      	orrs	r3, r2
 8010a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	697a      	ldr	r2, [r7, #20]
 8010a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	68fa      	ldr	r2, [r7, #12]
 8010a42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	685a      	ldr	r2, [r3, #4]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	693a      	ldr	r2, [r7, #16]
 8010a50:	621a      	str	r2, [r3, #32]
}
 8010a52:	bf00      	nop
 8010a54:	371c      	adds	r7, #28
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr
 8010a5e:	bf00      	nop
 8010a60:	feff8fff 	.word	0xfeff8fff
 8010a64:	40010000 	.word	0x40010000
 8010a68:	40010400 	.word	0x40010400
 8010a6c:	40014000 	.word	0x40014000
 8010a70:	40014400 	.word	0x40014400
 8010a74:	40014800 	.word	0x40014800

08010a78 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b086      	sub	sp, #24
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010a82:	2300      	movs	r3, #0
 8010a84:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	689b      	ldr	r3, [r3, #8]
 8010a8c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010a8e:	693a      	ldr	r2, [r7, #16]
 8010a90:	4b65      	ldr	r3, [pc, #404]	@ (8010c28 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8010a92:	4013      	ands	r3, r2
 8010a94:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	693a      	ldr	r2, [r7, #16]
 8010a9c:	4313      	orrs	r3, r2
 8010a9e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8010aa0:	693a      	ldr	r2, [r7, #16]
 8010aa2:	4b62      	ldr	r3, [pc, #392]	@ (8010c2c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8010aa4:	4013      	ands	r3, r2
 8010aa6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	693a      	ldr	r2, [r7, #16]
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	693a      	ldr	r2, [r7, #16]
 8010ab8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	4a5c      	ldr	r2, [pc, #368]	@ (8010c30 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	f000 80ab 	beq.w	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010ac6:	4a5a      	ldr	r2, [pc, #360]	@ (8010c30 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8010ac8:	4293      	cmp	r3, r2
 8010aca:	f200 80a4 	bhi.w	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010ace:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010ad2:	f000 80a3 	beq.w	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010ad6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010ada:	f200 809c 	bhi.w	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010ade:	4a55      	ldr	r2, [pc, #340]	@ (8010c34 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	f000 809b 	beq.w	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010ae6:	4a53      	ldr	r2, [pc, #332]	@ (8010c34 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	f200 8094 	bhi.w	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010aee:	4a52      	ldr	r2, [pc, #328]	@ (8010c38 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	f000 8093 	beq.w	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010af6:	4a50      	ldr	r2, [pc, #320]	@ (8010c38 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8010af8:	4293      	cmp	r3, r2
 8010afa:	f200 808c 	bhi.w	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010afe:	4a4f      	ldr	r2, [pc, #316]	@ (8010c3c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8010b00:	4293      	cmp	r3, r2
 8010b02:	f000 808b 	beq.w	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010b06:	4a4d      	ldr	r2, [pc, #308]	@ (8010c3c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	f200 8084 	bhi.w	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010b0e:	4a4c      	ldr	r2, [pc, #304]	@ (8010c40 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8010b10:	4293      	cmp	r3, r2
 8010b12:	f000 8083 	beq.w	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010b16:	4a4a      	ldr	r2, [pc, #296]	@ (8010c40 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d87c      	bhi.n	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010b1c:	4a49      	ldr	r2, [pc, #292]	@ (8010c44 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d07c      	beq.n	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010b22:	4a48      	ldr	r2, [pc, #288]	@ (8010c44 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d876      	bhi.n	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010b28:	4a47      	ldr	r2, [pc, #284]	@ (8010c48 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8010b2a:	4293      	cmp	r3, r2
 8010b2c:	d076      	beq.n	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010b2e:	4a46      	ldr	r2, [pc, #280]	@ (8010c48 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8010b30:	4293      	cmp	r3, r2
 8010b32:	d870      	bhi.n	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010b34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010b38:	d070      	beq.n	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010b3a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010b3e:	d86a      	bhi.n	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010b40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010b44:	d06a      	beq.n	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010b46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010b4a:	d864      	bhi.n	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010b4c:	2b70      	cmp	r3, #112	@ 0x70
 8010b4e:	d01a      	beq.n	8010b86 <TIM_SlaveTimer_SetConfig+0x10e>
 8010b50:	2b70      	cmp	r3, #112	@ 0x70
 8010b52:	d860      	bhi.n	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010b54:	2b60      	cmp	r3, #96	@ 0x60
 8010b56:	d054      	beq.n	8010c02 <TIM_SlaveTimer_SetConfig+0x18a>
 8010b58:	2b60      	cmp	r3, #96	@ 0x60
 8010b5a:	d85c      	bhi.n	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010b5c:	2b50      	cmp	r3, #80	@ 0x50
 8010b5e:	d046      	beq.n	8010bee <TIM_SlaveTimer_SetConfig+0x176>
 8010b60:	2b50      	cmp	r3, #80	@ 0x50
 8010b62:	d858      	bhi.n	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010b64:	2b40      	cmp	r3, #64	@ 0x40
 8010b66:	d019      	beq.n	8010b9c <TIM_SlaveTimer_SetConfig+0x124>
 8010b68:	2b40      	cmp	r3, #64	@ 0x40
 8010b6a:	d854      	bhi.n	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010b6c:	2b30      	cmp	r3, #48	@ 0x30
 8010b6e:	d055      	beq.n	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010b70:	2b30      	cmp	r3, #48	@ 0x30
 8010b72:	d850      	bhi.n	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010b74:	2b20      	cmp	r3, #32
 8010b76:	d051      	beq.n	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010b78:	2b20      	cmp	r3, #32
 8010b7a:	d84c      	bhi.n	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d04d      	beq.n	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010b80:	2b10      	cmp	r3, #16
 8010b82:	d04b      	beq.n	8010c1c <TIM_SlaveTimer_SetConfig+0x1a4>
 8010b84:	e047      	b.n	8010c16 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8010b96:	f000 f8d7 	bl	8010d48 <TIM_ETR_SetConfig>
      break;
 8010b9a:	e040      	b.n	8010c1e <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	2b05      	cmp	r3, #5
 8010ba2:	d101      	bne.n	8010ba8 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	e03b      	b.n	8010c20 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	6a1b      	ldr	r3, [r3, #32]
 8010bae:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	6a1a      	ldr	r2, [r3, #32]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	f022 0201 	bic.w	r2, r2, #1
 8010bbe:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	699b      	ldr	r3, [r3, #24]
 8010bc6:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010bce:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	691b      	ldr	r3, [r3, #16]
 8010bd4:	011b      	lsls	r3, r3, #4
 8010bd6:	68ba      	ldr	r2, [r7, #8]
 8010bd8:	4313      	orrs	r3, r2
 8010bda:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	68ba      	ldr	r2, [r7, #8]
 8010be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	68fa      	ldr	r2, [r7, #12]
 8010bea:	621a      	str	r2, [r3, #32]
      break;
 8010bec:	e017      	b.n	8010c1e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	f000 f826 	bl	8010c4c <TIM_TI1_ConfigInputStage>
      break;
 8010c00:	e00d      	b.n	8010c1e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010c0e:	461a      	mov	r2, r3
 8010c10:	f000 f84b 	bl	8010caa <TIM_TI2_ConfigInputStage>
      break;
 8010c14:	e003      	b.n	8010c1e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8010c16:	2301      	movs	r3, #1
 8010c18:	75fb      	strb	r3, [r7, #23]
      break;
 8010c1a:	e000      	b.n	8010c1e <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8010c1c:	bf00      	nop
  }

  return status;
 8010c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	3718      	adds	r7, #24
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	ffcfff8f 	.word	0xffcfff8f
 8010c2c:	fffefff8 	.word	0xfffefff8
 8010c30:	00200010 	.word	0x00200010
 8010c34:	00100070 	.word	0x00100070
 8010c38:	00100060 	.word	0x00100060
 8010c3c:	00100050 	.word	0x00100050
 8010c40:	00100040 	.word	0x00100040
 8010c44:	00100030 	.word	0x00100030
 8010c48:	00100020 	.word	0x00100020

08010c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b087      	sub	sp, #28
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	60f8      	str	r0, [r7, #12]
 8010c54:	60b9      	str	r1, [r7, #8]
 8010c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	6a1b      	ldr	r3, [r3, #32]
 8010c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	6a1b      	ldr	r3, [r3, #32]
 8010c62:	f023 0201 	bic.w	r2, r3, #1
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	699b      	ldr	r3, [r3, #24]
 8010c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	011b      	lsls	r3, r3, #4
 8010c7c:	693a      	ldr	r2, [r7, #16]
 8010c7e:	4313      	orrs	r3, r2
 8010c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	f023 030a 	bic.w	r3, r3, #10
 8010c88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010c8a:	697a      	ldr	r2, [r7, #20]
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	4313      	orrs	r3, r2
 8010c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	693a      	ldr	r2, [r7, #16]
 8010c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	697a      	ldr	r2, [r7, #20]
 8010c9c:	621a      	str	r2, [r3, #32]
}
 8010c9e:	bf00      	nop
 8010ca0:	371c      	adds	r7, #28
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr

08010caa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010caa:	b480      	push	{r7}
 8010cac:	b087      	sub	sp, #28
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	60f8      	str	r0, [r7, #12]
 8010cb2:	60b9      	str	r1, [r7, #8]
 8010cb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	6a1b      	ldr	r3, [r3, #32]
 8010cba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	6a1b      	ldr	r3, [r3, #32]
 8010cc0:	f023 0210 	bic.w	r2, r3, #16
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	699b      	ldr	r3, [r3, #24]
 8010ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	031b      	lsls	r3, r3, #12
 8010cda:	693a      	ldr	r2, [r7, #16]
 8010cdc:	4313      	orrs	r3, r2
 8010cde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010ce6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	011b      	lsls	r3, r3, #4
 8010cec:	697a      	ldr	r2, [r7, #20]
 8010cee:	4313      	orrs	r3, r2
 8010cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	693a      	ldr	r2, [r7, #16]
 8010cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	697a      	ldr	r2, [r7, #20]
 8010cfc:	621a      	str	r2, [r3, #32]
}
 8010cfe:	bf00      	nop
 8010d00:	371c      	adds	r7, #28
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr
	...

08010d0c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b085      	sub	sp, #20
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	689b      	ldr	r3, [r3, #8]
 8010d1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010d1c:	68fa      	ldr	r2, [r7, #12]
 8010d1e:	4b09      	ldr	r3, [pc, #36]	@ (8010d44 <TIM_ITRx_SetConfig+0x38>)
 8010d20:	4013      	ands	r3, r2
 8010d22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010d24:	683a      	ldr	r2, [r7, #0]
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	4313      	orrs	r3, r2
 8010d2a:	f043 0307 	orr.w	r3, r3, #7
 8010d2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	68fa      	ldr	r2, [r7, #12]
 8010d34:	609a      	str	r2, [r3, #8]
}
 8010d36:	bf00      	nop
 8010d38:	3714      	adds	r7, #20
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr
 8010d42:	bf00      	nop
 8010d44:	ffcfff8f 	.word	0xffcfff8f

08010d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b087      	sub	sp, #28
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	607a      	str	r2, [r7, #4]
 8010d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	689b      	ldr	r3, [r3, #8]
 8010d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	021a      	lsls	r2, r3, #8
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	431a      	orrs	r2, r3
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	697a      	ldr	r2, [r7, #20]
 8010d72:	4313      	orrs	r3, r2
 8010d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	697a      	ldr	r2, [r7, #20]
 8010d7a:	609a      	str	r2, [r3, #8]
}
 8010d7c:	bf00      	nop
 8010d7e:	371c      	adds	r7, #28
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr

08010d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b087      	sub	sp, #28
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	60f8      	str	r0, [r7, #12]
 8010d90:	60b9      	str	r1, [r7, #8]
 8010d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	f003 031f 	and.w	r3, r3, #31
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8010da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	6a1a      	ldr	r2, [r3, #32]
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	43db      	mvns	r3, r3
 8010daa:	401a      	ands	r2, r3
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	6a1a      	ldr	r2, [r3, #32]
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	f003 031f 	and.w	r3, r3, #31
 8010dba:	6879      	ldr	r1, [r7, #4]
 8010dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8010dc0:	431a      	orrs	r2, r3
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	621a      	str	r2, [r3, #32]
}
 8010dc6:	bf00      	nop
 8010dc8:	371c      	adds	r7, #28
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr
	...

08010dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b085      	sub	sp, #20
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d101      	bne.n	8010dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010de8:	2302      	movs	r3, #2
 8010dea:	e077      	b.n	8010edc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2201      	movs	r2, #1
 8010df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2202      	movs	r2, #2
 8010df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	685b      	ldr	r3, [r3, #4]
 8010e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	689b      	ldr	r3, [r3, #8]
 8010e0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	4a35      	ldr	r2, [pc, #212]	@ (8010ee8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d004      	beq.n	8010e20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	4a34      	ldr	r2, [pc, #208]	@ (8010eec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d108      	bne.n	8010e32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010e26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	68fa      	ldr	r2, [r7, #12]
 8010e2e:	4313      	orrs	r3, r2
 8010e30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	68fa      	ldr	r2, [r7, #12]
 8010e40:	4313      	orrs	r3, r2
 8010e42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	68fa      	ldr	r2, [r7, #12]
 8010e4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	4a25      	ldr	r2, [pc, #148]	@ (8010ee8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d02c      	beq.n	8010eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e5e:	d027      	beq.n	8010eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	4a22      	ldr	r2, [pc, #136]	@ (8010ef0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d022      	beq.n	8010eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	4a21      	ldr	r2, [pc, #132]	@ (8010ef4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010e70:	4293      	cmp	r3, r2
 8010e72:	d01d      	beq.n	8010eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	4a1f      	ldr	r2, [pc, #124]	@ (8010ef8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010e7a:	4293      	cmp	r3, r2
 8010e7c:	d018      	beq.n	8010eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	4a1a      	ldr	r2, [pc, #104]	@ (8010eec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d013      	beq.n	8010eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8010efc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d00e      	beq.n	8010eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	4a1a      	ldr	r2, [pc, #104]	@ (8010f00 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	d009      	beq.n	8010eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	4a18      	ldr	r2, [pc, #96]	@ (8010f04 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d004      	beq.n	8010eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	4a17      	ldr	r2, [pc, #92]	@ (8010f08 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d10c      	bne.n	8010eca <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010eb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	689b      	ldr	r3, [r3, #8]
 8010ebc:	68ba      	ldr	r2, [r7, #8]
 8010ebe:	4313      	orrs	r3, r2
 8010ec0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	68ba      	ldr	r2, [r7, #8]
 8010ec8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2201      	movs	r2, #1
 8010ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010eda:	2300      	movs	r3, #0
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3714      	adds	r7, #20
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee6:	4770      	bx	lr
 8010ee8:	40010000 	.word	0x40010000
 8010eec:	40010400 	.word	0x40010400
 8010ef0:	40000400 	.word	0x40000400
 8010ef4:	40000800 	.word	0x40000800
 8010ef8:	40000c00 	.word	0x40000c00
 8010efc:	40001800 	.word	0x40001800
 8010f00:	40014000 	.word	0x40014000
 8010f04:	4000e000 	.word	0x4000e000
 8010f08:	4000e400 	.word	0x4000e400

08010f0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b085      	sub	sp, #20
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010f16:	2300      	movs	r3, #0
 8010f18:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d101      	bne.n	8010f28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010f24:	2302      	movs	r3, #2
 8010f26:	e073      	b.n	8011010 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	68db      	ldr	r3, [r3, #12]
 8010f3a:	4313      	orrs	r3, r2
 8010f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	689b      	ldr	r3, [r3, #8]
 8010f48:	4313      	orrs	r3, r2
 8010f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	685b      	ldr	r3, [r3, #4]
 8010f56:	4313      	orrs	r3, r2
 8010f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	4313      	orrs	r3, r2
 8010f66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	691b      	ldr	r3, [r3, #16]
 8010f72:	4313      	orrs	r3, r2
 8010f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	695b      	ldr	r3, [r3, #20]
 8010f80:	4313      	orrs	r3, r2
 8010f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f8e:	4313      	orrs	r3, r2
 8010f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	699b      	ldr	r3, [r3, #24]
 8010f9c:	041b      	lsls	r3, r3, #16
 8010f9e:	4313      	orrs	r3, r2
 8010fa0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	69db      	ldr	r3, [r3, #28]
 8010fac:	4313      	orrs	r3, r2
 8010fae:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	4a19      	ldr	r2, [pc, #100]	@ (801101c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d004      	beq.n	8010fc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	4a18      	ldr	r2, [pc, #96]	@ (8011020 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d11c      	bne.n	8010ffe <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fce:	051b      	lsls	r3, r3, #20
 8010fd0:	4313      	orrs	r3, r2
 8010fd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	6a1b      	ldr	r3, [r3, #32]
 8010fde:	4313      	orrs	r3, r2
 8010fe0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fec:	4313      	orrs	r3, r2
 8010fee:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ffa:	4313      	orrs	r3, r2
 8010ffc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	68fa      	ldr	r2, [r7, #12]
 8011004:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2200      	movs	r2, #0
 801100a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801100e:	2300      	movs	r3, #0
}
 8011010:	4618      	mov	r0, r3
 8011012:	3714      	adds	r7, #20
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr
 801101c:	40010000 	.word	0x40010000
 8011020:	40010400 	.word	0x40010400

08011024 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011024:	b480      	push	{r7}
 8011026:	b083      	sub	sp, #12
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801102c:	bf00      	nop
 801102e:	370c      	adds	r7, #12
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011040:	bf00      	nop
 8011042:	370c      	adds	r7, #12
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr

0801104c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801104c:	b480      	push	{r7}
 801104e:	b083      	sub	sp, #12
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011054:	bf00      	nop
 8011056:	370c      	adds	r7, #12
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr

08011060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d101      	bne.n	8011072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801106e:	2301      	movs	r3, #1
 8011070:	e042      	b.n	80110f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011078:	2b00      	cmp	r3, #0
 801107a:	d106      	bne.n	801108a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2200      	movs	r2, #0
 8011080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f7f2 faeb 	bl	8003660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2224      	movs	r2, #36	@ 0x24
 801108e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	681a      	ldr	r2, [r3, #0]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	f022 0201 	bic.w	r2, r2, #1
 80110a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d002      	beq.n	80110b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f000 ff22 	bl	8011ef4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f000 f8b3 	bl	801121c <UART_SetConfig>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	d101      	bne.n	80110c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80110bc:	2301      	movs	r3, #1
 80110be:	e01b      	b.n	80110f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	685a      	ldr	r2, [r3, #4]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80110ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	689a      	ldr	r2, [r3, #8]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80110de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	681a      	ldr	r2, [r3, #0]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	f042 0201 	orr.w	r2, r2, #1
 80110ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f000 ffa1 	bl	8012038 <UART_CheckIdleState>
 80110f6:	4603      	mov	r3, r0
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3708      	adds	r7, #8
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b08a      	sub	sp, #40	@ 0x28
 8011104:	af02      	add	r7, sp, #8
 8011106:	60f8      	str	r0, [r7, #12]
 8011108:	60b9      	str	r1, [r7, #8]
 801110a:	603b      	str	r3, [r7, #0]
 801110c:	4613      	mov	r3, r2
 801110e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011116:	2b20      	cmp	r3, #32
 8011118:	d17b      	bne.n	8011212 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d002      	beq.n	8011126 <HAL_UART_Transmit+0x26>
 8011120:	88fb      	ldrh	r3, [r7, #6]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d101      	bne.n	801112a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8011126:	2301      	movs	r3, #1
 8011128:	e074      	b.n	8011214 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	2200      	movs	r2, #0
 801112e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	2221      	movs	r2, #33	@ 0x21
 8011136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801113a:	f7f3 ff17 	bl	8004f6c <HAL_GetTick>
 801113e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	88fa      	ldrh	r2, [r7, #6]
 8011144:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	88fa      	ldrh	r2, [r7, #6]
 801114c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	689b      	ldr	r3, [r3, #8]
 8011154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011158:	d108      	bne.n	801116c <HAL_UART_Transmit+0x6c>
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	691b      	ldr	r3, [r3, #16]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d104      	bne.n	801116c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8011162:	2300      	movs	r3, #0
 8011164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	61bb      	str	r3, [r7, #24]
 801116a:	e003      	b.n	8011174 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011170:	2300      	movs	r3, #0
 8011172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011174:	e030      	b.n	80111d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	9300      	str	r3, [sp, #0]
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	2200      	movs	r2, #0
 801117e:	2180      	movs	r1, #128	@ 0x80
 8011180:	68f8      	ldr	r0, [r7, #12]
 8011182:	f001 f803 	bl	801218c <UART_WaitOnFlagUntilTimeout>
 8011186:	4603      	mov	r3, r0
 8011188:	2b00      	cmp	r3, #0
 801118a:	d005      	beq.n	8011198 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2220      	movs	r2, #32
 8011190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8011194:	2303      	movs	r3, #3
 8011196:	e03d      	b.n	8011214 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d10b      	bne.n	80111b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801119e:	69bb      	ldr	r3, [r7, #24]
 80111a0:	881b      	ldrh	r3, [r3, #0]
 80111a2:	461a      	mov	r2, r3
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80111ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80111ae:	69bb      	ldr	r3, [r7, #24]
 80111b0:	3302      	adds	r3, #2
 80111b2:	61bb      	str	r3, [r7, #24]
 80111b4:	e007      	b.n	80111c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	781a      	ldrb	r2, [r3, #0]
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80111c0:	69fb      	ldr	r3, [r7, #28]
 80111c2:	3301      	adds	r3, #1
 80111c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	3b01      	subs	r3, #1
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80111de:	b29b      	uxth	r3, r3
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d1c8      	bne.n	8011176 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	9300      	str	r3, [sp, #0]
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	2200      	movs	r2, #0
 80111ec:	2140      	movs	r1, #64	@ 0x40
 80111ee:	68f8      	ldr	r0, [r7, #12]
 80111f0:	f000 ffcc 	bl	801218c <UART_WaitOnFlagUntilTimeout>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d005      	beq.n	8011206 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2220      	movs	r2, #32
 80111fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8011202:	2303      	movs	r3, #3
 8011204:	e006      	b.n	8011214 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	2220      	movs	r2, #32
 801120a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801120e:	2300      	movs	r3, #0
 8011210:	e000      	b.n	8011214 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8011212:	2302      	movs	r3, #2
  }
}
 8011214:	4618      	mov	r0, r3
 8011216:	3720      	adds	r7, #32
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801121c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011220:	b092      	sub	sp, #72	@ 0x48
 8011222:	af00      	add	r7, sp, #0
 8011224:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011226:	2300      	movs	r3, #0
 8011228:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	689a      	ldr	r2, [r3, #8]
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	691b      	ldr	r3, [r3, #16]
 8011234:	431a      	orrs	r2, r3
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	695b      	ldr	r3, [r3, #20]
 801123a:	431a      	orrs	r2, r3
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	69db      	ldr	r3, [r3, #28]
 8011240:	4313      	orrs	r3, r2
 8011242:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	681a      	ldr	r2, [r3, #0]
 801124a:	4bbe      	ldr	r3, [pc, #760]	@ (8011544 <UART_SetConfig+0x328>)
 801124c:	4013      	ands	r3, r2
 801124e:	697a      	ldr	r2, [r7, #20]
 8011250:	6812      	ldr	r2, [r2, #0]
 8011252:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011254:	430b      	orrs	r3, r1
 8011256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	68da      	ldr	r2, [r3, #12]
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	430a      	orrs	r2, r1
 801126c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	699b      	ldr	r3, [r3, #24]
 8011272:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	4ab3      	ldr	r2, [pc, #716]	@ (8011548 <UART_SetConfig+0x32c>)
 801127a:	4293      	cmp	r3, r2
 801127c:	d004      	beq.n	8011288 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	6a1b      	ldr	r3, [r3, #32]
 8011282:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011284:	4313      	orrs	r3, r2
 8011286:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	689a      	ldr	r2, [r3, #8]
 801128e:	4baf      	ldr	r3, [pc, #700]	@ (801154c <UART_SetConfig+0x330>)
 8011290:	4013      	ands	r3, r2
 8011292:	697a      	ldr	r2, [r7, #20]
 8011294:	6812      	ldr	r2, [r2, #0]
 8011296:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011298:	430b      	orrs	r3, r1
 801129a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112a2:	f023 010f 	bic.w	r1, r3, #15
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	430a      	orrs	r2, r1
 80112b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	4aa6      	ldr	r2, [pc, #664]	@ (8011550 <UART_SetConfig+0x334>)
 80112b8:	4293      	cmp	r3, r2
 80112ba:	d177      	bne.n	80113ac <UART_SetConfig+0x190>
 80112bc:	4ba5      	ldr	r3, [pc, #660]	@ (8011554 <UART_SetConfig+0x338>)
 80112be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80112c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80112c4:	2b28      	cmp	r3, #40	@ 0x28
 80112c6:	d86d      	bhi.n	80113a4 <UART_SetConfig+0x188>
 80112c8:	a201      	add	r2, pc, #4	@ (adr r2, 80112d0 <UART_SetConfig+0xb4>)
 80112ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ce:	bf00      	nop
 80112d0:	08011375 	.word	0x08011375
 80112d4:	080113a5 	.word	0x080113a5
 80112d8:	080113a5 	.word	0x080113a5
 80112dc:	080113a5 	.word	0x080113a5
 80112e0:	080113a5 	.word	0x080113a5
 80112e4:	080113a5 	.word	0x080113a5
 80112e8:	080113a5 	.word	0x080113a5
 80112ec:	080113a5 	.word	0x080113a5
 80112f0:	0801137d 	.word	0x0801137d
 80112f4:	080113a5 	.word	0x080113a5
 80112f8:	080113a5 	.word	0x080113a5
 80112fc:	080113a5 	.word	0x080113a5
 8011300:	080113a5 	.word	0x080113a5
 8011304:	080113a5 	.word	0x080113a5
 8011308:	080113a5 	.word	0x080113a5
 801130c:	080113a5 	.word	0x080113a5
 8011310:	08011385 	.word	0x08011385
 8011314:	080113a5 	.word	0x080113a5
 8011318:	080113a5 	.word	0x080113a5
 801131c:	080113a5 	.word	0x080113a5
 8011320:	080113a5 	.word	0x080113a5
 8011324:	080113a5 	.word	0x080113a5
 8011328:	080113a5 	.word	0x080113a5
 801132c:	080113a5 	.word	0x080113a5
 8011330:	0801138d 	.word	0x0801138d
 8011334:	080113a5 	.word	0x080113a5
 8011338:	080113a5 	.word	0x080113a5
 801133c:	080113a5 	.word	0x080113a5
 8011340:	080113a5 	.word	0x080113a5
 8011344:	080113a5 	.word	0x080113a5
 8011348:	080113a5 	.word	0x080113a5
 801134c:	080113a5 	.word	0x080113a5
 8011350:	08011395 	.word	0x08011395
 8011354:	080113a5 	.word	0x080113a5
 8011358:	080113a5 	.word	0x080113a5
 801135c:	080113a5 	.word	0x080113a5
 8011360:	080113a5 	.word	0x080113a5
 8011364:	080113a5 	.word	0x080113a5
 8011368:	080113a5 	.word	0x080113a5
 801136c:	080113a5 	.word	0x080113a5
 8011370:	0801139d 	.word	0x0801139d
 8011374:	2301      	movs	r3, #1
 8011376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801137a:	e326      	b.n	80119ca <UART_SetConfig+0x7ae>
 801137c:	2304      	movs	r3, #4
 801137e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011382:	e322      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011384:	2308      	movs	r3, #8
 8011386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801138a:	e31e      	b.n	80119ca <UART_SetConfig+0x7ae>
 801138c:	2310      	movs	r3, #16
 801138e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011392:	e31a      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011394:	2320      	movs	r3, #32
 8011396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801139a:	e316      	b.n	80119ca <UART_SetConfig+0x7ae>
 801139c:	2340      	movs	r3, #64	@ 0x40
 801139e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113a2:	e312      	b.n	80119ca <UART_SetConfig+0x7ae>
 80113a4:	2380      	movs	r3, #128	@ 0x80
 80113a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113aa:	e30e      	b.n	80119ca <UART_SetConfig+0x7ae>
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	4a69      	ldr	r2, [pc, #420]	@ (8011558 <UART_SetConfig+0x33c>)
 80113b2:	4293      	cmp	r3, r2
 80113b4:	d130      	bne.n	8011418 <UART_SetConfig+0x1fc>
 80113b6:	4b67      	ldr	r3, [pc, #412]	@ (8011554 <UART_SetConfig+0x338>)
 80113b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113ba:	f003 0307 	and.w	r3, r3, #7
 80113be:	2b05      	cmp	r3, #5
 80113c0:	d826      	bhi.n	8011410 <UART_SetConfig+0x1f4>
 80113c2:	a201      	add	r2, pc, #4	@ (adr r2, 80113c8 <UART_SetConfig+0x1ac>)
 80113c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c8:	080113e1 	.word	0x080113e1
 80113cc:	080113e9 	.word	0x080113e9
 80113d0:	080113f1 	.word	0x080113f1
 80113d4:	080113f9 	.word	0x080113f9
 80113d8:	08011401 	.word	0x08011401
 80113dc:	08011409 	.word	0x08011409
 80113e0:	2300      	movs	r3, #0
 80113e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113e6:	e2f0      	b.n	80119ca <UART_SetConfig+0x7ae>
 80113e8:	2304      	movs	r3, #4
 80113ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113ee:	e2ec      	b.n	80119ca <UART_SetConfig+0x7ae>
 80113f0:	2308      	movs	r3, #8
 80113f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113f6:	e2e8      	b.n	80119ca <UART_SetConfig+0x7ae>
 80113f8:	2310      	movs	r3, #16
 80113fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113fe:	e2e4      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011400:	2320      	movs	r3, #32
 8011402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011406:	e2e0      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011408:	2340      	movs	r3, #64	@ 0x40
 801140a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801140e:	e2dc      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011410:	2380      	movs	r3, #128	@ 0x80
 8011412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011416:	e2d8      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	4a4f      	ldr	r2, [pc, #316]	@ (801155c <UART_SetConfig+0x340>)
 801141e:	4293      	cmp	r3, r2
 8011420:	d130      	bne.n	8011484 <UART_SetConfig+0x268>
 8011422:	4b4c      	ldr	r3, [pc, #304]	@ (8011554 <UART_SetConfig+0x338>)
 8011424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011426:	f003 0307 	and.w	r3, r3, #7
 801142a:	2b05      	cmp	r3, #5
 801142c:	d826      	bhi.n	801147c <UART_SetConfig+0x260>
 801142e:	a201      	add	r2, pc, #4	@ (adr r2, 8011434 <UART_SetConfig+0x218>)
 8011430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011434:	0801144d 	.word	0x0801144d
 8011438:	08011455 	.word	0x08011455
 801143c:	0801145d 	.word	0x0801145d
 8011440:	08011465 	.word	0x08011465
 8011444:	0801146d 	.word	0x0801146d
 8011448:	08011475 	.word	0x08011475
 801144c:	2300      	movs	r3, #0
 801144e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011452:	e2ba      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011454:	2304      	movs	r3, #4
 8011456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801145a:	e2b6      	b.n	80119ca <UART_SetConfig+0x7ae>
 801145c:	2308      	movs	r3, #8
 801145e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011462:	e2b2      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011464:	2310      	movs	r3, #16
 8011466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801146a:	e2ae      	b.n	80119ca <UART_SetConfig+0x7ae>
 801146c:	2320      	movs	r3, #32
 801146e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011472:	e2aa      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011474:	2340      	movs	r3, #64	@ 0x40
 8011476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801147a:	e2a6      	b.n	80119ca <UART_SetConfig+0x7ae>
 801147c:	2380      	movs	r3, #128	@ 0x80
 801147e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011482:	e2a2      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	4a35      	ldr	r2, [pc, #212]	@ (8011560 <UART_SetConfig+0x344>)
 801148a:	4293      	cmp	r3, r2
 801148c:	d130      	bne.n	80114f0 <UART_SetConfig+0x2d4>
 801148e:	4b31      	ldr	r3, [pc, #196]	@ (8011554 <UART_SetConfig+0x338>)
 8011490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011492:	f003 0307 	and.w	r3, r3, #7
 8011496:	2b05      	cmp	r3, #5
 8011498:	d826      	bhi.n	80114e8 <UART_SetConfig+0x2cc>
 801149a:	a201      	add	r2, pc, #4	@ (adr r2, 80114a0 <UART_SetConfig+0x284>)
 801149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114a0:	080114b9 	.word	0x080114b9
 80114a4:	080114c1 	.word	0x080114c1
 80114a8:	080114c9 	.word	0x080114c9
 80114ac:	080114d1 	.word	0x080114d1
 80114b0:	080114d9 	.word	0x080114d9
 80114b4:	080114e1 	.word	0x080114e1
 80114b8:	2300      	movs	r3, #0
 80114ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114be:	e284      	b.n	80119ca <UART_SetConfig+0x7ae>
 80114c0:	2304      	movs	r3, #4
 80114c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114c6:	e280      	b.n	80119ca <UART_SetConfig+0x7ae>
 80114c8:	2308      	movs	r3, #8
 80114ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114ce:	e27c      	b.n	80119ca <UART_SetConfig+0x7ae>
 80114d0:	2310      	movs	r3, #16
 80114d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114d6:	e278      	b.n	80119ca <UART_SetConfig+0x7ae>
 80114d8:	2320      	movs	r3, #32
 80114da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114de:	e274      	b.n	80119ca <UART_SetConfig+0x7ae>
 80114e0:	2340      	movs	r3, #64	@ 0x40
 80114e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114e6:	e270      	b.n	80119ca <UART_SetConfig+0x7ae>
 80114e8:	2380      	movs	r3, #128	@ 0x80
 80114ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114ee:	e26c      	b.n	80119ca <UART_SetConfig+0x7ae>
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	4a1b      	ldr	r2, [pc, #108]	@ (8011564 <UART_SetConfig+0x348>)
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d142      	bne.n	8011580 <UART_SetConfig+0x364>
 80114fa:	4b16      	ldr	r3, [pc, #88]	@ (8011554 <UART_SetConfig+0x338>)
 80114fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114fe:	f003 0307 	and.w	r3, r3, #7
 8011502:	2b05      	cmp	r3, #5
 8011504:	d838      	bhi.n	8011578 <UART_SetConfig+0x35c>
 8011506:	a201      	add	r2, pc, #4	@ (adr r2, 801150c <UART_SetConfig+0x2f0>)
 8011508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801150c:	08011525 	.word	0x08011525
 8011510:	0801152d 	.word	0x0801152d
 8011514:	08011535 	.word	0x08011535
 8011518:	0801153d 	.word	0x0801153d
 801151c:	08011569 	.word	0x08011569
 8011520:	08011571 	.word	0x08011571
 8011524:	2300      	movs	r3, #0
 8011526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801152a:	e24e      	b.n	80119ca <UART_SetConfig+0x7ae>
 801152c:	2304      	movs	r3, #4
 801152e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011532:	e24a      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011534:	2308      	movs	r3, #8
 8011536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801153a:	e246      	b.n	80119ca <UART_SetConfig+0x7ae>
 801153c:	2310      	movs	r3, #16
 801153e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011542:	e242      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011544:	cfff69f3 	.word	0xcfff69f3
 8011548:	58000c00 	.word	0x58000c00
 801154c:	11fff4ff 	.word	0x11fff4ff
 8011550:	40011000 	.word	0x40011000
 8011554:	58024400 	.word	0x58024400
 8011558:	40004400 	.word	0x40004400
 801155c:	40004800 	.word	0x40004800
 8011560:	40004c00 	.word	0x40004c00
 8011564:	40005000 	.word	0x40005000
 8011568:	2320      	movs	r3, #32
 801156a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801156e:	e22c      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011570:	2340      	movs	r3, #64	@ 0x40
 8011572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011576:	e228      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011578:	2380      	movs	r3, #128	@ 0x80
 801157a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801157e:	e224      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	4ab1      	ldr	r2, [pc, #708]	@ (801184c <UART_SetConfig+0x630>)
 8011586:	4293      	cmp	r3, r2
 8011588:	d176      	bne.n	8011678 <UART_SetConfig+0x45c>
 801158a:	4bb1      	ldr	r3, [pc, #708]	@ (8011850 <UART_SetConfig+0x634>)
 801158c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801158e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011592:	2b28      	cmp	r3, #40	@ 0x28
 8011594:	d86c      	bhi.n	8011670 <UART_SetConfig+0x454>
 8011596:	a201      	add	r2, pc, #4	@ (adr r2, 801159c <UART_SetConfig+0x380>)
 8011598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801159c:	08011641 	.word	0x08011641
 80115a0:	08011671 	.word	0x08011671
 80115a4:	08011671 	.word	0x08011671
 80115a8:	08011671 	.word	0x08011671
 80115ac:	08011671 	.word	0x08011671
 80115b0:	08011671 	.word	0x08011671
 80115b4:	08011671 	.word	0x08011671
 80115b8:	08011671 	.word	0x08011671
 80115bc:	08011649 	.word	0x08011649
 80115c0:	08011671 	.word	0x08011671
 80115c4:	08011671 	.word	0x08011671
 80115c8:	08011671 	.word	0x08011671
 80115cc:	08011671 	.word	0x08011671
 80115d0:	08011671 	.word	0x08011671
 80115d4:	08011671 	.word	0x08011671
 80115d8:	08011671 	.word	0x08011671
 80115dc:	08011651 	.word	0x08011651
 80115e0:	08011671 	.word	0x08011671
 80115e4:	08011671 	.word	0x08011671
 80115e8:	08011671 	.word	0x08011671
 80115ec:	08011671 	.word	0x08011671
 80115f0:	08011671 	.word	0x08011671
 80115f4:	08011671 	.word	0x08011671
 80115f8:	08011671 	.word	0x08011671
 80115fc:	08011659 	.word	0x08011659
 8011600:	08011671 	.word	0x08011671
 8011604:	08011671 	.word	0x08011671
 8011608:	08011671 	.word	0x08011671
 801160c:	08011671 	.word	0x08011671
 8011610:	08011671 	.word	0x08011671
 8011614:	08011671 	.word	0x08011671
 8011618:	08011671 	.word	0x08011671
 801161c:	08011661 	.word	0x08011661
 8011620:	08011671 	.word	0x08011671
 8011624:	08011671 	.word	0x08011671
 8011628:	08011671 	.word	0x08011671
 801162c:	08011671 	.word	0x08011671
 8011630:	08011671 	.word	0x08011671
 8011634:	08011671 	.word	0x08011671
 8011638:	08011671 	.word	0x08011671
 801163c:	08011669 	.word	0x08011669
 8011640:	2301      	movs	r3, #1
 8011642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011646:	e1c0      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011648:	2304      	movs	r3, #4
 801164a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801164e:	e1bc      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011650:	2308      	movs	r3, #8
 8011652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011656:	e1b8      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011658:	2310      	movs	r3, #16
 801165a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801165e:	e1b4      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011660:	2320      	movs	r3, #32
 8011662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011666:	e1b0      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011668:	2340      	movs	r3, #64	@ 0x40
 801166a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801166e:	e1ac      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011670:	2380      	movs	r3, #128	@ 0x80
 8011672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011676:	e1a8      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	4a75      	ldr	r2, [pc, #468]	@ (8011854 <UART_SetConfig+0x638>)
 801167e:	4293      	cmp	r3, r2
 8011680:	d130      	bne.n	80116e4 <UART_SetConfig+0x4c8>
 8011682:	4b73      	ldr	r3, [pc, #460]	@ (8011850 <UART_SetConfig+0x634>)
 8011684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011686:	f003 0307 	and.w	r3, r3, #7
 801168a:	2b05      	cmp	r3, #5
 801168c:	d826      	bhi.n	80116dc <UART_SetConfig+0x4c0>
 801168e:	a201      	add	r2, pc, #4	@ (adr r2, 8011694 <UART_SetConfig+0x478>)
 8011690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011694:	080116ad 	.word	0x080116ad
 8011698:	080116b5 	.word	0x080116b5
 801169c:	080116bd 	.word	0x080116bd
 80116a0:	080116c5 	.word	0x080116c5
 80116a4:	080116cd 	.word	0x080116cd
 80116a8:	080116d5 	.word	0x080116d5
 80116ac:	2300      	movs	r3, #0
 80116ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116b2:	e18a      	b.n	80119ca <UART_SetConfig+0x7ae>
 80116b4:	2304      	movs	r3, #4
 80116b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116ba:	e186      	b.n	80119ca <UART_SetConfig+0x7ae>
 80116bc:	2308      	movs	r3, #8
 80116be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116c2:	e182      	b.n	80119ca <UART_SetConfig+0x7ae>
 80116c4:	2310      	movs	r3, #16
 80116c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116ca:	e17e      	b.n	80119ca <UART_SetConfig+0x7ae>
 80116cc:	2320      	movs	r3, #32
 80116ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116d2:	e17a      	b.n	80119ca <UART_SetConfig+0x7ae>
 80116d4:	2340      	movs	r3, #64	@ 0x40
 80116d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116da:	e176      	b.n	80119ca <UART_SetConfig+0x7ae>
 80116dc:	2380      	movs	r3, #128	@ 0x80
 80116de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116e2:	e172      	b.n	80119ca <UART_SetConfig+0x7ae>
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	4a5b      	ldr	r2, [pc, #364]	@ (8011858 <UART_SetConfig+0x63c>)
 80116ea:	4293      	cmp	r3, r2
 80116ec:	d130      	bne.n	8011750 <UART_SetConfig+0x534>
 80116ee:	4b58      	ldr	r3, [pc, #352]	@ (8011850 <UART_SetConfig+0x634>)
 80116f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80116f2:	f003 0307 	and.w	r3, r3, #7
 80116f6:	2b05      	cmp	r3, #5
 80116f8:	d826      	bhi.n	8011748 <UART_SetConfig+0x52c>
 80116fa:	a201      	add	r2, pc, #4	@ (adr r2, 8011700 <UART_SetConfig+0x4e4>)
 80116fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011700:	08011719 	.word	0x08011719
 8011704:	08011721 	.word	0x08011721
 8011708:	08011729 	.word	0x08011729
 801170c:	08011731 	.word	0x08011731
 8011710:	08011739 	.word	0x08011739
 8011714:	08011741 	.word	0x08011741
 8011718:	2300      	movs	r3, #0
 801171a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801171e:	e154      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011720:	2304      	movs	r3, #4
 8011722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011726:	e150      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011728:	2308      	movs	r3, #8
 801172a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801172e:	e14c      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011730:	2310      	movs	r3, #16
 8011732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011736:	e148      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011738:	2320      	movs	r3, #32
 801173a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801173e:	e144      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011740:	2340      	movs	r3, #64	@ 0x40
 8011742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011746:	e140      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011748:	2380      	movs	r3, #128	@ 0x80
 801174a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801174e:	e13c      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4a41      	ldr	r2, [pc, #260]	@ (801185c <UART_SetConfig+0x640>)
 8011756:	4293      	cmp	r3, r2
 8011758:	f040 8082 	bne.w	8011860 <UART_SetConfig+0x644>
 801175c:	4b3c      	ldr	r3, [pc, #240]	@ (8011850 <UART_SetConfig+0x634>)
 801175e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011760:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011764:	2b28      	cmp	r3, #40	@ 0x28
 8011766:	d86d      	bhi.n	8011844 <UART_SetConfig+0x628>
 8011768:	a201      	add	r2, pc, #4	@ (adr r2, 8011770 <UART_SetConfig+0x554>)
 801176a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801176e:	bf00      	nop
 8011770:	08011815 	.word	0x08011815
 8011774:	08011845 	.word	0x08011845
 8011778:	08011845 	.word	0x08011845
 801177c:	08011845 	.word	0x08011845
 8011780:	08011845 	.word	0x08011845
 8011784:	08011845 	.word	0x08011845
 8011788:	08011845 	.word	0x08011845
 801178c:	08011845 	.word	0x08011845
 8011790:	0801181d 	.word	0x0801181d
 8011794:	08011845 	.word	0x08011845
 8011798:	08011845 	.word	0x08011845
 801179c:	08011845 	.word	0x08011845
 80117a0:	08011845 	.word	0x08011845
 80117a4:	08011845 	.word	0x08011845
 80117a8:	08011845 	.word	0x08011845
 80117ac:	08011845 	.word	0x08011845
 80117b0:	08011825 	.word	0x08011825
 80117b4:	08011845 	.word	0x08011845
 80117b8:	08011845 	.word	0x08011845
 80117bc:	08011845 	.word	0x08011845
 80117c0:	08011845 	.word	0x08011845
 80117c4:	08011845 	.word	0x08011845
 80117c8:	08011845 	.word	0x08011845
 80117cc:	08011845 	.word	0x08011845
 80117d0:	0801182d 	.word	0x0801182d
 80117d4:	08011845 	.word	0x08011845
 80117d8:	08011845 	.word	0x08011845
 80117dc:	08011845 	.word	0x08011845
 80117e0:	08011845 	.word	0x08011845
 80117e4:	08011845 	.word	0x08011845
 80117e8:	08011845 	.word	0x08011845
 80117ec:	08011845 	.word	0x08011845
 80117f0:	08011835 	.word	0x08011835
 80117f4:	08011845 	.word	0x08011845
 80117f8:	08011845 	.word	0x08011845
 80117fc:	08011845 	.word	0x08011845
 8011800:	08011845 	.word	0x08011845
 8011804:	08011845 	.word	0x08011845
 8011808:	08011845 	.word	0x08011845
 801180c:	08011845 	.word	0x08011845
 8011810:	0801183d 	.word	0x0801183d
 8011814:	2301      	movs	r3, #1
 8011816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801181a:	e0d6      	b.n	80119ca <UART_SetConfig+0x7ae>
 801181c:	2304      	movs	r3, #4
 801181e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011822:	e0d2      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011824:	2308      	movs	r3, #8
 8011826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801182a:	e0ce      	b.n	80119ca <UART_SetConfig+0x7ae>
 801182c:	2310      	movs	r3, #16
 801182e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011832:	e0ca      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011834:	2320      	movs	r3, #32
 8011836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801183a:	e0c6      	b.n	80119ca <UART_SetConfig+0x7ae>
 801183c:	2340      	movs	r3, #64	@ 0x40
 801183e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011842:	e0c2      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011844:	2380      	movs	r3, #128	@ 0x80
 8011846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801184a:	e0be      	b.n	80119ca <UART_SetConfig+0x7ae>
 801184c:	40011400 	.word	0x40011400
 8011850:	58024400 	.word	0x58024400
 8011854:	40007800 	.word	0x40007800
 8011858:	40007c00 	.word	0x40007c00
 801185c:	40011800 	.word	0x40011800
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	4aad      	ldr	r2, [pc, #692]	@ (8011b1c <UART_SetConfig+0x900>)
 8011866:	4293      	cmp	r3, r2
 8011868:	d176      	bne.n	8011958 <UART_SetConfig+0x73c>
 801186a:	4bad      	ldr	r3, [pc, #692]	@ (8011b20 <UART_SetConfig+0x904>)
 801186c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801186e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011872:	2b28      	cmp	r3, #40	@ 0x28
 8011874:	d86c      	bhi.n	8011950 <UART_SetConfig+0x734>
 8011876:	a201      	add	r2, pc, #4	@ (adr r2, 801187c <UART_SetConfig+0x660>)
 8011878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801187c:	08011921 	.word	0x08011921
 8011880:	08011951 	.word	0x08011951
 8011884:	08011951 	.word	0x08011951
 8011888:	08011951 	.word	0x08011951
 801188c:	08011951 	.word	0x08011951
 8011890:	08011951 	.word	0x08011951
 8011894:	08011951 	.word	0x08011951
 8011898:	08011951 	.word	0x08011951
 801189c:	08011929 	.word	0x08011929
 80118a0:	08011951 	.word	0x08011951
 80118a4:	08011951 	.word	0x08011951
 80118a8:	08011951 	.word	0x08011951
 80118ac:	08011951 	.word	0x08011951
 80118b0:	08011951 	.word	0x08011951
 80118b4:	08011951 	.word	0x08011951
 80118b8:	08011951 	.word	0x08011951
 80118bc:	08011931 	.word	0x08011931
 80118c0:	08011951 	.word	0x08011951
 80118c4:	08011951 	.word	0x08011951
 80118c8:	08011951 	.word	0x08011951
 80118cc:	08011951 	.word	0x08011951
 80118d0:	08011951 	.word	0x08011951
 80118d4:	08011951 	.word	0x08011951
 80118d8:	08011951 	.word	0x08011951
 80118dc:	08011939 	.word	0x08011939
 80118e0:	08011951 	.word	0x08011951
 80118e4:	08011951 	.word	0x08011951
 80118e8:	08011951 	.word	0x08011951
 80118ec:	08011951 	.word	0x08011951
 80118f0:	08011951 	.word	0x08011951
 80118f4:	08011951 	.word	0x08011951
 80118f8:	08011951 	.word	0x08011951
 80118fc:	08011941 	.word	0x08011941
 8011900:	08011951 	.word	0x08011951
 8011904:	08011951 	.word	0x08011951
 8011908:	08011951 	.word	0x08011951
 801190c:	08011951 	.word	0x08011951
 8011910:	08011951 	.word	0x08011951
 8011914:	08011951 	.word	0x08011951
 8011918:	08011951 	.word	0x08011951
 801191c:	08011949 	.word	0x08011949
 8011920:	2301      	movs	r3, #1
 8011922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011926:	e050      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011928:	2304      	movs	r3, #4
 801192a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801192e:	e04c      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011930:	2308      	movs	r3, #8
 8011932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011936:	e048      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011938:	2310      	movs	r3, #16
 801193a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801193e:	e044      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011940:	2320      	movs	r3, #32
 8011942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011946:	e040      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011948:	2340      	movs	r3, #64	@ 0x40
 801194a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801194e:	e03c      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011950:	2380      	movs	r3, #128	@ 0x80
 8011952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011956:	e038      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	4a71      	ldr	r2, [pc, #452]	@ (8011b24 <UART_SetConfig+0x908>)
 801195e:	4293      	cmp	r3, r2
 8011960:	d130      	bne.n	80119c4 <UART_SetConfig+0x7a8>
 8011962:	4b6f      	ldr	r3, [pc, #444]	@ (8011b20 <UART_SetConfig+0x904>)
 8011964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011966:	f003 0307 	and.w	r3, r3, #7
 801196a:	2b05      	cmp	r3, #5
 801196c:	d826      	bhi.n	80119bc <UART_SetConfig+0x7a0>
 801196e:	a201      	add	r2, pc, #4	@ (adr r2, 8011974 <UART_SetConfig+0x758>)
 8011970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011974:	0801198d 	.word	0x0801198d
 8011978:	08011995 	.word	0x08011995
 801197c:	0801199d 	.word	0x0801199d
 8011980:	080119a5 	.word	0x080119a5
 8011984:	080119ad 	.word	0x080119ad
 8011988:	080119b5 	.word	0x080119b5
 801198c:	2302      	movs	r3, #2
 801198e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011992:	e01a      	b.n	80119ca <UART_SetConfig+0x7ae>
 8011994:	2304      	movs	r3, #4
 8011996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801199a:	e016      	b.n	80119ca <UART_SetConfig+0x7ae>
 801199c:	2308      	movs	r3, #8
 801199e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119a2:	e012      	b.n	80119ca <UART_SetConfig+0x7ae>
 80119a4:	2310      	movs	r3, #16
 80119a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119aa:	e00e      	b.n	80119ca <UART_SetConfig+0x7ae>
 80119ac:	2320      	movs	r3, #32
 80119ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119b2:	e00a      	b.n	80119ca <UART_SetConfig+0x7ae>
 80119b4:	2340      	movs	r3, #64	@ 0x40
 80119b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119ba:	e006      	b.n	80119ca <UART_SetConfig+0x7ae>
 80119bc:	2380      	movs	r3, #128	@ 0x80
 80119be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119c2:	e002      	b.n	80119ca <UART_SetConfig+0x7ae>
 80119c4:	2380      	movs	r3, #128	@ 0x80
 80119c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	4a55      	ldr	r2, [pc, #340]	@ (8011b24 <UART_SetConfig+0x908>)
 80119d0:	4293      	cmp	r3, r2
 80119d2:	f040 80f8 	bne.w	8011bc6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80119d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80119da:	2b20      	cmp	r3, #32
 80119dc:	dc46      	bgt.n	8011a6c <UART_SetConfig+0x850>
 80119de:	2b02      	cmp	r3, #2
 80119e0:	db75      	blt.n	8011ace <UART_SetConfig+0x8b2>
 80119e2:	3b02      	subs	r3, #2
 80119e4:	2b1e      	cmp	r3, #30
 80119e6:	d872      	bhi.n	8011ace <UART_SetConfig+0x8b2>
 80119e8:	a201      	add	r2, pc, #4	@ (adr r2, 80119f0 <UART_SetConfig+0x7d4>)
 80119ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119ee:	bf00      	nop
 80119f0:	08011a73 	.word	0x08011a73
 80119f4:	08011acf 	.word	0x08011acf
 80119f8:	08011a7b 	.word	0x08011a7b
 80119fc:	08011acf 	.word	0x08011acf
 8011a00:	08011acf 	.word	0x08011acf
 8011a04:	08011acf 	.word	0x08011acf
 8011a08:	08011a8b 	.word	0x08011a8b
 8011a0c:	08011acf 	.word	0x08011acf
 8011a10:	08011acf 	.word	0x08011acf
 8011a14:	08011acf 	.word	0x08011acf
 8011a18:	08011acf 	.word	0x08011acf
 8011a1c:	08011acf 	.word	0x08011acf
 8011a20:	08011acf 	.word	0x08011acf
 8011a24:	08011acf 	.word	0x08011acf
 8011a28:	08011a9b 	.word	0x08011a9b
 8011a2c:	08011acf 	.word	0x08011acf
 8011a30:	08011acf 	.word	0x08011acf
 8011a34:	08011acf 	.word	0x08011acf
 8011a38:	08011acf 	.word	0x08011acf
 8011a3c:	08011acf 	.word	0x08011acf
 8011a40:	08011acf 	.word	0x08011acf
 8011a44:	08011acf 	.word	0x08011acf
 8011a48:	08011acf 	.word	0x08011acf
 8011a4c:	08011acf 	.word	0x08011acf
 8011a50:	08011acf 	.word	0x08011acf
 8011a54:	08011acf 	.word	0x08011acf
 8011a58:	08011acf 	.word	0x08011acf
 8011a5c:	08011acf 	.word	0x08011acf
 8011a60:	08011acf 	.word	0x08011acf
 8011a64:	08011acf 	.word	0x08011acf
 8011a68:	08011ac1 	.word	0x08011ac1
 8011a6c:	2b40      	cmp	r3, #64	@ 0x40
 8011a6e:	d02a      	beq.n	8011ac6 <UART_SetConfig+0x8aa>
 8011a70:	e02d      	b.n	8011ace <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011a72:	f7fc fcc3 	bl	800e3fc <HAL_RCCEx_GetD3PCLK1Freq>
 8011a76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011a78:	e02f      	b.n	8011ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7fc fcd2 	bl	800e428 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011a88:	e027      	b.n	8011ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011a8a:	f107 0318 	add.w	r3, r7, #24
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7fc fe1e 	bl	800e6d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011a98:	e01f      	b.n	8011ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011a9a:	4b21      	ldr	r3, [pc, #132]	@ (8011b20 <UART_SetConfig+0x904>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	f003 0320 	and.w	r3, r3, #32
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d009      	beq.n	8011aba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8011b20 <UART_SetConfig+0x904>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	08db      	lsrs	r3, r3, #3
 8011aac:	f003 0303 	and.w	r3, r3, #3
 8011ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8011b28 <UART_SetConfig+0x90c>)
 8011ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8011ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011ab8:	e00f      	b.n	8011ada <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011aba:	4b1b      	ldr	r3, [pc, #108]	@ (8011b28 <UART_SetConfig+0x90c>)
 8011abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011abe:	e00c      	b.n	8011ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8011b2c <UART_SetConfig+0x910>)
 8011ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011ac4:	e009      	b.n	8011ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011acc:	e005      	b.n	8011ada <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011ad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	f000 81ee 	beq.w	8011ebe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ae6:	4a12      	ldr	r2, [pc, #72]	@ (8011b30 <UART_SetConfig+0x914>)
 8011ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011aec:	461a      	mov	r2, r3
 8011aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8011af4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	685a      	ldr	r2, [r3, #4]
 8011afa:	4613      	mov	r3, r2
 8011afc:	005b      	lsls	r3, r3, #1
 8011afe:	4413      	add	r3, r2
 8011b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d305      	bcc.n	8011b12 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d910      	bls.n	8011b34 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011b12:	2301      	movs	r3, #1
 8011b14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011b18:	e1d1      	b.n	8011ebe <UART_SetConfig+0xca2>
 8011b1a:	bf00      	nop
 8011b1c:	40011c00 	.word	0x40011c00
 8011b20:	58024400 	.word	0x58024400
 8011b24:	58000c00 	.word	0x58000c00
 8011b28:	03d09000 	.word	0x03d09000
 8011b2c:	003d0900 	.word	0x003d0900
 8011b30:	0801e680 	.word	0x0801e680
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b36:	2200      	movs	r2, #0
 8011b38:	60bb      	str	r3, [r7, #8]
 8011b3a:	60fa      	str	r2, [r7, #12]
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b40:	4ac0      	ldr	r2, [pc, #768]	@ (8011e44 <UART_SetConfig+0xc28>)
 8011b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	2200      	movs	r2, #0
 8011b4a:	603b      	str	r3, [r7, #0]
 8011b4c:	607a      	str	r2, [r7, #4]
 8011b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011b56:	f7ee fc13 	bl	8000380 <__aeabi_uldivmod>
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	4610      	mov	r0, r2
 8011b60:	4619      	mov	r1, r3
 8011b62:	f04f 0200 	mov.w	r2, #0
 8011b66:	f04f 0300 	mov.w	r3, #0
 8011b6a:	020b      	lsls	r3, r1, #8
 8011b6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011b70:	0202      	lsls	r2, r0, #8
 8011b72:	6979      	ldr	r1, [r7, #20]
 8011b74:	6849      	ldr	r1, [r1, #4]
 8011b76:	0849      	lsrs	r1, r1, #1
 8011b78:	2000      	movs	r0, #0
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	4605      	mov	r5, r0
 8011b7e:	eb12 0804 	adds.w	r8, r2, r4
 8011b82:	eb43 0905 	adc.w	r9, r3, r5
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	685b      	ldr	r3, [r3, #4]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	469a      	mov	sl, r3
 8011b8e:	4693      	mov	fp, r2
 8011b90:	4652      	mov	r2, sl
 8011b92:	465b      	mov	r3, fp
 8011b94:	4640      	mov	r0, r8
 8011b96:	4649      	mov	r1, r9
 8011b98:	f7ee fbf2 	bl	8000380 <__aeabi_uldivmod>
 8011b9c:	4602      	mov	r2, r0
 8011b9e:	460b      	mov	r3, r1
 8011ba0:	4613      	mov	r3, r2
 8011ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011baa:	d308      	bcc.n	8011bbe <UART_SetConfig+0x9a2>
 8011bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011bb2:	d204      	bcs.n	8011bbe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011bba:	60da      	str	r2, [r3, #12]
 8011bbc:	e17f      	b.n	8011ebe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011bc4:	e17b      	b.n	8011ebe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	69db      	ldr	r3, [r3, #28]
 8011bca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011bce:	f040 80bd 	bne.w	8011d4c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011bd2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011bd6:	2b20      	cmp	r3, #32
 8011bd8:	dc48      	bgt.n	8011c6c <UART_SetConfig+0xa50>
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	db7b      	blt.n	8011cd6 <UART_SetConfig+0xaba>
 8011bde:	2b20      	cmp	r3, #32
 8011be0:	d879      	bhi.n	8011cd6 <UART_SetConfig+0xaba>
 8011be2:	a201      	add	r2, pc, #4	@ (adr r2, 8011be8 <UART_SetConfig+0x9cc>)
 8011be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011be8:	08011c73 	.word	0x08011c73
 8011bec:	08011c7b 	.word	0x08011c7b
 8011bf0:	08011cd7 	.word	0x08011cd7
 8011bf4:	08011cd7 	.word	0x08011cd7
 8011bf8:	08011c83 	.word	0x08011c83
 8011bfc:	08011cd7 	.word	0x08011cd7
 8011c00:	08011cd7 	.word	0x08011cd7
 8011c04:	08011cd7 	.word	0x08011cd7
 8011c08:	08011c93 	.word	0x08011c93
 8011c0c:	08011cd7 	.word	0x08011cd7
 8011c10:	08011cd7 	.word	0x08011cd7
 8011c14:	08011cd7 	.word	0x08011cd7
 8011c18:	08011cd7 	.word	0x08011cd7
 8011c1c:	08011cd7 	.word	0x08011cd7
 8011c20:	08011cd7 	.word	0x08011cd7
 8011c24:	08011cd7 	.word	0x08011cd7
 8011c28:	08011ca3 	.word	0x08011ca3
 8011c2c:	08011cd7 	.word	0x08011cd7
 8011c30:	08011cd7 	.word	0x08011cd7
 8011c34:	08011cd7 	.word	0x08011cd7
 8011c38:	08011cd7 	.word	0x08011cd7
 8011c3c:	08011cd7 	.word	0x08011cd7
 8011c40:	08011cd7 	.word	0x08011cd7
 8011c44:	08011cd7 	.word	0x08011cd7
 8011c48:	08011cd7 	.word	0x08011cd7
 8011c4c:	08011cd7 	.word	0x08011cd7
 8011c50:	08011cd7 	.word	0x08011cd7
 8011c54:	08011cd7 	.word	0x08011cd7
 8011c58:	08011cd7 	.word	0x08011cd7
 8011c5c:	08011cd7 	.word	0x08011cd7
 8011c60:	08011cd7 	.word	0x08011cd7
 8011c64:	08011cd7 	.word	0x08011cd7
 8011c68:	08011cc9 	.word	0x08011cc9
 8011c6c:	2b40      	cmp	r3, #64	@ 0x40
 8011c6e:	d02e      	beq.n	8011cce <UART_SetConfig+0xab2>
 8011c70:	e031      	b.n	8011cd6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011c72:	f7fa fd25 	bl	800c6c0 <HAL_RCC_GetPCLK1Freq>
 8011c76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011c78:	e033      	b.n	8011ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011c7a:	f7fa fd37 	bl	800c6ec <HAL_RCC_GetPCLK2Freq>
 8011c7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011c80:	e02f      	b.n	8011ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7fc fbce 	bl	800e428 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c90:	e027      	b.n	8011ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011c92:	f107 0318 	add.w	r3, r7, #24
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7fc fd1a 	bl	800e6d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011ca0:	e01f      	b.n	8011ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011ca2:	4b69      	ldr	r3, [pc, #420]	@ (8011e48 <UART_SetConfig+0xc2c>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	f003 0320 	and.w	r3, r3, #32
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d009      	beq.n	8011cc2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011cae:	4b66      	ldr	r3, [pc, #408]	@ (8011e48 <UART_SetConfig+0xc2c>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	08db      	lsrs	r3, r3, #3
 8011cb4:	f003 0303 	and.w	r3, r3, #3
 8011cb8:	4a64      	ldr	r2, [pc, #400]	@ (8011e4c <UART_SetConfig+0xc30>)
 8011cba:	fa22 f303 	lsr.w	r3, r2, r3
 8011cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011cc0:	e00f      	b.n	8011ce2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011cc2:	4b62      	ldr	r3, [pc, #392]	@ (8011e4c <UART_SetConfig+0xc30>)
 8011cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011cc6:	e00c      	b.n	8011ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011cc8:	4b61      	ldr	r3, [pc, #388]	@ (8011e50 <UART_SetConfig+0xc34>)
 8011cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011ccc:	e009      	b.n	8011ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011cd4:	e005      	b.n	8011ce2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011cda:	2301      	movs	r3, #1
 8011cdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011ce0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	f000 80ea 	beq.w	8011ebe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cee:	4a55      	ldr	r2, [pc, #340]	@ (8011e44 <UART_SetConfig+0xc28>)
 8011cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8011cfc:	005a      	lsls	r2, r3, #1
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	085b      	lsrs	r3, r3, #1
 8011d04:	441a      	add	r2, r3
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d12:	2b0f      	cmp	r3, #15
 8011d14:	d916      	bls.n	8011d44 <UART_SetConfig+0xb28>
 8011d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011d1c:	d212      	bcs.n	8011d44 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	f023 030f 	bic.w	r3, r3, #15
 8011d26:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d2a:	085b      	lsrs	r3, r3, #1
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	f003 0307 	and.w	r3, r3, #7
 8011d32:	b29a      	uxth	r2, r3
 8011d34:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011d36:	4313      	orrs	r3, r2
 8011d38:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011d40:	60da      	str	r2, [r3, #12]
 8011d42:	e0bc      	b.n	8011ebe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011d44:	2301      	movs	r3, #1
 8011d46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011d4a:	e0b8      	b.n	8011ebe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011d4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011d50:	2b20      	cmp	r3, #32
 8011d52:	dc4b      	bgt.n	8011dec <UART_SetConfig+0xbd0>
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	f2c0 8087 	blt.w	8011e68 <UART_SetConfig+0xc4c>
 8011d5a:	2b20      	cmp	r3, #32
 8011d5c:	f200 8084 	bhi.w	8011e68 <UART_SetConfig+0xc4c>
 8011d60:	a201      	add	r2, pc, #4	@ (adr r2, 8011d68 <UART_SetConfig+0xb4c>)
 8011d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d66:	bf00      	nop
 8011d68:	08011df3 	.word	0x08011df3
 8011d6c:	08011dfb 	.word	0x08011dfb
 8011d70:	08011e69 	.word	0x08011e69
 8011d74:	08011e69 	.word	0x08011e69
 8011d78:	08011e03 	.word	0x08011e03
 8011d7c:	08011e69 	.word	0x08011e69
 8011d80:	08011e69 	.word	0x08011e69
 8011d84:	08011e69 	.word	0x08011e69
 8011d88:	08011e13 	.word	0x08011e13
 8011d8c:	08011e69 	.word	0x08011e69
 8011d90:	08011e69 	.word	0x08011e69
 8011d94:	08011e69 	.word	0x08011e69
 8011d98:	08011e69 	.word	0x08011e69
 8011d9c:	08011e69 	.word	0x08011e69
 8011da0:	08011e69 	.word	0x08011e69
 8011da4:	08011e69 	.word	0x08011e69
 8011da8:	08011e23 	.word	0x08011e23
 8011dac:	08011e69 	.word	0x08011e69
 8011db0:	08011e69 	.word	0x08011e69
 8011db4:	08011e69 	.word	0x08011e69
 8011db8:	08011e69 	.word	0x08011e69
 8011dbc:	08011e69 	.word	0x08011e69
 8011dc0:	08011e69 	.word	0x08011e69
 8011dc4:	08011e69 	.word	0x08011e69
 8011dc8:	08011e69 	.word	0x08011e69
 8011dcc:	08011e69 	.word	0x08011e69
 8011dd0:	08011e69 	.word	0x08011e69
 8011dd4:	08011e69 	.word	0x08011e69
 8011dd8:	08011e69 	.word	0x08011e69
 8011ddc:	08011e69 	.word	0x08011e69
 8011de0:	08011e69 	.word	0x08011e69
 8011de4:	08011e69 	.word	0x08011e69
 8011de8:	08011e5b 	.word	0x08011e5b
 8011dec:	2b40      	cmp	r3, #64	@ 0x40
 8011dee:	d037      	beq.n	8011e60 <UART_SetConfig+0xc44>
 8011df0:	e03a      	b.n	8011e68 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011df2:	f7fa fc65 	bl	800c6c0 <HAL_RCC_GetPCLK1Freq>
 8011df6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011df8:	e03c      	b.n	8011e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011dfa:	f7fa fc77 	bl	800c6ec <HAL_RCC_GetPCLK2Freq>
 8011dfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011e00:	e038      	b.n	8011e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7fc fb0e 	bl	800e428 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e10:	e030      	b.n	8011e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011e12:	f107 0318 	add.w	r3, r7, #24
 8011e16:	4618      	mov	r0, r3
 8011e18:	f7fc fc5a 	bl	800e6d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e20:	e028      	b.n	8011e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011e22:	4b09      	ldr	r3, [pc, #36]	@ (8011e48 <UART_SetConfig+0xc2c>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f003 0320 	and.w	r3, r3, #32
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d012      	beq.n	8011e54 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011e2e:	4b06      	ldr	r3, [pc, #24]	@ (8011e48 <UART_SetConfig+0xc2c>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	08db      	lsrs	r3, r3, #3
 8011e34:	f003 0303 	and.w	r3, r3, #3
 8011e38:	4a04      	ldr	r2, [pc, #16]	@ (8011e4c <UART_SetConfig+0xc30>)
 8011e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8011e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011e40:	e018      	b.n	8011e74 <UART_SetConfig+0xc58>
 8011e42:	bf00      	nop
 8011e44:	0801e680 	.word	0x0801e680
 8011e48:	58024400 	.word	0x58024400
 8011e4c:	03d09000 	.word	0x03d09000
 8011e50:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011e54:	4b24      	ldr	r3, [pc, #144]	@ (8011ee8 <UART_SetConfig+0xccc>)
 8011e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e58:	e00c      	b.n	8011e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011e5a:	4b24      	ldr	r3, [pc, #144]	@ (8011eec <UART_SetConfig+0xcd0>)
 8011e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e5e:	e009      	b.n	8011e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e66:	e005      	b.n	8011e74 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011e72:	bf00      	nop
    }

    if (pclk != 0U)
 8011e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d021      	beq.n	8011ebe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8011ef0 <UART_SetConfig+0xcd4>)
 8011e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e84:	461a      	mov	r2, r3
 8011e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e88:	fbb3 f2f2 	udiv	r2, r3, r2
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	085b      	lsrs	r3, r3, #1
 8011e92:	441a      	add	r2, r3
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ea0:	2b0f      	cmp	r3, #15
 8011ea2:	d909      	bls.n	8011eb8 <UART_SetConfig+0xc9c>
 8011ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011eaa:	d205      	bcs.n	8011eb8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011eae:	b29a      	uxth	r2, r3
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	60da      	str	r2, [r3, #12]
 8011eb6:	e002      	b.n	8011ebe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011eb8:	2301      	movs	r3, #1
 8011eba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011ebe:	697b      	ldr	r3, [r7, #20]
 8011ec0:	2201      	movs	r2, #1
 8011ec2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011ec6:	697b      	ldr	r3, [r7, #20]
 8011ec8:	2201      	movs	r2, #1
 8011eca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011eda:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3748      	adds	r7, #72	@ 0x48
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011ee8:	03d09000 	.word	0x03d09000
 8011eec:	003d0900 	.word	0x003d0900
 8011ef0:	0801e680 	.word	0x0801e680

08011ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	b083      	sub	sp, #12
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f00:	f003 0308 	and.w	r3, r3, #8
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d00a      	beq.n	8011f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	430a      	orrs	r2, r1
 8011f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f22:	f003 0301 	and.w	r3, r3, #1
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d00a      	beq.n	8011f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	685b      	ldr	r3, [r3, #4]
 8011f30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	430a      	orrs	r2, r1
 8011f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f44:	f003 0302 	and.w	r3, r3, #2
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d00a      	beq.n	8011f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	430a      	orrs	r2, r1
 8011f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f66:	f003 0304 	and.w	r3, r3, #4
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d00a      	beq.n	8011f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	685b      	ldr	r3, [r3, #4]
 8011f74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	430a      	orrs	r2, r1
 8011f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f88:	f003 0310 	and.w	r3, r3, #16
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d00a      	beq.n	8011fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	689b      	ldr	r3, [r3, #8]
 8011f96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	430a      	orrs	r2, r1
 8011fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011faa:	f003 0320 	and.w	r3, r3, #32
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d00a      	beq.n	8011fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	689b      	ldr	r3, [r3, #8]
 8011fb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	430a      	orrs	r2, r1
 8011fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d01a      	beq.n	801200a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	430a      	orrs	r2, r1
 8011fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011fee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011ff2:	d10a      	bne.n	801200a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	430a      	orrs	r2, r1
 8012008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801200e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012012:	2b00      	cmp	r3, #0
 8012014:	d00a      	beq.n	801202c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	430a      	orrs	r2, r1
 801202a:	605a      	str	r2, [r3, #4]
  }
}
 801202c:	bf00      	nop
 801202e:	370c      	adds	r7, #12
 8012030:	46bd      	mov	sp, r7
 8012032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012036:	4770      	bx	lr

08012038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b098      	sub	sp, #96	@ 0x60
 801203c:	af02      	add	r7, sp, #8
 801203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2200      	movs	r2, #0
 8012044:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012048:	f7f2 ff90 	bl	8004f6c <HAL_GetTick>
 801204c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	f003 0308 	and.w	r3, r3, #8
 8012058:	2b08      	cmp	r3, #8
 801205a:	d12f      	bne.n	80120bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801205c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012060:	9300      	str	r3, [sp, #0]
 8012062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012064:	2200      	movs	r2, #0
 8012066:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f000 f88e 	bl	801218c <UART_WaitOnFlagUntilTimeout>
 8012070:	4603      	mov	r3, r0
 8012072:	2b00      	cmp	r3, #0
 8012074:	d022      	beq.n	80120bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801207c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801207e:	e853 3f00 	ldrex	r3, [r3]
 8012082:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801208a:	653b      	str	r3, [r7, #80]	@ 0x50
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	461a      	mov	r2, r3
 8012092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012094:	647b      	str	r3, [r7, #68]	@ 0x44
 8012096:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012098:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801209a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801209c:	e841 2300 	strex	r3, r2, [r1]
 80120a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80120a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d1e6      	bne.n	8012076 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2220      	movs	r2, #32
 80120ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2200      	movs	r2, #0
 80120b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80120b8:	2303      	movs	r3, #3
 80120ba:	e063      	b.n	8012184 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	f003 0304 	and.w	r3, r3, #4
 80120c6:	2b04      	cmp	r3, #4
 80120c8:	d149      	bne.n	801215e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80120ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80120ce:	9300      	str	r3, [sp, #0]
 80120d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80120d2:	2200      	movs	r2, #0
 80120d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f000 f857 	bl	801218c <UART_WaitOnFlagUntilTimeout>
 80120de:	4603      	mov	r3, r0
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d03c      	beq.n	801215e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ec:	e853 3f00 	ldrex	r3, [r3]
 80120f0:	623b      	str	r3, [r7, #32]
   return(result);
 80120f2:	6a3b      	ldr	r3, [r7, #32]
 80120f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80120f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	461a      	mov	r2, r3
 8012100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012102:	633b      	str	r3, [r7, #48]	@ 0x30
 8012104:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012106:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801210a:	e841 2300 	strex	r3, r2, [r1]
 801210e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012112:	2b00      	cmp	r3, #0
 8012114:	d1e6      	bne.n	80120e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	3308      	adds	r3, #8
 801211c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	e853 3f00 	ldrex	r3, [r3]
 8012124:	60fb      	str	r3, [r7, #12]
   return(result);
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	f023 0301 	bic.w	r3, r3, #1
 801212c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	3308      	adds	r3, #8
 8012134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012136:	61fa      	str	r2, [r7, #28]
 8012138:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801213a:	69b9      	ldr	r1, [r7, #24]
 801213c:	69fa      	ldr	r2, [r7, #28]
 801213e:	e841 2300 	strex	r3, r2, [r1]
 8012142:	617b      	str	r3, [r7, #20]
   return(result);
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d1e5      	bne.n	8012116 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2220      	movs	r2, #32
 801214e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2200      	movs	r2, #0
 8012156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801215a:	2303      	movs	r3, #3
 801215c:	e012      	b.n	8012184 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2220      	movs	r2, #32
 8012162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2220      	movs	r2, #32
 801216a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2200      	movs	r2, #0
 8012172:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2200      	movs	r2, #0
 8012178:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2200      	movs	r2, #0
 801217e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012182:	2300      	movs	r3, #0
}
 8012184:	4618      	mov	r0, r3
 8012186:	3758      	adds	r7, #88	@ 0x58
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}

0801218c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b084      	sub	sp, #16
 8012190:	af00      	add	r7, sp, #0
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	603b      	str	r3, [r7, #0]
 8012198:	4613      	mov	r3, r2
 801219a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801219c:	e04f      	b.n	801223e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801219e:	69bb      	ldr	r3, [r7, #24]
 80121a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121a4:	d04b      	beq.n	801223e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80121a6:	f7f2 fee1 	bl	8004f6c <HAL_GetTick>
 80121aa:	4602      	mov	r2, r0
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	1ad3      	subs	r3, r2, r3
 80121b0:	69ba      	ldr	r2, [r7, #24]
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d302      	bcc.n	80121bc <UART_WaitOnFlagUntilTimeout+0x30>
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d101      	bne.n	80121c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80121bc:	2303      	movs	r3, #3
 80121be:	e04e      	b.n	801225e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f003 0304 	and.w	r3, r3, #4
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d037      	beq.n	801223e <UART_WaitOnFlagUntilTimeout+0xb2>
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	2b80      	cmp	r3, #128	@ 0x80
 80121d2:	d034      	beq.n	801223e <UART_WaitOnFlagUntilTimeout+0xb2>
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	2b40      	cmp	r3, #64	@ 0x40
 80121d8:	d031      	beq.n	801223e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	69db      	ldr	r3, [r3, #28]
 80121e0:	f003 0308 	and.w	r3, r3, #8
 80121e4:	2b08      	cmp	r3, #8
 80121e6:	d110      	bne.n	801220a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2208      	movs	r2, #8
 80121ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80121f0:	68f8      	ldr	r0, [r7, #12]
 80121f2:	f000 f839 	bl	8012268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	2208      	movs	r2, #8
 80121fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2200      	movs	r2, #0
 8012202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8012206:	2301      	movs	r3, #1
 8012208:	e029      	b.n	801225e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	69db      	ldr	r3, [r3, #28]
 8012210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012214:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012218:	d111      	bne.n	801223e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012222:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	f000 f81f 	bl	8012268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	2220      	movs	r2, #32
 801222e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	2200      	movs	r2, #0
 8012236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801223a:	2303      	movs	r3, #3
 801223c:	e00f      	b.n	801225e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	69da      	ldr	r2, [r3, #28]
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	4013      	ands	r3, r2
 8012248:	68ba      	ldr	r2, [r7, #8]
 801224a:	429a      	cmp	r2, r3
 801224c:	bf0c      	ite	eq
 801224e:	2301      	moveq	r3, #1
 8012250:	2300      	movne	r3, #0
 8012252:	b2db      	uxtb	r3, r3
 8012254:	461a      	mov	r2, r3
 8012256:	79fb      	ldrb	r3, [r7, #7]
 8012258:	429a      	cmp	r2, r3
 801225a:	d0a0      	beq.n	801219e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801225c:	2300      	movs	r3, #0
}
 801225e:	4618      	mov	r0, r3
 8012260:	3710      	adds	r7, #16
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
	...

08012268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012268:	b480      	push	{r7}
 801226a:	b095      	sub	sp, #84	@ 0x54
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012278:	e853 3f00 	ldrex	r3, [r3]
 801227c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801227e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012280:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012284:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	461a      	mov	r2, r3
 801228c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801228e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012290:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012292:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012294:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012296:	e841 2300 	strex	r3, r2, [r1]
 801229a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801229c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d1e6      	bne.n	8012270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	3308      	adds	r3, #8
 80122a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122aa:	6a3b      	ldr	r3, [r7, #32]
 80122ac:	e853 3f00 	ldrex	r3, [r3]
 80122b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80122b2:	69fa      	ldr	r2, [r7, #28]
 80122b4:	4b1e      	ldr	r3, [pc, #120]	@ (8012330 <UART_EndRxTransfer+0xc8>)
 80122b6:	4013      	ands	r3, r2
 80122b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	3308      	adds	r3, #8
 80122c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80122c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80122c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80122c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122ca:	e841 2300 	strex	r3, r2, [r1]
 80122ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80122d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d1e5      	bne.n	80122a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122da:	2b01      	cmp	r3, #1
 80122dc:	d118      	bne.n	8012310 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	e853 3f00 	ldrex	r3, [r3]
 80122ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	f023 0310 	bic.w	r3, r3, #16
 80122f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	461a      	mov	r2, r3
 80122fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80122fc:	61bb      	str	r3, [r7, #24]
 80122fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012300:	6979      	ldr	r1, [r7, #20]
 8012302:	69ba      	ldr	r2, [r7, #24]
 8012304:	e841 2300 	strex	r3, r2, [r1]
 8012308:	613b      	str	r3, [r7, #16]
   return(result);
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d1e6      	bne.n	80122de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2220      	movs	r2, #32
 8012314:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2200      	movs	r2, #0
 801231c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	2200      	movs	r2, #0
 8012322:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8012324:	bf00      	nop
 8012326:	3754      	adds	r7, #84	@ 0x54
 8012328:	46bd      	mov	sp, r7
 801232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232e:	4770      	bx	lr
 8012330:	effffffe 	.word	0xeffffffe

08012334 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012334:	b480      	push	{r7}
 8012336:	b085      	sub	sp, #20
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012342:	2b01      	cmp	r3, #1
 8012344:	d101      	bne.n	801234a <HAL_UARTEx_DisableFifoMode+0x16>
 8012346:	2302      	movs	r3, #2
 8012348:	e027      	b.n	801239a <HAL_UARTEx_DisableFifoMode+0x66>
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2201      	movs	r2, #1
 801234e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2224      	movs	r2, #36	@ 0x24
 8012356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	681a      	ldr	r2, [r3, #0]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f022 0201 	bic.w	r2, r2, #1
 8012370:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012378:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2200      	movs	r2, #0
 801237e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	68fa      	ldr	r2, [r7, #12]
 8012386:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2220      	movs	r2, #32
 801238c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2200      	movs	r2, #0
 8012394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012398:	2300      	movs	r3, #0
}
 801239a:	4618      	mov	r0, r3
 801239c:	3714      	adds	r7, #20
 801239e:	46bd      	mov	sp, r7
 80123a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a4:	4770      	bx	lr

080123a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80123a6:	b580      	push	{r7, lr}
 80123a8:	b084      	sub	sp, #16
 80123aa:	af00      	add	r7, sp, #0
 80123ac:	6078      	str	r0, [r7, #4]
 80123ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80123b6:	2b01      	cmp	r3, #1
 80123b8:	d101      	bne.n	80123be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80123ba:	2302      	movs	r3, #2
 80123bc:	e02d      	b.n	801241a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2201      	movs	r2, #1
 80123c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2224      	movs	r2, #36	@ 0x24
 80123ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	681a      	ldr	r2, [r3, #0]
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	f022 0201 	bic.w	r2, r2, #1
 80123e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	689b      	ldr	r3, [r3, #8]
 80123ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	683a      	ldr	r2, [r7, #0]
 80123f6:	430a      	orrs	r2, r1
 80123f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f000 f850 	bl	80124a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	68fa      	ldr	r2, [r7, #12]
 8012406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2220      	movs	r2, #32
 801240c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2200      	movs	r2, #0
 8012414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012418:	2300      	movs	r3, #0
}
 801241a:	4618      	mov	r0, r3
 801241c:	3710      	adds	r7, #16
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}

08012422 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012422:	b580      	push	{r7, lr}
 8012424:	b084      	sub	sp, #16
 8012426:	af00      	add	r7, sp, #0
 8012428:	6078      	str	r0, [r7, #4]
 801242a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012432:	2b01      	cmp	r3, #1
 8012434:	d101      	bne.n	801243a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012436:	2302      	movs	r3, #2
 8012438:	e02d      	b.n	8012496 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2201      	movs	r2, #1
 801243e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2224      	movs	r2, #36	@ 0x24
 8012446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	681a      	ldr	r2, [r3, #0]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	f022 0201 	bic.w	r2, r2, #1
 8012460:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	689b      	ldr	r3, [r3, #8]
 8012468:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	683a      	ldr	r2, [r7, #0]
 8012472:	430a      	orrs	r2, r1
 8012474:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f000 f812 	bl	80124a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	68fa      	ldr	r2, [r7, #12]
 8012482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2220      	movs	r2, #32
 8012488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2200      	movs	r2, #0
 8012490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012494:	2300      	movs	r3, #0
}
 8012496:	4618      	mov	r0, r3
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
	...

080124a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80124a0:	b480      	push	{r7}
 80124a2:	b085      	sub	sp, #20
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d108      	bne.n	80124c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2201      	movs	r2, #1
 80124b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2201      	movs	r2, #1
 80124bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80124c0:	e031      	b.n	8012526 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80124c2:	2310      	movs	r3, #16
 80124c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80124c6:	2310      	movs	r3, #16
 80124c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	689b      	ldr	r3, [r3, #8]
 80124d0:	0e5b      	lsrs	r3, r3, #25
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	f003 0307 	and.w	r3, r3, #7
 80124d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	689b      	ldr	r3, [r3, #8]
 80124e0:	0f5b      	lsrs	r3, r3, #29
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	f003 0307 	and.w	r3, r3, #7
 80124e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80124ea:	7bbb      	ldrb	r3, [r7, #14]
 80124ec:	7b3a      	ldrb	r2, [r7, #12]
 80124ee:	4911      	ldr	r1, [pc, #68]	@ (8012534 <UARTEx_SetNbDataToProcess+0x94>)
 80124f0:	5c8a      	ldrb	r2, [r1, r2]
 80124f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80124f6:	7b3a      	ldrb	r2, [r7, #12]
 80124f8:	490f      	ldr	r1, [pc, #60]	@ (8012538 <UARTEx_SetNbDataToProcess+0x98>)
 80124fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80124fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8012500:	b29a      	uxth	r2, r3
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012508:	7bfb      	ldrb	r3, [r7, #15]
 801250a:	7b7a      	ldrb	r2, [r7, #13]
 801250c:	4909      	ldr	r1, [pc, #36]	@ (8012534 <UARTEx_SetNbDataToProcess+0x94>)
 801250e:	5c8a      	ldrb	r2, [r1, r2]
 8012510:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012514:	7b7a      	ldrb	r2, [r7, #13]
 8012516:	4908      	ldr	r1, [pc, #32]	@ (8012538 <UARTEx_SetNbDataToProcess+0x98>)
 8012518:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801251a:	fb93 f3f2 	sdiv	r3, r3, r2
 801251e:	b29a      	uxth	r2, r3
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012526:	bf00      	nop
 8012528:	3714      	adds	r7, #20
 801252a:	46bd      	mov	sp, r7
 801252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012530:	4770      	bx	lr
 8012532:	bf00      	nop
 8012534:	0801e698 	.word	0x0801e698
 8012538:	0801e6a0 	.word	0x0801e6a0

0801253c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801253c:	b084      	sub	sp, #16
 801253e:	b580      	push	{r7, lr}
 8012540:	b084      	sub	sp, #16
 8012542:	af00      	add	r7, sp, #0
 8012544:	6078      	str	r0, [r7, #4]
 8012546:	f107 001c 	add.w	r0, r7, #28
 801254a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801254e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012552:	2b01      	cmp	r3, #1
 8012554:	d121      	bne.n	801259a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801255a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	68da      	ldr	r2, [r3, #12]
 8012566:	4b2c      	ldr	r3, [pc, #176]	@ (8012618 <USB_CoreInit+0xdc>)
 8012568:	4013      	ands	r3, r2
 801256a:	687a      	ldr	r2, [r7, #4]
 801256c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801257a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801257e:	2b01      	cmp	r3, #1
 8012580:	d105      	bne.n	801258e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	68db      	ldr	r3, [r3, #12]
 8012586:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f001 fafa 	bl	8013b88 <USB_CoreReset>
 8012594:	4603      	mov	r3, r0
 8012596:	73fb      	strb	r3, [r7, #15]
 8012598:	e01b      	b.n	80125d2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	68db      	ldr	r3, [r3, #12]
 801259e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f001 faee 	bl	8013b88 <USB_CoreReset>
 80125ac:	4603      	mov	r3, r0
 80125ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80125b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d106      	bne.n	80125c6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80125c4:	e005      	b.n	80125d2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80125d2:	7fbb      	ldrb	r3, [r7, #30]
 80125d4:	2b01      	cmp	r3, #1
 80125d6:	d116      	bne.n	8012606 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80125dc:	b29a      	uxth	r2, r3
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80125e6:	4b0d      	ldr	r3, [pc, #52]	@ (801261c <USB_CoreInit+0xe0>)
 80125e8:	4313      	orrs	r3, r2
 80125ea:	687a      	ldr	r2, [r7, #4]
 80125ec:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	689b      	ldr	r3, [r3, #8]
 80125f2:	f043 0206 	orr.w	r2, r3, #6
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	689b      	ldr	r3, [r3, #8]
 80125fe:	f043 0220 	orr.w	r2, r3, #32
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012606:	7bfb      	ldrb	r3, [r7, #15]
}
 8012608:	4618      	mov	r0, r3
 801260a:	3710      	adds	r7, #16
 801260c:	46bd      	mov	sp, r7
 801260e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012612:	b004      	add	sp, #16
 8012614:	4770      	bx	lr
 8012616:	bf00      	nop
 8012618:	ffbdffbf 	.word	0xffbdffbf
 801261c:	03ee0000 	.word	0x03ee0000

08012620 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012620:	b480      	push	{r7}
 8012622:	b087      	sub	sp, #28
 8012624:	af00      	add	r7, sp, #0
 8012626:	60f8      	str	r0, [r7, #12]
 8012628:	60b9      	str	r1, [r7, #8]
 801262a:	4613      	mov	r3, r2
 801262c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801262e:	79fb      	ldrb	r3, [r7, #7]
 8012630:	2b02      	cmp	r3, #2
 8012632:	d165      	bne.n	8012700 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	4a41      	ldr	r2, [pc, #260]	@ (801273c <USB_SetTurnaroundTime+0x11c>)
 8012638:	4293      	cmp	r3, r2
 801263a:	d906      	bls.n	801264a <USB_SetTurnaroundTime+0x2a>
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	4a40      	ldr	r2, [pc, #256]	@ (8012740 <USB_SetTurnaroundTime+0x120>)
 8012640:	4293      	cmp	r3, r2
 8012642:	d202      	bcs.n	801264a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012644:	230f      	movs	r3, #15
 8012646:	617b      	str	r3, [r7, #20]
 8012648:	e062      	b.n	8012710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	4a3c      	ldr	r2, [pc, #240]	@ (8012740 <USB_SetTurnaroundTime+0x120>)
 801264e:	4293      	cmp	r3, r2
 8012650:	d306      	bcc.n	8012660 <USB_SetTurnaroundTime+0x40>
 8012652:	68bb      	ldr	r3, [r7, #8]
 8012654:	4a3b      	ldr	r2, [pc, #236]	@ (8012744 <USB_SetTurnaroundTime+0x124>)
 8012656:	4293      	cmp	r3, r2
 8012658:	d202      	bcs.n	8012660 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801265a:	230e      	movs	r3, #14
 801265c:	617b      	str	r3, [r7, #20]
 801265e:	e057      	b.n	8012710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	4a38      	ldr	r2, [pc, #224]	@ (8012744 <USB_SetTurnaroundTime+0x124>)
 8012664:	4293      	cmp	r3, r2
 8012666:	d306      	bcc.n	8012676 <USB_SetTurnaroundTime+0x56>
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	4a37      	ldr	r2, [pc, #220]	@ (8012748 <USB_SetTurnaroundTime+0x128>)
 801266c:	4293      	cmp	r3, r2
 801266e:	d202      	bcs.n	8012676 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012670:	230d      	movs	r3, #13
 8012672:	617b      	str	r3, [r7, #20]
 8012674:	e04c      	b.n	8012710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	4a33      	ldr	r2, [pc, #204]	@ (8012748 <USB_SetTurnaroundTime+0x128>)
 801267a:	4293      	cmp	r3, r2
 801267c:	d306      	bcc.n	801268c <USB_SetTurnaroundTime+0x6c>
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	4a32      	ldr	r2, [pc, #200]	@ (801274c <USB_SetTurnaroundTime+0x12c>)
 8012682:	4293      	cmp	r3, r2
 8012684:	d802      	bhi.n	801268c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012686:	230c      	movs	r3, #12
 8012688:	617b      	str	r3, [r7, #20]
 801268a:	e041      	b.n	8012710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	4a2f      	ldr	r2, [pc, #188]	@ (801274c <USB_SetTurnaroundTime+0x12c>)
 8012690:	4293      	cmp	r3, r2
 8012692:	d906      	bls.n	80126a2 <USB_SetTurnaroundTime+0x82>
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	4a2e      	ldr	r2, [pc, #184]	@ (8012750 <USB_SetTurnaroundTime+0x130>)
 8012698:	4293      	cmp	r3, r2
 801269a:	d802      	bhi.n	80126a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801269c:	230b      	movs	r3, #11
 801269e:	617b      	str	r3, [r7, #20]
 80126a0:	e036      	b.n	8012710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	4a2a      	ldr	r2, [pc, #168]	@ (8012750 <USB_SetTurnaroundTime+0x130>)
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d906      	bls.n	80126b8 <USB_SetTurnaroundTime+0x98>
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	4a29      	ldr	r2, [pc, #164]	@ (8012754 <USB_SetTurnaroundTime+0x134>)
 80126ae:	4293      	cmp	r3, r2
 80126b0:	d802      	bhi.n	80126b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80126b2:	230a      	movs	r3, #10
 80126b4:	617b      	str	r3, [r7, #20]
 80126b6:	e02b      	b.n	8012710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	4a26      	ldr	r2, [pc, #152]	@ (8012754 <USB_SetTurnaroundTime+0x134>)
 80126bc:	4293      	cmp	r3, r2
 80126be:	d906      	bls.n	80126ce <USB_SetTurnaroundTime+0xae>
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	4a25      	ldr	r2, [pc, #148]	@ (8012758 <USB_SetTurnaroundTime+0x138>)
 80126c4:	4293      	cmp	r3, r2
 80126c6:	d202      	bcs.n	80126ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80126c8:	2309      	movs	r3, #9
 80126ca:	617b      	str	r3, [r7, #20]
 80126cc:	e020      	b.n	8012710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	4a21      	ldr	r2, [pc, #132]	@ (8012758 <USB_SetTurnaroundTime+0x138>)
 80126d2:	4293      	cmp	r3, r2
 80126d4:	d306      	bcc.n	80126e4 <USB_SetTurnaroundTime+0xc4>
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	4a20      	ldr	r2, [pc, #128]	@ (801275c <USB_SetTurnaroundTime+0x13c>)
 80126da:	4293      	cmp	r3, r2
 80126dc:	d802      	bhi.n	80126e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80126de:	2308      	movs	r3, #8
 80126e0:	617b      	str	r3, [r7, #20]
 80126e2:	e015      	b.n	8012710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80126e4:	68bb      	ldr	r3, [r7, #8]
 80126e6:	4a1d      	ldr	r2, [pc, #116]	@ (801275c <USB_SetTurnaroundTime+0x13c>)
 80126e8:	4293      	cmp	r3, r2
 80126ea:	d906      	bls.n	80126fa <USB_SetTurnaroundTime+0xda>
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	4a1c      	ldr	r2, [pc, #112]	@ (8012760 <USB_SetTurnaroundTime+0x140>)
 80126f0:	4293      	cmp	r3, r2
 80126f2:	d202      	bcs.n	80126fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80126f4:	2307      	movs	r3, #7
 80126f6:	617b      	str	r3, [r7, #20]
 80126f8:	e00a      	b.n	8012710 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80126fa:	2306      	movs	r3, #6
 80126fc:	617b      	str	r3, [r7, #20]
 80126fe:	e007      	b.n	8012710 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012700:	79fb      	ldrb	r3, [r7, #7]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d102      	bne.n	801270c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012706:	2309      	movs	r3, #9
 8012708:	617b      	str	r3, [r7, #20]
 801270a:	e001      	b.n	8012710 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801270c:	2309      	movs	r3, #9
 801270e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	68db      	ldr	r3, [r3, #12]
 8012714:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	68da      	ldr	r2, [r3, #12]
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	029b      	lsls	r3, r3, #10
 8012724:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8012728:	431a      	orrs	r2, r3
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801272e:	2300      	movs	r3, #0
}
 8012730:	4618      	mov	r0, r3
 8012732:	371c      	adds	r7, #28
 8012734:	46bd      	mov	sp, r7
 8012736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273a:	4770      	bx	lr
 801273c:	00d8acbf 	.word	0x00d8acbf
 8012740:	00e4e1c0 	.word	0x00e4e1c0
 8012744:	00f42400 	.word	0x00f42400
 8012748:	01067380 	.word	0x01067380
 801274c:	011a499f 	.word	0x011a499f
 8012750:	01312cff 	.word	0x01312cff
 8012754:	014ca43f 	.word	0x014ca43f
 8012758:	016e3600 	.word	0x016e3600
 801275c:	01a6ab1f 	.word	0x01a6ab1f
 8012760:	01e84800 	.word	0x01e84800

08012764 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012764:	b480      	push	{r7}
 8012766:	b083      	sub	sp, #12
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	689b      	ldr	r3, [r3, #8]
 8012770:	f043 0201 	orr.w	r2, r3, #1
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012778:	2300      	movs	r3, #0
}
 801277a:	4618      	mov	r0, r3
 801277c:	370c      	adds	r7, #12
 801277e:	46bd      	mov	sp, r7
 8012780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012784:	4770      	bx	lr

08012786 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012786:	b480      	push	{r7}
 8012788:	b083      	sub	sp, #12
 801278a:	af00      	add	r7, sp, #0
 801278c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	689b      	ldr	r3, [r3, #8]
 8012792:	f023 0201 	bic.w	r2, r3, #1
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801279a:	2300      	movs	r3, #0
}
 801279c:	4618      	mov	r0, r3
 801279e:	370c      	adds	r7, #12
 80127a0:	46bd      	mov	sp, r7
 80127a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a6:	4770      	bx	lr

080127a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b084      	sub	sp, #16
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	460b      	mov	r3, r1
 80127b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80127b4:	2300      	movs	r3, #0
 80127b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80127c4:	78fb      	ldrb	r3, [r7, #3]
 80127c6:	2b01      	cmp	r3, #1
 80127c8:	d115      	bne.n	80127f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	68db      	ldr	r3, [r3, #12]
 80127ce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80127d6:	200a      	movs	r0, #10
 80127d8:	f7f2 fbd4 	bl	8004f84 <HAL_Delay>
      ms += 10U;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	330a      	adds	r3, #10
 80127e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f001 f93f 	bl	8013a66 <USB_GetMode>
 80127e8:	4603      	mov	r3, r0
 80127ea:	2b01      	cmp	r3, #1
 80127ec:	d01e      	beq.n	801282c <USB_SetCurrentMode+0x84>
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80127f2:	d9f0      	bls.n	80127d6 <USB_SetCurrentMode+0x2e>
 80127f4:	e01a      	b.n	801282c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80127f6:	78fb      	ldrb	r3, [r7, #3]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d115      	bne.n	8012828 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	68db      	ldr	r3, [r3, #12]
 8012800:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8012808:	200a      	movs	r0, #10
 801280a:	f7f2 fbbb 	bl	8004f84 <HAL_Delay>
      ms += 10U;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	330a      	adds	r3, #10
 8012812:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f001 f926 	bl	8013a66 <USB_GetMode>
 801281a:	4603      	mov	r3, r0
 801281c:	2b00      	cmp	r3, #0
 801281e:	d005      	beq.n	801282c <USB_SetCurrentMode+0x84>
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2bc7      	cmp	r3, #199	@ 0xc7
 8012824:	d9f0      	bls.n	8012808 <USB_SetCurrentMode+0x60>
 8012826:	e001      	b.n	801282c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012828:	2301      	movs	r3, #1
 801282a:	e005      	b.n	8012838 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	2bc8      	cmp	r3, #200	@ 0xc8
 8012830:	d101      	bne.n	8012836 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012832:	2301      	movs	r3, #1
 8012834:	e000      	b.n	8012838 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012836:	2300      	movs	r3, #0
}
 8012838:	4618      	mov	r0, r3
 801283a:	3710      	adds	r7, #16
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}

08012840 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012840:	b084      	sub	sp, #16
 8012842:	b580      	push	{r7, lr}
 8012844:	b086      	sub	sp, #24
 8012846:	af00      	add	r7, sp, #0
 8012848:	6078      	str	r0, [r7, #4]
 801284a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801284e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012852:	2300      	movs	r3, #0
 8012854:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801285a:	2300      	movs	r3, #0
 801285c:	613b      	str	r3, [r7, #16]
 801285e:	e009      	b.n	8012874 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012860:	687a      	ldr	r2, [r7, #4]
 8012862:	693b      	ldr	r3, [r7, #16]
 8012864:	3340      	adds	r3, #64	@ 0x40
 8012866:	009b      	lsls	r3, r3, #2
 8012868:	4413      	add	r3, r2
 801286a:	2200      	movs	r2, #0
 801286c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	3301      	adds	r3, #1
 8012872:	613b      	str	r3, [r7, #16]
 8012874:	693b      	ldr	r3, [r7, #16]
 8012876:	2b0e      	cmp	r3, #14
 8012878:	d9f2      	bls.n	8012860 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801287a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801287e:	2b00      	cmp	r3, #0
 8012880:	d11c      	bne.n	80128bc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012888:	685b      	ldr	r3, [r3, #4]
 801288a:	68fa      	ldr	r2, [r7, #12]
 801288c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012890:	f043 0302 	orr.w	r3, r3, #2
 8012894:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801289a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	601a      	str	r2, [r3, #0]
 80128ba:	e005      	b.n	80128c8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80128c0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80128ce:	461a      	mov	r2, r3
 80128d0:	2300      	movs	r3, #0
 80128d2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80128d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d10d      	bne.n	80128f8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80128dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d104      	bne.n	80128ee <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80128e4:	2100      	movs	r1, #0
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f000 f968 	bl	8012bbc <USB_SetDevSpeed>
 80128ec:	e008      	b.n	8012900 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80128ee:	2101      	movs	r1, #1
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f000 f963 	bl	8012bbc <USB_SetDevSpeed>
 80128f6:	e003      	b.n	8012900 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80128f8:	2103      	movs	r1, #3
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	f000 f95e 	bl	8012bbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012900:	2110      	movs	r1, #16
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f000 f8fa 	bl	8012afc <USB_FlushTxFifo>
 8012908:	4603      	mov	r3, r0
 801290a:	2b00      	cmp	r3, #0
 801290c:	d001      	beq.n	8012912 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801290e:	2301      	movs	r3, #1
 8012910:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f000 f924 	bl	8012b60 <USB_FlushRxFifo>
 8012918:	4603      	mov	r3, r0
 801291a:	2b00      	cmp	r3, #0
 801291c:	d001      	beq.n	8012922 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801291e:	2301      	movs	r3, #1
 8012920:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012928:	461a      	mov	r2, r3
 801292a:	2300      	movs	r3, #0
 801292c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012934:	461a      	mov	r2, r3
 8012936:	2300      	movs	r3, #0
 8012938:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012940:	461a      	mov	r2, r3
 8012942:	2300      	movs	r3, #0
 8012944:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012946:	2300      	movs	r3, #0
 8012948:	613b      	str	r3, [r7, #16]
 801294a:	e043      	b.n	80129d4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801294c:	693b      	ldr	r3, [r7, #16]
 801294e:	015a      	lsls	r2, r3, #5
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	4413      	add	r3, r2
 8012954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801295e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012962:	d118      	bne.n	8012996 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d10a      	bne.n	8012980 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	015a      	lsls	r2, r3, #5
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	4413      	add	r3, r2
 8012972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012976:	461a      	mov	r2, r3
 8012978:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801297c:	6013      	str	r3, [r2, #0]
 801297e:	e013      	b.n	80129a8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012980:	693b      	ldr	r3, [r7, #16]
 8012982:	015a      	lsls	r2, r3, #5
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	4413      	add	r3, r2
 8012988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801298c:	461a      	mov	r2, r3
 801298e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012992:	6013      	str	r3, [r2, #0]
 8012994:	e008      	b.n	80129a8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	015a      	lsls	r2, r3, #5
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	4413      	add	r3, r2
 801299e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80129a2:	461a      	mov	r2, r3
 80129a4:	2300      	movs	r3, #0
 80129a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	015a      	lsls	r2, r3, #5
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	4413      	add	r3, r2
 80129b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80129b4:	461a      	mov	r2, r3
 80129b6:	2300      	movs	r3, #0
 80129b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	015a      	lsls	r2, r3, #5
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	4413      	add	r3, r2
 80129c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80129c6:	461a      	mov	r2, r3
 80129c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80129cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80129ce:	693b      	ldr	r3, [r7, #16]
 80129d0:	3301      	adds	r3, #1
 80129d2:	613b      	str	r3, [r7, #16]
 80129d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80129d8:	461a      	mov	r2, r3
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	4293      	cmp	r3, r2
 80129de:	d3b5      	bcc.n	801294c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80129e0:	2300      	movs	r3, #0
 80129e2:	613b      	str	r3, [r7, #16]
 80129e4:	e043      	b.n	8012a6e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	015a      	lsls	r2, r3, #5
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	4413      	add	r3, r2
 80129ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80129f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80129fc:	d118      	bne.n	8012a30 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80129fe:	693b      	ldr	r3, [r7, #16]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d10a      	bne.n	8012a1a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012a04:	693b      	ldr	r3, [r7, #16]
 8012a06:	015a      	lsls	r2, r3, #5
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	4413      	add	r3, r2
 8012a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a10:	461a      	mov	r2, r3
 8012a12:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012a16:	6013      	str	r3, [r2, #0]
 8012a18:	e013      	b.n	8012a42 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012a1a:	693b      	ldr	r3, [r7, #16]
 8012a1c:	015a      	lsls	r2, r3, #5
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	4413      	add	r3, r2
 8012a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a26:	461a      	mov	r2, r3
 8012a28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012a2c:	6013      	str	r3, [r2, #0]
 8012a2e:	e008      	b.n	8012a42 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	015a      	lsls	r2, r3, #5
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	4413      	add	r3, r2
 8012a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a3c:	461a      	mov	r2, r3
 8012a3e:	2300      	movs	r3, #0
 8012a40:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	015a      	lsls	r2, r3, #5
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	4413      	add	r3, r2
 8012a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a4e:	461a      	mov	r2, r3
 8012a50:	2300      	movs	r3, #0
 8012a52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012a54:	693b      	ldr	r3, [r7, #16]
 8012a56:	015a      	lsls	r2, r3, #5
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	4413      	add	r3, r2
 8012a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a60:	461a      	mov	r2, r3
 8012a62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012a66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012a68:	693b      	ldr	r3, [r7, #16]
 8012a6a:	3301      	adds	r3, #1
 8012a6c:	613b      	str	r3, [r7, #16]
 8012a6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012a72:	461a      	mov	r2, r3
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	4293      	cmp	r3, r2
 8012a78:	d3b5      	bcc.n	80129e6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012a80:	691b      	ldr	r3, [r3, #16]
 8012a82:	68fa      	ldr	r2, [r7, #12]
 8012a84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012a8c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2200      	movs	r2, #0
 8012a92:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8012a9a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012a9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d105      	bne.n	8012ab0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	699b      	ldr	r3, [r3, #24]
 8012aa8:	f043 0210 	orr.w	r2, r3, #16
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	699a      	ldr	r2, [r3, #24]
 8012ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8012af4 <USB_DevInit+0x2b4>)
 8012ab6:	4313      	orrs	r3, r2
 8012ab8:	687a      	ldr	r2, [r7, #4]
 8012aba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012abc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d005      	beq.n	8012ad0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	699b      	ldr	r3, [r3, #24]
 8012ac8:	f043 0208 	orr.w	r2, r3, #8
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012ad0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012ad4:	2b01      	cmp	r3, #1
 8012ad6:	d105      	bne.n	8012ae4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	699a      	ldr	r2, [r3, #24]
 8012adc:	4b06      	ldr	r3, [pc, #24]	@ (8012af8 <USB_DevInit+0x2b8>)
 8012ade:	4313      	orrs	r3, r2
 8012ae0:	687a      	ldr	r2, [r7, #4]
 8012ae2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	3718      	adds	r7, #24
 8012aea:	46bd      	mov	sp, r7
 8012aec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012af0:	b004      	add	sp, #16
 8012af2:	4770      	bx	lr
 8012af4:	803c3800 	.word	0x803c3800
 8012af8:	40000004 	.word	0x40000004

08012afc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012afc:	b480      	push	{r7}
 8012afe:	b085      	sub	sp, #20
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012b06:	2300      	movs	r3, #0
 8012b08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012b16:	d901      	bls.n	8012b1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012b18:	2303      	movs	r3, #3
 8012b1a:	e01b      	b.n	8012b54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	691b      	ldr	r3, [r3, #16]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	daf2      	bge.n	8012b0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012b24:	2300      	movs	r3, #0
 8012b26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	019b      	lsls	r3, r3, #6
 8012b2c:	f043 0220 	orr.w	r2, r3, #32
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	3301      	adds	r3, #1
 8012b38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012b40:	d901      	bls.n	8012b46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012b42:	2303      	movs	r3, #3
 8012b44:	e006      	b.n	8012b54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	691b      	ldr	r3, [r3, #16]
 8012b4a:	f003 0320 	and.w	r3, r3, #32
 8012b4e:	2b20      	cmp	r3, #32
 8012b50:	d0f0      	beq.n	8012b34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012b52:	2300      	movs	r3, #0
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	3714      	adds	r7, #20
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012b60:	b480      	push	{r7}
 8012b62:	b085      	sub	sp, #20
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	3301      	adds	r3, #1
 8012b70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012b78:	d901      	bls.n	8012b7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012b7a:	2303      	movs	r3, #3
 8012b7c:	e018      	b.n	8012bb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	691b      	ldr	r3, [r3, #16]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	daf2      	bge.n	8012b6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012b86:	2300      	movs	r3, #0
 8012b88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2210      	movs	r2, #16
 8012b8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	3301      	adds	r3, #1
 8012b94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012b9c:	d901      	bls.n	8012ba2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012b9e:	2303      	movs	r3, #3
 8012ba0:	e006      	b.n	8012bb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	691b      	ldr	r3, [r3, #16]
 8012ba6:	f003 0310 	and.w	r3, r3, #16
 8012baa:	2b10      	cmp	r3, #16
 8012bac:	d0f0      	beq.n	8012b90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012bae:	2300      	movs	r3, #0
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3714      	adds	r7, #20
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr

08012bbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012bbc:	b480      	push	{r7}
 8012bbe:	b085      	sub	sp, #20
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012bd2:	681a      	ldr	r2, [r3, #0]
 8012bd4:	78fb      	ldrb	r3, [r7, #3]
 8012bd6:	68f9      	ldr	r1, [r7, #12]
 8012bd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012bdc:	4313      	orrs	r3, r2
 8012bde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012be0:	2300      	movs	r3, #0
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3714      	adds	r7, #20
 8012be6:	46bd      	mov	sp, r7
 8012be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bec:	4770      	bx	lr

08012bee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8012bee:	b480      	push	{r7}
 8012bf0:	b087      	sub	sp, #28
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012bfa:	693b      	ldr	r3, [r7, #16]
 8012bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012c00:	689b      	ldr	r3, [r3, #8]
 8012c02:	f003 0306 	and.w	r3, r3, #6
 8012c06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d102      	bne.n	8012c14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	75fb      	strb	r3, [r7, #23]
 8012c12:	e00a      	b.n	8012c2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	2b02      	cmp	r3, #2
 8012c18:	d002      	beq.n	8012c20 <USB_GetDevSpeed+0x32>
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	2b06      	cmp	r3, #6
 8012c1e:	d102      	bne.n	8012c26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012c20:	2302      	movs	r3, #2
 8012c22:	75fb      	strb	r3, [r7, #23]
 8012c24:	e001      	b.n	8012c2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012c26:	230f      	movs	r3, #15
 8012c28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	371c      	adds	r7, #28
 8012c30:	46bd      	mov	sp, r7
 8012c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c36:	4770      	bx	lr

08012c38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012c38:	b480      	push	{r7}
 8012c3a:	b085      	sub	sp, #20
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012c46:	683b      	ldr	r3, [r7, #0]
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	785b      	ldrb	r3, [r3, #1]
 8012c50:	2b01      	cmp	r3, #1
 8012c52:	d139      	bne.n	8012cc8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012c5a:	69da      	ldr	r2, [r3, #28]
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	f003 030f 	and.w	r3, r3, #15
 8012c64:	2101      	movs	r1, #1
 8012c66:	fa01 f303 	lsl.w	r3, r1, r3
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	68f9      	ldr	r1, [r7, #12]
 8012c6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012c72:	4313      	orrs	r3, r2
 8012c74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	015a      	lsls	r2, r3, #5
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	4413      	add	r3, r2
 8012c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d153      	bne.n	8012d34 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	015a      	lsls	r2, r3, #5
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	4413      	add	r3, r2
 8012c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012c98:	681a      	ldr	r2, [r3, #0]
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	689b      	ldr	r3, [r3, #8]
 8012c9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	791b      	ldrb	r3, [r3, #4]
 8012ca6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012ca8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	059b      	lsls	r3, r3, #22
 8012cae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012cb0:	431a      	orrs	r2, r3
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	0159      	lsls	r1, r3, #5
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	440b      	add	r3, r1
 8012cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	4b20      	ldr	r3, [pc, #128]	@ (8012d44 <USB_ActivateEndpoint+0x10c>)
 8012cc2:	4313      	orrs	r3, r2
 8012cc4:	600b      	str	r3, [r1, #0]
 8012cc6:	e035      	b.n	8012d34 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012cce:	69da      	ldr	r2, [r3, #28]
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	f003 030f 	and.w	r3, r3, #15
 8012cd8:	2101      	movs	r1, #1
 8012cda:	fa01 f303 	lsl.w	r3, r1, r3
 8012cde:	041b      	lsls	r3, r3, #16
 8012ce0:	68f9      	ldr	r1, [r7, #12]
 8012ce2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012ce6:	4313      	orrs	r3, r2
 8012ce8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012cea:	68bb      	ldr	r3, [r7, #8]
 8012cec:	015a      	lsls	r2, r3, #5
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	4413      	add	r3, r2
 8012cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d119      	bne.n	8012d34 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	015a      	lsls	r2, r3, #5
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	4413      	add	r3, r2
 8012d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012d0c:	681a      	ldr	r2, [r3, #0]
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	689b      	ldr	r3, [r3, #8]
 8012d12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	791b      	ldrb	r3, [r3, #4]
 8012d1a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012d1c:	430b      	orrs	r3, r1
 8012d1e:	431a      	orrs	r2, r3
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	0159      	lsls	r1, r3, #5
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	440b      	add	r3, r1
 8012d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	4b05      	ldr	r3, [pc, #20]	@ (8012d44 <USB_ActivateEndpoint+0x10c>)
 8012d30:	4313      	orrs	r3, r2
 8012d32:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012d34:	2300      	movs	r3, #0
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3714      	adds	r7, #20
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d40:	4770      	bx	lr
 8012d42:	bf00      	nop
 8012d44:	10008000 	.word	0x10008000

08012d48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b085      	sub	sp, #20
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	785b      	ldrb	r3, [r3, #1]
 8012d60:	2b01      	cmp	r3, #1
 8012d62:	d161      	bne.n	8012e28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	015a      	lsls	r2, r3, #5
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	4413      	add	r3, r2
 8012d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012d76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012d7a:	d11f      	bne.n	8012dbc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	015a      	lsls	r2, r3, #5
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	4413      	add	r3, r2
 8012d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	68ba      	ldr	r2, [r7, #8]
 8012d8c:	0151      	lsls	r1, r2, #5
 8012d8e:	68fa      	ldr	r2, [r7, #12]
 8012d90:	440a      	add	r2, r1
 8012d92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012d96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012d9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	015a      	lsls	r2, r3, #5
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	4413      	add	r3, r2
 8012da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	68ba      	ldr	r2, [r7, #8]
 8012dac:	0151      	lsls	r1, r2, #5
 8012dae:	68fa      	ldr	r2, [r7, #12]
 8012db0:	440a      	add	r2, r1
 8012db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012db6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012dba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	f003 030f 	and.w	r3, r3, #15
 8012dcc:	2101      	movs	r1, #1
 8012dce:	fa01 f303 	lsl.w	r3, r1, r3
 8012dd2:	b29b      	uxth	r3, r3
 8012dd4:	43db      	mvns	r3, r3
 8012dd6:	68f9      	ldr	r1, [r7, #12]
 8012dd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012ddc:	4013      	ands	r3, r2
 8012dde:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012de6:	69da      	ldr	r2, [r3, #28]
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	f003 030f 	and.w	r3, r3, #15
 8012df0:	2101      	movs	r1, #1
 8012df2:	fa01 f303 	lsl.w	r3, r1, r3
 8012df6:	b29b      	uxth	r3, r3
 8012df8:	43db      	mvns	r3, r3
 8012dfa:	68f9      	ldr	r1, [r7, #12]
 8012dfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012e00:	4013      	ands	r3, r2
 8012e02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	015a      	lsls	r2, r3, #5
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	4413      	add	r3, r2
 8012e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e10:	681a      	ldr	r2, [r3, #0]
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	0159      	lsls	r1, r3, #5
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	440b      	add	r3, r1
 8012e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e1e:	4619      	mov	r1, r3
 8012e20:	4b35      	ldr	r3, [pc, #212]	@ (8012ef8 <USB_DeactivateEndpoint+0x1b0>)
 8012e22:	4013      	ands	r3, r2
 8012e24:	600b      	str	r3, [r1, #0]
 8012e26:	e060      	b.n	8012eea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	015a      	lsls	r2, r3, #5
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	4413      	add	r3, r2
 8012e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012e3e:	d11f      	bne.n	8012e80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	015a      	lsls	r2, r3, #5
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	4413      	add	r3, r2
 8012e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	68ba      	ldr	r2, [r7, #8]
 8012e50:	0151      	lsls	r1, r2, #5
 8012e52:	68fa      	ldr	r2, [r7, #12]
 8012e54:	440a      	add	r2, r1
 8012e56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012e5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012e5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	015a      	lsls	r2, r3, #5
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	4413      	add	r3, r2
 8012e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	68ba      	ldr	r2, [r7, #8]
 8012e70:	0151      	lsls	r1, r2, #5
 8012e72:	68fa      	ldr	r2, [r7, #12]
 8012e74:	440a      	add	r2, r1
 8012e76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012e7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012e86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	781b      	ldrb	r3, [r3, #0]
 8012e8c:	f003 030f 	and.w	r3, r3, #15
 8012e90:	2101      	movs	r1, #1
 8012e92:	fa01 f303 	lsl.w	r3, r1, r3
 8012e96:	041b      	lsls	r3, r3, #16
 8012e98:	43db      	mvns	r3, r3
 8012e9a:	68f9      	ldr	r1, [r7, #12]
 8012e9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012ea0:	4013      	ands	r3, r2
 8012ea2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012eaa:	69da      	ldr	r2, [r3, #28]
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	f003 030f 	and.w	r3, r3, #15
 8012eb4:	2101      	movs	r1, #1
 8012eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8012eba:	041b      	lsls	r3, r3, #16
 8012ebc:	43db      	mvns	r3, r3
 8012ebe:	68f9      	ldr	r1, [r7, #12]
 8012ec0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012ec4:	4013      	ands	r3, r2
 8012ec6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	015a      	lsls	r2, r3, #5
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	4413      	add	r3, r2
 8012ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	0159      	lsls	r1, r3, #5
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	440b      	add	r3, r1
 8012ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012ee2:	4619      	mov	r1, r3
 8012ee4:	4b05      	ldr	r3, [pc, #20]	@ (8012efc <USB_DeactivateEndpoint+0x1b4>)
 8012ee6:	4013      	ands	r3, r2
 8012ee8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012eea:	2300      	movs	r3, #0
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3714      	adds	r7, #20
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr
 8012ef8:	ec337800 	.word	0xec337800
 8012efc:	eff37800 	.word	0xeff37800

08012f00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b08a      	sub	sp, #40	@ 0x28
 8012f04:	af02      	add	r7, sp, #8
 8012f06:	60f8      	str	r0, [r7, #12]
 8012f08:	60b9      	str	r1, [r7, #8]
 8012f0a:	4613      	mov	r3, r2
 8012f0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	781b      	ldrb	r3, [r3, #0]
 8012f16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	785b      	ldrb	r3, [r3, #1]
 8012f1c:	2b01      	cmp	r3, #1
 8012f1e:	f040 8185 	bne.w	801322c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	691b      	ldr	r3, [r3, #16]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d132      	bne.n	8012f90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	015a      	lsls	r2, r3, #5
 8012f2e:	69fb      	ldr	r3, [r7, #28]
 8012f30:	4413      	add	r3, r2
 8012f32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f36:	691a      	ldr	r2, [r3, #16]
 8012f38:	69bb      	ldr	r3, [r7, #24]
 8012f3a:	0159      	lsls	r1, r3, #5
 8012f3c:	69fb      	ldr	r3, [r7, #28]
 8012f3e:	440b      	add	r3, r1
 8012f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f44:	4619      	mov	r1, r3
 8012f46:	4ba7      	ldr	r3, [pc, #668]	@ (80131e4 <USB_EPStartXfer+0x2e4>)
 8012f48:	4013      	ands	r3, r2
 8012f4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012f4c:	69bb      	ldr	r3, [r7, #24]
 8012f4e:	015a      	lsls	r2, r3, #5
 8012f50:	69fb      	ldr	r3, [r7, #28]
 8012f52:	4413      	add	r3, r2
 8012f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f58:	691b      	ldr	r3, [r3, #16]
 8012f5a:	69ba      	ldr	r2, [r7, #24]
 8012f5c:	0151      	lsls	r1, r2, #5
 8012f5e:	69fa      	ldr	r2, [r7, #28]
 8012f60:	440a      	add	r2, r1
 8012f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012f66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012f6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012f6c:	69bb      	ldr	r3, [r7, #24]
 8012f6e:	015a      	lsls	r2, r3, #5
 8012f70:	69fb      	ldr	r3, [r7, #28]
 8012f72:	4413      	add	r3, r2
 8012f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f78:	691a      	ldr	r2, [r3, #16]
 8012f7a:	69bb      	ldr	r3, [r7, #24]
 8012f7c:	0159      	lsls	r1, r3, #5
 8012f7e:	69fb      	ldr	r3, [r7, #28]
 8012f80:	440b      	add	r3, r1
 8012f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f86:	4619      	mov	r1, r3
 8012f88:	4b97      	ldr	r3, [pc, #604]	@ (80131e8 <USB_EPStartXfer+0x2e8>)
 8012f8a:	4013      	ands	r3, r2
 8012f8c:	610b      	str	r3, [r1, #16]
 8012f8e:	e097      	b.n	80130c0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012f90:	69bb      	ldr	r3, [r7, #24]
 8012f92:	015a      	lsls	r2, r3, #5
 8012f94:	69fb      	ldr	r3, [r7, #28]
 8012f96:	4413      	add	r3, r2
 8012f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f9c:	691a      	ldr	r2, [r3, #16]
 8012f9e:	69bb      	ldr	r3, [r7, #24]
 8012fa0:	0159      	lsls	r1, r3, #5
 8012fa2:	69fb      	ldr	r3, [r7, #28]
 8012fa4:	440b      	add	r3, r1
 8012fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012faa:	4619      	mov	r1, r3
 8012fac:	4b8e      	ldr	r3, [pc, #568]	@ (80131e8 <USB_EPStartXfer+0x2e8>)
 8012fae:	4013      	ands	r3, r2
 8012fb0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012fb2:	69bb      	ldr	r3, [r7, #24]
 8012fb4:	015a      	lsls	r2, r3, #5
 8012fb6:	69fb      	ldr	r3, [r7, #28]
 8012fb8:	4413      	add	r3, r2
 8012fba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012fbe:	691a      	ldr	r2, [r3, #16]
 8012fc0:	69bb      	ldr	r3, [r7, #24]
 8012fc2:	0159      	lsls	r1, r3, #5
 8012fc4:	69fb      	ldr	r3, [r7, #28]
 8012fc6:	440b      	add	r3, r1
 8012fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012fcc:	4619      	mov	r1, r3
 8012fce:	4b85      	ldr	r3, [pc, #532]	@ (80131e4 <USB_EPStartXfer+0x2e4>)
 8012fd0:	4013      	ands	r3, r2
 8012fd2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8012fd4:	69bb      	ldr	r3, [r7, #24]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d11a      	bne.n	8013010 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	691a      	ldr	r2, [r3, #16]
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	689b      	ldr	r3, [r3, #8]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d903      	bls.n	8012fee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	689a      	ldr	r2, [r3, #8]
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012fee:	69bb      	ldr	r3, [r7, #24]
 8012ff0:	015a      	lsls	r2, r3, #5
 8012ff2:	69fb      	ldr	r3, [r7, #28]
 8012ff4:	4413      	add	r3, r2
 8012ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ffa:	691b      	ldr	r3, [r3, #16]
 8012ffc:	69ba      	ldr	r2, [r7, #24]
 8012ffe:	0151      	lsls	r1, r2, #5
 8013000:	69fa      	ldr	r2, [r7, #28]
 8013002:	440a      	add	r2, r1
 8013004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013008:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801300c:	6113      	str	r3, [r2, #16]
 801300e:	e044      	b.n	801309a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	691a      	ldr	r2, [r3, #16]
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	689b      	ldr	r3, [r3, #8]
 8013018:	4413      	add	r3, r2
 801301a:	1e5a      	subs	r2, r3, #1
 801301c:	68bb      	ldr	r3, [r7, #8]
 801301e:	689b      	ldr	r3, [r3, #8]
 8013020:	fbb2 f3f3 	udiv	r3, r2, r3
 8013024:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8013026:	69bb      	ldr	r3, [r7, #24]
 8013028:	015a      	lsls	r2, r3, #5
 801302a:	69fb      	ldr	r3, [r7, #28]
 801302c:	4413      	add	r3, r2
 801302e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013032:	691a      	ldr	r2, [r3, #16]
 8013034:	8afb      	ldrh	r3, [r7, #22]
 8013036:	04d9      	lsls	r1, r3, #19
 8013038:	4b6c      	ldr	r3, [pc, #432]	@ (80131ec <USB_EPStartXfer+0x2ec>)
 801303a:	400b      	ands	r3, r1
 801303c:	69b9      	ldr	r1, [r7, #24]
 801303e:	0148      	lsls	r0, r1, #5
 8013040:	69f9      	ldr	r1, [r7, #28]
 8013042:	4401      	add	r1, r0
 8013044:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013048:	4313      	orrs	r3, r2
 801304a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 801304c:	68bb      	ldr	r3, [r7, #8]
 801304e:	791b      	ldrb	r3, [r3, #4]
 8013050:	2b01      	cmp	r3, #1
 8013052:	d122      	bne.n	801309a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013054:	69bb      	ldr	r3, [r7, #24]
 8013056:	015a      	lsls	r2, r3, #5
 8013058:	69fb      	ldr	r3, [r7, #28]
 801305a:	4413      	add	r3, r2
 801305c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013060:	691b      	ldr	r3, [r3, #16]
 8013062:	69ba      	ldr	r2, [r7, #24]
 8013064:	0151      	lsls	r1, r2, #5
 8013066:	69fa      	ldr	r2, [r7, #28]
 8013068:	440a      	add	r2, r1
 801306a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801306e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8013072:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8013074:	69bb      	ldr	r3, [r7, #24]
 8013076:	015a      	lsls	r2, r3, #5
 8013078:	69fb      	ldr	r3, [r7, #28]
 801307a:	4413      	add	r3, r2
 801307c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013080:	691a      	ldr	r2, [r3, #16]
 8013082:	8afb      	ldrh	r3, [r7, #22]
 8013084:	075b      	lsls	r3, r3, #29
 8013086:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 801308a:	69b9      	ldr	r1, [r7, #24]
 801308c:	0148      	lsls	r0, r1, #5
 801308e:	69f9      	ldr	r1, [r7, #28]
 8013090:	4401      	add	r1, r0
 8013092:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013096:	4313      	orrs	r3, r2
 8013098:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801309a:	69bb      	ldr	r3, [r7, #24]
 801309c:	015a      	lsls	r2, r3, #5
 801309e:	69fb      	ldr	r3, [r7, #28]
 80130a0:	4413      	add	r3, r2
 80130a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80130a6:	691a      	ldr	r2, [r3, #16]
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	691b      	ldr	r3, [r3, #16]
 80130ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80130b0:	69b9      	ldr	r1, [r7, #24]
 80130b2:	0148      	lsls	r0, r1, #5
 80130b4:	69f9      	ldr	r1, [r7, #28]
 80130b6:	4401      	add	r1, r0
 80130b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80130bc:	4313      	orrs	r3, r2
 80130be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80130c0:	79fb      	ldrb	r3, [r7, #7]
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d14b      	bne.n	801315e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80130c6:	68bb      	ldr	r3, [r7, #8]
 80130c8:	69db      	ldr	r3, [r3, #28]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d009      	beq.n	80130e2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80130ce:	69bb      	ldr	r3, [r7, #24]
 80130d0:	015a      	lsls	r2, r3, #5
 80130d2:	69fb      	ldr	r3, [r7, #28]
 80130d4:	4413      	add	r3, r2
 80130d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80130da:	461a      	mov	r2, r3
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	69db      	ldr	r3, [r3, #28]
 80130e0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	791b      	ldrb	r3, [r3, #4]
 80130e6:	2b01      	cmp	r3, #1
 80130e8:	d128      	bne.n	801313c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80130ea:	69fb      	ldr	r3, [r7, #28]
 80130ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130f0:	689b      	ldr	r3, [r3, #8]
 80130f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d110      	bne.n	801311c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80130fa:	69bb      	ldr	r3, [r7, #24]
 80130fc:	015a      	lsls	r2, r3, #5
 80130fe:	69fb      	ldr	r3, [r7, #28]
 8013100:	4413      	add	r3, r2
 8013102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	69ba      	ldr	r2, [r7, #24]
 801310a:	0151      	lsls	r1, r2, #5
 801310c:	69fa      	ldr	r2, [r7, #28]
 801310e:	440a      	add	r2, r1
 8013110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013114:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013118:	6013      	str	r3, [r2, #0]
 801311a:	e00f      	b.n	801313c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801311c:	69bb      	ldr	r3, [r7, #24]
 801311e:	015a      	lsls	r2, r3, #5
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	4413      	add	r3, r2
 8013124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	69ba      	ldr	r2, [r7, #24]
 801312c:	0151      	lsls	r1, r2, #5
 801312e:	69fa      	ldr	r2, [r7, #28]
 8013130:	440a      	add	r2, r1
 8013132:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801313a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801313c:	69bb      	ldr	r3, [r7, #24]
 801313e:	015a      	lsls	r2, r3, #5
 8013140:	69fb      	ldr	r3, [r7, #28]
 8013142:	4413      	add	r3, r2
 8013144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	69ba      	ldr	r2, [r7, #24]
 801314c:	0151      	lsls	r1, r2, #5
 801314e:	69fa      	ldr	r2, [r7, #28]
 8013150:	440a      	add	r2, r1
 8013152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013156:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801315a:	6013      	str	r3, [r2, #0]
 801315c:	e169      	b.n	8013432 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801315e:	69bb      	ldr	r3, [r7, #24]
 8013160:	015a      	lsls	r2, r3, #5
 8013162:	69fb      	ldr	r3, [r7, #28]
 8013164:	4413      	add	r3, r2
 8013166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	69ba      	ldr	r2, [r7, #24]
 801316e:	0151      	lsls	r1, r2, #5
 8013170:	69fa      	ldr	r2, [r7, #28]
 8013172:	440a      	add	r2, r1
 8013174:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013178:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801317c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	791b      	ldrb	r3, [r3, #4]
 8013182:	2b01      	cmp	r3, #1
 8013184:	d015      	beq.n	80131b2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	691b      	ldr	r3, [r3, #16]
 801318a:	2b00      	cmp	r3, #0
 801318c:	f000 8151 	beq.w	8013432 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013190:	69fb      	ldr	r3, [r7, #28]
 8013192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	f003 030f 	and.w	r3, r3, #15
 80131a0:	2101      	movs	r1, #1
 80131a2:	fa01 f303 	lsl.w	r3, r1, r3
 80131a6:	69f9      	ldr	r1, [r7, #28]
 80131a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80131ac:	4313      	orrs	r3, r2
 80131ae:	634b      	str	r3, [r1, #52]	@ 0x34
 80131b0:	e13f      	b.n	8013432 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80131b8:	689b      	ldr	r3, [r3, #8]
 80131ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d116      	bne.n	80131f0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80131c2:	69bb      	ldr	r3, [r7, #24]
 80131c4:	015a      	lsls	r2, r3, #5
 80131c6:	69fb      	ldr	r3, [r7, #28]
 80131c8:	4413      	add	r3, r2
 80131ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	69ba      	ldr	r2, [r7, #24]
 80131d2:	0151      	lsls	r1, r2, #5
 80131d4:	69fa      	ldr	r2, [r7, #28]
 80131d6:	440a      	add	r2, r1
 80131d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80131dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80131e0:	6013      	str	r3, [r2, #0]
 80131e2:	e015      	b.n	8013210 <USB_EPStartXfer+0x310>
 80131e4:	e007ffff 	.word	0xe007ffff
 80131e8:	fff80000 	.word	0xfff80000
 80131ec:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80131f0:	69bb      	ldr	r3, [r7, #24]
 80131f2:	015a      	lsls	r2, r3, #5
 80131f4:	69fb      	ldr	r3, [r7, #28]
 80131f6:	4413      	add	r3, r2
 80131f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	69ba      	ldr	r2, [r7, #24]
 8013200:	0151      	lsls	r1, r2, #5
 8013202:	69fa      	ldr	r2, [r7, #28]
 8013204:	440a      	add	r2, r1
 8013206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801320a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801320e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	68d9      	ldr	r1, [r3, #12]
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	781a      	ldrb	r2, [r3, #0]
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	691b      	ldr	r3, [r3, #16]
 801321c:	b298      	uxth	r0, r3
 801321e:	79fb      	ldrb	r3, [r7, #7]
 8013220:	9300      	str	r3, [sp, #0]
 8013222:	4603      	mov	r3, r0
 8013224:	68f8      	ldr	r0, [r7, #12]
 8013226:	f000 f9b9 	bl	801359c <USB_WritePacket>
 801322a:	e102      	b.n	8013432 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801322c:	69bb      	ldr	r3, [r7, #24]
 801322e:	015a      	lsls	r2, r3, #5
 8013230:	69fb      	ldr	r3, [r7, #28]
 8013232:	4413      	add	r3, r2
 8013234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013238:	691a      	ldr	r2, [r3, #16]
 801323a:	69bb      	ldr	r3, [r7, #24]
 801323c:	0159      	lsls	r1, r3, #5
 801323e:	69fb      	ldr	r3, [r7, #28]
 8013240:	440b      	add	r3, r1
 8013242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013246:	4619      	mov	r1, r3
 8013248:	4b7c      	ldr	r3, [pc, #496]	@ (801343c <USB_EPStartXfer+0x53c>)
 801324a:	4013      	ands	r3, r2
 801324c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801324e:	69bb      	ldr	r3, [r7, #24]
 8013250:	015a      	lsls	r2, r3, #5
 8013252:	69fb      	ldr	r3, [r7, #28]
 8013254:	4413      	add	r3, r2
 8013256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801325a:	691a      	ldr	r2, [r3, #16]
 801325c:	69bb      	ldr	r3, [r7, #24]
 801325e:	0159      	lsls	r1, r3, #5
 8013260:	69fb      	ldr	r3, [r7, #28]
 8013262:	440b      	add	r3, r1
 8013264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013268:	4619      	mov	r1, r3
 801326a:	4b75      	ldr	r3, [pc, #468]	@ (8013440 <USB_EPStartXfer+0x540>)
 801326c:	4013      	ands	r3, r2
 801326e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013270:	69bb      	ldr	r3, [r7, #24]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d12f      	bne.n	80132d6 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	691b      	ldr	r3, [r3, #16]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d003      	beq.n	8013286 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	689a      	ldr	r2, [r3, #8]
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	689a      	ldr	r2, [r3, #8]
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801328e:	69bb      	ldr	r3, [r7, #24]
 8013290:	015a      	lsls	r2, r3, #5
 8013292:	69fb      	ldr	r3, [r7, #28]
 8013294:	4413      	add	r3, r2
 8013296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801329a:	691a      	ldr	r2, [r3, #16]
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	6a1b      	ldr	r3, [r3, #32]
 80132a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80132a4:	69b9      	ldr	r1, [r7, #24]
 80132a6:	0148      	lsls	r0, r1, #5
 80132a8:	69f9      	ldr	r1, [r7, #28]
 80132aa:	4401      	add	r1, r0
 80132ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80132b0:	4313      	orrs	r3, r2
 80132b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	015a      	lsls	r2, r3, #5
 80132b8:	69fb      	ldr	r3, [r7, #28]
 80132ba:	4413      	add	r3, r2
 80132bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80132c0:	691b      	ldr	r3, [r3, #16]
 80132c2:	69ba      	ldr	r2, [r7, #24]
 80132c4:	0151      	lsls	r1, r2, #5
 80132c6:	69fa      	ldr	r2, [r7, #28]
 80132c8:	440a      	add	r2, r1
 80132ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80132ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80132d2:	6113      	str	r3, [r2, #16]
 80132d4:	e05f      	b.n	8013396 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	691b      	ldr	r3, [r3, #16]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d123      	bne.n	8013326 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80132de:	69bb      	ldr	r3, [r7, #24]
 80132e0:	015a      	lsls	r2, r3, #5
 80132e2:	69fb      	ldr	r3, [r7, #28]
 80132e4:	4413      	add	r3, r2
 80132e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80132ea:	691a      	ldr	r2, [r3, #16]
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	689b      	ldr	r3, [r3, #8]
 80132f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80132f4:	69b9      	ldr	r1, [r7, #24]
 80132f6:	0148      	lsls	r0, r1, #5
 80132f8:	69f9      	ldr	r1, [r7, #28]
 80132fa:	4401      	add	r1, r0
 80132fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013300:	4313      	orrs	r3, r2
 8013302:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013304:	69bb      	ldr	r3, [r7, #24]
 8013306:	015a      	lsls	r2, r3, #5
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	4413      	add	r3, r2
 801330c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013310:	691b      	ldr	r3, [r3, #16]
 8013312:	69ba      	ldr	r2, [r7, #24]
 8013314:	0151      	lsls	r1, r2, #5
 8013316:	69fa      	ldr	r2, [r7, #28]
 8013318:	440a      	add	r2, r1
 801331a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801331e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013322:	6113      	str	r3, [r2, #16]
 8013324:	e037      	b.n	8013396 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	691a      	ldr	r2, [r3, #16]
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	689b      	ldr	r3, [r3, #8]
 801332e:	4413      	add	r3, r2
 8013330:	1e5a      	subs	r2, r3, #1
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	689b      	ldr	r3, [r3, #8]
 8013336:	fbb2 f3f3 	udiv	r3, r2, r3
 801333a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	689b      	ldr	r3, [r3, #8]
 8013340:	8afa      	ldrh	r2, [r7, #22]
 8013342:	fb03 f202 	mul.w	r2, r3, r2
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801334a:	69bb      	ldr	r3, [r7, #24]
 801334c:	015a      	lsls	r2, r3, #5
 801334e:	69fb      	ldr	r3, [r7, #28]
 8013350:	4413      	add	r3, r2
 8013352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013356:	691a      	ldr	r2, [r3, #16]
 8013358:	8afb      	ldrh	r3, [r7, #22]
 801335a:	04d9      	lsls	r1, r3, #19
 801335c:	4b39      	ldr	r3, [pc, #228]	@ (8013444 <USB_EPStartXfer+0x544>)
 801335e:	400b      	ands	r3, r1
 8013360:	69b9      	ldr	r1, [r7, #24]
 8013362:	0148      	lsls	r0, r1, #5
 8013364:	69f9      	ldr	r1, [r7, #28]
 8013366:	4401      	add	r1, r0
 8013368:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801336c:	4313      	orrs	r3, r2
 801336e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	015a      	lsls	r2, r3, #5
 8013374:	69fb      	ldr	r3, [r7, #28]
 8013376:	4413      	add	r3, r2
 8013378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801337c:	691a      	ldr	r2, [r3, #16]
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	6a1b      	ldr	r3, [r3, #32]
 8013382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013386:	69b9      	ldr	r1, [r7, #24]
 8013388:	0148      	lsls	r0, r1, #5
 801338a:	69f9      	ldr	r1, [r7, #28]
 801338c:	4401      	add	r1, r0
 801338e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013392:	4313      	orrs	r3, r2
 8013394:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013396:	79fb      	ldrb	r3, [r7, #7]
 8013398:	2b01      	cmp	r3, #1
 801339a:	d10d      	bne.n	80133b8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d009      	beq.n	80133b8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	68d9      	ldr	r1, [r3, #12]
 80133a8:	69bb      	ldr	r3, [r7, #24]
 80133aa:	015a      	lsls	r2, r3, #5
 80133ac:	69fb      	ldr	r3, [r7, #28]
 80133ae:	4413      	add	r3, r2
 80133b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80133b4:	460a      	mov	r2, r1
 80133b6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	791b      	ldrb	r3, [r3, #4]
 80133bc:	2b01      	cmp	r3, #1
 80133be:	d128      	bne.n	8013412 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80133c0:	69fb      	ldr	r3, [r7, #28]
 80133c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80133c6:	689b      	ldr	r3, [r3, #8]
 80133c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d110      	bne.n	80133f2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	015a      	lsls	r2, r3, #5
 80133d4:	69fb      	ldr	r3, [r7, #28]
 80133d6:	4413      	add	r3, r2
 80133d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	69ba      	ldr	r2, [r7, #24]
 80133e0:	0151      	lsls	r1, r2, #5
 80133e2:	69fa      	ldr	r2, [r7, #28]
 80133e4:	440a      	add	r2, r1
 80133e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80133ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80133ee:	6013      	str	r3, [r2, #0]
 80133f0:	e00f      	b.n	8013412 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80133f2:	69bb      	ldr	r3, [r7, #24]
 80133f4:	015a      	lsls	r2, r3, #5
 80133f6:	69fb      	ldr	r3, [r7, #28]
 80133f8:	4413      	add	r3, r2
 80133fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	69ba      	ldr	r2, [r7, #24]
 8013402:	0151      	lsls	r1, r2, #5
 8013404:	69fa      	ldr	r2, [r7, #28]
 8013406:	440a      	add	r2, r1
 8013408:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801340c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013410:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013412:	69bb      	ldr	r3, [r7, #24]
 8013414:	015a      	lsls	r2, r3, #5
 8013416:	69fb      	ldr	r3, [r7, #28]
 8013418:	4413      	add	r3, r2
 801341a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	69ba      	ldr	r2, [r7, #24]
 8013422:	0151      	lsls	r1, r2, #5
 8013424:	69fa      	ldr	r2, [r7, #28]
 8013426:	440a      	add	r2, r1
 8013428:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801342c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013430:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013432:	2300      	movs	r3, #0
}
 8013434:	4618      	mov	r0, r3
 8013436:	3720      	adds	r7, #32
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}
 801343c:	fff80000 	.word	0xfff80000
 8013440:	e007ffff 	.word	0xe007ffff
 8013444:	1ff80000 	.word	0x1ff80000

08013448 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013448:	b480      	push	{r7}
 801344a:	b087      	sub	sp, #28
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013452:	2300      	movs	r3, #0
 8013454:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013456:	2300      	movs	r3, #0
 8013458:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	785b      	ldrb	r3, [r3, #1]
 8013462:	2b01      	cmp	r3, #1
 8013464:	d14a      	bne.n	80134fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	781b      	ldrb	r3, [r3, #0]
 801346a:	015a      	lsls	r2, r3, #5
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	4413      	add	r3, r2
 8013470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801347a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801347e:	f040 8086 	bne.w	801358e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	781b      	ldrb	r3, [r3, #0]
 8013486:	015a      	lsls	r2, r3, #5
 8013488:	693b      	ldr	r3, [r7, #16]
 801348a:	4413      	add	r3, r2
 801348c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	683a      	ldr	r2, [r7, #0]
 8013494:	7812      	ldrb	r2, [r2, #0]
 8013496:	0151      	lsls	r1, r2, #5
 8013498:	693a      	ldr	r2, [r7, #16]
 801349a:	440a      	add	r2, r1
 801349c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80134a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80134a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	015a      	lsls	r2, r3, #5
 80134ac:	693b      	ldr	r3, [r7, #16]
 80134ae:	4413      	add	r3, r2
 80134b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	683a      	ldr	r2, [r7, #0]
 80134b8:	7812      	ldrb	r2, [r2, #0]
 80134ba:	0151      	lsls	r1, r2, #5
 80134bc:	693a      	ldr	r2, [r7, #16]
 80134be:	440a      	add	r2, r1
 80134c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80134c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80134c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	3301      	adds	r3, #1
 80134ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80134d6:	4293      	cmp	r3, r2
 80134d8:	d902      	bls.n	80134e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80134da:	2301      	movs	r3, #1
 80134dc:	75fb      	strb	r3, [r7, #23]
          break;
 80134de:	e056      	b.n	801358e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	015a      	lsls	r2, r3, #5
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	4413      	add	r3, r2
 80134ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80134f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80134f8:	d0e7      	beq.n	80134ca <USB_EPStopXfer+0x82>
 80134fa:	e048      	b.n	801358e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	781b      	ldrb	r3, [r3, #0]
 8013500:	015a      	lsls	r2, r3, #5
 8013502:	693b      	ldr	r3, [r7, #16]
 8013504:	4413      	add	r3, r2
 8013506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013510:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013514:	d13b      	bne.n	801358e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	781b      	ldrb	r3, [r3, #0]
 801351a:	015a      	lsls	r2, r3, #5
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	4413      	add	r3, r2
 8013520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	683a      	ldr	r2, [r7, #0]
 8013528:	7812      	ldrb	r2, [r2, #0]
 801352a:	0151      	lsls	r1, r2, #5
 801352c:	693a      	ldr	r2, [r7, #16]
 801352e:	440a      	add	r2, r1
 8013530:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013534:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013538:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	015a      	lsls	r2, r3, #5
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	4413      	add	r3, r2
 8013544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	683a      	ldr	r2, [r7, #0]
 801354c:	7812      	ldrb	r2, [r2, #0]
 801354e:	0151      	lsls	r1, r2, #5
 8013550:	693a      	ldr	r2, [r7, #16]
 8013552:	440a      	add	r2, r1
 8013554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013558:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801355c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	3301      	adds	r3, #1
 8013562:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	f242 7210 	movw	r2, #10000	@ 0x2710
 801356a:	4293      	cmp	r3, r2
 801356c:	d902      	bls.n	8013574 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801356e:	2301      	movs	r3, #1
 8013570:	75fb      	strb	r3, [r7, #23]
          break;
 8013572:	e00c      	b.n	801358e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	015a      	lsls	r2, r3, #5
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	4413      	add	r3, r2
 801357e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013588:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801358c:	d0e7      	beq.n	801355e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801358e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013590:	4618      	mov	r0, r3
 8013592:	371c      	adds	r7, #28
 8013594:	46bd      	mov	sp, r7
 8013596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359a:	4770      	bx	lr

0801359c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801359c:	b480      	push	{r7}
 801359e:	b089      	sub	sp, #36	@ 0x24
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	60f8      	str	r0, [r7, #12]
 80135a4:	60b9      	str	r1, [r7, #8]
 80135a6:	4611      	mov	r1, r2
 80135a8:	461a      	mov	r2, r3
 80135aa:	460b      	mov	r3, r1
 80135ac:	71fb      	strb	r3, [r7, #7]
 80135ae:	4613      	mov	r3, r2
 80135b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80135ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d123      	bne.n	801360a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80135c2:	88bb      	ldrh	r3, [r7, #4]
 80135c4:	3303      	adds	r3, #3
 80135c6:	089b      	lsrs	r3, r3, #2
 80135c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80135ca:	2300      	movs	r3, #0
 80135cc:	61bb      	str	r3, [r7, #24]
 80135ce:	e018      	b.n	8013602 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80135d0:	79fb      	ldrb	r3, [r7, #7]
 80135d2:	031a      	lsls	r2, r3, #12
 80135d4:	697b      	ldr	r3, [r7, #20]
 80135d6:	4413      	add	r3, r2
 80135d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80135dc:	461a      	mov	r2, r3
 80135de:	69fb      	ldr	r3, [r7, #28]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80135e4:	69fb      	ldr	r3, [r7, #28]
 80135e6:	3301      	adds	r3, #1
 80135e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	3301      	adds	r3, #1
 80135ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80135f0:	69fb      	ldr	r3, [r7, #28]
 80135f2:	3301      	adds	r3, #1
 80135f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80135f6:	69fb      	ldr	r3, [r7, #28]
 80135f8:	3301      	adds	r3, #1
 80135fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80135fc:	69bb      	ldr	r3, [r7, #24]
 80135fe:	3301      	adds	r3, #1
 8013600:	61bb      	str	r3, [r7, #24]
 8013602:	69ba      	ldr	r2, [r7, #24]
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	429a      	cmp	r2, r3
 8013608:	d3e2      	bcc.n	80135d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801360a:	2300      	movs	r3, #0
}
 801360c:	4618      	mov	r0, r3
 801360e:	3724      	adds	r7, #36	@ 0x24
 8013610:	46bd      	mov	sp, r7
 8013612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013616:	4770      	bx	lr

08013618 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013618:	b480      	push	{r7}
 801361a:	b08b      	sub	sp, #44	@ 0x2c
 801361c:	af00      	add	r7, sp, #0
 801361e:	60f8      	str	r0, [r7, #12]
 8013620:	60b9      	str	r1, [r7, #8]
 8013622:	4613      	mov	r3, r2
 8013624:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801362e:	88fb      	ldrh	r3, [r7, #6]
 8013630:	089b      	lsrs	r3, r3, #2
 8013632:	b29b      	uxth	r3, r3
 8013634:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013636:	88fb      	ldrh	r3, [r7, #6]
 8013638:	f003 0303 	and.w	r3, r3, #3
 801363c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801363e:	2300      	movs	r3, #0
 8013640:	623b      	str	r3, [r7, #32]
 8013642:	e014      	b.n	801366e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013644:	69bb      	ldr	r3, [r7, #24]
 8013646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801364e:	601a      	str	r2, [r3, #0]
    pDest++;
 8013650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013652:	3301      	adds	r3, #1
 8013654:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013658:	3301      	adds	r3, #1
 801365a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801365e:	3301      	adds	r3, #1
 8013660:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013664:	3301      	adds	r3, #1
 8013666:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8013668:	6a3b      	ldr	r3, [r7, #32]
 801366a:	3301      	adds	r3, #1
 801366c:	623b      	str	r3, [r7, #32]
 801366e:	6a3a      	ldr	r2, [r7, #32]
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	429a      	cmp	r2, r3
 8013674:	d3e6      	bcc.n	8013644 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013676:	8bfb      	ldrh	r3, [r7, #30]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d01e      	beq.n	80136ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801367c:	2300      	movs	r3, #0
 801367e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013680:	69bb      	ldr	r3, [r7, #24]
 8013682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013686:	461a      	mov	r2, r3
 8013688:	f107 0310 	add.w	r3, r7, #16
 801368c:	6812      	ldr	r2, [r2, #0]
 801368e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013690:	693a      	ldr	r2, [r7, #16]
 8013692:	6a3b      	ldr	r3, [r7, #32]
 8013694:	b2db      	uxtb	r3, r3
 8013696:	00db      	lsls	r3, r3, #3
 8013698:	fa22 f303 	lsr.w	r3, r2, r3
 801369c:	b2da      	uxtb	r2, r3
 801369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136a0:	701a      	strb	r2, [r3, #0]
      i++;
 80136a2:	6a3b      	ldr	r3, [r7, #32]
 80136a4:	3301      	adds	r3, #1
 80136a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80136a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136aa:	3301      	adds	r3, #1
 80136ac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80136ae:	8bfb      	ldrh	r3, [r7, #30]
 80136b0:	3b01      	subs	r3, #1
 80136b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80136b4:	8bfb      	ldrh	r3, [r7, #30]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d1ea      	bne.n	8013690 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80136ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80136bc:	4618      	mov	r0, r3
 80136be:	372c      	adds	r7, #44	@ 0x2c
 80136c0:	46bd      	mov	sp, r7
 80136c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c6:	4770      	bx	lr

080136c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80136c8:	b480      	push	{r7}
 80136ca:	b085      	sub	sp, #20
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	781b      	ldrb	r3, [r3, #0]
 80136da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	785b      	ldrb	r3, [r3, #1]
 80136e0:	2b01      	cmp	r3, #1
 80136e2:	d12c      	bne.n	801373e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80136e4:	68bb      	ldr	r3, [r7, #8]
 80136e6:	015a      	lsls	r2, r3, #5
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	4413      	add	r3, r2
 80136ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	db12      	blt.n	801371c <USB_EPSetStall+0x54>
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d00f      	beq.n	801371c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	015a      	lsls	r2, r3, #5
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	4413      	add	r3, r2
 8013704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	68ba      	ldr	r2, [r7, #8]
 801370c:	0151      	lsls	r1, r2, #5
 801370e:	68fa      	ldr	r2, [r7, #12]
 8013710:	440a      	add	r2, r1
 8013712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013716:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801371a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	015a      	lsls	r2, r3, #5
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	4413      	add	r3, r2
 8013724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	68ba      	ldr	r2, [r7, #8]
 801372c:	0151      	lsls	r1, r2, #5
 801372e:	68fa      	ldr	r2, [r7, #12]
 8013730:	440a      	add	r2, r1
 8013732:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013736:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801373a:	6013      	str	r3, [r2, #0]
 801373c:	e02b      	b.n	8013796 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	015a      	lsls	r2, r3, #5
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	4413      	add	r3, r2
 8013746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	2b00      	cmp	r3, #0
 801374e:	db12      	blt.n	8013776 <USB_EPSetStall+0xae>
 8013750:	68bb      	ldr	r3, [r7, #8]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d00f      	beq.n	8013776 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	015a      	lsls	r2, r3, #5
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	4413      	add	r3, r2
 801375e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	68ba      	ldr	r2, [r7, #8]
 8013766:	0151      	lsls	r1, r2, #5
 8013768:	68fa      	ldr	r2, [r7, #12]
 801376a:	440a      	add	r2, r1
 801376c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013770:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013774:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	015a      	lsls	r2, r3, #5
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	4413      	add	r3, r2
 801377e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	68ba      	ldr	r2, [r7, #8]
 8013786:	0151      	lsls	r1, r2, #5
 8013788:	68fa      	ldr	r2, [r7, #12]
 801378a:	440a      	add	r2, r1
 801378c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013790:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013794:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013796:	2300      	movs	r3, #0
}
 8013798:	4618      	mov	r0, r3
 801379a:	3714      	adds	r7, #20
 801379c:	46bd      	mov	sp, r7
 801379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a2:	4770      	bx	lr

080137a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80137a4:	b480      	push	{r7}
 80137a6:	b085      	sub	sp, #20
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
 80137ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	781b      	ldrb	r3, [r3, #0]
 80137b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	785b      	ldrb	r3, [r3, #1]
 80137bc:	2b01      	cmp	r3, #1
 80137be:	d128      	bne.n	8013812 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	015a      	lsls	r2, r3, #5
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	4413      	add	r3, r2
 80137c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	68ba      	ldr	r2, [r7, #8]
 80137d0:	0151      	lsls	r1, r2, #5
 80137d2:	68fa      	ldr	r2, [r7, #12]
 80137d4:	440a      	add	r2, r1
 80137d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80137da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80137de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	791b      	ldrb	r3, [r3, #4]
 80137e4:	2b03      	cmp	r3, #3
 80137e6:	d003      	beq.n	80137f0 <USB_EPClearStall+0x4c>
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	791b      	ldrb	r3, [r3, #4]
 80137ec:	2b02      	cmp	r3, #2
 80137ee:	d138      	bne.n	8013862 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	015a      	lsls	r2, r3, #5
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	4413      	add	r3, r2
 80137f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	68ba      	ldr	r2, [r7, #8]
 8013800:	0151      	lsls	r1, r2, #5
 8013802:	68fa      	ldr	r2, [r7, #12]
 8013804:	440a      	add	r2, r1
 8013806:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801380a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801380e:	6013      	str	r3, [r2, #0]
 8013810:	e027      	b.n	8013862 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	015a      	lsls	r2, r3, #5
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	4413      	add	r3, r2
 801381a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	68ba      	ldr	r2, [r7, #8]
 8013822:	0151      	lsls	r1, r2, #5
 8013824:	68fa      	ldr	r2, [r7, #12]
 8013826:	440a      	add	r2, r1
 8013828:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801382c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013830:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	791b      	ldrb	r3, [r3, #4]
 8013836:	2b03      	cmp	r3, #3
 8013838:	d003      	beq.n	8013842 <USB_EPClearStall+0x9e>
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	791b      	ldrb	r3, [r3, #4]
 801383e:	2b02      	cmp	r3, #2
 8013840:	d10f      	bne.n	8013862 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	015a      	lsls	r2, r3, #5
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	4413      	add	r3, r2
 801384a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	68ba      	ldr	r2, [r7, #8]
 8013852:	0151      	lsls	r1, r2, #5
 8013854:	68fa      	ldr	r2, [r7, #12]
 8013856:	440a      	add	r2, r1
 8013858:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801385c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013860:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013862:	2300      	movs	r3, #0
}
 8013864:	4618      	mov	r0, r3
 8013866:	3714      	adds	r7, #20
 8013868:	46bd      	mov	sp, r7
 801386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386e:	4770      	bx	lr

08013870 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013870:	b480      	push	{r7}
 8013872:	b085      	sub	sp, #20
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
 8013878:	460b      	mov	r3, r1
 801387a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	68fa      	ldr	r2, [r7, #12]
 801388a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801388e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8013892:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801389a:	681a      	ldr	r2, [r3, #0]
 801389c:	78fb      	ldrb	r3, [r7, #3]
 801389e:	011b      	lsls	r3, r3, #4
 80138a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80138a4:	68f9      	ldr	r1, [r7, #12]
 80138a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80138aa:	4313      	orrs	r3, r2
 80138ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80138ae:	2300      	movs	r3, #0
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3714      	adds	r7, #20
 80138b4:	46bd      	mov	sp, r7
 80138b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ba:	4770      	bx	lr

080138bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80138bc:	b480      	push	{r7}
 80138be:	b085      	sub	sp, #20
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	68fa      	ldr	r2, [r7, #12]
 80138d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80138d6:	f023 0303 	bic.w	r3, r3, #3
 80138da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80138e2:	685b      	ldr	r3, [r3, #4]
 80138e4:	68fa      	ldr	r2, [r7, #12]
 80138e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80138ea:	f023 0302 	bic.w	r3, r3, #2
 80138ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80138f0:	2300      	movs	r3, #0
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	3714      	adds	r7, #20
 80138f6:	46bd      	mov	sp, r7
 80138f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fc:	4770      	bx	lr

080138fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80138fe:	b480      	push	{r7}
 8013900:	b085      	sub	sp, #20
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	68fa      	ldr	r2, [r7, #12]
 8013914:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013918:	f023 0303 	bic.w	r3, r3, #3
 801391c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013924:	685b      	ldr	r3, [r3, #4]
 8013926:	68fa      	ldr	r2, [r7, #12]
 8013928:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801392c:	f043 0302 	orr.w	r3, r3, #2
 8013930:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013932:	2300      	movs	r3, #0
}
 8013934:	4618      	mov	r0, r3
 8013936:	3714      	adds	r7, #20
 8013938:	46bd      	mov	sp, r7
 801393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393e:	4770      	bx	lr

08013940 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8013940:	b480      	push	{r7}
 8013942:	b085      	sub	sp, #20
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	695b      	ldr	r3, [r3, #20]
 801394c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	699b      	ldr	r3, [r3, #24]
 8013952:	68fa      	ldr	r2, [r7, #12]
 8013954:	4013      	ands	r3, r2
 8013956:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013958:	68fb      	ldr	r3, [r7, #12]
}
 801395a:	4618      	mov	r0, r3
 801395c:	3714      	adds	r7, #20
 801395e:	46bd      	mov	sp, r7
 8013960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013964:	4770      	bx	lr

08013966 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8013966:	b480      	push	{r7}
 8013968:	b085      	sub	sp, #20
 801396a:	af00      	add	r7, sp, #0
 801396c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013978:	699b      	ldr	r3, [r3, #24]
 801397a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013982:	69db      	ldr	r3, [r3, #28]
 8013984:	68ba      	ldr	r2, [r7, #8]
 8013986:	4013      	ands	r3, r2
 8013988:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	0c1b      	lsrs	r3, r3, #16
}
 801398e:	4618      	mov	r0, r3
 8013990:	3714      	adds	r7, #20
 8013992:	46bd      	mov	sp, r7
 8013994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013998:	4770      	bx	lr

0801399a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801399a:	b480      	push	{r7}
 801399c:	b085      	sub	sp, #20
 801399e:	af00      	add	r7, sp, #0
 80139a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80139ac:	699b      	ldr	r3, [r3, #24]
 80139ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80139b6:	69db      	ldr	r3, [r3, #28]
 80139b8:	68ba      	ldr	r2, [r7, #8]
 80139ba:	4013      	ands	r3, r2
 80139bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80139be:	68bb      	ldr	r3, [r7, #8]
 80139c0:	b29b      	uxth	r3, r3
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	3714      	adds	r7, #20
 80139c6:	46bd      	mov	sp, r7
 80139c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139cc:	4770      	bx	lr

080139ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80139ce:	b480      	push	{r7}
 80139d0:	b085      	sub	sp, #20
 80139d2:	af00      	add	r7, sp, #0
 80139d4:	6078      	str	r0, [r7, #4]
 80139d6:	460b      	mov	r3, r1
 80139d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80139de:	78fb      	ldrb	r3, [r7, #3]
 80139e0:	015a      	lsls	r2, r3, #5
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	4413      	add	r3, r2
 80139e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80139ea:	689b      	ldr	r3, [r3, #8]
 80139ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80139f4:	695b      	ldr	r3, [r3, #20]
 80139f6:	68ba      	ldr	r2, [r7, #8]
 80139f8:	4013      	ands	r3, r2
 80139fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80139fc:	68bb      	ldr	r3, [r7, #8]
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3714      	adds	r7, #20
 8013a02:	46bd      	mov	sp, r7
 8013a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a08:	4770      	bx	lr

08013a0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013a0a:	b480      	push	{r7}
 8013a0c:	b087      	sub	sp, #28
 8013a0e:	af00      	add	r7, sp, #0
 8013a10:	6078      	str	r0, [r7, #4]
 8013a12:	460b      	mov	r3, r1
 8013a14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013a1a:	697b      	ldr	r3, [r7, #20]
 8013a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013a20:	691b      	ldr	r3, [r3, #16]
 8013a22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013a2e:	78fb      	ldrb	r3, [r7, #3]
 8013a30:	f003 030f 	and.w	r3, r3, #15
 8013a34:	68fa      	ldr	r2, [r7, #12]
 8013a36:	fa22 f303 	lsr.w	r3, r2, r3
 8013a3a:	01db      	lsls	r3, r3, #7
 8013a3c:	b2db      	uxtb	r3, r3
 8013a3e:	693a      	ldr	r2, [r7, #16]
 8013a40:	4313      	orrs	r3, r2
 8013a42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013a44:	78fb      	ldrb	r3, [r7, #3]
 8013a46:	015a      	lsls	r2, r3, #5
 8013a48:	697b      	ldr	r3, [r7, #20]
 8013a4a:	4413      	add	r3, r2
 8013a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a50:	689b      	ldr	r3, [r3, #8]
 8013a52:	693a      	ldr	r2, [r7, #16]
 8013a54:	4013      	ands	r3, r2
 8013a56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013a58:	68bb      	ldr	r3, [r7, #8]
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	371c      	adds	r7, #28
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a64:	4770      	bx	lr

08013a66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8013a66:	b480      	push	{r7}
 8013a68:	b083      	sub	sp, #12
 8013a6a:	af00      	add	r7, sp, #0
 8013a6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	695b      	ldr	r3, [r3, #20]
 8013a72:	f003 0301 	and.w	r3, r3, #1
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	370c      	adds	r7, #12
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr
	...

08013a84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8013a84:	b480      	push	{r7}
 8013a86:	b085      	sub	sp, #20
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a96:	681a      	ldr	r2, [r3, #0]
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013a9e:	4619      	mov	r1, r3
 8013aa0:	4b09      	ldr	r3, [pc, #36]	@ (8013ac8 <USB_ActivateSetup+0x44>)
 8013aa2:	4013      	ands	r3, r2
 8013aa4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013aac:	685b      	ldr	r3, [r3, #4]
 8013aae:	68fa      	ldr	r2, [r7, #12]
 8013ab0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013ab8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013aba:	2300      	movs	r3, #0
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	3714      	adds	r7, #20
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac6:	4770      	bx	lr
 8013ac8:	fffff800 	.word	0xfffff800

08013acc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8013acc:	b480      	push	{r7}
 8013ace:	b087      	sub	sp, #28
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	60f8      	str	r0, [r7, #12]
 8013ad4:	460b      	mov	r3, r1
 8013ad6:	607a      	str	r2, [r7, #4]
 8013ad8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	333c      	adds	r3, #60	@ 0x3c
 8013ae2:	3304      	adds	r3, #4
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013ae8:	693b      	ldr	r3, [r7, #16]
 8013aea:	4a26      	ldr	r2, [pc, #152]	@ (8013b84 <USB_EP0_OutStart+0xb8>)
 8013aec:	4293      	cmp	r3, r2
 8013aee:	d90a      	bls.n	8013b06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013af0:	697b      	ldr	r3, [r7, #20]
 8013af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013afc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013b00:	d101      	bne.n	8013b06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013b02:	2300      	movs	r3, #0
 8013b04:	e037      	b.n	8013b76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	2300      	movs	r3, #0
 8013b10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b18:	691b      	ldr	r3, [r3, #16]
 8013b1a:	697a      	ldr	r2, [r7, #20]
 8013b1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013b24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b2c:	691b      	ldr	r3, [r3, #16]
 8013b2e:	697a      	ldr	r2, [r7, #20]
 8013b30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b34:	f043 0318 	orr.w	r3, r3, #24
 8013b38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b40:	691b      	ldr	r3, [r3, #16]
 8013b42:	697a      	ldr	r2, [r7, #20]
 8013b44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b48:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8013b4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013b4e:	7afb      	ldrb	r3, [r7, #11]
 8013b50:	2b01      	cmp	r3, #1
 8013b52:	d10f      	bne.n	8013b74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b5a:	461a      	mov	r2, r3
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	697a      	ldr	r2, [r7, #20]
 8013b6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013b6e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8013b72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013b74:	2300      	movs	r3, #0
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	371c      	adds	r7, #28
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b80:	4770      	bx	lr
 8013b82:	bf00      	nop
 8013b84:	4f54300a 	.word	0x4f54300a

08013b88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013b88:	b480      	push	{r7}
 8013b8a:	b085      	sub	sp, #20
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013b90:	2300      	movs	r3, #0
 8013b92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	3301      	adds	r3, #1
 8013b98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013ba0:	d901      	bls.n	8013ba6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013ba2:	2303      	movs	r3, #3
 8013ba4:	e01b      	b.n	8013bde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	691b      	ldr	r3, [r3, #16]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	daf2      	bge.n	8013b94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	691b      	ldr	r3, [r3, #16]
 8013bb6:	f043 0201 	orr.w	r2, r3, #1
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	3301      	adds	r3, #1
 8013bc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013bca:	d901      	bls.n	8013bd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013bcc:	2303      	movs	r3, #3
 8013bce:	e006      	b.n	8013bde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	691b      	ldr	r3, [r3, #16]
 8013bd4:	f003 0301 	and.w	r3, r3, #1
 8013bd8:	2b01      	cmp	r3, #1
 8013bda:	d0f0      	beq.n	8013bbe <USB_CoreReset+0x36>

  return HAL_OK;
 8013bdc:	2300      	movs	r3, #0
}
 8013bde:	4618      	mov	r0, r3
 8013be0:	3714      	adds	r7, #20
 8013be2:	46bd      	mov	sp, r7
 8013be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be8:	4770      	bx	lr

08013bea <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013bea:	b480      	push	{r7}
 8013bec:	b083      	sub	sp, #12
 8013bee:	af00      	add	r7, sp, #0
 8013bf0:	6078      	str	r0, [r7, #4]
 8013bf2:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d101      	bne.n	8013bfe <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013bfa:	2303      	movs	r3, #3
 8013bfc:	e009      	b.n	8013c12 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013c04:	687a      	ldr	r2, [r7, #4]
 8013c06:	33b0      	adds	r3, #176	@ 0xb0
 8013c08:	009b      	lsls	r3, r3, #2
 8013c0a:	4413      	add	r3, r2
 8013c0c:	683a      	ldr	r2, [r7, #0]
 8013c0e:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013c10:	2300      	movs	r3, #0
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	370c      	adds	r7, #12
 8013c16:	46bd      	mov	sp, r7
 8013c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1c:	4770      	bx	lr

08013c1e <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013c1e:	b480      	push	{r7}
 8013c20:	b087      	sub	sp, #28
 8013c22:	af00      	add	r7, sp, #0
 8013c24:	60f8      	str	r0, [r7, #12]
 8013c26:	60b9      	str	r1, [r7, #8]
 8013c28:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	32b0      	adds	r2, #176	@ 0xb0
 8013c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c38:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d101      	bne.n	8013c44 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013c40:	2303      	movs	r3, #3
 8013c42:	e008      	b.n	8013c56 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	68ba      	ldr	r2, [r7, #8]
 8013c48:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8013c4c:	697b      	ldr	r3, [r7, #20]
 8013c4e:	687a      	ldr	r2, [r7, #4]
 8013c50:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013c54:	2300      	movs	r3, #0
}
 8013c56:	4618      	mov	r0, r3
 8013c58:	371c      	adds	r7, #28
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr

08013c62 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013c62:	b480      	push	{r7}
 8013c64:	b085      	sub	sp, #20
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	6078      	str	r0, [r7, #4]
 8013c6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	32b0      	adds	r2, #176	@ 0xb0
 8013c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d101      	bne.n	8013c86 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013c82:	2303      	movs	r3, #3
 8013c84:	e004      	b.n	8013c90 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	683a      	ldr	r2, [r7, #0]
 8013c8a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8013c8e:	2300      	movs	r3, #0
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	3714      	adds	r7, #20
 8013c94:	46bd      	mov	sp, r7
 8013c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9a:	4770      	bx	lr

08013c9c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b084      	sub	sp, #16
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	32b0      	adds	r2, #176	@ 0xb0
 8013cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cb2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d101      	bne.n	8013cc2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013cbe:	2303      	movs	r3, #3
 8013cc0:	e025      	b.n	8013d0e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d11f      	bne.n	8013d0c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	2201      	movs	r2, #1
 8013cd0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013cd4:	4b10      	ldr	r3, [pc, #64]	@ (8013d18 <USBD_CDC_TransmitPacket+0x7c>)
 8013cd6:	781b      	ldrb	r3, [r3, #0]
 8013cd8:	f003 020f 	and.w	r2, r3, #15
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	4613      	mov	r3, r2
 8013ce6:	009b      	lsls	r3, r3, #2
 8013ce8:	4413      	add	r3, r2
 8013cea:	009b      	lsls	r3, r3, #2
 8013cec:	4403      	add	r3, r0
 8013cee:	3318      	adds	r3, #24
 8013cf0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013cf2:	4b09      	ldr	r3, [pc, #36]	@ (8013d18 <USBD_CDC_TransmitPacket+0x7c>)
 8013cf4:	7819      	ldrb	r1, [r3, #0]
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f007 f81e 	bl	801ad44 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d0e:	4618      	mov	r0, r3
 8013d10:	3710      	adds	r7, #16
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd80      	pop	{r7, pc}
 8013d16:	bf00      	nop
 8013d18:	24000039 	.word	0x24000039

08013d1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b084      	sub	sp, #16
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	32b0      	adds	r2, #176	@ 0xb0
 8013d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d32:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	32b0      	adds	r2, #176	@ 0xb0
 8013d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d101      	bne.n	8013d4a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013d46:	2303      	movs	r3, #3
 8013d48:	e018      	b.n	8013d7c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	7c1b      	ldrb	r3, [r3, #16]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d10a      	bne.n	8013d68 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013d52:	4b0c      	ldr	r3, [pc, #48]	@ (8013d84 <USBD_CDC_ReceivePacket+0x68>)
 8013d54:	7819      	ldrb	r1, [r3, #0]
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013d5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f007 f810 	bl	801ad86 <USBD_LL_PrepareReceive>
 8013d66:	e008      	b.n	8013d7a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013d68:	4b06      	ldr	r3, [pc, #24]	@ (8013d84 <USBD_CDC_ReceivePacket+0x68>)
 8013d6a:	7819      	ldrb	r1, [r3, #0]
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013d72:	2340      	movs	r3, #64	@ 0x40
 8013d74:	6878      	ldr	r0, [r7, #4]
 8013d76:	f007 f806 	bl	801ad86 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013d7a:	2300      	movs	r3, #0
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3710      	adds	r7, #16
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	2400003a 	.word	0x2400003a

08013d88 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b086      	sub	sp, #24
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	60f8      	str	r0, [r7, #12]
 8013d90:	60b9      	str	r1, [r7, #8]
 8013d92:	4613      	mov	r3, r2
 8013d94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d101      	bne.n	8013da0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013d9c:	2303      	movs	r3, #3
 8013d9e:	e01f      	b.n	8013de0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	2200      	movs	r2, #0
 8013da4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	2200      	movs	r2, #0
 8013dac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	2200      	movs	r2, #0
 8013db4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d003      	beq.n	8013dc6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	68ba      	ldr	r2, [r7, #8]
 8013dc2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2201      	movs	r2, #1
 8013dca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	79fa      	ldrb	r2, [r7, #7]
 8013dd2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013dd4:	68f8      	ldr	r0, [r7, #12]
 8013dd6:	f006 fe49 	bl	801aa6c <USBD_LL_Init>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	3718      	adds	r7, #24
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}

08013de8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b084      	sub	sp, #16
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013df2:	2300      	movs	r3, #0
 8013df4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d101      	bne.n	8013e00 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013dfc:	2303      	movs	r3, #3
 8013dfe:	e025      	b.n	8013e4c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	683a      	ldr	r2, [r7, #0]
 8013e04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	32ae      	adds	r2, #174	@ 0xae
 8013e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d00f      	beq.n	8013e3c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	32ae      	adds	r2, #174	@ 0xae
 8013e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e2c:	f107 020e 	add.w	r2, r7, #14
 8013e30:	4610      	mov	r0, r2
 8013e32:	4798      	blx	r3
 8013e34:	4602      	mov	r2, r0
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013e42:	1c5a      	adds	r2, r3, #1
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8013e4a:	2300      	movs	r3, #0
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3710      	adds	r7, #16
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}

08013e54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b082      	sub	sp, #8
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f006 fe69 	bl	801ab34 <USBD_LL_Start>
 8013e62:	4603      	mov	r3, r0
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	3708      	adds	r7, #8
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}

08013e6c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013e6c:	b480      	push	{r7}
 8013e6e:	b083      	sub	sp, #12
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013e74:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	370c      	adds	r7, #12
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e80:	4770      	bx	lr

08013e82 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013e82:	b580      	push	{r7, lr}
 8013e84:	b084      	sub	sp, #16
 8013e86:	af00      	add	r7, sp, #0
 8013e88:	6078      	str	r0, [r7, #4]
 8013e8a:	460b      	mov	r3, r1
 8013e8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d009      	beq.n	8013eb0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	78fa      	ldrb	r2, [r7, #3]
 8013ea6:	4611      	mov	r1, r2
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	4798      	blx	r3
 8013eac:	4603      	mov	r3, r0
 8013eae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3710      	adds	r7, #16
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}

08013eba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013eba:	b580      	push	{r7, lr}
 8013ebc:	b084      	sub	sp, #16
 8013ebe:	af00      	add	r7, sp, #0
 8013ec0:	6078      	str	r0, [r7, #4]
 8013ec2:	460b      	mov	r3, r1
 8013ec4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013ed0:	685b      	ldr	r3, [r3, #4]
 8013ed2:	78fa      	ldrb	r2, [r7, #3]
 8013ed4:	4611      	mov	r1, r2
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	4798      	blx	r3
 8013eda:	4603      	mov	r3, r0
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d001      	beq.n	8013ee4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013ee0:	2303      	movs	r3, #3
 8013ee2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	3710      	adds	r7, #16
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}

08013eee <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013eee:	b580      	push	{r7, lr}
 8013ef0:	b084      	sub	sp, #16
 8013ef2:	af00      	add	r7, sp, #0
 8013ef4:	6078      	str	r0, [r7, #4]
 8013ef6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013efe:	6839      	ldr	r1, [r7, #0]
 8013f00:	4618      	mov	r0, r3
 8013f02:	f001 f8e2 	bl	80150ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2201      	movs	r2, #1
 8013f0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013f14:	461a      	mov	r2, r3
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013f22:	f003 031f 	and.w	r3, r3, #31
 8013f26:	2b02      	cmp	r3, #2
 8013f28:	d01a      	beq.n	8013f60 <USBD_LL_SetupStage+0x72>
 8013f2a:	2b02      	cmp	r3, #2
 8013f2c:	d822      	bhi.n	8013f74 <USBD_LL_SetupStage+0x86>
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d002      	beq.n	8013f38 <USBD_LL_SetupStage+0x4a>
 8013f32:	2b01      	cmp	r3, #1
 8013f34:	d00a      	beq.n	8013f4c <USBD_LL_SetupStage+0x5e>
 8013f36:	e01d      	b.n	8013f74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013f3e:	4619      	mov	r1, r3
 8013f40:	6878      	ldr	r0, [r7, #4]
 8013f42:	f000 fb0f 	bl	8014564 <USBD_StdDevReq>
 8013f46:	4603      	mov	r3, r0
 8013f48:	73fb      	strb	r3, [r7, #15]
      break;
 8013f4a:	e020      	b.n	8013f8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013f52:	4619      	mov	r1, r3
 8013f54:	6878      	ldr	r0, [r7, #4]
 8013f56:	f000 fb77 	bl	8014648 <USBD_StdItfReq>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8013f5e:	e016      	b.n	8013f8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013f66:	4619      	mov	r1, r3
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f000 fbd9 	bl	8014720 <USBD_StdEPReq>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	73fb      	strb	r3, [r7, #15]
      break;
 8013f72:	e00c      	b.n	8013f8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013f7a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013f7e:	b2db      	uxtb	r3, r3
 8013f80:	4619      	mov	r1, r3
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	f006 fe55 	bl	801ac32 <USBD_LL_StallEP>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8013f8c:	bf00      	nop
  }

  return ret;
 8013f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f90:	4618      	mov	r0, r3
 8013f92:	3710      	adds	r7, #16
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}

08013f98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b086      	sub	sp, #24
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	60f8      	str	r0, [r7, #12]
 8013fa0:	460b      	mov	r3, r1
 8013fa2:	607a      	str	r2, [r7, #4]
 8013fa4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013faa:	7afb      	ldrb	r3, [r7, #11]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d16e      	bne.n	801408e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013fb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013fbe:	2b03      	cmp	r3, #3
 8013fc0:	f040 8098 	bne.w	80140f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	689a      	ldr	r2, [r3, #8]
 8013fc8:	693b      	ldr	r3, [r7, #16]
 8013fca:	68db      	ldr	r3, [r3, #12]
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d913      	bls.n	8013ff8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	689a      	ldr	r2, [r3, #8]
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	68db      	ldr	r3, [r3, #12]
 8013fd8:	1ad2      	subs	r2, r2, r3
 8013fda:	693b      	ldr	r3, [r7, #16]
 8013fdc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	68da      	ldr	r2, [r3, #12]
 8013fe2:	693b      	ldr	r3, [r7, #16]
 8013fe4:	689b      	ldr	r3, [r3, #8]
 8013fe6:	4293      	cmp	r3, r2
 8013fe8:	bf28      	it	cs
 8013fea:	4613      	movcs	r3, r2
 8013fec:	461a      	mov	r2, r3
 8013fee:	6879      	ldr	r1, [r7, #4]
 8013ff0:	68f8      	ldr	r0, [r7, #12]
 8013ff2:	f001 f96a 	bl	80152ca <USBD_CtlContinueRx>
 8013ff6:	e07d      	b.n	80140f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013ffe:	f003 031f 	and.w	r3, r3, #31
 8014002:	2b02      	cmp	r3, #2
 8014004:	d014      	beq.n	8014030 <USBD_LL_DataOutStage+0x98>
 8014006:	2b02      	cmp	r3, #2
 8014008:	d81d      	bhi.n	8014046 <USBD_LL_DataOutStage+0xae>
 801400a:	2b00      	cmp	r3, #0
 801400c:	d002      	beq.n	8014014 <USBD_LL_DataOutStage+0x7c>
 801400e:	2b01      	cmp	r3, #1
 8014010:	d003      	beq.n	801401a <USBD_LL_DataOutStage+0x82>
 8014012:	e018      	b.n	8014046 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014014:	2300      	movs	r3, #0
 8014016:	75bb      	strb	r3, [r7, #22]
            break;
 8014018:	e018      	b.n	801404c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014020:	b2db      	uxtb	r3, r3
 8014022:	4619      	mov	r1, r3
 8014024:	68f8      	ldr	r0, [r7, #12]
 8014026:	f000 fa64 	bl	80144f2 <USBD_CoreFindIF>
 801402a:	4603      	mov	r3, r0
 801402c:	75bb      	strb	r3, [r7, #22]
            break;
 801402e:	e00d      	b.n	801404c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014036:	b2db      	uxtb	r3, r3
 8014038:	4619      	mov	r1, r3
 801403a:	68f8      	ldr	r0, [r7, #12]
 801403c:	f000 fa66 	bl	801450c <USBD_CoreFindEP>
 8014040:	4603      	mov	r3, r0
 8014042:	75bb      	strb	r3, [r7, #22]
            break;
 8014044:	e002      	b.n	801404c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014046:	2300      	movs	r3, #0
 8014048:	75bb      	strb	r3, [r7, #22]
            break;
 801404a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801404c:	7dbb      	ldrb	r3, [r7, #22]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d119      	bne.n	8014086 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014058:	b2db      	uxtb	r3, r3
 801405a:	2b03      	cmp	r3, #3
 801405c:	d113      	bne.n	8014086 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801405e:	7dba      	ldrb	r2, [r7, #22]
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	32ae      	adds	r2, #174	@ 0xae
 8014064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014068:	691b      	ldr	r3, [r3, #16]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d00b      	beq.n	8014086 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801406e:	7dba      	ldrb	r2, [r7, #22]
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014076:	7dba      	ldrb	r2, [r7, #22]
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	32ae      	adds	r2, #174	@ 0xae
 801407c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014080:	691b      	ldr	r3, [r3, #16]
 8014082:	68f8      	ldr	r0, [r7, #12]
 8014084:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014086:	68f8      	ldr	r0, [r7, #12]
 8014088:	f001 f930 	bl	80152ec <USBD_CtlSendStatus>
 801408c:	e032      	b.n	80140f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801408e:	7afb      	ldrb	r3, [r7, #11]
 8014090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014094:	b2db      	uxtb	r3, r3
 8014096:	4619      	mov	r1, r3
 8014098:	68f8      	ldr	r0, [r7, #12]
 801409a:	f000 fa37 	bl	801450c <USBD_CoreFindEP>
 801409e:	4603      	mov	r3, r0
 80140a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80140a2:	7dbb      	ldrb	r3, [r7, #22]
 80140a4:	2bff      	cmp	r3, #255	@ 0xff
 80140a6:	d025      	beq.n	80140f4 <USBD_LL_DataOutStage+0x15c>
 80140a8:	7dbb      	ldrb	r3, [r7, #22]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d122      	bne.n	80140f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80140b4:	b2db      	uxtb	r3, r3
 80140b6:	2b03      	cmp	r3, #3
 80140b8:	d117      	bne.n	80140ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80140ba:	7dba      	ldrb	r2, [r7, #22]
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	32ae      	adds	r2, #174	@ 0xae
 80140c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140c4:	699b      	ldr	r3, [r3, #24]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d00f      	beq.n	80140ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80140ca:	7dba      	ldrb	r2, [r7, #22]
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80140d2:	7dba      	ldrb	r2, [r7, #22]
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	32ae      	adds	r2, #174	@ 0xae
 80140d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140dc:	699b      	ldr	r3, [r3, #24]
 80140de:	7afa      	ldrb	r2, [r7, #11]
 80140e0:	4611      	mov	r1, r2
 80140e2:	68f8      	ldr	r0, [r7, #12]
 80140e4:	4798      	blx	r3
 80140e6:	4603      	mov	r3, r0
 80140e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80140ea:	7dfb      	ldrb	r3, [r7, #23]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d001      	beq.n	80140f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80140f0:	7dfb      	ldrb	r3, [r7, #23]
 80140f2:	e000      	b.n	80140f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80140f4:	2300      	movs	r3, #0
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3718      	adds	r7, #24
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}

080140fe <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80140fe:	b580      	push	{r7, lr}
 8014100:	b086      	sub	sp, #24
 8014102:	af00      	add	r7, sp, #0
 8014104:	60f8      	str	r0, [r7, #12]
 8014106:	460b      	mov	r3, r1
 8014108:	607a      	str	r2, [r7, #4]
 801410a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801410c:	7afb      	ldrb	r3, [r7, #11]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d16f      	bne.n	80141f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	3314      	adds	r3, #20
 8014116:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801411e:	2b02      	cmp	r3, #2
 8014120:	d15a      	bne.n	80141d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	689a      	ldr	r2, [r3, #8]
 8014126:	693b      	ldr	r3, [r7, #16]
 8014128:	68db      	ldr	r3, [r3, #12]
 801412a:	429a      	cmp	r2, r3
 801412c:	d914      	bls.n	8014158 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801412e:	693b      	ldr	r3, [r7, #16]
 8014130:	689a      	ldr	r2, [r3, #8]
 8014132:	693b      	ldr	r3, [r7, #16]
 8014134:	68db      	ldr	r3, [r3, #12]
 8014136:	1ad2      	subs	r2, r2, r3
 8014138:	693b      	ldr	r3, [r7, #16]
 801413a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801413c:	693b      	ldr	r3, [r7, #16]
 801413e:	689b      	ldr	r3, [r3, #8]
 8014140:	461a      	mov	r2, r3
 8014142:	6879      	ldr	r1, [r7, #4]
 8014144:	68f8      	ldr	r0, [r7, #12]
 8014146:	f001 f892 	bl	801526e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801414a:	2300      	movs	r3, #0
 801414c:	2200      	movs	r2, #0
 801414e:	2100      	movs	r1, #0
 8014150:	68f8      	ldr	r0, [r7, #12]
 8014152:	f006 fe18 	bl	801ad86 <USBD_LL_PrepareReceive>
 8014156:	e03f      	b.n	80141d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014158:	693b      	ldr	r3, [r7, #16]
 801415a:	68da      	ldr	r2, [r3, #12]
 801415c:	693b      	ldr	r3, [r7, #16]
 801415e:	689b      	ldr	r3, [r3, #8]
 8014160:	429a      	cmp	r2, r3
 8014162:	d11c      	bne.n	801419e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014164:	693b      	ldr	r3, [r7, #16]
 8014166:	685a      	ldr	r2, [r3, #4]
 8014168:	693b      	ldr	r3, [r7, #16]
 801416a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801416c:	429a      	cmp	r2, r3
 801416e:	d316      	bcc.n	801419e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	685a      	ldr	r2, [r3, #4]
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801417a:	429a      	cmp	r2, r3
 801417c:	d20f      	bcs.n	801419e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801417e:	2200      	movs	r2, #0
 8014180:	2100      	movs	r1, #0
 8014182:	68f8      	ldr	r0, [r7, #12]
 8014184:	f001 f873 	bl	801526e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	2200      	movs	r2, #0
 801418c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014190:	2300      	movs	r3, #0
 8014192:	2200      	movs	r2, #0
 8014194:	2100      	movs	r1, #0
 8014196:	68f8      	ldr	r0, [r7, #12]
 8014198:	f006 fdf5 	bl	801ad86 <USBD_LL_PrepareReceive>
 801419c:	e01c      	b.n	80141d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80141a4:	b2db      	uxtb	r3, r3
 80141a6:	2b03      	cmp	r3, #3
 80141a8:	d10f      	bne.n	80141ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80141b0:	68db      	ldr	r3, [r3, #12]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d009      	beq.n	80141ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2200      	movs	r2, #0
 80141ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80141c4:	68db      	ldr	r3, [r3, #12]
 80141c6:	68f8      	ldr	r0, [r7, #12]
 80141c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80141ca:	2180      	movs	r1, #128	@ 0x80
 80141cc:	68f8      	ldr	r0, [r7, #12]
 80141ce:	f006 fd30 	bl	801ac32 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80141d2:	68f8      	ldr	r0, [r7, #12]
 80141d4:	f001 f89d 	bl	8015312 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d03a      	beq.n	8014258 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80141e2:	68f8      	ldr	r0, [r7, #12]
 80141e4:	f7ff fe42 	bl	8013e6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	2200      	movs	r2, #0
 80141ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80141f0:	e032      	b.n	8014258 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80141f2:	7afb      	ldrb	r3, [r7, #11]
 80141f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80141f8:	b2db      	uxtb	r3, r3
 80141fa:	4619      	mov	r1, r3
 80141fc:	68f8      	ldr	r0, [r7, #12]
 80141fe:	f000 f985 	bl	801450c <USBD_CoreFindEP>
 8014202:	4603      	mov	r3, r0
 8014204:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014206:	7dfb      	ldrb	r3, [r7, #23]
 8014208:	2bff      	cmp	r3, #255	@ 0xff
 801420a:	d025      	beq.n	8014258 <USBD_LL_DataInStage+0x15a>
 801420c:	7dfb      	ldrb	r3, [r7, #23]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d122      	bne.n	8014258 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014218:	b2db      	uxtb	r3, r3
 801421a:	2b03      	cmp	r3, #3
 801421c:	d11c      	bne.n	8014258 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801421e:	7dfa      	ldrb	r2, [r7, #23]
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	32ae      	adds	r2, #174	@ 0xae
 8014224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014228:	695b      	ldr	r3, [r3, #20]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d014      	beq.n	8014258 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801422e:	7dfa      	ldrb	r2, [r7, #23]
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014236:	7dfa      	ldrb	r2, [r7, #23]
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	32ae      	adds	r2, #174	@ 0xae
 801423c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014240:	695b      	ldr	r3, [r3, #20]
 8014242:	7afa      	ldrb	r2, [r7, #11]
 8014244:	4611      	mov	r1, r2
 8014246:	68f8      	ldr	r0, [r7, #12]
 8014248:	4798      	blx	r3
 801424a:	4603      	mov	r3, r0
 801424c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801424e:	7dbb      	ldrb	r3, [r7, #22]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d001      	beq.n	8014258 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014254:	7dbb      	ldrb	r3, [r7, #22]
 8014256:	e000      	b.n	801425a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014258:	2300      	movs	r3, #0
}
 801425a:	4618      	mov	r0, r3
 801425c:	3718      	adds	r7, #24
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}

08014262 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014262:	b580      	push	{r7, lr}
 8014264:	b084      	sub	sp, #16
 8014266:	af00      	add	r7, sp, #0
 8014268:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801426a:	2300      	movs	r3, #0
 801426c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2201      	movs	r2, #1
 8014272:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2200      	movs	r2, #0
 801427a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	2200      	movs	r2, #0
 8014282:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2200      	movs	r2, #0
 8014288:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2200      	movs	r2, #0
 8014290:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801429a:	2b00      	cmp	r3, #0
 801429c:	d014      	beq.n	80142c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80142a4:	685b      	ldr	r3, [r3, #4]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d00e      	beq.n	80142c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80142b0:	685b      	ldr	r3, [r3, #4]
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	6852      	ldr	r2, [r2, #4]
 80142b6:	b2d2      	uxtb	r2, r2
 80142b8:	4611      	mov	r1, r2
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	4798      	blx	r3
 80142be:	4603      	mov	r3, r0
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d001      	beq.n	80142c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80142c4:	2303      	movs	r3, #3
 80142c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80142c8:	2340      	movs	r3, #64	@ 0x40
 80142ca:	2200      	movs	r2, #0
 80142cc:	2100      	movs	r1, #0
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f006 fc4b 	bl	801ab6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2201      	movs	r2, #1
 80142d8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	2240      	movs	r2, #64	@ 0x40
 80142e0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80142e4:	2340      	movs	r3, #64	@ 0x40
 80142e6:	2200      	movs	r2, #0
 80142e8:	2180      	movs	r1, #128	@ 0x80
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	f006 fc3d 	bl	801ab6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2201      	movs	r2, #1
 80142f4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2240      	movs	r2, #64	@ 0x40
 80142fa:	621a      	str	r2, [r3, #32]

  return ret;
 80142fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3710      	adds	r7, #16
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}

08014306 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014306:	b480      	push	{r7}
 8014308:	b083      	sub	sp, #12
 801430a:	af00      	add	r7, sp, #0
 801430c:	6078      	str	r0, [r7, #4]
 801430e:	460b      	mov	r3, r1
 8014310:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	78fa      	ldrb	r2, [r7, #3]
 8014316:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014318:	2300      	movs	r3, #0
}
 801431a:	4618      	mov	r0, r3
 801431c:	370c      	adds	r7, #12
 801431e:	46bd      	mov	sp, r7
 8014320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014324:	4770      	bx	lr

08014326 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014326:	b480      	push	{r7}
 8014328:	b083      	sub	sp, #12
 801432a:	af00      	add	r7, sp, #0
 801432c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014334:	b2db      	uxtb	r3, r3
 8014336:	2b04      	cmp	r3, #4
 8014338:	d006      	beq.n	8014348 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014340:	b2da      	uxtb	r2, r3
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2204      	movs	r2, #4
 801434c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8014350:	2300      	movs	r3, #0
}
 8014352:	4618      	mov	r0, r3
 8014354:	370c      	adds	r7, #12
 8014356:	46bd      	mov	sp, r7
 8014358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435c:	4770      	bx	lr

0801435e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801435e:	b480      	push	{r7}
 8014360:	b083      	sub	sp, #12
 8014362:	af00      	add	r7, sp, #0
 8014364:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801436c:	b2db      	uxtb	r3, r3
 801436e:	2b04      	cmp	r3, #4
 8014370:	d106      	bne.n	8014380 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8014378:	b2da      	uxtb	r2, r3
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8014380:	2300      	movs	r3, #0
}
 8014382:	4618      	mov	r0, r3
 8014384:	370c      	adds	r7, #12
 8014386:	46bd      	mov	sp, r7
 8014388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438c:	4770      	bx	lr

0801438e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801438e:	b580      	push	{r7, lr}
 8014390:	b082      	sub	sp, #8
 8014392:	af00      	add	r7, sp, #0
 8014394:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801439c:	b2db      	uxtb	r3, r3
 801439e:	2b03      	cmp	r3, #3
 80143a0:	d110      	bne.n	80143c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d00b      	beq.n	80143c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80143b2:	69db      	ldr	r3, [r3, #28]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d005      	beq.n	80143c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80143be:	69db      	ldr	r3, [r3, #28]
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80143c4:	2300      	movs	r3, #0
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3708      	adds	r7, #8
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}

080143ce <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80143ce:	b580      	push	{r7, lr}
 80143d0:	b082      	sub	sp, #8
 80143d2:	af00      	add	r7, sp, #0
 80143d4:	6078      	str	r0, [r7, #4]
 80143d6:	460b      	mov	r3, r1
 80143d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	32ae      	adds	r2, #174	@ 0xae
 80143e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d101      	bne.n	80143f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80143ec:	2303      	movs	r3, #3
 80143ee:	e01c      	b.n	801442a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80143f6:	b2db      	uxtb	r3, r3
 80143f8:	2b03      	cmp	r3, #3
 80143fa:	d115      	bne.n	8014428 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	32ae      	adds	r2, #174	@ 0xae
 8014406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801440a:	6a1b      	ldr	r3, [r3, #32]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d00b      	beq.n	8014428 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	32ae      	adds	r2, #174	@ 0xae
 801441a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801441e:	6a1b      	ldr	r3, [r3, #32]
 8014420:	78fa      	ldrb	r2, [r7, #3]
 8014422:	4611      	mov	r1, r2
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014428:	2300      	movs	r3, #0
}
 801442a:	4618      	mov	r0, r3
 801442c:	3708      	adds	r7, #8
 801442e:	46bd      	mov	sp, r7
 8014430:	bd80      	pop	{r7, pc}

08014432 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014432:	b580      	push	{r7, lr}
 8014434:	b082      	sub	sp, #8
 8014436:	af00      	add	r7, sp, #0
 8014438:	6078      	str	r0, [r7, #4]
 801443a:	460b      	mov	r3, r1
 801443c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	32ae      	adds	r2, #174	@ 0xae
 8014448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d101      	bne.n	8014454 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8014450:	2303      	movs	r3, #3
 8014452:	e01c      	b.n	801448e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801445a:	b2db      	uxtb	r3, r3
 801445c:	2b03      	cmp	r3, #3
 801445e:	d115      	bne.n	801448c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	32ae      	adds	r2, #174	@ 0xae
 801446a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014470:	2b00      	cmp	r3, #0
 8014472:	d00b      	beq.n	801448c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	32ae      	adds	r2, #174	@ 0xae
 801447e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014484:	78fa      	ldrb	r2, [r7, #3]
 8014486:	4611      	mov	r1, r2
 8014488:	6878      	ldr	r0, [r7, #4]
 801448a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801448c:	2300      	movs	r3, #0
}
 801448e:	4618      	mov	r0, r3
 8014490:	3708      	adds	r7, #8
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}

08014496 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014496:	b480      	push	{r7}
 8014498:	b083      	sub	sp, #12
 801449a:	af00      	add	r7, sp, #0
 801449c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801449e:	2300      	movs	r3, #0
}
 80144a0:	4618      	mov	r0, r3
 80144a2:	370c      	adds	r7, #12
 80144a4:	46bd      	mov	sp, r7
 80144a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144aa:	4770      	bx	lr

080144ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b084      	sub	sp, #16
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80144b4:	2300      	movs	r3, #0
 80144b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2201      	movs	r2, #1
 80144bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d00e      	beq.n	80144e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	687a      	ldr	r2, [r7, #4]
 80144d4:	6852      	ldr	r2, [r2, #4]
 80144d6:	b2d2      	uxtb	r2, r2
 80144d8:	4611      	mov	r1, r2
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	4798      	blx	r3
 80144de:	4603      	mov	r3, r0
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d001      	beq.n	80144e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80144e4:	2303      	movs	r3, #3
 80144e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80144e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	3710      	adds	r7, #16
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}

080144f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80144f2:	b480      	push	{r7}
 80144f4:	b083      	sub	sp, #12
 80144f6:	af00      	add	r7, sp, #0
 80144f8:	6078      	str	r0, [r7, #4]
 80144fa:	460b      	mov	r3, r1
 80144fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80144fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014500:	4618      	mov	r0, r3
 8014502:	370c      	adds	r7, #12
 8014504:	46bd      	mov	sp, r7
 8014506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450a:	4770      	bx	lr

0801450c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801450c:	b480      	push	{r7}
 801450e:	b083      	sub	sp, #12
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
 8014514:	460b      	mov	r3, r1
 8014516:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014518:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801451a:	4618      	mov	r0, r3
 801451c:	370c      	adds	r7, #12
 801451e:	46bd      	mov	sp, r7
 8014520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014524:	4770      	bx	lr

08014526 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014526:	b480      	push	{r7}
 8014528:	b087      	sub	sp, #28
 801452a:	af00      	add	r7, sp, #0
 801452c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014538:	697b      	ldr	r3, [r7, #20]
 801453a:	3301      	adds	r3, #1
 801453c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801453e:	697b      	ldr	r3, [r7, #20]
 8014540:	781b      	ldrb	r3, [r3, #0]
 8014542:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014544:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8014548:	021b      	lsls	r3, r3, #8
 801454a:	b21a      	sxth	r2, r3
 801454c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014550:	4313      	orrs	r3, r2
 8014552:	b21b      	sxth	r3, r3
 8014554:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014556:	89fb      	ldrh	r3, [r7, #14]
}
 8014558:	4618      	mov	r0, r3
 801455a:	371c      	adds	r7, #28
 801455c:	46bd      	mov	sp, r7
 801455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014562:	4770      	bx	lr

08014564 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b084      	sub	sp, #16
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
 801456c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801456e:	2300      	movs	r3, #0
 8014570:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	781b      	ldrb	r3, [r3, #0]
 8014576:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801457a:	2b40      	cmp	r3, #64	@ 0x40
 801457c:	d005      	beq.n	801458a <USBD_StdDevReq+0x26>
 801457e:	2b40      	cmp	r3, #64	@ 0x40
 8014580:	d857      	bhi.n	8014632 <USBD_StdDevReq+0xce>
 8014582:	2b00      	cmp	r3, #0
 8014584:	d00f      	beq.n	80145a6 <USBD_StdDevReq+0x42>
 8014586:	2b20      	cmp	r3, #32
 8014588:	d153      	bne.n	8014632 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	32ae      	adds	r2, #174	@ 0xae
 8014594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014598:	689b      	ldr	r3, [r3, #8]
 801459a:	6839      	ldr	r1, [r7, #0]
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	4798      	blx	r3
 80145a0:	4603      	mov	r3, r0
 80145a2:	73fb      	strb	r3, [r7, #15]
      break;
 80145a4:	e04a      	b.n	801463c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80145a6:	683b      	ldr	r3, [r7, #0]
 80145a8:	785b      	ldrb	r3, [r3, #1]
 80145aa:	2b09      	cmp	r3, #9
 80145ac:	d83b      	bhi.n	8014626 <USBD_StdDevReq+0xc2>
 80145ae:	a201      	add	r2, pc, #4	@ (adr r2, 80145b4 <USBD_StdDevReq+0x50>)
 80145b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145b4:	08014609 	.word	0x08014609
 80145b8:	0801461d 	.word	0x0801461d
 80145bc:	08014627 	.word	0x08014627
 80145c0:	08014613 	.word	0x08014613
 80145c4:	08014627 	.word	0x08014627
 80145c8:	080145e7 	.word	0x080145e7
 80145cc:	080145dd 	.word	0x080145dd
 80145d0:	08014627 	.word	0x08014627
 80145d4:	080145ff 	.word	0x080145ff
 80145d8:	080145f1 	.word	0x080145f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80145dc:	6839      	ldr	r1, [r7, #0]
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f000 fa3c 	bl	8014a5c <USBD_GetDescriptor>
          break;
 80145e4:	e024      	b.n	8014630 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80145e6:	6839      	ldr	r1, [r7, #0]
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f000 fbcb 	bl	8014d84 <USBD_SetAddress>
          break;
 80145ee:	e01f      	b.n	8014630 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80145f0:	6839      	ldr	r1, [r7, #0]
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f000 fc0a 	bl	8014e0c <USBD_SetConfig>
 80145f8:	4603      	mov	r3, r0
 80145fa:	73fb      	strb	r3, [r7, #15]
          break;
 80145fc:	e018      	b.n	8014630 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80145fe:	6839      	ldr	r1, [r7, #0]
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f000 fcad 	bl	8014f60 <USBD_GetConfig>
          break;
 8014606:	e013      	b.n	8014630 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014608:	6839      	ldr	r1, [r7, #0]
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f000 fcde 	bl	8014fcc <USBD_GetStatus>
          break;
 8014610:	e00e      	b.n	8014630 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014612:	6839      	ldr	r1, [r7, #0]
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f000 fd0d 	bl	8015034 <USBD_SetFeature>
          break;
 801461a:	e009      	b.n	8014630 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801461c:	6839      	ldr	r1, [r7, #0]
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f000 fd31 	bl	8015086 <USBD_ClrFeature>
          break;
 8014624:	e004      	b.n	8014630 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014626:	6839      	ldr	r1, [r7, #0]
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f000 fd88 	bl	801513e <USBD_CtlError>
          break;
 801462e:	bf00      	nop
      }
      break;
 8014630:	e004      	b.n	801463c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014632:	6839      	ldr	r1, [r7, #0]
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f000 fd82 	bl	801513e <USBD_CtlError>
      break;
 801463a:	bf00      	nop
  }

  return ret;
 801463c:	7bfb      	ldrb	r3, [r7, #15]
}
 801463e:	4618      	mov	r0, r3
 8014640:	3710      	adds	r7, #16
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}
 8014646:	bf00      	nop

08014648 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b084      	sub	sp, #16
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
 8014650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014652:	2300      	movs	r3, #0
 8014654:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	781b      	ldrb	r3, [r3, #0]
 801465a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801465e:	2b40      	cmp	r3, #64	@ 0x40
 8014660:	d005      	beq.n	801466e <USBD_StdItfReq+0x26>
 8014662:	2b40      	cmp	r3, #64	@ 0x40
 8014664:	d852      	bhi.n	801470c <USBD_StdItfReq+0xc4>
 8014666:	2b00      	cmp	r3, #0
 8014668:	d001      	beq.n	801466e <USBD_StdItfReq+0x26>
 801466a:	2b20      	cmp	r3, #32
 801466c:	d14e      	bne.n	801470c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014674:	b2db      	uxtb	r3, r3
 8014676:	3b01      	subs	r3, #1
 8014678:	2b02      	cmp	r3, #2
 801467a:	d840      	bhi.n	80146fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	889b      	ldrh	r3, [r3, #4]
 8014680:	b2db      	uxtb	r3, r3
 8014682:	2b03      	cmp	r3, #3
 8014684:	d836      	bhi.n	80146f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	889b      	ldrh	r3, [r3, #4]
 801468a:	b2db      	uxtb	r3, r3
 801468c:	4619      	mov	r1, r3
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f7ff ff2f 	bl	80144f2 <USBD_CoreFindIF>
 8014694:	4603      	mov	r3, r0
 8014696:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014698:	7bbb      	ldrb	r3, [r7, #14]
 801469a:	2bff      	cmp	r3, #255	@ 0xff
 801469c:	d01d      	beq.n	80146da <USBD_StdItfReq+0x92>
 801469e:	7bbb      	ldrb	r3, [r7, #14]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d11a      	bne.n	80146da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80146a4:	7bba      	ldrb	r2, [r7, #14]
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	32ae      	adds	r2, #174	@ 0xae
 80146aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146ae:	689b      	ldr	r3, [r3, #8]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d00f      	beq.n	80146d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80146b4:	7bba      	ldrb	r2, [r7, #14]
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80146bc:	7bba      	ldrb	r2, [r7, #14]
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	32ae      	adds	r2, #174	@ 0xae
 80146c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146c6:	689b      	ldr	r3, [r3, #8]
 80146c8:	6839      	ldr	r1, [r7, #0]
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	4798      	blx	r3
 80146ce:	4603      	mov	r3, r0
 80146d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80146d2:	e004      	b.n	80146de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80146d4:	2303      	movs	r3, #3
 80146d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80146d8:	e001      	b.n	80146de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80146da:	2303      	movs	r3, #3
 80146dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	88db      	ldrh	r3, [r3, #6]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d110      	bne.n	8014708 <USBD_StdItfReq+0xc0>
 80146e6:	7bfb      	ldrb	r3, [r7, #15]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d10d      	bne.n	8014708 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80146ec:	6878      	ldr	r0, [r7, #4]
 80146ee:	f000 fdfd 	bl	80152ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80146f2:	e009      	b.n	8014708 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80146f4:	6839      	ldr	r1, [r7, #0]
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f000 fd21 	bl	801513e <USBD_CtlError>
          break;
 80146fc:	e004      	b.n	8014708 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80146fe:	6839      	ldr	r1, [r7, #0]
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f000 fd1c 	bl	801513e <USBD_CtlError>
          break;
 8014706:	e000      	b.n	801470a <USBD_StdItfReq+0xc2>
          break;
 8014708:	bf00      	nop
      }
      break;
 801470a:	e004      	b.n	8014716 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801470c:	6839      	ldr	r1, [r7, #0]
 801470e:	6878      	ldr	r0, [r7, #4]
 8014710:	f000 fd15 	bl	801513e <USBD_CtlError>
      break;
 8014714:	bf00      	nop
  }

  return ret;
 8014716:	7bfb      	ldrb	r3, [r7, #15]
}
 8014718:	4618      	mov	r0, r3
 801471a:	3710      	adds	r7, #16
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b084      	sub	sp, #16
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801472a:	2300      	movs	r3, #0
 801472c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	889b      	ldrh	r3, [r3, #4]
 8014732:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801473c:	2b40      	cmp	r3, #64	@ 0x40
 801473e:	d007      	beq.n	8014750 <USBD_StdEPReq+0x30>
 8014740:	2b40      	cmp	r3, #64	@ 0x40
 8014742:	f200 817f 	bhi.w	8014a44 <USBD_StdEPReq+0x324>
 8014746:	2b00      	cmp	r3, #0
 8014748:	d02a      	beq.n	80147a0 <USBD_StdEPReq+0x80>
 801474a:	2b20      	cmp	r3, #32
 801474c:	f040 817a 	bne.w	8014a44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014750:	7bbb      	ldrb	r3, [r7, #14]
 8014752:	4619      	mov	r1, r3
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f7ff fed9 	bl	801450c <USBD_CoreFindEP>
 801475a:	4603      	mov	r3, r0
 801475c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801475e:	7b7b      	ldrb	r3, [r7, #13]
 8014760:	2bff      	cmp	r3, #255	@ 0xff
 8014762:	f000 8174 	beq.w	8014a4e <USBD_StdEPReq+0x32e>
 8014766:	7b7b      	ldrb	r3, [r7, #13]
 8014768:	2b00      	cmp	r3, #0
 801476a:	f040 8170 	bne.w	8014a4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801476e:	7b7a      	ldrb	r2, [r7, #13]
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014776:	7b7a      	ldrb	r2, [r7, #13]
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	32ae      	adds	r2, #174	@ 0xae
 801477c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014780:	689b      	ldr	r3, [r3, #8]
 8014782:	2b00      	cmp	r3, #0
 8014784:	f000 8163 	beq.w	8014a4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014788:	7b7a      	ldrb	r2, [r7, #13]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	32ae      	adds	r2, #174	@ 0xae
 801478e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014792:	689b      	ldr	r3, [r3, #8]
 8014794:	6839      	ldr	r1, [r7, #0]
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	4798      	blx	r3
 801479a:	4603      	mov	r3, r0
 801479c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801479e:	e156      	b.n	8014a4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	785b      	ldrb	r3, [r3, #1]
 80147a4:	2b03      	cmp	r3, #3
 80147a6:	d008      	beq.n	80147ba <USBD_StdEPReq+0x9a>
 80147a8:	2b03      	cmp	r3, #3
 80147aa:	f300 8145 	bgt.w	8014a38 <USBD_StdEPReq+0x318>
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	f000 809b 	beq.w	80148ea <USBD_StdEPReq+0x1ca>
 80147b4:	2b01      	cmp	r3, #1
 80147b6:	d03c      	beq.n	8014832 <USBD_StdEPReq+0x112>
 80147b8:	e13e      	b.n	8014a38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80147c0:	b2db      	uxtb	r3, r3
 80147c2:	2b02      	cmp	r3, #2
 80147c4:	d002      	beq.n	80147cc <USBD_StdEPReq+0xac>
 80147c6:	2b03      	cmp	r3, #3
 80147c8:	d016      	beq.n	80147f8 <USBD_StdEPReq+0xd8>
 80147ca:	e02c      	b.n	8014826 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80147cc:	7bbb      	ldrb	r3, [r7, #14]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d00d      	beq.n	80147ee <USBD_StdEPReq+0xce>
 80147d2:	7bbb      	ldrb	r3, [r7, #14]
 80147d4:	2b80      	cmp	r3, #128	@ 0x80
 80147d6:	d00a      	beq.n	80147ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80147d8:	7bbb      	ldrb	r3, [r7, #14]
 80147da:	4619      	mov	r1, r3
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	f006 fa28 	bl	801ac32 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80147e2:	2180      	movs	r1, #128	@ 0x80
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f006 fa24 	bl	801ac32 <USBD_LL_StallEP>
 80147ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80147ec:	e020      	b.n	8014830 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80147ee:	6839      	ldr	r1, [r7, #0]
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f000 fca4 	bl	801513e <USBD_CtlError>
              break;
 80147f6:	e01b      	b.n	8014830 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	885b      	ldrh	r3, [r3, #2]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d10e      	bne.n	801481e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014800:	7bbb      	ldrb	r3, [r7, #14]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d00b      	beq.n	801481e <USBD_StdEPReq+0xfe>
 8014806:	7bbb      	ldrb	r3, [r7, #14]
 8014808:	2b80      	cmp	r3, #128	@ 0x80
 801480a:	d008      	beq.n	801481e <USBD_StdEPReq+0xfe>
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	88db      	ldrh	r3, [r3, #6]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d104      	bne.n	801481e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014814:	7bbb      	ldrb	r3, [r7, #14]
 8014816:	4619      	mov	r1, r3
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f006 fa0a 	bl	801ac32 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801481e:	6878      	ldr	r0, [r7, #4]
 8014820:	f000 fd64 	bl	80152ec <USBD_CtlSendStatus>

              break;
 8014824:	e004      	b.n	8014830 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014826:	6839      	ldr	r1, [r7, #0]
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f000 fc88 	bl	801513e <USBD_CtlError>
              break;
 801482e:	bf00      	nop
          }
          break;
 8014830:	e107      	b.n	8014a42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014838:	b2db      	uxtb	r3, r3
 801483a:	2b02      	cmp	r3, #2
 801483c:	d002      	beq.n	8014844 <USBD_StdEPReq+0x124>
 801483e:	2b03      	cmp	r3, #3
 8014840:	d016      	beq.n	8014870 <USBD_StdEPReq+0x150>
 8014842:	e04b      	b.n	80148dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014844:	7bbb      	ldrb	r3, [r7, #14]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d00d      	beq.n	8014866 <USBD_StdEPReq+0x146>
 801484a:	7bbb      	ldrb	r3, [r7, #14]
 801484c:	2b80      	cmp	r3, #128	@ 0x80
 801484e:	d00a      	beq.n	8014866 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014850:	7bbb      	ldrb	r3, [r7, #14]
 8014852:	4619      	mov	r1, r3
 8014854:	6878      	ldr	r0, [r7, #4]
 8014856:	f006 f9ec 	bl	801ac32 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801485a:	2180      	movs	r1, #128	@ 0x80
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f006 f9e8 	bl	801ac32 <USBD_LL_StallEP>
 8014862:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014864:	e040      	b.n	80148e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014866:	6839      	ldr	r1, [r7, #0]
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f000 fc68 	bl	801513e <USBD_CtlError>
              break;
 801486e:	e03b      	b.n	80148e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	885b      	ldrh	r3, [r3, #2]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d136      	bne.n	80148e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014878:	7bbb      	ldrb	r3, [r7, #14]
 801487a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801487e:	2b00      	cmp	r3, #0
 8014880:	d004      	beq.n	801488c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014882:	7bbb      	ldrb	r3, [r7, #14]
 8014884:	4619      	mov	r1, r3
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f006 f9f2 	bl	801ac70 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f000 fd2d 	bl	80152ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014892:	7bbb      	ldrb	r3, [r7, #14]
 8014894:	4619      	mov	r1, r3
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f7ff fe38 	bl	801450c <USBD_CoreFindEP>
 801489c:	4603      	mov	r3, r0
 801489e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80148a0:	7b7b      	ldrb	r3, [r7, #13]
 80148a2:	2bff      	cmp	r3, #255	@ 0xff
 80148a4:	d01f      	beq.n	80148e6 <USBD_StdEPReq+0x1c6>
 80148a6:	7b7b      	ldrb	r3, [r7, #13]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d11c      	bne.n	80148e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80148ac:	7b7a      	ldrb	r2, [r7, #13]
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80148b4:	7b7a      	ldrb	r2, [r7, #13]
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	32ae      	adds	r2, #174	@ 0xae
 80148ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148be:	689b      	ldr	r3, [r3, #8]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d010      	beq.n	80148e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80148c4:	7b7a      	ldrb	r2, [r7, #13]
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	32ae      	adds	r2, #174	@ 0xae
 80148ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148ce:	689b      	ldr	r3, [r3, #8]
 80148d0:	6839      	ldr	r1, [r7, #0]
 80148d2:	6878      	ldr	r0, [r7, #4]
 80148d4:	4798      	blx	r3
 80148d6:	4603      	mov	r3, r0
 80148d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80148da:	e004      	b.n	80148e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80148dc:	6839      	ldr	r1, [r7, #0]
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f000 fc2d 	bl	801513e <USBD_CtlError>
              break;
 80148e4:	e000      	b.n	80148e8 <USBD_StdEPReq+0x1c8>
              break;
 80148e6:	bf00      	nop
          }
          break;
 80148e8:	e0ab      	b.n	8014a42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80148f0:	b2db      	uxtb	r3, r3
 80148f2:	2b02      	cmp	r3, #2
 80148f4:	d002      	beq.n	80148fc <USBD_StdEPReq+0x1dc>
 80148f6:	2b03      	cmp	r3, #3
 80148f8:	d032      	beq.n	8014960 <USBD_StdEPReq+0x240>
 80148fa:	e097      	b.n	8014a2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80148fc:	7bbb      	ldrb	r3, [r7, #14]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d007      	beq.n	8014912 <USBD_StdEPReq+0x1f2>
 8014902:	7bbb      	ldrb	r3, [r7, #14]
 8014904:	2b80      	cmp	r3, #128	@ 0x80
 8014906:	d004      	beq.n	8014912 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014908:	6839      	ldr	r1, [r7, #0]
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f000 fc17 	bl	801513e <USBD_CtlError>
                break;
 8014910:	e091      	b.n	8014a36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014916:	2b00      	cmp	r3, #0
 8014918:	da0b      	bge.n	8014932 <USBD_StdEPReq+0x212>
 801491a:	7bbb      	ldrb	r3, [r7, #14]
 801491c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014920:	4613      	mov	r3, r2
 8014922:	009b      	lsls	r3, r3, #2
 8014924:	4413      	add	r3, r2
 8014926:	009b      	lsls	r3, r3, #2
 8014928:	3310      	adds	r3, #16
 801492a:	687a      	ldr	r2, [r7, #4]
 801492c:	4413      	add	r3, r2
 801492e:	3304      	adds	r3, #4
 8014930:	e00b      	b.n	801494a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014932:	7bbb      	ldrb	r3, [r7, #14]
 8014934:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014938:	4613      	mov	r3, r2
 801493a:	009b      	lsls	r3, r3, #2
 801493c:	4413      	add	r3, r2
 801493e:	009b      	lsls	r3, r3, #2
 8014940:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014944:	687a      	ldr	r2, [r7, #4]
 8014946:	4413      	add	r3, r2
 8014948:	3304      	adds	r3, #4
 801494a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	2200      	movs	r2, #0
 8014950:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	2202      	movs	r2, #2
 8014956:	4619      	mov	r1, r3
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f000 fc6d 	bl	8015238 <USBD_CtlSendData>
              break;
 801495e:	e06a      	b.n	8014a36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014960:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014964:	2b00      	cmp	r3, #0
 8014966:	da11      	bge.n	801498c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014968:	7bbb      	ldrb	r3, [r7, #14]
 801496a:	f003 020f 	and.w	r2, r3, #15
 801496e:	6879      	ldr	r1, [r7, #4]
 8014970:	4613      	mov	r3, r2
 8014972:	009b      	lsls	r3, r3, #2
 8014974:	4413      	add	r3, r2
 8014976:	009b      	lsls	r3, r3, #2
 8014978:	440b      	add	r3, r1
 801497a:	3324      	adds	r3, #36	@ 0x24
 801497c:	881b      	ldrh	r3, [r3, #0]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d117      	bne.n	80149b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014982:	6839      	ldr	r1, [r7, #0]
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f000 fbda 	bl	801513e <USBD_CtlError>
                  break;
 801498a:	e054      	b.n	8014a36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801498c:	7bbb      	ldrb	r3, [r7, #14]
 801498e:	f003 020f 	and.w	r2, r3, #15
 8014992:	6879      	ldr	r1, [r7, #4]
 8014994:	4613      	mov	r3, r2
 8014996:	009b      	lsls	r3, r3, #2
 8014998:	4413      	add	r3, r2
 801499a:	009b      	lsls	r3, r3, #2
 801499c:	440b      	add	r3, r1
 801499e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80149a2:	881b      	ldrh	r3, [r3, #0]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d104      	bne.n	80149b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80149a8:	6839      	ldr	r1, [r7, #0]
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f000 fbc7 	bl	801513e <USBD_CtlError>
                  break;
 80149b0:	e041      	b.n	8014a36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	da0b      	bge.n	80149d2 <USBD_StdEPReq+0x2b2>
 80149ba:	7bbb      	ldrb	r3, [r7, #14]
 80149bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80149c0:	4613      	mov	r3, r2
 80149c2:	009b      	lsls	r3, r3, #2
 80149c4:	4413      	add	r3, r2
 80149c6:	009b      	lsls	r3, r3, #2
 80149c8:	3310      	adds	r3, #16
 80149ca:	687a      	ldr	r2, [r7, #4]
 80149cc:	4413      	add	r3, r2
 80149ce:	3304      	adds	r3, #4
 80149d0:	e00b      	b.n	80149ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80149d2:	7bbb      	ldrb	r3, [r7, #14]
 80149d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149d8:	4613      	mov	r3, r2
 80149da:	009b      	lsls	r3, r3, #2
 80149dc:	4413      	add	r3, r2
 80149de:	009b      	lsls	r3, r3, #2
 80149e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80149e4:	687a      	ldr	r2, [r7, #4]
 80149e6:	4413      	add	r3, r2
 80149e8:	3304      	adds	r3, #4
 80149ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80149ec:	7bbb      	ldrb	r3, [r7, #14]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d002      	beq.n	80149f8 <USBD_StdEPReq+0x2d8>
 80149f2:	7bbb      	ldrb	r3, [r7, #14]
 80149f4:	2b80      	cmp	r3, #128	@ 0x80
 80149f6:	d103      	bne.n	8014a00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80149f8:	68bb      	ldr	r3, [r7, #8]
 80149fa:	2200      	movs	r2, #0
 80149fc:	601a      	str	r2, [r3, #0]
 80149fe:	e00e      	b.n	8014a1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014a00:	7bbb      	ldrb	r3, [r7, #14]
 8014a02:	4619      	mov	r1, r3
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f006 f952 	bl	801acae <USBD_LL_IsStallEP>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d003      	beq.n	8014a18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	2201      	movs	r2, #1
 8014a14:	601a      	str	r2, [r3, #0]
 8014a16:	e002      	b.n	8014a1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	2202      	movs	r2, #2
 8014a22:	4619      	mov	r1, r3
 8014a24:	6878      	ldr	r0, [r7, #4]
 8014a26:	f000 fc07 	bl	8015238 <USBD_CtlSendData>
              break;
 8014a2a:	e004      	b.n	8014a36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014a2c:	6839      	ldr	r1, [r7, #0]
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	f000 fb85 	bl	801513e <USBD_CtlError>
              break;
 8014a34:	bf00      	nop
          }
          break;
 8014a36:	e004      	b.n	8014a42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014a38:	6839      	ldr	r1, [r7, #0]
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f000 fb7f 	bl	801513e <USBD_CtlError>
          break;
 8014a40:	bf00      	nop
      }
      break;
 8014a42:	e005      	b.n	8014a50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014a44:	6839      	ldr	r1, [r7, #0]
 8014a46:	6878      	ldr	r0, [r7, #4]
 8014a48:	f000 fb79 	bl	801513e <USBD_CtlError>
      break;
 8014a4c:	e000      	b.n	8014a50 <USBD_StdEPReq+0x330>
      break;
 8014a4e:	bf00      	nop
  }

  return ret;
 8014a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	3710      	adds	r7, #16
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}
	...

08014a5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b084      	sub	sp, #16
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
 8014a64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014a66:	2300      	movs	r3, #0
 8014a68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014a6e:	2300      	movs	r3, #0
 8014a70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	885b      	ldrh	r3, [r3, #2]
 8014a76:	0a1b      	lsrs	r3, r3, #8
 8014a78:	b29b      	uxth	r3, r3
 8014a7a:	3b01      	subs	r3, #1
 8014a7c:	2b0e      	cmp	r3, #14
 8014a7e:	f200 8152 	bhi.w	8014d26 <USBD_GetDescriptor+0x2ca>
 8014a82:	a201      	add	r2, pc, #4	@ (adr r2, 8014a88 <USBD_GetDescriptor+0x2c>)
 8014a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a88:	08014af9 	.word	0x08014af9
 8014a8c:	08014b11 	.word	0x08014b11
 8014a90:	08014b51 	.word	0x08014b51
 8014a94:	08014d27 	.word	0x08014d27
 8014a98:	08014d27 	.word	0x08014d27
 8014a9c:	08014cc7 	.word	0x08014cc7
 8014aa0:	08014cf3 	.word	0x08014cf3
 8014aa4:	08014d27 	.word	0x08014d27
 8014aa8:	08014d27 	.word	0x08014d27
 8014aac:	08014d27 	.word	0x08014d27
 8014ab0:	08014d27 	.word	0x08014d27
 8014ab4:	08014d27 	.word	0x08014d27
 8014ab8:	08014d27 	.word	0x08014d27
 8014abc:	08014d27 	.word	0x08014d27
 8014ac0:	08014ac5 	.word	0x08014ac5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014aca:	69db      	ldr	r3, [r3, #28]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d00b      	beq.n	8014ae8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014ad6:	69db      	ldr	r3, [r3, #28]
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	7c12      	ldrb	r2, [r2, #16]
 8014adc:	f107 0108 	add.w	r1, r7, #8
 8014ae0:	4610      	mov	r0, r2
 8014ae2:	4798      	blx	r3
 8014ae4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014ae6:	e126      	b.n	8014d36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014ae8:	6839      	ldr	r1, [r7, #0]
 8014aea:	6878      	ldr	r0, [r7, #4]
 8014aec:	f000 fb27 	bl	801513e <USBD_CtlError>
        err++;
 8014af0:	7afb      	ldrb	r3, [r7, #11]
 8014af2:	3301      	adds	r3, #1
 8014af4:	72fb      	strb	r3, [r7, #11]
      break;
 8014af6:	e11e      	b.n	8014d36 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	687a      	ldr	r2, [r7, #4]
 8014b02:	7c12      	ldrb	r2, [r2, #16]
 8014b04:	f107 0108 	add.w	r1, r7, #8
 8014b08:	4610      	mov	r0, r2
 8014b0a:	4798      	blx	r3
 8014b0c:	60f8      	str	r0, [r7, #12]
      break;
 8014b0e:	e112      	b.n	8014d36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	7c1b      	ldrb	r3, [r3, #16]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d10d      	bne.n	8014b34 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b20:	f107 0208 	add.w	r2, r7, #8
 8014b24:	4610      	mov	r0, r2
 8014b26:	4798      	blx	r3
 8014b28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	3301      	adds	r3, #1
 8014b2e:	2202      	movs	r2, #2
 8014b30:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014b32:	e100      	b.n	8014d36 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b3c:	f107 0208 	add.w	r2, r7, #8
 8014b40:	4610      	mov	r0, r2
 8014b42:	4798      	blx	r3
 8014b44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	3301      	adds	r3, #1
 8014b4a:	2202      	movs	r2, #2
 8014b4c:	701a      	strb	r2, [r3, #0]
      break;
 8014b4e:	e0f2      	b.n	8014d36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	885b      	ldrh	r3, [r3, #2]
 8014b54:	b2db      	uxtb	r3, r3
 8014b56:	2b05      	cmp	r3, #5
 8014b58:	f200 80ac 	bhi.w	8014cb4 <USBD_GetDescriptor+0x258>
 8014b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8014b64 <USBD_GetDescriptor+0x108>)
 8014b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b62:	bf00      	nop
 8014b64:	08014b7d 	.word	0x08014b7d
 8014b68:	08014bb1 	.word	0x08014bb1
 8014b6c:	08014be5 	.word	0x08014be5
 8014b70:	08014c19 	.word	0x08014c19
 8014b74:	08014c4d 	.word	0x08014c4d
 8014b78:	08014c81 	.word	0x08014c81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d00b      	beq.n	8014ba0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b8e:	685b      	ldr	r3, [r3, #4]
 8014b90:	687a      	ldr	r2, [r7, #4]
 8014b92:	7c12      	ldrb	r2, [r2, #16]
 8014b94:	f107 0108 	add.w	r1, r7, #8
 8014b98:	4610      	mov	r0, r2
 8014b9a:	4798      	blx	r3
 8014b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b9e:	e091      	b.n	8014cc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014ba0:	6839      	ldr	r1, [r7, #0]
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	f000 facb 	bl	801513e <USBD_CtlError>
            err++;
 8014ba8:	7afb      	ldrb	r3, [r7, #11]
 8014baa:	3301      	adds	r3, #1
 8014bac:	72fb      	strb	r3, [r7, #11]
          break;
 8014bae:	e089      	b.n	8014cc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014bb6:	689b      	ldr	r3, [r3, #8]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d00b      	beq.n	8014bd4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014bc2:	689b      	ldr	r3, [r3, #8]
 8014bc4:	687a      	ldr	r2, [r7, #4]
 8014bc6:	7c12      	ldrb	r2, [r2, #16]
 8014bc8:	f107 0108 	add.w	r1, r7, #8
 8014bcc:	4610      	mov	r0, r2
 8014bce:	4798      	blx	r3
 8014bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bd2:	e077      	b.n	8014cc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014bd4:	6839      	ldr	r1, [r7, #0]
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f000 fab1 	bl	801513e <USBD_CtlError>
            err++;
 8014bdc:	7afb      	ldrb	r3, [r7, #11]
 8014bde:	3301      	adds	r3, #1
 8014be0:	72fb      	strb	r3, [r7, #11]
          break;
 8014be2:	e06f      	b.n	8014cc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014bea:	68db      	ldr	r3, [r3, #12]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d00b      	beq.n	8014c08 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014bf6:	68db      	ldr	r3, [r3, #12]
 8014bf8:	687a      	ldr	r2, [r7, #4]
 8014bfa:	7c12      	ldrb	r2, [r2, #16]
 8014bfc:	f107 0108 	add.w	r1, r7, #8
 8014c00:	4610      	mov	r0, r2
 8014c02:	4798      	blx	r3
 8014c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c06:	e05d      	b.n	8014cc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014c08:	6839      	ldr	r1, [r7, #0]
 8014c0a:	6878      	ldr	r0, [r7, #4]
 8014c0c:	f000 fa97 	bl	801513e <USBD_CtlError>
            err++;
 8014c10:	7afb      	ldrb	r3, [r7, #11]
 8014c12:	3301      	adds	r3, #1
 8014c14:	72fb      	strb	r3, [r7, #11]
          break;
 8014c16:	e055      	b.n	8014cc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c1e:	691b      	ldr	r3, [r3, #16]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d00b      	beq.n	8014c3c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c2a:	691b      	ldr	r3, [r3, #16]
 8014c2c:	687a      	ldr	r2, [r7, #4]
 8014c2e:	7c12      	ldrb	r2, [r2, #16]
 8014c30:	f107 0108 	add.w	r1, r7, #8
 8014c34:	4610      	mov	r0, r2
 8014c36:	4798      	blx	r3
 8014c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c3a:	e043      	b.n	8014cc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014c3c:	6839      	ldr	r1, [r7, #0]
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f000 fa7d 	bl	801513e <USBD_CtlError>
            err++;
 8014c44:	7afb      	ldrb	r3, [r7, #11]
 8014c46:	3301      	adds	r3, #1
 8014c48:	72fb      	strb	r3, [r7, #11]
          break;
 8014c4a:	e03b      	b.n	8014cc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c52:	695b      	ldr	r3, [r3, #20]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d00b      	beq.n	8014c70 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c5e:	695b      	ldr	r3, [r3, #20]
 8014c60:	687a      	ldr	r2, [r7, #4]
 8014c62:	7c12      	ldrb	r2, [r2, #16]
 8014c64:	f107 0108 	add.w	r1, r7, #8
 8014c68:	4610      	mov	r0, r2
 8014c6a:	4798      	blx	r3
 8014c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c6e:	e029      	b.n	8014cc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014c70:	6839      	ldr	r1, [r7, #0]
 8014c72:	6878      	ldr	r0, [r7, #4]
 8014c74:	f000 fa63 	bl	801513e <USBD_CtlError>
            err++;
 8014c78:	7afb      	ldrb	r3, [r7, #11]
 8014c7a:	3301      	adds	r3, #1
 8014c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8014c7e:	e021      	b.n	8014cc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c86:	699b      	ldr	r3, [r3, #24]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d00b      	beq.n	8014ca4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c92:	699b      	ldr	r3, [r3, #24]
 8014c94:	687a      	ldr	r2, [r7, #4]
 8014c96:	7c12      	ldrb	r2, [r2, #16]
 8014c98:	f107 0108 	add.w	r1, r7, #8
 8014c9c:	4610      	mov	r0, r2
 8014c9e:	4798      	blx	r3
 8014ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ca2:	e00f      	b.n	8014cc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014ca4:	6839      	ldr	r1, [r7, #0]
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f000 fa49 	bl	801513e <USBD_CtlError>
            err++;
 8014cac:	7afb      	ldrb	r3, [r7, #11]
 8014cae:	3301      	adds	r3, #1
 8014cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8014cb2:	e007      	b.n	8014cc4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014cb4:	6839      	ldr	r1, [r7, #0]
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f000 fa41 	bl	801513e <USBD_CtlError>
          err++;
 8014cbc:	7afb      	ldrb	r3, [r7, #11]
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014cc2:	bf00      	nop
      }
      break;
 8014cc4:	e037      	b.n	8014d36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	7c1b      	ldrb	r3, [r3, #16]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d109      	bne.n	8014ce2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014cd6:	f107 0208 	add.w	r2, r7, #8
 8014cda:	4610      	mov	r0, r2
 8014cdc:	4798      	blx	r3
 8014cde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014ce0:	e029      	b.n	8014d36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014ce2:	6839      	ldr	r1, [r7, #0]
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f000 fa2a 	bl	801513e <USBD_CtlError>
        err++;
 8014cea:	7afb      	ldrb	r3, [r7, #11]
 8014cec:	3301      	adds	r3, #1
 8014cee:	72fb      	strb	r3, [r7, #11]
      break;
 8014cf0:	e021      	b.n	8014d36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	7c1b      	ldrb	r3, [r3, #16]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d10d      	bne.n	8014d16 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d02:	f107 0208 	add.w	r2, r7, #8
 8014d06:	4610      	mov	r0, r2
 8014d08:	4798      	blx	r3
 8014d0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	3301      	adds	r3, #1
 8014d10:	2207      	movs	r2, #7
 8014d12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d14:	e00f      	b.n	8014d36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014d16:	6839      	ldr	r1, [r7, #0]
 8014d18:	6878      	ldr	r0, [r7, #4]
 8014d1a:	f000 fa10 	bl	801513e <USBD_CtlError>
        err++;
 8014d1e:	7afb      	ldrb	r3, [r7, #11]
 8014d20:	3301      	adds	r3, #1
 8014d22:	72fb      	strb	r3, [r7, #11]
      break;
 8014d24:	e007      	b.n	8014d36 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014d26:	6839      	ldr	r1, [r7, #0]
 8014d28:	6878      	ldr	r0, [r7, #4]
 8014d2a:	f000 fa08 	bl	801513e <USBD_CtlError>
      err++;
 8014d2e:	7afb      	ldrb	r3, [r7, #11]
 8014d30:	3301      	adds	r3, #1
 8014d32:	72fb      	strb	r3, [r7, #11]
      break;
 8014d34:	bf00      	nop
  }

  if (err != 0U)
 8014d36:	7afb      	ldrb	r3, [r7, #11]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d11e      	bne.n	8014d7a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014d3c:	683b      	ldr	r3, [r7, #0]
 8014d3e:	88db      	ldrh	r3, [r3, #6]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d016      	beq.n	8014d72 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014d44:	893b      	ldrh	r3, [r7, #8]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d00e      	beq.n	8014d68 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014d4a:	683b      	ldr	r3, [r7, #0]
 8014d4c:	88da      	ldrh	r2, [r3, #6]
 8014d4e:	893b      	ldrh	r3, [r7, #8]
 8014d50:	4293      	cmp	r3, r2
 8014d52:	bf28      	it	cs
 8014d54:	4613      	movcs	r3, r2
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014d5a:	893b      	ldrh	r3, [r7, #8]
 8014d5c:	461a      	mov	r2, r3
 8014d5e:	68f9      	ldr	r1, [r7, #12]
 8014d60:	6878      	ldr	r0, [r7, #4]
 8014d62:	f000 fa69 	bl	8015238 <USBD_CtlSendData>
 8014d66:	e009      	b.n	8014d7c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014d68:	6839      	ldr	r1, [r7, #0]
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f000 f9e7 	bl	801513e <USBD_CtlError>
 8014d70:	e004      	b.n	8014d7c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f000 faba 	bl	80152ec <USBD_CtlSendStatus>
 8014d78:	e000      	b.n	8014d7c <USBD_GetDescriptor+0x320>
    return;
 8014d7a:	bf00      	nop
  }
}
 8014d7c:	3710      	adds	r7, #16
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bd80      	pop	{r7, pc}
 8014d82:	bf00      	nop

08014d84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b084      	sub	sp, #16
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
 8014d8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	889b      	ldrh	r3, [r3, #4]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d131      	bne.n	8014dfa <USBD_SetAddress+0x76>
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	88db      	ldrh	r3, [r3, #6]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d12d      	bne.n	8014dfa <USBD_SetAddress+0x76>
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	885b      	ldrh	r3, [r3, #2]
 8014da2:	2b7f      	cmp	r3, #127	@ 0x7f
 8014da4:	d829      	bhi.n	8014dfa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	885b      	ldrh	r3, [r3, #2]
 8014daa:	b2db      	uxtb	r3, r3
 8014dac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014db0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014db8:	b2db      	uxtb	r3, r3
 8014dba:	2b03      	cmp	r3, #3
 8014dbc:	d104      	bne.n	8014dc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014dbe:	6839      	ldr	r1, [r7, #0]
 8014dc0:	6878      	ldr	r0, [r7, #4]
 8014dc2:	f000 f9bc 	bl	801513e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014dc6:	e01d      	b.n	8014e04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	7bfa      	ldrb	r2, [r7, #15]
 8014dcc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014dd0:	7bfb      	ldrb	r3, [r7, #15]
 8014dd2:	4619      	mov	r1, r3
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f005 ff96 	bl	801ad06 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f000 fa86 	bl	80152ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014de0:	7bfb      	ldrb	r3, [r7, #15]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d004      	beq.n	8014df0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	2202      	movs	r2, #2
 8014dea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014dee:	e009      	b.n	8014e04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2201      	movs	r2, #1
 8014df4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014df8:	e004      	b.n	8014e04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014dfa:	6839      	ldr	r1, [r7, #0]
 8014dfc:	6878      	ldr	r0, [r7, #4]
 8014dfe:	f000 f99e 	bl	801513e <USBD_CtlError>
  }
}
 8014e02:	bf00      	nop
 8014e04:	bf00      	nop
 8014e06:	3710      	adds	r7, #16
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}

08014e0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b084      	sub	sp, #16
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
 8014e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014e16:	2300      	movs	r3, #0
 8014e18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	885b      	ldrh	r3, [r3, #2]
 8014e1e:	b2da      	uxtb	r2, r3
 8014e20:	4b4e      	ldr	r3, [pc, #312]	@ (8014f5c <USBD_SetConfig+0x150>)
 8014e22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014e24:	4b4d      	ldr	r3, [pc, #308]	@ (8014f5c <USBD_SetConfig+0x150>)
 8014e26:	781b      	ldrb	r3, [r3, #0]
 8014e28:	2b01      	cmp	r3, #1
 8014e2a:	d905      	bls.n	8014e38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014e2c:	6839      	ldr	r1, [r7, #0]
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f000 f985 	bl	801513e <USBD_CtlError>
    return USBD_FAIL;
 8014e34:	2303      	movs	r3, #3
 8014e36:	e08c      	b.n	8014f52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e3e:	b2db      	uxtb	r3, r3
 8014e40:	2b02      	cmp	r3, #2
 8014e42:	d002      	beq.n	8014e4a <USBD_SetConfig+0x3e>
 8014e44:	2b03      	cmp	r3, #3
 8014e46:	d029      	beq.n	8014e9c <USBD_SetConfig+0x90>
 8014e48:	e075      	b.n	8014f36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014e4a:	4b44      	ldr	r3, [pc, #272]	@ (8014f5c <USBD_SetConfig+0x150>)
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d020      	beq.n	8014e94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014e52:	4b42      	ldr	r3, [pc, #264]	@ (8014f5c <USBD_SetConfig+0x150>)
 8014e54:	781b      	ldrb	r3, [r3, #0]
 8014e56:	461a      	mov	r2, r3
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8014f5c <USBD_SetConfig+0x150>)
 8014e5e:	781b      	ldrb	r3, [r3, #0]
 8014e60:	4619      	mov	r1, r3
 8014e62:	6878      	ldr	r0, [r7, #4]
 8014e64:	f7ff f80d 	bl	8013e82 <USBD_SetClassConfig>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014e6c:	7bfb      	ldrb	r3, [r7, #15]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d008      	beq.n	8014e84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014e72:	6839      	ldr	r1, [r7, #0]
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f000 f962 	bl	801513e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2202      	movs	r2, #2
 8014e7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014e82:	e065      	b.n	8014f50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014e84:	6878      	ldr	r0, [r7, #4]
 8014e86:	f000 fa31 	bl	80152ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	2203      	movs	r2, #3
 8014e8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014e92:	e05d      	b.n	8014f50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f000 fa29 	bl	80152ec <USBD_CtlSendStatus>
      break;
 8014e9a:	e059      	b.n	8014f50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8014f5c <USBD_SetConfig+0x150>)
 8014e9e:	781b      	ldrb	r3, [r3, #0]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d112      	bne.n	8014eca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	2202      	movs	r2, #2
 8014ea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014eac:	4b2b      	ldr	r3, [pc, #172]	@ (8014f5c <USBD_SetConfig+0x150>)
 8014eae:	781b      	ldrb	r3, [r3, #0]
 8014eb0:	461a      	mov	r2, r3
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014eb6:	4b29      	ldr	r3, [pc, #164]	@ (8014f5c <USBD_SetConfig+0x150>)
 8014eb8:	781b      	ldrb	r3, [r3, #0]
 8014eba:	4619      	mov	r1, r3
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f7fe fffc 	bl	8013eba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014ec2:	6878      	ldr	r0, [r7, #4]
 8014ec4:	f000 fa12 	bl	80152ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014ec8:	e042      	b.n	8014f50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014eca:	4b24      	ldr	r3, [pc, #144]	@ (8014f5c <USBD_SetConfig+0x150>)
 8014ecc:	781b      	ldrb	r3, [r3, #0]
 8014ece:	461a      	mov	r2, r3
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	685b      	ldr	r3, [r3, #4]
 8014ed4:	429a      	cmp	r2, r3
 8014ed6:	d02a      	beq.n	8014f2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	685b      	ldr	r3, [r3, #4]
 8014edc:	b2db      	uxtb	r3, r3
 8014ede:	4619      	mov	r1, r3
 8014ee0:	6878      	ldr	r0, [r7, #4]
 8014ee2:	f7fe ffea 	bl	8013eba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8014f5c <USBD_SetConfig+0x150>)
 8014ee8:	781b      	ldrb	r3, [r3, #0]
 8014eea:	461a      	mov	r2, r3
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8014f5c <USBD_SetConfig+0x150>)
 8014ef2:	781b      	ldrb	r3, [r3, #0]
 8014ef4:	4619      	mov	r1, r3
 8014ef6:	6878      	ldr	r0, [r7, #4]
 8014ef8:	f7fe ffc3 	bl	8013e82 <USBD_SetClassConfig>
 8014efc:	4603      	mov	r3, r0
 8014efe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014f00:	7bfb      	ldrb	r3, [r7, #15]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d00f      	beq.n	8014f26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014f06:	6839      	ldr	r1, [r7, #0]
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	f000 f918 	bl	801513e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	685b      	ldr	r3, [r3, #4]
 8014f12:	b2db      	uxtb	r3, r3
 8014f14:	4619      	mov	r1, r3
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f7fe ffcf 	bl	8013eba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2202      	movs	r2, #2
 8014f20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014f24:	e014      	b.n	8014f50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f000 f9e0 	bl	80152ec <USBD_CtlSendStatus>
      break;
 8014f2c:	e010      	b.n	8014f50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f000 f9dc 	bl	80152ec <USBD_CtlSendStatus>
      break;
 8014f34:	e00c      	b.n	8014f50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014f36:	6839      	ldr	r1, [r7, #0]
 8014f38:	6878      	ldr	r0, [r7, #4]
 8014f3a:	f000 f900 	bl	801513e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014f3e:	4b07      	ldr	r3, [pc, #28]	@ (8014f5c <USBD_SetConfig+0x150>)
 8014f40:	781b      	ldrb	r3, [r3, #0]
 8014f42:	4619      	mov	r1, r3
 8014f44:	6878      	ldr	r0, [r7, #4]
 8014f46:	f7fe ffb8 	bl	8013eba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014f4a:	2303      	movs	r3, #3
 8014f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8014f4e:	bf00      	nop
  }

  return ret;
 8014f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3710      	adds	r7, #16
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}
 8014f5a:	bf00      	nop
 8014f5c:	2400d8c4 	.word	0x2400d8c4

08014f60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b082      	sub	sp, #8
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
 8014f68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014f6a:	683b      	ldr	r3, [r7, #0]
 8014f6c:	88db      	ldrh	r3, [r3, #6]
 8014f6e:	2b01      	cmp	r3, #1
 8014f70:	d004      	beq.n	8014f7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014f72:	6839      	ldr	r1, [r7, #0]
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f000 f8e2 	bl	801513e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014f7a:	e023      	b.n	8014fc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014f82:	b2db      	uxtb	r3, r3
 8014f84:	2b02      	cmp	r3, #2
 8014f86:	dc02      	bgt.n	8014f8e <USBD_GetConfig+0x2e>
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	dc03      	bgt.n	8014f94 <USBD_GetConfig+0x34>
 8014f8c:	e015      	b.n	8014fba <USBD_GetConfig+0x5a>
 8014f8e:	2b03      	cmp	r3, #3
 8014f90:	d00b      	beq.n	8014faa <USBD_GetConfig+0x4a>
 8014f92:	e012      	b.n	8014fba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2200      	movs	r2, #0
 8014f98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	3308      	adds	r3, #8
 8014f9e:	2201      	movs	r2, #1
 8014fa0:	4619      	mov	r1, r3
 8014fa2:	6878      	ldr	r0, [r7, #4]
 8014fa4:	f000 f948 	bl	8015238 <USBD_CtlSendData>
        break;
 8014fa8:	e00c      	b.n	8014fc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	3304      	adds	r3, #4
 8014fae:	2201      	movs	r2, #1
 8014fb0:	4619      	mov	r1, r3
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f000 f940 	bl	8015238 <USBD_CtlSendData>
        break;
 8014fb8:	e004      	b.n	8014fc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014fba:	6839      	ldr	r1, [r7, #0]
 8014fbc:	6878      	ldr	r0, [r7, #4]
 8014fbe:	f000 f8be 	bl	801513e <USBD_CtlError>
        break;
 8014fc2:	bf00      	nop
}
 8014fc4:	bf00      	nop
 8014fc6:	3708      	adds	r7, #8
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}

08014fcc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014fdc:	b2db      	uxtb	r3, r3
 8014fde:	3b01      	subs	r3, #1
 8014fe0:	2b02      	cmp	r3, #2
 8014fe2:	d81e      	bhi.n	8015022 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	88db      	ldrh	r3, [r3, #6]
 8014fe8:	2b02      	cmp	r3, #2
 8014fea:	d004      	beq.n	8014ff6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014fec:	6839      	ldr	r1, [r7, #0]
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f000 f8a5 	bl	801513e <USBD_CtlError>
        break;
 8014ff4:	e01a      	b.n	801502c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	2201      	movs	r2, #1
 8014ffa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8015002:	2b00      	cmp	r3, #0
 8015004:	d005      	beq.n	8015012 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	68db      	ldr	r3, [r3, #12]
 801500a:	f043 0202 	orr.w	r2, r3, #2
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	330c      	adds	r3, #12
 8015016:	2202      	movs	r2, #2
 8015018:	4619      	mov	r1, r3
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f000 f90c 	bl	8015238 <USBD_CtlSendData>
      break;
 8015020:	e004      	b.n	801502c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015022:	6839      	ldr	r1, [r7, #0]
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f000 f88a 	bl	801513e <USBD_CtlError>
      break;
 801502a:	bf00      	nop
  }
}
 801502c:	bf00      	nop
 801502e:	3708      	adds	r7, #8
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}

08015034 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	885b      	ldrh	r3, [r3, #2]
 8015042:	2b01      	cmp	r3, #1
 8015044:	d107      	bne.n	8015056 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	2201      	movs	r2, #1
 801504a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801504e:	6878      	ldr	r0, [r7, #4]
 8015050:	f000 f94c 	bl	80152ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015054:	e013      	b.n	801507e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	885b      	ldrh	r3, [r3, #2]
 801505a:	2b02      	cmp	r3, #2
 801505c:	d10b      	bne.n	8015076 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	889b      	ldrh	r3, [r3, #4]
 8015062:	0a1b      	lsrs	r3, r3, #8
 8015064:	b29b      	uxth	r3, r3
 8015066:	b2da      	uxtb	r2, r3
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801506e:	6878      	ldr	r0, [r7, #4]
 8015070:	f000 f93c 	bl	80152ec <USBD_CtlSendStatus>
}
 8015074:	e003      	b.n	801507e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015076:	6839      	ldr	r1, [r7, #0]
 8015078:	6878      	ldr	r0, [r7, #4]
 801507a:	f000 f860 	bl	801513e <USBD_CtlError>
}
 801507e:	bf00      	nop
 8015080:	3708      	adds	r7, #8
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}

08015086 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015086:	b580      	push	{r7, lr}
 8015088:	b082      	sub	sp, #8
 801508a:	af00      	add	r7, sp, #0
 801508c:	6078      	str	r0, [r7, #4]
 801508e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015096:	b2db      	uxtb	r3, r3
 8015098:	3b01      	subs	r3, #1
 801509a:	2b02      	cmp	r3, #2
 801509c:	d80b      	bhi.n	80150b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801509e:	683b      	ldr	r3, [r7, #0]
 80150a0:	885b      	ldrh	r3, [r3, #2]
 80150a2:	2b01      	cmp	r3, #1
 80150a4:	d10c      	bne.n	80150c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2200      	movs	r2, #0
 80150aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80150ae:	6878      	ldr	r0, [r7, #4]
 80150b0:	f000 f91c 	bl	80152ec <USBD_CtlSendStatus>
      }
      break;
 80150b4:	e004      	b.n	80150c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80150b6:	6839      	ldr	r1, [r7, #0]
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f000 f840 	bl	801513e <USBD_CtlError>
      break;
 80150be:	e000      	b.n	80150c2 <USBD_ClrFeature+0x3c>
      break;
 80150c0:	bf00      	nop
  }
}
 80150c2:	bf00      	nop
 80150c4:	3708      	adds	r7, #8
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}

080150ca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80150ca:	b580      	push	{r7, lr}
 80150cc:	b084      	sub	sp, #16
 80150ce:	af00      	add	r7, sp, #0
 80150d0:	6078      	str	r0, [r7, #4]
 80150d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80150d4:	683b      	ldr	r3, [r7, #0]
 80150d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	781a      	ldrb	r2, [r3, #0]
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	3301      	adds	r3, #1
 80150e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	781a      	ldrb	r2, [r3, #0]
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	3301      	adds	r3, #1
 80150f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80150f4:	68f8      	ldr	r0, [r7, #12]
 80150f6:	f7ff fa16 	bl	8014526 <SWAPBYTE>
 80150fa:	4603      	mov	r3, r0
 80150fc:	461a      	mov	r2, r3
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	3301      	adds	r3, #1
 8015106:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	3301      	adds	r3, #1
 801510c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801510e:	68f8      	ldr	r0, [r7, #12]
 8015110:	f7ff fa09 	bl	8014526 <SWAPBYTE>
 8015114:	4603      	mov	r3, r0
 8015116:	461a      	mov	r2, r3
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	3301      	adds	r3, #1
 8015120:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	3301      	adds	r3, #1
 8015126:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015128:	68f8      	ldr	r0, [r7, #12]
 801512a:	f7ff f9fc 	bl	8014526 <SWAPBYTE>
 801512e:	4603      	mov	r3, r0
 8015130:	461a      	mov	r2, r3
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	80da      	strh	r2, [r3, #6]
}
 8015136:	bf00      	nop
 8015138:	3710      	adds	r7, #16
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}

0801513e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801513e:	b580      	push	{r7, lr}
 8015140:	b082      	sub	sp, #8
 8015142:	af00      	add	r7, sp, #0
 8015144:	6078      	str	r0, [r7, #4]
 8015146:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015148:	2180      	movs	r1, #128	@ 0x80
 801514a:	6878      	ldr	r0, [r7, #4]
 801514c:	f005 fd71 	bl	801ac32 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015150:	2100      	movs	r1, #0
 8015152:	6878      	ldr	r0, [r7, #4]
 8015154:	f005 fd6d 	bl	801ac32 <USBD_LL_StallEP>
}
 8015158:	bf00      	nop
 801515a:	3708      	adds	r7, #8
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}

08015160 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b086      	sub	sp, #24
 8015164:	af00      	add	r7, sp, #0
 8015166:	60f8      	str	r0, [r7, #12]
 8015168:	60b9      	str	r1, [r7, #8]
 801516a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801516c:	2300      	movs	r3, #0
 801516e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d042      	beq.n	80151fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801517a:	6938      	ldr	r0, [r7, #16]
 801517c:	f000 f842 	bl	8015204 <USBD_GetLen>
 8015180:	4603      	mov	r3, r0
 8015182:	3301      	adds	r3, #1
 8015184:	005b      	lsls	r3, r3, #1
 8015186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801518a:	d808      	bhi.n	801519e <USBD_GetString+0x3e>
 801518c:	6938      	ldr	r0, [r7, #16]
 801518e:	f000 f839 	bl	8015204 <USBD_GetLen>
 8015192:	4603      	mov	r3, r0
 8015194:	3301      	adds	r3, #1
 8015196:	b29b      	uxth	r3, r3
 8015198:	005b      	lsls	r3, r3, #1
 801519a:	b29a      	uxth	r2, r3
 801519c:	e001      	b.n	80151a2 <USBD_GetString+0x42>
 801519e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80151a6:	7dfb      	ldrb	r3, [r7, #23]
 80151a8:	68ba      	ldr	r2, [r7, #8]
 80151aa:	4413      	add	r3, r2
 80151ac:	687a      	ldr	r2, [r7, #4]
 80151ae:	7812      	ldrb	r2, [r2, #0]
 80151b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80151b2:	7dfb      	ldrb	r3, [r7, #23]
 80151b4:	3301      	adds	r3, #1
 80151b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80151b8:	7dfb      	ldrb	r3, [r7, #23]
 80151ba:	68ba      	ldr	r2, [r7, #8]
 80151bc:	4413      	add	r3, r2
 80151be:	2203      	movs	r2, #3
 80151c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80151c2:	7dfb      	ldrb	r3, [r7, #23]
 80151c4:	3301      	adds	r3, #1
 80151c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80151c8:	e013      	b.n	80151f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80151ca:	7dfb      	ldrb	r3, [r7, #23]
 80151cc:	68ba      	ldr	r2, [r7, #8]
 80151ce:	4413      	add	r3, r2
 80151d0:	693a      	ldr	r2, [r7, #16]
 80151d2:	7812      	ldrb	r2, [r2, #0]
 80151d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	3301      	adds	r3, #1
 80151da:	613b      	str	r3, [r7, #16]
    idx++;
 80151dc:	7dfb      	ldrb	r3, [r7, #23]
 80151de:	3301      	adds	r3, #1
 80151e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80151e2:	7dfb      	ldrb	r3, [r7, #23]
 80151e4:	68ba      	ldr	r2, [r7, #8]
 80151e6:	4413      	add	r3, r2
 80151e8:	2200      	movs	r2, #0
 80151ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80151ec:	7dfb      	ldrb	r3, [r7, #23]
 80151ee:	3301      	adds	r3, #1
 80151f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	781b      	ldrb	r3, [r3, #0]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d1e7      	bne.n	80151ca <USBD_GetString+0x6a>
 80151fa:	e000      	b.n	80151fe <USBD_GetString+0x9e>
    return;
 80151fc:	bf00      	nop
  }
}
 80151fe:	3718      	adds	r7, #24
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}

08015204 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015204:	b480      	push	{r7}
 8015206:	b085      	sub	sp, #20
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801520c:	2300      	movs	r3, #0
 801520e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015214:	e005      	b.n	8015222 <USBD_GetLen+0x1e>
  {
    len++;
 8015216:	7bfb      	ldrb	r3, [r7, #15]
 8015218:	3301      	adds	r3, #1
 801521a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801521c:	68bb      	ldr	r3, [r7, #8]
 801521e:	3301      	adds	r3, #1
 8015220:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015222:	68bb      	ldr	r3, [r7, #8]
 8015224:	781b      	ldrb	r3, [r3, #0]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d1f5      	bne.n	8015216 <USBD_GetLen+0x12>
  }

  return len;
 801522a:	7bfb      	ldrb	r3, [r7, #15]
}
 801522c:	4618      	mov	r0, r3
 801522e:	3714      	adds	r7, #20
 8015230:	46bd      	mov	sp, r7
 8015232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015236:	4770      	bx	lr

08015238 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b084      	sub	sp, #16
 801523c:	af00      	add	r7, sp, #0
 801523e:	60f8      	str	r0, [r7, #12]
 8015240:	60b9      	str	r1, [r7, #8]
 8015242:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	2202      	movs	r2, #2
 8015248:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	687a      	ldr	r2, [r7, #4]
 8015250:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	687a      	ldr	r2, [r7, #4]
 8015256:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	68ba      	ldr	r2, [r7, #8]
 801525c:	2100      	movs	r1, #0
 801525e:	68f8      	ldr	r0, [r7, #12]
 8015260:	f005 fd70 	bl	801ad44 <USBD_LL_Transmit>

  return USBD_OK;
 8015264:	2300      	movs	r3, #0
}
 8015266:	4618      	mov	r0, r3
 8015268:	3710      	adds	r7, #16
 801526a:	46bd      	mov	sp, r7
 801526c:	bd80      	pop	{r7, pc}

0801526e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801526e:	b580      	push	{r7, lr}
 8015270:	b084      	sub	sp, #16
 8015272:	af00      	add	r7, sp, #0
 8015274:	60f8      	str	r0, [r7, #12]
 8015276:	60b9      	str	r1, [r7, #8]
 8015278:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	68ba      	ldr	r2, [r7, #8]
 801527e:	2100      	movs	r1, #0
 8015280:	68f8      	ldr	r0, [r7, #12]
 8015282:	f005 fd5f 	bl	801ad44 <USBD_LL_Transmit>

  return USBD_OK;
 8015286:	2300      	movs	r3, #0
}
 8015288:	4618      	mov	r0, r3
 801528a:	3710      	adds	r7, #16
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b084      	sub	sp, #16
 8015294:	af00      	add	r7, sp, #0
 8015296:	60f8      	str	r0, [r7, #12]
 8015298:	60b9      	str	r1, [r7, #8]
 801529a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	2203      	movs	r2, #3
 80152a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	687a      	ldr	r2, [r7, #4]
 80152a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	687a      	ldr	r2, [r7, #4]
 80152b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	68ba      	ldr	r2, [r7, #8]
 80152b8:	2100      	movs	r1, #0
 80152ba:	68f8      	ldr	r0, [r7, #12]
 80152bc:	f005 fd63 	bl	801ad86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80152c0:	2300      	movs	r3, #0
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	3710      	adds	r7, #16
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd80      	pop	{r7, pc}

080152ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80152ca:	b580      	push	{r7, lr}
 80152cc:	b084      	sub	sp, #16
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	60f8      	str	r0, [r7, #12]
 80152d2:	60b9      	str	r1, [r7, #8]
 80152d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	68ba      	ldr	r2, [r7, #8]
 80152da:	2100      	movs	r1, #0
 80152dc:	68f8      	ldr	r0, [r7, #12]
 80152de:	f005 fd52 	bl	801ad86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80152e2:	2300      	movs	r3, #0
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	3710      	adds	r7, #16
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}

080152ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	2204      	movs	r2, #4
 80152f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80152fc:	2300      	movs	r3, #0
 80152fe:	2200      	movs	r2, #0
 8015300:	2100      	movs	r1, #0
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	f005 fd1e 	bl	801ad44 <USBD_LL_Transmit>

  return USBD_OK;
 8015308:	2300      	movs	r3, #0
}
 801530a:	4618      	mov	r0, r3
 801530c:	3708      	adds	r7, #8
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015312:	b580      	push	{r7, lr}
 8015314:	b082      	sub	sp, #8
 8015316:	af00      	add	r7, sp, #0
 8015318:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	2205      	movs	r2, #5
 801531e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015322:	2300      	movs	r3, #0
 8015324:	2200      	movs	r2, #0
 8015326:	2100      	movs	r1, #0
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	f005 fd2c 	bl	801ad86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801532e:	2300      	movs	r3, #0
}
 8015330:	4618      	mov	r0, r3
 8015332:	3708      	adds	r7, #8
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}

08015338 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b084      	sub	sp, #16
 801533c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  uint32_t now_ms = HAL_GetTick();
 801533e:	f7ef fe15 	bl	8004f6c <HAL_GetTick>
 8015342:	60f8      	str	r0, [r7, #12]
  uint32_t mins = (now_ms / 1000) / 60;
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	4a3f      	ldr	r2, [pc, #252]	@ (8015444 <MX_USB_DEVICE_Init+0x10c>)
 8015348:	fba2 2303 	umull	r2, r3, r2, r3
 801534c:	0b9b      	lsrs	r3, r3, #14
 801534e:	60bb      	str	r3, [r7, #8]
  uint32_t secs = (now_ms / 1000) % 60;
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	4a3d      	ldr	r2, [pc, #244]	@ (8015448 <MX_USB_DEVICE_Init+0x110>)
 8015354:	fba2 2303 	umull	r2, r3, r2, r3
 8015358:	099a      	lsrs	r2, r3, #6
 801535a:	4b3c      	ldr	r3, [pc, #240]	@ (801544c <MX_USB_DEVICE_Init+0x114>)
 801535c:	fba3 1302 	umull	r1, r3, r3, r2
 8015360:	0959      	lsrs	r1, r3, #5
 8015362:	460b      	mov	r3, r1
 8015364:	011b      	lsls	r3, r3, #4
 8015366:	1a5b      	subs	r3, r3, r1
 8015368:	009b      	lsls	r3, r3, #2
 801536a:	1ad3      	subs	r3, r2, r3
 801536c:	607b      	str	r3, [r7, #4]
  uint32_t ms   = now_ms % 1000;
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	4a35      	ldr	r2, [pc, #212]	@ (8015448 <MX_USB_DEVICE_Init+0x110>)
 8015372:	fba2 1203 	umull	r1, r2, r2, r3
 8015376:	0992      	lsrs	r2, r2, #6
 8015378:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801537c:	fb01 f202 	mul.w	r2, r1, r2
 8015380:	1a9b      	subs	r3, r3, r2
 8015382:	603b      	str	r3, [r7, #0]
  
  printf("[%02lu:%02lu.%03lu][USB_INIT] Starting MX_USB_DEVICE_Init...\r\n", mins, secs, ms);
 8015384:	683b      	ldr	r3, [r7, #0]
 8015386:	687a      	ldr	r2, [r7, #4]
 8015388:	68b9      	ldr	r1, [r7, #8]
 801538a:	4831      	ldr	r0, [pc, #196]	@ (8015450 <MX_USB_DEVICE_Init+0x118>)
 801538c:	f005 fe38 	bl	801b000 <iprintf>

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8015390:	2201      	movs	r2, #1
 8015392:	4930      	ldr	r1, [pc, #192]	@ (8015454 <MX_USB_DEVICE_Init+0x11c>)
 8015394:	4830      	ldr	r0, [pc, #192]	@ (8015458 <MX_USB_DEVICE_Init+0x120>)
 8015396:	f7fe fcf7 	bl	8013d88 <USBD_Init>
 801539a:	4603      	mov	r3, r0
 801539c:	2b00      	cmp	r3, #0
 801539e:	d007      	beq.n	80153b0 <MX_USB_DEVICE_Init+0x78>
  {
    printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_Init FAILED\r\n", mins, secs, ms);
 80153a0:	683b      	ldr	r3, [r7, #0]
 80153a2:	687a      	ldr	r2, [r7, #4]
 80153a4:	68b9      	ldr	r1, [r7, #8]
 80153a6:	482d      	ldr	r0, [pc, #180]	@ (801545c <MX_USB_DEVICE_Init+0x124>)
 80153a8:	f005 fe2a 	bl	801b000 <iprintf>
    Error_Handler();
 80153ac:	f7ed fd76 	bl	8002e9c <Error_Handler>
  }
  printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_Init OK\r\n", mins, secs, ms);
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	687a      	ldr	r2, [r7, #4]
 80153b4:	68b9      	ldr	r1, [r7, #8]
 80153b6:	482a      	ldr	r0, [pc, #168]	@ (8015460 <MX_USB_DEVICE_Init+0x128>)
 80153b8:	f005 fe22 	bl	801b000 <iprintf>

  /* Register composite class: CDC (IF0/1) + Vendor (IF2) */
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC_VENDOR) != USBD_OK)
 80153bc:	4929      	ldr	r1, [pc, #164]	@ (8015464 <MX_USB_DEVICE_Init+0x12c>)
 80153be:	4826      	ldr	r0, [pc, #152]	@ (8015458 <MX_USB_DEVICE_Init+0x120>)
 80153c0:	f7fe fd12 	bl	8013de8 <USBD_RegisterClass>
 80153c4:	4603      	mov	r3, r0
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d007      	beq.n	80153da <MX_USB_DEVICE_Init+0xa2>
  {
    printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_RegisterClass FAILED\r\n", mins, secs, ms);
 80153ca:	683b      	ldr	r3, [r7, #0]
 80153cc:	687a      	ldr	r2, [r7, #4]
 80153ce:	68b9      	ldr	r1, [r7, #8]
 80153d0:	4825      	ldr	r0, [pc, #148]	@ (8015468 <MX_USB_DEVICE_Init+0x130>)
 80153d2:	f005 fe15 	bl	801b000 <iprintf>
    Error_Handler();
 80153d6:	f7ed fd61 	bl	8002e9c <Error_Handler>
  }
  printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_RegisterClass OK\r\n", mins, secs, ms);
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	687a      	ldr	r2, [r7, #4]
 80153de:	68b9      	ldr	r1, [r7, #8]
 80153e0:	4822      	ldr	r0, [pc, #136]	@ (801546c <MX_USB_DEVICE_Init+0x134>)
 80153e2:	f005 fe0d 	bl	801b000 <iprintf>

  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80153e6:	4922      	ldr	r1, [pc, #136]	@ (8015470 <MX_USB_DEVICE_Init+0x138>)
 80153e8:	481b      	ldr	r0, [pc, #108]	@ (8015458 <MX_USB_DEVICE_Init+0x120>)
 80153ea:	f7fe fbfe 	bl	8013bea <USBD_CDC_RegisterInterface>
 80153ee:	4603      	mov	r3, r0
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d007      	beq.n	8015404 <MX_USB_DEVICE_Init+0xcc>
  {
    printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_CDC_RegisterInterface FAILED\r\n", mins, secs, ms);
 80153f4:	683b      	ldr	r3, [r7, #0]
 80153f6:	687a      	ldr	r2, [r7, #4]
 80153f8:	68b9      	ldr	r1, [r7, #8]
 80153fa:	481e      	ldr	r0, [pc, #120]	@ (8015474 <MX_USB_DEVICE_Init+0x13c>)
 80153fc:	f005 fe00 	bl	801b000 <iprintf>
    Error_Handler();
 8015400:	f7ed fd4c 	bl	8002e9c <Error_Handler>
  }
  printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_CDC_RegisterInterface OK\r\n", mins, secs, ms);
 8015404:	683b      	ldr	r3, [r7, #0]
 8015406:	687a      	ldr	r2, [r7, #4]
 8015408:	68b9      	ldr	r1, [r7, #8]
 801540a:	481b      	ldr	r0, [pc, #108]	@ (8015478 <MX_USB_DEVICE_Init+0x140>)
 801540c:	f005 fdf8 	bl	801b000 <iprintf>

  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8015410:	4811      	ldr	r0, [pc, #68]	@ (8015458 <MX_USB_DEVICE_Init+0x120>)
 8015412:	f7fe fd1f 	bl	8013e54 <USBD_Start>
 8015416:	4603      	mov	r3, r0
 8015418:	2b00      	cmp	r3, #0
 801541a:	d007      	beq.n	801542c <MX_USB_DEVICE_Init+0xf4>
  {
    printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_Start FAILED\r\n", mins, secs, ms);
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	687a      	ldr	r2, [r7, #4]
 8015420:	68b9      	ldr	r1, [r7, #8]
 8015422:	4816      	ldr	r0, [pc, #88]	@ (801547c <MX_USB_DEVICE_Init+0x144>)
 8015424:	f005 fdec 	bl	801b000 <iprintf>
    Error_Handler();
 8015428:	f7ed fd38 	bl	8002e9c <Error_Handler>
  }
  printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_Start OK - device should enumerate now\r\n", mins, secs, ms);
 801542c:	683b      	ldr	r3, [r7, #0]
 801542e:	687a      	ldr	r2, [r7, #4]
 8015430:	68b9      	ldr	r1, [r7, #8]
 8015432:	4813      	ldr	r0, [pc, #76]	@ (8015480 <MX_USB_DEVICE_Init+0x148>)
 8015434:	f005 fde4 	bl	801b000 <iprintf>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015438:	f7f6 f98e 	bl	800b758 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801543c:	bf00      	nop
 801543e:	3710      	adds	r7, #16
 8015440:	46bd      	mov	sp, r7
 8015442:	bd80      	pop	{r7, pc}
 8015444:	45e7b273 	.word	0x45e7b273
 8015448:	10624dd3 	.word	0x10624dd3
 801544c:	88888889 	.word	0x88888889
 8015450:	0801ce28 	.word	0x0801ce28
 8015454:	240001f8 	.word	0x240001f8
 8015458:	2400d8c8 	.word	0x2400d8c8
 801545c:	0801ce68 	.word	0x0801ce68
 8015460:	0801ce9c 	.word	0x0801ce9c
 8015464:	240001ac 	.word	0x240001ac
 8015468:	0801cecc 	.word	0x0801cecc
 801546c:	0801cf08 	.word	0x0801cf08
 8015470:	240001e4 	.word	0x240001e4
 8015474:	0801cf40 	.word	0x0801cf40
 8015478:	0801cf84 	.word	0x0801cf84
 801547c:	0801cfc4 	.word	0x0801cfc4
 8015480:	0801cff8 	.word	0x0801cff8

08015484 <vnd_update_lcd_params>:
static uint32_t diag_current_pair_seq = 0xFFFFFFFFu;
static uint16_t win_start0 = 0, win_len0 = 0, win_start1 = 0, win_len1 = 0;

/* Локальная утилита: обновить LCD параметрами, присланными хостом */
static void vnd_update_lcd_params(void)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b082      	sub	sp, #8
 8015488:	af00      	add	r7, sp, #0
    /* Частота блоков (пар кадров A+B): в FULL берём из периода пары, в DIAG — diag_hz */
    uint16_t block_hz = 0;
 801548a:	2300      	movs	r3, #0
 801548c:	80fb      	strh	r3, [r7, #6]
    if(full_mode) {
 801548e:	4b19      	ldr	r3, [pc, #100]	@ (80154f4 <vnd_update_lcd_params+0x70>)
 8015490:	781b      	ldrb	r3, [r3, #0]
 8015492:	b2db      	uxtb	r3, r3
 8015494:	2b00      	cmp	r3, #0
 8015496:	d00f      	beq.n	80154b8 <vnd_update_lcd_params+0x34>
        uint16_t pp = vnd_pair_period_ms;
 8015498:	4b17      	ldr	r3, [pc, #92]	@ (80154f8 <vnd_update_lcd_params+0x74>)
 801549a:	881b      	ldrh	r3, [r3, #0]
 801549c:	80bb      	strh	r3, [r7, #4]
        block_hz = (pp > 0) ? (uint16_t)(1000u / pp) : 0u;
 801549e:	88bb      	ldrh	r3, [r7, #4]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d006      	beq.n	80154b2 <vnd_update_lcd_params+0x2e>
 80154a4:	88bb      	ldrh	r3, [r7, #4]
 80154a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80154aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80154ae:	b29b      	uxth	r3, r3
 80154b0:	e000      	b.n	80154b4 <vnd_update_lcd_params+0x30>
 80154b2:	2300      	movs	r3, #0
 80154b4:	80fb      	strh	r3, [r7, #6]
 80154b6:	e002      	b.n	80154be <vnd_update_lcd_params+0x3a>
    } else {
        block_hz = diag_hz;
 80154b8:	4b10      	ldr	r3, [pc, #64]	@ (80154fc <vnd_update_lcd_params+0x78>)
 80154ba:	881b      	ldrh	r3, [r3, #0]
 80154bc:	80fb      	strh	r3, [r7, #6]
    }

    /* Кол-во сэмплов на канал в кадре: если явно задано командой — используем его, иначе активное */
    uint16_t frame_samples = (vnd_frame_samples_req != 0) ? vnd_frame_samples_req
 80154be:	4b10      	ldr	r3, [pc, #64]	@ (8015500 <vnd_update_lcd_params+0x7c>)
 80154c0:	881b      	ldrh	r3, [r3, #0]
 80154c2:	b29b      	uxth	r3, r3
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d10c      	bne.n	80154e2 <vnd_update_lcd_params+0x5e>
                                : ((cur_samples_per_frame != 0) ? cur_samples_per_frame
 80154c8:	4b0e      	ldr	r3, [pc, #56]	@ (8015504 <vnd_update_lcd_params+0x80>)
 80154ca:	881b      	ldrh	r3, [r3, #0]
 80154cc:	b29b      	uxth	r3, r3
    uint16_t frame_samples = (vnd_frame_samples_req != 0) ? vnd_frame_samples_req
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d103      	bne.n	80154da <vnd_update_lcd_params+0x56>
                                                                : adc_stream_get_active_samples());
 80154d2:	f7eb f849 	bl	8000568 <adc_stream_get_active_samples>
 80154d6:	4603      	mov	r3, r0
 80154d8:	e006      	b.n	80154e8 <vnd_update_lcd_params+0x64>
    uint16_t frame_samples = (vnd_frame_samples_req != 0) ? vnd_frame_samples_req
 80154da:	4b0a      	ldr	r3, [pc, #40]	@ (8015504 <vnd_update_lcd_params+0x80>)
 80154dc:	881b      	ldrh	r3, [r3, #0]
 80154de:	b29b      	uxth	r3, r3
 80154e0:	e002      	b.n	80154e8 <vnd_update_lcd_params+0x64>
 80154e2:	4b07      	ldr	r3, [pc, #28]	@ (8015500 <vnd_update_lcd_params+0x7c>)
 80154e4:	881b      	ldrh	r3, [r3, #0]
 80154e6:	b29b      	uxth	r3, r3
 80154e8:	807b      	strh	r3, [r7, #2]
    //     block_hz,
    //     win_start0, win_len0,
    //     win_start1, win_len1,
    //     (uint8_t)full_mode
    // );
}
 80154ea:	bf00      	nop
 80154ec:	3708      	adds	r7, #8
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}
 80154f2:	bf00      	nop
 80154f4:	2400003c 	.word	0x2400003c
 80154f8:	2400003e 	.word	0x2400003e
 80154fc:	24000042 	.word	0x24000042
 8015500:	2400dc3a 	.word	0x2400dc3a
 8015504:	2400dbac 	.word	0x2400dbac

08015508 <vnd_cdc_duplicate_preview>:
static uint32_t cdc_last_send_ms = 0;       /* для троттлинга */
static char     cdc_line_buf[1024];         /* статический буфер для передачи */
static uint16_t rd_le16(const uint8_t *p){ return (uint16_t)(p[0] | (p[1] << 8)); }
static uint32_t rd_le32(const uint8_t *p){ return (uint32_t)(p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24)); }
static void vnd_cdc_duplicate_preview(const uint8_t *buf, uint16_t len, const char *tag)
{
 8015508:	b480      	push	{r7}
 801550a:	b085      	sub	sp, #20
 801550c:	af00      	add	r7, sp, #0
 801550e:	60f8      	str	r0, [r7, #12]
 8015510:	460b      	mov	r3, r1
 8015512:	607a      	str	r2, [r7, #4]
 8015514:	817b      	strh	r3, [r7, #10]
    /* При отключённом превью не выводим копию потока в CDC */
#if !VND_CDC_PREVIEW_ENABLE
    (void)buf; (void)len; (void)tag;
    return;
 8015516:	bf00      	nop
    uint8_t rc = CDC_Transmit_HS((uint8_t*)cdc_line_buf, (uint16_t)off);
    if (rc == USBD_OK) {
        cdc_last_send_ms = now;
    }
#endif
}
 8015518:	3714      	adds	r7, #20
 801551a:	46bd      	mov	sp, r7
 801551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015520:	4770      	bx	lr
	...

08015524 <cdc_logf>:
static uint32_t cdc_stats_last_ms = 0;         /* последняя отметка отправки статистики */
static uint64_t cdc_stats_prev_bytes = 0ULL;   /* предыдущее значение счётчика байт */
static char     cdc_evt_buf[160];              /* буфер форматирования событий */

static void cdc_logf(const char *fmt, ...)
{
 8015524:	b40f      	push	{r0, r1, r2, r3}
 8015526:	b580      	push	{r7, lr}
 8015528:	b082      	sub	sp, #8
 801552a:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, fmt);
 801552c:	f107 0314 	add.w	r3, r7, #20
 8015530:	603b      	str	r3, [r7, #0]
    int n = vsnprintf(cdc_evt_buf, sizeof(cdc_evt_buf) - 2, fmt, ap);
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	693a      	ldr	r2, [r7, #16]
 8015536:	219e      	movs	r1, #158	@ 0x9e
 8015538:	4812      	ldr	r0, [pc, #72]	@ (8015584 <cdc_logf+0x60>)
 801553a:	f005 ff2d 	bl	801b398 <vsniprintf>
 801553e:	6078      	str	r0, [r7, #4]
    va_end(ap);
    if(n < 0) return;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2b00      	cmp	r3, #0
 8015544:	db17      	blt.n	8015576 <cdc_logf+0x52>
    if(n > (int)sizeof(cdc_evt_buf) - 2) n = (int)sizeof(cdc_evt_buf) - 2;
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2b9e      	cmp	r3, #158	@ 0x9e
 801554a:	dd01      	ble.n	8015550 <cdc_logf+0x2c>
 801554c:	239e      	movs	r3, #158	@ 0x9e
 801554e:	607b      	str	r3, [r7, #4]
    cdc_evt_buf[n++] = '\r';
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	1c5a      	adds	r2, r3, #1
 8015554:	607a      	str	r2, [r7, #4]
 8015556:	4a0b      	ldr	r2, [pc, #44]	@ (8015584 <cdc_logf+0x60>)
 8015558:	210d      	movs	r1, #13
 801555a:	54d1      	strb	r1, [r2, r3]
    cdc_evt_buf[n++] = '\n';
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	1c5a      	adds	r2, r3, #1
 8015560:	607a      	str	r2, [r7, #4]
 8015562:	4a08      	ldr	r2, [pc, #32]	@ (8015584 <cdc_logf+0x60>)
 8015564:	210a      	movs	r1, #10
 8015566:	54d1      	strb	r1, [r2, r3]
    /* неблокирующая попытка: если CDC занят — событие может быть пропущено */
    (void)CDC_Transmit_HS((uint8_t*)cdc_evt_buf, (uint16_t)n);
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	b29b      	uxth	r3, r3
 801556c:	4619      	mov	r1, r3
 801556e:	4805      	ldr	r0, [pc, #20]	@ (8015584 <cdc_logf+0x60>)
 8015570:	f004 ff7c 	bl	801a46c <CDC_Transmit_HS>
 8015574:	e000      	b.n	8015578 <cdc_logf+0x54>
    if(n < 0) return;
 8015576:	bf00      	nop
}
 8015578:	3708      	adds	r7, #8
 801557a:	46bd      	mov	sp, r7
 801557c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015580:	b004      	add	sp, #16
 8015582:	4770      	bx	lr
 8015584:	2400f298 	.word	0x2400f298

08015588 <vnd_cdc_periodic_stats>:

static void vnd_cdc_periodic_stats(uint32_t now_ms)
{
 8015588:	b5b0      	push	{r4, r5, r7, lr}
 801558a:	b08c      	sub	sp, #48	@ 0x30
 801558c:	af04      	add	r7, sp, #16
 801558e:	6078      	str	r0, [r7, #4]
    /* В диагностическом режиме не трогаем CDC вовсе — уменьшаем накладные расходы */
    if(diag_mode_active){ return; }
 8015590:	4923      	ldr	r1, [pc, #140]	@ (8015620 <vnd_cdc_periodic_stats+0x98>)
 8015592:	7809      	ldrb	r1, [r1, #0]
 8015594:	2900      	cmp	r1, #0
 8015596:	d13d      	bne.n	8015614 <vnd_cdc_periodic_stats+0x8c>
    if(now_ms - cdc_stats_last_ms < 1000) return; /* не чаще 1 Гц */
 8015598:	4922      	ldr	r1, [pc, #136]	@ (8015624 <vnd_cdc_periodic_stats+0x9c>)
 801559a:	6809      	ldr	r1, [r1, #0]
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	1a41      	subs	r1, r0, r1
 80155a0:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 80155a4:	d338      	bcc.n	8015618 <vnd_cdc_periodic_stats+0x90>
    cdc_stats_last_ms = now_ms;
 80155a6:	481f      	ldr	r0, [pc, #124]	@ (8015624 <vnd_cdc_periodic_stats+0x9c>)
 80155a8:	6879      	ldr	r1, [r7, #4]
 80155aa:	6001      	str	r1, [r0, #0]
    uint64_t cur = vnd_total_tx_bytes;
 80155ac:	491e      	ldr	r1, [pc, #120]	@ (8015628 <vnd_cdc_periodic_stats+0xa0>)
 80155ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155b2:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint64_t d   = (cur >= cdc_stats_prev_bytes) ? (cur - cdc_stats_prev_bytes) : 0ULL;
 80155b6:	491d      	ldr	r1, [pc, #116]	@ (801562c <vnd_cdc_periodic_stats+0xa4>)
 80155b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155bc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80155c0:	4284      	cmp	r4, r0
 80155c2:	eb75 0101 	sbcs.w	r1, r5, r1
 80155c6:	d308      	bcc.n	80155da <vnd_cdc_periodic_stats+0x52>
 80155c8:	4918      	ldr	r1, [pc, #96]	@ (801562c <vnd_cdc_periodic_stats+0xa4>)
 80155ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155ce:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80155d2:	1a22      	subs	r2, r4, r0
 80155d4:	eb65 0301 	sbc.w	r3, r5, r1
 80155d8:	e003      	b.n	80155e2 <vnd_cdc_periodic_stats+0x5a>
 80155da:	f04f 0200 	mov.w	r2, #0
 80155de:	f04f 0300 	mov.w	r3, #0
 80155e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    cdc_stats_prev_bytes = cur;
 80155e6:	4911      	ldr	r1, [pc, #68]	@ (801562c <vnd_cdc_periodic_stats+0xa4>)
 80155e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80155ec:	e9c1 2300 	strd	r2, r3, [r1]
    uint32_t bps = (uint32_t)d; /* за ~1 секунду */
 80155f0:	693b      	ldr	r3, [r7, #16]
 80155f2:	60fb      	str	r3, [r7, #12]
    cdc_logf("STAT bytes_total=%llu bps=%lu streaming=%u diag=%u",
 80155f4:	4b0e      	ldr	r3, [pc, #56]	@ (8015630 <vnd_cdc_periodic_stats+0xa8>)
 80155f6:	781b      	ldrb	r3, [r3, #0]
 80155f8:	b2db      	uxtb	r3, r3
 80155fa:	461a      	mov	r2, r3
 80155fc:	4b08      	ldr	r3, [pc, #32]	@ (8015620 <vnd_cdc_periodic_stats+0x98>)
 80155fe:	781b      	ldrb	r3, [r3, #0]
 8015600:	9302      	str	r3, [sp, #8]
 8015602:	9201      	str	r2, [sp, #4]
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	9300      	str	r3, [sp, #0]
 8015608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801560c:	4809      	ldr	r0, [pc, #36]	@ (8015634 <vnd_cdc_periodic_stats+0xac>)
 801560e:	f7ff ff89 	bl	8015524 <cdc_logf>
 8015612:	e002      	b.n	801561a <vnd_cdc_periodic_stats+0x92>
    if(diag_mode_active){ return; }
 8015614:	bf00      	nop
 8015616:	e000      	b.n	801561a <vnd_cdc_periodic_stats+0x92>
    if(now_ms - cdc_stats_last_ms < 1000) return; /* не чаще 1 Гц */
 8015618:	bf00      	nop
             (unsigned long long)cur, (unsigned long)bps, (unsigned)streaming, (unsigned)diag_mode_active);
}
 801561a:	3720      	adds	r7, #32
 801561c:	46bd      	mov	sp, r7
 801561e:	bdb0      	pop	{r4, r5, r7, pc}
 8015620:	2400dcf1 	.word	0x2400dcf1
 8015624:	2400f288 	.word	0x2400f288
 8015628:	2400dc30 	.word	0x2400dc30
 801562c:	2400f290 	.word	0x2400f290
 8015630:	2400dba4 	.word	0x2400dba4
 8015634:	0801d044 	.word	0x0801d044

08015638 <vnd_tx_meta_depth>:
/* Диагностические счётчики метаданных */
static uint32_t meta_push_total = 0;
static uint32_t meta_pop_total = 0;
static uint32_t meta_empty_events = 0;
static uint32_t meta_overflow_events = 0;
static inline uint8_t vnd_tx_meta_depth(void){
 8015638:	b480      	push	{r7}
 801563a:	b083      	sub	sp, #12
 801563c:	af00      	add	r7, sp, #0
    uint8_t h = vnd_tx_meta_head, t = vnd_tx_meta_tail;
 801563e:	4b0d      	ldr	r3, [pc, #52]	@ (8015674 <vnd_tx_meta_depth+0x3c>)
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	71fb      	strb	r3, [r7, #7]
 8015644:	4b0c      	ldr	r3, [pc, #48]	@ (8015678 <vnd_tx_meta_depth+0x40>)
 8015646:	781b      	ldrb	r3, [r3, #0]
 8015648:	71bb      	strb	r3, [r7, #6]
    if(h>=t) return (uint8_t)(h - t);
 801564a:	79fa      	ldrb	r2, [r7, #7]
 801564c:	79bb      	ldrb	r3, [r7, #6]
 801564e:	429a      	cmp	r2, r3
 8015650:	d304      	bcc.n	801565c <vnd_tx_meta_depth+0x24>
 8015652:	79fa      	ldrb	r2, [r7, #7]
 8015654:	79bb      	ldrb	r3, [r7, #6]
 8015656:	1ad3      	subs	r3, r2, r3
 8015658:	b2db      	uxtb	r3, r3
 801565a:	e005      	b.n	8015668 <vnd_tx_meta_depth+0x30>
    return (uint8_t)(VND_TX_META_FIFO - (t - h));
 801565c:	79fa      	ldrb	r2, [r7, #7]
 801565e:	79bb      	ldrb	r3, [r7, #6]
 8015660:	1ad3      	subs	r3, r2, r3
 8015662:	b2db      	uxtb	r3, r3
 8015664:	3308      	adds	r3, #8
 8015666:	b2db      	uxtb	r3, r3
}
 8015668:	4618      	mov	r0, r3
 801566a:	370c      	adds	r7, #12
 801566c:	46bd      	mov	sp, r7
 801566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015672:	4770      	bx	lr
 8015674:	2401a060 	.word	0x2401a060
 8015678:	2401a061 	.word	0x2401a061

0801567c <vnd_tx_meta_push>:
static inline void vnd_tx_meta_push(uint8_t is_frame, uint8_t flags, uint32_t seq_field){
 801567c:	b590      	push	{r4, r7, lr}
 801567e:	b085      	sub	sp, #20
 8015680:	af00      	add	r7, sp, #0
 8015682:	4603      	mov	r3, r0
 8015684:	603a      	str	r2, [r7, #0]
 8015686:	71fb      	strb	r3, [r7, #7]
 8015688:	460b      	mov	r3, r1
 801568a:	71bb      	strb	r3, [r7, #6]
    uint8_t next = (uint8_t)((vnd_tx_meta_head + 1u) % VND_TX_META_FIFO);
 801568c:	4b2b      	ldr	r3, [pc, #172]	@ (801573c <vnd_tx_meta_push+0xc0>)
 801568e:	781b      	ldrb	r3, [r3, #0]
 8015690:	3301      	adds	r3, #1
 8015692:	b2db      	uxtb	r3, r3
 8015694:	f003 0307 	and.w	r3, r3, #7
 8015698:	73fb      	strb	r3, [r7, #15]
    if(next == vnd_tx_meta_tail){
 801569a:	4b29      	ldr	r3, [pc, #164]	@ (8015740 <vnd_tx_meta_push+0xc4>)
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	7bfa      	ldrb	r2, [r7, #15]
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d10d      	bne.n	80156c0 <vnd_tx_meta_push+0x44>
        /* overflow - drop oldest */
        vnd_tx_meta_tail = (uint8_t)((vnd_tx_meta_tail + 1u) % VND_TX_META_FIFO);
 80156a4:	4b26      	ldr	r3, [pc, #152]	@ (8015740 <vnd_tx_meta_push+0xc4>)
 80156a6:	781b      	ldrb	r3, [r3, #0]
 80156a8:	3301      	adds	r3, #1
 80156aa:	b2db      	uxtb	r3, r3
 80156ac:	f003 0307 	and.w	r3, r3, #7
 80156b0:	b2da      	uxtb	r2, r3
 80156b2:	4b23      	ldr	r3, [pc, #140]	@ (8015740 <vnd_tx_meta_push+0xc4>)
 80156b4:	701a      	strb	r2, [r3, #0]
        meta_overflow_events++;
 80156b6:	4b23      	ldr	r3, [pc, #140]	@ (8015744 <vnd_tx_meta_push+0xc8>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	3301      	adds	r3, #1
 80156bc:	4a21      	ldr	r2, [pc, #132]	@ (8015744 <vnd_tx_meta_push+0xc8>)
 80156be:	6013      	str	r3, [r2, #0]
        VND_LOG("WARN META_FIFO_OVF depth_before=%u", (unsigned)vnd_tx_meta_depth());
    }
    vnd_tx_meta_fifo[vnd_tx_meta_head].is_frame = is_frame;
 80156c0:	4b1e      	ldr	r3, [pc, #120]	@ (801573c <vnd_tx_meta_push+0xc0>)
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	4619      	mov	r1, r3
 80156c6:	4a20      	ldr	r2, [pc, #128]	@ (8015748 <vnd_tx_meta_push+0xcc>)
 80156c8:	460b      	mov	r3, r1
 80156ca:	005b      	lsls	r3, r3, #1
 80156cc:	440b      	add	r3, r1
 80156ce:	009b      	lsls	r3, r3, #2
 80156d0:	4413      	add	r3, r2
 80156d2:	79fa      	ldrb	r2, [r7, #7]
 80156d4:	701a      	strb	r2, [r3, #0]
    vnd_tx_meta_fifo[vnd_tx_meta_head].flags = flags;
 80156d6:	4b19      	ldr	r3, [pc, #100]	@ (801573c <vnd_tx_meta_push+0xc0>)
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	4619      	mov	r1, r3
 80156dc:	4a1a      	ldr	r2, [pc, #104]	@ (8015748 <vnd_tx_meta_push+0xcc>)
 80156de:	460b      	mov	r3, r1
 80156e0:	005b      	lsls	r3, r3, #1
 80156e2:	440b      	add	r3, r1
 80156e4:	009b      	lsls	r3, r3, #2
 80156e6:	4413      	add	r3, r2
 80156e8:	3301      	adds	r3, #1
 80156ea:	79ba      	ldrb	r2, [r7, #6]
 80156ec:	701a      	strb	r2, [r3, #0]
    vnd_tx_meta_fifo[vnd_tx_meta_head].seq_field = seq_field;
 80156ee:	4b13      	ldr	r3, [pc, #76]	@ (801573c <vnd_tx_meta_push+0xc0>)
 80156f0:	781b      	ldrb	r3, [r3, #0]
 80156f2:	4619      	mov	r1, r3
 80156f4:	4a14      	ldr	r2, [pc, #80]	@ (8015748 <vnd_tx_meta_push+0xcc>)
 80156f6:	460b      	mov	r3, r1
 80156f8:	005b      	lsls	r3, r3, #1
 80156fa:	440b      	add	r3, r1
 80156fc:	009b      	lsls	r3, r3, #2
 80156fe:	4413      	add	r3, r2
 8015700:	3304      	adds	r3, #4
 8015702:	683a      	ldr	r2, [r7, #0]
 8015704:	601a      	str	r2, [r3, #0]
    vnd_tx_meta_fifo[vnd_tx_meta_head].push_tick = HAL_GetTick();
 8015706:	4b0d      	ldr	r3, [pc, #52]	@ (801573c <vnd_tx_meta_push+0xc0>)
 8015708:	781b      	ldrb	r3, [r3, #0]
 801570a:	461c      	mov	r4, r3
 801570c:	f7ef fc2e 	bl	8004f6c <HAL_GetTick>
 8015710:	4602      	mov	r2, r0
 8015712:	490d      	ldr	r1, [pc, #52]	@ (8015748 <vnd_tx_meta_push+0xcc>)
 8015714:	4623      	mov	r3, r4
 8015716:	005b      	lsls	r3, r3, #1
 8015718:	4423      	add	r3, r4
 801571a:	009b      	lsls	r3, r3, #2
 801571c:	440b      	add	r3, r1
 801571e:	3308      	adds	r3, #8
 8015720:	601a      	str	r2, [r3, #0]
    vnd_tx_meta_head = next;
 8015722:	4a06      	ldr	r2, [pc, #24]	@ (801573c <vnd_tx_meta_push+0xc0>)
 8015724:	7bfb      	ldrb	r3, [r7, #15]
 8015726:	7013      	strb	r3, [r2, #0]
    meta_push_total++;
 8015728:	4b08      	ldr	r3, [pc, #32]	@ (801574c <vnd_tx_meta_push+0xd0>)
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	3301      	adds	r3, #1
 801572e:	4a07      	ldr	r2, [pc, #28]	@ (801574c <vnd_tx_meta_push+0xd0>)
 8015730:	6013      	str	r3, [r2, #0]
    /* Умеренный лог только для рабочих кадров (A/B/TEST); STAT слишком часты не будут */
    if(is_frame){
        VND_LOG("META_PUSH fl=0x%02X seq=%lu depth=%u", (unsigned)flags, (unsigned long)seq_field, (unsigned)vnd_tx_meta_depth());
    }
}
 8015732:	bf00      	nop
 8015734:	3714      	adds	r7, #20
 8015736:	46bd      	mov	sp, r7
 8015738:	bd90      	pop	{r4, r7, pc}
 801573a:	bf00      	nop
 801573c:	2401a060 	.word	0x2401a060
 8015740:	2401a061 	.word	0x2401a061
 8015744:	2401a070 	.word	0x2401a070
 8015748:	2401a000 	.word	0x2401a000
 801574c:	2401a064 	.word	0x2401a064

08015750 <vnd_tx_meta_pop>:
static inline int vnd_tx_meta_pop(vnd_tx_meta_t *out){
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
    if(vnd_tx_meta_tail == vnd_tx_meta_head){ meta_empty_events++; return 0; } /* empty */
 8015758:	4b17      	ldr	r3, [pc, #92]	@ (80157b8 <vnd_tx_meta_pop+0x68>)
 801575a:	781a      	ldrb	r2, [r3, #0]
 801575c:	4b17      	ldr	r3, [pc, #92]	@ (80157bc <vnd_tx_meta_pop+0x6c>)
 801575e:	781b      	ldrb	r3, [r3, #0]
 8015760:	429a      	cmp	r2, r3
 8015762:	d106      	bne.n	8015772 <vnd_tx_meta_pop+0x22>
 8015764:	4b16      	ldr	r3, [pc, #88]	@ (80157c0 <vnd_tx_meta_pop+0x70>)
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	3301      	adds	r3, #1
 801576a:	4a15      	ldr	r2, [pc, #84]	@ (80157c0 <vnd_tx_meta_pop+0x70>)
 801576c:	6013      	str	r3, [r2, #0]
 801576e:	2300      	movs	r3, #0
 8015770:	e01c      	b.n	80157ac <vnd_tx_meta_pop+0x5c>
    *out = vnd_tx_meta_fifo[vnd_tx_meta_tail];
 8015772:	4b11      	ldr	r3, [pc, #68]	@ (80157b8 <vnd_tx_meta_pop+0x68>)
 8015774:	781b      	ldrb	r3, [r3, #0]
 8015776:	4619      	mov	r1, r3
 8015778:	6878      	ldr	r0, [r7, #4]
 801577a:	4a12      	ldr	r2, [pc, #72]	@ (80157c4 <vnd_tx_meta_pop+0x74>)
 801577c:	460b      	mov	r3, r1
 801577e:	005b      	lsls	r3, r3, #1
 8015780:	440b      	add	r3, r1
 8015782:	009b      	lsls	r3, r3, #2
 8015784:	441a      	add	r2, r3
 8015786:	4603      	mov	r3, r0
 8015788:	ca07      	ldmia	r2, {r0, r1, r2}
 801578a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    vnd_tx_meta_tail = (uint8_t)((vnd_tx_meta_tail + 1u) % VND_TX_META_FIFO);
 801578e:	4b0a      	ldr	r3, [pc, #40]	@ (80157b8 <vnd_tx_meta_pop+0x68>)
 8015790:	781b      	ldrb	r3, [r3, #0]
 8015792:	3301      	adds	r3, #1
 8015794:	b2db      	uxtb	r3, r3
 8015796:	f003 0307 	and.w	r3, r3, #7
 801579a:	b2da      	uxtb	r2, r3
 801579c:	4b06      	ldr	r3, [pc, #24]	@ (80157b8 <vnd_tx_meta_pop+0x68>)
 801579e:	701a      	strb	r2, [r3, #0]
    meta_pop_total++;
 80157a0:	4b09      	ldr	r3, [pc, #36]	@ (80157c8 <vnd_tx_meta_pop+0x78>)
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	3301      	adds	r3, #1
 80157a6:	4a08      	ldr	r2, [pc, #32]	@ (80157c8 <vnd_tx_meta_pop+0x78>)
 80157a8:	6013      	str	r3, [r2, #0]
    return 1;
 80157aa:	2301      	movs	r3, #1
}
 80157ac:	4618      	mov	r0, r3
 80157ae:	370c      	adds	r7, #12
 80157b0:	46bd      	mov	sp, r7
 80157b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b6:	4770      	bx	lr
 80157b8:	2401a061 	.word	0x2401a061
 80157bc:	2401a060 	.word	0x2401a060
 80157c0:	2401a06c 	.word	0x2401a06c
 80157c4:	2401a000 	.word	0x2401a000
 80157c8:	2401a068 	.word	0x2401a068

080157cc <vnd_tx_meta_after>:
/* Унифицированная фиксация метаданных после успешного запуска передачи */
static inline void vnd_tx_meta_after(uint8_t *buf, uint16_t len){
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b086      	sub	sp, #24
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
 80157d4:	460b      	mov	r3, r1
 80157d6:	807b      	strh	r3, [r7, #2]
    uint8_t is_frame = 0, flags = 0; uint32_t seq_field = 0;
 80157d8:	2300      	movs	r3, #0
 80157da:	75fb      	strb	r3, [r7, #23]
 80157dc:	2300      	movs	r3, #0
 80157de:	75bb      	strb	r3, [r7, #22]
 80157e0:	2300      	movs	r3, #0
 80157e2:	613b      	str	r3, [r7, #16]
    if(len >= VND_FRAME_HDR_SIZE){
 80157e4:	887b      	ldrh	r3, [r7, #2]
 80157e6:	2b1f      	cmp	r3, #31
 80157e8:	d910      	bls.n	801580c <vnd_tx_meta_after+0x40>
        const vnd_frame_hdr_t *h = (const vnd_frame_hdr_t*)buf;
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	60fb      	str	r3, [r7, #12]
        if(h->magic == 0xA55A){ is_frame = 1; flags = h->flags; seq_field = h->seq; }
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	881b      	ldrh	r3, [r3, #0]
 80157f2:	b29b      	uxth	r3, r3
 80157f4:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80157f8:	4293      	cmp	r3, r2
 80157fa:	d107      	bne.n	801580c <vnd_tx_meta_after+0x40>
 80157fc:	2301      	movs	r3, #1
 80157fe:	75fb      	strb	r3, [r7, #23]
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	78db      	ldrb	r3, [r3, #3]
 8015804:	75bb      	strb	r3, [r7, #22]
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	685b      	ldr	r3, [r3, #4]
 801580a:	613b      	str	r3, [r7, #16]
    }
    /* Сохраняем последнюю отправку для fallback-классификации */
    last_tx_is_frame = is_frame; last_tx_flags = flags; last_tx_seq = seq_field;
 801580c:	4a09      	ldr	r2, [pc, #36]	@ (8015834 <vnd_tx_meta_after+0x68>)
 801580e:	7dfb      	ldrb	r3, [r7, #23]
 8015810:	7013      	strb	r3, [r2, #0]
 8015812:	4a09      	ldr	r2, [pc, #36]	@ (8015838 <vnd_tx_meta_after+0x6c>)
 8015814:	7dbb      	ldrb	r3, [r7, #22]
 8015816:	7013      	strb	r3, [r2, #0]
 8015818:	4a08      	ldr	r2, [pc, #32]	@ (801583c <vnd_tx_meta_after+0x70>)
 801581a:	693b      	ldr	r3, [r7, #16]
 801581c:	6013      	str	r3, [r2, #0]
    vnd_tx_meta_push(is_frame, flags, seq_field);
 801581e:	7db9      	ldrb	r1, [r7, #22]
 8015820:	7dfb      	ldrb	r3, [r7, #23]
 8015822:	693a      	ldr	r2, [r7, #16]
 8015824:	4618      	mov	r0, r3
 8015826:	f7ff ff29 	bl	801567c <vnd_tx_meta_push>
}
 801582a:	bf00      	nop
 801582c:	3718      	adds	r7, #24
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}
 8015832:	bf00      	nop
 8015834:	2400dc20 	.word	0x2400dc20
 8015838:	2400dc21 	.word	0x2400dc21
 801583c:	2400dc24 	.word	0x2400dc24

08015840 <vnd_meta_neutralize>:
/* Нейтрализовать «застрявшую» запись в meta-FIFO (например, после ForceTxIdle),
   чтобы последующий TxCplt не принял её за реальный кадр и не исказил порядок. */
static void vnd_meta_neutralize(uint8_t flags_mask, uint32_t seq_field)
{
 8015840:	b480      	push	{r7}
 8015842:	b085      	sub	sp, #20
 8015844:	af00      	add	r7, sp, #0
 8015846:	4603      	mov	r3, r0
 8015848:	6039      	str	r1, [r7, #0]
 801584a:	71fb      	strb	r3, [r7, #7]
    uint8_t t = vnd_tx_meta_tail;
 801584c:	4b19      	ldr	r3, [pc, #100]	@ (80158b4 <vnd_meta_neutralize+0x74>)
 801584e:	781b      	ldrb	r3, [r3, #0]
 8015850:	73fb      	strb	r3, [r7, #15]
    while(t != vnd_tx_meta_head){
 8015852:	e022      	b.n	801589a <vnd_meta_neutralize+0x5a>
        vnd_tx_meta_t *m = &vnd_tx_meta_fifo[t];
 8015854:	7bfa      	ldrb	r2, [r7, #15]
 8015856:	4613      	mov	r3, r2
 8015858:	005b      	lsls	r3, r3, #1
 801585a:	4413      	add	r3, r2
 801585c:	009b      	lsls	r3, r3, #2
 801585e:	4a16      	ldr	r2, [pc, #88]	@ (80158b8 <vnd_meta_neutralize+0x78>)
 8015860:	4413      	add	r3, r2
 8015862:	60bb      	str	r3, [r7, #8]
        if(m->is_frame && (m->flags == flags_mask) && (m->seq_field == seq_field)){
 8015864:	68bb      	ldr	r3, [r7, #8]
 8015866:	781b      	ldrb	r3, [r3, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d010      	beq.n	801588e <vnd_meta_neutralize+0x4e>
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	785b      	ldrb	r3, [r3, #1]
 8015870:	79fa      	ldrb	r2, [r7, #7]
 8015872:	429a      	cmp	r2, r3
 8015874:	d10b      	bne.n	801588e <vnd_meta_neutralize+0x4e>
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	685b      	ldr	r3, [r3, #4]
 801587a:	683a      	ldr	r2, [r7, #0]
 801587c:	429a      	cmp	r2, r3
 801587e:	d106      	bne.n	801588e <vnd_meta_neutralize+0x4e>
            m->is_frame = 0; m->flags = 0; /* превратить в служебный */
 8015880:	68bb      	ldr	r3, [r7, #8]
 8015882:	2200      	movs	r2, #0
 8015884:	701a      	strb	r2, [r3, #0]
 8015886:	68bb      	ldr	r3, [r7, #8]
 8015888:	2200      	movs	r2, #0
 801588a:	705a      	strb	r2, [r3, #1]
            VND_LOG("META_NEUTRALIZE fl=0x%02X seq=%lu", (unsigned)flags_mask, (unsigned long)seq_field);
            break;
 801588c:	e00b      	b.n	80158a6 <vnd_meta_neutralize+0x66>
        }
        t = (uint8_t)((t + 1u) % VND_TX_META_FIFO);
 801588e:	7bfb      	ldrb	r3, [r7, #15]
 8015890:	3301      	adds	r3, #1
 8015892:	b2db      	uxtb	r3, r3
 8015894:	f003 0307 	and.w	r3, r3, #7
 8015898:	73fb      	strb	r3, [r7, #15]
    while(t != vnd_tx_meta_head){
 801589a:	4b08      	ldr	r3, [pc, #32]	@ (80158bc <vnd_meta_neutralize+0x7c>)
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	7bfa      	ldrb	r2, [r7, #15]
 80158a0:	429a      	cmp	r2, r3
 80158a2:	d1d7      	bne.n	8015854 <vnd_meta_neutralize+0x14>
    }
}
 80158a4:	bf00      	nop
 80158a6:	bf00      	nop
 80158a8:	3714      	adds	r7, #20
 80158aa:	46bd      	mov	sp, r7
 80158ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b0:	4770      	bx	lr
 80158b2:	bf00      	nop
 80158b4:	2401a061 	.word	0x2401a061
 80158b8:	2401a000 	.word	0x2401a000
 80158bc:	2401a060 	.word	0x2401a060

080158c0 <vnd_recompute_pair_timing>:
/* Асинхронный планировщик A/B */
static int vnd_async_try_tx(void);
static int vnd_find_pair_by_seq(uint32_t seq);
/* Вычисление периода пары по требуемым samples_per_frame и текущему профилю ADC (buf_rate_hz) */
static void vnd_recompute_pair_timing(uint16_t samples_per_frame)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b086      	sub	sp, #24
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	4603      	mov	r3, r0
 80158c8:	80fb      	strh	r3, [r7, #6]
    /* Используем частоту буферов (Fs блоков/с), а не абсолютную частоту сэмплов */
    extern uint16_t adc_stream_get_buf_rate(void);
    uint16_t buf_rate = adc_stream_get_buf_rate();
 80158ca:	f7ea fe59 	bl	8000580 <adc_stream_get_buf_rate>
 80158ce:	4603      	mov	r3, r0
 80158d0:	82fb      	strh	r3, [r7, #22]
    if(buf_rate == 0) buf_rate = 20; /* защита от деления на ноль */
 80158d2:	8afb      	ldrh	r3, [r7, #22]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d101      	bne.n	80158dc <vnd_recompute_pair_timing+0x1c>
 80158d8:	2314      	movs	r3, #20
 80158da:	82fb      	strh	r3, [r7, #22]
    if(samples_per_frame == 0) samples_per_frame = 1;
 80158dc:	88fb      	ldrh	r3, [r7, #6]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d101      	bne.n	80158e6 <vnd_recompute_pair_timing+0x26>
 80158e2:	2301      	movs	r3, #1
 80158e4:	80fb      	strh	r3, [r7, #6]
    /* period_ms ≈ 1000 * samples_per_frame / buf_rate (округление) */
    uint32_t num = (uint32_t)samples_per_frame * 1000u + (uint32_t)(buf_rate/2u);
 80158e6:	88fb      	ldrh	r3, [r7, #6]
 80158e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80158ec:	fb02 f303 	mul.w	r3, r2, r3
 80158f0:	8afa      	ldrh	r2, [r7, #22]
 80158f2:	0852      	lsrs	r2, r2, #1
 80158f4:	b292      	uxth	r2, r2
 80158f6:	4413      	add	r3, r2
 80158f8:	60fb      	str	r3, [r7, #12]
    uint32_t ms  = num / (uint32_t)buf_rate;
 80158fa:	8afb      	ldrh	r3, [r7, #22]
 80158fc:	68fa      	ldr	r2, [r7, #12]
 80158fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8015902:	613b      	str	r3, [r7, #16]
    if(ms == 0) ms = 1;
 8015904:	693b      	ldr	r3, [r7, #16]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d101      	bne.n	801590e <vnd_recompute_pair_timing+0x4e>
 801590a:	2301      	movs	r3, #1
 801590c:	613b      	str	r3, [r7, #16]
    vnd_pair_period_ms = (uint16_t)((ms > 1000u) ? 1000u : ms);
 801590e:	693b      	ldr	r3, [r7, #16]
 8015910:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015914:	d802      	bhi.n	801591c <vnd_recompute_pair_timing+0x5c>
 8015916:	693b      	ldr	r3, [r7, #16]
 8015918:	b29b      	uxth	r3, r3
 801591a:	e001      	b.n	8015920 <vnd_recompute_pair_timing+0x60>
 801591c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015920:	4a02      	ldr	r2, [pc, #8]	@ (801592c <vnd_recompute_pair_timing+0x6c>)
 8015922:	8013      	strh	r3, [r2, #0]
    /* Примечание: период больше не используется как задержка — передаём сразу при готовности данных.
       Оставляем расчёт только для информационных целей. */
    VND_LOG("PAIR_TIMING(info): samples=%u buf_rate=%u -> period≈%u ms",
        (unsigned)samples_per_frame, (unsigned)buf_rate, (unsigned)vnd_pair_period_ms);
}
 8015924:	bf00      	nop
 8015926:	3718      	adds	r7, #24
 8015928:	46bd      	mov	sp, r7
 801592a:	bd80      	pop	{r7, pc}
 801592c:	2400003e 	.word	0x2400003e

08015930 <vnd_pipeline_stop_reset>:

/* Публичная функция: полный сброс/останов пайплайна */
void vnd_pipeline_stop_reset(int deep)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b082      	sub	sp, #8
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
    /* Остановить передачу и внутренние состояния */
    streaming = 0; diag_mode_active = 0; full_mode = 1;
 8015938:	4b37      	ldr	r3, [pc, #220]	@ (8015a18 <vnd_pipeline_stop_reset+0xe8>)
 801593a:	2200      	movs	r2, #0
 801593c:	701a      	strb	r2, [r3, #0]
 801593e:	4b37      	ldr	r3, [pc, #220]	@ (8015a1c <vnd_pipeline_stop_reset+0xec>)
 8015940:	2200      	movs	r2, #0
 8015942:	701a      	strb	r2, [r3, #0]
 8015944:	4b36      	ldr	r3, [pc, #216]	@ (8015a20 <vnd_pipeline_stop_reset+0xf0>)
 8015946:	2201      	movs	r2, #1
 8015948:	701a      	strb	r2, [r3, #0]
    stop_request = 0; pending_status = 0; start_stat_inflight = 0; status_ack_pending = 0; start_ack_done = 1;
 801594a:	4b36      	ldr	r3, [pc, #216]	@ (8015a24 <vnd_pipeline_stop_reset+0xf4>)
 801594c:	2200      	movs	r2, #0
 801594e:	701a      	strb	r2, [r3, #0]
 8015950:	4b35      	ldr	r3, [pc, #212]	@ (8015a28 <vnd_pipeline_stop_reset+0xf8>)
 8015952:	2200      	movs	r2, #0
 8015954:	701a      	strb	r2, [r3, #0]
 8015956:	4b35      	ldr	r3, [pc, #212]	@ (8015a2c <vnd_pipeline_stop_reset+0xfc>)
 8015958:	2200      	movs	r2, #0
 801595a:	701a      	strb	r2, [r3, #0]
 801595c:	4b34      	ldr	r3, [pc, #208]	@ (8015a30 <vnd_pipeline_stop_reset+0x100>)
 801595e:	2200      	movs	r2, #0
 8015960:	701a      	strb	r2, [r3, #0]
 8015962:	4b34      	ldr	r3, [pc, #208]	@ (8015a34 <vnd_pipeline_stop_reset+0x104>)
 8015964:	2201      	movs	r2, #1
 8015966:	701a      	strb	r2, [r3, #0]
    vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0; sending_channel = 0xFF; pending_B = 0; pending_B_since_ms = 0;
 8015968:	4b33      	ldr	r3, [pc, #204]	@ (8015a38 <vnd_pipeline_stop_reset+0x108>)
 801596a:	2200      	movs	r2, #0
 801596c:	701a      	strb	r2, [r3, #0]
 801596e:	4b33      	ldr	r3, [pc, #204]	@ (8015a3c <vnd_pipeline_stop_reset+0x10c>)
 8015970:	2201      	movs	r2, #1
 8015972:	701a      	strb	r2, [r3, #0]
 8015974:	4b32      	ldr	r3, [pc, #200]	@ (8015a40 <vnd_pipeline_stop_reset+0x110>)
 8015976:	2200      	movs	r2, #0
 8015978:	701a      	strb	r2, [r3, #0]
 801597a:	4b32      	ldr	r3, [pc, #200]	@ (8015a44 <vnd_pipeline_stop_reset+0x114>)
 801597c:	22ff      	movs	r2, #255	@ 0xff
 801597e:	701a      	strb	r2, [r3, #0]
 8015980:	4b31      	ldr	r3, [pc, #196]	@ (8015a48 <vnd_pipeline_stop_reset+0x118>)
 8015982:	2200      	movs	r2, #0
 8015984:	701a      	strb	r2, [r3, #0]
 8015986:	4b31      	ldr	r3, [pc, #196]	@ (8015a4c <vnd_pipeline_stop_reset+0x11c>)
 8015988:	2200      	movs	r2, #0
 801598a:	601a      	str	r2, [r3, #0]
    test_sent = 0; test_in_flight = 0; vnd_tx_kick = 1;
 801598c:	4b30      	ldr	r3, [pc, #192]	@ (8015a50 <vnd_pipeline_stop_reset+0x120>)
 801598e:	2200      	movs	r2, #0
 8015990:	701a      	strb	r2, [r3, #0]
 8015992:	4b30      	ldr	r3, [pc, #192]	@ (8015a54 <vnd_pipeline_stop_reset+0x124>)
 8015994:	2200      	movs	r2, #0
 8015996:	701a      	strb	r2, [r3, #0]
 8015998:	4b2f      	ldr	r3, [pc, #188]	@ (8015a58 <vnd_pipeline_stop_reset+0x128>)
 801599a:	2201      	movs	r2, #1
 801599c:	701a      	strb	r2, [r3, #0]
    /* Очистить мета-FIFO и счётчики */
    vnd_tx_meta_head = vnd_tx_meta_tail = 0; meta_push_total = meta_pop_total = meta_empty_events = meta_overflow_events = 0;
 801599e:	4b2f      	ldr	r3, [pc, #188]	@ (8015a5c <vnd_pipeline_stop_reset+0x12c>)
 80159a0:	2200      	movs	r2, #0
 80159a2:	701a      	strb	r2, [r3, #0]
 80159a4:	4b2d      	ldr	r3, [pc, #180]	@ (8015a5c <vnd_pipeline_stop_reset+0x12c>)
 80159a6:	781a      	ldrb	r2, [r3, #0]
 80159a8:	4b2d      	ldr	r3, [pc, #180]	@ (8015a60 <vnd_pipeline_stop_reset+0x130>)
 80159aa:	701a      	strb	r2, [r3, #0]
 80159ac:	4b2d      	ldr	r3, [pc, #180]	@ (8015a64 <vnd_pipeline_stop_reset+0x134>)
 80159ae:	2200      	movs	r2, #0
 80159b0:	601a      	str	r2, [r3, #0]
 80159b2:	4b2c      	ldr	r3, [pc, #176]	@ (8015a64 <vnd_pipeline_stop_reset+0x134>)
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	4a2c      	ldr	r2, [pc, #176]	@ (8015a68 <vnd_pipeline_stop_reset+0x138>)
 80159b8:	6013      	str	r3, [r2, #0]
 80159ba:	4b2b      	ldr	r3, [pc, #172]	@ (8015a68 <vnd_pipeline_stop_reset+0x138>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	4a2b      	ldr	r2, [pc, #172]	@ (8015a6c <vnd_pipeline_stop_reset+0x13c>)
 80159c0:	6013      	str	r3, [r2, #0]
 80159c2:	4b2a      	ldr	r3, [pc, #168]	@ (8015a6c <vnd_pipeline_stop_reset+0x13c>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	4a2a      	ldr	r2, [pc, #168]	@ (8015a70 <vnd_pipeline_stop_reset+0x140>)
 80159c8:	6013      	str	r3, [r2, #0]
    stream_seq = 0; next_seq_to_assign = 0; dbg_produced_seq = 0; first_pair_done = 0;
 80159ca:	4b2a      	ldr	r3, [pc, #168]	@ (8015a74 <vnd_pipeline_stop_reset+0x144>)
 80159cc:	2200      	movs	r2, #0
 80159ce:	601a      	str	r2, [r3, #0]
 80159d0:	4b29      	ldr	r3, [pc, #164]	@ (8015a78 <vnd_pipeline_stop_reset+0x148>)
 80159d2:	2200      	movs	r2, #0
 80159d4:	601a      	str	r2, [r3, #0]
 80159d6:	4b29      	ldr	r3, [pc, #164]	@ (8015a7c <vnd_pipeline_stop_reset+0x14c>)
 80159d8:	2200      	movs	r2, #0
 80159da:	601a      	str	r2, [r3, #0]
 80159dc:	4b28      	ldr	r3, [pc, #160]	@ (8015a80 <vnd_pipeline_stop_reset+0x150>)
 80159de:	2200      	movs	r2, #0
 80159e0:	701a      	strb	r2, [r3, #0]
    cur_samples_per_frame = 0; cur_expected_frame_size = 0; dbg_any_valid_frame = 0;
 80159e2:	4b28      	ldr	r3, [pc, #160]	@ (8015a84 <vnd_pipeline_stop_reset+0x154>)
 80159e4:	2200      	movs	r2, #0
 80159e6:	801a      	strh	r2, [r3, #0]
 80159e8:	4b27      	ldr	r3, [pc, #156]	@ (8015a88 <vnd_pipeline_stop_reset+0x158>)
 80159ea:	2200      	movs	r2, #0
 80159ec:	801a      	strh	r2, [r3, #0]
 80159ee:	4b27      	ldr	r3, [pc, #156]	@ (8015a8c <vnd_pipeline_stop_reset+0x15c>)
 80159f0:	2200      	movs	r2, #0
 80159f2:	701a      	strb	r2, [r3, #0]
    vnd_reset_buffers();
 80159f4:	f000 f904 	bl	8015c00 <vnd_reset_buffers>
    /* Остановить источник данных/ADC DMA при глубоком сбросе */
    if(deep){ extern void adc_stream_stop(void); adc_stream_stop(); }
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d001      	beq.n	8015a02 <vnd_pipeline_stop_reset+0xd2>
 80159fe:	f7ea fcf9 	bl	80003f4 <adc_stream_stop>
    /* Индикация */
    HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_RESET);
 8015a02:	2200      	movs	r2, #0
 8015a04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015a08:	4821      	ldr	r0, [pc, #132]	@ (8015a90 <vnd_pipeline_stop_reset+0x160>)
 8015a0a:	f7f4 fb6b 	bl	800a0e4 <HAL_GPIO_WritePin>
}
 8015a0e:	bf00      	nop
 8015a10:	3708      	adds	r7, #8
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}
 8015a16:	bf00      	nop
 8015a18:	2400dba4 	.word	0x2400dba4
 8015a1c:	2400dcf1 	.word	0x2400dcf1
 8015a20:	2400003c 	.word	0x2400003c
 8015a24:	2400dc58 	.word	0x2400dc58
 8015a28:	2400dcf0 	.word	0x2400dcf0
 8015a2c:	2400dc55 	.word	0x2400dc55
 8015a30:	2400dc57 	.word	0x2400dc57
 8015a34:	2400dc56 	.word	0x2400dc56
 8015a38:	2400dbb8 	.word	0x2400dbb8
 8015a3c:	2400003b 	.word	0x2400003b
 8015a40:	2400dbb9 	.word	0x2400dbb9
 8015a44:	24000050 	.word	0x24000050
 8015a48:	24019ffa 	.word	0x24019ffa
 8015a4c:	24019ffc 	.word	0x24019ffc
 8015a50:	2400dbba 	.word	0x2400dbba
 8015a54:	2400dbbb 	.word	0x2400dbbb
 8015a58:	2400dc50 	.word	0x2400dc50
 8015a5c:	2401a061 	.word	0x2401a061
 8015a60:	2401a060 	.word	0x2401a060
 8015a64:	2401a070 	.word	0x2401a070
 8015a68:	2401a06c 	.word	0x2401a06c
 8015a6c:	2401a068 	.word	0x2401a068
 8015a70:	2401a064 	.word	0x2401a064
 8015a74:	2400dba8 	.word	0x2400dba8
 8015a78:	2400dbec 	.word	0x2400dbec
 8015a7c:	2400dbbc 	.word	0x2400dbbc
 8015a80:	2400dc40 	.word	0x2400dc40
 8015a84:	2400dbac 	.word	0x2400dbac
 8015a88:	2400dbae 	.word	0x2400dbae
 8015a8c:	2400dc15 	.word	0x2400dc15
 8015a90:	58020c00 	.word	0x58020c00

08015a94 <vnd_force_complete_test_meta_if_stale>:
   в FIFO присутствует meta с flags=0x80 и возраст > 60 мс.
   Вместо удаления элемента (что может рассинхронизировать последующие TxCplt), мы помечаем его как служебный:
     is_frame=0; flags=0; — таким образом последующий TxCplt безопасно извлекёт и проигнорирует.
   Гейтинг отправки A перестанет видеть TEST meta (по flags) и разрешит прогресс. */
static void vnd_force_complete_test_meta_if_stale(void)
{
 8015a94:	b480      	push	{r7}
 8015a96:	b083      	sub	sp, #12
 8015a98:	af00      	add	r7, sp, #0
#if VND_DISABLE_TEST
    /* В режиме без TEST: убедимся, что meta-FIFO не содержит блокирующих TEST записей */
    uint8_t t = vnd_tx_meta_tail;
 8015a9a:	4b15      	ldr	r3, [pc, #84]	@ (8015af0 <vnd_force_complete_test_meta_if_stale+0x5c>)
 8015a9c:	781b      	ldrb	r3, [r3, #0]
 8015a9e:	71fb      	strb	r3, [r7, #7]
    while(t != vnd_tx_meta_head){
 8015aa0:	e01b      	b.n	8015ada <vnd_force_complete_test_meta_if_stale+0x46>
        vnd_tx_meta_t *m = &vnd_tx_meta_fifo[t];
 8015aa2:	79fa      	ldrb	r2, [r7, #7]
 8015aa4:	4613      	mov	r3, r2
 8015aa6:	005b      	lsls	r3, r3, #1
 8015aa8:	4413      	add	r3, r2
 8015aaa:	009b      	lsls	r3, r3, #2
 8015aac:	4a11      	ldr	r2, [pc, #68]	@ (8015af4 <vnd_force_complete_test_meta_if_stale+0x60>)
 8015aae:	4413      	add	r3, r2
 8015ab0:	603b      	str	r3, [r7, #0]
        if(m->is_frame && m->flags == 0x80){ m->is_frame = 0; m->flags = 0; }
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	781b      	ldrb	r3, [r3, #0]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d009      	beq.n	8015ace <vnd_force_complete_test_meta_if_stale+0x3a>
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	785b      	ldrb	r3, [r3, #1]
 8015abe:	2b80      	cmp	r3, #128	@ 0x80
 8015ac0:	d105      	bne.n	8015ace <vnd_force_complete_test_meta_if_stale+0x3a>
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	701a      	strb	r2, [r3, #0]
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	2200      	movs	r2, #0
 8015acc:	705a      	strb	r2, [r3, #1]
        t = (uint8_t)((t + 1u) % VND_TX_META_FIFO);
 8015ace:	79fb      	ldrb	r3, [r7, #7]
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	b2db      	uxtb	r3, r3
 8015ad4:	f003 0307 	and.w	r3, r3, #7
 8015ad8:	71fb      	strb	r3, [r7, #7]
    while(t != vnd_tx_meta_head){
 8015ada:	4b07      	ldr	r3, [pc, #28]	@ (8015af8 <vnd_force_complete_test_meta_if_stale+0x64>)
 8015adc:	781b      	ldrb	r3, [r3, #0]
 8015ade:	79fa      	ldrb	r2, [r7, #7]
 8015ae0:	429a      	cmp	r2, r3
 8015ae2:	d1de      	bne.n	8015aa2 <vnd_force_complete_test_meta_if_stale+0xe>
    }
    return;
 8015ae4:	bf00      	nop
            break; /* обрабатываем только первый TEST */
        }
        t = (uint8_t)((t + 1u) % VND_TX_META_FIFO);
    }
#endif
}
 8015ae6:	370c      	adds	r7, #12
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aee:	4770      	bx	lr
 8015af0:	2401a061 	.word	0x2401a061
 8015af4:	2401a000 	.word	0x2401a000
 8015af8:	2401a060 	.word	0x2401a060

08015afc <vnd_try_send_pending_status_from_task>:

/* Отправка отложенного STAT только из таска */
static void vnd_try_send_pending_status_from_task(void)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b082      	sub	sp, #8
 8015b00:	af00      	add	r7, sp, #0
    /* В диагностическом режиме полностью запрещаем любые STAT по bulk-IN,
       чтобы исключить окна между A и B. Для статуса используйте EP0 (ctrl).
       Также ACK-STOP в DIAG не отправляем через bulk (см. обработчик STOP). */
    if(diag_mode_active){ return; }
 8015b02:	4b2d      	ldr	r3, [pc, #180]	@ (8015bb8 <vnd_try_send_pending_status_from_task+0xbc>)
 8015b04:	781b      	ldrb	r3, [r3, #0]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d14d      	bne.n	8015ba6 <vnd_try_send_pending_status_from_task+0xaa>
    if(!pending_status) return;
 8015b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8015bbc <vnd_try_send_pending_status_from_task+0xc0>)
 8015b0c:	781b      	ldrb	r3, [r3, #0]
 8015b0e:	b2db      	uxtb	r3, r3
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d04a      	beq.n	8015baa <vnd_try_send_pending_status_from_task+0xae>
    /* Нельзя отправлять STAT, если есть незавершённая передача (даже если busy временно сброшен) */
    if(vnd_ep_busy || vnd_inflight) return;
 8015b14:	4b2a      	ldr	r3, [pc, #168]	@ (8015bc0 <vnd_try_send_pending_status_from_task+0xc4>)
 8015b16:	781b      	ldrb	r3, [r3, #0]
 8015b18:	b2db      	uxtb	r3, r3
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d147      	bne.n	8015bae <vnd_try_send_pending_status_from_task+0xb2>
 8015b1e:	4b29      	ldr	r3, [pc, #164]	@ (8015bc4 <vnd_try_send_pending_status_from_task+0xc8>)
 8015b20:	781b      	ldrb	r3, [r3, #0]
 8015b22:	b2db      	uxtb	r3, r3
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d142      	bne.n	8015bae <vnd_try_send_pending_status_from_task+0xb2>
    uint16_t l = vnd_build_status((uint8_t*)status_buf, sizeof(status_buf));
 8015b28:	2140      	movs	r1, #64	@ 0x40
 8015b2a:	4827      	ldr	r0, [pc, #156]	@ (8015bc8 <vnd_try_send_pending_status_from_task+0xcc>)
 8015b2c:	f000 f912 	bl	8015d54 <vnd_build_status>
 8015b30:	4603      	mov	r3, r0
 8015b32:	80fb      	strh	r3, [r7, #6]
        if(!l) { pending_status = 0; return; } /* (очистка дублирующего кода STAT уже выполнена выше) */
 8015b34:	88fb      	ldrh	r3, [r7, #6]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d103      	bne.n	8015b42 <vnd_try_send_pending_status_from_task+0x46>
 8015b3a:	4b20      	ldr	r3, [pc, #128]	@ (8015bbc <vnd_try_send_pending_status_from_task+0xc0>)
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	701a      	strb	r2, [r3, #0]
 8015b40:	e036      	b.n	8015bb0 <vnd_try_send_pending_status_from_task+0xb4>
    vnd_status_permit_once = 1;
 8015b42:	4b22      	ldr	r3, [pc, #136]	@ (8015bcc <vnd_try_send_pending_status_from_task+0xd0>)
 8015b44:	2201      	movs	r2, #1
 8015b46:	701a      	strb	r2, [r3, #0]
    vnd_tx_ready = 0; vnd_ep_busy = 1; vnd_last_tx_len = l; vnd_last_tx_start_ms = HAL_GetTick();
 8015b48:	4b21      	ldr	r3, [pc, #132]	@ (8015bd0 <vnd_try_send_pending_status_from_task+0xd4>)
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	701a      	strb	r2, [r3, #0]
 8015b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8015bc0 <vnd_try_send_pending_status_from_task+0xc4>)
 8015b50:	2201      	movs	r2, #1
 8015b52:	701a      	strb	r2, [r3, #0]
 8015b54:	4a1f      	ldr	r2, [pc, #124]	@ (8015bd4 <vnd_try_send_pending_status_from_task+0xd8>)
 8015b56:	88fb      	ldrh	r3, [r7, #6]
 8015b58:	8013      	strh	r3, [r2, #0]
 8015b5a:	f7ef fa07 	bl	8004f6c <HAL_GetTick>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	4a1d      	ldr	r2, [pc, #116]	@ (8015bd8 <vnd_try_send_pending_status_from_task+0xdc>)
 8015b62:	6013      	str	r3, [r2, #0]
    if(USBD_VND_Transmit(&hUsbDeviceHS, (uint8_t*)status_buf, l) == USBD_OK){
 8015b64:	88fb      	ldrh	r3, [r7, #6]
 8015b66:	461a      	mov	r2, r3
 8015b68:	4917      	ldr	r1, [pc, #92]	@ (8015bc8 <vnd_try_send_pending_status_from_task+0xcc>)
 8015b6a:	481c      	ldr	r0, [pc, #112]	@ (8015bdc <vnd_try_send_pending_status_from_task+0xe0>)
 8015b6c:	f003 fde2 	bl	8019734 <USBD_VND_Transmit>
 8015b70:	4603      	mov	r3, r0
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d110      	bne.n	8015b98 <vnd_try_send_pending_status_from_task+0x9c>
        vnd_tx_meta_after((uint8_t*)status_buf, l);
 8015b76:	88fb      	ldrh	r3, [r7, #6]
 8015b78:	4619      	mov	r1, r3
 8015b7a:	4813      	ldr	r0, [pc, #76]	@ (8015bc8 <vnd_try_send_pending_status_from_task+0xcc>)
 8015b7c:	f7ff fe26 	bl	80157cc <vnd_tx_meta_after>
        VND_LOG("STAT_TX pending(task) len=%u depth=%u", l, (unsigned)vnd_tx_meta_depth());
        if(stop_request){ stop_stat_inflight = 1; }
 8015b80:	4b17      	ldr	r3, [pc, #92]	@ (8015be0 <vnd_try_send_pending_status_from_task+0xe4>)
 8015b82:	781b      	ldrb	r3, [r3, #0]
 8015b84:	b2db      	uxtb	r3, r3
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d002      	beq.n	8015b90 <vnd_try_send_pending_status_from_task+0x94>
 8015b8a:	4b16      	ldr	r3, [pc, #88]	@ (8015be4 <vnd_try_send_pending_status_from_task+0xe8>)
 8015b8c:	2201      	movs	r2, #1
 8015b8e:	701a      	strb	r2, [r3, #0]
        pending_status = 0;
 8015b90:	4b0a      	ldr	r3, [pc, #40]	@ (8015bbc <vnd_try_send_pending_status_from_task+0xc0>)
 8015b92:	2200      	movs	r2, #0
 8015b94:	701a      	strb	r2, [r3, #0]
 8015b96:	e00b      	b.n	8015bb0 <vnd_try_send_pending_status_from_task+0xb4>
    } else {
        VND_LOG("STAT_TX pending(task) busy/fail");
        vnd_tx_ready = 1; vnd_ep_busy = 0;
 8015b98:	4b0d      	ldr	r3, [pc, #52]	@ (8015bd0 <vnd_try_send_pending_status_from_task+0xd4>)
 8015b9a:	2201      	movs	r2, #1
 8015b9c:	701a      	strb	r2, [r3, #0]
 8015b9e:	4b08      	ldr	r3, [pc, #32]	@ (8015bc0 <vnd_try_send_pending_status_from_task+0xc4>)
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	701a      	strb	r2, [r3, #0]
 8015ba4:	e004      	b.n	8015bb0 <vnd_try_send_pending_status_from_task+0xb4>
    if(diag_mode_active){ return; }
 8015ba6:	bf00      	nop
 8015ba8:	e002      	b.n	8015bb0 <vnd_try_send_pending_status_from_task+0xb4>
    if(!pending_status) return;
 8015baa:	bf00      	nop
 8015bac:	e000      	b.n	8015bb0 <vnd_try_send_pending_status_from_task+0xb4>
    if(vnd_ep_busy || vnd_inflight) return;
 8015bae:	bf00      	nop
    }
}
 8015bb0:	3708      	adds	r7, #8
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	2400dcf1 	.word	0x2400dcf1
 8015bbc:	2400dcf0 	.word	0x2400dcf0
 8015bc0:	2400dbb8 	.word	0x2400dbb8
 8015bc4:	2400dbb9 	.word	0x2400dbb9
 8015bc8:	2400dc70 	.word	0x2400dc70
 8015bcc:	2400dc52 	.word	0x2400dc52
 8015bd0:	2400003b 	.word	0x2400003b
 8015bd4:	2400dc18 	.word	0x2400dc18
 8015bd8:	2400dc1c 	.word	0x2400dc1c
 8015bdc:	2400d8c8 	.word	0x2400d8c8
 8015be0:	2400dc58 	.word	0x2400dc58
 8015be4:	2400dc59 	.word	0x2400dc59

08015be8 <usb_vendor_periodic_tick>:

/* Тик от таймера */
static volatile uint8_t vnd_tick_flag = 0;
void usb_vendor_periodic_tick(void){ vnd_tick_flag = 1; }
 8015be8:	b480      	push	{r7}
 8015bea:	af00      	add	r7, sp, #0
 8015bec:	4b03      	ldr	r3, [pc, #12]	@ (8015bfc <usb_vendor_periodic_tick+0x14>)
 8015bee:	2201      	movs	r2, #1
 8015bf0:	701a      	strb	r2, [r3, #0]
 8015bf2:	bf00      	nop
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfa:	4770      	bx	lr
 8015bfc:	2401a074 	.word	0x2401a074

08015c00 <vnd_reset_buffers>:

/* ---------------- Вспомогательные ---------------- */
static void vnd_reset_buffers(void){
 8015c00:	b590      	push	{r4, r7, lr}
 8015c02:	b083      	sub	sp, #12
 8015c04:	af00      	add	r7, sp, #0
    for(uint8_t p=0;p<VND_PAIR_BUFFERS;p++) for(uint8_t c=0;c<2;c++){ g_frames[p][c].st=FB_FILL; g_frames[p][c].samples=0; g_frames[p][c].flags = c?VND_FLAGS_ADC1:VND_FLAGS_ADC0; g_frames[p][c].frame_size=0; g_frames[p][c].seq=0; memset(g_frames[p][c].buf,0xCC,sizeof(g_frames[p][c].buf)); }
 8015c06:	2300      	movs	r3, #0
 8015c08:	71fb      	strb	r3, [r7, #7]
 8015c0a:	e075      	b.n	8015cf8 <vnd_reset_buffers+0xf8>
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	71bb      	strb	r3, [r7, #6]
 8015c10:	e06c      	b.n	8015cec <vnd_reset_buffers+0xec>
 8015c12:	79fb      	ldrb	r3, [r7, #7]
 8015c14:	79ba      	ldrb	r2, [r7, #6]
 8015c16:	4947      	ldr	r1, [pc, #284]	@ (8015d34 <vnd_reset_buffers+0x134>)
 8015c18:	f640 20cc 	movw	r0, #2764	@ 0xacc
 8015c1c:	fb00 f202 	mul.w	r2, r0, r2
 8015c20:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015c24:	fb00 f303 	mul.w	r3, r0, r3
 8015c28:	4413      	add	r3, r2
 8015c2a:	440b      	add	r3, r1
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	701a      	strb	r2, [r3, #0]
 8015c30:	79fb      	ldrb	r3, [r7, #7]
 8015c32:	79ba      	ldrb	r2, [r7, #6]
 8015c34:	493f      	ldr	r1, [pc, #252]	@ (8015d34 <vnd_reset_buffers+0x134>)
 8015c36:	f640 20cc 	movw	r0, #2764	@ 0xacc
 8015c3a:	fb00 f202 	mul.w	r2, r0, r2
 8015c3e:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015c42:	fb00 f303 	mul.w	r3, r0, r3
 8015c46:	4413      	add	r3, r2
 8015c48:	440b      	add	r3, r1
 8015c4a:	3302      	adds	r3, #2
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	801a      	strh	r2, [r3, #0]
 8015c50:	79bb      	ldrb	r3, [r7, #6]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d001      	beq.n	8015c5a <vnd_reset_buffers+0x5a>
 8015c56:	2402      	movs	r4, #2
 8015c58:	e000      	b.n	8015c5c <vnd_reset_buffers+0x5c>
 8015c5a:	2401      	movs	r4, #1
 8015c5c:	79fb      	ldrb	r3, [r7, #7]
 8015c5e:	79ba      	ldrb	r2, [r7, #6]
 8015c60:	4934      	ldr	r1, [pc, #208]	@ (8015d34 <vnd_reset_buffers+0x134>)
 8015c62:	f640 20cc 	movw	r0, #2764	@ 0xacc
 8015c66:	fb00 f202 	mul.w	r2, r0, r2
 8015c6a:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015c6e:	fb00 f303 	mul.w	r3, r0, r3
 8015c72:	4413      	add	r3, r2
 8015c74:	440b      	add	r3, r1
 8015c76:	3304      	adds	r3, #4
 8015c78:	4622      	mov	r2, r4
 8015c7a:	701a      	strb	r2, [r3, #0]
 8015c7c:	79fb      	ldrb	r3, [r7, #7]
 8015c7e:	79ba      	ldrb	r2, [r7, #6]
 8015c80:	492c      	ldr	r1, [pc, #176]	@ (8015d34 <vnd_reset_buffers+0x134>)
 8015c82:	f640 20cc 	movw	r0, #2764	@ 0xacc
 8015c86:	fb00 f202 	mul.w	r2, r0, r2
 8015c8a:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015c8e:	fb00 f303 	mul.w	r3, r0, r3
 8015c92:	4413      	add	r3, r2
 8015c94:	440b      	add	r3, r1
 8015c96:	3306      	adds	r3, #6
 8015c98:	2200      	movs	r2, #0
 8015c9a:	801a      	strh	r2, [r3, #0]
 8015c9c:	79fb      	ldrb	r3, [r7, #7]
 8015c9e:	79ba      	ldrb	r2, [r7, #6]
 8015ca0:	4924      	ldr	r1, [pc, #144]	@ (8015d34 <vnd_reset_buffers+0x134>)
 8015ca2:	f640 20cc 	movw	r0, #2764	@ 0xacc
 8015ca6:	fb00 f202 	mul.w	r2, r0, r2
 8015caa:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015cae:	fb00 f303 	mul.w	r3, r0, r3
 8015cb2:	4413      	add	r3, r2
 8015cb4:	440b      	add	r3, r1
 8015cb6:	3308      	adds	r3, #8
 8015cb8:	2200      	movs	r2, #0
 8015cba:	601a      	str	r2, [r3, #0]
 8015cbc:	79fb      	ldrb	r3, [r7, #7]
 8015cbe:	79ba      	ldrb	r2, [r7, #6]
 8015cc0:	f640 21cc 	movw	r1, #2764	@ 0xacc
 8015cc4:	fb01 f202 	mul.w	r2, r1, r2
 8015cc8:	f241 5198 	movw	r1, #5528	@ 0x1598
 8015ccc:	fb01 f303 	mul.w	r3, r1, r3
 8015cd0:	4413      	add	r3, r2
 8015cd2:	3308      	adds	r3, #8
 8015cd4:	4a17      	ldr	r2, [pc, #92]	@ (8015d34 <vnd_reset_buffers+0x134>)
 8015cd6:	4413      	add	r3, r2
 8015cd8:	3304      	adds	r3, #4
 8015cda:	f44f 622c 	mov.w	r2, #2752	@ 0xac0
 8015cde:	21cc      	movs	r1, #204	@ 0xcc
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f005 fbf9 	bl	801b4d8 <memset>
 8015ce6:	79bb      	ldrb	r3, [r7, #6]
 8015ce8:	3301      	adds	r3, #1
 8015cea:	71bb      	strb	r3, [r7, #6]
 8015cec:	79bb      	ldrb	r3, [r7, #6]
 8015cee:	2b01      	cmp	r3, #1
 8015cf0:	d98f      	bls.n	8015c12 <vnd_reset_buffers+0x12>
 8015cf2:	79fb      	ldrb	r3, [r7, #7]
 8015cf4:	3301      	adds	r3, #1
 8015cf6:	71fb      	strb	r3, [r7, #7]
 8015cf8:	79fb      	ldrb	r3, [r7, #7]
 8015cfa:	2b07      	cmp	r3, #7
 8015cfc:	d986      	bls.n	8015c0c <vnd_reset_buffers+0xc>
    pair_fill_idx=pair_send_idx=0; sending_channel=0xFF; channel0_sent_curseq=channel1_sent_curseq=0; pending_B = 0; pending_B_since_ms = 0; }
 8015cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8015d38 <vnd_reset_buffers+0x138>)
 8015d00:	2200      	movs	r2, #0
 8015d02:	701a      	strb	r2, [r3, #0]
 8015d04:	4b0c      	ldr	r3, [pc, #48]	@ (8015d38 <vnd_reset_buffers+0x138>)
 8015d06:	781a      	ldrb	r2, [r3, #0]
 8015d08:	4b0c      	ldr	r3, [pc, #48]	@ (8015d3c <vnd_reset_buffers+0x13c>)
 8015d0a:	701a      	strb	r2, [r3, #0]
 8015d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8015d40 <vnd_reset_buffers+0x140>)
 8015d0e:	22ff      	movs	r2, #255	@ 0xff
 8015d10:	701a      	strb	r2, [r3, #0]
 8015d12:	4b0c      	ldr	r3, [pc, #48]	@ (8015d44 <vnd_reset_buffers+0x144>)
 8015d14:	2200      	movs	r2, #0
 8015d16:	701a      	strb	r2, [r3, #0]
 8015d18:	4b0a      	ldr	r3, [pc, #40]	@ (8015d44 <vnd_reset_buffers+0x144>)
 8015d1a:	781a      	ldrb	r2, [r3, #0]
 8015d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8015d48 <vnd_reset_buffers+0x148>)
 8015d1e:	701a      	strb	r2, [r3, #0]
 8015d20:	4b0a      	ldr	r3, [pc, #40]	@ (8015d4c <vnd_reset_buffers+0x14c>)
 8015d22:	2200      	movs	r2, #0
 8015d24:	701a      	strb	r2, [r3, #0]
 8015d26:	4b0a      	ldr	r3, [pc, #40]	@ (8015d50 <vnd_reset_buffers+0x150>)
 8015d28:	2200      	movs	r2, #0
 8015d2a:	601a      	str	r2, [r3, #0]
 8015d2c:	bf00      	nop
 8015d2e:	370c      	adds	r7, #12
 8015d30:	46bd      	mov	sp, r7
 8015d32:	bd90      	pop	{r4, r7, pc}
 8015d34:	2400f338 	.word	0x2400f338
 8015d38:	24019ff9 	.word	0x24019ff9
 8015d3c:	24019ff8 	.word	0x24019ff8
 8015d40:	24000050 	.word	0x24000050
 8015d44:	2400dc6d 	.word	0x2400dc6d
 8015d48:	2400dc6c 	.word	0x2400dc6c
 8015d4c:	24019ffa 	.word	0x24019ffa
 8015d50:	24019ffc 	.word	0x24019ffc

08015d54 <vnd_build_status>:

uint16_t vnd_build_status(uint8_t *dst, uint16_t max_len){
 8015d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d56:	b093      	sub	sp, #76	@ 0x4c
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
 8015d5c:	460b      	mov	r3, r1
 8015d5e:	807b      	strh	r3, [r7, #2]
    if(max_len < sizeof(vnd_status_v1_t)) return 0;
 8015d60:	887b      	ldrh	r3, [r7, #2]
 8015d62:	2b3f      	cmp	r3, #63	@ 0x3f
 8015d64:	d801      	bhi.n	8015d6a <vnd_build_status+0x16>
 8015d66:	2300      	movs	r3, #0
 8015d68:	e1e1      	b.n	801612e <vnd_build_status+0x3da>
    memset(&g_status,0,sizeof(g_status));
 8015d6a:	2240      	movs	r2, #64	@ 0x40
 8015d6c:	2100      	movs	r1, #0
 8015d6e:	4813      	ldr	r0, [pc, #76]	@ (8015dbc <vnd_build_status+0x68>)
 8015d70:	f005 fbb2 	bl	801b4d8 <memset>
    /* Сигнатура 'STAT' в первых 4 байтах */
    g_status.sig[0] = 'S';
 8015d74:	4b11      	ldr	r3, [pc, #68]	@ (8015dbc <vnd_build_status+0x68>)
 8015d76:	2253      	movs	r2, #83	@ 0x53
 8015d78:	701a      	strb	r2, [r3, #0]
    g_status.sig[1] = 'T';
 8015d7a:	4b10      	ldr	r3, [pc, #64]	@ (8015dbc <vnd_build_status+0x68>)
 8015d7c:	2254      	movs	r2, #84	@ 0x54
 8015d7e:	705a      	strb	r2, [r3, #1]
    g_status.sig[2] = 'A';
 8015d80:	4b0e      	ldr	r3, [pc, #56]	@ (8015dbc <vnd_build_status+0x68>)
 8015d82:	2241      	movs	r2, #65	@ 0x41
 8015d84:	709a      	strb	r2, [r3, #2]
    g_status.sig[3] = 'T';
 8015d86:	4b0d      	ldr	r3, [pc, #52]	@ (8015dbc <vnd_build_status+0x68>)
 8015d88:	2254      	movs	r2, #84	@ 0x54
 8015d8a:	70da      	strb	r2, [r3, #3]
    g_status.version = 1;
 8015d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8015dbc <vnd_build_status+0x68>)
 8015d8e:	2201      	movs	r2, #1
 8015d90:	711a      	strb	r2, [r3, #4]
    g_status.cur_samples = cur_samples_per_frame;
 8015d92:	4b0b      	ldr	r3, [pc, #44]	@ (8015dc0 <vnd_build_status+0x6c>)
 8015d94:	881b      	ldrh	r3, [r3, #0]
 8015d96:	b29a      	uxth	r2, r3
 8015d98:	4b08      	ldr	r3, [pc, #32]	@ (8015dbc <vnd_build_status+0x68>)
 8015d9a:	80da      	strh	r2, [r3, #6]
    g_status.frame_bytes = (uint16_t)(VND_FRAME_HDR_SIZE + cur_samples_per_frame*2u);
 8015d9c:	4b08      	ldr	r3, [pc, #32]	@ (8015dc0 <vnd_build_status+0x6c>)
 8015d9e:	881b      	ldrh	r3, [r3, #0]
 8015da0:	b29b      	uxth	r3, r3
 8015da2:	3310      	adds	r3, #16
 8015da4:	b29b      	uxth	r3, r3
 8015da6:	005b      	lsls	r3, r3, #1
 8015da8:	b29a      	uxth	r2, r3
 8015daa:	4b04      	ldr	r3, [pc, #16]	@ (8015dbc <vnd_build_status+0x68>)
 8015dac:	811a      	strh	r2, [r3, #8]
    g_status.test_frames = test_sent ? 1u : 0u;
 8015dae:	4b05      	ldr	r3, [pc, #20]	@ (8015dc4 <vnd_build_status+0x70>)
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	b2db      	uxtb	r3, r3
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d007      	beq.n	8015dc8 <vnd_build_status+0x74>
 8015db8:	2201      	movs	r2, #1
 8015dba:	e006      	b.n	8015dca <vnd_build_status+0x76>
 8015dbc:	2400dcb0 	.word	0x2400dcb0
 8015dc0:	2400dbac 	.word	0x2400dbac
 8015dc4:	2400dbba 	.word	0x2400dbba
 8015dc8:	2200      	movs	r2, #0
 8015dca:	4bad      	ldr	r3, [pc, #692]	@ (8016080 <vnd_build_status+0x32c>)
 8015dcc:	815a      	strh	r2, [r3, #10]
    g_status.produced_seq = dbg_produced_seq;
 8015dce:	4bad      	ldr	r3, [pc, #692]	@ (8016084 <vnd_build_status+0x330>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	4aab      	ldr	r2, [pc, #684]	@ (8016080 <vnd_build_status+0x32c>)
 8015dd4:	60d3      	str	r3, [r2, #12]
    g_status.sent0 = dbg_sent_ch0_total;
 8015dd6:	4bac      	ldr	r3, [pc, #688]	@ (8016088 <vnd_build_status+0x334>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	4aa9      	ldr	r2, [pc, #676]	@ (8016080 <vnd_build_status+0x32c>)
 8015ddc:	6113      	str	r3, [r2, #16]
    g_status.sent1 = dbg_sent_ch1_total;
 8015dde:	4bab      	ldr	r3, [pc, #684]	@ (801608c <vnd_build_status+0x338>)
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	4aa7      	ldr	r2, [pc, #668]	@ (8016080 <vnd_build_status+0x32c>)
 8015de4:	6153      	str	r3, [r2, #20]
    g_status.dbg_tx_cplt = dbg_tx_cplt;
 8015de6:	4baa      	ldr	r3, [pc, #680]	@ (8016090 <vnd_build_status+0x33c>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	4aa5      	ldr	r2, [pc, #660]	@ (8016080 <vnd_build_status+0x32c>)
 8015dec:	6193      	str	r3, [r2, #24]
    g_status.dbg_partial_frame_abort = dbg_partial_frame_abort;
 8015dee:	4ba9      	ldr	r3, [pc, #676]	@ (8016094 <vnd_build_status+0x340>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	4aa3      	ldr	r2, [pc, #652]	@ (8016080 <vnd_build_status+0x32c>)
 8015df4:	61d3      	str	r3, [r2, #28]
    g_status.dbg_size_mismatch = dbg_size_mismatch;
 8015df6:	4ba8      	ldr	r3, [pc, #672]	@ (8016098 <vnd_build_status+0x344>)
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	4aa1      	ldr	r2, [pc, #644]	@ (8016080 <vnd_build_status+0x32c>)
 8015dfc:	6213      	str	r3, [r2, #32]
    /* Получим DMA счётчики */
    adc_stream_debug_t d; adc_stream_get_debug(&d);
 8015dfe:	f107 030c 	add.w	r3, r7, #12
 8015e02:	4618      	mov	r0, r3
 8015e04:	f7ea fd38 	bl	8000878 <adc_stream_get_debug>
    g_status.dma_done0 = d.dma_full0;
 8015e08:	6a3b      	ldr	r3, [r7, #32]
 8015e0a:	4a9d      	ldr	r2, [pc, #628]	@ (8016080 <vnd_build_status+0x32c>)
 8015e0c:	6253      	str	r3, [r2, #36]	@ 0x24
    g_status.dma_done1 = d.dma_full1;
 8015e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e10:	4a9b      	ldr	r2, [pc, #620]	@ (8016080 <vnd_build_status+0x32c>)
 8015e12:	6293      	str	r3, [r2, #40]	@ 0x28
    g_status.frame_wr_seq = d.frame_wr_seq;
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	4a9a      	ldr	r2, [pc, #616]	@ (8016080 <vnd_build_status+0x32c>)
 8015e18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(streaming) g_status.flags_runtime |= VND_STFLAG_STREAMING;
 8015e1a:	4ba0      	ldr	r3, [pc, #640]	@ (801609c <vnd_build_status+0x348>)
 8015e1c:	781b      	ldrb	r3, [r3, #0]
 8015e1e:	b2db      	uxtb	r3, r3
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d006      	beq.n	8015e32 <vnd_build_status+0xde>
 8015e24:	4b96      	ldr	r3, [pc, #600]	@ (8016080 <vnd_build_status+0x32c>)
 8015e26:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8015e28:	f043 0301 	orr.w	r3, r3, #1
 8015e2c:	b29a      	uxth	r2, r3
 8015e2e:	4b94      	ldr	r3, [pc, #592]	@ (8016080 <vnd_build_status+0x32c>)
 8015e30:	861a      	strh	r2, [r3, #48]	@ 0x30
    if(diag_mode_active) g_status.flags_runtime |= VND_STFLAG_DIAG_ACTIVE;
 8015e32:	4b9b      	ldr	r3, [pc, #620]	@ (80160a0 <vnd_build_status+0x34c>)
 8015e34:	781b      	ldrb	r3, [r3, #0]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d006      	beq.n	8015e48 <vnd_build_status+0xf4>
 8015e3a:	4b91      	ldr	r3, [pc, #580]	@ (8016080 <vnd_build_status+0x32c>)
 8015e3c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8015e3e:	f043 0302 	orr.w	r3, r3, #2
 8015e42:	b29a      	uxth	r2, r3
 8015e44:	4b8e      	ldr	r3, [pc, #568]	@ (8016080 <vnd_build_status+0x32c>)
 8015e46:	861a      	strh	r2, [r3, #48]	@ 0x30
    /* Новые поля диагностики */
    uint16_t f2 = 0;
 8015e48:	2300      	movs	r3, #0
 8015e4a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    /* Бит0 = занятость IN EP: локальная (vnd_ep_busy) ИЛИ низкоуровневая (LL vnd_tx_busy) */
    {
        extern uint8_t USBD_VND_TxIsBusy(void);
        uint8_t ll_busy = USBD_VND_TxIsBusy();
 8015e4e:	f003 fcd9 	bl	8019804 <USBD_VND_TxIsBusy>
 8015e52:	4603      	mov	r3, r0
 8015e54:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
        if(vnd_ep_busy || ll_busy) f2 |= 1u<<0;
 8015e58:	4b92      	ldr	r3, [pc, #584]	@ (80160a4 <vnd_build_status+0x350>)
 8015e5a:	781b      	ldrb	r3, [r3, #0]
 8015e5c:	b2db      	uxtb	r3, r3
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d103      	bne.n	8015e6a <vnd_build_status+0x116>
 8015e62:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d005      	beq.n	8015e76 <vnd_build_status+0x122>
 8015e6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015e6e:	f043 0301 	orr.w	r3, r3, #1
 8015e72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    }
    if(vnd_tx_ready)         f2 |= 1u<<1;
 8015e76:	4b8c      	ldr	r3, [pc, #560]	@ (80160a8 <vnd_build_status+0x354>)
 8015e78:	781b      	ldrb	r3, [r3, #0]
 8015e7a:	b2db      	uxtb	r3, r3
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d005      	beq.n	8015e8c <vnd_build_status+0x138>
 8015e80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015e84:	f043 0302 	orr.w	r3, r3, #2
 8015e88:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(pending_B)            f2 |= 1u<<2;
 8015e8c:	4b87      	ldr	r3, [pc, #540]	@ (80160ac <vnd_build_status+0x358>)
 8015e8e:	781b      	ldrb	r3, [r3, #0]
 8015e90:	b2db      	uxtb	r3, r3
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d005      	beq.n	8015ea2 <vnd_build_status+0x14e>
 8015e96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015e9a:	f043 0304 	orr.w	r3, r3, #4
 8015e9e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(test_in_flight)       f2 |= 1u<<3;
 8015ea2:	4b83      	ldr	r3, [pc, #524]	@ (80160b0 <vnd_build_status+0x35c>)
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	b2db      	uxtb	r3, r3
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d005      	beq.n	8015eb8 <vnd_build_status+0x164>
 8015eac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015eb0:	f043 0308 	orr.w	r3, r3, #8
 8015eb4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(start_ack_done)       f2 |= 1u<<4;
 8015eb8:	4b7e      	ldr	r3, [pc, #504]	@ (80160b4 <vnd_build_status+0x360>)
 8015eba:	781b      	ldrb	r3, [r3, #0]
 8015ebc:	b2db      	uxtb	r3, r3
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d005      	beq.n	8015ece <vnd_build_status+0x17a>
 8015ec2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015ec6:	f043 0310 	orr.w	r3, r3, #16
 8015eca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(start_stat_inflight)  f2 |= 1u<<5;
 8015ece:	4b7a      	ldr	r3, [pc, #488]	@ (80160b8 <vnd_build_status+0x364>)
 8015ed0:	781b      	ldrb	r3, [r3, #0]
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d005      	beq.n	8015ee4 <vnd_build_status+0x190>
 8015ed8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015edc:	f043 0320 	orr.w	r3, r3, #32
 8015ee0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(start_stat_planned)   f2 |= 1u<<6;
 8015ee4:	4b75      	ldr	r3, [pc, #468]	@ (80160bc <vnd_build_status+0x368>)
 8015ee6:	781b      	ldrb	r3, [r3, #0]
 8015ee8:	b2db      	uxtb	r3, r3
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d005      	beq.n	8015efa <vnd_build_status+0x1a6>
 8015eee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015ef6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(pending_status)       f2 |= 1u<<7;
 8015efa:	4b71      	ldr	r3, [pc, #452]	@ (80160c0 <vnd_build_status+0x36c>)
 8015efc:	781b      	ldrb	r3, [r3, #0]
 8015efe:	b2db      	uxtb	r3, r3
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d005      	beq.n	8015f10 <vnd_build_status+0x1bc>
 8015f04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015f0c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(simple_tx_mode)       f2 |= 1u<<8;
 8015f10:	4b6c      	ldr	r3, [pc, #432]	@ (80160c4 <vnd_build_status+0x370>)
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d005      	beq.n	8015f24 <vnd_build_status+0x1d0>
 8015f18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015f20:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(diag_mode_active)     f2 |= 1u<<9;
 8015f24:	4b5e      	ldr	r3, [pc, #376]	@ (80160a0 <vnd_build_status+0x34c>)
 8015f26:	781b      	ldrb	r3, [r3, #0]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d005      	beq.n	8015f38 <vnd_build_status+0x1e4>
 8015f2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015f30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8015f34:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(first_pair_done)      f2 |= 1u<<10; /* переместим ниже биты READY/SENDING */
 8015f38:	4b63      	ldr	r3, [pc, #396]	@ (80160c8 <vnd_build_status+0x374>)
 8015f3a:	781b      	ldrb	r3, [r3, #0]
 8015f3c:	b2db      	uxtb	r3, r3
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d005      	beq.n	8015f4e <vnd_build_status+0x1fa>
 8015f42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8015f4a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    /* Доп. диагностика: наличие готовых кадров в текущей паре */
    {
        ChanFrame *fa = &g_frames[pair_send_idx][0];
 8015f4e:	4b5f      	ldr	r3, [pc, #380]	@ (80160cc <vnd_build_status+0x378>)
 8015f50:	781b      	ldrb	r3, [r3, #0]
 8015f52:	461a      	mov	r2, r3
 8015f54:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015f58:	fb02 f303 	mul.w	r3, r2, r3
 8015f5c:	4a5c      	ldr	r2, [pc, #368]	@ (80160d0 <vnd_build_status+0x37c>)
 8015f5e:	4413      	add	r3, r2
 8015f60:	643b      	str	r3, [r7, #64]	@ 0x40
        ChanFrame *fb = &g_frames[pair_send_idx][1];
 8015f62:	4b5a      	ldr	r3, [pc, #360]	@ (80160cc <vnd_build_status+0x378>)
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	461a      	mov	r2, r3
 8015f68:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015f6c:	fb02 f303 	mul.w	r3, r2, r3
 8015f70:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8015f74:	4a56      	ldr	r2, [pc, #344]	@ (80160d0 <vnd_build_status+0x37c>)
 8015f76:	4413      	add	r3, r2
 8015f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (fa->st == FB_READY) f2 |= 1u<<11;
 8015f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015f7c:	781b      	ldrb	r3, [r3, #0]
 8015f7e:	b2db      	uxtb	r3, r3
 8015f80:	2b01      	cmp	r3, #1
 8015f82:	d105      	bne.n	8015f90 <vnd_build_status+0x23c>
 8015f84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015f88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015f8c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (fb->st == FB_READY) f2 |= 1u<<12;
 8015f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f92:	781b      	ldrb	r3, [r3, #0]
 8015f94:	b2db      	uxtb	r3, r3
 8015f96:	2b01      	cmp	r3, #1
 8015f98:	d105      	bne.n	8015fa6 <vnd_build_status+0x252>
 8015f9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015f9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8015fa2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        /* Новые биты: состояние SENDING для A/B чтобы различать READY и активную передачу */
        if (fa->st == FB_SENDING) f2 |= 1u<<13;
 8015fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015fa8:	781b      	ldrb	r3, [r3, #0]
 8015faa:	b2db      	uxtb	r3, r3
 8015fac:	2b02      	cmp	r3, #2
 8015fae:	d105      	bne.n	8015fbc <vnd_build_status+0x268>
 8015fb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015fb4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015fb8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (fb->st == FB_SENDING) f2 |= 1u<<14;
 8015fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015fbe:	781b      	ldrb	r3, [r3, #0]
 8015fc0:	b2db      	uxtb	r3, r3
 8015fc2:	2b02      	cmp	r3, #2
 8015fc4:	d105      	bne.n	8015fd2 <vnd_build_status+0x27e>
 8015fc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015fca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015fce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        /* ДОБАВЛЕНО: наличие готовых кадров в буфере подготовки (pair_fill_idx) */
        ChanFrame *fa_fill = &g_frames[pair_fill_idx][0];
 8015fd2:	4b40      	ldr	r3, [pc, #256]	@ (80160d4 <vnd_build_status+0x380>)
 8015fd4:	781b      	ldrb	r3, [r3, #0]
 8015fd6:	461a      	mov	r2, r3
 8015fd8:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015fdc:	fb02 f303 	mul.w	r3, r2, r3
 8015fe0:	4a3b      	ldr	r2, [pc, #236]	@ (80160d0 <vnd_build_status+0x37c>)
 8015fe2:	4413      	add	r3, r2
 8015fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
        ChanFrame *fb_fill = &g_frames[pair_fill_idx][1];
 8015fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80160d4 <vnd_build_status+0x380>)
 8015fe8:	781b      	ldrb	r3, [r3, #0]
 8015fea:	461a      	mov	r2, r3
 8015fec:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015ff0:	fb02 f303 	mul.w	r3, r2, r3
 8015ff4:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8015ff8:	4a35      	ldr	r2, [pc, #212]	@ (80160d0 <vnd_build_status+0x37c>)
 8015ffa:	4413      	add	r3, r2
 8015ffc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (fa_fill->st == FB_READY) f2 |= 1u<<15;
 8015ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016000:	781b      	ldrb	r3, [r3, #0]
 8016002:	b2db      	uxtb	r3, r3
 8016004:	2b01      	cmp	r3, #1
 8016006:	d107      	bne.n	8016018 <vnd_build_status+0x2c4>
 8016008:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801600c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8016010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8016014:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    /* Места под отдельный бит для B_fill нет в v1: пропускаем, чтобы не конфликтовать с битом0 */
    }
    g_status.flags2 = f2;
 8016018:	4a19      	ldr	r2, [pc, #100]	@ (8016080 <vnd_build_status+0x32c>)
 801601a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801601e:	8653      	strh	r3, [r2, #50]	@ 0x32
    g_status.sending_ch = sending_channel;
 8016020:	4b2d      	ldr	r3, [pc, #180]	@ (80160d8 <vnd_build_status+0x384>)
 8016022:	781a      	ldrb	r2, [r3, #0]
 8016024:	4b16      	ldr	r3, [pc, #88]	@ (8016080 <vnd_build_status+0x32c>)
 8016026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    g_status.pair_idx = (uint16_t)(((uint16_t)pair_fill_idx << 8) | (uint16_t)pair_send_idx);
 801602a:	4b2a      	ldr	r3, [pc, #168]	@ (80160d4 <vnd_build_status+0x380>)
 801602c:	781b      	ldrb	r3, [r3, #0]
 801602e:	b21b      	sxth	r3, r3
 8016030:	021b      	lsls	r3, r3, #8
 8016032:	b21a      	sxth	r2, r3
 8016034:	4b25      	ldr	r3, [pc, #148]	@ (80160cc <vnd_build_status+0x378>)
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	b21b      	sxth	r3, r3
 801603a:	4313      	orrs	r3, r2
 801603c:	b21b      	sxth	r3, r3
 801603e:	b29a      	uxth	r2, r3
 8016040:	4b0f      	ldr	r3, [pc, #60]	@ (8016080 <vnd_build_status+0x32c>)
 8016042:	86da      	strh	r2, [r3, #54]	@ 0x36
    g_status.last_tx_len = vnd_last_tx_len;
 8016044:	4b25      	ldr	r3, [pc, #148]	@ (80160dc <vnd_build_status+0x388>)
 8016046:	881b      	ldrh	r3, [r3, #0]
 8016048:	b29a      	uxth	r2, r3
 801604a:	4b0d      	ldr	r3, [pc, #52]	@ (8016080 <vnd_build_status+0x32c>)
 801604c:	871a      	strh	r2, [r3, #56]	@ 0x38
    g_status.cur_stream_seq = stream_seq;
 801604e:	4b24      	ldr	r3, [pc, #144]	@ (80160e0 <vnd_build_status+0x38c>)
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	4a0b      	ldr	r2, [pc, #44]	@ (8016080 <vnd_build_status+0x32c>)
 8016054:	f8c2 303a 	str.w	r3, [r2, #58]	@ 0x3a
        reserved0 = LSB dbg_prepare_calls, reserved2(low) = LSB dbg_prepare_ok,
        reserved3 = LSW frame_rd_seq (для сравнения с frame_wr_seq). */
     /* Упаковываем в reserved0: нижние 4 бита = LSB dbg_prepare_calls, старшие 4 = lastTxRC (LL) */
     do {
         extern uint8_t USBD_VND_LastTxRC(void);
         uint8_t rc = USBD_VND_LastTxRC();
 8016058:	f003 fbe0 	bl	801981c <USBD_VND_LastTxRC>
 801605c:	4603      	mov	r3, r0
 801605e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
         uint8_t lsb = (uint8_t)(dbg_prepare_calls & 0x0Fu);
 8016062:	4b20      	ldr	r3, [pc, #128]	@ (80160e4 <vnd_build_status+0x390>)
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	b2db      	uxtb	r3, r3
 8016068:	f003 030f 	and.w	r3, r3, #15
 801606c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
         g_status.reserved0 = (uint8_t)((rc << 4) | lsb);
 8016070:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8016074:	011b      	lsls	r3, r3, #4
 8016076:	b25a      	sxtb	r2, r3
 8016078:	f997 3032 	ldrsb.w	r3, [r7, #50]	@ 0x32
 801607c:	e034      	b.n	80160e8 <vnd_build_status+0x394>
 801607e:	bf00      	nop
 8016080:	2400dcb0 	.word	0x2400dcb0
 8016084:	2400dbbc 	.word	0x2400dbbc
 8016088:	2400dbe0 	.word	0x2400dbe0
 801608c:	2400dbe4 	.word	0x2400dbe4
 8016090:	2400dbe8 	.word	0x2400dbe8
 8016094:	2400dbc8 	.word	0x2400dbc8
 8016098:	2400dbcc 	.word	0x2400dbcc
 801609c:	2400dba4 	.word	0x2400dba4
 80160a0:	2400dcf1 	.word	0x2400dcf1
 80160a4:	2400dbb8 	.word	0x2400dbb8
 80160a8:	2400003b 	.word	0x2400003b
 80160ac:	24019ffa 	.word	0x24019ffa
 80160b0:	2400dbbb 	.word	0x2400dbbb
 80160b4:	2400dc56 	.word	0x2400dc56
 80160b8:	2400dc55 	.word	0x2400dc55
 80160bc:	2400dc54 	.word	0x2400dc54
 80160c0:	2400dcf0 	.word	0x2400dcf0
 80160c4:	24000051 	.word	0x24000051
 80160c8:	2400dc40 	.word	0x2400dc40
 80160cc:	24019ff9 	.word	0x24019ff9
 80160d0:	2400f338 	.word	0x2400f338
 80160d4:	24019ff8 	.word	0x24019ff8
 80160d8:	24000050 	.word	0x24000050
 80160dc:	2400dc18 	.word	0x2400dc18
 80160e0:	2400dba8 	.word	0x2400dba8
 80160e4:	2400dc5c 	.word	0x2400dc5c
 80160e8:	4313      	orrs	r3, r2
 80160ea:	b25b      	sxtb	r3, r3
 80160ec:	b2da      	uxtb	r2, r3
 80160ee:	4b12      	ldr	r3, [pc, #72]	@ (8016138 <vnd_build_status+0x3e4>)
 80160f0:	715a      	strb	r2, [r3, #5]
     } while(0);
     /* reserved2: младший байт dbg_prepare_ok */
     g_status.reserved2 = (uint8_t)(dbg_prepare_ok & 0xFFu);
 80160f2:	4b12      	ldr	r3, [pc, #72]	@ (801613c <vnd_build_status+0x3e8>)
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	b2da      	uxtb	r2, r3
 80160f8:	4b0f      	ldr	r3, [pc, #60]	@ (8016138 <vnd_build_status+0x3e4>)
 80160fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
     extern volatile uint32_t frame_rd_seq; /* из adc_stream.c */
     g_status.reserved3 = (uint16_t)(frame_rd_seq & 0xFFFFu);
 80160fe:	4b10      	ldr	r3, [pc, #64]	@ (8016140 <vnd_build_status+0x3ec>)
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	b29a      	uxth	r2, r3
 8016104:	4b0c      	ldr	r3, [pc, #48]	@ (8016138 <vnd_build_status+0x3e4>)
 8016106:	87da      	strh	r2, [r3, #62]	@ 0x3e
     /* Хак: инкремент dbg_skipped_frames отображаем в sent0/sent1 дельтах, но здесь добавим только
        косвенную диагностику: если skips растут, host увидит разницу produced_seq - sent*. Дополнительно
        можно временно печатать в CDC при отладке (сейчас лог выключен для скорости). */
    memcpy(dst,&g_status,sizeof(g_status));
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	4a0b      	ldr	r2, [pc, #44]	@ (8016138 <vnd_build_status+0x3e4>)
 801610c:	4614      	mov	r4, r2
 801610e:	469c      	mov	ip, r3
 8016110:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 8016114:	4665      	mov	r5, ip
 8016116:	4626      	mov	r6, r4
 8016118:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801611a:	6028      	str	r0, [r5, #0]
 801611c:	6069      	str	r1, [r5, #4]
 801611e:	60aa      	str	r2, [r5, #8]
 8016120:	60eb      	str	r3, [r5, #12]
 8016122:	3410      	adds	r4, #16
 8016124:	f10c 0c10 	add.w	ip, ip, #16
 8016128:	4574      	cmp	r4, lr
 801612a:	d1f3      	bne.n	8016114 <vnd_build_status+0x3c0>
    return (uint16_t)sizeof(g_status);
 801612c:	2340      	movs	r3, #64	@ 0x40
}
 801612e:	4618      	mov	r0, r3
 8016130:	374c      	adds	r7, #76	@ 0x4c
 8016132:	46bd      	mov	sp, r7
 8016134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016136:	bf00      	nop
 8016138:	2400dcb0 	.word	0x2400dcb0
 801613c:	2400dc60 	.word	0x2400dc60
 8016140:	2400ad04 	.word	0x2400ad04

08016144 <vnd_is_streaming>:

uint8_t vnd_is_streaming(void){ return streaming; }
 8016144:	b480      	push	{r7}
 8016146:	af00      	add	r7, sp, #0
 8016148:	4b03      	ldr	r3, [pc, #12]	@ (8016158 <vnd_is_streaming+0x14>)
 801614a:	781b      	ldrb	r3, [r3, #0]
 801614c:	b2db      	uxtb	r3, r3
 801614e:	4618      	mov	r0, r3
 8016150:	46bd      	mov	sp, r7
 8016152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016156:	4770      	bx	lr
 8016158:	2400dba4 	.word	0x2400dba4

0801615c <vnd_prepare_pair>:

/* функция vnd_generate_test_sawtooth() реализована в vnd_testgen.c */

static void vnd_prepare_pair(void)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b092      	sub	sp, #72	@ 0x48
 8016160:	af00      	add	r7, sp, #0
    dbg_prepare_calls++;
 8016162:	4b6d      	ldr	r3, [pc, #436]	@ (8016318 <vnd_prepare_pair+0x1bc>)
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	3301      	adds	r3, #1
 8016168:	4a6b      	ldr	r2, [pc, #428]	@ (8016318 <vnd_prepare_pair+0x1bc>)
 801616a:	6013      	str	r3, [r2, #0]
    VND_LOG("PREPARE_PAIR called (fill_idx=%u)", (unsigned)pair_fill_idx);
    uint16_t *ch1 = NULL, *ch2 = NULL; uint16_t samples = 0;
 801616c:	2300      	movs	r3, #0
 801616e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016170:	2300      	movs	r3, #0
 8016172:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016174:	2300      	movs	r3, #0
 8016176:	86fb      	strh	r3, [r7, #54]	@ 0x36
  __ASM volatile ("cpsid i" : : : "memory");
 8016178:	b672      	cpsid	i
}
 801617a:	bf00      	nop
    /* last-buffer-wins: берём последний доступный кадр; если накопилась очередь >1, пропускаем старые */
    /* Локальная логика: забрать последний кадр из ADC FIFO, безопасно по отношению к ISR */
    {
        uint32_t wr, rd, backlog, seq;
        __disable_irq();
        wr = frame_wr_seq; rd = frame_rd_seq;
 801617c:	4b67      	ldr	r3, [pc, #412]	@ (801631c <vnd_prepare_pair+0x1c0>)
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	633b      	str	r3, [r7, #48]	@ 0x30
 8016182:	4b67      	ldr	r3, [pc, #412]	@ (8016320 <vnd_prepare_pair+0x1c4>)
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (wr == rd) { __enable_irq(); return; }
 8016188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801618a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801618c:	429a      	cmp	r2, r3
 801618e:	d102      	bne.n	8016196 <vnd_prepare_pair+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8016190:	b662      	cpsie	i
}
 8016192:	bf00      	nop
 8016194:	e160      	b.n	8016458 <vnd_prepare_pair+0x2fc>
        backlog = wr - rd;
 8016196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801619a:	1ad3      	subs	r3, r2, r3
 801619c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (backlog > 1u) {
 801619e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161a0:	2b01      	cmp	r3, #1
 80161a2:	d90d      	bls.n	80161c0 <vnd_prepare_pair+0x64>
            /* Перескочить на последний полный кадр и пометить все промежуточные как пропущенные */
            seq = wr - 1u;
 80161a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161a6:	3b01      	subs	r3, #1
 80161a8:	647b      	str	r3, [r7, #68]	@ 0x44
            dbg_skipped_frames += (backlog - 1u);
 80161aa:	4b5e      	ldr	r3, [pc, #376]	@ (8016324 <vnd_prepare_pair+0x1c8>)
 80161ac:	681a      	ldr	r2, [r3, #0]
 80161ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161b0:	4413      	add	r3, r2
 80161b2:	3b01      	subs	r3, #1
 80161b4:	4a5b      	ldr	r2, [pc, #364]	@ (8016324 <vnd_prepare_pair+0x1c8>)
 80161b6:	6013      	str	r3, [r2, #0]
            frame_rd_seq = wr; /* потребили все до последнего */
 80161b8:	4a59      	ldr	r2, [pc, #356]	@ (8016320 <vnd_prepare_pair+0x1c4>)
 80161ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161bc:	6013      	str	r3, [r2, #0]
 80161be:	e005      	b.n	80161cc <vnd_prepare_pair+0x70>
        } else {
            seq = rd; frame_rd_seq = rd + 1u;
 80161c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80161c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161c6:	3301      	adds	r3, #1
 80161c8:	4a55      	ldr	r2, [pc, #340]	@ (8016320 <vnd_prepare_pair+0x1c4>)
 80161ca:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80161cc:	b662      	cpsie	i
}
 80161ce:	bf00      	nop
        }
        __enable_irq();
        uint32_t index = (uint32_t)(seq & (FIFO_FRAMES - 1u));
 80161d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80161d2:	f003 0307 	and.w	r3, r3, #7
 80161d6:	627b      	str	r3, [r7, #36]	@ 0x24
        ch1 = adc1_buffers[index];
 80161d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161da:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 80161de:	fb02 f303 	mul.w	r3, r2, r3
 80161e2:	4a51      	ldr	r2, [pc, #324]	@ (8016328 <vnd_prepare_pair+0x1cc>)
 80161e4:	4413      	add	r3, r2
 80161e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ch2 = adc2_buffers[index];
 80161e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161ea:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 80161ee:	fb02 f303 	mul.w	r3, r2, r3
 80161f2:	4a4e      	ldr	r2, [pc, #312]	@ (801632c <vnd_prepare_pair+0x1d0>)
 80161f4:	4413      	add	r3, r2
 80161f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        /* ИСПРАВЛЕНИЕ: использовать глобальный getter вместо внутреннего debug поля,
           чтобы получить актуальное значение samples после смены профиля */
        samples = adc_stream_get_active_samples();
 80161f8:	f7ea f9b6 	bl	8000568 <adc_stream_get_active_samples>
 80161fc:	4603      	mov	r3, r0
 80161fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }
#endif
    if(samples == 0){
 8016200:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016202:	2b00      	cmp	r3, #0
 8016204:	f000 8125 	beq.w	8016452 <vnd_prepare_pair+0x2f6>
        /* Нет новых данных от АЦП — ничего не отправляем */
        return;
    }
    /* Применяем усечение до блокировки формата */
    uint16_t effective = samples;
 8016208:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801620a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    /* Применим явный лимит от хоста (samples_per_frame) если задан */
    if(vnd_frame_samples_req && vnd_frame_samples_req < effective) effective = vnd_frame_samples_req;
 801620e:	4b48      	ldr	r3, [pc, #288]	@ (8016330 <vnd_prepare_pair+0x1d4>)
 8016210:	881b      	ldrh	r3, [r3, #0]
 8016212:	b29b      	uxth	r3, r3
 8016214:	2b00      	cmp	r3, #0
 8016216:	d00a      	beq.n	801622e <vnd_prepare_pair+0xd2>
 8016218:	4b45      	ldr	r3, [pc, #276]	@ (8016330 <vnd_prepare_pair+0x1d4>)
 801621a:	881b      	ldrh	r3, [r3, #0]
 801621c:	b29b      	uxth	r3, r3
 801621e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016222:	429a      	cmp	r2, r3
 8016224:	d903      	bls.n	801622e <vnd_prepare_pair+0xd2>
 8016226:	4b42      	ldr	r3, [pc, #264]	@ (8016330 <vnd_prepare_pair+0x1d4>)
 8016228:	881b      	ldrh	r3, [r3, #0]
 801622a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    if(vnd_trunc_samples && vnd_trunc_samples < effective) effective = vnd_trunc_samples;
 801622e:	4b41      	ldr	r3, [pc, #260]	@ (8016334 <vnd_prepare_pair+0x1d8>)
 8016230:	881b      	ldrh	r3, [r3, #0]
 8016232:	b29b      	uxth	r3, r3
 8016234:	2b00      	cmp	r3, #0
 8016236:	d00a      	beq.n	801624e <vnd_prepare_pair+0xf2>
 8016238:	4b3e      	ldr	r3, [pc, #248]	@ (8016334 <vnd_prepare_pair+0x1d8>)
 801623a:	881b      	ldrh	r3, [r3, #0]
 801623c:	b29b      	uxth	r3, r3
 801623e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016242:	429a      	cmp	r2, r3
 8016244:	d903      	bls.n	801624e <vnd_prepare_pair+0xf2>
 8016246:	4b3b      	ldr	r3, [pc, #236]	@ (8016334 <vnd_prepare_pair+0x1d8>)
 8016248:	881b      	ldrh	r3, [r3, #0]
 801624a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    if(cur_samples_per_frame == 0){
 801624e:	4b3a      	ldr	r3, [pc, #232]	@ (8016338 <vnd_prepare_pair+0x1dc>)
 8016250:	881b      	ldrh	r3, [r3, #0]
 8016252:	b29b      	uxth	r3, r3
 8016254:	2b00      	cmp	r3, #0
 8016256:	d115      	bne.n	8016284 <vnd_prepare_pair+0x128>
        if(effective > VND_MAX_SAMPLES) effective = VND_MAX_SAMPLES;
 8016258:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801625c:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8016260:	d903      	bls.n	801626a <vnd_prepare_pair+0x10e>
 8016262:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 8016266:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        cur_samples_per_frame = effective;
 801626a:	4a33      	ldr	r2, [pc, #204]	@ (8016338 <vnd_prepare_pair+0x1dc>)
 801626c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016270:	8013      	strh	r3, [r2, #0]
        cur_expected_frame_size = (uint16_t)(VND_FRAME_HDR_SIZE + (uint32_t)cur_samples_per_frame * 2u);
 8016272:	4b31      	ldr	r3, [pc, #196]	@ (8016338 <vnd_prepare_pair+0x1dc>)
 8016274:	881b      	ldrh	r3, [r3, #0]
 8016276:	b29b      	uxth	r3, r3
 8016278:	3310      	adds	r3, #16
 801627a:	b29b      	uxth	r3, r3
 801627c:	005b      	lsls	r3, r3, #1
 801627e:	b29a      	uxth	r2, r3
 8016280:	4b2e      	ldr	r3, [pc, #184]	@ (801633c <vnd_prepare_pair+0x1e0>)
 8016282:	801a      	strh	r2, [r3, #0]
    VND_LOG("SIZE_LOCK %u (raw=%u trunc=%u)", cur_samples_per_frame, samples, vnd_trunc_samples);
    /* Не меняем stream_seq здесь: seq инкрементируется только после завершения кадра B (TxCplt) */
    }
    if(effective != cur_samples_per_frame){
 8016284:	4b2c      	ldr	r3, [pc, #176]	@ (8016338 <vnd_prepare_pair+0x1dc>)
 8016286:	881b      	ldrh	r3, [r3, #0]
 8016288:	b29b      	uxth	r3, r3
 801628a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801628e:	429a      	cmp	r2, r3
 8016290:	d005      	beq.n	801629e <vnd_prepare_pair+0x142>
        VND_LOG("SIZE_MISMATCH: eff=%u cur=%u raw=%u", effective, cur_samples_per_frame, samples);
        dbg_partial_frame_abort++;
 8016292:	4b2b      	ldr	r3, [pc, #172]	@ (8016340 <vnd_prepare_pair+0x1e4>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	3301      	adds	r3, #1
 8016298:	4a29      	ldr	r2, [pc, #164]	@ (8016340 <vnd_prepare_pair+0x1e4>)
 801629a:	6013      	str	r3, [r2, #0]
        return;
 801629c:	e0dc      	b.n	8016458 <vnd_prepare_pair+0x2fc>
    }
    ChanFrame *f0 = &g_frames[pair_fill_idx][0];
 801629e:	4b29      	ldr	r3, [pc, #164]	@ (8016344 <vnd_prepare_pair+0x1e8>)
 80162a0:	781b      	ldrb	r3, [r3, #0]
 80162a2:	461a      	mov	r2, r3
 80162a4:	f241 5398 	movw	r3, #5528	@ 0x1598
 80162a8:	fb02 f303 	mul.w	r3, r2, r3
 80162ac:	4a26      	ldr	r2, [pc, #152]	@ (8016348 <vnd_prepare_pair+0x1ec>)
 80162ae:	4413      	add	r3, r2
 80162b0:	623b      	str	r3, [r7, #32]
    ChanFrame *f1 = &g_frames[pair_fill_idx][1];
 80162b2:	4b24      	ldr	r3, [pc, #144]	@ (8016344 <vnd_prepare_pair+0x1e8>)
 80162b4:	781b      	ldrb	r3, [r3, #0]
 80162b6:	461a      	mov	r2, r3
 80162b8:	f241 5398 	movw	r3, #5528	@ 0x1598
 80162bc:	fb02 f303 	mul.w	r3, r2, r3
 80162c0:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80162c4:	4a20      	ldr	r2, [pc, #128]	@ (8016348 <vnd_prepare_pair+0x1ec>)
 80162c6:	4413      	add	r3, r2
 80162c8:	61fb      	str	r3, [r7, #28]
    if(f0->st != FB_FILL || f1->st != FB_FILL) return;
 80162ca:	6a3b      	ldr	r3, [r7, #32]
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	b2db      	uxtb	r3, r3
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	f040 80c0 	bne.w	8016456 <vnd_prepare_pair+0x2fa>
 80162d6:	69fb      	ldr	r3, [r7, #28]
 80162d8:	781b      	ldrb	r3, [r3, #0]
 80162da:	b2db      	uxtb	r3, r3
 80162dc:	2b00      	cmp	r3, #0
 80162de:	f040 80ba 	bne.w	8016456 <vnd_prepare_pair+0x2fa>
    memset(f0->buf, 0, sizeof(f0->buf)); memset(f1->buf, 0, sizeof(f1->buf));
 80162e2:	6a3b      	ldr	r3, [r7, #32]
 80162e4:	330c      	adds	r3, #12
 80162e6:	f44f 622c 	mov.w	r2, #2752	@ 0xac0
 80162ea:	2100      	movs	r1, #0
 80162ec:	4618      	mov	r0, r3
 80162ee:	f005 f8f3 	bl	801b4d8 <memset>
 80162f2:	69fb      	ldr	r3, [r7, #28]
 80162f4:	330c      	adds	r3, #12
 80162f6:	f44f 622c 	mov.w	r2, #2752	@ 0xac0
 80162fa:	2100      	movs	r1, #0
 80162fc:	4618      	mov	r0, r3
 80162fe:	f005 f8eb 	bl	801b4d8 <memset>
    uint32_t pair_timestamp = HAL_GetTick();
 8016302:	f7ee fe33 	bl	8004f6c <HAL_GetTick>
 8016306:	61b8      	str	r0, [r7, #24]
    /* подробный лог пары убран для снижения нагрузки */
    /* Применяем усечение, если задано и меньше доступного */
    uint16_t use_samples = cur_samples_per_frame; /* уже определено и проверено */
 8016308:	4b0b      	ldr	r3, [pc, #44]	@ (8016338 <vnd_prepare_pair+0x1dc>)
 801630a:	881b      	ldrh	r3, [r3, #0]
 801630c:	82fb      	strh	r3, [r7, #22]
    for(uint16_t i = 0; i < use_samples; i++){
 801630e:	2300      	movs	r3, #0
 8016310:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016314:	e055      	b.n	80163c2 <vnd_prepare_pair+0x266>
 8016316:	bf00      	nop
 8016318:	2400dc5c 	.word	0x2400dc5c
 801631c:	2400ad00 	.word	0x2400ad00
 8016320:	2400ad04 	.word	0x2400ad04
 8016324:	2400dc68 	.word	0x2400dc68
 8016328:	24000300 	.word	0x24000300
 801632c:	24005800 	.word	0x24005800
 8016330:	2400dc3a 	.word	0x2400dc3a
 8016334:	2400dc38 	.word	0x2400dc38
 8016338:	2400dbac 	.word	0x2400dbac
 801633c:	2400dbae 	.word	0x2400dbae
 8016340:	2400dbc8 	.word	0x2400dbc8
 8016344:	24019ff8 	.word	0x24019ff8
 8016348:	2400f338 	.word	0x2400f338
        /* В тестовом режиме гарантируем детерминированный шаблон 1..N
           независимо от источника буферов, чтобы упростить верификацию хостом. */
        uint16_t a = (uint16_t)(i + 1);
        uint16_t b = (uint16_t)(i + 1);
#else
        uint16_t a = ch1[i];
 801634c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016350:	005b      	lsls	r3, r3, #1
 8016352:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016354:	4413      	add	r3, r2
 8016356:	881b      	ldrh	r3, [r3, #0]
 8016358:	817b      	strh	r3, [r7, #10]
        uint16_t b = ch2[i];
 801635a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801635e:	005b      	lsls	r3, r3, #1
 8016360:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016362:	4413      	add	r3, r2
 8016364:	881b      	ldrh	r3, [r3, #0]
 8016366:	813b      	strh	r3, [r7, #8]
#endif
        uint8_t *p0 = f0->buf + VND_FRAME_HDR_SIZE + 2 * i; p0[0] = (uint8_t)(a & 0xFF); p0[1] = (uint8_t)(a >> 8);
 8016368:	6a3b      	ldr	r3, [r7, #32]
 801636a:	f103 020c 	add.w	r2, r3, #12
 801636e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016372:	005b      	lsls	r3, r3, #1
 8016374:	3320      	adds	r3, #32
 8016376:	4413      	add	r3, r2
 8016378:	607b      	str	r3, [r7, #4]
 801637a:	897b      	ldrh	r3, [r7, #10]
 801637c:	b2da      	uxtb	r2, r3
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	701a      	strb	r2, [r3, #0]
 8016382:	897b      	ldrh	r3, [r7, #10]
 8016384:	0a1b      	lsrs	r3, r3, #8
 8016386:	b29a      	uxth	r2, r3
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	3301      	adds	r3, #1
 801638c:	b2d2      	uxtb	r2, r2
 801638e:	701a      	strb	r2, [r3, #0]
        uint8_t *p1 = f1->buf + VND_FRAME_HDR_SIZE + 2 * i; p1[0] = (uint8_t)(b & 0xFF); p1[1] = (uint8_t)(b >> 8);
 8016390:	69fb      	ldr	r3, [r7, #28]
 8016392:	f103 020c 	add.w	r2, r3, #12
 8016396:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801639a:	005b      	lsls	r3, r3, #1
 801639c:	3320      	adds	r3, #32
 801639e:	4413      	add	r3, r2
 80163a0:	603b      	str	r3, [r7, #0]
 80163a2:	893b      	ldrh	r3, [r7, #8]
 80163a4:	b2da      	uxtb	r2, r3
 80163a6:	683b      	ldr	r3, [r7, #0]
 80163a8:	701a      	strb	r2, [r3, #0]
 80163aa:	893b      	ldrh	r3, [r7, #8]
 80163ac:	0a1b      	lsrs	r3, r3, #8
 80163ae:	b29a      	uxth	r2, r3
 80163b0:	683b      	ldr	r3, [r7, #0]
 80163b2:	3301      	adds	r3, #1
 80163b4:	b2d2      	uxtb	r2, r2
 80163b6:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < use_samples; i++){
 80163b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80163bc:	3301      	adds	r3, #1
 80163be:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80163c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80163c6:	8afb      	ldrh	r3, [r7, #22]
 80163c8:	429a      	cmp	r2, r3
 80163ca:	d3bf      	bcc.n	801634c <vnd_prepare_pair+0x1f0>
    }
    f0->samples = f1->samples = use_samples; 
 80163cc:	69fb      	ldr	r3, [r7, #28]
 80163ce:	8afa      	ldrh	r2, [r7, #22]
 80163d0:	805a      	strh	r2, [r3, #2]
 80163d2:	69fb      	ldr	r3, [r7, #28]
 80163d4:	885a      	ldrh	r2, [r3, #2]
 80163d6:	6a3b      	ldr	r3, [r7, #32]
 80163d8:	805a      	strh	r2, [r3, #2]
    /* Incrementing seq counter для каждой пары */
    static volatile uint32_t real_pair_seq = 1;  /* Начинаем с 1, чтобы избежать путаницы с инициализацией (=0) */
    f0->seq = f1->seq = real_pair_seq++;
 80163da:	4b21      	ldr	r3, [pc, #132]	@ (8016460 <vnd_prepare_pair+0x304>)
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	1c5a      	adds	r2, r3, #1
 80163e0:	491f      	ldr	r1, [pc, #124]	@ (8016460 <vnd_prepare_pair+0x304>)
 80163e2:	600a      	str	r2, [r1, #0]
 80163e4:	69fa      	ldr	r2, [r7, #28]
 80163e6:	6093      	str	r3, [r2, #8]
 80163e8:	69fb      	ldr	r3, [r7, #28]
 80163ea:	689a      	ldr	r2, [r3, #8]
 80163ec:	6a3b      	ldr	r3, [r7, #32]
 80163ee:	609a      	str	r2, [r3, #8]
    vnd_frame_hdr_t *h0 = (vnd_frame_hdr_t*)f0->buf; h0->timestamp = pair_timestamp;
 80163f0:	6a3b      	ldr	r3, [r7, #32]
 80163f2:	330c      	adds	r3, #12
 80163f4:	613b      	str	r3, [r7, #16]
 80163f6:	693b      	ldr	r3, [r7, #16]
 80163f8:	69ba      	ldr	r2, [r7, #24]
 80163fa:	609a      	str	r2, [r3, #8]
    vnd_frame_hdr_t *h1 = (vnd_frame_hdr_t*)f1->buf; h1->timestamp = pair_timestamp;
 80163fc:	69fb      	ldr	r3, [r7, #28]
 80163fe:	330c      	adds	r3, #12
 8016400:	60fb      	str	r3, [r7, #12]
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	69ba      	ldr	r2, [r7, #24]
 8016406:	609a      	str	r2, [r3, #8]
    vnd_build_frame(f0); vnd_build_frame(f1);
 8016408:	6a38      	ldr	r0, [r7, #32]
 801640a:	f000 f831 	bl	8016470 <vnd_build_frame>
 801640e:	69f8      	ldr	r0, [r7, #28]
 8016410:	f000 f82e 	bl	8016470 <vnd_build_frame>
    if(f0->st == FB_FILL || f1->st == FB_FILL){ dbg_partial_frame_abort++; VND_LOG("build failed"); return; }
 8016414:	6a3b      	ldr	r3, [r7, #32]
 8016416:	781b      	ldrb	r3, [r3, #0]
 8016418:	b2db      	uxtb	r3, r3
 801641a:	2b00      	cmp	r3, #0
 801641c:	d004      	beq.n	8016428 <vnd_prepare_pair+0x2cc>
 801641e:	69fb      	ldr	r3, [r7, #28]
 8016420:	781b      	ldrb	r3, [r3, #0]
 8016422:	b2db      	uxtb	r3, r3
 8016424:	2b00      	cmp	r3, #0
 8016426:	d105      	bne.n	8016434 <vnd_prepare_pair+0x2d8>
 8016428:	4b0e      	ldr	r3, [pc, #56]	@ (8016464 <vnd_prepare_pair+0x308>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	3301      	adds	r3, #1
 801642e:	4a0d      	ldr	r2, [pc, #52]	@ (8016464 <vnd_prepare_pair+0x308>)
 8016430:	6013      	str	r3, [r2, #0]
 8016432:	e011      	b.n	8016458 <vnd_prepare_pair+0x2fc>
    /* VND_LOG("Pair prepared, fill_idx=%u", pair_fill_idx); */
    pair_fill_idx = (pair_fill_idx + 1u) % VND_PAIR_BUFFERS;
 8016434:	4b0c      	ldr	r3, [pc, #48]	@ (8016468 <vnd_prepare_pair+0x30c>)
 8016436:	781b      	ldrb	r3, [r3, #0]
 8016438:	3301      	adds	r3, #1
 801643a:	b2db      	uxtb	r3, r3
 801643c:	f003 0307 	and.w	r3, r3, #7
 8016440:	b2da      	uxtb	r2, r3
 8016442:	4b09      	ldr	r3, [pc, #36]	@ (8016468 <vnd_prepare_pair+0x30c>)
 8016444:	701a      	strb	r2, [r3, #0]
    dbg_prepare_ok++;
 8016446:	4b09      	ldr	r3, [pc, #36]	@ (801646c <vnd_prepare_pair+0x310>)
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	3301      	adds	r3, #1
 801644c:	4a07      	ldr	r2, [pc, #28]	@ (801646c <vnd_prepare_pair+0x310>)
 801644e:	6013      	str	r3, [r2, #0]
 8016450:	e002      	b.n	8016458 <vnd_prepare_pair+0x2fc>
        return;
 8016452:	bf00      	nop
 8016454:	e000      	b.n	8016458 <vnd_prepare_pair+0x2fc>
    if(f0->st != FB_FILL || f1->st != FB_FILL) return;
 8016456:	bf00      	nop
}
 8016458:	3748      	adds	r7, #72	@ 0x48
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	24000054 	.word	0x24000054
 8016464:	2400dbc8 	.word	0x2400dbc8
 8016468:	24019ff8 	.word	0x24019ff8
 801646c:	2400dc60 	.word	0x2400dc60

08016470 <vnd_build_frame>:

static void vnd_build_frame(ChanFrame *cf)
{
 8016470:	b480      	push	{r7}
 8016472:	b087      	sub	sp, #28
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
    if(cf->samples == 0){ cf->st = FB_FILL; return; }
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	885b      	ldrh	r3, [r3, #2]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d103      	bne.n	8016488 <vnd_build_frame+0x18>
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	2200      	movs	r2, #0
 8016484:	701a      	strb	r2, [r3, #0]
 8016486:	e06d      	b.n	8016564 <vnd_build_frame+0xf4>
    uint32_t payload_len = (uint32_t)cf->samples * 2u;
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	885b      	ldrh	r3, [r3, #2]
 801648c:	005b      	lsls	r3, r3, #1
 801648e:	617b      	str	r3, [r7, #20]
    uint32_t total = VND_FRAME_HDR_SIZE + payload_len;
 8016490:	697b      	ldr	r3, [r7, #20]
 8016492:	3320      	adds	r3, #32
 8016494:	613b      	str	r3, [r7, #16]
    vnd_frame_hdr_t *h = (vnd_frame_hdr_t*)cf->buf;
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	330c      	adds	r3, #12
 801649a:	60fb      	str	r3, [r7, #12]
    
    h->magic = 0xA55A; h->ver = 0x01; h->flags = (cf->flags & VND_FLAGS_ADC0) ? 0x01 : 0x02; h->seq = cf->seq; h->total_samples = (uint16_t)cf->samples;
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	2200      	movs	r2, #0
 80164a0:	f042 025a 	orr.w	r2, r2, #90	@ 0x5a
 80164a4:	701a      	strb	r2, [r3, #0]
 80164a6:	2200      	movs	r2, #0
 80164a8:	f062 025a 	orn	r2, r2, #90	@ 0x5a
 80164ac:	705a      	strb	r2, [r3, #1]
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	2201      	movs	r2, #1
 80164b2:	709a      	strb	r2, [r3, #2]
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	791b      	ldrb	r3, [r3, #4]
 80164b8:	f003 0301 	and.w	r3, r3, #1
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d001      	beq.n	80164c4 <vnd_build_frame+0x54>
 80164c0:	2201      	movs	r2, #1
 80164c2:	e000      	b.n	80164c6 <vnd_build_frame+0x56>
 80164c4:	2202      	movs	r2, #2
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	70da      	strb	r2, [r3, #3]
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	689a      	ldr	r2, [r3, #8]
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	605a      	str	r2, [r3, #4]
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	885a      	ldrh	r2, [r3, #2]
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	819a      	strh	r2, [r3, #12]
    VND_LOG("BUILD_FRAME cf_seq=%lu flags=0x%02X samples=%u", (unsigned long)cf->seq, (unsigned)h->flags, (unsigned)cf->samples);
    h->zone_count = 0; h->zone1_offset = 0; h->zone1_length = 0; h->reserved = 0; h->reserved2 = 0; h->crc16 = 0;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	2200      	movs	r2, #0
 80164de:	739a      	strb	r2, [r3, #14]
 80164e0:	2200      	movs	r2, #0
 80164e2:	73da      	strb	r2, [r3, #15]
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	2200      	movs	r2, #0
 80164e8:	741a      	strb	r2, [r3, #16]
 80164ea:	2200      	movs	r2, #0
 80164ec:	745a      	strb	r2, [r3, #17]
 80164ee:	2200      	movs	r2, #0
 80164f0:	749a      	strb	r2, [r3, #18]
 80164f2:	2200      	movs	r2, #0
 80164f4:	74da      	strb	r2, [r3, #19]
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	2200      	movs	r2, #0
 80164fa:	751a      	strb	r2, [r3, #20]
 80164fc:	2200      	movs	r2, #0
 80164fe:	755a      	strb	r2, [r3, #21]
 8016500:	2200      	movs	r2, #0
 8016502:	759a      	strb	r2, [r3, #22]
 8016504:	2200      	movs	r2, #0
 8016506:	75da      	strb	r2, [r3, #23]
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	2200      	movs	r2, #0
 801650c:	761a      	strb	r2, [r3, #24]
 801650e:	2200      	movs	r2, #0
 8016510:	765a      	strb	r2, [r3, #25]
 8016512:	2200      	movs	r2, #0
 8016514:	769a      	strb	r2, [r3, #26]
 8016516:	2200      	movs	r2, #0
 8016518:	76da      	strb	r2, [r3, #27]
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	2200      	movs	r2, #0
 801651e:	771a      	strb	r2, [r3, #28]
 8016520:	2200      	movs	r2, #0
 8016522:	775a      	strb	r2, [r3, #29]
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	2200      	movs	r2, #0
 8016528:	779a      	strb	r2, [r3, #30]
 801652a:	2200      	movs	r2, #0
 801652c:	77da      	strb	r2, [r3, #31]
    cf->frame_size = (uint16_t)total;
 801652e:	693b      	ldr	r3, [r7, #16]
 8016530:	b29a      	uxth	r2, r3
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	80da      	strh	r2, [r3, #6]
    if(cur_expected_frame_size && cf->frame_size != cur_expected_frame_size) dbg_size_mismatch++;
 8016536:	4b0e      	ldr	r3, [pc, #56]	@ (8016570 <vnd_build_frame+0x100>)
 8016538:	881b      	ldrh	r3, [r3, #0]
 801653a:	b29b      	uxth	r3, r3
 801653c:	2b00      	cmp	r3, #0
 801653e:	d00b      	beq.n	8016558 <vnd_build_frame+0xe8>
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	88da      	ldrh	r2, [r3, #6]
 8016544:	4b0a      	ldr	r3, [pc, #40]	@ (8016570 <vnd_build_frame+0x100>)
 8016546:	881b      	ldrh	r3, [r3, #0]
 8016548:	b29b      	uxth	r3, r3
 801654a:	429a      	cmp	r2, r3
 801654c:	d004      	beq.n	8016558 <vnd_build_frame+0xe8>
 801654e:	4b09      	ldr	r3, [pc, #36]	@ (8016574 <vnd_build_frame+0x104>)
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	3301      	adds	r3, #1
 8016554:	4a07      	ldr	r2, [pc, #28]	@ (8016574 <vnd_build_frame+0x104>)
 8016556:	6013      	str	r3, [r2, #0]
    dbg_any_valid_frame = 1; cf->st = FB_READY;
 8016558:	4b07      	ldr	r3, [pc, #28]	@ (8016578 <vnd_build_frame+0x108>)
 801655a:	2201      	movs	r2, #1
 801655c:	701a      	strb	r2, [r3, #0]
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	2201      	movs	r2, #1
 8016562:	701a      	strb	r2, [r3, #0]
}
 8016564:	371c      	adds	r7, #28
 8016566:	46bd      	mov	sp, r7
 8016568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656c:	4770      	bx	lr
 801656e:	bf00      	nop
 8016570:	2400dbae 	.word	0x2400dbae
 8016574:	2400dbcc 	.word	0x2400dbcc
 8016578:	2400dc15 	.word	0x2400dc15

0801657c <vnd_find_pair_by_seq>:

/* Поиск индекса пары по seq (линейный поиск по короткому кольцу) */
static int vnd_find_pair_by_seq(uint32_t seq)
{
 801657c:	b480      	push	{r7}
 801657e:	b085      	sub	sp, #20
 8016580:	af00      	add	r7, sp, #0
 8016582:	6078      	str	r0, [r7, #4]
    for(uint8_t i=0;i<VND_PAIR_BUFFERS;i++){
 8016584:	2300      	movs	r3, #0
 8016586:	73fb      	strb	r3, [r7, #15]
 8016588:	e037      	b.n	80165fa <vnd_find_pair_by_seq+0x7e>
        if(g_frames[i][0].st != FB_FILL && g_frames[i][0].seq == seq) return (int)i;
 801658a:	7bfb      	ldrb	r3, [r7, #15]
 801658c:	4a20      	ldr	r2, [pc, #128]	@ (8016610 <vnd_find_pair_by_seq+0x94>)
 801658e:	f241 5198 	movw	r1, #5528	@ 0x1598
 8016592:	fb01 f303 	mul.w	r3, r1, r3
 8016596:	4413      	add	r3, r2
 8016598:	781b      	ldrb	r3, [r3, #0]
 801659a:	b2db      	uxtb	r3, r3
 801659c:	2b00      	cmp	r3, #0
 801659e:	d00d      	beq.n	80165bc <vnd_find_pair_by_seq+0x40>
 80165a0:	7bfb      	ldrb	r3, [r7, #15]
 80165a2:	4a1b      	ldr	r2, [pc, #108]	@ (8016610 <vnd_find_pair_by_seq+0x94>)
 80165a4:	f241 5198 	movw	r1, #5528	@ 0x1598
 80165a8:	fb01 f303 	mul.w	r3, r1, r3
 80165ac:	4413      	add	r3, r2
 80165ae:	3308      	adds	r3, #8
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	687a      	ldr	r2, [r7, #4]
 80165b4:	429a      	cmp	r2, r3
 80165b6:	d101      	bne.n	80165bc <vnd_find_pair_by_seq+0x40>
 80165b8:	7bfb      	ldrb	r3, [r7, #15]
 80165ba:	e023      	b.n	8016604 <vnd_find_pair_by_seq+0x88>
        if(g_frames[i][1].st != FB_FILL && g_frames[i][1].seq == seq) return (int)i;
 80165bc:	7bfb      	ldrb	r3, [r7, #15]
 80165be:	4a14      	ldr	r2, [pc, #80]	@ (8016610 <vnd_find_pair_by_seq+0x94>)
 80165c0:	f241 5198 	movw	r1, #5528	@ 0x1598
 80165c4:	fb01 f303 	mul.w	r3, r1, r3
 80165c8:	4413      	add	r3, r2
 80165ca:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80165ce:	781b      	ldrb	r3, [r3, #0]
 80165d0:	b2db      	uxtb	r3, r3
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d00e      	beq.n	80165f4 <vnd_find_pair_by_seq+0x78>
 80165d6:	7bfb      	ldrb	r3, [r7, #15]
 80165d8:	4a0d      	ldr	r2, [pc, #52]	@ (8016610 <vnd_find_pair_by_seq+0x94>)
 80165da:	f241 5198 	movw	r1, #5528	@ 0x1598
 80165de:	fb01 f303 	mul.w	r3, r1, r3
 80165e2:	4413      	add	r3, r2
 80165e4:	f603 23d4 	addw	r3, r3, #2772	@ 0xad4
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	687a      	ldr	r2, [r7, #4]
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d101      	bne.n	80165f4 <vnd_find_pair_by_seq+0x78>
 80165f0:	7bfb      	ldrb	r3, [r7, #15]
 80165f2:	e007      	b.n	8016604 <vnd_find_pair_by_seq+0x88>
    for(uint8_t i=0;i<VND_PAIR_BUFFERS;i++){
 80165f4:	7bfb      	ldrb	r3, [r7, #15]
 80165f6:	3301      	adds	r3, #1
 80165f8:	73fb      	strb	r3, [r7, #15]
 80165fa:	7bfb      	ldrb	r3, [r7, #15]
 80165fc:	2b07      	cmp	r3, #7
 80165fe:	d9c4      	bls.n	801658a <vnd_find_pair_by_seq+0xe>
    }
    return -1;
 8016600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016604:	4618      	mov	r0, r3
 8016606:	3714      	adds	r7, #20
 8016608:	46bd      	mov	sp, r7
 801660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660e:	4770      	bx	lr
 8016610:	2400f338 	.word	0x2400f338

08016614 <vnd_async_try_tx>:

/* Асинхронный выбор и отправка одного готового кадра (A или B) */
static int vnd_async_try_tx(void)
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b086      	sub	sp, #24
 8016618:	af02      	add	r7, sp, #8
    if(vnd_ep_busy) return 0;
 801661a:	4b59      	ldr	r3, [pc, #356]	@ (8016780 <vnd_async_try_tx+0x16c>)
 801661c:	781b      	ldrb	r3, [r3, #0]
 801661e:	b2db      	uxtb	r3, r3
 8016620:	2b00      	cmp	r3, #0
 8016622:	d001      	beq.n	8016628 <vnd_async_try_tx+0x14>
 8016624:	2300      	movs	r3, #0
 8016626:	e0a7      	b.n	8016778 <vnd_async_try_tx+0x164>
    /* Подготовим ещё данные, если текущая позиция заполнения пуста */
    if(g_frames[pair_fill_idx][0].st == FB_FILL || g_frames[pair_fill_idx][1].st == FB_FILL){
 8016628:	4b56      	ldr	r3, [pc, #344]	@ (8016784 <vnd_async_try_tx+0x170>)
 801662a:	781b      	ldrb	r3, [r3, #0]
 801662c:	4619      	mov	r1, r3
 801662e:	4a56      	ldr	r2, [pc, #344]	@ (8016788 <vnd_async_try_tx+0x174>)
 8016630:	f241 5398 	movw	r3, #5528	@ 0x1598
 8016634:	fb01 f303 	mul.w	r3, r1, r3
 8016638:	4413      	add	r3, r2
 801663a:	781b      	ldrb	r3, [r3, #0]
 801663c:	b2db      	uxtb	r3, r3
 801663e:	2b00      	cmp	r3, #0
 8016640:	d00e      	beq.n	8016660 <vnd_async_try_tx+0x4c>
 8016642:	4b50      	ldr	r3, [pc, #320]	@ (8016784 <vnd_async_try_tx+0x170>)
 8016644:	781b      	ldrb	r3, [r3, #0]
 8016646:	4619      	mov	r1, r3
 8016648:	4a4f      	ldr	r2, [pc, #316]	@ (8016788 <vnd_async_try_tx+0x174>)
 801664a:	f241 5398 	movw	r3, #5528	@ 0x1598
 801664e:	fb01 f303 	mul.w	r3, r1, r3
 8016652:	4413      	add	r3, r2
 8016654:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	b2db      	uxtb	r3, r3
 801665c:	2b00      	cmp	r3, #0
 801665e:	d101      	bne.n	8016664 <vnd_async_try_tx+0x50>
        vnd_prepare_pair();
 8016660:	f7ff fd7c 	bl	801615c <vnd_prepare_pair>
    }
    /* Отправляем самый старый READY кадр, начиная с pair_send_idx */
    for(uint8_t off=0; off<VND_PAIR_BUFFERS; off++){
 8016664:	2300      	movs	r3, #0
 8016666:	73fb      	strb	r3, [r7, #15]
 8016668:	e081      	b.n	801676e <vnd_async_try_tx+0x15a>
        uint8_t idx = (uint8_t)((pair_send_idx + off) % VND_PAIR_BUFFERS);
 801666a:	4b48      	ldr	r3, [pc, #288]	@ (801678c <vnd_async_try_tx+0x178>)
 801666c:	781a      	ldrb	r2, [r3, #0]
 801666e:	7bfb      	ldrb	r3, [r7, #15]
 8016670:	4413      	add	r3, r2
 8016672:	b2db      	uxtb	r3, r3
 8016674:	f003 0307 	and.w	r3, r3, #7
 8016678:	73bb      	strb	r3, [r7, #14]
        ChanFrame *fa = &g_frames[idx][0];
 801667a:	7bbb      	ldrb	r3, [r7, #14]
 801667c:	f241 5298 	movw	r2, #5528	@ 0x1598
 8016680:	fb02 f303 	mul.w	r3, r2, r3
 8016684:	4a40      	ldr	r2, [pc, #256]	@ (8016788 <vnd_async_try_tx+0x174>)
 8016686:	4413      	add	r3, r2
 8016688:	60bb      	str	r3, [r7, #8]
        ChanFrame *fb = &g_frames[idx][1];
 801668a:	7bbb      	ldrb	r3, [r7, #14]
 801668c:	f241 5298 	movw	r2, #5528	@ 0x1598
 8016690:	fb02 f303 	mul.w	r3, r2, r3
 8016694:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8016698:	4a3b      	ldr	r2, [pc, #236]	@ (8016788 <vnd_async_try_tx+0x174>)
 801669a:	4413      	add	r3, r2
 801669c:	607b      	str	r3, [r7, #4]
        /* Если пара целиком уже отослана (оба FB_FILL) и это голова — продвинем голову */
        if(off==0 && fa->st==FB_FILL && fb->st==FB_FILL){
 801669e:	7bfb      	ldrb	r3, [r7, #15]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d125      	bne.n	80166f0 <vnd_async_try_tx+0xdc>
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	781b      	ldrb	r3, [r3, #0]
 80166a8:	b2db      	uxtb	r3, r3
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d120      	bne.n	80166f0 <vnd_async_try_tx+0xdc>
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	781b      	ldrb	r3, [r3, #0]
 80166b2:	b2db      	uxtb	r3, r3
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d11b      	bne.n	80166f0 <vnd_async_try_tx+0xdc>
            pair_send_idx = (uint8_t)((pair_send_idx + 1u) % VND_PAIR_BUFFERS);
 80166b8:	4b34      	ldr	r3, [pc, #208]	@ (801678c <vnd_async_try_tx+0x178>)
 80166ba:	781b      	ldrb	r3, [r3, #0]
 80166bc:	3301      	adds	r3, #1
 80166be:	b2db      	uxtb	r3, r3
 80166c0:	f003 0307 	and.w	r3, r3, #7
 80166c4:	b2da      	uxtb	r2, r3
 80166c6:	4b31      	ldr	r3, [pc, #196]	@ (801678c <vnd_async_try_tx+0x178>)
 80166c8:	701a      	strb	r2, [r3, #0]
            /* Завершение пары для счётчика stream_seq */
            stream_seq++; dbg_produced_seq++; if(!first_pair_done){ first_pair_done = 1; }
 80166ca:	4b31      	ldr	r3, [pc, #196]	@ (8016790 <vnd_async_try_tx+0x17c>)
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	3301      	adds	r3, #1
 80166d0:	4a2f      	ldr	r2, [pc, #188]	@ (8016790 <vnd_async_try_tx+0x17c>)
 80166d2:	6013      	str	r3, [r2, #0]
 80166d4:	4b2f      	ldr	r3, [pc, #188]	@ (8016794 <vnd_async_try_tx+0x180>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	3301      	adds	r3, #1
 80166da:	4a2e      	ldr	r2, [pc, #184]	@ (8016794 <vnd_async_try_tx+0x180>)
 80166dc:	6013      	str	r3, [r2, #0]
 80166de:	4b2e      	ldr	r3, [pc, #184]	@ (8016798 <vnd_async_try_tx+0x184>)
 80166e0:	781b      	ldrb	r3, [r3, #0]
 80166e2:	b2db      	uxtb	r3, r3
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d13e      	bne.n	8016766 <vnd_async_try_tx+0x152>
 80166e8:	4b2b      	ldr	r3, [pc, #172]	@ (8016798 <vnd_async_try_tx+0x184>)
 80166ea:	2201      	movs	r2, #1
 80166ec:	701a      	strb	r2, [r3, #0]
            continue;
 80166ee:	e03a      	b.n	8016766 <vnd_async_try_tx+0x152>
        }
        if(fa->st == FB_READY){
 80166f0:	68bb      	ldr	r3, [r7, #8]
 80166f2:	781b      	ldrb	r3, [r3, #0]
 80166f4:	b2db      	uxtb	r3, r3
 80166f6:	2b01      	cmp	r3, #1
 80166f8:	d115      	bne.n	8016726 <vnd_async_try_tx+0x112>
            if(vnd_transmit_frame(fa->buf, fa->frame_size, 0, 0, "ADC0-ASY") == USBD_OK){ fa->st = FB_SENDING; sending_channel = 0; return 1; }
 80166fa:	68bb      	ldr	r3, [r7, #8]
 80166fc:	f103 000c 	add.w	r0, r3, #12
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	88d9      	ldrh	r1, [r3, #6]
 8016704:	4b25      	ldr	r3, [pc, #148]	@ (801679c <vnd_async_try_tx+0x188>)
 8016706:	9300      	str	r3, [sp, #0]
 8016708:	2300      	movs	r3, #0
 801670a:	2200      	movs	r2, #0
 801670c:	f000 f8aa 	bl	8016864 <vnd_transmit_frame>
 8016710:	4603      	mov	r3, r0
 8016712:	2b00      	cmp	r3, #0
 8016714:	d107      	bne.n	8016726 <vnd_async_try_tx+0x112>
 8016716:	68bb      	ldr	r3, [r7, #8]
 8016718:	2202      	movs	r2, #2
 801671a:	701a      	strb	r2, [r3, #0]
 801671c:	4b20      	ldr	r3, [pc, #128]	@ (80167a0 <vnd_async_try_tx+0x18c>)
 801671e:	2200      	movs	r2, #0
 8016720:	701a      	strb	r2, [r3, #0]
 8016722:	2301      	movs	r3, #1
 8016724:	e028      	b.n	8016778 <vnd_async_try_tx+0x164>
        }
        /* В A-only режиме пропускаем отправку B-кадров */
        if(vnd_ch_mode != 0 && fb->st == FB_READY){
 8016726:	4b1f      	ldr	r3, [pc, #124]	@ (80167a4 <vnd_async_try_tx+0x190>)
 8016728:	781b      	ldrb	r3, [r3, #0]
 801672a:	b2db      	uxtb	r3, r3
 801672c:	2b00      	cmp	r3, #0
 801672e:	d01b      	beq.n	8016768 <vnd_async_try_tx+0x154>
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	781b      	ldrb	r3, [r3, #0]
 8016734:	b2db      	uxtb	r3, r3
 8016736:	2b01      	cmp	r3, #1
 8016738:	d116      	bne.n	8016768 <vnd_async_try_tx+0x154>
            if(vnd_transmit_frame(fb->buf, fb->frame_size, 0, 0, "ADC1-ASY") == USBD_OK){ fb->st = FB_SENDING; sending_channel = 1; return 1; }
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	f103 000c 	add.w	r0, r3, #12
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	88d9      	ldrh	r1, [r3, #6]
 8016744:	4b18      	ldr	r3, [pc, #96]	@ (80167a8 <vnd_async_try_tx+0x194>)
 8016746:	9300      	str	r3, [sp, #0]
 8016748:	2300      	movs	r3, #0
 801674a:	2200      	movs	r2, #0
 801674c:	f000 f88a 	bl	8016864 <vnd_transmit_frame>
 8016750:	4603      	mov	r3, r0
 8016752:	2b00      	cmp	r3, #0
 8016754:	d108      	bne.n	8016768 <vnd_async_try_tx+0x154>
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	2202      	movs	r2, #2
 801675a:	701a      	strb	r2, [r3, #0]
 801675c:	4b10      	ldr	r3, [pc, #64]	@ (80167a0 <vnd_async_try_tx+0x18c>)
 801675e:	2201      	movs	r2, #1
 8016760:	701a      	strb	r2, [r3, #0]
 8016762:	2301      	movs	r3, #1
 8016764:	e008      	b.n	8016778 <vnd_async_try_tx+0x164>
            continue;
 8016766:	bf00      	nop
    for(uint8_t off=0; off<VND_PAIR_BUFFERS; off++){
 8016768:	7bfb      	ldrb	r3, [r7, #15]
 801676a:	3301      	adds	r3, #1
 801676c:	73fb      	strb	r3, [r7, #15]
 801676e:	7bfb      	ldrb	r3, [r7, #15]
 8016770:	2b07      	cmp	r3, #7
 8016772:	f67f af7a 	bls.w	801666a <vnd_async_try_tx+0x56>
        }
    }
    return 0;
 8016776:	2300      	movs	r3, #0
}
 8016778:	4618      	mov	r0, r3
 801677a:	3710      	adds	r7, #16
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}
 8016780:	2400dbb8 	.word	0x2400dbb8
 8016784:	24019ff8 	.word	0x24019ff8
 8016788:	2400f338 	.word	0x2400f338
 801678c:	24019ff9 	.word	0x24019ff9
 8016790:	2400dba8 	.word	0x2400dba8
 8016794:	2400dbbc 	.word	0x2400dbbc
 8016798:	2400dc40 	.word	0x2400dc40
 801679c:	0801d078 	.word	0x0801d078
 80167a0:	24000050 	.word	0x24000050
 80167a4:	24000040 	.word	0x24000040
 80167a8:	0801d084 	.word	0x0801d084

080167ac <vnd_validate_frame>:
/* allow_zero_samples используется как флаги:
 *  bit0 (1): разрешить total_samples==0
 *  bit1 (2): разрешить длину >= ожидаемой и кратную 64 (для паддинга до MPS)
 */
static int vnd_validate_frame(const uint8_t *buf, uint16_t len, uint8_t expect_test, uint8_t allow_flags)
{
 80167ac:	b480      	push	{r7}
 80167ae:	b085      	sub	sp, #20
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
 80167b4:	4608      	mov	r0, r1
 80167b6:	4611      	mov	r1, r2
 80167b8:	461a      	mov	r2, r3
 80167ba:	4603      	mov	r3, r0
 80167bc:	807b      	strh	r3, [r7, #2]
 80167be:	460b      	mov	r3, r1
 80167c0:	707b      	strb	r3, [r7, #1]
 80167c2:	4613      	mov	r3, r2
 80167c4:	703b      	strb	r3, [r7, #0]
    (void)expect_test;
    if (!buf || len < VND_FRAME_HDR_SIZE)
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d002      	beq.n	80167d2 <vnd_validate_frame+0x26>
 80167cc:	887b      	ldrh	r3, [r7, #2]
 80167ce:	2b1f      	cmp	r3, #31
 80167d0:	d801      	bhi.n	80167d6 <vnd_validate_frame+0x2a>
        return 0;
 80167d2:	2300      	movs	r3, #0
 80167d4:	e03f      	b.n	8016856 <vnd_validate_frame+0xaa>
    const vnd_frame_hdr_t *h = (const vnd_frame_hdr_t*)buf;
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	60fb      	str	r3, [r7, #12]
    if (h->magic != 0xA55A)
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	881b      	ldrh	r3, [r3, #0]
 80167de:	b29b      	uxth	r3, r3
 80167e0:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80167e4:	4293      	cmp	r3, r2
 80167e6:	d001      	beq.n	80167ec <vnd_validate_frame+0x40>
        return 0;
 80167e8:	2300      	movs	r3, #0
 80167ea:	e034      	b.n	8016856 <vnd_validate_frame+0xaa>
    if (h->total_samples > VND_MAX_SAMPLES)
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	899b      	ldrh	r3, [r3, #12]
 80167f0:	b29b      	uxth	r3, r3
 80167f2:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 80167f6:	d901      	bls.n	80167fc <vnd_validate_frame+0x50>
        return 0;
 80167f8:	2300      	movs	r3, #0
 80167fa:	e02c      	b.n	8016856 <vnd_validate_frame+0xaa>
    if (!(allow_flags & 0x01) && h->total_samples == 0)
 80167fc:	783b      	ldrb	r3, [r7, #0]
 80167fe:	f003 0301 	and.w	r3, r3, #1
 8016802:	2b00      	cmp	r3, #0
 8016804:	d106      	bne.n	8016814 <vnd_validate_frame+0x68>
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	899b      	ldrh	r3, [r3, #12]
 801680a:	b29b      	uxth	r3, r3
 801680c:	2b00      	cmp	r3, #0
 801680e:	d101      	bne.n	8016814 <vnd_validate_frame+0x68>
        return 0;
 8016810:	2300      	movs	r3, #0
 8016812:	e020      	b.n	8016856 <vnd_validate_frame+0xaa>
    {
        uint16_t expected = (uint16_t)(VND_FRAME_HDR_SIZE + h->total_samples * 2u);
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	899b      	ldrh	r3, [r3, #12]
 8016818:	b29b      	uxth	r3, r3
 801681a:	3310      	adds	r3, #16
 801681c:	b29b      	uxth	r3, r3
 801681e:	005b      	lsls	r3, r3, #1
 8016820:	817b      	strh	r3, [r7, #10]
        if (len != expected) {
 8016822:	887a      	ldrh	r2, [r7, #2]
 8016824:	897b      	ldrh	r3, [r7, #10]
 8016826:	429a      	cmp	r2, r3
 8016828:	d014      	beq.n	8016854 <vnd_validate_frame+0xa8>
            /* Разрешаем «припадиненные» кадры: длина >= expected и кратна 64 байтам (FS/HS совместимо) */
            if ((allow_flags & 0x02) == 0) return 0;
 801682a:	783b      	ldrb	r3, [r7, #0]
 801682c:	f003 0302 	and.w	r3, r3, #2
 8016830:	2b00      	cmp	r3, #0
 8016832:	d101      	bne.n	8016838 <vnd_validate_frame+0x8c>
 8016834:	2300      	movs	r3, #0
 8016836:	e00e      	b.n	8016856 <vnd_validate_frame+0xaa>
            if (len < expected) return 0;
 8016838:	887a      	ldrh	r2, [r7, #2]
 801683a:	897b      	ldrh	r3, [r7, #10]
 801683c:	429a      	cmp	r2, r3
 801683e:	d201      	bcs.n	8016844 <vnd_validate_frame+0x98>
 8016840:	2300      	movs	r3, #0
 8016842:	e008      	b.n	8016856 <vnd_validate_frame+0xaa>
            if ((len % 64u) != 0u) return 0;
 8016844:	887b      	ldrh	r3, [r7, #2]
 8016846:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801684a:	b29b      	uxth	r3, r3
 801684c:	2b00      	cmp	r3, #0
 801684e:	d001      	beq.n	8016854 <vnd_validate_frame+0xa8>
 8016850:	2300      	movs	r3, #0
 8016852:	e000      	b.n	8016856 <vnd_validate_frame+0xaa>
        }
    }
    return 1;
 8016854:	2301      	movs	r3, #1
}
 8016856:	4618      	mov	r0, r3
 8016858:	3714      	adds	r7, #20
 801685a:	46bd      	mov	sp, r7
 801685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016860:	4770      	bx	lr
	...

08016864 <vnd_transmit_frame>:

static USBD_StatusTypeDef __attribute__((unused)) vnd_transmit_frame(uint8_t *buf, uint16_t len, uint8_t is_test, uint8_t allow_zero_samples, const char *tag)
{
 8016864:	b580      	push	{r7, lr}
 8016866:	b08a      	sub	sp, #40	@ 0x28
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
 801686c:	4608      	mov	r0, r1
 801686e:	4611      	mov	r1, r2
 8016870:	461a      	mov	r2, r3
 8016872:	4603      	mov	r3, r0
 8016874:	807b      	strh	r3, [r7, #2]
 8016876:	460b      	mov	r3, r1
 8016878:	707b      	strb	r3, [r7, #1]
 801687a:	4613      	mov	r3, r2
 801687c:	703b      	strb	r3, [r7, #0]
    (void)is_test; dbg_tx_attempt++;
 801687e:	4b6d      	ldr	r3, [pc, #436]	@ (8016a34 <vnd_transmit_frame+0x1d0>)
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	3301      	adds	r3, #1
 8016884:	4a6b      	ldr	r2, [pc, #428]	@ (8016a34 <vnd_transmit_frame+0x1d0>)
 8016886:	6013      	str	r3, [r2, #0]
    if(!vnd_validate_frame(buf, len, is_test, allow_zero_samples)){ dbg_tx_reject++; vnd_error_counter++; if(vnd_last_error == 0) vnd_last_error = 3; VND_LOG("TX_REJECT %s", tag ? tag : "?"); return USBD_FAIL; }
 8016888:	783b      	ldrb	r3, [r7, #0]
 801688a:	787a      	ldrb	r2, [r7, #1]
 801688c:	8879      	ldrh	r1, [r7, #2]
 801688e:	6878      	ldr	r0, [r7, #4]
 8016890:	f7ff ff8c 	bl	80167ac <vnd_validate_frame>
 8016894:	4603      	mov	r3, r0
 8016896:	2b00      	cmp	r3, #0
 8016898:	d112      	bne.n	80168c0 <vnd_transmit_frame+0x5c>
 801689a:	4b67      	ldr	r3, [pc, #412]	@ (8016a38 <vnd_transmit_frame+0x1d4>)
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	3301      	adds	r3, #1
 80168a0:	4a65      	ldr	r2, [pc, #404]	@ (8016a38 <vnd_transmit_frame+0x1d4>)
 80168a2:	6013      	str	r3, [r2, #0]
 80168a4:	4b65      	ldr	r3, [pc, #404]	@ (8016a3c <vnd_transmit_frame+0x1d8>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	3301      	adds	r3, #1
 80168aa:	4a64      	ldr	r2, [pc, #400]	@ (8016a3c <vnd_transmit_frame+0x1d8>)
 80168ac:	6013      	str	r3, [r2, #0]
 80168ae:	4b64      	ldr	r3, [pc, #400]	@ (8016a40 <vnd_transmit_frame+0x1dc>)
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d102      	bne.n	80168bc <vnd_transmit_frame+0x58>
 80168b6:	4b62      	ldr	r3, [pc, #392]	@ (8016a40 <vnd_transmit_frame+0x1dc>)
 80168b8:	2203      	movs	r2, #3
 80168ba:	601a      	str	r2, [r3, #0]
 80168bc:	2303      	movs	r3, #3
 80168be:	e0b5      	b.n	8016a2c <vnd_transmit_frame+0x1c8>
    if(!vnd_tx_ready || vnd_ep_busy || vnd_inflight){ vnd_error_counter++; VND_LOG("TX_SKIP busy/inflight tag=%s", tag ? tag : "?"); return USBD_BUSY; }
 80168c0:	4b60      	ldr	r3, [pc, #384]	@ (8016a44 <vnd_transmit_frame+0x1e0>)
 80168c2:	781b      	ldrb	r3, [r3, #0]
 80168c4:	b2db      	uxtb	r3, r3
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d009      	beq.n	80168de <vnd_transmit_frame+0x7a>
 80168ca:	4b5f      	ldr	r3, [pc, #380]	@ (8016a48 <vnd_transmit_frame+0x1e4>)
 80168cc:	781b      	ldrb	r3, [r3, #0]
 80168ce:	b2db      	uxtb	r3, r3
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d104      	bne.n	80168de <vnd_transmit_frame+0x7a>
 80168d4:	4b5d      	ldr	r3, [pc, #372]	@ (8016a4c <vnd_transmit_frame+0x1e8>)
 80168d6:	781b      	ldrb	r3, [r3, #0]
 80168d8:	b2db      	uxtb	r3, r3
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d006      	beq.n	80168ec <vnd_transmit_frame+0x88>
 80168de:	4b57      	ldr	r3, [pc, #348]	@ (8016a3c <vnd_transmit_frame+0x1d8>)
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	3301      	adds	r3, #1
 80168e4:	4a55      	ldr	r2, [pc, #340]	@ (8016a3c <vnd_transmit_frame+0x1d8>)
 80168e6:	6013      	str	r3, [r2, #0]
 80168e8:	2301      	movs	r3, #1
 80168ea:	e09f      	b.n	8016a2c <vnd_transmit_frame+0x1c8>
    vnd_tx_ready = 0; vnd_ep_busy = 1; vnd_inflight = 1; vnd_last_tx_len = len; vnd_last_tx_start_ms = HAL_GetTick();
 80168ec:	4b55      	ldr	r3, [pc, #340]	@ (8016a44 <vnd_transmit_frame+0x1e0>)
 80168ee:	2200      	movs	r2, #0
 80168f0:	701a      	strb	r2, [r3, #0]
 80168f2:	4b55      	ldr	r3, [pc, #340]	@ (8016a48 <vnd_transmit_frame+0x1e4>)
 80168f4:	2201      	movs	r2, #1
 80168f6:	701a      	strb	r2, [r3, #0]
 80168f8:	4b54      	ldr	r3, [pc, #336]	@ (8016a4c <vnd_transmit_frame+0x1e8>)
 80168fa:	2201      	movs	r2, #1
 80168fc:	701a      	strb	r2, [r3, #0]
 80168fe:	4a54      	ldr	r2, [pc, #336]	@ (8016a50 <vnd_transmit_frame+0x1ec>)
 8016900:	887b      	ldrh	r3, [r7, #2]
 8016902:	8013      	strh	r3, [r2, #0]
 8016904:	f7ee fb32 	bl	8004f6c <HAL_GetTick>
 8016908:	4603      	mov	r3, r0
 801690a:	4a52      	ldr	r2, [pc, #328]	@ (8016a54 <vnd_transmit_frame+0x1f0>)
 801690c:	6013      	str	r3, [r2, #0]

    /* Фиксируем метаданные кадра; НЕ переписываем seq перед отправкой.
       Последовательность пар контролируется строго: seq фиксируется при сборке пары,
       а инкремент выполняется только по завершению B (TxCplt). Это исключает случаи,
       когда задержавшийся B получает «будущий» seq. */
    uint8_t is_frame=0, flags=0; uint32_t seq_field=0; int rewrote_seq = 0;
 801690e:	2300      	movs	r3, #0
 8016910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016914:	2300      	movs	r3, #0
 8016916:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801691a:	2300      	movs	r3, #0
 801691c:	623b      	str	r3, [r7, #32]
 801691e:	2300      	movs	r3, #0
 8016920:	61fb      	str	r3, [r7, #28]
    if(len >= VND_FRAME_HDR_SIZE){
 8016922:	887b      	ldrh	r3, [r7, #2]
 8016924:	2b1f      	cmp	r3, #31
 8016926:	d912      	bls.n	801694e <vnd_transmit_frame+0xea>
        vnd_frame_hdr_t *hh = (vnd_frame_hdr_t*)buf;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	61bb      	str	r3, [r7, #24]
        if(hh->magic == 0xA55A){ is_frame = 1; flags = hh->flags; seq_field = hh->seq; }
 801692c:	69bb      	ldr	r3, [r7, #24]
 801692e:	881b      	ldrh	r3, [r3, #0]
 8016930:	b29b      	uxth	r3, r3
 8016932:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016936:	4293      	cmp	r3, r2
 8016938:	d109      	bne.n	801694e <vnd_transmit_frame+0xea>
 801693a:	2301      	movs	r3, #1
 801693c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016940:	69bb      	ldr	r3, [r7, #24]
 8016942:	78db      	ldrb	r3, [r3, #3]
 8016944:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016948:	69bb      	ldr	r3, [r7, #24]
 801694a:	685b      	ldr	r3, [r3, #4]
 801694c:	623b      	str	r3, [r7, #32]
    }

    /* Зафиксируем точный тип текущего кадра в полёте */
    if(len >= VND_FRAME_HDR_SIZE){ const vnd_frame_hdr_t *hh = (const vnd_frame_hdr_t*)buf; if(hh->magic==0xA55A){ inflight_is_frame = 1; inflight_flags = hh->flags; inflight_seq = hh->seq; } else { inflight_is_frame = 0; inflight_flags = 0; inflight_seq = 0; } } else { inflight_is_frame = 0; inflight_flags = 0; inflight_seq = 0; }
 801694e:	887b      	ldrh	r3, [r7, #2]
 8016950:	2b1f      	cmp	r3, #31
 8016952:	d91e      	bls.n	8016992 <vnd_transmit_frame+0x12e>
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	617b      	str	r3, [r7, #20]
 8016958:	697b      	ldr	r3, [r7, #20]
 801695a:	881b      	ldrh	r3, [r3, #0]
 801695c:	b29b      	uxth	r3, r3
 801695e:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016962:	4293      	cmp	r3, r2
 8016964:	d10b      	bne.n	801697e <vnd_transmit_frame+0x11a>
 8016966:	4b3c      	ldr	r3, [pc, #240]	@ (8016a58 <vnd_transmit_frame+0x1f4>)
 8016968:	2201      	movs	r2, #1
 801696a:	701a      	strb	r2, [r3, #0]
 801696c:	697b      	ldr	r3, [r7, #20]
 801696e:	78da      	ldrb	r2, [r3, #3]
 8016970:	4b3a      	ldr	r3, [pc, #232]	@ (8016a5c <vnd_transmit_frame+0x1f8>)
 8016972:	701a      	strb	r2, [r3, #0]
 8016974:	697b      	ldr	r3, [r7, #20]
 8016976:	685b      	ldr	r3, [r3, #4]
 8016978:	4a39      	ldr	r2, [pc, #228]	@ (8016a60 <vnd_transmit_frame+0x1fc>)
 801697a:	6013      	str	r3, [r2, #0]
 801697c:	e012      	b.n	80169a4 <vnd_transmit_frame+0x140>
 801697e:	4b36      	ldr	r3, [pc, #216]	@ (8016a58 <vnd_transmit_frame+0x1f4>)
 8016980:	2200      	movs	r2, #0
 8016982:	701a      	strb	r2, [r3, #0]
 8016984:	4b35      	ldr	r3, [pc, #212]	@ (8016a5c <vnd_transmit_frame+0x1f8>)
 8016986:	2200      	movs	r2, #0
 8016988:	701a      	strb	r2, [r3, #0]
 801698a:	4b35      	ldr	r3, [pc, #212]	@ (8016a60 <vnd_transmit_frame+0x1fc>)
 801698c:	2200      	movs	r2, #0
 801698e:	601a      	str	r2, [r3, #0]
 8016990:	e008      	b.n	80169a4 <vnd_transmit_frame+0x140>
 8016992:	4b31      	ldr	r3, [pc, #196]	@ (8016a58 <vnd_transmit_frame+0x1f4>)
 8016994:	2200      	movs	r2, #0
 8016996:	701a      	strb	r2, [r3, #0]
 8016998:	4b30      	ldr	r3, [pc, #192]	@ (8016a5c <vnd_transmit_frame+0x1f8>)
 801699a:	2200      	movs	r2, #0
 801699c:	701a      	strb	r2, [r3, #0]
 801699e:	4b30      	ldr	r3, [pc, #192]	@ (8016a60 <vnd_transmit_frame+0x1fc>)
 80169a0:	2200      	movs	r2, #0
 80169a2:	601a      	str	r2, [r3, #0]
    USBD_StatusTypeDef rc = USBD_VND_Transmit(&hUsbDeviceHS, buf, len);
 80169a4:	887b      	ldrh	r3, [r7, #2]
 80169a6:	461a      	mov	r2, r3
 80169a8:	6879      	ldr	r1, [r7, #4]
 80169aa:	482e      	ldr	r0, [pc, #184]	@ (8016a64 <vnd_transmit_frame+0x200>)
 80169ac:	f002 fec2 	bl	8019734 <USBD_VND_Transmit>
 80169b0:	4603      	mov	r3, r0
 80169b2:	74fb      	strb	r3, [r7, #19]
    if(rc == USBD_BUSY){
 80169b4:	7cfb      	ldrb	r3, [r7, #19]
 80169b6:	2b01      	cmp	r3, #1
 80169b8:	d126      	bne.n	8016a08 <vnd_transmit_frame+0x1a4>
        dbg_resend_blocked++; vnd_error_counter++; if(vnd_last_error == 0) vnd_last_error = 4;
 80169ba:	4b2b      	ldr	r3, [pc, #172]	@ (8016a68 <vnd_transmit_frame+0x204>)
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	3301      	adds	r3, #1
 80169c0:	4a29      	ldr	r2, [pc, #164]	@ (8016a68 <vnd_transmit_frame+0x204>)
 80169c2:	6013      	str	r3, [r2, #0]
 80169c4:	4b1d      	ldr	r3, [pc, #116]	@ (8016a3c <vnd_transmit_frame+0x1d8>)
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	3301      	adds	r3, #1
 80169ca:	4a1c      	ldr	r2, [pc, #112]	@ (8016a3c <vnd_transmit_frame+0x1d8>)
 80169cc:	6013      	str	r3, [r2, #0]
 80169ce:	4b1c      	ldr	r3, [pc, #112]	@ (8016a40 <vnd_transmit_frame+0x1dc>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d102      	bne.n	80169dc <vnd_transmit_frame+0x178>
 80169d6:	4b1a      	ldr	r3, [pc, #104]	@ (8016a40 <vnd_transmit_frame+0x1dc>)
 80169d8:	2204      	movs	r2, #4
 80169da:	601a      	str	r2, [r3, #0]
        /* Диагностика LL: получим last rc/len и флаг занятости */
        extern uint8_t USBD_VND_TxIsBusy(void);
        extern uint8_t USBD_VND_LastTxRC(void);
        extern uint16_t USBD_VND_LastTxLen(void);
        uint8_t ll_busy = USBD_VND_TxIsBusy(); uint8_t ll_rc = USBD_VND_LastTxRC(); uint16_t ll_len = USBD_VND_LastTxLen();
 80169dc:	f002 ff12 	bl	8019804 <USBD_VND_TxIsBusy>
 80169e0:	4603      	mov	r3, r0
 80169e2:	72fb      	strb	r3, [r7, #11]
 80169e4:	f002 ff1a 	bl	801981c <USBD_VND_LastTxRC>
 80169e8:	4603      	mov	r3, r0
 80169ea:	72bb      	strb	r3, [r7, #10]
 80169ec:	f002 ff22 	bl	8019834 <USBD_VND_LastTxLen>
 80169f0:	4603      	mov	r3, r0
 80169f2:	813b      	strh	r3, [r7, #8]
        VND_LOG("TX_BUSY tag=%s len=%u ll_busy=%u last_rc=%u last_len=%u", tag?tag:"?", (unsigned)len, (unsigned)ll_busy, (unsigned)ll_rc, (unsigned)ll_len);
        vnd_tx_ready = 1; vnd_ep_busy = 0; vnd_inflight = 0;
 80169f4:	4b13      	ldr	r3, [pc, #76]	@ (8016a44 <vnd_transmit_frame+0x1e0>)
 80169f6:	2201      	movs	r2, #1
 80169f8:	701a      	strb	r2, [r3, #0]
 80169fa:	4b13      	ldr	r3, [pc, #76]	@ (8016a48 <vnd_transmit_frame+0x1e4>)
 80169fc:	2200      	movs	r2, #0
 80169fe:	701a      	strb	r2, [r3, #0]
 8016a00:	4b12      	ldr	r3, [pc, #72]	@ (8016a4c <vnd_transmit_frame+0x1e8>)
 8016a02:	2200      	movs	r2, #0
 8016a04:	701a      	strb	r2, [r3, #0]
 8016a06:	e010      	b.n	8016a2a <vnd_transmit_frame+0x1c6>
    }
    else {
        /* Фиксируем метаданные ТОЛЬКО после успешного запуска передачи, иначе не сместим FIFO зря */
        vnd_tx_meta_after(buf, len);
 8016a08:	887b      	ldrh	r3, [r7, #2]
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	f7fe fedd 	bl	80157cc <vnd_tx_meta_after>
        if(is_frame){
 8016a12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d001      	beq.n	8016a1e <vnd_transmit_frame+0x1ba>
            const vnd_frame_hdr_t *lh = (const vnd_frame_hdr_t*)buf;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	60fb      	str	r3, [r7, #12]
            }
        } else {
            VND_LOG("SEND tag=%s (no-hdr) cur_stream_seq=%lu len=%u", tag ? tag : "?", (unsigned long)stream_seq, len);
        }
        /* Дублирование в CDC (работает для кадров ADC0/ADC1 и диагностических) */
        vnd_cdc_duplicate_preview(buf, len, tag);
 8016a1e:	887b      	ldrh	r3, [r7, #2]
 8016a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016a22:	4619      	mov	r1, r3
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f7fe fd6f 	bl	8015508 <vnd_cdc_duplicate_preview>
    }
    return rc;
 8016a2a:	7cfb      	ldrb	r3, [r7, #19]
}
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	3728      	adds	r7, #40	@ 0x28
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}
 8016a34:	2400dbd4 	.word	0x2400dbd4
 8016a38:	2400dbd8 	.word	0x2400dbd8
 8016a3c:	2400dbf0 	.word	0x2400dbf0
 8016a40:	2400dbb4 	.word	0x2400dbb4
 8016a44:	2400003b 	.word	0x2400003b
 8016a48:	2400dbb8 	.word	0x2400dbb8
 8016a4c:	2400dbb9 	.word	0x2400dbb9
 8016a50:	2400dc18 	.word	0x2400dc18
 8016a54:	2400dc1c 	.word	0x2400dc1c
 8016a58:	2400dc28 	.word	0x2400dc28
 8016a5c:	2400dc29 	.word	0x2400dc29
 8016a60:	2400dc2c 	.word	0x2400dc2c
 8016a64:	2400d8c8 	.word	0x2400d8c8
 8016a68:	2400dbd0 	.word	0x2400dbd0

08016a6c <vnd_diag_prepare_pair>:

/* Упрощённая диагностическая пара A/B: подготовка буферов по текущему cur_samples_per_frame */
static void vnd_diag_prepare_pair(uint32_t seq, uint16_t samples)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b088      	sub	sp, #32
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
 8016a74:	460b      	mov	r3, r1
 8016a76:	807b      	strh	r3, [r7, #2]
    if(samples == 0) samples = VND_DEFAULT_TEST_SAMPLES;
 8016a78:	887b      	ldrh	r3, [r7, #2]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d101      	bne.n	8016a82 <vnd_diag_prepare_pair+0x16>
 8016a7e:	2350      	movs	r3, #80	@ 0x50
 8016a80:	807b      	strh	r3, [r7, #2]
    if(samples > VND_MAX_SAMPLES) samples = VND_MAX_SAMPLES;
 8016a82:	887b      	ldrh	r3, [r7, #2]
 8016a84:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8016a88:	d902      	bls.n	8016a90 <vnd_diag_prepare_pair+0x24>
 8016a8a:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 8016a8e:	807b      	strh	r3, [r7, #2]
    uint16_t base_len = (uint16_t)(VND_FRAME_HDR_SIZE + (uint32_t)samples*2u);
 8016a90:	887b      	ldrh	r3, [r7, #2]
 8016a92:	3310      	adds	r3, #16
 8016a94:	b29b      	uxth	r3, r3
 8016a96:	005b      	lsls	r3, r3, #1
 8016a98:	833b      	strh	r3, [r7, #24]
    /* Паддинг до кратности 512 (HS max packet); кратность 64 обеспечивает совместимость и для FS */
    uint16_t pad_unit = 512u;
 8016a9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016a9e:	82fb      	strh	r3, [r7, #22]
    uint16_t padded = (uint16_t)(((uint32_t)(base_len + (pad_unit-1u)) / pad_unit) * pad_unit);
 8016aa0:	8b3a      	ldrh	r2, [r7, #24]
 8016aa2:	8afb      	ldrh	r3, [r7, #22]
 8016aa4:	4413      	add	r3, r2
 8016aa6:	1e5a      	subs	r2, r3, #1
 8016aa8:	8afb      	ldrh	r3, [r7, #22]
 8016aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8016aae:	b29b      	uxth	r3, r3
 8016ab0:	8afa      	ldrh	r2, [r7, #22]
 8016ab2:	fb12 f303 	smulbb	r3, r2, r3
 8016ab6:	83fb      	strh	r3, [r7, #30]
    if (padded < base_len) padded = base_len; /* защита от переполнения (не ожидается) */
 8016ab8:	8bfa      	ldrh	r2, [r7, #30]
 8016aba:	8b3b      	ldrh	r3, [r7, #24]
 8016abc:	429a      	cmp	r2, r3
 8016abe:	d201      	bcs.n	8016ac4 <vnd_diag_prepare_pair+0x58>
 8016ac0:	8b3b      	ldrh	r3, [r7, #24]
 8016ac2:	83fb      	strh	r3, [r7, #30]
    diag_frame_len = padded;
 8016ac4:	4a44      	ldr	r2, [pc, #272]	@ (8016bd8 <vnd_diag_prepare_pair+0x16c>)
 8016ac6:	8bfb      	ldrh	r3, [r7, #30]
 8016ac8:	8013      	strh	r3, [r2, #0]
    /* A */
    memset(diag_a_buf, 0, diag_frame_len);
 8016aca:	4b43      	ldr	r3, [pc, #268]	@ (8016bd8 <vnd_diag_prepare_pair+0x16c>)
 8016acc:	881b      	ldrh	r3, [r3, #0]
 8016ace:	461a      	mov	r2, r3
 8016ad0:	2100      	movs	r1, #0
 8016ad2:	4842      	ldr	r0, [pc, #264]	@ (8016bdc <vnd_diag_prepare_pair+0x170>)
 8016ad4:	f004 fd00 	bl	801b4d8 <memset>
    vnd_frame_hdr_t *ha = (vnd_frame_hdr_t*)diag_a_buf;
 8016ad8:	4b40      	ldr	r3, [pc, #256]	@ (8016bdc <vnd_diag_prepare_pair+0x170>)
 8016ada:	613b      	str	r3, [r7, #16]
    ha->magic = 0xA55A; ha->ver = 0x01; ha->flags = 0x01; ha->seq = seq; ha->timestamp = HAL_GetTick(); ha->total_samples = samples;
 8016adc:	693b      	ldr	r3, [r7, #16]
 8016ade:	2200      	movs	r2, #0
 8016ae0:	f042 025a 	orr.w	r2, r2, #90	@ 0x5a
 8016ae4:	701a      	strb	r2, [r3, #0]
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	f062 025a 	orn	r2, r2, #90	@ 0x5a
 8016aec:	705a      	strb	r2, [r3, #1]
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	2201      	movs	r2, #1
 8016af2:	709a      	strb	r2, [r3, #2]
 8016af4:	693b      	ldr	r3, [r7, #16]
 8016af6:	2201      	movs	r2, #1
 8016af8:	70da      	strb	r2, [r3, #3]
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	687a      	ldr	r2, [r7, #4]
 8016afe:	605a      	str	r2, [r3, #4]
 8016b00:	f7ee fa34 	bl	8004f6c <HAL_GetTick>
 8016b04:	4602      	mov	r2, r0
 8016b06:	693b      	ldr	r3, [r7, #16]
 8016b08:	609a      	str	r2, [r3, #8]
 8016b0a:	693b      	ldr	r3, [r7, #16]
 8016b0c:	887a      	ldrh	r2, [r7, #2]
 8016b0e:	819a      	strh	r2, [r3, #12]
    for(uint16_t i=0;i<samples;i++){ uint16_t v=i; diag_a_buf[VND_FRAME_HDR_SIZE+2*i]=(uint8_t)(v & 0xFF); diag_a_buf[VND_FRAME_HDR_SIZE+2*i+1]=(uint8_t)(v>>8); }
 8016b10:	2300      	movs	r3, #0
 8016b12:	83bb      	strh	r3, [r7, #28]
 8016b14:	e014      	b.n	8016b40 <vnd_diag_prepare_pair+0xd4>
 8016b16:	8bbb      	ldrh	r3, [r7, #28]
 8016b18:	813b      	strh	r3, [r7, #8]
 8016b1a:	8bbb      	ldrh	r3, [r7, #28]
 8016b1c:	005b      	lsls	r3, r3, #1
 8016b1e:	3320      	adds	r3, #32
 8016b20:	893a      	ldrh	r2, [r7, #8]
 8016b22:	b2d1      	uxtb	r1, r2
 8016b24:	4a2d      	ldr	r2, [pc, #180]	@ (8016bdc <vnd_diag_prepare_pair+0x170>)
 8016b26:	54d1      	strb	r1, [r2, r3]
 8016b28:	893b      	ldrh	r3, [r7, #8]
 8016b2a:	0a1b      	lsrs	r3, r3, #8
 8016b2c:	b29a      	uxth	r2, r3
 8016b2e:	8bbb      	ldrh	r3, [r7, #28]
 8016b30:	005b      	lsls	r3, r3, #1
 8016b32:	3321      	adds	r3, #33	@ 0x21
 8016b34:	b2d1      	uxtb	r1, r2
 8016b36:	4a29      	ldr	r2, [pc, #164]	@ (8016bdc <vnd_diag_prepare_pair+0x170>)
 8016b38:	54d1      	strb	r1, [r2, r3]
 8016b3a:	8bbb      	ldrh	r3, [r7, #28]
 8016b3c:	3301      	adds	r3, #1
 8016b3e:	83bb      	strh	r3, [r7, #28]
 8016b40:	8bba      	ldrh	r2, [r7, #28]
 8016b42:	887b      	ldrh	r3, [r7, #2]
 8016b44:	429a      	cmp	r2, r3
 8016b46:	d3e6      	bcc.n	8016b16 <vnd_diag_prepare_pair+0xaa>
    /* B */
    memset(diag_b_buf, 0, diag_frame_len);
 8016b48:	4b23      	ldr	r3, [pc, #140]	@ (8016bd8 <vnd_diag_prepare_pair+0x16c>)
 8016b4a:	881b      	ldrh	r3, [r3, #0]
 8016b4c:	461a      	mov	r2, r3
 8016b4e:	2100      	movs	r1, #0
 8016b50:	4823      	ldr	r0, [pc, #140]	@ (8016be0 <vnd_diag_prepare_pair+0x174>)
 8016b52:	f004 fcc1 	bl	801b4d8 <memset>
    vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)diag_b_buf;
 8016b56:	4b22      	ldr	r3, [pc, #136]	@ (8016be0 <vnd_diag_prepare_pair+0x174>)
 8016b58:	60fb      	str	r3, [r7, #12]
    hb->magic = 0xA55A; hb->ver = 0x01; hb->flags = 0x02; hb->seq = seq; hb->timestamp = ha->timestamp; hb->total_samples = samples;
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	f042 025a 	orr.w	r2, r2, #90	@ 0x5a
 8016b62:	701a      	strb	r2, [r3, #0]
 8016b64:	2200      	movs	r2, #0
 8016b66:	f062 025a 	orn	r2, r2, #90	@ 0x5a
 8016b6a:	705a      	strb	r2, [r3, #1]
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	2201      	movs	r2, #1
 8016b70:	709a      	strb	r2, [r3, #2]
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	2202      	movs	r2, #2
 8016b76:	70da      	strb	r2, [r3, #3]
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	687a      	ldr	r2, [r7, #4]
 8016b7c:	605a      	str	r2, [r3, #4]
 8016b7e:	693b      	ldr	r3, [r7, #16]
 8016b80:	689a      	ldr	r2, [r3, #8]
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	609a      	str	r2, [r3, #8]
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	887a      	ldrh	r2, [r7, #2]
 8016b8a:	819a      	strh	r2, [r3, #12]
    for(uint16_t i=0;i<samples;i++){ uint16_t v=0x0100u+i; diag_b_buf[VND_FRAME_HDR_SIZE+2*i]=(uint8_t)(v & 0xFF); diag_b_buf[VND_FRAME_HDR_SIZE+2*i+1]=(uint8_t)(v>>8); }
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	837b      	strh	r3, [r7, #26]
 8016b90:	e016      	b.n	8016bc0 <vnd_diag_prepare_pair+0x154>
 8016b92:	8b7b      	ldrh	r3, [r7, #26]
 8016b94:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8016b98:	817b      	strh	r3, [r7, #10]
 8016b9a:	8b7b      	ldrh	r3, [r7, #26]
 8016b9c:	005b      	lsls	r3, r3, #1
 8016b9e:	3320      	adds	r3, #32
 8016ba0:	897a      	ldrh	r2, [r7, #10]
 8016ba2:	b2d1      	uxtb	r1, r2
 8016ba4:	4a0e      	ldr	r2, [pc, #56]	@ (8016be0 <vnd_diag_prepare_pair+0x174>)
 8016ba6:	54d1      	strb	r1, [r2, r3]
 8016ba8:	897b      	ldrh	r3, [r7, #10]
 8016baa:	0a1b      	lsrs	r3, r3, #8
 8016bac:	b29a      	uxth	r2, r3
 8016bae:	8b7b      	ldrh	r3, [r7, #26]
 8016bb0:	005b      	lsls	r3, r3, #1
 8016bb2:	3321      	adds	r3, #33	@ 0x21
 8016bb4:	b2d1      	uxtb	r1, r2
 8016bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8016be0 <vnd_diag_prepare_pair+0x174>)
 8016bb8:	54d1      	strb	r1, [r2, r3]
 8016bba:	8b7b      	ldrh	r3, [r7, #26]
 8016bbc:	3301      	adds	r3, #1
 8016bbe:	837b      	strh	r3, [r7, #26]
 8016bc0:	8b7a      	ldrh	r2, [r7, #26]
 8016bc2:	887b      	ldrh	r3, [r7, #2]
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	d3e4      	bcc.n	8016b92 <vnd_diag_prepare_pair+0x126>
    diag_current_pair_seq = seq; /* зафиксируем seq текущей пары для гарантии совпадения A/B */
 8016bc8:	4a06      	ldr	r2, [pc, #24]	@ (8016be4 <vnd_diag_prepare_pair+0x178>)
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	6013      	str	r3, [r2, #0]
}
 8016bce:	bf00      	nop
 8016bd0:	3720      	adds	r7, #32
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	bd80      	pop	{r7, pc}
 8016bd6:	bf00      	nop
 8016bd8:	2400dcfc 	.word	0x2400dcfc
 8016bdc:	2400dd00 	.word	0x2400dd00
 8016be0:	2400e7c0 	.word	0x2400e7c0
 8016be4:	2400004c 	.word	0x2400004c

08016be8 <vnd_diag_try_tx>:

/* Попытка отправки диагностического кадра: A, затем (если не A-only) B */
static int vnd_diag_try_tx(void)
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b086      	sub	sp, #24
 8016bec:	af02      	add	r7, sp, #8
    if(vnd_ep_busy) return 0;
 8016bee:	4b4c      	ldr	r3, [pc, #304]	@ (8016d20 <vnd_diag_try_tx+0x138>)
 8016bf0:	781b      	ldrb	r3, [r3, #0]
 8016bf2:	b2db      	uxtb	r3, r3
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d001      	beq.n	8016bfc <vnd_diag_try_tx+0x14>
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	e08d      	b.n	8016d18 <vnd_diag_try_tx+0x130>
    if(diag_frame_len == 0) return 0;
 8016bfc:	4b49      	ldr	r3, [pc, #292]	@ (8016d24 <vnd_diag_try_tx+0x13c>)
 8016bfe:	881b      	ldrh	r3, [r3, #0]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d101      	bne.n	8016c08 <vnd_diag_try_tx+0x20>
 8016c04:	2300      	movs	r3, #0
 8016c06:	e087      	b.n	8016d18 <vnd_diag_try_tx+0x130>
        sending_channel = 0; /* для корректной статистики */
        return 1;
    } else { return 0; }
#else
    /* В DIAG режиме используем pending_B как главный флаг: если он установлен — шлём B, иначе A */
    if(pending_B)
 8016c08:	4b47      	ldr	r3, [pc, #284]	@ (8016d28 <vnd_diag_try_tx+0x140>)
 8016c0a:	781b      	ldrb	r3, [r3, #0]
 8016c0c:	b2db      	uxtb	r3, r3
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d041      	beq.n	8016c96 <vnd_diag_try_tx+0xae>
    {
        if(!vnd_validate_frame(diag_b_buf, diag_frame_len, 0, 0x02)) return 0; /* allow padding */
 8016c12:	4b44      	ldr	r3, [pc, #272]	@ (8016d24 <vnd_diag_try_tx+0x13c>)
 8016c14:	8819      	ldrh	r1, [r3, #0]
 8016c16:	2302      	movs	r3, #2
 8016c18:	2200      	movs	r2, #0
 8016c1a:	4844      	ldr	r0, [pc, #272]	@ (8016d2c <vnd_diag_try_tx+0x144>)
 8016c1c:	f7ff fdc6 	bl	80167ac <vnd_validate_frame>
 8016c20:	4603      	mov	r3, r0
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d101      	bne.n	8016c2a <vnd_diag_try_tx+0x42>
 8016c26:	2300      	movs	r3, #0
 8016c28:	e076      	b.n	8016d18 <vnd_diag_try_tx+0x130>
        /* Прямое копирование полей из заголовка A: seq/timestamp/ns всегда совпадают в паре */
        if(diag_frame_len >= VND_FRAME_HDR_SIZE){
 8016c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8016d24 <vnd_diag_try_tx+0x13c>)
 8016c2c:	881b      	ldrh	r3, [r3, #0]
 8016c2e:	2b1f      	cmp	r3, #31
 8016c30:	d91e      	bls.n	8016c70 <vnd_diag_try_tx+0x88>
            vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)diag_b_buf;
 8016c32:	4b3e      	ldr	r3, [pc, #248]	@ (8016d2c <vnd_diag_try_tx+0x144>)
 8016c34:	60bb      	str	r3, [r7, #8]
            const vnd_frame_hdr_t *ha = (const vnd_frame_hdr_t*)diag_a_buf;
 8016c36:	4b3e      	ldr	r3, [pc, #248]	@ (8016d30 <vnd_diag_try_tx+0x148>)
 8016c38:	607b      	str	r3, [r7, #4]
            if(hb->magic == 0xA55A && ha->magic == 0xA55A){
 8016c3a:	68bb      	ldr	r3, [r7, #8]
 8016c3c:	881b      	ldrh	r3, [r3, #0]
 8016c3e:	b29b      	uxth	r3, r3
 8016c40:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016c44:	4293      	cmp	r3, r2
 8016c46:	d113      	bne.n	8016c70 <vnd_diag_try_tx+0x88>
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	881b      	ldrh	r3, [r3, #0]
 8016c4c:	b29b      	uxth	r3, r3
 8016c4e:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016c52:	4293      	cmp	r3, r2
 8016c54:	d10c      	bne.n	8016c70 <vnd_diag_try_tx+0x88>
                hb->seq = ha->seq;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	685a      	ldr	r2, [r3, #4]
 8016c5a:	68bb      	ldr	r3, [r7, #8]
 8016c5c:	605a      	str	r2, [r3, #4]
                hb->timestamp = ha->timestamp;
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	689a      	ldr	r2, [r3, #8]
 8016c62:	68bb      	ldr	r3, [r7, #8]
 8016c64:	609a      	str	r2, [r3, #8]
                hb->total_samples = ha->total_samples;
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	899b      	ldrh	r3, [r3, #12]
 8016c6a:	b29a      	uxth	r2, r3
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	819a      	strh	r2, [r3, #12]
            }
        }
        if(vnd_transmit_frame(diag_b_buf, diag_frame_len, 0, 0x02, "ADC1") == USBD_OK){
 8016c70:	4b2c      	ldr	r3, [pc, #176]	@ (8016d24 <vnd_diag_try_tx+0x13c>)
 8016c72:	8819      	ldrh	r1, [r3, #0]
 8016c74:	4b2f      	ldr	r3, [pc, #188]	@ (8016d34 <vnd_diag_try_tx+0x14c>)
 8016c76:	9300      	str	r3, [sp, #0]
 8016c78:	2302      	movs	r3, #2
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	482b      	ldr	r0, [pc, #172]	@ (8016d2c <vnd_diag_try_tx+0x144>)
 8016c7e:	f7ff fdf1 	bl	8016864 <vnd_transmit_frame>
 8016c82:	4603      	mov	r3, r0
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d104      	bne.n	8016c92 <vnd_diag_try_tx+0xaa>
            sending_channel = 1; /* информативно */
 8016c88:	4b2b      	ldr	r3, [pc, #172]	@ (8016d38 <vnd_diag_try_tx+0x150>)
 8016c8a:	2201      	movs	r2, #1
 8016c8c:	701a      	strb	r2, [r3, #0]
            /* печать в CDC отключена для максимальной скорости */
            return 1;
 8016c8e:	2301      	movs	r3, #1
 8016c90:	e042      	b.n	8016d18 <vnd_diag_try_tx+0x130>
        } else { return 0; }
 8016c92:	2300      	movs	r3, #0
 8016c94:	e040      	b.n	8016d18 <vnd_diag_try_tx+0x130>
    }
    /* Иначе шлём A, когда EP свободен */
    /* Allow padded A-frames as well (len >= expected and multiple of 64/512) */
    if(!vnd_validate_frame(diag_a_buf, diag_frame_len, 0, 0x02)) return 0; /* allow padding */
 8016c96:	4b23      	ldr	r3, [pc, #140]	@ (8016d24 <vnd_diag_try_tx+0x13c>)
 8016c98:	8819      	ldrh	r1, [r3, #0]
 8016c9a:	2302      	movs	r3, #2
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	4824      	ldr	r0, [pc, #144]	@ (8016d30 <vnd_diag_try_tx+0x148>)
 8016ca0:	f7ff fd84 	bl	80167ac <vnd_validate_frame>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d101      	bne.n	8016cae <vnd_diag_try_tx+0xc6>
 8016caa:	2300      	movs	r3, #0
 8016cac:	e034      	b.n	8016d18 <vnd_diag_try_tx+0x130>
    /* Безопасная синхронизация seq для A: если по какой-то причине новая пара
       ещё не была собрана, принудительно проставим актуальный stream_seq в hdr */
    if(diag_frame_len >= VND_FRAME_HDR_SIZE){
 8016cae:	4b1d      	ldr	r3, [pc, #116]	@ (8016d24 <vnd_diag_try_tx+0x13c>)
 8016cb0:	881b      	ldrh	r3, [r3, #0]
 8016cb2:	2b1f      	cmp	r3, #31
 8016cb4:	d916      	bls.n	8016ce4 <vnd_diag_try_tx+0xfc>
        vnd_frame_hdr_t *ha = (vnd_frame_hdr_t*)diag_a_buf;
 8016cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8016d30 <vnd_diag_try_tx+0x148>)
 8016cb8:	60fb      	str	r3, [r7, #12]
        if(ha->magic == 0xA55A){
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	881b      	ldrh	r3, [r3, #0]
 8016cbe:	b29b      	uxth	r3, r3
 8016cc0:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016cc4:	4293      	cmp	r3, r2
 8016cc6:	d10d      	bne.n	8016ce4 <vnd_diag_try_tx+0xfc>
            if(ha->seq != stream_seq){
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	685a      	ldr	r2, [r3, #4]
 8016ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8016d3c <vnd_diag_try_tx+0x154>)
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	429a      	cmp	r2, r3
 8016cd2:	d003      	beq.n	8016cdc <vnd_diag_try_tx+0xf4>
                ha->seq = stream_seq;
 8016cd4:	4b19      	ldr	r3, [pc, #100]	@ (8016d3c <vnd_diag_try_tx+0x154>)
 8016cd6:	681a      	ldr	r2, [r3, #0]
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	605a      	str	r2, [r3, #4]
            }
            /* Всегда фиксируем текущий seq A как seq пары для последующего B */
            diag_current_pair_seq = ha->seq;
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	685b      	ldr	r3, [r3, #4]
 8016ce0:	4a17      	ldr	r2, [pc, #92]	@ (8016d40 <vnd_diag_try_tx+0x158>)
 8016ce2:	6013      	str	r3, [r2, #0]
        }
    }
    if(vnd_transmit_frame(diag_a_buf, diag_frame_len, 0, 0x02, "ADC0") == USBD_OK){
 8016ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8016d24 <vnd_diag_try_tx+0x13c>)
 8016ce6:	8819      	ldrh	r1, [r3, #0]
 8016ce8:	4b16      	ldr	r3, [pc, #88]	@ (8016d44 <vnd_diag_try_tx+0x15c>)
 8016cea:	9300      	str	r3, [sp, #0]
 8016cec:	2302      	movs	r3, #2
 8016cee:	2200      	movs	r2, #0
 8016cf0:	480f      	ldr	r0, [pc, #60]	@ (8016d30 <vnd_diag_try_tx+0x148>)
 8016cf2:	f7ff fdb7 	bl	8016864 <vnd_transmit_frame>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d10c      	bne.n	8016d16 <vnd_diag_try_tx+0x12e>
        sending_channel = 0; /* ожидаем B после TxCplt A */
 8016cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8016d38 <vnd_diag_try_tx+0x150>)
 8016cfe:	2200      	movs	r2, #0
 8016d00:	701a      	strb	r2, [r3, #0]
        /* Закрываем STAT-окно между A и B: сразу помечаем ожидание B */
        pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8016d02:	4b09      	ldr	r3, [pc, #36]	@ (8016d28 <vnd_diag_try_tx+0x140>)
 8016d04:	2201      	movs	r2, #1
 8016d06:	701a      	strb	r2, [r3, #0]
 8016d08:	f7ee f930 	bl	8004f6c <HAL_GetTick>
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8016d48 <vnd_diag_try_tx+0x160>)
 8016d10:	6013      	str	r3, [r2, #0]
        /* печать в CDC отключена для максимальной скорости */
        return 1;
 8016d12:	2301      	movs	r3, #1
 8016d14:	e000      	b.n	8016d18 <vnd_diag_try_tx+0x130>
    } else { return 0; }
 8016d16:	2300      	movs	r3, #0
#endif
}
 8016d18:	4618      	mov	r0, r3
 8016d1a:	3710      	adds	r7, #16
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	bd80      	pop	{r7, pc}
 8016d20:	2400dbb8 	.word	0x2400dbb8
 8016d24:	2400dcfc 	.word	0x2400dcfc
 8016d28:	24019ffa 	.word	0x24019ffa
 8016d2c:	2400e7c0 	.word	0x2400e7c0
 8016d30:	2400dd00 	.word	0x2400dd00
 8016d34:	0801d090 	.word	0x0801d090
 8016d38:	24000050 	.word	0x24000050
 8016d3c:	2400dba8 	.word	0x2400dba8
 8016d40:	2400004c 	.word	0x2400004c
 8016d44:	0801d098 	.word	0x0801d098
 8016d48:	24019ffc 	.word	0x24019ffc

08016d4c <vnd_try_send_B_immediate>:

/* === Немедленная отправка B после завершения A (внутри TxCplt) === */
static int vnd_try_send_B_immediate(void)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b086      	sub	sp, #24
 8016d50:	af02      	add	r7, sp, #8
    if(vnd_ep_busy) return 0;
 8016d52:	4b52      	ldr	r3, [pc, #328]	@ (8016e9c <vnd_try_send_B_immediate+0x150>)
 8016d54:	781b      	ldrb	r3, [r3, #0]
 8016d56:	b2db      	uxtb	r3, r3
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d001      	beq.n	8016d60 <vnd_try_send_B_immediate+0x14>
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	e098      	b.n	8016e92 <vnd_try_send_B_immediate+0x146>
    /* DIAG режим: используем заранее подготовленный diag_b_buf с текущим seq */
    if(diag_mode_active){
 8016d60:	4b4f      	ldr	r3, [pc, #316]	@ (8016ea0 <vnd_try_send_B_immediate+0x154>)
 8016d62:	781b      	ldrb	r3, [r3, #0]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d04e      	beq.n	8016e06 <vnd_try_send_B_immediate+0xba>
        if(!pending_B) return 0;
 8016d68:	4b4e      	ldr	r3, [pc, #312]	@ (8016ea4 <vnd_try_send_B_immediate+0x158>)
 8016d6a:	781b      	ldrb	r3, [r3, #0]
 8016d6c:	b2db      	uxtb	r3, r3
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d101      	bne.n	8016d76 <vnd_try_send_B_immediate+0x2a>
 8016d72:	2300      	movs	r3, #0
 8016d74:	e08d      	b.n	8016e92 <vnd_try_send_B_immediate+0x146>
        if(diag_frame_len == 0) return 0;
 8016d76:	4b4c      	ldr	r3, [pc, #304]	@ (8016ea8 <vnd_try_send_B_immediate+0x15c>)
 8016d78:	881b      	ldrh	r3, [r3, #0]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d101      	bne.n	8016d82 <vnd_try_send_B_immediate+0x36>
 8016d7e:	2300      	movs	r3, #0
 8016d80:	e087      	b.n	8016e92 <vnd_try_send_B_immediate+0x146>
        if(diag_frame_len >= VND_FRAME_HDR_SIZE){
 8016d82:	4b49      	ldr	r3, [pc, #292]	@ (8016ea8 <vnd_try_send_B_immediate+0x15c>)
 8016d84:	881b      	ldrh	r3, [r3, #0]
 8016d86:	2b1f      	cmp	r3, #31
 8016d88:	d91e      	bls.n	8016dc8 <vnd_try_send_B_immediate+0x7c>
            vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)diag_b_buf;
 8016d8a:	4b48      	ldr	r3, [pc, #288]	@ (8016eac <vnd_try_send_B_immediate+0x160>)
 8016d8c:	607b      	str	r3, [r7, #4]
            const vnd_frame_hdr_t *ha = (const vnd_frame_hdr_t*)diag_a_buf;
 8016d8e:	4b48      	ldr	r3, [pc, #288]	@ (8016eb0 <vnd_try_send_B_immediate+0x164>)
 8016d90:	603b      	str	r3, [r7, #0]
            /* В DIAG заголовок B копируем из A для гарантированной идентичности пары */
            if(hb->magic == 0xA55A && ha->magic == 0xA55A){
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	881b      	ldrh	r3, [r3, #0]
 8016d96:	b29b      	uxth	r3, r3
 8016d98:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016d9c:	4293      	cmp	r3, r2
 8016d9e:	d113      	bne.n	8016dc8 <vnd_try_send_B_immediate+0x7c>
 8016da0:	683b      	ldr	r3, [r7, #0]
 8016da2:	881b      	ldrh	r3, [r3, #0]
 8016da4:	b29b      	uxth	r3, r3
 8016da6:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016daa:	4293      	cmp	r3, r2
 8016dac:	d10c      	bne.n	8016dc8 <vnd_try_send_B_immediate+0x7c>
                hb->seq = ha->seq;
 8016dae:	683b      	ldr	r3, [r7, #0]
 8016db0:	685a      	ldr	r2, [r3, #4]
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	605a      	str	r2, [r3, #4]
                hb->timestamp = ha->timestamp;
 8016db6:	683b      	ldr	r3, [r7, #0]
 8016db8:	689a      	ldr	r2, [r3, #8]
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	609a      	str	r2, [r3, #8]
                hb->total_samples = ha->total_samples;
 8016dbe:	683b      	ldr	r3, [r7, #0]
 8016dc0:	899b      	ldrh	r3, [r3, #12]
 8016dc2:	b29a      	uxth	r2, r3
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	819a      	strh	r2, [r3, #12]
            }
        }
        if(!vnd_validate_frame(diag_b_buf, diag_frame_len, 0, 0x02)) return 0;
 8016dc8:	4b37      	ldr	r3, [pc, #220]	@ (8016ea8 <vnd_try_send_B_immediate+0x15c>)
 8016dca:	8819      	ldrh	r1, [r3, #0]
 8016dcc:	2302      	movs	r3, #2
 8016dce:	2200      	movs	r2, #0
 8016dd0:	4836      	ldr	r0, [pc, #216]	@ (8016eac <vnd_try_send_B_immediate+0x160>)
 8016dd2:	f7ff fceb 	bl	80167ac <vnd_validate_frame>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d101      	bne.n	8016de0 <vnd_try_send_B_immediate+0x94>
 8016ddc:	2300      	movs	r3, #0
 8016dde:	e058      	b.n	8016e92 <vnd_try_send_B_immediate+0x146>
        if(vnd_transmit_frame(diag_b_buf, diag_frame_len, 0, 0x02, "ADC1-IMM") == USBD_OK){
 8016de0:	4b31      	ldr	r3, [pc, #196]	@ (8016ea8 <vnd_try_send_B_immediate+0x15c>)
 8016de2:	8819      	ldrh	r1, [r3, #0]
 8016de4:	4b33      	ldr	r3, [pc, #204]	@ (8016eb4 <vnd_try_send_B_immediate+0x168>)
 8016de6:	9300      	str	r3, [sp, #0]
 8016de8:	2302      	movs	r3, #2
 8016dea:	2200      	movs	r2, #0
 8016dec:	482f      	ldr	r0, [pc, #188]	@ (8016eac <vnd_try_send_B_immediate+0x160>)
 8016dee:	f7ff fd39 	bl	8016864 <vnd_transmit_frame>
 8016df2:	4603      	mov	r3, r0
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d104      	bne.n	8016e02 <vnd_try_send_B_immediate+0xb6>
            sending_channel = 1; /* B в полёте */
 8016df8:	4b2f      	ldr	r3, [pc, #188]	@ (8016eb8 <vnd_try_send_B_immediate+0x16c>)
 8016dfa:	2201      	movs	r2, #1
 8016dfc:	701a      	strb	r2, [r3, #0]
            return 1;
 8016dfe:	2301      	movs	r3, #1
 8016e00:	e047      	b.n	8016e92 <vnd_try_send_B_immediate+0x146>
        }
        return 0;
 8016e02:	2300      	movs	r3, #0
 8016e04:	e045      	b.n	8016e92 <vnd_try_send_B_immediate+0x146>
    }
    /* Полный режим: отправляем B из текущего pair_send_idx, если READY */
    ChanFrame *fB = &g_frames[pair_send_idx][1];
 8016e06:	4b2d      	ldr	r3, [pc, #180]	@ (8016ebc <vnd_try_send_B_immediate+0x170>)
 8016e08:	781b      	ldrb	r3, [r3, #0]
 8016e0a:	461a      	mov	r2, r3
 8016e0c:	f241 5398 	movw	r3, #5528	@ 0x1598
 8016e10:	fb02 f303 	mul.w	r3, r2, r3
 8016e14:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8016e18:	4a29      	ldr	r2, [pc, #164]	@ (8016ec0 <vnd_try_send_B_immediate+0x174>)
 8016e1a:	4413      	add	r3, r2
 8016e1c:	60fb      	str	r3, [r7, #12]
    if(fB->st != FB_READY) return 0;
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	781b      	ldrb	r3, [r3, #0]
 8016e22:	b2db      	uxtb	r3, r3
 8016e24:	2b01      	cmp	r3, #1
 8016e26:	d001      	beq.n	8016e2c <vnd_try_send_B_immediate+0xe0>
 8016e28:	2300      	movs	r3, #0
 8016e2a:	e032      	b.n	8016e92 <vnd_try_send_B_immediate+0x146>
    /* Корректируем seq при необходимости (безопасно) */
    if(fB->frame_size >= VND_FRAME_HDR_SIZE){
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	88db      	ldrh	r3, [r3, #6]
 8016e30:	2b1f      	cmp	r3, #31
 8016e32:	d917      	bls.n	8016e64 <vnd_try_send_B_immediate+0x118>
        vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)fB->buf;
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	330c      	adds	r3, #12
 8016e38:	60bb      	str	r3, [r7, #8]
        if(hb->magic == 0xA55A && hb->seq != stream_seq){ hb->seq = stream_seq; fB->seq = stream_seq; }
 8016e3a:	68bb      	ldr	r3, [r7, #8]
 8016e3c:	881b      	ldrh	r3, [r3, #0]
 8016e3e:	b29b      	uxth	r3, r3
 8016e40:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016e44:	4293      	cmp	r3, r2
 8016e46:	d10d      	bne.n	8016e64 <vnd_try_send_B_immediate+0x118>
 8016e48:	68bb      	ldr	r3, [r7, #8]
 8016e4a:	685a      	ldr	r2, [r3, #4]
 8016e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8016ec4 <vnd_try_send_B_immediate+0x178>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	429a      	cmp	r2, r3
 8016e52:	d007      	beq.n	8016e64 <vnd_try_send_B_immediate+0x118>
 8016e54:	4b1b      	ldr	r3, [pc, #108]	@ (8016ec4 <vnd_try_send_B_immediate+0x178>)
 8016e56:	681a      	ldr	r2, [r3, #0]
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	605a      	str	r2, [r3, #4]
 8016e5c:	4b19      	ldr	r3, [pc, #100]	@ (8016ec4 <vnd_try_send_B_immediate+0x178>)
 8016e5e:	681a      	ldr	r2, [r3, #0]
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	609a      	str	r2, [r3, #8]
    }
    if(vnd_transmit_frame(fB->buf, fB->frame_size, 0, 0, "ADC1-IMM") == USBD_OK){
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	f103 000c 	add.w	r0, r3, #12
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	88d9      	ldrh	r1, [r3, #6]
 8016e6e:	4b11      	ldr	r3, [pc, #68]	@ (8016eb4 <vnd_try_send_B_immediate+0x168>)
 8016e70:	9300      	str	r3, [sp, #0]
 8016e72:	2300      	movs	r3, #0
 8016e74:	2200      	movs	r2, #0
 8016e76:	f7ff fcf5 	bl	8016864 <vnd_transmit_frame>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d107      	bne.n	8016e90 <vnd_try_send_B_immediate+0x144>
        fB->st = FB_SENDING; sending_channel = 1;
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	2202      	movs	r2, #2
 8016e84:	701a      	strb	r2, [r3, #0]
 8016e86:	4b0c      	ldr	r3, [pc, #48]	@ (8016eb8 <vnd_try_send_B_immediate+0x16c>)
 8016e88:	2201      	movs	r2, #1
 8016e8a:	701a      	strb	r2, [r3, #0]
        return 1;
 8016e8c:	2301      	movs	r3, #1
 8016e8e:	e000      	b.n	8016e92 <vnd_try_send_B_immediate+0x146>
    }
    return 0;
 8016e90:	2300      	movs	r3, #0
}
 8016e92:	4618      	mov	r0, r3
 8016e94:	3710      	adds	r7, #16
 8016e96:	46bd      	mov	sp, r7
 8016e98:	bd80      	pop	{r7, pc}
 8016e9a:	bf00      	nop
 8016e9c:	2400dbb8 	.word	0x2400dbb8
 8016ea0:	2400dcf1 	.word	0x2400dcf1
 8016ea4:	24019ffa 	.word	0x24019ffa
 8016ea8:	2400dcfc 	.word	0x2400dcfc
 8016eac:	2400e7c0 	.word	0x2400e7c0
 8016eb0:	2400dd00 	.word	0x2400dd00
 8016eb4:	0801d0a0 	.word	0x0801d0a0
 8016eb8:	24000050 	.word	0x24000050
 8016ebc:	24019ff9 	.word	0x24019ff9
 8016ec0:	2400f338 	.word	0x2400f338
 8016ec4:	2400dba8 	.word	0x2400dba8

08016ec8 <vnd_try_send_A_nextpair_immediate>:

/* === Немедленная отправка A следующей пары после завершения B (внутри TxCplt) === */
static int vnd_try_send_A_nextpair_immediate(void)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b084      	sub	sp, #16
 8016ecc:	af02      	add	r7, sp, #8
    if(vnd_ep_busy) return 0;
 8016ece:	4b52      	ldr	r3, [pc, #328]	@ (8017018 <vnd_try_send_A_nextpair_immediate+0x150>)
 8016ed0:	781b      	ldrb	r3, [r3, #0]
 8016ed2:	b2db      	uxtb	r3, r3
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d001      	beq.n	8016edc <vnd_try_send_A_nextpair_immediate+0x14>
 8016ed8:	2300      	movs	r3, #0
 8016eda:	e098      	b.n	801700e <vnd_try_send_A_nextpair_immediate+0x146>
    /* После B мы уже сдвинули pair_send_idx/seq во внешней логике — тут пытаемся сразу выстрелить A новой пары */
    if(diag_mode_active){
 8016edc:	4b4f      	ldr	r3, [pc, #316]	@ (801701c <vnd_try_send_A_nextpair_immediate+0x154>)
 8016ede:	781b      	ldrb	r3, [r3, #0]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d037      	beq.n	8016f54 <vnd_try_send_A_nextpair_immediate+0x8c>
        /* Подготовим следующую пару под новый stream_seq и сразу пошлём A */
        vnd_diag_prepare_pair(stream_seq, cur_samples_per_frame ? cur_samples_per_frame : diag_samples);
 8016ee4:	4b4e      	ldr	r3, [pc, #312]	@ (8017020 <vnd_try_send_A_nextpair_immediate+0x158>)
 8016ee6:	681a      	ldr	r2, [r3, #0]
 8016ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8017024 <vnd_try_send_A_nextpair_immediate+0x15c>)
 8016eea:	881b      	ldrh	r3, [r3, #0]
 8016eec:	b29b      	uxth	r3, r3
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d003      	beq.n	8016efa <vnd_try_send_A_nextpair_immediate+0x32>
 8016ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8017024 <vnd_try_send_A_nextpair_immediate+0x15c>)
 8016ef4:	881b      	ldrh	r3, [r3, #0]
 8016ef6:	b29b      	uxth	r3, r3
 8016ef8:	e001      	b.n	8016efe <vnd_try_send_A_nextpair_immediate+0x36>
 8016efa:	4b4b      	ldr	r3, [pc, #300]	@ (8017028 <vnd_try_send_A_nextpair_immediate+0x160>)
 8016efc:	881b      	ldrh	r3, [r3, #0]
 8016efe:	4619      	mov	r1, r3
 8016f00:	4610      	mov	r0, r2
 8016f02:	f7ff fdb3 	bl	8016a6c <vnd_diag_prepare_pair>
        if(!vnd_validate_frame(diag_a_buf, diag_frame_len, 0, 0x02)) return 0;
 8016f06:	4b49      	ldr	r3, [pc, #292]	@ (801702c <vnd_try_send_A_nextpair_immediate+0x164>)
 8016f08:	8819      	ldrh	r1, [r3, #0]
 8016f0a:	2302      	movs	r3, #2
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	4848      	ldr	r0, [pc, #288]	@ (8017030 <vnd_try_send_A_nextpair_immediate+0x168>)
 8016f10:	f7ff fc4c 	bl	80167ac <vnd_validate_frame>
 8016f14:	4603      	mov	r3, r0
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d101      	bne.n	8016f1e <vnd_try_send_A_nextpair_immediate+0x56>
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	e077      	b.n	801700e <vnd_try_send_A_nextpair_immediate+0x146>
        if(vnd_transmit_frame(diag_a_buf, diag_frame_len, 0, 0x02, "ADC0-IMM") == USBD_OK){
 8016f1e:	4b43      	ldr	r3, [pc, #268]	@ (801702c <vnd_try_send_A_nextpair_immediate+0x164>)
 8016f20:	8819      	ldrh	r1, [r3, #0]
 8016f22:	4b44      	ldr	r3, [pc, #272]	@ (8017034 <vnd_try_send_A_nextpair_immediate+0x16c>)
 8016f24:	9300      	str	r3, [sp, #0]
 8016f26:	2302      	movs	r3, #2
 8016f28:	2200      	movs	r2, #0
 8016f2a:	4841      	ldr	r0, [pc, #260]	@ (8017030 <vnd_try_send_A_nextpair_immediate+0x168>)
 8016f2c:	f7ff fc9a 	bl	8016864 <vnd_transmit_frame>
 8016f30:	4603      	mov	r3, r0
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d10c      	bne.n	8016f50 <vnd_try_send_A_nextpair_immediate+0x88>
            sending_channel = 0; pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8016f36:	4b40      	ldr	r3, [pc, #256]	@ (8017038 <vnd_try_send_A_nextpair_immediate+0x170>)
 8016f38:	2200      	movs	r2, #0
 8016f3a:	701a      	strb	r2, [r3, #0]
 8016f3c:	4b3f      	ldr	r3, [pc, #252]	@ (801703c <vnd_try_send_A_nextpair_immediate+0x174>)
 8016f3e:	2201      	movs	r2, #1
 8016f40:	701a      	strb	r2, [r3, #0]
 8016f42:	f7ee f813 	bl	8004f6c <HAL_GetTick>
 8016f46:	4603      	mov	r3, r0
 8016f48:	4a3d      	ldr	r2, [pc, #244]	@ (8017040 <vnd_try_send_A_nextpair_immediate+0x178>)
 8016f4a:	6013      	str	r3, [r2, #0]
            return 1;
 8016f4c:	2301      	movs	r3, #1
 8016f4e:	e05e      	b.n	801700e <vnd_try_send_A_nextpair_immediate+0x146>
        }
        return 0;
 8016f50:	2300      	movs	r3, #0
 8016f52:	e05c      	b.n	801700e <vnd_try_send_A_nextpair_immediate+0x146>
    }
    /* Полный режим: убедимся, что в буфере подготовки есть готовый A; если нет — попробуем собрать */
    ChanFrame *fA = &g_frames[pair_send_idx][0];
 8016f54:	4b3b      	ldr	r3, [pc, #236]	@ (8017044 <vnd_try_send_A_nextpair_immediate+0x17c>)
 8016f56:	781b      	ldrb	r3, [r3, #0]
 8016f58:	461a      	mov	r2, r3
 8016f5a:	f241 5398 	movw	r3, #5528	@ 0x1598
 8016f5e:	fb02 f303 	mul.w	r3, r2, r3
 8016f62:	4a39      	ldr	r2, [pc, #228]	@ (8017048 <vnd_try_send_A_nextpair_immediate+0x180>)
 8016f64:	4413      	add	r3, r2
 8016f66:	607b      	str	r3, [r7, #4]
    if(fA->st != FB_READY){
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	781b      	ldrb	r3, [r3, #0]
 8016f6c:	b2db      	uxtb	r3, r3
 8016f6e:	2b01      	cmp	r3, #1
 8016f70:	d012      	beq.n	8016f98 <vnd_try_send_A_nextpair_immediate+0xd0>
        vnd_prepare_pair();
 8016f72:	f7ff f8f3 	bl	801615c <vnd_prepare_pair>
        fA = &g_frames[pair_send_idx][0];
 8016f76:	4b33      	ldr	r3, [pc, #204]	@ (8017044 <vnd_try_send_A_nextpair_immediate+0x17c>)
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	461a      	mov	r2, r3
 8016f7c:	f241 5398 	movw	r3, #5528	@ 0x1598
 8016f80:	fb02 f303 	mul.w	r3, r2, r3
 8016f84:	4a30      	ldr	r2, [pc, #192]	@ (8017048 <vnd_try_send_A_nextpair_immediate+0x180>)
 8016f86:	4413      	add	r3, r2
 8016f88:	607b      	str	r3, [r7, #4]
        if(fA->st != FB_READY) return 0;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	781b      	ldrb	r3, [r3, #0]
 8016f8e:	b2db      	uxtb	r3, r3
 8016f90:	2b01      	cmp	r3, #1
 8016f92:	d001      	beq.n	8016f98 <vnd_try_send_A_nextpair_immediate+0xd0>
 8016f94:	2300      	movs	r3, #0
 8016f96:	e03a      	b.n	801700e <vnd_try_send_A_nextpair_immediate+0x146>
    }
    /* Принудительно синхронизируем seq A с текущим stream_seq для консистентности пары */
    if(fA->frame_size >= VND_FRAME_HDR_SIZE){
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	88db      	ldrh	r3, [r3, #6]
 8016f9c:	2b1f      	cmp	r3, #31
 8016f9e:	d917      	bls.n	8016fd0 <vnd_try_send_A_nextpair_immediate+0x108>
        vnd_frame_hdr_t *ha = (vnd_frame_hdr_t*)fA->buf;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	330c      	adds	r3, #12
 8016fa4:	603b      	str	r3, [r7, #0]
        if(ha->magic == 0xA55A && ha->seq != stream_seq){ ha->seq = stream_seq; fA->seq = stream_seq; }
 8016fa6:	683b      	ldr	r3, [r7, #0]
 8016fa8:	881b      	ldrh	r3, [r3, #0]
 8016faa:	b29b      	uxth	r3, r3
 8016fac:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016fb0:	4293      	cmp	r3, r2
 8016fb2:	d10d      	bne.n	8016fd0 <vnd_try_send_A_nextpair_immediate+0x108>
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	685a      	ldr	r2, [r3, #4]
 8016fb8:	4b19      	ldr	r3, [pc, #100]	@ (8017020 <vnd_try_send_A_nextpair_immediate+0x158>)
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	429a      	cmp	r2, r3
 8016fbe:	d007      	beq.n	8016fd0 <vnd_try_send_A_nextpair_immediate+0x108>
 8016fc0:	4b17      	ldr	r3, [pc, #92]	@ (8017020 <vnd_try_send_A_nextpair_immediate+0x158>)
 8016fc2:	681a      	ldr	r2, [r3, #0]
 8016fc4:	683b      	ldr	r3, [r7, #0]
 8016fc6:	605a      	str	r2, [r3, #4]
 8016fc8:	4b15      	ldr	r3, [pc, #84]	@ (8017020 <vnd_try_send_A_nextpair_immediate+0x158>)
 8016fca:	681a      	ldr	r2, [r3, #0]
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	609a      	str	r2, [r3, #8]
    }
    if(vnd_transmit_frame(fA->buf, fA->frame_size, 0, 0, "ADC0-IMM") == USBD_OK){
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	f103 000c 	add.w	r0, r3, #12
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	88d9      	ldrh	r1, [r3, #6]
 8016fda:	4b16      	ldr	r3, [pc, #88]	@ (8017034 <vnd_try_send_A_nextpair_immediate+0x16c>)
 8016fdc:	9300      	str	r3, [sp, #0]
 8016fde:	2300      	movs	r3, #0
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	f7ff fc3f 	bl	8016864 <vnd_transmit_frame>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d10f      	bne.n	801700c <vnd_try_send_A_nextpair_immediate+0x144>
        fA->st = FB_SENDING; sending_channel = 0; pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	2202      	movs	r2, #2
 8016ff0:	701a      	strb	r2, [r3, #0]
 8016ff2:	4b11      	ldr	r3, [pc, #68]	@ (8017038 <vnd_try_send_A_nextpair_immediate+0x170>)
 8016ff4:	2200      	movs	r2, #0
 8016ff6:	701a      	strb	r2, [r3, #0]
 8016ff8:	4b10      	ldr	r3, [pc, #64]	@ (801703c <vnd_try_send_A_nextpair_immediate+0x174>)
 8016ffa:	2201      	movs	r2, #1
 8016ffc:	701a      	strb	r2, [r3, #0]
 8016ffe:	f7ed ffb5 	bl	8004f6c <HAL_GetTick>
 8017002:	4603      	mov	r3, r0
 8017004:	4a0e      	ldr	r2, [pc, #56]	@ (8017040 <vnd_try_send_A_nextpair_immediate+0x178>)
 8017006:	6013      	str	r3, [r2, #0]
        return 1;
 8017008:	2301      	movs	r3, #1
 801700a:	e000      	b.n	801700e <vnd_try_send_A_nextpair_immediate+0x146>
    }
    return 0;
 801700c:	2300      	movs	r3, #0
}
 801700e:	4618      	mov	r0, r3
 8017010:	3708      	adds	r7, #8
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
 8017016:	bf00      	nop
 8017018:	2400dbb8 	.word	0x2400dbb8
 801701c:	2400dcf1 	.word	0x2400dcf1
 8017020:	2400dba8 	.word	0x2400dba8
 8017024:	2400dbac 	.word	0x2400dbac
 8017028:	24000044 	.word	0x24000044
 801702c:	2400dcfc 	.word	0x2400dcfc
 8017030:	2400dd00 	.word	0x2400dd00
 8017034:	0801d0ac 	.word	0x0801d0ac
 8017038:	24000050 	.word	0x24000050
 801703c:	24019ffa 	.word	0x24019ffa
 8017040:	24019ffc 	.word	0x24019ffc
 8017044:	24019ff9 	.word	0x24019ff9
 8017048:	2400f338 	.word	0x2400f338

0801704c <vnd_log_hdr_layout>:

/* Лог структуры заголовка кадра для отладки */
static void vnd_log_hdr_layout(void){
 801704c:	b480      	push	{r7}
 801704e:	af00      	add	r7, sp, #0
#if VND_ENABLE_LOG
    VND_LOG("HDR sz=%u off.magic=%u off.seq=%u off.timestamp=%u off.total=%u", (unsigned)sizeof(vnd_frame_hdr_t),
            (unsigned)offsetof(vnd_frame_hdr_t,magic), (unsigned)offsetof(vnd_frame_hdr_t,seq),
            (unsigned)offsetof(vnd_frame_hdr_t,timestamp), (unsigned)offsetof(vnd_frame_hdr_t,total_samples));
#endif
}
 8017050:	bf00      	nop
 8017052:	46bd      	mov	sp, r7
 8017054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017058:	4770      	bx	lr

0801705a <vnd_try_send_test_from_task>:
    } else { vnd_tx_ready = 1; vnd_ep_busy = 0; VND_LOG("EMERG_TEST_BUSY"); }
}

/* Отправка единственного тестового кадра (строго из таска) */
static void vnd_try_send_test_from_task(void)
{
 801705a:	b480      	push	{r7}
 801705c:	b08d      	sub	sp, #52	@ 0x34
 801705e:	af00      	add	r7, sp, #0
           чтобы не попасть на BUSY/ZLP гонки. Далее обычная логика отправит A/B. */
    } else {
        VND_LOG("TEST_TX busy/fail");
        vnd_tx_ready = 1; vnd_ep_busy = 0;
    }
}
 8017060:	3734      	adds	r7, #52	@ 0x34
 8017062:	46bd      	mov	sp, r7
 8017064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017068:	4770      	bx	lr
	...

0801706c <Vendor_Stream_Task>:
    }
}

/* Основной периодический таск */
void __attribute__((unused)) Vendor_Stream_Task(void)
{
 801706c:	b5b0      	push	{r4, r5, r7, lr}
 801706e:	b0a8      	sub	sp, #160	@ 0xa0
 8017070:	af04      	add	r7, sp, #16
    dbg_task_calls++;
 8017072:	4b96      	ldr	r3, [pc, #600]	@ (80172cc <Vendor_Stream_Task+0x260>)
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	3301      	adds	r3, #1
 8017078:	4a94      	ldr	r2, [pc, #592]	@ (80172cc <Vendor_Stream_Task+0x260>)
 801707a:	6013      	str	r3, [r2, #0]
    /* Сервис EP0: выполняем отложенные SOFT/DEEP RESET без блокировки SETUP */
    USBD_VND_ProcessControlRequests();
 801707c:	f002 fb3a 	bl	80196f4 <USBD_VND_ProcessControlRequests>
    /* ПРИОРИТЕТ 0: если не сконфигурировано стримингом — обслуживаем оффлайн-STAT */
    if(!streaming)
 8017080:	4b93      	ldr	r3, [pc, #588]	@ (80172d0 <Vendor_Stream_Task+0x264>)
 8017082:	781b      	ldrb	r3, [r3, #0]
 8017084:	b2db      	uxtb	r3, r3
 8017086:	2b00      	cmp	r3, #0
 8017088:	d110      	bne.n	80170ac <Vendor_Stream_Task+0x40>
    {
    if(!vnd_ep_busy && !vnd_inflight){ vnd_try_send_pending_status_from_task(); }
 801708a:	4b92      	ldr	r3, [pc, #584]	@ (80172d4 <Vendor_Stream_Task+0x268>)
 801708c:	781b      	ldrb	r3, [r3, #0]
 801708e:	b2db      	uxtb	r3, r3
 8017090:	2b00      	cmp	r3, #0
 8017092:	d106      	bne.n	80170a2 <Vendor_Stream_Task+0x36>
 8017094:	4b90      	ldr	r3, [pc, #576]	@ (80172d8 <Vendor_Stream_Task+0x26c>)
 8017096:	781b      	ldrb	r3, [r3, #0]
 8017098:	b2db      	uxtb	r3, r3
 801709a:	2b00      	cmp	r3, #0
 801709c:	d101      	bne.n	80170a2 <Vendor_Stream_Task+0x36>
 801709e:	f7fe fd2d 	bl	8015afc <vnd_try_send_pending_status_from_task>
        vnd_tick_flag = 0;
 80170a2:	4b8e      	ldr	r3, [pc, #568]	@ (80172dc <Vendor_Stream_Task+0x270>)
 80170a4:	2200      	movs	r2, #0
 80170a6:	701a      	strb	r2, [r3, #0]
        return;
 80170a8:	f000 be73 	b.w	8017d92 <Vendor_Stream_Task+0xd26>
    }
    /* подавляем частый шум лога при каждом заходе в таск */
    if(!dbg_printed_sizes)
 80170ac:	4b8c      	ldr	r3, [pc, #560]	@ (80172e0 <Vendor_Stream_Task+0x274>)
 80170ae:	781b      	ldrb	r3, [r3, #0]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d104      	bne.n	80170be <Vendor_Stream_Task+0x52>
    {
        vnd_log_hdr_layout();
 80170b4:	f7ff ffca 	bl	801704c <vnd_log_hdr_layout>
        dbg_printed_sizes = 1;
 80170b8:	4b89      	ldr	r3, [pc, #548]	@ (80172e0 <Vendor_Stream_Task+0x274>)
 80170ba:	2201      	movs	r2, #1
 80170bc:	701a      	strb	r2, [r3, #0]
    }
    /* СУПЕР-ПРИОРИТЕТ: если пришёл STOP — разрешаем только ACK-STAT, полностью блокируем стрим */
    if (stop_request) {
 80170be:	4b89      	ldr	r3, [pc, #548]	@ (80172e4 <Vendor_Stream_Task+0x278>)
 80170c0:	781b      	ldrb	r3, [r3, #0]
 80170c2:	b2db      	uxtb	r3, r3
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d02c      	beq.n	8017122 <Vendor_Stream_Task+0xb6>
        if (!vnd_ep_busy) {
 80170c8:	4b82      	ldr	r3, [pc, #520]	@ (80172d4 <Vendor_Stream_Task+0x268>)
 80170ca:	781b      	ldrb	r3, [r3, #0]
 80170cc:	b2db      	uxtb	r3, r3
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d109      	bne.n	80170e6 <Vendor_Stream_Task+0x7a>
            if (!pending_status) pending_status = 1; /* гарантируем наличие отложенного STAT */
 80170d2:	4b85      	ldr	r3, [pc, #532]	@ (80172e8 <Vendor_Stream_Task+0x27c>)
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	b2db      	uxtb	r3, r3
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d102      	bne.n	80170e2 <Vendor_Stream_Task+0x76>
 80170dc:	4b82      	ldr	r3, [pc, #520]	@ (80172e8 <Vendor_Stream_Task+0x27c>)
 80170de:	2201      	movs	r2, #1
 80170e0:	701a      	strb	r2, [r3, #0]
            vnd_try_send_pending_status_from_task();
 80170e2:	f7fe fd0b 	bl	8015afc <vnd_try_send_pending_status_from_task>
        }
        if (vnd_tick_flag) vnd_tick_flag = 0;
 80170e6:	4b7d      	ldr	r3, [pc, #500]	@ (80172dc <Vendor_Stream_Task+0x270>)
 80170e8:	781b      	ldrb	r3, [r3, #0]
 80170ea:	b2db      	uxtb	r3, r3
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d002      	beq.n	80170f6 <Vendor_Stream_Task+0x8a>
 80170f0:	4b7a      	ldr	r3, [pc, #488]	@ (80172dc <Vendor_Stream_Task+0x270>)
 80170f2:	2200      	movs	r2, #0
 80170f4:	701a      	strb	r2, [r3, #0]
        /* Логируем попытки передачи после STOP */
        if (pending_B || test_sent) {
 80170f6:	4b7d      	ldr	r3, [pc, #500]	@ (80172ec <Vendor_Stream_Task+0x280>)
 80170f8:	781b      	ldrb	r3, [r3, #0]
 80170fa:	b2db      	uxtb	r3, r3
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d105      	bne.n	801710c <Vendor_Stream_Task+0xa0>
 8017100:	4b7b      	ldr	r3, [pc, #492]	@ (80172f0 <Vendor_Stream_Task+0x284>)
 8017102:	781b      	ldrb	r3, [r3, #0]
 8017104:	b2db      	uxtb	r3, r3
 8017106:	2b00      	cmp	r3, #0
 8017108:	f000 85fd 	beq.w	8017d06 <Vendor_Stream_Task+0xc9a>
            VND_LOG("BLOCK: попытка передачи после STOP (pending_B=%d, test_sent=%d)", pending_B, test_sent);
            pending_B = 0; test_sent = 0; sending_channel = 0xFF;
 801710c:	4b77      	ldr	r3, [pc, #476]	@ (80172ec <Vendor_Stream_Task+0x280>)
 801710e:	2200      	movs	r2, #0
 8017110:	701a      	strb	r2, [r3, #0]
 8017112:	4b77      	ldr	r3, [pc, #476]	@ (80172f0 <Vendor_Stream_Task+0x284>)
 8017114:	2200      	movs	r2, #0
 8017116:	701a      	strb	r2, [r3, #0]
 8017118:	4b76      	ldr	r3, [pc, #472]	@ (80172f4 <Vendor_Stream_Task+0x288>)
 801711a:	22ff      	movs	r2, #255	@ 0xff
 801711c:	701a      	strb	r2, [r3, #0]
        }
        return; /* ждём TxCplt ACK-STOP */
 801711e:	f000 bdf2 	b.w	8017d06 <Vendor_Stream_Task+0xc9a>
    }

    /* Универсальная антиклин‑разблокировка EP: если IN висит >200 мс — принудительно снимаем busy */
    do {
        uint32_t now_ms = HAL_GetTick();
 8017122:	f7ed ff23 	bl	8004f6c <HAL_GetTick>
 8017126:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
        extern uint8_t USBD_VND_TxIsBusy(void);
        uint8_t vbusy = USBD_VND_TxIsBusy();
 801712a:	f002 fb6b 	bl	8019804 <USBD_VND_TxIsBusy>
 801712e:	4603      	mov	r3, r0
 8017130:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
        if ( (vnd_ep_busy || vbusy) && vnd_last_tx_start_ms != 0 && (now_ms - vnd_last_tx_start_ms) > 200) {
 8017134:	4b67      	ldr	r3, [pc, #412]	@ (80172d4 <Vendor_Stream_Task+0x268>)
 8017136:	781b      	ldrb	r3, [r3, #0]
 8017138:	b2db      	uxtb	r3, r3
 801713a:	2b00      	cmp	r3, #0
 801713c:	d103      	bne.n	8017146 <Vendor_Stream_Task+0xda>
 801713e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8017142:	2b00      	cmp	r3, #0
 8017144:	d012      	beq.n	801716c <Vendor_Stream_Task+0x100>
 8017146:	4b6c      	ldr	r3, [pc, #432]	@ (80172f8 <Vendor_Stream_Task+0x28c>)
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d00e      	beq.n	801716c <Vendor_Stream_Task+0x100>
 801714e:	4b6a      	ldr	r3, [pc, #424]	@ (80172f8 <Vendor_Stream_Task+0x28c>)
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8017156:	1ad3      	subs	r3, r2, r3
 8017158:	2bc8      	cmp	r3, #200	@ 0xc8
 801715a:	d907      	bls.n	801716c <Vendor_Stream_Task+0x100>
            extern void USBD_VND_ForceTxIdle(void);
            USBD_VND_ForceTxIdle();
 801715c:	f002 fb76 	bl	801984c <USBD_VND_ForceTxIdle>
            vnd_ep_busy = 0; vnd_tx_ready = 1;
 8017160:	4b5c      	ldr	r3, [pc, #368]	@ (80172d4 <Vendor_Stream_Task+0x268>)
 8017162:	2200      	movs	r2, #0
 8017164:	701a      	strb	r2, [r3, #0]
 8017166:	4b65      	ldr	r3, [pc, #404]	@ (80172fc <Vendor_Stream_Task+0x290>)
 8017168:	2201      	movs	r2, #1
 801716a:	701a      	strb	r2, [r3, #0]
        }
    } while(0);

    /* ACK-STAT на START: отключено, чтобы не занимать Vendor IN перед первой парой.
       Хост может опрашивать состояние через GET_STATUS (EP0). */
    if(status_ack_pending){ start_ack_done = 1; status_ack_pending = 0; }
 801716c:	4b64      	ldr	r3, [pc, #400]	@ (8017300 <Vendor_Stream_Task+0x294>)
 801716e:	781b      	ldrb	r3, [r3, #0]
 8017170:	b2db      	uxtb	r3, r3
 8017172:	2b00      	cmp	r3, #0
 8017174:	d005      	beq.n	8017182 <Vendor_Stream_Task+0x116>
 8017176:	4b63      	ldr	r3, [pc, #396]	@ (8017304 <Vendor_Stream_Task+0x298>)
 8017178:	2201      	movs	r2, #1
 801717a:	701a      	strb	r2, [r3, #0]
 801717c:	4b60      	ldr	r3, [pc, #384]	@ (8017300 <Vendor_Stream_Task+0x294>)
 801717e:	2200      	movs	r2, #0
 8017180:	701a      	strb	r2, [r3, #0]

    uint32_t now = HAL_GetTick();
 8017182:	f7ed fef3 	bl	8004f6c <HAL_GetTick>
 8017186:	67f8      	str	r0, [r7, #124]	@ 0x7c
    /* Fallback: если ACK так и не ушёл в полёт (status_ack_pending держится),
       не ждём бесконечно — считаем ACK выполненным и продолжаем к TEST. */
    if(!test_sent && !start_ack_done && status_ack_pending){
 8017188:	4b59      	ldr	r3, [pc, #356]	@ (80172f0 <Vendor_Stream_Task+0x284>)
 801718a:	781b      	ldrb	r3, [r3, #0]
 801718c:	b2db      	uxtb	r3, r3
 801718e:	2b00      	cmp	r3, #0
 8017190:	d124      	bne.n	80171dc <Vendor_Stream_Task+0x170>
 8017192:	4b5c      	ldr	r3, [pc, #368]	@ (8017304 <Vendor_Stream_Task+0x298>)
 8017194:	781b      	ldrb	r3, [r3, #0]
 8017196:	b2db      	uxtb	r3, r3
 8017198:	2b00      	cmp	r3, #0
 801719a:	d11f      	bne.n	80171dc <Vendor_Stream_Task+0x170>
 801719c:	4b58      	ldr	r3, [pc, #352]	@ (8017300 <Vendor_Stream_Task+0x294>)
 801719e:	781b      	ldrb	r3, [r3, #0]
 80171a0:	b2db      	uxtb	r3, r3
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d01a      	beq.n	80171dc <Vendor_Stream_Task+0x170>
        if(now - start_cmd_ms > 200){
 80171a6:	4b58      	ldr	r3, [pc, #352]	@ (8017308 <Vendor_Stream_Task+0x29c>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80171ac:	1ad3      	subs	r3, r2, r3
 80171ae:	2bc8      	cmp	r3, #200	@ 0xc8
 80171b0:	d914      	bls.n	80171dc <Vendor_Stream_Task+0x170>
            start_ack_done = 1; status_ack_pending = 0;
 80171b2:	4b54      	ldr	r3, [pc, #336]	@ (8017304 <Vendor_Stream_Task+0x298>)
 80171b4:	2201      	movs	r2, #1
 80171b6:	701a      	strb	r2, [r3, #0]
 80171b8:	4b51      	ldr	r3, [pc, #324]	@ (8017300 <Vendor_Stream_Task+0x294>)
 80171ba:	2200      	movs	r2, #0
 80171bc:	701a      	strb	r2, [r3, #0]
            vnd_ep_busy = 0; vnd_tx_ready = 1;
 80171be:	4b45      	ldr	r3, [pc, #276]	@ (80172d4 <Vendor_Stream_Task+0x268>)
 80171c0:	2200      	movs	r2, #0
 80171c2:	701a      	strb	r2, [r3, #0]
 80171c4:	4b4d      	ldr	r3, [pc, #308]	@ (80172fc <Vendor_Stream_Task+0x290>)
 80171c6:	2201      	movs	r2, #1
 80171c8:	701a      	strb	r2, [r3, #0]
            extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 80171ca:	f002 fb3f 	bl	801984c <USBD_VND_ForceTxIdle>
            VND_LOG("ACK_FALLBACK(no inflight) -> allow TEST");
            if(!vnd_ep_busy){ vnd_try_send_test_from_task(); }
 80171ce:	4b41      	ldr	r3, [pc, #260]	@ (80172d4 <Vendor_Stream_Task+0x268>)
 80171d0:	781b      	ldrb	r3, [r3, #0]
 80171d2:	b2db      	uxtb	r3, r3
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d101      	bne.n	80171dc <Vendor_Stream_Task+0x170>
 80171d8:	f7ff ff3f 	bl	801705a <vnd_try_send_test_from_task>
        }
    }

    if(!test_sent && start_stat_inflight) {
 80171dc:	4b44      	ldr	r3, [pc, #272]	@ (80172f0 <Vendor_Stream_Task+0x284>)
 80171de:	781b      	ldrb	r3, [r3, #0]
 80171e0:	b2db      	uxtb	r3, r3
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d126      	bne.n	8017234 <Vendor_Stream_Task+0x1c8>
 80171e6:	4b49      	ldr	r3, [pc, #292]	@ (801730c <Vendor_Stream_Task+0x2a0>)
 80171e8:	781b      	ldrb	r3, [r3, #0]
 80171ea:	b2db      	uxtb	r3, r3
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d021      	beq.n	8017234 <Vendor_Stream_Task+0x1c8>
        if(now - vnd_last_tx_start_ms > 80) {
 80171f0:	4b41      	ldr	r3, [pc, #260]	@ (80172f8 <Vendor_Stream_Task+0x28c>)
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80171f6:	1ad3      	subs	r3, r2, r3
 80171f8:	2b50      	cmp	r3, #80	@ 0x50
 80171fa:	d91b      	bls.n	8017234 <Vendor_Stream_Task+0x1c8>
            /* На некоторых хостах ACK-STAT может не завершиться DataIn/ZLP. Разблокируем вручную. */
            start_stat_inflight = 0; start_ack_done = 1; vnd_ep_busy = 0; vnd_tx_ready = 1;
 80171fc:	4b43      	ldr	r3, [pc, #268]	@ (801730c <Vendor_Stream_Task+0x2a0>)
 80171fe:	2200      	movs	r2, #0
 8017200:	701a      	strb	r2, [r3, #0]
 8017202:	4b40      	ldr	r3, [pc, #256]	@ (8017304 <Vendor_Stream_Task+0x298>)
 8017204:	2201      	movs	r2, #1
 8017206:	701a      	strb	r2, [r3, #0]
 8017208:	4b32      	ldr	r3, [pc, #200]	@ (80172d4 <Vendor_Stream_Task+0x268>)
 801720a:	2200      	movs	r2, #0
 801720c:	701a      	strb	r2, [r3, #0]
 801720e:	4b3b      	ldr	r3, [pc, #236]	@ (80172fc <Vendor_Stream_Task+0x290>)
 8017210:	2201      	movs	r2, #1
 8017212:	701a      	strb	r2, [r3, #0]
            extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 8017214:	f002 fb1a 	bl	801984c <USBD_VND_ForceTxIdle>
            VND_LOG("ACK_TIMEOUT -> unlock test");
            /* Сразу отдадим ещё один STAT (если был queued) и попробуем отправить TEST */
            if(pending_status && !vnd_ep_busy){
 8017218:	4b33      	ldr	r3, [pc, #204]	@ (80172e8 <Vendor_Stream_Task+0x27c>)
 801721a:	781b      	ldrb	r3, [r3, #0]
 801721c:	b2db      	uxtb	r3, r3
 801721e:	2b00      	cmp	r3, #0
 8017220:	d006      	beq.n	8017230 <Vendor_Stream_Task+0x1c4>
 8017222:	4b2c      	ldr	r3, [pc, #176]	@ (80172d4 <Vendor_Stream_Task+0x268>)
 8017224:	781b      	ldrb	r3, [r3, #0]
 8017226:	b2db      	uxtb	r3, r3
 8017228:	2b00      	cmp	r3, #0
 801722a:	d101      	bne.n	8017230 <Vendor_Stream_Task+0x1c4>
                vnd_try_send_pending_status_from_task();
 801722c:	f7fe fc66 	bl	8015afc <vnd_try_send_pending_status_from_task>
            }
            if(!vnd_ep_busy){
 8017230:	4b28      	ldr	r3, [pc, #160]	@ (80172d4 <Vendor_Stream_Task+0x268>)
 8017232:	781b      	ldrb	r3, [r3, #0]
#endif
            }
        }
    }
    /* Аварийный обход: если тест не ушёл за разумное время после START — считаем его выполненным и продолжаем */
    if(!test_sent && (now - start_cmd_ms) > 160) {
 8017234:	4b2e      	ldr	r3, [pc, #184]	@ (80172f0 <Vendor_Stream_Task+0x284>)
 8017236:	781b      	ldrb	r3, [r3, #0]
 8017238:	b2db      	uxtb	r3, r3
 801723a:	2b00      	cmp	r3, #0
 801723c:	d10e      	bne.n	801725c <Vendor_Stream_Task+0x1f0>
 801723e:	4b32      	ldr	r3, [pc, #200]	@ (8017308 <Vendor_Stream_Task+0x29c>)
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017244:	1ad3      	subs	r3, r2, r3
 8017246:	2ba0      	cmp	r3, #160	@ 0xa0
 8017248:	d908      	bls.n	801725c <Vendor_Stream_Task+0x1f0>
        test_in_flight = 0;
 801724a:	4b31      	ldr	r3, [pc, #196]	@ (8017310 <Vendor_Stream_Task+0x2a4>)
 801724c:	2200      	movs	r2, #0
 801724e:	701a      	strb	r2, [r3, #0]
        test_sent = 1;
 8017250:	4b27      	ldr	r3, [pc, #156]	@ (80172f0 <Vendor_Stream_Task+0x284>)
 8017252:	2201      	movs	r2, #1
 8017254:	701a      	strb	r2, [r3, #0]
        start_ack_done = 1;
 8017256:	4b2b      	ldr	r3, [pc, #172]	@ (8017304 <Vendor_Stream_Task+0x298>)
 8017258:	2201      	movs	r2, #1
 801725a:	701a      	strb	r2, [r3, #0]
        VND_LOG("TEST_FALLTHRU after %lums -> proceed to A/B", (unsigned long)(now - start_cmd_ms));
    }
    /* ВАЖНО: сначала попробуем подготовить пару A/B, чтобы не зациклиться на ранних STAT.
       Подготовка пары не зависит от занятости EP, поэтому убираем лишний гейтинг по vnd_ep_busy. */
    {
        ChanFrame *fA0 = &g_frames[pair_send_idx][0];
 801725c:	4b2d      	ldr	r3, [pc, #180]	@ (8017314 <Vendor_Stream_Task+0x2a8>)
 801725e:	781b      	ldrb	r3, [r3, #0]
 8017260:	461a      	mov	r2, r3
 8017262:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017266:	fb02 f303 	mul.w	r3, r2, r3
 801726a:	4a2b      	ldr	r2, [pc, #172]	@ (8017318 <Vendor_Stream_Task+0x2ac>)
 801726c:	4413      	add	r3, r2
 801726e:	67bb      	str	r3, [r7, #120]	@ 0x78
        if(fA0->st != FB_READY){ vnd_prepare_pair(); }
 8017270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017272:	781b      	ldrb	r3, [r3, #0]
 8017274:	b2db      	uxtb	r3, r3
 8017276:	2b01      	cmp	r3, #1
 8017278:	d001      	beq.n	801727e <Vendor_Stream_Task+0x212>
 801727a:	f7fe ff6f 	bl	801615c <vnd_prepare_pair>
    }
    /* Раннее окно для GET_STATUS до первой пары — отключено: STAT по IN только между парами. */
    /* Дополнительный ранний запуск TEST: если после START прошло >50 мс и EP свободен */
    if(!test_sent && !test_in_flight) {
 801727e:	4b1c      	ldr	r3, [pc, #112]	@ (80172f0 <Vendor_Stream_Task+0x284>)
 8017280:	781b      	ldrb	r3, [r3, #0]
 8017282:	b2db      	uxtb	r3, r3
 8017284:	2b00      	cmp	r3, #0
 8017286:	d149      	bne.n	801731c <Vendor_Stream_Task+0x2b0>
 8017288:	4b21      	ldr	r3, [pc, #132]	@ (8017310 <Vendor_Stream_Task+0x2a4>)
 801728a:	781b      	ldrb	r3, [r3, #0]
 801728c:	b2db      	uxtb	r3, r3
 801728e:	2b00      	cmp	r3, #0
 8017290:	d144      	bne.n	801731c <Vendor_Stream_Task+0x2b0>
        if(!vnd_ep_busy){
 8017292:	4b10      	ldr	r3, [pc, #64]	@ (80172d4 <Vendor_Stream_Task+0x268>)
 8017294:	781b      	ldrb	r3, [r3, #0]
 8017296:	b2db      	uxtb	r3, r3
 8017298:	2b00      	cmp	r3, #0
 801729a:	d13f      	bne.n	801731c <Vendor_Stream_Task+0x2b0>
            if (now - start_cmd_ms > 50) {
 801729c:	4b1a      	ldr	r3, [pc, #104]	@ (8017308 <Vendor_Stream_Task+0x29c>)
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80172a2:	1ad3      	subs	r3, r2, r3
 80172a4:	2b32      	cmp	r3, #50	@ 0x32
 80172a6:	d939      	bls.n	801731c <Vendor_Stream_Task+0x2b0>
                vnd_try_send_test_from_task();
 80172a8:	f7ff fed7 	bl	801705a <vnd_try_send_test_from_task>
                if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 80172ac:	4b09      	ldr	r3, [pc, #36]	@ (80172d4 <Vendor_Stream_Task+0x268>)
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	b2db      	uxtb	r3, r3
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d032      	beq.n	801731c <Vendor_Stream_Task+0x2b0>
 80172b6:	4b09      	ldr	r3, [pc, #36]	@ (80172dc <Vendor_Stream_Task+0x270>)
 80172b8:	781b      	ldrb	r3, [r3, #0]
 80172ba:	b2db      	uxtb	r3, r3
 80172bc:	2b00      	cmp	r3, #0
 80172be:	f000 8524 	beq.w	8017d0a <Vendor_Stream_Task+0xc9e>
 80172c2:	4b06      	ldr	r3, [pc, #24]	@ (80172dc <Vendor_Stream_Task+0x270>)
 80172c4:	2200      	movs	r2, #0
 80172c6:	701a      	strb	r2, [r3, #0]
 80172c8:	f000 bd1f 	b.w	8017d0a <Vendor_Stream_Task+0xc9e>
 80172cc:	2400dc64 	.word	0x2400dc64
 80172d0:	2400dba4 	.word	0x2400dba4
 80172d4:	2400dbb8 	.word	0x2400dbb8
 80172d8:	2400dbb9 	.word	0x2400dbb9
 80172dc:	2401a074 	.word	0x2401a074
 80172e0:	2400dc14 	.word	0x2400dc14
 80172e4:	2400dc58 	.word	0x2400dc58
 80172e8:	2400dcf0 	.word	0x2400dcf0
 80172ec:	24019ffa 	.word	0x24019ffa
 80172f0:	2400dbba 	.word	0x2400dbba
 80172f4:	24000050 	.word	0x24000050
 80172f8:	2400dc1c 	.word	0x2400dc1c
 80172fc:	2400003b 	.word	0x2400003b
 8017300:	2400dc57 	.word	0x2400dc57
 8017304:	2400dc56 	.word	0x2400dc56
 8017308:	2400dbb0 	.word	0x2400dbb0
 801730c:	2400dc55 	.word	0x2400dc55
 8017310:	2400dbbb 	.word	0x2400dbbb
 8017314:	24019ff9 	.word	0x24019ff9
 8017318:	2400f338 	.word	0x2400f338
            }
        }
    }
    if(test_in_flight && (now - vnd_last_tx_start_ms) > 100){
 801731c:	4b7f      	ldr	r3, [pc, #508]	@ (801751c <Vendor_Stream_Task+0x4b0>)
 801731e:	781b      	ldrb	r3, [r3, #0]
 8017320:	b2db      	uxtb	r3, r3
 8017322:	2b00      	cmp	r3, #0
 8017324:	d016      	beq.n	8017354 <Vendor_Stream_Task+0x2e8>
 8017326:	4b7e      	ldr	r3, [pc, #504]	@ (8017520 <Vendor_Stream_Task+0x4b4>)
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801732c:	1ad3      	subs	r3, r2, r3
 801732e:	2b64      	cmp	r3, #100	@ 0x64
 8017330:	d910      	bls.n	8017354 <Vendor_Stream_Task+0x2e8>
        /* На некоторых хостах (FS/RPi) DataIn может не вызваться после короткого TEST.
           Чтобы не зависнуть с занятым EP, снимаем busy и продолжаем. */
    test_in_flight = 0;
 8017332:	4b7a      	ldr	r3, [pc, #488]	@ (801751c <Vendor_Stream_Task+0x4b0>)
 8017334:	2200      	movs	r2, #0
 8017336:	701a      	strb	r2, [r3, #0]
    test_sent = 1;
 8017338:	4b7a      	ldr	r3, [pc, #488]	@ (8017524 <Vendor_Stream_Task+0x4b8>)
 801733a:	2201      	movs	r2, #1
 801733c:	701a      	strb	r2, [r3, #0]
    vnd_ep_busy = 0;
 801733e:	4b7a      	ldr	r3, [pc, #488]	@ (8017528 <Vendor_Stream_Task+0x4bc>)
 8017340:	2200      	movs	r2, #0
 8017342:	701a      	strb	r2, [r3, #0]
    vnd_tx_ready = 1;
 8017344:	4b79      	ldr	r3, [pc, #484]	@ (801752c <Vendor_Stream_Task+0x4c0>)
 8017346:	2201      	movs	r2, #1
 8017348:	701a      	strb	r2, [r3, #0]
    extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 801734a:	f002 fa7f 	bl	801984c <USBD_VND_ForceTxIdle>
        vnd_tx_kick = 1;
 801734e:	4b78      	ldr	r3, [pc, #480]	@ (8017530 <Vendor_Stream_Task+0x4c4>)
 8017350:	2201      	movs	r2, #1
 8017352:	701a      	strb	r2, [r3, #0]
        VND_LOG("TEST_TIMEOUT -> unlock EP");
    }
    if(!test_sent){
 8017354:	4b73      	ldr	r3, [pc, #460]	@ (8017524 <Vendor_Stream_Task+0x4b8>)
 8017356:	781b      	ldrb	r3, [r3, #0]
 8017358:	b2db      	uxtb	r3, r3
 801735a:	2b00      	cmp	r3, #0
 801735c:	d101      	bne.n	8017362 <Vendor_Stream_Task+0x2f6>
        if(!vnd_ep_busy){
 801735e:	4b72      	ldr	r3, [pc, #456]	@ (8017528 <Vendor_Stream_Task+0x4bc>)
 8017360:	781b      	ldrb	r3, [r3, #0]
        }
        /* Не выходим раньше времени: позволим подготовку/отправку A/B идти параллельно,
           чтобы не блокироваться на тестовом кадре. */
    }

    if(diag_mode_active){
 8017362:	4b74      	ldr	r3, [pc, #464]	@ (8017534 <Vendor_Stream_Task+0x4c8>)
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d04e      	beq.n	8017408 <Vendor_Stream_Task+0x39c>
        /* Зафиксируем размер один раз */
        if(cur_samples_per_frame == 0){
 801736a:	4b73      	ldr	r3, [pc, #460]	@ (8017538 <Vendor_Stream_Task+0x4cc>)
 801736c:	881b      	ldrh	r3, [r3, #0]
 801736e:	b29b      	uxth	r3, r3
 8017370:	2b00      	cmp	r3, #0
 8017372:	d119      	bne.n	80173a8 <Vendor_Stream_Task+0x33c>
            uint16_t s = diag_samples; if(s > VND_MAX_SAMPLES) s = VND_MAX_SAMPLES;
 8017374:	4b71      	ldr	r3, [pc, #452]	@ (801753c <Vendor_Stream_Task+0x4d0>)
 8017376:	881b      	ldrh	r3, [r3, #0]
 8017378:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 801737c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8017380:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8017384:	d903      	bls.n	801738e <Vendor_Stream_Task+0x322>
 8017386:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 801738a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
            cur_samples_per_frame = s;
 801738e:	4a6a      	ldr	r2, [pc, #424]	@ (8017538 <Vendor_Stream_Task+0x4cc>)
 8017390:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8017394:	8013      	strh	r3, [r2, #0]
            cur_expected_frame_size = (uint16_t)(VND_FRAME_HDR_SIZE + cur_samples_per_frame*2u);
 8017396:	4b68      	ldr	r3, [pc, #416]	@ (8017538 <Vendor_Stream_Task+0x4cc>)
 8017398:	881b      	ldrh	r3, [r3, #0]
 801739a:	b29b      	uxth	r3, r3
 801739c:	3310      	adds	r3, #16
 801739e:	b29b      	uxth	r3, r3
 80173a0:	005b      	lsls	r3, r3, #1
 80173a2:	b29a      	uxth	r2, r3
 80173a4:	4b66      	ldr	r3, [pc, #408]	@ (8017540 <Vendor_Stream_Task+0x4d4>)
 80173a6:	801a      	strh	r2, [r3, #0]
        }
        /* Подготовить пару для текущего stream_seq, если ещё не подготовлена и не идёт передача */
        if(sending_channel == 0xFF && !pending_B && diag_prepared_seq != stream_seq){
 80173a8:	4b66      	ldr	r3, [pc, #408]	@ (8017544 <Vendor_Stream_Task+0x4d8>)
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	2bff      	cmp	r3, #255	@ 0xff
 80173ae:	d117      	bne.n	80173e0 <Vendor_Stream_Task+0x374>
 80173b0:	4b65      	ldr	r3, [pc, #404]	@ (8017548 <Vendor_Stream_Task+0x4dc>)
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	b2db      	uxtb	r3, r3
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d112      	bne.n	80173e0 <Vendor_Stream_Task+0x374>
 80173ba:	4b64      	ldr	r3, [pc, #400]	@ (801754c <Vendor_Stream_Task+0x4e0>)
 80173bc:	681a      	ldr	r2, [r3, #0]
 80173be:	4b64      	ldr	r3, [pc, #400]	@ (8017550 <Vendor_Stream_Task+0x4e4>)
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	429a      	cmp	r2, r3
 80173c4:	d00c      	beq.n	80173e0 <Vendor_Stream_Task+0x374>
            vnd_diag_prepare_pair(stream_seq, cur_samples_per_frame);
 80173c6:	4b62      	ldr	r3, [pc, #392]	@ (8017550 <Vendor_Stream_Task+0x4e4>)
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	4a5b      	ldr	r2, [pc, #364]	@ (8017538 <Vendor_Stream_Task+0x4cc>)
 80173cc:	8812      	ldrh	r2, [r2, #0]
 80173ce:	b292      	uxth	r2, r2
 80173d0:	4611      	mov	r1, r2
 80173d2:	4618      	mov	r0, r3
 80173d4:	f7ff fb4a 	bl	8016a6c <vnd_diag_prepare_pair>
            diag_prepared_seq = stream_seq;
 80173d8:	4b5d      	ldr	r3, [pc, #372]	@ (8017550 <Vendor_Stream_Task+0x4e4>)
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	4a5b      	ldr	r2, [pc, #364]	@ (801754c <Vendor_Stream_Task+0x4e0>)
 80173de:	6013      	str	r3, [r2, #0]
        }
        /* В DIAG STAT через bulk полностью заблокирован (см. vnd_try_send_pending_status_from_task) */
        /* Отправка диагностических кадров без темпирования: A затем B */
        if(!vnd_ep_busy){ (void)vnd_diag_try_tx(); }
 80173e0:	4b51      	ldr	r3, [pc, #324]	@ (8017528 <Vendor_Stream_Task+0x4bc>)
 80173e2:	781b      	ldrb	r3, [r3, #0]
 80173e4:	b2db      	uxtb	r3, r3
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d101      	bne.n	80173ee <Vendor_Stream_Task+0x382>
 80173ea:	f7ff fbfd 	bl	8016be8 <vnd_diag_try_tx>
        if(vnd_tick_flag) vnd_tick_flag = 0;
 80173ee:	4b59      	ldr	r3, [pc, #356]	@ (8017554 <Vendor_Stream_Task+0x4e8>)
 80173f0:	781b      	ldrb	r3, [r3, #0]
 80173f2:	b2db      	uxtb	r3, r3
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d002      	beq.n	80173fe <Vendor_Stream_Task+0x392>
 80173f8:	4b56      	ldr	r3, [pc, #344]	@ (8017554 <Vendor_Stream_Task+0x4e8>)
 80173fa:	2200      	movs	r2, #0
 80173fc:	701a      	strb	r2, [r3, #0]
        vnd_cdc_periodic_stats(now);
 80173fe:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8017400:	f7fe f8c2 	bl	8015588 <vnd_cdc_periodic_stats>
        return;
 8017404:	f000 bcc5 	b.w	8017d92 <Vendor_Stream_Task+0xd26>
    }
    
    if(!full_mode){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 8017408:	4b53      	ldr	r3, [pc, #332]	@ (8017558 <Vendor_Stream_Task+0x4ec>)
 801740a:	781b      	ldrb	r3, [r3, #0]
 801740c:	b2db      	uxtb	r3, r3
 801740e:	2b00      	cmp	r3, #0
 8017410:	d10a      	bne.n	8017428 <Vendor_Stream_Task+0x3bc>
 8017412:	4b50      	ldr	r3, [pc, #320]	@ (8017554 <Vendor_Stream_Task+0x4e8>)
 8017414:	781b      	ldrb	r3, [r3, #0]
 8017416:	b2db      	uxtb	r3, r3
 8017418:	2b00      	cmp	r3, #0
 801741a:	f000 8478 	beq.w	8017d0e <Vendor_Stream_Task+0xca2>
 801741e:	4b4d      	ldr	r3, [pc, #308]	@ (8017554 <Vendor_Stream_Task+0x4e8>)
 8017420:	2200      	movs	r2, #0
 8017422:	701a      	strb	r2, [r3, #0]
 8017424:	f000 bc73 	b.w	8017d0e <Vendor_Stream_Task+0xca2>

    /* Новый упрощённый путь: асинхронная передача A/B без ожидания пары */
    if(async_mode){
 8017428:	4b4c      	ldr	r3, [pc, #304]	@ (801755c <Vendor_Stream_Task+0x4f0>)
 801742a:	781b      	ldrb	r3, [r3, #0]
 801742c:	b2db      	uxtb	r3, r3
 801742e:	2b00      	cmp	r3, #0
 8017430:	d024      	beq.n	801747c <Vendor_Stream_Task+0x410>
        /* Всегда стараться иметь подготовленные пары */
        ChanFrame *fa0 = &g_frames[pair_fill_idx][0];
 8017432:	4b4b      	ldr	r3, [pc, #300]	@ (8017560 <Vendor_Stream_Task+0x4f4>)
 8017434:	781b      	ldrb	r3, [r3, #0]
 8017436:	461a      	mov	r2, r3
 8017438:	f241 5398 	movw	r3, #5528	@ 0x1598
 801743c:	fb02 f303 	mul.w	r3, r2, r3
 8017440:	4a48      	ldr	r2, [pc, #288]	@ (8017564 <Vendor_Stream_Task+0x4f8>)
 8017442:	4413      	add	r3, r2
 8017444:	627b      	str	r3, [r7, #36]	@ 0x24
        if(fa0->st != FB_READY){ vnd_prepare_pair(); }
 8017446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017448:	781b      	ldrb	r3, [r3, #0]
 801744a:	b2db      	uxtb	r3, r3
 801744c:	2b01      	cmp	r3, #1
 801744e:	d001      	beq.n	8017454 <Vendor_Stream_Task+0x3e8>
 8017450:	f7fe fe84 	bl	801615c <vnd_prepare_pair>
        if(!vnd_ep_busy){ (void)vnd_async_try_tx(); }
 8017454:	4b34      	ldr	r3, [pc, #208]	@ (8017528 <Vendor_Stream_Task+0x4bc>)
 8017456:	781b      	ldrb	r3, [r3, #0]
 8017458:	b2db      	uxtb	r3, r3
 801745a:	2b00      	cmp	r3, #0
 801745c:	d101      	bne.n	8017462 <Vendor_Stream_Task+0x3f6>
 801745e:	f7ff f8d9 	bl	8016614 <vnd_async_try_tx>
        if(vnd_tick_flag) vnd_tick_flag = 0;
 8017462:	4b3c      	ldr	r3, [pc, #240]	@ (8017554 <Vendor_Stream_Task+0x4e8>)
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	b2db      	uxtb	r3, r3
 8017468:	2b00      	cmp	r3, #0
 801746a:	d002      	beq.n	8017472 <Vendor_Stream_Task+0x406>
 801746c:	4b39      	ldr	r3, [pc, #228]	@ (8017554 <Vendor_Stream_Task+0x4e8>)
 801746e:	2200      	movs	r2, #0
 8017470:	701a      	strb	r2, [r3, #0]
        vnd_cdc_periodic_stats(now);
 8017472:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8017474:	f7fe f888 	bl	8015588 <vnd_cdc_periodic_stats>
        return;
 8017478:	f000 bc8b 	b.w	8017d92 <Vendor_Stream_Task+0xd26>
    }

    /* Упреждающая подготовка пары: когда TEST уже завершён и B не ожидается. */
    if(test_sent && !pending_B){
 801747c:	4b29      	ldr	r3, [pc, #164]	@ (8017524 <Vendor_Stream_Task+0x4b8>)
 801747e:	781b      	ldrb	r3, [r3, #0]
 8017480:	b2db      	uxtb	r3, r3
 8017482:	2b00      	cmp	r3, #0
 8017484:	d015      	beq.n	80174b2 <Vendor_Stream_Task+0x446>
 8017486:	4b30      	ldr	r3, [pc, #192]	@ (8017548 <Vendor_Stream_Task+0x4dc>)
 8017488:	781b      	ldrb	r3, [r3, #0]
 801748a:	b2db      	uxtb	r3, r3
 801748c:	2b00      	cmp	r3, #0
 801748e:	d110      	bne.n	80174b2 <Vendor_Stream_Task+0x446>
        ChanFrame *fa_chk = &g_frames[pair_send_idx][0];
 8017490:	4b35      	ldr	r3, [pc, #212]	@ (8017568 <Vendor_Stream_Task+0x4fc>)
 8017492:	781b      	ldrb	r3, [r3, #0]
 8017494:	461a      	mov	r2, r3
 8017496:	f241 5398 	movw	r3, #5528	@ 0x1598
 801749a:	fb02 f303 	mul.w	r3, r2, r3
 801749e:	4a31      	ldr	r2, [pc, #196]	@ (8017564 <Vendor_Stream_Task+0x4f8>)
 80174a0:	4413      	add	r3, r2
 80174a2:	677b      	str	r3, [r7, #116]	@ 0x74
        if(fa_chk->st != FB_READY){ vnd_prepare_pair(); }
 80174a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80174a6:	781b      	ldrb	r3, [r3, #0]
 80174a8:	b2db      	uxtb	r3, r3
 80174aa:	2b01      	cmp	r3, #1
 80174ac:	d001      	beq.n	80174b2 <Vendor_Stream_Task+0x446>
 80174ae:	f7fe fe55 	bl	801615c <vnd_prepare_pair>
    }

    /* Окно для GET_STATUS: отправлять STAT строго между парами, чтобы не разрывать A/B. */
    if(!vnd_ep_busy && !vnd_inflight && pending_status){
 80174b2:	4b1d      	ldr	r3, [pc, #116]	@ (8017528 <Vendor_Stream_Task+0x4bc>)
 80174b4:	781b      	ldrb	r3, [r3, #0]
 80174b6:	b2db      	uxtb	r3, r3
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d15d      	bne.n	8017578 <Vendor_Stream_Task+0x50c>
 80174bc:	4b2b      	ldr	r3, [pc, #172]	@ (801756c <Vendor_Stream_Task+0x500>)
 80174be:	781b      	ldrb	r3, [r3, #0]
 80174c0:	b2db      	uxtb	r3, r3
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d158      	bne.n	8017578 <Vendor_Stream_Task+0x50c>
 80174c6:	4b2a      	ldr	r3, [pc, #168]	@ (8017570 <Vendor_Stream_Task+0x504>)
 80174c8:	781b      	ldrb	r3, [r3, #0]
 80174ca:	b2db      	uxtb	r3, r3
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d053      	beq.n	8017578 <Vendor_Stream_Task+0x50c>
        if (test_sent && !pending_B && first_pair_done && sending_channel == 0xFF) {
 80174d0:	4b14      	ldr	r3, [pc, #80]	@ (8017524 <Vendor_Stream_Task+0x4b8>)
 80174d2:	781b      	ldrb	r3, [r3, #0]
 80174d4:	b2db      	uxtb	r3, r3
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d04e      	beq.n	8017578 <Vendor_Stream_Task+0x50c>
 80174da:	4b1b      	ldr	r3, [pc, #108]	@ (8017548 <Vendor_Stream_Task+0x4dc>)
 80174dc:	781b      	ldrb	r3, [r3, #0]
 80174de:	b2db      	uxtb	r3, r3
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d149      	bne.n	8017578 <Vendor_Stream_Task+0x50c>
 80174e4:	4b23      	ldr	r3, [pc, #140]	@ (8017574 <Vendor_Stream_Task+0x508>)
 80174e6:	781b      	ldrb	r3, [r3, #0]
 80174e8:	b2db      	uxtb	r3, r3
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d044      	beq.n	8017578 <Vendor_Stream_Task+0x50c>
 80174ee:	4b15      	ldr	r3, [pc, #84]	@ (8017544 <Vendor_Stream_Task+0x4d8>)
 80174f0:	781b      	ldrb	r3, [r3, #0]
 80174f2:	2bff      	cmp	r3, #255	@ 0xff
 80174f4:	d140      	bne.n	8017578 <Vendor_Stream_Task+0x50c>
            vnd_try_send_pending_status_from_task();
 80174f6:	f7fe fb01 	bl	8015afc <vnd_try_send_pending_status_from_task>
            if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 80174fa:	4b0b      	ldr	r3, [pc, #44]	@ (8017528 <Vendor_Stream_Task+0x4bc>)
 80174fc:	781b      	ldrb	r3, [r3, #0]
 80174fe:	b2db      	uxtb	r3, r3
 8017500:	2b00      	cmp	r3, #0
 8017502:	d039      	beq.n	8017578 <Vendor_Stream_Task+0x50c>
 8017504:	4b13      	ldr	r3, [pc, #76]	@ (8017554 <Vendor_Stream_Task+0x4e8>)
 8017506:	781b      	ldrb	r3, [r3, #0]
 8017508:	b2db      	uxtb	r3, r3
 801750a:	2b00      	cmp	r3, #0
 801750c:	f000 8440 	beq.w	8017d90 <Vendor_Stream_Task+0xd24>
 8017510:	4b10      	ldr	r3, [pc, #64]	@ (8017554 <Vendor_Stream_Task+0x4e8>)
 8017512:	2200      	movs	r2, #0
 8017514:	701a      	strb	r2, [r3, #0]
 8017516:	f000 bc3b 	b.w	8017d90 <Vendor_Stream_Task+0xd24>
 801751a:	bf00      	nop
 801751c:	2400dbbb 	.word	0x2400dbbb
 8017520:	2400dc1c 	.word	0x2400dc1c
 8017524:	2400dbba 	.word	0x2400dbba
 8017528:	2400dbb8 	.word	0x2400dbb8
 801752c:	2400003b 	.word	0x2400003b
 8017530:	2400dc50 	.word	0x2400dc50
 8017534:	2400dcf1 	.word	0x2400dcf1
 8017538:	2400dbac 	.word	0x2400dbac
 801753c:	24000044 	.word	0x24000044
 8017540:	2400dbae 	.word	0x2400dbae
 8017544:	24000050 	.word	0x24000050
 8017548:	24019ffa 	.word	0x24019ffa
 801754c:	24000048 	.word	0x24000048
 8017550:	2400dba8 	.word	0x2400dba8
 8017554:	2401a074 	.word	0x2401a074
 8017558:	2400003c 	.word	0x2400003c
 801755c:	2400dc51 	.word	0x2400dc51
 8017560:	24019ff8 	.word	0x24019ff8
 8017564:	2400f338 	.word	0x2400f338
 8017568:	24019ff9 	.word	0x24019ff9
 801756c:	2400dbb9 	.word	0x2400dbb9
 8017570:	2400dcf0 	.word	0x2400dcf0
 8017574:	2400dc40 	.word	0x2400dc40
        }
    }

    if(vnd_tx_kick) vnd_tx_kick = 0;
 8017578:	4ba4      	ldr	r3, [pc, #656]	@ (801780c <Vendor_Stream_Task+0x7a0>)
 801757a:	781b      	ldrb	r3, [r3, #0]
 801757c:	b2db      	uxtb	r3, r3
 801757e:	2b00      	cmp	r3, #0
 8017580:	d002      	beq.n	8017588 <Vendor_Stream_Task+0x51c>
 8017582:	4ba2      	ldr	r3, [pc, #648]	@ (801780c <Vendor_Stream_Task+0x7a0>)
 8017584:	2200      	movs	r2, #0
 8017586:	701a      	strb	r2, [r3, #0]
    /* Разрешаем подготовку следующей пары даже если EP занят (параллельная заполнение буферов) */
    /* if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; } */

    /* Если TEST уже логически завершён, но его мета застряла в FIFO (нет TxCplt) —
       через ~60 мс превращаем её в служебную, чтобы не блокировать отправку A. */
    vnd_force_complete_test_meta_if_stale();
 8017588:	f7fe fa84 	bl	8015a94 <vnd_force_complete_test_meta_if_stale>

    static uint8_t first_pair_logged = 0; /* диагностический лог первой пары */

    static uint8_t first_bq_logged = 0; /* однократный лог первой постановки B */
    if(pending_B){
 801758c:	4ba0      	ldr	r3, [pc, #640]	@ (8017810 <Vendor_Stream_Task+0x7a4>)
 801758e:	781b      	ldrb	r3, [r3, #0]
 8017590:	b2db      	uxtb	r3, r3
 8017592:	2b00      	cmp	r3, #0
 8017594:	f000 8278 	beq.w	8017a88 <Vendor_Stream_Task+0xa1c>
        /* В A-only режиме не ждём B, сразу продолжим к следующему A */
        if(vnd_ch_mode == 0){
 8017598:	4b9e      	ldr	r3, [pc, #632]	@ (8017814 <Vendor_Stream_Task+0x7a8>)
 801759a:	781b      	ldrb	r3, [r3, #0]
 801759c:	b2db      	uxtb	r3, r3
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d168      	bne.n	8017674 <Vendor_Stream_Task+0x608>
            ChanFrame *f0 = &g_frames[pair_send_idx][0];
 80175a2:	4b9d      	ldr	r3, [pc, #628]	@ (8017818 <Vendor_Stream_Task+0x7ac>)
 80175a4:	781b      	ldrb	r3, [r3, #0]
 80175a6:	461a      	mov	r2, r3
 80175a8:	f241 5398 	movw	r3, #5528	@ 0x1598
 80175ac:	fb02 f303 	mul.w	r3, r2, r3
 80175b0:	4a9a      	ldr	r2, [pc, #616]	@ (801781c <Vendor_Stream_Task+0x7b0>)
 80175b2:	4413      	add	r3, r2
 80175b4:	66bb      	str	r3, [r7, #104]	@ 0x68
            ChanFrame *f1 = &g_frames[pair_send_idx][1];
 80175b6:	4b98      	ldr	r3, [pc, #608]	@ (8017818 <Vendor_Stream_Task+0x7ac>)
 80175b8:	781b      	ldrb	r3, [r3, #0]
 80175ba:	461a      	mov	r2, r3
 80175bc:	f241 5398 	movw	r3, #5528	@ 0x1598
 80175c0:	fb02 f303 	mul.w	r3, r2, r3
 80175c4:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80175c8:	4a94      	ldr	r2, [pc, #592]	@ (801781c <Vendor_Stream_Task+0x7b0>)
 80175ca:	4413      	add	r3, r2
 80175cc:	667b      	str	r3, [r7, #100]	@ 0x64
            f0->st = f1->st = FB_FILL;
 80175ce:	2100      	movs	r1, #0
 80175d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80175d2:	460a      	mov	r2, r1
 80175d4:	701a      	strb	r2, [r3, #0]
 80175d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80175d8:	460a      	mov	r2, r1
 80175da:	701a      	strb	r2, [r3, #0]
            pair_send_idx = (uint8_t)((pair_send_idx + 1u) % VND_PAIR_BUFFERS);
 80175dc:	4b8e      	ldr	r3, [pc, #568]	@ (8017818 <Vendor_Stream_Task+0x7ac>)
 80175de:	781b      	ldrb	r3, [r3, #0]
 80175e0:	3301      	adds	r3, #1
 80175e2:	b2db      	uxtb	r3, r3
 80175e4:	f003 0307 	and.w	r3, r3, #7
 80175e8:	b2da      	uxtb	r2, r3
 80175ea:	4b8b      	ldr	r3, [pc, #556]	@ (8017818 <Vendor_Stream_Task+0x7ac>)
 80175ec:	701a      	strb	r2, [r3, #0]
            stream_seq++; dbg_produced_seq++;
 80175ee:	4b8c      	ldr	r3, [pc, #560]	@ (8017820 <Vendor_Stream_Task+0x7b4>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	3301      	adds	r3, #1
 80175f4:	4a8a      	ldr	r2, [pc, #552]	@ (8017820 <Vendor_Stream_Task+0x7b4>)
 80175f6:	6013      	str	r3, [r2, #0]
 80175f8:	4b8a      	ldr	r3, [pc, #552]	@ (8017824 <Vendor_Stream_Task+0x7b8>)
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	3301      	adds	r3, #1
 80175fe:	4a89      	ldr	r2, [pc, #548]	@ (8017824 <Vendor_Stream_Task+0x7b8>)
 8017600:	6013      	str	r3, [r2, #0]
            pending_B = 0; pending_B_since_ms = 0; sending_channel = 0xFF;
 8017602:	4b83      	ldr	r3, [pc, #524]	@ (8017810 <Vendor_Stream_Task+0x7a4>)
 8017604:	2200      	movs	r2, #0
 8017606:	701a      	strb	r2, [r3, #0]
 8017608:	4b87      	ldr	r3, [pc, #540]	@ (8017828 <Vendor_Stream_Task+0x7bc>)
 801760a:	2200      	movs	r2, #0
 801760c:	601a      	str	r2, [r3, #0]
 801760e:	4b87      	ldr	r3, [pc, #540]	@ (801782c <Vendor_Stream_Task+0x7c0>)
 8017610:	22ff      	movs	r2, #255	@ 0xff
 8017612:	701a      	strb	r2, [r3, #0]
            /* Попробуем запланировать немедленную отправку следующего A */
            ChanFrame *fA2 = &g_frames[pair_send_idx][0];
 8017614:	4b80      	ldr	r3, [pc, #512]	@ (8017818 <Vendor_Stream_Task+0x7ac>)
 8017616:	781b      	ldrb	r3, [r3, #0]
 8017618:	461a      	mov	r2, r3
 801761a:	f241 5398 	movw	r3, #5528	@ 0x1598
 801761e:	fb02 f303 	mul.w	r3, r2, r3
 8017622:	4a7e      	ldr	r2, [pc, #504]	@ (801781c <Vendor_Stream_Task+0x7b0>)
 8017624:	4413      	add	r3, r2
 8017626:	663b      	str	r3, [r7, #96]	@ 0x60
            if(fA2->st != FB_READY){ vnd_prepare_pair(); }
 8017628:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801762a:	781b      	ldrb	r3, [r3, #0]
 801762c:	b2db      	uxtb	r3, r3
 801762e:	2b01      	cmp	r3, #1
 8017630:	d001      	beq.n	8017636 <Vendor_Stream_Task+0x5ca>
 8017632:	f7fe fd93 	bl	801615c <vnd_prepare_pair>
            if(fA2->st == FB_READY && !vnd_ep_busy){
 8017636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017638:	781b      	ldrb	r3, [r3, #0]
 801763a:	b2db      	uxtb	r3, r3
 801763c:	2b01      	cmp	r3, #1
 801763e:	d119      	bne.n	8017674 <Vendor_Stream_Task+0x608>
 8017640:	4b7b      	ldr	r3, [pc, #492]	@ (8017830 <Vendor_Stream_Task+0x7c4>)
 8017642:	781b      	ldrb	r3, [r3, #0]
 8017644:	b2db      	uxtb	r3, r3
 8017646:	2b00      	cmp	r3, #0
 8017648:	d114      	bne.n	8017674 <Vendor_Stream_Task+0x608>
                if (vnd_transmit_frame(fA2->buf, fA2->frame_size, 0, 0, "ADC0-IMM-AONLY") == USBD_OK){
 801764a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801764c:	f103 000c 	add.w	r0, r3, #12
 8017650:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017652:	88d9      	ldrh	r1, [r3, #6]
 8017654:	4b77      	ldr	r3, [pc, #476]	@ (8017834 <Vendor_Stream_Task+0x7c8>)
 8017656:	9300      	str	r3, [sp, #0]
 8017658:	2300      	movs	r3, #0
 801765a:	2200      	movs	r2, #0
 801765c:	f7ff f902 	bl	8016864 <vnd_transmit_frame>
 8017660:	4603      	mov	r3, r0
 8017662:	2b00      	cmp	r3, #0
 8017664:	d106      	bne.n	8017674 <Vendor_Stream_Task+0x608>
                    fA2->st = FB_SENDING; sending_channel = 0; return; }
 8017666:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017668:	2202      	movs	r2, #2
 801766a:	701a      	strb	r2, [r3, #0]
 801766c:	4b6f      	ldr	r3, [pc, #444]	@ (801782c <Vendor_Stream_Task+0x7c0>)
 801766e:	2200      	movs	r2, #0
 8017670:	701a      	strb	r2, [r3, #0]
 8017672:	e38e      	b.n	8017d92 <Vendor_Stream_Task+0xd26>
            }
            /* если не получилось — просто продолжим общий цикл */
        }
        /* Гарантируем, что текущая пара действительно подготовлена: если A ещё не готов (FB_FILL) — соберём пару сейчас. */
        ChanFrame *fA_pre = &g_frames[pair_send_idx][0];
 8017674:	4b68      	ldr	r3, [pc, #416]	@ (8017818 <Vendor_Stream_Task+0x7ac>)
 8017676:	781b      	ldrb	r3, [r3, #0]
 8017678:	461a      	mov	r2, r3
 801767a:	f241 5398 	movw	r3, #5528	@ 0x1598
 801767e:	fb02 f303 	mul.w	r3, r2, r3
 8017682:	4a66      	ldr	r2, [pc, #408]	@ (801781c <Vendor_Stream_Task+0x7b0>)
 8017684:	4413      	add	r3, r2
 8017686:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if(fA_pre->st == FB_FILL && !vnd_ep_busy){ vnd_prepare_pair(); }
 8017688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801768a:	781b      	ldrb	r3, [r3, #0]
 801768c:	b2db      	uxtb	r3, r3
 801768e:	2b00      	cmp	r3, #0
 8017690:	d106      	bne.n	80176a0 <Vendor_Stream_Task+0x634>
 8017692:	4b67      	ldr	r3, [pc, #412]	@ (8017830 <Vendor_Stream_Task+0x7c4>)
 8017694:	781b      	ldrb	r3, [r3, #0]
 8017696:	b2db      	uxtb	r3, r3
 8017698:	2b00      	cmp	r3, #0
 801769a:	d101      	bne.n	80176a0 <Vendor_Stream_Task+0x634>
 801769c:	f7fe fd5e 	bl	801615c <vnd_prepare_pair>
        ChanFrame *fB = &g_frames[pair_send_idx][1];
 80176a0:	4b5d      	ldr	r3, [pc, #372]	@ (8017818 <Vendor_Stream_Task+0x7ac>)
 80176a2:	781b      	ldrb	r3, [r3, #0]
 80176a4:	461a      	mov	r2, r3
 80176a6:	f241 5398 	movw	r3, #5528	@ 0x1598
 80176aa:	fb02 f303 	mul.w	r3, r2, r3
 80176ae:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80176b2:	4a5a      	ldr	r2, [pc, #360]	@ (801781c <Vendor_Stream_Task+0x7b0>)
 80176b4:	4413      	add	r3, r2
 80176b6:	65bb      	str	r3, [r7, #88]	@ 0x58
        if(fB->st == FB_READY){
 80176b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176ba:	781b      	ldrb	r3, [r3, #0]
 80176bc:	b2db      	uxtb	r3, r3
 80176be:	2b01      	cmp	r3, #1
 80176c0:	d149      	bne.n	8017756 <Vendor_Stream_Task+0x6ea>
            /* Перед отправкой B корректируем seq, если он отличается от ожидаемого stream_seq */
            if(fB->frame_size >= VND_FRAME_HDR_SIZE){
 80176c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176c4:	88db      	ldrh	r3, [r3, #6]
 80176c6:	2b1f      	cmp	r3, #31
 80176c8:	d917      	bls.n	80176fa <Vendor_Stream_Task+0x68e>
                vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)fB->buf;
 80176ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176cc:	330c      	adds	r3, #12
 80176ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
                if(hb->magic == 0xA55A && hb->seq != stream_seq){
 80176d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80176d2:	881b      	ldrh	r3, [r3, #0]
 80176d4:	b29b      	uxth	r3, r3
 80176d6:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80176da:	4293      	cmp	r3, r2
 80176dc:	d10d      	bne.n	80176fa <Vendor_Stream_Task+0x68e>
 80176de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80176e0:	685a      	ldr	r2, [r3, #4]
 80176e2:	4b4f      	ldr	r3, [pc, #316]	@ (8017820 <Vendor_Stream_Task+0x7b4>)
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	429a      	cmp	r2, r3
 80176e8:	d007      	beq.n	80176fa <Vendor_Stream_Task+0x68e>
                    VND_LOG("PATCH_B_SEQ hdr=%lu -> %lu", (unsigned long)hb->seq, (unsigned long)stream_seq);
                    hb->seq = stream_seq; fB->seq = stream_seq;
 80176ea:	4b4d      	ldr	r3, [pc, #308]	@ (8017820 <Vendor_Stream_Task+0x7b4>)
 80176ec:	681a      	ldr	r2, [r3, #0]
 80176ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80176f0:	605a      	str	r2, [r3, #4]
 80176f2:	4b4b      	ldr	r3, [pc, #300]	@ (8017820 <Vendor_Stream_Task+0x7b4>)
 80176f4:	681a      	ldr	r2, [r3, #0]
 80176f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176f8:	609a      	str	r2, [r3, #8]
                }
            }
            USBD_StatusTypeDef rcB = vnd_transmit_frame(fB->buf, fB->frame_size, 0, 0, "ADC1");
 80176fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176fc:	f103 000c 	add.w	r0, r3, #12
 8017700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017702:	88d9      	ldrh	r1, [r3, #6]
 8017704:	4b4c      	ldr	r3, [pc, #304]	@ (8017838 <Vendor_Stream_Task+0x7cc>)
 8017706:	9300      	str	r3, [sp, #0]
 8017708:	2300      	movs	r3, #0
 801770a:	2200      	movs	r2, #0
 801770c:	f7ff f8aa 	bl	8016864 <vnd_transmit_frame>
 8017710:	4603      	mov	r3, r0
 8017712:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            if (rcB == USBD_OK) {
 8017716:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801771a:	2b00      	cmp	r3, #0
 801771c:	d10d      	bne.n	801773a <Vendor_Stream_Task+0x6ce>
                if(!first_bq_logged){ first_bq_logged = 1; VND_LOG("FIRST_B queued size=%u", (unsigned)fB->frame_size); }
 801771e:	4b47      	ldr	r3, [pc, #284]	@ (801783c <Vendor_Stream_Task+0x7d0>)
 8017720:	781b      	ldrb	r3, [r3, #0]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d102      	bne.n	801772c <Vendor_Stream_Task+0x6c0>
 8017726:	4b45      	ldr	r3, [pc, #276]	@ (801783c <Vendor_Stream_Task+0x7d0>)
 8017728:	2201      	movs	r2, #1
 801772a:	701a      	strb	r2, [r3, #0]
                fB->st = FB_SENDING; sending_channel = 1; return;
 801772c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801772e:	2202      	movs	r2, #2
 8017730:	701a      	strb	r2, [r3, #0]
 8017732:	4b3e      	ldr	r3, [pc, #248]	@ (801782c <Vendor_Stream_Task+0x7c0>)
 8017734:	2201      	movs	r2, #1
 8017736:	701a      	strb	r2, [r3, #0]
 8017738:	e32b      	b.n	8017d92 <Vendor_Stream_Task+0xd26>
            } else if (rcB == USBD_BUSY) {
 801773a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801773e:	2b01      	cmp	r3, #1
 8017740:	f040 8112 	bne.w	8017968 <Vendor_Stream_Task+0x8fc>
                static uint32_t b_busy_retry = 0; b_busy_retry++;
 8017744:	4b3e      	ldr	r3, [pc, #248]	@ (8017840 <Vendor_Stream_Task+0x7d4>)
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	3301      	adds	r3, #1
 801774a:	4a3d      	ldr	r2, [pc, #244]	@ (8017840 <Vendor_Stream_Task+0x7d4>)
 801774c:	6013      	str	r3, [r2, #0]
                if (b_busy_retry == 1 || (b_busy_retry % 10) == 0) {
 801774e:	4b3c      	ldr	r3, [pc, #240]	@ (8017840 <Vendor_Stream_Task+0x7d4>)
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	2b01      	cmp	r3, #1
 8017754:	e108      	b.n	8017968 <Vendor_Stream_Task+0x8fc>
            }
        } else {
            /* Диагностируем, почему ждём B: выводим периодически и в CDC (1 Гц) текущее состояние */
            static uint32_t last_log_ms = 0;
            static uint32_t last_cdc_ms = 0;
            uint32_t now_ms = HAL_GetTick();
 8017756:	f7ed fc09 	bl	8004f6c <HAL_GetTick>
 801775a:	6578      	str	r0, [r7, #84]	@ 0x54
            if(now_ms - last_log_ms > 200){
 801775c:	4b39      	ldr	r3, [pc, #228]	@ (8017844 <Vendor_Stream_Task+0x7d8>)
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017762:	1ad3      	subs	r3, r2, r3
 8017764:	2bc8      	cmp	r3, #200	@ 0xc8
 8017766:	d902      	bls.n	801776e <Vendor_Stream_Task+0x702>
                VND_LOG("WAIT_B st=%u pair_send=%u fill_idx=%u seq=%lu cur_seq=%lu", (unsigned)fB->st, (unsigned)pair_send_idx, (unsigned)pair_fill_idx, (unsigned long)fB->seq, (unsigned long)stream_seq);
                last_log_ms = now_ms;
 8017768:	4a36      	ldr	r2, [pc, #216]	@ (8017844 <Vendor_Stream_Task+0x7d8>)
 801776a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801776c:	6013      	str	r3, [r2, #0]
            }
            if(now_ms - last_cdc_ms > 1000){
 801776e:	4b36      	ldr	r3, [pc, #216]	@ (8017848 <Vendor_Stream_Task+0x7dc>)
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017774:	1ad3      	subs	r3, r2, r3
 8017776:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801777a:	f240 8094 	bls.w	80178a6 <Vendor_Stream_Task+0x83a>
                extern uint8_t USBD_VND_TxIsBusy(void);
                uint8_t ll_busy = USBD_VND_TxIsBusy();
 801777e:	f002 f841 	bl	8019804 <USBD_VND_TxIsBusy>
 8017782:	4603      	mov	r3, r0
 8017784:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                const char *stA = (g_frames[pair_send_idx][0].st==FB_READY?"READY":(g_frames[pair_send_idx][0].st==FB_SENDING?"SENDING":"FILL"));
 8017788:	4b23      	ldr	r3, [pc, #140]	@ (8017818 <Vendor_Stream_Task+0x7ac>)
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	4619      	mov	r1, r3
 801778e:	4a23      	ldr	r2, [pc, #140]	@ (801781c <Vendor_Stream_Task+0x7b0>)
 8017790:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017794:	fb01 f303 	mul.w	r3, r1, r3
 8017798:	4413      	add	r3, r2
 801779a:	781b      	ldrb	r3, [r3, #0]
 801779c:	b2db      	uxtb	r3, r3
 801779e:	2b01      	cmp	r3, #1
 80177a0:	d010      	beq.n	80177c4 <Vendor_Stream_Task+0x758>
 80177a2:	4b1d      	ldr	r3, [pc, #116]	@ (8017818 <Vendor_Stream_Task+0x7ac>)
 80177a4:	781b      	ldrb	r3, [r3, #0]
 80177a6:	4619      	mov	r1, r3
 80177a8:	4a1c      	ldr	r2, [pc, #112]	@ (801781c <Vendor_Stream_Task+0x7b0>)
 80177aa:	f241 5398 	movw	r3, #5528	@ 0x1598
 80177ae:	fb01 f303 	mul.w	r3, r1, r3
 80177b2:	4413      	add	r3, r2
 80177b4:	781b      	ldrb	r3, [r3, #0]
 80177b6:	b2db      	uxtb	r3, r3
 80177b8:	2b02      	cmp	r3, #2
 80177ba:	d101      	bne.n	80177c0 <Vendor_Stream_Task+0x754>
 80177bc:	4b23      	ldr	r3, [pc, #140]	@ (801784c <Vendor_Stream_Task+0x7e0>)
 80177be:	e002      	b.n	80177c6 <Vendor_Stream_Task+0x75a>
 80177c0:	4b23      	ldr	r3, [pc, #140]	@ (8017850 <Vendor_Stream_Task+0x7e4>)
 80177c2:	e000      	b.n	80177c6 <Vendor_Stream_Task+0x75a>
 80177c4:	4b23      	ldr	r3, [pc, #140]	@ (8017854 <Vendor_Stream_Task+0x7e8>)
 80177c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                const char *stB = (g_frames[pair_send_idx][1].st==FB_READY?"READY":(g_frames[pair_send_idx][1].st==FB_SENDING?"SENDING":"FILL"));
 80177c8:	4b13      	ldr	r3, [pc, #76]	@ (8017818 <Vendor_Stream_Task+0x7ac>)
 80177ca:	781b      	ldrb	r3, [r3, #0]
 80177cc:	4619      	mov	r1, r3
 80177ce:	4a13      	ldr	r2, [pc, #76]	@ (801781c <Vendor_Stream_Task+0x7b0>)
 80177d0:	f241 5398 	movw	r3, #5528	@ 0x1598
 80177d4:	fb01 f303 	mul.w	r3, r1, r3
 80177d8:	4413      	add	r3, r2
 80177da:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80177de:	781b      	ldrb	r3, [r3, #0]
 80177e0:	b2db      	uxtb	r3, r3
 80177e2:	2b01      	cmp	r3, #1
 80177e4:	d038      	beq.n	8017858 <Vendor_Stream_Task+0x7ec>
 80177e6:	4b0c      	ldr	r3, [pc, #48]	@ (8017818 <Vendor_Stream_Task+0x7ac>)
 80177e8:	781b      	ldrb	r3, [r3, #0]
 80177ea:	4619      	mov	r1, r3
 80177ec:	4a0b      	ldr	r2, [pc, #44]	@ (801781c <Vendor_Stream_Task+0x7b0>)
 80177ee:	f241 5398 	movw	r3, #5528	@ 0x1598
 80177f2:	fb01 f303 	mul.w	r3, r1, r3
 80177f6:	4413      	add	r3, r2
 80177f8:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80177fc:	781b      	ldrb	r3, [r3, #0]
 80177fe:	b2db      	uxtb	r3, r3
 8017800:	2b02      	cmp	r3, #2
 8017802:	d101      	bne.n	8017808 <Vendor_Stream_Task+0x79c>
 8017804:	4b11      	ldr	r3, [pc, #68]	@ (801784c <Vendor_Stream_Task+0x7e0>)
 8017806:	e028      	b.n	801785a <Vendor_Stream_Task+0x7ee>
 8017808:	4b11      	ldr	r3, [pc, #68]	@ (8017850 <Vendor_Stream_Task+0x7e4>)
 801780a:	e026      	b.n	801785a <Vendor_Stream_Task+0x7ee>
 801780c:	2400dc50 	.word	0x2400dc50
 8017810:	24019ffa 	.word	0x24019ffa
 8017814:	24000040 	.word	0x24000040
 8017818:	24019ff9 	.word	0x24019ff9
 801781c:	2400f338 	.word	0x2400f338
 8017820:	2400dba8 	.word	0x2400dba8
 8017824:	2400dbbc 	.word	0x2400dbbc
 8017828:	24019ffc 	.word	0x24019ffc
 801782c:	24000050 	.word	0x24000050
 8017830:	2400dbb8 	.word	0x2400dbb8
 8017834:	0801d0c0 	.word	0x0801d0c0
 8017838:	0801d090 	.word	0x0801d090
 801783c:	2401a075 	.word	0x2401a075
 8017840:	2401a078 	.word	0x2401a078
 8017844:	2401a07c 	.word	0x2401a07c
 8017848:	2401a080 	.word	0x2401a080
 801784c:	0801d0d0 	.word	0x0801d0d0
 8017850:	0801d0d8 	.word	0x0801d0d8
 8017854:	0801d0e0 	.word	0x0801d0e0
 8017858:	4b7b      	ldr	r3, [pc, #492]	@ (8017a48 <Vendor_Stream_Task+0x9dc>)
 801785a:	64bb      	str	r3, [r7, #72]	@ 0x48
                uint32_t age_ms = pending_B_since_ms? (now_ms - pending_B_since_ms) : 0;
 801785c:	4b7b      	ldr	r3, [pc, #492]	@ (8017a4c <Vendor_Stream_Task+0x9e0>)
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d004      	beq.n	801786e <Vendor_Stream_Task+0x802>
 8017864:	4b79      	ldr	r3, [pc, #484]	@ (8017a4c <Vendor_Stream_Task+0x9e0>)
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801786a:	1ad3      	subs	r3, r2, r3
 801786c:	e000      	b.n	8017870 <Vendor_Stream_Task+0x804>
 801786e:	2300      	movs	r3, #0
 8017870:	647b      	str	r3, [r7, #68]	@ 0x44
                cdc_logf("DBG WAIT_B age=%lums A=%s B=%s ep_busy=%u ll_busy=%u metaDepth=%u lastTX=%u", (unsigned long)age_ms, stA, stB, (unsigned)vnd_ep_busy, (unsigned)ll_busy, (unsigned)vnd_tx_meta_depth(), (unsigned)vnd_last_tx_len);
 8017872:	4b77      	ldr	r3, [pc, #476]	@ (8017a50 <Vendor_Stream_Task+0x9e4>)
 8017874:	781b      	ldrb	r3, [r3, #0]
 8017876:	b2db      	uxtb	r3, r3
 8017878:	461d      	mov	r5, r3
 801787a:	f897 4053 	ldrb.w	r4, [r7, #83]	@ 0x53
 801787e:	f7fd fedb 	bl	8015638 <vnd_tx_meta_depth>
 8017882:	4603      	mov	r3, r0
 8017884:	461a      	mov	r2, r3
 8017886:	4b73      	ldr	r3, [pc, #460]	@ (8017a54 <Vendor_Stream_Task+0x9e8>)
 8017888:	881b      	ldrh	r3, [r3, #0]
 801788a:	b29b      	uxth	r3, r3
 801788c:	9303      	str	r3, [sp, #12]
 801788e:	9202      	str	r2, [sp, #8]
 8017890:	9401      	str	r4, [sp, #4]
 8017892:	9500      	str	r5, [sp, #0]
 8017894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017896:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017898:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801789a:	486f      	ldr	r0, [pc, #444]	@ (8017a58 <Vendor_Stream_Task+0x9ec>)
 801789c:	f7fd fe42 	bl	8015524 <cdc_logf>
                last_cdc_ms = now_ms;
 80178a0:	4a6e      	ldr	r2, [pc, #440]	@ (8017a5c <Vendor_Stream_Task+0x9f0>)
 80178a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178a4:	6013      	str	r3, [r2, #0]
            }
            /* Watchdog B: если B уже в полёте и нет TxCplt слишком долго — форсируем завершение пары */
            if(fB->st == FB_SENDING && (now_ms - vnd_last_tx_start_ms) > 150){
 80178a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80178a8:	781b      	ldrb	r3, [r3, #0]
 80178aa:	b2db      	uxtb	r3, r3
 80178ac:	2b02      	cmp	r3, #2
 80178ae:	d15b      	bne.n	8017968 <Vendor_Stream_Task+0x8fc>
 80178b0:	4b6b      	ldr	r3, [pc, #428]	@ (8017a60 <Vendor_Stream_Task+0x9f4>)
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80178b6:	1ad3      	subs	r3, r2, r3
 80178b8:	2b96      	cmp	r3, #150	@ 0x96
 80178ba:	d955      	bls.n	8017968 <Vendor_Stream_Task+0x8fc>
                /* Не закрываем пару! Снимаем busy, нейтрализуем старую мета и переотправляем B */
                extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 80178bc:	f001 ffc6 	bl	801984c <USBD_VND_ForceTxIdle>
                vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0;
 80178c0:	4b63      	ldr	r3, [pc, #396]	@ (8017a50 <Vendor_Stream_Task+0x9e4>)
 80178c2:	2200      	movs	r2, #0
 80178c4:	701a      	strb	r2, [r3, #0]
 80178c6:	4b67      	ldr	r3, [pc, #412]	@ (8017a64 <Vendor_Stream_Task+0x9f8>)
 80178c8:	2201      	movs	r2, #1
 80178ca:	701a      	strb	r2, [r3, #0]
 80178cc:	4b66      	ldr	r3, [pc, #408]	@ (8017a68 <Vendor_Stream_Task+0x9fc>)
 80178ce:	2200      	movs	r2, #0
 80178d0:	701a      	strb	r2, [r3, #0]
                vnd_meta_neutralize(0x02, g_frames[pair_send_idx][1].seq);
 80178d2:	4b66      	ldr	r3, [pc, #408]	@ (8017a6c <Vendor_Stream_Task+0xa00>)
 80178d4:	781b      	ldrb	r3, [r3, #0]
 80178d6:	4619      	mov	r1, r3
 80178d8:	4a65      	ldr	r2, [pc, #404]	@ (8017a70 <Vendor_Stream_Task+0xa04>)
 80178da:	f241 5398 	movw	r3, #5528	@ 0x1598
 80178de:	fb01 f303 	mul.w	r3, r1, r3
 80178e2:	4413      	add	r3, r2
 80178e4:	f603 23d4 	addw	r3, r3, #2772	@ 0xad4
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	4619      	mov	r1, r3
 80178ec:	2002      	movs	r0, #2
 80178ee:	f7fd ffa7 	bl	8015840 <vnd_meta_neutralize>
                g_frames[pair_send_idx][1].st = FB_READY; sending_channel = 0xFF;
 80178f2:	4b5e      	ldr	r3, [pc, #376]	@ (8017a6c <Vendor_Stream_Task+0xa00>)
 80178f4:	781b      	ldrb	r3, [r3, #0]
 80178f6:	4619      	mov	r1, r3
 80178f8:	4a5d      	ldr	r2, [pc, #372]	@ (8017a70 <Vendor_Stream_Task+0xa04>)
 80178fa:	f241 5398 	movw	r3, #5528	@ 0x1598
 80178fe:	fb01 f303 	mul.w	r3, r1, r3
 8017902:	4413      	add	r3, r2
 8017904:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8017908:	2201      	movs	r2, #1
 801790a:	701a      	strb	r2, [r3, #0]
 801790c:	4b59      	ldr	r3, [pc, #356]	@ (8017a74 <Vendor_Stream_Task+0xa08>)
 801790e:	22ff      	movs	r2, #255	@ 0xff
 8017910:	701a      	strb	r2, [r3, #0]
                VND_LOG("B_TXCPLT_WD (>150ms) -> retry B seq=%lu", (unsigned long)g_frames[pair_send_idx][1].seq);
                /* Попробуем сразу переотправить */
                ChanFrame *fB2 = &g_frames[pair_send_idx][1];
 8017912:	4b56      	ldr	r3, [pc, #344]	@ (8017a6c <Vendor_Stream_Task+0xa00>)
 8017914:	781b      	ldrb	r3, [r3, #0]
 8017916:	461a      	mov	r2, r3
 8017918:	f241 5398 	movw	r3, #5528	@ 0x1598
 801791c:	fb02 f303 	mul.w	r3, r2, r3
 8017920:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8017924:	4a52      	ldr	r2, [pc, #328]	@ (8017a70 <Vendor_Stream_Task+0xa04>)
 8017926:	4413      	add	r3, r2
 8017928:	643b      	str	r3, [r7, #64]	@ 0x40
                if(!vnd_ep_busy && fB2->st == FB_READY){
 801792a:	4b49      	ldr	r3, [pc, #292]	@ (8017a50 <Vendor_Stream_Task+0x9e4>)
 801792c:	781b      	ldrb	r3, [r3, #0]
 801792e:	b2db      	uxtb	r3, r3
 8017930:	2b00      	cmp	r3, #0
 8017932:	d119      	bne.n	8017968 <Vendor_Stream_Task+0x8fc>
 8017934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017936:	781b      	ldrb	r3, [r3, #0]
 8017938:	b2db      	uxtb	r3, r3
 801793a:	2b01      	cmp	r3, #1
 801793c:	d114      	bne.n	8017968 <Vendor_Stream_Task+0x8fc>
                    if(vnd_transmit_frame(fB2->buf, fB2->frame_size, 0, 0, "ADC1-RETRY") == USBD_OK){ fB2->st = FB_SENDING; sending_channel = 1; return; }
 801793e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017940:	f103 000c 	add.w	r0, r3, #12
 8017944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017946:	88d9      	ldrh	r1, [r3, #6]
 8017948:	4b4b      	ldr	r3, [pc, #300]	@ (8017a78 <Vendor_Stream_Task+0xa0c>)
 801794a:	9300      	str	r3, [sp, #0]
 801794c:	2300      	movs	r3, #0
 801794e:	2200      	movs	r2, #0
 8017950:	f7fe ff88 	bl	8016864 <vnd_transmit_frame>
 8017954:	4603      	mov	r3, r0
 8017956:	2b00      	cmp	r3, #0
 8017958:	d106      	bne.n	8017968 <Vendor_Stream_Task+0x8fc>
 801795a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801795c:	2202      	movs	r2, #2
 801795e:	701a      	strb	r2, [r3, #0]
 8017960:	4b44      	ldr	r3, [pc, #272]	@ (8017a74 <Vendor_Stream_Task+0xa08>)
 8017962:	2201      	movs	r2, #1
 8017964:	701a      	strb	r2, [r3, #0]
 8017966:	e214      	b.n	8017d92 <Vendor_Stream_Task+0xd26>
            }
            /* Не синтезируем B: ждём реальные данные, пока EP свободен */
        }
        /* Дополнительный watchdog зависшего pending_B, даже если fB->st перешёл из READY в FILL из-за сброса */
        do {
            uint32_t now_ms2 = HAL_GetTick();
 8017968:	f7ed fb00 	bl	8004f6c <HAL_GetTick>
 801796c:	6378      	str	r0, [r7, #52]	@ 0x34
            if(!vnd_ep_busy && sending_channel == 0xFF && (now_ms2 - vnd_last_txcplt_ms) > 40){
 801796e:	4b38      	ldr	r3, [pc, #224]	@ (8017a50 <Vendor_Stream_Task+0x9e4>)
 8017970:	781b      	ldrb	r3, [r3, #0]
 8017972:	b2db      	uxtb	r3, r3
 8017974:	2b00      	cmp	r3, #0
 8017976:	f040 812c 	bne.w	8017bd2 <Vendor_Stream_Task+0xb66>
 801797a:	4b3e      	ldr	r3, [pc, #248]	@ (8017a74 <Vendor_Stream_Task+0xa08>)
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	2bff      	cmp	r3, #255	@ 0xff
 8017980:	f040 8127 	bne.w	8017bd2 <Vendor_Stream_Task+0xb66>
 8017984:	4b3d      	ldr	r3, [pc, #244]	@ (8017a7c <Vendor_Stream_Task+0xa10>)
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801798a:	1ad3      	subs	r3, r2, r3
 801798c:	2b28      	cmp	r3, #40	@ 0x28
 801798e:	f240 8120 	bls.w	8017bd2 <Vendor_Stream_Task+0xb66>
                ChanFrame *fBchk = &g_frames[pair_send_idx][1];
 8017992:	4b36      	ldr	r3, [pc, #216]	@ (8017a6c <Vendor_Stream_Task+0xa00>)
 8017994:	781b      	ldrb	r3, [r3, #0]
 8017996:	461a      	mov	r2, r3
 8017998:	f241 5398 	movw	r3, #5528	@ 0x1598
 801799c:	fb02 f303 	mul.w	r3, r2, r3
 80179a0:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80179a4:	4a32      	ldr	r2, [pc, #200]	@ (8017a70 <Vendor_Stream_Task+0xa04>)
 80179a6:	4413      	add	r3, r2
 80179a8:	633b      	str	r3, [r7, #48]	@ 0x30
                ChanFrame *fAchk = &g_frames[pair_send_idx][0];
 80179aa:	4b30      	ldr	r3, [pc, #192]	@ (8017a6c <Vendor_Stream_Task+0xa00>)
 80179ac:	781b      	ldrb	r3, [r3, #0]
 80179ae:	461a      	mov	r2, r3
 80179b0:	f241 5398 	movw	r3, #5528	@ 0x1598
 80179b4:	fb02 f303 	mul.w	r3, r2, r3
 80179b8:	4a2d      	ldr	r2, [pc, #180]	@ (8017a70 <Vendor_Stream_Task+0xa04>)
 80179ba:	4413      	add	r3, r2
 80179bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                if(fAchk->st != FB_SENDING && fBchk->st != FB_SENDING){
 80179be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179c0:	781b      	ldrb	r3, [r3, #0]
 80179c2:	b2db      	uxtb	r3, r3
 80179c4:	2b02      	cmp	r3, #2
 80179c6:	f000 8104 	beq.w	8017bd2 <Vendor_Stream_Task+0xb66>
 80179ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179cc:	781b      	ldrb	r3, [r3, #0]
 80179ce:	b2db      	uxtb	r3, r3
 80179d0:	2b02      	cmp	r3, #2
 80179d2:	f000 80fe 	beq.w	8017bd2 <Vendor_Stream_Task+0xb66>
                    if(fBchk->st == FB_READY){
 80179d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179d8:	781b      	ldrb	r3, [r3, #0]
 80179da:	b2db      	uxtb	r3, r3
 80179dc:	2b01      	cmp	r3, #1
 80179de:	d130      	bne.n	8017a42 <Vendor_Stream_Task+0x9d6>
                        /* Перед отправкой по вотчдогу также поправим seq при необходимости */
                        if(fBchk->frame_size >= VND_FRAME_HDR_SIZE){
 80179e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179e2:	88db      	ldrh	r3, [r3, #6]
 80179e4:	2b1f      	cmp	r3, #31
 80179e6:	d917      	bls.n	8017a18 <Vendor_Stream_Task+0x9ac>
                            vnd_frame_hdr_t *hb2 = (vnd_frame_hdr_t*)fBchk->buf;
 80179e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179ea:	330c      	adds	r3, #12
 80179ec:	62bb      	str	r3, [r7, #40]	@ 0x28
                            if(hb2->magic == 0xA55A && hb2->seq != stream_seq){ hb2->seq = stream_seq; fBchk->seq = stream_seq; VND_LOG("PATCH_B_SEQ_WDG->%lu", (unsigned long)stream_seq); }
 80179ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179f0:	881b      	ldrh	r3, [r3, #0]
 80179f2:	b29b      	uxth	r3, r3
 80179f4:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80179f8:	4293      	cmp	r3, r2
 80179fa:	d10d      	bne.n	8017a18 <Vendor_Stream_Task+0x9ac>
 80179fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179fe:	685a      	ldr	r2, [r3, #4]
 8017a00:	4b1f      	ldr	r3, [pc, #124]	@ (8017a80 <Vendor_Stream_Task+0xa14>)
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	429a      	cmp	r2, r3
 8017a06:	d007      	beq.n	8017a18 <Vendor_Stream_Task+0x9ac>
 8017a08:	4b1d      	ldr	r3, [pc, #116]	@ (8017a80 <Vendor_Stream_Task+0xa14>)
 8017a0a:	681a      	ldr	r2, [r3, #0]
 8017a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a0e:	605a      	str	r2, [r3, #4]
 8017a10:	4b1b      	ldr	r3, [pc, #108]	@ (8017a80 <Vendor_Stream_Task+0xa14>)
 8017a12:	681a      	ldr	r2, [r3, #0]
 8017a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a16:	609a      	str	r2, [r3, #8]
                        }
                        if (vnd_transmit_frame(fBchk->buf, fBchk->frame_size, 0, 0, "ADC1-WDG") == USBD_OK){
 8017a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a1a:	f103 000c 	add.w	r0, r3, #12
 8017a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a20:	88d9      	ldrh	r1, [r3, #6]
 8017a22:	4b18      	ldr	r3, [pc, #96]	@ (8017a84 <Vendor_Stream_Task+0xa18>)
 8017a24:	9300      	str	r3, [sp, #0]
 8017a26:	2300      	movs	r3, #0
 8017a28:	2200      	movs	r2, #0
 8017a2a:	f7fe ff1b 	bl	8016864 <vnd_transmit_frame>
 8017a2e:	4603      	mov	r3, r0
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d106      	bne.n	8017a42 <Vendor_Stream_Task+0x9d6>
                            fBchk->st = FB_SENDING; sending_channel = 1; VND_LOG("PEND_B_WDG_RETRY len=%u", (unsigned)fBchk->frame_size); return; }
 8017a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a36:	2202      	movs	r2, #2
 8017a38:	701a      	strb	r2, [r3, #0]
 8017a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8017a74 <Vendor_Stream_Task+0xa08>)
 8017a3c:	2201      	movs	r2, #1
 8017a3e:	701a      	strb	r2, [r3, #0]
 8017a40:	e1a7      	b.n	8017d92 <Vendor_Stream_Task+0xd26>
                    }
                    /* Строгий порядок A→B: НЕ сбрасываем pending_B.
                       Ждём или синтезируем B выше (см. B_SYNTH_READY), чтобы закрыть пару. */
                    if(fBchk->st != FB_READY){
 8017a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a44:	781b      	ldrb	r3, [r3, #0]
 8017a46:	e0c4      	b.n	8017bd2 <Vendor_Stream_Task+0xb66>
 8017a48:	0801d0e0 	.word	0x0801d0e0
 8017a4c:	24019ffc 	.word	0x24019ffc
 8017a50:	2400dbb8 	.word	0x2400dbb8
 8017a54:	2400dc18 	.word	0x2400dc18
 8017a58:	0801d0e8 	.word	0x0801d0e8
 8017a5c:	2401a080 	.word	0x2401a080
 8017a60:	2400dc1c 	.word	0x2400dc1c
 8017a64:	2400003b 	.word	0x2400003b
 8017a68:	2400dbb9 	.word	0x2400dbb9
 8017a6c:	24019ff9 	.word	0x24019ff9
 8017a70:	2400f338 	.word	0x2400f338
 8017a74:	24000050 	.word	0x24000050
 8017a78:	0801d134 	.word	0x0801d134
 8017a7c:	2400dbf4 	.word	0x2400dbf4
 8017a80:	2400dba8 	.word	0x2400dba8
 8017a84:	0801d140 	.word	0x0801d140
                    }
                }
            }
        } while(0);
    } else {
    ChanFrame *fA = &g_frames[pair_send_idx][0];
 8017a88:	4ba2      	ldr	r3, [pc, #648]	@ (8017d14 <Vendor_Stream_Task+0xca8>)
 8017a8a:	781b      	ldrb	r3, [r3, #0]
 8017a8c:	461a      	mov	r2, r3
 8017a8e:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017a92:	fb02 f303 	mul.w	r3, r2, r3
 8017a96:	4aa0      	ldr	r2, [pc, #640]	@ (8017d18 <Vendor_Stream_Task+0xcac>)
 8017a98:	4413      	add	r3, r2
 8017a9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        /* Watchdog: если A завис в SENDING и долго нет TxCplt — считаем A завершённым и переходим к B */
        do {
            uint32_t now_ms = HAL_GetTick();
 8017a9e:	f7ed fa65 	bl	8004f6c <HAL_GetTick>
 8017aa2:	6738      	str	r0, [r7, #112]	@ 0x70
            if (fA->st == FB_SENDING && (now_ms - vnd_last_tx_start_ms) > 120) {
 8017aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017aa8:	781b      	ldrb	r3, [r3, #0]
 8017aaa:	b2db      	uxtb	r3, r3
 8017aac:	2b02      	cmp	r3, #2
 8017aae:	d128      	bne.n	8017b02 <Vendor_Stream_Task+0xa96>
 8017ab0:	4b9a      	ldr	r3, [pc, #616]	@ (8017d1c <Vendor_Stream_Task+0xcb0>)
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8017ab6:	1ad3      	subs	r3, r2, r3
 8017ab8:	2b78      	cmp	r3, #120	@ 0x78
 8017aba:	d922      	bls.n	8017b02 <Vendor_Stream_Task+0xa96>
                /* Не считаем A завершённым — лишь снимаем busy, нейтрализуем старую мета и открываем ожидание B */
                VND_LOG("A_TXCPLT_WD (>120ms) -> open pending_B, neutralize A meta, continue");
                extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 8017abc:	f001 fec6 	bl	801984c <USBD_VND_ForceTxIdle>
                vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0; sending_channel = 0xFF;
 8017ac0:	4b97      	ldr	r3, [pc, #604]	@ (8017d20 <Vendor_Stream_Task+0xcb4>)
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	701a      	strb	r2, [r3, #0]
 8017ac6:	4b97      	ldr	r3, [pc, #604]	@ (8017d24 <Vendor_Stream_Task+0xcb8>)
 8017ac8:	2201      	movs	r2, #1
 8017aca:	701a      	strb	r2, [r3, #0]
 8017acc:	4b96      	ldr	r3, [pc, #600]	@ (8017d28 <Vendor_Stream_Task+0xcbc>)
 8017ace:	2200      	movs	r2, #0
 8017ad0:	701a      	strb	r2, [r3, #0]
 8017ad2:	4b96      	ldr	r3, [pc, #600]	@ (8017d2c <Vendor_Stream_Task+0xcc0>)
 8017ad4:	22ff      	movs	r2, #255	@ 0xff
 8017ad6:	701a      	strb	r2, [r3, #0]
                vnd_meta_neutralize(0x01, g_frames[pair_send_idx][0].seq);
 8017ad8:	4b8e      	ldr	r3, [pc, #568]	@ (8017d14 <Vendor_Stream_Task+0xca8>)
 8017ada:	781b      	ldrb	r3, [r3, #0]
 8017adc:	4619      	mov	r1, r3
 8017ade:	4a8e      	ldr	r2, [pc, #568]	@ (8017d18 <Vendor_Stream_Task+0xcac>)
 8017ae0:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017ae4:	fb01 f303 	mul.w	r3, r1, r3
 8017ae8:	4413      	add	r3, r2
 8017aea:	3308      	adds	r3, #8
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	4619      	mov	r1, r3
 8017af0:	2001      	movs	r0, #1
 8017af2:	f7fd fea5 	bl	8015840 <vnd_meta_neutralize>
                pending_B = 1; pending_B_since_ms = now_ms;
 8017af6:	4b8e      	ldr	r3, [pc, #568]	@ (8017d30 <Vendor_Stream_Task+0xcc4>)
 8017af8:	2201      	movs	r2, #1
 8017afa:	701a      	strb	r2, [r3, #0]
 8017afc:	4a8d      	ldr	r2, [pc, #564]	@ (8017d34 <Vendor_Stream_Task+0xcc8>)
 8017afe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017b00:	6013      	str	r3, [r2, #0]
            }
        } while(0);
        if(fA->st != FB_READY){ vnd_prepare_pair(); fA = &g_frames[pair_send_idx][0]; }
 8017b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017b06:	781b      	ldrb	r3, [r3, #0]
 8017b08:	b2db      	uxtb	r3, r3
 8017b0a:	2b01      	cmp	r3, #1
 8017b0c:	d00c      	beq.n	8017b28 <Vendor_Stream_Task+0xabc>
 8017b0e:	f7fe fb25 	bl	801615c <vnd_prepare_pair>
 8017b12:	4b80      	ldr	r3, [pc, #512]	@ (8017d14 <Vendor_Stream_Task+0xca8>)
 8017b14:	781b      	ldrb	r3, [r3, #0]
 8017b16:	461a      	mov	r2, r3
 8017b18:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017b1c:	fb02 f303 	mul.w	r3, r2, r3
 8017b20:	4a7d      	ldr	r2, [pc, #500]	@ (8017d18 <Vendor_Stream_Task+0xcac>)
 8017b22:	4413      	add	r3, r2
 8017b24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if(fA->st == FB_READY){
 8017b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017b2c:	781b      	ldrb	r3, [r3, #0]
 8017b2e:	b2db      	uxtb	r3, r3
 8017b30:	2b01      	cmp	r3, #1
 8017b32:	d14e      	bne.n	8017bd2 <Vendor_Stream_Task+0xb66>
            /* Искусственных задержек между кадрами нет: отправляем A сразу при готовности EP и данных */
            /* Отправляем A: в режиме без TEST не проверяем test_in_flight вовсе */
#if VND_DISABLE_TEST
            /* Перед отправкой A — также синхронизируем seq с текущим stream_seq */
            if(fA->frame_size >= VND_FRAME_HDR_SIZE){
 8017b34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017b38:	88db      	ldrh	r3, [r3, #6]
 8017b3a:	2b1f      	cmp	r3, #31
 8017b3c:	d919      	bls.n	8017b72 <Vendor_Stream_Task+0xb06>
                vnd_frame_hdr_t *ha = (vnd_frame_hdr_t*)fA->buf;
 8017b3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017b42:	330c      	adds	r3, #12
 8017b44:	66fb      	str	r3, [r7, #108]	@ 0x6c
                if(ha->magic == 0xA55A && ha->seq != stream_seq){ ha->seq = stream_seq; fA->seq = stream_seq; }
 8017b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017b48:	881b      	ldrh	r3, [r3, #0]
 8017b4a:	b29b      	uxth	r3, r3
 8017b4c:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8017b50:	4293      	cmp	r3, r2
 8017b52:	d10e      	bne.n	8017b72 <Vendor_Stream_Task+0xb06>
 8017b54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017b56:	685a      	ldr	r2, [r3, #4]
 8017b58:	4b77      	ldr	r3, [pc, #476]	@ (8017d38 <Vendor_Stream_Task+0xccc>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	d008      	beq.n	8017b72 <Vendor_Stream_Task+0xb06>
 8017b60:	4b75      	ldr	r3, [pc, #468]	@ (8017d38 <Vendor_Stream_Task+0xccc>)
 8017b62:	681a      	ldr	r2, [r3, #0]
 8017b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017b66:	605a      	str	r2, [r3, #4]
 8017b68:	4b73      	ldr	r3, [pc, #460]	@ (8017d38 <Vendor_Stream_Task+0xccc>)
 8017b6a:	681a      	ldr	r2, [r3, #0]
 8017b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017b70:	609a      	str	r2, [r3, #8]
            }
            VND_LOG("TRY_A len=%u hdr_seq=%lu", (unsigned)fA->frame_size, (unsigned long)((vnd_frame_hdr_t*)fA->buf)->seq);
            if (vnd_transmit_frame(fA->buf, fA->frame_size, 0, 0, "ADC0") == USBD_OK) {
 8017b72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017b76:	f103 000c 	add.w	r0, r3, #12
 8017b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017b7e:	88d9      	ldrh	r1, [r3, #6]
 8017b80:	4b6e      	ldr	r3, [pc, #440]	@ (8017d3c <Vendor_Stream_Task+0xcd0>)
 8017b82:	9300      	str	r3, [sp, #0]
 8017b84:	2300      	movs	r3, #0
 8017b86:	2200      	movs	r2, #0
 8017b88:	f7fe fe6c 	bl	8016864 <vnd_transmit_frame>
 8017b8c:	4603      	mov	r3, r0
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d11f      	bne.n	8017bd2 <Vendor_Stream_Task+0xb66>
                static uint8_t first_a_logged = 0;
                if(!first_a_logged){ first_a_logged = 1; VND_LOG("FIRST_A queued size=%u", (unsigned)fA->frame_size); }
 8017b92:	4b6b      	ldr	r3, [pc, #428]	@ (8017d40 <Vendor_Stream_Task+0xcd4>)
 8017b94:	781b      	ldrb	r3, [r3, #0]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d102      	bne.n	8017ba0 <Vendor_Stream_Task+0xb34>
 8017b9a:	4b69      	ldr	r3, [pc, #420]	@ (8017d40 <Vendor_Stream_Task+0xcd4>)
 8017b9c:	2201      	movs	r2, #1
 8017b9e:	701a      	strb	r2, [r3, #0]
                fA->st = FB_SENDING; sending_channel = 0;
 8017ba0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017ba4:	2202      	movs	r2, #2
 8017ba6:	701a      	strb	r2, [r3, #0]
 8017ba8:	4b60      	ldr	r3, [pc, #384]	@ (8017d2c <Vendor_Stream_Task+0xcc0>)
 8017baa:	2200      	movs	r2, #0
 8017bac:	701a      	strb	r2, [r3, #0]
                /* В режиме A-only не ожидаем B, иначе помечаем ожидание B */
                if(vnd_ch_mode == 0){
 8017bae:	4b65      	ldr	r3, [pc, #404]	@ (8017d44 <Vendor_Stream_Task+0xcd8>)
 8017bb0:	781b      	ldrb	r3, [r3, #0]
 8017bb2:	b2db      	uxtb	r3, r3
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d103      	bne.n	8017bc0 <Vendor_Stream_Task+0xb54>
                    pending_B = 0;
 8017bb8:	4b5d      	ldr	r3, [pc, #372]	@ (8017d30 <Vendor_Stream_Task+0xcc4>)
 8017bba:	2200      	movs	r2, #0
 8017bbc:	701a      	strb	r2, [r3, #0]
                } else {
                    pending_B = 1; pending_B_since_ms = HAL_GetTick();
                }
                return;
 8017bbe:	e0e8      	b.n	8017d92 <Vendor_Stream_Task+0xd26>
                    pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8017bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8017d30 <Vendor_Stream_Task+0xcc4>)
 8017bc2:	2201      	movs	r2, #1
 8017bc4:	701a      	strb	r2, [r3, #0]
 8017bc6:	f7ed f9d1 	bl	8004f6c <HAL_GetTick>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	4a59      	ldr	r2, [pc, #356]	@ (8017d34 <Vendor_Stream_Task+0xcc8>)
 8017bce:	6013      	str	r3, [r2, #0]
                return;
 8017bd0:	e0df      	b.n	8017d92 <Vendor_Stream_Task+0xd26>
                }
            }
#endif
        }
    }
    if(vnd_tick_flag) vnd_tick_flag = 0;
 8017bd2:	4b5d      	ldr	r3, [pc, #372]	@ (8017d48 <Vendor_Stream_Task+0xcdc>)
 8017bd4:	781b      	ldrb	r3, [r3, #0]
 8017bd6:	b2db      	uxtb	r3, r3
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d002      	beq.n	8017be2 <Vendor_Stream_Task+0xb76>
 8017bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8017d48 <Vendor_Stream_Task+0xcdc>)
 8017bde:	2200      	movs	r2, #0
 8017be0:	701a      	strb	r2, [r3, #0]
    if(cur_samples_per_frame == 0 && start_cmd_ms && (now - start_cmd_ms) > VND_DMA_TIMEOUT_MS && !no_dma_status_sent){
 8017be2:	4b5a      	ldr	r3, [pc, #360]	@ (8017d4c <Vendor_Stream_Task+0xce0>)
 8017be4:	881b      	ldrh	r3, [r3, #0]
 8017be6:	b29b      	uxth	r3, r3
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d126      	bne.n	8017c3a <Vendor_Stream_Task+0xbce>
 8017bec:	4b58      	ldr	r3, [pc, #352]	@ (8017d50 <Vendor_Stream_Task+0xce4>)
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d022      	beq.n	8017c3a <Vendor_Stream_Task+0xbce>
 8017bf4:	4b56      	ldr	r3, [pc, #344]	@ (8017d50 <Vendor_Stream_Task+0xce4>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017bfa:	1ad3      	subs	r3, r2, r3
 8017bfc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8017c00:	d91b      	bls.n	8017c3a <Vendor_Stream_Task+0xbce>
 8017c02:	4b54      	ldr	r3, [pc, #336]	@ (8017d54 <Vendor_Stream_Task+0xce8>)
 8017c04:	781b      	ldrb	r3, [r3, #0]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d117      	bne.n	8017c3a <Vendor_Stream_Task+0xbce>
        adc_stream_debug_t dbg; adc_stream_get_debug(&dbg);
 8017c0a:	463b      	mov	r3, r7
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	f7e8 fe33 	bl	8000878 <adc_stream_get_debug>
        if(dbg.dma_full0 == dma_snapshot_full0 && dbg.dma_full1 == dma_snapshot_full1){ no_dma_status_sent = 1; if(vnd_last_error == 0) vnd_last_error = 1; VND_LOG("ERR DMA_TIMEOUT"); }
 8017c12:	697a      	ldr	r2, [r7, #20]
 8017c14:	4b50      	ldr	r3, [pc, #320]	@ (8017d58 <Vendor_Stream_Task+0xcec>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	429a      	cmp	r2, r3
 8017c1a:	d10e      	bne.n	8017c3a <Vendor_Stream_Task+0xbce>
 8017c1c:	69fa      	ldr	r2, [r7, #28]
 8017c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8017d5c <Vendor_Stream_Task+0xcf0>)
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	429a      	cmp	r2, r3
 8017c24:	d109      	bne.n	8017c3a <Vendor_Stream_Task+0xbce>
 8017c26:	4b4b      	ldr	r3, [pc, #300]	@ (8017d54 <Vendor_Stream_Task+0xce8>)
 8017c28:	2201      	movs	r2, #1
 8017c2a:	701a      	strb	r2, [r3, #0]
 8017c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8017d60 <Vendor_Stream_Task+0xcf4>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d102      	bne.n	8017c3a <Vendor_Stream_Task+0xbce>
 8017c34:	4b4a      	ldr	r3, [pc, #296]	@ (8017d60 <Vendor_Stream_Task+0xcf4>)
 8017c36:	2201      	movs	r2, #1
 8017c38:	601a      	str	r2, [r3, #0]
    }
    /* Периодическая CDC-статистика по байтам/скорости */
    vnd_cdc_periodic_stats(now);
 8017c3a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8017c3c:	f7fd fca4 	bl	8015588 <vnd_cdc_periodic_stats>
    /* Периодическое обновление дисплея LCD с информацией о потоке */
    // stream_display_periodic_update();
    /* Небольшой NAK-watchdog: если давно не было завершений — попросим мягкий ресет класса.
       Он выполнится асинхронно и не блокирует EP0. */
    if((now - vnd_last_txcplt_ms) > 1500){
 8017c40:	4b48      	ldr	r3, [pc, #288]	@ (8017d64 <Vendor_Stream_Task+0xcf8>)
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017c46:	1ad3      	subs	r3, r2, r3
 8017c48:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8017c4c:	4293      	cmp	r3, r2
 8017c4e:	d904      	bls.n	8017c5a <Vendor_Stream_Task+0xbee>
        extern void USBD_VND_RequestSoftReset(void);
        USBD_VND_RequestSoftReset();
 8017c50:	f001 fca6 	bl	80195a0 <USBD_VND_RequestSoftReset>
        vnd_last_txcplt_ms = now; /* предотвратить лавину запросов */
 8017c54:	4a43      	ldr	r2, [pc, #268]	@ (8017d64 <Vendor_Stream_Task+0xcf8>)
 8017c56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017c58:	6013      	str	r3, [r2, #0]
        VND_LOG("WDG_SOFT_RESET_REQ");
    }
    /* Аварийный keepalive тестом — только в диагностике; в полном режиме не посылаем TEST повторно */
    if(!full_mode){
 8017c5a:	4b43      	ldr	r3, [pc, #268]	@ (8017d68 <Vendor_Stream_Task+0xcfc>)
 8017c5c:	781b      	ldrb	r3, [r3, #0]
 8017c5e:	b2db      	uxtb	r3, r3
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d10b      	bne.n	8017c7c <Vendor_Stream_Task+0xc10>
        /* В DIAG режиме можно слать keepalive TEST — оставляем как было. */
    if(dbg_tx_cplt == 0 && (now - start_cmd_ms) > 150 && !vnd_ep_busy){
 8017c64:	4b41      	ldr	r3, [pc, #260]	@ (8017d6c <Vendor_Stream_Task+0xd00>)
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d107      	bne.n	8017c7c <Vendor_Stream_Task+0xc10>
 8017c6c:	4b38      	ldr	r3, [pc, #224]	@ (8017d50 <Vendor_Stream_Task+0xce4>)
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017c72:	1ad3      	subs	r3, r2, r3
 8017c74:	2b96      	cmp	r3, #150	@ 0x96
 8017c76:	d901      	bls.n	8017c7c <Vendor_Stream_Task+0xc10>
 8017c78:	4b29      	ldr	r3, [pc, #164]	@ (8017d20 <Vendor_Stream_Task+0xcb4>)
 8017c7a:	781b      	ldrb	r3, [r3, #0]
    }
    /* Периодический диагностический лог ранней стадии: пока нет ни одного TXCPLT или отсутствует прогресс */
    do {
        static uint32_t last_diag_ms = 0;
        static uint32_t last_diag_txcplt = 0;
        if(now - last_diag_ms > 200){
 8017c7c:	4b3c      	ldr	r3, [pc, #240]	@ (8017d70 <Vendor_Stream_Task+0xd04>)
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017c82:	1ad3      	subs	r3, r2, r3
 8017c84:	2bc8      	cmp	r3, #200	@ 0xc8
 8017c86:	d910      	bls.n	8017caa <Vendor_Stream_Task+0xc3e>
            if(dbg_tx_cplt == 0 || dbg_tx_cplt != last_diag_txcplt){
 8017c88:	4b38      	ldr	r3, [pc, #224]	@ (8017d6c <Vendor_Stream_Task+0xd00>)
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d005      	beq.n	8017c9c <Vendor_Stream_Task+0xc30>
 8017c90:	4b36      	ldr	r3, [pc, #216]	@ (8017d6c <Vendor_Stream_Task+0xd00>)
 8017c92:	681a      	ldr	r2, [r3, #0]
 8017c94:	4b37      	ldr	r3, [pc, #220]	@ (8017d74 <Vendor_Stream_Task+0xd08>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	429a      	cmp	r2, r3
 8017c9a:	d003      	beq.n	8017ca4 <Vendor_Stream_Task+0xc38>
                /* Получим отладочные счётчики DMA, если доступны */
                VND_LOG("DIAG txcplt=%lu test_sent=%u test_in_flight=%u pendB=%u ep_busy=%u inflight=%u ch=%u ackPend=%u seq=%lu prod=%lu sent0=%lu sent1=%lu wr=%lu rd=%lu metaDepth=%u", (unsigned long)dbg_tx_cplt, (unsigned)test_sent, (unsigned)test_in_flight, (unsigned)pending_B, (unsigned)vnd_ep_busy, (unsigned)vnd_inflight, (unsigned)sending_channel, (unsigned)status_ack_pending, (unsigned long)stream_seq, (unsigned long)dbg_produced_seq, (unsigned long)dbg_sent_ch0_total, (unsigned long)dbg_sent_ch1_total, (unsigned long)frame_wr_seq, (unsigned long)frame_rd_seq, (unsigned)vnd_tx_meta_depth());
                last_diag_txcplt = dbg_tx_cplt;
 8017c9c:	4b33      	ldr	r3, [pc, #204]	@ (8017d6c <Vendor_Stream_Task+0xd00>)
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	4a34      	ldr	r2, [pc, #208]	@ (8017d74 <Vendor_Stream_Task+0xd08>)
 8017ca2:	6013      	str	r3, [r2, #0]
            }
            last_diag_ms = now;
 8017ca4:	4a32      	ldr	r2, [pc, #200]	@ (8017d70 <Vendor_Stream_Task+0xd04>)
 8017ca6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017ca8:	6013      	str	r3, [r2, #0]
        }
    } while(0);

    /* Ускоренный watchdog: считаем зависанием при > 3000мс без TXCPLT и мягко пинаем TX */
    if(streaming && (now - vnd_last_txcplt_ms) > 3000){
 8017caa:	4b33      	ldr	r3, [pc, #204]	@ (8017d78 <Vendor_Stream_Task+0xd0c>)
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	b2db      	uxtb	r3, r3
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d06e      	beq.n	8017d92 <Vendor_Stream_Task+0xd26>
 8017cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8017d64 <Vendor_Stream_Task+0xcf8>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017cba:	1ad3      	subs	r3, r2, r3
 8017cbc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8017cc0:	4293      	cmp	r3, r2
 8017cc2:	d966      	bls.n	8017d92 <Vendor_Stream_Task+0xd26>
        VND_LOG("WDG_KICK (no TXCPLT >3s) try requeue");
        /* Не делаем глубокий ресет, только разрешаем передачу и инициируем попытку */
        vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0; sending_channel = 0xFF;
 8017cc4:	4b16      	ldr	r3, [pc, #88]	@ (8017d20 <Vendor_Stream_Task+0xcb4>)
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	701a      	strb	r2, [r3, #0]
 8017cca:	4b16      	ldr	r3, [pc, #88]	@ (8017d24 <Vendor_Stream_Task+0xcb8>)
 8017ccc:	2201      	movs	r2, #1
 8017cce:	701a      	strb	r2, [r3, #0]
 8017cd0:	4b15      	ldr	r3, [pc, #84]	@ (8017d28 <Vendor_Stream_Task+0xcbc>)
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	701a      	strb	r2, [r3, #0]
 8017cd6:	4b15      	ldr	r3, [pc, #84]	@ (8017d2c <Vendor_Stream_Task+0xcc0>)
 8017cd8:	22ff      	movs	r2, #255	@ 0xff
 8017cda:	701a      	strb	r2, [r3, #0]
        test_sent = 1; test_in_flight = 0; start_ack_done = 1; status_ack_pending = 0;
 8017cdc:	4b27      	ldr	r3, [pc, #156]	@ (8017d7c <Vendor_Stream_Task+0xd10>)
 8017cde:	2201      	movs	r2, #1
 8017ce0:	701a      	strb	r2, [r3, #0]
 8017ce2:	4b27      	ldr	r3, [pc, #156]	@ (8017d80 <Vendor_Stream_Task+0xd14>)
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	701a      	strb	r2, [r3, #0]
 8017ce8:	4b26      	ldr	r3, [pc, #152]	@ (8017d84 <Vendor_Stream_Task+0xd18>)
 8017cea:	2201      	movs	r2, #1
 8017cec:	701a      	strb	r2, [r3, #0]
 8017cee:	4b26      	ldr	r3, [pc, #152]	@ (8017d88 <Vendor_Stream_Task+0xd1c>)
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	701a      	strb	r2, [r3, #0]
        vnd_last_txcplt_ms = now;
 8017cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8017d64 <Vendor_Stream_Task+0xcf8>)
 8017cf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017cf8:	6013      	str	r3, [r2, #0]
        vnd_tx_kick = 1;
 8017cfa:	4b24      	ldr	r3, [pc, #144]	@ (8017d8c <Vendor_Stream_Task+0xd20>)
 8017cfc:	2201      	movs	r2, #1
 8017cfe:	701a      	strb	r2, [r3, #0]
        (void)vnd_async_try_tx();
 8017d00:	f7fe fc88 	bl	8016614 <vnd_async_try_tx>
 8017d04:	e045      	b.n	8017d92 <Vendor_Stream_Task+0xd26>
        return; /* ждём TxCplt ACK-STOP */
 8017d06:	bf00      	nop
 8017d08:	e043      	b.n	8017d92 <Vendor_Stream_Task+0xd26>
                if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 8017d0a:	bf00      	nop
 8017d0c:	e041      	b.n	8017d92 <Vendor_Stream_Task+0xd26>
    if(!full_mode){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 8017d0e:	bf00      	nop
 8017d10:	e03f      	b.n	8017d92 <Vendor_Stream_Task+0xd26>
 8017d12:	bf00      	nop
 8017d14:	24019ff9 	.word	0x24019ff9
 8017d18:	2400f338 	.word	0x2400f338
 8017d1c:	2400dc1c 	.word	0x2400dc1c
 8017d20:	2400dbb8 	.word	0x2400dbb8
 8017d24:	2400003b 	.word	0x2400003b
 8017d28:	2400dbb9 	.word	0x2400dbb9
 8017d2c:	24000050 	.word	0x24000050
 8017d30:	24019ffa 	.word	0x24019ffa
 8017d34:	24019ffc 	.word	0x24019ffc
 8017d38:	2400dba8 	.word	0x2400dba8
 8017d3c:	0801d098 	.word	0x0801d098
 8017d40:	2401a084 	.word	0x2401a084
 8017d44:	24000040 	.word	0x24000040
 8017d48:	2401a074 	.word	0x2401a074
 8017d4c:	2400dbac 	.word	0x2400dbac
 8017d50:	2400dbb0 	.word	0x2400dbb0
 8017d54:	2400dc0c 	.word	0x2400dc0c
 8017d58:	2400dc04 	.word	0x2400dc04
 8017d5c:	2400dc08 	.word	0x2400dc08
 8017d60:	2400dbb4 	.word	0x2400dbb4
 8017d64:	2400dbf4 	.word	0x2400dbf4
 8017d68:	2400003c 	.word	0x2400003c
 8017d6c:	2400dbe8 	.word	0x2400dbe8
 8017d70:	2401a088 	.word	0x2401a088
 8017d74:	2401a08c 	.word	0x2401a08c
 8017d78:	2400dba4 	.word	0x2400dba4
 8017d7c:	2400dbba 	.word	0x2400dbba
 8017d80:	2400dbbb 	.word	0x2400dbbb
 8017d84:	2400dc56 	.word	0x2400dc56
 8017d88:	2400dc57 	.word	0x2400dc57
 8017d8c:	2400dc50 	.word	0x2400dc50
            if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 8017d90:	bf00      	nop
    }

    /* Если нет прогресса — не синтезируем кадры; ждём реальные данные от АЦП */
}
 8017d92:	3790      	adds	r7, #144	@ 0x90
 8017d94:	46bd      	mov	sp, r7
 8017d96:	bdb0      	pop	{r4, r5, r7, pc}

08017d98 <USBD_VND_TxCplt>:

/* Обработчик завершения передачи */
void USBD_VND_TxCplt(void)
{
 8017d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017d9c:	b0b0      	sub	sp, #192	@ 0xc0
 8017d9e:	af02      	add	r7, sp, #8
    uint8_t prev_sending = sending_channel;
 8017da0:	4bb7      	ldr	r3, [pc, #732]	@ (8018080 <USBD_VND_TxCplt+0x2e8>)
 8017da2:	781b      	ldrb	r3, [r3, #0]
 8017da4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    dbg_tx_cplt++;
 8017da8:	4bb6      	ldr	r3, [pc, #728]	@ (8018084 <USBD_VND_TxCplt+0x2ec>)
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	1c5a      	adds	r2, r3, #1
 8017dae:	4bb5      	ldr	r3, [pc, #724]	@ (8018084 <USBD_VND_TxCplt+0x2ec>)
 8017db0:	601a      	str	r2, [r3, #0]
    vnd_tx_ready = 1;
 8017db2:	4ab5      	ldr	r2, [pc, #724]	@ (8018088 <USBD_VND_TxCplt+0x2f0>)
 8017db4:	2301      	movs	r3, #1
 8017db6:	7013      	strb	r3, [r2, #0]
    vnd_ep_busy = 0;
 8017db8:	4ab4      	ldr	r2, [pc, #720]	@ (801808c <USBD_VND_TxCplt+0x2f4>)
 8017dba:	2300      	movs	r3, #0
 8017dbc:	7013      	strb	r3, [r2, #0]
    vnd_inflight = 0;
 8017dbe:	4ab4      	ldr	r2, [pc, #720]	@ (8018090 <USBD_VND_TxCplt+0x2f8>)
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	7013      	strb	r3, [r2, #0]
    vnd_last_txcplt_ms = HAL_GetTick();
 8017dc4:	f7ed f8d2 	bl	8004f6c <HAL_GetTick>
 8017dc8:	4602      	mov	r2, r0
 8017dca:	4bb2      	ldr	r3, [pc, #712]	@ (8018094 <USBD_VND_TxCplt+0x2fc>)
 8017dcc:	601a      	str	r2, [r3, #0]
    VND_LOG("TXCPLT len=%u dt=%lums depth=%u push=%lu pop=%lu empty=%lu ovf=%lu", (unsigned)vnd_last_tx_len,
        (unsigned long)(HAL_GetTick() - vnd_last_tx_start_ms), (unsigned)vnd_tx_meta_depth(),
        (unsigned long)meta_push_total, (unsigned long)meta_pop_total, (unsigned long)meta_empty_events, (unsigned long)meta_overflow_events);
    vnd_total_tx_bytes += vnd_last_tx_len; /* учитывать и тестовые, и статусные, и рабочие */
 8017dce:	4bb2      	ldr	r3, [pc, #712]	@ (8018098 <USBD_VND_TxCplt+0x300>)
 8017dd0:	881b      	ldrh	r3, [r3, #0]
 8017dd2:	b29b      	uxth	r3, r3
 8017dd4:	b29b      	uxth	r3, r3
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	461c      	mov	r4, r3
 8017dda:	4615      	mov	r5, r2
 8017ddc:	4baf      	ldr	r3, [pc, #700]	@ (801809c <USBD_VND_TxCplt+0x304>)
 8017dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017de2:	eb14 0802 	adds.w	r8, r4, r2
 8017de6:	eb45 0903 	adc.w	r9, r5, r3
 8017dea:	4bac      	ldr	r3, [pc, #688]	@ (801809c <USBD_VND_TxCplt+0x304>)
 8017dec:	e9c3 8900 	strd	r8, r9, [r3]
    /* Зафиксировать завершение стартового ACK (если был) */
    if(start_stat_inflight){ start_stat_inflight = 0; start_ack_done = 1; }
 8017df0:	4bab      	ldr	r3, [pc, #684]	@ (80180a0 <USBD_VND_TxCplt+0x308>)
 8017df2:	781b      	ldrb	r3, [r3, #0]
 8017df4:	b2db      	uxtb	r3, r3
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d005      	beq.n	8017e06 <USBD_VND_TxCplt+0x6e>
 8017dfa:	4aa9      	ldr	r2, [pc, #676]	@ (80180a0 <USBD_VND_TxCplt+0x308>)
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	7013      	strb	r3, [r2, #0]
 8017e00:	4aa8      	ldr	r2, [pc, #672]	@ (80180a4 <USBD_VND_TxCplt+0x30c>)
 8017e02:	2301      	movs	r3, #1
 8017e04:	7013      	strb	r3, [r2, #0]

    /* Надёжная классификация завершившегося буфера (приоритет inflight_* затем meta FIFO) */
    vnd_tx_meta_t meta; int have_meta = vnd_tx_meta_pop(&meta);
 8017e06:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	f7fd fca0 	bl	8015750 <vnd_tx_meta_pop>
 8017e10:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    uint8_t eff_is_frame = 0; uint8_t eff_flags = 0; uint32_t eff_seq = 0;
 8017e14:	2300      	movs	r3, #0
 8017e16:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 8017e20:	2300      	movs	r3, #0
 8017e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if(inflight_is_frame){ eff_is_frame = 1; eff_flags = inflight_flags; eff_seq = inflight_seq; }
 8017e26:	4ba0      	ldr	r3, [pc, #640]	@ (80180a8 <USBD_VND_TxCplt+0x310>)
 8017e28:	781b      	ldrb	r3, [r3, #0]
 8017e2a:	b2db      	uxtb	r3, r3
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d00b      	beq.n	8017e48 <USBD_VND_TxCplt+0xb0>
 8017e30:	2301      	movs	r3, #1
 8017e32:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 8017e36:	4b9d      	ldr	r3, [pc, #628]	@ (80180ac <USBD_VND_TxCplt+0x314>)
 8017e38:	781b      	ldrb	r3, [r3, #0]
 8017e3a:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 8017e3e:	4b9c      	ldr	r3, [pc, #624]	@ (80180b0 <USBD_VND_TxCplt+0x318>)
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8017e46:	e026      	b.n	8017e96 <USBD_VND_TxCplt+0xfe>
    else if(have_meta && meta.is_frame){ eff_is_frame = 1; eff_flags = meta.flags; eff_seq = meta.seq_field; }
 8017e48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d00e      	beq.n	8017e6e <USBD_VND_TxCplt+0xd6>
 8017e50:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d00a      	beq.n	8017e6e <USBD_VND_TxCplt+0xd6>
 8017e58:	2301      	movs	r3, #1
 8017e5a:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 8017e5e:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8017e62:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 8017e66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017e68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8017e6c:	e013      	b.n	8017e96 <USBD_VND_TxCplt+0xfe>
    else if(have_meta){ eff_is_frame = 0; }
 8017e6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d003      	beq.n	8017e7e <USBD_VND_TxCplt+0xe6>
 8017e76:	2300      	movs	r3, #0
 8017e78:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 8017e7c:	e00b      	b.n	8017e96 <USBD_VND_TxCplt+0xfe>
    else { eff_is_frame = last_tx_is_frame; eff_flags = last_tx_flags; eff_seq = last_tx_seq; }
 8017e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80180b4 <USBD_VND_TxCplt+0x31c>)
 8017e80:	781b      	ldrb	r3, [r3, #0]
 8017e82:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 8017e86:	4b8c      	ldr	r3, [pc, #560]	@ (80180b8 <USBD_VND_TxCplt+0x320>)
 8017e88:	781b      	ldrb	r3, [r3, #0]
 8017e8a:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 8017e8e:	4b8b      	ldr	r3, [pc, #556]	@ (80180bc <USBD_VND_TxCplt+0x324>)
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    inflight_is_frame = 0; inflight_flags = 0; inflight_seq = 0;
 8017e96:	4a84      	ldr	r2, [pc, #528]	@ (80180a8 <USBD_VND_TxCplt+0x310>)
 8017e98:	2300      	movs	r3, #0
 8017e9a:	7013      	strb	r3, [r2, #0]
 8017e9c:	4a83      	ldr	r2, [pc, #524]	@ (80180ac <USBD_VND_TxCplt+0x314>)
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	7013      	strb	r3, [r2, #0]
 8017ea2:	4a83      	ldr	r2, [pc, #524]	@ (80180b0 <USBD_VND_TxCplt+0x318>)
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	6013      	str	r3, [r2, #0]
    VND_LOG("TXCPLT_CLASS is_frame=%u fl=0x%02X seq=%lu depth_now=%u (meta_have=%d)", (unsigned)eff_is_frame, (unsigned)eff_flags, (unsigned long)eff_seq, (unsigned)vnd_tx_meta_depth(), have_meta);

    /* Если это был ACK на STOP — после него переводим систему в остановленное состояние */
    if(stop_stat_inflight){
 8017ea8:	4b85      	ldr	r3, [pc, #532]	@ (80180c0 <USBD_VND_TxCplt+0x328>)
 8017eaa:	781b      	ldrb	r3, [r3, #0]
 8017eac:	b2db      	uxtb	r3, r3
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d055      	beq.n	8017f5e <USBD_VND_TxCplt+0x1c6>
        stop_stat_inflight = 0;
 8017eb2:	4b83      	ldr	r3, [pc, #524]	@ (80180c0 <USBD_VND_TxCplt+0x328>)
 8017eb4:	2200      	movs	r2, #0
 8017eb6:	701a      	strb	r2, [r3, #0]
        stop_request = 0;
 8017eb8:	4b82      	ldr	r3, [pc, #520]	@ (80180c4 <USBD_VND_TxCplt+0x32c>)
 8017eba:	2200      	movs	r2, #0
 8017ebc:	701a      	strb	r2, [r3, #0]
        if(streaming){ streaming = 0; VND_LOG("STOP_STREAM after STAT"); }
 8017ebe:	4b82      	ldr	r3, [pc, #520]	@ (80180c8 <USBD_VND_TxCplt+0x330>)
 8017ec0:	781b      	ldrb	r3, [r3, #0]
 8017ec2:	b2db      	uxtb	r3, r3
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d002      	beq.n	8017ece <USBD_VND_TxCplt+0x136>
 8017ec8:	4b7f      	ldr	r3, [pc, #508]	@ (80180c8 <USBD_VND_TxCplt+0x330>)
 8017eca:	2200      	movs	r2, #0
 8017ecc:	701a      	strb	r2, [r3, #0]
        diag_mode_active = 0;
 8017ece:	4b7f      	ldr	r3, [pc, #508]	@ (80180cc <USBD_VND_TxCplt+0x334>)
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	701a      	strb	r2, [r3, #0]
        vnd_reset_buffers();
 8017ed4:	f7fd fe94 	bl	8015c00 <vnd_reset_buffers>
        sending_channel = 0xFF; pending_B = 0; test_sent = 0; test_in_flight = 0; vnd_inflight = 0;
 8017ed8:	4b69      	ldr	r3, [pc, #420]	@ (8018080 <USBD_VND_TxCplt+0x2e8>)
 8017eda:	22ff      	movs	r2, #255	@ 0xff
 8017edc:	701a      	strb	r2, [r3, #0]
 8017ede:	4b7c      	ldr	r3, [pc, #496]	@ (80180d0 <USBD_VND_TxCplt+0x338>)
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	701a      	strb	r2, [r3, #0]
 8017ee4:	4b7b      	ldr	r3, [pc, #492]	@ (80180d4 <USBD_VND_TxCplt+0x33c>)
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	701a      	strb	r2, [r3, #0]
 8017eea:	4b7b      	ldr	r3, [pc, #492]	@ (80180d8 <USBD_VND_TxCplt+0x340>)
 8017eec:	2200      	movs	r2, #0
 8017eee:	701a      	strb	r2, [r3, #0]
 8017ef0:	4b67      	ldr	r3, [pc, #412]	@ (8018090 <USBD_VND_TxCplt+0x2f8>)
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	701a      	strb	r2, [r3, #0]
        /* Останавливаем DMA и сбрасываем буферы */
        extern void adc_stream_stop(void);
        adc_stream_stop();
 8017ef6:	f7e8 fa7d 	bl	80003f4 <adc_stream_stop>
        /* Индикация STOP: погасить пин Data_ready и вывести CDC-событие */
        HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_RESET);
 8017efa:	2200      	movs	r2, #0
 8017efc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017f00:	4876      	ldr	r0, [pc, #472]	@ (80180dc <USBD_VND_TxCplt+0x344>)
 8017f02:	f7f2 f8ef 	bl	800a0e4 <HAL_GPIO_WritePin>
        {
            uint64_t cur = vnd_total_tx_bytes;
 8017f06:	4b65      	ldr	r3, [pc, #404]	@ (801809c <USBD_VND_TxCplt+0x304>)
 8017f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f0c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
            uint64_t delta = (cur >= vnd_tx_bytes_at_start) ? (cur - vnd_tx_bytes_at_start) : 0ULL;
 8017f10:	4b73      	ldr	r3, [pc, #460]	@ (80180e0 <USBD_VND_TxCplt+0x348>)
 8017f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f16:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8017f1a:	4290      	cmp	r0, r2
 8017f1c:	eb71 0303 	sbcs.w	r3, r1, r3
 8017f20:	d309      	bcc.n	8017f36 <USBD_VND_TxCplt+0x19e>
 8017f22:	4b6f      	ldr	r3, [pc, #444]	@ (80180e0 <USBD_VND_TxCplt+0x348>)
 8017f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f28:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8017f2c:	ebb0 0a02 	subs.w	sl, r0, r2
 8017f30:	eb61 0b03 	sbc.w	fp, r1, r3
 8017f34:	e003      	b.n	8017f3e <USBD_VND_TxCplt+0x1a6>
 8017f36:	f04f 0a00 	mov.w	sl, #0
 8017f3a:	f04f 0b00 	mov.w	fp, #0
 8017f3e:	e9c7 ab1c 	strd	sl, fp, [r7, #112]	@ 0x70
            cdc_logf("EVT STOP total=%llu delta=%llu", (unsigned long long)cur, (unsigned long long)delta);
 8017f42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8017f46:	e9cd 2300 	strd	r2, r3, [sp]
 8017f4a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8017f4e:	4865      	ldr	r0, [pc, #404]	@ (80180e4 <USBD_VND_TxCplt+0x34c>)
 8017f50:	f7fd fae8 	bl	8015524 <cdc_logf>
        }
        vnd_tx_kick = 1; /* пнуть таск на всякий случай */
 8017f54:	4b64      	ldr	r3, [pc, #400]	@ (80180e8 <USBD_VND_TxCplt+0x350>)
 8017f56:	2201      	movs	r2, #1
 8017f58:	701a      	strb	r2, [r3, #0]
        return;
 8017f5a:	f000 bd1a 	b.w	8018992 <USBD_VND_TxCplt+0xbfa>
    }
    if(test_in_flight)
 8017f5e:	4b5e      	ldr	r3, [pc, #376]	@ (80180d8 <USBD_VND_TxCplt+0x340>)
 8017f60:	781b      	ldrb	r3, [r3, #0]
 8017f62:	b2db      	uxtb	r3, r3
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d00c      	beq.n	8017f82 <USBD_VND_TxCplt+0x1ea>
    {
        test_in_flight = 0;
 8017f68:	4b5b      	ldr	r3, [pc, #364]	@ (80180d8 <USBD_VND_TxCplt+0x340>)
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	701a      	strb	r2, [r3, #0]
        test_sent = 1; /* помечаем тест выполненным ровно один раз, не сбрасывать вне START */
 8017f6e:	4b59      	ldr	r3, [pc, #356]	@ (80180d4 <USBD_VND_TxCplt+0x33c>)
 8017f70:	2201      	movs	r2, #1
 8017f72:	701a      	strb	r2, [r3, #0]
        first_test_sent_ms = HAL_GetTick();
 8017f74:	f7ec fffa 	bl	8004f6c <HAL_GetTick>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	4a5c      	ldr	r2, [pc, #368]	@ (80180ec <USBD_VND_TxCplt+0x354>)
 8017f7c:	6013      	str	r3, [r2, #0]
        VND_LOG("TEST_TXCPLT");
        return;
 8017f7e:	f000 bd08 	b.w	8018992 <USBD_VND_TxCplt+0xbfa>
    }
    if(!streaming){ vnd_tx_kick = 1; return; }
 8017f82:	4b51      	ldr	r3, [pc, #324]	@ (80180c8 <USBD_VND_TxCplt+0x330>)
 8017f84:	781b      	ldrb	r3, [r3, #0]
 8017f86:	b2db      	uxtb	r3, r3
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d104      	bne.n	8017f96 <USBD_VND_TxCplt+0x1fe>
 8017f8c:	4b56      	ldr	r3, [pc, #344]	@ (80180e8 <USBD_VND_TxCplt+0x350>)
 8017f8e:	2201      	movs	r2, #1
 8017f90:	701a      	strb	r2, [r3, #0]
 8017f92:	f000 bcfe 	b.w	8018992 <USBD_VND_TxCplt+0xbfa>

    /* Асинхронный режим: считаем канал по eff_flags, закрываем соответствующий подкадр.
       В A-only/B-only режиме закрываем сразу всю пару и сдвигаем seq. */
    if(async_mode && streaming && full_mode){
 8017f96:	4b56      	ldr	r3, [pc, #344]	@ (80180f0 <USBD_VND_TxCplt+0x358>)
 8017f98:	781b      	ldrb	r3, [r3, #0]
 8017f9a:	b2db      	uxtb	r3, r3
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	f000 81a3 	beq.w	80182e8 <USBD_VND_TxCplt+0x550>
 8017fa2:	4b49      	ldr	r3, [pc, #292]	@ (80180c8 <USBD_VND_TxCplt+0x330>)
 8017fa4:	781b      	ldrb	r3, [r3, #0]
 8017fa6:	b2db      	uxtb	r3, r3
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	f000 819d 	beq.w	80182e8 <USBD_VND_TxCplt+0x550>
 8017fae:	4b51      	ldr	r3, [pc, #324]	@ (80180f4 <USBD_VND_TxCplt+0x35c>)
 8017fb0:	781b      	ldrb	r3, [r3, #0]
 8017fb2:	b2db      	uxtb	r3, r3
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	f000 8197 	beq.w	80182e8 <USBD_VND_TxCplt+0x550>
        if(eff_is_frame){
 8017fba:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	f000 8186 	beq.w	80182d0 <USBD_VND_TxCplt+0x538>
            if(eff_flags == 0x01 || eff_flags == 0x02){
 8017fc4:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8017fc8:	2b01      	cmp	r3, #1
 8017fca:	d004      	beq.n	8017fd6 <USBD_VND_TxCplt+0x23e>
 8017fcc:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8017fd0:	2b02      	cmp	r3, #2
 8017fd2:	f040 817d 	bne.w	80182d0 <USBD_VND_TxCplt+0x538>
                int ch = (eff_flags == 0x01) ? 0 : 1;
 8017fd6:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8017fda:	2b01      	cmp	r3, #1
 8017fdc:	bf14      	ite	ne
 8017fde:	2301      	movne	r3, #1
 8017fe0:	2300      	moveq	r3, #0
 8017fe2:	b2db      	uxtb	r3, r3
 8017fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                int idx = vnd_find_pair_by_seq(eff_seq);
 8017fe8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8017fec:	f7fe fac6 	bl	801657c <vnd_find_pair_by_seq>
 8017ff0:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                if(idx >= 0){
 8017ff4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	f2c0 8169 	blt.w	80182d0 <USBD_VND_TxCplt+0x538>
                    ChanFrame *cf = &g_frames[(uint8_t)idx][(uint8_t)ch];
 8017ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018002:	b2db      	uxtb	r3, r3
 8018004:	4619      	mov	r1, r3
 8018006:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801800a:	b2db      	uxtb	r3, r3
 801800c:	461a      	mov	r2, r3
 801800e:	f640 23cc 	movw	r3, #2764	@ 0xacc
 8018012:	fb03 f202 	mul.w	r2, r3, r2
 8018016:	f241 5398 	movw	r3, #5528	@ 0x1598
 801801a:	fb01 f303 	mul.w	r3, r1, r3
 801801e:	4413      	add	r3, r2
 8018020:	4a35      	ldr	r2, [pc, #212]	@ (80180f8 <USBD_VND_TxCplt+0x360>)
 8018022:	4413      	add	r3, r2
 8018024:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    if(ch==0){ dbg_tx_sent++; dbg_sent_ch0_total++; dbg_sent_seq_adc0++; vnd_total_tx_samples += (uint64_t)cf->samples; }
 8018028:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801802c:	2b00      	cmp	r3, #0
 801802e:	d16d      	bne.n	801810c <USBD_VND_TxCplt+0x374>
 8018030:	4b32      	ldr	r3, [pc, #200]	@ (80180fc <USBD_VND_TxCplt+0x364>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	3301      	adds	r3, #1
 8018036:	4a31      	ldr	r2, [pc, #196]	@ (80180fc <USBD_VND_TxCplt+0x364>)
 8018038:	6013      	str	r3, [r2, #0]
 801803a:	4b31      	ldr	r3, [pc, #196]	@ (8018100 <USBD_VND_TxCplt+0x368>)
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	3301      	adds	r3, #1
 8018040:	4a2f      	ldr	r2, [pc, #188]	@ (8018100 <USBD_VND_TxCplt+0x368>)
 8018042:	6013      	str	r3, [r2, #0]
 8018044:	4b2f      	ldr	r3, [pc, #188]	@ (8018104 <USBD_VND_TxCplt+0x36c>)
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	3301      	adds	r3, #1
 801804a:	4a2e      	ldr	r2, [pc, #184]	@ (8018104 <USBD_VND_TxCplt+0x36c>)
 801804c:	6013      	str	r3, [r2, #0]
 801804e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8018052:	885b      	ldrh	r3, [r3, #2]
 8018054:	b29b      	uxth	r3, r3
 8018056:	2200      	movs	r2, #0
 8018058:	64bb      	str	r3, [r7, #72]	@ 0x48
 801805a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801805c:	4b2a      	ldr	r3, [pc, #168]	@ (8018108 <USBD_VND_TxCplt+0x370>)
 801805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018062:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8018066:	4621      	mov	r1, r4
 8018068:	1889      	adds	r1, r1, r2
 801806a:	6439      	str	r1, [r7, #64]	@ 0x40
 801806c:	4629      	mov	r1, r5
 801806e:	eb43 0101 	adc.w	r1, r3, r1
 8018072:	6479      	str	r1, [r7, #68]	@ 0x44
 8018074:	4b24      	ldr	r3, [pc, #144]	@ (8018108 <USBD_VND_TxCplt+0x370>)
 8018076:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801807a:	e9c3 1200 	strd	r1, r2, [r3]
 801807e:	e06c      	b.n	801815a <USBD_VND_TxCplt+0x3c2>
 8018080:	24000050 	.word	0x24000050
 8018084:	2400dbe8 	.word	0x2400dbe8
 8018088:	2400003b 	.word	0x2400003b
 801808c:	2400dbb8 	.word	0x2400dbb8
 8018090:	2400dbb9 	.word	0x2400dbb9
 8018094:	2400dbf4 	.word	0x2400dbf4
 8018098:	2400dc18 	.word	0x2400dc18
 801809c:	2400dc30 	.word	0x2400dc30
 80180a0:	2400dc55 	.word	0x2400dc55
 80180a4:	2400dc56 	.word	0x2400dc56
 80180a8:	2400dc28 	.word	0x2400dc28
 80180ac:	2400dc29 	.word	0x2400dc29
 80180b0:	2400dc2c 	.word	0x2400dc2c
 80180b4:	2400dc20 	.word	0x2400dc20
 80180b8:	2400dc21 	.word	0x2400dc21
 80180bc:	2400dc24 	.word	0x2400dc24
 80180c0:	2400dc59 	.word	0x2400dc59
 80180c4:	2400dc58 	.word	0x2400dc58
 80180c8:	2400dba4 	.word	0x2400dba4
 80180cc:	2400dcf1 	.word	0x2400dcf1
 80180d0:	24019ffa 	.word	0x24019ffa
 80180d4:	2400dbba 	.word	0x2400dbba
 80180d8:	2400dbbb 	.word	0x2400dbbb
 80180dc:	58020c00 	.word	0x58020c00
 80180e0:	2400dc48 	.word	0x2400dc48
 80180e4:	0801d14c 	.word	0x0801d14c
 80180e8:	2400dc50 	.word	0x2400dc50
 80180ec:	2400dc00 	.word	0x2400dc00
 80180f0:	2400dc51 	.word	0x2400dc51
 80180f4:	2400003c 	.word	0x2400003c
 80180f8:	2400f338 	.word	0x2400f338
 80180fc:	2400dbdc 	.word	0x2400dbdc
 8018100:	2400dbe0 	.word	0x2400dbe0
 8018104:	2400dbc0 	.word	0x2400dbc0
 8018108:	2400dbf8 	.word	0x2400dbf8
                    else     { dbg_tx_sent++; dbg_sent_ch1_total++; dbg_sent_seq_adc1++; vnd_total_tx_samples += (uint64_t)cf->samples; }
 801810c:	4ba5      	ldr	r3, [pc, #660]	@ (80183a4 <USBD_VND_TxCplt+0x60c>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	3301      	adds	r3, #1
 8018112:	4aa4      	ldr	r2, [pc, #656]	@ (80183a4 <USBD_VND_TxCplt+0x60c>)
 8018114:	6013      	str	r3, [r2, #0]
 8018116:	4ba4      	ldr	r3, [pc, #656]	@ (80183a8 <USBD_VND_TxCplt+0x610>)
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	3301      	adds	r3, #1
 801811c:	4aa2      	ldr	r2, [pc, #648]	@ (80183a8 <USBD_VND_TxCplt+0x610>)
 801811e:	6013      	str	r3, [r2, #0]
 8018120:	4ba2      	ldr	r3, [pc, #648]	@ (80183ac <USBD_VND_TxCplt+0x614>)
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	3301      	adds	r3, #1
 8018126:	4aa1      	ldr	r2, [pc, #644]	@ (80183ac <USBD_VND_TxCplt+0x614>)
 8018128:	6013      	str	r3, [r2, #0]
 801812a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801812e:	885b      	ldrh	r3, [r3, #2]
 8018130:	b29b      	uxth	r3, r3
 8018132:	2200      	movs	r2, #0
 8018134:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018136:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8018138:	4b9d      	ldr	r3, [pc, #628]	@ (80183b0 <USBD_VND_TxCplt+0x618>)
 801813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801813e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8018142:	4621      	mov	r1, r4
 8018144:	1889      	adds	r1, r1, r2
 8018146:	6339      	str	r1, [r7, #48]	@ 0x30
 8018148:	4629      	mov	r1, r5
 801814a:	eb43 0101 	adc.w	r1, r3, r1
 801814e:	6379      	str	r1, [r7, #52]	@ 0x34
 8018150:	4b97      	ldr	r3, [pc, #604]	@ (80183b0 <USBD_VND_TxCplt+0x618>)
 8018152:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8018156:	e9c3 1200 	strd	r1, r2, [r3]
                    /* Если A-only/B-only — закрываем сразу пару */
                    if((vnd_ch_mode == 0 && ch == 0) || (vnd_ch_mode == 1 && ch == 1)){
 801815a:	4b96      	ldr	r3, [pc, #600]	@ (80183b4 <USBD_VND_TxCplt+0x61c>)
 801815c:	781b      	ldrb	r3, [r3, #0]
 801815e:	b2db      	uxtb	r3, r3
 8018160:	2b00      	cmp	r3, #0
 8018162:	d103      	bne.n	801816c <USBD_VND_TxCplt+0x3d4>
 8018164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8018168:	2b00      	cmp	r3, #0
 801816a:	d008      	beq.n	801817e <USBD_VND_TxCplt+0x3e6>
 801816c:	4b91      	ldr	r3, [pc, #580]	@ (80183b4 <USBD_VND_TxCplt+0x61c>)
 801816e:	781b      	ldrb	r3, [r3, #0]
 8018170:	b2db      	uxtb	r3, r3
 8018172:	2b01      	cmp	r3, #1
 8018174:	d163      	bne.n	801823e <USBD_VND_TxCplt+0x4a6>
 8018176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801817a:	2b01      	cmp	r3, #1
 801817c:	d15f      	bne.n	801823e <USBD_VND_TxCplt+0x4a6>
                        g_frames[(uint8_t)idx][0].st = FB_FILL;
 801817e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018182:	b2db      	uxtb	r3, r3
 8018184:	4619      	mov	r1, r3
 8018186:	4a8c      	ldr	r2, [pc, #560]	@ (80183b8 <USBD_VND_TxCplt+0x620>)
 8018188:	f241 5398 	movw	r3, #5528	@ 0x1598
 801818c:	fb01 f303 	mul.w	r3, r1, r3
 8018190:	4413      	add	r3, r2
 8018192:	2200      	movs	r2, #0
 8018194:	701a      	strb	r2, [r3, #0]
                        g_frames[(uint8_t)idx][1].st = FB_FILL;
 8018196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801819a:	b2db      	uxtb	r3, r3
 801819c:	4619      	mov	r1, r3
 801819e:	4a86      	ldr	r2, [pc, #536]	@ (80183b8 <USBD_VND_TxCplt+0x620>)
 80181a0:	f241 5398 	movw	r3, #5528	@ 0x1598
 80181a4:	fb01 f303 	mul.w	r3, r1, r3
 80181a8:	4413      	add	r3, r2
 80181aa:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80181ae:	2200      	movs	r2, #0
 80181b0:	701a      	strb	r2, [r3, #0]
                        sending_channel = 0xFF;
 80181b2:	4b82      	ldr	r3, [pc, #520]	@ (80183bc <USBD_VND_TxCplt+0x624>)
 80181b4:	22ff      	movs	r2, #255	@ 0xff
 80181b6:	701a      	strb	r2, [r3, #0]
                        /* Сдвигаем head до первой непустой пары, инкрементируем seq */
                        while(g_frames[pair_send_idx][0].st == FB_FILL && g_frames[pair_send_idx][1].st == FB_FILL){
 80181b8:	e01a      	b.n	80181f0 <USBD_VND_TxCplt+0x458>
                            pair_send_idx = (uint8_t)((pair_send_idx + 1u) % VND_PAIR_BUFFERS);
 80181ba:	4b81      	ldr	r3, [pc, #516]	@ (80183c0 <USBD_VND_TxCplt+0x628>)
 80181bc:	781b      	ldrb	r3, [r3, #0]
 80181be:	3301      	adds	r3, #1
 80181c0:	b2db      	uxtb	r3, r3
 80181c2:	f003 0307 	and.w	r3, r3, #7
 80181c6:	b2da      	uxtb	r2, r3
 80181c8:	4b7d      	ldr	r3, [pc, #500]	@ (80183c0 <USBD_VND_TxCplt+0x628>)
 80181ca:	701a      	strb	r2, [r3, #0]
                            stream_seq++; dbg_produced_seq++; if(!first_pair_done){ first_pair_done = 1; }
 80181cc:	4b7d      	ldr	r3, [pc, #500]	@ (80183c4 <USBD_VND_TxCplt+0x62c>)
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	3301      	adds	r3, #1
 80181d2:	4a7c      	ldr	r2, [pc, #496]	@ (80183c4 <USBD_VND_TxCplt+0x62c>)
 80181d4:	6013      	str	r3, [r2, #0]
 80181d6:	4b7c      	ldr	r3, [pc, #496]	@ (80183c8 <USBD_VND_TxCplt+0x630>)
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	3301      	adds	r3, #1
 80181dc:	4a7a      	ldr	r2, [pc, #488]	@ (80183c8 <USBD_VND_TxCplt+0x630>)
 80181de:	6013      	str	r3, [r2, #0]
 80181e0:	4b7a      	ldr	r3, [pc, #488]	@ (80183cc <USBD_VND_TxCplt+0x634>)
 80181e2:	781b      	ldrb	r3, [r3, #0]
 80181e4:	b2db      	uxtb	r3, r3
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d102      	bne.n	80181f0 <USBD_VND_TxCplt+0x458>
 80181ea:	4b78      	ldr	r3, [pc, #480]	@ (80183cc <USBD_VND_TxCplt+0x634>)
 80181ec:	2201      	movs	r2, #1
 80181ee:	701a      	strb	r2, [r3, #0]
                        while(g_frames[pair_send_idx][0].st == FB_FILL && g_frames[pair_send_idx][1].st == FB_FILL){
 80181f0:	4b73      	ldr	r3, [pc, #460]	@ (80183c0 <USBD_VND_TxCplt+0x628>)
 80181f2:	781b      	ldrb	r3, [r3, #0]
 80181f4:	4619      	mov	r1, r3
 80181f6:	4a70      	ldr	r2, [pc, #448]	@ (80183b8 <USBD_VND_TxCplt+0x620>)
 80181f8:	f241 5398 	movw	r3, #5528	@ 0x1598
 80181fc:	fb01 f303 	mul.w	r3, r1, r3
 8018200:	4413      	add	r3, r2
 8018202:	781b      	ldrb	r3, [r3, #0]
 8018204:	b2db      	uxtb	r3, r3
 8018206:	2b00      	cmp	r3, #0
 8018208:	d10e      	bne.n	8018228 <USBD_VND_TxCplt+0x490>
 801820a:	4b6d      	ldr	r3, [pc, #436]	@ (80183c0 <USBD_VND_TxCplt+0x628>)
 801820c:	781b      	ldrb	r3, [r3, #0]
 801820e:	4619      	mov	r1, r3
 8018210:	4a69      	ldr	r2, [pc, #420]	@ (80183b8 <USBD_VND_TxCplt+0x620>)
 8018212:	f241 5398 	movw	r3, #5528	@ 0x1598
 8018216:	fb01 f303 	mul.w	r3, r1, r3
 801821a:	4413      	add	r3, r2
 801821c:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8018220:	781b      	ldrb	r3, [r3, #0]
 8018222:	b2db      	uxtb	r3, r3
 8018224:	2b00      	cmp	r3, #0
 8018226:	d0c8      	beq.n	80181ba <USBD_VND_TxCplt+0x422>
                        }
                        /* Немедленно инициировать следующую передачу */
                        if(!vnd_ep_busy){ vnd_tx_kick = 1; (void)vnd_async_try_tx(); }
 8018228:	4b69      	ldr	r3, [pc, #420]	@ (80183d0 <USBD_VND_TxCplt+0x638>)
 801822a:	781b      	ldrb	r3, [r3, #0]
 801822c:	b2db      	uxtb	r3, r3
 801822e:	2b00      	cmp	r3, #0
 8018230:	d14e      	bne.n	80182d0 <USBD_VND_TxCplt+0x538>
 8018232:	4b68      	ldr	r3, [pc, #416]	@ (80183d4 <USBD_VND_TxCplt+0x63c>)
 8018234:	2201      	movs	r2, #1
 8018236:	701a      	strb	r2, [r3, #0]
 8018238:	f7fe f9ec 	bl	8016614 <vnd_async_try_tx>
 801823c:	e048      	b.n	80182d0 <USBD_VND_TxCplt+0x538>
                    } else {
                        /* обычный async для обоих каналов */
                        cf->st = FB_FILL;
 801823e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8018242:	2200      	movs	r2, #0
 8018244:	701a      	strb	r2, [r3, #0]
                        sending_channel = 0xFF;
 8018246:	4b5d      	ldr	r3, [pc, #372]	@ (80183bc <USBD_VND_TxCplt+0x624>)
 8018248:	22ff      	movs	r2, #255	@ 0xff
 801824a:	701a      	strb	r2, [r3, #0]
                        while(g_frames[pair_send_idx][0].st == FB_FILL && g_frames[pair_send_idx][1].st == FB_FILL){
 801824c:	e01a      	b.n	8018284 <USBD_VND_TxCplt+0x4ec>
                            pair_send_idx = (uint8_t)((pair_send_idx + 1u) % VND_PAIR_BUFFERS);
 801824e:	4b5c      	ldr	r3, [pc, #368]	@ (80183c0 <USBD_VND_TxCplt+0x628>)
 8018250:	781b      	ldrb	r3, [r3, #0]
 8018252:	3301      	adds	r3, #1
 8018254:	b2db      	uxtb	r3, r3
 8018256:	f003 0307 	and.w	r3, r3, #7
 801825a:	b2da      	uxtb	r2, r3
 801825c:	4b58      	ldr	r3, [pc, #352]	@ (80183c0 <USBD_VND_TxCplt+0x628>)
 801825e:	701a      	strb	r2, [r3, #0]
                            stream_seq++; dbg_produced_seq++; if(!first_pair_done){ first_pair_done = 1; }
 8018260:	4b58      	ldr	r3, [pc, #352]	@ (80183c4 <USBD_VND_TxCplt+0x62c>)
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	3301      	adds	r3, #1
 8018266:	4a57      	ldr	r2, [pc, #348]	@ (80183c4 <USBD_VND_TxCplt+0x62c>)
 8018268:	6013      	str	r3, [r2, #0]
 801826a:	4b57      	ldr	r3, [pc, #348]	@ (80183c8 <USBD_VND_TxCplt+0x630>)
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	3301      	adds	r3, #1
 8018270:	4a55      	ldr	r2, [pc, #340]	@ (80183c8 <USBD_VND_TxCplt+0x630>)
 8018272:	6013      	str	r3, [r2, #0]
 8018274:	4b55      	ldr	r3, [pc, #340]	@ (80183cc <USBD_VND_TxCplt+0x634>)
 8018276:	781b      	ldrb	r3, [r3, #0]
 8018278:	b2db      	uxtb	r3, r3
 801827a:	2b00      	cmp	r3, #0
 801827c:	d102      	bne.n	8018284 <USBD_VND_TxCplt+0x4ec>
 801827e:	4b53      	ldr	r3, [pc, #332]	@ (80183cc <USBD_VND_TxCplt+0x634>)
 8018280:	2201      	movs	r2, #1
 8018282:	701a      	strb	r2, [r3, #0]
                        while(g_frames[pair_send_idx][0].st == FB_FILL && g_frames[pair_send_idx][1].st == FB_FILL){
 8018284:	4b4e      	ldr	r3, [pc, #312]	@ (80183c0 <USBD_VND_TxCplt+0x628>)
 8018286:	781b      	ldrb	r3, [r3, #0]
 8018288:	4619      	mov	r1, r3
 801828a:	4a4b      	ldr	r2, [pc, #300]	@ (80183b8 <USBD_VND_TxCplt+0x620>)
 801828c:	f241 5398 	movw	r3, #5528	@ 0x1598
 8018290:	fb01 f303 	mul.w	r3, r1, r3
 8018294:	4413      	add	r3, r2
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	b2db      	uxtb	r3, r3
 801829a:	2b00      	cmp	r3, #0
 801829c:	d10e      	bne.n	80182bc <USBD_VND_TxCplt+0x524>
 801829e:	4b48      	ldr	r3, [pc, #288]	@ (80183c0 <USBD_VND_TxCplt+0x628>)
 80182a0:	781b      	ldrb	r3, [r3, #0]
 80182a2:	4619      	mov	r1, r3
 80182a4:	4a44      	ldr	r2, [pc, #272]	@ (80183b8 <USBD_VND_TxCplt+0x620>)
 80182a6:	f241 5398 	movw	r3, #5528	@ 0x1598
 80182aa:	fb01 f303 	mul.w	r3, r1, r3
 80182ae:	4413      	add	r3, r2
 80182b0:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80182b4:	781b      	ldrb	r3, [r3, #0]
 80182b6:	b2db      	uxtb	r3, r3
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d0c8      	beq.n	801824e <USBD_VND_TxCplt+0x4b6>
                        }
                        if(!vnd_ep_busy){ vnd_tx_kick = 1; (void)vnd_async_try_tx(); }
 80182bc:	4b44      	ldr	r3, [pc, #272]	@ (80183d0 <USBD_VND_TxCplt+0x638>)
 80182be:	781b      	ldrb	r3, [r3, #0]
 80182c0:	b2db      	uxtb	r3, r3
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d104      	bne.n	80182d0 <USBD_VND_TxCplt+0x538>
 80182c6:	4b43      	ldr	r3, [pc, #268]	@ (80183d4 <USBD_VND_TxCplt+0x63c>)
 80182c8:	2201      	movs	r2, #1
 80182ca:	701a      	strb	r2, [r3, #0]
 80182cc:	f7fe f9a2 	bl	8016614 <vnd_async_try_tx>
                    }
                }
            }
        }
        if(!vnd_ep_busy){ vnd_tx_kick = 1; (void)vnd_async_try_tx(); }
 80182d0:	4b3f      	ldr	r3, [pc, #252]	@ (80183d0 <USBD_VND_TxCplt+0x638>)
 80182d2:	781b      	ldrb	r3, [r3, #0]
 80182d4:	b2db      	uxtb	r3, r3
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	f040 8350 	bne.w	801897c <USBD_VND_TxCplt+0xbe4>
 80182dc:	4b3d      	ldr	r3, [pc, #244]	@ (80183d4 <USBD_VND_TxCplt+0x63c>)
 80182de:	2201      	movs	r2, #1
 80182e0:	701a      	strb	r2, [r3, #0]
 80182e2:	f7fe f997 	bl	8016614 <vnd_async_try_tx>
        return;
 80182e6:	e349      	b.n	801897c <USBD_VND_TxCplt+0xbe4>
    }

    /* Диагностический режим: используем eff_flags для точной классификации (устраняет гонку по sending_channel) */
    if(diag_mode_active){
 80182e8:	4b3b      	ldr	r3, [pc, #236]	@ (80183d8 <USBD_VND_TxCplt+0x640>)
 80182ea:	781b      	ldrb	r3, [r3, #0]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	f000 80f2 	beq.w	80184d6 <USBD_VND_TxCplt+0x73e>
        if(!eff_is_frame){
 80182f2:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d103      	bne.n	8018302 <USBD_VND_TxCplt+0x56a>
            /* STAT/ZLP — просто продолжим */
            vnd_tx_kick = 1; return;
 80182fa:	4b36      	ldr	r3, [pc, #216]	@ (80183d4 <USBD_VND_TxCplt+0x63c>)
 80182fc:	2201      	movs	r2, #1
 80182fe:	701a      	strb	r2, [r3, #0]
 8018300:	e347      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
        }
        if(eff_flags == 0x01){
 8018302:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8018306:	2b01      	cmp	r3, #1
 8018308:	d176      	bne.n	80183f8 <USBD_VND_TxCplt+0x660>
            /* Завершился A: считаем и просим отправить B */
            dbg_tx_sent++; dbg_sent_ch0_total++; dbg_sent_seq_adc0++;
 801830a:	4b26      	ldr	r3, [pc, #152]	@ (80183a4 <USBD_VND_TxCplt+0x60c>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	3301      	adds	r3, #1
 8018310:	4a24      	ldr	r2, [pc, #144]	@ (80183a4 <USBD_VND_TxCplt+0x60c>)
 8018312:	6013      	str	r3, [r2, #0]
 8018314:	4b31      	ldr	r3, [pc, #196]	@ (80183dc <USBD_VND_TxCplt+0x644>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	3301      	adds	r3, #1
 801831a:	4a30      	ldr	r2, [pc, #192]	@ (80183dc <USBD_VND_TxCplt+0x644>)
 801831c:	6013      	str	r3, [r2, #0]
 801831e:	4b30      	ldr	r3, [pc, #192]	@ (80183e0 <USBD_VND_TxCplt+0x648>)
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	3301      	adds	r3, #1
 8018324:	4a2e      	ldr	r2, [pc, #184]	@ (80183e0 <USBD_VND_TxCplt+0x648>)
 8018326:	6013      	str	r3, [r2, #0]
            /* В DIAG считаем семплы по текущему размеру кадра */
            vnd_total_tx_samples += (uint64_t)((cur_samples_per_frame != 0) ? cur_samples_per_frame : diag_samples);
 8018328:	4b2e      	ldr	r3, [pc, #184]	@ (80183e4 <USBD_VND_TxCplt+0x64c>)
 801832a:	881b      	ldrh	r3, [r3, #0]
 801832c:	b29b      	uxth	r3, r3
 801832e:	2b00      	cmp	r3, #0
 8018330:	d007      	beq.n	8018342 <USBD_VND_TxCplt+0x5aa>
 8018332:	4b2c      	ldr	r3, [pc, #176]	@ (80183e4 <USBD_VND_TxCplt+0x64c>)
 8018334:	881b      	ldrh	r3, [r3, #0]
 8018336:	b29b      	uxth	r3, r3
 8018338:	b29b      	uxth	r3, r3
 801833a:	2200      	movs	r2, #0
 801833c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801833e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8018340:	e005      	b.n	801834e <USBD_VND_TxCplt+0x5b6>
 8018342:	4b29      	ldr	r3, [pc, #164]	@ (80183e8 <USBD_VND_TxCplt+0x650>)
 8018344:	881b      	ldrh	r3, [r3, #0]
 8018346:	b29b      	uxth	r3, r3
 8018348:	2200      	movs	r2, #0
 801834a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801834c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801834e:	4b18      	ldr	r3, [pc, #96]	@ (80183b0 <USBD_VND_TxCplt+0x618>)
 8018350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018354:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8018358:	4621      	mov	r1, r4
 801835a:	1889      	adds	r1, r1, r2
 801835c:	62b9      	str	r1, [r7, #40]	@ 0x28
 801835e:	4629      	mov	r1, r5
 8018360:	eb43 0101 	adc.w	r1, r3, r1
 8018364:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8018366:	4b12      	ldr	r3, [pc, #72]	@ (80183b0 <USBD_VND_TxCplt+0x618>)
 8018368:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801836c:	e9c3 1200 	strd	r1, r2, [r3]
            sending_channel = 0; /* завершили A */
 8018370:	4b12      	ldr	r3, [pc, #72]	@ (80183bc <USBD_VND_TxCplt+0x624>)
 8018372:	2200      	movs	r2, #0
 8018374:	701a      	strb	r2, [r3, #0]
            pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8018376:	4b1d      	ldr	r3, [pc, #116]	@ (80183ec <USBD_VND_TxCplt+0x654>)
 8018378:	2201      	movs	r2, #1
 801837a:	701a      	strb	r2, [r3, #0]
 801837c:	f7ec fdf6 	bl	8004f6c <HAL_GetTick>
 8018380:	4603      	mov	r3, r0
 8018382:	4a1b      	ldr	r2, [pc, #108]	@ (80183f0 <USBD_VND_TxCplt+0x658>)
 8018384:	6013      	str	r3, [r2, #0]
            /* Зафиксируем seq этой пары для B */
            diag_current_pair_seq = eff_seq;
 8018386:	4a1b      	ldr	r2, [pc, #108]	@ (80183f4 <USBD_VND_TxCplt+0x65c>)
 8018388:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801838c:	6013      	str	r3, [r2, #0]
            /* Немедленно пытаемся отправить B, чтобы убрать паузу между A и B */
            if(!vnd_try_send_B_immediate()){
 801838e:	f7fe fcdd 	bl	8016d4c <vnd_try_send_B_immediate>
 8018392:	4603      	mov	r3, r0
 8018394:	2b00      	cmp	r3, #0
 8018396:	f040 82f3 	bne.w	8018980 <USBD_VND_TxCplt+0xbe8>
                /* печать в CDC отключена для максимальной скорости */
                vnd_tx_kick = 1; return;
 801839a:	4b0e      	ldr	r3, [pc, #56]	@ (80183d4 <USBD_VND_TxCplt+0x63c>)
 801839c:	2201      	movs	r2, #1
 801839e:	701a      	strb	r2, [r3, #0]
 80183a0:	e2f7      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
 80183a2:	bf00      	nop
 80183a4:	2400dbdc 	.word	0x2400dbdc
 80183a8:	2400dbe4 	.word	0x2400dbe4
 80183ac:	2400dbc4 	.word	0x2400dbc4
 80183b0:	2400dbf8 	.word	0x2400dbf8
 80183b4:	24000040 	.word	0x24000040
 80183b8:	2400f338 	.word	0x2400f338
 80183bc:	24000050 	.word	0x24000050
 80183c0:	24019ff9 	.word	0x24019ff9
 80183c4:	2400dba8 	.word	0x2400dba8
 80183c8:	2400dbbc 	.word	0x2400dbbc
 80183cc:	2400dc40 	.word	0x2400dc40
 80183d0:	2400dbb8 	.word	0x2400dbb8
 80183d4:	2400dc50 	.word	0x2400dc50
 80183d8:	2400dcf1 	.word	0x2400dcf1
 80183dc:	2400dbe0 	.word	0x2400dbe0
 80183e0:	2400dbc0 	.word	0x2400dbc0
 80183e4:	2400dbac 	.word	0x2400dbac
 80183e8:	24000044 	.word	0x24000044
 80183ec:	24019ffa 	.word	0x24019ffa
 80183f0:	24019ffc 	.word	0x24019ffc
 80183f4:	2400004c 	.word	0x2400004c
            } else {
                /* B пошёл в полёт — дальше обычная обработка после его завершения */
                return;
            }
        } else if(eff_flags == 0x02){
 80183f8:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80183fc:	2b02      	cmp	r3, #2
 80183fe:	d15b      	bne.n	80184b8 <USBD_VND_TxCplt+0x720>
            /* Завершился B: закрываем пару, двигаем seq */
            dbg_tx_sent++; dbg_sent_ch1_total++; dbg_sent_seq_adc1++;
 8018400:	4b74      	ldr	r3, [pc, #464]	@ (80185d4 <USBD_VND_TxCplt+0x83c>)
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	3301      	adds	r3, #1
 8018406:	4a73      	ldr	r2, [pc, #460]	@ (80185d4 <USBD_VND_TxCplt+0x83c>)
 8018408:	6013      	str	r3, [r2, #0]
 801840a:	4b73      	ldr	r3, [pc, #460]	@ (80185d8 <USBD_VND_TxCplt+0x840>)
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	3301      	adds	r3, #1
 8018410:	4a71      	ldr	r2, [pc, #452]	@ (80185d8 <USBD_VND_TxCplt+0x840>)
 8018412:	6013      	str	r3, [r2, #0]
 8018414:	4b71      	ldr	r3, [pc, #452]	@ (80185dc <USBD_VND_TxCplt+0x844>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	3301      	adds	r3, #1
 801841a:	4a70      	ldr	r2, [pc, #448]	@ (80185dc <USBD_VND_TxCplt+0x844>)
 801841c:	6013      	str	r3, [r2, #0]
            vnd_total_tx_samples += (uint64_t)((cur_samples_per_frame != 0) ? cur_samples_per_frame : diag_samples);
 801841e:	4b70      	ldr	r3, [pc, #448]	@ (80185e0 <USBD_VND_TxCplt+0x848>)
 8018420:	881b      	ldrh	r3, [r3, #0]
 8018422:	b29b      	uxth	r3, r3
 8018424:	2b00      	cmp	r3, #0
 8018426:	d007      	beq.n	8018438 <USBD_VND_TxCplt+0x6a0>
 8018428:	4b6d      	ldr	r3, [pc, #436]	@ (80185e0 <USBD_VND_TxCplt+0x848>)
 801842a:	881b      	ldrh	r3, [r3, #0]
 801842c:	b29b      	uxth	r3, r3
 801842e:	b29b      	uxth	r3, r3
 8018430:	2200      	movs	r2, #0
 8018432:	653b      	str	r3, [r7, #80]	@ 0x50
 8018434:	657a      	str	r2, [r7, #84]	@ 0x54
 8018436:	e005      	b.n	8018444 <USBD_VND_TxCplt+0x6ac>
 8018438:	4b6a      	ldr	r3, [pc, #424]	@ (80185e4 <USBD_VND_TxCplt+0x84c>)
 801843a:	881b      	ldrh	r3, [r3, #0]
 801843c:	b29b      	uxth	r3, r3
 801843e:	2200      	movs	r2, #0
 8018440:	653b      	str	r3, [r7, #80]	@ 0x50
 8018442:	657a      	str	r2, [r7, #84]	@ 0x54
 8018444:	4b68      	ldr	r3, [pc, #416]	@ (80185e8 <USBD_VND_TxCplt+0x850>)
 8018446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801844a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 801844e:	4621      	mov	r1, r4
 8018450:	1889      	adds	r1, r1, r2
 8018452:	6239      	str	r1, [r7, #32]
 8018454:	4629      	mov	r1, r5
 8018456:	eb43 0101 	adc.w	r1, r3, r1
 801845a:	6279      	str	r1, [r7, #36]	@ 0x24
 801845c:	4b62      	ldr	r3, [pc, #392]	@ (80185e8 <USBD_VND_TxCplt+0x850>)
 801845e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8018462:	e9c3 1200 	strd	r1, r2, [r3]
            stream_seq++; dbg_produced_seq++;
 8018466:	4b61      	ldr	r3, [pc, #388]	@ (80185ec <USBD_VND_TxCplt+0x854>)
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	3301      	adds	r3, #1
 801846c:	4a5f      	ldr	r2, [pc, #380]	@ (80185ec <USBD_VND_TxCplt+0x854>)
 801846e:	6013      	str	r3, [r2, #0]
 8018470:	4b5f      	ldr	r3, [pc, #380]	@ (80185f0 <USBD_VND_TxCplt+0x858>)
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	3301      	adds	r3, #1
 8018476:	4a5e      	ldr	r2, [pc, #376]	@ (80185f0 <USBD_VND_TxCplt+0x858>)
 8018478:	6013      	str	r3, [r2, #0]
            pending_B = 0; pending_B_since_ms = 0; sending_channel = 0xFF;
 801847a:	4b5e      	ldr	r3, [pc, #376]	@ (80185f4 <USBD_VND_TxCplt+0x85c>)
 801847c:	2200      	movs	r2, #0
 801847e:	701a      	strb	r2, [r3, #0]
 8018480:	4b5d      	ldr	r3, [pc, #372]	@ (80185f8 <USBD_VND_TxCplt+0x860>)
 8018482:	2200      	movs	r2, #0
 8018484:	601a      	str	r2, [r3, #0]
 8018486:	4b5d      	ldr	r3, [pc, #372]	@ (80185fc <USBD_VND_TxCplt+0x864>)
 8018488:	22ff      	movs	r2, #255	@ 0xff
 801848a:	701a      	strb	r2, [r3, #0]
            diag_prepared_seq = 0xFFFFFFFFu; /* заставим подготовить новую пару */
 801848c:	4b5c      	ldr	r3, [pc, #368]	@ (8018600 <USBD_VND_TxCplt+0x868>)
 801848e:	f04f 32ff 	mov.w	r2, #4294967295
 8018492:	601a      	str	r2, [r3, #0]
            if(!first_pair_done){ first_pair_done = 1; }
 8018494:	4b5b      	ldr	r3, [pc, #364]	@ (8018604 <USBD_VND_TxCplt+0x86c>)
 8018496:	781b      	ldrb	r3, [r3, #0]
 8018498:	b2db      	uxtb	r3, r3
 801849a:	2b00      	cmp	r3, #0
 801849c:	d102      	bne.n	80184a4 <USBD_VND_TxCplt+0x70c>
 801849e:	4b59      	ldr	r3, [pc, #356]	@ (8018604 <USBD_VND_TxCplt+0x86c>)
 80184a0:	2201      	movs	r2, #1
 80184a2:	701a      	strb	r2, [r3, #0]
            /* Сразу пытаемся отправить следующий A новой пары */
            if(!vnd_try_send_A_nextpair_immediate()){
 80184a4:	f7fe fd10 	bl	8016ec8 <vnd_try_send_A_nextpair_immediate>
 80184a8:	4603      	mov	r3, r0
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	f040 826a 	bne.w	8018984 <USBD_VND_TxCplt+0xbec>
                /* печать в CDC отключена для максимальной скорости */
                vnd_tx_kick = 1; return;
 80184b0:	4b55      	ldr	r3, [pc, #340]	@ (8018608 <USBD_VND_TxCplt+0x870>)
 80184b2:	2201      	movs	r2, #1
 80184b4:	701a      	strb	r2, [r3, #0]
 80184b6:	e26c      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
            } else {
                return;
            }
        } else if(eff_flags == 0x80){
 80184b8:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80184bc:	2b80      	cmp	r3, #128	@ 0x80
 80184be:	d106      	bne.n	80184ce <USBD_VND_TxCplt+0x736>
            /* TEST */
            sending_channel = 0xFF;
 80184c0:	4b4e      	ldr	r3, [pc, #312]	@ (80185fc <USBD_VND_TxCplt+0x864>)
 80184c2:	22ff      	movs	r2, #255	@ 0xff
 80184c4:	701a      	strb	r2, [r3, #0]
            vnd_tx_kick = 1; return;
 80184c6:	4b50      	ldr	r3, [pc, #320]	@ (8018608 <USBD_VND_TxCplt+0x870>)
 80184c8:	2201      	movs	r2, #1
 80184ca:	701a      	strb	r2, [r3, #0]
 80184cc:	e261      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
        } else {
            /* неизвестный флаг — игнорируем */
            vnd_tx_kick = 1; return;
 80184ce:	4b4e      	ldr	r3, [pc, #312]	@ (8018608 <USBD_VND_TxCplt+0x870>)
 80184d0:	2201      	movs	r2, #1
 80184d2:	701a      	strb	r2, [r3, #0]
 80184d4:	e25d      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
        }
    }

    /* Ниже — обычная ветка для полнофункционального режима */
    if(!eff_is_frame){
 80184d6:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d16b      	bne.n	80185b6 <USBD_VND_TxCplt+0x81e>
        /* STAT или иной служебный пакет — используем предыдущее состояние канала как подсказку */
        if(prev_sending == 0){
 80184de:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d113      	bne.n	801850e <USBD_VND_TxCplt+0x776>
            if(!pending_B){ pending_B = 1; pending_B_since_ms = HAL_GetTick(); VND_LOG("GUARD(NON-FRAME): pending_B"); }
 80184e6:	4b43      	ldr	r3, [pc, #268]	@ (80185f4 <USBD_VND_TxCplt+0x85c>)
 80184e8:	781b      	ldrb	r3, [r3, #0]
 80184ea:	b2db      	uxtb	r3, r3
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d107      	bne.n	8018500 <USBD_VND_TxCplt+0x768>
 80184f0:	4b40      	ldr	r3, [pc, #256]	@ (80185f4 <USBD_VND_TxCplt+0x85c>)
 80184f2:	2201      	movs	r2, #1
 80184f4:	701a      	strb	r2, [r3, #0]
 80184f6:	f7ec fd39 	bl	8004f6c <HAL_GetTick>
 80184fa:	4603      	mov	r3, r0
 80184fc:	4a3e      	ldr	r2, [pc, #248]	@ (80185f8 <USBD_VND_TxCplt+0x860>)
 80184fe:	6013      	str	r3, [r2, #0]
            sending_channel = 0xFF; vnd_tx_kick = 1; return;
 8018500:	4b3e      	ldr	r3, [pc, #248]	@ (80185fc <USBD_VND_TxCplt+0x864>)
 8018502:	22ff      	movs	r2, #255	@ 0xff
 8018504:	701a      	strb	r2, [r3, #0]
 8018506:	4b40      	ldr	r3, [pc, #256]	@ (8018608 <USBD_VND_TxCplt+0x870>)
 8018508:	2201      	movs	r2, #1
 801850a:	701a      	strb	r2, [r3, #0]
 801850c:	e241      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
        } else if(prev_sending == 1){
 801850e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8018512:	2b01      	cmp	r3, #1
 8018514:	d148      	bne.n	80185a8 <USBD_VND_TxCplt+0x810>
            /* Считаем, что завершился B: закрываем пару безопасно */
        ChanFrame *f0 = &g_frames[pair_send_idx][0];
 8018516:	4b3d      	ldr	r3, [pc, #244]	@ (801860c <USBD_VND_TxCplt+0x874>)
 8018518:	781b      	ldrb	r3, [r3, #0]
 801851a:	461a      	mov	r2, r3
 801851c:	f241 5398 	movw	r3, #5528	@ 0x1598
 8018520:	fb02 f303 	mul.w	r3, r2, r3
 8018524:	4a3a      	ldr	r2, [pc, #232]	@ (8018610 <USBD_VND_TxCplt+0x878>)
 8018526:	4413      	add	r3, r2
 8018528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        ChanFrame *f1 = &g_frames[pair_send_idx][1];
 801852c:	4b37      	ldr	r3, [pc, #220]	@ (801860c <USBD_VND_TxCplt+0x874>)
 801852e:	781b      	ldrb	r3, [r3, #0]
 8018530:	461a      	mov	r2, r3
 8018532:	f241 5398 	movw	r3, #5528	@ 0x1598
 8018536:	fb02 f303 	mul.w	r3, r2, r3
 801853a:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 801853e:	4a34      	ldr	r2, [pc, #208]	@ (8018610 <USBD_VND_TxCplt+0x878>)
 8018540:	4413      	add	r3, r2
 8018542:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        f0->st = f1->st = FB_FILL;
 8018546:	2100      	movs	r1, #0
 8018548:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801854c:	460a      	mov	r2, r1
 801854e:	701a      	strb	r2, [r3, #0]
 8018550:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8018554:	460a      	mov	r2, r1
 8018556:	701a      	strb	r2, [r3, #0]
        pair_send_idx = (pair_send_idx + 1u) % VND_PAIR_BUFFERS;
 8018558:	4b2c      	ldr	r3, [pc, #176]	@ (801860c <USBD_VND_TxCplt+0x874>)
 801855a:	781b      	ldrb	r3, [r3, #0]
 801855c:	3301      	adds	r3, #1
 801855e:	b2db      	uxtb	r3, r3
 8018560:	f003 0307 	and.w	r3, r3, #7
 8018564:	b2da      	uxtb	r2, r3
 8018566:	4b29      	ldr	r3, [pc, #164]	@ (801860c <USBD_VND_TxCplt+0x874>)
 8018568:	701a      	strb	r2, [r3, #0]
        stream_seq++; dbg_produced_seq++;
 801856a:	4b20      	ldr	r3, [pc, #128]	@ (80185ec <USBD_VND_TxCplt+0x854>)
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	3301      	adds	r3, #1
 8018570:	4a1e      	ldr	r2, [pc, #120]	@ (80185ec <USBD_VND_TxCplt+0x854>)
 8018572:	6013      	str	r3, [r2, #0]
 8018574:	4b1e      	ldr	r3, [pc, #120]	@ (80185f0 <USBD_VND_TxCplt+0x858>)
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	3301      	adds	r3, #1
 801857a:	4a1d      	ldr	r2, [pc, #116]	@ (80185f0 <USBD_VND_TxCplt+0x858>)
 801857c:	6013      	str	r3, [r2, #0]
        pending_B = 0; pending_B_since_ms = 0; sending_channel = 0xFF;
 801857e:	4b1d      	ldr	r3, [pc, #116]	@ (80185f4 <USBD_VND_TxCplt+0x85c>)
 8018580:	2200      	movs	r2, #0
 8018582:	701a      	strb	r2, [r3, #0]
 8018584:	4b1c      	ldr	r3, [pc, #112]	@ (80185f8 <USBD_VND_TxCplt+0x860>)
 8018586:	2200      	movs	r2, #0
 8018588:	601a      	str	r2, [r3, #0]
 801858a:	4b1c      	ldr	r3, [pc, #112]	@ (80185fc <USBD_VND_TxCplt+0x864>)
 801858c:	22ff      	movs	r2, #255	@ 0xff
 801858e:	701a      	strb	r2, [r3, #0]
    /* Не планируем задержку следующей пары: передавать сразу при готовности */
            if(!first_pair_done){ first_pair_done = 1; }
 8018590:	4b1c      	ldr	r3, [pc, #112]	@ (8018604 <USBD_VND_TxCplt+0x86c>)
 8018592:	781b      	ldrb	r3, [r3, #0]
 8018594:	b2db      	uxtb	r3, r3
 8018596:	2b00      	cmp	r3, #0
 8018598:	d102      	bne.n	80185a0 <USBD_VND_TxCplt+0x808>
 801859a:	4b1a      	ldr	r3, [pc, #104]	@ (8018604 <USBD_VND_TxCplt+0x86c>)
 801859c:	2201      	movs	r2, #1
 801859e:	701a      	strb	r2, [r3, #0]
            VND_LOG("GUARD(NON-FRAME): assume B done -> advance seq=%lu", (unsigned long)stream_seq);
            vnd_tx_kick = 1; return;
 80185a0:	4b19      	ldr	r3, [pc, #100]	@ (8018608 <USBD_VND_TxCplt+0x870>)
 80185a2:	2201      	movs	r2, #1
 80185a4:	701a      	strb	r2, [r3, #0]
 80185a6:	e1f4      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
        } else {
            sending_channel = 0xFF; vnd_tx_kick = 1; return;
 80185a8:	4b14      	ldr	r3, [pc, #80]	@ (80185fc <USBD_VND_TxCplt+0x864>)
 80185aa:	22ff      	movs	r2, #255	@ 0xff
 80185ac:	701a      	strb	r2, [r3, #0]
 80185ae:	4b16      	ldr	r3, [pc, #88]	@ (8018608 <USBD_VND_TxCplt+0x870>)
 80185b0:	2201      	movs	r2, #1
 80185b2:	701a      	strb	r2, [r3, #0]
 80185b4:	e1ed      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
        }
    }
    uint8_t fl = eff_flags;
 80185b6:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80185ba:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    if(fl == 0x80){
 80185be:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80185c2:	2b80      	cmp	r3, #128	@ 0x80
 80185c4:	d126      	bne.n	8018614 <USBD_VND_TxCplt+0x87c>
        /* TEST */
        sending_channel = 0xFF; /* тест одиночный */
 80185c6:	4b0d      	ldr	r3, [pc, #52]	@ (80185fc <USBD_VND_TxCplt+0x864>)
 80185c8:	22ff      	movs	r2, #255	@ 0xff
 80185ca:	701a      	strb	r2, [r3, #0]
        vnd_tx_kick = 1; return;
 80185cc:	4b0e      	ldr	r3, [pc, #56]	@ (8018608 <USBD_VND_TxCplt+0x870>)
 80185ce:	2201      	movs	r2, #1
 80185d0:	701a      	strb	r2, [r3, #0]
 80185d2:	e1de      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
 80185d4:	2400dbdc 	.word	0x2400dbdc
 80185d8:	2400dbe4 	.word	0x2400dbe4
 80185dc:	2400dbc4 	.word	0x2400dbc4
 80185e0:	2400dbac 	.word	0x2400dbac
 80185e4:	24000044 	.word	0x24000044
 80185e8:	2400dbf8 	.word	0x2400dbf8
 80185ec:	2400dba8 	.word	0x2400dba8
 80185f0:	2400dbbc 	.word	0x2400dbbc
 80185f4:	24019ffa 	.word	0x24019ffa
 80185f8:	24019ffc 	.word	0x24019ffc
 80185fc:	24000050 	.word	0x24000050
 8018600:	24000048 	.word	0x24000048
 8018604:	2400dc40 	.word	0x2400dc40
 8018608:	2400dc50 	.word	0x2400dc50
 801860c:	24019ff9 	.word	0x24019ff9
 8018610:	2400f338 	.word	0x2400f338
    }
    if(fl == 0x01){
 8018614:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8018618:	2b01      	cmp	r3, #1
 801861a:	f040 80a5 	bne.w	8018768 <USBD_VND_TxCplt+0x9d0>
        /* Это канал A */
        if(pending_B){ VND_LOG("WARN A_WHILE_PENDING_B seq=%lu hdr.seq=%lu", (unsigned long)stream_seq, (unsigned long)eff_seq); }
 801861e:	4b9a      	ldr	r3, [pc, #616]	@ (8018888 <USBD_VND_TxCplt+0xaf0>)
 8018620:	781b      	ldrb	r3, [r3, #0]
        if(eff_seq != stream_seq){
 8018622:	4b9a      	ldr	r3, [pc, #616]	@ (801888c <USBD_VND_TxCplt+0xaf4>)
 8018624:	681b      	ldr	r3, [r3, #0]
            VND_LOG("WARN A_SEQ_MISMATCH hdr=%lu stream_seq=%lu", (unsigned long)eff_seq, (unsigned long)stream_seq);
        }
        static uint8_t first_a_txcplt_logged = 0; if(!first_a_txcplt_logged){ first_a_txcplt_logged = 1; VND_LOG("FIRST_A txcplt seq=%lu", (unsigned long)eff_seq); }
 8018626:	4b9a      	ldr	r3, [pc, #616]	@ (8018890 <USBD_VND_TxCplt+0xaf8>)
 8018628:	781b      	ldrb	r3, [r3, #0]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d102      	bne.n	8018634 <USBD_VND_TxCplt+0x89c>
 801862e:	4b98      	ldr	r3, [pc, #608]	@ (8018890 <USBD_VND_TxCplt+0xaf8>)
 8018630:	2201      	movs	r2, #1
 8018632:	701a      	strb	r2, [r3, #0]
        dbg_tx_sent++; dbg_sent_ch0_total++; dbg_sent_seq_adc0++;
 8018634:	4b97      	ldr	r3, [pc, #604]	@ (8018894 <USBD_VND_TxCplt+0xafc>)
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	3301      	adds	r3, #1
 801863a:	4a96      	ldr	r2, [pc, #600]	@ (8018894 <USBD_VND_TxCplt+0xafc>)
 801863c:	6013      	str	r3, [r2, #0]
 801863e:	4b96      	ldr	r3, [pc, #600]	@ (8018898 <USBD_VND_TxCplt+0xb00>)
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	3301      	adds	r3, #1
 8018644:	4a94      	ldr	r2, [pc, #592]	@ (8018898 <USBD_VND_TxCplt+0xb00>)
 8018646:	6013      	str	r3, [r2, #0]
 8018648:	4b94      	ldr	r3, [pc, #592]	@ (801889c <USBD_VND_TxCplt+0xb04>)
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	3301      	adds	r3, #1
 801864e:	4a93      	ldr	r2, [pc, #588]	@ (801889c <USBD_VND_TxCplt+0xb04>)
 8018650:	6013      	str	r3, [r2, #0]
        /* Добавим число сэмплов канала A из текущей пары */
        vnd_total_tx_samples += (uint64_t)g_frames[pair_send_idx][0].samples;
 8018652:	4b93      	ldr	r3, [pc, #588]	@ (80188a0 <USBD_VND_TxCplt+0xb08>)
 8018654:	781b      	ldrb	r3, [r3, #0]
 8018656:	4619      	mov	r1, r3
 8018658:	4a92      	ldr	r2, [pc, #584]	@ (80188a4 <USBD_VND_TxCplt+0xb0c>)
 801865a:	f241 5398 	movw	r3, #5528	@ 0x1598
 801865e:	fb01 f303 	mul.w	r3, r1, r3
 8018662:	4413      	add	r3, r2
 8018664:	3302      	adds	r3, #2
 8018666:	881b      	ldrh	r3, [r3, #0]
 8018668:	b29b      	uxth	r3, r3
 801866a:	2200      	movs	r2, #0
 801866c:	61bb      	str	r3, [r7, #24]
 801866e:	61fa      	str	r2, [r7, #28]
 8018670:	4b8d      	ldr	r3, [pc, #564]	@ (80188a8 <USBD_VND_TxCplt+0xb10>)
 8018672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018676:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 801867a:	4621      	mov	r1, r4
 801867c:	1889      	adds	r1, r1, r2
 801867e:	6139      	str	r1, [r7, #16]
 8018680:	4629      	mov	r1, r5
 8018682:	eb43 0101 	adc.w	r1, r3, r1
 8018686:	6179      	str	r1, [r7, #20]
 8018688:	4b87      	ldr	r3, [pc, #540]	@ (80188a8 <USBD_VND_TxCplt+0xb10>)
 801868a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801868e:	e9c3 1200 	strd	r1, r2, [r3]
        if(vnd_ch_mode == 0){
 8018692:	4b86      	ldr	r3, [pc, #536]	@ (80188ac <USBD_VND_TxCplt+0xb14>)
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	b2db      	uxtb	r3, r3
 8018698:	2b00      	cmp	r3, #0
 801869a:	d145      	bne.n	8018728 <USBD_VND_TxCplt+0x990>
            /* A-only: закрываем пару сразу */
            g_frames[pair_send_idx][0].st = FB_FILL;
 801869c:	4b80      	ldr	r3, [pc, #512]	@ (80188a0 <USBD_VND_TxCplt+0xb08>)
 801869e:	781b      	ldrb	r3, [r3, #0]
 80186a0:	4619      	mov	r1, r3
 80186a2:	4a80      	ldr	r2, [pc, #512]	@ (80188a4 <USBD_VND_TxCplt+0xb0c>)
 80186a4:	f241 5398 	movw	r3, #5528	@ 0x1598
 80186a8:	fb01 f303 	mul.w	r3, r1, r3
 80186ac:	4413      	add	r3, r2
 80186ae:	2200      	movs	r2, #0
 80186b0:	701a      	strb	r2, [r3, #0]
            g_frames[pair_send_idx][1].st = FB_FILL;
 80186b2:	4b7b      	ldr	r3, [pc, #492]	@ (80188a0 <USBD_VND_TxCplt+0xb08>)
 80186b4:	781b      	ldrb	r3, [r3, #0]
 80186b6:	4619      	mov	r1, r3
 80186b8:	4a7a      	ldr	r2, [pc, #488]	@ (80188a4 <USBD_VND_TxCplt+0xb0c>)
 80186ba:	f241 5398 	movw	r3, #5528	@ 0x1598
 80186be:	fb01 f303 	mul.w	r3, r1, r3
 80186c2:	4413      	add	r3, r2
 80186c4:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80186c8:	2200      	movs	r2, #0
 80186ca:	701a      	strb	r2, [r3, #0]
            sending_channel = 0xFF;
 80186cc:	4b78      	ldr	r3, [pc, #480]	@ (80188b0 <USBD_VND_TxCplt+0xb18>)
 80186ce:	22ff      	movs	r2, #255	@ 0xff
 80186d0:	701a      	strb	r2, [r3, #0]
            pending_B = 0; pending_B_since_ms = 0;
 80186d2:	4b6d      	ldr	r3, [pc, #436]	@ (8018888 <USBD_VND_TxCplt+0xaf0>)
 80186d4:	2200      	movs	r2, #0
 80186d6:	701a      	strb	r2, [r3, #0]
 80186d8:	4b76      	ldr	r3, [pc, #472]	@ (80188b4 <USBD_VND_TxCplt+0xb1c>)
 80186da:	2200      	movs	r2, #0
 80186dc:	601a      	str	r2, [r3, #0]
            pair_send_idx = (uint8_t)((pair_send_idx + 1u) % VND_PAIR_BUFFERS);
 80186de:	4b70      	ldr	r3, [pc, #448]	@ (80188a0 <USBD_VND_TxCplt+0xb08>)
 80186e0:	781b      	ldrb	r3, [r3, #0]
 80186e2:	3301      	adds	r3, #1
 80186e4:	b2db      	uxtb	r3, r3
 80186e6:	f003 0307 	and.w	r3, r3, #7
 80186ea:	b2da      	uxtb	r2, r3
 80186ec:	4b6c      	ldr	r3, [pc, #432]	@ (80188a0 <USBD_VND_TxCplt+0xb08>)
 80186ee:	701a      	strb	r2, [r3, #0]
            stream_seq++; dbg_produced_seq++; if(!first_pair_done){ first_pair_done = 1; }
 80186f0:	4b66      	ldr	r3, [pc, #408]	@ (801888c <USBD_VND_TxCplt+0xaf4>)
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	3301      	adds	r3, #1
 80186f6:	4a65      	ldr	r2, [pc, #404]	@ (801888c <USBD_VND_TxCplt+0xaf4>)
 80186f8:	6013      	str	r3, [r2, #0]
 80186fa:	4b6f      	ldr	r3, [pc, #444]	@ (80188b8 <USBD_VND_TxCplt+0xb20>)
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	3301      	adds	r3, #1
 8018700:	4a6d      	ldr	r2, [pc, #436]	@ (80188b8 <USBD_VND_TxCplt+0xb20>)
 8018702:	6013      	str	r3, [r2, #0]
 8018704:	4b6d      	ldr	r3, [pc, #436]	@ (80188bc <USBD_VND_TxCplt+0xb24>)
 8018706:	781b      	ldrb	r3, [r3, #0]
 8018708:	b2db      	uxtb	r3, r3
 801870a:	2b00      	cmp	r3, #0
 801870c:	d102      	bne.n	8018714 <USBD_VND_TxCplt+0x97c>
 801870e:	4b6b      	ldr	r3, [pc, #428]	@ (80188bc <USBD_VND_TxCplt+0xb24>)
 8018710:	2201      	movs	r2, #1
 8018712:	701a      	strb	r2, [r3, #0]
            /* Пытаемся немедленно отправить следующий A */
            if(!vnd_try_send_A_nextpair_immediate()){ vnd_tx_kick = 1; return; } else { return; }
 8018714:	f7fe fbd8 	bl	8016ec8 <vnd_try_send_A_nextpair_immediate>
 8018718:	4603      	mov	r3, r0
 801871a:	2b00      	cmp	r3, #0
 801871c:	f040 8134 	bne.w	8018988 <USBD_VND_TxCplt+0xbf0>
 8018720:	4b67      	ldr	r3, [pc, #412]	@ (80188c0 <USBD_VND_TxCplt+0xb28>)
 8018722:	2201      	movs	r2, #1
 8018724:	701a      	strb	r2, [r3, #0]
 8018726:	e134      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
        } else {
            /* пометим A как завершённый для наглядности статуса */
            g_frames[pair_send_idx][0].st = FB_FILL;
 8018728:	4b5d      	ldr	r3, [pc, #372]	@ (80188a0 <USBD_VND_TxCplt+0xb08>)
 801872a:	781b      	ldrb	r3, [r3, #0]
 801872c:	4619      	mov	r1, r3
 801872e:	4a5d      	ldr	r2, [pc, #372]	@ (80188a4 <USBD_VND_TxCplt+0xb0c>)
 8018730:	f241 5398 	movw	r3, #5528	@ 0x1598
 8018734:	fb01 f303 	mul.w	r3, r1, r3
 8018738:	4413      	add	r3, r2
 801873a:	2200      	movs	r2, #0
 801873c:	701a      	strb	r2, [r3, #0]
            sending_channel = 0xFF;
 801873e:	4b5c      	ldr	r3, [pc, #368]	@ (80188b0 <USBD_VND_TxCplt+0xb18>)
 8018740:	22ff      	movs	r2, #255	@ 0xff
 8018742:	701a      	strb	r2, [r3, #0]
            /* Запускаем ожидание B ровно здесь */
            pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8018744:	4b50      	ldr	r3, [pc, #320]	@ (8018888 <USBD_VND_TxCplt+0xaf0>)
 8018746:	2201      	movs	r2, #1
 8018748:	701a      	strb	r2, [r3, #0]
 801874a:	f7ec fc0f 	bl	8004f6c <HAL_GetTick>
 801874e:	4603      	mov	r3, r0
 8018750:	4a58      	ldr	r2, [pc, #352]	@ (80188b4 <USBD_VND_TxCplt+0xb1c>)
 8018752:	6013      	str	r3, [r2, #0]
            /* Попытаемся немедленно отправить B, чтобы не ждать захода таска */
            if(!vnd_try_send_B_immediate()){
 8018754:	f7fe fafa 	bl	8016d4c <vnd_try_send_B_immediate>
 8018758:	4603      	mov	r3, r0
 801875a:	2b00      	cmp	r3, #0
 801875c:	f040 8116 	bne.w	801898c <USBD_VND_TxCplt+0xbf4>
                vnd_tx_kick = 1; return;
 8018760:	4b57      	ldr	r3, [pc, #348]	@ (80188c0 <USBD_VND_TxCplt+0xb28>)
 8018762:	2201      	movs	r2, #1
 8018764:	701a      	strb	r2, [r3, #0]
 8018766:	e114      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
            } else { return; }
        }
    } else if(fl == 0x02){
 8018768:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 801876c:	2b02      	cmp	r3, #2
 801876e:	f040 80af 	bne.w	80188d0 <USBD_VND_TxCplt+0xb38>
    /* Канал B завершён — закрываем пару */
        if(!pending_B){ VND_LOG("WARN B_WITHOUT_PENDING seq=%lu hdr.seq=%lu", (unsigned long)stream_seq, (unsigned long)eff_seq); }
 8018772:	4b45      	ldr	r3, [pc, #276]	@ (8018888 <USBD_VND_TxCplt+0xaf0>)
 8018774:	781b      	ldrb	r3, [r3, #0]
        if(eff_seq != stream_seq){
 8018776:	4b45      	ldr	r3, [pc, #276]	@ (801888c <USBD_VND_TxCplt+0xaf4>)
 8018778:	681b      	ldr	r3, [r3, #0]
            VND_LOG("WARN B_SEQ_MISMATCH hdr=%lu stream_seq=%lu", (unsigned long)eff_seq, (unsigned long)stream_seq);
        }
        static uint8_t first_b_logged = 0; if(!first_b_logged){ first_b_logged = 1; VND_LOG("FIRST_B txcplt seq=%lu", (unsigned long)eff_seq); }
 801877a:	4b52      	ldr	r3, [pc, #328]	@ (80188c4 <USBD_VND_TxCplt+0xb2c>)
 801877c:	781b      	ldrb	r3, [r3, #0]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d102      	bne.n	8018788 <USBD_VND_TxCplt+0x9f0>
 8018782:	4b50      	ldr	r3, [pc, #320]	@ (80188c4 <USBD_VND_TxCplt+0xb2c>)
 8018784:	2201      	movs	r2, #1
 8018786:	701a      	strb	r2, [r3, #0]
    dbg_tx_sent++; dbg_sent_ch1_total++; dbg_sent_seq_adc1++;
 8018788:	4b42      	ldr	r3, [pc, #264]	@ (8018894 <USBD_VND_TxCplt+0xafc>)
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	3301      	adds	r3, #1
 801878e:	4a41      	ldr	r2, [pc, #260]	@ (8018894 <USBD_VND_TxCplt+0xafc>)
 8018790:	6013      	str	r3, [r2, #0]
 8018792:	4b4d      	ldr	r3, [pc, #308]	@ (80188c8 <USBD_VND_TxCplt+0xb30>)
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	3301      	adds	r3, #1
 8018798:	4a4b      	ldr	r2, [pc, #300]	@ (80188c8 <USBD_VND_TxCplt+0xb30>)
 801879a:	6013      	str	r3, [r2, #0]
 801879c:	4b4b      	ldr	r3, [pc, #300]	@ (80188cc <USBD_VND_TxCplt+0xb34>)
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	3301      	adds	r3, #1
 80187a2:	4a4a      	ldr	r2, [pc, #296]	@ (80188cc <USBD_VND_TxCplt+0xb34>)
 80187a4:	6013      	str	r3, [r2, #0]
    vnd_total_tx_samples += (uint64_t)g_frames[pair_send_idx][1].samples;
 80187a6:	4b3e      	ldr	r3, [pc, #248]	@ (80188a0 <USBD_VND_TxCplt+0xb08>)
 80187a8:	781b      	ldrb	r3, [r3, #0]
 80187aa:	4619      	mov	r1, r3
 80187ac:	4a3d      	ldr	r2, [pc, #244]	@ (80188a4 <USBD_VND_TxCplt+0xb0c>)
 80187ae:	f241 5398 	movw	r3, #5528	@ 0x1598
 80187b2:	fb01 f303 	mul.w	r3, r1, r3
 80187b6:	4413      	add	r3, r2
 80187b8:	f603 23ce 	addw	r3, r3, #2766	@ 0xace
 80187bc:	881b      	ldrh	r3, [r3, #0]
 80187be:	b29b      	uxth	r3, r3
 80187c0:	2200      	movs	r2, #0
 80187c2:	60bb      	str	r3, [r7, #8]
 80187c4:	60fa      	str	r2, [r7, #12]
 80187c6:	4b38      	ldr	r3, [pc, #224]	@ (80188a8 <USBD_VND_TxCplt+0xb10>)
 80187c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187cc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80187d0:	4621      	mov	r1, r4
 80187d2:	1889      	adds	r1, r1, r2
 80187d4:	6039      	str	r1, [r7, #0]
 80187d6:	4629      	mov	r1, r5
 80187d8:	eb43 0101 	adc.w	r1, r3, r1
 80187dc:	6079      	str	r1, [r7, #4]
 80187de:	4b32      	ldr	r3, [pc, #200]	@ (80188a8 <USBD_VND_TxCplt+0xb10>)
 80187e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80187e4:	e9c3 1200 	strd	r1, r2, [r3]
        ChanFrame *f0 = &g_frames[pair_send_idx][0];
 80187e8:	4b2d      	ldr	r3, [pc, #180]	@ (80188a0 <USBD_VND_TxCplt+0xb08>)
 80187ea:	781b      	ldrb	r3, [r3, #0]
 80187ec:	461a      	mov	r2, r3
 80187ee:	f241 5398 	movw	r3, #5528	@ 0x1598
 80187f2:	fb02 f303 	mul.w	r3, r2, r3
 80187f6:	4a2b      	ldr	r2, [pc, #172]	@ (80188a4 <USBD_VND_TxCplt+0xb0c>)
 80187f8:	4413      	add	r3, r2
 80187fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        ChanFrame *f1 = &g_frames[pair_send_idx][1];
 80187fe:	4b28      	ldr	r3, [pc, #160]	@ (80188a0 <USBD_VND_TxCplt+0xb08>)
 8018800:	781b      	ldrb	r3, [r3, #0]
 8018802:	461a      	mov	r2, r3
 8018804:	f241 5398 	movw	r3, #5528	@ 0x1598
 8018808:	fb02 f303 	mul.w	r3, r2, r3
 801880c:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8018810:	4a24      	ldr	r2, [pc, #144]	@ (80188a4 <USBD_VND_TxCplt+0xb0c>)
 8018812:	4413      	add	r3, r2
 8018814:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        f0->st = f1->st = FB_FILL;
 8018818:	2100      	movs	r1, #0
 801881a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801881e:	460a      	mov	r2, r1
 8018820:	701a      	strb	r2, [r3, #0]
 8018822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018826:	460a      	mov	r2, r1
 8018828:	701a      	strb	r2, [r3, #0]
        pair_send_idx = (pair_send_idx + 1u) % VND_PAIR_BUFFERS;
 801882a:	4b1d      	ldr	r3, [pc, #116]	@ (80188a0 <USBD_VND_TxCplt+0xb08>)
 801882c:	781b      	ldrb	r3, [r3, #0]
 801882e:	3301      	adds	r3, #1
 8018830:	b2db      	uxtb	r3, r3
 8018832:	f003 0307 	and.w	r3, r3, #7
 8018836:	b2da      	uxtb	r2, r3
 8018838:	4b19      	ldr	r3, [pc, #100]	@ (80188a0 <USBD_VND_TxCplt+0xb08>)
 801883a:	701a      	strb	r2, [r3, #0]
        stream_seq++; dbg_produced_seq++;
 801883c:	4b13      	ldr	r3, [pc, #76]	@ (801888c <USBD_VND_TxCplt+0xaf4>)
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	3301      	adds	r3, #1
 8018842:	4a12      	ldr	r2, [pc, #72]	@ (801888c <USBD_VND_TxCplt+0xaf4>)
 8018844:	6013      	str	r3, [r2, #0]
 8018846:	4b1c      	ldr	r3, [pc, #112]	@ (80188b8 <USBD_VND_TxCplt+0xb20>)
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	3301      	adds	r3, #1
 801884c:	4a1a      	ldr	r2, [pc, #104]	@ (80188b8 <USBD_VND_TxCplt+0xb20>)
 801884e:	6013      	str	r3, [r2, #0]
        pending_B = 0; pending_B_since_ms = 0; sending_channel = 0xFF;
 8018850:	4b0d      	ldr	r3, [pc, #52]	@ (8018888 <USBD_VND_TxCplt+0xaf0>)
 8018852:	2200      	movs	r2, #0
 8018854:	701a      	strb	r2, [r3, #0]
 8018856:	4b17      	ldr	r3, [pc, #92]	@ (80188b4 <USBD_VND_TxCplt+0xb1c>)
 8018858:	2200      	movs	r2, #0
 801885a:	601a      	str	r2, [r3, #0]
 801885c:	4b14      	ldr	r3, [pc, #80]	@ (80188b0 <USBD_VND_TxCplt+0xb18>)
 801885e:	22ff      	movs	r2, #255	@ 0xff
 8018860:	701a      	strb	r2, [r3, #0]
        if(!first_pair_done){ first_pair_done = 1; }
 8018862:	4b16      	ldr	r3, [pc, #88]	@ (80188bc <USBD_VND_TxCplt+0xb24>)
 8018864:	781b      	ldrb	r3, [r3, #0]
 8018866:	b2db      	uxtb	r3, r3
 8018868:	2b00      	cmp	r3, #0
 801886a:	d102      	bne.n	8018872 <USBD_VND_TxCplt+0xada>
 801886c:	4b13      	ldr	r3, [pc, #76]	@ (80188bc <USBD_VND_TxCplt+0xb24>)
 801886e:	2201      	movs	r2, #1
 8018870:	701a      	strb	r2, [r3, #0]
        /* Сразу пытаемся отправить следующий A новой пары (если готов) */
        if(!vnd_try_send_A_nextpair_immediate()){
 8018872:	f7fe fb29 	bl	8016ec8 <vnd_try_send_A_nextpair_immediate>
 8018876:	4603      	mov	r3, r0
 8018878:	2b00      	cmp	r3, #0
 801887a:	f040 8089 	bne.w	8018990 <USBD_VND_TxCplt+0xbf8>
            /* Без планирования задержек: следующая пара начнётся как только готова */
            vnd_tx_kick = 1; return;
 801887e:	4b10      	ldr	r3, [pc, #64]	@ (80188c0 <USBD_VND_TxCplt+0xb28>)
 8018880:	2201      	movs	r2, #1
 8018882:	701a      	strb	r2, [r3, #0]
 8018884:	e085      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
 8018886:	bf00      	nop
 8018888:	24019ffa 	.word	0x24019ffa
 801888c:	2400dba8 	.word	0x2400dba8
 8018890:	2401a090 	.word	0x2401a090
 8018894:	2400dbdc 	.word	0x2400dbdc
 8018898:	2400dbe0 	.word	0x2400dbe0
 801889c:	2400dbc0 	.word	0x2400dbc0
 80188a0:	24019ff9 	.word	0x24019ff9
 80188a4:	2400f338 	.word	0x2400f338
 80188a8:	2400dbf8 	.word	0x2400dbf8
 80188ac:	24000040 	.word	0x24000040
 80188b0:	24000050 	.word	0x24000050
 80188b4:	24019ffc 	.word	0x24019ffc
 80188b8:	2400dbbc 	.word	0x2400dbbc
 80188bc:	2400dc40 	.word	0x2400dc40
 80188c0:	2400dc50 	.word	0x2400dc50
 80188c4:	2401a091 	.word	0x2401a091
 80188c8:	2400dbe4 	.word	0x2400dbe4
 80188cc:	2400dbc4 	.word	0x2400dbc4
        } else { return; }
    } else {
        VND_LOG("WARN UNKNOWN FLAGS 0x%02X in TxCplt", (unsigned)fl);
        sending_channel = 0xFF;
 80188d0:	4b32      	ldr	r3, [pc, #200]	@ (801899c <USBD_VND_TxCplt+0xc04>)
 80188d2:	22ff      	movs	r2, #255	@ 0xff
 80188d4:	701a      	strb	r2, [r3, #0]
        /* РЕЗЕРВ: если классификация не распознала, но прямо перед этим слали B — закроем пару */
        if(pending_B && (prev_sending == 1 || last_tx_flags == 0x02)){
 80188d6:	4b32      	ldr	r3, [pc, #200]	@ (80189a0 <USBD_VND_TxCplt+0xc08>)
 80188d8:	781b      	ldrb	r3, [r3, #0]
 80188da:	b2db      	uxtb	r3, r3
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d049      	beq.n	8018974 <USBD_VND_TxCplt+0xbdc>
 80188e0:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80188e4:	2b01      	cmp	r3, #1
 80188e6:	d004      	beq.n	80188f2 <USBD_VND_TxCplt+0xb5a>
 80188e8:	4b2e      	ldr	r3, [pc, #184]	@ (80189a4 <USBD_VND_TxCplt+0xc0c>)
 80188ea:	781b      	ldrb	r3, [r3, #0]
 80188ec:	b2db      	uxtb	r3, r3
 80188ee:	2b02      	cmp	r3, #2
 80188f0:	d140      	bne.n	8018974 <USBD_VND_TxCplt+0xbdc>
            ChanFrame *f0 = &g_frames[pair_send_idx][0];
 80188f2:	4b2d      	ldr	r3, [pc, #180]	@ (80189a8 <USBD_VND_TxCplt+0xc10>)
 80188f4:	781b      	ldrb	r3, [r3, #0]
 80188f6:	461a      	mov	r2, r3
 80188f8:	f241 5398 	movw	r3, #5528	@ 0x1598
 80188fc:	fb02 f303 	mul.w	r3, r2, r3
 8018900:	4a2a      	ldr	r2, [pc, #168]	@ (80189ac <USBD_VND_TxCplt+0xc14>)
 8018902:	4413      	add	r3, r2
 8018904:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            ChanFrame *f1 = &g_frames[pair_send_idx][1];
 8018908:	4b27      	ldr	r3, [pc, #156]	@ (80189a8 <USBD_VND_TxCplt+0xc10>)
 801890a:	781b      	ldrb	r3, [r3, #0]
 801890c:	461a      	mov	r2, r3
 801890e:	f241 5398 	movw	r3, #5528	@ 0x1598
 8018912:	fb02 f303 	mul.w	r3, r2, r3
 8018916:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 801891a:	4a24      	ldr	r2, [pc, #144]	@ (80189ac <USBD_VND_TxCplt+0xc14>)
 801891c:	4413      	add	r3, r2
 801891e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            f0->st = f1->st = FB_FILL;
 8018922:	2100      	movs	r1, #0
 8018924:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8018928:	460a      	mov	r2, r1
 801892a:	701a      	strb	r2, [r3, #0]
 801892c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8018930:	460a      	mov	r2, r1
 8018932:	701a      	strb	r2, [r3, #0]
            pair_send_idx = (pair_send_idx + 1u) % VND_PAIR_BUFFERS;
 8018934:	4b1c      	ldr	r3, [pc, #112]	@ (80189a8 <USBD_VND_TxCplt+0xc10>)
 8018936:	781b      	ldrb	r3, [r3, #0]
 8018938:	3301      	adds	r3, #1
 801893a:	b2db      	uxtb	r3, r3
 801893c:	f003 0307 	and.w	r3, r3, #7
 8018940:	b2da      	uxtb	r2, r3
 8018942:	4b19      	ldr	r3, [pc, #100]	@ (80189a8 <USBD_VND_TxCplt+0xc10>)
 8018944:	701a      	strb	r2, [r3, #0]
            stream_seq++; dbg_produced_seq++;
 8018946:	4b1a      	ldr	r3, [pc, #104]	@ (80189b0 <USBD_VND_TxCplt+0xc18>)
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	3301      	adds	r3, #1
 801894c:	4a18      	ldr	r2, [pc, #96]	@ (80189b0 <USBD_VND_TxCplt+0xc18>)
 801894e:	6013      	str	r3, [r2, #0]
 8018950:	4b18      	ldr	r3, [pc, #96]	@ (80189b4 <USBD_VND_TxCplt+0xc1c>)
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	3301      	adds	r3, #1
 8018956:	4a17      	ldr	r2, [pc, #92]	@ (80189b4 <USBD_VND_TxCplt+0xc1c>)
 8018958:	6013      	str	r3, [r2, #0]
            pending_B = 0; pending_B_since_ms = 0; sending_channel = 0xFF;
 801895a:	4b11      	ldr	r3, [pc, #68]	@ (80189a0 <USBD_VND_TxCplt+0xc08>)
 801895c:	2200      	movs	r2, #0
 801895e:	701a      	strb	r2, [r3, #0]
 8018960:	4b15      	ldr	r3, [pc, #84]	@ (80189b8 <USBD_VND_TxCplt+0xc20>)
 8018962:	2200      	movs	r2, #0
 8018964:	601a      	str	r2, [r3, #0]
 8018966:	4b0d      	ldr	r3, [pc, #52]	@ (801899c <USBD_VND_TxCplt+0xc04>)
 8018968:	22ff      	movs	r2, #255	@ 0xff
 801896a:	701a      	strb	r2, [r3, #0]
            /* Без планирования задержек */
            VND_LOG("FALLBACK_CLOSE_PAIR after UNKNOWN meta (assume B)");
            vnd_tx_kick = 1; return;
 801896c:	4b13      	ldr	r3, [pc, #76]	@ (80189bc <USBD_VND_TxCplt+0xc24>)
 801896e:	2201      	movs	r2, #1
 8018970:	701a      	strb	r2, [r3, #0]
 8018972:	e00e      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
        }
        vnd_tx_kick = 1; return;
 8018974:	4b11      	ldr	r3, [pc, #68]	@ (80189bc <USBD_VND_TxCplt+0xc24>)
 8018976:	2201      	movs	r2, #1
 8018978:	701a      	strb	r2, [r3, #0]
 801897a:	e00a      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
        return;
 801897c:	bf00      	nop
 801897e:	e008      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
                return;
 8018980:	bf00      	nop
 8018982:	e006      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
                return;
 8018984:	bf00      	nop
 8018986:	e004      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
            if(!vnd_try_send_A_nextpair_immediate()){ vnd_tx_kick = 1; return; } else { return; }
 8018988:	bf00      	nop
 801898a:	e002      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
            } else { return; }
 801898c:	bf00      	nop
 801898e:	e000      	b.n	8018992 <USBD_VND_TxCplt+0xbfa>
        } else { return; }
 8018990:	bf00      	nop
    }
}
 8018992:	37b8      	adds	r7, #184	@ 0xb8
 8018994:	46bd      	mov	sp, r7
 8018996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801899a:	bf00      	nop
 801899c:	24000050 	.word	0x24000050
 80189a0:	24019ffa 	.word	0x24019ffa
 80189a4:	2400dc21 	.word	0x2400dc21
 80189a8:	24019ff9 	.word	0x24019ff9
 80189ac:	2400f338 	.word	0x2400f338
 80189b0:	2400dba8 	.word	0x2400dba8
 80189b4:	2400dbbc 	.word	0x2400dbbc
 80189b8:	24019ffc 	.word	0x24019ffc
 80189bc:	2400dc50 	.word	0x2400dc50

080189c0 <USBD_VND_DataReceived>:

/* Приём команд */
void USBD_VND_DataReceived(const uint8_t *data, uint32_t len)
{
 80189c0:	b5b0      	push	{r4, r5, r7, lr}
 80189c2:	b09e      	sub	sp, #120	@ 0x78
 80189c4:	af04      	add	r7, sp, #16
 80189c6:	6078      	str	r0, [r7, #4]
 80189c8:	6039      	str	r1, [r7, #0]
    if(!len) return;
 80189ca:	683b      	ldr	r3, [r7, #0]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	f000 8572 	beq.w	80194b6 <USBD_VND_DataReceived+0xaf6>
    uint8_t cmd = data[0];
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	781b      	ldrb	r3, [r3, #0]
 80189d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    static uint32_t rcv_count = 0;
    rcv_count++;
 80189da:	4bb3      	ldr	r3, [pc, #716]	@ (8018ca8 <USBD_VND_DataReceived+0x2e8>)
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	3301      	adds	r3, #1
 80189e0:	4ab1      	ldr	r2, [pc, #708]	@ (8018ca8 <USBD_VND_DataReceived+0x2e8>)
 80189e2:	6013      	str	r3, [r2, #0]
    printf("[VND_RCV] #%lu CMD 0x%02X len=%lu\r\n", rcv_count, cmd, (unsigned long)len);
 80189e4:	4bb0      	ldr	r3, [pc, #704]	@ (8018ca8 <USBD_VND_DataReceived+0x2e8>)
 80189e6:	6819      	ldr	r1, [r3, #0]
 80189e8:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80189ec:	683b      	ldr	r3, [r7, #0]
 80189ee:	48af      	ldr	r0, [pc, #700]	@ (8018cac <USBD_VND_DataReceived+0x2ec>)
 80189f0:	f002 fb06 	bl	801b000 <iprintf>
    VND_LOG("CMD 0x%02X len=%lu", cmd, (unsigned long)len);
    switch(cmd)
 80189f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80189f8:	3b10      	subs	r3, #16
 80189fa:	2b21      	cmp	r3, #33	@ 0x21
 80189fc:	f200 855d 	bhi.w	80194ba <USBD_VND_DataReceived+0xafa>
 8018a00:	a201      	add	r2, pc, #4	@ (adr r2, 8018a08 <USBD_VND_DataReceived+0x48>)
 8018a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a06:	bf00      	nop
 8018a08:	080190db 	.word	0x080190db
 8018a0c:	08019161 	.word	0x08019161
 8018a10:	080194bb 	.word	0x080194bb
 8018a14:	080192e9 	.word	0x080192e9
 8018a18:	08019415 	.word	0x08019415
 8018a1c:	08019487 	.word	0x08019487
 8018a20:	080193cd 	.word	0x080193cd
 8018a24:	08018df9 	.word	0x08018df9
 8018a28:	080191e1 	.word	0x080191e1
 8018a2c:	08019235 	.word	0x08019235
 8018a30:	080194bb 	.word	0x080194bb
 8018a34:	080194bb 	.word	0x080194bb
 8018a38:	080194bb 	.word	0x080194bb
 8018a3c:	080194bb 	.word	0x080194bb
 8018a40:	080194bb 	.word	0x080194bb
 8018a44:	080194bb 	.word	0x080194bb
 8018a48:	08018a91 	.word	0x08018a91
 8018a4c:	08018e79 	.word	0x08018e79
 8018a50:	080194bb 	.word	0x080194bb
 8018a54:	080194bb 	.word	0x080194bb
 8018a58:	080194bb 	.word	0x080194bb
 8018a5c:	080194bb 	.word	0x080194bb
 8018a60:	080194bb 	.word	0x080194bb
 8018a64:	080194bb 	.word	0x080194bb
 8018a68:	080194bb 	.word	0x080194bb
 8018a6c:	080194bb 	.word	0x080194bb
 8018a70:	080194bb 	.word	0x080194bb
 8018a74:	080194bb 	.word	0x080194bb
 8018a78:	080194bb 	.word	0x080194bb
 8018a7c:	080194bb 	.word	0x080194bb
 8018a80:	080194bb 	.word	0x080194bb
 8018a84:	080194bb 	.word	0x080194bb
 8018a88:	08018f4f 	.word	0x08018f4f
 8018a8c:	08019059 	.word	0x08019059
    {
        case VND_CMD_START_STREAM:
        {
            /* Разрешаем START в любое время: мягко перезапускаем поток */
                VND_LOG("START_STREAM received");
                vnd_reset_buffers();
 8018a90:	f7fd f8b6 	bl	8015c00 <vnd_reset_buffers>
                pair_send_idx = 0; pair_fill_idx = 0; sending_channel = 0xFF; pending_B = 0; pending_B_since_ms = 0;
 8018a94:	4b86      	ldr	r3, [pc, #536]	@ (8018cb0 <USBD_VND_DataReceived+0x2f0>)
 8018a96:	2200      	movs	r2, #0
 8018a98:	701a      	strb	r2, [r3, #0]
 8018a9a:	4b86      	ldr	r3, [pc, #536]	@ (8018cb4 <USBD_VND_DataReceived+0x2f4>)
 8018a9c:	2200      	movs	r2, #0
 8018a9e:	701a      	strb	r2, [r3, #0]
 8018aa0:	4b85      	ldr	r3, [pc, #532]	@ (8018cb8 <USBD_VND_DataReceived+0x2f8>)
 8018aa2:	22ff      	movs	r2, #255	@ 0xff
 8018aa4:	701a      	strb	r2, [r3, #0]
 8018aa6:	4b85      	ldr	r3, [pc, #532]	@ (8018cbc <USBD_VND_DataReceived+0x2fc>)
 8018aa8:	2200      	movs	r2, #0
 8018aaa:	701a      	strb	r2, [r3, #0]
 8018aac:	4b84      	ldr	r3, [pc, #528]	@ (8018cc0 <USBD_VND_DataReceived+0x300>)
 8018aae:	2200      	movs	r2, #0
 8018ab0:	601a      	str	r2, [r3, #0]
                /* Сброс фиксации размера и планировщика */
                cur_samples_per_frame = 0; cur_expected_frame_size = 0;
 8018ab2:	4b84      	ldr	r3, [pc, #528]	@ (8018cc4 <USBD_VND_DataReceived+0x304>)
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	801a      	strh	r2, [r3, #0]
 8018ab8:	4b83      	ldr	r3, [pc, #524]	@ (8018cc8 <USBD_VND_DataReceived+0x308>)
 8018aba:	2200      	movs	r2, #0
 8018abc:	801a      	strh	r2, [r3, #0]
                vnd_next_pair_ms = 0;
 8018abe:	4b83      	ldr	r3, [pc, #524]	@ (8018ccc <USBD_VND_DataReceived+0x30c>)
 8018ac0:	2200      	movs	r2, #0
 8018ac2:	601a      	str	r2, [r3, #0]
                /* Состояние теста/ACK */
                test_in_flight = 0; test_pending = 0;
 8018ac4:	4b82      	ldr	r3, [pc, #520]	@ (8018cd0 <USBD_VND_DataReceived+0x310>)
 8018ac6:	2200      	movs	r2, #0
 8018ac8:	701a      	strb	r2, [r3, #0]
 8018aca:	4b82      	ldr	r3, [pc, #520]	@ (8018cd4 <USBD_VND_DataReceived+0x314>)
 8018acc:	2200      	movs	r2, #0
 8018ace:	701a      	strb	r2, [r3, #0]
#if VND_DISABLE_TEST
                test_sent = 1; /* тест отключён: считать выполненным */
 8018ad0:	4b81      	ldr	r3, [pc, #516]	@ (8018cd8 <USBD_VND_DataReceived+0x318>)
 8018ad2:	2201      	movs	r2, #1
 8018ad4:	701a      	strb	r2, [r3, #0]
#else
                test_sent = 0;
#endif
                start_stat_planned = 0; start_stat_inflight = 0; start_ack_done = 1; /* ACK считаем выполненным логически */
 8018ad6:	4b81      	ldr	r3, [pc, #516]	@ (8018cdc <USBD_VND_DataReceived+0x31c>)
 8018ad8:	2200      	movs	r2, #0
 8018ada:	701a      	strb	r2, [r3, #0]
 8018adc:	4b80      	ldr	r3, [pc, #512]	@ (8018ce0 <USBD_VND_DataReceived+0x320>)
 8018ade:	2200      	movs	r2, #0
 8018ae0:	701a      	strb	r2, [r3, #0]
 8018ae2:	4b80      	ldr	r3, [pc, #512]	@ (8018ce4 <USBD_VND_DataReceived+0x324>)
 8018ae4:	2201      	movs	r2, #1
 8018ae6:	701a      	strb	r2, [r3, #0]
                pending_status = 0; status_ack_pending = 0; /* не пытаться слать STAT через IN */
 8018ae8:	4b7f      	ldr	r3, [pc, #508]	@ (8018ce8 <USBD_VND_DataReceived+0x328>)
 8018aea:	2200      	movs	r2, #0
 8018aec:	701a      	strb	r2, [r3, #0]
 8018aee:	4b7f      	ldr	r3, [pc, #508]	@ (8018cec <USBD_VND_DataReceived+0x32c>)
 8018af0:	2200      	movs	r2, #0
 8018af2:	701a      	strb	r2, [r3, #0]
                vnd_error_counter = 0;
 8018af4:	4b7e      	ldr	r3, [pc, #504]	@ (8018cf0 <USBD_VND_DataReceived+0x330>)
 8018af6:	2200      	movs	r2, #0
 8018af8:	601a      	str	r2, [r3, #0]
                /* Синхронизация последовательностей пар */
                stream_seq = 0; next_seq_to_assign = 0; dbg_produced_seq = 0;
 8018afa:	4b7e      	ldr	r3, [pc, #504]	@ (8018cf4 <USBD_VND_DataReceived+0x334>)
 8018afc:	2200      	movs	r2, #0
 8018afe:	601a      	str	r2, [r3, #0]
 8018b00:	4b7d      	ldr	r3, [pc, #500]	@ (8018cf8 <USBD_VND_DataReceived+0x338>)
 8018b02:	2200      	movs	r2, #0
 8018b04:	601a      	str	r2, [r3, #0]
 8018b06:	4b7d      	ldr	r3, [pc, #500]	@ (8018cfc <USBD_VND_DataReceived+0x33c>)
 8018b08:	2200      	movs	r2, #0
 8018b0a:	601a      	str	r2, [r3, #0]
                first_pair_done = 0;
 8018b0c:	4b7c      	ldr	r3, [pc, #496]	@ (8018d00 <USBD_VND_DataReceived+0x340>)
 8018b0e:	2200      	movs	r2, #0
 8018b10:	701a      	strb	r2, [r3, #0]
                dbg_sent_ch0_total = 0; dbg_sent_ch1_total = 0;
 8018b12:	4b7c      	ldr	r3, [pc, #496]	@ (8018d04 <USBD_VND_DataReceived+0x344>)
 8018b14:	2200      	movs	r2, #0
 8018b16:	601a      	str	r2, [r3, #0]
 8018b18:	4b7b      	ldr	r3, [pc, #492]	@ (8018d08 <USBD_VND_DataReceived+0x348>)
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	601a      	str	r2, [r3, #0]
                start_cmd_ms = HAL_GetTick();
 8018b1e:	f7ec fa25 	bl	8004f6c <HAL_GetTick>
 8018b22:	4603      	mov	r3, r0
 8018b24:	4a79      	ldr	r2, [pc, #484]	@ (8018d0c <USBD_VND_DataReceived+0x34c>)
 8018b26:	6013      	str	r3, [r2, #0]
                /* Снимем DMA снапшот для контроля таймаута */
                adc_stream_debug_t dbg; adc_stream_get_debug(&dbg);
 8018b28:	f107 0308 	add.w	r3, r7, #8
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	f7e7 fea3 	bl	8000878 <adc_stream_get_debug>
                dma_snapshot_full0 = dbg.dma_full0; dma_snapshot_full1 = dbg.dma_full1;
 8018b32:	69fb      	ldr	r3, [r7, #28]
 8018b34:	4a76      	ldr	r2, [pc, #472]	@ (8018d10 <USBD_VND_DataReceived+0x350>)
 8018b36:	6013      	str	r3, [r2, #0]
 8018b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b3a:	4a76      	ldr	r2, [pc, #472]	@ (8018d14 <USBD_VND_DataReceived+0x354>)
 8018b3c:	6013      	str	r3, [r2, #0]
                /* Зафиксировать размер кадра по умолчанию для полного режима (300 семплов) */
                if (full_mode) {
 8018b3e:	4b76      	ldr	r3, [pc, #472]	@ (8018d18 <USBD_VND_DataReceived+0x358>)
 8018b40:	781b      	ldrb	r3, [r3, #0]
 8018b42:	b2db      	uxtb	r3, r3
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d00f      	beq.n	8018b68 <USBD_VND_DataReceived+0x1a8>
                    vnd_frame_samples_req = VND_FULL_DEFAULT_SAMPLES;
 8018b48:	4b74      	ldr	r3, [pc, #464]	@ (8018d1c <USBD_VND_DataReceived+0x35c>)
 8018b4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8018b4e:	801a      	strh	r2, [r3, #0]
                    vnd_recompute_pair_timing(vnd_frame_samples_req);
 8018b50:	4b72      	ldr	r3, [pc, #456]	@ (8018d1c <USBD_VND_DataReceived+0x35c>)
 8018b52:	881b      	ldrh	r3, [r3, #0]
 8018b54:	b29b      	uxth	r3, r3
 8018b56:	4618      	mov	r0, r3
 8018b58:	f7fc feb2 	bl	80158c0 <vnd_recompute_pair_timing>
                    cur_samples_per_frame = 0; /* снять lock, чтобы применилось немедленно */
 8018b5c:	4b59      	ldr	r3, [pc, #356]	@ (8018cc4 <USBD_VND_DataReceived+0x304>)
 8018b5e:	2200      	movs	r2, #0
 8018b60:	801a      	strh	r2, [r3, #0]
                    cur_expected_frame_size = 0;
 8018b62:	4b59      	ldr	r3, [pc, #356]	@ (8018cc8 <USBD_VND_DataReceived+0x308>)
 8018b64:	2200      	movs	r2, #0
 8018b66:	801a      	strh	r2, [r3, #0]
                }
                /* ПРОАКТИВНО: очистим возможный "хвост" занятости IN EP с прошлой сессии */
                do {
                    extern void USBD_VND_ForceTxIdle(void);
                    USBD_VND_ForceTxIdle();
 8018b68:	f000 fe70 	bl	801984c <USBD_VND_ForceTxIdle>
                    vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0;
 8018b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8018d20 <USBD_VND_DataReceived+0x360>)
 8018b6e:	2200      	movs	r2, #0
 8018b70:	701a      	strb	r2, [r3, #0]
 8018b72:	4b6c      	ldr	r3, [pc, #432]	@ (8018d24 <USBD_VND_DataReceived+0x364>)
 8018b74:	2201      	movs	r2, #1
 8018b76:	701a      	strb	r2, [r3, #0]
 8018b78:	4b6b      	ldr	r3, [pc, #428]	@ (8018d28 <USBD_VND_DataReceived+0x368>)
 8018b7a:	2200      	movs	r2, #0
 8018b7c:	701a      	strb	r2, [r3, #0]
                    vnd_last_tx_start_ms = 0; /* чтобы WDG не сработал по старой метке */
 8018b7e:	4b6b      	ldr	r3, [pc, #428]	@ (8018d2c <USBD_VND_DataReceived+0x36c>)
 8018b80:	2200      	movs	r2, #0
 8018b82:	601a      	str	r2, [r3, #0]
                    /* Полностью очистим meta-FIFO для корректной классификации первой пары */
                    vnd_tx_meta_head = vnd_tx_meta_tail = 0;
 8018b84:	4b6a      	ldr	r3, [pc, #424]	@ (8018d30 <USBD_VND_DataReceived+0x370>)
 8018b86:	2200      	movs	r2, #0
 8018b88:	701a      	strb	r2, [r3, #0]
 8018b8a:	4b69      	ldr	r3, [pc, #420]	@ (8018d30 <USBD_VND_DataReceived+0x370>)
 8018b8c:	781a      	ldrb	r2, [r3, #0]
 8018b8e:	4b69      	ldr	r3, [pc, #420]	@ (8018d34 <USBD_VND_DataReceived+0x374>)
 8018b90:	701a      	strb	r2, [r3, #0]
                    meta_push_total = meta_pop_total = meta_empty_events = meta_overflow_events = 0;
 8018b92:	4b69      	ldr	r3, [pc, #420]	@ (8018d38 <USBD_VND_DataReceived+0x378>)
 8018b94:	2200      	movs	r2, #0
 8018b96:	601a      	str	r2, [r3, #0]
 8018b98:	4b67      	ldr	r3, [pc, #412]	@ (8018d38 <USBD_VND_DataReceived+0x378>)
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	4a67      	ldr	r2, [pc, #412]	@ (8018d3c <USBD_VND_DataReceived+0x37c>)
 8018b9e:	6013      	str	r3, [r2, #0]
 8018ba0:	4b66      	ldr	r3, [pc, #408]	@ (8018d3c <USBD_VND_DataReceived+0x37c>)
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	4a66      	ldr	r2, [pc, #408]	@ (8018d40 <USBD_VND_DataReceived+0x380>)
 8018ba6:	6013      	str	r3, [r2, #0]
 8018ba8:	4b65      	ldr	r3, [pc, #404]	@ (8018d40 <USBD_VND_DataReceived+0x380>)
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	4a65      	ldr	r2, [pc, #404]	@ (8018d44 <USBD_VND_DataReceived+0x384>)
 8018bae:	6013      	str	r3, [r2, #0]
                } while(0);
                streaming = 1;
 8018bb0:	4b65      	ldr	r3, [pc, #404]	@ (8018d48 <USBD_VND_DataReceived+0x388>)
 8018bb2:	2201      	movs	r2, #1
 8018bb4:	701a      	strb	r2, [r3, #0]
                dbg_last_forced_stat_ms = start_cmd_ms;
 8018bb6:	4b55      	ldr	r3, [pc, #340]	@ (8018d0c <USBD_VND_DataReceived+0x34c>)
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	4a64      	ldr	r2, [pc, #400]	@ (8018d4c <USBD_VND_DataReceived+0x38c>)
 8018bbc:	6013      	str	r3, [r2, #0]
                vnd_tx_ready = 1; vnd_ep_busy = 0; vnd_inflight = 0;
 8018bbe:	4b59      	ldr	r3, [pc, #356]	@ (8018d24 <USBD_VND_DataReceived+0x364>)
 8018bc0:	2201      	movs	r2, #1
 8018bc2:	701a      	strb	r2, [r3, #0]
 8018bc4:	4b56      	ldr	r3, [pc, #344]	@ (8018d20 <USBD_VND_DataReceived+0x360>)
 8018bc6:	2200      	movs	r2, #0
 8018bc8:	701a      	strb	r2, [r3, #0]
 8018bca:	4b57      	ldr	r3, [pc, #348]	@ (8018d28 <USBD_VND_DataReceived+0x368>)
 8018bcc:	2200      	movs	r2, #0
 8018bce:	701a      	strb	r2, [r3, #0]
                vnd_last_txcplt_ms = HAL_GetTick();
 8018bd0:	f7ec f9cc 	bl	8004f6c <HAL_GetTick>
 8018bd4:	4603      	mov	r3, r0
 8018bd6:	4a5e      	ldr	r2, [pc, #376]	@ (8018d50 <USBD_VND_DataReceived+0x390>)
 8018bd8:	6013      	str	r3, [r2, #0]
                /* Разрешим STAT только после первой завершённой пары */
                first_pair_done = 0; pending_status = 0; vnd_status_permit_once = 0;
 8018bda:	4b49      	ldr	r3, [pc, #292]	@ (8018d00 <USBD_VND_DataReceived+0x340>)
 8018bdc:	2200      	movs	r2, #0
 8018bde:	701a      	strb	r2, [r3, #0]
 8018be0:	4b41      	ldr	r3, [pc, #260]	@ (8018ce8 <USBD_VND_DataReceived+0x328>)
 8018be2:	2200      	movs	r2, #0
 8018be4:	701a      	strb	r2, [r3, #0]
 8018be6:	4b5b      	ldr	r3, [pc, #364]	@ (8018d54 <USBD_VND_DataReceived+0x394>)
 8018be8:	2200      	movs	r2, #0
 8018bea:	701a      	strb	r2, [r3, #0]
                /* Индикация START */
                vnd_tx_bytes_at_start = vnd_total_tx_bytes;
 8018bec:	4b5a      	ldr	r3, [pc, #360]	@ (8018d58 <USBD_VND_DataReceived+0x398>)
 8018bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bf2:	495a      	ldr	r1, [pc, #360]	@ (8018d5c <USBD_VND_DataReceived+0x39c>)
 8018bf4:	e9c1 2300 	strd	r2, r3, [r1]
                HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_SET);
 8018bf8:	2201      	movs	r2, #1
 8018bfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018bfe:	4858      	ldr	r0, [pc, #352]	@ (8018d60 <USBD_VND_DataReceived+0x3a0>)
 8018c00:	f7f1 fa70 	bl	800a0e4 <HAL_GPIO_WritePin>
                /* КРИТИЧНО: перезапускаем ADC/DMA после STOP */
                {
                    extern ADC_HandleTypeDef hadc1, hadc2;
                    extern HAL_StatusTypeDef adc_stream_start(ADC_HandleTypeDef *adc1, ADC_HandleTypeDef *adc2);
                    HAL_StatusTypeDef adc_st = adc_stream_start(&hadc1, &hadc2);
 8018c04:	4957      	ldr	r1, [pc, #348]	@ (8018d64 <USBD_VND_DataReceived+0x3a4>)
 8018c06:	4858      	ldr	r0, [pc, #352]	@ (8018d68 <USBD_VND_DataReceived+0x3a8>)
 8018c08:	f7e7 fdbe 	bl	8000788 <adc_stream_start>
 8018c0c:	4603      	mov	r3, r0
 8018c0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                    if(adc_st != HAL_OK){
 8018c12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d005      	beq.n	8018c26 <USBD_VND_DataReceived+0x266>
                        VND_LOG("START_STREAM: adc_stream_start FAILED (%d)", adc_st);
                        cdc_logf("ERR ADC_START_FAIL st=%d", adc_st);
 8018c1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018c1e:	4619      	mov	r1, r3
 8018c20:	4852      	ldr	r0, [pc, #328]	@ (8018d6c <USBD_VND_DataReceived+0x3ac>)
 8018c22:	f7fc fc7f 	bl	8015524 <cdc_logf>
                        VND_LOG("START_STREAM: ADC/DMA restarted OK");
                    }
                }
                /* ДИАГНОСТИКА: выводим активный профиль и параметры */
                {
                    uint8_t prof = adc_stream_get_profile();
 8018c26:	f7e7 fc93 	bl	8000550 <adc_stream_get_profile>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
                    uint16_t samp = adc_stream_get_active_samples();
 8018c30:	f7e7 fc9a 	bl	8000568 <adc_stream_get_active_samples>
 8018c34:	4603      	mov	r3, r0
 8018c36:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                    uint16_t rate = adc_stream_get_buf_rate();
 8018c3a:	f7e7 fca1 	bl	8000580 <adc_stream_get_buf_rate>
 8018c3e:	4603      	mov	r3, r0
 8018c40:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
                    cdc_logf("EVT START t=%lu profile=%u samples=%u rate=%u Hz bytes=%llu", 
 8018c44:	4b31      	ldr	r3, [pc, #196]	@ (8018d0c <USBD_VND_DataReceived+0x34c>)
 8018c46:	6818      	ldr	r0, [r3, #0]
 8018c48:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8018c4c:	f8b7 5044 	ldrh.w	r5, [r7, #68]	@ 0x44
 8018c50:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 8018c54:	4b41      	ldr	r3, [pc, #260]	@ (8018d5c <USBD_VND_DataReceived+0x39c>)
 8018c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018c5e:	9100      	str	r1, [sp, #0]
 8018c60:	462b      	mov	r3, r5
 8018c62:	4622      	mov	r2, r4
 8018c64:	4601      	mov	r1, r0
 8018c66:	4842      	ldr	r0, [pc, #264]	@ (8018d70 <USBD_VND_DataReceived+0x3b0>)
 8018c68:	f7fc fc5c 	bl	8015524 <cdc_logf>
                    //     .frames_sent = 0,
                    //     .is_streaming = 1
                    // };
                    // stream_display_update(&stream_info);
                    /* Параметры хоста (профиль/окна/частоты) */
                    vnd_update_lcd_params();
 8018c6c:	f7fc fc0a 	bl	8015484 <vnd_update_lcd_params>
                }
                if(!full_mode){ diag_mode_active = 1; }
 8018c70:	4b29      	ldr	r3, [pc, #164]	@ (8018d18 <USBD_VND_DataReceived+0x358>)
 8018c72:	781b      	ldrb	r3, [r3, #0]
 8018c74:	b2db      	uxtb	r3, r3
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d102      	bne.n	8018c80 <USBD_VND_DataReceived+0x2c0>
 8018c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8018d74 <USBD_VND_DataReceived+0x3b4>)
 8018c7c:	2201      	movs	r2, #1
 8018c7e:	701a      	strb	r2, [r3, #0]
                /* Не формируем синтетическую первую пару: ждём реальные данные */
#if !VND_DISABLE_TEST
                if(!test_sent && !test_in_flight && !vnd_ep_busy){ vnd_try_send_test_from_task(); }
#endif
                /* Диагностический режим: подготовка и первая отправка */
                if(diag_mode_active){
 8018c80:	4b3c      	ldr	r3, [pc, #240]	@ (8018d74 <USBD_VND_DataReceived+0x3b4>)
 8018c82:	781b      	ldrb	r3, [r3, #0]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	f000 841a 	beq.w	80194be <USBD_VND_DataReceived+0xafe>
                    if(cur_samples_per_frame == 0){
 8018c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8018cc4 <USBD_VND_DataReceived+0x304>)
 8018c8c:	881b      	ldrh	r3, [r3, #0]
 8018c8e:	b29b      	uxth	r3, r3
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	f040 808f 	bne.w	8018db4 <USBD_VND_DataReceived+0x3f4>
                        /* если хост задал samples_per_frame — используем его для DIAG */
                        uint16_t ds = (vnd_frame_samples_req != 0) ? vnd_frame_samples_req : diag_samples;
 8018c96:	4b21      	ldr	r3, [pc, #132]	@ (8018d1c <USBD_VND_DataReceived+0x35c>)
 8018c98:	881b      	ldrh	r3, [r3, #0]
 8018c9a:	b29b      	uxth	r3, r3
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d06b      	beq.n	8018d78 <USBD_VND_DataReceived+0x3b8>
 8018ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8018d1c <USBD_VND_DataReceived+0x35c>)
 8018ca2:	881b      	ldrh	r3, [r3, #0]
 8018ca4:	b29b      	uxth	r3, r3
 8018ca6:	e069      	b.n	8018d7c <USBD_VND_DataReceived+0x3bc>
 8018ca8:	2401a094 	.word	0x2401a094
 8018cac:	0801d16c 	.word	0x0801d16c
 8018cb0:	24019ff9 	.word	0x24019ff9
 8018cb4:	24019ff8 	.word	0x24019ff8
 8018cb8:	24000050 	.word	0x24000050
 8018cbc:	24019ffa 	.word	0x24019ffa
 8018cc0:	24019ffc 	.word	0x24019ffc
 8018cc4:	2400dbac 	.word	0x2400dbac
 8018cc8:	2400dbae 	.word	0x2400dbae
 8018ccc:	2400dc3c 	.word	0x2400dc3c
 8018cd0:	2400dbbb 	.word	0x2400dbbb
 8018cd4:	2400dc53 	.word	0x2400dc53
 8018cd8:	2400dbba 	.word	0x2400dbba
 8018cdc:	2400dc54 	.word	0x2400dc54
 8018ce0:	2400dc55 	.word	0x2400dc55
 8018ce4:	2400dc56 	.word	0x2400dc56
 8018ce8:	2400dcf0 	.word	0x2400dcf0
 8018cec:	2400dc57 	.word	0x2400dc57
 8018cf0:	2400dbf0 	.word	0x2400dbf0
 8018cf4:	2400dba8 	.word	0x2400dba8
 8018cf8:	2400dbec 	.word	0x2400dbec
 8018cfc:	2400dbbc 	.word	0x2400dbbc
 8018d00:	2400dc40 	.word	0x2400dc40
 8018d04:	2400dbe0 	.word	0x2400dbe0
 8018d08:	2400dbe4 	.word	0x2400dbe4
 8018d0c:	2400dbb0 	.word	0x2400dbb0
 8018d10:	2400dc04 	.word	0x2400dc04
 8018d14:	2400dc08 	.word	0x2400dc08
 8018d18:	2400003c 	.word	0x2400003c
 8018d1c:	2400dc3a 	.word	0x2400dc3a
 8018d20:	2400dbb8 	.word	0x2400dbb8
 8018d24:	2400003b 	.word	0x2400003b
 8018d28:	2400dbb9 	.word	0x2400dbb9
 8018d2c:	2400dc1c 	.word	0x2400dc1c
 8018d30:	2401a061 	.word	0x2401a061
 8018d34:	2401a060 	.word	0x2401a060
 8018d38:	2401a070 	.word	0x2401a070
 8018d3c:	2401a06c 	.word	0x2401a06c
 8018d40:	2401a068 	.word	0x2401a068
 8018d44:	2401a064 	.word	0x2401a064
 8018d48:	2400dba4 	.word	0x2400dba4
 8018d4c:	2400dc10 	.word	0x2400dc10
 8018d50:	2400dbf4 	.word	0x2400dbf4
 8018d54:	2400dc52 	.word	0x2400dc52
 8018d58:	2400dc30 	.word	0x2400dc30
 8018d5c:	2400dc48 	.word	0x2400dc48
 8018d60:	58020c00 	.word	0x58020c00
 8018d64:	2400adb0 	.word	0x2400adb0
 8018d68:	2400ad40 	.word	0x2400ad40
 8018d6c:	0801d190 	.word	0x0801d190
 8018d70:	0801d1ac 	.word	0x0801d1ac
 8018d74:	2400dcf1 	.word	0x2400dcf1
 8018d78:	4b98      	ldr	r3, [pc, #608]	@ (8018fdc <USBD_VND_DataReceived+0x61c>)
 8018d7a:	881b      	ldrh	r3, [r3, #0]
 8018d7c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
                        if(ds > VND_MAX_SAMPLES) ds = VND_MAX_SAMPLES;
 8018d80:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8018d84:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8018d88:	d903      	bls.n	8018d92 <USBD_VND_DataReceived+0x3d2>
 8018d8a:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 8018d8e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
                        diag_samples = ds;
 8018d92:	4a92      	ldr	r2, [pc, #584]	@ (8018fdc <USBD_VND_DataReceived+0x61c>)
 8018d94:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8018d98:	8013      	strh	r3, [r2, #0]
                        cur_samples_per_frame = diag_samples;
 8018d9a:	4b90      	ldr	r3, [pc, #576]	@ (8018fdc <USBD_VND_DataReceived+0x61c>)
 8018d9c:	881a      	ldrh	r2, [r3, #0]
 8018d9e:	4b90      	ldr	r3, [pc, #576]	@ (8018fe0 <USBD_VND_DataReceived+0x620>)
 8018da0:	801a      	strh	r2, [r3, #0]
                        cur_expected_frame_size = (uint16_t)(VND_FRAME_HDR_SIZE + cur_samples_per_frame*2u);
 8018da2:	4b8f      	ldr	r3, [pc, #572]	@ (8018fe0 <USBD_VND_DataReceived+0x620>)
 8018da4:	881b      	ldrh	r3, [r3, #0]
 8018da6:	b29b      	uxth	r3, r3
 8018da8:	3310      	adds	r3, #16
 8018daa:	b29b      	uxth	r3, r3
 8018dac:	005b      	lsls	r3, r3, #1
 8018dae:	b29a      	uxth	r2, r3
 8018db0:	4b8c      	ldr	r3, [pc, #560]	@ (8018fe4 <USBD_VND_DataReceived+0x624>)
 8018db2:	801a      	strh	r2, [r3, #0]
                    }
                    diag_prepared_seq = 0xFFFFFFFFu; diag_current_pair_seq = 0xFFFFFFFFu;
 8018db4:	4b8c      	ldr	r3, [pc, #560]	@ (8018fe8 <USBD_VND_DataReceived+0x628>)
 8018db6:	f04f 32ff 	mov.w	r2, #4294967295
 8018dba:	601a      	str	r2, [r3, #0]
 8018dbc:	4b8b      	ldr	r3, [pc, #556]	@ (8018fec <USBD_VND_DataReceived+0x62c>)
 8018dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8018dc2:	601a      	str	r2, [r3, #0]
                    vnd_diag_prepare_pair(stream_seq, cur_samples_per_frame);
 8018dc4:	4b8a      	ldr	r3, [pc, #552]	@ (8018ff0 <USBD_VND_DataReceived+0x630>)
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	4a85      	ldr	r2, [pc, #532]	@ (8018fe0 <USBD_VND_DataReceived+0x620>)
 8018dca:	8812      	ldrh	r2, [r2, #0]
 8018dcc:	b292      	uxth	r2, r2
 8018dce:	4611      	mov	r1, r2
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	f7fd fe4b 	bl	8016a6c <vnd_diag_prepare_pair>
                    diag_prepared_seq = stream_seq; diag_current_pair_seq = stream_seq;
 8018dd6:	4b86      	ldr	r3, [pc, #536]	@ (8018ff0 <USBD_VND_DataReceived+0x630>)
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	4a83      	ldr	r2, [pc, #524]	@ (8018fe8 <USBD_VND_DataReceived+0x628>)
 8018ddc:	6013      	str	r3, [r2, #0]
 8018dde:	4b84      	ldr	r3, [pc, #528]	@ (8018ff0 <USBD_VND_DataReceived+0x630>)
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	4a82      	ldr	r2, [pc, #520]	@ (8018fec <USBD_VND_DataReceived+0x62c>)
 8018de4:	6013      	str	r3, [r2, #0]
                    if(!vnd_ep_busy){ (void)vnd_diag_try_tx(); }
 8018de6:	4b83      	ldr	r3, [pc, #524]	@ (8018ff4 <USBD_VND_DataReceived+0x634>)
 8018de8:	781b      	ldrb	r3, [r3, #0]
 8018dea:	b2db      	uxtb	r3, r3
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	f040 8366 	bne.w	80194be <USBD_VND_DataReceived+0xafe>
 8018df2:	f7fd fef9 	bl	8016be8 <vnd_diag_try_tx>
                }
        }
        break;
 8018df6:	e362      	b.n	80194be <USBD_VND_DataReceived+0xafe>
        case VND_CMD_SET_FRAME_SAMPLES:
            if(len >= 3){
 8018df8:	683b      	ldr	r3, [r7, #0]
 8018dfa:	2b02      	cmp	r3, #2
 8018dfc:	f240 8361 	bls.w	80194c2 <USBD_VND_DataReceived+0xb02>
                uint16_t ns = (uint16_t)(data[1] | (data[2] << 8));
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	3301      	adds	r3, #1
 8018e04:	781b      	ldrb	r3, [r3, #0]
 8018e06:	b21a      	sxth	r2, r3
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	3302      	adds	r3, #2
 8018e0c:	781b      	ldrb	r3, [r3, #0]
 8018e0e:	b21b      	sxth	r3, r3
 8018e10:	021b      	lsls	r3, r3, #8
 8018e12:	b21b      	sxth	r3, r3
 8018e14:	4313      	orrs	r3, r2
 8018e16:	b21b      	sxth	r3, r3
 8018e18:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
                if(ns > VND_MAX_SAMPLES) ns = VND_MAX_SAMPLES;
 8018e1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8018e20:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8018e24:	d903      	bls.n	8018e2e <USBD_VND_DataReceived+0x46e>
 8018e26:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 8018e2a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
                vnd_frame_samples_req = ns;
 8018e2e:	4a72      	ldr	r2, [pc, #456]	@ (8018ff8 <USBD_VND_DataReceived+0x638>)
 8018e30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8018e34:	8013      	strh	r3, [r2, #0]
                /* Применим к диагностике сразу, чтобы DIAG шёл с нужным размером */
                diag_samples = (ns != 0) ? ns : diag_samples;
 8018e36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d002      	beq.n	8018e44 <USBD_VND_DataReceived+0x484>
 8018e3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8018e42:	e001      	b.n	8018e48 <USBD_VND_DataReceived+0x488>
 8018e44:	4b65      	ldr	r3, [pc, #404]	@ (8018fdc <USBD_VND_DataReceived+0x61c>)
 8018e46:	881b      	ldrh	r3, [r3, #0]
 8018e48:	4a64      	ldr	r2, [pc, #400]	@ (8018fdc <USBD_VND_DataReceived+0x61c>)
 8018e4a:	8013      	strh	r3, [r2, #0]
                vnd_recompute_pair_timing(vnd_frame_samples_req);
 8018e4c:	4b6a      	ldr	r3, [pc, #424]	@ (8018ff8 <USBD_VND_DataReceived+0x638>)
 8018e4e:	881b      	ldrh	r3, [r3, #0]
 8018e50:	b29b      	uxth	r3, r3
 8018e52:	4618      	mov	r0, r3
 8018e54:	f7fc fd34 	bl	80158c0 <vnd_recompute_pair_timing>
                /* Снимем фиксацию размера, чтобы применилось при следующем build */
                cur_samples_per_frame = 0; cur_expected_frame_size = 0;
 8018e58:	4b61      	ldr	r3, [pc, #388]	@ (8018fe0 <USBD_VND_DataReceived+0x620>)
 8018e5a:	2200      	movs	r2, #0
 8018e5c:	801a      	strh	r2, [r3, #0]
 8018e5e:	4b61      	ldr	r3, [pc, #388]	@ (8018fe4 <USBD_VND_DataReceived+0x624>)
 8018e60:	2200      	movs	r2, #0
 8018e62:	801a      	strh	r2, [r3, #0]
                VND_LOG("SET_FRAME_SAMPLES %u -> period=%ums", (unsigned)vnd_frame_samples_req, (unsigned)vnd_pair_period_ms);
                cdc_logf("EVT SET_FRAME_SAMPLES %u", (unsigned)vnd_frame_samples_req);
 8018e64:	4b64      	ldr	r3, [pc, #400]	@ (8018ff8 <USBD_VND_DataReceived+0x638>)
 8018e66:	881b      	ldrh	r3, [r3, #0]
 8018e68:	b29b      	uxth	r3, r3
 8018e6a:	4619      	mov	r1, r3
 8018e6c:	4863      	ldr	r0, [pc, #396]	@ (8018ffc <USBD_VND_DataReceived+0x63c>)
 8018e6e:	f7fc fb59 	bl	8015524 <cdc_logf>
                vnd_update_lcd_params();
 8018e72:	f7fc fb07 	bl	8015484 <vnd_update_lcd_params>
            }
            break;
 8018e76:	e324      	b.n	80194c2 <USBD_VND_DataReceived+0xb02>
        case VND_CMD_STOP_STREAM:
        {
            /* В полном режиме: STOP с ACK-STAT между парами; в DIAG — немедленная остановка без STAT по bulk */
            if(diag_mode_active){
 8018e78:	4b61      	ldr	r3, [pc, #388]	@ (8019000 <USBD_VND_DataReceived+0x640>)
 8018e7a:	781b      	ldrb	r3, [r3, #0]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d058      	beq.n	8018f32 <USBD_VND_DataReceived+0x572>
                /* Мгновенно останавливаем стрим без ACK-STAT в bulk, чтобы не нарушать DIAG поток */
                stop_request = 0; pending_status = 0;
 8018e80:	4b60      	ldr	r3, [pc, #384]	@ (8019004 <USBD_VND_DataReceived+0x644>)
 8018e82:	2200      	movs	r2, #0
 8018e84:	701a      	strb	r2, [r3, #0]
 8018e86:	4b60      	ldr	r3, [pc, #384]	@ (8019008 <USBD_VND_DataReceived+0x648>)
 8018e88:	2200      	movs	r2, #0
 8018e8a:	701a      	strb	r2, [r3, #0]
                if(streaming){ streaming = 0; VND_LOG("STOP_STREAM (diag, immediate)"); }
 8018e8c:	4b5f      	ldr	r3, [pc, #380]	@ (801900c <USBD_VND_DataReceived+0x64c>)
 8018e8e:	781b      	ldrb	r3, [r3, #0]
 8018e90:	b2db      	uxtb	r3, r3
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d002      	beq.n	8018e9c <USBD_VND_DataReceived+0x4dc>
 8018e96:	4b5d      	ldr	r3, [pc, #372]	@ (801900c <USBD_VND_DataReceived+0x64c>)
 8018e98:	2200      	movs	r2, #0
 8018e9a:	701a      	strb	r2, [r3, #0]
                diag_mode_active = 0;
 8018e9c:	4b58      	ldr	r3, [pc, #352]	@ (8019000 <USBD_VND_DataReceived+0x640>)
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	701a      	strb	r2, [r3, #0]
                vnd_reset_buffers();
 8018ea2:	f7fc fead 	bl	8015c00 <vnd_reset_buffers>
                sending_channel = 0xFF; pending_B = 0; pending_B_since_ms = 0; test_sent = 0; test_in_flight = 0; vnd_inflight = 0;
 8018ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8019010 <USBD_VND_DataReceived+0x650>)
 8018ea8:	22ff      	movs	r2, #255	@ 0xff
 8018eaa:	701a      	strb	r2, [r3, #0]
 8018eac:	4b59      	ldr	r3, [pc, #356]	@ (8019014 <USBD_VND_DataReceived+0x654>)
 8018eae:	2200      	movs	r2, #0
 8018eb0:	701a      	strb	r2, [r3, #0]
 8018eb2:	4b59      	ldr	r3, [pc, #356]	@ (8019018 <USBD_VND_DataReceived+0x658>)
 8018eb4:	2200      	movs	r2, #0
 8018eb6:	601a      	str	r2, [r3, #0]
 8018eb8:	4b58      	ldr	r3, [pc, #352]	@ (801901c <USBD_VND_DataReceived+0x65c>)
 8018eba:	2200      	movs	r2, #0
 8018ebc:	701a      	strb	r2, [r3, #0]
 8018ebe:	4b58      	ldr	r3, [pc, #352]	@ (8019020 <USBD_VND_DataReceived+0x660>)
 8018ec0:	2200      	movs	r2, #0
 8018ec2:	701a      	strb	r2, [r3, #0]
 8018ec4:	4b57      	ldr	r3, [pc, #348]	@ (8019024 <USBD_VND_DataReceived+0x664>)
 8018ec6:	2200      	movs	r2, #0
 8018ec8:	701a      	strb	r2, [r3, #0]
                /* Останавливаем DMA/источник данных */
                extern void adc_stream_stop(void);
                adc_stream_stop();
 8018eca:	f7e7 fa93 	bl	80003f4 <adc_stream_stop>
                HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_RESET);
 8018ece:	2200      	movs	r2, #0
 8018ed0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018ed4:	4854      	ldr	r0, [pc, #336]	@ (8019028 <USBD_VND_DataReceived+0x668>)
 8018ed6:	f7f1 f905 	bl	800a0e4 <HAL_GPIO_WritePin>
                {
                    uint64_t cur = vnd_total_tx_bytes;
 8018eda:	4b54      	ldr	r3, [pc, #336]	@ (801902c <USBD_VND_DataReceived+0x66c>)
 8018edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ee0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
                    uint64_t delta = (cur >= vnd_tx_bytes_at_start) ? (cur - vnd_tx_bytes_at_start) : 0ULL;
 8018ee4:	4b52      	ldr	r3, [pc, #328]	@ (8019030 <USBD_VND_DataReceived+0x670>)
 8018ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8018eee:	4290      	cmp	r0, r2
 8018ef0:	eb71 0303 	sbcs.w	r3, r1, r3
 8018ef4:	d308      	bcc.n	8018f08 <USBD_VND_DataReceived+0x548>
 8018ef6:	4b4e      	ldr	r3, [pc, #312]	@ (8019030 <USBD_VND_DataReceived+0x670>)
 8018ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018efc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8018f00:	1a84      	subs	r4, r0, r2
 8018f02:	eb61 0503 	sbc.w	r5, r1, r3
 8018f06:	e003      	b.n	8018f10 <USBD_VND_DataReceived+0x550>
 8018f08:	f04f 0400 	mov.w	r4, #0
 8018f0c:	f04f 0500 	mov.w	r5, #0
 8018f10:	e9c7 4512 	strd	r4, r5, [r7, #72]	@ 0x48
                    cdc_logf("EVT STOP total=%llu delta=%llu", (unsigned long long)cur, (unsigned long long)delta);
 8018f14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8018f18:	e9cd 2300 	strd	r2, r3, [sp]
 8018f1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8018f20:	4844      	ldr	r0, [pc, #272]	@ (8019034 <USBD_VND_DataReceived+0x674>)
 8018f22:	f7fc faff 	bl	8015524 <cdc_logf>
                    //     .sample_count = 0,
                    //     .frames_sent = dbg_sent_ch0_total + dbg_sent_ch1_total,
                    //     .is_streaming = 0
                    // };
                    // stream_display_update(&stream_info);
                    vnd_update_lcd_params();
 8018f26:	f7fc faad 	bl	8015484 <vnd_update_lcd_params>
                }
                vnd_tx_kick = 1; /* пнуть таск на всякий случай */
 8018f2a:	4b43      	ldr	r3, [pc, #268]	@ (8019038 <USBD_VND_DataReceived+0x678>)
 8018f2c:	2201      	movs	r2, #1
 8018f2e:	701a      	strb	r2, [r3, #0]
                pending_status = 1; /* попросим отправить STAT между парами */
                VND_LOG("STOP_STREAM request -> queue STAT");
                cdc_logf("EVT STOP_REQ t=%lu", (unsigned long)HAL_GetTick());
            }
        }
        break;
 8018f30:	e2e0      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
                stop_request = 1; /* помечаем запрос остановки */
 8018f32:	4b34      	ldr	r3, [pc, #208]	@ (8019004 <USBD_VND_DataReceived+0x644>)
 8018f34:	2201      	movs	r2, #1
 8018f36:	701a      	strb	r2, [r3, #0]
                pending_status = 1; /* попросим отправить STAT между парами */
 8018f38:	4b33      	ldr	r3, [pc, #204]	@ (8019008 <USBD_VND_DataReceived+0x648>)
 8018f3a:	2201      	movs	r2, #1
 8018f3c:	701a      	strb	r2, [r3, #0]
                cdc_logf("EVT STOP_REQ t=%lu", (unsigned long)HAL_GetTick());
 8018f3e:	f7ec f815 	bl	8004f6c <HAL_GetTick>
 8018f42:	4603      	mov	r3, r0
 8018f44:	4619      	mov	r1, r3
 8018f46:	483d      	ldr	r0, [pc, #244]	@ (801903c <USBD_VND_DataReceived+0x67c>)
 8018f48:	f7fc faec 	bl	8015524 <cdc_logf>
        break;
 8018f4c:	e2d2      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
        case VND_CMD_GET_STATUS:
        {
            /* GET_STATUS всегда допускается: во время стрима — только между парами */
            if(streaming){
 8018f4e:	4b2f      	ldr	r3, [pc, #188]	@ (801900c <USBD_VND_DataReceived+0x64c>)
 8018f50:	781b      	ldrb	r3, [r3, #0]
 8018f52:	b2db      	uxtb	r3, r3
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d008      	beq.n	8018f6a <USBD_VND_DataReceived+0x5aa>
                /* В DIAG-режиме исключаем любые STAT в bulk-потоке: используйте EP0 (ctrl) */
                if(diag_mode_active){ VND_LOG("GET_STATUS bulk ignored in DIAG (use EP0)"); break; }
 8018f58:	4b29      	ldr	r3, [pc, #164]	@ (8019000 <USBD_VND_DataReceived+0x640>)
 8018f5a:	781b      	ldrb	r3, [r3, #0]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	f040 82b2 	bne.w	80194c6 <USBD_VND_DataReceived+0xb06>
                pending_status = 1; VND_LOG("GET_STATUS queued"); break;
 8018f62:	4b29      	ldr	r3, [pc, #164]	@ (8019008 <USBD_VND_DataReceived+0x648>)
 8018f64:	2201      	movs	r2, #1
 8018f66:	701a      	strb	r2, [r3, #0]
 8018f68:	e2c4      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
            }
            if(!vnd_ep_busy)
 8018f6a:	4b22      	ldr	r3, [pc, #136]	@ (8018ff4 <USBD_VND_DataReceived+0x634>)
 8018f6c:	781b      	ldrb	r3, [r3, #0]
 8018f6e:	b2db      	uxtb	r3, r3
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d12f      	bne.n	8018fd4 <USBD_VND_DataReceived+0x614>
            {
                vnd_status_permit_once = 1;
 8018f74:	4b32      	ldr	r3, [pc, #200]	@ (8019040 <USBD_VND_DataReceived+0x680>)
 8018f76:	2201      	movs	r2, #1
 8018f78:	701a      	strb	r2, [r3, #0]
                uint16_t l = vnd_build_status((uint8_t*)status_buf, sizeof(status_buf));
 8018f7a:	2140      	movs	r1, #64	@ 0x40
 8018f7c:	4831      	ldr	r0, [pc, #196]	@ (8019044 <USBD_VND_DataReceived+0x684>)
 8018f7e:	f7fc fee9 	bl	8015d54 <vnd_build_status>
 8018f82:	4603      	mov	r3, r0
 8018f84:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
                if(l)
 8018f88:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	f000 829c 	beq.w	80194ca <USBD_VND_DataReceived+0xb0a>
                {
                    vnd_tx_ready = 0; vnd_ep_busy = 1; vnd_last_tx_len = l; vnd_last_tx_start_ms = HAL_GetTick();
 8018f92:	4b2d      	ldr	r3, [pc, #180]	@ (8019048 <USBD_VND_DataReceived+0x688>)
 8018f94:	2200      	movs	r2, #0
 8018f96:	701a      	strb	r2, [r3, #0]
 8018f98:	4b16      	ldr	r3, [pc, #88]	@ (8018ff4 <USBD_VND_DataReceived+0x634>)
 8018f9a:	2201      	movs	r2, #1
 8018f9c:	701a      	strb	r2, [r3, #0]
 8018f9e:	4a2b      	ldr	r2, [pc, #172]	@ (801904c <USBD_VND_DataReceived+0x68c>)
 8018fa0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8018fa4:	8013      	strh	r3, [r2, #0]
 8018fa6:	f7eb ffe1 	bl	8004f6c <HAL_GetTick>
 8018faa:	4603      	mov	r3, r0
 8018fac:	4a28      	ldr	r2, [pc, #160]	@ (8019050 <USBD_VND_DataReceived+0x690>)
 8018fae:	6013      	str	r3, [r2, #0]
                    if(USBD_VND_Transmit(&hUsbDeviceHS, (uint8_t*)status_buf, l) == USBD_OK)
 8018fb0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8018fb4:	461a      	mov	r2, r3
 8018fb6:	4923      	ldr	r1, [pc, #140]	@ (8019044 <USBD_VND_DataReceived+0x684>)
 8018fb8:	4826      	ldr	r0, [pc, #152]	@ (8019054 <USBD_VND_DataReceived+0x694>)
 8018fba:	f000 fbbb 	bl	8019734 <USBD_VND_Transmit>
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	f000 8282 	beq.w	80194ca <USBD_VND_DataReceived+0xb0a>
                        VND_LOG("STAT_TX req len=%u", l);
                    else { VND_LOG("STAT_BUSY_FAIL"); vnd_tx_ready = 1; vnd_ep_busy = 0; }
 8018fc6:	4b20      	ldr	r3, [pc, #128]	@ (8019048 <USBD_VND_DataReceived+0x688>)
 8018fc8:	2201      	movs	r2, #1
 8018fca:	701a      	strb	r2, [r3, #0]
 8018fcc:	4b09      	ldr	r3, [pc, #36]	@ (8018ff4 <USBD_VND_DataReceived+0x634>)
 8018fce:	2200      	movs	r2, #0
 8018fd0:	701a      	strb	r2, [r3, #0]
                }
            } else {
                pending_status = 1; VND_LOG("STAT_PENDING on GET_STATUS");
            }
        }
        break;
 8018fd2:	e27a      	b.n	80194ca <USBD_VND_DataReceived+0xb0a>
                pending_status = 1; VND_LOG("STAT_PENDING on GET_STATUS");
 8018fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8019008 <USBD_VND_DataReceived+0x648>)
 8018fd6:	2201      	movs	r2, #1
 8018fd8:	701a      	strb	r2, [r3, #0]
        break;
 8018fda:	e276      	b.n	80194ca <USBD_VND_DataReceived+0xb0a>
 8018fdc:	24000044 	.word	0x24000044
 8018fe0:	2400dbac 	.word	0x2400dbac
 8018fe4:	2400dbae 	.word	0x2400dbae
 8018fe8:	24000048 	.word	0x24000048
 8018fec:	2400004c 	.word	0x2400004c
 8018ff0:	2400dba8 	.word	0x2400dba8
 8018ff4:	2400dbb8 	.word	0x2400dbb8
 8018ff8:	2400dc3a 	.word	0x2400dc3a
 8018ffc:	0801d1e8 	.word	0x0801d1e8
 8019000:	2400dcf1 	.word	0x2400dcf1
 8019004:	2400dc58 	.word	0x2400dc58
 8019008:	2400dcf0 	.word	0x2400dcf0
 801900c:	2400dba4 	.word	0x2400dba4
 8019010:	24000050 	.word	0x24000050
 8019014:	24019ffa 	.word	0x24019ffa
 8019018:	24019ffc 	.word	0x24019ffc
 801901c:	2400dbba 	.word	0x2400dbba
 8019020:	2400dbbb 	.word	0x2400dbbb
 8019024:	2400dbb9 	.word	0x2400dbb9
 8019028:	58020c00 	.word	0x58020c00
 801902c:	2400dc30 	.word	0x2400dc30
 8019030:	2400dc48 	.word	0x2400dc48
 8019034:	0801d14c 	.word	0x0801d14c
 8019038:	2400dc50 	.word	0x2400dc50
 801903c:	0801d204 	.word	0x0801d204
 8019040:	2400dc52 	.word	0x2400dc52
 8019044:	2400dc70 	.word	0x2400dc70
 8019048:	2400003b 	.word	0x2400003b
 801904c:	2400dc18 	.word	0x2400dc18
 8019050:	2400dc1c 	.word	0x2400dc1c
 8019054:	2400d8c8 	.word	0x2400d8c8
        case VND_CMD_GET_STATUS_IMM:
        {
            /* Диагностический запрос: попытаться отправить STAT немедленно даже при pending_B.
               Использовать экономно, чтобы не нарушать A->B поток. Не выполняем в DIAG-режиме. */
            if(diag_mode_active){ VND_LOG("GET_STATUS_IMM ignored in DIAG"); break; }
 8019058:	4b8e      	ldr	r3, [pc, #568]	@ (8019294 <USBD_VND_DataReceived+0x8d4>)
 801905a:	781b      	ldrb	r3, [r3, #0]
 801905c:	2b00      	cmp	r3, #0
 801905e:	f040 8236 	bne.w	80194ce <USBD_VND_DataReceived+0xb0e>
            if(!vnd_ep_busy){
 8019062:	4b8d      	ldr	r3, [pc, #564]	@ (8019298 <USBD_VND_DataReceived+0x8d8>)
 8019064:	781b      	ldrb	r3, [r3, #0]
 8019066:	b2db      	uxtb	r3, r3
 8019068:	2b00      	cmp	r3, #0
 801906a:	f040 8232 	bne.w	80194d2 <USBD_VND_DataReceived+0xb12>
                uint16_t l = vnd_build_status((uint8_t*)status_buf, sizeof(status_buf));
 801906e:	2140      	movs	r1, #64	@ 0x40
 8019070:	488a      	ldr	r0, [pc, #552]	@ (801929c <USBD_VND_DataReceived+0x8dc>)
 8019072:	f7fc fe6f 	bl	8015d54 <vnd_build_status>
 8019076:	4603      	mov	r3, r0
 8019078:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
                if(l){
 801907c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8019080:	2b00      	cmp	r3, #0
 8019082:	f000 8226 	beq.w	80194d2 <USBD_VND_DataReceived+0xb12>
                    vnd_status_permit_once = 1;
 8019086:	4b86      	ldr	r3, [pc, #536]	@ (80192a0 <USBD_VND_DataReceived+0x8e0>)
 8019088:	2201      	movs	r2, #1
 801908a:	701a      	strb	r2, [r3, #0]
                    vnd_tx_ready = 0; vnd_ep_busy = 1; vnd_last_tx_len = l; vnd_last_tx_start_ms = HAL_GetTick();
 801908c:	4b85      	ldr	r3, [pc, #532]	@ (80192a4 <USBD_VND_DataReceived+0x8e4>)
 801908e:	2200      	movs	r2, #0
 8019090:	701a      	strb	r2, [r3, #0]
 8019092:	4b81      	ldr	r3, [pc, #516]	@ (8019298 <USBD_VND_DataReceived+0x8d8>)
 8019094:	2201      	movs	r2, #1
 8019096:	701a      	strb	r2, [r3, #0]
 8019098:	4a83      	ldr	r2, [pc, #524]	@ (80192a8 <USBD_VND_DataReceived+0x8e8>)
 801909a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801909e:	8013      	strh	r3, [r2, #0]
 80190a0:	f7eb ff64 	bl	8004f6c <HAL_GetTick>
 80190a4:	4603      	mov	r3, r0
 80190a6:	4a81      	ldr	r2, [pc, #516]	@ (80192ac <USBD_VND_DataReceived+0x8ec>)
 80190a8:	6013      	str	r3, [r2, #0]
                    if(USBD_VND_Transmit(&hUsbDeviceHS, (uint8_t*)status_buf, l) == USBD_OK){
 80190aa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80190ae:	461a      	mov	r2, r3
 80190b0:	497a      	ldr	r1, [pc, #488]	@ (801929c <USBD_VND_DataReceived+0x8dc>)
 80190b2:	487f      	ldr	r0, [pc, #508]	@ (80192b0 <USBD_VND_DataReceived+0x8f0>)
 80190b4:	f000 fb3e 	bl	8019734 <USBD_VND_Transmit>
 80190b8:	4603      	mov	r3, r0
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d106      	bne.n	80190cc <USBD_VND_DataReceived+0x70c>
                        vnd_tx_meta_after((uint8_t*)status_buf, l);
 80190be:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80190c2:	4619      	mov	r1, r3
 80190c4:	4875      	ldr	r0, [pc, #468]	@ (801929c <USBD_VND_DataReceived+0x8dc>)
 80190c6:	f7fc fb81 	bl	80157cc <vnd_tx_meta_after>
                }
            } else {
                VND_LOG("STAT_IMM skipped: EP busy");
            }
        }
        break;
 80190ca:	e202      	b.n	80194d2 <USBD_VND_DataReceived+0xb12>
                        VND_LOG("STAT_IMM busy/fail"); vnd_tx_ready = 1; vnd_ep_busy = 0;
 80190cc:	4b75      	ldr	r3, [pc, #468]	@ (80192a4 <USBD_VND_DataReceived+0x8e4>)
 80190ce:	2201      	movs	r2, #1
 80190d0:	701a      	strb	r2, [r3, #0]
 80190d2:	4b71      	ldr	r3, [pc, #452]	@ (8019298 <USBD_VND_DataReceived+0x8d8>)
 80190d4:	2200      	movs	r2, #0
 80190d6:	701a      	strb	r2, [r3, #0]
        break;
 80190d8:	e1fb      	b.n	80194d2 <USBD_VND_DataReceived+0xb12>
        case VND_CMD_SET_WINDOWS:
            if(len >= 9)
 80190da:	683b      	ldr	r3, [r7, #0]
 80190dc:	2b08      	cmp	r3, #8
 80190de:	f240 81fa 	bls.w	80194d6 <USBD_VND_DataReceived+0xb16>
            {
                /* 1 + 8 байт */
                win_start0 = (uint16_t)(data[1] | (data[2] << 8));
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	3301      	adds	r3, #1
 80190e6:	781b      	ldrb	r3, [r3, #0]
 80190e8:	b21a      	sxth	r2, r3
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	3302      	adds	r3, #2
 80190ee:	781b      	ldrb	r3, [r3, #0]
 80190f0:	b21b      	sxth	r3, r3
 80190f2:	021b      	lsls	r3, r3, #8
 80190f4:	b21b      	sxth	r3, r3
 80190f6:	4313      	orrs	r3, r2
 80190f8:	b21b      	sxth	r3, r3
 80190fa:	b29a      	uxth	r2, r3
 80190fc:	4b6d      	ldr	r3, [pc, #436]	@ (80192b4 <USBD_VND_DataReceived+0x8f4>)
 80190fe:	801a      	strh	r2, [r3, #0]
                win_len0   = (uint16_t)(data[3] | (data[4] << 8));
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	3303      	adds	r3, #3
 8019104:	781b      	ldrb	r3, [r3, #0]
 8019106:	b21a      	sxth	r2, r3
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	3304      	adds	r3, #4
 801910c:	781b      	ldrb	r3, [r3, #0]
 801910e:	b21b      	sxth	r3, r3
 8019110:	021b      	lsls	r3, r3, #8
 8019112:	b21b      	sxth	r3, r3
 8019114:	4313      	orrs	r3, r2
 8019116:	b21b      	sxth	r3, r3
 8019118:	b29a      	uxth	r2, r3
 801911a:	4b67      	ldr	r3, [pc, #412]	@ (80192b8 <USBD_VND_DataReceived+0x8f8>)
 801911c:	801a      	strh	r2, [r3, #0]
                win_start1 = (uint16_t)(data[5] | (data[6] << 8));
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	3305      	adds	r3, #5
 8019122:	781b      	ldrb	r3, [r3, #0]
 8019124:	b21a      	sxth	r2, r3
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	3306      	adds	r3, #6
 801912a:	781b      	ldrb	r3, [r3, #0]
 801912c:	b21b      	sxth	r3, r3
 801912e:	021b      	lsls	r3, r3, #8
 8019130:	b21b      	sxth	r3, r3
 8019132:	4313      	orrs	r3, r2
 8019134:	b21b      	sxth	r3, r3
 8019136:	b29a      	uxth	r2, r3
 8019138:	4b60      	ldr	r3, [pc, #384]	@ (80192bc <USBD_VND_DataReceived+0x8fc>)
 801913a:	801a      	strh	r2, [r3, #0]
                win_len1   = (uint16_t)(data[7] | (data[8] << 8));
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	3307      	adds	r3, #7
 8019140:	781b      	ldrb	r3, [r3, #0]
 8019142:	b21a      	sxth	r2, r3
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	3308      	adds	r3, #8
 8019148:	781b      	ldrb	r3, [r3, #0]
 801914a:	b21b      	sxth	r3, r3
 801914c:	021b      	lsls	r3, r3, #8
 801914e:	b21b      	sxth	r3, r3
 8019150:	4313      	orrs	r3, r2
 8019152:	b21b      	sxth	r3, r3
 8019154:	b29a      	uxth	r2, r3
 8019156:	4b5a      	ldr	r3, [pc, #360]	@ (80192c0 <USBD_VND_DataReceived+0x900>)
 8019158:	801a      	strh	r2, [r3, #0]
                VND_LOG("SET_WINDOWS s0=%u l0=%u s1=%u l1=%u", win_start0, win_len0, win_start1, win_len1);
                vnd_update_lcd_params();
 801915a:	f7fc f993 	bl	8015484 <vnd_update_lcd_params>
            }
            break;
 801915e:	e1ba      	b.n	80194d6 <USBD_VND_DataReceived+0xb16>
        case VND_CMD_SET_BLOCK_HZ:
            if(len >= 3)
 8019160:	683b      	ldr	r3, [r7, #0]
 8019162:	2b02      	cmp	r3, #2
 8019164:	f240 81b9 	bls.w	80194da <USBD_VND_DataReceived+0xb1a>
            {
                uint16_t hz = (uint16_t)(data[1] | (data[2] << 8));
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	3301      	adds	r3, #1
 801916c:	781b      	ldrb	r3, [r3, #0]
 801916e:	b21a      	sxth	r2, r3
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	3302      	adds	r3, #2
 8019174:	781b      	ldrb	r3, [r3, #0]
 8019176:	b21b      	sxth	r3, r3
 8019178:	021b      	lsls	r3, r3, #8
 801917a:	b21b      	sxth	r3, r3
 801917c:	4313      	orrs	r3, r2
 801917e:	b21b      	sxth	r3, r3
 8019180:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
                if(hz == 0xFFFF) hz = 100;
 8019184:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8019188:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801918c:	4293      	cmp	r3, r2
 801918e:	d102      	bne.n	8019196 <USBD_VND_DataReceived+0x7d6>
 8019190:	2364      	movs	r3, #100	@ 0x64
 8019192:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
                if(hz < 20) hz = 20;
 8019196:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 801919a:	2b13      	cmp	r3, #19
 801919c:	d802      	bhi.n	80191a4 <USBD_VND_DataReceived+0x7e4>
 801919e:	2314      	movs	r3, #20
 80191a0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
                if(hz > 100) hz = 100;
 80191a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80191a8:	2b64      	cmp	r3, #100	@ 0x64
 80191aa:	d902      	bls.n	80191b2 <USBD_VND_DataReceived+0x7f2>
 80191ac:	2364      	movs	r3, #100	@ 0x64
 80191ae:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
                diag_hz = hz;
 80191b2:	4a44      	ldr	r2, [pc, #272]	@ (80192c4 <USBD_VND_DataReceived+0x904>)
 80191b4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80191b8:	8013      	strh	r3, [r2, #0]
                diag_period_ms = 1000 / diag_hz;
 80191ba:	4b42      	ldr	r3, [pc, #264]	@ (80192c4 <USBD_VND_DataReceived+0x904>)
 80191bc:	881b      	ldrh	r3, [r3, #0]
 80191be:	461a      	mov	r2, r3
 80191c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80191c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80191c8:	461a      	mov	r2, r3
 80191ca:	4b3f      	ldr	r3, [pc, #252]	@ (80192c8 <USBD_VND_DataReceived+0x908>)
 80191cc:	601a      	str	r2, [r3, #0]
                VND_LOG("SET_BLOCK_HZ %u", diag_hz);
                cdc_logf("EVT SET_BLOCK_HZ %u", (unsigned)diag_hz);
 80191ce:	4b3d      	ldr	r3, [pc, #244]	@ (80192c4 <USBD_VND_DataReceived+0x904>)
 80191d0:	881b      	ldrh	r3, [r3, #0]
 80191d2:	4619      	mov	r1, r3
 80191d4:	483d      	ldr	r0, [pc, #244]	@ (80192cc <USBD_VND_DataReceived+0x90c>)
 80191d6:	f7fc f9a5 	bl	8015524 <cdc_logf>
                vnd_update_lcd_params();
 80191da:	f7fc f953 	bl	8015484 <vnd_update_lcd_params>
            }
            break;
 80191de:	e17c      	b.n	80194da <USBD_VND_DataReceived+0xb1a>
        case VND_CMD_SET_ASYNC_MODE:
            if(len >= 2){
 80191e0:	683b      	ldr	r3, [r7, #0]
 80191e2:	2b01      	cmp	r3, #1
 80191e4:	f240 817b 	bls.w	80194de <USBD_VND_DataReceived+0xb1e>
                async_mode = data[1] ? 1 : 0;
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	3301      	adds	r3, #1
 80191ec:	781b      	ldrb	r3, [r3, #0]
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	bf14      	ite	ne
 80191f2:	2301      	movne	r3, #1
 80191f4:	2300      	moveq	r3, #0
 80191f6:	b2db      	uxtb	r3, r3
 80191f8:	461a      	mov	r2, r3
 80191fa:	4b35      	ldr	r3, [pc, #212]	@ (80192d0 <USBD_VND_DataReceived+0x910>)
 80191fc:	701a      	strb	r2, [r3, #0]
                /* Запретить async при одноканальном режиме (A-only/B-only) для стабильности */
                if(vnd_ch_mode != 2 && async_mode){ async_mode = 0; }
 80191fe:	4b35      	ldr	r3, [pc, #212]	@ (80192d4 <USBD_VND_DataReceived+0x914>)
 8019200:	781b      	ldrb	r3, [r3, #0]
 8019202:	b2db      	uxtb	r3, r3
 8019204:	2b02      	cmp	r3, #2
 8019206:	d007      	beq.n	8019218 <USBD_VND_DataReceived+0x858>
 8019208:	4b31      	ldr	r3, [pc, #196]	@ (80192d0 <USBD_VND_DataReceived+0x910>)
 801920a:	781b      	ldrb	r3, [r3, #0]
 801920c:	b2db      	uxtb	r3, r3
 801920e:	2b00      	cmp	r3, #0
 8019210:	d002      	beq.n	8019218 <USBD_VND_DataReceived+0x858>
 8019212:	4b2f      	ldr	r3, [pc, #188]	@ (80192d0 <USBD_VND_DataReceived+0x910>)
 8019214:	2200      	movs	r2, #0
 8019216:	701a      	strb	r2, [r3, #0]
                VND_LOG("SET_ASYNC_MODE %u", (unsigned)async_mode);
                cdc_logf("EVT SET_ASYNC %u", (unsigned)async_mode);
 8019218:	4b2d      	ldr	r3, [pc, #180]	@ (80192d0 <USBD_VND_DataReceived+0x910>)
 801921a:	781b      	ldrb	r3, [r3, #0]
 801921c:	b2db      	uxtb	r3, r3
 801921e:	4619      	mov	r1, r3
 8019220:	482d      	ldr	r0, [pc, #180]	@ (80192d8 <USBD_VND_DataReceived+0x918>)
 8019222:	f7fc f97f 	bl	8015524 <cdc_logf>
                /* Сбросим ожидания и канал передачи */
                pending_B = 0; sending_channel = 0xFF;
 8019226:	4b2d      	ldr	r3, [pc, #180]	@ (80192dc <USBD_VND_DataReceived+0x91c>)
 8019228:	2200      	movs	r2, #0
 801922a:	701a      	strb	r2, [r3, #0]
 801922c:	4b2c      	ldr	r3, [pc, #176]	@ (80192e0 <USBD_VND_DataReceived+0x920>)
 801922e:	22ff      	movs	r2, #255	@ 0xff
 8019230:	701a      	strb	r2, [r3, #0]
            }
            break;
 8019232:	e154      	b.n	80194de <USBD_VND_DataReceived+0xb1e>
        case VND_CMD_SET_CHMODE:
            if(len >= 2){
 8019234:	683b      	ldr	r3, [r7, #0]
 8019236:	2b01      	cmp	r3, #1
 8019238:	f240 8153 	bls.w	80194e2 <USBD_VND_DataReceived+0xb22>
                uint8_t m = data[1];
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	3301      	adds	r3, #1
 8019240:	781b      	ldrb	r3, [r3, #0]
 8019242:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                if(m > 2) m = 2; /* default both */
 8019246:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 801924a:	2b02      	cmp	r3, #2
 801924c:	d902      	bls.n	8019254 <USBD_VND_DataReceived+0x894>
 801924e:	2302      	movs	r3, #2
 8019250:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                vnd_ch_mode = m;
 8019254:	4a1f      	ldr	r2, [pc, #124]	@ (80192d4 <USBD_VND_DataReceived+0x914>)
 8019256:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 801925a:	7013      	strb	r3, [r2, #0]
                /* При A-only/B-only принудительно выключаем async */
                if(vnd_ch_mode != 2 && async_mode){ async_mode = 0; }
 801925c:	4b1d      	ldr	r3, [pc, #116]	@ (80192d4 <USBD_VND_DataReceived+0x914>)
 801925e:	781b      	ldrb	r3, [r3, #0]
 8019260:	b2db      	uxtb	r3, r3
 8019262:	2b02      	cmp	r3, #2
 8019264:	d007      	beq.n	8019276 <USBD_VND_DataReceived+0x8b6>
 8019266:	4b1a      	ldr	r3, [pc, #104]	@ (80192d0 <USBD_VND_DataReceived+0x910>)
 8019268:	781b      	ldrb	r3, [r3, #0]
 801926a:	b2db      	uxtb	r3, r3
 801926c:	2b00      	cmp	r3, #0
 801926e:	d002      	beq.n	8019276 <USBD_VND_DataReceived+0x8b6>
 8019270:	4b17      	ldr	r3, [pc, #92]	@ (80192d0 <USBD_VND_DataReceived+0x910>)
 8019272:	2200      	movs	r2, #0
 8019274:	701a      	strb	r2, [r3, #0]
                VND_LOG("SET_CHMODE %u", (unsigned)vnd_ch_mode);
                cdc_logf("EVT SET_CHMODE %u", (unsigned)vnd_ch_mode);
 8019276:	4b17      	ldr	r3, [pc, #92]	@ (80192d4 <USBD_VND_DataReceived+0x914>)
 8019278:	781b      	ldrb	r3, [r3, #0]
 801927a:	b2db      	uxtb	r3, r3
 801927c:	4619      	mov	r1, r3
 801927e:	4819      	ldr	r0, [pc, #100]	@ (80192e4 <USBD_VND_DataReceived+0x924>)
 8019280:	f7fc f950 	bl	8015524 <cdc_logf>
                /* Переключение режимов на лету: сброс ожиданий B, чтобы не зависать */
                pending_B = 0; sending_channel = 0xFF;
 8019284:	4b15      	ldr	r3, [pc, #84]	@ (80192dc <USBD_VND_DataReceived+0x91c>)
 8019286:	2200      	movs	r2, #0
 8019288:	701a      	strb	r2, [r3, #0]
 801928a:	4b15      	ldr	r3, [pc, #84]	@ (80192e0 <USBD_VND_DataReceived+0x920>)
 801928c:	22ff      	movs	r2, #255	@ 0xff
 801928e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8019290:	e127      	b.n	80194e2 <USBD_VND_DataReceived+0xb22>
 8019292:	bf00      	nop
 8019294:	2400dcf1 	.word	0x2400dcf1
 8019298:	2400dbb8 	.word	0x2400dbb8
 801929c:	2400dc70 	.word	0x2400dc70
 80192a0:	2400dc52 	.word	0x2400dc52
 80192a4:	2400003b 	.word	0x2400003b
 80192a8:	2400dc18 	.word	0x2400dc18
 80192ac:	2400dc1c 	.word	0x2400dc1c
 80192b0:	2400d8c8 	.word	0x2400d8c8
 80192b4:	2400f280 	.word	0x2400f280
 80192b8:	2400f282 	.word	0x2400f282
 80192bc:	2400f284 	.word	0x2400f284
 80192c0:	2400f286 	.word	0x2400f286
 80192c4:	24000042 	.word	0x24000042
 80192c8:	2400dcf4 	.word	0x2400dcf4
 80192cc:	0801d218 	.word	0x0801d218
 80192d0:	2400dc51 	.word	0x2400dc51
 80192d4:	24000040 	.word	0x24000040
 80192d8:	0801d22c 	.word	0x0801d22c
 80192dc:	24019ffa 	.word	0x24019ffa
 80192e0:	24000050 	.word	0x24000050
 80192e4:	0801d240 	.word	0x0801d240
        case VND_CMD_SET_FULL_MODE:
            if(len >= 2)
 80192e8:	683b      	ldr	r3, [r7, #0]
 80192ea:	2b01      	cmp	r3, #1
 80192ec:	f240 80fb 	bls.w	80194e6 <USBD_VND_DataReceived+0xb26>
            {
                uint8_t full = data[1] ? 1 : 0;
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	3301      	adds	r3, #1
 80192f4:	781b      	ldrb	r3, [r3, #0]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	bf14      	ite	ne
 80192fa:	2301      	movne	r3, #1
 80192fc:	2300      	moveq	r3, #0
 80192fe:	b2db      	uxtb	r3, r3
 8019300:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                full_mode = full;
 8019304:	4a7d      	ldr	r2, [pc, #500]	@ (80194fc <USBD_VND_DataReceived+0xb3c>)
 8019306:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801930a:	7013      	strb	r3, [r2, #0]
                VND_LOG("SET_FULL_MODE %u", full_mode);
                cdc_logf("EVT SET_FULL_MODE %u", (unsigned)full_mode);
 801930c:	4b7b      	ldr	r3, [pc, #492]	@ (80194fc <USBD_VND_DataReceived+0xb3c>)
 801930e:	781b      	ldrb	r3, [r3, #0]
 8019310:	b2db      	uxtb	r3, r3
 8019312:	4619      	mov	r1, r3
 8019314:	487a      	ldr	r0, [pc, #488]	@ (8019500 <USBD_VND_DataReceived+0xb40>)
 8019316:	f7fc f905 	bl	8015524 <cdc_logf>
                if(streaming){
 801931a:	4b7a      	ldr	r3, [pc, #488]	@ (8019504 <USBD_VND_DataReceived+0xb44>)
 801931c:	781b      	ldrb	r3, [r3, #0]
 801931e:	b2db      	uxtb	r3, r3
 8019320:	2b00      	cmp	r3, #0
 8019322:	d005      	beq.n	8019330 <USBD_VND_DataReceived+0x970>
                    /* Переключение режима на лету: сброс пары и разрешение TEST не требуется */
                    pending_B = 0; sending_channel = 0xFF;
 8019324:	4b78      	ldr	r3, [pc, #480]	@ (8019508 <USBD_VND_DataReceived+0xb48>)
 8019326:	2200      	movs	r2, #0
 8019328:	701a      	strb	r2, [r3, #0]
 801932a:	4b78      	ldr	r3, [pc, #480]	@ (801950c <USBD_VND_DataReceived+0xb4c>)
 801932c:	22ff      	movs	r2, #255	@ 0xff
 801932e:	701a      	strb	r2, [r3, #0]
                }
                if(full_mode){
 8019330:	4b72      	ldr	r3, [pc, #456]	@ (80194fc <USBD_VND_DataReceived+0xb3c>)
 8019332:	781b      	ldrb	r3, [r3, #0]
 8019334:	b2db      	uxtb	r3, r3
 8019336:	2b00      	cmp	r3, #0
 8019338:	d017      	beq.n	801936a <USBD_VND_DataReceived+0x9aa>
                    /* Возврат к нормальному режиму ADC */
                    diag_mode_active = 0; diag_prepared_seq = 0xFFFFFFFFu;
 801933a:	4b75      	ldr	r3, [pc, #468]	@ (8019510 <USBD_VND_DataReceived+0xb50>)
 801933c:	2200      	movs	r2, #0
 801933e:	701a      	strb	r2, [r3, #0]
 8019340:	4b74      	ldr	r3, [pc, #464]	@ (8019514 <USBD_VND_DataReceived+0xb54>)
 8019342:	f04f 32ff 	mov.w	r2, #4294967295
 8019346:	601a      	str	r2, [r3, #0]
                    /* При входе в полный режим – задать дефолт 300 сэмплов, снять lock и пересчитать период */
                    vnd_frame_samples_req = VND_FULL_DEFAULT_SAMPLES;
 8019348:	4b73      	ldr	r3, [pc, #460]	@ (8019518 <USBD_VND_DataReceived+0xb58>)
 801934a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 801934e:	801a      	strh	r2, [r3, #0]
                    cur_samples_per_frame = 0;
 8019350:	4b72      	ldr	r3, [pc, #456]	@ (801951c <USBD_VND_DataReceived+0xb5c>)
 8019352:	2200      	movs	r2, #0
 8019354:	801a      	strh	r2, [r3, #0]
                    cur_expected_frame_size = 0;
 8019356:	4b72      	ldr	r3, [pc, #456]	@ (8019520 <USBD_VND_DataReceived+0xb60>)
 8019358:	2200      	movs	r2, #0
 801935a:	801a      	strh	r2, [r3, #0]
                    vnd_recompute_pair_timing(vnd_frame_samples_req);
 801935c:	4b6e      	ldr	r3, [pc, #440]	@ (8019518 <USBD_VND_DataReceived+0xb58>)
 801935e:	881b      	ldrh	r3, [r3, #0]
 8019360:	b29b      	uxth	r3, r3
 8019362:	4618      	mov	r0, r3
 8019364:	f7fc faac 	bl	80158c0 <vnd_recompute_pair_timing>
 8019368:	e02d      	b.n	80193c6 <USBD_VND_DataReceived+0xa06>
                } else {
                    /* Включаем диагностический режим (пила) */
                    diag_mode_active = 1;
 801936a:	4b69      	ldr	r3, [pc, #420]	@ (8019510 <USBD_VND_DataReceived+0xb50>)
 801936c:	2201      	movs	r2, #1
 801936e:	701a      	strb	r2, [r3, #0]
                    diag_samples = (cur_samples_per_frame != 0) ? cur_samples_per_frame : VND_DEFAULT_TEST_SAMPLES;
 8019370:	4b6a      	ldr	r3, [pc, #424]	@ (801951c <USBD_VND_DataReceived+0xb5c>)
 8019372:	881b      	ldrh	r3, [r3, #0]
 8019374:	b29b      	uxth	r3, r3
 8019376:	2b00      	cmp	r3, #0
 8019378:	d003      	beq.n	8019382 <USBD_VND_DataReceived+0x9c2>
 801937a:	4b68      	ldr	r3, [pc, #416]	@ (801951c <USBD_VND_DataReceived+0xb5c>)
 801937c:	881b      	ldrh	r3, [r3, #0]
 801937e:	b29b      	uxth	r3, r3
 8019380:	e000      	b.n	8019384 <USBD_VND_DataReceived+0x9c4>
 8019382:	2350      	movs	r3, #80	@ 0x50
 8019384:	4a67      	ldr	r2, [pc, #412]	@ (8019524 <USBD_VND_DataReceived+0xb64>)
 8019386:	8013      	strh	r3, [r2, #0]
                    if(diag_samples > VND_MAX_SAMPLES) diag_samples = VND_MAX_SAMPLES;
 8019388:	4b66      	ldr	r3, [pc, #408]	@ (8019524 <USBD_VND_DataReceived+0xb64>)
 801938a:	881b      	ldrh	r3, [r3, #0]
 801938c:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8019390:	d903      	bls.n	801939a <USBD_VND_DataReceived+0x9da>
 8019392:	4b64      	ldr	r3, [pc, #400]	@ (8019524 <USBD_VND_DataReceived+0xb64>)
 8019394:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 8019398:	801a      	strh	r2, [r3, #0]
                    cur_samples_per_frame = diag_samples;
 801939a:	4b62      	ldr	r3, [pc, #392]	@ (8019524 <USBD_VND_DataReceived+0xb64>)
 801939c:	881a      	ldrh	r2, [r3, #0]
 801939e:	4b5f      	ldr	r3, [pc, #380]	@ (801951c <USBD_VND_DataReceived+0xb5c>)
 80193a0:	801a      	strh	r2, [r3, #0]
                    cur_expected_frame_size = (uint16_t)(VND_FRAME_HDR_SIZE + cur_samples_per_frame*2u);
 80193a2:	4b5e      	ldr	r3, [pc, #376]	@ (801951c <USBD_VND_DataReceived+0xb5c>)
 80193a4:	881b      	ldrh	r3, [r3, #0]
 80193a6:	b29b      	uxth	r3, r3
 80193a8:	3310      	adds	r3, #16
 80193aa:	b29b      	uxth	r3, r3
 80193ac:	005b      	lsls	r3, r3, #1
 80193ae:	b29a      	uxth	r2, r3
 80193b0:	4b5b      	ldr	r3, [pc, #364]	@ (8019520 <USBD_VND_DataReceived+0xb60>)
 80193b2:	801a      	strh	r2, [r3, #0]
                    /* Разрешаем немедленную отправку диагностических кадров */
                    diag_next_ms = HAL_GetTick(); diag_prepared_seq = 0xFFFFFFFFu;
 80193b4:	f7eb fdda 	bl	8004f6c <HAL_GetTick>
 80193b8:	4603      	mov	r3, r0
 80193ba:	4a5b      	ldr	r2, [pc, #364]	@ (8019528 <USBD_VND_DataReceived+0xb68>)
 80193bc:	6013      	str	r3, [r2, #0]
 80193be:	4b55      	ldr	r3, [pc, #340]	@ (8019514 <USBD_VND_DataReceived+0xb54>)
 80193c0:	f04f 32ff 	mov.w	r2, #4294967295
 80193c4:	601a      	str	r2, [r3, #0]
                }
                vnd_update_lcd_params();
 80193c6:	f7fc f85d 	bl	8015484 <vnd_update_lcd_params>
            }
            break;
 80193ca:	e08c      	b.n	80194e6 <USBD_VND_DataReceived+0xb26>
        case VND_CMD_SET_TRUNC_SAMPLES:
            if(len >= 3){
 80193cc:	683b      	ldr	r3, [r7, #0]
 80193ce:	2b02      	cmp	r3, #2
 80193d0:	f240 808b 	bls.w	80194ea <USBD_VND_DataReceived+0xb2a>
                uint16_t ns = (uint16_t)(data[1] | (data[2] << 8));
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	3301      	adds	r3, #1
 80193d8:	781b      	ldrb	r3, [r3, #0]
 80193da:	b21a      	sxth	r2, r3
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	3302      	adds	r3, #2
 80193e0:	781b      	ldrb	r3, [r3, #0]
 80193e2:	b21b      	sxth	r3, r3
 80193e4:	021b      	lsls	r3, r3, #8
 80193e6:	b21b      	sxth	r3, r3
 80193e8:	4313      	orrs	r3, r2
 80193ea:	b21b      	sxth	r3, r3
 80193ec:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                vnd_trunc_samples = ns;
 80193f0:	4a4e      	ldr	r2, [pc, #312]	@ (801952c <USBD_VND_DataReceived+0xb6c>)
 80193f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80193f6:	8013      	strh	r3, [r2, #0]
                VND_LOG("SET_TRUNC_SAMPLES %u", (unsigned)vnd_trunc_samples);
                cdc_logf("EVT SET_TRUNC %u", (unsigned)vnd_trunc_samples);
 80193f8:	4b4c      	ldr	r3, [pc, #304]	@ (801952c <USBD_VND_DataReceived+0xb6c>)
 80193fa:	881b      	ldrh	r3, [r3, #0]
 80193fc:	b29b      	uxth	r3, r3
 80193fe:	4619      	mov	r1, r3
 8019400:	484b      	ldr	r0, [pc, #300]	@ (8019530 <USBD_VND_DataReceived+0xb70>)
 8019402:	f7fc f88f 	bl	8015524 <cdc_logf>
                /* Сбросим текущий lock размера, чтобы статус отразил новые размеры, применится при следующем кадре */
                cur_samples_per_frame = 0;
 8019406:	4b45      	ldr	r3, [pc, #276]	@ (801951c <USBD_VND_DataReceived+0xb5c>)
 8019408:	2200      	movs	r2, #0
 801940a:	801a      	strh	r2, [r3, #0]
                cur_expected_frame_size = 0;
 801940c:	4b44      	ldr	r3, [pc, #272]	@ (8019520 <USBD_VND_DataReceived+0xb60>)
 801940e:	2200      	movs	r2, #0
 8019410:	801a      	strh	r2, [r3, #0]
            }
            break;
 8019412:	e06a      	b.n	80194ea <USBD_VND_DataReceived+0xb2a>
        case VND_CMD_SET_PROFILE:
            if(len >= 2)
 8019414:	683b      	ldr	r3, [r7, #0]
 8019416:	2b01      	cmp	r3, #1
 8019418:	d969      	bls.n	80194ee <USBD_VND_DataReceived+0xb2e>
            {
                uint8_t profile = data[1];
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	3301      	adds	r3, #1
 801941e:	781b      	ldrb	r3, [r3, #0]
 8019420:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t prof_id = ADC_PROFILE_B_DEFAULT;
 8019424:	2301      	movs	r3, #1
 8019426:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                if(profile == 1) prof_id = ADC_PROFILE_A_200HZ;
 801942a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801942e:	2b01      	cmp	r3, #1
 8019430:	d103      	bne.n	801943a <USBD_VND_DataReceived+0xa7a>
 8019432:	2300      	movs	r3, #0
 8019434:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 8019438:	e006      	b.n	8019448 <USBD_VND_DataReceived+0xa88>
                else if(profile == 2) prof_id = ADC_PROFILE_B_DEFAULT;
 801943a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801943e:	2b02      	cmp	r3, #2
 8019440:	d102      	bne.n	8019448 <USBD_VND_DataReceived+0xa88>
 8019442:	2301      	movs	r3, #1
 8019444:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                int rc = adc_stream_set_profile(prof_id);
 8019448:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 801944c:	4618      	mov	r0, r3
 801944e:	f7e7 f947 	bl	80006e0 <adc_stream_set_profile>
 8019452:	6378      	str	r0, [r7, #52]	@ 0x34
                VND_LOG("SET_PROFILE %u -> prof_id=%u rc=%d", profile, prof_id, rc);
                /* ДИАГНОСТИКА: вывести текущее состояние после смены профиля */
                if(rc == 0) {
 8019454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019456:	2b00      	cmp	r3, #0
 8019458:	d149      	bne.n	80194ee <USBD_VND_DataReceived+0xb2e>
                    host_profile = profile; /* запомним для LCD ровно то, что прислал хост */
 801945a:	4a36      	ldr	r2, [pc, #216]	@ (8019534 <USBD_VND_DataReceived+0xb74>)
 801945c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8019460:	7013      	strb	r3, [r2, #0]
                    uint16_t cur_samples = adc_stream_get_active_samples();
 8019462:	f7e7 f881 	bl	8000568 <adc_stream_get_active_samples>
 8019466:	4603      	mov	r3, r0
 8019468:	867b      	strh	r3, [r7, #50]	@ 0x32
                    uint16_t cur_rate = adc_stream_get_buf_rate();
 801946a:	f7e7 f889 	bl	8000580 <adc_stream_get_buf_rate>
 801946e:	4603      	mov	r3, r0
 8019470:	863b      	strh	r3, [r7, #48]	@ 0x30
                    cdc_logf("EVT SET_PROFILE p=%u samples=%u rate=%u Hz", profile, cur_samples, cur_rate);
 8019472:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 8019476:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8019478:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801947a:	482f      	ldr	r0, [pc, #188]	@ (8019538 <USBD_VND_DataReceived+0xb78>)
 801947c:	f7fc f852 	bl	8015524 <cdc_logf>
                    vnd_update_lcd_params();
 8019480:	f7fc f800 	bl	8015484 <vnd_update_lcd_params>
                }
            }
            break;
 8019484:	e033      	b.n	80194ee <USBD_VND_DataReceived+0xb2e>
        case VND_CMD_SET_ROI_US:
            if(len >= 5)
 8019486:	683b      	ldr	r3, [r7, #0]
 8019488:	2b04      	cmp	r3, #4
 801948a:	d932      	bls.n	80194f2 <USBD_VND_DataReceived+0xb32>
            {
                uint32_t us = (uint32_t)(data[1] | (data[2] << 8) | (data[3] << 16) | (data[4] << 24));
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	3301      	adds	r3, #1
 8019490:	781b      	ldrb	r3, [r3, #0]
 8019492:	461a      	mov	r2, r3
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	3302      	adds	r3, #2
 8019498:	781b      	ldrb	r3, [r3, #0]
 801949a:	021b      	lsls	r3, r3, #8
 801949c:	431a      	orrs	r2, r3
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	3303      	adds	r3, #3
 80194a2:	781b      	ldrb	r3, [r3, #0]
 80194a4:	041b      	lsls	r3, r3, #16
 80194a6:	431a      	orrs	r2, r3
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	3304      	adds	r3, #4
 80194ac:	781b      	ldrb	r3, [r3, #0]
 80194ae:	061b      	lsls	r3, r3, #24
 80194b0:	4313      	orrs	r3, r2
 80194b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                /* TODO: применить ROI к цепочке выборки */
                VND_LOG("SET_ROI_US %lu", (unsigned long)us);
            }
            break;
 80194b4:	e01d      	b.n	80194f2 <USBD_VND_DataReceived+0xb32>
    if(!len) return;
 80194b6:	bf00      	nop
 80194b8:	e01c      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
        default:
            VND_LOG("IGN %02X", cmd);
            break;
 80194ba:	bf00      	nop
 80194bc:	e01a      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
        break;
 80194be:	bf00      	nop
 80194c0:	e018      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
            break;
 80194c2:	bf00      	nop
 80194c4:	e016      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
                if(diag_mode_active){ VND_LOG("GET_STATUS bulk ignored in DIAG (use EP0)"); break; }
 80194c6:	bf00      	nop
 80194c8:	e014      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
        break;
 80194ca:	bf00      	nop
 80194cc:	e012      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
            if(diag_mode_active){ VND_LOG("GET_STATUS_IMM ignored in DIAG"); break; }
 80194ce:	bf00      	nop
 80194d0:	e010      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
        break;
 80194d2:	bf00      	nop
 80194d4:	e00e      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
            break;
 80194d6:	bf00      	nop
 80194d8:	e00c      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
            break;
 80194da:	bf00      	nop
 80194dc:	e00a      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
            break;
 80194de:	bf00      	nop
 80194e0:	e008      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
            break;
 80194e2:	bf00      	nop
 80194e4:	e006      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
            break;
 80194e6:	bf00      	nop
 80194e8:	e004      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
            break;
 80194ea:	bf00      	nop
 80194ec:	e002      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
            break;
 80194ee:	bf00      	nop
 80194f0:	e000      	b.n	80194f4 <USBD_VND_DataReceived+0xb34>
            break;
 80194f2:	bf00      	nop
    }
}
 80194f4:	3768      	adds	r7, #104	@ 0x68
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bdb0      	pop	{r4, r5, r7, pc}
 80194fa:	bf00      	nop
 80194fc:	2400003c 	.word	0x2400003c
 8019500:	0801d254 	.word	0x0801d254
 8019504:	2400dba4 	.word	0x2400dba4
 8019508:	24019ffa 	.word	0x24019ffa
 801950c:	24000050 	.word	0x24000050
 8019510:	2400dcf1 	.word	0x2400dcf1
 8019514:	24000048 	.word	0x24000048
 8019518:	2400dc3a 	.word	0x2400dc3a
 801951c:	2400dbac 	.word	0x2400dbac
 8019520:	2400dbae 	.word	0x2400dbae
 8019524:	24000044 	.word	0x24000044
 8019528:	2400dcf8 	.word	0x2400dcf8
 801952c:	2400dc38 	.word	0x2400dc38
 8019530:	0801d26c 	.word	0x0801d26c
 8019534:	2400dc16 	.word	0x2400dc16
 8019538:	0801d280 	.word	0x0801d280

0801953c <vnd_get_total_tx_bytes>:
    return vnd_last_txcplt_ms;
}

/* Общее число переданных байт (все передачи) */
uint64_t vnd_get_total_tx_bytes(void)
{
 801953c:	b480      	push	{r7}
 801953e:	af00      	add	r7, sp, #0
    return vnd_total_tx_bytes;
 8019540:	4b04      	ldr	r3, [pc, #16]	@ (8019554 <vnd_get_total_tx_bytes+0x18>)
 8019542:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8019546:	4610      	mov	r0, r2
 8019548:	4619      	mov	r1, r3
 801954a:	46bd      	mov	sp, r7
 801954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019550:	4770      	bx	lr
 8019552:	bf00      	nop
 8019554:	2400dc30 	.word	0x2400dc30

08019558 <vnd_get_total_tx_samples>:

/* Общее число переданных сэмплов (оба канала суммарно) */
uint64_t vnd_get_total_tx_samples(void)
{
 8019558:	b480      	push	{r7}
 801955a:	af00      	add	r7, sp, #0
    return vnd_total_tx_samples;
 801955c:	4b04      	ldr	r3, [pc, #16]	@ (8019570 <vnd_get_total_tx_samples+0x18>)
 801955e:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8019562:	4610      	mov	r0, r2
 8019564:	4619      	mov	r1, r3
 8019566:	46bd      	mov	sp, r7
 8019568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801956c:	4770      	bx	lr
 801956e:	bf00      	nop
 8019570:	2400dbf8 	.word	0x2400dbf8

08019574 <adc_stream_on_new_frames>:

/* Хук от цепочки ADC: когда появились новые кадры — пинаем таск */
void adc_stream_on_new_frames(uint32_t frames_added)
{
 8019574:	b480      	push	{r7}
 8019576:	b083      	sub	sp, #12
 8019578:	af00      	add	r7, sp, #0
 801957a:	6078      	str	r0, [r7, #4]
    (void)frames_added;
    /* минимальный kick: если не заняты и идёт стрим — дать шанс таску отправить */
    if(streaming){ vnd_tx_kick = 1; }
 801957c:	4b06      	ldr	r3, [pc, #24]	@ (8019598 <adc_stream_on_new_frames+0x24>)
 801957e:	781b      	ldrb	r3, [r3, #0]
 8019580:	b2db      	uxtb	r3, r3
 8019582:	2b00      	cmp	r3, #0
 8019584:	d002      	beq.n	801958c <adc_stream_on_new_frames+0x18>
 8019586:	4b05      	ldr	r3, [pc, #20]	@ (801959c <adc_stream_on_new_frames+0x28>)
 8019588:	2201      	movs	r2, #1
 801958a:	701a      	strb	r2, [r3, #0]
}
 801958c:	bf00      	nop
 801958e:	370c      	adds	r7, #12
 8019590:	46bd      	mov	sp, r7
 8019592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019596:	4770      	bx	lr
 8019598:	2400dba4 	.word	0x2400dba4
 801959c:	2400dc50 	.word	0x2400dc50

080195a0 <USBD_VND_RequestSoftReset>:
static volatile uint8_t vnd_tx_busy = 0;
static volatile uint8_t vnd_last_tx_rc = 0xFF; /* последний rc из USBD_LL_Transmit */
static volatile uint16_t vnd_last_tx_len = 0;

/* Запросить soft/deep reset откуда угодно (в т.ч. из приложения) */
void USBD_VND_RequestSoftReset(void){ g_req_soft_reset = 1; }
 80195a0:	b480      	push	{r7}
 80195a2:	af00      	add	r7, sp, #0
 80195a4:	4b03      	ldr	r3, [pc, #12]	@ (80195b4 <USBD_VND_RequestSoftReset+0x14>)
 80195a6:	2201      	movs	r2, #1
 80195a8:	701a      	strb	r2, [r3, #0]
 80195aa:	bf00      	nop
 80195ac:	46bd      	mov	sp, r7
 80195ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b2:	4770      	bx	lr
 80195b4:	2401a098 	.word	0x2401a098

080195b8 <VND_Class_SoftReset>:
void USBD_VND_RequestDeepReset(void){ g_req_deep_reset = 1; }

/* Выполнить мягкий/глубокий ресет класса Vendor (без ре-энумерации USB) */
static void VND_Class_SoftReset(USBD_HandleTypeDef *pdev)
{
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b082      	sub	sp, #8
 80195bc:	af00      	add	r7, sp, #0
 80195be:	6078      	str	r0, [r7, #4]
  /* Снять занятость, очистить возможные STALL, флешнуть FIFO EP */
  USBD_VND_ForceTxIdle();
 80195c0:	f000 f944 	bl	801984c <USBD_VND_ForceTxIdle>
  (void)USBD_LL_FlushEP(pdev, VND_IN_EP);
 80195c4:	2183      	movs	r1, #131	@ 0x83
 80195c6:	6878      	ldr	r0, [r7, #4]
 80195c8:	f001 fb14 	bl	801abf4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, VND_OUT_EP);
 80195cc:	2103      	movs	r1, #3
 80195ce:	6878      	ldr	r0, [r7, #4]
 80195d0:	f001 fb10 	bl	801abf4 <USBD_LL_FlushEP>
  (void)USBD_LL_ClearStallEP(pdev, VND_IN_EP);
 80195d4:	2183      	movs	r1, #131	@ 0x83
 80195d6:	6878      	ldr	r0, [r7, #4]
 80195d8:	f001 fb4a 	bl	801ac70 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, VND_OUT_EP);
 80195dc:	2103      	movs	r1, #3
 80195de:	6878      	ldr	r0, [r7, #4]
 80195e0:	f001 fb46 	bl	801ac70 <USBD_LL_ClearStallEP>
  /* Реарм приёма */
  if (g_alt_if2 == 1) {
 80195e4:	4b0e      	ldr	r3, [pc, #56]	@ (8019620 <VND_Class_SoftReset+0x68>)
 80195e6:	781b      	ldrb	r3, [r3, #0]
 80195e8:	b2db      	uxtb	r3, r3
 80195ea:	2b01      	cmp	r3, #1
 80195ec:	d111      	bne.n	8019612 <VND_Class_SoftReset+0x5a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	7c1b      	ldrb	r3, [r3, #16]
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d107      	bne.n	8019606 <VND_Class_SoftReset+0x4e>
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_HS_MAX_PACKET_SIZE);
 80195f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80195fa:	4a0a      	ldr	r2, [pc, #40]	@ (8019624 <VND_Class_SoftReset+0x6c>)
 80195fc:	2103      	movs	r1, #3
 80195fe:	6878      	ldr	r0, [r7, #4]
 8019600:	f001 fbc1 	bl	801ad86 <USBD_LL_PrepareReceive>
 8019604:	e005      	b.n	8019612 <VND_Class_SoftReset+0x5a>
    else
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_FS_MAX_PACKET_SIZE);
 8019606:	2340      	movs	r3, #64	@ 0x40
 8019608:	4a06      	ldr	r2, [pc, #24]	@ (8019624 <VND_Class_SoftReset+0x6c>)
 801960a:	2103      	movs	r1, #3
 801960c:	6878      	ldr	r0, [r7, #4]
 801960e:	f001 fbba 	bl	801ad86 <USBD_LL_PrepareReceive>
  }
  /* Остановить и очистить пайплайн приложения */
  vnd_pipeline_stop_reset(0);
 8019612:	2000      	movs	r0, #0
 8019614:	f7fc f98c 	bl	8015930 <vnd_pipeline_stop_reset>
}
 8019618:	bf00      	nop
 801961a:	3708      	adds	r7, #8
 801961c:	46bd      	mov	sp, r7
 801961e:	bd80      	pop	{r7, pc}
 8019620:	2401a09a 	.word	0x2401a09a
 8019624:	2401a09c 	.word	0x2401a09c

08019628 <VND_Class_DeepReset>:

static void VND_Class_DeepReset(USBD_HandleTypeDef *pdev)
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b082      	sub	sp, #8
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
  /* Закрыть и переоткрыть конечные точки Vendor */
  (void)USBD_LL_CloseEP(pdev, VND_IN_EP);  pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 0U;
 8019630:	2183      	movs	r1, #131	@ 0x83
 8019632:	6878      	ldr	r0, [r7, #4]
 8019634:	f001 fabf 	bl	801abb6 <USBD_LL_CloseEP>
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	2200      	movs	r2, #0
 801963c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  (void)USBD_LL_CloseEP(pdev, VND_OUT_EP); pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 0U;
 8019640:	2103      	movs	r1, #3
 8019642:	6878      	ldr	r0, [r7, #4]
 8019644:	f001 fab7 	bl	801abb6 <USBD_LL_CloseEP>
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	2200      	movs	r2, #0
 801964c:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
  if (g_alt_if2 == 1) {
 8019650:	4b26      	ldr	r3, [pc, #152]	@ (80196ec <VND_Class_DeepReset+0xc4>)
 8019652:	781b      	ldrb	r3, [r3, #0]
 8019654:	b2db      	uxtb	r3, r3
 8019656:	2b01      	cmp	r3, #1
 8019658:	d140      	bne.n	80196dc <VND_Class_DeepReset+0xb4>
    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	7c1b      	ldrb	r3, [r3, #16]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d116      	bne.n	8019690 <VND_Class_DeepReset+0x68>
      (void)USBD_LL_OpenEP(pdev, VND_IN_EP,  USBD_EP_TYPE_BULK, VND_DATA_HS_MAX_PACKET_SIZE);
 8019662:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019666:	2202      	movs	r2, #2
 8019668:	2183      	movs	r1, #131	@ 0x83
 801966a:	6878      	ldr	r0, [r7, #4]
 801966c:	f001 fa7d 	bl	801ab6a <USBD_LL_OpenEP>
      pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 1U;
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	2201      	movs	r2, #1
 8019674:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      (void)USBD_LL_OpenEP(pdev, VND_OUT_EP, USBD_EP_TYPE_BULK, VND_DATA_HS_MAX_PACKET_SIZE);
 8019678:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801967c:	2202      	movs	r2, #2
 801967e:	2103      	movs	r1, #3
 8019680:	6878      	ldr	r0, [r7, #4]
 8019682:	f001 fa72 	bl	801ab6a <USBD_LL_OpenEP>
      pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 1U;
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	2201      	movs	r2, #1
 801968a:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
 801968e:	e013      	b.n	80196b8 <VND_Class_DeepReset+0x90>
    } else {
      (void)USBD_LL_OpenEP(pdev, VND_IN_EP,  USBD_EP_TYPE_BULK, VND_DATA_FS_MAX_PACKET_SIZE);
 8019690:	2340      	movs	r3, #64	@ 0x40
 8019692:	2202      	movs	r2, #2
 8019694:	2183      	movs	r1, #131	@ 0x83
 8019696:	6878      	ldr	r0, [r7, #4]
 8019698:	f001 fa67 	bl	801ab6a <USBD_LL_OpenEP>
      pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 1U;
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	2201      	movs	r2, #1
 80196a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      (void)USBD_LL_OpenEP(pdev, VND_OUT_EP, USBD_EP_TYPE_BULK, VND_DATA_FS_MAX_PACKET_SIZE);
 80196a4:	2340      	movs	r3, #64	@ 0x40
 80196a6:	2202      	movs	r2, #2
 80196a8:	2103      	movs	r1, #3
 80196aa:	6878      	ldr	r0, [r7, #4]
 80196ac:	f001 fa5d 	bl	801ab6a <USBD_LL_OpenEP>
      pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 1U;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	2201      	movs	r2, #1
 80196b4:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
    }
    /* Реарм приёма */
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	7c1b      	ldrb	r3, [r3, #16]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d107      	bne.n	80196d0 <VND_Class_DeepReset+0xa8>
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_HS_MAX_PACKET_SIZE);
 80196c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80196c4:	4a0a      	ldr	r2, [pc, #40]	@ (80196f0 <VND_Class_DeepReset+0xc8>)
 80196c6:	2103      	movs	r1, #3
 80196c8:	6878      	ldr	r0, [r7, #4]
 80196ca:	f001 fb5c 	bl	801ad86 <USBD_LL_PrepareReceive>
 80196ce:	e005      	b.n	80196dc <VND_Class_DeepReset+0xb4>
    else
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_FS_MAX_PACKET_SIZE);
 80196d0:	2340      	movs	r3, #64	@ 0x40
 80196d2:	4a07      	ldr	r2, [pc, #28]	@ (80196f0 <VND_Class_DeepReset+0xc8>)
 80196d4:	2103      	movs	r1, #3
 80196d6:	6878      	ldr	r0, [r7, #4]
 80196d8:	f001 fb55 	bl	801ad86 <USBD_LL_PrepareReceive>
  }
  /* Полная переинициализация пайплайна приложения */
  vnd_pipeline_stop_reset(1);
 80196dc:	2001      	movs	r0, #1
 80196de:	f7fc f927 	bl	8015930 <vnd_pipeline_stop_reset>
}
 80196e2:	bf00      	nop
 80196e4:	3708      	adds	r7, #8
 80196e6:	46bd      	mov	sp, r7
 80196e8:	bd80      	pop	{r7, pc}
 80196ea:	bf00      	nop
 80196ec:	2401a09a 	.word	0x2401a09a
 80196f0:	2401a09c 	.word	0x2401a09c

080196f4 <USBD_VND_ProcessControlRequests>:

/* Фоновый сервис для исполнения заявок управления */
void USBD_VND_ProcessControlRequests(void)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	af00      	add	r7, sp, #0
  if (g_req_deep_reset) { g_req_deep_reset = 0; VND_Class_DeepReset(&hUsbDeviceHS); }
 80196f8:	4b0b      	ldr	r3, [pc, #44]	@ (8019728 <USBD_VND_ProcessControlRequests+0x34>)
 80196fa:	781b      	ldrb	r3, [r3, #0]
 80196fc:	b2db      	uxtb	r3, r3
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d005      	beq.n	801970e <USBD_VND_ProcessControlRequests+0x1a>
 8019702:	4b09      	ldr	r3, [pc, #36]	@ (8019728 <USBD_VND_ProcessControlRequests+0x34>)
 8019704:	2200      	movs	r2, #0
 8019706:	701a      	strb	r2, [r3, #0]
 8019708:	4808      	ldr	r0, [pc, #32]	@ (801972c <USBD_VND_ProcessControlRequests+0x38>)
 801970a:	f7ff ff8d 	bl	8019628 <VND_Class_DeepReset>
  if (g_req_soft_reset) { g_req_soft_reset = 0; VND_Class_SoftReset(&hUsbDeviceHS); }
 801970e:	4b08      	ldr	r3, [pc, #32]	@ (8019730 <USBD_VND_ProcessControlRequests+0x3c>)
 8019710:	781b      	ldrb	r3, [r3, #0]
 8019712:	b2db      	uxtb	r3, r3
 8019714:	2b00      	cmp	r3, #0
 8019716:	d005      	beq.n	8019724 <USBD_VND_ProcessControlRequests+0x30>
 8019718:	4b05      	ldr	r3, [pc, #20]	@ (8019730 <USBD_VND_ProcessControlRequests+0x3c>)
 801971a:	2200      	movs	r2, #0
 801971c:	701a      	strb	r2, [r3, #0]
 801971e:	4803      	ldr	r0, [pc, #12]	@ (801972c <USBD_VND_ProcessControlRequests+0x38>)
 8019720:	f7ff ff4a 	bl	80195b8 <VND_Class_SoftReset>
}
 8019724:	bf00      	nop
 8019726:	bd80      	pop	{r7, pc}
 8019728:	2401a099 	.word	0x2401a099
 801972c:	2400d8c8 	.word	0x2400d8c8
 8019730:	2401a098 	.word	0x2401a098

08019734 <USBD_VND_Transmit>:
/* Слабый callback завершения передачи Vendor IN */
__weak void USBD_VND_TxCplt(void) {}

/* API для передачи по Vendor */
uint8_t USBD_VND_Transmit(USBD_HandleTypeDef *pdev, const uint8_t *data, uint16_t len)
{
 8019734:	b580      	push	{r7, lr}
 8019736:	b086      	sub	sp, #24
 8019738:	af00      	add	r7, sp, #0
 801973a:	60f8      	str	r0, [r7, #12]
 801973c:	60b9      	str	r1, [r7, #8]
 801973e:	4613      	mov	r3, r2
 8019740:	80fb      	strh	r3, [r7, #6]
  if (len > (uint16_t)sizeof(vnd_tx_buf)) return (uint8_t)USBD_FAIL; /* недопустимо: кадр больше ожидаемого */
 8019742:	88fb      	ldrh	r3, [r7, #6]
 8019744:	f5b3 6f02 	cmp.w	r3, #2080	@ 0x820
 8019748:	d901      	bls.n	801974e <USBD_VND_Transmit+0x1a>
 801974a:	2303      	movs	r3, #3
 801974c:	e048      	b.n	80197e0 <USBD_VND_Transmit+0xac>
  /* Сначала проверяем занятость; при BUSY — минимальный лог без засорения основного [VND_TX] */
  if (vnd_tx_busy) {
 801974e:	4b26      	ldr	r3, [pc, #152]	@ (80197e8 <USBD_VND_Transmit+0xb4>)
 8019750:	781b      	ldrb	r3, [r3, #0]
 8019752:	b2db      	uxtb	r3, r3
 8019754:	2b00      	cmp	r3, #0
 8019756:	d001      	beq.n	801975c <USBD_VND_Transmit+0x28>
      VND_LOGF("[VND_BUSY] ep=0x%02X len=%u head=%02X %02X %02X %02X\r\n", (unsigned)VND_IN_EP, (unsigned)len,
             (unsigned)data[0], (unsigned)data[1], (unsigned)data[2], (unsigned)data[3]);
    } else {
      VND_LOGF("[VND_BUSY] ep=0x%02X len=%u\r\n", (unsigned)VND_IN_EP, (unsigned)len);
    }
    return (uint8_t)USBD_BUSY;
 8019758:	2301      	movs	r3, #1
 801975a:	e041      	b.n	80197e0 <USBD_VND_Transmit+0xac>
  }
  memcpy(vnd_tx_buf, data, len);
 801975c:	88fb      	ldrh	r3, [r7, #6]
 801975e:	461a      	mov	r2, r3
 8019760:	68b9      	ldr	r1, [r7, #8]
 8019762:	4822      	ldr	r0, [pc, #136]	@ (80197ec <USBD_VND_Transmit+0xb8>)
 8019764:	f001 ff59 	bl	801b61a <memcpy>
  }
#endif
  /* Жёсткий запрет STAT mid-stream: если это не рабочий кадр (не 0x5A 0xA5) и идёт стрим, разрешаем только при явном разрешении */
  extern uint8_t streaming; /* из usb_vendor_app.c */
  extern volatile uint8_t vnd_status_permit_once; /* одноразовое разрешение STAT */
  if (streaming) {
 8019768:	4b21      	ldr	r3, [pc, #132]	@ (80197f0 <USBD_VND_Transmit+0xbc>)
 801976a:	781b      	ldrb	r3, [r3, #0]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d015      	beq.n	801979c <USBD_VND_Transmit+0x68>
    if (!(len >= 2 && vnd_tx_buf[0]==0x5A && vnd_tx_buf[1]==0xA5)) {
 8019770:	88fb      	ldrh	r3, [r7, #6]
 8019772:	2b01      	cmp	r3, #1
 8019774:	d907      	bls.n	8019786 <USBD_VND_Transmit+0x52>
 8019776:	4b1d      	ldr	r3, [pc, #116]	@ (80197ec <USBD_VND_Transmit+0xb8>)
 8019778:	781b      	ldrb	r3, [r3, #0]
 801977a:	2b5a      	cmp	r3, #90	@ 0x5a
 801977c:	d103      	bne.n	8019786 <USBD_VND_Transmit+0x52>
 801977e:	4b1b      	ldr	r3, [pc, #108]	@ (80197ec <USBD_VND_Transmit+0xb8>)
 8019780:	785b      	ldrb	r3, [r3, #1]
 8019782:	2ba5      	cmp	r3, #165	@ 0xa5
 8019784:	d00a      	beq.n	801979c <USBD_VND_Transmit+0x68>
      if (vnd_status_permit_once) {
 8019786:	4b1b      	ldr	r3, [pc, #108]	@ (80197f4 <USBD_VND_Transmit+0xc0>)
 8019788:	781b      	ldrb	r3, [r3, #0]
 801978a:	b2db      	uxtb	r3, r3
 801978c:	2b00      	cmp	r3, #0
 801978e:	d003      	beq.n	8019798 <USBD_VND_Transmit+0x64>
        vnd_status_permit_once = 0; /* использовать разрешение один раз */
 8019790:	4b18      	ldr	r3, [pc, #96]	@ (80197f4 <USBD_VND_Transmit+0xc0>)
 8019792:	2200      	movs	r2, #0
 8019794:	701a      	strb	r2, [r3, #0]
 8019796:	e001      	b.n	801979c <USBD_VND_Transmit+0x68>
          VND_LOGF("[VND_BLOCK] ep=0x%02X len=%u head=%02X %02X %02X %02X\r\n", (unsigned)VND_IN_EP, (unsigned)len,
                 (unsigned)vnd_tx_buf[0], (unsigned)vnd_tx_buf[1], (unsigned)vnd_tx_buf[2], (unsigned)vnd_tx_buf[3]);
        } else {
          VND_LOGF("[VND_BLOCK] ep=0x%02X len=%u\r\n", (unsigned)VND_IN_EP, (unsigned)len);
        }
        return (uint8_t)USBD_BUSY;
 8019798:	2301      	movs	r3, #1
 801979a:	e021      	b.n	80197e0 <USBD_VND_Transmit+0xac>
      }
    }
  }
  vnd_tx_busy = 1U;
 801979c:	4b12      	ldr	r3, [pc, #72]	@ (80197e8 <USBD_VND_Transmit+0xb4>)
 801979e:	2201      	movs	r2, #1
 80197a0:	701a      	strb	r2, [r3, #0]
  /* Восстанавливаем total_length для корректной ZLP логики в DataIn callback */
  pdev->ep_in[VND_IN_EP & 0x0FU].total_length = len;
 80197a2:	88fa      	ldrh	r2, [r7, #6]
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	655a      	str	r2, [r3, #84]	@ 0x54
  vnd_last_tx_len = len;
 80197a8:	4a13      	ldr	r2, [pc, #76]	@ (80197f8 <USBD_VND_Transmit+0xc4>)
 80197aa:	88fb      	ldrh	r3, [r7, #6]
 80197ac:	8013      	strh	r3, [r2, #0]
    vnd_last_tx_rc = (uint8_t)USBD_LL_Transmit(pdev, VND_IN_EP, vnd_tx_buf, len);
 80197ae:	88fb      	ldrh	r3, [r7, #6]
 80197b0:	4a0e      	ldr	r2, [pc, #56]	@ (80197ec <USBD_VND_Transmit+0xb8>)
 80197b2:	2183      	movs	r1, #131	@ 0x83
 80197b4:	68f8      	ldr	r0, [r7, #12]
 80197b6:	f001 fac5 	bl	801ad44 <USBD_LL_Transmit>
 80197ba:	4603      	mov	r3, r0
 80197bc:	461a      	mov	r2, r3
 80197be:	4b0f      	ldr	r3, [pc, #60]	@ (80197fc <USBD_VND_Transmit+0xc8>)
 80197c0:	701a      	strb	r2, [r3, #0]
    
    /* КРИТИЧЕСКИ ВАЖНО: memory barrier через volatile read USB регистра.
       Без этого компилятор может переупорядочить операции и HAL ISR не увидит
       правильное состояние. Чтение GINTSTS безопасно и гарантирует порядок. */
    {
        USB_OTG_GlobalTypeDef *usb_reg = (USB_OTG_GlobalTypeDef *)USB1_OTG_HS_PERIPH_BASE;
 80197c2:	4b0f      	ldr	r3, [pc, #60]	@ (8019800 <USBD_VND_Transmit+0xcc>)
 80197c4:	617b      	str	r3, [r7, #20]
        (void)usb_reg->GINTSTS; /* volatile read для memory barrier */
 80197c6:	697b      	ldr	r3, [r7, #20]
 80197c8:	695b      	ldr	r3, [r3, #20]
    }  /* Логируем только реально поставленные в LL передачи как [VND_TX] */
  if (vnd_last_tx_rc == (uint8_t)USBD_OK) {
 80197ca:	4b0c      	ldr	r3, [pc, #48]	@ (80197fc <USBD_VND_Transmit+0xc8>)
 80197cc:	781b      	ldrb	r3, [r3, #0]
 80197ce:	b2db      	uxtb	r3, r3
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d002      	beq.n	80197da <USBD_VND_Transmit+0xa6>
    } else {
      VND_LOGF("[VND_TX] ep=0x%02X len=%u\r\n", (unsigned)VND_IN_EP, (unsigned)len);
    }
  } else {
    /* Если LL вернул BUSY/FAIL — снимаем флаг занятости и логируем как FAIL */
    vnd_tx_busy = 0U;
 80197d4:	4b04      	ldr	r3, [pc, #16]	@ (80197e8 <USBD_VND_Transmit+0xb4>)
 80197d6:	2200      	movs	r2, #0
 80197d8:	701a      	strb	r2, [r3, #0]
             (unsigned)vnd_tx_buf[0], (unsigned)vnd_tx_buf[1], (unsigned)vnd_tx_buf[2], (unsigned)vnd_tx_buf[3]);
    } else {
      VND_LOGF("[VND_FAIL] ep=0x%02X rc=%u len=%u\r\n", (unsigned)VND_IN_EP, (unsigned)vnd_last_tx_rc, (unsigned)len);
    }
  }
  return vnd_last_tx_rc;
 80197da:	4b08      	ldr	r3, [pc, #32]	@ (80197fc <USBD_VND_Transmit+0xc8>)
 80197dc:	781b      	ldrb	r3, [r3, #0]
 80197de:	b2db      	uxtb	r3, r3
}
 80197e0:	4618      	mov	r0, r3
 80197e2:	3718      	adds	r7, #24
 80197e4:	46bd      	mov	sp, r7
 80197e6:	bd80      	pop	{r7, pc}
 80197e8:	2401aac0 	.word	0x2401aac0
 80197ec:	2401a29c 	.word	0x2401a29c
 80197f0:	2400dba4 	.word	0x2400dba4
 80197f4:	2400dc52 	.word	0x2400dc52
 80197f8:	2401aac2 	.word	0x2401aac2
 80197fc:	24000058 	.word	0x24000058
 8019800:	40040000 	.word	0x40040000

08019804 <USBD_VND_TxIsBusy>:
  vnd_rx_len = 0; /* помечаем прочитанным */
  return copy;
}

/* Диагностика состояния Vendor IN */
uint8_t USBD_VND_TxIsBusy(void) { return vnd_tx_busy; }
 8019804:	b480      	push	{r7}
 8019806:	af00      	add	r7, sp, #0
 8019808:	4b03      	ldr	r3, [pc, #12]	@ (8019818 <USBD_VND_TxIsBusy+0x14>)
 801980a:	781b      	ldrb	r3, [r3, #0]
 801980c:	b2db      	uxtb	r3, r3
 801980e:	4618      	mov	r0, r3
 8019810:	46bd      	mov	sp, r7
 8019812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019816:	4770      	bx	lr
 8019818:	2401aac0 	.word	0x2401aac0

0801981c <USBD_VND_LastTxRC>:
uint8_t USBD_VND_LastTxRC(void) { return vnd_last_tx_rc; }
 801981c:	b480      	push	{r7}
 801981e:	af00      	add	r7, sp, #0
 8019820:	4b03      	ldr	r3, [pc, #12]	@ (8019830 <USBD_VND_LastTxRC+0x14>)
 8019822:	781b      	ldrb	r3, [r3, #0]
 8019824:	b2db      	uxtb	r3, r3
 8019826:	4618      	mov	r0, r3
 8019828:	46bd      	mov	sp, r7
 801982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801982e:	4770      	bx	lr
 8019830:	24000058 	.word	0x24000058

08019834 <USBD_VND_LastTxLen>:
uint16_t USBD_VND_LastTxLen(void) { return vnd_last_tx_len; }
 8019834:	b480      	push	{r7}
 8019836:	af00      	add	r7, sp, #0
 8019838:	4b03      	ldr	r3, [pc, #12]	@ (8019848 <USBD_VND_LastTxLen+0x14>)
 801983a:	881b      	ldrh	r3, [r3, #0]
 801983c:	b29b      	uxth	r3, r3
 801983e:	4618      	mov	r0, r3
 8019840:	46bd      	mov	sp, r7
 8019842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019846:	4770      	bx	lr
 8019848:	2401aac2 	.word	0x2401aac2

0801984c <USBD_VND_ForceTxIdle>:

/* Форсируем свободное состояние TX (использовать осторожно: только при подтверждённом клине) */
void USBD_VND_ForceTxIdle(void)
{
 801984c:	b480      	push	{r7}
 801984e:	af00      	add	r7, sp, #0
  if (vnd_tx_busy) {
 8019850:	4b04      	ldr	r3, [pc, #16]	@ (8019864 <USBD_VND_ForceTxIdle+0x18>)
 8019852:	781b      	ldrb	r3, [r3, #0]
    VND_LOGF("[VND_FORCE_IDLE] clearing busy (last len=%u rc=%u)\r\n", (unsigned)vnd_last_tx_len, (unsigned)vnd_last_tx_rc);
  }
  vnd_tx_busy = 0U;
 8019854:	4b03      	ldr	r3, [pc, #12]	@ (8019864 <USBD_VND_ForceTxIdle+0x18>)
 8019856:	2200      	movs	r2, #0
 8019858:	701a      	strb	r2, [r3, #0]
}
 801985a:	bf00      	nop
 801985c:	46bd      	mov	sp, r7
 801985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019862:	4770      	bx	lr
 8019864:	2401aac0 	.word	0x2401aac0

08019868 <USBD_CDCVND_Init>:
  USBD_CDCVND_GetDeviceQualifierDescriptor,
};

/* ---------------- Реализация коллбэков ---------------- */
static uint8_t USBD_CDCVND_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b084      	sub	sp, #16
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
 8019870:	460b      	mov	r3, r1
 8019872:	70fb      	strb	r3, [r7, #3]
  g_alt_if2 = 0; /* при конфигурации по умолчанию IF2 в alt0 (idle) */
 8019874:	4b40      	ldr	r3, [pc, #256]	@ (8019978 <USBD_CDCVND_Init+0x110>)
 8019876:	2200      	movs	r2, #0
 8019878:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801987a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 801987e:	f001 fab7 	bl	801adf0 <USBD_static_malloc>
 8019882:	60f8      	str	r0, [r7, #12]
  if (!hcdc) { pdev->pClassData = NULL; return (uint8_t)USBD_EMEM; }
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d105      	bne.n	8019896 <USBD_CDCVND_Init+0x2e>
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	2200      	movs	r2, #0
 801988e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
 8019892:	2302      	movs	r3, #2
 8019894:	e06b      	b.n	801996e <USBD_CDCVND_Init+0x106>
  pdev->pClassData = hcdc;
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	68fa      	ldr	r2, [r7, #12]
 801989a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH) {
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	7c1b      	ldrb	r3, [r3, #16]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d119      	bne.n	80198da <USBD_CDCVND_Init+0x72>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP,  USBD_EP_TYPE_BULK, CDC_DATA_HS_IN_PACKET_SIZE);
 80198a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80198aa:	2202      	movs	r2, #2
 80198ac:	2181      	movs	r1, #129	@ 0x81
 80198ae:	6878      	ldr	r0, [r7, #4]
 80198b0:	f001 f95b 	bl	801ab6a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	2201      	movs	r2, #1
 80198b8:	871a      	strh	r2, [r3, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK, CDC_DATA_HS_OUT_PACKET_SIZE);
 80198ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80198be:	2202      	movs	r2, #2
 80198c0:	2101      	movs	r1, #1
 80198c2:	6878      	ldr	r0, [r7, #4]
 80198c4:	f001 f951 	bl	801ab6a <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	2201      	movs	r2, #1
 80198cc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	2210      	movs	r2, #16
 80198d4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 80198d8:	e016      	b.n	8019908 <USBD_CDCVND_Init+0xa0>
    /* Vendor IF#2 alt0 по умолчанию — EP будут открыты по SET_INTERFACE(alt=1) */
  } else {
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP,  USBD_EP_TYPE_BULK, CDC_DATA_FS_IN_PACKET_SIZE);
 80198da:	2340      	movs	r3, #64	@ 0x40
 80198dc:	2202      	movs	r2, #2
 80198de:	2181      	movs	r1, #129	@ 0x81
 80198e0:	6878      	ldr	r0, [r7, #4]
 80198e2:	f001 f942 	bl	801ab6a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	2201      	movs	r2, #1
 80198ea:	871a      	strh	r2, [r3, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK, CDC_DATA_FS_OUT_PACKET_SIZE);
 80198ec:	2340      	movs	r3, #64	@ 0x40
 80198ee:	2202      	movs	r2, #2
 80198f0:	2101      	movs	r1, #1
 80198f2:	6878      	ldr	r0, [r7, #4]
 80198f4:	f001 f939 	bl	801ab6a <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	2201      	movs	r2, #1
 80198fc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	2210      	movs	r2, #16
 8019904:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    /* Vendor IF#2 alt0 по умолчанию — EP будут открыты по SET_INTERFACE(alt=1) */
  }
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8019908:	2308      	movs	r3, #8
 801990a:	2203      	movs	r2, #3
 801990c:	2182      	movs	r1, #130	@ 0x82
 801990e:	6878      	ldr	r0, [r7, #4]
 8019910:	f001 f92b 	bl	801ab6a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	2201      	movs	r2, #1
 8019918:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  if (CDC_USR(pdev)) CDC_USR(pdev)->Init();
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019922:	2b00      	cmp	r3, #0
 8019924:	d004      	beq.n	8019930 <USBD_CDCVND_Init+0xc8>
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	4798      	blx	r3
  hcdc->TxState = 0; hcdc->RxState = 0;
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	2200      	movs	r2, #0
 8019934:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	2200      	movs	r2, #0
 801993c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  /* Готовим приём CDC OUT; Vendor OUT готовим только после включения alt1 */
  if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	7c1b      	ldrb	r3, [r3, #16]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d109      	bne.n	801995c <USBD_CDCVND_Init+0xf4>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer, CDC_DATA_HS_OUT_PACKET_SIZE);
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801994e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019952:	2101      	movs	r1, #1
 8019954:	6878      	ldr	r0, [r7, #4]
 8019956:	f001 fa16 	bl	801ad86 <USBD_LL_PrepareReceive>
 801995a:	e007      	b.n	801996c <USBD_CDCVND_Init+0x104>
  } else {
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer, CDC_DATA_FS_OUT_PACKET_SIZE);
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8019962:	2340      	movs	r3, #64	@ 0x40
 8019964:	2101      	movs	r1, #1
 8019966:	6878      	ldr	r0, [r7, #4]
 8019968:	f001 fa0d 	bl	801ad86 <USBD_LL_PrepareReceive>
    VND_LOGF("[VND_INIT] SPEED=FS vnd_mps=%u cdc_in_mps=%u\r\n",
             (unsigned)pdev->ep_in[VND_IN_EP & 0x0FU].maxpacket,
             (unsigned)pdev->ep_in[CDC_IN_EP & 0x0FU].maxpacket);
  }

  return (uint8_t)USBD_OK;
 801996c:	2300      	movs	r3, #0
}
 801996e:	4618      	mov	r0, r3
 8019970:	3710      	adds	r7, #16
 8019972:	46bd      	mov	sp, r7
 8019974:	bd80      	pop	{r7, pc}
 8019976:	bf00      	nop
 8019978:	2401a09a 	.word	0x2401a09a

0801997c <USBD_CDCVND_DeInit>:

static uint8_t USBD_CDCVND_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801997c:	b580      	push	{r7, lr}
 801997e:	b082      	sub	sp, #8
 8019980:	af00      	add	r7, sp, #0
 8019982:	6078      	str	r0, [r7, #4]
 8019984:	460b      	mov	r3, r1
 8019986:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8019988:	2181      	movs	r1, #129	@ 0x81
 801998a:	6878      	ldr	r0, [r7, #4]
 801998c:	f001 f913 	bl	801abb6 <USBD_LL_CloseEP>
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	2200      	movs	r2, #0
 8019994:	871a      	strh	r2, [r3, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP); pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8019996:	2101      	movs	r1, #1
 8019998:	6878      	ldr	r0, [r7, #4]
 801999a:	f001 f90c 	bl	801abb6 <USBD_LL_CloseEP>
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	2200      	movs	r2, #0
 80199a2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP); pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U; pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80199a6:	2182      	movs	r1, #130	@ 0x82
 80199a8:	6878      	ldr	r0, [r7, #4]
 80199aa:	f001 f904 	bl	801abb6 <USBD_LL_CloseEP>
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	2200      	movs	r2, #0
 80199b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	2200      	movs	r2, #0
 80199ba:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  (void)USBD_LL_CloseEP(pdev, VND_IN_EP);  pdev->ep_in[VND_IN_EP & 0xFU].is_used = 0U;
 80199be:	2183      	movs	r1, #131	@ 0x83
 80199c0:	6878      	ldr	r0, [r7, #4]
 80199c2:	f001 f8f8 	bl	801abb6 <USBD_LL_CloseEP>
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	2200      	movs	r2, #0
 80199ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  (void)USBD_LL_CloseEP(pdev, VND_OUT_EP); pdev->ep_out[VND_OUT_EP & 0xFU].is_used = 0U;
 80199ce:	2103      	movs	r1, #3
 80199d0:	6878      	ldr	r0, [r7, #4]
 80199d2:	f001 f8f0 	bl	801abb6 <USBD_LL_CloseEP>
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	2200      	movs	r2, #0
 80199da:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
  if (pdev->pClassData) {
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d013      	beq.n	8019a10 <USBD_CDCVND_DeInit+0x94>
    if (CDC_USR(pdev)) CDC_USR(pdev)->DeInit();
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d004      	beq.n	80199fc <USBD_CDCVND_DeInit+0x80>
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80199f8:	685b      	ldr	r3, [r3, #4]
 80199fa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8019a02:	4618      	mov	r0, r3
 8019a04:	f001 fa02 	bl	801ae0c <USBD_static_free>
    pdev->pClassData = NULL;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	2200      	movs	r2, #0
 8019a0c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }
  return (uint8_t)USBD_OK;
 8019a10:	2300      	movs	r3, #0
}
 8019a12:	4618      	mov	r0, r3
 8019a14:	3708      	adds	r7, #8
 8019a16:	46bd      	mov	sp, r7
 8019a18:	bd80      	pop	{r7, pc}
	...

08019a1c <USBD_CDCVND_Setup>:

static uint8_t USBD_CDCVND_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b098      	sub	sp, #96	@ 0x60
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]
 8019a24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8019a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (!hcdc) return (uint8_t)USBD_FAIL;
 8019a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	d101      	bne.n	8019a38 <USBD_CDCVND_Setup+0x1c>
 8019a34:	2303      	movs	r3, #3
 8019a36:	e237      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
  uint16_t status_info = 0; uint16_t len;
 8019a38:	2300      	movs	r3, #0
 8019a3a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  /* ДОБАВЛЕНО: ветка обработки vendor-specific control (GET_STATUS / SOFT/DEEP RESET) */
  if ( (req->bmRequest & USB_REQ_TYPE_MASK) == USB_REQ_TYPE_VENDOR ) {
 8019a3e:	683b      	ldr	r3, [r7, #0]
 8019a40:	781b      	ldrb	r3, [r3, #0]
 8019a42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8019a46:	2b40      	cmp	r3, #64	@ 0x40
 8019a48:	f040 80f8 	bne.w	8019c3c <USBD_CDCVND_Setup+0x220>
    VND_LOGF("[SETUP:VND] bm=0x%02X bReq=0x%02X wIndex=%u wLength=%u", (unsigned)req->bmRequest, (unsigned)req->bRequest, (unsigned)req->wIndex, (unsigned)req->wLength);
    /* Принимаем IN GET_STATUS вне зависимости от получателя и номера интерфейса (wIndex),
       чтобы упростить жизнь хостам, где CTRL к Interface может быть ограничен. */
    if ( (req->bmRequest & 0x80U) && req->bRequest == VND_CMD_GET_STATUS ) {
 8019a4c:	683b      	ldr	r3, [r7, #0]
 8019a4e:	781b      	ldrb	r3, [r3, #0]
 8019a50:	b25b      	sxtb	r3, r3
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	da20      	bge.n	8019a98 <USBD_CDCVND_Setup+0x7c>
 8019a56:	683b      	ldr	r3, [r7, #0]
 8019a58:	785b      	ldrb	r3, [r3, #1]
 8019a5a:	2b30      	cmp	r3, #48	@ 0x30
 8019a5c:	d11c      	bne.n	8019a98 <USBD_CDCVND_Setup+0x7c>
      uint8_t buf[64];
      uint16_t l = vnd_build_status(buf, sizeof(buf));
 8019a5e:	f107 0308 	add.w	r3, r7, #8
 8019a62:	2140      	movs	r1, #64	@ 0x40
 8019a64:	4618      	mov	r0, r3
 8019a66:	f7fc f975 	bl	8015d54 <vnd_build_status>
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
      if(!l){ USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 8019a70:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d105      	bne.n	8019a84 <USBD_CDCVND_Setup+0x68>
 8019a78:	6839      	ldr	r1, [r7, #0]
 8019a7a:	6878      	ldr	r0, [r7, #4]
 8019a7c:	f7fb fb5f 	bl	801513e <USBD_CtlError>
 8019a80:	2303      	movs	r3, #3
 8019a82:	e211      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
      VND_LOGF("[SETUP:VND] -> STAT %uB", (unsigned)l);
      USBD_CtlSendData(pdev, buf, l);
 8019a84:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8019a88:	f107 0308 	add.w	r3, r7, #8
 8019a8c:	4619      	mov	r1, r3
 8019a8e:	6878      	ldr	r0, [r7, #4]
 8019a90:	f7fb fbd2 	bl	8015238 <USBD_CtlSendData>
      return (uint8_t)USBD_OK;
 8019a94:	2300      	movs	r3, #0
 8019a96:	e207      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength == 0 && req->bRequest == 0x7Eu ) {
 8019a98:	683b      	ldr	r3, [r7, #0]
 8019a9a:	781b      	ldrb	r3, [r3, #0]
 8019a9c:	b25b      	sxtb	r3, r3
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	db0f      	blt.n	8019ac2 <USBD_CDCVND_Setup+0xa6>
 8019aa2:	683b      	ldr	r3, [r7, #0]
 8019aa4:	88db      	ldrh	r3, [r3, #6]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d10b      	bne.n	8019ac2 <USBD_CDCVND_Setup+0xa6>
 8019aaa:	683b      	ldr	r3, [r7, #0]
 8019aac:	785b      	ldrb	r3, [r3, #1]
 8019aae:	2b7e      	cmp	r3, #126	@ 0x7e
 8019ab0:	d107      	bne.n	8019ac2 <USBD_CDCVND_Setup+0xa6>
      /* SOFT_RESET: мгновенно подтверждаем статусом и выполняем ресет в фоне */
      g_req_soft_reset = 1; USBD_CtlSendStatus(pdev); return (uint8_t)USBD_OK;
 8019ab2:	4b92      	ldr	r3, [pc, #584]	@ (8019cfc <USBD_CDCVND_Setup+0x2e0>)
 8019ab4:	2201      	movs	r2, #1
 8019ab6:	701a      	strb	r2, [r3, #0]
 8019ab8:	6878      	ldr	r0, [r7, #4]
 8019aba:	f7fb fc17 	bl	80152ec <USBD_CtlSendStatus>
 8019abe:	2300      	movs	r3, #0
 8019ac0:	e1f2      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength == 0 && req->bRequest == 0x7Fu ) {
 8019ac2:	683b      	ldr	r3, [r7, #0]
 8019ac4:	781b      	ldrb	r3, [r3, #0]
 8019ac6:	b25b      	sxtb	r3, r3
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	db0f      	blt.n	8019aec <USBD_CDCVND_Setup+0xd0>
 8019acc:	683b      	ldr	r3, [r7, #0]
 8019ace:	88db      	ldrh	r3, [r3, #6]
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d10b      	bne.n	8019aec <USBD_CDCVND_Setup+0xd0>
 8019ad4:	683b      	ldr	r3, [r7, #0]
 8019ad6:	785b      	ldrb	r3, [r3, #1]
 8019ad8:	2b7f      	cmp	r3, #127	@ 0x7f
 8019ada:	d107      	bne.n	8019aec <USBD_CDCVND_Setup+0xd0>
      /* DEEP_RESET: то же, но с переоткрытием EP */
      g_req_deep_reset = 1; USBD_CtlSendStatus(pdev); return (uint8_t)USBD_OK;
 8019adc:	4b88      	ldr	r3, [pc, #544]	@ (8019d00 <USBD_CDCVND_Setup+0x2e4>)
 8019ade:	2201      	movs	r2, #1
 8019ae0:	701a      	strb	r2, [r3, #0]
 8019ae2:	6878      	ldr	r0, [r7, #4]
 8019ae4:	f7fb fc02 	bl	80152ec <USBD_CtlSendStatus>
 8019ae8:	2300      	movs	r3, #0
 8019aea:	e1dd      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength == 0 &&
 8019aec:	683b      	ldr	r3, [r7, #0]
 8019aee:	781b      	ldrb	r3, [r3, #0]
 8019af0:	b25b      	sxtb	r3, r3
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	db1a      	blt.n	8019b2c <USBD_CDCVND_Setup+0x110>
 8019af6:	683b      	ldr	r3, [r7, #0]
 8019af8:	88db      	ldrh	r3, [r3, #6]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d116      	bne.n	8019b2c <USBD_CDCVND_Setup+0x110>
                (req->bRequest == VND_CMD_START_STREAM || req->bRequest == VND_CMD_STOP_STREAM) ) {
 8019afe:	683b      	ldr	r3, [r7, #0]
 8019b00:	785b      	ldrb	r3, [r3, #1]
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength == 0 &&
 8019b02:	2b20      	cmp	r3, #32
 8019b04:	d003      	beq.n	8019b0e <USBD_CDCVND_Setup+0xf2>
                (req->bRequest == VND_CMD_START_STREAM || req->bRequest == VND_CMD_STOP_STREAM) ) {
 8019b06:	683b      	ldr	r3, [r7, #0]
 8019b08:	785b      	ldrb	r3, [r3, #1]
 8019b0a:	2b21      	cmp	r3, #33	@ 0x21
 8019b0c:	d10e      	bne.n	8019b2c <USBD_CDCVND_Setup+0x110>
      /* Разрешаем START/STOP по control OUT без данных: эмулируем приём команды Vendor */
      uint8_t cmd = (uint8_t)req->bRequest;
 8019b0e:	683b      	ldr	r3, [r7, #0]
 8019b10:	785b      	ldrb	r3, [r3, #1]
 8019b12:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      USBD_VND_DataReceived(&cmd, 1U);
 8019b16:	f107 0353 	add.w	r3, r7, #83	@ 0x53
 8019b1a:	2101      	movs	r1, #1
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	f7fe ff4f 	bl	80189c0 <USBD_VND_DataReceived>
      USBD_CtlSendStatus(pdev);
 8019b22:	6878      	ldr	r0, [r7, #4]
 8019b24:	f7fb fbe2 	bl	80152ec <USBD_CtlSendStatus>
      return (uint8_t)USBD_OK;
 8019b28:	2300      	movs	r3, #0
 8019b2a:	e1bd      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength == 0 &&
 8019b2c:	683b      	ldr	r3, [r7, #0]
 8019b2e:	781b      	ldrb	r3, [r3, #0]
 8019b30:	b25b      	sxtb	r3, r3
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	db27      	blt.n	8019b86 <USBD_CDCVND_Setup+0x16a>
 8019b36:	683b      	ldr	r3, [r7, #0]
 8019b38:	88db      	ldrh	r3, [r3, #6]
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d123      	bne.n	8019b86 <USBD_CDCVND_Setup+0x16a>
                (req->bRequest == VND_CMD_SET_ASYNC_MODE || req->bRequest == VND_CMD_SET_CHMODE ||
 8019b3e:	683b      	ldr	r3, [r7, #0]
 8019b40:	785b      	ldrb	r3, [r3, #1]
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength == 0 &&
 8019b42:	2b18      	cmp	r3, #24
 8019b44:	d00b      	beq.n	8019b5e <USBD_CDCVND_Setup+0x142>
                (req->bRequest == VND_CMD_SET_ASYNC_MODE || req->bRequest == VND_CMD_SET_CHMODE ||
 8019b46:	683b      	ldr	r3, [r7, #0]
 8019b48:	785b      	ldrb	r3, [r3, #1]
 8019b4a:	2b19      	cmp	r3, #25
 8019b4c:	d007      	beq.n	8019b5e <USBD_CDCVND_Setup+0x142>
                 req->bRequest == VND_CMD_SET_FULL_MODE  || req->bRequest == VND_CMD_SET_PROFILE) ) {
 8019b4e:	683b      	ldr	r3, [r7, #0]
 8019b50:	785b      	ldrb	r3, [r3, #1]
                (req->bRequest == VND_CMD_SET_ASYNC_MODE || req->bRequest == VND_CMD_SET_CHMODE ||
 8019b52:	2b13      	cmp	r3, #19
 8019b54:	d003      	beq.n	8019b5e <USBD_CDCVND_Setup+0x142>
                 req->bRequest == VND_CMD_SET_FULL_MODE  || req->bRequest == VND_CMD_SET_PROFILE) ) {
 8019b56:	683b      	ldr	r3, [r7, #0]
 8019b58:	785b      	ldrb	r3, [r3, #1]
 8019b5a:	2b14      	cmp	r3, #20
 8019b5c:	d113      	bne.n	8019b86 <USBD_CDCVND_Setup+0x16a>
      /* Альтернативный путь: принять параметр через wValue (без data stage) */
      uint8_t tmp[2];
      tmp[0] = (uint8_t)req->bRequest;
 8019b5e:	683b      	ldr	r3, [r7, #0]
 8019b60:	785b      	ldrb	r3, [r3, #1]
 8019b62:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
      tmp[1] = (uint8_t)(req->wValue & 0xFFU);
 8019b66:	683b      	ldr	r3, [r7, #0]
 8019b68:	885b      	ldrh	r3, [r3, #2]
 8019b6a:	b2db      	uxtb	r3, r3
 8019b6c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
      USBD_VND_DataReceived(tmp, 2U);
 8019b70:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8019b74:	2102      	movs	r1, #2
 8019b76:	4618      	mov	r0, r3
 8019b78:	f7fe ff22 	bl	80189c0 <USBD_VND_DataReceived>
      USBD_CtlSendStatus(pdev);
 8019b7c:	6878      	ldr	r0, [r7, #4]
 8019b7e:	f7fb fbb5 	bl	80152ec <USBD_CtlSendStatus>
      return (uint8_t)USBD_OK;
 8019b82:	2300      	movs	r3, #0
 8019b84:	e190      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength == 0 &&
 8019b86:	683b      	ldr	r3, [r7, #0]
 8019b88:	781b      	ldrb	r3, [r3, #0]
 8019b8a:	b25b      	sxtb	r3, r3
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	db22      	blt.n	8019bd6 <USBD_CDCVND_Setup+0x1ba>
 8019b90:	683b      	ldr	r3, [r7, #0]
 8019b92:	88db      	ldrh	r3, [r3, #6]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d11e      	bne.n	8019bd6 <USBD_CDCVND_Setup+0x1ba>
                (req->bRequest == VND_CMD_SET_FRAME_SAMPLES) ) {
 8019b98:	683b      	ldr	r3, [r7, #0]
 8019b9a:	785b      	ldrb	r3, [r3, #1]
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength == 0 &&
 8019b9c:	2b17      	cmp	r3, #23
 8019b9e:	d11a      	bne.n	8019bd6 <USBD_CDCVND_Setup+0x1ba>
      /* SET_FRAME_SAMPLES: 16-битное значение в wValue (LSB first) */
      uint8_t tmp[3];
      tmp[0] = (uint8_t)req->bRequest;
 8019ba0:	683b      	ldr	r3, [r7, #0]
 8019ba2:	785b      	ldrb	r3, [r3, #1]
 8019ba4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
      tmp[1] = (uint8_t)(req->wValue & 0xFFU);
 8019ba8:	683b      	ldr	r3, [r7, #0]
 8019baa:	885b      	ldrh	r3, [r3, #2]
 8019bac:	b2db      	uxtb	r3, r3
 8019bae:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
      tmp[2] = (uint8_t)((req->wValue >> 8) & 0xFFU);
 8019bb2:	683b      	ldr	r3, [r7, #0]
 8019bb4:	885b      	ldrh	r3, [r3, #2]
 8019bb6:	0a1b      	lsrs	r3, r3, #8
 8019bb8:	b29b      	uxth	r3, r3
 8019bba:	b2db      	uxtb	r3, r3
 8019bbc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
      USBD_VND_DataReceived(tmp, 3U);
 8019bc0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8019bc4:	2103      	movs	r1, #3
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	f7fe fefa 	bl	80189c0 <USBD_VND_DataReceived>
      USBD_CtlSendStatus(pdev);
 8019bcc:	6878      	ldr	r0, [r7, #4]
 8019bce:	f7fb fb8d 	bl	80152ec <USBD_CtlSendStatus>
      return (uint8_t)USBD_OK;
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	e168      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength > 0 &&
 8019bd6:	683b      	ldr	r3, [r7, #0]
 8019bd8:	781b      	ldrb	r3, [r3, #0]
 8019bda:	b25b      	sxtb	r3, r3
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	db27      	blt.n	8019c30 <USBD_CDCVND_Setup+0x214>
 8019be0:	683b      	ldr	r3, [r7, #0]
 8019be2:	88db      	ldrh	r3, [r3, #6]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d023      	beq.n	8019c30 <USBD_CDCVND_Setup+0x214>
                (req->bRequest == VND_CMD_SET_ASYNC_MODE || req->bRequest == VND_CMD_SET_CHMODE ||
 8019be8:	683b      	ldr	r3, [r7, #0]
 8019bea:	785b      	ldrb	r3, [r3, #1]
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength > 0 &&
 8019bec:	2b18      	cmp	r3, #24
 8019bee:	d00b      	beq.n	8019c08 <USBD_CDCVND_Setup+0x1ec>
                (req->bRequest == VND_CMD_SET_ASYNC_MODE || req->bRequest == VND_CMD_SET_CHMODE ||
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	785b      	ldrb	r3, [r3, #1]
 8019bf4:	2b19      	cmp	r3, #25
 8019bf6:	d007      	beq.n	8019c08 <USBD_CDCVND_Setup+0x1ec>
                 req->bRequest == VND_CMD_SET_FULL_MODE  || req->bRequest == VND_CMD_SET_PROFILE) ) {
 8019bf8:	683b      	ldr	r3, [r7, #0]
 8019bfa:	785b      	ldrb	r3, [r3, #1]
                (req->bRequest == VND_CMD_SET_ASYNC_MODE || req->bRequest == VND_CMD_SET_CHMODE ||
 8019bfc:	2b13      	cmp	r3, #19
 8019bfe:	d003      	beq.n	8019c08 <USBD_CDCVND_Setup+0x1ec>
                 req->bRequest == VND_CMD_SET_FULL_MODE  || req->bRequest == VND_CMD_SET_PROFILE) ) {
 8019c00:	683b      	ldr	r3, [r7, #0]
 8019c02:	785b      	ldrb	r3, [r3, #1]
 8019c04:	2b14      	cmp	r3, #20
 8019c06:	d113      	bne.n	8019c30 <USBD_CDCVND_Setup+0x214>
      /* Принимаем небольшие конфиги по control OUT с телом данных, доставляем в Vendor как будто по Bulk OUT */
      hcdc->CmdOpCode = req->bRequest;
 8019c08:	683b      	ldr	r3, [r7, #0]
 8019c0a:	785a      	ldrb	r2, [r3, #1]
 8019c0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019c0e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
      hcdc->CmdLength = (uint8_t)req->wLength;
 8019c12:	683b      	ldr	r3, [r7, #0]
 8019c14:	88db      	ldrh	r3, [r3, #6]
 8019c16:	b2da      	uxtb	r2, r3
 8019c18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019c1a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
      USBD_CtlPrepareRx(pdev, (uint8_t*)hcdc->data, req->wLength); // cast
 8019c1e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8019c20:	683b      	ldr	r3, [r7, #0]
 8019c22:	88db      	ldrh	r3, [r3, #6]
 8019c24:	461a      	mov	r2, r3
 8019c26:	6878      	ldr	r0, [r7, #4]
 8019c28:	f7fb fb32 	bl	8015290 <USBD_CtlPrepareRx>
      return (uint8_t)USBD_OK;
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	e13b      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
    } else {
      VND_LOGF("[SETUP:VND] unsupported -> STALL");
      USBD_CtlError(pdev, req);
 8019c30:	6839      	ldr	r1, [r7, #0]
 8019c32:	6878      	ldr	r0, [r7, #4]
 8019c34:	f7fb fa83 	bl	801513e <USBD_CtlError>
      return (uint8_t)USBD_FAIL;
 8019c38:	2303      	movs	r3, #3
 8019c3a:	e135      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
    }
  }
  switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8019c3c:	683b      	ldr	r3, [r7, #0]
 8019c3e:	781b      	ldrb	r3, [r3, #0]
 8019c40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d04c      	beq.n	8019ce2 <USBD_CDCVND_Setup+0x2c6>
 8019c48:	2b20      	cmp	r3, #32
 8019c4a:	f040 8125 	bne.w	8019e98 <USBD_CDCVND_Setup+0x47c>
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U) {
 8019c4e:	683b      	ldr	r3, [r7, #0]
 8019c50:	88db      	ldrh	r3, [r3, #6]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d035      	beq.n	8019cc2 <USBD_CDCVND_Setup+0x2a6>
        if (req->bmRequest & 0x80U) {
 8019c56:	683b      	ldr	r3, [r7, #0]
 8019c58:	781b      	ldrb	r3, [r3, #0]
 8019c5a:	b25b      	sxtb	r3, r3
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	da1d      	bge.n	8019c9c <USBD_CDCVND_Setup+0x280>
          if (CDC_USR(pdev)) CDC_USR(pdev)->Control(req->bRequest, (uint8_t*)hcdc->data, req->wLength); // cast
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d009      	beq.n	8019c7e <USBD_CDCVND_Setup+0x262>
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019c70:	689b      	ldr	r3, [r3, #8]
 8019c72:	683a      	ldr	r2, [r7, #0]
 8019c74:	7850      	ldrb	r0, [r2, #1]
 8019c76:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8019c78:	683a      	ldr	r2, [r7, #0]
 8019c7a:	88d2      	ldrh	r2, [r2, #6]
 8019c7c:	4798      	blx	r3
          len = (uint16_t)MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8019c7e:	683b      	ldr	r3, [r7, #0]
 8019c80:	88db      	ldrh	r3, [r3, #6]
 8019c82:	2b07      	cmp	r3, #7
 8019c84:	bf28      	it	cs
 8019c86:	2307      	movcs	r3, #7
 8019c88:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
          USBD_CtlSendData(pdev, (uint8_t*)hcdc->data, len); // cast
 8019c8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019c8e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8019c92:	4619      	mov	r1, r3
 8019c94:	6878      	ldr	r0, [r7, #4]
 8019c96:	f7fb facf 	bl	8015238 <USBD_CtlSendData>
          USBD_CtlPrepareRx(pdev, (uint8_t*)hcdc->data, req->wLength); // cast
        }
      } else {
        if (CDC_USR(pdev)) CDC_USR(pdev)->Control(req->bRequest, (uint8_t*)req, 0U);
      }
      break;
 8019c9a:	e103      	b.n	8019ea4 <USBD_CDCVND_Setup+0x488>
          hcdc->CmdOpCode = req->bRequest; hcdc->CmdLength = (uint8_t)req->wLength;
 8019c9c:	683b      	ldr	r3, [r7, #0]
 8019c9e:	785a      	ldrb	r2, [r3, #1]
 8019ca0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019ca2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
 8019ca6:	683b      	ldr	r3, [r7, #0]
 8019ca8:	88db      	ldrh	r3, [r3, #6]
 8019caa:	b2da      	uxtb	r2, r3
 8019cac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019cae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t*)hcdc->data, req->wLength); // cast
 8019cb2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	88db      	ldrh	r3, [r3, #6]
 8019cb8:	461a      	mov	r2, r3
 8019cba:	6878      	ldr	r0, [r7, #4]
 8019cbc:	f7fb fae8 	bl	8015290 <USBD_CtlPrepareRx>
      break;
 8019cc0:	e0f0      	b.n	8019ea4 <USBD_CDCVND_Setup+0x488>
        if (CDC_USR(pdev)) CDC_USR(pdev)->Control(req->bRequest, (uint8_t*)req, 0U);
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	f000 80eb 	beq.w	8019ea4 <USBD_CDCVND_Setup+0x488>
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019cd4:	689b      	ldr	r3, [r3, #8]
 8019cd6:	683a      	ldr	r2, [r7, #0]
 8019cd8:	7850      	ldrb	r0, [r2, #1]
 8019cda:	2200      	movs	r2, #0
 8019cdc:	6839      	ldr	r1, [r7, #0]
 8019cde:	4798      	blx	r3
      break;
 8019ce0:	e0e0      	b.n	8019ea4 <USBD_CDCVND_Setup+0x488>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest) {
 8019ce2:	683b      	ldr	r3, [r7, #0]
 8019ce4:	785b      	ldrb	r3, [r3, #1]
 8019ce6:	2b0b      	cmp	r3, #11
 8019ce8:	d040      	beq.n	8019d6c <USBD_CDCVND_Setup+0x350>
 8019cea:	2b0b      	cmp	r3, #11
 8019cec:	f300 80cd 	bgt.w	8019e8a <USBD_CDCVND_Setup+0x46e>
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d007      	beq.n	8019d04 <USBD_CDCVND_Setup+0x2e8>
 8019cf4:	2b0a      	cmp	r3, #10
 8019cf6:	d019      	beq.n	8019d2c <USBD_CDCVND_Setup+0x310>
 8019cf8:	e0c7      	b.n	8019e8a <USBD_CDCVND_Setup+0x46e>
 8019cfa:	bf00      	nop
 8019cfc:	2401a098 	.word	0x2401a098
 8019d00:	2401a099 	.word	0x2401a099
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED) USBD_CtlSendData(pdev, (uint8_t*)&status_info, 2U); else { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019d0a:	b2db      	uxtb	r3, r3
 8019d0c:	2b03      	cmp	r3, #3
 8019d0e:	d107      	bne.n	8019d20 <USBD_CDCVND_Setup+0x304>
 8019d10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8019d14:	2202      	movs	r2, #2
 8019d16:	4619      	mov	r1, r3
 8019d18:	6878      	ldr	r0, [r7, #4]
 8019d1a:	f7fb fa8d 	bl	8015238 <USBD_CtlSendData>
          break;
 8019d1e:	e0ba      	b.n	8019e96 <USBD_CDCVND_Setup+0x47a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED) USBD_CtlSendData(pdev, (uint8_t*)&status_info, 2U); else { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 8019d20:	6839      	ldr	r1, [r7, #0]
 8019d22:	6878      	ldr	r0, [r7, #4]
 8019d24:	f7fb fa0b 	bl	801513e <USBD_CtlError>
 8019d28:	2303      	movs	r3, #3
 8019d2a:	e0bd      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019d32:	b2db      	uxtb	r3, r3
 8019d34:	2b03      	cmp	r3, #3
 8019d36:	d113      	bne.n	8019d60 <USBD_CDCVND_Setup+0x344>
            uint8_t cur = 0;
 8019d38:	2300      	movs	r3, #0
 8019d3a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            if (req->wIndex == 2) cur = (uint8_t)g_alt_if2; /* наш Vendor IF */
 8019d3e:	683b      	ldr	r3, [r7, #0]
 8019d40:	889b      	ldrh	r3, [r3, #4]
 8019d42:	2b02      	cmp	r3, #2
 8019d44:	d104      	bne.n	8019d50 <USBD_CDCVND_Setup+0x334>
 8019d46:	4b5a      	ldr	r3, [pc, #360]	@ (8019eb0 <USBD_CDCVND_Setup+0x494>)
 8019d48:	781b      	ldrb	r3, [r3, #0]
 8019d4a:	b2db      	uxtb	r3, r3
 8019d4c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            /* CDC интерфейсы IF0/IF1 всегда alt0 */
            USBD_CtlSendData(pdev, &cur, 1U);
 8019d50:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 8019d54:	2201      	movs	r2, #1
 8019d56:	4619      	mov	r1, r3
 8019d58:	6878      	ldr	r0, [r7, #4]
 8019d5a:	f7fb fa6d 	bl	8015238 <USBD_CtlSendData>
          } else { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
          break;
 8019d5e:	e09a      	b.n	8019e96 <USBD_CDCVND_Setup+0x47a>
          } else { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 8019d60:	6839      	ldr	r1, [r7, #0]
 8019d62:	6878      	ldr	r0, [r7, #4]
 8019d64:	f7fb f9eb 	bl	801513e <USBD_CtlError>
 8019d68:	2303      	movs	r3, #3
 8019d6a:	e09d      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED) { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019d72:	b2db      	uxtb	r3, r3
 8019d74:	2b03      	cmp	r3, #3
 8019d76:	d005      	beq.n	8019d84 <USBD_CDCVND_Setup+0x368>
 8019d78:	6839      	ldr	r1, [r7, #0]
 8019d7a:	6878      	ldr	r0, [r7, #4]
 8019d7c:	f7fb f9df 	bl	801513e <USBD_CtlError>
 8019d80:	2303      	movs	r3, #3
 8019d82:	e091      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
          /* Поддержка altsetting для IF#2: 0 -> idle (закрыть EP), 1 -> stream (открыть EP) */
          if (req->wIndex == 2) {
 8019d84:	683b      	ldr	r3, [r7, #0]
 8019d86:	889b      	ldrh	r3, [r3, #4]
 8019d88:	2b02      	cmp	r3, #2
 8019d8a:	d179      	bne.n	8019e80 <USBD_CDCVND_Setup+0x464>
            uint16_t alt = req->wValue;
 8019d8c:	683b      	ldr	r3, [r7, #0]
 8019d8e:	885b      	ldrh	r3, [r3, #2]
 8019d90:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            if (alt == 0) {
 8019d94:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d119      	bne.n	8019dd0 <USBD_CDCVND_Setup+0x3b4>
              /* Остановить пайплайн приложения и закрыть EP */
              printf("[USB_IF2] SET_INTERFACE alt=0 (CLOSE)\r\n");
 8019d9c:	4845      	ldr	r0, [pc, #276]	@ (8019eb4 <USBD_CDCVND_Setup+0x498>)
 8019d9e:	f001 f997 	bl	801b0d0 <puts>
              vnd_pipeline_stop_reset(0);
 8019da2:	2000      	movs	r0, #0
 8019da4:	f7fb fdc4 	bl	8015930 <vnd_pipeline_stop_reset>
              (void)USBD_LL_CloseEP(pdev, VND_IN_EP);  pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 0U;
 8019da8:	2183      	movs	r1, #131	@ 0x83
 8019daa:	6878      	ldr	r0, [r7, #4]
 8019dac:	f000 ff03 	bl	801abb6 <USBD_LL_CloseEP>
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	2200      	movs	r2, #0
 8019db4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
              (void)USBD_LL_CloseEP(pdev, VND_OUT_EP); pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 0U;
 8019db8:	2103      	movs	r1, #3
 8019dba:	6878      	ldr	r0, [r7, #4]
 8019dbc:	f000 fefb 	bl	801abb6 <USBD_LL_CloseEP>
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
              g_alt_if2 = 0;
 8019dc8:	4b39      	ldr	r3, [pc, #228]	@ (8019eb0 <USBD_CDCVND_Setup+0x494>)
 8019dca:	2200      	movs	r2, #0
 8019dcc:	701a      	strb	r2, [r3, #0]
 8019dce:	e050      	b.n	8019e72 <USBD_CDCVND_Setup+0x456>
            } else if (alt == 1) {
 8019dd0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8019dd4:	2b01      	cmp	r3, #1
 8019dd6:	d14c      	bne.n	8019e72 <USBD_CDCVND_Setup+0x456>
              /* Открыть EP и реармить приём */
              printf("[USB_IF2] SET_INTERFACE alt=1 (OPEN) speed=%s\r\n", 
                     pdev->dev_speed == USBD_SPEED_HIGH ? "HS" : "FS");
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	7c1b      	ldrb	r3, [r3, #16]
              printf("[USB_IF2] SET_INTERFACE alt=1 (OPEN) speed=%s\r\n", 
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d101      	bne.n	8019de4 <USBD_CDCVND_Setup+0x3c8>
 8019de0:	4b35      	ldr	r3, [pc, #212]	@ (8019eb8 <USBD_CDCVND_Setup+0x49c>)
 8019de2:	e000      	b.n	8019de6 <USBD_CDCVND_Setup+0x3ca>
 8019de4:	4b35      	ldr	r3, [pc, #212]	@ (8019ebc <USBD_CDCVND_Setup+0x4a0>)
 8019de6:	4619      	mov	r1, r3
 8019de8:	4835      	ldr	r0, [pc, #212]	@ (8019ec0 <USBD_CDCVND_Setup+0x4a4>)
 8019dea:	f001 f909 	bl	801b000 <iprintf>
              if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	7c1b      	ldrb	r3, [r3, #16]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d11d      	bne.n	8019e32 <USBD_CDCVND_Setup+0x416>
                (void)USBD_LL_OpenEP(pdev, VND_IN_EP,  USBD_EP_TYPE_BULK, VND_DATA_HS_MAX_PACKET_SIZE);
 8019df6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019dfa:	2202      	movs	r2, #2
 8019dfc:	2183      	movs	r1, #131	@ 0x83
 8019dfe:	6878      	ldr	r0, [r7, #4]
 8019e00:	f000 feb3 	bl	801ab6a <USBD_LL_OpenEP>
                pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 1U;
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	2201      	movs	r2, #1
 8019e08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                (void)USBD_LL_OpenEP(pdev, VND_OUT_EP, USBD_EP_TYPE_BULK, VND_DATA_HS_MAX_PACKET_SIZE);
 8019e0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019e10:	2202      	movs	r2, #2
 8019e12:	2103      	movs	r1, #3
 8019e14:	6878      	ldr	r0, [r7, #4]
 8019e16:	f000 fea8 	bl	801ab6a <USBD_LL_OpenEP>
                pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 1U;
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	2201      	movs	r2, #1
 8019e1e:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
                (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_HS_MAX_PACKET_SIZE);
 8019e22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019e26:	4a27      	ldr	r2, [pc, #156]	@ (8019ec4 <USBD_CDCVND_Setup+0x4a8>)
 8019e28:	2103      	movs	r1, #3
 8019e2a:	6878      	ldr	r0, [r7, #4]
 8019e2c:	f000 ffab 	bl	801ad86 <USBD_LL_PrepareReceive>
 8019e30:	e019      	b.n	8019e66 <USBD_CDCVND_Setup+0x44a>
              } else {
                (void)USBD_LL_OpenEP(pdev, VND_IN_EP,  USBD_EP_TYPE_BULK, VND_DATA_FS_MAX_PACKET_SIZE);
 8019e32:	2340      	movs	r3, #64	@ 0x40
 8019e34:	2202      	movs	r2, #2
 8019e36:	2183      	movs	r1, #131	@ 0x83
 8019e38:	6878      	ldr	r0, [r7, #4]
 8019e3a:	f000 fe96 	bl	801ab6a <USBD_LL_OpenEP>
                pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 1U;
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	2201      	movs	r2, #1
 8019e42:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                (void)USBD_LL_OpenEP(pdev, VND_OUT_EP, USBD_EP_TYPE_BULK, VND_DATA_FS_MAX_PACKET_SIZE);
 8019e46:	2340      	movs	r3, #64	@ 0x40
 8019e48:	2202      	movs	r2, #2
 8019e4a:	2103      	movs	r1, #3
 8019e4c:	6878      	ldr	r0, [r7, #4]
 8019e4e:	f000 fe8c 	bl	801ab6a <USBD_LL_OpenEP>
                pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 1U;
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	2201      	movs	r2, #1
 8019e56:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
                (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_FS_MAX_PACKET_SIZE);
 8019e5a:	2340      	movs	r3, #64	@ 0x40
 8019e5c:	4a19      	ldr	r2, [pc, #100]	@ (8019ec4 <USBD_CDCVND_Setup+0x4a8>)
 8019e5e:	2103      	movs	r1, #3
 8019e60:	6878      	ldr	r0, [r7, #4]
 8019e62:	f000 ff90 	bl	801ad86 <USBD_LL_PrepareReceive>
              }
              g_alt_if2 = 1;
 8019e66:	4b12      	ldr	r3, [pc, #72]	@ (8019eb0 <USBD_CDCVND_Setup+0x494>)
 8019e68:	2201      	movs	r2, #1
 8019e6a:	701a      	strb	r2, [r3, #0]
              printf("[USB_IF2] EP#3 and EP#83 opened, receiving enabled\r\n");
 8019e6c:	4816      	ldr	r0, [pc, #88]	@ (8019ec8 <USBD_CDCVND_Setup+0x4ac>)
 8019e6e:	f001 f92f 	bl	801b0d0 <puts>
            }
            USBD_CtlSendStatus(pdev);
 8019e72:	6878      	ldr	r0, [r7, #4]
 8019e74:	f7fb fa3a 	bl	80152ec <USBD_CtlSendStatus>
            /* Выполним возможные отложенные сервисы */
            USBD_VND_ProcessControlRequests();
 8019e78:	f7ff fc3c 	bl	80196f4 <USBD_VND_ProcessControlRequests>
            return (uint8_t)USBD_OK;
 8019e7c:	2300      	movs	r3, #0
 8019e7e:	e013      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
          }
          /* Иные интерфейсы (CDC IF0/IF1) — поддерживают только alt=0. Подтверждаем статусом без действий. */
          USBD_CtlSendStatus(pdev);
 8019e80:	6878      	ldr	r0, [r7, #4]
 8019e82:	f7fb fa33 	bl	80152ec <USBD_CtlSendStatus>
          return (uint8_t)USBD_OK;
 8019e86:	2300      	movs	r3, #0
 8019e88:	e00e      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
        default: USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL;
 8019e8a:	6839      	ldr	r1, [r7, #0]
 8019e8c:	6878      	ldr	r0, [r7, #4]
 8019e8e:	f7fb f956 	bl	801513e <USBD_CtlError>
 8019e92:	2303      	movs	r3, #3
 8019e94:	e008      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
      }
      break;
 8019e96:	e006      	b.n	8019ea6 <USBD_CDCVND_Setup+0x48a>
    default: USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL;
 8019e98:	6839      	ldr	r1, [r7, #0]
 8019e9a:	6878      	ldr	r0, [r7, #4]
 8019e9c:	f7fb f94f 	bl	801513e <USBD_CtlError>
 8019ea0:	2303      	movs	r3, #3
 8019ea2:	e001      	b.n	8019ea8 <USBD_CDCVND_Setup+0x48c>
      break;
 8019ea4:	bf00      	nop
  }
  return (uint8_t)USBD_OK;
 8019ea6:	2300      	movs	r3, #0
}
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	3760      	adds	r7, #96	@ 0x60
 8019eac:	46bd      	mov	sp, r7
 8019eae:	bd80      	pop	{r7, pc}
 8019eb0:	2401a09a 	.word	0x2401a09a
 8019eb4:	0801d364 	.word	0x0801d364
 8019eb8:	0801d38c 	.word	0x0801d38c
 8019ebc:	0801d390 	.word	0x0801d390
 8019ec0:	0801d394 	.word	0x0801d394
 8019ec4:	2401a09c 	.word	0x2401a09c
 8019ec8:	0801d3c4 	.word	0x0801d3c4

08019ecc <USBD_CDCVND_DataIn>:

static uint8_t USBD_CDCVND_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019ecc:	b580      	push	{r7, lr}
 8019ece:	b086      	sub	sp, #24
 8019ed0:	af00      	add	r7, sp, #0
 8019ed2:	6078      	str	r0, [r7, #4]
 8019ed4:	460b      	mov	r3, r1
 8019ed6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8019ede:	617b      	str	r3, [r7, #20]
  if (!hcdc) return (uint8_t)USBD_FAIL;
 8019ee0:	697b      	ldr	r3, [r7, #20]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d101      	bne.n	8019eea <USBD_CDCVND_DataIn+0x1e>
 8019ee6:	2303      	movs	r3, #3
 8019ee8:	e0a1      	b.n	801a02e <USBD_CDCVND_DataIn+0x162>
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019ef0:	613b      	str	r3, [r7, #16]
  if ((CDC_IN_EP & 0x7FU) == epnum) {
 8019ef2:	78fb      	ldrb	r3, [r7, #3]
 8019ef4:	2b01      	cmp	r3, #1
 8019ef6:	d150      	bne.n	8019f9a <USBD_CDCVND_DataIn+0xce>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U)) {
 8019ef8:	78fa      	ldrb	r2, [r7, #3]
 8019efa:	6879      	ldr	r1, [r7, #4]
 8019efc:	4613      	mov	r3, r2
 8019efe:	009b      	lsls	r3, r3, #2
 8019f00:	4413      	add	r3, r2
 8019f02:	009b      	lsls	r3, r3, #2
 8019f04:	440b      	add	r3, r1
 8019f06:	3318      	adds	r3, #24
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d029      	beq.n	8019f62 <USBD_CDCVND_DataIn+0x96>
 8019f0e:	78fa      	ldrb	r2, [r7, #3]
 8019f10:	6879      	ldr	r1, [r7, #4]
 8019f12:	4613      	mov	r3, r2
 8019f14:	009b      	lsls	r3, r3, #2
 8019f16:	4413      	add	r3, r2
 8019f18:	009b      	lsls	r3, r3, #2
 8019f1a:	440b      	add	r3, r1
 8019f1c:	3318      	adds	r3, #24
 8019f1e:	681a      	ldr	r2, [r3, #0]
 8019f20:	78f9      	ldrb	r1, [r7, #3]
 8019f22:	6938      	ldr	r0, [r7, #16]
 8019f24:	460b      	mov	r3, r1
 8019f26:	00db      	lsls	r3, r3, #3
 8019f28:	440b      	add	r3, r1
 8019f2a:	009b      	lsls	r3, r3, #2
 8019f2c:	4403      	add	r3, r0
 8019f2e:	331c      	adds	r3, #28
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	fbb2 f1f3 	udiv	r1, r2, r3
 8019f36:	fb01 f303 	mul.w	r3, r1, r3
 8019f3a:	1ad3      	subs	r3, r2, r3
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d110      	bne.n	8019f62 <USBD_CDCVND_DataIn+0x96>
      pdev->ep_in[epnum].total_length = 0U;
 8019f40:	78fa      	ldrb	r2, [r7, #3]
 8019f42:	6879      	ldr	r1, [r7, #4]
 8019f44:	4613      	mov	r3, r2
 8019f46:	009b      	lsls	r3, r3, #2
 8019f48:	4413      	add	r3, r2
 8019f4a:	009b      	lsls	r3, r3, #2
 8019f4c:	440b      	add	r3, r1
 8019f4e:	3318      	adds	r3, #24
 8019f50:	2200      	movs	r2, #0
 8019f52:	601a      	str	r2, [r3, #0]
      (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U); /* ZLP */
 8019f54:	78f9      	ldrb	r1, [r7, #3]
 8019f56:	2300      	movs	r3, #0
 8019f58:	2200      	movs	r2, #0
 8019f5a:	6878      	ldr	r0, [r7, #4]
 8019f5c:	f000 fef2 	bl	801ad44 <USBD_LL_Transmit>
 8019f60:	e064      	b.n	801a02c <USBD_CDCVND_DataIn+0x160>
    } else {
      hcdc->TxState = 0U;
 8019f62:	697b      	ldr	r3, [r7, #20]
 8019f64:	2200      	movs	r2, #0
 8019f66:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
      if (CDC_USR(pdev) && CDC_USR(pdev)->TransmitCplt) CDC_USR(pdev)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d05b      	beq.n	801a02c <USBD_CDCVND_DataIn+0x160>
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019f7a:	691b      	ldr	r3, [r3, #16]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d055      	beq.n	801a02c <USBD_CDCVND_DataIn+0x160>
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019f86:	691b      	ldr	r3, [r3, #16]
 8019f88:	697a      	ldr	r2, [r7, #20]
 8019f8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8019f8e:	697a      	ldr	r2, [r7, #20]
 8019f90:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8019f94:	78fa      	ldrb	r2, [r7, #3]
 8019f96:	4798      	blx	r3
 8019f98:	e048      	b.n	801a02c <USBD_CDCVND_DataIn+0x160>
    }
  } else if ((VND_IN_EP & 0x7FU) == epnum) {
 8019f9a:	78fb      	ldrb	r3, [r7, #3]
 8019f9c:	2b03      	cmp	r3, #3
 8019f9e:	d145      	bne.n	801a02c <USBD_CDCVND_DataIn+0x160>
    /* Vendor Bulk IN: CDC-подобная схема завершения.
       Если длина передачи кратна размеру пакета (MPS), требуется отправить ZLP,
       иначе некоторые хосты (Windows/libusb FS) будут ждать продолжения и в итоге
       получать таймаут. Поведение аналогично CDC. */
    uint16_t tl = pdev->ep_in[epnum].total_length;
 8019fa0:	78fa      	ldrb	r2, [r7, #3]
 8019fa2:	6879      	ldr	r1, [r7, #4]
 8019fa4:	4613      	mov	r3, r2
 8019fa6:	009b      	lsls	r3, r3, #2
 8019fa8:	4413      	add	r3, r2
 8019faa:	009b      	lsls	r3, r3, #2
 8019fac:	440b      	add	r3, r1
 8019fae:	3318      	adds	r3, #24
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	81fb      	strh	r3, [r7, #14]
    uint16_t mps = hpcd->IN_ep[epnum].maxpacket;
 8019fb4:	78fa      	ldrb	r2, [r7, #3]
 8019fb6:	6939      	ldr	r1, [r7, #16]
 8019fb8:	4613      	mov	r3, r2
 8019fba:	00db      	lsls	r3, r3, #3
 8019fbc:	4413      	add	r3, r2
 8019fbe:	009b      	lsls	r3, r3, #2
 8019fc0:	440b      	add	r3, r1
 8019fc2:	331c      	adds	r3, #28
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	81bb      	strh	r3, [r7, #12]
    static uint32_t vnd_dataIn_counter = 0; vnd_dataIn_counter++;
 8019fc8:	4b1b      	ldr	r3, [pc, #108]	@ (801a038 <USBD_CDCVND_DataIn+0x16c>)
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	3301      	adds	r3, #1
 8019fce:	4a1a      	ldr	r2, [pc, #104]	@ (801a038 <USBD_CDCVND_DataIn+0x16c>)
 8019fd0:	6013      	str	r3, [r2, #0]
    VND_LOGF("[VND_DataIn:ENTER] ep=%u tl=%u mps=%u busy=%u cnt=%lu\r\n", (unsigned)epnum, (unsigned)tl,(unsigned)mps,(unsigned)vnd_tx_busy,(unsigned long)vnd_dataIn_counter);
    if ((tl > 0U) && ((tl % mps) == 0U)) {
 8019fd2:	89fb      	ldrh	r3, [r7, #14]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d01a      	beq.n	801a00e <USBD_CDCVND_DataIn+0x142>
 8019fd8:	89fb      	ldrh	r3, [r7, #14]
 8019fda:	89ba      	ldrh	r2, [r7, #12]
 8019fdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8019fe0:	fb01 f202 	mul.w	r2, r1, r2
 8019fe4:	1a9b      	subs	r3, r3, r2
 8019fe6:	b29b      	uxth	r3, r3
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d110      	bne.n	801a00e <USBD_CDCVND_DataIn+0x142>
      /* Нужен ZLP для корректного завершения трансфера */
      VND_LOGF("[VND_DataIn] ep=%u total=%u -> SEND ZLP (phase1) cnt=%lu\r\n", (unsigned)epnum, (unsigned)tl, (unsigned long)vnd_dataIn_counter);
      pdev->ep_in[epnum].total_length = 0U;
 8019fec:	78fa      	ldrb	r2, [r7, #3]
 8019fee:	6879      	ldr	r1, [r7, #4]
 8019ff0:	4613      	mov	r3, r2
 8019ff2:	009b      	lsls	r3, r3, #2
 8019ff4:	4413      	add	r3, r2
 8019ff6:	009b      	lsls	r3, r3, #2
 8019ff8:	440b      	add	r3, r1
 8019ffa:	3318      	adds	r3, #24
 8019ffc:	2200      	movs	r2, #0
 8019ffe:	601a      	str	r2, [r3, #0]
      (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U); /* ZLP */
 801a000:	78f9      	ldrb	r1, [r7, #3]
 801a002:	2300      	movs	r3, #0
 801a004:	2200      	movs	r2, #0
 801a006:	6878      	ldr	r0, [r7, #4]
 801a008:	f000 fe9c 	bl	801ad44 <USBD_LL_Transmit>
 801a00c:	e00e      	b.n	801a02c <USBD_CDCVND_DataIn+0x160>
      /* НЕ вызываем TxCplt здесь — он будет вызван при следующем DataIn после ZLP */
    } else {
      /* Обычное завершение (либо tl=0 после ZLP, либо tl не кратно mps) */
      VND_LOGF("[VND_DataIn] ep=%u total=%u -> COMPLETE (TxCplt) cnt=%lu\r\n", (unsigned)epnum, (unsigned)tl, (unsigned long)vnd_dataIn_counter);
      pdev->ep_in[epnum].total_length = 0U; /* очистить остаток для надёжности */
 801a00e:	78fa      	ldrb	r2, [r7, #3]
 801a010:	6879      	ldr	r1, [r7, #4]
 801a012:	4613      	mov	r3, r2
 801a014:	009b      	lsls	r3, r3, #2
 801a016:	4413      	add	r3, r2
 801a018:	009b      	lsls	r3, r3, #2
 801a01a:	440b      	add	r3, r1
 801a01c:	3318      	adds	r3, #24
 801a01e:	2200      	movs	r2, #0
 801a020:	601a      	str	r2, [r3, #0]
      vnd_tx_busy = 0U;
 801a022:	4b06      	ldr	r3, [pc, #24]	@ (801a03c <USBD_CDCVND_DataIn+0x170>)
 801a024:	2200      	movs	r2, #0
 801a026:	701a      	strb	r2, [r3, #0]
      USBD_VND_TxCplt();
 801a028:	f7fd feb6 	bl	8017d98 <USBD_VND_TxCplt>
    }
  }
  return (uint8_t)USBD_OK;
 801a02c:	2300      	movs	r3, #0
}
 801a02e:	4618      	mov	r0, r3
 801a030:	3718      	adds	r7, #24
 801a032:	46bd      	mov	sp, r7
 801a034:	bd80      	pop	{r7, pc}
 801a036:	bf00      	nop
 801a038:	2401aac4 	.word	0x2401aac4
 801a03c:	2401aac0 	.word	0x2401aac0

0801a040 <USBD_CDCVND_DataOut>:

static uint8_t USBD_CDCVND_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a040:	b580      	push	{r7, lr}
 801a042:	b084      	sub	sp, #16
 801a044:	af00      	add	r7, sp, #0
 801a046:	6078      	str	r0, [r7, #4]
 801a048:	460b      	mov	r3, r1
 801a04a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801a052:	60fb      	str	r3, [r7, #12]
  if (!hcdc) return (uint8_t)USBD_FAIL;
 801a054:	68fb      	ldr	r3, [r7, #12]
 801a056:	2b00      	cmp	r3, #0
 801a058:	d101      	bne.n	801a05e <USBD_CDCVND_DataOut+0x1e>
 801a05a:	2303      	movs	r3, #3
 801a05c:	e058      	b.n	801a110 <USBD_CDCVND_DataOut+0xd0>
  if (epnum == (CDC_OUT_EP & 0x7FU)) {
 801a05e:	78fb      	ldrb	r3, [r7, #3]
 801a060:	2b01      	cmp	r3, #1
 801a062:	d120      	bne.n	801a0a6 <USBD_CDCVND_DataOut+0x66>
    hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801a064:	78fb      	ldrb	r3, [r7, #3]
 801a066:	4619      	mov	r1, r3
 801a068:	6878      	ldr	r0, [r7, #4]
 801a06a:	f000 fead 	bl	801adc8 <USBD_LL_GetRxDataSize>
 801a06e:	4602      	mov	r2, r0
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
    if (CDC_USR(pdev) && CDC_USR(pdev)->Receive) CDC_USR(pdev)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d046      	beq.n	801a10e <USBD_CDCVND_DataOut+0xce>
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801a086:	68db      	ldr	r3, [r3, #12]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d040      	beq.n	801a10e <USBD_CDCVND_DataOut+0xce>
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801a092:	68db      	ldr	r3, [r3, #12]
 801a094:	68fa      	ldr	r2, [r7, #12]
 801a096:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801a09a:	68fa      	ldr	r2, [r7, #12]
 801a09c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801a0a0:	4611      	mov	r1, r2
 801a0a2:	4798      	blx	r3
 801a0a4:	e033      	b.n	801a10e <USBD_CDCVND_DataOut+0xce>
  } else if (epnum == (VND_OUT_EP & 0x7FU)) {
 801a0a6:	78fb      	ldrb	r3, [r7, #3]
 801a0a8:	2b03      	cmp	r3, #3
 801a0aa:	d130      	bne.n	801a10e <USBD_CDCVND_DataOut+0xce>
    vnd_rx_len = USBD_LL_GetRxDataSize(pdev, epnum);
 801a0ac:	78fb      	ldrb	r3, [r7, #3]
 801a0ae:	4619      	mov	r1, r3
 801a0b0:	6878      	ldr	r0, [r7, #4]
 801a0b2:	f000 fe89 	bl	801adc8 <USBD_LL_GetRxDataSize>
 801a0b6:	4603      	mov	r3, r0
 801a0b8:	4a17      	ldr	r2, [pc, #92]	@ (801a118 <USBD_CDCVND_DataOut+0xd8>)
 801a0ba:	6013      	str	r3, [r2, #0]
      uint32_t inv_len  = (uint32_t)(((addr + vnd_rx_len + 31U) & ~((uintptr_t)31U)) - inv_addr);
      SCB_InvalidateDCache_by_Addr((uint32_t*)inv_addr, (int32_t)inv_len);
    }
#endif
    /* Мини-лог: подтверждаем приём однобайтовой команды */
    if (vnd_rx_len > 0) {
 801a0bc:	4b16      	ldr	r3, [pc, #88]	@ (801a118 <USBD_CDCVND_DataOut+0xd8>)
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d008      	beq.n	801a0d6 <USBD_CDCVND_DataOut+0x96>
      printf("[CMD] 0x%02X len=%lu\r\n", (unsigned)vnd_rx_buf[0], (unsigned long)vnd_rx_len);
 801a0c4:	4b15      	ldr	r3, [pc, #84]	@ (801a11c <USBD_CDCVND_DataOut+0xdc>)
 801a0c6:	781b      	ldrb	r3, [r3, #0]
 801a0c8:	4619      	mov	r1, r3
 801a0ca:	4b13      	ldr	r3, [pc, #76]	@ (801a118 <USBD_CDCVND_DataOut+0xd8>)
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	461a      	mov	r2, r3
 801a0d0:	4813      	ldr	r0, [pc, #76]	@ (801a120 <USBD_CDCVND_DataOut+0xe0>)
 801a0d2:	f000 ff95 	bl	801b000 <iprintf>
    }
    USBD_VND_DataReceived(vnd_rx_buf, vnd_rx_len);
 801a0d6:	4b10      	ldr	r3, [pc, #64]	@ (801a118 <USBD_CDCVND_DataOut+0xd8>)
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	4619      	mov	r1, r3
 801a0dc:	480f      	ldr	r0, [pc, #60]	@ (801a11c <USBD_CDCVND_DataOut+0xdc>)
 801a0de:	f7fe fc6f 	bl	80189c0 <USBD_VND_DataReceived>
    /* Небольшой memory barrier для надёжности перед реармом приёма */
    {
      USB_OTG_GlobalTypeDef *usb_reg = (USB_OTG_GlobalTypeDef *)USB1_OTG_HS_PERIPH_BASE;
 801a0e2:	4b10      	ldr	r3, [pc, #64]	@ (801a124 <USBD_CDCVND_DataOut+0xe4>)
 801a0e4:	60bb      	str	r3, [r7, #8]
      (void)usb_reg->GINTSTS; /* volatile read */
 801a0e6:	68bb      	ldr	r3, [r7, #8]
 801a0e8:	695b      	ldr	r3, [r3, #20]
    }
    /* Реармим */
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	7c1b      	ldrb	r3, [r3, #16]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d107      	bne.n	801a102 <USBD_CDCVND_DataOut+0xc2>
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_HS_MAX_PACKET_SIZE);
 801a0f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a0f6:	4a09      	ldr	r2, [pc, #36]	@ (801a11c <USBD_CDCVND_DataOut+0xdc>)
 801a0f8:	2103      	movs	r1, #3
 801a0fa:	6878      	ldr	r0, [r7, #4]
 801a0fc:	f000 fe43 	bl	801ad86 <USBD_LL_PrepareReceive>
 801a100:	e005      	b.n	801a10e <USBD_CDCVND_DataOut+0xce>
    else
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_FS_MAX_PACKET_SIZE);
 801a102:	2340      	movs	r3, #64	@ 0x40
 801a104:	4a05      	ldr	r2, [pc, #20]	@ (801a11c <USBD_CDCVND_DataOut+0xdc>)
 801a106:	2103      	movs	r1, #3
 801a108:	6878      	ldr	r0, [r7, #4]
 801a10a:	f000 fe3c 	bl	801ad86 <USBD_LL_PrepareReceive>
  }
  return (uint8_t)USBD_OK;
 801a10e:	2300      	movs	r3, #0
}
 801a110:	4618      	mov	r0, r3
 801a112:	3710      	adds	r7, #16
 801a114:	46bd      	mov	sp, r7
 801a116:	bd80      	pop	{r7, pc}
 801a118:	2401aabc 	.word	0x2401aabc
 801a11c:	2401a09c 	.word	0x2401a09c
 801a120:	0801d3f8 	.word	0x0801d3f8
 801a124:	40040000 	.word	0x40040000

0801a128 <USBD_CDCVND_EP0_RxReady>:

static uint8_t USBD_CDCVND_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801a128:	b580      	push	{r7, lr}
 801a12a:	b086      	sub	sp, #24
 801a12c:	af00      	add	r7, sp, #0
 801a12e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801a136:	613b      	str	r3, [r7, #16]
  if (!hcdc) return (uint8_t)USBD_FAIL;
 801a138:	693b      	ldr	r3, [r7, #16]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d101      	bne.n	801a142 <USBD_CDCVND_EP0_RxReady+0x1a>
 801a13e:	2303      	movs	r3, #3
 801a140:	e04d      	b.n	801a1de <USBD_CDCVND_EP0_RxReady+0xb6>
  if (hcdc->CmdOpCode != 0xFFU) {
 801a142:	693b      	ldr	r3, [r7, #16]
 801a144:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801a148:	2bff      	cmp	r3, #255	@ 0xff
 801a14a:	d047      	beq.n	801a1dc <USBD_CDCVND_EP0_RxReady+0xb4>
    uint8_t op = hcdc->CmdOpCode;
 801a14c:	693b      	ldr	r3, [r7, #16]
 801a14e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801a152:	73fb      	strb	r3, [r7, #15]
    uint8_t len = hcdc->CmdLength;
 801a154:	693b      	ldr	r3, [r7, #16]
 801a156:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801a15a:	73bb      	strb	r3, [r7, #14]
    /* Если это один из наших vendor control OUT запросов с полезной нагрузкой —
       формируем буфер [opcode | payload] и передаём в общий обработчик Vendor. */
    if (op == VND_CMD_SET_ASYNC_MODE ||
 801a15c:	7bfb      	ldrb	r3, [r7, #15]
 801a15e:	2b18      	cmp	r3, #24
 801a160:	d008      	beq.n	801a174 <USBD_CDCVND_EP0_RxReady+0x4c>
 801a162:	7bfb      	ldrb	r3, [r7, #15]
 801a164:	2b19      	cmp	r3, #25
 801a166:	d005      	beq.n	801a174 <USBD_CDCVND_EP0_RxReady+0x4c>
        op == VND_CMD_SET_CHMODE    ||
 801a168:	7bfb      	ldrb	r3, [r7, #15]
 801a16a:	2b13      	cmp	r3, #19
 801a16c:	d002      	beq.n	801a174 <USBD_CDCVND_EP0_RxReady+0x4c>
        op == VND_CMD_SET_FULL_MODE ||
 801a16e:	7bfb      	ldrb	r3, [r7, #15]
 801a170:	2b14      	cmp	r3, #20
 801a172:	d11b      	bne.n	801a1ac <USBD_CDCVND_EP0_RxReady+0x84>
        op == VND_CMD_SET_PROFILE) {
      uint32_t tot = (uint32_t)len + 1U;
 801a174:	7bbb      	ldrb	r3, [r7, #14]
 801a176:	3301      	adds	r3, #1
 801a178:	617b      	str	r3, [r7, #20]
      if (tot > sizeof(vnd_rx_buf)) tot = sizeof(vnd_rx_buf); /* страхуемся от выхода за границы */
 801a17a:	697b      	ldr	r3, [r7, #20]
 801a17c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a180:	d902      	bls.n	801a188 <USBD_CDCVND_EP0_RxReady+0x60>
 801a182:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a186:	617b      	str	r3, [r7, #20]
      vnd_rx_buf[0] = op;
 801a188:	4a17      	ldr	r2, [pc, #92]	@ (801a1e8 <USBD_CDCVND_EP0_RxReady+0xc0>)
 801a18a:	7bfb      	ldrb	r3, [r7, #15]
 801a18c:	7013      	strb	r3, [r2, #0]
      if (tot > 1U) {
 801a18e:	697b      	ldr	r3, [r7, #20]
 801a190:	2b01      	cmp	r3, #1
 801a192:	d906      	bls.n	801a1a2 <USBD_CDCVND_EP0_RxReady+0x7a>
        memcpy(&vnd_rx_buf[1], (uint8_t*)hcdc->data, (size_t)(tot - 1U)); // cast
 801a194:	6939      	ldr	r1, [r7, #16]
 801a196:	697b      	ldr	r3, [r7, #20]
 801a198:	3b01      	subs	r3, #1
 801a19a:	461a      	mov	r2, r3
 801a19c:	4813      	ldr	r0, [pc, #76]	@ (801a1ec <USBD_CDCVND_EP0_RxReady+0xc4>)
 801a19e:	f001 fa3c 	bl	801b61a <memcpy>
      }
      USBD_VND_DataReceived(vnd_rx_buf, tot);
 801a1a2:	6979      	ldr	r1, [r7, #20]
 801a1a4:	4810      	ldr	r0, [pc, #64]	@ (801a1e8 <USBD_CDCVND_EP0_RxReady+0xc0>)
 801a1a6:	f7fe fc0b 	bl	80189c0 <USBD_VND_DataReceived>
        op == VND_CMD_SET_PROFILE) {
 801a1aa:	e013      	b.n	801a1d4 <USBD_CDCVND_EP0_RxReady+0xac>
    } else {
      /* Иначе — это обычная CDC class команда */
      if (CDC_USR(pdev) && CDC_USR(pdev)->Control) {
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d00e      	beq.n	801a1d4 <USBD_CDCVND_EP0_RxReady+0xac>
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801a1bc:	689b      	ldr	r3, [r3, #8]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d008      	beq.n	801a1d4 <USBD_CDCVND_EP0_RxReady+0xac>
        CDC_USR(pdev)->Control(op, (uint8_t*)hcdc->data, len); // cast
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801a1c8:	689b      	ldr	r3, [r3, #8]
 801a1ca:	6939      	ldr	r1, [r7, #16]
 801a1cc:	7bba      	ldrb	r2, [r7, #14]
 801a1ce:	b292      	uxth	r2, r2
 801a1d0:	7bf8      	ldrb	r0, [r7, #15]
 801a1d2:	4798      	blx	r3
      }
    }
    hcdc->CmdOpCode = 0xFFU;
 801a1d4:	693b      	ldr	r3, [r7, #16]
 801a1d6:	22ff      	movs	r2, #255	@ 0xff
 801a1d8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }
  return (uint8_t)USBD_OK;
 801a1dc:	2300      	movs	r3, #0
}
 801a1de:	4618      	mov	r0, r3
 801a1e0:	3718      	adds	r7, #24
 801a1e2:	46bd      	mov	sp, r7
 801a1e4:	bd80      	pop	{r7, pc}
 801a1e6:	bf00      	nop
 801a1e8:	2401a09c 	.word	0x2401a09c
 801a1ec:	2401a09d 	.word	0x2401a09d

0801a1f0 <USBD_CDCVND_GetFSCfgDesc>:

static uint8_t *USBD_CDCVND_GetFSCfgDesc(uint16_t *length) { *length = sizeof(USBD_CDCVND_CfgFSDesc); return USBD_CDCVND_CfgFSDesc; }
 801a1f0:	b480      	push	{r7}
 801a1f2:	b083      	sub	sp, #12
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	6078      	str	r0, [r7, #4]
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	226b      	movs	r2, #107	@ 0x6b
 801a1fc:	801a      	strh	r2, [r3, #0]
 801a1fe:	4b03      	ldr	r3, [pc, #12]	@ (801a20c <USBD_CDCVND_GetFSCfgDesc+0x1c>)
 801a200:	4618      	mov	r0, r3
 801a202:	370c      	adds	r7, #12
 801a204:	46bd      	mov	sp, r7
 801a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a20a:	4770      	bx	lr
 801a20c:	240000d4 	.word	0x240000d4

0801a210 <USBD_CDCVND_GetHSCfgDesc>:
static uint8_t *USBD_CDCVND_GetHSCfgDesc(uint16_t *length) { *length = sizeof(USBD_CDCVND_CfgHSDesc); return USBD_CDCVND_CfgHSDesc; }
 801a210:	b480      	push	{r7}
 801a212:	b083      	sub	sp, #12
 801a214:	af00      	add	r7, sp, #0
 801a216:	6078      	str	r0, [r7, #4]
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	226b      	movs	r2, #107	@ 0x6b
 801a21c:	801a      	strh	r2, [r3, #0]
 801a21e:	4b03      	ldr	r3, [pc, #12]	@ (801a22c <USBD_CDCVND_GetHSCfgDesc+0x1c>)
 801a220:	4618      	mov	r0, r3
 801a222:	370c      	adds	r7, #12
 801a224:	46bd      	mov	sp, r7
 801a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a22a:	4770      	bx	lr
 801a22c:	24000068 	.word	0x24000068

0801a230 <USBD_CDCVND_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_CDCVND_GetOtherSpeedCfgDesc(uint16_t *length) { *length = sizeof(USBD_CDCVND_OtherSpeedCfgDesc); return USBD_CDCVND_OtherSpeedCfgDesc; }
 801a230:	b480      	push	{r7}
 801a232:	b083      	sub	sp, #12
 801a234:	af00      	add	r7, sp, #0
 801a236:	6078      	str	r0, [r7, #4]
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	226b      	movs	r2, #107	@ 0x6b
 801a23c:	801a      	strh	r2, [r3, #0]
 801a23e:	4b03      	ldr	r3, [pc, #12]	@ (801a24c <USBD_CDCVND_GetOtherSpeedCfgDesc+0x1c>)
 801a240:	4618      	mov	r0, r3
 801a242:	370c      	adds	r7, #12
 801a244:	46bd      	mov	sp, r7
 801a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a24a:	4770      	bx	lr
 801a24c:	24000140 	.word	0x24000140

0801a250 <USBD_CDCVND_GetDeviceQualifierDescriptor>:
static uint8_t *USBD_CDCVND_GetDeviceQualifierDescriptor(uint16_t *length) { *length = USB_LEN_DEV_QUALIFIER_DESC; return USBD_CDCVND_DeviceQualifierDesc; }
 801a250:	b480      	push	{r7}
 801a252:	b083      	sub	sp, #12
 801a254:	af00      	add	r7, sp, #0
 801a256:	6078      	str	r0, [r7, #4]
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	220a      	movs	r2, #10
 801a25c:	801a      	strh	r2, [r3, #0]
 801a25e:	4b03      	ldr	r3, [pc, #12]	@ (801a26c <USBD_CDCVND_GetDeviceQualifierDescriptor+0x1c>)
 801a260:	4618      	mov	r0, r3
 801a262:	370c      	adds	r7, #12
 801a264:	46bd      	mov	sp, r7
 801a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a26a:	4770      	bx	lr
 801a26c:	2400005c 	.word	0x2400005c

0801a270 <__NVIC_SystemReset>:
{
 801a270:	b480      	push	{r7}
 801a272:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801a274:	f3bf 8f4f 	dsb	sy
}
 801a278:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801a27a:	4b06      	ldr	r3, [pc, #24]	@ (801a294 <__NVIC_SystemReset+0x24>)
 801a27c:	68db      	ldr	r3, [r3, #12]
 801a27e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801a282:	4904      	ldr	r1, [pc, #16]	@ (801a294 <__NVIC_SystemReset+0x24>)
 801a284:	4b04      	ldr	r3, [pc, #16]	@ (801a298 <__NVIC_SystemReset+0x28>)
 801a286:	4313      	orrs	r3, r2
 801a288:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801a28a:	f3bf 8f4f 	dsb	sy
}
 801a28e:	bf00      	nop
    __NOP();
 801a290:	bf00      	nop
 801a292:	e7fd      	b.n	801a290 <__NVIC_SystemReset+0x20>
 801a294:	e000ed00 	.word	0xe000ed00
 801a298:	05fa0004 	.word	0x05fa0004

0801a29c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801a2a0:	2200      	movs	r2, #0
 801a2a2:	4906      	ldr	r1, [pc, #24]	@ (801a2bc <CDC_Init_HS+0x20>)
 801a2a4:	4806      	ldr	r0, [pc, #24]	@ (801a2c0 <CDC_Init_HS+0x24>)
 801a2a6:	f7f9 fcba 	bl	8013c1e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801a2aa:	4906      	ldr	r1, [pc, #24]	@ (801a2c4 <CDC_Init_HS+0x28>)
 801a2ac:	4804      	ldr	r0, [pc, #16]	@ (801a2c0 <CDC_Init_HS+0x24>)
 801a2ae:	f7f9 fcd8 	bl	8013c62 <USBD_CDC_SetRxBuffer>
  usb_stream_init(); // инициализация протокол/стрим
 801a2b2:	f7ea fa0b 	bl	80046cc <usb_stream_init>
  return (USBD_OK);
 801a2b6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	bd80      	pop	{r7, pc}
 801a2bc:	2401b2c8 	.word	0x2401b2c8
 801a2c0:	2400d8c8 	.word	0x2400d8c8
 801a2c4:	2401aac8 	.word	0x2401aac8

0801a2c8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801a2c8:	b480      	push	{r7}
 801a2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801a2cc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801a2ce:	4618      	mov	r0, r3
 801a2d0:	46bd      	mov	sp, r7
 801a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d6:	4770      	bx	lr

0801a2d8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a2d8:	b480      	push	{r7}
 801a2da:	b083      	sub	sp, #12
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	4603      	mov	r3, r0
 801a2e0:	6039      	str	r1, [r7, #0]
 801a2e2:	71fb      	strb	r3, [r7, #7]
 801a2e4:	4613      	mov	r3, r2
 801a2e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801a2e8:	79fb      	ldrb	r3, [r7, #7]
 801a2ea:	2b23      	cmp	r3, #35	@ 0x23
 801a2ec:	d84a      	bhi.n	801a384 <CDC_Control_HS+0xac>
 801a2ee:	a201      	add	r2, pc, #4	@ (adr r2, 801a2f4 <CDC_Control_HS+0x1c>)
 801a2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2f4:	0801a385 	.word	0x0801a385
 801a2f8:	0801a385 	.word	0x0801a385
 801a2fc:	0801a385 	.word	0x0801a385
 801a300:	0801a385 	.word	0x0801a385
 801a304:	0801a385 	.word	0x0801a385
 801a308:	0801a385 	.word	0x0801a385
 801a30c:	0801a385 	.word	0x0801a385
 801a310:	0801a385 	.word	0x0801a385
 801a314:	0801a385 	.word	0x0801a385
 801a318:	0801a385 	.word	0x0801a385
 801a31c:	0801a385 	.word	0x0801a385
 801a320:	0801a385 	.word	0x0801a385
 801a324:	0801a385 	.word	0x0801a385
 801a328:	0801a385 	.word	0x0801a385
 801a32c:	0801a385 	.word	0x0801a385
 801a330:	0801a385 	.word	0x0801a385
 801a334:	0801a385 	.word	0x0801a385
 801a338:	0801a385 	.word	0x0801a385
 801a33c:	0801a385 	.word	0x0801a385
 801a340:	0801a385 	.word	0x0801a385
 801a344:	0801a385 	.word	0x0801a385
 801a348:	0801a385 	.word	0x0801a385
 801a34c:	0801a385 	.word	0x0801a385
 801a350:	0801a385 	.word	0x0801a385
 801a354:	0801a385 	.word	0x0801a385
 801a358:	0801a385 	.word	0x0801a385
 801a35c:	0801a385 	.word	0x0801a385
 801a360:	0801a385 	.word	0x0801a385
 801a364:	0801a385 	.word	0x0801a385
 801a368:	0801a385 	.word	0x0801a385
 801a36c:	0801a385 	.word	0x0801a385
 801a370:	0801a385 	.word	0x0801a385
 801a374:	0801a385 	.word	0x0801a385
 801a378:	0801a385 	.word	0x0801a385
 801a37c:	0801a385 	.word	0x0801a385
 801a380:	0801a385 	.word	0x0801a385
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a384:	bf00      	nop
  }

  return (USBD_OK);
 801a386:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801a388:	4618      	mov	r0, r3
 801a38a:	370c      	adds	r7, #12
 801a38c:	46bd      	mov	sp, r7
 801a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a392:	4770      	bx	lr

0801a394 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b084      	sub	sp, #16
 801a398:	af00      	add	r7, sp, #0
 801a39a:	6078      	str	r0, [r7, #4]
 801a39c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  // Проверка текстовой команды RESET
  if (*Len >= 5 && Buf[0] == 'R' && Buf[1] == 'E' && Buf[2] == 'S' && Buf[3] == 'E' && Buf[4] == 'T') {
 801a39e:	683b      	ldr	r3, [r7, #0]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	2b04      	cmp	r3, #4
 801a3a4:	d91f      	bls.n	801a3e6 <CDC_Receive_HS+0x52>
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	781b      	ldrb	r3, [r3, #0]
 801a3aa:	2b52      	cmp	r3, #82	@ 0x52
 801a3ac:	d11b      	bne.n	801a3e6 <CDC_Receive_HS+0x52>
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	3301      	adds	r3, #1
 801a3b2:	781b      	ldrb	r3, [r3, #0]
 801a3b4:	2b45      	cmp	r3, #69	@ 0x45
 801a3b6:	d116      	bne.n	801a3e6 <CDC_Receive_HS+0x52>
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	3302      	adds	r3, #2
 801a3bc:	781b      	ldrb	r3, [r3, #0]
 801a3be:	2b53      	cmp	r3, #83	@ 0x53
 801a3c0:	d111      	bne.n	801a3e6 <CDC_Receive_HS+0x52>
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	3303      	adds	r3, #3
 801a3c6:	781b      	ldrb	r3, [r3, #0]
 801a3c8:	2b45      	cmp	r3, #69	@ 0x45
 801a3ca:	d10c      	bne.n	801a3e6 <CDC_Receive_HS+0x52>
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	3304      	adds	r3, #4
 801a3d0:	781b      	ldrb	r3, [r3, #0]
 801a3d2:	2b54      	cmp	r3, #84	@ 0x54
 801a3d4:	d107      	bne.n	801a3e6 <CDC_Receive_HS+0x52>
    printf("[CDC] RESET command received - performing software reset\r\n");
 801a3d6:	4822      	ldr	r0, [pc, #136]	@ (801a460 <CDC_Receive_HS+0xcc>)
 801a3d8:	f000 fe7a 	bl	801b0d0 <puts>
    HAL_Delay(100); // Дать время на отправку сообщения
 801a3dc:	2064      	movs	r0, #100	@ 0x64
 801a3de:	f7ea fdd1 	bl	8004f84 <HAL_Delay>
    NVIC_SystemReset(); // Программный сброс
 801a3e2:	f7ff ff45 	bl	801a270 <__NVIC_SystemReset>
  }
  
  // Проксируем команды протокола в Vendor и отключаем CDC-протокол для этих команд,
  // чтобы не запускалась параллельная передача кадров по CDC.
  uint8_t vendor_forwarded = 0;
 801a3e6:	2300      	movs	r3, #0
 801a3e8:	73fb      	strb	r3, [r7, #15]
  if (*Len >= 1) {
 801a3ea:	683b      	ldr	r3, [r7, #0]
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d021      	beq.n	801a436 <CDC_Receive_HS+0xa2>
    uint8_t cmd = Buf[0];
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	781b      	ldrb	r3, [r3, #0]
 801a3f6:	73bb      	strb	r3, [r7, #14]
    switch (cmd) {
 801a3f8:	7bbb      	ldrb	r3, [r7, #14]
 801a3fa:	3b13      	subs	r3, #19
 801a3fc:	2b1d      	cmp	r3, #29
 801a3fe:	bf8c      	ite	hi
 801a400:	2201      	movhi	r2, #1
 801a402:	2200      	movls	r2, #0
 801a404:	b2d2      	uxtb	r2, r2
 801a406:	2a00      	cmp	r2, #0
 801a408:	d114      	bne.n	801a434 <CDC_Receive_HS+0xa0>
 801a40a:	4a16      	ldr	r2, [pc, #88]	@ (801a464 <CDC_Receive_HS+0xd0>)
 801a40c:	fa22 f303 	lsr.w	r3, r2, r3
 801a410:	f003 0301 	and.w	r3, r3, #1
 801a414:	2b00      	cmp	r3, #0
 801a416:	bf14      	ite	ne
 801a418:	2301      	movne	r3, #1
 801a41a:	2300      	moveq	r3, #0
 801a41c:	b2db      	uxtb	r3, r3
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d008      	beq.n	801a434 <CDC_Receive_HS+0xa0>
      case 0x19u: // VND_CMD_SET_CHMODE
      case 0x15u: // VND_CMD_SET_ROI_US
      case 0x20u: // VND_CMD_START_STREAM
      case 0x21u: // VND_CMD_STOP_STREAM
      case 0x30u: // VND_CMD_GET_STATUS
        USBD_VND_DataReceived(Buf, *Len);
 801a422:	683b      	ldr	r3, [r7, #0]
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	4619      	mov	r1, r3
 801a428:	6878      	ldr	r0, [r7, #4]
 801a42a:	f7fe fac9 	bl	80189c0 <USBD_VND_DataReceived>
        vendor_forwarded = 1;
 801a42e:	2301      	movs	r3, #1
 801a430:	73fb      	strb	r3, [r7, #15]
        break;
 801a432:	e000      	b.n	801a436 <CDC_Receive_HS+0xa2>
      default:
        break;
 801a434:	bf00      	nop
    }
  }
  // В CDC-протокол НЕ передаём пакеты, которые были распознаны как Vendor команды
  if (!vendor_forwarded) {
 801a436:	7bfb      	ldrb	r3, [r7, #15]
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d105      	bne.n	801a448 <CDC_Receive_HS+0xb4>
    usb_stream_on_rx_bytes(Buf, *Len);
 801a43c:	683b      	ldr	r3, [r7, #0]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	4619      	mov	r1, r3
 801a442:	6878      	ldr	r0, [r7, #4]
 801a444:	f7e9 ffea 	bl	800441c <usb_stream_on_rx_bytes>
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801a448:	6879      	ldr	r1, [r7, #4]
 801a44a:	4807      	ldr	r0, [pc, #28]	@ (801a468 <CDC_Receive_HS+0xd4>)
 801a44c:	f7f9 fc09 	bl	8013c62 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801a450:	4805      	ldr	r0, [pc, #20]	@ (801a468 <CDC_Receive_HS+0xd4>)
 801a452:	f7f9 fc63 	bl	8013d1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a456:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801a458:	4618      	mov	r0, r3
 801a45a:	3710      	adds	r7, #16
 801a45c:	46bd      	mov	sp, r7
 801a45e:	bd80      	pop	{r7, pc}
 801a460:	0801d410 	.word	0x0801d410
 801a464:	20006067 	.word	0x20006067
 801a468:	2400d8c8 	.word	0x2400d8c8

0801a46c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801a46c:	b580      	push	{r7, lr}
 801a46e:	b084      	sub	sp, #16
 801a470:	af00      	add	r7, sp, #0
 801a472:	6078      	str	r0, [r7, #4]
 801a474:	460b      	mov	r3, r1
 801a476:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801a478:	2300      	movs	r3, #0
 801a47a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801a47c:	4b0d      	ldr	r3, [pc, #52]	@ (801a4b4 <CDC_Transmit_HS+0x48>)
 801a47e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801a482:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801a484:	68bb      	ldr	r3, [r7, #8]
 801a486:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d001      	beq.n	801a492 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801a48e:	2301      	movs	r3, #1
 801a490:	e00b      	b.n	801a4aa <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801a492:	887b      	ldrh	r3, [r7, #2]
 801a494:	461a      	mov	r2, r3
 801a496:	6879      	ldr	r1, [r7, #4]
 801a498:	4806      	ldr	r0, [pc, #24]	@ (801a4b4 <CDC_Transmit_HS+0x48>)
 801a49a:	f7f9 fbc0 	bl	8013c1e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801a49e:	4805      	ldr	r0, [pc, #20]	@ (801a4b4 <CDC_Transmit_HS+0x48>)
 801a4a0:	f7f9 fbfc 	bl	8013c9c <USBD_CDC_TransmitPacket>
 801a4a4:	4603      	mov	r3, r0
 801a4a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801a4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	3710      	adds	r7, #16
 801a4ae:	46bd      	mov	sp, r7
 801a4b0:	bd80      	pop	{r7, pc}
 801a4b2:	bf00      	nop
 801a4b4:	2400d8c8 	.word	0x2400d8c8

0801a4b8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a4b8:	b480      	push	{r7}
 801a4ba:	b087      	sub	sp, #28
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	60f8      	str	r0, [r7, #12]
 801a4c0:	60b9      	str	r1, [r7, #8]
 801a4c2:	4613      	mov	r3, r2
 801a4c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a4c6:	2300      	movs	r3, #0
 801a4c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801a4ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	371c      	adds	r7, #28
 801a4d2:	46bd      	mov	sp, r7
 801a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d8:	4770      	bx	lr
	...

0801a4dc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a4dc:	b480      	push	{r7}
 801a4de:	b083      	sub	sp, #12
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	4603      	mov	r3, r0
 801a4e4:	6039      	str	r1, [r7, #0]
 801a4e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801a4e8:	683b      	ldr	r3, [r7, #0]
 801a4ea:	2212      	movs	r2, #18
 801a4ec:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801a4ee:	4b03      	ldr	r3, [pc, #12]	@ (801a4fc <USBD_HS_DeviceDescriptor+0x20>)
}
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	370c      	adds	r7, #12
 801a4f4:	46bd      	mov	sp, r7
 801a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4fa:	4770      	bx	lr
 801a4fc:	24000218 	.word	0x24000218

0801a500 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a500:	b480      	push	{r7}
 801a502:	b083      	sub	sp, #12
 801a504:	af00      	add	r7, sp, #0
 801a506:	4603      	mov	r3, r0
 801a508:	6039      	str	r1, [r7, #0]
 801a50a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a50c:	683b      	ldr	r3, [r7, #0]
 801a50e:	2204      	movs	r2, #4
 801a510:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a512:	4b03      	ldr	r3, [pc, #12]	@ (801a520 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801a514:	4618      	mov	r0, r3
 801a516:	370c      	adds	r7, #12
 801a518:	46bd      	mov	sp, r7
 801a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a51e:	4770      	bx	lr
 801a520:	2400022c 	.word	0x2400022c

0801a524 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a524:	b580      	push	{r7, lr}
 801a526:	b082      	sub	sp, #8
 801a528:	af00      	add	r7, sp, #0
 801a52a:	4603      	mov	r3, r0
 801a52c:	6039      	str	r1, [r7, #0]
 801a52e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a530:	79fb      	ldrb	r3, [r7, #7]
 801a532:	2b00      	cmp	r3, #0
 801a534:	d105      	bne.n	801a542 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a536:	683a      	ldr	r2, [r7, #0]
 801a538:	4907      	ldr	r1, [pc, #28]	@ (801a558 <USBD_HS_ProductStrDescriptor+0x34>)
 801a53a:	4808      	ldr	r0, [pc, #32]	@ (801a55c <USBD_HS_ProductStrDescriptor+0x38>)
 801a53c:	f7fa fe10 	bl	8015160 <USBD_GetString>
 801a540:	e004      	b.n	801a54c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a542:	683a      	ldr	r2, [r7, #0]
 801a544:	4904      	ldr	r1, [pc, #16]	@ (801a558 <USBD_HS_ProductStrDescriptor+0x34>)
 801a546:	4805      	ldr	r0, [pc, #20]	@ (801a55c <USBD_HS_ProductStrDescriptor+0x38>)
 801a548:	f7fa fe0a 	bl	8015160 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a54c:	4b02      	ldr	r3, [pc, #8]	@ (801a558 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801a54e:	4618      	mov	r0, r3
 801a550:	3708      	adds	r7, #8
 801a552:	46bd      	mov	sp, r7
 801a554:	bd80      	pop	{r7, pc}
 801a556:	bf00      	nop
 801a558:	2401bac8 	.word	0x2401bac8
 801a55c:	0801d44c 	.word	0x0801d44c

0801a560 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a560:	b580      	push	{r7, lr}
 801a562:	b082      	sub	sp, #8
 801a564:	af00      	add	r7, sp, #0
 801a566:	4603      	mov	r3, r0
 801a568:	6039      	str	r1, [r7, #0]
 801a56a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a56c:	683a      	ldr	r2, [r7, #0]
 801a56e:	4904      	ldr	r1, [pc, #16]	@ (801a580 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801a570:	4804      	ldr	r0, [pc, #16]	@ (801a584 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801a572:	f7fa fdf5 	bl	8015160 <USBD_GetString>
  return USBD_StrDesc;
 801a576:	4b02      	ldr	r3, [pc, #8]	@ (801a580 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801a578:	4618      	mov	r0, r3
 801a57a:	3708      	adds	r7, #8
 801a57c:	46bd      	mov	sp, r7
 801a57e:	bd80      	pop	{r7, pc}
 801a580:	2401bac8 	.word	0x2401bac8
 801a584:	0801d458 	.word	0x0801d458

0801a588 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	b082      	sub	sp, #8
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	4603      	mov	r3, r0
 801a590:	6039      	str	r1, [r7, #0]
 801a592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a594:	683b      	ldr	r3, [r7, #0]
 801a596:	221a      	movs	r2, #26
 801a598:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a59a:	f000 f843 	bl	801a624 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801a59e:	4b02      	ldr	r3, [pc, #8]	@ (801a5a8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	3708      	adds	r7, #8
 801a5a4:	46bd      	mov	sp, r7
 801a5a6:	bd80      	pop	{r7, pc}
 801a5a8:	24000230 	.word	0x24000230

0801a5ac <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5ac:	b580      	push	{r7, lr}
 801a5ae:	b082      	sub	sp, #8
 801a5b0:	af00      	add	r7, sp, #0
 801a5b2:	4603      	mov	r3, r0
 801a5b4:	6039      	str	r1, [r7, #0]
 801a5b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a5b8:	79fb      	ldrb	r3, [r7, #7]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d105      	bne.n	801a5ca <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a5be:	683a      	ldr	r2, [r7, #0]
 801a5c0:	4907      	ldr	r1, [pc, #28]	@ (801a5e0 <USBD_HS_ConfigStrDescriptor+0x34>)
 801a5c2:	4808      	ldr	r0, [pc, #32]	@ (801a5e4 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a5c4:	f7fa fdcc 	bl	8015160 <USBD_GetString>
 801a5c8:	e004      	b.n	801a5d4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a5ca:	683a      	ldr	r2, [r7, #0]
 801a5cc:	4904      	ldr	r1, [pc, #16]	@ (801a5e0 <USBD_HS_ConfigStrDescriptor+0x34>)
 801a5ce:	4805      	ldr	r0, [pc, #20]	@ (801a5e4 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a5d0:	f7fa fdc6 	bl	8015160 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a5d4:	4b02      	ldr	r3, [pc, #8]	@ (801a5e0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	3708      	adds	r7, #8
 801a5da:	46bd      	mov	sp, r7
 801a5dc:	bd80      	pop	{r7, pc}
 801a5de:	bf00      	nop
 801a5e0:	2401bac8 	.word	0x2401bac8
 801a5e4:	0801d464 	.word	0x0801d464

0801a5e8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5e8:	b580      	push	{r7, lr}
 801a5ea:	b082      	sub	sp, #8
 801a5ec:	af00      	add	r7, sp, #0
 801a5ee:	4603      	mov	r3, r0
 801a5f0:	6039      	str	r1, [r7, #0]
 801a5f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a5f4:	79fb      	ldrb	r3, [r7, #7]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d105      	bne.n	801a606 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a5fa:	683a      	ldr	r2, [r7, #0]
 801a5fc:	4907      	ldr	r1, [pc, #28]	@ (801a61c <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a5fe:	4808      	ldr	r0, [pc, #32]	@ (801a620 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a600:	f7fa fdae 	bl	8015160 <USBD_GetString>
 801a604:	e004      	b.n	801a610 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a606:	683a      	ldr	r2, [r7, #0]
 801a608:	4904      	ldr	r1, [pc, #16]	@ (801a61c <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a60a:	4805      	ldr	r0, [pc, #20]	@ (801a620 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a60c:	f7fa fda8 	bl	8015160 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a610:	4b02      	ldr	r3, [pc, #8]	@ (801a61c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801a612:	4618      	mov	r0, r3
 801a614:	3708      	adds	r7, #8
 801a616:	46bd      	mov	sp, r7
 801a618:	bd80      	pop	{r7, pc}
 801a61a:	bf00      	nop
 801a61c:	2401bac8 	.word	0x2401bac8
 801a620:	0801d478 	.word	0x0801d478

0801a624 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a624:	b580      	push	{r7, lr}
 801a626:	b084      	sub	sp, #16
 801a628:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a62a:	4b0f      	ldr	r3, [pc, #60]	@ (801a668 <Get_SerialNum+0x44>)
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a630:	4b0e      	ldr	r3, [pc, #56]	@ (801a66c <Get_SerialNum+0x48>)
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a636:	4b0e      	ldr	r3, [pc, #56]	@ (801a670 <Get_SerialNum+0x4c>)
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a63c:	68fa      	ldr	r2, [r7, #12]
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	4413      	add	r3, r2
 801a642:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	2b00      	cmp	r3, #0
 801a648:	d009      	beq.n	801a65e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a64a:	2208      	movs	r2, #8
 801a64c:	4909      	ldr	r1, [pc, #36]	@ (801a674 <Get_SerialNum+0x50>)
 801a64e:	68f8      	ldr	r0, [r7, #12]
 801a650:	f000 f814 	bl	801a67c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a654:	2204      	movs	r2, #4
 801a656:	4908      	ldr	r1, [pc, #32]	@ (801a678 <Get_SerialNum+0x54>)
 801a658:	68b8      	ldr	r0, [r7, #8]
 801a65a:	f000 f80f 	bl	801a67c <IntToUnicode>
  }
}
 801a65e:	bf00      	nop
 801a660:	3710      	adds	r7, #16
 801a662:	46bd      	mov	sp, r7
 801a664:	bd80      	pop	{r7, pc}
 801a666:	bf00      	nop
 801a668:	1ff1e800 	.word	0x1ff1e800
 801a66c:	1ff1e804 	.word	0x1ff1e804
 801a670:	1ff1e808 	.word	0x1ff1e808
 801a674:	24000232 	.word	0x24000232
 801a678:	24000242 	.word	0x24000242

0801a67c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a67c:	b480      	push	{r7}
 801a67e:	b087      	sub	sp, #28
 801a680:	af00      	add	r7, sp, #0
 801a682:	60f8      	str	r0, [r7, #12]
 801a684:	60b9      	str	r1, [r7, #8]
 801a686:	4613      	mov	r3, r2
 801a688:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a68a:	2300      	movs	r3, #0
 801a68c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a68e:	2300      	movs	r3, #0
 801a690:	75fb      	strb	r3, [r7, #23]
 801a692:	e027      	b.n	801a6e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a694:	68fb      	ldr	r3, [r7, #12]
 801a696:	0f1b      	lsrs	r3, r3, #28
 801a698:	2b09      	cmp	r3, #9
 801a69a:	d80b      	bhi.n	801a6b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	0f1b      	lsrs	r3, r3, #28
 801a6a0:	b2da      	uxtb	r2, r3
 801a6a2:	7dfb      	ldrb	r3, [r7, #23]
 801a6a4:	005b      	lsls	r3, r3, #1
 801a6a6:	4619      	mov	r1, r3
 801a6a8:	68bb      	ldr	r3, [r7, #8]
 801a6aa:	440b      	add	r3, r1
 801a6ac:	3230      	adds	r2, #48	@ 0x30
 801a6ae:	b2d2      	uxtb	r2, r2
 801a6b0:	701a      	strb	r2, [r3, #0]
 801a6b2:	e00a      	b.n	801a6ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a6b4:	68fb      	ldr	r3, [r7, #12]
 801a6b6:	0f1b      	lsrs	r3, r3, #28
 801a6b8:	b2da      	uxtb	r2, r3
 801a6ba:	7dfb      	ldrb	r3, [r7, #23]
 801a6bc:	005b      	lsls	r3, r3, #1
 801a6be:	4619      	mov	r1, r3
 801a6c0:	68bb      	ldr	r3, [r7, #8]
 801a6c2:	440b      	add	r3, r1
 801a6c4:	3237      	adds	r2, #55	@ 0x37
 801a6c6:	b2d2      	uxtb	r2, r2
 801a6c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	011b      	lsls	r3, r3, #4
 801a6ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a6d0:	7dfb      	ldrb	r3, [r7, #23]
 801a6d2:	005b      	lsls	r3, r3, #1
 801a6d4:	3301      	adds	r3, #1
 801a6d6:	68ba      	ldr	r2, [r7, #8]
 801a6d8:	4413      	add	r3, r2
 801a6da:	2200      	movs	r2, #0
 801a6dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a6de:	7dfb      	ldrb	r3, [r7, #23]
 801a6e0:	3301      	adds	r3, #1
 801a6e2:	75fb      	strb	r3, [r7, #23]
 801a6e4:	7dfa      	ldrb	r2, [r7, #23]
 801a6e6:	79fb      	ldrb	r3, [r7, #7]
 801a6e8:	429a      	cmp	r2, r3
 801a6ea:	d3d3      	bcc.n	801a694 <IntToUnicode+0x18>
  }
}
 801a6ec:	bf00      	nop
 801a6ee:	bf00      	nop
 801a6f0:	371c      	adds	r7, #28
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6f8:	4770      	bx	lr

0801a6fa <USBD_Desc_GetVID>:
/* USER CODE BEGIN 1 */
/* Simple accessors for boot-time diagnostics */
uint16_t USBD_Desc_GetVID(void) { return (uint16_t)USBD_VID; }
 801a6fa:	b480      	push	{r7}
 801a6fc:	af00      	add	r7, sp, #0
 801a6fe:	f64c 23fe 	movw	r3, #51966	@ 0xcafe
 801a702:	4618      	mov	r0, r3
 801a704:	46bd      	mov	sp, r7
 801a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a70a:	4770      	bx	lr

0801a70c <USBD_Desc_GetPID>:
uint16_t USBD_Desc_GetPID(void) { return (uint16_t)USBD_PID_HS; }
 801a70c:	b480      	push	{r7}
 801a70e:	af00      	add	r7, sp, #0
 801a710:	f244 0301 	movw	r3, #16385	@ 0x4001
 801a714:	4618      	mov	r0, r3
 801a716:	46bd      	mov	sp, r7
 801a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a71c:	4770      	bx	lr

0801a71e <USBD_Desc_GetLangID>:
uint16_t USBD_Desc_GetLangID(void) { return (uint16_t)USBD_LANGID_STRING; }
 801a71e:	b480      	push	{r7}
 801a720:	af00      	add	r7, sp, #0
 801a722:	f240 4309 	movw	r3, #1033	@ 0x409
 801a726:	4618      	mov	r0, r3
 801a728:	46bd      	mov	sp, r7
 801a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a72e:	4770      	bx	lr

0801a730 <USBD_Desc_GetManufacturer>:
const char* USBD_Desc_GetManufacturer(void) { return USBD_MANUFACTURER_STRING; }
 801a730:	b480      	push	{r7}
 801a732:	af00      	add	r7, sp, #0
 801a734:	4b02      	ldr	r3, [pc, #8]	@ (801a740 <USBD_Desc_GetManufacturer+0x10>)
 801a736:	4618      	mov	r0, r3
 801a738:	46bd      	mov	sp, r7
 801a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a73e:	4770      	bx	lr
 801a740:	0801d458 	.word	0x0801d458

0801a744 <USBD_Desc_GetProduct>:
const char* USBD_Desc_GetProduct(void) { return USBD_PRODUCT_STRING_HS; }
 801a744:	b480      	push	{r7}
 801a746:	af00      	add	r7, sp, #0
 801a748:	4b02      	ldr	r3, [pc, #8]	@ (801a754 <USBD_Desc_GetProduct+0x10>)
 801a74a:	4618      	mov	r0, r3
 801a74c:	46bd      	mov	sp, r7
 801a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a752:	4770      	bx	lr
 801a754:	0801d44c 	.word	0x0801d44c

0801a758 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a758:	b580      	push	{r7, lr}
 801a75a:	b0b8      	sub	sp, #224	@ 0xe0
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a760:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801a764:	22b8      	movs	r2, #184	@ 0xb8
 801a766:	2100      	movs	r1, #0
 801a768:	4618      	mov	r0, r3
 801a76a:	f000 feb5 	bl	801b4d8 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	4a2e      	ldr	r2, [pc, #184]	@ (801a82c <HAL_PCD_MspInit+0xd4>)
 801a774:	4293      	cmp	r3, r2
 801a776:	d154      	bne.n	801a822 <HAL_PCD_MspInit+0xca>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */
  /* Настройка GPIO DM/DP (PA11/PA12) для встроенного FS PHY */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a778:	4b2d      	ldr	r3, [pc, #180]	@ (801a830 <HAL_PCD_MspInit+0xd8>)
 801a77a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a77e:	4a2c      	ldr	r2, [pc, #176]	@ (801a830 <HAL_PCD_MspInit+0xd8>)
 801a780:	f043 0301 	orr.w	r3, r3, #1
 801a784:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801a788:	4b29      	ldr	r3, [pc, #164]	@ (801a830 <HAL_PCD_MspInit+0xd8>)
 801a78a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a78e:	f003 0301 	and.w	r3, r3, #1
 801a792:	613b      	str	r3, [r7, #16]
 801a794:	693b      	ldr	r3, [r7, #16]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a796:	f107 0314 	add.w	r3, r7, #20
 801a79a:	2200      	movs	r2, #0
 801a79c:	601a      	str	r2, [r3, #0]
 801a79e:	605a      	str	r2, [r3, #4]
 801a7a0:	609a      	str	r2, [r3, #8]
 801a7a2:	60da      	str	r2, [r3, #12]
 801a7a4:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12; // DM / DP
 801a7a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801a7aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a7ac:	2302      	movs	r3, #2
 801a7ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a7b4:	2303      	movs	r3, #3
 801a7b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 801a7b8:	230a      	movs	r3, #10
 801a7ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a7bc:	f107 0314 	add.w	r3, r7, #20
 801a7c0:	4619      	mov	r1, r3
 801a7c2:	481c      	ldr	r0, [pc, #112]	@ (801a834 <HAL_PCD_MspInit+0xdc>)
 801a7c4:	f7ef fae6 	bl	8009d94 <HAL_GPIO_Init>
  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a7c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801a7cc:	f04f 0300 	mov.w	r3, #0
 801a7d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801a7d4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 801a7d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a7dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	f7f1 ff99 	bl	800c718 <HAL_RCCEx_PeriphCLKConfig>
 801a7e6:	4603      	mov	r3, r0
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d001      	beq.n	801a7f0 <HAL_PCD_MspInit+0x98>
    {
      Error_Handler();
 801a7ec:	f7e8 fb56 	bl	8002e9c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a7f0:	f7f0 ffb2 	bl	800b758 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801a7f4:	4b0e      	ldr	r3, [pc, #56]	@ (801a830 <HAL_PCD_MspInit+0xd8>)
 801a7f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a7fa:	4a0d      	ldr	r2, [pc, #52]	@ (801a830 <HAL_PCD_MspInit+0xd8>)
 801a7fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801a800:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801a804:	4b0a      	ldr	r3, [pc, #40]	@ (801a830 <HAL_PCD_MspInit+0xd8>)
 801a806:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a80a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a80e:	60fb      	str	r3, [r7, #12]
 801a810:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 801a812:	2200      	movs	r2, #0
 801a814:	2105      	movs	r1, #5
 801a816:	204d      	movs	r0, #77	@ 0x4d
 801a818:	f7ec fcb5 	bl	8007186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801a81c:	204d      	movs	r0, #77	@ 0x4d
 801a81e:	f7ec fccc 	bl	80071ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */
    // (Опционально) включить VBUS sensing, если линия VBUS заведена на соответствующий пин:
    // MODIFY_REG(USB_OTG_HS->GCCFG, 0, USB_OTG_GCCFG_VBDEN);
  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801a822:	bf00      	nop
 801a824:	37e0      	adds	r7, #224	@ 0xe0
 801a826:	46bd      	mov	sp, r7
 801a828:	bd80      	pop	{r7, pc}
 801a82a:	bf00      	nop
 801a82c:	40040000 	.word	0x40040000
 801a830:	58024400 	.word	0x58024400
 801a834:	58020000 	.word	0x58020000

0801a838 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a838:	b580      	push	{r7, lr}
 801a83a:	b082      	sub	sp, #8
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801a84c:	4619      	mov	r1, r3
 801a84e:	4610      	mov	r0, r2
 801a850:	f7f9 fb4d 	bl	8013eee <USBD_LL_SetupStage>
}
 801a854:	bf00      	nop
 801a856:	3708      	adds	r7, #8
 801a858:	46bd      	mov	sp, r7
 801a85a:	bd80      	pop	{r7, pc}

0801a85c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a85c:	b580      	push	{r7, lr}
 801a85e:	b082      	sub	sp, #8
 801a860:	af00      	add	r7, sp, #0
 801a862:	6078      	str	r0, [r7, #4]
 801a864:	460b      	mov	r3, r1
 801a866:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a86e:	78fa      	ldrb	r2, [r7, #3]
 801a870:	6879      	ldr	r1, [r7, #4]
 801a872:	4613      	mov	r3, r2
 801a874:	00db      	lsls	r3, r3, #3
 801a876:	4413      	add	r3, r2
 801a878:	009b      	lsls	r3, r3, #2
 801a87a:	440b      	add	r3, r1
 801a87c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801a880:	681a      	ldr	r2, [r3, #0]
 801a882:	78fb      	ldrb	r3, [r7, #3]
 801a884:	4619      	mov	r1, r3
 801a886:	f7f9 fb87 	bl	8013f98 <USBD_LL_DataOutStage>
}
 801a88a:	bf00      	nop
 801a88c:	3708      	adds	r7, #8
 801a88e:	46bd      	mov	sp, r7
 801a890:	bd80      	pop	{r7, pc}

0801a892 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a892:	b580      	push	{r7, lr}
 801a894:	b082      	sub	sp, #8
 801a896:	af00      	add	r7, sp, #0
 801a898:	6078      	str	r0, [r7, #4]
 801a89a:	460b      	mov	r3, r1
 801a89c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a8a4:	78fa      	ldrb	r2, [r7, #3]
 801a8a6:	6879      	ldr	r1, [r7, #4]
 801a8a8:	4613      	mov	r3, r2
 801a8aa:	00db      	lsls	r3, r3, #3
 801a8ac:	4413      	add	r3, r2
 801a8ae:	009b      	lsls	r3, r3, #2
 801a8b0:	440b      	add	r3, r1
 801a8b2:	3320      	adds	r3, #32
 801a8b4:	681a      	ldr	r2, [r3, #0]
 801a8b6:	78fb      	ldrb	r3, [r7, #3]
 801a8b8:	4619      	mov	r1, r3
 801a8ba:	f7f9 fc20 	bl	80140fe <USBD_LL_DataInStage>
}
 801a8be:	bf00      	nop
 801a8c0:	3708      	adds	r7, #8
 801a8c2:	46bd      	mov	sp, r7
 801a8c4:	bd80      	pop	{r7, pc}
	...

0801a8c8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8c8:	b580      	push	{r7, lr}
 801a8ca:	b084      	sub	sp, #16
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a8d6:	4618      	mov	r0, r3
 801a8d8:	f7f9 fd59 	bl	801438e <USBD_LL_SOF>
  /* USER CODE BEGIN SOF_TS */
  /* Update last SOF timestamp (ms) for host presence detection */
  g_usb_last_sof_ms = HAL_GetTick();
 801a8dc:	f7ea fb46 	bl	8004f6c <HAL_GetTick>
 801a8e0:	4603      	mov	r3, r0
 801a8e2:	4a09      	ldr	r2, [pc, #36]	@ (801a908 <HAL_PCD_SOFCallback+0x40>)
 801a8e4:	6013      	str	r3, [r2, #0]
  /* Периодически проверяем таймаут отсутствия SOF (>1000мс) и сбрасываем метку для UI */
  uint32_t now = g_usb_last_sof_ms;
 801a8e6:	4b08      	ldr	r3, [pc, #32]	@ (801a908 <HAL_PCD_SOFCallback+0x40>)
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	60fb      	str	r3, [r7, #12]
  if(now - g_usb_last_poll_ms >= 250){
 801a8ec:	4b07      	ldr	r3, [pc, #28]	@ (801a90c <HAL_PCD_SOFCallback+0x44>)
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	68fa      	ldr	r2, [r7, #12]
 801a8f2:	1ad3      	subs	r3, r2, r3
 801a8f4:	2bf9      	cmp	r3, #249	@ 0xf9
 801a8f6:	d902      	bls.n	801a8fe <HAL_PCD_SOFCallback+0x36>
    g_usb_last_poll_ms = now;
 801a8f8:	4a04      	ldr	r2, [pc, #16]	@ (801a90c <HAL_PCD_SOFCallback+0x44>)
 801a8fa:	68fb      	ldr	r3, [r7, #12]
 801a8fc:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SOF_TS */
}
 801a8fe:	bf00      	nop
 801a900:	3710      	adds	r7, #16
 801a902:	46bd      	mov	sp, r7
 801a904:	bd80      	pop	{r7, pc}
 801a906:	bf00      	nop
 801a908:	2401bcc8 	.word	0x2401bcc8
 801a90c:	2401bccc 	.word	0x2401bccc

0801a910 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b084      	sub	sp, #16
 801a914:	af00      	add	r7, sp, #0
 801a916:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a918:	2301      	movs	r3, #1
 801a91a:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	79db      	ldrb	r3, [r3, #7]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d102      	bne.n	801a92a <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a924:	2300      	movs	r3, #0
 801a926:	73fb      	strb	r3, [r7, #15]
 801a928:	e008      	b.n	801a93c <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	79db      	ldrb	r3, [r3, #7]
 801a92e:	2b02      	cmp	r3, #2
 801a930:	d102      	bne.n	801a938 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a932:	2301      	movs	r3, #1
 801a934:	73fb      	strb	r3, [r7, #15]
 801a936:	e001      	b.n	801a93c <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a938:	f7e8 fab0 	bl	8002e9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a942:	7bfa      	ldrb	r2, [r7, #15]
 801a944:	4611      	mov	r1, r2
 801a946:	4618      	mov	r0, r3
 801a948:	f7f9 fcdd 	bl	8014306 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a952:	4618      	mov	r0, r3
 801a954:	f7f9 fc85 	bl	8014262 <USBD_LL_Reset>
}
 801a958:	bf00      	nop
 801a95a:	3710      	adds	r7, #16
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}

0801a960 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a960:	b580      	push	{r7, lr}
 801a962:	b082      	sub	sp, #8
 801a964:	af00      	add	r7, sp, #0
 801a966:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a96e:	4618      	mov	r0, r3
 801a970:	f7f9 fcd9 	bl	8014326 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	687a      	ldr	r2, [r7, #4]
 801a980:	6812      	ldr	r2, [r2, #0]
 801a982:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801a986:	f043 0301 	orr.w	r3, r3, #1
 801a98a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	7adb      	ldrb	r3, [r3, #11]
 801a990:	2b00      	cmp	r3, #0
 801a992:	d005      	beq.n	801a9a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a994:	4b04      	ldr	r3, [pc, #16]	@ (801a9a8 <HAL_PCD_SuspendCallback+0x48>)
 801a996:	691b      	ldr	r3, [r3, #16]
 801a998:	4a03      	ldr	r2, [pc, #12]	@ (801a9a8 <HAL_PCD_SuspendCallback+0x48>)
 801a99a:	f043 0306 	orr.w	r3, r3, #6
 801a99e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a9a0:	bf00      	nop
 801a9a2:	3708      	adds	r7, #8
 801a9a4:	46bd      	mov	sp, r7
 801a9a6:	bd80      	pop	{r7, pc}
 801a9a8:	e000ed00 	.word	0xe000ed00

0801a9ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b082      	sub	sp, #8
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a9ba:	4618      	mov	r0, r3
 801a9bc:	f7f9 fccf 	bl	801435e <USBD_LL_Resume>
}
 801a9c0:	bf00      	nop
 801a9c2:	3708      	adds	r7, #8
 801a9c4:	46bd      	mov	sp, r7
 801a9c6:	bd80      	pop	{r7, pc}

0801a9c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9c8:	b580      	push	{r7, lr}
 801a9ca:	b082      	sub	sp, #8
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	6078      	str	r0, [r7, #4]
 801a9d0:	460b      	mov	r3, r1
 801a9d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a9da:	78fa      	ldrb	r2, [r7, #3]
 801a9dc:	4611      	mov	r1, r2
 801a9de:	4618      	mov	r0, r3
 801a9e0:	f7f9 fd27 	bl	8014432 <USBD_LL_IsoOUTIncomplete>
}
 801a9e4:	bf00      	nop
 801a9e6:	3708      	adds	r7, #8
 801a9e8:	46bd      	mov	sp, r7
 801a9ea:	bd80      	pop	{r7, pc}

0801a9ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9ec:	b580      	push	{r7, lr}
 801a9ee:	b082      	sub	sp, #8
 801a9f0:	af00      	add	r7, sp, #0
 801a9f2:	6078      	str	r0, [r7, #4]
 801a9f4:	460b      	mov	r3, r1
 801a9f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a9fe:	78fa      	ldrb	r2, [r7, #3]
 801aa00:	4611      	mov	r1, r2
 801aa02:	4618      	mov	r0, r3
 801aa04:	f7f9 fce3 	bl	80143ce <USBD_LL_IsoINIncomplete>
}
 801aa08:	bf00      	nop
 801aa0a:	3708      	adds	r7, #8
 801aa0c:	46bd      	mov	sp, r7
 801aa0e:	bd80      	pop	{r7, pc}

0801aa10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa10:	b580      	push	{r7, lr}
 801aa12:	b082      	sub	sp, #8
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801aa1e:	4618      	mov	r0, r3
 801aa20:	f7f9 fd39 	bl	8014496 <USBD_LL_DevConnected>
  /* USER CODE BEGIN CONNECT_EVT */
  g_usb_last_sof_ms = HAL_GetTick();
 801aa24:	f7ea faa2 	bl	8004f6c <HAL_GetTick>
 801aa28:	4603      	mov	r3, r0
 801aa2a:	4a03      	ldr	r2, [pc, #12]	@ (801aa38 <HAL_PCD_ConnectCallback+0x28>)
 801aa2c:	6013      	str	r3, [r2, #0]
  /* USER CODE END CONNECT_EVT */
}
 801aa2e:	bf00      	nop
 801aa30:	3708      	adds	r7, #8
 801aa32:	46bd      	mov	sp, r7
 801aa34:	bd80      	pop	{r7, pc}
 801aa36:	bf00      	nop
 801aa38:	2401bcc8 	.word	0x2401bcc8

0801aa3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa3c:	b580      	push	{r7, lr}
 801aa3e:	b082      	sub	sp, #8
 801aa40:	af00      	add	r7, sp, #0
 801aa42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	f7f9 fd2e 	bl	80144ac <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN DISCONNECT_EVT */
  /* On disconnect, clear the timestamp so UI can show USB:-- */
  g_usb_last_sof_ms = 0;
 801aa50:	4b04      	ldr	r3, [pc, #16]	@ (801aa64 <HAL_PCD_DisconnectCallback+0x28>)
 801aa52:	2200      	movs	r2, #0
 801aa54:	601a      	str	r2, [r3, #0]
  g_usb_last_poll_ms = 0;
 801aa56:	4b04      	ldr	r3, [pc, #16]	@ (801aa68 <HAL_PCD_DisconnectCallback+0x2c>)
 801aa58:	2200      	movs	r2, #0
 801aa5a:	601a      	str	r2, [r3, #0]
  /* USER CODE END DISCONNECT_EVT */
}
 801aa5c:	bf00      	nop
 801aa5e:	3708      	adds	r7, #8
 801aa60:	46bd      	mov	sp, r7
 801aa62:	bd80      	pop	{r7, pc}
 801aa64:	2401bcc8 	.word	0x2401bcc8
 801aa68:	2401bccc 	.word	0x2401bccc

0801aa6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	b082      	sub	sp, #8
 801aa70:	af00      	add	r7, sp, #0
 801aa72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	781b      	ldrb	r3, [r3, #0]
 801aa78:	2b01      	cmp	r3, #1
 801aa7a:	d151      	bne.n	801ab20 <USBD_LL_Init+0xb4>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801aa7c:	4a2b      	ldr	r2, [pc, #172]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	4a29      	ldr	r2, [pc, #164]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aa88:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801aa8c:	4b27      	ldr	r3, [pc, #156]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aa8e:	4a28      	ldr	r2, [pc, #160]	@ (801ab30 <USBD_LL_Init+0xc4>)
 801aa90:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801aa92:	4b26      	ldr	r3, [pc, #152]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aa94:	2209      	movs	r2, #9
 801aa96:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801aa98:	4b24      	ldr	r3, [pc, #144]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aa9a:	2202      	movs	r2, #2
 801aa9c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801aa9e:	4b23      	ldr	r3, [pc, #140]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aaa0:	2200      	movs	r2, #0
 801aaa2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801aaa4:	4b21      	ldr	r3, [pc, #132]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aaa6:	2202      	movs	r2, #2
 801aaa8:	725a      	strb	r2, [r3, #9]
  /* Включаем генерацию SOF, чтобы UI мог отслеживать активность хоста */
  hpcd_USB_OTG_HS.Init.Sof_enable = ENABLE;
 801aaaa:	4b20      	ldr	r3, [pc, #128]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aaac:	2201      	movs	r2, #1
 801aaae:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801aab0:	4b1e      	ldr	r3, [pc, #120]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aab2:	2200      	movs	r2, #0
 801aab4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801aab6:	4b1d      	ldr	r3, [pc, #116]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aab8:	2200      	movs	r2, #0
 801aaba:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE; /* VBUS sensing отключен, как в оригинале */
 801aabc:	4b1b      	ldr	r3, [pc, #108]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aabe:	2200      	movs	r2, #0
 801aac0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801aac2:	4b1a      	ldr	r3, [pc, #104]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aac4:	2200      	movs	r2, #0
 801aac6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801aac8:	4b18      	ldr	r3, [pc, #96]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aaca:	2200      	movs	r2, #0
 801aacc:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801aace:	4817      	ldr	r0, [pc, #92]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aad0:	f7ef fb3b 	bl	800a14a <HAL_PCD_Init>
 801aad4:	4603      	mov	r3, r0
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d001      	beq.n	801aade <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801aada:	f7e8 f9df 	bl	8002e9c <Error_Handler>
  }

  /* Включаем pull-up для enumeration */
  MODIFY_REG(USB_OTG_HS->GCCFG, 0, USB_OTG_GCCFG_PWRDWN);
 801aade:	4b14      	ldr	r3, [pc, #80]	@ (801ab30 <USBD_LL_Init+0xc4>)
 801aae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801aae2:	4a13      	ldr	r2, [pc, #76]	@ (801ab30 <USBD_LL_Init+0xc4>)
 801aae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801aae8:	6393      	str	r3, [r2, #56]	@ 0x38
     TX1 (CDC IN)0x100 (256 words = 1024 bytes)
     TX2 (CDC CMD IN)0x40  (64 words = 256 bytes)
     TX3 (VND IN)0x100 (256 words = 1024 bytes)
     ИТОГО: 0x480 words = 4608 bytes (чуть больше 4KB, но STM32H7 USB OTG HS поддерживает)
  */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801aaea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801aaee:	480f      	ldr	r0, [pc, #60]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aaf0:	f7f0 fdb7 	bl	800b662 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x40);
 801aaf4:	2240      	movs	r2, #64	@ 0x40
 801aaf6:	2100      	movs	r1, #0
 801aaf8:	480c      	ldr	r0, [pc, #48]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801aafa:	f7f0 fd6b 	bl	800b5d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x100);
 801aafe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ab02:	2101      	movs	r1, #1
 801ab04:	4809      	ldr	r0, [pc, #36]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801ab06:	f7f0 fd65 	bl	800b5d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 2, 0x40);
 801ab0a:	2240      	movs	r2, #64	@ 0x40
 801ab0c:	2102      	movs	r1, #2
 801ab0e:	4807      	ldr	r0, [pc, #28]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801ab10:	f7f0 fd60 	bl	800b5d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 3, 0x100);
 801ab14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ab18:	2103      	movs	r1, #3
 801ab1a:	4804      	ldr	r0, [pc, #16]	@ (801ab2c <USBD_LL_Init+0xc0>)
 801ab1c:	f7f0 fd5a 	bl	800b5d4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801ab20:	2300      	movs	r3, #0
}
 801ab22:	4618      	mov	r0, r3
 801ab24:	3708      	adds	r7, #8
 801ab26:	46bd      	mov	sp, r7
 801ab28:	bd80      	pop	{r7, pc}
 801ab2a:	bf00      	nop
 801ab2c:	2401bcd0 	.word	0x2401bcd0
 801ab30:	40040000 	.word	0x40040000

0801ab34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ab34:	b580      	push	{r7, lr}
 801ab36:	b084      	sub	sp, #16
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab3c:	2300      	movs	r3, #0
 801ab3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab40:	2300      	movs	r3, #0
 801ab42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	f7ef fc09 	bl	800a362 <HAL_PCD_Start>
 801ab50:	4603      	mov	r3, r0
 801ab52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab54:	7bfb      	ldrb	r3, [r7, #15]
 801ab56:	4618      	mov	r0, r3
 801ab58:	f000 f962 	bl	801ae20 <USBD_Get_USB_Status>
 801ab5c:	4603      	mov	r3, r0
 801ab5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab60:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab62:	4618      	mov	r0, r3
 801ab64:	3710      	adds	r7, #16
 801ab66:	46bd      	mov	sp, r7
 801ab68:	bd80      	pop	{r7, pc}

0801ab6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ab6a:	b580      	push	{r7, lr}
 801ab6c:	b084      	sub	sp, #16
 801ab6e:	af00      	add	r7, sp, #0
 801ab70:	6078      	str	r0, [r7, #4]
 801ab72:	4608      	mov	r0, r1
 801ab74:	4611      	mov	r1, r2
 801ab76:	461a      	mov	r2, r3
 801ab78:	4603      	mov	r3, r0
 801ab7a:	70fb      	strb	r3, [r7, #3]
 801ab7c:	460b      	mov	r3, r1
 801ab7e:	70bb      	strb	r3, [r7, #2]
 801ab80:	4613      	mov	r3, r2
 801ab82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab84:	2300      	movs	r3, #0
 801ab86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab88:	2300      	movs	r3, #0
 801ab8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801ab92:	78bb      	ldrb	r3, [r7, #2]
 801ab94:	883a      	ldrh	r2, [r7, #0]
 801ab96:	78f9      	ldrb	r1, [r7, #3]
 801ab98:	f7f0 f90a 	bl	800adb0 <HAL_PCD_EP_Open>
 801ab9c:	4603      	mov	r3, r0
 801ab9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aba0:	7bfb      	ldrb	r3, [r7, #15]
 801aba2:	4618      	mov	r0, r3
 801aba4:	f000 f93c 	bl	801ae20 <USBD_Get_USB_Status>
 801aba8:	4603      	mov	r3, r0
 801abaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801abac:	7bbb      	ldrb	r3, [r7, #14]
}
 801abae:	4618      	mov	r0, r3
 801abb0:	3710      	adds	r7, #16
 801abb2:	46bd      	mov	sp, r7
 801abb4:	bd80      	pop	{r7, pc}

0801abb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801abb6:	b580      	push	{r7, lr}
 801abb8:	b084      	sub	sp, #16
 801abba:	af00      	add	r7, sp, #0
 801abbc:	6078      	str	r0, [r7, #4]
 801abbe:	460b      	mov	r3, r1
 801abc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abc2:	2300      	movs	r3, #0
 801abc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abc6:	2300      	movs	r3, #0
 801abc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801abd0:	78fa      	ldrb	r2, [r7, #3]
 801abd2:	4611      	mov	r1, r2
 801abd4:	4618      	mov	r0, r3
 801abd6:	f7f0 f955 	bl	800ae84 <HAL_PCD_EP_Close>
 801abda:	4603      	mov	r3, r0
 801abdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abde:	7bfb      	ldrb	r3, [r7, #15]
 801abe0:	4618      	mov	r0, r3
 801abe2:	f000 f91d 	bl	801ae20 <USBD_Get_USB_Status>
 801abe6:	4603      	mov	r3, r0
 801abe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801abea:	7bbb      	ldrb	r3, [r7, #14]
}
 801abec:	4618      	mov	r0, r3
 801abee:	3710      	adds	r7, #16
 801abf0:	46bd      	mov	sp, r7
 801abf2:	bd80      	pop	{r7, pc}

0801abf4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801abf4:	b580      	push	{r7, lr}
 801abf6:	b084      	sub	sp, #16
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	6078      	str	r0, [r7, #4]
 801abfc:	460b      	mov	r3, r1
 801abfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac00:	2300      	movs	r3, #0
 801ac02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac04:	2300      	movs	r3, #0
 801ac06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ac0e:	78fa      	ldrb	r2, [r7, #3]
 801ac10:	4611      	mov	r1, r2
 801ac12:	4618      	mov	r0, r3
 801ac14:	f7f0 faf7 	bl	800b206 <HAL_PCD_EP_Flush>
 801ac18:	4603      	mov	r3, r0
 801ac1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac1c:	7bfb      	ldrb	r3, [r7, #15]
 801ac1e:	4618      	mov	r0, r3
 801ac20:	f000 f8fe 	bl	801ae20 <USBD_Get_USB_Status>
 801ac24:	4603      	mov	r3, r0
 801ac26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac28:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac2a:	4618      	mov	r0, r3
 801ac2c:	3710      	adds	r7, #16
 801ac2e:	46bd      	mov	sp, r7
 801ac30:	bd80      	pop	{r7, pc}

0801ac32 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac32:	b580      	push	{r7, lr}
 801ac34:	b084      	sub	sp, #16
 801ac36:	af00      	add	r7, sp, #0
 801ac38:	6078      	str	r0, [r7, #4]
 801ac3a:	460b      	mov	r3, r1
 801ac3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac3e:	2300      	movs	r3, #0
 801ac40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac42:	2300      	movs	r3, #0
 801ac44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ac4c:	78fa      	ldrb	r2, [r7, #3]
 801ac4e:	4611      	mov	r1, r2
 801ac50:	4618      	mov	r0, r3
 801ac52:	f7f0 f9ee 	bl	800b032 <HAL_PCD_EP_SetStall>
 801ac56:	4603      	mov	r3, r0
 801ac58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac5a:	7bfb      	ldrb	r3, [r7, #15]
 801ac5c:	4618      	mov	r0, r3
 801ac5e:	f000 f8df 	bl	801ae20 <USBD_Get_USB_Status>
 801ac62:	4603      	mov	r3, r0
 801ac64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac66:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac68:	4618      	mov	r0, r3
 801ac6a:	3710      	adds	r7, #16
 801ac6c:	46bd      	mov	sp, r7
 801ac6e:	bd80      	pop	{r7, pc}

0801ac70 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac70:	b580      	push	{r7, lr}
 801ac72:	b084      	sub	sp, #16
 801ac74:	af00      	add	r7, sp, #0
 801ac76:	6078      	str	r0, [r7, #4]
 801ac78:	460b      	mov	r3, r1
 801ac7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac7c:	2300      	movs	r3, #0
 801ac7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac80:	2300      	movs	r3, #0
 801ac82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ac8a:	78fa      	ldrb	r2, [r7, #3]
 801ac8c:	4611      	mov	r1, r2
 801ac8e:	4618      	mov	r0, r3
 801ac90:	f7f0 fa32 	bl	800b0f8 <HAL_PCD_EP_ClrStall>
 801ac94:	4603      	mov	r3, r0
 801ac96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac98:	7bfb      	ldrb	r3, [r7, #15]
 801ac9a:	4618      	mov	r0, r3
 801ac9c:	f000 f8c0 	bl	801ae20 <USBD_Get_USB_Status>
 801aca0:	4603      	mov	r3, r0
 801aca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aca4:	7bbb      	ldrb	r3, [r7, #14]
}
 801aca6:	4618      	mov	r0, r3
 801aca8:	3710      	adds	r7, #16
 801acaa:	46bd      	mov	sp, r7
 801acac:	bd80      	pop	{r7, pc}

0801acae <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801acae:	b480      	push	{r7}
 801acb0:	b085      	sub	sp, #20
 801acb2:	af00      	add	r7, sp, #0
 801acb4:	6078      	str	r0, [r7, #4]
 801acb6:	460b      	mov	r3, r1
 801acb8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801acc0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801acc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	da0b      	bge.n	801ace2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801acca:	78fb      	ldrb	r3, [r7, #3]
 801accc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801acd0:	68f9      	ldr	r1, [r7, #12]
 801acd2:	4613      	mov	r3, r2
 801acd4:	00db      	lsls	r3, r3, #3
 801acd6:	4413      	add	r3, r2
 801acd8:	009b      	lsls	r3, r3, #2
 801acda:	440b      	add	r3, r1
 801acdc:	3316      	adds	r3, #22
 801acde:	781b      	ldrb	r3, [r3, #0]
 801ace0:	e00b      	b.n	801acfa <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ace2:	78fb      	ldrb	r3, [r7, #3]
 801ace4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801ace8:	68f9      	ldr	r1, [r7, #12]
 801acea:	4613      	mov	r3, r2
 801acec:	00db      	lsls	r3, r3, #3
 801acee:	4413      	add	r3, r2
 801acf0:	009b      	lsls	r3, r3, #2
 801acf2:	440b      	add	r3, r1
 801acf4:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801acf8:	781b      	ldrb	r3, [r3, #0]
  }
}
 801acfa:	4618      	mov	r0, r3
 801acfc:	3714      	adds	r7, #20
 801acfe:	46bd      	mov	sp, r7
 801ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad04:	4770      	bx	lr

0801ad06 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ad06:	b580      	push	{r7, lr}
 801ad08:	b084      	sub	sp, #16
 801ad0a:	af00      	add	r7, sp, #0
 801ad0c:	6078      	str	r0, [r7, #4]
 801ad0e:	460b      	mov	r3, r1
 801ad10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad12:	2300      	movs	r3, #0
 801ad14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad16:	2300      	movs	r3, #0
 801ad18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ad20:	78fa      	ldrb	r2, [r7, #3]
 801ad22:	4611      	mov	r1, r2
 801ad24:	4618      	mov	r0, r3
 801ad26:	f7f0 f81f 	bl	800ad68 <HAL_PCD_SetAddress>
 801ad2a:	4603      	mov	r3, r0
 801ad2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad2e:	7bfb      	ldrb	r3, [r7, #15]
 801ad30:	4618      	mov	r0, r3
 801ad32:	f000 f875 	bl	801ae20 <USBD_Get_USB_Status>
 801ad36:	4603      	mov	r3, r0
 801ad38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad3a:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	3710      	adds	r7, #16
 801ad40:	46bd      	mov	sp, r7
 801ad42:	bd80      	pop	{r7, pc}

0801ad44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ad44:	b580      	push	{r7, lr}
 801ad46:	b086      	sub	sp, #24
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	60f8      	str	r0, [r7, #12]
 801ad4c:	607a      	str	r2, [r7, #4]
 801ad4e:	603b      	str	r3, [r7, #0]
 801ad50:	460b      	mov	r3, r1
 801ad52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad54:	2300      	movs	r3, #0
 801ad56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad58:	2300      	movs	r3, #0
 801ad5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801ad62:	7af9      	ldrb	r1, [r7, #11]
 801ad64:	683b      	ldr	r3, [r7, #0]
 801ad66:	687a      	ldr	r2, [r7, #4]
 801ad68:	f7f0 f929 	bl	800afbe <HAL_PCD_EP_Transmit>
 801ad6c:	4603      	mov	r3, r0
 801ad6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad70:	7dfb      	ldrb	r3, [r7, #23]
 801ad72:	4618      	mov	r0, r3
 801ad74:	f000 f854 	bl	801ae20 <USBD_Get_USB_Status>
 801ad78:	4603      	mov	r3, r0
 801ad7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ad7c:	7dbb      	ldrb	r3, [r7, #22]
}
 801ad7e:	4618      	mov	r0, r3
 801ad80:	3718      	adds	r7, #24
 801ad82:	46bd      	mov	sp, r7
 801ad84:	bd80      	pop	{r7, pc}

0801ad86 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ad86:	b580      	push	{r7, lr}
 801ad88:	b086      	sub	sp, #24
 801ad8a:	af00      	add	r7, sp, #0
 801ad8c:	60f8      	str	r0, [r7, #12]
 801ad8e:	607a      	str	r2, [r7, #4]
 801ad90:	603b      	str	r3, [r7, #0]
 801ad92:	460b      	mov	r3, r1
 801ad94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad96:	2300      	movs	r3, #0
 801ad98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad9a:	2300      	movs	r3, #0
 801ad9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801ada4:	7af9      	ldrb	r1, [r7, #11]
 801ada6:	683b      	ldr	r3, [r7, #0]
 801ada8:	687a      	ldr	r2, [r7, #4]
 801adaa:	f7f0 f8b5 	bl	800af18 <HAL_PCD_EP_Receive>
 801adae:	4603      	mov	r3, r0
 801adb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801adb2:	7dfb      	ldrb	r3, [r7, #23]
 801adb4:	4618      	mov	r0, r3
 801adb6:	f000 f833 	bl	801ae20 <USBD_Get_USB_Status>
 801adba:	4603      	mov	r3, r0
 801adbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801adbe:	7dbb      	ldrb	r3, [r7, #22]
}
 801adc0:	4618      	mov	r0, r3
 801adc2:	3718      	adds	r7, #24
 801adc4:	46bd      	mov	sp, r7
 801adc6:	bd80      	pop	{r7, pc}

0801adc8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801adc8:	b580      	push	{r7, lr}
 801adca:	b082      	sub	sp, #8
 801adcc:	af00      	add	r7, sp, #0
 801adce:	6078      	str	r0, [r7, #4]
 801add0:	460b      	mov	r3, r1
 801add2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801adda:	78fa      	ldrb	r2, [r7, #3]
 801addc:	4611      	mov	r1, r2
 801adde:	4618      	mov	r0, r3
 801ade0:	f7f0 f8d5 	bl	800af8e <HAL_PCD_EP_GetRxCount>
 801ade4:	4603      	mov	r3, r0
}
 801ade6:	4618      	mov	r0, r3
 801ade8:	3708      	adds	r7, #8
 801adea:	46bd      	mov	sp, r7
 801adec:	bd80      	pop	{r7, pc}
	...

0801adf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801adf0:	b480      	push	{r7}
 801adf2:	b083      	sub	sp, #12
 801adf4:	af00      	add	r7, sp, #0
 801adf6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801adf8:	4b03      	ldr	r3, [pc, #12]	@ (801ae08 <USBD_static_malloc+0x18>)
}
 801adfa:	4618      	mov	r0, r3
 801adfc:	370c      	adds	r7, #12
 801adfe:	46bd      	mov	sp, r7
 801ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae04:	4770      	bx	lr
 801ae06:	bf00      	nop
 801ae08:	2401c1b4 	.word	0x2401c1b4

0801ae0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ae0c:	b480      	push	{r7}
 801ae0e:	b083      	sub	sp, #12
 801ae10:	af00      	add	r7, sp, #0
 801ae12:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801ae14:	bf00      	nop
 801ae16:	370c      	adds	r7, #12
 801ae18:	46bd      	mov	sp, r7
 801ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae1e:	4770      	bx	lr

0801ae20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ae20:	b480      	push	{r7}
 801ae22:	b085      	sub	sp, #20
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	4603      	mov	r3, r0
 801ae28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ae2e:	79fb      	ldrb	r3, [r7, #7]
 801ae30:	2b03      	cmp	r3, #3
 801ae32:	d817      	bhi.n	801ae64 <USBD_Get_USB_Status+0x44>
 801ae34:	a201      	add	r2, pc, #4	@ (adr r2, 801ae3c <USBD_Get_USB_Status+0x1c>)
 801ae36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae3a:	bf00      	nop
 801ae3c:	0801ae4d 	.word	0x0801ae4d
 801ae40:	0801ae53 	.word	0x0801ae53
 801ae44:	0801ae59 	.word	0x0801ae59
 801ae48:	0801ae5f 	.word	0x0801ae5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ae4c:	2300      	movs	r3, #0
 801ae4e:	73fb      	strb	r3, [r7, #15]
    break;
 801ae50:	e00b      	b.n	801ae6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ae52:	2303      	movs	r3, #3
 801ae54:	73fb      	strb	r3, [r7, #15]
    break;
 801ae56:	e008      	b.n	801ae6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ae58:	2301      	movs	r3, #1
 801ae5a:	73fb      	strb	r3, [r7, #15]
    break;
 801ae5c:	e005      	b.n	801ae6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ae5e:	2303      	movs	r3, #3
 801ae60:	73fb      	strb	r3, [r7, #15]
    break;
 801ae62:	e002      	b.n	801ae6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ae64:	2303      	movs	r3, #3
 801ae66:	73fb      	strb	r3, [r7, #15]
    break;
 801ae68:	bf00      	nop
  }
  return usb_status;
 801ae6a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	3714      	adds	r7, #20
 801ae70:	46bd      	mov	sp, r7
 801ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae76:	4770      	bx	lr

0801ae78 <std>:
 801ae78:	2300      	movs	r3, #0
 801ae7a:	b510      	push	{r4, lr}
 801ae7c:	4604      	mov	r4, r0
 801ae7e:	e9c0 3300 	strd	r3, r3, [r0]
 801ae82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ae86:	6083      	str	r3, [r0, #8]
 801ae88:	8181      	strh	r1, [r0, #12]
 801ae8a:	6643      	str	r3, [r0, #100]	@ 0x64
 801ae8c:	81c2      	strh	r2, [r0, #14]
 801ae8e:	6183      	str	r3, [r0, #24]
 801ae90:	4619      	mov	r1, r3
 801ae92:	2208      	movs	r2, #8
 801ae94:	305c      	adds	r0, #92	@ 0x5c
 801ae96:	f000 fb1f 	bl	801b4d8 <memset>
 801ae9a:	4b0d      	ldr	r3, [pc, #52]	@ (801aed0 <std+0x58>)
 801ae9c:	6263      	str	r3, [r4, #36]	@ 0x24
 801ae9e:	4b0d      	ldr	r3, [pc, #52]	@ (801aed4 <std+0x5c>)
 801aea0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801aea2:	4b0d      	ldr	r3, [pc, #52]	@ (801aed8 <std+0x60>)
 801aea4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801aea6:	4b0d      	ldr	r3, [pc, #52]	@ (801aedc <std+0x64>)
 801aea8:	6323      	str	r3, [r4, #48]	@ 0x30
 801aeaa:	4b0d      	ldr	r3, [pc, #52]	@ (801aee0 <std+0x68>)
 801aeac:	6224      	str	r4, [r4, #32]
 801aeae:	429c      	cmp	r4, r3
 801aeb0:	d006      	beq.n	801aec0 <std+0x48>
 801aeb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801aeb6:	4294      	cmp	r4, r2
 801aeb8:	d002      	beq.n	801aec0 <std+0x48>
 801aeba:	33d0      	adds	r3, #208	@ 0xd0
 801aebc:	429c      	cmp	r4, r3
 801aebe:	d105      	bne.n	801aecc <std+0x54>
 801aec0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801aec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aec8:	f000 bba4 	b.w	801b614 <__retarget_lock_init_recursive>
 801aecc:	bd10      	pop	{r4, pc}
 801aece:	bf00      	nop
 801aed0:	0801b2b5 	.word	0x0801b2b5
 801aed4:	0801b2d7 	.word	0x0801b2d7
 801aed8:	0801b30f 	.word	0x0801b30f
 801aedc:	0801b335 	.word	0x0801b335
 801aee0:	2401c3d4 	.word	0x2401c3d4

0801aee4 <stdio_exit_handler>:
 801aee4:	4a02      	ldr	r2, [pc, #8]	@ (801aef0 <stdio_exit_handler+0xc>)
 801aee6:	4903      	ldr	r1, [pc, #12]	@ (801aef4 <stdio_exit_handler+0x10>)
 801aee8:	4803      	ldr	r0, [pc, #12]	@ (801aef8 <stdio_exit_handler+0x14>)
 801aeea:	f000 b86b 	b.w	801afc4 <_fwalk_sglue>
 801aeee:	bf00      	nop
 801aef0:	2400024c 	.word	0x2400024c
 801aef4:	0801c195 	.word	0x0801c195
 801aef8:	2400025c 	.word	0x2400025c

0801aefc <cleanup_stdio>:
 801aefc:	6841      	ldr	r1, [r0, #4]
 801aefe:	4b0c      	ldr	r3, [pc, #48]	@ (801af30 <cleanup_stdio+0x34>)
 801af00:	4299      	cmp	r1, r3
 801af02:	b510      	push	{r4, lr}
 801af04:	4604      	mov	r4, r0
 801af06:	d001      	beq.n	801af0c <cleanup_stdio+0x10>
 801af08:	f001 f944 	bl	801c194 <_fflush_r>
 801af0c:	68a1      	ldr	r1, [r4, #8]
 801af0e:	4b09      	ldr	r3, [pc, #36]	@ (801af34 <cleanup_stdio+0x38>)
 801af10:	4299      	cmp	r1, r3
 801af12:	d002      	beq.n	801af1a <cleanup_stdio+0x1e>
 801af14:	4620      	mov	r0, r4
 801af16:	f001 f93d 	bl	801c194 <_fflush_r>
 801af1a:	68e1      	ldr	r1, [r4, #12]
 801af1c:	4b06      	ldr	r3, [pc, #24]	@ (801af38 <cleanup_stdio+0x3c>)
 801af1e:	4299      	cmp	r1, r3
 801af20:	d004      	beq.n	801af2c <cleanup_stdio+0x30>
 801af22:	4620      	mov	r0, r4
 801af24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af28:	f001 b934 	b.w	801c194 <_fflush_r>
 801af2c:	bd10      	pop	{r4, pc}
 801af2e:	bf00      	nop
 801af30:	2401c3d4 	.word	0x2401c3d4
 801af34:	2401c43c 	.word	0x2401c43c
 801af38:	2401c4a4 	.word	0x2401c4a4

0801af3c <global_stdio_init.part.0>:
 801af3c:	4b0c      	ldr	r3, [pc, #48]	@ (801af70 <global_stdio_init.part.0+0x34>)
 801af3e:	4a0d      	ldr	r2, [pc, #52]	@ (801af74 <global_stdio_init.part.0+0x38>)
 801af40:	480d      	ldr	r0, [pc, #52]	@ (801af78 <global_stdio_init.part.0+0x3c>)
 801af42:	b510      	push	{r4, lr}
 801af44:	2104      	movs	r1, #4
 801af46:	601a      	str	r2, [r3, #0]
 801af48:	2200      	movs	r2, #0
 801af4a:	f7ff ff95 	bl	801ae78 <std>
 801af4e:	4b0a      	ldr	r3, [pc, #40]	@ (801af78 <global_stdio_init.part.0+0x3c>)
 801af50:	2201      	movs	r2, #1
 801af52:	461c      	mov	r4, r3
 801af54:	2109      	movs	r1, #9
 801af56:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 801af5a:	f7ff ff8d 	bl	801ae78 <std>
 801af5e:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801af62:	2202      	movs	r2, #2
 801af64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af68:	2112      	movs	r1, #18
 801af6a:	f7ff bf85 	b.w	801ae78 <std>
 801af6e:	bf00      	nop
 801af70:	2401c50c 	.word	0x2401c50c
 801af74:	0801aee5 	.word	0x0801aee5
 801af78:	2401c3d4 	.word	0x2401c3d4

0801af7c <__sfp_lock_acquire>:
 801af7c:	4801      	ldr	r0, [pc, #4]	@ (801af84 <__sfp_lock_acquire+0x8>)
 801af7e:	f000 bb4a 	b.w	801b616 <__retarget_lock_acquire_recursive>
 801af82:	bf00      	nop
 801af84:	2401c515 	.word	0x2401c515

0801af88 <__sfp_lock_release>:
 801af88:	4801      	ldr	r0, [pc, #4]	@ (801af90 <__sfp_lock_release+0x8>)
 801af8a:	f000 bb45 	b.w	801b618 <__retarget_lock_release_recursive>
 801af8e:	bf00      	nop
 801af90:	2401c515 	.word	0x2401c515

0801af94 <__sinit>:
 801af94:	b510      	push	{r4, lr}
 801af96:	4604      	mov	r4, r0
 801af98:	f7ff fff0 	bl	801af7c <__sfp_lock_acquire>
 801af9c:	6a23      	ldr	r3, [r4, #32]
 801af9e:	b11b      	cbz	r3, 801afa8 <__sinit+0x14>
 801afa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801afa4:	f7ff bff0 	b.w	801af88 <__sfp_lock_release>
 801afa8:	4b04      	ldr	r3, [pc, #16]	@ (801afbc <__sinit+0x28>)
 801afaa:	6223      	str	r3, [r4, #32]
 801afac:	4b04      	ldr	r3, [pc, #16]	@ (801afc0 <__sinit+0x2c>)
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	d1f5      	bne.n	801afa0 <__sinit+0xc>
 801afb4:	f7ff ffc2 	bl	801af3c <global_stdio_init.part.0>
 801afb8:	e7f2      	b.n	801afa0 <__sinit+0xc>
 801afba:	bf00      	nop
 801afbc:	0801aefd 	.word	0x0801aefd
 801afc0:	2401c50c 	.word	0x2401c50c

0801afc4 <_fwalk_sglue>:
 801afc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afc8:	4607      	mov	r7, r0
 801afca:	4688      	mov	r8, r1
 801afcc:	4614      	mov	r4, r2
 801afce:	2600      	movs	r6, #0
 801afd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801afd4:	f1b9 0901 	subs.w	r9, r9, #1
 801afd8:	d505      	bpl.n	801afe6 <_fwalk_sglue+0x22>
 801afda:	6824      	ldr	r4, [r4, #0]
 801afdc:	2c00      	cmp	r4, #0
 801afde:	d1f7      	bne.n	801afd0 <_fwalk_sglue+0xc>
 801afe0:	4630      	mov	r0, r6
 801afe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801afe6:	89ab      	ldrh	r3, [r5, #12]
 801afe8:	2b01      	cmp	r3, #1
 801afea:	d907      	bls.n	801affc <_fwalk_sglue+0x38>
 801afec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801aff0:	3301      	adds	r3, #1
 801aff2:	d003      	beq.n	801affc <_fwalk_sglue+0x38>
 801aff4:	4629      	mov	r1, r5
 801aff6:	4638      	mov	r0, r7
 801aff8:	47c0      	blx	r8
 801affa:	4306      	orrs	r6, r0
 801affc:	3568      	adds	r5, #104	@ 0x68
 801affe:	e7e9      	b.n	801afd4 <_fwalk_sglue+0x10>

0801b000 <iprintf>:
 801b000:	b40f      	push	{r0, r1, r2, r3}
 801b002:	b507      	push	{r0, r1, r2, lr}
 801b004:	4906      	ldr	r1, [pc, #24]	@ (801b020 <iprintf+0x20>)
 801b006:	ab04      	add	r3, sp, #16
 801b008:	6808      	ldr	r0, [r1, #0]
 801b00a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b00e:	6881      	ldr	r1, [r0, #8]
 801b010:	9301      	str	r3, [sp, #4]
 801b012:	f000 fd97 	bl	801bb44 <_vfiprintf_r>
 801b016:	b003      	add	sp, #12
 801b018:	f85d eb04 	ldr.w	lr, [sp], #4
 801b01c:	b004      	add	sp, #16
 801b01e:	4770      	bx	lr
 801b020:	24000258 	.word	0x24000258

0801b024 <_puts_r>:
 801b024:	6a03      	ldr	r3, [r0, #32]
 801b026:	b570      	push	{r4, r5, r6, lr}
 801b028:	6884      	ldr	r4, [r0, #8]
 801b02a:	4605      	mov	r5, r0
 801b02c:	460e      	mov	r6, r1
 801b02e:	b90b      	cbnz	r3, 801b034 <_puts_r+0x10>
 801b030:	f7ff ffb0 	bl	801af94 <__sinit>
 801b034:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b036:	07db      	lsls	r3, r3, #31
 801b038:	d405      	bmi.n	801b046 <_puts_r+0x22>
 801b03a:	89a3      	ldrh	r3, [r4, #12]
 801b03c:	0598      	lsls	r0, r3, #22
 801b03e:	d402      	bmi.n	801b046 <_puts_r+0x22>
 801b040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b042:	f000 fae8 	bl	801b616 <__retarget_lock_acquire_recursive>
 801b046:	89a3      	ldrh	r3, [r4, #12]
 801b048:	0719      	lsls	r1, r3, #28
 801b04a:	d502      	bpl.n	801b052 <_puts_r+0x2e>
 801b04c:	6923      	ldr	r3, [r4, #16]
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d135      	bne.n	801b0be <_puts_r+0x9a>
 801b052:	4621      	mov	r1, r4
 801b054:	4628      	mov	r0, r5
 801b056:	f000 f9eb 	bl	801b430 <__swsetup_r>
 801b05a:	b380      	cbz	r0, 801b0be <_puts_r+0x9a>
 801b05c:	f04f 35ff 	mov.w	r5, #4294967295
 801b060:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b062:	07da      	lsls	r2, r3, #31
 801b064:	d405      	bmi.n	801b072 <_puts_r+0x4e>
 801b066:	89a3      	ldrh	r3, [r4, #12]
 801b068:	059b      	lsls	r3, r3, #22
 801b06a:	d402      	bmi.n	801b072 <_puts_r+0x4e>
 801b06c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b06e:	f000 fad3 	bl	801b618 <__retarget_lock_release_recursive>
 801b072:	4628      	mov	r0, r5
 801b074:	bd70      	pop	{r4, r5, r6, pc}
 801b076:	2b00      	cmp	r3, #0
 801b078:	da04      	bge.n	801b084 <_puts_r+0x60>
 801b07a:	69a2      	ldr	r2, [r4, #24]
 801b07c:	4293      	cmp	r3, r2
 801b07e:	db17      	blt.n	801b0b0 <_puts_r+0x8c>
 801b080:	290a      	cmp	r1, #10
 801b082:	d015      	beq.n	801b0b0 <_puts_r+0x8c>
 801b084:	6823      	ldr	r3, [r4, #0]
 801b086:	1c5a      	adds	r2, r3, #1
 801b088:	6022      	str	r2, [r4, #0]
 801b08a:	7019      	strb	r1, [r3, #0]
 801b08c:	68a3      	ldr	r3, [r4, #8]
 801b08e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b092:	3b01      	subs	r3, #1
 801b094:	60a3      	str	r3, [r4, #8]
 801b096:	2900      	cmp	r1, #0
 801b098:	d1ed      	bne.n	801b076 <_puts_r+0x52>
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	da11      	bge.n	801b0c2 <_puts_r+0x9e>
 801b09e:	4622      	mov	r2, r4
 801b0a0:	210a      	movs	r1, #10
 801b0a2:	4628      	mov	r0, r5
 801b0a4:	f000 f986 	bl	801b3b4 <__swbuf_r>
 801b0a8:	3001      	adds	r0, #1
 801b0aa:	d0d7      	beq.n	801b05c <_puts_r+0x38>
 801b0ac:	250a      	movs	r5, #10
 801b0ae:	e7d7      	b.n	801b060 <_puts_r+0x3c>
 801b0b0:	4622      	mov	r2, r4
 801b0b2:	4628      	mov	r0, r5
 801b0b4:	f000 f97e 	bl	801b3b4 <__swbuf_r>
 801b0b8:	3001      	adds	r0, #1
 801b0ba:	d1e7      	bne.n	801b08c <_puts_r+0x68>
 801b0bc:	e7ce      	b.n	801b05c <_puts_r+0x38>
 801b0be:	3e01      	subs	r6, #1
 801b0c0:	e7e4      	b.n	801b08c <_puts_r+0x68>
 801b0c2:	6823      	ldr	r3, [r4, #0]
 801b0c4:	1c5a      	adds	r2, r3, #1
 801b0c6:	6022      	str	r2, [r4, #0]
 801b0c8:	220a      	movs	r2, #10
 801b0ca:	701a      	strb	r2, [r3, #0]
 801b0cc:	e7ee      	b.n	801b0ac <_puts_r+0x88>
	...

0801b0d0 <puts>:
 801b0d0:	4b02      	ldr	r3, [pc, #8]	@ (801b0dc <puts+0xc>)
 801b0d2:	4601      	mov	r1, r0
 801b0d4:	6818      	ldr	r0, [r3, #0]
 801b0d6:	f7ff bfa5 	b.w	801b024 <_puts_r>
 801b0da:	bf00      	nop
 801b0dc:	24000258 	.word	0x24000258

0801b0e0 <setvbuf>:
 801b0e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b0e4:	461d      	mov	r5, r3
 801b0e6:	4b57      	ldr	r3, [pc, #348]	@ (801b244 <setvbuf+0x164>)
 801b0e8:	681f      	ldr	r7, [r3, #0]
 801b0ea:	4604      	mov	r4, r0
 801b0ec:	460e      	mov	r6, r1
 801b0ee:	4690      	mov	r8, r2
 801b0f0:	b127      	cbz	r7, 801b0fc <setvbuf+0x1c>
 801b0f2:	6a3b      	ldr	r3, [r7, #32]
 801b0f4:	b913      	cbnz	r3, 801b0fc <setvbuf+0x1c>
 801b0f6:	4638      	mov	r0, r7
 801b0f8:	f7ff ff4c 	bl	801af94 <__sinit>
 801b0fc:	f1b8 0f02 	cmp.w	r8, #2
 801b100:	d006      	beq.n	801b110 <setvbuf+0x30>
 801b102:	f1b8 0f01 	cmp.w	r8, #1
 801b106:	f200 809a 	bhi.w	801b23e <setvbuf+0x15e>
 801b10a:	2d00      	cmp	r5, #0
 801b10c:	f2c0 8097 	blt.w	801b23e <setvbuf+0x15e>
 801b110:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b112:	07d9      	lsls	r1, r3, #31
 801b114:	d405      	bmi.n	801b122 <setvbuf+0x42>
 801b116:	89a3      	ldrh	r3, [r4, #12]
 801b118:	059a      	lsls	r2, r3, #22
 801b11a:	d402      	bmi.n	801b122 <setvbuf+0x42>
 801b11c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b11e:	f000 fa7a 	bl	801b616 <__retarget_lock_acquire_recursive>
 801b122:	4621      	mov	r1, r4
 801b124:	4638      	mov	r0, r7
 801b126:	f001 f835 	bl	801c194 <_fflush_r>
 801b12a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b12c:	b141      	cbz	r1, 801b140 <setvbuf+0x60>
 801b12e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b132:	4299      	cmp	r1, r3
 801b134:	d002      	beq.n	801b13c <setvbuf+0x5c>
 801b136:	4638      	mov	r0, r7
 801b138:	f000 fa7e 	bl	801b638 <_free_r>
 801b13c:	2300      	movs	r3, #0
 801b13e:	6363      	str	r3, [r4, #52]	@ 0x34
 801b140:	2300      	movs	r3, #0
 801b142:	61a3      	str	r3, [r4, #24]
 801b144:	6063      	str	r3, [r4, #4]
 801b146:	89a3      	ldrh	r3, [r4, #12]
 801b148:	061b      	lsls	r3, r3, #24
 801b14a:	d503      	bpl.n	801b154 <setvbuf+0x74>
 801b14c:	6921      	ldr	r1, [r4, #16]
 801b14e:	4638      	mov	r0, r7
 801b150:	f000 fa72 	bl	801b638 <_free_r>
 801b154:	89a3      	ldrh	r3, [r4, #12]
 801b156:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 801b15a:	f023 0303 	bic.w	r3, r3, #3
 801b15e:	f1b8 0f02 	cmp.w	r8, #2
 801b162:	81a3      	strh	r3, [r4, #12]
 801b164:	d061      	beq.n	801b22a <setvbuf+0x14a>
 801b166:	ab01      	add	r3, sp, #4
 801b168:	466a      	mov	r2, sp
 801b16a:	4621      	mov	r1, r4
 801b16c:	4638      	mov	r0, r7
 801b16e:	f001 f839 	bl	801c1e4 <__swhatbuf_r>
 801b172:	89a3      	ldrh	r3, [r4, #12]
 801b174:	4318      	orrs	r0, r3
 801b176:	81a0      	strh	r0, [r4, #12]
 801b178:	bb2d      	cbnz	r5, 801b1c6 <setvbuf+0xe6>
 801b17a:	9d00      	ldr	r5, [sp, #0]
 801b17c:	4628      	mov	r0, r5
 801b17e:	f000 faa5 	bl	801b6cc <malloc>
 801b182:	4606      	mov	r6, r0
 801b184:	2800      	cmp	r0, #0
 801b186:	d152      	bne.n	801b22e <setvbuf+0x14e>
 801b188:	f8dd 9000 	ldr.w	r9, [sp]
 801b18c:	45a9      	cmp	r9, r5
 801b18e:	d140      	bne.n	801b212 <setvbuf+0x132>
 801b190:	f04f 35ff 	mov.w	r5, #4294967295
 801b194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b198:	f043 0202 	orr.w	r2, r3, #2
 801b19c:	81a2      	strh	r2, [r4, #12]
 801b19e:	2200      	movs	r2, #0
 801b1a0:	60a2      	str	r2, [r4, #8]
 801b1a2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 801b1a6:	6022      	str	r2, [r4, #0]
 801b1a8:	6122      	str	r2, [r4, #16]
 801b1aa:	2201      	movs	r2, #1
 801b1ac:	6162      	str	r2, [r4, #20]
 801b1ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b1b0:	07d6      	lsls	r6, r2, #31
 801b1b2:	d404      	bmi.n	801b1be <setvbuf+0xde>
 801b1b4:	0598      	lsls	r0, r3, #22
 801b1b6:	d402      	bmi.n	801b1be <setvbuf+0xde>
 801b1b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b1ba:	f000 fa2d 	bl	801b618 <__retarget_lock_release_recursive>
 801b1be:	4628      	mov	r0, r5
 801b1c0:	b003      	add	sp, #12
 801b1c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b1c6:	2e00      	cmp	r6, #0
 801b1c8:	d0d8      	beq.n	801b17c <setvbuf+0x9c>
 801b1ca:	6a3b      	ldr	r3, [r7, #32]
 801b1cc:	b913      	cbnz	r3, 801b1d4 <setvbuf+0xf4>
 801b1ce:	4638      	mov	r0, r7
 801b1d0:	f7ff fee0 	bl	801af94 <__sinit>
 801b1d4:	f1b8 0f01 	cmp.w	r8, #1
 801b1d8:	bf08      	it	eq
 801b1da:	89a3      	ldrheq	r3, [r4, #12]
 801b1dc:	6026      	str	r6, [r4, #0]
 801b1de:	bf04      	itt	eq
 801b1e0:	f043 0301 	orreq.w	r3, r3, #1
 801b1e4:	81a3      	strheq	r3, [r4, #12]
 801b1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1ea:	f013 0208 	ands.w	r2, r3, #8
 801b1ee:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801b1f2:	d01e      	beq.n	801b232 <setvbuf+0x152>
 801b1f4:	07d9      	lsls	r1, r3, #31
 801b1f6:	bf41      	itttt	mi
 801b1f8:	2200      	movmi	r2, #0
 801b1fa:	426d      	negmi	r5, r5
 801b1fc:	60a2      	strmi	r2, [r4, #8]
 801b1fe:	61a5      	strmi	r5, [r4, #24]
 801b200:	bf58      	it	pl
 801b202:	60a5      	strpl	r5, [r4, #8]
 801b204:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b206:	07d2      	lsls	r2, r2, #31
 801b208:	d401      	bmi.n	801b20e <setvbuf+0x12e>
 801b20a:	059b      	lsls	r3, r3, #22
 801b20c:	d513      	bpl.n	801b236 <setvbuf+0x156>
 801b20e:	2500      	movs	r5, #0
 801b210:	e7d5      	b.n	801b1be <setvbuf+0xde>
 801b212:	4648      	mov	r0, r9
 801b214:	f000 fa5a 	bl	801b6cc <malloc>
 801b218:	4606      	mov	r6, r0
 801b21a:	2800      	cmp	r0, #0
 801b21c:	d0b8      	beq.n	801b190 <setvbuf+0xb0>
 801b21e:	89a3      	ldrh	r3, [r4, #12]
 801b220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b224:	81a3      	strh	r3, [r4, #12]
 801b226:	464d      	mov	r5, r9
 801b228:	e7cf      	b.n	801b1ca <setvbuf+0xea>
 801b22a:	2500      	movs	r5, #0
 801b22c:	e7b2      	b.n	801b194 <setvbuf+0xb4>
 801b22e:	46a9      	mov	r9, r5
 801b230:	e7f5      	b.n	801b21e <setvbuf+0x13e>
 801b232:	60a2      	str	r2, [r4, #8]
 801b234:	e7e6      	b.n	801b204 <setvbuf+0x124>
 801b236:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b238:	f000 f9ee 	bl	801b618 <__retarget_lock_release_recursive>
 801b23c:	e7e7      	b.n	801b20e <setvbuf+0x12e>
 801b23e:	f04f 35ff 	mov.w	r5, #4294967295
 801b242:	e7bc      	b.n	801b1be <setvbuf+0xde>
 801b244:	24000258 	.word	0x24000258

0801b248 <sniprintf>:
 801b248:	b40c      	push	{r2, r3}
 801b24a:	b530      	push	{r4, r5, lr}
 801b24c:	4b18      	ldr	r3, [pc, #96]	@ (801b2b0 <sniprintf+0x68>)
 801b24e:	1e0c      	subs	r4, r1, #0
 801b250:	681d      	ldr	r5, [r3, #0]
 801b252:	b09d      	sub	sp, #116	@ 0x74
 801b254:	da08      	bge.n	801b268 <sniprintf+0x20>
 801b256:	238b      	movs	r3, #139	@ 0x8b
 801b258:	602b      	str	r3, [r5, #0]
 801b25a:	f04f 30ff 	mov.w	r0, #4294967295
 801b25e:	b01d      	add	sp, #116	@ 0x74
 801b260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b264:	b002      	add	sp, #8
 801b266:	4770      	bx	lr
 801b268:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b26c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b270:	f04f 0300 	mov.w	r3, #0
 801b274:	931b      	str	r3, [sp, #108]	@ 0x6c
 801b276:	bf14      	ite	ne
 801b278:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b27c:	4623      	moveq	r3, r4
 801b27e:	9304      	str	r3, [sp, #16]
 801b280:	9307      	str	r3, [sp, #28]
 801b282:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b286:	9002      	str	r0, [sp, #8]
 801b288:	9006      	str	r0, [sp, #24]
 801b28a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b28e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b290:	ab21      	add	r3, sp, #132	@ 0x84
 801b292:	a902      	add	r1, sp, #8
 801b294:	4628      	mov	r0, r5
 801b296:	9301      	str	r3, [sp, #4]
 801b298:	f000 fb2e 	bl	801b8f8 <_svfiprintf_r>
 801b29c:	1c43      	adds	r3, r0, #1
 801b29e:	bfbc      	itt	lt
 801b2a0:	238b      	movlt	r3, #139	@ 0x8b
 801b2a2:	602b      	strlt	r3, [r5, #0]
 801b2a4:	2c00      	cmp	r4, #0
 801b2a6:	d0da      	beq.n	801b25e <sniprintf+0x16>
 801b2a8:	9b02      	ldr	r3, [sp, #8]
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	701a      	strb	r2, [r3, #0]
 801b2ae:	e7d6      	b.n	801b25e <sniprintf+0x16>
 801b2b0:	24000258 	.word	0x24000258

0801b2b4 <__sread>:
 801b2b4:	b510      	push	{r4, lr}
 801b2b6:	460c      	mov	r4, r1
 801b2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2bc:	f000 f95c 	bl	801b578 <_read_r>
 801b2c0:	2800      	cmp	r0, #0
 801b2c2:	bfab      	itete	ge
 801b2c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b2c6:	89a3      	ldrhlt	r3, [r4, #12]
 801b2c8:	181b      	addge	r3, r3, r0
 801b2ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b2ce:	bfac      	ite	ge
 801b2d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b2d2:	81a3      	strhlt	r3, [r4, #12]
 801b2d4:	bd10      	pop	{r4, pc}

0801b2d6 <__swrite>:
 801b2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2da:	461f      	mov	r7, r3
 801b2dc:	898b      	ldrh	r3, [r1, #12]
 801b2de:	05db      	lsls	r3, r3, #23
 801b2e0:	4605      	mov	r5, r0
 801b2e2:	460c      	mov	r4, r1
 801b2e4:	4616      	mov	r6, r2
 801b2e6:	d505      	bpl.n	801b2f4 <__swrite+0x1e>
 801b2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2ec:	2302      	movs	r3, #2
 801b2ee:	2200      	movs	r2, #0
 801b2f0:	f000 f930 	bl	801b554 <_lseek_r>
 801b2f4:	89a3      	ldrh	r3, [r4, #12]
 801b2f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b2fe:	81a3      	strh	r3, [r4, #12]
 801b300:	4632      	mov	r2, r6
 801b302:	463b      	mov	r3, r7
 801b304:	4628      	mov	r0, r5
 801b306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b30a:	f000 b947 	b.w	801b59c <_write_r>

0801b30e <__sseek>:
 801b30e:	b510      	push	{r4, lr}
 801b310:	460c      	mov	r4, r1
 801b312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b316:	f000 f91d 	bl	801b554 <_lseek_r>
 801b31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b31e:	1c42      	adds	r2, r0, #1
 801b320:	bf0b      	itete	eq
 801b322:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b326:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b32a:	81a3      	strheq	r3, [r4, #12]
 801b32c:	81a3      	strhne	r3, [r4, #12]
 801b32e:	bf18      	it	ne
 801b330:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b332:	bd10      	pop	{r4, pc}

0801b334 <__sclose>:
 801b334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b338:	f000 b8fc 	b.w	801b534 <_close_r>

0801b33c <_vsniprintf_r>:
 801b33c:	b530      	push	{r4, r5, lr}
 801b33e:	4614      	mov	r4, r2
 801b340:	2c00      	cmp	r4, #0
 801b342:	b09b      	sub	sp, #108	@ 0x6c
 801b344:	4605      	mov	r5, r0
 801b346:	461a      	mov	r2, r3
 801b348:	da05      	bge.n	801b356 <_vsniprintf_r+0x1a>
 801b34a:	238b      	movs	r3, #139	@ 0x8b
 801b34c:	6003      	str	r3, [r0, #0]
 801b34e:	f04f 30ff 	mov.w	r0, #4294967295
 801b352:	b01b      	add	sp, #108	@ 0x6c
 801b354:	bd30      	pop	{r4, r5, pc}
 801b356:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b35a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b35e:	f04f 0300 	mov.w	r3, #0
 801b362:	9319      	str	r3, [sp, #100]	@ 0x64
 801b364:	bf14      	ite	ne
 801b366:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b36a:	4623      	moveq	r3, r4
 801b36c:	9302      	str	r3, [sp, #8]
 801b36e:	9305      	str	r3, [sp, #20]
 801b370:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b374:	9100      	str	r1, [sp, #0]
 801b376:	9104      	str	r1, [sp, #16]
 801b378:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b37c:	4669      	mov	r1, sp
 801b37e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b380:	f000 faba 	bl	801b8f8 <_svfiprintf_r>
 801b384:	1c43      	adds	r3, r0, #1
 801b386:	bfbc      	itt	lt
 801b388:	238b      	movlt	r3, #139	@ 0x8b
 801b38a:	602b      	strlt	r3, [r5, #0]
 801b38c:	2c00      	cmp	r4, #0
 801b38e:	d0e0      	beq.n	801b352 <_vsniprintf_r+0x16>
 801b390:	9b00      	ldr	r3, [sp, #0]
 801b392:	2200      	movs	r2, #0
 801b394:	701a      	strb	r2, [r3, #0]
 801b396:	e7dc      	b.n	801b352 <_vsniprintf_r+0x16>

0801b398 <vsniprintf>:
 801b398:	b507      	push	{r0, r1, r2, lr}
 801b39a:	9300      	str	r3, [sp, #0]
 801b39c:	4613      	mov	r3, r2
 801b39e:	460a      	mov	r2, r1
 801b3a0:	4601      	mov	r1, r0
 801b3a2:	4803      	ldr	r0, [pc, #12]	@ (801b3b0 <vsniprintf+0x18>)
 801b3a4:	6800      	ldr	r0, [r0, #0]
 801b3a6:	f7ff ffc9 	bl	801b33c <_vsniprintf_r>
 801b3aa:	b003      	add	sp, #12
 801b3ac:	f85d fb04 	ldr.w	pc, [sp], #4
 801b3b0:	24000258 	.word	0x24000258

0801b3b4 <__swbuf_r>:
 801b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3b6:	460e      	mov	r6, r1
 801b3b8:	4614      	mov	r4, r2
 801b3ba:	4605      	mov	r5, r0
 801b3bc:	b118      	cbz	r0, 801b3c6 <__swbuf_r+0x12>
 801b3be:	6a03      	ldr	r3, [r0, #32]
 801b3c0:	b90b      	cbnz	r3, 801b3c6 <__swbuf_r+0x12>
 801b3c2:	f7ff fde7 	bl	801af94 <__sinit>
 801b3c6:	69a3      	ldr	r3, [r4, #24]
 801b3c8:	60a3      	str	r3, [r4, #8]
 801b3ca:	89a3      	ldrh	r3, [r4, #12]
 801b3cc:	071a      	lsls	r2, r3, #28
 801b3ce:	d501      	bpl.n	801b3d4 <__swbuf_r+0x20>
 801b3d0:	6923      	ldr	r3, [r4, #16]
 801b3d2:	b943      	cbnz	r3, 801b3e6 <__swbuf_r+0x32>
 801b3d4:	4621      	mov	r1, r4
 801b3d6:	4628      	mov	r0, r5
 801b3d8:	f000 f82a 	bl	801b430 <__swsetup_r>
 801b3dc:	b118      	cbz	r0, 801b3e6 <__swbuf_r+0x32>
 801b3de:	f04f 37ff 	mov.w	r7, #4294967295
 801b3e2:	4638      	mov	r0, r7
 801b3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3e6:	6823      	ldr	r3, [r4, #0]
 801b3e8:	6922      	ldr	r2, [r4, #16]
 801b3ea:	1a98      	subs	r0, r3, r2
 801b3ec:	6963      	ldr	r3, [r4, #20]
 801b3ee:	b2f6      	uxtb	r6, r6
 801b3f0:	4283      	cmp	r3, r0
 801b3f2:	4637      	mov	r7, r6
 801b3f4:	dc05      	bgt.n	801b402 <__swbuf_r+0x4e>
 801b3f6:	4621      	mov	r1, r4
 801b3f8:	4628      	mov	r0, r5
 801b3fa:	f000 fecb 	bl	801c194 <_fflush_r>
 801b3fe:	2800      	cmp	r0, #0
 801b400:	d1ed      	bne.n	801b3de <__swbuf_r+0x2a>
 801b402:	68a3      	ldr	r3, [r4, #8]
 801b404:	3b01      	subs	r3, #1
 801b406:	60a3      	str	r3, [r4, #8]
 801b408:	6823      	ldr	r3, [r4, #0]
 801b40a:	1c5a      	adds	r2, r3, #1
 801b40c:	6022      	str	r2, [r4, #0]
 801b40e:	701e      	strb	r6, [r3, #0]
 801b410:	6962      	ldr	r2, [r4, #20]
 801b412:	1c43      	adds	r3, r0, #1
 801b414:	429a      	cmp	r2, r3
 801b416:	d004      	beq.n	801b422 <__swbuf_r+0x6e>
 801b418:	89a3      	ldrh	r3, [r4, #12]
 801b41a:	07db      	lsls	r3, r3, #31
 801b41c:	d5e1      	bpl.n	801b3e2 <__swbuf_r+0x2e>
 801b41e:	2e0a      	cmp	r6, #10
 801b420:	d1df      	bne.n	801b3e2 <__swbuf_r+0x2e>
 801b422:	4621      	mov	r1, r4
 801b424:	4628      	mov	r0, r5
 801b426:	f000 feb5 	bl	801c194 <_fflush_r>
 801b42a:	2800      	cmp	r0, #0
 801b42c:	d0d9      	beq.n	801b3e2 <__swbuf_r+0x2e>
 801b42e:	e7d6      	b.n	801b3de <__swbuf_r+0x2a>

0801b430 <__swsetup_r>:
 801b430:	b538      	push	{r3, r4, r5, lr}
 801b432:	4b28      	ldr	r3, [pc, #160]	@ (801b4d4 <__swsetup_r+0xa4>)
 801b434:	4605      	mov	r5, r0
 801b436:	6818      	ldr	r0, [r3, #0]
 801b438:	460c      	mov	r4, r1
 801b43a:	b118      	cbz	r0, 801b444 <__swsetup_r+0x14>
 801b43c:	6a03      	ldr	r3, [r0, #32]
 801b43e:	b90b      	cbnz	r3, 801b444 <__swsetup_r+0x14>
 801b440:	f7ff fda8 	bl	801af94 <__sinit>
 801b444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b448:	071a      	lsls	r2, r3, #28
 801b44a:	d421      	bmi.n	801b490 <__swsetup_r+0x60>
 801b44c:	06d8      	lsls	r0, r3, #27
 801b44e:	d407      	bmi.n	801b460 <__swsetup_r+0x30>
 801b450:	2209      	movs	r2, #9
 801b452:	602a      	str	r2, [r5, #0]
 801b454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b458:	81a3      	strh	r3, [r4, #12]
 801b45a:	f04f 30ff 	mov.w	r0, #4294967295
 801b45e:	e030      	b.n	801b4c2 <__swsetup_r+0x92>
 801b460:	0759      	lsls	r1, r3, #29
 801b462:	d512      	bpl.n	801b48a <__swsetup_r+0x5a>
 801b464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b466:	b141      	cbz	r1, 801b47a <__swsetup_r+0x4a>
 801b468:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b46c:	4299      	cmp	r1, r3
 801b46e:	d002      	beq.n	801b476 <__swsetup_r+0x46>
 801b470:	4628      	mov	r0, r5
 801b472:	f000 f8e1 	bl	801b638 <_free_r>
 801b476:	2300      	movs	r3, #0
 801b478:	6363      	str	r3, [r4, #52]	@ 0x34
 801b47a:	2200      	movs	r2, #0
 801b47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b480:	6062      	str	r2, [r4, #4]
 801b482:	6922      	ldr	r2, [r4, #16]
 801b484:	6022      	str	r2, [r4, #0]
 801b486:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b48a:	f043 0308 	orr.w	r3, r3, #8
 801b48e:	81a3      	strh	r3, [r4, #12]
 801b490:	6922      	ldr	r2, [r4, #16]
 801b492:	b93a      	cbnz	r2, 801b4a4 <__swsetup_r+0x74>
 801b494:	059a      	lsls	r2, r3, #22
 801b496:	d501      	bpl.n	801b49c <__swsetup_r+0x6c>
 801b498:	0618      	lsls	r0, r3, #24
 801b49a:	d503      	bpl.n	801b4a4 <__swsetup_r+0x74>
 801b49c:	4621      	mov	r1, r4
 801b49e:	4628      	mov	r0, r5
 801b4a0:	f000 fec4 	bl	801c22c <__smakebuf_r>
 801b4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4a8:	f013 0201 	ands.w	r2, r3, #1
 801b4ac:	d00a      	beq.n	801b4c4 <__swsetup_r+0x94>
 801b4ae:	2200      	movs	r2, #0
 801b4b0:	60a2      	str	r2, [r4, #8]
 801b4b2:	6962      	ldr	r2, [r4, #20]
 801b4b4:	4252      	negs	r2, r2
 801b4b6:	61a2      	str	r2, [r4, #24]
 801b4b8:	6922      	ldr	r2, [r4, #16]
 801b4ba:	b942      	cbnz	r2, 801b4ce <__swsetup_r+0x9e>
 801b4bc:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b4c0:	d1c8      	bne.n	801b454 <__swsetup_r+0x24>
 801b4c2:	bd38      	pop	{r3, r4, r5, pc}
 801b4c4:	0799      	lsls	r1, r3, #30
 801b4c6:	bf58      	it	pl
 801b4c8:	6962      	ldrpl	r2, [r4, #20]
 801b4ca:	60a2      	str	r2, [r4, #8]
 801b4cc:	e7f4      	b.n	801b4b8 <__swsetup_r+0x88>
 801b4ce:	2000      	movs	r0, #0
 801b4d0:	e7f7      	b.n	801b4c2 <__swsetup_r+0x92>
 801b4d2:	bf00      	nop
 801b4d4:	24000258 	.word	0x24000258

0801b4d8 <memset>:
 801b4d8:	4402      	add	r2, r0
 801b4da:	4603      	mov	r3, r0
 801b4dc:	4293      	cmp	r3, r2
 801b4de:	d100      	bne.n	801b4e2 <memset+0xa>
 801b4e0:	4770      	bx	lr
 801b4e2:	f803 1b01 	strb.w	r1, [r3], #1
 801b4e6:	e7f9      	b.n	801b4dc <memset+0x4>

0801b4e8 <strncmp>:
 801b4e8:	b510      	push	{r4, lr}
 801b4ea:	b16a      	cbz	r2, 801b508 <strncmp+0x20>
 801b4ec:	3901      	subs	r1, #1
 801b4ee:	1884      	adds	r4, r0, r2
 801b4f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b4f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b4f8:	429a      	cmp	r2, r3
 801b4fa:	d103      	bne.n	801b504 <strncmp+0x1c>
 801b4fc:	42a0      	cmp	r0, r4
 801b4fe:	d001      	beq.n	801b504 <strncmp+0x1c>
 801b500:	2a00      	cmp	r2, #0
 801b502:	d1f5      	bne.n	801b4f0 <strncmp+0x8>
 801b504:	1ad0      	subs	r0, r2, r3
 801b506:	bd10      	pop	{r4, pc}
 801b508:	4610      	mov	r0, r2
 801b50a:	e7fc      	b.n	801b506 <strncmp+0x1e>

0801b50c <strncpy>:
 801b50c:	b510      	push	{r4, lr}
 801b50e:	3901      	subs	r1, #1
 801b510:	4603      	mov	r3, r0
 801b512:	b132      	cbz	r2, 801b522 <strncpy+0x16>
 801b514:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b518:	f803 4b01 	strb.w	r4, [r3], #1
 801b51c:	3a01      	subs	r2, #1
 801b51e:	2c00      	cmp	r4, #0
 801b520:	d1f7      	bne.n	801b512 <strncpy+0x6>
 801b522:	441a      	add	r2, r3
 801b524:	2100      	movs	r1, #0
 801b526:	4293      	cmp	r3, r2
 801b528:	d100      	bne.n	801b52c <strncpy+0x20>
 801b52a:	bd10      	pop	{r4, pc}
 801b52c:	f803 1b01 	strb.w	r1, [r3], #1
 801b530:	e7f9      	b.n	801b526 <strncpy+0x1a>
	...

0801b534 <_close_r>:
 801b534:	b538      	push	{r3, r4, r5, lr}
 801b536:	4d06      	ldr	r5, [pc, #24]	@ (801b550 <_close_r+0x1c>)
 801b538:	2300      	movs	r3, #0
 801b53a:	4604      	mov	r4, r0
 801b53c:	4608      	mov	r0, r1
 801b53e:	602b      	str	r3, [r5, #0]
 801b540:	f7e8 fb06 	bl	8003b50 <_close>
 801b544:	1c43      	adds	r3, r0, #1
 801b546:	d102      	bne.n	801b54e <_close_r+0x1a>
 801b548:	682b      	ldr	r3, [r5, #0]
 801b54a:	b103      	cbz	r3, 801b54e <_close_r+0x1a>
 801b54c:	6023      	str	r3, [r4, #0]
 801b54e:	bd38      	pop	{r3, r4, r5, pc}
 801b550:	2401c510 	.word	0x2401c510

0801b554 <_lseek_r>:
 801b554:	b538      	push	{r3, r4, r5, lr}
 801b556:	4d07      	ldr	r5, [pc, #28]	@ (801b574 <_lseek_r+0x20>)
 801b558:	4604      	mov	r4, r0
 801b55a:	4608      	mov	r0, r1
 801b55c:	4611      	mov	r1, r2
 801b55e:	2200      	movs	r2, #0
 801b560:	602a      	str	r2, [r5, #0]
 801b562:	461a      	mov	r2, r3
 801b564:	f7e8 fb1b 	bl	8003b9e <_lseek>
 801b568:	1c43      	adds	r3, r0, #1
 801b56a:	d102      	bne.n	801b572 <_lseek_r+0x1e>
 801b56c:	682b      	ldr	r3, [r5, #0]
 801b56e:	b103      	cbz	r3, 801b572 <_lseek_r+0x1e>
 801b570:	6023      	str	r3, [r4, #0]
 801b572:	bd38      	pop	{r3, r4, r5, pc}
 801b574:	2401c510 	.word	0x2401c510

0801b578 <_read_r>:
 801b578:	b538      	push	{r3, r4, r5, lr}
 801b57a:	4d07      	ldr	r5, [pc, #28]	@ (801b598 <_read_r+0x20>)
 801b57c:	4604      	mov	r4, r0
 801b57e:	4608      	mov	r0, r1
 801b580:	4611      	mov	r1, r2
 801b582:	2200      	movs	r2, #0
 801b584:	602a      	str	r2, [r5, #0]
 801b586:	461a      	mov	r2, r3
 801b588:	f7e8 fa92 	bl	8003ab0 <_read>
 801b58c:	1c43      	adds	r3, r0, #1
 801b58e:	d102      	bne.n	801b596 <_read_r+0x1e>
 801b590:	682b      	ldr	r3, [r5, #0]
 801b592:	b103      	cbz	r3, 801b596 <_read_r+0x1e>
 801b594:	6023      	str	r3, [r4, #0]
 801b596:	bd38      	pop	{r3, r4, r5, pc}
 801b598:	2401c510 	.word	0x2401c510

0801b59c <_write_r>:
 801b59c:	b538      	push	{r3, r4, r5, lr}
 801b59e:	4d07      	ldr	r5, [pc, #28]	@ (801b5bc <_write_r+0x20>)
 801b5a0:	4604      	mov	r4, r0
 801b5a2:	4608      	mov	r0, r1
 801b5a4:	4611      	mov	r1, r2
 801b5a6:	2200      	movs	r2, #0
 801b5a8:	602a      	str	r2, [r5, #0]
 801b5aa:	461a      	mov	r2, r3
 801b5ac:	f7e8 fa9d 	bl	8003aea <_write>
 801b5b0:	1c43      	adds	r3, r0, #1
 801b5b2:	d102      	bne.n	801b5ba <_write_r+0x1e>
 801b5b4:	682b      	ldr	r3, [r5, #0]
 801b5b6:	b103      	cbz	r3, 801b5ba <_write_r+0x1e>
 801b5b8:	6023      	str	r3, [r4, #0]
 801b5ba:	bd38      	pop	{r3, r4, r5, pc}
 801b5bc:	2401c510 	.word	0x2401c510

0801b5c0 <__errno>:
 801b5c0:	4b01      	ldr	r3, [pc, #4]	@ (801b5c8 <__errno+0x8>)
 801b5c2:	6818      	ldr	r0, [r3, #0]
 801b5c4:	4770      	bx	lr
 801b5c6:	bf00      	nop
 801b5c8:	24000258 	.word	0x24000258

0801b5cc <__libc_init_array>:
 801b5cc:	b570      	push	{r4, r5, r6, lr}
 801b5ce:	4b0d      	ldr	r3, [pc, #52]	@ (801b604 <__libc_init_array+0x38>)
 801b5d0:	4d0d      	ldr	r5, [pc, #52]	@ (801b608 <__libc_init_array+0x3c>)
 801b5d2:	1b5b      	subs	r3, r3, r5
 801b5d4:	109c      	asrs	r4, r3, #2
 801b5d6:	2600      	movs	r6, #0
 801b5d8:	42a6      	cmp	r6, r4
 801b5da:	d109      	bne.n	801b5f0 <__libc_init_array+0x24>
 801b5dc:	f001 f85c 	bl	801c698 <_init>
 801b5e0:	4d0a      	ldr	r5, [pc, #40]	@ (801b60c <__libc_init_array+0x40>)
 801b5e2:	4b0b      	ldr	r3, [pc, #44]	@ (801b610 <__libc_init_array+0x44>)
 801b5e4:	1b5b      	subs	r3, r3, r5
 801b5e6:	109c      	asrs	r4, r3, #2
 801b5e8:	2600      	movs	r6, #0
 801b5ea:	42a6      	cmp	r6, r4
 801b5ec:	d105      	bne.n	801b5fa <__libc_init_array+0x2e>
 801b5ee:	bd70      	pop	{r4, r5, r6, pc}
 801b5f0:	f855 3b04 	ldr.w	r3, [r5], #4
 801b5f4:	4798      	blx	r3
 801b5f6:	3601      	adds	r6, #1
 801b5f8:	e7ee      	b.n	801b5d8 <__libc_init_array+0xc>
 801b5fa:	f855 3b04 	ldr.w	r3, [r5], #4
 801b5fe:	4798      	blx	r3
 801b600:	3601      	adds	r6, #1
 801b602:	e7f2      	b.n	801b5ea <__libc_init_array+0x1e>
 801b604:	0801e6e4 	.word	0x0801e6e4
 801b608:	0801e6e4 	.word	0x0801e6e4
 801b60c:	0801e6e4 	.word	0x0801e6e4
 801b610:	0801e6e8 	.word	0x0801e6e8

0801b614 <__retarget_lock_init_recursive>:
 801b614:	4770      	bx	lr

0801b616 <__retarget_lock_acquire_recursive>:
 801b616:	4770      	bx	lr

0801b618 <__retarget_lock_release_recursive>:
 801b618:	4770      	bx	lr

0801b61a <memcpy>:
 801b61a:	440a      	add	r2, r1
 801b61c:	4291      	cmp	r1, r2
 801b61e:	f100 33ff 	add.w	r3, r0, #4294967295
 801b622:	d100      	bne.n	801b626 <memcpy+0xc>
 801b624:	4770      	bx	lr
 801b626:	b510      	push	{r4, lr}
 801b628:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b62c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b630:	4291      	cmp	r1, r2
 801b632:	d1f9      	bne.n	801b628 <memcpy+0xe>
 801b634:	bd10      	pop	{r4, pc}
	...

0801b638 <_free_r>:
 801b638:	b538      	push	{r3, r4, r5, lr}
 801b63a:	4605      	mov	r5, r0
 801b63c:	2900      	cmp	r1, #0
 801b63e:	d041      	beq.n	801b6c4 <_free_r+0x8c>
 801b640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b644:	1f0c      	subs	r4, r1, #4
 801b646:	2b00      	cmp	r3, #0
 801b648:	bfb8      	it	lt
 801b64a:	18e4      	addlt	r4, r4, r3
 801b64c:	f000 f8e8 	bl	801b820 <__malloc_lock>
 801b650:	4a1d      	ldr	r2, [pc, #116]	@ (801b6c8 <_free_r+0x90>)
 801b652:	6813      	ldr	r3, [r2, #0]
 801b654:	b933      	cbnz	r3, 801b664 <_free_r+0x2c>
 801b656:	6063      	str	r3, [r4, #4]
 801b658:	6014      	str	r4, [r2, #0]
 801b65a:	4628      	mov	r0, r5
 801b65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b660:	f000 b8e4 	b.w	801b82c <__malloc_unlock>
 801b664:	42a3      	cmp	r3, r4
 801b666:	d908      	bls.n	801b67a <_free_r+0x42>
 801b668:	6820      	ldr	r0, [r4, #0]
 801b66a:	1821      	adds	r1, r4, r0
 801b66c:	428b      	cmp	r3, r1
 801b66e:	bf01      	itttt	eq
 801b670:	6819      	ldreq	r1, [r3, #0]
 801b672:	685b      	ldreq	r3, [r3, #4]
 801b674:	1809      	addeq	r1, r1, r0
 801b676:	6021      	streq	r1, [r4, #0]
 801b678:	e7ed      	b.n	801b656 <_free_r+0x1e>
 801b67a:	461a      	mov	r2, r3
 801b67c:	685b      	ldr	r3, [r3, #4]
 801b67e:	b10b      	cbz	r3, 801b684 <_free_r+0x4c>
 801b680:	42a3      	cmp	r3, r4
 801b682:	d9fa      	bls.n	801b67a <_free_r+0x42>
 801b684:	6811      	ldr	r1, [r2, #0]
 801b686:	1850      	adds	r0, r2, r1
 801b688:	42a0      	cmp	r0, r4
 801b68a:	d10b      	bne.n	801b6a4 <_free_r+0x6c>
 801b68c:	6820      	ldr	r0, [r4, #0]
 801b68e:	4401      	add	r1, r0
 801b690:	1850      	adds	r0, r2, r1
 801b692:	4283      	cmp	r3, r0
 801b694:	6011      	str	r1, [r2, #0]
 801b696:	d1e0      	bne.n	801b65a <_free_r+0x22>
 801b698:	6818      	ldr	r0, [r3, #0]
 801b69a:	685b      	ldr	r3, [r3, #4]
 801b69c:	6053      	str	r3, [r2, #4]
 801b69e:	4408      	add	r0, r1
 801b6a0:	6010      	str	r0, [r2, #0]
 801b6a2:	e7da      	b.n	801b65a <_free_r+0x22>
 801b6a4:	d902      	bls.n	801b6ac <_free_r+0x74>
 801b6a6:	230c      	movs	r3, #12
 801b6a8:	602b      	str	r3, [r5, #0]
 801b6aa:	e7d6      	b.n	801b65a <_free_r+0x22>
 801b6ac:	6820      	ldr	r0, [r4, #0]
 801b6ae:	1821      	adds	r1, r4, r0
 801b6b0:	428b      	cmp	r3, r1
 801b6b2:	bf04      	itt	eq
 801b6b4:	6819      	ldreq	r1, [r3, #0]
 801b6b6:	685b      	ldreq	r3, [r3, #4]
 801b6b8:	6063      	str	r3, [r4, #4]
 801b6ba:	bf04      	itt	eq
 801b6bc:	1809      	addeq	r1, r1, r0
 801b6be:	6021      	streq	r1, [r4, #0]
 801b6c0:	6054      	str	r4, [r2, #4]
 801b6c2:	e7ca      	b.n	801b65a <_free_r+0x22>
 801b6c4:	bd38      	pop	{r3, r4, r5, pc}
 801b6c6:	bf00      	nop
 801b6c8:	2401c51c 	.word	0x2401c51c

0801b6cc <malloc>:
 801b6cc:	4b02      	ldr	r3, [pc, #8]	@ (801b6d8 <malloc+0xc>)
 801b6ce:	4601      	mov	r1, r0
 801b6d0:	6818      	ldr	r0, [r3, #0]
 801b6d2:	f000 b825 	b.w	801b720 <_malloc_r>
 801b6d6:	bf00      	nop
 801b6d8:	24000258 	.word	0x24000258

0801b6dc <sbrk_aligned>:
 801b6dc:	b570      	push	{r4, r5, r6, lr}
 801b6de:	4e0f      	ldr	r6, [pc, #60]	@ (801b71c <sbrk_aligned+0x40>)
 801b6e0:	460c      	mov	r4, r1
 801b6e2:	6831      	ldr	r1, [r6, #0]
 801b6e4:	4605      	mov	r5, r0
 801b6e6:	b911      	cbnz	r1, 801b6ee <sbrk_aligned+0x12>
 801b6e8:	f000 fe14 	bl	801c314 <_sbrk_r>
 801b6ec:	6030      	str	r0, [r6, #0]
 801b6ee:	4621      	mov	r1, r4
 801b6f0:	4628      	mov	r0, r5
 801b6f2:	f000 fe0f 	bl	801c314 <_sbrk_r>
 801b6f6:	1c43      	adds	r3, r0, #1
 801b6f8:	d103      	bne.n	801b702 <sbrk_aligned+0x26>
 801b6fa:	f04f 34ff 	mov.w	r4, #4294967295
 801b6fe:	4620      	mov	r0, r4
 801b700:	bd70      	pop	{r4, r5, r6, pc}
 801b702:	1cc4      	adds	r4, r0, #3
 801b704:	f024 0403 	bic.w	r4, r4, #3
 801b708:	42a0      	cmp	r0, r4
 801b70a:	d0f8      	beq.n	801b6fe <sbrk_aligned+0x22>
 801b70c:	1a21      	subs	r1, r4, r0
 801b70e:	4628      	mov	r0, r5
 801b710:	f000 fe00 	bl	801c314 <_sbrk_r>
 801b714:	3001      	adds	r0, #1
 801b716:	d1f2      	bne.n	801b6fe <sbrk_aligned+0x22>
 801b718:	e7ef      	b.n	801b6fa <sbrk_aligned+0x1e>
 801b71a:	bf00      	nop
 801b71c:	2401c518 	.word	0x2401c518

0801b720 <_malloc_r>:
 801b720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b724:	1ccd      	adds	r5, r1, #3
 801b726:	f025 0503 	bic.w	r5, r5, #3
 801b72a:	3508      	adds	r5, #8
 801b72c:	2d0c      	cmp	r5, #12
 801b72e:	bf38      	it	cc
 801b730:	250c      	movcc	r5, #12
 801b732:	2d00      	cmp	r5, #0
 801b734:	4606      	mov	r6, r0
 801b736:	db01      	blt.n	801b73c <_malloc_r+0x1c>
 801b738:	42a9      	cmp	r1, r5
 801b73a:	d904      	bls.n	801b746 <_malloc_r+0x26>
 801b73c:	230c      	movs	r3, #12
 801b73e:	6033      	str	r3, [r6, #0]
 801b740:	2000      	movs	r0, #0
 801b742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b81c <_malloc_r+0xfc>
 801b74a:	f000 f869 	bl	801b820 <__malloc_lock>
 801b74e:	f8d8 3000 	ldr.w	r3, [r8]
 801b752:	461c      	mov	r4, r3
 801b754:	bb44      	cbnz	r4, 801b7a8 <_malloc_r+0x88>
 801b756:	4629      	mov	r1, r5
 801b758:	4630      	mov	r0, r6
 801b75a:	f7ff ffbf 	bl	801b6dc <sbrk_aligned>
 801b75e:	1c43      	adds	r3, r0, #1
 801b760:	4604      	mov	r4, r0
 801b762:	d158      	bne.n	801b816 <_malloc_r+0xf6>
 801b764:	f8d8 4000 	ldr.w	r4, [r8]
 801b768:	4627      	mov	r7, r4
 801b76a:	2f00      	cmp	r7, #0
 801b76c:	d143      	bne.n	801b7f6 <_malloc_r+0xd6>
 801b76e:	2c00      	cmp	r4, #0
 801b770:	d04b      	beq.n	801b80a <_malloc_r+0xea>
 801b772:	6823      	ldr	r3, [r4, #0]
 801b774:	4639      	mov	r1, r7
 801b776:	4630      	mov	r0, r6
 801b778:	eb04 0903 	add.w	r9, r4, r3
 801b77c:	f000 fdca 	bl	801c314 <_sbrk_r>
 801b780:	4581      	cmp	r9, r0
 801b782:	d142      	bne.n	801b80a <_malloc_r+0xea>
 801b784:	6821      	ldr	r1, [r4, #0]
 801b786:	1a6d      	subs	r5, r5, r1
 801b788:	4629      	mov	r1, r5
 801b78a:	4630      	mov	r0, r6
 801b78c:	f7ff ffa6 	bl	801b6dc <sbrk_aligned>
 801b790:	3001      	adds	r0, #1
 801b792:	d03a      	beq.n	801b80a <_malloc_r+0xea>
 801b794:	6823      	ldr	r3, [r4, #0]
 801b796:	442b      	add	r3, r5
 801b798:	6023      	str	r3, [r4, #0]
 801b79a:	f8d8 3000 	ldr.w	r3, [r8]
 801b79e:	685a      	ldr	r2, [r3, #4]
 801b7a0:	bb62      	cbnz	r2, 801b7fc <_malloc_r+0xdc>
 801b7a2:	f8c8 7000 	str.w	r7, [r8]
 801b7a6:	e00f      	b.n	801b7c8 <_malloc_r+0xa8>
 801b7a8:	6822      	ldr	r2, [r4, #0]
 801b7aa:	1b52      	subs	r2, r2, r5
 801b7ac:	d420      	bmi.n	801b7f0 <_malloc_r+0xd0>
 801b7ae:	2a0b      	cmp	r2, #11
 801b7b0:	d917      	bls.n	801b7e2 <_malloc_r+0xc2>
 801b7b2:	1961      	adds	r1, r4, r5
 801b7b4:	42a3      	cmp	r3, r4
 801b7b6:	6025      	str	r5, [r4, #0]
 801b7b8:	bf18      	it	ne
 801b7ba:	6059      	strne	r1, [r3, #4]
 801b7bc:	6863      	ldr	r3, [r4, #4]
 801b7be:	bf08      	it	eq
 801b7c0:	f8c8 1000 	streq.w	r1, [r8]
 801b7c4:	5162      	str	r2, [r4, r5]
 801b7c6:	604b      	str	r3, [r1, #4]
 801b7c8:	4630      	mov	r0, r6
 801b7ca:	f000 f82f 	bl	801b82c <__malloc_unlock>
 801b7ce:	f104 000b 	add.w	r0, r4, #11
 801b7d2:	1d23      	adds	r3, r4, #4
 801b7d4:	f020 0007 	bic.w	r0, r0, #7
 801b7d8:	1ac2      	subs	r2, r0, r3
 801b7da:	bf1c      	itt	ne
 801b7dc:	1a1b      	subne	r3, r3, r0
 801b7de:	50a3      	strne	r3, [r4, r2]
 801b7e0:	e7af      	b.n	801b742 <_malloc_r+0x22>
 801b7e2:	6862      	ldr	r2, [r4, #4]
 801b7e4:	42a3      	cmp	r3, r4
 801b7e6:	bf0c      	ite	eq
 801b7e8:	f8c8 2000 	streq.w	r2, [r8]
 801b7ec:	605a      	strne	r2, [r3, #4]
 801b7ee:	e7eb      	b.n	801b7c8 <_malloc_r+0xa8>
 801b7f0:	4623      	mov	r3, r4
 801b7f2:	6864      	ldr	r4, [r4, #4]
 801b7f4:	e7ae      	b.n	801b754 <_malloc_r+0x34>
 801b7f6:	463c      	mov	r4, r7
 801b7f8:	687f      	ldr	r7, [r7, #4]
 801b7fa:	e7b6      	b.n	801b76a <_malloc_r+0x4a>
 801b7fc:	461a      	mov	r2, r3
 801b7fe:	685b      	ldr	r3, [r3, #4]
 801b800:	42a3      	cmp	r3, r4
 801b802:	d1fb      	bne.n	801b7fc <_malloc_r+0xdc>
 801b804:	2300      	movs	r3, #0
 801b806:	6053      	str	r3, [r2, #4]
 801b808:	e7de      	b.n	801b7c8 <_malloc_r+0xa8>
 801b80a:	230c      	movs	r3, #12
 801b80c:	6033      	str	r3, [r6, #0]
 801b80e:	4630      	mov	r0, r6
 801b810:	f000 f80c 	bl	801b82c <__malloc_unlock>
 801b814:	e794      	b.n	801b740 <_malloc_r+0x20>
 801b816:	6005      	str	r5, [r0, #0]
 801b818:	e7d6      	b.n	801b7c8 <_malloc_r+0xa8>
 801b81a:	bf00      	nop
 801b81c:	2401c51c 	.word	0x2401c51c

0801b820 <__malloc_lock>:
 801b820:	4801      	ldr	r0, [pc, #4]	@ (801b828 <__malloc_lock+0x8>)
 801b822:	f7ff bef8 	b.w	801b616 <__retarget_lock_acquire_recursive>
 801b826:	bf00      	nop
 801b828:	2401c514 	.word	0x2401c514

0801b82c <__malloc_unlock>:
 801b82c:	4801      	ldr	r0, [pc, #4]	@ (801b834 <__malloc_unlock+0x8>)
 801b82e:	f7ff bef3 	b.w	801b618 <__retarget_lock_release_recursive>
 801b832:	bf00      	nop
 801b834:	2401c514 	.word	0x2401c514

0801b838 <__ssputs_r>:
 801b838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b83c:	688e      	ldr	r6, [r1, #8]
 801b83e:	461f      	mov	r7, r3
 801b840:	42be      	cmp	r6, r7
 801b842:	4682      	mov	sl, r0
 801b844:	460c      	mov	r4, r1
 801b846:	4690      	mov	r8, r2
 801b848:	4633      	mov	r3, r6
 801b84a:	d853      	bhi.n	801b8f4 <__ssputs_r+0xbc>
 801b84c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801b850:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 801b854:	d02b      	beq.n	801b8ae <__ssputs_r+0x76>
 801b856:	6965      	ldr	r5, [r4, #20]
 801b858:	6823      	ldr	r3, [r4, #0]
 801b85a:	6909      	ldr	r1, [r1, #16]
 801b85c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b860:	eba3 0901 	sub.w	r9, r3, r1
 801b864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b868:	1c7b      	adds	r3, r7, #1
 801b86a:	106d      	asrs	r5, r5, #1
 801b86c:	444b      	add	r3, r9
 801b86e:	42ab      	cmp	r3, r5
 801b870:	462a      	mov	r2, r5
 801b872:	bf84      	itt	hi
 801b874:	461d      	movhi	r5, r3
 801b876:	462a      	movhi	r2, r5
 801b878:	0543      	lsls	r3, r0, #21
 801b87a:	d527      	bpl.n	801b8cc <__ssputs_r+0x94>
 801b87c:	4611      	mov	r1, r2
 801b87e:	4650      	mov	r0, sl
 801b880:	f7ff ff4e 	bl	801b720 <_malloc_r>
 801b884:	4606      	mov	r6, r0
 801b886:	b358      	cbz	r0, 801b8e0 <__ssputs_r+0xa8>
 801b888:	6921      	ldr	r1, [r4, #16]
 801b88a:	464a      	mov	r2, r9
 801b88c:	f7ff fec5 	bl	801b61a <memcpy>
 801b890:	89a3      	ldrh	r3, [r4, #12]
 801b892:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b89a:	81a3      	strh	r3, [r4, #12]
 801b89c:	6126      	str	r6, [r4, #16]
 801b89e:	6165      	str	r5, [r4, #20]
 801b8a0:	444e      	add	r6, r9
 801b8a2:	eba5 0509 	sub.w	r5, r5, r9
 801b8a6:	6026      	str	r6, [r4, #0]
 801b8a8:	60a5      	str	r5, [r4, #8]
 801b8aa:	463e      	mov	r6, r7
 801b8ac:	463b      	mov	r3, r7
 801b8ae:	461f      	mov	r7, r3
 801b8b0:	6820      	ldr	r0, [r4, #0]
 801b8b2:	463a      	mov	r2, r7
 801b8b4:	4641      	mov	r1, r8
 801b8b6:	f000 fcf2 	bl	801c29e <memmove>
 801b8ba:	68a3      	ldr	r3, [r4, #8]
 801b8bc:	1b9b      	subs	r3, r3, r6
 801b8be:	60a3      	str	r3, [r4, #8]
 801b8c0:	6823      	ldr	r3, [r4, #0]
 801b8c2:	443b      	add	r3, r7
 801b8c4:	6023      	str	r3, [r4, #0]
 801b8c6:	2000      	movs	r0, #0
 801b8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8cc:	4650      	mov	r0, sl
 801b8ce:	f000 fd31 	bl	801c334 <_realloc_r>
 801b8d2:	4606      	mov	r6, r0
 801b8d4:	2800      	cmp	r0, #0
 801b8d6:	d1e1      	bne.n	801b89c <__ssputs_r+0x64>
 801b8d8:	6921      	ldr	r1, [r4, #16]
 801b8da:	4650      	mov	r0, sl
 801b8dc:	f7ff feac 	bl	801b638 <_free_r>
 801b8e0:	230c      	movs	r3, #12
 801b8e2:	f8ca 3000 	str.w	r3, [sl]
 801b8e6:	89a3      	ldrh	r3, [r4, #12]
 801b8e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b8ec:	81a3      	strh	r3, [r4, #12]
 801b8ee:	f04f 30ff 	mov.w	r0, #4294967295
 801b8f2:	e7e9      	b.n	801b8c8 <__ssputs_r+0x90>
 801b8f4:	463e      	mov	r6, r7
 801b8f6:	e7db      	b.n	801b8b0 <__ssputs_r+0x78>

0801b8f8 <_svfiprintf_r>:
 801b8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8fc:	4698      	mov	r8, r3
 801b8fe:	898b      	ldrh	r3, [r1, #12]
 801b900:	061b      	lsls	r3, r3, #24
 801b902:	b09d      	sub	sp, #116	@ 0x74
 801b904:	4607      	mov	r7, r0
 801b906:	460d      	mov	r5, r1
 801b908:	4614      	mov	r4, r2
 801b90a:	d510      	bpl.n	801b92e <_svfiprintf_r+0x36>
 801b90c:	690b      	ldr	r3, [r1, #16]
 801b90e:	b973      	cbnz	r3, 801b92e <_svfiprintf_r+0x36>
 801b910:	2140      	movs	r1, #64	@ 0x40
 801b912:	f7ff ff05 	bl	801b720 <_malloc_r>
 801b916:	6028      	str	r0, [r5, #0]
 801b918:	6128      	str	r0, [r5, #16]
 801b91a:	b930      	cbnz	r0, 801b92a <_svfiprintf_r+0x32>
 801b91c:	230c      	movs	r3, #12
 801b91e:	603b      	str	r3, [r7, #0]
 801b920:	f04f 30ff 	mov.w	r0, #4294967295
 801b924:	b01d      	add	sp, #116	@ 0x74
 801b926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b92a:	2340      	movs	r3, #64	@ 0x40
 801b92c:	616b      	str	r3, [r5, #20]
 801b92e:	2300      	movs	r3, #0
 801b930:	9309      	str	r3, [sp, #36]	@ 0x24
 801b932:	2320      	movs	r3, #32
 801b934:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b938:	f8cd 800c 	str.w	r8, [sp, #12]
 801b93c:	2330      	movs	r3, #48	@ 0x30
 801b93e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801badc <_svfiprintf_r+0x1e4>
 801b942:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b946:	f04f 0901 	mov.w	r9, #1
 801b94a:	4623      	mov	r3, r4
 801b94c:	469a      	mov	sl, r3
 801b94e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b952:	b10a      	cbz	r2, 801b958 <_svfiprintf_r+0x60>
 801b954:	2a25      	cmp	r2, #37	@ 0x25
 801b956:	d1f9      	bne.n	801b94c <_svfiprintf_r+0x54>
 801b958:	ebba 0b04 	subs.w	fp, sl, r4
 801b95c:	d00b      	beq.n	801b976 <_svfiprintf_r+0x7e>
 801b95e:	465b      	mov	r3, fp
 801b960:	4622      	mov	r2, r4
 801b962:	4629      	mov	r1, r5
 801b964:	4638      	mov	r0, r7
 801b966:	f7ff ff67 	bl	801b838 <__ssputs_r>
 801b96a:	3001      	adds	r0, #1
 801b96c:	f000 80a7 	beq.w	801babe <_svfiprintf_r+0x1c6>
 801b970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b972:	445a      	add	r2, fp
 801b974:	9209      	str	r2, [sp, #36]	@ 0x24
 801b976:	f89a 3000 	ldrb.w	r3, [sl]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	f000 809f 	beq.w	801babe <_svfiprintf_r+0x1c6>
 801b980:	2300      	movs	r3, #0
 801b982:	f04f 32ff 	mov.w	r2, #4294967295
 801b986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b98a:	f10a 0a01 	add.w	sl, sl, #1
 801b98e:	9304      	str	r3, [sp, #16]
 801b990:	9307      	str	r3, [sp, #28]
 801b992:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b996:	931a      	str	r3, [sp, #104]	@ 0x68
 801b998:	4654      	mov	r4, sl
 801b99a:	2205      	movs	r2, #5
 801b99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9a0:	484e      	ldr	r0, [pc, #312]	@ (801badc <_svfiprintf_r+0x1e4>)
 801b9a2:	f7e4 fc9d 	bl	80002e0 <memchr>
 801b9a6:	9a04      	ldr	r2, [sp, #16]
 801b9a8:	b9d8      	cbnz	r0, 801b9e2 <_svfiprintf_r+0xea>
 801b9aa:	06d0      	lsls	r0, r2, #27
 801b9ac:	bf44      	itt	mi
 801b9ae:	2320      	movmi	r3, #32
 801b9b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9b4:	0711      	lsls	r1, r2, #28
 801b9b6:	bf44      	itt	mi
 801b9b8:	232b      	movmi	r3, #43	@ 0x2b
 801b9ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9be:	f89a 3000 	ldrb.w	r3, [sl]
 801b9c2:	2b2a      	cmp	r3, #42	@ 0x2a
 801b9c4:	d015      	beq.n	801b9f2 <_svfiprintf_r+0xfa>
 801b9c6:	9a07      	ldr	r2, [sp, #28]
 801b9c8:	4654      	mov	r4, sl
 801b9ca:	2000      	movs	r0, #0
 801b9cc:	f04f 0c0a 	mov.w	ip, #10
 801b9d0:	4621      	mov	r1, r4
 801b9d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b9d6:	3b30      	subs	r3, #48	@ 0x30
 801b9d8:	2b09      	cmp	r3, #9
 801b9da:	d94b      	bls.n	801ba74 <_svfiprintf_r+0x17c>
 801b9dc:	b1b0      	cbz	r0, 801ba0c <_svfiprintf_r+0x114>
 801b9de:	9207      	str	r2, [sp, #28]
 801b9e0:	e014      	b.n	801ba0c <_svfiprintf_r+0x114>
 801b9e2:	eba0 0308 	sub.w	r3, r0, r8
 801b9e6:	fa09 f303 	lsl.w	r3, r9, r3
 801b9ea:	4313      	orrs	r3, r2
 801b9ec:	9304      	str	r3, [sp, #16]
 801b9ee:	46a2      	mov	sl, r4
 801b9f0:	e7d2      	b.n	801b998 <_svfiprintf_r+0xa0>
 801b9f2:	9b03      	ldr	r3, [sp, #12]
 801b9f4:	1d19      	adds	r1, r3, #4
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	9103      	str	r1, [sp, #12]
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	bfbb      	ittet	lt
 801b9fe:	425b      	neglt	r3, r3
 801ba00:	f042 0202 	orrlt.w	r2, r2, #2
 801ba04:	9307      	strge	r3, [sp, #28]
 801ba06:	9307      	strlt	r3, [sp, #28]
 801ba08:	bfb8      	it	lt
 801ba0a:	9204      	strlt	r2, [sp, #16]
 801ba0c:	7823      	ldrb	r3, [r4, #0]
 801ba0e:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba10:	d10a      	bne.n	801ba28 <_svfiprintf_r+0x130>
 801ba12:	7863      	ldrb	r3, [r4, #1]
 801ba14:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba16:	d132      	bne.n	801ba7e <_svfiprintf_r+0x186>
 801ba18:	9b03      	ldr	r3, [sp, #12]
 801ba1a:	1d1a      	adds	r2, r3, #4
 801ba1c:	681b      	ldr	r3, [r3, #0]
 801ba1e:	9203      	str	r2, [sp, #12]
 801ba20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba24:	3402      	adds	r4, #2
 801ba26:	9305      	str	r3, [sp, #20]
 801ba28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801baec <_svfiprintf_r+0x1f4>
 801ba2c:	7821      	ldrb	r1, [r4, #0]
 801ba2e:	2203      	movs	r2, #3
 801ba30:	4650      	mov	r0, sl
 801ba32:	f7e4 fc55 	bl	80002e0 <memchr>
 801ba36:	b138      	cbz	r0, 801ba48 <_svfiprintf_r+0x150>
 801ba38:	9b04      	ldr	r3, [sp, #16]
 801ba3a:	eba0 000a 	sub.w	r0, r0, sl
 801ba3e:	2240      	movs	r2, #64	@ 0x40
 801ba40:	4082      	lsls	r2, r0
 801ba42:	4313      	orrs	r3, r2
 801ba44:	3401      	adds	r4, #1
 801ba46:	9304      	str	r3, [sp, #16]
 801ba48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba4c:	4824      	ldr	r0, [pc, #144]	@ (801bae0 <_svfiprintf_r+0x1e8>)
 801ba4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ba52:	2206      	movs	r2, #6
 801ba54:	f7e4 fc44 	bl	80002e0 <memchr>
 801ba58:	2800      	cmp	r0, #0
 801ba5a:	d036      	beq.n	801baca <_svfiprintf_r+0x1d2>
 801ba5c:	4b21      	ldr	r3, [pc, #132]	@ (801bae4 <_svfiprintf_r+0x1ec>)
 801ba5e:	bb1b      	cbnz	r3, 801baa8 <_svfiprintf_r+0x1b0>
 801ba60:	9b03      	ldr	r3, [sp, #12]
 801ba62:	3307      	adds	r3, #7
 801ba64:	f023 0307 	bic.w	r3, r3, #7
 801ba68:	3308      	adds	r3, #8
 801ba6a:	9303      	str	r3, [sp, #12]
 801ba6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba6e:	4433      	add	r3, r6
 801ba70:	9309      	str	r3, [sp, #36]	@ 0x24
 801ba72:	e76a      	b.n	801b94a <_svfiprintf_r+0x52>
 801ba74:	fb0c 3202 	mla	r2, ip, r2, r3
 801ba78:	460c      	mov	r4, r1
 801ba7a:	2001      	movs	r0, #1
 801ba7c:	e7a8      	b.n	801b9d0 <_svfiprintf_r+0xd8>
 801ba7e:	2300      	movs	r3, #0
 801ba80:	3401      	adds	r4, #1
 801ba82:	9305      	str	r3, [sp, #20]
 801ba84:	4619      	mov	r1, r3
 801ba86:	f04f 0c0a 	mov.w	ip, #10
 801ba8a:	4620      	mov	r0, r4
 801ba8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ba90:	3a30      	subs	r2, #48	@ 0x30
 801ba92:	2a09      	cmp	r2, #9
 801ba94:	d903      	bls.n	801ba9e <_svfiprintf_r+0x1a6>
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d0c6      	beq.n	801ba28 <_svfiprintf_r+0x130>
 801ba9a:	9105      	str	r1, [sp, #20]
 801ba9c:	e7c4      	b.n	801ba28 <_svfiprintf_r+0x130>
 801ba9e:	fb0c 2101 	mla	r1, ip, r1, r2
 801baa2:	4604      	mov	r4, r0
 801baa4:	2301      	movs	r3, #1
 801baa6:	e7f0      	b.n	801ba8a <_svfiprintf_r+0x192>
 801baa8:	ab03      	add	r3, sp, #12
 801baaa:	9300      	str	r3, [sp, #0]
 801baac:	462a      	mov	r2, r5
 801baae:	4b0e      	ldr	r3, [pc, #56]	@ (801bae8 <_svfiprintf_r+0x1f0>)
 801bab0:	a904      	add	r1, sp, #16
 801bab2:	4638      	mov	r0, r7
 801bab4:	f3af 8000 	nop.w
 801bab8:	1c42      	adds	r2, r0, #1
 801baba:	4606      	mov	r6, r0
 801babc:	d1d6      	bne.n	801ba6c <_svfiprintf_r+0x174>
 801babe:	89ab      	ldrh	r3, [r5, #12]
 801bac0:	065b      	lsls	r3, r3, #25
 801bac2:	f53f af2d 	bmi.w	801b920 <_svfiprintf_r+0x28>
 801bac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bac8:	e72c      	b.n	801b924 <_svfiprintf_r+0x2c>
 801baca:	ab03      	add	r3, sp, #12
 801bacc:	9300      	str	r3, [sp, #0]
 801bace:	462a      	mov	r2, r5
 801bad0:	4b05      	ldr	r3, [pc, #20]	@ (801bae8 <_svfiprintf_r+0x1f0>)
 801bad2:	a904      	add	r1, sp, #16
 801bad4:	4638      	mov	r0, r7
 801bad6:	f000 f9bb 	bl	801be50 <_printf_i>
 801bada:	e7ed      	b.n	801bab8 <_svfiprintf_r+0x1c0>
 801badc:	0801e6a8 	.word	0x0801e6a8
 801bae0:	0801e6b2 	.word	0x0801e6b2
 801bae4:	00000000 	.word	0x00000000
 801bae8:	0801b839 	.word	0x0801b839
 801baec:	0801e6ae 	.word	0x0801e6ae

0801baf0 <__sfputc_r>:
 801baf0:	6893      	ldr	r3, [r2, #8]
 801baf2:	3b01      	subs	r3, #1
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	b410      	push	{r4}
 801baf8:	6093      	str	r3, [r2, #8]
 801bafa:	da08      	bge.n	801bb0e <__sfputc_r+0x1e>
 801bafc:	6994      	ldr	r4, [r2, #24]
 801bafe:	42a3      	cmp	r3, r4
 801bb00:	db01      	blt.n	801bb06 <__sfputc_r+0x16>
 801bb02:	290a      	cmp	r1, #10
 801bb04:	d103      	bne.n	801bb0e <__sfputc_r+0x1e>
 801bb06:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb0a:	f7ff bc53 	b.w	801b3b4 <__swbuf_r>
 801bb0e:	6813      	ldr	r3, [r2, #0]
 801bb10:	1c58      	adds	r0, r3, #1
 801bb12:	6010      	str	r0, [r2, #0]
 801bb14:	7019      	strb	r1, [r3, #0]
 801bb16:	4608      	mov	r0, r1
 801bb18:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb1c:	4770      	bx	lr

0801bb1e <__sfputs_r>:
 801bb1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb20:	4606      	mov	r6, r0
 801bb22:	460f      	mov	r7, r1
 801bb24:	4614      	mov	r4, r2
 801bb26:	18d5      	adds	r5, r2, r3
 801bb28:	42ac      	cmp	r4, r5
 801bb2a:	d101      	bne.n	801bb30 <__sfputs_r+0x12>
 801bb2c:	2000      	movs	r0, #0
 801bb2e:	e007      	b.n	801bb40 <__sfputs_r+0x22>
 801bb30:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb34:	463a      	mov	r2, r7
 801bb36:	4630      	mov	r0, r6
 801bb38:	f7ff ffda 	bl	801baf0 <__sfputc_r>
 801bb3c:	1c43      	adds	r3, r0, #1
 801bb3e:	d1f3      	bne.n	801bb28 <__sfputs_r+0xa>
 801bb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bb44 <_vfiprintf_r>:
 801bb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb48:	460d      	mov	r5, r1
 801bb4a:	b09d      	sub	sp, #116	@ 0x74
 801bb4c:	4614      	mov	r4, r2
 801bb4e:	4698      	mov	r8, r3
 801bb50:	4606      	mov	r6, r0
 801bb52:	b118      	cbz	r0, 801bb5c <_vfiprintf_r+0x18>
 801bb54:	6a03      	ldr	r3, [r0, #32]
 801bb56:	b90b      	cbnz	r3, 801bb5c <_vfiprintf_r+0x18>
 801bb58:	f7ff fa1c 	bl	801af94 <__sinit>
 801bb5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bb5e:	07d9      	lsls	r1, r3, #31
 801bb60:	d405      	bmi.n	801bb6e <_vfiprintf_r+0x2a>
 801bb62:	89ab      	ldrh	r3, [r5, #12]
 801bb64:	059a      	lsls	r2, r3, #22
 801bb66:	d402      	bmi.n	801bb6e <_vfiprintf_r+0x2a>
 801bb68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bb6a:	f7ff fd54 	bl	801b616 <__retarget_lock_acquire_recursive>
 801bb6e:	89ab      	ldrh	r3, [r5, #12]
 801bb70:	071b      	lsls	r3, r3, #28
 801bb72:	d501      	bpl.n	801bb78 <_vfiprintf_r+0x34>
 801bb74:	692b      	ldr	r3, [r5, #16]
 801bb76:	b99b      	cbnz	r3, 801bba0 <_vfiprintf_r+0x5c>
 801bb78:	4629      	mov	r1, r5
 801bb7a:	4630      	mov	r0, r6
 801bb7c:	f7ff fc58 	bl	801b430 <__swsetup_r>
 801bb80:	b170      	cbz	r0, 801bba0 <_vfiprintf_r+0x5c>
 801bb82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bb84:	07dc      	lsls	r4, r3, #31
 801bb86:	d504      	bpl.n	801bb92 <_vfiprintf_r+0x4e>
 801bb88:	f04f 30ff 	mov.w	r0, #4294967295
 801bb8c:	b01d      	add	sp, #116	@ 0x74
 801bb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb92:	89ab      	ldrh	r3, [r5, #12]
 801bb94:	0598      	lsls	r0, r3, #22
 801bb96:	d4f7      	bmi.n	801bb88 <_vfiprintf_r+0x44>
 801bb98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bb9a:	f7ff fd3d 	bl	801b618 <__retarget_lock_release_recursive>
 801bb9e:	e7f3      	b.n	801bb88 <_vfiprintf_r+0x44>
 801bba0:	2300      	movs	r3, #0
 801bba2:	9309      	str	r3, [sp, #36]	@ 0x24
 801bba4:	2320      	movs	r3, #32
 801bba6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bbaa:	f8cd 800c 	str.w	r8, [sp, #12]
 801bbae:	2330      	movs	r3, #48	@ 0x30
 801bbb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801bd60 <_vfiprintf_r+0x21c>
 801bbb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bbb8:	f04f 0901 	mov.w	r9, #1
 801bbbc:	4623      	mov	r3, r4
 801bbbe:	469a      	mov	sl, r3
 801bbc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bbc4:	b10a      	cbz	r2, 801bbca <_vfiprintf_r+0x86>
 801bbc6:	2a25      	cmp	r2, #37	@ 0x25
 801bbc8:	d1f9      	bne.n	801bbbe <_vfiprintf_r+0x7a>
 801bbca:	ebba 0b04 	subs.w	fp, sl, r4
 801bbce:	d00b      	beq.n	801bbe8 <_vfiprintf_r+0xa4>
 801bbd0:	465b      	mov	r3, fp
 801bbd2:	4622      	mov	r2, r4
 801bbd4:	4629      	mov	r1, r5
 801bbd6:	4630      	mov	r0, r6
 801bbd8:	f7ff ffa1 	bl	801bb1e <__sfputs_r>
 801bbdc:	3001      	adds	r0, #1
 801bbde:	f000 80a7 	beq.w	801bd30 <_vfiprintf_r+0x1ec>
 801bbe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bbe4:	445a      	add	r2, fp
 801bbe6:	9209      	str	r2, [sp, #36]	@ 0x24
 801bbe8:	f89a 3000 	ldrb.w	r3, [sl]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	f000 809f 	beq.w	801bd30 <_vfiprintf_r+0x1ec>
 801bbf2:	2300      	movs	r3, #0
 801bbf4:	f04f 32ff 	mov.w	r2, #4294967295
 801bbf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bbfc:	f10a 0a01 	add.w	sl, sl, #1
 801bc00:	9304      	str	r3, [sp, #16]
 801bc02:	9307      	str	r3, [sp, #28]
 801bc04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bc08:	931a      	str	r3, [sp, #104]	@ 0x68
 801bc0a:	4654      	mov	r4, sl
 801bc0c:	2205      	movs	r2, #5
 801bc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc12:	4853      	ldr	r0, [pc, #332]	@ (801bd60 <_vfiprintf_r+0x21c>)
 801bc14:	f7e4 fb64 	bl	80002e0 <memchr>
 801bc18:	9a04      	ldr	r2, [sp, #16]
 801bc1a:	b9d8      	cbnz	r0, 801bc54 <_vfiprintf_r+0x110>
 801bc1c:	06d1      	lsls	r1, r2, #27
 801bc1e:	bf44      	itt	mi
 801bc20:	2320      	movmi	r3, #32
 801bc22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bc26:	0713      	lsls	r3, r2, #28
 801bc28:	bf44      	itt	mi
 801bc2a:	232b      	movmi	r3, #43	@ 0x2b
 801bc2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bc30:	f89a 3000 	ldrb.w	r3, [sl]
 801bc34:	2b2a      	cmp	r3, #42	@ 0x2a
 801bc36:	d015      	beq.n	801bc64 <_vfiprintf_r+0x120>
 801bc38:	9a07      	ldr	r2, [sp, #28]
 801bc3a:	4654      	mov	r4, sl
 801bc3c:	2000      	movs	r0, #0
 801bc3e:	f04f 0c0a 	mov.w	ip, #10
 801bc42:	4621      	mov	r1, r4
 801bc44:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bc48:	3b30      	subs	r3, #48	@ 0x30
 801bc4a:	2b09      	cmp	r3, #9
 801bc4c:	d94b      	bls.n	801bce6 <_vfiprintf_r+0x1a2>
 801bc4e:	b1b0      	cbz	r0, 801bc7e <_vfiprintf_r+0x13a>
 801bc50:	9207      	str	r2, [sp, #28]
 801bc52:	e014      	b.n	801bc7e <_vfiprintf_r+0x13a>
 801bc54:	eba0 0308 	sub.w	r3, r0, r8
 801bc58:	fa09 f303 	lsl.w	r3, r9, r3
 801bc5c:	4313      	orrs	r3, r2
 801bc5e:	9304      	str	r3, [sp, #16]
 801bc60:	46a2      	mov	sl, r4
 801bc62:	e7d2      	b.n	801bc0a <_vfiprintf_r+0xc6>
 801bc64:	9b03      	ldr	r3, [sp, #12]
 801bc66:	1d19      	adds	r1, r3, #4
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	9103      	str	r1, [sp, #12]
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	bfbb      	ittet	lt
 801bc70:	425b      	neglt	r3, r3
 801bc72:	f042 0202 	orrlt.w	r2, r2, #2
 801bc76:	9307      	strge	r3, [sp, #28]
 801bc78:	9307      	strlt	r3, [sp, #28]
 801bc7a:	bfb8      	it	lt
 801bc7c:	9204      	strlt	r2, [sp, #16]
 801bc7e:	7823      	ldrb	r3, [r4, #0]
 801bc80:	2b2e      	cmp	r3, #46	@ 0x2e
 801bc82:	d10a      	bne.n	801bc9a <_vfiprintf_r+0x156>
 801bc84:	7863      	ldrb	r3, [r4, #1]
 801bc86:	2b2a      	cmp	r3, #42	@ 0x2a
 801bc88:	d132      	bne.n	801bcf0 <_vfiprintf_r+0x1ac>
 801bc8a:	9b03      	ldr	r3, [sp, #12]
 801bc8c:	1d1a      	adds	r2, r3, #4
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	9203      	str	r2, [sp, #12]
 801bc92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bc96:	3402      	adds	r4, #2
 801bc98:	9305      	str	r3, [sp, #20]
 801bc9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801bd70 <_vfiprintf_r+0x22c>
 801bc9e:	7821      	ldrb	r1, [r4, #0]
 801bca0:	2203      	movs	r2, #3
 801bca2:	4650      	mov	r0, sl
 801bca4:	f7e4 fb1c 	bl	80002e0 <memchr>
 801bca8:	b138      	cbz	r0, 801bcba <_vfiprintf_r+0x176>
 801bcaa:	9b04      	ldr	r3, [sp, #16]
 801bcac:	eba0 000a 	sub.w	r0, r0, sl
 801bcb0:	2240      	movs	r2, #64	@ 0x40
 801bcb2:	4082      	lsls	r2, r0
 801bcb4:	4313      	orrs	r3, r2
 801bcb6:	3401      	adds	r4, #1
 801bcb8:	9304      	str	r3, [sp, #16]
 801bcba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcbe:	4829      	ldr	r0, [pc, #164]	@ (801bd64 <_vfiprintf_r+0x220>)
 801bcc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bcc4:	2206      	movs	r2, #6
 801bcc6:	f7e4 fb0b 	bl	80002e0 <memchr>
 801bcca:	2800      	cmp	r0, #0
 801bccc:	d03f      	beq.n	801bd4e <_vfiprintf_r+0x20a>
 801bcce:	4b26      	ldr	r3, [pc, #152]	@ (801bd68 <_vfiprintf_r+0x224>)
 801bcd0:	bb1b      	cbnz	r3, 801bd1a <_vfiprintf_r+0x1d6>
 801bcd2:	9b03      	ldr	r3, [sp, #12]
 801bcd4:	3307      	adds	r3, #7
 801bcd6:	f023 0307 	bic.w	r3, r3, #7
 801bcda:	3308      	adds	r3, #8
 801bcdc:	9303      	str	r3, [sp, #12]
 801bcde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bce0:	443b      	add	r3, r7
 801bce2:	9309      	str	r3, [sp, #36]	@ 0x24
 801bce4:	e76a      	b.n	801bbbc <_vfiprintf_r+0x78>
 801bce6:	fb0c 3202 	mla	r2, ip, r2, r3
 801bcea:	460c      	mov	r4, r1
 801bcec:	2001      	movs	r0, #1
 801bcee:	e7a8      	b.n	801bc42 <_vfiprintf_r+0xfe>
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	3401      	adds	r4, #1
 801bcf4:	9305      	str	r3, [sp, #20]
 801bcf6:	4619      	mov	r1, r3
 801bcf8:	f04f 0c0a 	mov.w	ip, #10
 801bcfc:	4620      	mov	r0, r4
 801bcfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bd02:	3a30      	subs	r2, #48	@ 0x30
 801bd04:	2a09      	cmp	r2, #9
 801bd06:	d903      	bls.n	801bd10 <_vfiprintf_r+0x1cc>
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d0c6      	beq.n	801bc9a <_vfiprintf_r+0x156>
 801bd0c:	9105      	str	r1, [sp, #20]
 801bd0e:	e7c4      	b.n	801bc9a <_vfiprintf_r+0x156>
 801bd10:	fb0c 2101 	mla	r1, ip, r1, r2
 801bd14:	4604      	mov	r4, r0
 801bd16:	2301      	movs	r3, #1
 801bd18:	e7f0      	b.n	801bcfc <_vfiprintf_r+0x1b8>
 801bd1a:	ab03      	add	r3, sp, #12
 801bd1c:	9300      	str	r3, [sp, #0]
 801bd1e:	462a      	mov	r2, r5
 801bd20:	4b12      	ldr	r3, [pc, #72]	@ (801bd6c <_vfiprintf_r+0x228>)
 801bd22:	a904      	add	r1, sp, #16
 801bd24:	4630      	mov	r0, r6
 801bd26:	f3af 8000 	nop.w
 801bd2a:	4607      	mov	r7, r0
 801bd2c:	1c78      	adds	r0, r7, #1
 801bd2e:	d1d6      	bne.n	801bcde <_vfiprintf_r+0x19a>
 801bd30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bd32:	07d9      	lsls	r1, r3, #31
 801bd34:	d405      	bmi.n	801bd42 <_vfiprintf_r+0x1fe>
 801bd36:	89ab      	ldrh	r3, [r5, #12]
 801bd38:	059a      	lsls	r2, r3, #22
 801bd3a:	d402      	bmi.n	801bd42 <_vfiprintf_r+0x1fe>
 801bd3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bd3e:	f7ff fc6b 	bl	801b618 <__retarget_lock_release_recursive>
 801bd42:	89ab      	ldrh	r3, [r5, #12]
 801bd44:	065b      	lsls	r3, r3, #25
 801bd46:	f53f af1f 	bmi.w	801bb88 <_vfiprintf_r+0x44>
 801bd4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd4c:	e71e      	b.n	801bb8c <_vfiprintf_r+0x48>
 801bd4e:	ab03      	add	r3, sp, #12
 801bd50:	9300      	str	r3, [sp, #0]
 801bd52:	462a      	mov	r2, r5
 801bd54:	4b05      	ldr	r3, [pc, #20]	@ (801bd6c <_vfiprintf_r+0x228>)
 801bd56:	a904      	add	r1, sp, #16
 801bd58:	4630      	mov	r0, r6
 801bd5a:	f000 f879 	bl	801be50 <_printf_i>
 801bd5e:	e7e4      	b.n	801bd2a <_vfiprintf_r+0x1e6>
 801bd60:	0801e6a8 	.word	0x0801e6a8
 801bd64:	0801e6b2 	.word	0x0801e6b2
 801bd68:	00000000 	.word	0x00000000
 801bd6c:	0801bb1f 	.word	0x0801bb1f
 801bd70:	0801e6ae 	.word	0x0801e6ae

0801bd74 <_printf_common>:
 801bd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd78:	4616      	mov	r6, r2
 801bd7a:	4698      	mov	r8, r3
 801bd7c:	688a      	ldr	r2, [r1, #8]
 801bd7e:	690b      	ldr	r3, [r1, #16]
 801bd80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bd84:	4293      	cmp	r3, r2
 801bd86:	bfb8      	it	lt
 801bd88:	4613      	movlt	r3, r2
 801bd8a:	6033      	str	r3, [r6, #0]
 801bd8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bd90:	4607      	mov	r7, r0
 801bd92:	460c      	mov	r4, r1
 801bd94:	b10a      	cbz	r2, 801bd9a <_printf_common+0x26>
 801bd96:	3301      	adds	r3, #1
 801bd98:	6033      	str	r3, [r6, #0]
 801bd9a:	6823      	ldr	r3, [r4, #0]
 801bd9c:	0699      	lsls	r1, r3, #26
 801bd9e:	bf42      	ittt	mi
 801bda0:	6833      	ldrmi	r3, [r6, #0]
 801bda2:	3302      	addmi	r3, #2
 801bda4:	6033      	strmi	r3, [r6, #0]
 801bda6:	6825      	ldr	r5, [r4, #0]
 801bda8:	f015 0506 	ands.w	r5, r5, #6
 801bdac:	d106      	bne.n	801bdbc <_printf_common+0x48>
 801bdae:	f104 0a19 	add.w	sl, r4, #25
 801bdb2:	68e3      	ldr	r3, [r4, #12]
 801bdb4:	6832      	ldr	r2, [r6, #0]
 801bdb6:	1a9b      	subs	r3, r3, r2
 801bdb8:	42ab      	cmp	r3, r5
 801bdba:	dc26      	bgt.n	801be0a <_printf_common+0x96>
 801bdbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bdc0:	6822      	ldr	r2, [r4, #0]
 801bdc2:	3b00      	subs	r3, #0
 801bdc4:	bf18      	it	ne
 801bdc6:	2301      	movne	r3, #1
 801bdc8:	0692      	lsls	r2, r2, #26
 801bdca:	d42b      	bmi.n	801be24 <_printf_common+0xb0>
 801bdcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bdd0:	4641      	mov	r1, r8
 801bdd2:	4638      	mov	r0, r7
 801bdd4:	47c8      	blx	r9
 801bdd6:	3001      	adds	r0, #1
 801bdd8:	d01e      	beq.n	801be18 <_printf_common+0xa4>
 801bdda:	6823      	ldr	r3, [r4, #0]
 801bddc:	6922      	ldr	r2, [r4, #16]
 801bdde:	f003 0306 	and.w	r3, r3, #6
 801bde2:	2b04      	cmp	r3, #4
 801bde4:	bf02      	ittt	eq
 801bde6:	68e5      	ldreq	r5, [r4, #12]
 801bde8:	6833      	ldreq	r3, [r6, #0]
 801bdea:	1aed      	subeq	r5, r5, r3
 801bdec:	68a3      	ldr	r3, [r4, #8]
 801bdee:	bf0c      	ite	eq
 801bdf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bdf4:	2500      	movne	r5, #0
 801bdf6:	4293      	cmp	r3, r2
 801bdf8:	bfc4      	itt	gt
 801bdfa:	1a9b      	subgt	r3, r3, r2
 801bdfc:	18ed      	addgt	r5, r5, r3
 801bdfe:	2600      	movs	r6, #0
 801be00:	341a      	adds	r4, #26
 801be02:	42b5      	cmp	r5, r6
 801be04:	d11a      	bne.n	801be3c <_printf_common+0xc8>
 801be06:	2000      	movs	r0, #0
 801be08:	e008      	b.n	801be1c <_printf_common+0xa8>
 801be0a:	2301      	movs	r3, #1
 801be0c:	4652      	mov	r2, sl
 801be0e:	4641      	mov	r1, r8
 801be10:	4638      	mov	r0, r7
 801be12:	47c8      	blx	r9
 801be14:	3001      	adds	r0, #1
 801be16:	d103      	bne.n	801be20 <_printf_common+0xac>
 801be18:	f04f 30ff 	mov.w	r0, #4294967295
 801be1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be20:	3501      	adds	r5, #1
 801be22:	e7c6      	b.n	801bdb2 <_printf_common+0x3e>
 801be24:	18e1      	adds	r1, r4, r3
 801be26:	1c5a      	adds	r2, r3, #1
 801be28:	2030      	movs	r0, #48	@ 0x30
 801be2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801be2e:	4422      	add	r2, r4
 801be30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801be34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801be38:	3302      	adds	r3, #2
 801be3a:	e7c7      	b.n	801bdcc <_printf_common+0x58>
 801be3c:	2301      	movs	r3, #1
 801be3e:	4622      	mov	r2, r4
 801be40:	4641      	mov	r1, r8
 801be42:	4638      	mov	r0, r7
 801be44:	47c8      	blx	r9
 801be46:	3001      	adds	r0, #1
 801be48:	d0e6      	beq.n	801be18 <_printf_common+0xa4>
 801be4a:	3601      	adds	r6, #1
 801be4c:	e7d9      	b.n	801be02 <_printf_common+0x8e>
	...

0801be50 <_printf_i>:
 801be50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801be54:	7e0f      	ldrb	r7, [r1, #24]
 801be56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801be58:	2f78      	cmp	r7, #120	@ 0x78
 801be5a:	4691      	mov	r9, r2
 801be5c:	4680      	mov	r8, r0
 801be5e:	460c      	mov	r4, r1
 801be60:	469a      	mov	sl, r3
 801be62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801be66:	d807      	bhi.n	801be78 <_printf_i+0x28>
 801be68:	2f62      	cmp	r7, #98	@ 0x62
 801be6a:	d80a      	bhi.n	801be82 <_printf_i+0x32>
 801be6c:	2f00      	cmp	r7, #0
 801be6e:	f000 80d2 	beq.w	801c016 <_printf_i+0x1c6>
 801be72:	2f58      	cmp	r7, #88	@ 0x58
 801be74:	f000 80b7 	beq.w	801bfe6 <_printf_i+0x196>
 801be78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801be7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801be80:	e03a      	b.n	801bef8 <_printf_i+0xa8>
 801be82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801be86:	2b15      	cmp	r3, #21
 801be88:	d8f6      	bhi.n	801be78 <_printf_i+0x28>
 801be8a:	a101      	add	r1, pc, #4	@ (adr r1, 801be90 <_printf_i+0x40>)
 801be8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801be90:	0801bee9 	.word	0x0801bee9
 801be94:	0801befd 	.word	0x0801befd
 801be98:	0801be79 	.word	0x0801be79
 801be9c:	0801be79 	.word	0x0801be79
 801bea0:	0801be79 	.word	0x0801be79
 801bea4:	0801be79 	.word	0x0801be79
 801bea8:	0801befd 	.word	0x0801befd
 801beac:	0801be79 	.word	0x0801be79
 801beb0:	0801be79 	.word	0x0801be79
 801beb4:	0801be79 	.word	0x0801be79
 801beb8:	0801be79 	.word	0x0801be79
 801bebc:	0801bffd 	.word	0x0801bffd
 801bec0:	0801bf27 	.word	0x0801bf27
 801bec4:	0801bfb3 	.word	0x0801bfb3
 801bec8:	0801be79 	.word	0x0801be79
 801becc:	0801be79 	.word	0x0801be79
 801bed0:	0801c01f 	.word	0x0801c01f
 801bed4:	0801be79 	.word	0x0801be79
 801bed8:	0801bf27 	.word	0x0801bf27
 801bedc:	0801be79 	.word	0x0801be79
 801bee0:	0801be79 	.word	0x0801be79
 801bee4:	0801bfbb 	.word	0x0801bfbb
 801bee8:	6833      	ldr	r3, [r6, #0]
 801beea:	1d1a      	adds	r2, r3, #4
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	6032      	str	r2, [r6, #0]
 801bef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bef4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bef8:	2301      	movs	r3, #1
 801befa:	e09d      	b.n	801c038 <_printf_i+0x1e8>
 801befc:	6833      	ldr	r3, [r6, #0]
 801befe:	6820      	ldr	r0, [r4, #0]
 801bf00:	1d19      	adds	r1, r3, #4
 801bf02:	6031      	str	r1, [r6, #0]
 801bf04:	0606      	lsls	r6, r0, #24
 801bf06:	d501      	bpl.n	801bf0c <_printf_i+0xbc>
 801bf08:	681d      	ldr	r5, [r3, #0]
 801bf0a:	e003      	b.n	801bf14 <_printf_i+0xc4>
 801bf0c:	0645      	lsls	r5, r0, #25
 801bf0e:	d5fb      	bpl.n	801bf08 <_printf_i+0xb8>
 801bf10:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bf14:	2d00      	cmp	r5, #0
 801bf16:	da03      	bge.n	801bf20 <_printf_i+0xd0>
 801bf18:	232d      	movs	r3, #45	@ 0x2d
 801bf1a:	426d      	negs	r5, r5
 801bf1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bf20:	4859      	ldr	r0, [pc, #356]	@ (801c088 <_printf_i+0x238>)
 801bf22:	230a      	movs	r3, #10
 801bf24:	e010      	b.n	801bf48 <_printf_i+0xf8>
 801bf26:	6821      	ldr	r1, [r4, #0]
 801bf28:	6833      	ldr	r3, [r6, #0]
 801bf2a:	0608      	lsls	r0, r1, #24
 801bf2c:	f853 5b04 	ldr.w	r5, [r3], #4
 801bf30:	d402      	bmi.n	801bf38 <_printf_i+0xe8>
 801bf32:	0649      	lsls	r1, r1, #25
 801bf34:	bf48      	it	mi
 801bf36:	b2ad      	uxthmi	r5, r5
 801bf38:	2f6f      	cmp	r7, #111	@ 0x6f
 801bf3a:	4853      	ldr	r0, [pc, #332]	@ (801c088 <_printf_i+0x238>)
 801bf3c:	6033      	str	r3, [r6, #0]
 801bf3e:	d159      	bne.n	801bff4 <_printf_i+0x1a4>
 801bf40:	2308      	movs	r3, #8
 801bf42:	2100      	movs	r1, #0
 801bf44:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bf48:	6866      	ldr	r6, [r4, #4]
 801bf4a:	60a6      	str	r6, [r4, #8]
 801bf4c:	2e00      	cmp	r6, #0
 801bf4e:	db05      	blt.n	801bf5c <_printf_i+0x10c>
 801bf50:	6821      	ldr	r1, [r4, #0]
 801bf52:	432e      	orrs	r6, r5
 801bf54:	f021 0104 	bic.w	r1, r1, #4
 801bf58:	6021      	str	r1, [r4, #0]
 801bf5a:	d04d      	beq.n	801bff8 <_printf_i+0x1a8>
 801bf5c:	4616      	mov	r6, r2
 801bf5e:	fbb5 f1f3 	udiv	r1, r5, r3
 801bf62:	fb03 5711 	mls	r7, r3, r1, r5
 801bf66:	5dc7      	ldrb	r7, [r0, r7]
 801bf68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bf6c:	462f      	mov	r7, r5
 801bf6e:	42bb      	cmp	r3, r7
 801bf70:	460d      	mov	r5, r1
 801bf72:	d9f4      	bls.n	801bf5e <_printf_i+0x10e>
 801bf74:	2b08      	cmp	r3, #8
 801bf76:	d10b      	bne.n	801bf90 <_printf_i+0x140>
 801bf78:	6823      	ldr	r3, [r4, #0]
 801bf7a:	07df      	lsls	r7, r3, #31
 801bf7c:	d508      	bpl.n	801bf90 <_printf_i+0x140>
 801bf7e:	6923      	ldr	r3, [r4, #16]
 801bf80:	6861      	ldr	r1, [r4, #4]
 801bf82:	4299      	cmp	r1, r3
 801bf84:	bfde      	ittt	le
 801bf86:	2330      	movle	r3, #48	@ 0x30
 801bf88:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bf8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801bf90:	1b92      	subs	r2, r2, r6
 801bf92:	6122      	str	r2, [r4, #16]
 801bf94:	f8cd a000 	str.w	sl, [sp]
 801bf98:	464b      	mov	r3, r9
 801bf9a:	aa03      	add	r2, sp, #12
 801bf9c:	4621      	mov	r1, r4
 801bf9e:	4640      	mov	r0, r8
 801bfa0:	f7ff fee8 	bl	801bd74 <_printf_common>
 801bfa4:	3001      	adds	r0, #1
 801bfa6:	d14c      	bne.n	801c042 <_printf_i+0x1f2>
 801bfa8:	f04f 30ff 	mov.w	r0, #4294967295
 801bfac:	b004      	add	sp, #16
 801bfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfb2:	6823      	ldr	r3, [r4, #0]
 801bfb4:	f043 0320 	orr.w	r3, r3, #32
 801bfb8:	6023      	str	r3, [r4, #0]
 801bfba:	4834      	ldr	r0, [pc, #208]	@ (801c08c <_printf_i+0x23c>)
 801bfbc:	2778      	movs	r7, #120	@ 0x78
 801bfbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bfc2:	6823      	ldr	r3, [r4, #0]
 801bfc4:	6831      	ldr	r1, [r6, #0]
 801bfc6:	061f      	lsls	r7, r3, #24
 801bfc8:	f851 5b04 	ldr.w	r5, [r1], #4
 801bfcc:	d402      	bmi.n	801bfd4 <_printf_i+0x184>
 801bfce:	065f      	lsls	r7, r3, #25
 801bfd0:	bf48      	it	mi
 801bfd2:	b2ad      	uxthmi	r5, r5
 801bfd4:	6031      	str	r1, [r6, #0]
 801bfd6:	07d9      	lsls	r1, r3, #31
 801bfd8:	bf44      	itt	mi
 801bfda:	f043 0320 	orrmi.w	r3, r3, #32
 801bfde:	6023      	strmi	r3, [r4, #0]
 801bfe0:	b11d      	cbz	r5, 801bfea <_printf_i+0x19a>
 801bfe2:	2310      	movs	r3, #16
 801bfe4:	e7ad      	b.n	801bf42 <_printf_i+0xf2>
 801bfe6:	4828      	ldr	r0, [pc, #160]	@ (801c088 <_printf_i+0x238>)
 801bfe8:	e7e9      	b.n	801bfbe <_printf_i+0x16e>
 801bfea:	6823      	ldr	r3, [r4, #0]
 801bfec:	f023 0320 	bic.w	r3, r3, #32
 801bff0:	6023      	str	r3, [r4, #0]
 801bff2:	e7f6      	b.n	801bfe2 <_printf_i+0x192>
 801bff4:	230a      	movs	r3, #10
 801bff6:	e7a4      	b.n	801bf42 <_printf_i+0xf2>
 801bff8:	4616      	mov	r6, r2
 801bffa:	e7bb      	b.n	801bf74 <_printf_i+0x124>
 801bffc:	6833      	ldr	r3, [r6, #0]
 801bffe:	6825      	ldr	r5, [r4, #0]
 801c000:	6961      	ldr	r1, [r4, #20]
 801c002:	1d18      	adds	r0, r3, #4
 801c004:	6030      	str	r0, [r6, #0]
 801c006:	062e      	lsls	r6, r5, #24
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	d501      	bpl.n	801c010 <_printf_i+0x1c0>
 801c00c:	6019      	str	r1, [r3, #0]
 801c00e:	e002      	b.n	801c016 <_printf_i+0x1c6>
 801c010:	0668      	lsls	r0, r5, #25
 801c012:	d5fb      	bpl.n	801c00c <_printf_i+0x1bc>
 801c014:	8019      	strh	r1, [r3, #0]
 801c016:	2300      	movs	r3, #0
 801c018:	6123      	str	r3, [r4, #16]
 801c01a:	4616      	mov	r6, r2
 801c01c:	e7ba      	b.n	801bf94 <_printf_i+0x144>
 801c01e:	6833      	ldr	r3, [r6, #0]
 801c020:	1d1a      	adds	r2, r3, #4
 801c022:	6032      	str	r2, [r6, #0]
 801c024:	681e      	ldr	r6, [r3, #0]
 801c026:	6862      	ldr	r2, [r4, #4]
 801c028:	2100      	movs	r1, #0
 801c02a:	4630      	mov	r0, r6
 801c02c:	f7e4 f958 	bl	80002e0 <memchr>
 801c030:	b108      	cbz	r0, 801c036 <_printf_i+0x1e6>
 801c032:	1b80      	subs	r0, r0, r6
 801c034:	6060      	str	r0, [r4, #4]
 801c036:	6863      	ldr	r3, [r4, #4]
 801c038:	6123      	str	r3, [r4, #16]
 801c03a:	2300      	movs	r3, #0
 801c03c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c040:	e7a8      	b.n	801bf94 <_printf_i+0x144>
 801c042:	6923      	ldr	r3, [r4, #16]
 801c044:	4632      	mov	r2, r6
 801c046:	4649      	mov	r1, r9
 801c048:	4640      	mov	r0, r8
 801c04a:	47d0      	blx	sl
 801c04c:	3001      	adds	r0, #1
 801c04e:	d0ab      	beq.n	801bfa8 <_printf_i+0x158>
 801c050:	6823      	ldr	r3, [r4, #0]
 801c052:	079b      	lsls	r3, r3, #30
 801c054:	d413      	bmi.n	801c07e <_printf_i+0x22e>
 801c056:	68e0      	ldr	r0, [r4, #12]
 801c058:	9b03      	ldr	r3, [sp, #12]
 801c05a:	4298      	cmp	r0, r3
 801c05c:	bfb8      	it	lt
 801c05e:	4618      	movlt	r0, r3
 801c060:	e7a4      	b.n	801bfac <_printf_i+0x15c>
 801c062:	2301      	movs	r3, #1
 801c064:	4632      	mov	r2, r6
 801c066:	4649      	mov	r1, r9
 801c068:	4640      	mov	r0, r8
 801c06a:	47d0      	blx	sl
 801c06c:	3001      	adds	r0, #1
 801c06e:	d09b      	beq.n	801bfa8 <_printf_i+0x158>
 801c070:	3501      	adds	r5, #1
 801c072:	68e3      	ldr	r3, [r4, #12]
 801c074:	9903      	ldr	r1, [sp, #12]
 801c076:	1a5b      	subs	r3, r3, r1
 801c078:	42ab      	cmp	r3, r5
 801c07a:	dcf2      	bgt.n	801c062 <_printf_i+0x212>
 801c07c:	e7eb      	b.n	801c056 <_printf_i+0x206>
 801c07e:	2500      	movs	r5, #0
 801c080:	f104 0619 	add.w	r6, r4, #25
 801c084:	e7f5      	b.n	801c072 <_printf_i+0x222>
 801c086:	bf00      	nop
 801c088:	0801e6b9 	.word	0x0801e6b9
 801c08c:	0801e6ca 	.word	0x0801e6ca

0801c090 <__sflush_r>:
 801c090:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c098:	0716      	lsls	r6, r2, #28
 801c09a:	4605      	mov	r5, r0
 801c09c:	460c      	mov	r4, r1
 801c09e:	d451      	bmi.n	801c144 <__sflush_r+0xb4>
 801c0a0:	684b      	ldr	r3, [r1, #4]
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	dc02      	bgt.n	801c0ac <__sflush_r+0x1c>
 801c0a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	dd49      	ble.n	801c140 <__sflush_r+0xb0>
 801c0ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c0ae:	2e00      	cmp	r6, #0
 801c0b0:	d046      	beq.n	801c140 <__sflush_r+0xb0>
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c0b8:	682f      	ldr	r7, [r5, #0]
 801c0ba:	602b      	str	r3, [r5, #0]
 801c0bc:	d031      	beq.n	801c122 <__sflush_r+0x92>
 801c0be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c0c0:	89a3      	ldrh	r3, [r4, #12]
 801c0c2:	0759      	lsls	r1, r3, #29
 801c0c4:	d505      	bpl.n	801c0d2 <__sflush_r+0x42>
 801c0c6:	6863      	ldr	r3, [r4, #4]
 801c0c8:	1ad2      	subs	r2, r2, r3
 801c0ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c0cc:	b10b      	cbz	r3, 801c0d2 <__sflush_r+0x42>
 801c0ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c0d0:	1ad2      	subs	r2, r2, r3
 801c0d2:	2300      	movs	r3, #0
 801c0d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c0d6:	6a21      	ldr	r1, [r4, #32]
 801c0d8:	4628      	mov	r0, r5
 801c0da:	47b0      	blx	r6
 801c0dc:	1c42      	adds	r2, r0, #1
 801c0de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c0e2:	d106      	bne.n	801c0f2 <__sflush_r+0x62>
 801c0e4:	6829      	ldr	r1, [r5, #0]
 801c0e6:	291d      	cmp	r1, #29
 801c0e8:	d846      	bhi.n	801c178 <__sflush_r+0xe8>
 801c0ea:	4a29      	ldr	r2, [pc, #164]	@ (801c190 <__sflush_r+0x100>)
 801c0ec:	40ca      	lsrs	r2, r1
 801c0ee:	07d6      	lsls	r6, r2, #31
 801c0f0:	d542      	bpl.n	801c178 <__sflush_r+0xe8>
 801c0f2:	2200      	movs	r2, #0
 801c0f4:	6062      	str	r2, [r4, #4]
 801c0f6:	04d9      	lsls	r1, r3, #19
 801c0f8:	6922      	ldr	r2, [r4, #16]
 801c0fa:	6022      	str	r2, [r4, #0]
 801c0fc:	d504      	bpl.n	801c108 <__sflush_r+0x78>
 801c0fe:	1c42      	adds	r2, r0, #1
 801c100:	d101      	bne.n	801c106 <__sflush_r+0x76>
 801c102:	682b      	ldr	r3, [r5, #0]
 801c104:	b903      	cbnz	r3, 801c108 <__sflush_r+0x78>
 801c106:	6560      	str	r0, [r4, #84]	@ 0x54
 801c108:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c10a:	602f      	str	r7, [r5, #0]
 801c10c:	b1c1      	cbz	r1, 801c140 <__sflush_r+0xb0>
 801c10e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c112:	4299      	cmp	r1, r3
 801c114:	d002      	beq.n	801c11c <__sflush_r+0x8c>
 801c116:	4628      	mov	r0, r5
 801c118:	f7ff fa8e 	bl	801b638 <_free_r>
 801c11c:	2300      	movs	r3, #0
 801c11e:	6363      	str	r3, [r4, #52]	@ 0x34
 801c120:	e00e      	b.n	801c140 <__sflush_r+0xb0>
 801c122:	6a21      	ldr	r1, [r4, #32]
 801c124:	2301      	movs	r3, #1
 801c126:	4628      	mov	r0, r5
 801c128:	47b0      	blx	r6
 801c12a:	4602      	mov	r2, r0
 801c12c:	1c50      	adds	r0, r2, #1
 801c12e:	d1c7      	bne.n	801c0c0 <__sflush_r+0x30>
 801c130:	682b      	ldr	r3, [r5, #0]
 801c132:	2b00      	cmp	r3, #0
 801c134:	d0c4      	beq.n	801c0c0 <__sflush_r+0x30>
 801c136:	2b1d      	cmp	r3, #29
 801c138:	d001      	beq.n	801c13e <__sflush_r+0xae>
 801c13a:	2b16      	cmp	r3, #22
 801c13c:	d11a      	bne.n	801c174 <__sflush_r+0xe4>
 801c13e:	602f      	str	r7, [r5, #0]
 801c140:	2000      	movs	r0, #0
 801c142:	e01e      	b.n	801c182 <__sflush_r+0xf2>
 801c144:	690f      	ldr	r7, [r1, #16]
 801c146:	2f00      	cmp	r7, #0
 801c148:	d0fa      	beq.n	801c140 <__sflush_r+0xb0>
 801c14a:	0793      	lsls	r3, r2, #30
 801c14c:	680e      	ldr	r6, [r1, #0]
 801c14e:	bf08      	it	eq
 801c150:	694b      	ldreq	r3, [r1, #20]
 801c152:	600f      	str	r7, [r1, #0]
 801c154:	bf18      	it	ne
 801c156:	2300      	movne	r3, #0
 801c158:	eba6 0807 	sub.w	r8, r6, r7
 801c15c:	608b      	str	r3, [r1, #8]
 801c15e:	f1b8 0f00 	cmp.w	r8, #0
 801c162:	dded      	ble.n	801c140 <__sflush_r+0xb0>
 801c164:	6a21      	ldr	r1, [r4, #32]
 801c166:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c168:	4643      	mov	r3, r8
 801c16a:	463a      	mov	r2, r7
 801c16c:	4628      	mov	r0, r5
 801c16e:	47b0      	blx	r6
 801c170:	2800      	cmp	r0, #0
 801c172:	dc08      	bgt.n	801c186 <__sflush_r+0xf6>
 801c174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c17c:	81a3      	strh	r3, [r4, #12]
 801c17e:	f04f 30ff 	mov.w	r0, #4294967295
 801c182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c186:	4407      	add	r7, r0
 801c188:	eba8 0800 	sub.w	r8, r8, r0
 801c18c:	e7e7      	b.n	801c15e <__sflush_r+0xce>
 801c18e:	bf00      	nop
 801c190:	20400001 	.word	0x20400001

0801c194 <_fflush_r>:
 801c194:	b538      	push	{r3, r4, r5, lr}
 801c196:	690b      	ldr	r3, [r1, #16]
 801c198:	4605      	mov	r5, r0
 801c19a:	460c      	mov	r4, r1
 801c19c:	b913      	cbnz	r3, 801c1a4 <_fflush_r+0x10>
 801c19e:	2500      	movs	r5, #0
 801c1a0:	4628      	mov	r0, r5
 801c1a2:	bd38      	pop	{r3, r4, r5, pc}
 801c1a4:	b118      	cbz	r0, 801c1ae <_fflush_r+0x1a>
 801c1a6:	6a03      	ldr	r3, [r0, #32]
 801c1a8:	b90b      	cbnz	r3, 801c1ae <_fflush_r+0x1a>
 801c1aa:	f7fe fef3 	bl	801af94 <__sinit>
 801c1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d0f3      	beq.n	801c19e <_fflush_r+0xa>
 801c1b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c1b8:	07d0      	lsls	r0, r2, #31
 801c1ba:	d404      	bmi.n	801c1c6 <_fflush_r+0x32>
 801c1bc:	0599      	lsls	r1, r3, #22
 801c1be:	d402      	bmi.n	801c1c6 <_fflush_r+0x32>
 801c1c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c1c2:	f7ff fa28 	bl	801b616 <__retarget_lock_acquire_recursive>
 801c1c6:	4628      	mov	r0, r5
 801c1c8:	4621      	mov	r1, r4
 801c1ca:	f7ff ff61 	bl	801c090 <__sflush_r>
 801c1ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c1d0:	07da      	lsls	r2, r3, #31
 801c1d2:	4605      	mov	r5, r0
 801c1d4:	d4e4      	bmi.n	801c1a0 <_fflush_r+0xc>
 801c1d6:	89a3      	ldrh	r3, [r4, #12]
 801c1d8:	059b      	lsls	r3, r3, #22
 801c1da:	d4e1      	bmi.n	801c1a0 <_fflush_r+0xc>
 801c1dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c1de:	f7ff fa1b 	bl	801b618 <__retarget_lock_release_recursive>
 801c1e2:	e7dd      	b.n	801c1a0 <_fflush_r+0xc>

0801c1e4 <__swhatbuf_r>:
 801c1e4:	b570      	push	{r4, r5, r6, lr}
 801c1e6:	460c      	mov	r4, r1
 801c1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1ec:	2900      	cmp	r1, #0
 801c1ee:	b096      	sub	sp, #88	@ 0x58
 801c1f0:	4615      	mov	r5, r2
 801c1f2:	461e      	mov	r6, r3
 801c1f4:	da0a      	bge.n	801c20c <__swhatbuf_r+0x28>
 801c1f6:	89a1      	ldrh	r1, [r4, #12]
 801c1f8:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 801c1fc:	d113      	bne.n	801c226 <__swhatbuf_r+0x42>
 801c1fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801c202:	2000      	movs	r0, #0
 801c204:	6031      	str	r1, [r6, #0]
 801c206:	602a      	str	r2, [r5, #0]
 801c208:	b016      	add	sp, #88	@ 0x58
 801c20a:	bd70      	pop	{r4, r5, r6, pc}
 801c20c:	466a      	mov	r2, sp
 801c20e:	f000 f85f 	bl	801c2d0 <_fstat_r>
 801c212:	2800      	cmp	r0, #0
 801c214:	dbef      	blt.n	801c1f6 <__swhatbuf_r+0x12>
 801c216:	9901      	ldr	r1, [sp, #4]
 801c218:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c21c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c220:	4259      	negs	r1, r3
 801c222:	4159      	adcs	r1, r3
 801c224:	e7eb      	b.n	801c1fe <__swhatbuf_r+0x1a>
 801c226:	2100      	movs	r1, #0
 801c228:	2240      	movs	r2, #64	@ 0x40
 801c22a:	e7ea      	b.n	801c202 <__swhatbuf_r+0x1e>

0801c22c <__smakebuf_r>:
 801c22c:	898b      	ldrh	r3, [r1, #12]
 801c22e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c230:	079e      	lsls	r6, r3, #30
 801c232:	4605      	mov	r5, r0
 801c234:	460c      	mov	r4, r1
 801c236:	d507      	bpl.n	801c248 <__smakebuf_r+0x1c>
 801c238:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c23c:	6023      	str	r3, [r4, #0]
 801c23e:	6123      	str	r3, [r4, #16]
 801c240:	2301      	movs	r3, #1
 801c242:	6163      	str	r3, [r4, #20]
 801c244:	b002      	add	sp, #8
 801c246:	bd70      	pop	{r4, r5, r6, pc}
 801c248:	ab01      	add	r3, sp, #4
 801c24a:	466a      	mov	r2, sp
 801c24c:	f7ff ffca 	bl	801c1e4 <__swhatbuf_r>
 801c250:	9e00      	ldr	r6, [sp, #0]
 801c252:	4628      	mov	r0, r5
 801c254:	4631      	mov	r1, r6
 801c256:	f7ff fa63 	bl	801b720 <_malloc_r>
 801c25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c25e:	b938      	cbnz	r0, 801c270 <__smakebuf_r+0x44>
 801c260:	059a      	lsls	r2, r3, #22
 801c262:	d4ef      	bmi.n	801c244 <__smakebuf_r+0x18>
 801c264:	f023 0303 	bic.w	r3, r3, #3
 801c268:	f043 0302 	orr.w	r3, r3, #2
 801c26c:	81a3      	strh	r3, [r4, #12]
 801c26e:	e7e3      	b.n	801c238 <__smakebuf_r+0xc>
 801c270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c274:	81a3      	strh	r3, [r4, #12]
 801c276:	9b01      	ldr	r3, [sp, #4]
 801c278:	6020      	str	r0, [r4, #0]
 801c27a:	e9c4 0604 	strd	r0, r6, [r4, #16]
 801c27e:	2b00      	cmp	r3, #0
 801c280:	d0e0      	beq.n	801c244 <__smakebuf_r+0x18>
 801c282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c286:	4628      	mov	r0, r5
 801c288:	f000 f834 	bl	801c2f4 <_isatty_r>
 801c28c:	2800      	cmp	r0, #0
 801c28e:	d0d9      	beq.n	801c244 <__smakebuf_r+0x18>
 801c290:	89a3      	ldrh	r3, [r4, #12]
 801c292:	f023 0303 	bic.w	r3, r3, #3
 801c296:	f043 0301 	orr.w	r3, r3, #1
 801c29a:	81a3      	strh	r3, [r4, #12]
 801c29c:	e7d2      	b.n	801c244 <__smakebuf_r+0x18>

0801c29e <memmove>:
 801c29e:	4288      	cmp	r0, r1
 801c2a0:	b510      	push	{r4, lr}
 801c2a2:	eb01 0402 	add.w	r4, r1, r2
 801c2a6:	d902      	bls.n	801c2ae <memmove+0x10>
 801c2a8:	4284      	cmp	r4, r0
 801c2aa:	4623      	mov	r3, r4
 801c2ac:	d807      	bhi.n	801c2be <memmove+0x20>
 801c2ae:	1e43      	subs	r3, r0, #1
 801c2b0:	42a1      	cmp	r1, r4
 801c2b2:	d007      	beq.n	801c2c4 <memmove+0x26>
 801c2b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c2b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c2bc:	e7f8      	b.n	801c2b0 <memmove+0x12>
 801c2be:	4402      	add	r2, r0
 801c2c0:	4282      	cmp	r2, r0
 801c2c2:	d100      	bne.n	801c2c6 <memmove+0x28>
 801c2c4:	bd10      	pop	{r4, pc}
 801c2c6:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801c2ca:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801c2ce:	e7f7      	b.n	801c2c0 <memmove+0x22>

0801c2d0 <_fstat_r>:
 801c2d0:	b538      	push	{r3, r4, r5, lr}
 801c2d2:	4d07      	ldr	r5, [pc, #28]	@ (801c2f0 <_fstat_r+0x20>)
 801c2d4:	2300      	movs	r3, #0
 801c2d6:	4604      	mov	r4, r0
 801c2d8:	4608      	mov	r0, r1
 801c2da:	4611      	mov	r1, r2
 801c2dc:	602b      	str	r3, [r5, #0]
 801c2de:	f7e7 fc43 	bl	8003b68 <_fstat>
 801c2e2:	1c43      	adds	r3, r0, #1
 801c2e4:	d102      	bne.n	801c2ec <_fstat_r+0x1c>
 801c2e6:	682b      	ldr	r3, [r5, #0]
 801c2e8:	b103      	cbz	r3, 801c2ec <_fstat_r+0x1c>
 801c2ea:	6023      	str	r3, [r4, #0]
 801c2ec:	bd38      	pop	{r3, r4, r5, pc}
 801c2ee:	bf00      	nop
 801c2f0:	2401c510 	.word	0x2401c510

0801c2f4 <_isatty_r>:
 801c2f4:	b538      	push	{r3, r4, r5, lr}
 801c2f6:	4d06      	ldr	r5, [pc, #24]	@ (801c310 <_isatty_r+0x1c>)
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	4604      	mov	r4, r0
 801c2fc:	4608      	mov	r0, r1
 801c2fe:	602b      	str	r3, [r5, #0]
 801c300:	f7e7 fc42 	bl	8003b88 <_isatty>
 801c304:	1c43      	adds	r3, r0, #1
 801c306:	d102      	bne.n	801c30e <_isatty_r+0x1a>
 801c308:	682b      	ldr	r3, [r5, #0]
 801c30a:	b103      	cbz	r3, 801c30e <_isatty_r+0x1a>
 801c30c:	6023      	str	r3, [r4, #0]
 801c30e:	bd38      	pop	{r3, r4, r5, pc}
 801c310:	2401c510 	.word	0x2401c510

0801c314 <_sbrk_r>:
 801c314:	b538      	push	{r3, r4, r5, lr}
 801c316:	4d06      	ldr	r5, [pc, #24]	@ (801c330 <_sbrk_r+0x1c>)
 801c318:	2300      	movs	r3, #0
 801c31a:	4604      	mov	r4, r0
 801c31c:	4608      	mov	r0, r1
 801c31e:	602b      	str	r3, [r5, #0]
 801c320:	f7e7 fc4a 	bl	8003bb8 <_sbrk>
 801c324:	1c43      	adds	r3, r0, #1
 801c326:	d102      	bne.n	801c32e <_sbrk_r+0x1a>
 801c328:	682b      	ldr	r3, [r5, #0]
 801c32a:	b103      	cbz	r3, 801c32e <_sbrk_r+0x1a>
 801c32c:	6023      	str	r3, [r4, #0]
 801c32e:	bd38      	pop	{r3, r4, r5, pc}
 801c330:	2401c510 	.word	0x2401c510

0801c334 <_realloc_r>:
 801c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c338:	4607      	mov	r7, r0
 801c33a:	4614      	mov	r4, r2
 801c33c:	460d      	mov	r5, r1
 801c33e:	b921      	cbnz	r1, 801c34a <_realloc_r+0x16>
 801c340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c344:	4611      	mov	r1, r2
 801c346:	f7ff b9eb 	b.w	801b720 <_malloc_r>
 801c34a:	b92a      	cbnz	r2, 801c358 <_realloc_r+0x24>
 801c34c:	f7ff f974 	bl	801b638 <_free_r>
 801c350:	4625      	mov	r5, r4
 801c352:	4628      	mov	r0, r5
 801c354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c358:	f000 f81a 	bl	801c390 <_malloc_usable_size_r>
 801c35c:	4284      	cmp	r4, r0
 801c35e:	4606      	mov	r6, r0
 801c360:	d802      	bhi.n	801c368 <_realloc_r+0x34>
 801c362:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c366:	d8f4      	bhi.n	801c352 <_realloc_r+0x1e>
 801c368:	4621      	mov	r1, r4
 801c36a:	4638      	mov	r0, r7
 801c36c:	f7ff f9d8 	bl	801b720 <_malloc_r>
 801c370:	4680      	mov	r8, r0
 801c372:	b908      	cbnz	r0, 801c378 <_realloc_r+0x44>
 801c374:	4645      	mov	r5, r8
 801c376:	e7ec      	b.n	801c352 <_realloc_r+0x1e>
 801c378:	42b4      	cmp	r4, r6
 801c37a:	4622      	mov	r2, r4
 801c37c:	4629      	mov	r1, r5
 801c37e:	bf28      	it	cs
 801c380:	4632      	movcs	r2, r6
 801c382:	f7ff f94a 	bl	801b61a <memcpy>
 801c386:	4629      	mov	r1, r5
 801c388:	4638      	mov	r0, r7
 801c38a:	f7ff f955 	bl	801b638 <_free_r>
 801c38e:	e7f1      	b.n	801c374 <_realloc_r+0x40>

0801c390 <_malloc_usable_size_r>:
 801c390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c394:	1f18      	subs	r0, r3, #4
 801c396:	2b00      	cmp	r3, #0
 801c398:	bfbc      	itt	lt
 801c39a:	580b      	ldrlt	r3, [r1, r0]
 801c39c:	18c0      	addlt	r0, r0, r3
 801c39e:	4770      	bx	lr

0801c3a0 <__udivmoddi4>:
 801c3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c3a4:	9d08      	ldr	r5, [sp, #32]
 801c3a6:	460f      	mov	r7, r1
 801c3a8:	4604      	mov	r4, r0
 801c3aa:	468c      	mov	ip, r1
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d148      	bne.n	801c442 <__udivmoddi4+0xa2>
 801c3b0:	428a      	cmp	r2, r1
 801c3b2:	4616      	mov	r6, r2
 801c3b4:	d961      	bls.n	801c47a <__udivmoddi4+0xda>
 801c3b6:	fab2 f382 	clz	r3, r2
 801c3ba:	b14b      	cbz	r3, 801c3d0 <__udivmoddi4+0x30>
 801c3bc:	f1c3 0220 	rsb	r2, r3, #32
 801c3c0:	fa01 fc03 	lsl.w	ip, r1, r3
 801c3c4:	fa20 f202 	lsr.w	r2, r0, r2
 801c3c8:	409e      	lsls	r6, r3
 801c3ca:	ea42 0c0c 	orr.w	ip, r2, ip
 801c3ce:	409c      	lsls	r4, r3
 801c3d0:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801c3d4:	b2b7      	uxth	r7, r6
 801c3d6:	fbbc f1fe 	udiv	r1, ip, lr
 801c3da:	0c22      	lsrs	r2, r4, #16
 801c3dc:	fb0e cc11 	mls	ip, lr, r1, ip
 801c3e0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 801c3e4:	fb01 f007 	mul.w	r0, r1, r7
 801c3e8:	4290      	cmp	r0, r2
 801c3ea:	d909      	bls.n	801c400 <__udivmoddi4+0x60>
 801c3ec:	18b2      	adds	r2, r6, r2
 801c3ee:	f101 3cff 	add.w	ip, r1, #4294967295
 801c3f2:	f080 80ee 	bcs.w	801c5d2 <__udivmoddi4+0x232>
 801c3f6:	4290      	cmp	r0, r2
 801c3f8:	f240 80eb 	bls.w	801c5d2 <__udivmoddi4+0x232>
 801c3fc:	3902      	subs	r1, #2
 801c3fe:	4432      	add	r2, r6
 801c400:	1a12      	subs	r2, r2, r0
 801c402:	b2a4      	uxth	r4, r4
 801c404:	fbb2 f0fe 	udiv	r0, r2, lr
 801c408:	fb0e 2210 	mls	r2, lr, r0, r2
 801c40c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801c410:	fb00 f707 	mul.w	r7, r0, r7
 801c414:	42a7      	cmp	r7, r4
 801c416:	d909      	bls.n	801c42c <__udivmoddi4+0x8c>
 801c418:	1934      	adds	r4, r6, r4
 801c41a:	f100 32ff 	add.w	r2, r0, #4294967295
 801c41e:	f080 80da 	bcs.w	801c5d6 <__udivmoddi4+0x236>
 801c422:	42a7      	cmp	r7, r4
 801c424:	f240 80d7 	bls.w	801c5d6 <__udivmoddi4+0x236>
 801c428:	4434      	add	r4, r6
 801c42a:	3802      	subs	r0, #2
 801c42c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801c430:	1be4      	subs	r4, r4, r7
 801c432:	2100      	movs	r1, #0
 801c434:	b11d      	cbz	r5, 801c43e <__udivmoddi4+0x9e>
 801c436:	40dc      	lsrs	r4, r3
 801c438:	2300      	movs	r3, #0
 801c43a:	e9c5 4300 	strd	r4, r3, [r5]
 801c43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c442:	428b      	cmp	r3, r1
 801c444:	d906      	bls.n	801c454 <__udivmoddi4+0xb4>
 801c446:	b10d      	cbz	r5, 801c44c <__udivmoddi4+0xac>
 801c448:	e9c5 0100 	strd	r0, r1, [r5]
 801c44c:	2100      	movs	r1, #0
 801c44e:	4608      	mov	r0, r1
 801c450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c454:	fab3 f183 	clz	r1, r3
 801c458:	2900      	cmp	r1, #0
 801c45a:	d148      	bne.n	801c4ee <__udivmoddi4+0x14e>
 801c45c:	42bb      	cmp	r3, r7
 801c45e:	d302      	bcc.n	801c466 <__udivmoddi4+0xc6>
 801c460:	4282      	cmp	r2, r0
 801c462:	f200 8107 	bhi.w	801c674 <__udivmoddi4+0x2d4>
 801c466:	1a84      	subs	r4, r0, r2
 801c468:	eb67 0203 	sbc.w	r2, r7, r3
 801c46c:	2001      	movs	r0, #1
 801c46e:	4694      	mov	ip, r2
 801c470:	2d00      	cmp	r5, #0
 801c472:	d0e4      	beq.n	801c43e <__udivmoddi4+0x9e>
 801c474:	e9c5 4c00 	strd	r4, ip, [r5]
 801c478:	e7e1      	b.n	801c43e <__udivmoddi4+0x9e>
 801c47a:	2a00      	cmp	r2, #0
 801c47c:	f000 8092 	beq.w	801c5a4 <__udivmoddi4+0x204>
 801c480:	fab2 f382 	clz	r3, r2
 801c484:	2b00      	cmp	r3, #0
 801c486:	f040 80a8 	bne.w	801c5da <__udivmoddi4+0x23a>
 801c48a:	1a8a      	subs	r2, r1, r2
 801c48c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801c490:	fa1f fc86 	uxth.w	ip, r6
 801c494:	2101      	movs	r1, #1
 801c496:	0c20      	lsrs	r0, r4, #16
 801c498:	fbb2 f7fe 	udiv	r7, r2, lr
 801c49c:	fb0e 2217 	mls	r2, lr, r7, r2
 801c4a0:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 801c4a4:	fb0c f007 	mul.w	r0, ip, r7
 801c4a8:	4290      	cmp	r0, r2
 801c4aa:	d907      	bls.n	801c4bc <__udivmoddi4+0x11c>
 801c4ac:	18b2      	adds	r2, r6, r2
 801c4ae:	f107 38ff 	add.w	r8, r7, #4294967295
 801c4b2:	d202      	bcs.n	801c4ba <__udivmoddi4+0x11a>
 801c4b4:	4290      	cmp	r0, r2
 801c4b6:	f200 80e2 	bhi.w	801c67e <__udivmoddi4+0x2de>
 801c4ba:	4647      	mov	r7, r8
 801c4bc:	1a12      	subs	r2, r2, r0
 801c4be:	b2a4      	uxth	r4, r4
 801c4c0:	fbb2 f0fe 	udiv	r0, r2, lr
 801c4c4:	fb0e 2210 	mls	r2, lr, r0, r2
 801c4c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801c4cc:	fb0c fc00 	mul.w	ip, ip, r0
 801c4d0:	45a4      	cmp	ip, r4
 801c4d2:	d907      	bls.n	801c4e4 <__udivmoddi4+0x144>
 801c4d4:	1934      	adds	r4, r6, r4
 801c4d6:	f100 32ff 	add.w	r2, r0, #4294967295
 801c4da:	d202      	bcs.n	801c4e2 <__udivmoddi4+0x142>
 801c4dc:	45a4      	cmp	ip, r4
 801c4de:	f200 80cb 	bhi.w	801c678 <__udivmoddi4+0x2d8>
 801c4e2:	4610      	mov	r0, r2
 801c4e4:	eba4 040c 	sub.w	r4, r4, ip
 801c4e8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 801c4ec:	e7a2      	b.n	801c434 <__udivmoddi4+0x94>
 801c4ee:	f1c1 0620 	rsb	r6, r1, #32
 801c4f2:	408b      	lsls	r3, r1
 801c4f4:	fa22 fc06 	lsr.w	ip, r2, r6
 801c4f8:	ea4c 0c03 	orr.w	ip, ip, r3
 801c4fc:	fa07 f401 	lsl.w	r4, r7, r1
 801c500:	fa20 f306 	lsr.w	r3, r0, r6
 801c504:	40f7      	lsrs	r7, r6
 801c506:	ea4f 491c 	mov.w	r9, ip, lsr #16
 801c50a:	4323      	orrs	r3, r4
 801c50c:	fa00 f801 	lsl.w	r8, r0, r1
 801c510:	fa1f fe8c 	uxth.w	lr, ip
 801c514:	fbb7 f0f9 	udiv	r0, r7, r9
 801c518:	0c1c      	lsrs	r4, r3, #16
 801c51a:	fb09 7710 	mls	r7, r9, r0, r7
 801c51e:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 801c522:	fb00 f70e 	mul.w	r7, r0, lr
 801c526:	42a7      	cmp	r7, r4
 801c528:	fa02 f201 	lsl.w	r2, r2, r1
 801c52c:	d90a      	bls.n	801c544 <__udivmoddi4+0x1a4>
 801c52e:	eb1c 0404 	adds.w	r4, ip, r4
 801c532:	f100 3aff 	add.w	sl, r0, #4294967295
 801c536:	f080 809b 	bcs.w	801c670 <__udivmoddi4+0x2d0>
 801c53a:	42a7      	cmp	r7, r4
 801c53c:	f240 8098 	bls.w	801c670 <__udivmoddi4+0x2d0>
 801c540:	3802      	subs	r0, #2
 801c542:	4464      	add	r4, ip
 801c544:	1be4      	subs	r4, r4, r7
 801c546:	b29f      	uxth	r7, r3
 801c548:	fbb4 f3f9 	udiv	r3, r4, r9
 801c54c:	fb09 4413 	mls	r4, r9, r3, r4
 801c550:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 801c554:	fb03 fe0e 	mul.w	lr, r3, lr
 801c558:	45a6      	cmp	lr, r4
 801c55a:	d909      	bls.n	801c570 <__udivmoddi4+0x1d0>
 801c55c:	eb1c 0404 	adds.w	r4, ip, r4
 801c560:	f103 37ff 	add.w	r7, r3, #4294967295
 801c564:	f080 8082 	bcs.w	801c66c <__udivmoddi4+0x2cc>
 801c568:	45a6      	cmp	lr, r4
 801c56a:	d97f      	bls.n	801c66c <__udivmoddi4+0x2cc>
 801c56c:	3b02      	subs	r3, #2
 801c56e:	4464      	add	r4, ip
 801c570:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801c574:	eba4 040e 	sub.w	r4, r4, lr
 801c578:	fba0 e702 	umull	lr, r7, r0, r2
 801c57c:	42bc      	cmp	r4, r7
 801c57e:	4673      	mov	r3, lr
 801c580:	46b9      	mov	r9, r7
 801c582:	d363      	bcc.n	801c64c <__udivmoddi4+0x2ac>
 801c584:	d060      	beq.n	801c648 <__udivmoddi4+0x2a8>
 801c586:	b15d      	cbz	r5, 801c5a0 <__udivmoddi4+0x200>
 801c588:	ebb8 0203 	subs.w	r2, r8, r3
 801c58c:	eb64 0409 	sbc.w	r4, r4, r9
 801c590:	fa04 f606 	lsl.w	r6, r4, r6
 801c594:	fa22 f301 	lsr.w	r3, r2, r1
 801c598:	431e      	orrs	r6, r3
 801c59a:	40cc      	lsrs	r4, r1
 801c59c:	e9c5 6400 	strd	r6, r4, [r5]
 801c5a0:	2100      	movs	r1, #0
 801c5a2:	e74c      	b.n	801c43e <__udivmoddi4+0x9e>
 801c5a4:	0862      	lsrs	r2, r4, #1
 801c5a6:	0848      	lsrs	r0, r1, #1
 801c5a8:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 801c5ac:	0c0b      	lsrs	r3, r1, #16
 801c5ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c5b2:	b28a      	uxth	r2, r1
 801c5b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801c5b8:	fbb3 f1f6 	udiv	r1, r3, r6
 801c5bc:	07e4      	lsls	r4, r4, #31
 801c5be:	46b4      	mov	ip, r6
 801c5c0:	4637      	mov	r7, r6
 801c5c2:	46b6      	mov	lr, r6
 801c5c4:	231f      	movs	r3, #31
 801c5c6:	fbb0 f0f6 	udiv	r0, r0, r6
 801c5ca:	1bd2      	subs	r2, r2, r7
 801c5cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c5d0:	e761      	b.n	801c496 <__udivmoddi4+0xf6>
 801c5d2:	4661      	mov	r1, ip
 801c5d4:	e714      	b.n	801c400 <__udivmoddi4+0x60>
 801c5d6:	4610      	mov	r0, r2
 801c5d8:	e728      	b.n	801c42c <__udivmoddi4+0x8c>
 801c5da:	f1c3 0120 	rsb	r1, r3, #32
 801c5de:	fa20 f201 	lsr.w	r2, r0, r1
 801c5e2:	409e      	lsls	r6, r3
 801c5e4:	fa27 f101 	lsr.w	r1, r7, r1
 801c5e8:	409f      	lsls	r7, r3
 801c5ea:	433a      	orrs	r2, r7
 801c5ec:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801c5f0:	fa1f fc86 	uxth.w	ip, r6
 801c5f4:	fbb1 f7fe 	udiv	r7, r1, lr
 801c5f8:	fb0e 1017 	mls	r0, lr, r7, r1
 801c5fc:	0c11      	lsrs	r1, r2, #16
 801c5fe:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c602:	fb07 f80c 	mul.w	r8, r7, ip
 801c606:	4588      	cmp	r8, r1
 801c608:	fa04 f403 	lsl.w	r4, r4, r3
 801c60c:	d93a      	bls.n	801c684 <__udivmoddi4+0x2e4>
 801c60e:	1871      	adds	r1, r6, r1
 801c610:	f107 30ff 	add.w	r0, r7, #4294967295
 801c614:	d201      	bcs.n	801c61a <__udivmoddi4+0x27a>
 801c616:	4588      	cmp	r8, r1
 801c618:	d81f      	bhi.n	801c65a <__udivmoddi4+0x2ba>
 801c61a:	eba1 0108 	sub.w	r1, r1, r8
 801c61e:	fbb1 f8fe 	udiv	r8, r1, lr
 801c622:	fb08 f70c 	mul.w	r7, r8, ip
 801c626:	fb0e 1118 	mls	r1, lr, r8, r1
 801c62a:	b292      	uxth	r2, r2
 801c62c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801c630:	42ba      	cmp	r2, r7
 801c632:	d22f      	bcs.n	801c694 <__udivmoddi4+0x2f4>
 801c634:	18b2      	adds	r2, r6, r2
 801c636:	f108 31ff 	add.w	r1, r8, #4294967295
 801c63a:	d2c6      	bcs.n	801c5ca <__udivmoddi4+0x22a>
 801c63c:	42ba      	cmp	r2, r7
 801c63e:	d2c4      	bcs.n	801c5ca <__udivmoddi4+0x22a>
 801c640:	f1a8 0102 	sub.w	r1, r8, #2
 801c644:	4432      	add	r2, r6
 801c646:	e7c0      	b.n	801c5ca <__udivmoddi4+0x22a>
 801c648:	45f0      	cmp	r8, lr
 801c64a:	d29c      	bcs.n	801c586 <__udivmoddi4+0x1e6>
 801c64c:	ebbe 0302 	subs.w	r3, lr, r2
 801c650:	eb67 070c 	sbc.w	r7, r7, ip
 801c654:	3801      	subs	r0, #1
 801c656:	46b9      	mov	r9, r7
 801c658:	e795      	b.n	801c586 <__udivmoddi4+0x1e6>
 801c65a:	eba6 0808 	sub.w	r8, r6, r8
 801c65e:	4441      	add	r1, r8
 801c660:	1eb8      	subs	r0, r7, #2
 801c662:	fbb1 f8fe 	udiv	r8, r1, lr
 801c666:	fb08 f70c 	mul.w	r7, r8, ip
 801c66a:	e7dc      	b.n	801c626 <__udivmoddi4+0x286>
 801c66c:	463b      	mov	r3, r7
 801c66e:	e77f      	b.n	801c570 <__udivmoddi4+0x1d0>
 801c670:	4650      	mov	r0, sl
 801c672:	e767      	b.n	801c544 <__udivmoddi4+0x1a4>
 801c674:	4608      	mov	r0, r1
 801c676:	e6fb      	b.n	801c470 <__udivmoddi4+0xd0>
 801c678:	4434      	add	r4, r6
 801c67a:	3802      	subs	r0, #2
 801c67c:	e732      	b.n	801c4e4 <__udivmoddi4+0x144>
 801c67e:	3f02      	subs	r7, #2
 801c680:	4432      	add	r2, r6
 801c682:	e71b      	b.n	801c4bc <__udivmoddi4+0x11c>
 801c684:	eba1 0108 	sub.w	r1, r1, r8
 801c688:	4638      	mov	r0, r7
 801c68a:	fbb1 f8fe 	udiv	r8, r1, lr
 801c68e:	fb08 f70c 	mul.w	r7, r8, ip
 801c692:	e7c8      	b.n	801c626 <__udivmoddi4+0x286>
 801c694:	4641      	mov	r1, r8
 801c696:	e798      	b.n	801c5ca <__udivmoddi4+0x22a>

0801c698 <_init>:
 801c698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c69a:	bf00      	nop
 801c69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c69e:	bc08      	pop	{r3}
 801c6a0:	469e      	mov	lr, r3
 801c6a2:	4770      	bx	lr

0801c6a4 <_fini>:
 801c6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6a6:	bf00      	nop
 801c6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c6aa:	bc08      	pop	{r3}
 801c6ac:	469e      	mov	lr, r3
 801c6ae:	4770      	bx	lr
