
BMI30.stm32h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b72c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f78  0801b9fc  0801b9fc  0001c9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d974  0801d974  0001e974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d97c  0801d97c  0001e97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801d980  0801d980  0001e980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002a4  24000000  0801d984  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001c254  240002c0  0801dc28  0001f2c0  2**5
                  ALLOC
  8 .noinit       000000a8  2401c514  0801dc28  0001f514  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2401c5bc  0801dc28  0001f5bc  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001f2a4  2**0
                  CONTENTS, READONLY
 11 .comment      00000039  00000000  00000000  0001f2d2  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035860  00000000  00000000  0001f30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b97  00000000  00000000  00054b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002680  00000000  00000000  0005b708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e09  00000000  00000000  0005dd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003de29  00000000  00000000  0005fb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037d10  00000000  00000000  0009d9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001752db  00000000  00000000  000d56ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000a24c  00000000  00000000  0024a9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000019d  00000000  00000000  00254bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000b15  00000000  00000000  00254d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b80c 	b.w	80003b0 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f01b f9a4 	bl	801b6ec <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_idiv0>:
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop

080003b4 <__do_global_dtors_aux>:
 80003b4:	b510      	push	{r4, lr}
 80003b6:	4c05      	ldr	r4, [pc, #20]	@ (80003cc <__do_global_dtors_aux+0x18>)
 80003b8:	7823      	ldrb	r3, [r4, #0]
 80003ba:	b933      	cbnz	r3, 80003ca <__do_global_dtors_aux+0x16>
 80003bc:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <__do_global_dtors_aux+0x1c>)
 80003be:	b113      	cbz	r3, 80003c6 <__do_global_dtors_aux+0x12>
 80003c0:	4804      	ldr	r0, [pc, #16]	@ (80003d4 <__do_global_dtors_aux+0x20>)
 80003c2:	f3af 8000 	nop.w
 80003c6:	2301      	movs	r3, #1
 80003c8:	7023      	strb	r3, [r4, #0]
 80003ca:	bd10      	pop	{r4, pc}
 80003cc:	240002c0 	.word	0x240002c0
 80003d0:	00000000 	.word	0x00000000
 80003d4:	0801b9e4 	.word	0x0801b9e4

080003d8 <frame_dummy>:
 80003d8:	b508      	push	{r3, lr}
 80003da:	4b03      	ldr	r3, [pc, #12]	@ (80003e8 <frame_dummy+0x10>)
 80003dc:	b11b      	cbz	r3, 80003e6 <frame_dummy+0xe>
 80003de:	4903      	ldr	r1, [pc, #12]	@ (80003ec <frame_dummy+0x14>)
 80003e0:	4803      	ldr	r0, [pc, #12]	@ (80003f0 <frame_dummy+0x18>)
 80003e2:	f3af 8000 	nop.w
 80003e6:	bd08      	pop	{r3, pc}
 80003e8:	00000000 	.word	0x00000000
 80003ec:	240002c4 	.word	0x240002c4
 80003f0:	0801b9e4 	.word	0x0801b9e4

080003f4 <adc_stream_stop>:
        ADC_LOGF("%u ", buf[i]);
    }
    ADC_LOGF("\r\n");
}
// Остановка стрима ADC: корректно останавливает DMA и ADC, сбрасывает буферы
void adc_stream_stop(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
    if (s_adc1) {
 80003f8:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <adc_stream_stop+0x5c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d009      	beq.n	8000414 <adc_stream_stop+0x20>
        HAL_ADC_Stop_DMA(s_adc1);
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <adc_stream_stop+0x5c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4618      	mov	r0, r3
 8000406:	f005 fbfb 	bl	8005c00 <HAL_ADC_Stop_DMA>
        HAL_ADC_Stop(s_adc1);
 800040a:	4b11      	ldr	r3, [pc, #68]	@ (8000450 <adc_stream_stop+0x5c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4618      	mov	r0, r3
 8000410:	f005 fae6 	bl	80059e0 <HAL_ADC_Stop>
    }
    if (s_adc2) {
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <adc_stream_stop+0x60>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d009      	beq.n	8000430 <adc_stream_stop+0x3c>
        HAL_ADC_Stop_DMA(s_adc2);
 800041c:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <adc_stream_stop+0x60>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f005 fbed 	bl	8005c00 <HAL_ADC_Stop_DMA>
        HAL_ADC_Stop(s_adc2);
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <adc_stream_stop+0x60>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f005 fad8 	bl	80059e0 <HAL_ADC_Stop>
    }
    frame_wr_seq = frame_rd_seq = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	4a09      	ldr	r2, [pc, #36]	@ (8000458 <adc_stream_stop+0x64>)
 8000434:	6013      	str	r3, [r2, #0]
 8000436:	4a09      	ldr	r2, [pc, #36]	@ (800045c <adc_stream_stop+0x68>)
 8000438:	6013      	str	r3, [r2, #0]
    frame_overflow_drops = 0;
 800043a:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <adc_stream_stop+0x6c>)
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
    frame_backlog_max = 0;
 8000440:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <adc_stream_stop+0x70>)
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
    s_next_ring_index = 0;
 8000446:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <adc_stream_stop+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
    ADC_LOGF("[ADC][STOP] DMA и ADC остановлены, буферы сброшены\r\n");
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2400ad2c 	.word	0x2400ad2c
 8000454:	2400ad30 	.word	0x2400ad30
 8000458:	2400ad04 	.word	0x2400ad04
 800045c:	2400ad00 	.word	0x2400ad00
 8000460:	2400ad08 	.word	0x2400ad08
 8000464:	2400ad0c 	.word	0x2400ad0c
 8000468:	2400ad28 	.word	0x2400ad28

0800046c <adc_stream_get_profile>:

ADC_HandleTypeDef* s_adc1 = NULL;
ADC_HandleTypeDef* s_adc2 = NULL;

// Публичные функции профиля
uint8_t adc_stream_get_profile(void) { return g_active_profile; }
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
 8000470:	4b03      	ldr	r3, [pc, #12]	@ (8000480 <adc_stream_get_profile+0x14>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4618      	mov	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	24000000 	.word	0x24000000

08000484 <adc_stream_get_active_samples>:
uint16_t adc_stream_get_active_samples(void) { return g_active_samples; }
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
 8000488:	4b03      	ldr	r3, [pc, #12]	@ (8000498 <adc_stream_get_active_samples+0x14>)
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	24000002 	.word	0x24000002

0800049c <adc_stream_get_buf_rate>:
uint16_t adc_stream_get_buf_rate(void) { return g_profiles[g_active_profile].buf_rate_hz; }
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
 80004a0:	4b05      	ldr	r3, [pc, #20]	@ (80004b8 <adc_stream_get_buf_rate+0x1c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4a05      	ldr	r2, [pc, #20]	@ (80004bc <adc_stream_get_buf_rate+0x20>)
 80004a6:	00db      	lsls	r3, r3, #3
 80004a8:	4413      	add	r3, r2
 80004aa:	885b      	ldrh	r3, [r3, #2]
 80004ac:	4618      	mov	r0, r3
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	24000000 	.word	0x24000000
 80004bc:	0801c720 	.word	0x0801c720

080004c0 <adc_stream_apply_profile>:
uint32_t adc_stream_get_fs(void) { return g_profiles[g_active_profile].fs_hz; }

static HAL_StatusTypeDef adc_stream_apply_profile(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
    if (!s_adc1 || !s_adc2) {
 80004c6:	4b3c      	ldr	r3, [pc, #240]	@ (80005b8 <adc_stream_apply_profile+0xf8>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d003      	beq.n	80004d6 <adc_stream_apply_profile+0x16>
 80004ce:	4b3b      	ldr	r3, [pc, #236]	@ (80005bc <adc_stream_apply_profile+0xfc>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d101      	bne.n	80004da <adc_stream_apply_profile+0x1a>
        ADC_LOGF("[ADC][APPLY_PROFILE] ERROR: s_adc1/s_adc2 не инициализированы!\r\n");
        return HAL_ERROR;
 80004d6:	2301      	movs	r3, #1
 80004d8:	e06a      	b.n	80005b0 <adc_stream_apply_profile+0xf0>
    }
    uint32_t total_samples = (uint32_t)g_active_samples;
 80004da:	4b39      	ldr	r3, [pc, #228]	@ (80005c0 <adc_stream_apply_profile+0x100>)
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	617b      	str	r3, [r7, #20]
    ADC_LOGF("[ADC][APPLY_PROFILE] profile=%u samples=%u\r\n", (unsigned)g_active_profile, (unsigned)g_active_samples);
    // Остановить DMA перед запуском с новым размером
    HAL_ADC_Stop_DMA(s_adc1);
 80004e0:	4b35      	ldr	r3, [pc, #212]	@ (80005b8 <adc_stream_apply_profile+0xf8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f005 fb8b 	bl	8005c00 <HAL_ADC_Stop_DMA>
    HAL_ADC_Stop_DMA(s_adc2);
 80004ea:	4b34      	ldr	r3, [pc, #208]	@ (80005bc <adc_stream_apply_profile+0xfc>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f005 fb86 	bl	8005c00 <HAL_ADC_Stop_DMA>
    ADC_LOGF("[ADC][APPLY_PROFILE] DMA остановлен, подготовка к запуску\r\n");
    frame_wr_seq = frame_rd_seq = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	4a33      	ldr	r2, [pc, #204]	@ (80005c4 <adc_stream_apply_profile+0x104>)
 80004f8:	6013      	str	r3, [r2, #0]
 80004fa:	4a33      	ldr	r2, [pc, #204]	@ (80005c8 <adc_stream_apply_profile+0x108>)
 80004fc:	6013      	str	r3, [r2, #0]
    frame_overflow_drops = 0;
 80004fe:	4b33      	ldr	r3, [pc, #204]	@ (80005cc <adc_stream_apply_profile+0x10c>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
    frame_backlog_max = 0;
 8000504:	4b32      	ldr	r3, [pc, #200]	@ (80005d0 <adc_stream_apply_profile+0x110>)
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
    s_next_ring_index = 2 % FIFO_FRAMES; // M0->buf0, M1->buf1 уже заняты при старте; начнём с 2
 800050a:	4b32      	ldr	r3, [pc, #200]	@ (80005d4 <adc_stream_apply_profile+0x114>)
 800050c:	2202      	movs	r2, #2
 800050e:	601a      	str	r2, [r3, #0]
    #if DIAG_DISABLE_ADC_DMA
        ADC_LOGF("[ADC][DIAG] DMA start suppressed (DIAG_DISABLE_ADC_DMA=1) total_samples=%lu\r\n", (unsigned long)total_samples);
        return HAL_OK;
    #else
        // Старт ADC1 DMA на буфер[0] длиной N
    HAL_StatusTypeDef rc1 = HAL_ADC_Start_DMA(s_adc1, (uint32_t*)adc1_buffers[0], total_samples);
 8000510:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <adc_stream_apply_profile+0xf8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	4930      	ldr	r1, [pc, #192]	@ (80005d8 <adc_stream_apply_profile+0x118>)
 8000518:	4618      	mov	r0, r3
 800051a:	f005 fa95 	bl	8005a48 <HAL_ADC_Start_DMA>
 800051e:	4603      	mov	r3, r0
 8000520:	74fb      	strb	r3, [r7, #19]
    ADC_LOGF("[ADC][APPLY_PROFILE] HAL_ADC_Start_DMA ADC1 rc=%d\r\n", (int)rc1);
    if (rc1 != HAL_OK) return HAL_ERROR;
 8000522:	7cfb      	ldrb	r3, [r7, #19]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <adc_stream_apply_profile+0x6c>
 8000528:	2301      	movs	r3, #1
 800052a:	e041      	b.n	80005b0 <adc_stream_apply_profile+0xf0>
        #if !DIAG_SINGLE_ADC1
    HAL_StatusTypeDef rc2 = HAL_ADC_Start_DMA(s_adc2, (uint32_t*)adc2_buffers[0], total_samples);
 800052c:	4b23      	ldr	r3, [pc, #140]	@ (80005bc <adc_stream_apply_profile+0xfc>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	492a      	ldr	r1, [pc, #168]	@ (80005dc <adc_stream_apply_profile+0x11c>)
 8000534:	4618      	mov	r0, r3
 8000536:	f005 fa87 	bl	8005a48 <HAL_ADC_Start_DMA>
 800053a:	4603      	mov	r3, r0
 800053c:	74bb      	strb	r3, [r7, #18]
    ADC_LOGF("[ADC][APPLY_PROFILE] HAL_ADC_Start_DMA ADC2 rc=%d\r\n", (int)rc2);
    if (rc2 != HAL_OK) return HAL_ERROR;
 800053e:	7cbb      	ldrb	r3, [r7, #18]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <adc_stream_apply_profile+0x88>
 8000544:	2301      	movs	r3, #1
 8000546:	e033      	b.n	80005b0 <adc_stream_apply_profile+0xf0>
        #if ADC2_DISABLE_DMA_IRQS
            /* Отключаем HT/TC прерывания у DMA ADC2 для снижения нагрузки на CPU */
            do {
                DMA_Stream_TypeDef *st2 = (DMA_Stream_TypeDef*)hdma_adc2.Instance;
 8000548:	4b25      	ldr	r3, [pc, #148]	@ (80005e0 <adc_stream_apply_profile+0x120>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	60fb      	str	r3, [r7, #12]
                /* CR: DMEIE(1) | TEIE(2) | HTIE(3) | TCIE(4) */
                st2->CR &= ~((uint32_t)(1u<<1) | (uint32_t)(1u<<2) | (uint32_t)(1u<<3) | (uint32_t)(1u<<4));
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f023 021e 	bic.w	r2, r3, #30
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	601a      	str	r2, [r3, #0]
                /* FCR: FEIE(7) */
                st2->FCR &= ~((uint32_t)(1u<<7));
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	615a      	str	r2, [r3, #20]
                /* NVIC: Полностью выключаем IRQ DMA1_Stream1 */
                HAL_NVIC_DisableIRQ(DMA1_Stream1_IRQn);
 8000566:	200c      	movs	r0, #12
 8000568:	f006 fde1 	bl	800712e <HAL_NVIC_DisableIRQ>
            } while (0);
        #endif
        #endif
        /* Включаем Double-Buffer Mode (DBM) и задаём второй банк M1 на buf[1] */
        {
            DMA_Stream_TypeDef *st = (DMA_Stream_TypeDef*)hdma_adc1.Instance;
 800056c:	4b1d      	ldr	r3, [pc, #116]	@ (80005e4 <adc_stream_apply_profile+0x124>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	60bb      	str	r3, [r7, #8]
            st->M1AR = (uint32_t)adc1_buffers[1];
 8000572:	4a1d      	ldr	r2, [pc, #116]	@ (80005e8 <adc_stream_apply_profile+0x128>)
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	611a      	str	r2, [r3, #16]
            st->CR  |= (uint32_t)(1u<<18); /* DBM */
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	601a      	str	r2, [r3, #0]
            /* Отключаем HTIE (half) — оставляем только TC */
            st->CR &= ~((uint32_t)(1u<<3));
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f023 0208 	bic.w	r2, r3, #8
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	601a      	str	r2, [r3, #0]
        }
        #if !DIAG_SINGLE_ADC1
        {
            DMA_Stream_TypeDef *st = (DMA_Stream_TypeDef*)hdma_adc2.Instance;
 8000590:	4b13      	ldr	r3, [pc, #76]	@ (80005e0 <adc_stream_apply_profile+0x120>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	607b      	str	r3, [r7, #4]
            st->M1AR = (uint32_t)adc2_buffers[1];
 8000596:	4a15      	ldr	r2, [pc, #84]	@ (80005ec <adc_stream_apply_profile+0x12c>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	611a      	str	r2, [r3, #16]
            st->CR  |= (uint32_t)(1u<<18); /* DBM */
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	601a      	str	r2, [r3, #0]
            /* Для ADC2 все IRQ уже выключены выше */
        }
        #endif
        /* Одноразовый вывод регистров DMA для ADC1 */
        {
            DMA_Stream_TypeDef *st = (DMA_Stream_TypeDef*)hdma_adc1.Instance;
 80005a8:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <adc_stream_apply_profile+0x124>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	603b      	str	r3, [r7, #0]
                   (unsigned long)st->M0AR,
                   (unsigned long)st->FCR,
                   (unsigned)DIAG_SINGLE_ADC1);
        }
    #endif
    return HAL_OK;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2400ad2c 	.word	0x2400ad2c
 80005bc:	2400ad30 	.word	0x2400ad30
 80005c0:	24000002 	.word	0x24000002
 80005c4:	2400ad04 	.word	0x2400ad04
 80005c8:	2400ad00 	.word	0x2400ad00
 80005cc:	2400ad08 	.word	0x2400ad08
 80005d0:	2400ad0c 	.word	0x2400ad0c
 80005d4:	2400ad28 	.word	0x2400ad28
 80005d8:	24000300 	.word	0x24000300
 80005dc:	24005800 	.word	0x24005800
 80005e0:	2400b1c0 	.word	0x2400b1c0
 80005e4:	2400b148 	.word	0x2400b148
 80005e8:	24000da0 	.word	0x24000da0
 80005ec:	240062a0 	.word	0x240062a0

080005f0 <adc_stream_set_profile>:

int adc_stream_set_profile(uint8_t prof_id) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
    if (prof_id >= ADC_PROFILE_COUNT) return -1;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d902      	bls.n	8000606 <adc_stream_set_profile+0x16>
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	e020      	b.n	8000648 <adc_stream_set_profile+0x58>
    if (prof_id == g_active_profile) return 0; // уже
 8000606:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <adc_stream_set_profile+0x60>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	79fa      	ldrb	r2, [r7, #7]
 800060c:	429a      	cmp	r2, r3
 800060e:	d101      	bne.n	8000614 <adc_stream_set_profile+0x24>
 8000610:	2300      	movs	r3, #0
 8000612:	e019      	b.n	8000648 <adc_stream_set_profile+0x58>
    g_active_profile = prof_id;
 8000614:	4a0e      	ldr	r2, [pc, #56]	@ (8000650 <adc_stream_set_profile+0x60>)
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	7013      	strb	r3, [r2, #0]
    g_active_samples = g_profiles[prof_id].samples_per_buf;
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <adc_stream_set_profile+0x64>)
 800061e:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8000622:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <adc_stream_set_profile+0x68>)
 8000624:	801a      	strh	r2, [r3, #0]
    if (s_adc1 && s_adc2) {
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <adc_stream_set_profile+0x6c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00b      	beq.n	8000646 <adc_stream_set_profile+0x56>
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <adc_stream_set_profile+0x70>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <adc_stream_set_profile+0x56>
        if (adc_stream_apply_profile() != HAL_OK) return -2;
 8000636:	f7ff ff43 	bl	80004c0 <adc_stream_apply_profile>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <adc_stream_set_profile+0x56>
 8000640:	f06f 0301 	mvn.w	r3, #1
 8000644:	e000      	b.n	8000648 <adc_stream_set_profile+0x58>
    }
    return 0;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000000 	.word	0x24000000
 8000654:	0801c720 	.word	0x0801c720
 8000658:	24000002 	.word	0x24000002
 800065c:	2400ad2c 	.word	0x2400ad2c
 8000660:	2400ad30 	.word	0x2400ad30

08000664 <adc_stream_init>:

void adc_stream_init(void) {
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
    frame_wr_seq = frame_rd_seq = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	4a07      	ldr	r2, [pc, #28]	@ (8000688 <adc_stream_init+0x24>)
 800066c:	6013      	str	r3, [r2, #0]
 800066e:	4a07      	ldr	r2, [pc, #28]	@ (800068c <adc_stream_init+0x28>)
 8000670:	6013      	str	r3, [r2, #0]
    frame_overflow_drops = 0;
 8000672:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <adc_stream_init+0x2c>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
    frame_backlog_max = 0;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <adc_stream_init+0x30>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	2400ad04 	.word	0x2400ad04
 800068c:	2400ad00 	.word	0x2400ad00
 8000690:	2400ad08 	.word	0x2400ad08
 8000694:	2400ad0c 	.word	0x2400ad0c

08000698 <adc_stream_start>:

HAL_StatusTypeDef adc_stream_start(ADC_HandleTypeDef* a1, ADC_HandleTypeDef* a2) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
    s_adc1 = a1; s_adc2 = a2;
 80006a2:	4a0e      	ldr	r2, [pc, #56]	@ (80006dc <adc_stream_start+0x44>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4a0d      	ldr	r2, [pc, #52]	@ (80006e0 <adc_stream_start+0x48>)
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	6013      	str	r3, [r2, #0]
    g_active_profile = ADC_PROFILE_B_DEFAULT;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <adc_stream_start+0x4c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
    g_active_samples = g_profiles[g_active_profile].samples_per_buf;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <adc_stream_start+0x4c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <adc_stream_start+0x50>)
 80006bc:	f833 2032 	ldrh.w	r2, [r3, r2, lsl #3]
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <adc_stream_start+0x54>)
 80006c2:	801a      	strh	r2, [r3, #0]
    adc_stream_init();
 80006c4:	f7ff ffce 	bl	8000664 <adc_stream_init>
    ADC_LOGF("[ADC][START] profile=%u samples=%u\r\n", (unsigned)g_active_profile, (unsigned)g_active_samples);
    HAL_StatusTypeDef rc = adc_stream_apply_profile();
 80006c8:	f7ff fefa 	bl	80004c0 <adc_stream_apply_profile>
 80006cc:	4603      	mov	r3, r0
 80006ce:	73fb      	strb	r3, [r7, #15]
    ADC_LOGF("[ADC][START] adc_stream_apply_profile rc=%d\r\n", (int)rc);
    return rc;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2400ad2c 	.word	0x2400ad2c
 80006e0:	2400ad30 	.word	0x2400ad30
 80006e4:	24000000 	.word	0x24000000
 80006e8:	0801c720 	.word	0x0801c720
 80006ec:	24000002 	.word	0x24000002

080006f0 <adc_get_frame>:
    if (a1) s_adc1 = a1;
    if (a2) s_adc2 = a2;
    return adc_stream_apply_profile();
}

uint8_t adc_get_frame(uint16_t **ch1, uint16_t **ch2, uint16_t *samples) {
 80006f0:	b480      	push	{r7}
 80006f2:	b087      	sub	sp, #28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
    if (!ch1 || !ch2 || !samples) {
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d005      	beq.n	800070e <adc_get_frame+0x1e>
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d002      	beq.n	800070e <adc_get_frame+0x1e>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d101      	bne.n	8000712 <adc_get_frame+0x22>
        ADC_LOGF("[ADC][GET_FRAME] ERROR: ch1/ch2/samples NULL\r\n");
        return 0;
 800070e:	2300      	movs	r3, #0
 8000710:	e02e      	b.n	8000770 <adc_get_frame+0x80>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000712:	b672      	cpsid	i
}
 8000714:	bf00      	nop
    }
    __disable_irq();
    if (frame_rd_seq == frame_wr_seq) {
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <adc_get_frame+0x8c>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <adc_get_frame+0x90>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	429a      	cmp	r2, r3
 8000720:	d103      	bne.n	800072a <adc_get_frame+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000722:	b662      	cpsie	i
}
 8000724:	bf00      	nop
        __enable_irq();
        ADC_LOGF("[ADC][GET_FRAME] Нет новых кадров: frame_wr_seq=%lu frame_rd_seq=%lu\r\n", (unsigned long)frame_wr_seq, (unsigned long)frame_rd_seq);
        return 0;
 8000726:	2300      	movs	r3, #0
 8000728:	e022      	b.n	8000770 <adc_get_frame+0x80>
    }
    uint32_t seq = frame_rd_seq++;
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <adc_get_frame+0x8c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	4912      	ldr	r1, [pc, #72]	@ (800077c <adc_get_frame+0x8c>)
 8000732:	600a      	str	r2, [r1, #0]
 8000734:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 8000736:	b662      	cpsie	i
}
 8000738:	bf00      	nop
    __enable_irq();
    uint32_t index = seq & (FIFO_FRAMES - 1u);
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	f003 0307 	and.w	r3, r3, #7
 8000740:	613b      	str	r3, [r7, #16]
    *ch1 = adc1_buffers[index];
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8000748:	fb02 f303 	mul.w	r3, r2, r3
 800074c:	4a0d      	ldr	r2, [pc, #52]	@ (8000784 <adc_get_frame+0x94>)
 800074e:	441a      	add	r2, r3
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	601a      	str	r2, [r3, #0]
    *ch2 = adc2_buffers[index];
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 800075a:	fb02 f303 	mul.w	r3, r2, r3
 800075e:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <adc_get_frame+0x98>)
 8000760:	441a      	add	r2, r3
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	601a      	str	r2, [r3, #0]
    *samples = g_active_samples;
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <adc_get_frame+0x9c>)
 8000768:	881a      	ldrh	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	801a      	strh	r2, [r3, #0]
    ADC_LOGF("[ADC][GET_FRAME] OK: seq=%lu index=%lu samples=%u\r\n", (unsigned long)seq, (unsigned long)index, (unsigned)g_active_samples);
    return 1;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	371c      	adds	r7, #28
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	2400ad04 	.word	0x2400ad04
 8000780:	2400ad00 	.word	0x2400ad00
 8000784:	24000300 	.word	0x24000300
 8000788:	24005800 	.word	0x24005800
 800078c:	24000002 	.word	0x24000002

08000790 <adc_stream_get_debug>:

void adc_stream_get_debug(adc_stream_debug_t *out) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    if (!out) return;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d027      	beq.n	80007ee <adc_stream_get_debug+0x5e>
    out->frame_wr_seq = frame_wr_seq;
 800079e:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <adc_stream_get_debug+0x6c>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	601a      	str	r2, [r3, #0]
    out->frame_rd_seq = frame_rd_seq;
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <adc_stream_get_debug+0x70>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	605a      	str	r2, [r3, #4]
    out->frame_overflow_drops = frame_overflow_drops;
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <adc_stream_get_debug+0x74>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	609a      	str	r2, [r3, #8]
    out->frame_backlog_max = frame_backlog_max;
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <adc_stream_get_debug+0x78>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	60da      	str	r2, [r3, #12]
    out->dma_half0 = dma_half0; out->dma_full0 = dma_full0;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <adc_stream_get_debug+0x7c>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <adc_stream_get_debug+0x80>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	615a      	str	r2, [r3, #20]
    out->dma_half1 = dma_half1; out->dma_full1 = dma_full1;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <adc_stream_get_debug+0x84>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	619a      	str	r2, [r3, #24]
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <adc_stream_get_debug+0x88>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	61da      	str	r2, [r3, #28]
    out->active_samples = g_active_samples;
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <adc_stream_get_debug+0x8c>)
 80007e0:	881a      	ldrh	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	841a      	strh	r2, [r3, #32]
    out->reserved = 0;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	845a      	strh	r2, [r3, #34]	@ 0x22
 80007ec:	e000      	b.n	80007f0 <adc_stream_get_debug+0x60>
    if (!out) return;
 80007ee:	bf00      	nop
}
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	2400ad00 	.word	0x2400ad00
 8000800:	2400ad04 	.word	0x2400ad04
 8000804:	2400ad08 	.word	0x2400ad08
 8000808:	2400ad0c 	.word	0x2400ad0c
 800080c:	2400ad18 	.word	0x2400ad18
 8000810:	2400ad1c 	.word	0x2400ad1c
 8000814:	2400ad20 	.word	0x2400ad20
 8000818:	2400ad24 	.word	0x2400ad24
 800081c:	24000002 	.word	0x24000002

08000820 <HAL_ADC_ConvHalfCpltCallback>:

// Weak hook (can be overridden in higher-level module, e.g. USB)
void __attribute__((weak)) adc_stream_on_new_frames(uint32_t frames_added) { (void)frames_added; }

// --- HAL callbacks ---
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == (s_adc1 ? s_adc1->Instance : NULL)) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d003      	beq.n	800083c <HAL_ADC_ConvHalfCpltCallback+0x1c>
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	e000      	b.n	800083e <HAL_ADC_ConvHalfCpltCallback+0x1e>
 800083c:	2300      	movs	r3, #0
 800083e:	4293      	cmp	r3, r2
 8000840:	d10a      	bne.n	8000858 <HAL_ADC_ConvHalfCpltCallback+0x38>
    dma_half0++; dbg_dma1_half_count++;
 8000842:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	4a10      	ldr	r2, [pc, #64]	@ (800088c <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8000854:	6013      	str	r3, [r2, #0]
        /* Half-Complete игнорируем (IRQ отключён), оставлено для счётчиков */
        (void)0;
    } else if (hadc->Instance == (s_adc2 ? s_adc2->Instance : NULL)) {
        dma_half1++; // используем только для диагностики
    }
}
 8000856:	e011      	b.n	800087c <HAL_ADC_ConvHalfCpltCallback+0x5c>
    } else if (hadc->Instance == (s_adc2 ? s_adc2->Instance : NULL)) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d003      	beq.n	800086c <HAL_ADC_ConvHalfCpltCallback+0x4c>
 8000864:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	e000      	b.n	800086e <HAL_ADC_ConvHalfCpltCallback+0x4e>
 800086c:	2300      	movs	r3, #0
 800086e:	4293      	cmp	r3, r2
 8000870:	d104      	bne.n	800087c <HAL_ADC_ConvHalfCpltCallback+0x5c>
        dma_half1++; // используем только для диагностики
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	4a07      	ldr	r2, [pc, #28]	@ (8000898 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	2400ad2c 	.word	0x2400ad2c
 800088c:	2400ad18 	.word	0x2400ad18
 8000890:	240002dc 	.word	0x240002dc
 8000894:	2400ad30 	.word	0x2400ad30
 8000898:	2400ad20 	.word	0x2400ad20

0800089c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == (s_adc1 ? s_adc1->Instance : NULL)) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b58      	ldr	r3, [pc, #352]	@ (8000a0c <HAL_ADC_ConvCpltCallback+0x170>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d003      	beq.n	80008b8 <HAL_ADC_ConvCpltCallback+0x1c>
 80008b0:	4b56      	ldr	r3, [pc, #344]	@ (8000a0c <HAL_ADC_ConvCpltCallback+0x170>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	e000      	b.n	80008ba <HAL_ADC_ConvCpltCallback+0x1e>
 80008b8:	2300      	movs	r3, #0
 80008ba:	4293      	cmp	r3, r2
 80008bc:	f040 808b 	bne.w	80009d6 <HAL_ADC_ConvCpltCallback+0x13a>
    dma_full0++; dbg_dma1_full_count++;
 80008c0:	4b53      	ldr	r3, [pc, #332]	@ (8000a10 <HAL_ADC_ConvCpltCallback+0x174>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	4a52      	ldr	r2, [pc, #328]	@ (8000a10 <HAL_ADC_ConvCpltCallback+0x174>)
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	4b52      	ldr	r3, [pc, #328]	@ (8000a14 <HAL_ADC_ConvCpltCallback+0x178>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	4a50      	ldr	r2, [pc, #320]	@ (8000a14 <HAL_ADC_ConvCpltCallback+0x178>)
 80008d2:	6013      	str	r3, [r2, #0]
           (unsigned long)dbg_dma1_half_count,
           (unsigned long)dbg_dma1_full_count);
        return;
    }
#endif
        adc_last_full0_ms = HAL_GetTick();
 80008d4:	f004 faf6 	bl	8004ec4 <HAL_GetTick>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a4f      	ldr	r2, [pc, #316]	@ (8000a18 <HAL_ADC_ConvCpltCallback+0x17c>)
 80008dc:	6013      	str	r3, [r2, #0]
        /* Один полный буфер (N выборок) готов */
        uint32_t frames_added = 1u;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
    frame_wr_seq += frames_added;
 80008e2:	4b4e      	ldr	r3, [pc, #312]	@ (8000a1c <HAL_ADC_ConvCpltCallback+0x180>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	6a3b      	ldr	r3, [r7, #32]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a4c      	ldr	r2, [pc, #304]	@ (8000a1c <HAL_ADC_ConvCpltCallback+0x180>)
 80008ec:	6013      	str	r3, [r2, #0]
    ADC_LOGF("[ADC][DMA] ConvCplt: frame_wr_seq=%lu frame_rd_seq=%lu\r\n", (unsigned long)frame_wr_seq, (unsigned long)frame_rd_seq);
        uint32_t backlog = frame_wr_seq - frame_rd_seq;
 80008ee:	4b4b      	ldr	r3, [pc, #300]	@ (8000a1c <HAL_ADC_ConvCpltCallback+0x180>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000a20 <HAL_ADC_ConvCpltCallback+0x184>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	61fb      	str	r3, [r7, #28]
        if (backlog > frame_backlog_max) frame_backlog_max = backlog;
 80008fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000a24 <HAL_ADC_ConvCpltCallback+0x188>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	429a      	cmp	r2, r3
 8000902:	d902      	bls.n	800090a <HAL_ADC_ConvCpltCallback+0x6e>
 8000904:	4a47      	ldr	r2, [pc, #284]	@ (8000a24 <HAL_ADC_ConvCpltCallback+0x188>)
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	6013      	str	r3, [r2, #0]
        if (backlog > FIFO_FRAMES) {
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	2b08      	cmp	r3, #8
 800090e:	d90e      	bls.n	800092e <HAL_ADC_ConvCpltCallback+0x92>
            uint32_t excess = backlog - FIFO_FRAMES;
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	3b08      	subs	r3, #8
 8000914:	61bb      	str	r3, [r7, #24]
            frame_overflow_drops += excess;
 8000916:	4b44      	ldr	r3, [pc, #272]	@ (8000a28 <HAL_ADC_ConvCpltCallback+0x18c>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	4413      	add	r3, r2
 800091e:	4a42      	ldr	r2, [pc, #264]	@ (8000a28 <HAL_ADC_ConvCpltCallback+0x18c>)
 8000920:	6013      	str	r3, [r2, #0]
            frame_rd_seq += excess;
 8000922:	4b3f      	ldr	r3, [pc, #252]	@ (8000a20 <HAL_ADC_ConvCpltCallback+0x184>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	4413      	add	r3, r2
 800092a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a20 <HAL_ADC_ConvCpltCallback+0x184>)
 800092c:	6013      	str	r3, [r2, #0]
        }
        adc_stream_on_new_frames(frames_added);
 800092e:	6a38      	ldr	r0, [r7, #32]
 8000930:	f018 f8a8 	bl	8018a84 <adc_stream_on_new_frames>

        /* Продвинем адрес свободного банка DMA на следующий слот кольца — для ADC1 и ADC2.
           В DBM разрешено писать в неактивный банк: определяем по биту CT (CR[19]). */
        do {
            uint32_t idx = s_next_ring_index; // выбрать следующий буфер
 8000934:	4b3d      	ldr	r3, [pc, #244]	@ (8000a2c <HAL_ADC_ConvCpltCallback+0x190>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
            if (idx >= FIFO_FRAMES) idx &= (FIFO_FRAMES-1u);
 800093a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093c:	2b07      	cmp	r3, #7
 800093e:	d903      	bls.n	8000948 <HAL_ADC_ConvCpltCallback+0xac>
 8000940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
            DMA_Stream_TypeDef *st1 = (DMA_Stream_TypeDef*)hdma_adc1.Instance;
 8000948:	4b39      	ldr	r3, [pc, #228]	@ (8000a30 <HAL_ADC_ConvCpltCallback+0x194>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	617b      	str	r3, [r7, #20]
            uint32_t cr1 = st1->CR;
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	613b      	str	r3, [r7, #16]
            if (cr1 & (1u<<19)) {
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800095a:	2b00      	cmp	r3, #0
 800095c:	d00a      	beq.n	8000974 <HAL_ADC_ConvCpltCallback+0xd8>
                /* CT=1 => сейчас активен M1, значит завершился M0 -> переадресуем M0 на следующий */
                st1->M0AR = (uint32_t)adc1_buffers[idx];
 800095e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000960:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8000964:	fb02 f303 	mul.w	r3, r2, r3
 8000968:	4a32      	ldr	r2, [pc, #200]	@ (8000a34 <HAL_ADC_ConvCpltCallback+0x198>)
 800096a:	4413      	add	r3, r2
 800096c:	461a      	mov	r2, r3
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	e009      	b.n	8000988 <HAL_ADC_ConvCpltCallback+0xec>
            } else {
                /* CT=0 => активен M0, завершился M1 */
                st1->M1AR = (uint32_t)adc1_buffers[idx];
 8000974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000976:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 800097a:	fb02 f303 	mul.w	r3, r2, r3
 800097e:	4a2d      	ldr	r2, [pc, #180]	@ (8000a34 <HAL_ADC_ConvCpltCallback+0x198>)
 8000980:	4413      	add	r3, r2
 8000982:	461a      	mov	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	611a      	str	r2, [r3, #16]
            }
            #if !DIAG_SINGLE_ADC1
            DMA_Stream_TypeDef *st2 = (DMA_Stream_TypeDef*)hdma_adc2.Instance;
 8000988:	4b2b      	ldr	r3, [pc, #172]	@ (8000a38 <HAL_ADC_ConvCpltCallback+0x19c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	60fb      	str	r3, [r7, #12]
            uint32_t cr2 = st2->CR;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	60bb      	str	r3, [r7, #8]
            if (cr2 & (1u<<19)) {
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00a      	beq.n	80009b4 <HAL_ADC_ConvCpltCallback+0x118>
                st2->M0AR = (uint32_t)adc2_buffers[idx];
 800099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a0:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a24      	ldr	r2, [pc, #144]	@ (8000a3c <HAL_ADC_ConvCpltCallback+0x1a0>)
 80009aa:	4413      	add	r3, r2
 80009ac:	461a      	mov	r2, r3
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	e009      	b.n	80009c8 <HAL_ADC_ConvCpltCallback+0x12c>
            } else {
                st2->M1AR = (uint32_t)adc2_buffers[idx];
 80009b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b6:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 80009ba:	fb02 f303 	mul.w	r3, r2, r3
 80009be:	4a1f      	ldr	r2, [pc, #124]	@ (8000a3c <HAL_ADC_ConvCpltCallback+0x1a0>)
 80009c0:	4413      	add	r3, r2
 80009c2:	461a      	mov	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	611a      	str	r2, [r3, #16]
            }
            #endif
            s_next_ring_index = (idx + 1u) & (FIFO_FRAMES - 1u);
 80009c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ca:	3301      	adds	r3, #1
 80009cc:	f003 0307 	and.w	r3, r3, #7
 80009d0:	4a16      	ldr	r2, [pc, #88]	@ (8000a2c <HAL_ADC_ConvCpltCallback+0x190>)
 80009d2:	6013      	str	r3, [r2, #0]
        } while(0);
    } else if (hadc->Instance == (s_adc2 ? s_adc2->Instance : NULL)) {
        dma_full1++;
        adc_last_full1_ms = HAL_GetTick();
    }
 80009d4:	e016      	b.n	8000a04 <HAL_ADC_ConvCpltCallback+0x168>
    } else if (hadc->Instance == (s_adc2 ? s_adc2->Instance : NULL)) {
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <HAL_ADC_ConvCpltCallback+0x14e>
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	e000      	b.n	80009ec <HAL_ADC_ConvCpltCallback+0x150>
 80009ea:	2300      	movs	r3, #0
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d109      	bne.n	8000a04 <HAL_ADC_ConvCpltCallback+0x168>
        dma_full1++;
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	4a13      	ldr	r2, [pc, #76]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80009f8:	6013      	str	r3, [r2, #0]
        adc_last_full1_ms = HAL_GetTick();
 80009fa:	f004 fa63 	bl	8004ec4 <HAL_GetTick>
 80009fe:	4603      	mov	r3, r0
 8000a00:	4a11      	ldr	r2, [pc, #68]	@ (8000a48 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2400ad2c 	.word	0x2400ad2c
 8000a10:	2400ad1c 	.word	0x2400ad1c
 8000a14:	240002e0 	.word	0x240002e0
 8000a18:	2400ad10 	.word	0x2400ad10
 8000a1c:	2400ad00 	.word	0x2400ad00
 8000a20:	2400ad04 	.word	0x2400ad04
 8000a24:	2400ad0c 	.word	0x2400ad0c
 8000a28:	2400ad08 	.word	0x2400ad08
 8000a2c:	2400ad28 	.word	0x2400ad28
 8000a30:	2400b148 	.word	0x2400b148
 8000a34:	24000300 	.word	0x24000300
 8000a38:	2400b1c0 	.word	0x2400b1c0
 8000a3c:	24005800 	.word	0x24005800
 8000a40:	2400ad30 	.word	0x2400ad30
 8000a44:	2400ad24 	.word	0x2400ad24
 8000a48:	2400ad14 	.word	0x2400ad14

08000a4c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a50:	f3bf 8f4f 	dsb	sy
}
 8000a54:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <__NVIC_SystemReset+0x24>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a5e:	4904      	ldr	r1, [pc, #16]	@ (8000a70 <__NVIC_SystemReset+0x24>)
 8000a60:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <__NVIC_SystemReset+0x28>)
 8000a62:	4313      	orrs	r3, r2
 8000a64:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a66:	f3bf 8f4f 	dsb	sy
}
 8000a6a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <__NVIC_SystemReset+0x20>
 8000a70:	e000ed00 	.word	0xe000ed00
 8000a74:	05fa0004 	.word	0x05fa0004

08000a78 <reset_trace_record>:
  uint32_t hardfault_count;  // число HardFault сессий
  uint32_t busfault_count;   // число BusFault
  uint32_t usagefault_count; // число UsageFault
} reset_trace_t;
static reset_trace_t __attribute__((section(".noinit"))) g_reset_trace;
static void reset_trace_record(uint32_t rsr){
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if(g_reset_trace.magic != 0x21524553UL){ // '!RES'
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <reset_trace_record+0x78>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1b      	ldr	r2, [pc, #108]	@ (8000af4 <reset_trace_record+0x7c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d01d      	beq.n	8000ac6 <reset_trace_record+0x4e>
    g_reset_trace.magic = 0x21524553UL;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <reset_trace_record+0x78>)
 8000a8c:	4a19      	ldr	r2, [pc, #100]	@ (8000af4 <reset_trace_record+0x7c>)
 8000a8e:	601a      	str	r2, [r3, #0]
    g_reset_trace.index = 0;
 8000a90:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <reset_trace_record+0x78>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
    for(int i=0;i<8;i++) g_reset_trace.rsr[i]=0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	e008      	b.n	8000aae <reset_trace_record+0x36>
 8000a9c:	4a14      	ldr	r2, [pc, #80]	@ (8000af0 <reset_trace_record+0x78>)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b07      	cmp	r3, #7
 8000ab2:	ddf3      	ble.n	8000a9c <reset_trace_record+0x24>
    g_reset_trace.hardfault_count = 0;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <reset_trace_record+0x78>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	629a      	str	r2, [r3, #40]	@ 0x28
    g_reset_trace.busfault_count = 0;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <reset_trace_record+0x78>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	62da      	str	r2, [r3, #44]	@ 0x2c
    g_reset_trace.usagefault_count = 0;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <reset_trace_record+0x78>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  g_reset_trace.rsr[g_reset_trace.index & 7U] = rsr;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <reset_trace_record+0x78>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	4908      	ldr	r1, [pc, #32]	@ (8000af0 <reset_trace_record+0x78>)
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  g_reset_trace.index++;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <reset_trace_record+0x78>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	3301      	adds	r3, #1
 8000ade:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <reset_trace_record+0x78>)
 8000ae0:	6053      	str	r3, [r2, #4]
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	2401c514 	.word	0x2401c514
 8000af4:	21524553 	.word	0x21524553

08000af8 <reset_cause_str>:

static const char* reset_cause_str(uint32_t rsr){
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if(rsr & RCC_RSR_IWDG1RSTF) return "IWDG";   // Independent watchdog
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <reset_cause_str+0x16>
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <reset_cause_str+0x78>)
 8000b0c:	e02a      	b.n	8000b64 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_WWDG1RSTF) return "WWDG";   // Window watchdog
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <reset_cause_str+0x24>
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <reset_cause_str+0x7c>)
 8000b1a:	e023      	b.n	8000b64 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_LPWRRSTF)  return "LPWR";   // Low-power reset
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <reset_cause_str+0x32>
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <reset_cause_str+0x80>)
 8000b28:	e01c      	b.n	8000b64 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_BORRSTF)   return "BOR";    // Brown-out reset
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <reset_cause_str+0x40>
 8000b34:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <reset_cause_str+0x84>)
 8000b36:	e015      	b.n	8000b64 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_PINRSTF)   return "PIN";    // NRST pin
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <reset_cause_str+0x4e>
 8000b42:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <reset_cause_str+0x88>)
 8000b44:	e00e      	b.n	8000b64 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_SFTRSTF)   return "SOFT";   // Software reset
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <reset_cause_str+0x5c>
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <reset_cause_str+0x8c>)
 8000b52:	e007      	b.n	8000b64 <reset_cause_str+0x6c>
  if(rsr & RCC_RSR_PORRSTF)   return "POR";    // Power-on reset
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <reset_cause_str+0x6a>
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <reset_cause_str+0x90>)
 8000b60:	e000      	b.n	8000b64 <reset_cause_str+0x6c>
  return "UNK";
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <reset_cause_str+0x94>)
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	0801b9fc 	.word	0x0801b9fc
 8000b74:	0801ba04 	.word	0x0801ba04
 8000b78:	0801ba0c 	.word	0x0801ba0c
 8000b7c:	0801ba14 	.word	0x0801ba14
 8000b80:	0801ba18 	.word	0x0801ba18
 8000b84:	0801ba1c 	.word	0x0801ba1c
 8000b88:	0801ba24 	.word	0x0801ba24
 8000b8c:	0801ba28 	.word	0x0801ba28

08000b90 <log_reset_cause>:
static void log_reset_cause(void){
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b09d      	sub	sp, #116	@ 0x74
 8000b94:	af02      	add	r7, sp, #8
  // Считываем и сразу очищаем флаги (запись 1 очищает)
  reset_cause_raw = RCC->RSR;
 8000b96:	4ba3      	ldr	r3, [pc, #652]	@ (8000e24 <log_reset_cause+0x294>)
 8000b98:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000b9c:	4aa2      	ldr	r2, [pc, #648]	@ (8000e28 <log_reset_cause+0x298>)
 8000b9e:	6013      	str	r3, [r2, #0]
  reset_trace_record(reset_cause_raw);
 8000ba0:	4ba1      	ldr	r3, [pc, #644]	@ (8000e28 <log_reset_cause+0x298>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff67 	bl	8000a78 <reset_trace_record>
  char flags[96];
  flags[0]='\0';
 8000baa:	2300      	movs	r3, #0
 8000bac:	703b      	strb	r3, [r7, #0]
  #define ADD_FLAG(bit,name) do{ if(reset_cause_raw & (bit)){ if(flags[0]) strncat(flags, ",", sizeof(flags)-1); strncat(flags, (name), sizeof(flags)-1);} }while(0)
  ADD_FLAG(RCC_RSR_IWDG1RSTF, "IWDG");
 8000bae:	4b9e      	ldr	r3, [pc, #632]	@ (8000e28 <log_reset_cause+0x298>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d01c      	beq.n	8000bf4 <log_reset_cause+0x64>
 8000bba:	783b      	ldrb	r3, [r7, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00c      	beq.n	8000bda <log_reset_cause+0x4a>
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fb84 	bl	80002d0 <strlen>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4413      	add	r3, r2
 8000bd0:	4996      	ldr	r1, [pc, #600]	@ (8000e2c <log_reset_cause+0x29c>)
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	8013      	strh	r3, [r2, #0]
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fb77 	bl	80002d0 <strlen>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	463b      	mov	r3, r7
 8000be8:	4413      	add	r3, r2
 8000bea:	4a91      	ldr	r2, [pc, #580]	@ (8000e30 <log_reset_cause+0x2a0>)
 8000bec:	6810      	ldr	r0, [r2, #0]
 8000bee:	6018      	str	r0, [r3, #0]
 8000bf0:	7912      	ldrb	r2, [r2, #4]
 8000bf2:	711a      	strb	r2, [r3, #4]
  ADD_FLAG(RCC_RSR_WWDG1RSTF, "WWDG");
 8000bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8000e28 <log_reset_cause+0x298>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d01c      	beq.n	8000c3a <log_reset_cause+0xaa>
 8000c00:	783b      	ldrb	r3, [r7, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00c      	beq.n	8000c20 <log_reset_cause+0x90>
 8000c06:	463b      	mov	r3, r7
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fb61 	bl	80002d0 <strlen>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	463b      	mov	r3, r7
 8000c14:	4413      	add	r3, r2
 8000c16:	4985      	ldr	r1, [pc, #532]	@ (8000e2c <log_reset_cause+0x29c>)
 8000c18:	461a      	mov	r2, r3
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	8013      	strh	r3, [r2, #0]
 8000c20:	463b      	mov	r3, r7
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fb54 	bl	80002d0 <strlen>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a80      	ldr	r2, [pc, #512]	@ (8000e34 <log_reset_cause+0x2a4>)
 8000c32:	6810      	ldr	r0, [r2, #0]
 8000c34:	6018      	str	r0, [r3, #0]
 8000c36:	7912      	ldrb	r2, [r2, #4]
 8000c38:	711a      	strb	r2, [r3, #4]
  ADD_FLAG(RCC_RSR_LPWRRSTF,  "LPWR");
 8000c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8000e28 <log_reset_cause+0x298>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d01c      	beq.n	8000c80 <log_reset_cause+0xf0>
 8000c46:	783b      	ldrb	r3, [r7, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00c      	beq.n	8000c66 <log_reset_cause+0xd6>
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fb3e 	bl	80002d0 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4973      	ldr	r1, [pc, #460]	@ (8000e2c <log_reset_cause+0x29c>)
 8000c5e:	461a      	mov	r2, r3
 8000c60:	460b      	mov	r3, r1
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	8013      	strh	r3, [r2, #0]
 8000c66:	463b      	mov	r3, r7
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fb31 	bl	80002d0 <strlen>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	463b      	mov	r3, r7
 8000c74:	4413      	add	r3, r2
 8000c76:	4a70      	ldr	r2, [pc, #448]	@ (8000e38 <log_reset_cause+0x2a8>)
 8000c78:	6810      	ldr	r0, [r2, #0]
 8000c7a:	6018      	str	r0, [r3, #0]
 8000c7c:	7912      	ldrb	r2, [r2, #4]
 8000c7e:	711a      	strb	r2, [r3, #4]
  ADD_FLAG(RCC_RSR_BORRSTF,   "BOR");
 8000c80:	4b69      	ldr	r3, [pc, #420]	@ (8000e28 <log_reset_cause+0x298>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d01a      	beq.n	8000cc2 <log_reset_cause+0x132>
 8000c8c:	783b      	ldrb	r3, [r7, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00c      	beq.n	8000cac <log_reset_cause+0x11c>
 8000c92:	463b      	mov	r3, r7
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fb1b 	bl	80002d0 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4962      	ldr	r1, [pc, #392]	@ (8000e2c <log_reset_cause+0x29c>)
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	8013      	strh	r3, [r2, #0]
 8000cac:	463b      	mov	r3, r7
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fb0e 	bl	80002d0 <strlen>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a5f      	ldr	r2, [pc, #380]	@ (8000e3c <log_reset_cause+0x2ac>)
 8000cbe:	6810      	ldr	r0, [r2, #0]
 8000cc0:	6018      	str	r0, [r3, #0]
  ADD_FLAG(RCC_RSR_PINRSTF,   "PIN");
 8000cc2:	4b59      	ldr	r3, [pc, #356]	@ (8000e28 <log_reset_cause+0x298>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d01a      	beq.n	8000d04 <log_reset_cause+0x174>
 8000cce:	783b      	ldrb	r3, [r7, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d00c      	beq.n	8000cee <log_reset_cause+0x15e>
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fafa 	bl	80002d0 <strlen>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4951      	ldr	r1, [pc, #324]	@ (8000e2c <log_reset_cause+0x29c>)
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	460b      	mov	r3, r1
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	8013      	strh	r3, [r2, #0]
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff faed 	bl	80002d0 <strlen>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a50      	ldr	r2, [pc, #320]	@ (8000e40 <log_reset_cause+0x2b0>)
 8000d00:	6810      	ldr	r0, [r2, #0]
 8000d02:	6018      	str	r0, [r3, #0]
  ADD_FLAG(RCC_RSR_SFTRSTF,   "SOFT");
 8000d04:	4b48      	ldr	r3, [pc, #288]	@ (8000e28 <log_reset_cause+0x298>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d01c      	beq.n	8000d4a <log_reset_cause+0x1ba>
 8000d10:	783b      	ldrb	r3, [r7, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00c      	beq.n	8000d30 <log_reset_cause+0x1a0>
 8000d16:	463b      	mov	r3, r7
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fad9 	bl	80002d0 <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461a      	mov	r2, r3
 8000d22:	463b      	mov	r3, r7
 8000d24:	4413      	add	r3, r2
 8000d26:	4941      	ldr	r1, [pc, #260]	@ (8000e2c <log_reset_cause+0x29c>)
 8000d28:	461a      	mov	r2, r3
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	8013      	strh	r3, [r2, #0]
 8000d30:	463b      	mov	r3, r7
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff facc 	bl	80002d0 <strlen>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a40      	ldr	r2, [pc, #256]	@ (8000e44 <log_reset_cause+0x2b4>)
 8000d42:	6810      	ldr	r0, [r2, #0]
 8000d44:	6018      	str	r0, [r3, #0]
 8000d46:	7912      	ldrb	r2, [r2, #4]
 8000d48:	711a      	strb	r2, [r3, #4]
  ADD_FLAG(RCC_RSR_PORRSTF,   "POR");
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <log_reset_cause+0x298>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d01a      	beq.n	8000d8c <log_reset_cause+0x1fc>
 8000d56:	783b      	ldrb	r3, [r7, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d00c      	beq.n	8000d76 <log_reset_cause+0x1e6>
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fab6 	bl	80002d0 <strlen>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4413      	add	r3, r2
 8000d6c:	492f      	ldr	r1, [pc, #188]	@ (8000e2c <log_reset_cause+0x29c>)
 8000d6e:	461a      	mov	r2, r3
 8000d70:	460b      	mov	r3, r1
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	8013      	strh	r3, [r2, #0]
 8000d76:	463b      	mov	r3, r7
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff faa9 	bl	80002d0 <strlen>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	461a      	mov	r2, r3
 8000d82:	463b      	mov	r3, r7
 8000d84:	4413      	add	r3, r2
 8000d86:	4a30      	ldr	r2, [pc, #192]	@ (8000e48 <log_reset_cause+0x2b8>)
 8000d88:	6810      	ldr	r0, [r2, #0]
 8000d8a:	6018      	str	r0, [r3, #0]
  if(!flags[0]) strncpy(flags, "NONE", sizeof(flags)-1);
 8000d8c:	783b      	ldrb	r3, [r7, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d105      	bne.n	8000d9e <log_reset_cause+0x20e>
 8000d92:	463b      	mov	r3, r7
 8000d94:	225f      	movs	r2, #95	@ 0x5f
 8000d96:	492d      	ldr	r1, [pc, #180]	@ (8000e4c <log_reset_cause+0x2bc>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f019 fd5d 	bl	801a858 <strncpy>
  printf("[BOOT] RSR=0x%08lX FLAGS=%s PRIMARY=%s SIGN=0x%08lX\r\n", (unsigned long)reset_cause_raw, flags, reset_cause_str(reset_cause_raw), (unsigned long)build_signature_hex);
 8000d9e:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <log_reset_cause+0x298>)
 8000da0:	681c      	ldr	r4, [r3, #0]
 8000da2:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <log_reset_cause+0x298>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fea6 	bl	8000af8 <reset_cause_str>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4928      	ldr	r1, [pc, #160]	@ (8000e50 <log_reset_cause+0x2c0>)
 8000db0:	463a      	mov	r2, r7
 8000db2:	9100      	str	r1, [sp, #0]
 8000db4:	4621      	mov	r1, r4
 8000db6:	4827      	ldr	r0, [pc, #156]	@ (8000e54 <log_reset_cause+0x2c4>)
 8000db8:	f019 fac8 	bl	801a34c <iprintf>
  // Печатаем трассу (последние до 8 значений)
  printf("[BOOT] RSR_TRACE idx=%lu: ", (unsigned long)g_reset_trace.index);
 8000dbc:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <log_reset_cause+0x2c8>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4826      	ldr	r0, [pc, #152]	@ (8000e5c <log_reset_cause+0x2cc>)
 8000dc4:	f019 fac2 	bl	801a34c <iprintf>
  for(int i=0;i<8;i++){
 8000dc8:	2300      	movs	r3, #0
 8000dca:	667b      	str	r3, [r7, #100]	@ 0x64
 8000dcc:	e018      	b.n	8000e00 <log_reset_cause+0x270>
    uint32_t v = g_reset_trace.rsr[(g_reset_trace.index - 1 - i) & 7U];
 8000dce:	4b22      	ldr	r3, [pc, #136]	@ (8000e58 <log_reset_cause+0x2c8>)
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8000e58 <log_reset_cause+0x2c8>)
 8000dde:	3302      	adds	r3, #2
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	663b      	str	r3, [r7, #96]	@ 0x60
    printf(i?",0x%08lX":"0x%08lX", (unsigned long)v);
 8000de6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <log_reset_cause+0x260>
 8000dec:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <log_reset_cause+0x2d0>)
 8000dee:	e000      	b.n	8000df2 <log_reset_cause+0x262>
 8000df0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <log_reset_cause+0x2d4>)
 8000df2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000df4:	4618      	mov	r0, r3
 8000df6:	f019 faa9 	bl	801a34c <iprintf>
  for(int i=0;i<8;i++){
 8000dfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8000e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e02:	2b07      	cmp	r3, #7
 8000e04:	dde3      	ble.n	8000dce <log_reset_cause+0x23e>
  }
  printf("\r\n");
 8000e06:	4818      	ldr	r0, [pc, #96]	@ (8000e68 <log_reset_cause+0x2d8>)
 8000e08:	f019 fb08 	bl	801a41c <puts>
  RCC->RSR |= RCC_RSR_RMVF; // снять флаги
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <log_reset_cause+0x294>)
 8000e0e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000e12:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <log_reset_cause+0x294>)
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e18:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
}
 8000e1c:	bf00      	nop
 8000e1e:	376c      	adds	r7, #108	@ 0x6c
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	58024400 	.word	0x58024400
 8000e28:	2400b26c 	.word	0x2400b26c
 8000e2c:	0801ba2c 	.word	0x0801ba2c
 8000e30:	0801b9fc 	.word	0x0801b9fc
 8000e34:	0801ba04 	.word	0x0801ba04
 8000e38:	0801ba0c 	.word	0x0801ba0c
 8000e3c:	0801ba14 	.word	0x0801ba14
 8000e40:	0801ba18 	.word	0x0801ba18
 8000e44:	0801ba1c 	.word	0x0801ba1c
 8000e48:	0801ba24 	.word	0x0801ba24
 8000e4c:	0801ba30 	.word	0x0801ba30
 8000e50:	a5b6c7d8 	.word	0xa5b6c7d8
 8000e54:	0801ba38 	.word	0x0801ba38
 8000e58:	2401c514 	.word	0x2401c514
 8000e5c:	0801ba70 	.word	0x0801ba70
 8000e60:	0801ba8c 	.word	0x0801ba8c
 8000e64:	0801ba98 	.word	0x0801ba98
 8000e68:	0801baa0 	.word	0x0801baa0

08000e6c <boot_diag_init>:
  BOOT_PROGRESS_AFTER_ADC      = (1u<<2),
  BOOT_PROGRESS_ENTER_LOOP     = (1u<<3)
};
static uint32_t g_progress_flags = 0;

static void boot_diag_init(uint32_t current_rsr){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if(g_boot_diag.magic != 0x42444731UL){ // 'BDG1'
 8000e74:	4b33      	ldr	r3, [pc, #204]	@ (8000f44 <boot_diag_init+0xd8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a33      	ldr	r2, [pc, #204]	@ (8000f48 <boot_diag_init+0xdc>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <boot_diag_init+0x22>
    memset(&g_boot_diag, 0, sizeof(g_boot_diag));
 8000e7e:	226c      	movs	r2, #108	@ 0x6c
 8000e80:	2100      	movs	r1, #0
 8000e82:	4830      	ldr	r0, [pc, #192]	@ (8000f44 <boot_diag_init+0xd8>)
 8000e84:	f019 fcce 	bl	801a824 <memset>
    g_boot_diag.magic = 0x42444731UL;
 8000e88:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <boot_diag_init+0xd8>)
 8000e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f48 <boot_diag_init+0xdc>)
 8000e8c:	601a      	str	r2, [r3, #0]
  }
  g_boot_diag.boot_counter++;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <boot_diag_init+0xd8>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	3301      	adds	r3, #1
 8000e94:	4a2b      	ldr	r2, [pc, #172]	@ (8000f44 <boot_diag_init+0xd8>)
 8000e96:	6053      	str	r3, [r2, #4]
  // Ничего не пишем сейчас – запись произойдёт перед потенциальным сбросом / периодически
  // Для визуализации напечатаем последние 4 аптайма
  printf("[BOOT] LAST_UPTIMES(ms): ");
 8000e98:	482c      	ldr	r0, [pc, #176]	@ (8000f4c <boot_diag_init+0xe0>)
 8000e9a:	f019 fa57 	bl	801a34c <iprintf>
  for(int i=0;i<8;i++){
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	e01c      	b.n	8000ede <boot_diag_init+0x72>
    uint32_t v = g_boot_diag.rec[(g_boot_diag.slot - 1 - i) & 7u].uptime_ms;
 8000ea4:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <boot_diag_init+0xd8>)
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	3b01      	subs	r3, #1
 8000eae:	f003 0207 	and.w	r2, r3, #7
 8000eb2:	4924      	ldr	r1, [pc, #144]	@ (8000f44 <boot_diag_init+0xd8>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	330c      	adds	r3, #12
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	60bb      	str	r3, [r7, #8]
    printf(i?",%lu":"%lu", (unsigned long)v);
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <boot_diag_init+0x62>
 8000eca:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <boot_diag_init+0xe4>)
 8000ecc:	e000      	b.n	8000ed0 <boot_diag_init+0x64>
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <boot_diag_init+0xe8>)
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f019 fa3a 	bl	801a34c <iprintf>
  for(int i=0;i<8;i++){
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	dddf      	ble.n	8000ea4 <boot_diag_init+0x38>
  }
  printf("\r\n");
 8000ee4:	481c      	ldr	r0, [pc, #112]	@ (8000f58 <boot_diag_init+0xec>)
 8000ee6:	f019 fa99 	bl	801a41c <puts>
  printf("[BOOT] LAST_PROGRESS: ");
 8000eea:	481c      	ldr	r0, [pc, #112]	@ (8000f5c <boot_diag_init+0xf0>)
 8000eec:	f019 fa2e 	bl	801a34c <iprintf>
  for(int i=0;i<4;i++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	e01c      	b.n	8000f30 <boot_diag_init+0xc4>
    uint32_t pf = g_boot_diag.rec[(g_boot_diag.slot - 1 - i) & 7u].progress_flags;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <boot_diag_init+0xd8>)
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f003 0207 	and.w	r2, r3, #7
 8000f04:	490f      	ldr	r1, [pc, #60]	@ (8000f44 <boot_diag_init+0xd8>)
 8000f06:	4613      	mov	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	440b      	add	r3, r1
 8000f10:	3310      	adds	r3, #16
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
    printf(i?",0x%02lX":"0x%02lX", (unsigned long)pf);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <boot_diag_init+0xb4>
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <boot_diag_init+0xf4>)
 8000f1e:	e000      	b.n	8000f22 <boot_diag_init+0xb6>
 8000f20:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <boot_diag_init+0xf8>)
 8000f22:	68f9      	ldr	r1, [r7, #12]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f019 fa11 	bl	801a34c <iprintf>
  for(int i=0;i<4;i++){
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	dddf      	ble.n	8000ef6 <boot_diag_init+0x8a>
  }
  printf("\r\n");
 8000f36:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <boot_diag_init+0xec>)
 8000f38:	f019 fa70 	bl	801a41c <puts>
}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2401c548 	.word	0x2401c548
 8000f48:	42444731 	.word	0x42444731
 8000f4c:	0801baa4 	.word	0x0801baa4
 8000f50:	0801bac0 	.word	0x0801bac0
 8000f54:	0801bac8 	.word	0x0801bac8
 8000f58:	0801baa0 	.word	0x0801baa0
 8000f5c:	0801bacc 	.word	0x0801bacc
 8000f60:	0801bae4 	.word	0x0801bae4
 8000f64:	0801baf0 	.word	0x0801baf0

08000f68 <boot_diag_periodic>:

static void boot_diag_periodic(uint32_t uptime_ms){
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  // Периодическое обновление текущего слота, чтобы при внезапном PIN reset мы имели аптайм
  uint32_t s = (g_boot_diag.slot) & 7u; // текущий рабочий слот
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <boot_diag_periodic+0x60>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	60fb      	str	r3, [r7, #12]
  g_boot_diag.rec[s].uptime_ms = uptime_ms;
 8000f7a:	4913      	ldr	r1, [pc, #76]	@ (8000fc8 <boot_diag_periodic+0x60>)
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	330c      	adds	r3, #12
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	601a      	str	r2, [r3, #0]
  g_boot_diag.rec[s].progress_flags = g_progress_flags;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <boot_diag_periodic+0x64>)
 8000f90:	6819      	ldr	r1, [r3, #0]
 8000f92:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <boot_diag_periodic+0x60>)
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4403      	add	r3, r0
 8000fa0:	3310      	adds	r3, #16
 8000fa2:	6019      	str	r1, [r3, #0]
  g_boot_diag.rec[s].rsr = reset_cause_raw; // последний считанный (текущая сессия)
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <boot_diag_periodic+0x68>)
 8000fa6:	6819      	ldr	r1, [r3, #0]
 8000fa8:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <boot_diag_periodic+0x60>)
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4403      	add	r3, r0
 8000fb6:	3314      	adds	r3, #20
 8000fb8:	6019      	str	r1, [r3, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2401c548 	.word	0x2401c548
 8000fcc:	2400b274 	.word	0x2400b274
 8000fd0:	2400b26c 	.word	0x2400b26c

08000fd4 <boot_diag_finalize_before_reset>:

static void boot_diag_finalize_before_reset(uint32_t uptime_ms){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  // Завершаем текущий слот и переходим к следующему
  uint32_t s = (g_boot_diag.slot) & 7u;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <boot_diag_finalize_before_reset+0x68>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	60fb      	str	r3, [r7, #12]
  g_boot_diag.rec[s].uptime_ms = uptime_ms;
 8000fe6:	4915      	ldr	r1, [pc, #84]	@ (800103c <boot_diag_finalize_before_reset+0x68>)
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	330c      	adds	r3, #12
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
  g_boot_diag.rec[s].progress_flags = g_progress_flags;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <boot_diag_finalize_before_reset+0x6c>)
 8000ffc:	6819      	ldr	r1, [r3, #0]
 8000ffe:	480f      	ldr	r0, [pc, #60]	@ (800103c <boot_diag_finalize_before_reset+0x68>)
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4403      	add	r3, r0
 800100c:	3310      	adds	r3, #16
 800100e:	6019      	str	r1, [r3, #0]
  g_boot_diag.rec[s].rsr = reset_cause_raw;
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <boot_diag_finalize_before_reset+0x70>)
 8001012:	6819      	ldr	r1, [r3, #0]
 8001014:	4809      	ldr	r0, [pc, #36]	@ (800103c <boot_diag_finalize_before_reset+0x68>)
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4403      	add	r3, r0
 8001022:	3314      	adds	r3, #20
 8001024:	6019      	str	r1, [r3, #0]
  g_boot_diag.slot++;
 8001026:	4b05      	ldr	r3, [pc, #20]	@ (800103c <boot_diag_finalize_before_reset+0x68>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	3301      	adds	r3, #1
 800102c:	4a03      	ldr	r2, [pc, #12]	@ (800103c <boot_diag_finalize_before_reset+0x68>)
 800102e:	6093      	str	r3, [r2, #8]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	2401c548 	.word	0x2401c548
 8001040:	2400b274 	.word	0x2400b274
 8001044:	2400b26c 	.word	0x2400b26c

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	b0b1      	sub	sp, #196	@ 0xc4
 800104c:	af06      	add	r7, sp, #24
  /* TEST MARKER: Check if new code is running */
  printf("[MARKER_MAIN] Entered main() function\r\n");
 800104e:	4875      	ldr	r0, [pc, #468]	@ (8001224 <main+0x1dc>)
 8001050:	f019 f9e4 	bl	801a41c <puts>

  /* USER CODE BEGIN 1 */
  static uint32_t early_rsr_raw = 0; // первое чтение до HAL_Init
  early_rsr_raw = RCC->RSR; /* читаем как можно раньше */
 8001054:	4b74      	ldr	r3, [pc, #464]	@ (8001228 <main+0x1e0>)
 8001056:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800105a:	4a74      	ldr	r2, [pc, #464]	@ (800122c <main+0x1e4>)
 800105c:	6013      	str	r3, [r2, #0]
  uint8_t iwdg_extended_early = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  }
#else
  // Сверхранняя индикация: мигаем LED и подсветкой до HAL_Init (на случай раннего fault)
  // Обе линии висят на порте E по схеме платы; используем макросы HAL для портов/пинов
  // Включаем тактирование основных портов GPIO (A, B, C, D, E, H), чтобы точно покрыть задействованные линии
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b70      	ldr	r3, [pc, #448]	@ (8001228 <main+0x1e0>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	4a6f      	ldr	r2, [pc, #444]	@ (8001228 <main+0x1e0>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001074:	4b6c      	ldr	r3, [pc, #432]	@ (8001228 <main+0x1e0>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	4b69      	ldr	r3, [pc, #420]	@ (8001228 <main+0x1e0>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001088:	4a67      	ldr	r2, [pc, #412]	@ (8001228 <main+0x1e0>)
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001092:	4b65      	ldr	r3, [pc, #404]	@ (8001228 <main+0x1e0>)
 8001094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800109e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a0:	4b61      	ldr	r3, [pc, #388]	@ (8001228 <main+0x1e0>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a6:	4a60      	ldr	r2, [pc, #384]	@ (8001228 <main+0x1e0>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b0:	4b5d      	ldr	r3, [pc, #372]	@ (8001228 <main+0x1e0>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010be:	4b5a      	ldr	r3, [pc, #360]	@ (8001228 <main+0x1e0>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c4:	4a58      	ldr	r2, [pc, #352]	@ (8001228 <main+0x1e0>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ce:	4b56      	ldr	r3, [pc, #344]	@ (8001228 <main+0x1e0>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80010da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010dc:	4b52      	ldr	r3, [pc, #328]	@ (8001228 <main+0x1e0>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e2:	4a51      	ldr	r2, [pc, #324]	@ (8001228 <main+0x1e0>)
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001228 <main+0x1e0>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80010f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001228 <main+0x1e0>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001100:	4a49      	ldr	r2, [pc, #292]	@ (8001228 <main+0x1e0>)
 8001102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110a:	4b47      	ldr	r3, [pc, #284]	@ (8001228 <main+0x1e0>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  GPIO_TypeDef *led_port = Led_Test_GPIO_Port;
 8001118:	4b45      	ldr	r3, [pc, #276]	@ (8001230 <main+0x1e8>)
 800111a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  GPIO_TypeDef *bl_port  = LCD_Led_GPIO_Port;
 800111e:	4b44      	ldr	r3, [pc, #272]	@ (8001230 <main+0x1e8>)
 8001120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  uint32_t led_mask = Led_Test_Pin;     // битовая маска
 8001124:	2308      	movs	r3, #8
 8001126:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t bl_mask  = LCD_Led_Pin;      // битовая маска
 800112a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int led_idx = __builtin_ctz(led_mask); // индекс пина 0..15
 8001132:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	fab3 f383 	clz	r3, r3
 800113e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int bl_idx  = __builtin_ctz(bl_mask);
 8001142:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  // Настраиваем режим Output для обеих линий (очистить 2 бита MODER и выставить 01)
  led_port->MODER &= ~(3u << (led_idx*2));
 8001152:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2103      	movs	r1, #3
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	401a      	ands	r2, r3
 8001168:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800116c:	601a      	str	r2, [r3, #0]
  led_port->MODER |=  (1u << (led_idx*2));
 800116e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2101      	movs	r1, #1
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	431a      	orrs	r2, r3
 8001182:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001186:	601a      	str	r2, [r3, #0]
  bl_port->MODER  &= ~(3u << (bl_idx*2));
 8001188:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2103      	movs	r1, #3
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	401a      	ands	r2, r3
 800119e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011a2:	601a      	str	r2, [r3, #0]
  bl_port->MODER  |=  (1u << (bl_idx*2));
 80011a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2101      	movs	r1, #1
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	431a      	orrs	r2, r3
 80011b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011bc:	601a      	str	r2, [r3, #0]
  // Короткая задержка и три мигания
  for(volatile int i=0;i<100000;i++){ __NOP(); }
 80011be:	2300      	movs	r3, #0
 80011c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011c2:	e003      	b.n	80011cc <main+0x184>
 80011c4:	bf00      	nop
 80011c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011c8:	3301      	adds	r3, #1
 80011ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ce:	4a19      	ldr	r2, [pc, #100]	@ (8001234 <main+0x1ec>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	ddf7      	ble.n	80011c4 <main+0x17c>
  for(int k=0;k<3;k++){
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80011da:	e03c      	b.n	8001256 <main+0x20e>
    led_port->BSRR = led_mask;  // set
 80011dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80011e4:	619a      	str	r2, [r3, #24]
    bl_port->BSRR  = bl_mask;   // set
 80011e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80011ee:	619a      	str	r2, [r3, #24]
    for(volatile int i=0;i<200000;i++){ __NOP(); }
 80011f0:	2300      	movs	r3, #0
 80011f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80011f4:	e003      	b.n	80011fe <main+0x1b6>
 80011f6:	bf00      	nop
 80011f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011fa:	3301      	adds	r3, #1
 80011fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80011fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001200:	4a0d      	ldr	r2, [pc, #52]	@ (8001238 <main+0x1f0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	ddf7      	ble.n	80011f6 <main+0x1ae>
    led_port->BSRR = (led_mask << 16); // reset
 8001206:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800120a:	041a      	lsls	r2, r3, #16
 800120c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001210:	619a      	str	r2, [r3, #24]
    bl_port->BSRR  = (bl_mask  << 16); // reset
 8001212:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001216:	041a      	lsls	r2, r3, #16
 8001218:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800121c:	619a      	str	r2, [r3, #24]
    for(volatile int i=0;i<200000;i++){ __NOP(); }
 800121e:	2300      	movs	r3, #0
 8001220:	633b      	str	r3, [r7, #48]	@ 0x30
 8001222:	e00f      	b.n	8001244 <main+0x1fc>
 8001224:	0801baf8 	.word	0x0801baf8
 8001228:	58024400 	.word	0x58024400
 800122c:	2400b27c 	.word	0x2400b27c
 8001230:	58021000 	.word	0x58021000
 8001234:	0001869f 	.word	0x0001869f
 8001238:	00030d3f 	.word	0x00030d3f
 800123c:	bf00      	nop
 800123e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001240:	3301      	adds	r3, #1
 8001242:	633b      	str	r3, [r7, #48]	@ 0x30
 8001244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001246:	4a71      	ldr	r2, [pc, #452]	@ (800140c <main+0x3c4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	ddf7      	ble.n	800123c <main+0x1f4>
  for(int k=0;k<3;k++){
 800124c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001250:	3301      	adds	r3, #1
 8001252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800125a:	2b02      	cmp	r3, #2
 800125c:	ddbe      	ble.n	80011dc <main+0x194>
  }
  // Оставляем финальное состояние: LED = ON, Подсветка = ON (активный высокий)
  led_port->BSRR = led_mask;  // LED on
 800125e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001262:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001266:	619a      	str	r2, [r3, #24]
  bl_port->BSRR  = bl_mask;   // BL on
 8001268:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800126c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001270:	619a      	str	r2, [r3, #24]
#endif
#if DIAG_EXTEND_EXISTING_IWDG
  if(early_rsr_raw & RCC_RSR_IWDG1RSTF){
 8001272:	4b67      	ldr	r3, [pc, #412]	@ (8001410 <main+0x3c8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d016      	beq.n	80012ac <main+0x264>
    // Переинициализация параметров IWDG (его нельзя остановить, но можно растянуть таймаут)
    // Ключ разблокировки
    IWDG1->KR = 0x5555;
 800127e:	4b65      	ldr	r3, [pc, #404]	@ (8001414 <main+0x3cc>)
 8001280:	f245 5255 	movw	r2, #21845	@ 0x5555
 8001284:	601a      	str	r2, [r3, #0]
    // Prescaler = 256 (0x06), максимум для делителя
    IWDG1->PR = 0x06;
 8001286:	4b63      	ldr	r3, [pc, #396]	@ (8001414 <main+0x3cc>)
 8001288:	2206      	movs	r2, #6
 800128a:	605a      	str	r2, [r3, #4]
    // Reload максимум 0x0FFF
    IWDG1->RLR = 0x0FFF;
 800128c:	4b61      	ldr	r3, [pc, #388]	@ (8001414 <main+0x3cc>)
 800128e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001292:	609a      	str	r2, [r3, #8]
    // Дождаться применения (PVU/RVU сброшены)
    while(IWDG1->SR != 0) { /* wait */ }
 8001294:	bf00      	nop
 8001296:	4b5f      	ldr	r3, [pc, #380]	@ (8001414 <main+0x3cc>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1fb      	bne.n	8001296 <main+0x24e>
    // Немедленно перезагрузим
    IWDG1->KR = 0xAAAA;
 800129e:	4b5d      	ldr	r3, [pc, #372]	@ (8001414 <main+0x3cc>)
 80012a0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80012a4:	601a      	str	r2, [r3, #0]
    iwdg_extended_early = 1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#endif

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ac:	f003 fd84 	bl	8004db8 <HAL_Init>
#endif

  /* USER CODE BEGIN Init */
  // Счетчик перезагрузок для диагностики
  static uint32_t reboot_count __attribute__((section(".noinit"))) = 0;
  reboot_count++;
 80012b0:	4b59      	ldr	r3, [pc, #356]	@ (8001418 <main+0x3d0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a58      	ldr	r2, [pc, #352]	@ (8001418 <main+0x3d0>)
 80012b8:	6013      	str	r3, [r2, #0]
  printf("[BOOT] Device reboot count: %lu\r\n", (unsigned long)reboot_count);
 80012ba:	4b57      	ldr	r3, [pc, #348]	@ (8001418 <main+0x3d0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	4856      	ldr	r0, [pc, #344]	@ (800141c <main+0x3d4>)
 80012c2:	f019 f843 	bl	801a34c <iprintf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c6:	f000 fb61 	bl	800198c <SystemClock_Config>
#if defined(DIAG_TRAP_STAGE) && (DIAG_TRAP_STAGE==2)
  diag_trap(2);
#endif

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012ca:	f000 fbdb 	bl	8001a84 <PeriphCommonClock_Config>
  diag_trap(3);
#endif

  /* USER CODE BEGIN SysInit */
  /* РАННИЙ UART для диагностики: инициализация сразу после тактирования */
  MX_USART1_UART_Init();
 80012ce:	f001 f8ad 	bl	800242c <MX_USART1_UART_Init>
  setvbuf(stdout, NULL, _IONBF, 0);
 80012d2:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <main+0x3d8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6898      	ldr	r0, [r3, #8]
 80012d8:	2300      	movs	r3, #0
 80012da:	2202      	movs	r2, #2
 80012dc:	2100      	movs	r1, #0
 80012de:	f019 f8a5 	bl	801a42c <setvbuf>
  static uint32_t build_counter __attribute__((section(".noinit"))) = 0;
  build_counter++;
 80012e2:	4b50      	ldr	r3, [pc, #320]	@ (8001424 <main+0x3dc>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001424 <main+0x3dc>)
 80012ea:	6013      	str	r3, [r2, #0]
  printf("[BOOT] BUILD_TS=%s-%s COUNT=%lu SIGN=0x%08lX\r\n", __DATE__, __TIME__, (unsigned long)build_counter, (unsigned long)build_signature_hex);
 80012ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001424 <main+0x3dc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001428 <main+0x3e0>)
 80012f2:	9200      	str	r2, [sp, #0]
 80012f4:	4a4d      	ldr	r2, [pc, #308]	@ (800142c <main+0x3e4>)
 80012f6:	494e      	ldr	r1, [pc, #312]	@ (8001430 <main+0x3e8>)
 80012f8:	484e      	ldr	r0, [pc, #312]	@ (8001434 <main+0x3ec>)
 80012fa:	f019 f827 	bl	801a34c <iprintf>
  printf("[BOOT] DIAG_REV=%d\r\n", 4);
 80012fe:	2104      	movs	r1, #4
 8001300:	484d      	ldr	r0, [pc, #308]	@ (8001438 <main+0x3f0>)
 8001302:	f019 f823 	bl	801a34c <iprintf>
  printf("[EARLY] RSR=0x%08lX (pre-HAL_Init snapshot)\r\n", (unsigned long)early_rsr_raw);
 8001306:	4b42      	ldr	r3, [pc, #264]	@ (8001410 <main+0x3c8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	484b      	ldr	r0, [pc, #300]	@ (800143c <main+0x3f4>)
 800130e:	f019 f81d 	bl	801a34c <iprintf>
  if(iwdg_extended_early){ printf("[EARLY] IWDG_EXTENDED presc=256 reload=0x0FFF\r\n"); }
 8001312:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <main+0x2d8>
 800131a:	4849      	ldr	r0, [pc, #292]	@ (8001440 <main+0x3f8>)
 800131c:	f019 f87e 	bl	801a41c <puts>
  log_reset_cause();
 8001320:	f7ff fc36 	bl	8000b90 <log_reset_cause>
  printf("[BOOT] FW_VERSION=%s DATE=%s TIME=%s HASH=%s\r\n", fw_version, fw_build_date, fw_build_time, fw_git_hash);
 8001324:	4b47      	ldr	r3, [pc, #284]	@ (8001444 <main+0x3fc>)
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	4b47      	ldr	r3, [pc, #284]	@ (8001448 <main+0x400>)
 800132a:	4a48      	ldr	r2, [pc, #288]	@ (800144c <main+0x404>)
 800132c:	4948      	ldr	r1, [pc, #288]	@ (8001450 <main+0x408>)
 800132e:	4849      	ldr	r0, [pc, #292]	@ (8001454 <main+0x40c>)
 8001330:	f019 f80c 	bl	801a34c <iprintf>
  printf("[BOOT] %s\r\n", fw_build_full);
 8001334:	4948      	ldr	r1, [pc, #288]	@ (8001458 <main+0x410>)
 8001336:	4849      	ldr	r0, [pc, #292]	@ (800145c <main+0x414>)
 8001338:	f019 f808 	bl	801a34c <iprintf>
  printf("[UART] USART1=115200 8N1 ready\r\n");
 800133c:	4848      	ldr	r0, [pc, #288]	@ (8001460 <main+0x418>)
 800133e:	f019 f86d 	bl	801a41c <puts>
#if 1
  // Дополнительная диагностика debug и option bytes
  uint32_t dhcsr = CoreDebug->DHCSR;
 8001342:	4b48      	ldr	r3, [pc, #288]	@ (8001464 <main+0x41c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t dbg_cr = DBGMCU->CR;
 800134a:	4b47      	ldr	r3, [pc, #284]	@ (8001468 <main+0x420>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint32_t opt_raw = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	67fb      	str	r3, [r7, #124]	@ 0x7c
#ifdef FLASH_OPTSR_CUR
  opt_raw = FLASH->OPTSR_CUR; // Текущие опции (read-only)
#elif defined(FLASH_OPTSR_PRG)
  opt_raw = FLASH->OPTSR_PRG;
#endif
  printf("[BOOT] DBG:DHCSR=0x%08lX C_DEBUGEN=%lu S_SLEEP=%lu S_LOCKUP=%lu CR=0x%08lX OPTSR=0x%08lX\r\n",
 8001356:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800135a:	f003 0101 	and.w	r1, r3, #1
         (unsigned long)dhcsr,
         (unsigned long)((dhcsr>>0) & 1),
         (unsigned long)((dhcsr>>18)&1),
 800135e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001362:	0c9b      	lsrs	r3, r3, #18
  printf("[BOOT] DBG:DHCSR=0x%08lX C_DEBUGEN=%lu S_SLEEP=%lu S_LOCKUP=%lu CR=0x%08lX OPTSR=0x%08lX\r\n",
 8001364:	f003 0001 	and.w	r0, r3, #1
         (unsigned long)((dhcsr>>19)&1),
 8001368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800136c:	0cdb      	lsrs	r3, r3, #19
  printf("[BOOT] DBG:DHCSR=0x%08lX C_DEBUGEN=%lu S_SLEEP=%lu S_LOCKUP=%lu CR=0x%08lX OPTSR=0x%08lX\r\n",
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001374:	9202      	str	r2, [sp, #8]
 8001376:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800137a:	9201      	str	r2, [sp, #4]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001386:	4839      	ldr	r0, [pc, #228]	@ (800146c <main+0x424>)
 8001388:	f018 ffe0 	bl	801a34c <iprintf>
         (unsigned long)dbg_cr,
         (unsigned long)opt_raw);
#endif
  #ifdef DIAG_DISABLE_IWDG
    printf("[BOOT] IWDG_CFG=DISABLED (compile-time macro)\r\n");
 800138c:	4838      	ldr	r0, [pc, #224]	@ (8001470 <main+0x428>)
 800138e:	f019 f845 	bl	801a41c <puts>
  #else
    printf("[BOOT] IWDG_CFG=ENABLED (will init later)\r\n");
  #endif
  boot_diag_init(early_rsr_raw);
 8001392:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <main+0x3c8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fd68 	bl	8000e6c <boot_diag_init>
  LCD_ShowString_Size(2, 2, "HELLO LCD", 16, YELLOW, BLACK);
  LCD_ShowString_Size(2, 20, "SAFE_MINIMAL", 12, WHITE, BLACK);
  printf("[SAFE] LCD init done, text rendered.\r\n");
  /* USB CDC в этой ветке не инициализируем, т.к. кабеля нет */
#else
  MX_GPIO_Init();
 800139c:	f001 f8b6 	bl	800250c <MX_GPIO_Init>
  MX_DMA_Init();
 80013a0:	f001 f890 	bl	80024c4 <MX_DMA_Init>
  MX_SPI4_Init();
 80013a4:	f000 fd20 	bl	8001de8 <MX_SPI4_Init>
  MX_TIM1_Init();
 80013a8:	f000 fd76 	bl	8001e98 <MX_TIM1_Init>
  MX_SPI2_Init();
 80013ac:	f000 fcc6 	bl	8001d3c <MX_SPI2_Init>
  MX_TIM6_Init();
 80013b0:	f000 ff40 	bl	8002234 <MX_TIM6_Init>
  MX_ADC1_Init();
 80013b4:	f000 fba0 	bl	8001af8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80013b8:	f000 fc1a 	bl	8001bf0 <MX_ADC2_Init>
  MX_DAC1_Init();
 80013bc:	f000 fc82 	bl	8001cc4 <MX_DAC1_Init>
  MX_TIM2_Init();
 80013c0:	f000 fe0e 	bl	8001fe0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013c4:	f000 fea4 	bl	8002110 <MX_TIM3_Init>
  MX_TIM15_Init();
 80013c8:	f000 ff74 	bl	80022b4 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 80013cc:	f001 f82e 	bl	800242c <MX_USART1_UART_Init>
  printf("[INIT] Before USB_DEVICE_Init\r\n");
 80013d0:	4828      	ldr	r0, [pc, #160]	@ (8001474 <main+0x42c>)
 80013d2:	f019 f823 	bl	801a41c <puts>
  MX_USB_DEVICE_Init();
 80013d6:	f013 ff5b 	bl	8015290 <MX_USB_DEVICE_Init>
  /* Полностью исключаем инициализацию IWDG (даже если где-то потерян DIAG_DISABLE_IWDG) */
  printf("[DIAG] IWDG hard-disabled (no init call)\r\n");
 80013da:	4827      	ldr	r0, [pc, #156]	@ (8001478 <main+0x430>)
 80013dc:	f019 f81e 	bl	801a41c <puts>
  g_progress_flags |= BOOT_PROGRESS_AFTER_USB_INIT;
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <main+0x434>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	4a24      	ldr	r2, [pc, #144]	@ (800147c <main+0x434>)
 80013ea:	6013      	str	r3, [r2, #0]
#endif
  /* USER CODE BEGIN 2 */
  // Безбуферный stdout, баннер сборки (перенесено выше)
  printf("[USB] DEVICE_INIT\r\n");
 80013ec:	4824      	ldr	r0, [pc, #144]	@ (8001480 <main+0x438>)
 80013ee:	f019 f815 	bl	801a41c <puts>
  HAL_GPIO_WritePin(DATA_READY_GPIO_Port, DATA_READY_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f8:	4822      	ldr	r0, [pc, #136]	@ (8001484 <main+0x43c>)
 80013fa:	f008 fe1f 	bl	800a03c <HAL_GPIO_WritePin>
  // Запускаем TIM6 с прерыванием для диагностического мигания (LED в HAL_TIM_PeriodElapsedCallback)
  HAL_TIM_Base_Start_IT(&htim6);
 80013fe:	4822      	ldr	r0, [pc, #136]	@ (8001488 <main+0x440>)
 8001400:	f00e f9ec 	bl	800f7dc <HAL_TIM_Base_Start_IT>

  // Запуск каналов для TIM2
#if !SAFE_MINIMAL
    for(volatile uint32_t d=0; d<200000000UL; ++d){ __NOP(); }
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001408:	e044      	b.n	8001494 <main+0x44c>
 800140a:	bf00      	nop
 800140c:	00030d3f 	.word	0x00030d3f
 8001410:	2400b27c 	.word	0x2400b27c
 8001414:	58004800 	.word	0x58004800
 8001418:	2401c5b4 	.word	0x2401c5b4
 800141c:	0801bb20 	.word	0x0801bb20
 8001420:	24000254 	.word	0x24000254
 8001424:	2401c5b8 	.word	0x2401c5b8
 8001428:	a5b6c7d8 	.word	0xa5b6c7d8
 800142c:	0801bb44 	.word	0x0801bb44
 8001430:	0801bb50 	.word	0x0801bb50
 8001434:	0801bb5c 	.word	0x0801bb5c
 8001438:	0801bb8c 	.word	0x0801bb8c
 800143c:	0801bba4 	.word	0x0801bba4
 8001440:	0801bbd4 	.word	0x0801bbd4
 8001444:	0801c760 	.word	0x0801c760
 8001448:	0801c754 	.word	0x0801c754
 800144c:	0801c748 	.word	0x0801c748
 8001450:	0801c740 	.word	0x0801c740
 8001454:	0801bc04 	.word	0x0801bc04
 8001458:	0801c768 	.word	0x0801c768
 800145c:	0801bc34 	.word	0x0801bc34
 8001460:	0801bc40 	.word	0x0801bc40
 8001464:	e000edf0 	.word	0xe000edf0
 8001468:	5c001000 	.word	0x5c001000
 800146c:	0801bc60 	.word	0x0801bc60
 8001470:	0801bcbc 	.word	0x0801bcbc
 8001474:	0801bcec 	.word	0x0801bcec
 8001478:	0801bd0c 	.word	0x0801bd0c
 800147c:	2400b274 	.word	0x2400b274
 8001480:	0801bd38 	.word	0x0801bd38
 8001484:	58020c00 	.word	0x58020c00
 8001488:	2400b008 	.word	0x2400b008
 800148c:	bf00      	nop
 800148e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001490:	3301      	adds	r3, #1
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001496:	4ab1      	ldr	r2, [pc, #708]	@ (800175c <main+0x714>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d9f7      	bls.n	800148c <main+0x444>
  MX_GPIO_Init();
 800149c:	f001 f836 	bl	800250c <MX_GPIO_Init>
  /* Trap после MX_GPIO_Init */
#if defined(DIAG_TRAP_STAGE) && (DIAG_TRAP_STAGE==4)
  diag_trap(4);
#endif
  // Запускаем PWM на TIM2 CH1/CH2/CH3 c периодом 200 Гц и скважностью 50%
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2499);
 80014a0:	4baf      	ldr	r3, [pc, #700]	@ (8001760 <main+0x718>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80014a8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 2499);
 80014aa:	4bad      	ldr	r3, [pc, #692]	@ (8001760 <main+0x718>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80014b2:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 2499);
 80014b4:	4baa      	ldr	r3, [pc, #680]	@ (8001760 <main+0x718>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80014bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80014be:	2100      	movs	r1, #0
 80014c0:	48a7      	ldr	r0, [pc, #668]	@ (8001760 <main+0x718>)
 80014c2:	f00e fa69 	bl	800f998 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80014c6:	2104      	movs	r1, #4
 80014c8:	48a5      	ldr	r0, [pc, #660]	@ (8001760 <main+0x718>)
 80014ca:	f00e fa65 	bl	800f998 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Контроль
 80014ce:	2108      	movs	r1, #8
 80014d0:	48a3      	ldr	r0, [pc, #652]	@ (8001760 <main+0x718>)
 80014d2:	f00e fa61 	bl	800f998 <HAL_TIM_PWM_Start>

  // Включить прерывание TIM2 Update для генерации тестовых данных @ 200 Hz и запустить таймер
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80014d6:	4ba2      	ldr	r3, [pc, #648]	@ (8001760 <main+0x718>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	4ba0      	ldr	r3, [pc, #640]	@ (8001760 <main+0x718>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 0201 	orr.w	r2, r2, #1
 80014e4:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim2);
 80014e6:	489e      	ldr	r0, [pc, #632]	@ (8001760 <main+0x718>)
 80014e8:	f00e f978 	bl	800f7dc <HAL_TIM_Base_Start_IT>

  // Запуск каналов для TIM3
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Фаза
 80014ec:	2100      	movs	r1, #0
 80014ee:	489d      	ldr	r0, [pc, #628]	@ (8001764 <main+0x71c>)
 80014f0:	f00e fa52 	bl	800f998 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Меандр
 80014f4:	2104      	movs	r1, #4
 80014f6:	489b      	ldr	r0, [pc, #620]	@ (8001764 <main+0x71c>)
 80014f8:	f00e fa4e 	bl	800f998 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Контроль
 80014fc:	2108      	movs	r1, #8
 80014fe:	4899      	ldr	r0, [pc, #612]	@ (8001764 <main+0x71c>)
 8001500:	f00e fa4a 	bl	800f998 <HAL_TIM_PWM_Start>

  // Установка скважности для TIM3 (CH1, CH2, CH3) — 50%
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2499); // 50% скважность
 8001504:	4b97      	ldr	r3, [pc, #604]	@ (8001764 <main+0x71c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800150c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2499); // 50% скважность
 800150e:	4b95      	ldr	r3, [pc, #596]	@ (8001764 <main+0x71c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001516:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 2499); // 50% скважность
 8001518:	4b92      	ldr	r3, [pc, #584]	@ (8001764 <main+0x71c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001520:	63da      	str	r2, [r3, #60]	@ 0x3c
  g_progress_flags |= BOOT_PROGRESS_AFTER_ADC;
 8001522:	4b91      	ldr	r3, [pc, #580]	@ (8001768 <main+0x720>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	4a8f      	ldr	r2, [pc, #572]	@ (8001768 <main+0x720>)
 800152c:	6013      	str	r3, [r2, #0]
*/


  // --- ИНИЦИАЛИЗАЦИЯ LCD ---
#if !SAFE_MINIMAL
  LCD_Init();
 800152e:	f003 f8fb 	bl	8004728 <LCD_Init>
  LCD_FillRect(0, 0, LCD_W, LCD_H, BLACK);
 8001532:	2300      	movs	r3, #0
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2350      	movs	r3, #80	@ 0x50
 8001538:	22a0      	movs	r2, #160	@ 0xa0
 800153a:	2100      	movs	r1, #0
 800153c:	2000      	movs	r0, #0
 800153e:	f003 fa0d 	bl	800495c <LCD_FillRect>
  /* Гарантированно включаем подсветку после инициализации LCD независимо от режима PWM/GPIO */
  BL_ON();
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001548:	4888      	ldr	r0, [pc, #544]	@ (800176c <main+0x724>)
 800154a:	f008 fd77 	bl	800a03c <HAL_GPIO_WritePin>
#if 1
  g_progress_flags |= BOOT_PROGRESS_AFTER_PWM;
 800154e:	4b86      	ldr	r3, [pc, #536]	@ (8001768 <main+0x720>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	4a84      	ldr	r2, [pc, #528]	@ (8001768 <main+0x720>)
 8001558:	6013      	str	r3, [r2, #0]
  for (int y = stage_count*12; y < 160; y += 8) {
    LCD_FillRect(0, y, 160, 8, BLACK);
  }
#endif
#else
  printf("[PWM] PWM disabled by DISABLE_PWM_TEST or FORCE_BL_GPIO\r\n");
 800155a:	4885      	ldr	r0, [pc, #532]	@ (8001770 <main+0x728>)
 800155c:	f018 ff5e 	bl	801a41c <puts>
#endif
#endif // !SAFE_MINIMAL

  // Код инициализации, который должен выполняться всегда
  printf("[INIT] Starting common initialization...\r\n");
 8001560:	4884      	ldr	r0, [pc, #528]	@ (8001774 <main+0x72c>)
 8001562:	f018 ff5b 	bl	801a41c <puts>

  // Подготавливаем инициализационные сообщения (отключено)
  init_messages_ready = 0; // ничего не выводим
 8001566:	4b84      	ldr	r3, [pc, #528]	@ (8001778 <main+0x730>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]

  // Включаем детектор USB питания (для встроенного FS PHY)
  HAL_PWREx_EnableUSBVoltageDetector();
 800156c:	f00a f8a0 	bl	800b6b0 <HAL_PWREx_EnableUSBVoltageDetector>
  printf("[INIT] USB voltage detector enabled\r\n");
 8001570:	4882      	ldr	r0, [pc, #520]	@ (800177c <main+0x734>)
 8001572:	f018 ff53 	bl	801a41c <puts>
  // В минимальном режиме теперь тоже запускаем USB для отображения статуса
  usb_cdc_init();
  usb_cdc_cfg()->streaming = 0; // пока отключено
#else
  #if !SAFE_MINIMAL
    usb_cdc_init();
 8001576:	f003 f813 	bl	80045a0 <usb_stream_init>
    usb_cdc_cfg()->streaming = 0;
 800157a:	f002 fe6b 	bl	8004254 <usb_stream_cfg>
 800157e:	4603      	mov	r3, r0
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
  #endif
#endif

  // Первичная отметка для вывода статуса USB / буквы U
  UpdateLCDStatus();
 8001584:	f001 f966 	bl	8002854 <UpdateLCDStatus>

  // Вывод краткой информации об устройстве USB при запуске
  #if !SAFE_MINIMAL
  {
    uint16_t vid = USBD_Desc_GetVID();
 8001588:	f018 fa5d 	bl	8019a46 <USBD_Desc_GetVID>
 800158c:	4603      	mov	r3, r0
 800158e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    uint16_t pid = USBD_Desc_GetPID();
 8001592:	f018 fa61 	bl	8019a58 <USBD_Desc_GetPID>
 8001596:	4603      	mov	r3, r0
 8001598:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    uint16_t lang= USBD_Desc_GetLangID();
 800159c:	f018 fa65 	bl	8019a6a <USBD_Desc_GetLangID>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    const char* mfg = USBD_Desc_GetManufacturer();
 80015a6:	f018 fa69 	bl	8019a7c <USBD_Desc_GetManufacturer>
 80015aa:	6738      	str	r0, [r7, #112]	@ 0x70
    const char* prd = USBD_Desc_GetProduct();
 80015ac:	f018 fa70 	bl	8019a90 <USBD_Desc_GetProduct>
 80015b0:	66f8      	str	r0, [r7, #108]	@ 0x6c
    printf("[USB] VID=0x%04X PID=0x%04X LANGID=%u\r\n", vid, pid, (unsigned)lang);
 80015b2:	f8b7 107a 	ldrh.w	r1, [r7, #122]	@ 0x7a
 80015b6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80015ba:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80015be:	4870      	ldr	r0, [pc, #448]	@ (8001780 <main+0x738>)
 80015c0:	f018 fec4 	bl	801a34c <iprintf>
    printf("[USB] MFG=\"%s\" PROD=\"%s\"\r\n", mfg, prd);
 80015c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015c6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80015c8:	486e      	ldr	r0, [pc, #440]	@ (8001784 <main+0x73c>)
 80015ca:	f018 febf 	bl	801a34c <iprintf>
    // Короткая строка на LCD
    char line[32];
  /* Переносим строку VID/PID ниже (y=36), чтобы не конфликтовать с динамической строкой TX */
  snprintf(line, sizeof(line), "VID:%04X PID:%04X", vid, pid);
 80015ce:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80015d2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80015d6:	f107 000c 	add.w	r0, r7, #12
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	4613      	mov	r3, r2
 80015de:	4a6a      	ldr	r2, [pc, #424]	@ (8001788 <main+0x740>)
 80015e0:	2120      	movs	r1, #32
 80015e2:	f018 ffd7 	bl	801a594 <sniprintf>
  LCD_ShowString_Size(1, 65, line, 12, WHITE, BLACK);
 80015e6:	f107 020c 	add.w	r2, r7, #12
 80015ea:	2300      	movs	r3, #0
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	230c      	movs	r3, #12
 80015f6:	2141      	movs	r1, #65	@ 0x41
 80015f8:	2001      	movs	r0, #1
 80015fa:	f003 f965 	bl	80048c8 <LCD_ShowString_Size>
  }
  #endif

  #if !SAFE_MINIMAL
  printf("[INIT] USB initialization completed\r\n");
 80015fe:	4863      	ldr	r0, [pc, #396]	@ (800178c <main+0x744>)
 8001600:	f018 ff0c 	bl	801a41c <puts>
  #endif


  // Запуск АЦП с DMA через модуль adc_stream (перенумеровано после LCD)
#if !MINIMAL_BRINGUP && !SAFE_MINIMAL
  CHECK(adc_stream_start(&hadc1, &hadc2), 1001); // если ошибка -> Error_Handler
 8001604:	4962      	ldr	r1, [pc, #392]	@ (8001790 <main+0x748>)
 8001606:	4863      	ldr	r0, [pc, #396]	@ (8001794 <main+0x74c>)
 8001608:	f7ff f846 	bl	8000698 <adc_stream_start>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8001612:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <main+0x5de>
 800161a:	4b5f      	ldr	r3, [pc, #380]	@ (8001798 <main+0x750>)
 800161c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	f001 fba5 	bl	8002d70 <Error_Handler>
  STAGE(21,"ADCSTR");
  // --- FIX TIM15 SLAVE RESET HANG ---
  __HAL_TIM_DISABLE(&htim15);
 8001626:	4b5d      	ldr	r3, [pc, #372]	@ (800179c <main+0x754>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a1a      	ldr	r2, [r3, #32]
 800162c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001630:	4013      	ands	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10f      	bne.n	8001656 <main+0x60e>
 8001636:	4b59      	ldr	r3, [pc, #356]	@ (800179c <main+0x754>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6a1a      	ldr	r2, [r3, #32]
 800163c:	f240 4344 	movw	r3, #1092	@ 0x444
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d107      	bne.n	8001656 <main+0x60e>
 8001646:	4b55      	ldr	r3, [pc, #340]	@ (800179c <main+0x754>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b53      	ldr	r3, [pc, #332]	@ (800179c <main+0x754>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0201 	bic.w	r2, r2, #1
 8001654:	601a      	str	r2, [r3, #0]
  /* keep SMCR as configured (slave reset to ITR1) */
  __HAL_TIM_SET_COUNTER(&htim15,0);
 8001656:	4b51      	ldr	r3, [pc, #324]	@ (800179c <main+0x754>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24

  // Диагностика перед запуском TIM15
  printf("[TIM15] Pre-Start: CR1=0x%08lX CR2=0x%08lX SMCR=0x%08lX SR=0x%08lX DIER=0x%08lX PSC=%lu ARR=%lu CNT=%lu\r\n",
     (unsigned long)TIM15->CR1, (unsigned long)TIM15->CR2, (unsigned long)TIM15->SMCR,
 800165e:	4b50      	ldr	r3, [pc, #320]	@ (80017a0 <main+0x758>)
 8001660:	681d      	ldr	r5, [r3, #0]
 8001662:	4b4f      	ldr	r3, [pc, #316]	@ (80017a0 <main+0x758>)
 8001664:	685e      	ldr	r6, [r3, #4]
 8001666:	4b4e      	ldr	r3, [pc, #312]	@ (80017a0 <main+0x758>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	607b      	str	r3, [r7, #4]
     (unsigned long)TIM15->SR, (unsigned long)TIM15->DIER,
 800166c:	4b4c      	ldr	r3, [pc, #304]	@ (80017a0 <main+0x758>)
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	4a4b      	ldr	r2, [pc, #300]	@ (80017a0 <main+0x758>)
 8001672:	68d2      	ldr	r2, [r2, #12]
     (unsigned long)TIM15->PSC, (unsigned long)TIM15->ARR, (unsigned long)TIM15->CNT);
 8001674:	494a      	ldr	r1, [pc, #296]	@ (80017a0 <main+0x758>)
 8001676:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8001678:	4849      	ldr	r0, [pc, #292]	@ (80017a0 <main+0x758>)
 800167a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800167c:	4c48      	ldr	r4, [pc, #288]	@ (80017a0 <main+0x758>)
 800167e:	6a64      	ldr	r4, [r4, #36]	@ 0x24
  printf("[TIM15] Pre-Start: CR1=0x%08lX CR2=0x%08lX SMCR=0x%08lX SR=0x%08lX DIER=0x%08lX PSC=%lu ARR=%lu CNT=%lu\r\n",
 8001680:	9404      	str	r4, [sp, #16]
 8001682:	9003      	str	r0, [sp, #12]
 8001684:	9102      	str	r1, [sp, #8]
 8001686:	9201      	str	r2, [sp, #4]
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4632      	mov	r2, r6
 800168e:	4629      	mov	r1, r5
 8001690:	4844      	ldr	r0, [pc, #272]	@ (80017a4 <main+0x75c>)
 8001692:	f018 fe5b 	bl	801a34c <iprintf>
  // Если состояние HAL не READY, попытаемся принудительно вернуть READY для обхода зависания
  if (htim15.State != HAL_TIM_STATE_READY) {
 8001696:	4b41      	ldr	r3, [pc, #260]	@ (800179c <main+0x754>)
 8001698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d00b      	beq.n	80016ba <main+0x672>
    printf("[TIM15] State=%d (not READY), forcing READY\r\n", htim15.State);
 80016a2:	4b3e      	ldr	r3, [pc, #248]	@ (800179c <main+0x754>)
 80016a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	4619      	mov	r1, r3
 80016ac:	483e      	ldr	r0, [pc, #248]	@ (80017a8 <main+0x760>)
 80016ae:	f018 fe4d 	bl	801a34c <iprintf>
    htim15.State = HAL_TIM_STATE_READY;
 80016b2:	4b3a      	ldr	r3, [pc, #232]	@ (800179c <main+0x754>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }
  {
    HAL_StatusTypeDef st = HAL_TIM_Base_Start(&htim15);
 80016ba:	4838      	ldr	r0, [pc, #224]	@ (800179c <main+0x754>)
 80016bc:	f00e f810 	bl	800f6e0 <HAL_TIM_Base_Start>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
    if (st != HAL_OK) {
 80016c6:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00f      	beq.n	80016ee <main+0x6a6>
      printf("[TIM15][ERR] HAL_TIM_Base_Start status=%d (state=%d) -> entering Error_Handler\r\n", st, htim15.State);
 80016ce:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80016d2:	4a32      	ldr	r2, [pc, #200]	@ (800179c <main+0x754>)
 80016d4:	f892 203d 	ldrb.w	r2, [r2, #61]	@ 0x3d
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	4833      	ldr	r0, [pc, #204]	@ (80017ac <main+0x764>)
 80016de:	f018 fe35 	bl	801a34c <iprintf>
      err_code = 1002;
 80016e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001798 <main+0x750>)
 80016e4:	f240 32ea 	movw	r2, #1002	@ 0x3ea
 80016e8:	601a      	str	r2, [r3, #0]
      Error_Handler();
 80016ea:	f001 fb41 	bl	8002d70 <Error_Handler>
    }
  }
  printf("[TIM15] Started: CR1=0x%08lX SR=0x%08lX CNT=%lu\r\n", (unsigned long)TIM15->CR1, (unsigned long)TIM15->SR, (unsigned long)TIM15->CNT);
 80016ee:	4b2c      	ldr	r3, [pc, #176]	@ (80017a0 <main+0x758>)
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	4b2b      	ldr	r3, [pc, #172]	@ (80017a0 <main+0x758>)
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	4b2a      	ldr	r3, [pc, #168]	@ (80017a0 <main+0x758>)
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	482d      	ldr	r0, [pc, #180]	@ (80017b0 <main+0x768>)
 80016fc:	f018 fe26 	bl	801a34c <iprintf>

  
  // Запускаем PWM канал TIM15_CH1 (PE5) для наблюдения на осциллографе
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001700:	2100      	movs	r1, #0
 8001702:	4826      	ldr	r0, [pc, #152]	@ (800179c <main+0x754>)
 8001704:	f00e f948 	bl	800f998 <HAL_TIM_PWM_Start>
  STAGE(22,"TRGON");
  
  HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800170e:	4829      	ldr	r0, [pc, #164]	@ (80017b4 <main+0x76c>)
 8001710:	f008 fc94 	bl	800a03c <HAL_GPIO_WritePin>
  UpdateLCDStatus();
 8001714:	f001 f89e 	bl	8002854 <UpdateLCDStatus>
  // SAFE_MINIMAL: ничего не запускаем из ADC/TIM15
#endif



  printf("[INIT] ADC and TIM15 initialization completed\r\n");
 8001718:	4827      	ldr	r0, [pc, #156]	@ (80017b8 <main+0x770>)
 800171a:	f018 fe7f 	bl	801a41c <puts>

  printf("[INIT] Entering main loop...\r\n");
 800171e:	4827      	ldr	r0, [pc, #156]	@ (80017bc <main+0x774>)
 8001720:	f018 fe7c 	bl	801a41c <puts>
  /* Trap перед входом в основной цикл */
#if defined(DIAG_TRAP_STAGE) && (DIAG_TRAP_STAGE==5)
  diag_trap(5);
#endif
  g_progress_flags |= BOOT_PROGRESS_ENTER_LOOP;
 8001724:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <main+0x720>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	4a0e      	ldr	r2, [pc, #56]	@ (8001768 <main+0x720>)
 800172e:	6013      	str	r3, [r2, #0]
  /* Включаем DWT счётчик циклов (если не включён) для диагностики зависания */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001730:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <main+0x778>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4a22      	ldr	r2, [pc, #136]	@ (80017c0 <main+0x778>)
 8001736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800173a:	60d3      	str	r3, [r2, #12]
  DWT->LAR = 0xC5ACCE55; /* разблокировка (для некоторых ревизий) */
 800173c:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <main+0x77c>)
 800173e:	4a22      	ldr	r2, [pc, #136]	@ (80017c8 <main+0x780>)
 8001740:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
  DWT->CYCCNT = 0;
 8001744:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <main+0x77c>)
 8001746:	2200      	movs	r2, #0
 8001748:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800174a:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <main+0x77c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a1d      	ldr	r2, [pc, #116]	@ (80017c4 <main+0x77c>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6013      	str	r3, [r2, #0]
  uint32_t last_diag_ms = 0; /* для периодического аварийного принта даже если * не печатается */
 8001756:	2300      	movs	r3, #0
 8001758:	667b      	str	r3, [r7, #100]	@ 0x64
 800175a:	e037      	b.n	80017cc <main+0x784>
 800175c:	0bebc1ff 	.word	0x0bebc1ff
 8001760:	2400af70 	.word	0x2400af70
 8001764:	2400afbc 	.word	0x2400afbc
 8001768:	2400b274 	.word	0x2400b274
 800176c:	58021000 	.word	0x58021000
 8001770:	0801bd4c 	.word	0x0801bd4c
 8001774:	0801bd88 	.word	0x0801bd88
 8001778:	2400b264 	.word	0x2400b264
 800177c:	0801bdb4 	.word	0x0801bdb4
 8001780:	0801bddc 	.word	0x0801bddc
 8001784:	0801be04 	.word	0x0801be04
 8001788:	0801be20 	.word	0x0801be20
 800178c:	0801be34 	.word	0x0801be34
 8001790:	2400ada4 	.word	0x2400ada4
 8001794:	2400ad34 	.word	0x2400ad34
 8001798:	2400b268 	.word	0x2400b268
 800179c:	2400b054 	.word	0x2400b054
 80017a0:	40014000 	.word	0x40014000
 80017a4:	0801be5c 	.word	0x0801be5c
 80017a8:	0801bec8 	.word	0x0801bec8
 80017ac:	0801bef8 	.word	0x0801bef8
 80017b0:	0801bf4c 	.word	0x0801bf4c
 80017b4:	58020c00 	.word	0x58020c00
 80017b8:	0801bf80 	.word	0x0801bf80
 80017bc:	0801bfb0 	.word	0x0801bfb0
 80017c0:	e000edf0 	.word	0xe000edf0
 80017c4:	e0001000 	.word	0xe0001000
 80017c8:	c5acce55 	.word	0xc5acce55

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  uint32_t dwt_start = DWT->CYCCNT; /* начало итерации */
 80017cc:	4b5b      	ldr	r3, [pc, #364]	@ (800193c <main+0x8f4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	663b      	str	r3, [r7, #96]	@ 0x60
    static uint32_t loop_count = 0;
    loop_count++;
 80017d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001940 <main+0x8f8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	4a59      	ldr	r2, [pc, #356]	@ (8001940 <main+0x8f8>)
 80017da:	6013      	str	r3, [r2, #0]
    main_loop_heartbeat++;
 80017dc:	4b59      	ldr	r3, [pc, #356]	@ (8001944 <main+0x8fc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	4a58      	ldr	r2, [pc, #352]	@ (8001944 <main+0x8fc>)
 80017e4:	6013      	str	r3, [r2, #0]
    last_heartbeat_ms = HAL_GetTick();
 80017e6:	f003 fb6d 	bl	8004ec4 <HAL_GetTick>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a56      	ldr	r2, [pc, #344]	@ (8001948 <main+0x900>)
 80017ee:	6013      	str	r3, [r2, #0]
    uint32_t now = last_heartbeat_ms;
 80017f0:	4b55      	ldr	r3, [pc, #340]	@ (8001948 <main+0x900>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  static uint8_t first_loop=1; if(first_loop){ PROG('M'); first_loop=0; }
 80017f6:	4b55      	ldr	r3, [pc, #340]	@ (800194c <main+0x904>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <main+0x7bc>
 80017fe:	4b53      	ldr	r3, [pc, #332]	@ (800194c <main+0x904>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
  PROG('A'); // loop start

  // Отложенный лог из TIM6 (убран printf из ISR)
  if (tim6_led_toggled_flag) { tim6_led_toggled_flag = 0; PROG('L'); }
 8001804:	4b52      	ldr	r3, [pc, #328]	@ (8001950 <main+0x908>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <main+0x7cc>
 800180e:	4b50      	ldr	r3, [pc, #320]	@ (8001950 <main+0x908>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
    }
  }
  #endif

    // Логируем каждые 10 итераций цикла
  if ((loop_count & 0x3F)==0) { PROG('T'); boot_diag_periodic(now); }
 8001814:	4b4a      	ldr	r3, [pc, #296]	@ (8001940 <main+0x8f8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <main+0x7de>
 8001820:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001822:	f7ff fba1 	bl	8000f68 <boot_diag_periodic>
  /* Periodic integrity check for guarded need_recovery */
  if((loop_count & 0x3F)==0){
 8001826:	4b46      	ldr	r3, [pc, #280]	@ (8001940 <main+0x8f8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800182e:	2b00      	cmp	r3, #0
 8001830:	d126      	bne.n	8001880 <main+0x838>
    if(need_recovery_guard.c1 != 0xDEADBEEFUL || need_recovery_guard.c2 != 0xA55AA55AUL){
 8001832:	4b48      	ldr	r3, [pc, #288]	@ (8001954 <main+0x90c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a48      	ldr	r2, [pc, #288]	@ (8001958 <main+0x910>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d104      	bne.n	8001846 <main+0x7fe>
 800183c:	4b45      	ldr	r3, [pc, #276]	@ (8001954 <main+0x90c>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a46      	ldr	r2, [pc, #280]	@ (800195c <main+0x914>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d00c      	beq.n	8001860 <main+0x818>
      printf("[DIAG][MEM] GUARD_FAIL c1=0x%08lX c2=0x%08lX flag=%u @%p size=%u\r\n",
             (unsigned long)need_recovery_guard.c1, (unsigned long)need_recovery_guard.c2,
 8001846:	4b43      	ldr	r3, [pc, #268]	@ (8001954 <main+0x90c>)
 8001848:	6819      	ldr	r1, [r3, #0]
 800184a:	4b42      	ldr	r3, [pc, #264]	@ (8001954 <main+0x90c>)
 800184c:	689a      	ldr	r2, [r3, #8]
             (unsigned int)need_recovery_guard.flag, (void*)&need_recovery_guard, (unsigned)sizeof(need_recovery_guard));
 800184e:	4b41      	ldr	r3, [pc, #260]	@ (8001954 <main+0x90c>)
 8001850:	685b      	ldr	r3, [r3, #4]
      printf("[DIAG][MEM] GUARD_FAIL c1=0x%08lX c2=0x%08lX flag=%u @%p size=%u\r\n",
 8001852:	200c      	movs	r0, #12
 8001854:	9001      	str	r0, [sp, #4]
 8001856:	483f      	ldr	r0, [pc, #252]	@ (8001954 <main+0x90c>)
 8001858:	9000      	str	r0, [sp, #0]
 800185a:	4841      	ldr	r0, [pc, #260]	@ (8001960 <main+0x918>)
 800185c:	f018 fd76 	bl	801a34c <iprintf>
    }
    if(need_recovery_guard.flag != 0){
 8001860:	4b3c      	ldr	r3, [pc, #240]	@ (8001954 <main+0x90c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <main+0x838>
      printf("[DIAG][MEM] need_recovery FLAG SET=%u (c1=0x%08lX c2=0x%08lX) clear->0\r\n",
             (unsigned int)need_recovery_guard.flag,
 8001868:	4b3a      	ldr	r3, [pc, #232]	@ (8001954 <main+0x90c>)
 800186a:	6859      	ldr	r1, [r3, #4]
             (unsigned long)need_recovery_guard.c1, (unsigned long)need_recovery_guard.c2);
 800186c:	4b39      	ldr	r3, [pc, #228]	@ (8001954 <main+0x90c>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b38      	ldr	r3, [pc, #224]	@ (8001954 <main+0x90c>)
 8001872:	689b      	ldr	r3, [r3, #8]
      printf("[DIAG][MEM] need_recovery FLAG SET=%u (c1=0x%08lX c2=0x%08lX) clear->0\r\n",
 8001874:	483b      	ldr	r0, [pc, #236]	@ (8001964 <main+0x91c>)
 8001876:	f018 fd69 	bl	801a34c <iprintf>
      need_recovery_guard.flag = 0; /* предотвращаем цикл */
 800187a:	4b36      	ldr	r3, [pc, #216]	@ (8001954 <main+0x90c>)
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
  /* Запуск задачи стриминга: вызываем при сигнале kick ИЛИ активном стриме */
  // vendor stream task
#if !SAFE_MINIMAL
  extern volatile uint8_t vnd_tx_kick;
  extern uint8_t vnd_is_streaming(void);
  if (vnd_tx_kick || vnd_is_streaming()) {
 8001880:	4b39      	ldr	r3, [pc, #228]	@ (8001968 <main+0x920>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d104      	bne.n	8001894 <main+0x84c>
 800188a:	f014 fbe5 	bl	8016058 <vnd_is_streaming>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <main+0x850>
    extern void Vendor_Stream_Task(void);
    Vendor_Stream_Task();
 8001894:	f015 fa10 	bl	8016cb8 <Vendor_Stream_Task>
#endif

  /* Периодическое обновление статуса на LCD (вернули после отката) */
  {
    static uint32_t last_lcd_ms = 0;
    if (now - last_lcd_ms >= 100) { // ~10 Гц
 8001898:	4b34      	ldr	r3, [pc, #208]	@ (800196c <main+0x924>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b63      	cmp	r3, #99	@ 0x63
 80018a2:	d904      	bls.n	80018ae <main+0x866>
      last_lcd_ms = now;
 80018a4:	4a31      	ldr	r2, [pc, #196]	@ (800196c <main+0x924>)
 80018a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018a8:	6013      	str	r3, [r2, #0]
      DrawUSBStatus();
 80018aa:	f000 ffdf 	bl	800286c <DrawUSBStatus>
    }
  }

    if (need_recovery) {
 80018ae:	4b30      	ldr	r3, [pc, #192]	@ (8001970 <main+0x928>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d007      	beq.n	80018c8 <main+0x880>
        USBD_DeInit(&hUsbDeviceHS);
#endif
        MX_USB_DEVICE_Init();
        auto_stream_started = 0;
#else
  boot_diag_finalize_before_reset(HAL_GetTick());
 80018b8:	f003 fb04 	bl	8004ec4 <HAL_GetTick>
 80018bc:	4603      	mov	r3, r0
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fb88 	bl	8000fd4 <boot_diag_finalize_before_reset>
  NVIC_SystemReset();
 80018c4:	f7ff f8c2 	bl	8000a4c <__NVIC_SystemReset>
    }

  #if ENABLE_UART_HEARTBEAT
  if ((loop_count % 1000u)==0) uart1_raw_putc('.');
  #endif
  if(iwdg_enabled_runtime){ printf("[WARN] IWDG active unexpected\r\n"); }
 80018c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <main+0x92c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <main+0x890>
 80018d2:	4829      	ldr	r0, [pc, #164]	@ (8001978 <main+0x930>)
 80018d4:	f018 fda2 	bl	801a41c <puts>
  /* Подсчёт длительности итерации */
  uint32_t dwt_end = DWT->CYCCNT;
 80018d8:	4b18      	ldr	r3, [pc, #96]	@ (800193c <main+0x8f4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  loop_cycle_accum += (uint32_t)(dwt_end - dwt_start);
 80018de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80018e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018e2:	1ad2      	subs	r2, r2, r3
 80018e4:	4b25      	ldr	r3, [pc, #148]	@ (800197c <main+0x934>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a24      	ldr	r2, [pc, #144]	@ (800197c <main+0x934>)
 80018ec:	6013      	str	r3, [r2, #0]
  loop_cycle_count++;
 80018ee:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <main+0x938>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3301      	adds	r3, #1
 80018f4:	4a22      	ldr	r2, [pc, #136]	@ (8001980 <main+0x938>)
 80018f6:	6013      	str	r3, [r2, #0]
  uint32_t ms_now = HAL_GetTick();
 80018f8:	f003 fae4 	bl	8004ec4 <HAL_GetTick>
 80018fc:	6578      	str	r0, [r7, #84]	@ 0x54
  if(ms_now - loop_cycle_last_report_ms >= 1000 && loop_cycle_count){
 80018fe:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <main+0x93c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800190a:	f4ff af5f 	bcc.w	80017cc <main+0x784>
 800190e:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <main+0x938>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f43f af5a 	beq.w	80017cc <main+0x784>
    loop_cycle_last_avg = (uint32_t)(loop_cycle_accum / loop_cycle_count);
 8001918:	4b18      	ldr	r3, [pc, #96]	@ (800197c <main+0x934>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <main+0x938>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fbb2 f3f3 	udiv	r3, r2, r3
 8001924:	4a18      	ldr	r2, [pc, #96]	@ (8001988 <main+0x940>)
 8001926:	6013      	str	r3, [r2, #0]
    loop_cycle_accum = 0; loop_cycle_count = 0; loop_cycle_last_report_ms = ms_now;
 8001928:	4b14      	ldr	r3, [pc, #80]	@ (800197c <main+0x934>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <main+0x938>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	4a13      	ldr	r2, [pc, #76]	@ (8001984 <main+0x93c>)
 8001936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001938:	6013      	str	r3, [r2, #0]
  {
 800193a:	e747      	b.n	80017cc <main+0x784>
 800193c:	e0001000 	.word	0xe0001000
 8001940:	2400b280 	.word	0x2400b280
 8001944:	2400b244 	.word	0x2400b244
 8001948:	2400b248 	.word	0x2400b248
 800194c:	24000010 	.word	0x24000010
 8001950:	2400b23c 	.word	0x2400b23c
 8001954:	24000004 	.word	0x24000004
 8001958:	deadbeef 	.word	0xdeadbeef
 800195c:	a55aa55a 	.word	0xa55aa55a
 8001960:	0801bfd0 	.word	0x0801bfd0
 8001964:	0801c014 	.word	0x0801c014
 8001968:	2400dc50 	.word	0x2400dc50
 800196c:	2400b284 	.word	0x2400b284
 8001970:	2400b25c 	.word	0x2400b25c
 8001974:	2400b270 	.word	0x2400b270
 8001978:	0801c060 	.word	0x0801c060
 800197c:	2400b24c 	.word	0x2400b24c
 8001980:	2400b250 	.word	0x2400b250
 8001984:	2400b254 	.word	0x2400b254
 8001988:	2400b258 	.word	0x2400b258

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b09c      	sub	sp, #112	@ 0x70
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001996:	224c      	movs	r2, #76	@ 0x4c
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f018 ff42 	bl	801a824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2220      	movs	r2, #32
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f018 ff3c 	bl	801a824 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80019ac:	2002      	movs	r0, #2
 80019ae:	f009 fe45 	bl	800b63c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	4b32      	ldr	r3, [pc, #200]	@ (8001a80 <SystemClock_Config+0xf4>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a31      	ldr	r2, [pc, #196]	@ (8001a80 <SystemClock_Config+0xf4>)
 80019bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80019c0:	6193      	str	r3, [r2, #24]
 80019c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a80 <SystemClock_Config+0xf4>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019ce:	bf00      	nop
 80019d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a80 <SystemClock_Config+0xf4>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019dc:	d1f8      	bne.n	80019d0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80019de:	232b      	movs	r3, #43	@ 0x2b
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80019ec:	2340      	movs	r3, #64	@ 0x40
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019f0:	2301      	movs	r3, #1
 80019f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80019f4:	2301      	movs	r3, #1
 80019f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f8:	2302      	movs	r3, #2
 80019fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019fc:	2302      	movs	r3, #2
 80019fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001a00:	2302      	movs	r3, #2
 8001a02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001a04:	232c      	movs	r3, #44	@ 0x2c
 8001a06:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001a0c:	2305      	movs	r3, #5
 8001a0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a10:	2302      	movs	r3, #2
 8001a12:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a14:	230c      	movs	r3, #12
 8001a16:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a24:	4618      	mov	r0, r3
 8001a26:	f009 fe53 	bl	800b6d0 <HAL_RCC_OscConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001a30:	f001 f99e 	bl	8002d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a34:	233f      	movs	r3, #63	@ 0x3f
 8001a36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a40:	2308      	movs	r3, #8
 8001a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a44:	2340      	movs	r3, #64	@ 0x40
 8001a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a48:	2340      	movs	r3, #64	@ 0x40
 8001a4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a52:	2340      	movs	r3, #64	@ 0x40
 8001a54:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2103      	movs	r1, #3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f00a fa12 	bl	800be84 <HAL_RCC_ClockConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001a66:	f001 f983 	bl	8002d70 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001a6a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2000      	movs	r0, #0
 8001a72:	f00a fbbd 	bl	800c1f0 <HAL_RCC_MCOConfig>
}
 8001a76:	bf00      	nop
 8001a78:	3770      	adds	r7, #112	@ 0x70
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	58024800 	.word	0x58024800

08001a84 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b0ae      	sub	sp, #184	@ 0xb8
 8001a88:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	22b8      	movs	r2, #184	@ 0xb8
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f018 fec7 	bl	801a824 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2
 8001a96:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <PeriphCommonClock_Config+0x70>)
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_TIM;
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001aa0:	2305      	movs	r3, #5
 8001aa2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8001aa4:	2380      	movs	r3, #128	@ 0x80
 8001aa6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001aac:	2304      	movs	r3, #4
 8001aae:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001ac0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8001ac6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001aca:	663b      	str	r3, [r7, #96]	@ 0x60
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8001ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ada:	463b      	mov	r3, r7
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00a fdc7 	bl	800c670 <HAL_RCCEx_PeriphCLKConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <PeriphCommonClock_Config+0x68>
  {
    Error_Handler();
 8001ae8:	f001 f942 	bl	8002d70 <Error_Handler>
  }
}
 8001aec:	bf00      	nop
 8001aee:	37b8      	adds	r7, #184	@ 0xb8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40083000 	.word	0x40083000

08001af8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	@ 0x30
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2224      	movs	r2, #36	@ 0x24
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f018 fe87 	bl	801a824 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b16:	4b33      	ldr	r3, [pc, #204]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b18:	4a33      	ldr	r2, [pc, #204]	@ (8001be8 <MX_ADC1_Init+0xf0>)
 8001b1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b1c:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001b22:	4b30      	ldr	r3, [pc, #192]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b28:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b30:	2204      	movs	r2, #4
 8001b32:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b34:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001b40:	4b28      	ldr	r3, [pc, #160]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b46:	4b27      	ldr	r3, [pc, #156]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001b4e:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b50:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001b56:	4b23      	ldr	r3, [pc, #140]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001b5e:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b60:	2203      	movs	r2, #3
 8001b62:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001b70:	4b1c      	ldr	r3, [pc, #112]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001b78:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b7e:	4819      	ldr	r0, [pc, #100]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b80:	f003 fd26 	bl	80055d0 <HAL_ADC_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001b8a:	f001 f8f1 	bl	8002d70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b96:	4619      	mov	r1, r3
 8001b98:	4812      	ldr	r0, [pc, #72]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001b9a:	f005 f8bf 	bl	8006d1c <HAL_ADCEx_MultiModeConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001ba4:	f001 f8e4 	bl	8002d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001ba8:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <MX_ADC1_Init+0xf4>)
 8001baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bac:	2306      	movs	r3, #6
 8001bae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bb4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001bb8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc8:	463b      	mov	r3, r7
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_ADC1_Init+0xec>)
 8001bce:	f004 f883 	bl	8005cd8 <HAL_ADC_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001bd8:	f001 f8ca 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	3730      	adds	r7, #48	@ 0x30
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2400ad34 	.word	0x2400ad34
 8001be8:	40022000 	.word	0x40022000
 8001bec:	0c900008 	.word	0x0c900008

08001bf0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	@ 0x28
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */
  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2224      	movs	r2, #36	@ 0x24
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f018 fe11 	bl	801a824 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */
  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001c02:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c04:	4a2d      	ldr	r2, [pc, #180]	@ (8001cbc <MX_ADC2_Init+0xcc>)
 8001c06:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c08:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c14:	4b28      	ldr	r3, [pc, #160]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c1a:	4b27      	ldr	r3, [pc, #156]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001c20:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001c26:	4b24      	ldr	r3, [pc, #144]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001c2c:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c32:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c3c:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001c40:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c50:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c56:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8001c5c:	4b16      	ldr	r3, [pc, #88]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c6a:	4813      	ldr	r0, [pc, #76]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001c6c:	f003 fcb0 	bl	80055d0 <HAL_ADC_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001c76:	f001 f87b 	bl	8002d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <MX_ADC2_Init+0xd0>)
 8001c7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c86:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001c8a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	@ (8001cb8 <MX_ADC2_Init+0xc8>)
 8001ca0:	f004 f81a 	bl	8005cd8 <HAL_ADC_ConfigChannel>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 8001caa:	f001 f861 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  /* USER CODE END ADC2_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	@ 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2400ada4 	.word	0x2400ada4
 8001cbc:	40022100 	.word	0x40022100
 8001cc0:	10c00010 	.word	0x10c00010

08001cc4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	@ 0x28
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2224      	movs	r2, #36	@ 0x24
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f018 fda7 	bl	801a824 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */
  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001cd6:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <MX_DAC1_Init+0x70>)
 8001cd8:	4a17      	ldr	r2, [pc, #92]	@ (8001d38 <MX_DAC1_Init+0x74>)
 8001cda:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001cdc:	4815      	ldr	r0, [pc, #84]	@ (8001d34 <MX_DAC1_Init+0x70>)
 8001cde:	f005 fa40 	bl	8007162 <HAL_DAC_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001ce8:	f001 f842 	bl	8002d70 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	480b      	ldr	r0, [pc, #44]	@ (8001d34 <MX_DAC1_Init+0x70>)
 8001d08:	f005 faae 	bl	8007268 <HAL_DAC_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001d12:	f001 f82d 	bl	8002d70 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	2210      	movs	r2, #16
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	@ (8001d34 <MX_DAC1_Init+0x70>)
 8001d1e:	f005 faa3 	bl	8007268 <HAL_DAC_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001d28:	f001 f822 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  /* USER CODE END DAC1_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	3728      	adds	r7, #40	@ 0x28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	2400b134 	.word	0x2400b134
 8001d38:	40007400 	.word	0x40007400

08001d3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d40:	4b27      	ldr	r3, [pc, #156]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d42:	4a28      	ldr	r2, [pc, #160]	@ (8001de4 <MX_SPI2_Init+0xa8>)
 8001d44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d46:	4b26      	ldr	r3, [pc, #152]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d48:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d4e:	4b24      	ldr	r3, [pc, #144]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d54:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d56:	2203      	movs	r2, #3
 8001d58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d60:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d66:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d68:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d74:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d7a:	4b19      	ldr	r3, [pc, #100]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d80:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001d86:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d92:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <MX_SPI2_Init+0xa4>)
 8001dcc:	f00d f836 	bl	800ee3c <HAL_SPI_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001dd6:	f000 ffcb 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2400ae14 	.word	0x2400ae14
 8001de4:	40003800 	.word	0x40003800

08001de8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */
  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001dec:	4b28      	ldr	r3, [pc, #160]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001dee:	4a29      	ldr	r2, [pc, #164]	@ (8001e94 <MX_SPI4_Init+0xac>)
 8001df0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001df2:	4b27      	ldr	r3, [pc, #156]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001df4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001df8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001dfa:	4b25      	ldr	r3, [pc, #148]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001dfc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e00:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e02:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e08:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e0e:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e14:	4b1e      	ldr	r3, [pc, #120]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e16:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e1a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e22:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e2a:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e30:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001e36:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e42:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e44:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	@ (8001e90 <MX_SPI4_Init+0xa8>)
 8001e7c:	f00c ffde 	bl	800ee3c <HAL_SPI_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8001e86:	f000 ff73 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */
  /* USER CODE END SPI4_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2400ae9c 	.word	0x2400ae9c
 8001e94:	40013400 	.word	0x40013400

08001e98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b098      	sub	sp, #96	@ 0x60
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eaa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
 8001eba:	615a      	str	r2, [r3, #20]
 8001ebc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2234      	movs	r2, #52	@ 0x34
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f018 fcad 	bl	801a824 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eca:	4b42      	ldr	r3, [pc, #264]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001ecc:	4a42      	ldr	r2, [pc, #264]	@ (8001fd8 <MX_TIM1_Init+0x140>)
 8001ece:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 274;
 8001ed0:	4b40      	ldr	r3, [pc, #256]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001ed2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8001ed6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 8001ede:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001ee0:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001ee4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eec:	4b39      	ldr	r3, [pc, #228]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ef2:	4b38      	ldr	r3, [pc, #224]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001ef4:	2280      	movs	r2, #128	@ 0x80
 8001ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ef8:	4836      	ldr	r0, [pc, #216]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001efa:	f00d fcf5 	bl	800f8e8 <HAL_TIM_PWM_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001f04:	f000 ff34 	bl	8002d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f08:	2320      	movs	r3, #32
 8001f0a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001f0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f10:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	482d      	ldr	r0, [pc, #180]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001f1e:	f00e ff05 	bl	8010d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001f28:	f000 ff22 	bl	8002d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f2c:	2360      	movs	r3, #96	@ 0x60
 8001f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f34:	2300      	movs	r3, #0
 8001f36:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f44:	2300      	movs	r3, #0
 8001f46:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4820      	ldr	r0, [pc, #128]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001f52:	f00d ff45 	bl	800fde0 <HAL_TIM_PWM_ConfigChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001f5c:	f000 ff08 	bl	8002d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	4619      	mov	r1, r3
 8001f94:	480f      	ldr	r0, [pc, #60]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001f96:	f00e ff65 	bl	8010e64 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001fa0:	f000 fee6 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  // Разрешаем автоматическое включение основного выхода (MOE) для надёжного старта CH2N
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001fa4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fa8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4809      	ldr	r0, [pc, #36]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001fb0:	f00e ff58 	bl	8010e64 <HAL_TIMEx_ConfigBreakDeadTime>
  printf("[PWM] TIM1 initialized: ARR=%lu, PSC=%lu\r\n",
         (unsigned long)htim1.Init.Period, (unsigned long)htim1.Init.Prescaler);
 8001fb4:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a06      	ldr	r2, [pc, #24]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001fba:	6852      	ldr	r2, [r2, #4]
  printf("[PWM] TIM1 initialized: ARR=%lu, PSC=%lu\r\n",
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4807      	ldr	r0, [pc, #28]	@ (8001fdc <MX_TIM1_Init+0x144>)
 8001fc0:	f018 f9c4 	bl	801a34c <iprintf>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fc4:	4803      	ldr	r0, [pc, #12]	@ (8001fd4 <MX_TIM1_Init+0x13c>)
 8001fc6:	f001 f9c3 	bl	8003350 <HAL_TIM_MspPostInit>

}
 8001fca:	bf00      	nop
 8001fcc:	3760      	adds	r7, #96	@ 0x60
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2400af24 	.word	0x2400af24
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	0801c0ac 	.word	0x0801c0ac

08001fe0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b090      	sub	sp, #64	@ 0x40
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001fe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff6:	f107 0320 	add.w	r3, r7, #32
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
 8002010:	615a      	str	r2, [r3, #20]
 8002012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002014:	4b3d      	ldr	r3, [pc, #244]	@ (800210c <MX_TIM2_Init+0x12c>)
 8002016:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800201a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 800201c:	4b3b      	ldr	r3, [pc, #236]	@ (800210c <MX_TIM2_Init+0x12c>)
 800201e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8002022:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002024:	4b39      	ldr	r3, [pc, #228]	@ (800210c <MX_TIM2_Init+0x12c>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 800202a:	4b38      	ldr	r3, [pc, #224]	@ (800210c <MX_TIM2_Init+0x12c>)
 800202c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002030:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002032:	4b36      	ldr	r3, [pc, #216]	@ (800210c <MX_TIM2_Init+0x12c>)
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002038:	4b34      	ldr	r3, [pc, #208]	@ (800210c <MX_TIM2_Init+0x12c>)
 800203a:	2200      	movs	r2, #0
 800203c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800203e:	4833      	ldr	r0, [pc, #204]	@ (800210c <MX_TIM2_Init+0x12c>)
 8002040:	f00d faf7 	bl	800f632 <HAL_TIM_Base_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800204a:	f000 fe91 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800204e:	482f      	ldr	r0, [pc, #188]	@ (800210c <MX_TIM2_Init+0x12c>)
 8002050:	f00d fc4a 	bl	800f8e8 <HAL_TIM_PWM_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800205a:	f000 fe89 	bl	8002d70 <Error_Handler>
  }
  /* TIM2 uses internal clock; we will use its TRGO to sync others */
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002062:	2300      	movs	r3, #0
 8002064:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002066:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800206a:	4619      	mov	r1, r3
 800206c:	4827      	ldr	r0, [pc, #156]	@ (800210c <MX_TIM2_Init+0x12c>)
 800206e:	f00e f8c3 	bl	80101f8 <HAL_TIM_SlaveConfigSynchro>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002078:	f000 fe7a 	bl	8002d70 <Error_Handler>
  }
  /* Emit TRGO on update to reset TIM15/ADCs periodically */
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800207c:	2320      	movs	r3, #32
 800207e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002084:	f107 0320 	add.w	r3, r7, #32
 8002088:	4619      	mov	r1, r3
 800208a:	4820      	ldr	r0, [pc, #128]	@ (800210c <MX_TIM2_Init+0x12c>)
 800208c:	f00e fe4e 	bl	8010d2c <HAL_TIMEx_MasterConfigSynchronization>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8002096:	f000 fe6b 	bl	8002d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800209a:	2360      	movs	r3, #96	@ 0x60
 800209c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2499;
 800209e:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 80020a2:	60bb      	str	r3, [r7, #8]
 
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	2200      	movs	r2, #0
 80020b0:	4619      	mov	r1, r3
 80020b2:	4816      	ldr	r0, [pc, #88]	@ (800210c <MX_TIM2_Init+0x12c>)
 80020b4:	f00d fe94 	bl	800fde0 <HAL_TIM_PWM_ConfigChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80020be:	f000 fe57 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	2204      	movs	r2, #4
 80020c6:	4619      	mov	r1, r3
 80020c8:	4810      	ldr	r0, [pc, #64]	@ (800210c <MX_TIM2_Init+0x12c>)
 80020ca:	f00d fe89 	bl	800fde0 <HAL_TIM_PWM_ConfigChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80020d4:	f000 fe4c 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	2208      	movs	r2, #8
 80020dc:	4619      	mov	r1, r3
 80020de:	480b      	ldr	r0, [pc, #44]	@ (800210c <MX_TIM2_Init+0x12c>)
 80020e0:	f00d fe7e 	bl	800fde0 <HAL_TIM_PWM_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 80020ea:	f000 fe41 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // Разрешаем прерывания TIM2
  HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2106      	movs	r1, #6
 80020f2:	201c      	movs	r0, #28
 80020f4:	f004 fff3 	bl	80070de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020f8:	201c      	movs	r0, #28
 80020fa:	f005 f80a 	bl	8007112 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020fe:	4803      	ldr	r0, [pc, #12]	@ (800210c <MX_TIM2_Init+0x12c>)
 8002100:	f001 f926 	bl	8003350 <HAL_TIM_MspPostInit>

}
 8002104:	bf00      	nop
 8002106:	3740      	adds	r7, #64	@ 0x40
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	2400af70 	.word	0x2400af70

08002110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b090      	sub	sp, #64	@ 0x40
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002116:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
 8002124:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002126:	f107 0320 	add.w	r3, r7, #32
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
 8002140:	615a      	str	r2, [r3, #20]
 8002142:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002144:	4b39      	ldr	r3, [pc, #228]	@ (800222c <MX_TIM3_Init+0x11c>)
 8002146:	4a3a      	ldr	r2, [pc, #232]	@ (8002230 <MX_TIM3_Init+0x120>)
 8002148:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 274;
 800214a:	4b38      	ldr	r3, [pc, #224]	@ (800222c <MX_TIM3_Init+0x11c>)
 800214c:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8002150:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002152:	4b36      	ldr	r3, [pc, #216]	@ (800222c <MX_TIM3_Init+0x11c>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8002158:	4b34      	ldr	r3, [pc, #208]	@ (800222c <MX_TIM3_Init+0x11c>)
 800215a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800215e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002160:	4b32      	ldr	r3, [pc, #200]	@ (800222c <MX_TIM3_Init+0x11c>)
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002166:	4b31      	ldr	r3, [pc, #196]	@ (800222c <MX_TIM3_Init+0x11c>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800216c:	482f      	ldr	r0, [pc, #188]	@ (800222c <MX_TIM3_Init+0x11c>)
 800216e:	f00d fa60 	bl	800f632 <HAL_TIM_Base_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002178:	f000 fdfa 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800217c:	482b      	ldr	r0, [pc, #172]	@ (800222c <MX_TIM3_Init+0x11c>)
 800217e:	f00d fbb3 	bl	800f8e8 <HAL_TIM_PWM_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002188:	f000 fdf2 	bl	8002d70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800218c:	2304      	movs	r3, #4
 800218e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8002190:	2330      	movs	r3, #48	@ 0x30
 8002192:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002194:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002198:	4619      	mov	r1, r3
 800219a:	4824      	ldr	r0, [pc, #144]	@ (800222c <MX_TIM3_Init+0x11c>)
 800219c:	f00e f82c 	bl	80101f8 <HAL_TIM_SlaveConfigSynchro>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80021a6:	f000 fde3 	bl	8002d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80021aa:	2350      	movs	r3, #80	@ 0x50
 80021ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021b2:	f107 0320 	add.w	r3, r7, #32
 80021b6:	4619      	mov	r1, r3
 80021b8:	481c      	ldr	r0, [pc, #112]	@ (800222c <MX_TIM3_Init+0x11c>)
 80021ba:	f00e fdb7 	bl	8010d2c <HAL_TIMEx_MasterConfigSynchronization>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80021c4:	f000 fdd4 	bl	8002d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021c8:	2360      	movs	r3, #96	@ 0x60
 80021ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2499;
 80021cc:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 80021d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	2200      	movs	r2, #0
 80021de:	4619      	mov	r1, r3
 80021e0:	4812      	ldr	r0, [pc, #72]	@ (800222c <MX_TIM3_Init+0x11c>)
 80021e2:	f00d fdfd 	bl	800fde0 <HAL_TIM_PWM_ConfigChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80021ec:	f000 fdc0 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	2204      	movs	r2, #4
 80021f4:	4619      	mov	r1, r3
 80021f6:	480d      	ldr	r0, [pc, #52]	@ (800222c <MX_TIM3_Init+0x11c>)
 80021f8:	f00d fdf2 	bl	800fde0 <HAL_TIM_PWM_ConfigChannel>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8002202:	f000 fdb5 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	2208      	movs	r2, #8
 800220a:	4619      	mov	r1, r3
 800220c:	4807      	ldr	r0, [pc, #28]	@ (800222c <MX_TIM3_Init+0x11c>)
 800220e:	f00d fde7 	bl	800fde0 <HAL_TIM_PWM_ConfigChannel>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8002218:	f000 fdaa 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800221c:	4803      	ldr	r0, [pc, #12]	@ (800222c <MX_TIM3_Init+0x11c>)
 800221e:	f001 f897 	bl	8003350 <HAL_TIM_MspPostInit>

}
 8002222:	bf00      	nop
 8002224:	3740      	adds	r7, #64	@ 0x40
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2400afbc 	.word	0x2400afbc
 8002230:	40000400 	.word	0x40000400

08002234 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */
  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */
  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002244:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <MX_TIM6_Init+0x78>)
 8002246:	4a1a      	ldr	r2, [pc, #104]	@ (80022b0 <MX_TIM6_Init+0x7c>)
 8002248:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 274;
 800224a:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <MX_TIM6_Init+0x78>)
 800224c:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8002250:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002252:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <MX_TIM6_Init+0x78>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8002258:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <MX_TIM6_Init+0x78>)
 800225a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800225e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002260:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <MX_TIM6_Init+0x78>)
 8002262:	2280      	movs	r2, #128	@ 0x80
 8002264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002266:	4811      	ldr	r0, [pc, #68]	@ (80022ac <MX_TIM6_Init+0x78>)
 8002268:	f00d f9e3 	bl	800f632 <HAL_TIM_Base_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002272:	f000 fd7d 	bl	8002d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002276:	2320      	movs	r3, #32
 8002278:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	4619      	mov	r1, r3
 8002282:	480a      	ldr	r0, [pc, #40]	@ (80022ac <MX_TIM6_Init+0x78>)
 8002284:	f00e fd52 	bl	8010d2c <HAL_TIMEx_MasterConfigSynchronization>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800228e:	f000 fd6f 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  // Включаем прерывание TIM6 (для мигания светодиодом в HAL_TIM_PeriodElapsedCallback)
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2106      	movs	r1, #6
 8002296:	2036      	movs	r0, #54	@ 0x36
 8002298:	f004 ff21 	bl	80070de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800229c:	2036      	movs	r0, #54	@ 0x36
 800229e:	f004 ff38 	bl	8007112 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	2400b008 	.word	0x2400b008
 80022b0:	40001000 	.word	0x40001000

080022b4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b0a0      	sub	sp, #128	@ 0x80
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */
  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ba:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80022c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
 80022f4:	615a      	str	r2, [r3, #20]
 80022f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022f8:	463b      	mov	r3, r7
 80022fa:	2234      	movs	r2, #52	@ 0x34
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f018 fa90 	bl	801a824 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */
  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002304:	4b47      	ldr	r3, [pc, #284]	@ (8002424 <MX_TIM15_Init+0x170>)
 8002306:	4a48      	ldr	r2, [pc, #288]	@ (8002428 <MX_TIM15_Init+0x174>)
 8002308:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800230a:	4b46      	ldr	r3, [pc, #280]	@ (8002424 <MX_TIM15_Init+0x170>)
 800230c:	2200      	movs	r2, #0
 800230e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002310:	4b44      	ldr	r3, [pc, #272]	@ (8002424 <MX_TIM15_Init+0x170>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8002316:	4b43      	ldr	r3, [pc, #268]	@ (8002424 <MX_TIM15_Init+0x170>)
 8002318:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800231c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231e:	4b41      	ldr	r3, [pc, #260]	@ (8002424 <MX_TIM15_Init+0x170>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002324:	4b3f      	ldr	r3, [pc, #252]	@ (8002424 <MX_TIM15_Init+0x170>)
 8002326:	2200      	movs	r2, #0
 8002328:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800232a:	4b3e      	ldr	r3, [pc, #248]	@ (8002424 <MX_TIM15_Init+0x170>)
 800232c:	2280      	movs	r2, #128	@ 0x80
 800232e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002330:	483c      	ldr	r0, [pc, #240]	@ (8002424 <MX_TIM15_Init+0x170>)
 8002332:	f00d f97e 	bl	800f632 <HAL_TIM_Base_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800233c:	f000 fd18 	bl	8002d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002340:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002344:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002346:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800234a:	4619      	mov	r1, r3
 800234c:	4835      	ldr	r0, [pc, #212]	@ (8002424 <MX_TIM15_Init+0x170>)
 800234e:	f00d fe5b 	bl	8010008 <HAL_TIM_ConfigClockSource>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8002358:	f000 fd0a 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800235c:	4831      	ldr	r0, [pc, #196]	@ (8002424 <MX_TIM15_Init+0x170>)
 800235e:	f00d fac3 	bl	800f8e8 <HAL_TIM_PWM_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM15_Init+0xb8>
  {
    Error_Handler();
 8002368:	f000 fd02 	bl	8002d70 <Error_Handler>
  }
  /* TIM15 resets on TIM2 TRGO (ITR1) for aligned restart */
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800236c:	2304      	movs	r3, #4
 800236e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002370:	2310      	movs	r3, #16
 8002372:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8002374:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002378:	4619      	mov	r1, r3
 800237a:	482a      	ldr	r0, [pc, #168]	@ (8002424 <MX_TIM15_Init+0x170>)
 800237c:	f00d ff3c 	bl	80101f8 <HAL_TIM_SlaveConfigSynchro>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM15_Init+0xd6>
  {
    Error_Handler();
 8002386:	f000 fcf3 	bl	8002d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800238a:	2320      	movs	r3, #32
 800238c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002392:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002396:	4619      	mov	r1, r3
 8002398:	4822      	ldr	r0, [pc, #136]	@ (8002424 <MX_TIM15_Init+0x170>)
 800239a:	f00e fcc7 	bl	8010d2c <HAL_TIMEx_MasterConfigSynchronization>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 80023a4:	f000 fce4 	bl	8002d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a8:	2360      	movs	r3, #96	@ 0x60
 80023aa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 499;
 80023ac:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80023b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023b2:	2300      	movs	r3, #0
 80023b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023b6:	2300      	movs	r3, #0
 80023b8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023ca:	2200      	movs	r2, #0
 80023cc:	4619      	mov	r1, r3
 80023ce:	4815      	ldr	r0, [pc, #84]	@ (8002424 <MX_TIM15_Init+0x170>)
 80023d0:	f00d fd06 	bl	800fde0 <HAL_TIM_PWM_ConfigChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM15_Init+0x12a>
  {
    Error_Handler();
 80023da:	f000 fcc9 	bl	8002d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	4619      	mov	r1, r3
 8002404:	4807      	ldr	r0, [pc, #28]	@ (8002424 <MX_TIM15_Init+0x170>)
 8002406:	f00e fd2d 	bl	8010e64 <HAL_TIMEx_ConfigBreakDeadTime>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM15_Init+0x160>
  {
    Error_Handler();
 8002410:	f000 fcae 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002414:	4803      	ldr	r0, [pc, #12]	@ (8002424 <MX_TIM15_Init+0x170>)
 8002416:	f000 ff9b 	bl	8003350 <HAL_TIM_MspPostInit>

}
 800241a:	bf00      	nop
 800241c:	3780      	adds	r7, #128	@ 0x80
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2400b054 	.word	0x2400b054
 8002428:	40014000 	.word	0x40014000

0800242c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002430:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 8002432:	4a23      	ldr	r2, [pc, #140]	@ (80024c0 <MX_USART1_UART_Init+0x94>)
 8002434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002436:	4b21      	ldr	r3, [pc, #132]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 8002438:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800243c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b1f      	ldr	r3, [pc, #124]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b1d      	ldr	r3, [pc, #116]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800244a:	4b1c      	ldr	r3, [pc, #112]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002450:	4b1a      	ldr	r3, [pc, #104]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 8002452:	220c      	movs	r2, #12
 8002454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002462:	4b16      	ldr	r3, [pc, #88]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002468:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 800246a:	2200      	movs	r2, #0
 800246c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800246e:	4b13      	ldr	r3, [pc, #76]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 8002470:	2200      	movs	r2, #0
 8002472:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002474:	4811      	ldr	r0, [pc, #68]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 8002476:	f00e fd9f 	bl	8010fb8 <HAL_UART_Init>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002480:	f000 fc76 	bl	8002d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002484:	2100      	movs	r1, #0
 8002486:	480d      	ldr	r0, [pc, #52]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 8002488:	f00f ff39 	bl	80122fe <HAL_UARTEx_SetTxFifoThreshold>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002492:	f000 fc6d 	bl	8002d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002496:	2100      	movs	r1, #0
 8002498:	4808      	ldr	r0, [pc, #32]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 800249a:	f00f ff6e 	bl	801237a <HAL_UARTEx_SetRxFifoThreshold>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80024a4:	f000 fc64 	bl	8002d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80024a8:	4804      	ldr	r0, [pc, #16]	@ (80024bc <MX_USART1_UART_Init+0x90>)
 80024aa:	f00f feef 	bl	801228c <HAL_UARTEx_DisableFifoMode>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80024b4:	f000 fc5c 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	2400b0a0 	.word	0x2400b0a0
 80024c0:	40011000 	.word	0x40011000

080024c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <MX_DMA_Init+0x44>)
 80024cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002508 <MX_DMA_Init+0x44>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <MX_DMA_Init+0x44>)
 80024dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2106      	movs	r1, #6
 80024ec:	200b      	movs	r0, #11
 80024ee:	f004 fdf6 	bl	80070de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80024f2:	200b      	movs	r0, #11
 80024f4:	f004 fe0d 	bl	8007112 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn disabled intentionally (ADC2 DMA runs without IRQ) */
  HAL_NVIC_DisableIRQ(DMA1_Stream1_IRQn);
 80024f8:	200c      	movs	r0, #12
 80024fa:	f004 fe18 	bl	800712e <HAL_NVIC_DisableIRQ>

}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	58024400 	.word	0x58024400

0800250c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08c      	sub	sp, #48	@ 0x30
 8002510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	60da      	str	r2, [r3, #12]
 8002520:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002522:	4b71      	ldr	r3, [pc, #452]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 8002524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002528:	4a6f      	ldr	r2, [pc, #444]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 800252a:	f043 0310 	orr.w	r3, r3, #16
 800252e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002532:	4b6d      	ldr	r3, [pc, #436]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 8002534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002540:	4b69      	ldr	r3, [pc, #420]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 8002542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002546:	4a68      	ldr	r2, [pc, #416]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 8002548:	f043 0304 	orr.w	r3, r3, #4
 800254c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002550:	4b65      	ldr	r3, [pc, #404]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 8002552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800255e:	4b62      	ldr	r3, [pc, #392]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 8002560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002564:	4a60      	ldr	r2, [pc, #384]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 8002566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800256a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800256e:	4b5e      	ldr	r3, [pc, #376]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 8002570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800257c:	4b5a      	ldr	r3, [pc, #360]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 800257e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002582:	4a59      	ldr	r2, [pc, #356]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800258c:	4b56      	ldr	r3, [pc, #344]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 800258e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259a:	4b53      	ldr	r3, [pc, #332]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 800259c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a0:	4a51      	ldr	r2, [pc, #324]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 80025a2:	f043 0302 	orr.w	r3, r3, #2
 80025a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025aa:	4b4f      	ldr	r3, [pc, #316]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 80025ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b8:	4b4b      	ldr	r3, [pc, #300]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 80025ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025be:	4a4a      	ldr	r2, [pc, #296]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 80025c0:	f043 0308 	orr.w	r3, r3, #8
 80025c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025c8:	4b47      	ldr	r3, [pc, #284]	@ (80026e8 <MX_GPIO_Init+0x1dc>)
 80025ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Led_Test_Pin|LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 80025d6:	2200      	movs	r2, #0
 80025d8:	f642 0108 	movw	r1, #10248	@ 0x2808
 80025dc:	4843      	ldr	r0, [pc, #268]	@ (80026ec <MX_GPIO_Init+0x1e0>)
 80025de:	f007 fd2d 	bl	800a03c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_RESET);
 80025e2:	2200      	movs	r2, #0
 80025e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025e8:	4841      	ldr	r0, [pc, #260]	@ (80026f0 <MX_GPIO_Init+0x1e4>)
 80025ea:	f007 fd27 	bl	800a03c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Test_Pin */
  GPIO_InitStruct.Pin = Led_Test_Pin;
 80025ee:	2308      	movs	r3, #8
 80025f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Led_Test_GPIO_Port, &GPIO_InitStruct);
 80025fe:	f107 031c 	add.w	r3, r7, #28
 8002602:	4619      	mov	r1, r3
 8002604:	4839      	ldr	r0, [pc, #228]	@ (80026ec <MX_GPIO_Init+0x1e0>)
 8002606:	f007 fb71 	bl	8009cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800260a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800260e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002610:	2301      	movs	r3, #1
 8002612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800261c:	f107 031c 	add.w	r3, r7, #28
 8002620:	4619      	mov	r1, r3
 8002622:	4832      	ldr	r0, [pc, #200]	@ (80026ec <MX_GPIO_Init+0x1e0>)
 8002624:	f007 fb62 	bl	8009cec <HAL_GPIO_Init>

  /*Configure GPIO pin : Data_ready_GPIO22_Pin */
  GPIO_InitStruct.Pin = Data_ready_GPIO22_Pin;
 8002628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800262c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	2301      	movs	r3, #1
 8002630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002636:	2303      	movs	r3, #3
 8002638:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Data_ready_GPIO22_GPIO_Port, &GPIO_InitStruct);
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	4619      	mov	r1, r3
 8002640:	482b      	ldr	r0, [pc, #172]	@ (80026f0 <MX_GPIO_Init+0x1e4>)
 8002642:	f007 fb53 	bl	8009cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002646:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800264a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002658:	2300      	movs	r3, #0
 800265a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	4619      	mov	r1, r3
 8002662:	4824      	ldr	r0, [pc, #144]	@ (80026f4 <MX_GPIO_Init+0x1e8>)
 8002664:	f007 fb42 	bl	8009cec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // Настройка RST дисплея и подсветки как GPIO до старта PWM
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8002668:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800266c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800266e:	2301      	movs	r3, #1
 8002670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002676:	2303      	movs	r3, #3
 8002678:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	4619      	mov	r1, r3
 8002680:	481a      	ldr	r0, [pc, #104]	@ (80026ec <MX_GPIO_Init+0x1e0>)
 8002682:	f007 fb33 	bl	8009cec <HAL_GPIO_Init>
  // Жёсткий аппаратный сброс LCD: low->delay->high
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8002686:	2200      	movs	r2, #0
 8002688:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800268c:	4817      	ldr	r0, [pc, #92]	@ (80026ec <MX_GPIO_Init+0x1e0>)
 800268e:	f007 fcd5 	bl	800a03c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8002692:	200a      	movs	r0, #10
 8002694:	f002 fc22 	bl	8004edc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8002698:	2201      	movs	r2, #1
 800269a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800269e:	4813      	ldr	r0, [pc, #76]	@ (80026ec <MX_GPIO_Init+0x1e0>)
 80026a0:	f007 fccc 	bl	800a03c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80026a4:	200a      	movs	r0, #10
 80026a6:	f002 fc19 	bl	8004edc <HAL_Delay>

#if FORCE_BL_GPIO
  // Настройка подсветки как GPIO ТОЛЬКО если используется GPIO режим
  GPIO_InitStruct.Pin = LCD_Led_Pin; /* PE10 */
 80026aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b0:	2301      	movs	r3, #1
 80026b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b8:	2303      	movs	r3, #3
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_Led_GPIO_Port, &GPIO_InitStruct);
 80026bc:	f107 031c 	add.w	r3, r7, #28
 80026c0:	4619      	mov	r1, r3
 80026c2:	480a      	ldr	r0, [pc, #40]	@ (80026ec <MX_GPIO_Init+0x1e0>)
 80026c4:	f007 fb12 	bl	8009cec <HAL_GPIO_Init>
  // По умолчанию выключаем подсветку (active low -> высокий уровень)
  BL_OFF();
 80026c8:	2201      	movs	r2, #1
 80026ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026ce:	4807      	ldr	r0, [pc, #28]	@ (80026ec <MX_GPIO_Init+0x1e0>)
 80026d0:	f007 fcb4 	bl	800a03c <HAL_GPIO_WritePin>
#endif
  HAL_GPIO_WritePin(Led_Test_GPIO_Port, Led_Test_Pin, GPIO_PIN_SET);
 80026d4:	2201      	movs	r2, #1
 80026d6:	2108      	movs	r1, #8
 80026d8:	4804      	ldr	r0, [pc, #16]	@ (80026ec <MX_GPIO_Init+0x1e0>)
 80026da:	f007 fcaf 	bl	800a03c <HAL_GPIO_WritePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 80026de:	bf00      	nop
 80026e0:	3730      	adds	r7, #48	@ 0x30
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	58024400 	.word	0x58024400
 80026ec:	58021000 	.word	0x58021000
 80026f0:	58020c00 	.word	0x58020c00
 80026f4:	58020000 	.word	0x58020000

080026f8 <HAL_TIM_PeriodElapsedCallback>:

// Мигание светодиодом и сторож
static volatile uint32_t tim2_irq_counter = 0; /* диагностика TIM2 IRQ */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002708:	d107      	bne.n	800271a <HAL_TIM_PeriodElapsedCallback+0x22>
    tim2_irq_counter++; /* счётчик для измерения реальной частоты */
 800270a:	4b18      	ldr	r3, [pc, #96]	@ (800276c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	4a16      	ldr	r2, [pc, #88]	@ (800276c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002712:	6013      	str	r3, [r2, #0]
    /* TIM2 @ 200 Hz: генерация тестового пилообразного сигнала */
    #if !SAFE_MINIMAL
      extern void vnd_generate_test_sawtooth(void);
      vnd_generate_test_sawtooth();
 8002714:	f001 ff9e 	bl	8004654 <vnd_generate_test_sawtooth>
    #if !SAFE_MINIMAL
      extern void usb_vendor_periodic_tick(void);
      usb_vendor_periodic_tick();
    #endif
  }
}
 8002718:	e024      	b.n	8002764 <HAL_TIM_PeriodElapsedCallback+0x6c>
  else if (htim->Instance == TIM6) {
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a14      	ldr	r2, [pc, #80]	@ (8002770 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d11f      	bne.n	8002764 <HAL_TIM_PeriodElapsedCallback+0x6c>
    tim6_irq_count++;
 8002724:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	4a12      	ldr	r2, [pc, #72]	@ (8002774 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800272c:	6013      	str	r3, [r2, #0]
    if (++div >= 20) {       // быстреее мигание для наглядности (~2–4 Гц в зависимости от частоты TIM6)
 800272e:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	3301      	adds	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002738:	801a      	strh	r2, [r3, #0]
 800273a:	4b0f      	ldr	r3, [pc, #60]	@ (8002778 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	2b13      	cmp	r3, #19
 8002740:	d90e      	bls.n	8002760 <HAL_TIM_PeriodElapsedCallback+0x68>
      div = 0;
 8002742:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002744:	2200      	movs	r2, #0
 8002746:	801a      	strh	r2, [r3, #0]
        HAL_GPIO_TogglePin(Led_Test_GPIO_Port, Led_Test_Pin);
 8002748:	2108      	movs	r1, #8
 800274a:	480c      	ldr	r0, [pc, #48]	@ (800277c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800274c:	f007 fc8f 	bl	800a06e <HAL_GPIO_TogglePin>
        tim6_led_toggled_flag = 1; // попросим main вывести лог
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
        tim6_led_toggle_counter++;
 8002756:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3301      	adds	r3, #1
 800275c:	4a09      	ldr	r2, [pc, #36]	@ (8002784 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800275e:	6013      	str	r3, [r2, #0]
      usb_vendor_periodic_tick();
 8002760:	f013 f9cc 	bl	8015afc <usb_vendor_periodic_tick>
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	2400b278 	.word	0x2400b278
 8002770:	40001000 	.word	0x40001000
 8002774:	2400b238 	.word	0x2400b238
 8002778:	2400b288 	.word	0x2400b288
 800277c:	58021000 	.word	0x58021000
 8002780:	2400b23c 	.word	0x2400b23c
 8002784:	2400b240 	.word	0x2400b240

08002788 <lcd_print_padded_if_changed>:

static void lcd_print_padded_if_changed(int x, int y, const char* new_text,
                                        char *prev, size_t buf_sz,
                                        uint8_t max_len, uint8_t font_height,
                                        uint16_t fg, uint16_t bg)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b091      	sub	sp, #68	@ 0x44
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
    if(!new_text || !prev || buf_sz == 0) return;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d055      	beq.n	8002848 <lcd_print_padded_if_changed+0xc0>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d052      	beq.n	8002848 <lcd_print_padded_if_changed+0xc0>
 80027a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d04f      	beq.n	8002848 <lcd_print_padded_if_changed+0xc0>
    if(strncmp(new_text, prev, buf_sz-1) == 0) return;
 80027a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027aa:	3b01      	subs	r3, #1
 80027ac:	461a      	mov	r2, r3
 80027ae:	6839      	ldr	r1, [r7, #0]
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f018 f83f 	bl	801a834 <strncmp>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d047      	beq.n	800284c <lcd_print_padded_if_changed+0xc4>
    char line[32];
    size_t n = strlen(new_text);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fd fd87 	bl	80002d0 <strlen>
 80027c2:	6378      	str	r0, [r7, #52]	@ 0x34
    if(n > max_len) n = max_len;
 80027c4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80027c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d902      	bls.n	80027d4 <lcd_print_padded_if_changed+0x4c>
 80027ce:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80027d2:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(line, new_text, n);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4618      	mov	r0, r3
 80027de:	f018 f8c2 	bl	801a966 <memcpy>
    while(n < max_len) line[n++] = ' ';
 80027e2:	e007      	b.n	80027f4 <lcd_print_padded_if_changed+0x6c>
 80027e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	637a      	str	r2, [r7, #52]	@ 0x34
 80027ea:	3338      	adds	r3, #56	@ 0x38
 80027ec:	443b      	add	r3, r7
 80027ee:	2220      	movs	r2, #32
 80027f0:	f803 2c24 	strb.w	r2, [r3, #-36]
 80027f4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80027f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d3f2      	bcc.n	80027e4 <lcd_print_padded_if_changed+0x5c>
    line[n] = 0;
 80027fe:	f107 0214 	add.w	r2, r7, #20
 8002802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002804:	4413      	add	r3, r2
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
    LCD_ShowString_Size((uint16_t)x, (uint16_t)y, line, font_height, fg, bg);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	b298      	uxth	r0, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	b299      	uxth	r1, r3
 8002812:	f897 4050 	ldrb.w	r4, [r7, #80]	@ 0x50
 8002816:	f107 0214 	add.w	r2, r7, #20
 800281a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	4623      	mov	r3, r4
 8002828:	f002 f84e 	bl	80048c8 <LCD_ShowString_Size>
    strncpy(prev, new_text, buf_sz-1);
 800282c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800282e:	3b01      	subs	r3, #1
 8002830:	461a      	mov	r2, r3
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	6838      	ldr	r0, [r7, #0]
 8002836:	f018 f80f 	bl	801a858 <strncpy>
    prev[buf_sz-1] = 0;
 800283a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800283c:	3b01      	subs	r3, #1
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	4413      	add	r3, r2
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e002      	b.n	800284e <lcd_print_padded_if_changed+0xc6>
    if(!new_text || !prev || buf_sz == 0) return;
 8002848:	bf00      	nop
 800284a:	e000      	b.n	800284e <lcd_print_padded_if_changed+0xc6>
    if(strncmp(new_text, prev, buf_sz-1) == 0) return;
 800284c:	bf00      	nop
}
 800284e:	373c      	adds	r7, #60	@ 0x3c
 8002850:	46bd      	mov	sp, r7
 8002852:	bd90      	pop	{r4, r7, pc}

08002854 <UpdateLCDStatus>:

void UpdateLCDStatus(void){ need_usb_status_refresh = 1; }
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
 8002858:	4b03      	ldr	r3, [pc, #12]	@ (8002868 <UpdateLCDStatus+0x14>)
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	2400b25d 	.word	0x2400b25d

0800286c <DrawUSBStatus>:
    }
    */
  PROG('s');
}

void DrawUSBStatus(void){
 800286c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002870:	b0b4      	sub	sp, #208	@ 0xd0
 8002872:	af06      	add	r7, sp, #24
  PROG('U');
#if DIAG_SKIP_LCD
  PROG('u');
  return;
#endif
    if(!lcd_ready) {
 8002874:	4b77      	ldr	r3, [pc, #476]	@ (8002a54 <DrawUSBStatus+0x1e8>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8254 	beq.w	8002d26 <DrawUSBStatus+0x4ba>
  static uint64_t prev_tx_bytes = 0ULL;
  static uint64_t prev_tx_samples = 0ULL;
  static uint32_t prev_rate_calc_ms = 0;
  static uint32_t last_rate_bps = 0; /* приблизительно bytes/sec */
  static uint32_t last_rate_sps = 0; /* семплов в секунду (оба канала суммарно) */
  uint32_t now = HAL_GetTick();
 800287e:	f002 fb21 	bl	8004ec4 <HAL_GetTick>
 8002882:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
  /* Хост присутствует только при свежем SOF (<400мс) или SUSPENDED */
  uint32_t dt_sof = now - g_usb_last_sof_ms;
 8002886:	4b74      	ldr	r3, [pc, #464]	@ (8002a58 <DrawUSBStatus+0x1ec>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint8_t host_present = (hUsbDeviceHS.dev_state == USBD_STATE_SUSPENDED) || (dt_sof < 400);
 8002894:	4b71      	ldr	r3, [pc, #452]	@ (8002a5c <DrawUSBStatus+0x1f0>)
 8002896:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b04      	cmp	r3, #4
 800289e:	d004      	beq.n	80028aa <DrawUSBStatus+0x3e>
 80028a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028a4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80028a8:	d201      	bcs.n	80028ae <DrawUSBStatus+0x42>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <DrawUSBStatus+0x44>
 80028ae:	2300      	movs	r3, #0
 80028b0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    uint8_t s = hUsbDeviceHS.dev_state;
 80028b4:	4b69      	ldr	r3, [pc, #420]	@ (8002a5c <DrawUSBStatus+0x1f0>)
 80028b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80028ba:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

    const char *text0; uint16_t color0;
    if(!host_present){ text0 = "USB:--"; color0 = RED; }
 80028be:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d107      	bne.n	80028d6 <DrawUSBStatus+0x6a>
 80028c6:	4b66      	ldr	r3, [pc, #408]	@ (8002a60 <DrawUSBStatus+0x1f4>)
 80028c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028cc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80028d0:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80028d4:	e02a      	b.n	800292c <DrawUSBStatus+0xc0>
    else {
        switch(s){
 80028d6:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d016      	beq.n	800290c <DrawUSBStatus+0xa0>
 80028de:	2b04      	cmp	r3, #4
 80028e0:	dc1c      	bgt.n	800291c <DrawUSBStatus+0xb0>
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d002      	beq.n	80028ec <DrawUSBStatus+0x80>
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d008      	beq.n	80028fc <DrawUSBStatus+0x90>
 80028ea:	e017      	b.n	800291c <DrawUSBStatus+0xb0>
            case USBD_STATE_ADDRESSED: text0 = "USB:ADR"; color0 = YELLOW; break;
 80028ec:	4b5d      	ldr	r3, [pc, #372]	@ (8002a64 <DrawUSBStatus+0x1f8>)
 80028ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028f2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80028fa:	e017      	b.n	800292c <DrawUSBStatus+0xc0>
            case USBD_STATE_CONFIGURED: text0 = "USB:CFG"; color0 = GREEN; break;
 80028fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002a68 <DrawUSBStatus+0x1fc>)
 80028fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002902:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002906:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800290a:	e00f      	b.n	800292c <DrawUSBStatus+0xc0>
            case USBD_STATE_SUSPENDED:  text0 = "USB:SUS"; color0 = CYAN;  break;
 800290c:	4b57      	ldr	r3, [pc, #348]	@ (8002a6c <DrawUSBStatus+0x200>)
 800290e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002912:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002916:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800291a:	e007      	b.n	800292c <DrawUSBStatus+0xc0>
            default: text0 = "USB:--"; color0 = RED; break;
 800291c:	4b50      	ldr	r3, [pc, #320]	@ (8002a60 <DrawUSBStatus+0x1f4>)
 800291e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002922:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002926:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800292a:	bf00      	nop
        }
    }
    lcd_print_padded_if_changed(0,0,text0, prev_line0, sizeof(prev_line0), 7, 12, color0, BLACK);
 800292c:	2300      	movs	r3, #0
 800292e:	9304      	str	r3, [sp, #16]
 8002930:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8002934:	9303      	str	r3, [sp, #12]
 8002936:	230c      	movs	r3, #12
 8002938:	9302      	str	r3, [sp, #8]
 800293a:	2307      	movs	r3, #7
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	2310      	movs	r3, #16
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	4b4b      	ldr	r3, [pc, #300]	@ (8002a70 <DrawUSBStatus+0x204>)
 8002944:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002948:	2100      	movs	r1, #0
 800294a:	2000      	movs	r0, #0
 800294c:	f7ff ff1c 	bl	8002788 <lcd_print_padded_if_changed>
  /* Диагностика частоты TIM2 IRQ */
  static uint32_t prev_tim2_count = 0;
  static uint32_t prev_tim2_calc_ms = 0;
  static uint32_t tim2_hz_display = 0;
  char ds_buf[16];
  uint32_t dt_tim2 = now - prev_tim2_calc_ms;
 8002950:	4b48      	ldr	r3, [pc, #288]	@ (8002a74 <DrawUSBStatus+0x208>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if(dt_tim2 >= 1000) {
 800295e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002962:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002966:	d312      	bcc.n	800298e <DrawUSBStatus+0x122>
    uint32_t tim2_delta = tim2_irq_counter - prev_tim2_count;
 8002968:	4b43      	ldr	r3, [pc, #268]	@ (8002a78 <DrawUSBStatus+0x20c>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b43      	ldr	r3, [pc, #268]	@ (8002a7c <DrawUSBStatus+0x210>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tim2_hz_display = tim2_delta; /* частота за последнюю секунду */
 8002976:	4a42      	ldr	r2, [pc, #264]	@ (8002a80 <DrawUSBStatus+0x214>)
 8002978:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800297c:	6013      	str	r3, [r2, #0]
    prev_tim2_count = tim2_irq_counter;
 800297e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a78 <DrawUSBStatus+0x20c>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4b3e      	ldr	r3, [pc, #248]	@ (8002a7c <DrawUSBStatus+0x210>)
 8002984:	601a      	str	r2, [r3, #0]
    prev_tim2_calc_ms = now;
 8002986:	4a3b      	ldr	r2, [pc, #236]	@ (8002a74 <DrawUSBStatus+0x208>)
 8002988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800298c:	6013      	str	r3, [r2, #0]
  }
  snprintf(ds_buf,sizeof(ds_buf),"T2:%u Hz", (unsigned)tim2_hz_display);
 800298e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a80 <DrawUSBStatus+0x214>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8002996:	4a3b      	ldr	r2, [pc, #236]	@ (8002a84 <DrawUSBStatus+0x218>)
 8002998:	2110      	movs	r1, #16
 800299a:	f017 fdfb 	bl	801a594 <sniprintf>
    lcd_print_padded_if_changed(0,12, ds_buf, prev_line1, sizeof(prev_line1), 12, 12, CYAN, BLACK);
 800299e:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80029a2:	2300      	movs	r3, #0
 80029a4:	9304      	str	r3, [sp, #16]
 80029a6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80029aa:	9303      	str	r3, [sp, #12]
 80029ac:	230c      	movs	r3, #12
 80029ae:	9302      	str	r3, [sp, #8]
 80029b0:	230c      	movs	r3, #12
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	2310      	movs	r3, #16
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	4b33      	ldr	r3, [pc, #204]	@ (8002a88 <DrawUSBStatus+0x21c>)
 80029ba:	210c      	movs	r1, #12
 80029bc:	2000      	movs	r0, #0
 80029be:	f7ff fee3 	bl	8002788 <lcd_print_padded_if_changed>

  /* Скорость обмена: считаем раз в ~500мс (байты/с и семплы/с) */
  if(host_present && s == USBD_STATE_CONFIGURED){
 80029c2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 815e 	beq.w	8002c88 <DrawUSBStatus+0x41c>
 80029cc:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	f040 8159 	bne.w	8002c88 <DrawUSBStatus+0x41c>
    uint32_t dt = now - prev_rate_calc_ms;
 80029d6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a8c <DrawUSBStatus+0x220>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if(dt >= 500){
 80029e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029e8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80029ec:	f0c0 80f0 	bcc.w	8002bd0 <DrawUSBStatus+0x364>
      uint64_t cur = vnd_get_total_tx_bytes();
 80029f0:	f016 f82c 	bl	8018a4c <vnd_get_total_tx_bytes>
 80029f4:	e9c7 0124 	strd	r0, r1, [r7, #144]	@ 0x90
      uint64_t cur_samples = vnd_get_total_tx_samples();
 80029f8:	f016 f836 	bl	8018a68 <vnd_get_total_tx_samples>
 80029fc:	e9c7 0122 	strd	r0, r1, [r7, #136]	@ 0x88
      uint64_t dbytes = (cur >= prev_tx_bytes)? (cur - prev_tx_bytes):0ULL;
 8002a00:	4b23      	ldr	r3, [pc, #140]	@ (8002a90 <DrawUSBStatus+0x224>)
 8002a02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a06:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002a0a:	4282      	cmp	r2, r0
 8002a0c:	418b      	sbcs	r3, r1
 8002a0e:	d308      	bcc.n	8002a22 <DrawUSBStatus+0x1b6>
 8002a10:	4b1f      	ldr	r3, [pc, #124]	@ (8002a90 <DrawUSBStatus+0x224>)
 8002a12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a16:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002a1a:	1a14      	subs	r4, r2, r0
 8002a1c:	eb63 0501 	sbc.w	r5, r3, r1
 8002a20:	e003      	b.n	8002a2a <DrawUSBStatus+0x1be>
 8002a22:	f04f 0400 	mov.w	r4, #0
 8002a26:	f04f 0500 	mov.w	r5, #0
 8002a2a:	e9c7 4520 	strd	r4, r5, [r7, #128]	@ 0x80
      uint64_t dsamps = (cur_samples >= prev_tx_samples)? (cur_samples - prev_tx_samples):0ULL;
 8002a2e:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <DrawUSBStatus+0x228>)
 8002a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a38:	4282      	cmp	r2, r0
 8002a3a:	418b      	sbcs	r3, r1
 8002a3c:	d32c      	bcc.n	8002a98 <DrawUSBStatus+0x22c>
 8002a3e:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <DrawUSBStatus+0x228>)
 8002a40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a44:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a48:	1a14      	subs	r4, r2, r0
 8002a4a:	623c      	str	r4, [r7, #32]
 8002a4c:	eb63 0301 	sbc.w	r3, r3, r1
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a52:	e027      	b.n	8002aa4 <DrawUSBStatus+0x238>
 8002a54:	2400d8b8 	.word	0x2400d8b8
 8002a58:	2401bcbc 	.word	0x2401bcbc
 8002a5c:	2400d8c4 	.word	0x2400d8c4
 8002a60:	0801c0e4 	.word	0x0801c0e4
 8002a64:	0801c0ec 	.word	0x0801c0ec
 8002a68:	0801c0f4 	.word	0x0801c0f4
 8002a6c:	0801c0fc 	.word	0x0801c0fc
 8002a70:	2400b28c 	.word	0x2400b28c
 8002a74:	2400b29c 	.word	0x2400b29c
 8002a78:	2400b278 	.word	0x2400b278
 8002a7c:	2400b2a0 	.word	0x2400b2a0
 8002a80:	2400b2a4 	.word	0x2400b2a4
 8002a84:	0801c104 	.word	0x0801c104
 8002a88:	2400b2a8 	.word	0x2400b2a8
 8002a8c:	2400b2b8 	.word	0x2400b2b8
 8002a90:	2400b2c0 	.word	0x2400b2c0
 8002a94:	2400b2c8 	.word	0x2400b2c8
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	f04f 0400 	mov.w	r4, #0
 8002aa0:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8002aa4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002aa8:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      /* bytes per second approximation */
      if(dt > 0){
 8002aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d07f      	beq.n	8002bb4 <DrawUSBStatus+0x348>
        last_rate_bps = (uint32_t)( (dbytes * 1000ULL) / dt );
 8002ab4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8002ab8:	4622      	mov	r2, r4
 8002aba:	462b      	mov	r3, r5
 8002abc:	f04f 0000 	mov.w	r0, #0
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	0159      	lsls	r1, r3, #5
 8002ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aca:	0150      	lsls	r0, r2, #5
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	ebb2 0804 	subs.w	r8, r2, r4
 8002ad4:	eb63 0905 	sbc.w	r9, r3, r5
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8002ae4:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8002ae8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8002aec:	4690      	mov	r8, r2
 8002aee:	4699      	mov	r9, r3
 8002af0:	eb18 0304 	adds.w	r3, r8, r4
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	eb49 0305 	adc.w	r3, r9, r5
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b08:	4629      	mov	r1, r5
 8002b0a:	00cb      	lsls	r3, r1, #3
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b12:	4621      	mov	r1, r4
 8002b14:	00ca      	lsls	r2, r1, #3
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	61fa      	str	r2, [r7, #28]
 8002b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b28:	f7fd fc2a 	bl	8000380 <__aeabi_uldivmod>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4b7f      	ldr	r3, [pc, #508]	@ (8002d30 <DrawUSBStatus+0x4c4>)
 8002b32:	601a      	str	r2, [r3, #0]
        last_rate_sps = (uint32_t)( (dsamps * 1000ULL) / dt );
 8002b34:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	f04f 0400 	mov.w	r4, #0
 8002b40:	f04f 0500 	mov.w	r5, #0
 8002b44:	015d      	lsls	r5, r3, #5
 8002b46:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002b4a:	0154      	lsls	r4, r2, #5
 8002b4c:	4622      	mov	r2, r4
 8002b4e:	462b      	mov	r3, r5
 8002b50:	ebb2 0a00 	subs.w	sl, r2, r0
 8002b54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8002b64:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8002b68:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8002b6c:	4692      	mov	sl, r2
 8002b6e:	469b      	mov	fp, r3
 8002b70:	eb1a 0300 	adds.w	r3, sl, r0
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	eb4b 0301 	adc.w	r3, fp, r1
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b88:	4629      	mov	r1, r5
 8002b8a:	00cb      	lsls	r3, r1, #3
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b92:	4621      	mov	r1, r4
 8002b94:	00ca      	lsls	r2, r1, #3
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	617a      	str	r2, [r7, #20]
 8002ba4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ba8:	f7fd fbea 	bl	8000380 <__aeabi_uldivmod>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4b60      	ldr	r3, [pc, #384]	@ (8002d34 <DrawUSBStatus+0x4c8>)
 8002bb2:	601a      	str	r2, [r3, #0]
      }
      prev_tx_bytes = cur;
 8002bb4:	4960      	ldr	r1, [pc, #384]	@ (8002d38 <DrawUSBStatus+0x4cc>)
 8002bb6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002bba:	e9c1 2300 	strd	r2, r3, [r1]
      prev_tx_samples = cur_samples;
 8002bbe:	495f      	ldr	r1, [pc, #380]	@ (8002d3c <DrawUSBStatus+0x4d0>)
 8002bc0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002bc4:	e9c1 2300 	strd	r2, r3, [r1]
      prev_rate_calc_ms = now;
 8002bc8:	4a5d      	ldr	r2, [pc, #372]	@ (8002d40 <DrawUSBStatus+0x4d4>)
 8002bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bce:	6013      	str	r3, [r2, #0]
    }
    /* Формат строки: S:xxxxx (sps) на первом плане; экономный вывод */
    char rate_buf[16];
    if(last_rate_sps >= 100000){
 8002bd0:	4b58      	ldr	r3, [pc, #352]	@ (8002d34 <DrawUSBStatus+0x4c8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5b      	ldr	r2, [pc, #364]	@ (8002d44 <DrawUSBStatus+0x4d8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d90e      	bls.n	8002bf8 <DrawUSBStatus+0x38c>
      uint32_t ks = last_rate_sps / 1000U;
 8002bda:	4b56      	ldr	r3, [pc, #344]	@ (8002d34 <DrawUSBStatus+0x4c8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5a      	ldr	r2, [pc, #360]	@ (8002d48 <DrawUSBStatus+0x4dc>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	099b      	lsrs	r3, r3, #6
 8002be6:	677b      	str	r3, [r7, #116]	@ 0x74
      snprintf(rate_buf, sizeof(rate_buf), "S:%3uK", (unsigned)ks);
 8002be8:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8002bec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bee:	4a57      	ldr	r2, [pc, #348]	@ (8002d4c <DrawUSBStatus+0x4e0>)
 8002bf0:	2110      	movs	r1, #16
 8002bf2:	f017 fccf 	bl	801a594 <sniprintf>
 8002bf6:	e007      	b.n	8002c08 <DrawUSBStatus+0x39c>
    } else {
      snprintf(rate_buf, sizeof(rate_buf), "S:%4u", (unsigned)last_rate_sps);
 8002bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8002d34 <DrawUSBStatus+0x4c8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8002c00:	4a53      	ldr	r2, [pc, #332]	@ (8002d50 <DrawUSBStatus+0x4e4>)
 8002c02:	2110      	movs	r1, #16
 8002c04:	f017 fcc6 	bl	801a594 <sniprintf>
    }
  /* Очистка legacy VID/PID убрана */
    /* Используем ширину 12 символов для гарантированного затирания хвоста */
    lcd_print_padded_if_changed(0,24, rate_buf, prev_line2, sizeof(prev_line2), 12, 12, vnd_is_streaming()?GREEN:WHITE, BLACK);
 8002c08:	f013 fa26 	bl	8016058 <vnd_is_streaming>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <DrawUSBStatus+0x3ac>
 8002c12:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002c16:	e001      	b.n	8002c1c <DrawUSBStatus+0x3b0>
 8002c18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c1c:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002c20:	2100      	movs	r1, #0
 8002c22:	9104      	str	r1, [sp, #16]
 8002c24:	9303      	str	r3, [sp, #12]
 8002c26:	230c      	movs	r3, #12
 8002c28:	9302      	str	r3, [sp, #8]
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	2310      	movs	r3, #16
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	4b48      	ldr	r3, [pc, #288]	@ (8002d54 <DrawUSBStatus+0x4e8>)
 8002c34:	2118      	movs	r1, #24
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7ff fda6 	bl	8002788 <lcd_print_padded_if_changed>
    /* Показываем время компиляции для контроля версии - ПРИНУДИТЕЛЬНО при первом запуске */
    {
      extern const char fw_build_time[];
      static uint8_t build_time_shown = 0;
      char build_time[20];
      snprintf(build_time, sizeof(build_time), "Build:%s", fw_build_time);
 8002c3c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8002c40:	4b45      	ldr	r3, [pc, #276]	@ (8002d58 <DrawUSBStatus+0x4ec>)
 8002c42:	4a46      	ldr	r2, [pc, #280]	@ (8002d5c <DrawUSBStatus+0x4f0>)
 8002c44:	2114      	movs	r1, #20
 8002c46:	f017 fca5 	bl	801a594 <sniprintf>
      if(!build_time_shown) {
 8002c4a:	4b45      	ldr	r3, [pc, #276]	@ (8002d60 <DrawUSBStatus+0x4f4>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d107      	bne.n	8002c62 <DrawUSBStatus+0x3f6>
        memset(prev_line3, 0, sizeof(prev_line3)); // Сбросить для принудительного обновления
 8002c52:	2210      	movs	r2, #16
 8002c54:	2100      	movs	r1, #0
 8002c56:	4843      	ldr	r0, [pc, #268]	@ (8002d64 <DrawUSBStatus+0x4f8>)
 8002c58:	f017 fde4 	bl	801a824 <memset>
        build_time_shown = 1;
 8002c5c:	4b40      	ldr	r3, [pc, #256]	@ (8002d60 <DrawUSBStatus+0x4f4>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
      }
      lcd_print_padded_if_changed(0,36, build_time, prev_line3, sizeof(prev_line3), 16, 12, YELLOW, BLACK);
 8002c62:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002c66:	2300      	movs	r3, #0
 8002c68:	9304      	str	r3, [sp, #16]
 8002c6a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002c6e:	9303      	str	r3, [sp, #12]
 8002c70:	230c      	movs	r3, #12
 8002c72:	9302      	str	r3, [sp, #8]
 8002c74:	2310      	movs	r3, #16
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	2310      	movs	r3, #16
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	4b39      	ldr	r3, [pc, #228]	@ (8002d64 <DrawUSBStatus+0x4f8>)
 8002c7e:	2124      	movs	r1, #36	@ 0x24
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7ff fd81 	bl	8002788 <lcd_print_padded_if_changed>
  if(host_present && s == USBD_STATE_CONFIGURED){
 8002c86:	e04f      	b.n	8002d28 <DrawUSBStatus+0x4bc>
    }
  } else {
  /* Очистка legacy VID/PID убрана */
    lcd_print_padded_if_changed(0,24, host_present?"S:----":"S:----", prev_line2, sizeof(prev_line2), 12, 12, WHITE, BLACK);
 8002c88:	2300      	movs	r3, #0
 8002c8a:	9304      	str	r3, [sp, #16]
 8002c8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c90:	9303      	str	r3, [sp, #12]
 8002c92:	230c      	movs	r3, #12
 8002c94:	9302      	str	r3, [sp, #8]
 8002c96:	230c      	movs	r3, #12
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d54 <DrawUSBStatus+0x4e8>)
 8002ca0:	4a31      	ldr	r2, [pc, #196]	@ (8002d68 <DrawUSBStatus+0x4fc>)
 8002ca2:	2118      	movs	r1, #24
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7ff fd6f 	bl	8002788 <lcd_print_padded_if_changed>
    /* При отсутствии хоста показываем время компиляции */
    {
      extern const char fw_build_time[];
      static uint8_t build_time_shown2 = 0;
      char build_time[20];
      snprintf(build_time, sizeof(build_time), "Build:%s", fw_build_time);
 8002caa:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002cae:	4b2a      	ldr	r3, [pc, #168]	@ (8002d58 <DrawUSBStatus+0x4ec>)
 8002cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d5c <DrawUSBStatus+0x4f0>)
 8002cb2:	2114      	movs	r1, #20
 8002cb4:	f017 fc6e 	bl	801a594 <sniprintf>
      if(!build_time_shown2) {
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d6c <DrawUSBStatus+0x500>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <DrawUSBStatus+0x464>
        memset(prev_line3, 0, sizeof(prev_line3));
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4827      	ldr	r0, [pc, #156]	@ (8002d64 <DrawUSBStatus+0x4f8>)
 8002cc6:	f017 fdad 	bl	801a824 <memset>
        build_time_shown2 = 1;
 8002cca:	4b28      	ldr	r3, [pc, #160]	@ (8002d6c <DrawUSBStatus+0x500>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
      }
      lcd_print_padded_if_changed(0,36, build_time, prev_line3, sizeof(prev_line3), 16, 12, YELLOW, BLACK);
 8002cd0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9304      	str	r3, [sp, #16]
 8002cd8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002cdc:	9303      	str	r3, [sp, #12]
 8002cde:	230c      	movs	r3, #12
 8002ce0:	9302      	str	r3, [sp, #8]
 8002ce2:	2310      	movs	r3, #16
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	2310      	movs	r3, #16
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	4b1e      	ldr	r3, [pc, #120]	@ (8002d64 <DrawUSBStatus+0x4f8>)
 8002cec:	2124      	movs	r1, #36	@ 0x24
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7ff fd4a 	bl	8002788 <lcd_print_padded_if_changed>
    }
    prev_rate_calc_ms = now;
 8002cf4:	4a12      	ldr	r2, [pc, #72]	@ (8002d40 <DrawUSBStatus+0x4d4>)
 8002cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cfa:	6013      	str	r3, [r2, #0]
    prev_tx_bytes = vnd_get_total_tx_bytes();
 8002cfc:	f015 fea6 	bl	8018a4c <vnd_get_total_tx_bytes>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	490c      	ldr	r1, [pc, #48]	@ (8002d38 <DrawUSBStatus+0x4cc>)
 8002d06:	e9c1 2300 	strd	r2, r3, [r1]
    prev_tx_samples = vnd_get_total_tx_samples();
 8002d0a:	f015 fead 	bl	8018a68 <vnd_get_total_tx_samples>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	490a      	ldr	r1, [pc, #40]	@ (8002d3c <DrawUSBStatus+0x4d0>)
 8002d14:	e9c1 2300 	strd	r2, r3, [r1]
    last_rate_bps = 0;
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <DrawUSBStatus+0x4c4>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
    last_rate_sps = 0;
 8002d1e:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <DrawUSBStatus+0x4c8>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	e000      	b.n	8002d28 <DrawUSBStatus+0x4bc>
        return;
 8002d26:	bf00      	nop
  }
  PROG('u');
}
 8002d28:	37b8      	adds	r7, #184	@ 0xb8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d30:	2400b2d0 	.word	0x2400b2d0
 8002d34:	2400b2d4 	.word	0x2400b2d4
 8002d38:	2400b2c0 	.word	0x2400b2c0
 8002d3c:	2400b2c8 	.word	0x2400b2c8
 8002d40:	2400b2b8 	.word	0x2400b2b8
 8002d44:	0001869f 	.word	0x0001869f
 8002d48:	10624dd3 	.word	0x10624dd3
 8002d4c:	0801c110 	.word	0x0801c110
 8002d50:	0801c118 	.word	0x0801c118
 8002d54:	2400b2d8 	.word	0x2400b2d8
 8002d58:	0801c754 	.word	0x0801c754
 8002d5c:	0801c120 	.word	0x0801c120
 8002d60:	2400b2e8 	.word	0x2400b2e8
 8002d64:	2400b2ec 	.word	0x2400b2ec
 8002d68:	0801c12c 	.word	0x0801c12c
 8002d6c:	2400b2fc 	.word	0x2400b2fc

08002d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d76:	b672      	cpsid	i
}
 8002d78:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Визуальный индикатор ошибки: мигание подсветкой LCD_Led (PE10, active-low) и LED (PE3) */
  __disable_irq();
  /* Включаем тактирование GPIOE на случай ранней ошибки */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d7a:	4b31      	ldr	r3, [pc, #196]	@ (8002e40 <Error_Handler+0xd0>)
 8002d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d80:	4a2f      	ldr	r2, [pc, #188]	@ (8002e40 <Error_Handler+0xd0>)
 8002d82:	f043 0310 	orr.w	r3, r3, #16
 8002d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e40 <Error_Handler+0xd0>)
 8002d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
  int led_idx = __builtin_ctz(Led_Test_Pin);
 8002d98:	2303      	movs	r3, #3
 8002d9a:	617b      	str	r3, [r7, #20]
  int bl_idx  = __builtin_ctz(LCD_Led_Pin);
 8002d9c:	230a      	movs	r3, #10
 8002d9e:	613b      	str	r3, [r7, #16]
  GPIOE->MODER &= ~(3u << (led_idx*2));
 8002da0:	4b28      	ldr	r3, [pc, #160]	@ (8002e44 <Error_Handler+0xd4>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	2103      	movs	r1, #3
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	4924      	ldr	r1, [pc, #144]	@ (8002e44 <Error_Handler+0xd4>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
  GPIOE->MODER |=  (1u << (led_idx*2));
 8002db6:	4b23      	ldr	r3, [pc, #140]	@ (8002e44 <Error_Handler+0xd4>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	491f      	ldr	r1, [pc, #124]	@ (8002e44 <Error_Handler+0xd4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
  GPIOE->MODER &= ~(3u << (bl_idx*2));
 8002dca:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <Error_Handler+0xd4>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2103      	movs	r1, #3
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	491a      	ldr	r1, [pc, #104]	@ (8002e44 <Error_Handler+0xd4>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]
  GPIOE->MODER |=  (1u << (bl_idx*2));
 8002de0:	4b18      	ldr	r3, [pc, #96]	@ (8002e44 <Error_Handler+0xd4>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	4915      	ldr	r1, [pc, #84]	@ (8002e44 <Error_Handler+0xd4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
  for(;;){
    /* LED ON, BL ON (active-low -> reset) */
    GPIOE->BSRR = Led_Test_Pin;
 8002df4:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <Error_Handler+0xd4>)
 8002df6:	2208      	movs	r2, #8
 8002df8:	619a      	str	r2, [r3, #24]
    GPIOE->BSRR = (LCD_Led_Pin << 16);
 8002dfa:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <Error_Handler+0xd4>)
 8002dfc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e00:	619a      	str	r2, [r3, #24]
    for(volatile uint32_t d=0; d<24000000UL; ++d){ __NOP(); }
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	e003      	b.n	8002e10 <Error_Handler+0xa0>
 8002e08:	bf00      	nop
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4a0d      	ldr	r2, [pc, #52]	@ (8002e48 <Error_Handler+0xd8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d3f7      	bcc.n	8002e08 <Error_Handler+0x98>
    /* LED OFF, BL OFF (active-low -> set) */
    GPIOE->BSRR = (Led_Test_Pin << 16);
 8002e18:	4b0a      	ldr	r3, [pc, #40]	@ (8002e44 <Error_Handler+0xd4>)
 8002e1a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002e1e:	619a      	str	r2, [r3, #24]
    GPIOE->BSRR = LCD_Led_Pin;
 8002e20:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <Error_Handler+0xd4>)
 8002e22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e26:	619a      	str	r2, [r3, #24]
    for(volatile uint32_t d=0; d<12000000UL; ++d){ __NOP(); }
 8002e28:	2300      	movs	r3, #0
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	e003      	b.n	8002e36 <Error_Handler+0xc6>
 8002e2e:	bf00      	nop
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3301      	adds	r3, #1
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a04      	ldr	r2, [pc, #16]	@ (8002e4c <Error_Handler+0xdc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d3f7      	bcc.n	8002e2e <Error_Handler+0xbe>
    GPIOE->BSRR = Led_Test_Pin;
 8002e3e:	e7d9      	b.n	8002df4 <Error_Handler+0x84>
 8002e40:	58024400 	.word	0x58024400
 8002e44:	58021000 	.word	0x58021000
 8002e48:	016e3600 	.word	0x016e3600
 8002e4c:	00b71b00 	.word	0x00b71b00

08002e50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e56:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <HAL_MspInit+0x30>)
 8002e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e5c:	4a08      	ldr	r2, [pc, #32]	@ (8002e80 <HAL_MspInit+0x30>)
 8002e5e:	f043 0302 	orr.w	r3, r3, #2
 8002e62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e66:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <HAL_MspInit+0x30>)
 8002e68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	58024400 	.word	0x58024400

08002e84 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08c      	sub	sp, #48	@ 0x30
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 031c 	add.w	r3, r7, #28
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a69      	ldr	r2, [pc, #420]	@ (8003048 <HAL_ADC_MspInit+0x1c4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d163      	bne.n	8002f6e <HAL_ADC_MspInit+0xea>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002ea6:	4b69      	ldr	r3, [pc, #420]	@ (800304c <HAL_ADC_MspInit+0x1c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	4a67      	ldr	r2, [pc, #412]	@ (800304c <HAL_ADC_MspInit+0x1c8>)
 8002eae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002eb0:	4b66      	ldr	r3, [pc, #408]	@ (800304c <HAL_ADC_MspInit+0x1c8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d10e      	bne.n	8002ed6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002eb8:	4b65      	ldr	r3, [pc, #404]	@ (8003050 <HAL_ADC_MspInit+0x1cc>)
 8002eba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ebe:	4a64      	ldr	r2, [pc, #400]	@ (8003050 <HAL_ADC_MspInit+0x1cc>)
 8002ec0:	f043 0320 	orr.w	r3, r3, #32
 8002ec4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002ec8:	4b61      	ldr	r3, [pc, #388]	@ (8003050 <HAL_ADC_MspInit+0x1cc>)
 8002eca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	4b5e      	ldr	r3, [pc, #376]	@ (8003050 <HAL_ADC_MspInit+0x1cc>)
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002edc:	4a5c      	ldr	r2, [pc, #368]	@ (8003050 <HAL_ADC_MspInit+0x1cc>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ee6:	4b5a      	ldr	r3, [pc, #360]	@ (8003050 <HAL_ADC_MspInit+0x1cc>)
 8002ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ef4:	2340      	movs	r3, #64	@ 0x40
 8002ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	4619      	mov	r1, r3
 8002f06:	4853      	ldr	r0, [pc, #332]	@ (8003054 <HAL_ADC_MspInit+0x1d0>)
 8002f08:	f006 fef0 	bl	8009cec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002f0c:	4b52      	ldr	r3, [pc, #328]	@ (8003058 <HAL_ADC_MspInit+0x1d4>)
 8002f0e:	4a53      	ldr	r2, [pc, #332]	@ (800305c <HAL_ADC_MspInit+0x1d8>)
 8002f10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002f12:	4b51      	ldr	r3, [pc, #324]	@ (8003058 <HAL_ADC_MspInit+0x1d4>)
 8002f14:	2209      	movs	r2, #9
 8002f16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f18:	4b4f      	ldr	r3, [pc, #316]	@ (8003058 <HAL_ADC_MspInit+0x1d4>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8003058 <HAL_ADC_MspInit+0x1d4>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f24:	4b4c      	ldr	r3, [pc, #304]	@ (8003058 <HAL_ADC_MspInit+0x1d4>)
 8002f26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f2c:	4b4a      	ldr	r3, [pc, #296]	@ (8003058 <HAL_ADC_MspInit+0x1d4>)
 8002f2e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f32:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f34:	4b48      	ldr	r3, [pc, #288]	@ (8003058 <HAL_ADC_MspInit+0x1d4>)
 8002f36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f3a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f3c:	4b46      	ldr	r3, [pc, #280]	@ (8003058 <HAL_ADC_MspInit+0x1d4>)
 8002f3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f42:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f44:	4b44      	ldr	r3, [pc, #272]	@ (8003058 <HAL_ADC_MspInit+0x1d4>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f4a:	4b43      	ldr	r3, [pc, #268]	@ (8003058 <HAL_ADC_MspInit+0x1d4>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f50:	4841      	ldr	r0, [pc, #260]	@ (8003058 <HAL_ADC_MspInit+0x1d4>)
 8002f52:	f004 fad9 	bl	8007508 <HAL_DMA_Init>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8002f5c:	f7ff ff08 	bl	8002d70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a3d      	ldr	r2, [pc, #244]	@ (8003058 <HAL_ADC_MspInit+0x1d4>)
 8002f64:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f66:	4a3c      	ldr	r2, [pc, #240]	@ (8003058 <HAL_ADC_MspInit+0x1d4>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002f6c:	e067      	b.n	800303e <HAL_ADC_MspInit+0x1ba>
  else if(hadc->Instance==ADC2)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a3b      	ldr	r2, [pc, #236]	@ (8003060 <HAL_ADC_MspInit+0x1dc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d162      	bne.n	800303e <HAL_ADC_MspInit+0x1ba>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f78:	4b34      	ldr	r3, [pc, #208]	@ (800304c <HAL_ADC_MspInit+0x1c8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	4a33      	ldr	r2, [pc, #204]	@ (800304c <HAL_ADC_MspInit+0x1c8>)
 8002f80:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f82:	4b32      	ldr	r3, [pc, #200]	@ (800304c <HAL_ADC_MspInit+0x1c8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d10e      	bne.n	8002fa8 <HAL_ADC_MspInit+0x124>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002f8a:	4b31      	ldr	r3, [pc, #196]	@ (8003050 <HAL_ADC_MspInit+0x1cc>)
 8002f8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f90:	4a2f      	ldr	r2, [pc, #188]	@ (8003050 <HAL_ADC_MspInit+0x1cc>)
 8002f92:	f043 0320 	orr.w	r3, r3, #32
 8002f96:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003050 <HAL_ADC_MspInit+0x1cc>)
 8002f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa8:	4b29      	ldr	r3, [pc, #164]	@ (8003050 <HAL_ADC_MspInit+0x1cc>)
 8002faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fae:	4a28      	ldr	r2, [pc, #160]	@ (8003050 <HAL_ADC_MspInit+0x1cc>)
 8002fb0:	f043 0304 	orr.w	r3, r3, #4
 8002fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fb8:	4b25      	ldr	r3, [pc, #148]	@ (8003050 <HAL_ADC_MspInit+0x1cc>)
 8002fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fc6:	2310      	movs	r3, #16
 8002fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd2:	f107 031c 	add.w	r3, r7, #28
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4822      	ldr	r0, [pc, #136]	@ (8003064 <HAL_ADC_MspInit+0x1e0>)
 8002fda:	f006 fe87 	bl	8009cec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8002fde:	4b22      	ldr	r3, [pc, #136]	@ (8003068 <HAL_ADC_MspInit+0x1e4>)
 8002fe0:	4a22      	ldr	r2, [pc, #136]	@ (800306c <HAL_ADC_MspInit+0x1e8>)
 8002fe2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002fe4:	4b20      	ldr	r3, [pc, #128]	@ (8003068 <HAL_ADC_MspInit+0x1e4>)
 8002fe6:	220a      	movs	r2, #10
 8002fe8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fea:	4b1f      	ldr	r3, [pc, #124]	@ (8003068 <HAL_ADC_MspInit+0x1e4>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8003068 <HAL_ADC_MspInit+0x1e4>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8003068 <HAL_ADC_MspInit+0x1e4>)
 8002ff8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ffc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <HAL_ADC_MspInit+0x1e4>)
 8003000:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003004:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003006:	4b18      	ldr	r3, [pc, #96]	@ (8003068 <HAL_ADC_MspInit+0x1e4>)
 8003008:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800300c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800300e:	4b16      	ldr	r3, [pc, #88]	@ (8003068 <HAL_ADC_MspInit+0x1e4>)
 8003010:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003014:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003016:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <HAL_ADC_MspInit+0x1e4>)
 8003018:	2200      	movs	r2, #0
 800301a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800301c:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <HAL_ADC_MspInit+0x1e4>)
 800301e:	2200      	movs	r2, #0
 8003020:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003022:	4811      	ldr	r0, [pc, #68]	@ (8003068 <HAL_ADC_MspInit+0x1e4>)
 8003024:	f004 fa70 	bl	8007508 <HAL_DMA_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 800302e:	f7ff fe9f 	bl	8002d70 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a0c      	ldr	r2, [pc, #48]	@ (8003068 <HAL_ADC_MspInit+0x1e4>)
 8003036:	659a      	str	r2, [r3, #88]	@ 0x58
 8003038:	4a0b      	ldr	r2, [pc, #44]	@ (8003068 <HAL_ADC_MspInit+0x1e4>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800303e:	bf00      	nop
 8003040:	3730      	adds	r7, #48	@ 0x30
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40022000 	.word	0x40022000
 800304c:	2400b300 	.word	0x2400b300
 8003050:	58024400 	.word	0x58024400
 8003054:	58020000 	.word	0x58020000
 8003058:	2400b148 	.word	0x2400b148
 800305c:	40020010 	.word	0x40020010
 8003060:	40022100 	.word	0x40022100
 8003064:	58020800 	.word	0x58020800
 8003068:	2400b1c0 	.word	0x2400b1c0
 800306c:	40020028 	.word	0x40020028

08003070 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	@ 0x28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 0314 	add.w	r3, r7, #20
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1c      	ldr	r2, [pc, #112]	@ (8003100 <HAL_DAC_MspInit+0x90>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d131      	bne.n	80030f6 <HAL_DAC_MspInit+0x86>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003092:	4b1c      	ldr	r3, [pc, #112]	@ (8003104 <HAL_DAC_MspInit+0x94>)
 8003094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003098:	4a1a      	ldr	r2, [pc, #104]	@ (8003104 <HAL_DAC_MspInit+0x94>)
 800309a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800309e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030a2:	4b18      	ldr	r3, [pc, #96]	@ (8003104 <HAL_DAC_MspInit+0x94>)
 80030a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b0:	4b14      	ldr	r3, [pc, #80]	@ (8003104 <HAL_DAC_MspInit+0x94>)
 80030b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030b6:	4a13      	ldr	r2, [pc, #76]	@ (8003104 <HAL_DAC_MspInit+0x94>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030c0:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <HAL_DAC_MspInit+0x94>)
 80030c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80030ce:	2330      	movs	r3, #48	@ 0x30
 80030d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030d2:	2303      	movs	r3, #3
 80030d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	4619      	mov	r1, r3
 80030e0:	4809      	ldr	r0, [pc, #36]	@ (8003108 <HAL_DAC_MspInit+0x98>)
 80030e2:	f006 fe03 	bl	8009cec <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2100      	movs	r1, #0
 80030ea:	2036      	movs	r0, #54	@ 0x36
 80030ec:	f003 fff7 	bl	80070de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80030f0:	2036      	movs	r0, #54	@ 0x36
 80030f2:	f004 f80e 	bl	8007112 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 80030f6:	bf00      	nop
 80030f8:	3728      	adds	r7, #40	@ 0x28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40007400 	.word	0x40007400
 8003104:	58024400 	.word	0x58024400
 8003108:	58020000 	.word	0x58020000

0800310c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08c      	sub	sp, #48	@ 0x30
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 031c 	add.w	r3, r7, #28
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a3d      	ldr	r2, [pc, #244]	@ (8003220 <HAL_SPI_MspInit+0x114>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d12f      	bne.n	800318e <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800312e:	4b3d      	ldr	r3, [pc, #244]	@ (8003224 <HAL_SPI_MspInit+0x118>)
 8003130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003134:	4a3b      	ldr	r2, [pc, #236]	@ (8003224 <HAL_SPI_MspInit+0x118>)
 8003136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800313a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800313e:	4b39      	ldr	r3, [pc, #228]	@ (8003224 <HAL_SPI_MspInit+0x118>)
 8003140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314c:	4b35      	ldr	r3, [pc, #212]	@ (8003224 <HAL_SPI_MspInit+0x118>)
 800314e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003152:	4a34      	ldr	r2, [pc, #208]	@ (8003224 <HAL_SPI_MspInit+0x118>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800315c:	4b31      	ldr	r3, [pc, #196]	@ (8003224 <HAL_SPI_MspInit+0x118>)
 800315e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697b      	ldr	r3, [r7, #20]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800316a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800316e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003174:	2301      	movs	r3, #1
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003178:	2303      	movs	r3, #3
 800317a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800317c:	2305      	movs	r3, #5
 800317e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003180:	f107 031c 	add.w	r3, r7, #28
 8003184:	4619      	mov	r1, r3
 8003186:	4828      	ldr	r0, [pc, #160]	@ (8003228 <HAL_SPI_MspInit+0x11c>)
 8003188:	f006 fdb0 	bl	8009cec <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 800318c:	e044      	b.n	8003218 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI4)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a26      	ldr	r2, [pc, #152]	@ (800322c <HAL_SPI_MspInit+0x120>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d13f      	bne.n	8003218 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003198:	4b22      	ldr	r3, [pc, #136]	@ (8003224 <HAL_SPI_MspInit+0x118>)
 800319a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800319e:	4a21      	ldr	r2, [pc, #132]	@ (8003224 <HAL_SPI_MspInit+0x118>)
 80031a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003224 <HAL_SPI_MspInit+0x118>)
 80031aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <HAL_SPI_MspInit+0x118>)
 80031b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031bc:	4a19      	ldr	r2, [pc, #100]	@ (8003224 <HAL_SPI_MspInit+0x118>)
 80031be:	f043 0310 	orr.w	r3, r3, #16
 80031c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031c6:	4b17      	ldr	r3, [pc, #92]	@ (8003224 <HAL_SPI_MspInit+0x118>)
 80031c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin;
 80031d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031e2:	2302      	movs	r3, #2
 80031e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80031e6:	2305      	movs	r3, #5
 80031e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 80031ea:	f107 031c 	add.w	r3, r7, #28
 80031ee:	4619      	mov	r1, r3
 80031f0:	480f      	ldr	r0, [pc, #60]	@ (8003230 <HAL_SPI_MspInit+0x124>)
 80031f2:	f006 fd7b 	bl	8009cec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_SDA_Pin;
 80031f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fc:	2302      	movs	r3, #2
 80031fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003204:	2300      	movs	r3, #0
 8003206:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003208:	2305      	movs	r3, #5
 800320a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 800320c:	f107 031c 	add.w	r3, r7, #28
 8003210:	4619      	mov	r1, r3
 8003212:	4807      	ldr	r0, [pc, #28]	@ (8003230 <HAL_SPI_MspInit+0x124>)
 8003214:	f006 fd6a 	bl	8009cec <HAL_GPIO_Init>
}
 8003218:	bf00      	nop
 800321a:	3730      	adds	r7, #48	@ 0x30
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40003800 	.word	0x40003800
 8003224:	58024400 	.word	0x58024400
 8003228:	58020400 	.word	0x58020400
 800322c:	40013400 	.word	0x40013400
 8003230:	58021000 	.word	0x58021000

08003234 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a0b      	ldr	r2, [pc, #44]	@ (8003270 <HAL_TIM_PWM_MspInit+0x3c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10e      	bne.n	8003264 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003246:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_TIM_PWM_MspInit+0x40>)
 8003248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800324c:	4a09      	ldr	r2, [pc, #36]	@ (8003274 <HAL_TIM_PWM_MspInit+0x40>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003256:	4b07      	ldr	r3, [pc, #28]	@ (8003274 <HAL_TIM_PWM_MspInit+0x40>)
 8003258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40010000 	.word	0x40010000
 8003274:	58024400 	.word	0x58024400

08003278 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003288:	d10f      	bne.n	80032aa <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800328a:	4b2d      	ldr	r3, [pc, #180]	@ (8003340 <HAL_TIM_Base_MspInit+0xc8>)
 800328c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003290:	4a2b      	ldr	r2, [pc, #172]	@ (8003340 <HAL_TIM_Base_MspInit+0xc8>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800329a:	4b29      	ldr	r3, [pc, #164]	@ (8003340 <HAL_TIM_Base_MspInit+0xc8>)
 800329c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM15_MspInit 1 */

    /* USER CODE END TIM15_MspInit 1 */
  }

}
 80032a8:	e045      	b.n	8003336 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM3)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a25      	ldr	r2, [pc, #148]	@ (8003344 <HAL_TIM_Base_MspInit+0xcc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10f      	bne.n	80032d4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032b4:	4b22      	ldr	r3, [pc, #136]	@ (8003340 <HAL_TIM_Base_MspInit+0xc8>)
 80032b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032ba:	4a21      	ldr	r2, [pc, #132]	@ (8003340 <HAL_TIM_Base_MspInit+0xc8>)
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80032c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003340 <HAL_TIM_Base_MspInit+0xc8>)
 80032c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	693b      	ldr	r3, [r7, #16]
}
 80032d2:	e030      	b.n	8003336 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM6)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003348 <HAL_TIM_Base_MspInit+0xd0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d117      	bne.n	800330e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80032de:	4b18      	ldr	r3, [pc, #96]	@ (8003340 <HAL_TIM_Base_MspInit+0xc8>)
 80032e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032e4:	4a16      	ldr	r2, [pc, #88]	@ (8003340 <HAL_TIM_Base_MspInit+0xc8>)
 80032e6:	f043 0310 	orr.w	r3, r3, #16
 80032ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80032ee:	4b14      	ldr	r3, [pc, #80]	@ (8003340 <HAL_TIM_Base_MspInit+0xc8>)
 80032f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2100      	movs	r1, #0
 8003300:	2036      	movs	r0, #54	@ 0x36
 8003302:	f003 feec 	bl	80070de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003306:	2036      	movs	r0, #54	@ 0x36
 8003308:	f003 ff03 	bl	8007112 <HAL_NVIC_EnableIRQ>
}
 800330c:	e013      	b.n	8003336 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM15)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a0e      	ldr	r2, [pc, #56]	@ (800334c <HAL_TIM_Base_MspInit+0xd4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d10e      	bne.n	8003336 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003318:	4b09      	ldr	r3, [pc, #36]	@ (8003340 <HAL_TIM_Base_MspInit+0xc8>)
 800331a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800331e:	4a08      	ldr	r2, [pc, #32]	@ (8003340 <HAL_TIM_Base_MspInit+0xc8>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003324:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003328:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <HAL_TIM_Base_MspInit+0xc8>)
 800332a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800332e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
}
 8003336:	bf00      	nop
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	58024400 	.word	0x58024400
 8003344:	40000400 	.word	0x40000400
 8003348:	40001000 	.word	0x40001000
 800334c:	40014000 	.word	0x40014000

08003350 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08e      	sub	sp, #56	@ 0x38
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a69      	ldr	r2, [pc, #420]	@ (8003514 <HAL_TIM_MspPostInit+0x1c4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d120      	bne.n	80033b4 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003372:	4b69      	ldr	r3, [pc, #420]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 8003374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003378:	4a67      	ldr	r2, [pc, #412]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 800337a:	f043 0310 	orr.w	r3, r3, #16
 800337e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003382:	4b65      	ldr	r3, [pc, #404]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 8003384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	623b      	str	r3, [r7, #32]
 800338e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = LCD_Led_Pin;
 8003390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	2302      	movs	r3, #2
 8003398:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339e:	2303      	movs	r3, #3
 80033a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033a2:	2301      	movs	r3, #1
 80033a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_Led_GPIO_Port, &GPIO_InitStruct);
 80033a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033aa:	4619      	mov	r1, r3
 80033ac:	485b      	ldr	r0, [pc, #364]	@ (800351c <HAL_TIM_MspPostInit+0x1cc>)
 80033ae:	f006 fc9d 	bl	8009cec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80033b2:	e0ab      	b.n	800350c <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033bc:	d11f      	bne.n	80033fe <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033be:	4b56      	ldr	r3, [pc, #344]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 80033c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033c4:	4a54      	ldr	r2, [pc, #336]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033ce:	4b52      	ldr	r3, [pc, #328]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 80033d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80033dc:	2307      	movs	r3, #7
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	2302      	movs	r3, #2
 80033e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e8:	2303      	movs	r3, #3
 80033ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033ec:	2301      	movs	r3, #1
 80033ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033f4:	4619      	mov	r1, r3
 80033f6:	484a      	ldr	r0, [pc, #296]	@ (8003520 <HAL_TIM_MspPostInit+0x1d0>)
 80033f8:	f006 fc78 	bl	8009cec <HAL_GPIO_Init>
}
 80033fc:	e086      	b.n	800350c <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM3)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a48      	ldr	r2, [pc, #288]	@ (8003524 <HAL_TIM_MspPostInit+0x1d4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d15d      	bne.n	80034c4 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003408:	4b43      	ldr	r3, [pc, #268]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 800340a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800340e:	4a42      	ldr	r2, [pc, #264]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003418:	4b3f      	ldr	r3, [pc, #252]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 800341a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003426:	4b3c      	ldr	r3, [pc, #240]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 8003428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800342c:	4a3a      	ldr	r2, [pc, #232]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003436:	4b38      	ldr	r3, [pc, #224]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 8003438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003444:	4b34      	ldr	r3, [pc, #208]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 8003446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800344a:	4a33      	ldr	r2, [pc, #204]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 800344c:	f043 0304 	orr.w	r3, r3, #4
 8003450:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003454:	4b30      	ldr	r3, [pc, #192]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 8003456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346a:	2300      	movs	r3, #0
 800346c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346e:	2300      	movs	r3, #0
 8003470:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003472:	2302      	movs	r3, #2
 8003474:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800347a:	4619      	mov	r1, r3
 800347c:	4828      	ldr	r0, [pc, #160]	@ (8003520 <HAL_TIM_MspPostInit+0x1d0>)
 800347e:	f006 fc35 	bl	8009cec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003482:	2301      	movs	r3, #1
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348e:	2300      	movs	r3, #0
 8003490:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003492:	2302      	movs	r3, #2
 8003494:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800349a:	4619      	mov	r1, r3
 800349c:	4822      	ldr	r0, [pc, #136]	@ (8003528 <HAL_TIM_MspPostInit+0x1d8>)
 800349e:	f006 fc25 	bl	8009cec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034a2:	2340      	movs	r3, #64	@ 0x40
 80034a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ae:	2300      	movs	r3, #0
 80034b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034b2:	2302      	movs	r3, #2
 80034b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034ba:	4619      	mov	r1, r3
 80034bc:	481b      	ldr	r0, [pc, #108]	@ (800352c <HAL_TIM_MspPostInit+0x1dc>)
 80034be:	f006 fc15 	bl	8009cec <HAL_GPIO_Init>
}
 80034c2:	e023      	b.n	800350c <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM15)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a19      	ldr	r2, [pc, #100]	@ (8003530 <HAL_TIM_MspPostInit+0x1e0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d11e      	bne.n	800350c <HAL_TIM_MspPostInit+0x1bc>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034ce:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 80034d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034d4:	4a10      	ldr	r2, [pc, #64]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 80034d6:	f043 0310 	orr.w	r3, r3, #16
 80034da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034de:	4b0e      	ldr	r3, [pc, #56]	@ (8003518 <HAL_TIM_MspPostInit+0x1c8>)
 80034e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034ec:	2320      	movs	r3, #32
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f8:	2303      	movs	r3, #3
 80034fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80034fc:	2304      	movs	r3, #4
 80034fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003504:	4619      	mov	r1, r3
 8003506:	4805      	ldr	r0, [pc, #20]	@ (800351c <HAL_TIM_MspPostInit+0x1cc>)
 8003508:	f006 fbf0 	bl	8009cec <HAL_GPIO_Init>
}
 800350c:	bf00      	nop
 800350e:	3738      	adds	r7, #56	@ 0x38
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40010000 	.word	0x40010000
 8003518:	58024400 	.word	0x58024400
 800351c:	58021000 	.word	0x58021000
 8003520:	58020000 	.word	0x58020000
 8003524:	40000400 	.word	0x40000400
 8003528:	58020400 	.word	0x58020400
 800352c:	58020800 	.word	0x58020800
 8003530:	40014000 	.word	0x40014000

08003534 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b0b8      	sub	sp, #224	@ 0xe0
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800354c:	f107 0310 	add.w	r3, r7, #16
 8003550:	22b8      	movs	r2, #184	@ 0xb8
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f017 f965 	bl	801a824 <memset>
  if(huart->Instance==USART1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a26      	ldr	r2, [pc, #152]	@ (80035f8 <HAL_UART_MspInit+0xc4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d145      	bne.n	80035f0 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003564:	f04f 0201 	mov.w	r2, #1
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003570:	2300      	movs	r3, #0
 8003572:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	4618      	mov	r0, r3
 800357c:	f009 f878 	bl	800c670 <HAL_RCCEx_PeriphCLKConfig>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003586:	f7ff fbf3 	bl	8002d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800358a:	4b1c      	ldr	r3, [pc, #112]	@ (80035fc <HAL_UART_MspInit+0xc8>)
 800358c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003590:	4a1a      	ldr	r2, [pc, #104]	@ (80035fc <HAL_UART_MspInit+0xc8>)
 8003592:	f043 0310 	orr.w	r3, r3, #16
 8003596:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800359a:	4b18      	ldr	r3, [pc, #96]	@ (80035fc <HAL_UART_MspInit+0xc8>)
 800359c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a8:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <HAL_UART_MspInit+0xc8>)
 80035aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ae:	4a13      	ldr	r2, [pc, #76]	@ (80035fc <HAL_UART_MspInit+0xc8>)
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035b8:	4b10      	ldr	r3, [pc, #64]	@ (80035fc <HAL_UART_MspInit+0xc8>)
 80035ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035c6:	23c0      	movs	r3, #192	@ 0xc0
 80035c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035cc:	2302      	movs	r3, #2
 80035ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d8:	2303      	movs	r3, #3
 80035da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035de:	2307      	movs	r3, #7
 80035e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80035e8:	4619      	mov	r1, r3
 80035ea:	4805      	ldr	r0, [pc, #20]	@ (8003600 <HAL_UART_MspInit+0xcc>)
 80035ec:	f006 fb7e 	bl	8009cec <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80035f0:	bf00      	nop
 80035f2:	37e0      	adds	r7, #224	@ 0xe0
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40011000 	.word	0x40011000
 80035fc:	58024400 	.word	0x58024400
 8003600:	58020400 	.word	0x58020400

08003604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003608:	bf00      	nop
 800360a:	e7fd      	b.n	8003608 <NMI_Handler+0x4>

0800360c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  __asm volatile(
 8003610:	f01e 0f04 	tst.w	lr, #4
 8003614:	bf0c      	ite	eq
 8003616:	f3ef 8008 	mrseq	r0, MSP
 800361a:	f3ef 8009 	mrsne	r0, PSP
 800361e:	f000 b947 	b.w	80038b0 <HardFault_Capture>
    "mrseq r0, msp         \n"
    "mrsne r0, psp         \n"
    "b HardFault_Capture   \n"
  );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003622:	bf00      	nop
 8003624:	e7fd      	b.n	8003622 <HardFault_Handler+0x16>

08003626 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800362a:	bf00      	nop
 800362c:	e7fd      	b.n	800362a <MemManage_Handler+0x4>

0800362e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800362e:	b480      	push	{r7}
 8003630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003632:	bf00      	nop
 8003634:	e7fd      	b.n	8003632 <BusFault_Handler+0x4>

08003636 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800363a:	bf00      	nop
 800363c:	e7fd      	b.n	800363a <UsageFault_Handler+0x4>

0800363e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800365a:	b480      	push	{r7}
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern volatile uint32_t systick_heartbeat; // локальное extern для совместимости
  systick_heartbeat++; // инкремент счётчика
 800366c:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <SysTick_Handler+0x18>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	4a03      	ldr	r2, [pc, #12]	@ (8003680 <SysTick_Handler+0x18>)
 8003674:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003676:	f001 fc11 	bl	8004e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	2400b260 	.word	0x2400b260

08003684 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  /* minimized: no UART in IRQ */
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003688:	4802      	ldr	r0, [pc, #8]	@ (8003694 <DMA1_Stream0_IRQHandler+0x10>)
 800368a:	f005 f81d 	bl	80086c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	2400b148 	.word	0x2400b148

08003698 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  /* minimized: no UART in IRQ */
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800369c:	4802      	ldr	r0, [pc, #8]	@ (80036a8 <DMA1_Stream1_IRQHandler+0x10>)
 800369e:	f005 f813 	bl	80086c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	2400b1c0 	.word	0x2400b1c0

080036ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036b0:	4802      	ldr	r0, [pc, #8]	@ (80036bc <TIM2_IRQHandler+0x10>)
 80036b2:	f00c fa8d 	bl	800fbd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	2400af70 	.word	0x2400af70

080036c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  /* minimized: no UART in IRQ */
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80036c4:	4803      	ldr	r0, [pc, #12]	@ (80036d4 <TIM6_DAC_IRQHandler+0x14>)
 80036c6:	f003 fd6e 	bl	80071a6 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80036ca:	4803      	ldr	r0, [pc, #12]	@ (80036d8 <TIM6_DAC_IRQHandler+0x18>)
 80036cc:	f00c fa80 	bl	800fbd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	2400b134 	.word	0x2400b134
 80036d8:	2400b008 	.word	0x2400b008

080036dc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */
  /* Счётчик вызовов ISR для диагностики */
  usb_isr_counter++;
 80036e0:	4b04      	ldr	r3, [pc, #16]	@ (80036f4 <OTG_HS_IRQHandler+0x18>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3301      	adds	r3, #1
 80036e6:	4a03      	ldr	r2, [pc, #12]	@ (80036f4 <OTG_HS_IRQHandler+0x18>)
 80036e8:	6013      	str	r3, [r2, #0]
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80036ea:	4803      	ldr	r0, [pc, #12]	@ (80036f8 <OTG_HS_IRQHandler+0x1c>)
 80036ec:	f006 fe1a 	bl	800a324 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80036f0:	bf00      	nop
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	2400b304 	.word	0x2400b304
 80036f8:	2401bcc4 	.word	0x2401bcc4

080036fc <hf_hex>:

/* USER CODE BEGIN 1 */
// Вспомогательная функция форматирования 32-битного значения в HEX (8 символов)
static void hf_hex(char *dst, uint32_t v){
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
    static const char *hx = "0123456789ABCDEF";
    for(int i=0;i<8;i++){ dst[7-i] = hx[v & 0xF]; v >>= 4; }
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	e013      	b.n	8003734 <hf_hex+0x38>
 800370c:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <hf_hex+0x54>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	441a      	add	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f1c3 0307 	rsb	r3, r3, #7
 800371e:	4619      	mov	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	440b      	add	r3, r1
 8003724:	7812      	ldrb	r2, [r2, #0]
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	603b      	str	r3, [r7, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3301      	adds	r3, #1
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b07      	cmp	r3, #7
 8003738:	dde8      	ble.n	800370c <hf_hex+0x10>
    dst[8] = 0;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3308      	adds	r3, #8
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	24000014 	.word	0x24000014

08003754 <hf_print_line>:
// Печать регистра на заданной строке: label + ':' + hex
static void hf_print_line(uint16_t y, const char *label, uint32_t val){
 8003754:	b580      	push	{r7, lr}
 8003756:	b090      	sub	sp, #64	@ 0x40
 8003758:	af02      	add	r7, sp, #8
 800375a:	4603      	mov	r3, r0
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	81fb      	strh	r3, [r7, #14]
    char buf[20];
    char hex[9];
    hf_hex(hex,val);
 8003762:	f107 0310 	add.w	r3, r7, #16
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ffc7 	bl	80036fc <hf_hex>
    // Формат: LBL:XXXXXXXX
    int i=0; while(label[i] && i<5){ buf[i]=label[i]; i++; }
 800376e:	2300      	movs	r3, #0
 8003770:	637b      	str	r3, [r7, #52]	@ 0x34
 8003772:	e00c      	b.n	800378e <hf_print_line+0x3a>
 8003774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	4413      	add	r3, r2
 800377a:	7819      	ldrb	r1, [r3, #0]
 800377c:	f107 021c 	add.w	r2, r7, #28
 8003780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003782:	4413      	add	r3, r2
 8003784:	460a      	mov	r2, r1
 8003786:	701a      	strb	r2, [r3, #0]
 8003788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378a:	3301      	adds	r3, #1
 800378c:	637b      	str	r3, [r7, #52]	@ 0x34
 800378e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	4413      	add	r3, r2
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <hf_print_line+0x4c>
 800379a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379c:	2b04      	cmp	r3, #4
 800379e:	dde9      	ble.n	8003774 <hf_print_line+0x20>
    buf[i++]=':'; for(int j=0;j<8 && i<sizeof(buf)-1;j++) buf[i++]=hex[j];
 80037a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	637a      	str	r2, [r7, #52]	@ 0x34
 80037a6:	3338      	adds	r3, #56	@ 0x38
 80037a8:	443b      	add	r3, r7
 80037aa:	223a      	movs	r2, #58	@ 0x3a
 80037ac:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80037b0:	2300      	movs	r3, #0
 80037b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80037b4:	e00e      	b.n	80037d4 <hf_print_line+0x80>
 80037b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	637a      	str	r2, [r7, #52]	@ 0x34
 80037bc:	f107 0110 	add.w	r1, r7, #16
 80037c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037c2:	440a      	add	r2, r1
 80037c4:	7812      	ldrb	r2, [r2, #0]
 80037c6:	3338      	adds	r3, #56	@ 0x38
 80037c8:	443b      	add	r3, r7
 80037ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80037ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d0:	3301      	adds	r3, #1
 80037d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80037d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d6:	2b07      	cmp	r3, #7
 80037d8:	dc02      	bgt.n	80037e0 <hf_print_line+0x8c>
 80037da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037dc:	2b12      	cmp	r3, #18
 80037de:	d9ea      	bls.n	80037b6 <hf_print_line+0x62>
    buf[i]=0;
 80037e0:	f107 021c 	add.w	r2, r7, #28
 80037e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e6:	4413      	add	r3, r2
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
    LCD_ShowString_Size(0,y,buf,12,WHITE,BLACK);
 80037ec:	f107 021c 	add.w	r2, r7, #28
 80037f0:	89f9      	ldrh	r1, [r7, #14]
 80037f2:	2300      	movs	r3, #0
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	230c      	movs	r3, #12
 80037fe:	2000      	movs	r0, #0
 8003800:	f001 f862 	bl	80048c8 <LCD_ShowString_Size>
}
 8003804:	bf00      	nop
 8003806:	3738      	adds	r7, #56	@ 0x38
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HardFault_Display>:
static void HardFault_Display(void){
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af02      	add	r7, sp, #8
    // очистим область
    LCD_FillRect(0,0,160,80,BLACK);
 8003812:	2300      	movs	r3, #0
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2350      	movs	r3, #80	@ 0x50
 8003818:	22a0      	movs	r2, #160	@ 0xa0
 800381a:	2100      	movs	r1, #0
 800381c:	2000      	movs	r0, #0
 800381e:	f001 f89d 	bl	800495c <LCD_FillRect>
    LCD_ShowString_Size(0,0,"HARDFAULT",12,RED,BLACK);
 8003822:	2300      	movs	r3, #0
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	230c      	movs	r3, #12
 800382e:	4a15      	ldr	r2, [pc, #84]	@ (8003884 <HardFault_Display+0x78>)
 8003830:	2100      	movs	r1, #0
 8003832:	2000      	movs	r0, #0
 8003834:	f001 f848 	bl	80048c8 <LCD_ShowString_Size>
    hf_print_line(12,"PC",hardfault_pc);
 8003838:	4b13      	ldr	r3, [pc, #76]	@ (8003888 <HardFault_Display+0x7c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	4913      	ldr	r1, [pc, #76]	@ (800388c <HardFault_Display+0x80>)
 8003840:	200c      	movs	r0, #12
 8003842:	f7ff ff87 	bl	8003754 <hf_print_line>
    hf_print_line(24,"LR",hardfault_lr);
 8003846:	4b12      	ldr	r3, [pc, #72]	@ (8003890 <HardFault_Display+0x84>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	4911      	ldr	r1, [pc, #68]	@ (8003894 <HardFault_Display+0x88>)
 800384e:	2018      	movs	r0, #24
 8003850:	f7ff ff80 	bl	8003754 <hf_print_line>
    hf_print_line(36,"CFSR",hardfault_cfsr);
 8003854:	4b10      	ldr	r3, [pc, #64]	@ (8003898 <HardFault_Display+0x8c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	4910      	ldr	r1, [pc, #64]	@ (800389c <HardFault_Display+0x90>)
 800385c:	2024      	movs	r0, #36	@ 0x24
 800385e:	f7ff ff79 	bl	8003754 <hf_print_line>
    hf_print_line(48,"BFAR",hardfault_bfar);
 8003862:	4b0f      	ldr	r3, [pc, #60]	@ (80038a0 <HardFault_Display+0x94>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	490e      	ldr	r1, [pc, #56]	@ (80038a4 <HardFault_Display+0x98>)
 800386a:	2030      	movs	r0, #48	@ 0x30
 800386c:	f7ff ff72 	bl	8003754 <hf_print_line>
    hf_print_line(60,"HFSR",hardfault_hfsr);
 8003870:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <HardFault_Display+0x9c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	490d      	ldr	r1, [pc, #52]	@ (80038ac <HardFault_Display+0xa0>)
 8003878:	203c      	movs	r0, #60	@ 0x3c
 800387a:	f7ff ff6b 	bl	8003754 <hf_print_line>
}
 800387e:	bf00      	nop
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	0801c134 	.word	0x0801c134
 8003888:	2400b320 	.word	0x2400b320
 800388c:	0801c140 	.word	0x0801c140
 8003890:	2400b31c 	.word	0x2400b31c
 8003894:	0801c144 	.word	0x0801c144
 8003898:	2400b328 	.word	0x2400b328
 800389c:	0801c148 	.word	0x0801c148
 80038a0:	2400b330 	.word	0x2400b330
 80038a4:	0801c150 	.word	0x0801c150
 80038a8:	2400b32c 	.word	0x2400b32c
 80038ac:	0801c158 	.word	0x0801c158

080038b0 <HardFault_Capture>:
// Реализация захвата контекста HardFault
void HardFault_Capture(uint32_t *stack_addr)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  hardfault_r0  = stack_addr[0];
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a21      	ldr	r2, [pc, #132]	@ (8003944 <HardFault_Capture+0x94>)
 80038be:	6013      	str	r3, [r2, #0]
  hardfault_r1  = stack_addr[1];
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4a20      	ldr	r2, [pc, #128]	@ (8003948 <HardFault_Capture+0x98>)
 80038c6:	6013      	str	r3, [r2, #0]
  hardfault_r2  = stack_addr[2];
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a1f      	ldr	r2, [pc, #124]	@ (800394c <HardFault_Capture+0x9c>)
 80038ce:	6013      	str	r3, [r2, #0]
  hardfault_r3  = stack_addr[3];
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003950 <HardFault_Capture+0xa0>)
 80038d6:	6013      	str	r3, [r2, #0]
  hardfault_r12 = stack_addr[4];
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003954 <HardFault_Capture+0xa4>)
 80038de:	6013      	str	r3, [r2, #0]
  hardfault_lr  = stack_addr[5];
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003958 <HardFault_Capture+0xa8>)
 80038e6:	6013      	str	r3, [r2, #0]
  hardfault_pc  = stack_addr[6];
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	4a1b      	ldr	r2, [pc, #108]	@ (800395c <HardFault_Capture+0xac>)
 80038ee:	6013      	str	r3, [r2, #0]
  hardfault_psr = stack_addr[7];
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003960 <HardFault_Capture+0xb0>)
 80038f6:	6013      	str	r3, [r2, #0]
  // Чтение системных регистров Fault
  hardfault_cfsr = SCB->CFSR;
 80038f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003964 <HardFault_Capture+0xb4>)
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003968 <HardFault_Capture+0xb8>)
 80038fe:	6013      	str	r3, [r2, #0]
  hardfault_hfsr = SCB->HFSR;
 8003900:	4b18      	ldr	r3, [pc, #96]	@ (8003964 <HardFault_Capture+0xb4>)
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	4a19      	ldr	r2, [pc, #100]	@ (800396c <HardFault_Capture+0xbc>)
 8003906:	6013      	str	r3, [r2, #0]
  hardfault_bfar = SCB->BFAR;
 8003908:	4b16      	ldr	r3, [pc, #88]	@ (8003964 <HardFault_Capture+0xb4>)
 800390a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390c:	4a18      	ldr	r2, [pc, #96]	@ (8003970 <HardFault_Capture+0xc0>)
 800390e:	6013      	str	r3, [r2, #0]
  hardfault_mmfar= SCB->MMFAR;
 8003910:	4b14      	ldr	r3, [pc, #80]	@ (8003964 <HardFault_Capture+0xb4>)
 8003912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003914:	4a17      	ldr	r2, [pc, #92]	@ (8003974 <HardFault_Capture+0xc4>)
 8003916:	6013      	str	r3, [r2, #0]
  hardfault_active = 1;
 8003918:	4b17      	ldr	r3, [pc, #92]	@ (8003978 <HardFault_Capture+0xc8>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]
  // Пытаемся вывести на LCD (если инициализирован). Даже если нет — SPI просто не даст эффекта.
  HardFault_Display();
 800391e:	f7ff ff75 	bl	800380c <HardFault_Display>
  // Мигание LED для индикации HardFault
  while(1){
    HAL_GPIO_TogglePin(Led_Test_GPIO_Port, Led_Test_Pin);
 8003922:	2108      	movs	r1, #8
 8003924:	4815      	ldr	r0, [pc, #84]	@ (800397c <HardFault_Capture+0xcc>)
 8003926:	f006 fba2 	bl	800a06e <HAL_GPIO_TogglePin>
    for(volatile uint32_t d=0; d<500000; ++d){ __NOP(); }
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	e003      	b.n	8003938 <HardFault_Capture+0x88>
 8003930:	bf00      	nop
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3301      	adds	r3, #1
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a11      	ldr	r2, [pc, #68]	@ (8003980 <HardFault_Capture+0xd0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d9f7      	bls.n	8003930 <HardFault_Capture+0x80>
    HAL_GPIO_TogglePin(Led_Test_GPIO_Port, Led_Test_Pin);
 8003940:	e7ef      	b.n	8003922 <HardFault_Capture+0x72>
 8003942:	bf00      	nop
 8003944:	2400b308 	.word	0x2400b308
 8003948:	2400b30c 	.word	0x2400b30c
 800394c:	2400b310 	.word	0x2400b310
 8003950:	2400b314 	.word	0x2400b314
 8003954:	2400b318 	.word	0x2400b318
 8003958:	2400b31c 	.word	0x2400b31c
 800395c:	2400b320 	.word	0x2400b320
 8003960:	2400b324 	.word	0x2400b324
 8003964:	e000ed00 	.word	0xe000ed00
 8003968:	2400b328 	.word	0x2400b328
 800396c:	2400b32c 	.word	0x2400b32c
 8003970:	2400b330 	.word	0x2400b330
 8003974:	2400b334 	.word	0x2400b334
 8003978:	2400b338 	.word	0x2400b338
 800397c:	58021000 	.word	0x58021000
 8003980:	0007a11f 	.word	0x0007a11f

08003984 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e00a      	b.n	80039ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003996:	f3af 8000 	nop.w
 800399a:	4601      	mov	r1, r0
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	60ba      	str	r2, [r7, #8]
 80039a2:	b2ca      	uxtb	r2, r1
 80039a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	3301      	adds	r3, #1
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	dbf0      	blt.n	8003996 <_read+0x12>
  }

  return len;
 80039b4:	687b      	ldr	r3, [r7, #4]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	e009      	b.n	80039e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	60ba      	str	r2, [r7, #8]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 f80d 	bl	80039f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	3301      	adds	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	dbf1      	blt.n	80039d0 <_write+0x12>
  }
  return len;
 80039ec:	687b      	ldr	r3, [r7, #4]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <__io_putchar>:

/* Provide __io_putchar to send characters over USART1 */
int __io_putchar(int ch)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint8_t c = (uint8_t)ch;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	73fb      	strb	r3, [r7, #15]
  /* Transmit in blocking mode; small timeout is OK for logs */
  (void)HAL_UART_Transmit(&huart1, &c, 1, 10);
 8003a06:	f107 010f 	add.w	r1, r7, #15
 8003a0a:	230a      	movs	r3, #10
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	4804      	ldr	r0, [pc, #16]	@ (8003a20 <__io_putchar+0x28>)
 8003a10:	f00d fb22 	bl	8011058 <HAL_UART_Transmit>
  return ch;
 8003a14:	687b      	ldr	r3, [r7, #4]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	2400b0a0 	.word	0x2400b0a0

08003a24 <_close>:

int _close(int file)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a4c:	605a      	str	r2, [r3, #4]
  return 0;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <_isatty>:

int _isatty(int file)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a64:	2301      	movs	r3, #1
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a94:	4a14      	ldr	r2, [pc, #80]	@ (8003ae8 <_sbrk+0x5c>)
 8003a96:	4b15      	ldr	r3, [pc, #84]	@ (8003aec <_sbrk+0x60>)
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003aa0:	4b13      	ldr	r3, [pc, #76]	@ (8003af0 <_sbrk+0x64>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003aa8:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <_sbrk+0x64>)
 8003aaa:	4a12      	ldr	r2, [pc, #72]	@ (8003af4 <_sbrk+0x68>)
 8003aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aae:	4b10      	ldr	r3, [pc, #64]	@ (8003af0 <_sbrk+0x64>)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d207      	bcs.n	8003acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003abc:	f016 ff26 	bl	801a90c <__errno>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	220c      	movs	r2, #12
 8003ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aca:	e009      	b.n	8003ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003acc:	4b08      	ldr	r3, [pc, #32]	@ (8003af0 <_sbrk+0x64>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ad2:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <_sbrk+0x64>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	4a05      	ldr	r2, [pc, #20]	@ (8003af0 <_sbrk+0x64>)
 8003adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ade:	68fb      	ldr	r3, [r7, #12]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	24050000 	.word	0x24050000
 8003aec:	00000400 	.word	0x00000400
 8003af0:	2400b33c 	.word	0x2400b33c
 8003af4:	2401c5c0 	.word	0x2401c5c0

08003af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003afc:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf8 <SystemInit+0x100>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b02:	4a3d      	ldr	r2, [pc, #244]	@ (8003bf8 <SystemInit+0x100>)
 8003b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003bfc <SystemInit+0x104>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	2b06      	cmp	r3, #6
 8003b16:	d807      	bhi.n	8003b28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b18:	4b38      	ldr	r3, [pc, #224]	@ (8003bfc <SystemInit+0x104>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 030f 	bic.w	r3, r3, #15
 8003b20:	4a36      	ldr	r2, [pc, #216]	@ (8003bfc <SystemInit+0x104>)
 8003b22:	f043 0307 	orr.w	r3, r3, #7
 8003b26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003b28:	4b35      	ldr	r3, [pc, #212]	@ (8003c00 <SystemInit+0x108>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a34      	ldr	r2, [pc, #208]	@ (8003c00 <SystemInit+0x108>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b34:	4b32      	ldr	r3, [pc, #200]	@ (8003c00 <SystemInit+0x108>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003b3a:	4b31      	ldr	r3, [pc, #196]	@ (8003c00 <SystemInit+0x108>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4930      	ldr	r1, [pc, #192]	@ (8003c00 <SystemInit+0x108>)
 8003b40:	4b30      	ldr	r3, [pc, #192]	@ (8003c04 <SystemInit+0x10c>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b46:	4b2d      	ldr	r3, [pc, #180]	@ (8003bfc <SystemInit+0x104>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b52:	4b2a      	ldr	r3, [pc, #168]	@ (8003bfc <SystemInit+0x104>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 030f 	bic.w	r3, r3, #15
 8003b5a:	4a28      	ldr	r2, [pc, #160]	@ (8003bfc <SystemInit+0x104>)
 8003b5c:	f043 0307 	orr.w	r3, r3, #7
 8003b60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b62:	4b27      	ldr	r3, [pc, #156]	@ (8003c00 <SystemInit+0x108>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b68:	4b25      	ldr	r3, [pc, #148]	@ (8003c00 <SystemInit+0x108>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b6e:	4b24      	ldr	r3, [pc, #144]	@ (8003c00 <SystemInit+0x108>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b74:	4b22      	ldr	r3, [pc, #136]	@ (8003c00 <SystemInit+0x108>)
 8003b76:	4a24      	ldr	r2, [pc, #144]	@ (8003c08 <SystemInit+0x110>)
 8003b78:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b7a:	4b21      	ldr	r3, [pc, #132]	@ (8003c00 <SystemInit+0x108>)
 8003b7c:	4a23      	ldr	r2, [pc, #140]	@ (8003c0c <SystemInit+0x114>)
 8003b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003b80:	4b1f      	ldr	r3, [pc, #124]	@ (8003c00 <SystemInit+0x108>)
 8003b82:	4a23      	ldr	r2, [pc, #140]	@ (8003c10 <SystemInit+0x118>)
 8003b84:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b86:	4b1e      	ldr	r3, [pc, #120]	@ (8003c00 <SystemInit+0x108>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003c00 <SystemInit+0x108>)
 8003b8e:	4a20      	ldr	r2, [pc, #128]	@ (8003c10 <SystemInit+0x118>)
 8003b90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b92:	4b1b      	ldr	r3, [pc, #108]	@ (8003c00 <SystemInit+0x108>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003b98:	4b19      	ldr	r3, [pc, #100]	@ (8003c00 <SystemInit+0x108>)
 8003b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c10 <SystemInit+0x118>)
 8003b9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b9e:	4b18      	ldr	r3, [pc, #96]	@ (8003c00 <SystemInit+0x108>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ba4:	4b16      	ldr	r3, [pc, #88]	@ (8003c00 <SystemInit+0x108>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a15      	ldr	r2, [pc, #84]	@ (8003c00 <SystemInit+0x108>)
 8003baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003bb0:	4b13      	ldr	r3, [pc, #76]	@ (8003c00 <SystemInit+0x108>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8003bb6:	4b12      	ldr	r3, [pc, #72]	@ (8003c00 <SystemInit+0x108>)
 8003bb8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003bbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d113      	bne.n	8003bec <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c00 <SystemInit+0x108>)
 8003bc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003bca:	4a0d      	ldr	r2, [pc, #52]	@ (8003c00 <SystemInit+0x108>)
 8003bcc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003bd0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c14 <SystemInit+0x11c>)
 8003bd6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003bda:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003bdc:	4b08      	ldr	r3, [pc, #32]	@ (8003c00 <SystemInit+0x108>)
 8003bde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003be2:	4a07      	ldr	r2, [pc, #28]	@ (8003c00 <SystemInit+0x108>)
 8003be4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003be8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	e000ed00 	.word	0xe000ed00
 8003bfc:	52002000 	.word	0x52002000
 8003c00:	58024400 	.word	0x58024400
 8003c04:	eaf6ed7f 	.word	0xeaf6ed7f
 8003c08:	02020200 	.word	0x02020200
 8003c0c:	01ff0000 	.word	0x01ff0000
 8003c10:	01010280 	.word	0x01010280
 8003c14:	52004000 	.word	0x52004000

08003c18 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	@ (8003c44 <ExitRun0Mode+0x2c>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4a08      	ldr	r2, [pc, #32]	@ (8003c44 <ExitRun0Mode+0x2c>)
 8003c22:	f043 0302 	orr.w	r3, r3, #2
 8003c26:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003c28:	bf00      	nop
 8003c2a:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <ExitRun0Mode+0x2c>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f9      	beq.n	8003c2a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8003c36:	bf00      	nop
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	58024800 	.word	0x58024800

08003c48 <usb_cdc_ll_write>:
#include <stdint.h>
#include <stdbool.h>

// Простейшая блокирующая отправка. Если шина занята (USBD_BUSY) делаем короткие попытки.
// В дальнейшем можно заменить на кольцевой буфер и ISR завершения передачи.
bool usb_cdc_ll_write(const uint8_t *data, size_t len) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
    if (!data || !len) return false;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <usb_cdc_ll_write+0x16>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <usb_cdc_ll_write+0x1a>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e023      	b.n	8003caa <usb_cdc_ll_write+0x62>
    if (len > 0xFFFFu) len = 0xFFFFu; // ограничение API
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c68:	d302      	bcc.n	8003c70 <usb_cdc_ll_write+0x28>
 8003c6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c6e:	603b      	str	r3, [r7, #0]
    uint32_t t0 = HAL_GetTick();
 8003c70:	f001 f928 	bl	8004ec4 <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]
    while (1) {
        uint8_t st = CDC_Transmit_HS((uint8_t*)data, (uint16_t)len);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f015 fd9b 	bl	80197b8 <CDC_Transmit_HS>
 8003c82:	4603      	mov	r3, r0
 8003c84:	72fb      	strb	r3, [r7, #11]
        if (st == USBD_OK) return true;
 8003c86:	7afb      	ldrb	r3, [r7, #11]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <usb_cdc_ll_write+0x48>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e00c      	b.n	8003caa <usb_cdc_ll_write+0x62>
        if (st != USBD_BUSY) return false; // ошибка
 8003c90:	7afb      	ldrb	r3, [r7, #11]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d001      	beq.n	8003c9a <usb_cdc_ll_write+0x52>
 8003c96:	2300      	movs	r3, #0
 8003c98:	e007      	b.n	8003caa <usb_cdc_ll_write+0x62>
        if ((HAL_GetTick() - t0) > 10) return false; // таймаут ~10 мс
 8003c9a:	f001 f913 	bl	8004ec4 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b0a      	cmp	r3, #10
 8003ca6:	d9e6      	bls.n	8003c76 <usb_cdc_ll_write+0x2e>
 8003ca8:	2300      	movs	r3, #0
    }
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <usb_stream_send_status>:

// Внешняя низкоуровневая отправка
extern bool usb_cdc_ll_write(const uint8_t *data, size_t len);

// Локальная функция отправки статусного пакета
void usb_stream_send_status(void) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b098      	sub	sp, #96	@ 0x60
 8003cb8:	af00      	add	r7, sp, #0
    vendor_status_v1_t st; memset(&st,0,sizeof(st));
 8003cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cbe:	2234      	movs	r2, #52	@ 0x34
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f016 fdae 	bl	801a824 <memset>
    memcpy(st.sig, "STAT", 4);
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d78 <usb_stream_send_status+0xc4>)
 8003cca:	62bb      	str	r3, [r7, #40]	@ 0x28
    st.version = 1;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    st.cur_samples = g_locked_samples;
 8003cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d7c <usb_stream_send_status+0xc8>)
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t ws = g_locked_samples ? (uint16_t)(32 + 2u * g_locked_samples) : 0;
 8003cd8:	4b28      	ldr	r3, [pc, #160]	@ (8003d7c <usb_stream_send_status+0xc8>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d006      	beq.n	8003cee <usb_stream_send_status+0x3a>
 8003ce0:	4b26      	ldr	r3, [pc, #152]	@ (8003d7c <usb_stream_send_status+0xc8>)
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	3310      	adds	r3, #16
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	e000      	b.n	8003cf0 <usb_stream_send_status+0x3c>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    st.frame_bytes = ws;
 8003cf4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003cf8:	863b      	strh	r3, [r7, #48]	@ 0x30
    st.test_frames = (uint16_t)g_test_frames;
 8003cfa:	4b21      	ldr	r3, [pc, #132]	@ (8003d80 <usb_stream_send_status+0xcc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	867b      	strh	r3, [r7, #50]	@ 0x32
    st.produced_seq = g_pair_seq;
 8003d02:	4b20      	ldr	r3, [pc, #128]	@ (8003d84 <usb_stream_send_status+0xd0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	637b      	str	r3, [r7, #52]	@ 0x34
    st.sent0 = g_sent_adc0; st.sent1 = g_sent_adc1;
 8003d08:	4b1f      	ldr	r3, [pc, #124]	@ (8003d88 <usb_stream_send_status+0xd4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003d8c <usb_stream_send_status+0xd8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    st.dbg_tx_cplt = g_dbg_tx_cplt;
 8003d14:	4b1e      	ldr	r3, [pc, #120]	@ (8003d90 <usb_stream_send_status+0xdc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	643b      	str	r3, [r7, #64]	@ 0x40
    st.dbg_partial_frame_abort = g_dbg_partial_frame_abort;
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d94 <usb_stream_send_status+0xe0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	647b      	str	r3, [r7, #68]	@ 0x44
    st.dbg_size_mismatch = g_dbg_size_mismatch;
 8003d20:	4b1d      	ldr	r3, [pc, #116]	@ (8003d98 <usb_stream_send_status+0xe4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	64bb      	str	r3, [r7, #72]	@ 0x48
    adc_stream_debug_t dbg; adc_stream_get_debug(&dbg);
 8003d26:	1d3b      	adds	r3, r7, #4
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fc fd31 	bl	8000790 <adc_stream_get_debug>
    st.dma_done0 = dbg.dma_full0; st.dma_done1 = dbg.dma_full1;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	653b      	str	r3, [r7, #80]	@ 0x50
    st.frame_wr_seq_copy = dbg.frame_wr_seq;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	657b      	str	r3, [r7, #84]	@ 0x54
    st.flags_runtime = (usb_stream_cfg()->streaming?1u:0u) | (g_locked_samples?2u:0u);
 8003d3a:	f000 fa8b 	bl	8004254 <usb_stream_cfg>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <usb_stream_send_status+0x96>
 8003d46:	2201      	movs	r2, #1
 8003d48:	e000      	b.n	8003d4c <usb_stream_send_status+0x98>
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d7c <usb_stream_send_status+0xc8>)
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <usb_stream_send_status+0xa4>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e000      	b.n	8003d5a <usb_stream_send_status+0xa6>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
    usb_cdc_ll_write((uint8_t*)&st, sizeof(st));
 8003d62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d66:	2134      	movs	r1, #52	@ 0x34
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff6d 	bl	8003c48 <usb_cdc_ll_write>
}
 8003d6e:	bf00      	nop
 8003d70:	3760      	adds	r7, #96	@ 0x60
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	54415453 	.word	0x54415453
 8003d7c:	2400b344 	.word	0x2400b344
 8003d80:	2400b35c 	.word	0x2400b35c
 8003d84:	2400b340 	.word	0x2400b340
 8003d88:	2400b348 	.word	0x2400b348
 8003d8c:	2400b34c 	.word	0x2400b34c
 8003d90:	2400b358 	.word	0x2400b358
 8003d94:	2400b350 	.word	0x2400b350
 8003d98:	2400b354 	.word	0x2400b354

08003d9c <usb_stream_send_test_frame>:

// Тестовый кадр (8 сэмплов, флаги TEST+ADC0, не влияет на фиксацию)
void usb_stream_send_test_frame(void) {
 8003d9c:	b5b0      	push	{r4, r5, r7, lr}
 8003d9e:	b0b0      	sub	sp, #192	@ 0xc0
 8003da0:	af00      	add	r7, sp, #0
    uint16_t pattern[8]; for (uint16_t i=0;i<8;i++) pattern[i]=i;
 8003da2:	2300      	movs	r3, #0
 8003da4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8003da8:	e00d      	b.n	8003dc6 <usb_stream_send_test_frame+0x2a>
 8003daa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	33c0      	adds	r3, #192	@ 0xc0
 8003db2:	443b      	add	r3, r7
 8003db4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003db8:	f823 2c2c 	strh.w	r2, [r3, #-44]
 8003dbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8003dc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003dca:	2b07      	cmp	r3, #7
 8003dcc:	d9ed      	bls.n	8003daa <usb_stream_send_test_frame+0xe>
    vendor_frame_hdr_t hdr; memset(&hdr,0,sizeof(hdr));
 8003dce:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f016 fd24 	bl	801a824 <memset>
    hdr.magic = 0xA55A; hdr.version = 1; hdr.flags = (uint8_t)(VFLAG_TEST | VFLAG_ADC0);
 8003ddc:	f24a 535a 	movw	r3, #42330	@ 0xa55a
 8003de0:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8003dea:	2381      	movs	r3, #129	@ 0x81
 8003dec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    hdr.seq = 0; // seq=0 для тестового (не относится к рабочим парам)
 8003df0:	2300      	movs	r3, #0
 8003df2:	67bb      	str	r3, [r7, #120]	@ 0x78
    hdr.timestamp = HAL_GetTick();
 8003df4:	f001 f866 	bl	8004ec4 <HAL_GetTick>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    hdr.total_samples = 8;
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    // CRC
    hdr.flags |= VFLAG_CRC;
 8003e02:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003e06:	f043 0304 	orr.w	r3, r3, #4
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    hdr.crc16 = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    uint8_t buf[32 + 8*2 + 64]; // header + payload + возможный паддинг
    memcpy(buf, &hdr, sizeof(hdr));
 8003e16:	1d3c      	adds	r4, r7, #4
 8003e18:	f107 0574 	add.w	r5, r7, #116	@ 0x74
 8003e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memcpy(buf + sizeof(hdr), pattern, sizeof(pattern));
 8003e28:	1d3b      	adds	r3, r7, #4
 8003e2a:	3320      	adds	r3, #32
 8003e2c:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8003e30:	2210      	movs	r2, #16
 8003e32:	4618      	mov	r0, r3
 8003e34:	f016 fd97 	bl	801a966 <memcpy>
    // CRC16 по 30 байтам заголовка + payload
    uint16_t crc = 0xFFFFu; const uint8_t* p = buf; size_t len = 30 + sizeof(pattern);
 8003e38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e3c:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e46:	232e      	movs	r3, #46	@ 0x2e
 8003e48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    for (size_t i=0;i<len;i++){ crc ^= (uint16_t)p[i] << 8; for (int b=0;b<8;b++){ crc = (crc & 0x8000)? (uint16_t)((crc<<1)^0x1021):(uint16_t)(crc<<1); } }
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e52:	e034      	b.n	8003ebe <usb_stream_send_test_frame+0x122>
 8003e54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e5c:	4413      	add	r3, r2
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	b21b      	sxth	r3, r3
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	b21a      	sxth	r2, r3
 8003e66:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8003e6a:	4053      	eors	r3, r2
 8003e6c:	b21b      	sxth	r3, r3
 8003e6e:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 8003e72:	2300      	movs	r3, #0
 8003e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e78:	e018      	b.n	8003eac <usb_stream_send_test_frame+0x110>
 8003e7a:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	da09      	bge.n	8003e96 <usb_stream_send_test_frame+0xfa>
 8003e82:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	b21a      	sxth	r2, r3
 8003e8a:	f241 0321 	movw	r3, #4129	@ 0x1021
 8003e8e:	4053      	eors	r3, r2
 8003e90:	b21b      	sxth	r3, r3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	e003      	b.n	8003e9e <usb_stream_send_test_frame+0x102>
 8003e96:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 8003ea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003eac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003eb0:	2b07      	cmp	r3, #7
 8003eb2:	dde2      	ble.n	8003e7a <usb_stream_send_test_frame+0xde>
 8003eb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ebe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ec2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d3c4      	bcc.n	8003e54 <usb_stream_send_test_frame+0xb8>
    ((vendor_frame_hdr_t*)buf)->crc16 = crc;
 8003eca:	1d3b      	adds	r3, r7, #4
 8003ecc:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8003ed0:	83da      	strh	r2, [r3, #30]
    // Паддинг до 64
    size_t total = sizeof(hdr) + sizeof(pattern);
 8003ed2:	2330      	movs	r3, #48	@ 0x30
 8003ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    size_t pad = (64 - (total & 63u)) & 63u; if (pad) memset(buf+total,0,pad), total+=pad;
 8003ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003edc:	425b      	negs	r3, r3
 8003ede:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ee6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d010      	beq.n	8003f10 <usb_stream_send_test_frame+0x174>
 8003eee:	1d3a      	adds	r2, r7, #4
 8003ef0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f016 fc91 	bl	801a824 <memset>
 8003f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    usb_cdc_ll_write(buf, total);
 8003f10:	1d3b      	adds	r3, r7, #4
 8003f12:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fe96 	bl	8003c48 <usb_cdc_ll_write>
    g_test_frames++;
 8003f1c:	4b04      	ldr	r3, [pc, #16]	@ (8003f30 <usb_stream_send_test_frame+0x194>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3301      	adds	r3, #1
 8003f22:	4a03      	ldr	r2, [pc, #12]	@ (8003f30 <usb_stream_send_test_frame+0x194>)
 8003f24:	6013      	str	r3, [r2, #0]
}
 8003f26:	bf00      	nop
 8003f28:	37c0      	adds	r7, #192	@ 0xc0
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2400b35c 	.word	0x2400b35c

08003f34 <crc16_buf>:
static uint16_t  s_frame_samples = 0; // полное количество выборок
static uint8_t   s_next_channel_to_send = 0; // 0 -> отправим ADC0, 1 -> ADC1
static uint8_t   s_frame_active = 0;

// CRC16 helper
static uint16_t crc16_buf(const uint8_t* data, size_t len){ uint16_t crc=0xFFFFu; for(size_t i=0;i<len;i++){ crc^=(uint16_t)data[i]<<8; for(int b=0;b<8;b++){ if(crc&0x8000) crc=(uint16_t)((crc<<1)^0x1021); else crc=(uint16_t)(crc<<1);} } return crc; }
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
 8003f3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f42:	82fb      	strh	r3, [r7, #22]
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	e028      	b.n	8003f9c <crc16_buf+0x68>
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4413      	add	r3, r2
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	b21b      	sxth	r3, r3
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	b21a      	sxth	r2, r3
 8003f58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f5c:	4053      	eors	r3, r2
 8003f5e:	b21b      	sxth	r3, r3
 8003f60:	82fb      	strh	r3, [r7, #22]
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	e013      	b.n	8003f90 <crc16_buf+0x5c>
 8003f68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	da09      	bge.n	8003f84 <crc16_buf+0x50>
 8003f70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	b21a      	sxth	r2, r3
 8003f78:	f241 0321 	movw	r3, #4129	@ 0x1021
 8003f7c:	4053      	eors	r3, r2
 8003f7e:	b21b      	sxth	r3, r3
 8003f80:	82fb      	strh	r3, [r7, #22]
 8003f82:	e002      	b.n	8003f8a <crc16_buf+0x56>
 8003f84:	8afb      	ldrh	r3, [r7, #22]
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	82fb      	strh	r3, [r7, #22]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b07      	cmp	r3, #7
 8003f94:	dde8      	ble.n	8003f68 <crc16_buf+0x34>
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d3d2      	bcc.n	8003f4a <crc16_buf+0x16>
 8003fa4:	8afb      	ldrh	r3, [r7, #22]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <try_send_one_adc_frame>:

// Попытка отправить один USB кадр (один канал). Возврат 1 если отправлено.
static uint8_t try_send_one_adc_frame(void){
 8003fb4:	b5b0      	push	{r4, r5, r7, lr}
 8003fb6:	b090      	sub	sp, #64	@ 0x40
 8003fb8:	af00      	add	r7, sp, #0
    if (!s_frame_active) return 0;
 8003fba:	4b55      	ldr	r3, [pc, #340]	@ (8004110 <try_send_one_adc_frame+0x15c>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <try_send_one_adc_frame+0x12>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e0a0      	b.n	8004108 <try_send_one_adc_frame+0x154>
    uint8_t ch = s_next_channel_to_send; // 0 или 1
 8003fc6:	4b53      	ldr	r3, [pc, #332]	@ (8004114 <try_send_one_adc_frame+0x160>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    // Формируем заголовок
    vendor_frame_hdr_t hdr; memset(&hdr,0,sizeof(hdr));
 8003fce:	1d3b      	adds	r3, r7, #4
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f016 fc25 	bl	801a824 <memset>
    hdr.magic = 0xA55A; hdr.version = 1; hdr.flags = (ch==0)? VFLAG_ADC0 : VFLAG_ADC1;
 8003fda:	f24a 535a 	movw	r3, #42330	@ 0xa55a
 8003fde:	80bb      	strh	r3, [r7, #4]
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	71bb      	strb	r3, [r7, #6]
 8003fe4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <try_send_one_adc_frame+0x3c>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <try_send_one_adc_frame+0x3e>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	71fb      	strb	r3, [r7, #7]
    hdr.seq = g_pair_seq; // общий seq пары
 8003ff4:	4b48      	ldr	r3, [pc, #288]	@ (8004118 <try_send_one_adc_frame+0x164>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60bb      	str	r3, [r7, #8]
    hdr.timestamp = HAL_GetTick();
 8003ffa:	f000 ff63 	bl	8004ec4 <HAL_GetTick>
 8003ffe:	4603      	mov	r3, r0
 8004000:	60fb      	str	r3, [r7, #12]
    hdr.total_samples = s_frame_samples; // уже проверено / зафиксировано
 8004002:	4b46      	ldr	r3, [pc, #280]	@ (800411c <try_send_one_adc_frame+0x168>)
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	823b      	strh	r3, [r7, #16]
    hdr.zone_count = 0; // пока не используем зоны
 8004008:	2300      	movs	r3, #0
 800400a:	827b      	strh	r3, [r7, #18]
    // Включаем CRC
    hdr.flags |= VFLAG_CRC;
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	f043 0304 	orr.w	r3, r3, #4
 8004012:	b2db      	uxtb	r3, r3
 8004014:	71fb      	strb	r3, [r7, #7]
    hdr.crc16 = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	847b      	strh	r3, [r7, #34]	@ 0x22
    size_t payload_bytes = (size_t)s_frame_samples * 2u;
 800401a:	4b40      	ldr	r3, [pc, #256]	@ (800411c <try_send_one_adc_frame+0x168>)
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	637b      	str	r3, [r7, #52]	@ 0x34
    size_t max_needed = sizeof(hdr) + payload_bytes + 64; // +паддинг
 8004022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004024:	3360      	adds	r3, #96	@ 0x60
 8004026:	633b      	str	r3, [r7, #48]	@ 0x30
    static uint8_t txbuf[4096]; // с запасом
    if (max_needed > sizeof(txbuf)) return 0; // слишком большой (не должен происходить)
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800402e:	d901      	bls.n	8004034 <try_send_one_adc_frame+0x80>
 8004030:	2300      	movs	r3, #0
 8004032:	e069      	b.n	8004108 <try_send_one_adc_frame+0x154>
    memcpy(txbuf, &hdr, sizeof(hdr));
 8004034:	4b3a      	ldr	r3, [pc, #232]	@ (8004120 <try_send_one_adc_frame+0x16c>)
 8004036:	461d      	mov	r5, r3
 8004038:	1d3c      	adds	r4, r7, #4
 800403a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800403c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800403e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004042:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const uint16_t *src = (ch==0)? s_frame_ch0 : s_frame_ch1;
 8004046:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <try_send_one_adc_frame+0xa0>
 800404e:	4b35      	ldr	r3, [pc, #212]	@ (8004124 <try_send_one_adc_frame+0x170>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	e001      	b.n	8004058 <try_send_one_adc_frame+0xa4>
 8004054:	4b34      	ldr	r3, [pc, #208]	@ (8004128 <try_send_one_adc_frame+0x174>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(txbuf + sizeof(hdr), src, payload_bytes);
 800405a:	4b34      	ldr	r3, [pc, #208]	@ (800412c <try_send_one_adc_frame+0x178>)
 800405c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800405e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004060:	4618      	mov	r0, r3
 8004062:	f016 fc80 	bl	801a966 <memcpy>
    // CRC по 30 байтам заголовка + payload
    uint16_t crc = crc16_buf(txbuf, 30 + payload_bytes);
 8004066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004068:	331e      	adds	r3, #30
 800406a:	4619      	mov	r1, r3
 800406c:	482c      	ldr	r0, [pc, #176]	@ (8004120 <try_send_one_adc_frame+0x16c>)
 800406e:	f7ff ff61 	bl	8003f34 <crc16_buf>
 8004072:	4603      	mov	r3, r0
 8004074:	857b      	strh	r3, [r7, #42]	@ 0x2a
    ((vendor_frame_hdr_t*)txbuf)->crc16 = crc;
 8004076:	4b2a      	ldr	r3, [pc, #168]	@ (8004120 <try_send_one_adc_frame+0x16c>)
 8004078:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800407a:	83da      	strh	r2, [r3, #30]
    size_t total = sizeof(hdr) + payload_bytes;
 800407c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407e:	3320      	adds	r3, #32
 8004080:	63fb      	str	r3, [r7, #60]	@ 0x3c
    size_t pad = (64 - (total & 63u)) & 63u; if (pad){ memset(txbuf+total,0,pad); total += pad; }
 8004082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004084:	425b      	negs	r3, r3
 8004086:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <try_send_one_adc_frame+0xf6>
 8004092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004094:	4a22      	ldr	r2, [pc, #136]	@ (8004120 <try_send_one_adc_frame+0x16c>)
 8004096:	4413      	add	r3, r2
 8004098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f016 fbc1 	bl	801a824 <memset>
 80040a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a6:	4413      	add	r3, r2
 80040a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (!usb_cdc_ll_write(txbuf, total)) return 0; // endpoint занят
 80040aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040ac:	481c      	ldr	r0, [pc, #112]	@ (8004120 <try_send_one_adc_frame+0x16c>)
 80040ae:	f7ff fdcb 	bl	8003c48 <usb_cdc_ll_write>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f083 0301 	eor.w	r3, r3, #1
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <try_send_one_adc_frame+0x10e>
 80040be:	2300      	movs	r3, #0
 80040c0:	e022      	b.n	8004108 <try_send_one_adc_frame+0x154>
    // Учёт
    if (ch==0) g_sent_adc0++; else g_sent_adc1++;
 80040c2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <try_send_one_adc_frame+0x122>
 80040ca:	4b19      	ldr	r3, [pc, #100]	@ (8004130 <try_send_one_adc_frame+0x17c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3301      	adds	r3, #1
 80040d0:	4a17      	ldr	r2, [pc, #92]	@ (8004130 <try_send_one_adc_frame+0x17c>)
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	e004      	b.n	80040e0 <try_send_one_adc_frame+0x12c>
 80040d6:	4b17      	ldr	r3, [pc, #92]	@ (8004134 <try_send_one_adc_frame+0x180>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3301      	adds	r3, #1
 80040dc:	4a15      	ldr	r2, [pc, #84]	@ (8004134 <try_send_one_adc_frame+0x180>)
 80040de:	6013      	str	r3, [r2, #0]
    // Переключение или завершение пары
    if (s_next_channel_to_send == 0){ s_next_channel_to_send = 1; }
 80040e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004114 <try_send_one_adc_frame+0x160>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <try_send_one_adc_frame+0x13c>
 80040e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <try_send_one_adc_frame+0x160>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e00a      	b.n	8004106 <try_send_one_adc_frame+0x152>
    else { // пара завершена
        s_frame_active = 0; s_next_channel_to_send = 0; g_pair_seq++; }
 80040f0:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <try_send_one_adc_frame+0x15c>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	4b07      	ldr	r3, [pc, #28]	@ (8004114 <try_send_one_adc_frame+0x160>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <try_send_one_adc_frame+0x164>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3301      	adds	r3, #1
 8004102:	4a05      	ldr	r2, [pc, #20]	@ (8004118 <try_send_one_adc_frame+0x164>)
 8004104:	6013      	str	r3, [r2, #0]
    return 1;
 8004106:	2301      	movs	r3, #1
}
 8004108:	4618      	mov	r0, r3
 800410a:	3740      	adds	r7, #64	@ 0x40
 800410c:	46bd      	mov	sp, r7
 800410e:	bdb0      	pop	{r4, r5, r7, pc}
 8004110:	2400b36f 	.word	0x2400b36f
 8004114:	2400b36e 	.word	0x2400b36e
 8004118:	2400b340 	.word	0x2400b340
 800411c:	2400b36c 	.word	0x2400b36c
 8004120:	2400b370 	.word	0x2400b370
 8004124:	2400b364 	.word	0x2400b364
 8004128:	2400b368 	.word	0x2400b368
 800412c:	2400b390 	.word	0x2400b390
 8004130:	2400b348 	.word	0x2400b348
 8004134:	2400b34c 	.word	0x2400b34c

08004138 <usb_stream_service>:

// Сервис автоматической отправки (ограниченные итерации, без зависимости от main loop)
static void usb_stream_service(void) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
    if (!usb_stream_cfg()->streaming) return;
 800413e:	f000 f889 	bl	8004254 <usb_stream_cfg>
 8004142:	4603      	mov	r3, r0
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01b      	beq.n	8004182 <usb_stream_service+0x4a>
    if (g_service_lock) return; // избегаем вложенности
 800414a:	4b11      	ldr	r3, [pc, #68]	@ (8004190 <usb_stream_service+0x58>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d118      	bne.n	8004186 <usb_stream_service+0x4e>
    g_service_lock = 1;
 8004154:	4b0e      	ldr	r3, [pc, #56]	@ (8004190 <usb_stream_service+0x58>)
 8004156:	2201      	movs	r2, #1
 8004158:	701a      	strb	r2, [r3, #0]
    // Ограничим количество попыток за одно обращение, чтобы ISR были короткими
    for (uint8_t i=0; i<4; ++i) {
 800415a:	2300      	movs	r3, #0
 800415c:	71fb      	strb	r3, [r7, #7]
 800415e:	e007      	b.n	8004170 <usb_stream_service+0x38>
        if (!usb_stream_try_send_frame()) break; // либо нечего, либо endpoint занят
 8004160:	f000 f818 	bl	8004194 <usb_stream_try_send_frame>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d006      	beq.n	8004178 <usb_stream_service+0x40>
    for (uint8_t i=0; i<4; ++i) {
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	3301      	adds	r3, #1
 800416e:	71fb      	strb	r3, [r7, #7]
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d9f4      	bls.n	8004160 <usb_stream_service+0x28>
 8004176:	e000      	b.n	800417a <usb_stream_service+0x42>
        if (!usb_stream_try_send_frame()) break; // либо нечего, либо endpoint занят
 8004178:	bf00      	nop
    }
    g_service_lock = 0;
 800417a:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <usb_stream_service+0x58>)
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	e002      	b.n	8004188 <usb_stream_service+0x50>
    if (!usb_stream_cfg()->streaming) return;
 8004182:	bf00      	nop
 8004184:	e000      	b.n	8004188 <usb_stream_service+0x50>
    if (g_service_lock) return; // избегаем вложенности
 8004186:	bf00      	nop
}
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	2400b360 	.word	0x2400b360

08004194 <usb_stream_try_send_frame>:

uint8_t usb_stream_try_send_frame(void) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
    if (!usb_stream_cfg()->streaming) return 0;
 800419a:	f000 f85b 	bl	8004254 <usb_stream_cfg>
 800419e:	4603      	mov	r3, r0
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <usb_stream_try_send_frame+0x16>
 80041a6:	2300      	movs	r3, #0
 80041a8:	e041      	b.n	800422e <usb_stream_try_send_frame+0x9a>
    // Если нет активного кадра — попробуем взять новый из FIFO
    if (!s_frame_active){
 80041aa:	4b23      	ldr	r3, [pc, #140]	@ (8004238 <usb_stream_try_send_frame+0xa4>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d135      	bne.n	800421e <usb_stream_try_send_frame+0x8a>
        uint16_t *c0=NULL,*c1=NULL; uint16_t samples=0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	2300      	movs	r3, #0
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	2300      	movs	r3, #0
 80041bc:	80fb      	strh	r3, [r7, #6]
        if (!adc_get_frame(&c0,&c1,&samples)) return 0; // нет данных
 80041be:	1dba      	adds	r2, r7, #6
 80041c0:	f107 0108 	add.w	r1, r7, #8
 80041c4:	f107 030c 	add.w	r3, r7, #12
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fc fa91 	bl	80006f0 <adc_get_frame>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <usb_stream_try_send_frame+0x44>
 80041d4:	2300      	movs	r3, #0
 80041d6:	e02a      	b.n	800422e <usb_stream_try_send_frame+0x9a>
        // Фиксация размера
        if (g_locked_samples == 0){
 80041d8:	4b18      	ldr	r3, [pc, #96]	@ (800423c <usb_stream_try_send_frame+0xa8>)
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <usb_stream_try_send_frame+0x54>
            g_locked_samples = samples; // фиксируем
 80041e0:	88fa      	ldrh	r2, [r7, #6]
 80041e2:	4b16      	ldr	r3, [pc, #88]	@ (800423c <usb_stream_try_send_frame+0xa8>)
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	e00b      	b.n	8004200 <usb_stream_try_send_frame+0x6c>
        } else if (samples != g_locked_samples){
 80041e8:	88fa      	ldrh	r2, [r7, #6]
 80041ea:	4b14      	ldr	r3, [pc, #80]	@ (800423c <usb_stream_try_send_frame+0xa8>)
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d006      	beq.n	8004200 <usb_stream_try_send_frame+0x6c>
            // Несоответствие размера — отбрасываем кадр целиком
            g_dbg_size_mismatch++;
 80041f2:	4b13      	ldr	r3, [pc, #76]	@ (8004240 <usb_stream_try_send_frame+0xac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3301      	adds	r3, #1
 80041f8:	4a11      	ldr	r2, [pc, #68]	@ (8004240 <usb_stream_try_send_frame+0xac>)
 80041fa:	6013      	str	r3, [r2, #0]
            return 1; // «формально обработали» чтобы попробовать следующий
 80041fc:	2301      	movs	r3, #1
 80041fe:	e016      	b.n	800422e <usb_stream_try_send_frame+0x9a>
        }
        // Подготовка активного
        s_frame_ch0 = c0; s_frame_ch1 = c1; s_frame_samples = samples; s_frame_active = 1; s_next_channel_to_send = 0;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a10      	ldr	r2, [pc, #64]	@ (8004244 <usb_stream_try_send_frame+0xb0>)
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	4a0f      	ldr	r2, [pc, #60]	@ (8004248 <usb_stream_try_send_frame+0xb4>)
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	88fa      	ldrh	r2, [r7, #6]
 800420e:	4b0f      	ldr	r3, [pc, #60]	@ (800424c <usb_stream_try_send_frame+0xb8>)
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <usb_stream_try_send_frame+0xa4>)
 8004214:	2201      	movs	r2, #1
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	4b0d      	ldr	r3, [pc, #52]	@ (8004250 <usb_stream_try_send_frame+0xbc>)
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
    }
    // Пытаемся отправить следующий канал кадра
    if (try_send_one_adc_frame()) return 1;
 800421e:	f7ff fec9 	bl	8003fb4 <try_send_one_adc_frame>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <usb_stream_try_send_frame+0x98>
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <usb_stream_try_send_frame+0x9a>
    return 0;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	2400b36f 	.word	0x2400b36f
 800423c:	2400b344 	.word	0x2400b344
 8004240:	2400b354 	.word	0x2400b354
 8004244:	2400b364 	.word	0x2400b364
 8004248:	2400b368 	.word	0x2400b368
 800424c:	2400b36c 	.word	0x2400b36c
 8004250:	2400b36e 	.word	0x2400b36e

08004254 <usb_stream_cfg>:
    if (g_new_frames_flag) { g_new_frames_flag = 0; usb_stream_service(); }
}

// Глобальная конфигурация потока (доступ через usb_stream_cfg())
static usb_stream_cfg_t g_cfg = { .streaming = 0, .full_mode = 1, .profile_id = 0, .roi_offset_us = 0, .roi_length_us = 0, .seq_adc = {0,0} };
usb_stream_cfg_t* usb_stream_cfg(void) { return &g_cfg; }
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
 8004258:	4b02      	ldr	r3, [pc, #8]	@ (8004264 <usb_stream_cfg+0x10>)
 800425a:	4618      	mov	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	24000020 	.word	0x24000020

08004268 <stream_send_ack>:

// ACK/NACK helpers
static void stream_send_ack(uint8_t cmd) { uint8_t pkt[2] = { RSP_ACK, cmd }; usb_cdc_ll_write(pkt, sizeof(pkt)); }
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	71fb      	strb	r3, [r7, #7]
 8004272:	2380      	movs	r3, #128	@ 0x80
 8004274:	733b      	strb	r3, [r7, #12]
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	737b      	strb	r3, [r7, #13]
 800427a:	f107 030c 	add.w	r3, r7, #12
 800427e:	2102      	movs	r1, #2
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fce1 	bl	8003c48 <usb_cdc_ll_write>
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <stream_send_ack_param>:
void stream_send_ack_param(uint8_t cmd, uint8_t param) { uint8_t pkt[3] = { RSP_ACK, cmd, param }; usb_cdc_ll_write(pkt, sizeof(pkt)); }
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	4603      	mov	r3, r0
 8004296:	460a      	mov	r2, r1
 8004298:	71fb      	strb	r3, [r7, #7]
 800429a:	4613      	mov	r3, r2
 800429c:	71bb      	strb	r3, [r7, #6]
 800429e:	2380      	movs	r3, #128	@ 0x80
 80042a0:	733b      	strb	r3, [r7, #12]
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	737b      	strb	r3, [r7, #13]
 80042a6:	79bb      	ldrb	r3, [r7, #6]
 80042a8:	73bb      	strb	r3, [r7, #14]
 80042aa:	f107 030c 	add.w	r3, r7, #12
 80042ae:	2103      	movs	r1, #3
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fcc9 	bl	8003c48 <usb_cdc_ll_write>
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <stream_send_nack>:
static void stream_send_nack(uint8_t cmd, uint8_t code) { uint8_t pkt[3] = { RSP_NACK, cmd, code }; usb_cdc_ll_write(pkt, sizeof(pkt)); }
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	4603      	mov	r3, r0
 80042c6:	460a      	mov	r2, r1
 80042c8:	71fb      	strb	r3, [r7, #7]
 80042ca:	4613      	mov	r3, r2
 80042cc:	71bb      	strb	r3, [r7, #6]
 80042ce:	2381      	movs	r3, #129	@ 0x81
 80042d0:	733b      	strb	r3, [r7, #12]
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	737b      	strb	r3, [r7, #13]
 80042d6:	79bb      	ldrb	r3, [r7, #6]
 80042d8:	73bb      	strb	r3, [r7, #14]
 80042da:	f107 030c 	add.w	r3, r7, #12
 80042de:	2103      	movs	r1, #3
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fcb1 	bl	8003c48 <usb_cdc_ll_write>
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <usb_stream_on_rx_bytes>:

// --- Команды --- (переработанные согласно спецификации)
void usb_stream_on_rx_bytes(const uint8_t* data, size_t len) {
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
    if (!data || !len) return;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 813b 	beq.w	8004578 <usb_stream_on_rx_bytes+0x288>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8137 	beq.w	8004578 <usb_stream_on_rx_bytes+0x288>
    size_t i = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	617b      	str	r3, [r7, #20]
    while (i < len) {
 800430e:	e12d      	b.n	800456c <usb_stream_on_rx_bytes+0x27c>
        uint8_t cmd = data[i++];
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	617a      	str	r2, [r7, #20]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4413      	add	r3, r2
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	74fb      	strb	r3, [r7, #19]
        switch (cmd) {
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	3b01      	subs	r3, #1
 8004322:	2b2f      	cmp	r3, #47	@ 0x2f
 8004324:	f200 811c 	bhi.w	8004560 <usb_stream_on_rx_bytes+0x270>
 8004328:	a201      	add	r2, pc, #4	@ (adr r2, 8004330 <usb_stream_on_rx_bytes+0x40>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	080043f1 	.word	0x080043f1
 8004334:	08004561 	.word	0x08004561
 8004338:	08004561 	.word	0x08004561
 800433c:	08004561 	.word	0x08004561
 8004340:	08004561 	.word	0x08004561
 8004344:	08004561 	.word	0x08004561
 8004348:	08004561 	.word	0x08004561
 800434c:	08004561 	.word	0x08004561
 8004350:	08004561 	.word	0x08004561
 8004354:	08004561 	.word	0x08004561
 8004358:	08004561 	.word	0x08004561
 800435c:	08004561 	.word	0x08004561
 8004360:	08004561 	.word	0x08004561
 8004364:	08004561 	.word	0x08004561
 8004368:	08004561 	.word	0x08004561
 800436c:	08004561 	.word	0x08004561
 8004370:	08004561 	.word	0x08004561
 8004374:	08004561 	.word	0x08004561
 8004378:	0800446d 	.word	0x0800446d
 800437c:	080044b9 	.word	0x080044b9
 8004380:	0800450d 	.word	0x0800450d
 8004384:	08004561 	.word	0x08004561
 8004388:	08004561 	.word	0x08004561
 800438c:	08004561 	.word	0x08004561
 8004390:	08004561 	.word	0x08004561
 8004394:	08004561 	.word	0x08004561
 8004398:	08004561 	.word	0x08004561
 800439c:	08004561 	.word	0x08004561
 80043a0:	08004561 	.word	0x08004561
 80043a4:	08004561 	.word	0x08004561
 80043a8:	08004561 	.word	0x08004561
 80043ac:	080043fb 	.word	0x080043fb
 80043b0:	08004449 	.word	0x08004449
 80043b4:	08004561 	.word	0x08004561
 80043b8:	08004561 	.word	0x08004561
 80043bc:	08004561 	.word	0x08004561
 80043c0:	08004561 	.word	0x08004561
 80043c4:	08004561 	.word	0x08004561
 80043c8:	08004561 	.word	0x08004561
 80043cc:	08004561 	.word	0x08004561
 80043d0:	08004561 	.word	0x08004561
 80043d4:	08004561 	.word	0x08004561
 80043d8:	08004561 	.word	0x08004561
 80043dc:	08004561 	.word	0x08004561
 80043e0:	08004561 	.word	0x08004561
 80043e4:	08004561 	.word	0x08004561
 80043e8:	08004561 	.word	0x08004561
 80043ec:	08004467 	.word	0x08004467
            case CMD_PING: { stream_send_ack(cmd); break; }
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff ff38 	bl	8004268 <stream_send_ack>
 80043f8:	e0b8      	b.n	800456c <usb_stream_on_rx_bytes+0x27c>
            case CMD_START_STREAM: {
                // Сброс состояния
                g_pair_seq = 1; // начинаем с 1, тестовый кадр seq=0
 80043fa:	4b61      	ldr	r3, [pc, #388]	@ (8004580 <usb_stream_on_rx_bytes+0x290>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
                g_sent_adc0=g_sent_adc1=0; g_locked_samples=0;
 8004400:	4b60      	ldr	r3, [pc, #384]	@ (8004584 <usb_stream_on_rx_bytes+0x294>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	4b5f      	ldr	r3, [pc, #380]	@ (8004584 <usb_stream_on_rx_bytes+0x294>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a5f      	ldr	r2, [pc, #380]	@ (8004588 <usb_stream_on_rx_bytes+0x298>)
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b5f      	ldr	r3, [pc, #380]	@ (800458c <usb_stream_on_rx_bytes+0x29c>)
 8004410:	2200      	movs	r2, #0
 8004412:	801a      	strh	r2, [r3, #0]
                g_dbg_partial_frame_abort=0; g_dbg_size_mismatch=0; s_frame_active=0; s_next_channel_to_send=0;
 8004414:	4b5e      	ldr	r3, [pc, #376]	@ (8004590 <usb_stream_on_rx_bytes+0x2a0>)
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	4b5e      	ldr	r3, [pc, #376]	@ (8004594 <usb_stream_on_rx_bytes+0x2a4>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	4b5d      	ldr	r3, [pc, #372]	@ (8004598 <usb_stream_on_rx_bytes+0x2a8>)
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	4b5d      	ldr	r3, [pc, #372]	@ (800459c <usb_stream_on_rx_bytes+0x2ac>)
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
                usb_stream_cfg()->streaming = 1;
 800442c:	f7ff ff12 	bl	8004254 <usb_stream_cfg>
 8004430:	4603      	mov	r3, r0
 8004432:	2201      	movs	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
                usb_stream_send_test_frame();
 8004436:	f7ff fcb1 	bl	8003d9c <usb_stream_send_test_frame>
                stream_send_ack(cmd);
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff ff13 	bl	8004268 <stream_send_ack>
                // Попытка немедленной передачи если уже есть буферы
                usb_stream_service();
 8004442:	f7ff fe79 	bl	8004138 <usb_stream_service>
                break; }
 8004446:	e091      	b.n	800456c <usb_stream_on_rx_bytes+0x27c>
            case CMD_STOP_STREAM: {
                usb_stream_cfg()->streaming = 0; s_frame_active=0; // остановка
 8004448:	f7ff ff04 	bl	8004254 <usb_stream_cfg>
 800444c:	4603      	mov	r3, r0
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	4b51      	ldr	r3, [pc, #324]	@ (8004598 <usb_stream_on_rx_bytes+0x2a8>)
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
                stream_send_ack(cmd);
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff ff04 	bl	8004268 <stream_send_ack>
                usb_stream_send_status();
 8004460:	f7ff fc28 	bl	8003cb4 <usb_stream_send_status>
                break; }
 8004464:	e082      	b.n	800456c <usb_stream_on_rx_bytes+0x27c>
            case CMD_GET_STATUS: {
                usb_stream_send_status(); break; }
 8004466:	f7ff fc25 	bl	8003cb4 <usb_stream_send_status>
 800446a:	e07f      	b.n	800456c <usb_stream_on_rx_bytes+0x27c>
            case CMD_SET_FULL_MODE: {
                if (i>=len){ stream_send_nack(cmd,1); break; }
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d305      	bcc.n	8004480 <usb_stream_on_rx_bytes+0x190>
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	2101      	movs	r1, #1
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff ff20 	bl	80042be <stream_send_nack>
 800447e:	e075      	b.n	800456c <usb_stream_on_rx_bytes+0x27c>
                uint8_t m = data[i++]; usb_stream_cfg()->full_mode = m?1:0; stream_send_ack_param(cmd, usb_stream_cfg()->full_mode); break; }
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	617a      	str	r2, [r7, #20]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	747b      	strb	r3, [r7, #17]
 800448e:	7c7b      	ldrb	r3, [r7, #17]
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf14      	ite	ne
 8004494:	2301      	movne	r3, #1
 8004496:	2300      	moveq	r3, #0
 8004498:	b2dc      	uxtb	r4, r3
 800449a:	f7ff fedb 	bl	8004254 <usb_stream_cfg>
 800449e:	4603      	mov	r3, r0
 80044a0:	4622      	mov	r2, r4
 80044a2:	705a      	strb	r2, [r3, #1]
 80044a4:	f7ff fed6 	bl	8004254 <usb_stream_cfg>
 80044a8:	4603      	mov	r3, r0
 80044aa:	785a      	ldrb	r2, [r3, #1]
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff feec 	bl	800428e <stream_send_ack_param>
 80044b6:	e059      	b.n	800456c <usb_stream_on_rx_bytes+0x27c>
            case CMD_SET_PROFILE: {
                if (i>=len){ stream_send_nack(cmd,1); break; }
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d305      	bcc.n	80044cc <usb_stream_on_rx_bytes+0x1dc>
 80044c0:	7cfb      	ldrb	r3, [r7, #19]
 80044c2:	2101      	movs	r1, #1
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fefa 	bl	80042be <stream_send_nack>
 80044ca:	e04f      	b.n	800456c <usb_stream_on_rx_bytes+0x27c>
                uint8_t p = data[i++]; if (adc_stream_set_profile(p)!=0){ stream_send_nack(cmd,2); break; }
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	617a      	str	r2, [r7, #20]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	4413      	add	r3, r2
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	74bb      	strb	r3, [r7, #18]
 80044da:	7cbb      	ldrb	r3, [r7, #18]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fc f887 	bl	80005f0 <adc_stream_set_profile>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <usb_stream_on_rx_bytes+0x204>
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	2102      	movs	r1, #2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff fee6 	bl	80042be <stream_send_nack>
 80044f2:	e03b      	b.n	800456c <usb_stream_on_rx_bytes+0x27c>
                usb_stream_cfg()->profile_id = p; stream_send_ack_param(cmd,p); break; }
 80044f4:	f7ff feae 	bl	8004254 <usb_stream_cfg>
 80044f8:	4602      	mov	r2, r0
 80044fa:	7cbb      	ldrb	r3, [r7, #18]
 80044fc:	7093      	strb	r3, [r2, #2]
 80044fe:	7cba      	ldrb	r2, [r7, #18]
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fec2 	bl	800428e <stream_send_ack_param>
 800450a:	e02f      	b.n	800456c <usb_stream_on_rx_bytes+0x27c>
            case CMD_SET_ROI_US: {
                if (i+8>len){ stream_send_nack(cmd,1); i=len; break; }
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	3308      	adds	r3, #8
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d207      	bcs.n	8004526 <usb_stream_on_rx_bytes+0x236>
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2101      	movs	r1, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fecf 	bl	80042be <stream_send_nack>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e022      	b.n	800456c <usb_stream_on_rx_bytes+0x27c>
                uint32_t off_us,len_us; memcpy(&off_us,&data[i],4); memcpy(&len_us,&data[i+4],4); i+=8;
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4413      	add	r3, r2
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	3304      	adds	r3, #4
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	4413      	add	r3, r2
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60bb      	str	r3, [r7, #8]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	3308      	adds	r3, #8
 8004540:	617b      	str	r3, [r7, #20]
                usb_stream_cfg()->roi_offset_us = off_us; usb_stream_cfg()->roi_length_us = len_us; stream_send_ack(cmd); break; }
 8004542:	f7ff fe87 	bl	8004254 <usb_stream_cfg>
 8004546:	4602      	mov	r2, r0
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6053      	str	r3, [r2, #4]
 800454c:	f7ff fe82 	bl	8004254 <usb_stream_cfg>
 8004550:	4602      	mov	r2, r0
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6093      	str	r3, [r2, #8]
 8004556:	7cfb      	ldrb	r3, [r7, #19]
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fe85 	bl	8004268 <stream_send_ack>
 800455e:	e005      	b.n	800456c <usb_stream_on_rx_bytes+0x27c>
            default: { stream_send_nack(cmd,0xFF); break; }
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	21ff      	movs	r1, #255	@ 0xff
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff feaa 	bl	80042be <stream_send_nack>
 800456a:	bf00      	nop
    while (i < len) {
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	f4ff aecd 	bcc.w	8004310 <usb_stream_on_rx_bytes+0x20>
 8004576:	e000      	b.n	800457a <usb_stream_on_rx_bytes+0x28a>
    if (!data || !len) return;
 8004578:	bf00      	nop
        }
    }
}
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	bd90      	pop	{r4, r7, pc}
 8004580:	2400b340 	.word	0x2400b340
 8004584:	2400b34c 	.word	0x2400b34c
 8004588:	2400b348 	.word	0x2400b348
 800458c:	2400b344 	.word	0x2400b344
 8004590:	2400b350 	.word	0x2400b350
 8004594:	2400b354 	.word	0x2400b354
 8004598:	2400b36f 	.word	0x2400b36f
 800459c:	2400b36e 	.word	0x2400b36e

080045a0 <usb_stream_init>:

// Инициализация оставлена (profile id уже установлен в adc_stream)
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	f7fb ff62 	bl	800046c <adc_stream_get_profile>
 80045a8:	4603      	mov	r3, r0
 80045aa:	461a      	mov	r2, r3
 80045ac:	4b07      	ldr	r3, [pc, #28]	@ (80045cc <usb_stream_init+0x2c>)
 80045ae:	709a      	strb	r2, [r3, #2]
 80045b0:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <usb_stream_init+0x2c>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	4b05      	ldr	r3, [pc, #20]	@ (80045cc <usb_stream_init+0x2c>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	705a      	strb	r2, [r3, #1]
 80045bc:	4b03      	ldr	r3, [pc, #12]	@ (80045cc <usb_stream_init+0x2c>)
 80045be:	2200      	movs	r2, #0
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	4b02      	ldr	r3, [pc, #8]	@ (80045cc <usb_stream_init+0x2c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	bf00      	nop
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	24000020 	.word	0x24000020

080045d0 <vnd_testgen_try_consume_latest>:

/* Экспортируемый флаг пробуждения таска */
extern volatile uint8_t vnd_tx_kick;

int vnd_testgen_try_consume_latest(uint16_t **out_ch0, uint16_t **out_ch1, uint16_t *out_samples)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
    if(!out_ch0 || !out_ch1 || !out_samples) return 0;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <vnd_testgen_try_consume_latest+0x1e>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <vnd_testgen_try_consume_latest+0x1e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <vnd_testgen_try_consume_latest+0x22>
 80045ee:	2300      	movs	r3, #0
 80045f0:	e024      	b.n	800463c <vnd_testgen_try_consume_latest+0x6c>
    uint32_t current = s_test_frame_counter;
 80045f2:	4b14      	ldr	r3, [pc, #80]	@ (8004644 <vnd_testgen_try_consume_latest+0x74>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	613b      	str	r3, [r7, #16]
    if(current == s_test_frame_consumed){ return 0; }
 80045f8:	4b13      	ldr	r3, [pc, #76]	@ (8004648 <vnd_testgen_try_consume_latest+0x78>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d101      	bne.n	8004606 <vnd_testgen_try_consume_latest+0x36>
 8004602:	2300      	movs	r3, #0
 8004604:	e01a      	b.n	800463c <vnd_testgen_try_consume_latest+0x6c>
    s_test_frame_consumed = current; /* last-buffer-wins */
 8004606:	4a10      	ldr	r2, [pc, #64]	@ (8004648 <vnd_testgen_try_consume_latest+0x78>)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	6013      	str	r3, [r2, #0]
    *out_ch0 = (uint16_t*)s_test_buf0;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a0f      	ldr	r2, [pc, #60]	@ (800464c <vnd_testgen_try_consume_latest+0x7c>)
 8004610:	601a      	str	r2, [r3, #0]
    *out_ch1 = (uint16_t*)s_test_buf1;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4a0e      	ldr	r2, [pc, #56]	@ (8004650 <vnd_testgen_try_consume_latest+0x80>)
 8004616:	601a      	str	r2, [r3, #0]
    uint16_t act = adc_stream_get_active_samples();
 8004618:	f7fb ff34 	bl	8000484 <adc_stream_get_active_samples>
 800461c:	4603      	mov	r3, r0
 800461e:	82fb      	strh	r3, [r7, #22]
    if(act == 0 || act > VND_MAX_SAMPLES) act = VND_FULL_DEFAULT_SAMPLES;
 8004620:	8afb      	ldrh	r3, [r7, #22]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <vnd_testgen_try_consume_latest+0x5e>
 8004626:	8afb      	ldrh	r3, [r7, #22]
 8004628:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 800462c:	d902      	bls.n	8004634 <vnd_testgen_try_consume_latest+0x64>
 800462e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004632:	82fb      	strh	r3, [r7, #22]
    *out_samples = act;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8afa      	ldrh	r2, [r7, #22]
 8004638:	801a      	strh	r2, [r3, #0]
    return 1;
 800463a:	2301      	movs	r3, #1
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	2400d8b0 	.word	0x2400d8b0
 8004648:	2400d8b4 	.word	0x2400d8b4
 800464c:	2400c370 	.word	0x2400c370
 8004650:	2400ce10 	.word	0x2400ce10

08004654 <vnd_generate_test_sawtooth>:

void vnd_generate_test_sawtooth(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
    /* Выбор числа сэмплов: в тестовом режиме берём активное значение/дефолт */
    uint16_t samples = adc_stream_get_active_samples();
 800465a:	f7fb ff13 	bl	8000484 <adc_stream_get_active_samples>
 800465e:	4603      	mov	r3, r0
 8004660:	80fb      	strh	r3, [r7, #6]
    if(samples == 0 || samples > VND_MAX_SAMPLES) samples = VND_FULL_DEFAULT_SAMPLES;
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <vnd_generate_test_sawtooth+0x1c>
 8004668:	88fb      	ldrh	r3, [r7, #6]
 800466a:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 800466e:	d902      	bls.n	8004676 <vnd_generate_test_sawtooth+0x22>
 8004670:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004674:	80fb      	strh	r3, [r7, #6]

    /* Последовательность проверки: счёт 1..N в каждом канале */
    for(uint16_t i = 0; i < samples; i++){
 8004676:	2300      	movs	r3, #0
 8004678:	80bb      	strh	r3, [r7, #4]
 800467a:	e010      	b.n	800469e <vnd_generate_test_sawtooth+0x4a>
        int16_t v = (int16_t)(i + 1); /* 1..N */
 800467c:	88bb      	ldrh	r3, [r7, #4]
 800467e:	3301      	adds	r3, #1
 8004680:	b29b      	uxth	r3, r3
 8004682:	807b      	strh	r3, [r7, #2]
        s_test_buf0[i] = v;
 8004684:	88bb      	ldrh	r3, [r7, #4]
 8004686:	490e      	ldr	r1, [pc, #56]	@ (80046c0 <vnd_generate_test_sawtooth+0x6c>)
 8004688:	887a      	ldrh	r2, [r7, #2]
 800468a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        s_test_buf1[i] = v;
 800468e:	88bb      	ldrh	r3, [r7, #4]
 8004690:	490c      	ldr	r1, [pc, #48]	@ (80046c4 <vnd_generate_test_sawtooth+0x70>)
 8004692:	887a      	ldrh	r2, [r7, #2]
 8004694:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint16_t i = 0; i < samples; i++){
 8004698:	88bb      	ldrh	r3, [r7, #4]
 800469a:	3301      	adds	r3, #1
 800469c:	80bb      	strh	r3, [r7, #4]
 800469e:	88ba      	ldrh	r2, [r7, #4]
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d3ea      	bcc.n	800467c <vnd_generate_test_sawtooth+0x28>
    }
    /* Фаза не используется в этом режиме — оставлена для совместимости */

    s_test_frame_counter++;
 80046a6:	4b08      	ldr	r3, [pc, #32]	@ (80046c8 <vnd_generate_test_sawtooth+0x74>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	4a06      	ldr	r2, [pc, #24]	@ (80046c8 <vnd_generate_test_sawtooth+0x74>)
 80046ae:	6013      	str	r3, [r2, #0]
    vnd_tx_kick = 1; /* разбудить пайплайн */
 80046b0:	4b06      	ldr	r3, [pc, #24]	@ (80046cc <vnd_generate_test_sawtooth+0x78>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	701a      	strb	r2, [r3, #0]
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	2400c370 	.word	0x2400c370
 80046c4:	2400ce10 	.word	0x2400ce10
 80046c8:	2400d8b0 	.word	0x2400d8b0
 80046cc:	2400dc50 	.word	0x2400dc50

080046d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set initial stack */
 80046d0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800470c <Reset_Handler+0x3c>
  bl  ExitRun0Mode        /* (generated by CubeMX) configure supply if needed */
 80046d4:	f7ff faa0 	bl	8003c18 <ExitRun0Mode>
  bl  SystemInit          /* CMSIS system clock init */
 80046d8:	f7ff fa0e 	bl	8003af8 <SystemInit>
/* Copy .data from flash to SRAM */
  ldr r0, =_sidata        /* flash source */
 80046dc:	480c      	ldr	r0, [pc, #48]	@ (8004710 <Reset_Handler+0x40>)
  ldr r1, =_sdata         /* ram destination start */
 80046de:	490d      	ldr	r1, [pc, #52]	@ (8004714 <Reset_Handler+0x44>)
  ldr r2, =_edata         /* ram destination end */
 80046e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004718 <Reset_Handler+0x48>)
1: cmp r1, r2
 80046e2:	4291      	cmp	r1, r2
  ittt lt
 80046e4:	bfbe      	ittt	lt
  ldrlt r3, [r0], #4
 80046e6:	f850 3b04 	ldrlt.w	r3, [r0], #4
  strlt r3, [r1], #4
 80046ea:	f841 3b04 	strlt.w	r3, [r1], #4
  blt 1b
 80046ee:	e7f8      	blt.n	80046e2 <Reset_Handler+0x12>
/* Zero .bss */
  ldr r0, =_sbss
 80046f0:	480a      	ldr	r0, [pc, #40]	@ (800471c <Reset_Handler+0x4c>)
  ldr r1, =_ebss
 80046f2:	490b      	ldr	r1, [pc, #44]	@ (8004720 <Reset_Handler+0x50>)
  movs r2, #0
 80046f4:	2200      	movs	r2, #0
2: cmp r0, r1
 80046f6:	4288      	cmp	r0, r1
  itt lt
 80046f8:	bfbc      	itt	lt
  strlt r2, [r0], #4
 80046fa:	f840 2b04 	strlt.w	r2, [r0], #4
  blt 2b
 80046fe:	e7fa      	blt.n	80046f6 <Reset_Handler+0x26>
/* C/C++ runtime init */
  bl __libc_init_array
 8004700:	f016 f90a 	bl	801a918 <__libc_init_array>
/* Call main */
  bl main
 8004704:	f7fc fca0 	bl	8001048 <main>
/* If main returns, loop forever */
3: b 3b
 8004708:	e7fe      	b.n	8004708 <Reset_Handler+0x38>
 800470a:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set initial stack */
 800470c:	24050000 	.word	0x24050000
  ldr r0, =_sidata        /* flash source */
 8004710:	0801d984 	.word	0x0801d984
  ldr r1, =_sdata         /* ram destination start */
 8004714:	24000000 	.word	0x24000000
  ldr r2, =_edata         /* ram destination end */
 8004718:	240002a4 	.word	0x240002a4
  ldr r0, =_sbss
 800471c:	240002c0 	.word	0x240002c0
  ldr r1, =_ebss
 8004720:	2401c514 	.word	0x2401c514

08004724 <ADC3_IRQHandler>:
  .size  Reset_Handler, .-Reset_Handler
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004724:	e7fe      	b.n	8004724 <ADC3_IRQHandler>
	...

08004728 <LCD_Init>:
 * @brief Инициализация LCD.
 * @note Эта функция является "оберткой" и просто вызывает
 *       низкоуровневую функцию инициализации из драйвера st7735.
 */
void LCD_Init(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
	ST7735_Init();
 800472c:	f000 f9d8 	bl	8004ae0 <ST7735_Init>
    lcd_ready = 1; // сигнал готовности LCD
 8004730:	4b02      	ldr	r3, [pc, #8]	@ (800473c <LCD_Init+0x14>)
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	2400d8b8 	.word	0x2400d8b8

08004740 <LCD_DrawPoint>:
 *       Для заливки областей лучше использовать ST7735_Fill.
 * @param x, y - Координаты пикселя.
 * @param color - Цвет пикселя.
 */
void LCD_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	80fb      	strh	r3, [r7, #6]
 800474a:	460b      	mov	r3, r1
 800474c:	80bb      	strh	r3, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	807b      	strh	r3, [r7, #2]
	LCD_CS_LOW();
 8004752:	2200      	movs	r2, #0
 8004754:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004758:	480f      	ldr	r0, [pc, #60]	@ (8004798 <LCD_DrawPoint+0x58>)
 800475a:	f005 fc6f 	bl	800a03c <HAL_GPIO_WritePin>
	ST7735_AddrSet(x,y,x,y);
 800475e:	88bb      	ldrh	r3, [r7, #4]
 8004760:	88fa      	ldrh	r2, [r7, #6]
 8004762:	88b9      	ldrh	r1, [r7, #4]
 8004764:	88f8      	ldrh	r0, [r7, #6]
 8004766:	f000 fad3 	bl	8004d10 <ST7735_AddrSet>
	ST7735_WriteData(color>>8);
 800476a:	887b      	ldrh	r3, [r7, #2]
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	b29b      	uxth	r3, r3
 8004770:	b2db      	uxtb	r3, r3
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f992 	bl	8004a9c <ST7735_WriteData>
	ST7735_WriteData(color);
 8004778:	887b      	ldrh	r3, [r7, #2]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	4618      	mov	r0, r3
 800477e:	f000 f98d 	bl	8004a9c <ST7735_WriteData>
	LCD_CS_HIGH();
 8004782:	2201      	movs	r2, #1
 8004784:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004788:	4803      	ldr	r0, [pc, #12]	@ (8004798 <LCD_DrawPoint+0x58>)
 800478a:	f005 fc57 	bl	800a03c <HAL_GPIO_WritePin>
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	58021000 	.word	0x58021000

0800479c <LCD_ShowChar>:
 * @param size - Размер шрифта (12 или 16).
 * @param color - Цвет самого символа.
 * @param back_color - Цвет фона (используйте TRANSPARENT для прозрачного фона).
 */
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size, uint16_t color, uint16_t back_color)
{
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4604      	mov	r4, r0
 80047a4:	4608      	mov	r0, r1
 80047a6:	4611      	mov	r1, r2
 80047a8:	461a      	mov	r2, r3
 80047aa:	4623      	mov	r3, r4
 80047ac:	80fb      	strh	r3, [r7, #6]
 80047ae:	4603      	mov	r3, r0
 80047b0:	80bb      	strh	r3, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	70fb      	strb	r3, [r7, #3]
 80047b6:	4613      	mov	r3, r2
 80047b8:	70bb      	strb	r3, [r7, #2]
    uint8_t temp;
    uint8_t pos, t;
    uint16_t y0 = y;
 80047ba:	88bb      	ldrh	r3, [r7, #4]
 80047bc:	817b      	strh	r3, [r7, #10]
    uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);
 80047be:	78bb      	ldrb	r3, [r7, #2]
 80047c0:	08db      	lsrs	r3, r3, #3
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	78bb      	ldrb	r3, [r7, #2]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bf14      	ite	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	2300      	moveq	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	4413      	add	r3, r2
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	78bb      	ldrb	r3, [r7, #2]
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	fb12 f303 	smulbb	r3, r2, r3
 80047e6:	727b      	strb	r3, [r7, #9]

    num = num - ' ';
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	3b20      	subs	r3, #32
 80047ec:	70fb      	strb	r3, [r7, #3]
    if (num < 0 || num >= 159) return; // Проверка диапазона
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	2b9e      	cmp	r3, #158	@ 0x9e
 80047f2:	d85d      	bhi.n	80048b0 <LCD_ShowChar+0x114>
    for (pos = 0; pos < csize; pos++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	73bb      	strb	r3, [r7, #14]
 80047f8:	e055      	b.n	80048a6 <LCD_ShowChar+0x10a>
    {
        if (size == 12)
 80047fa:	78bb      	ldrb	r3, [r7, #2]
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	d10b      	bne.n	8004818 <LCD_ShowChar+0x7c>
            temp = asc2_1206[num][pos];
 8004800:	78fa      	ldrb	r2, [r7, #3]
 8004802:	7bb9      	ldrb	r1, [r7, #14]
 8004804:	482e      	ldr	r0, [pc, #184]	@ (80048c0 <LCD_ShowChar+0x124>)
 8004806:	4613      	mov	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4403      	add	r3, r0
 8004810:	440b      	add	r3, r1
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	73fb      	strb	r3, [r7, #15]
 8004816:	e00a      	b.n	800482e <LCD_ShowChar+0x92>
        else if (size == 16)
 8004818:	78bb      	ldrb	r3, [r7, #2]
 800481a:	2b10      	cmp	r3, #16
 800481c:	d14a      	bne.n	80048b4 <LCD_ShowChar+0x118>
            temp = asc2_1608[num][pos];
 800481e:	78fa      	ldrb	r2, [r7, #3]
 8004820:	7bbb      	ldrb	r3, [r7, #14]
 8004822:	4928      	ldr	r1, [pc, #160]	@ (80048c4 <LCD_ShowChar+0x128>)
 8004824:	0112      	lsls	r2, r2, #4
 8004826:	440a      	add	r2, r1
 8004828:	4413      	add	r3, r2
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	73fb      	strb	r3, [r7, #15]
        else
            return;
        for (t = 0; t < 8; t++)
 800482e:	2300      	movs	r3, #0
 8004830:	737b      	strb	r3, [r7, #13]
 8004832:	e030      	b.n	8004896 <LCD_ShowChar+0xfa>
        {
            if (temp & 0x80)
 8004834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004838:	2b00      	cmp	r3, #0
 800483a:	da06      	bge.n	800484a <LCD_ShowChar+0xae>
                LCD_DrawPoint(x, y, color);
 800483c:	8c3a      	ldrh	r2, [r7, #32]
 800483e:	88b9      	ldrh	r1, [r7, #4]
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff ff7c 	bl	8004740 <LCD_DrawPoint>
 8004848:	e00a      	b.n	8004860 <LCD_ShowChar+0xc4>
            else if (back_color != TRANSPARENT)  // Рисуем фон только если он НЕ прозрачный
 800484a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800484c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004850:	4293      	cmp	r3, r2
 8004852:	d005      	beq.n	8004860 <LCD_ShowChar+0xc4>
                LCD_DrawPoint(x, y, back_color);
 8004854:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004856:	88b9      	ldrh	r1, [r7, #4]
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ff70 	bl	8004740 <LCD_DrawPoint>
            temp <<= 1;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
            y++;
 8004866:	88bb      	ldrh	r3, [r7, #4]
 8004868:	3301      	adds	r3, #1
 800486a:	80bb      	strh	r3, [r7, #4]
            if (y >= LCD_H) return;
 800486c:	88bb      	ldrh	r3, [r7, #4]
 800486e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004870:	d822      	bhi.n	80048b8 <LCD_ShowChar+0x11c>
            if ((y - y0) == size)
 8004872:	88ba      	ldrh	r2, [r7, #4]
 8004874:	897b      	ldrh	r3, [r7, #10]
 8004876:	1ad2      	subs	r2, r2, r3
 8004878:	78bb      	ldrb	r3, [r7, #2]
 800487a:	429a      	cmp	r2, r3
 800487c:	d108      	bne.n	8004890 <LCD_ShowChar+0xf4>
            {
                y = y0;
 800487e:	897b      	ldrh	r3, [r7, #10]
 8004880:	80bb      	strh	r3, [r7, #4]
                x++;
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	3301      	adds	r3, #1
 8004886:	80fb      	strh	r3, [r7, #6]
                if (x >= LCD_W) return;
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	2b9f      	cmp	r3, #159	@ 0x9f
 800488c:	d907      	bls.n	800489e <LCD_ShowChar+0x102>
 800488e:	e014      	b.n	80048ba <LCD_ShowChar+0x11e>
        for (t = 0; t < 8; t++)
 8004890:	7b7b      	ldrb	r3, [r7, #13]
 8004892:	3301      	adds	r3, #1
 8004894:	737b      	strb	r3, [r7, #13]
 8004896:	7b7b      	ldrb	r3, [r7, #13]
 8004898:	2b07      	cmp	r3, #7
 800489a:	d9cb      	bls.n	8004834 <LCD_ShowChar+0x98>
 800489c:	e000      	b.n	80048a0 <LCD_ShowChar+0x104>
                break;
 800489e:	bf00      	nop
    for (pos = 0; pos < csize; pos++)
 80048a0:	7bbb      	ldrb	r3, [r7, #14]
 80048a2:	3301      	adds	r3, #1
 80048a4:	73bb      	strb	r3, [r7, #14]
 80048a6:	7bba      	ldrb	r2, [r7, #14]
 80048a8:	7a7b      	ldrb	r3, [r7, #9]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d3a5      	bcc.n	80047fa <LCD_ShowChar+0x5e>
 80048ae:	e004      	b.n	80048ba <LCD_ShowChar+0x11e>
    if (num < 0 || num >= 159) return; // Проверка диапазона
 80048b0:	bf00      	nop
 80048b2:	e002      	b.n	80048ba <LCD_ShowChar+0x11e>
            return;
 80048b4:	bf00      	nop
 80048b6:	e000      	b.n	80048ba <LCD_ShowChar+0x11e>
            if (y >= LCD_H) return;
 80048b8:	bf00      	nop
            }
        }
    }
}
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd90      	pop	{r4, r7, pc}
 80048c0:	0801c7ac 	.word	0x0801c7ac
 80048c4:	0801cf20 	.word	0x0801cf20

080048c8 <LCD_ShowString_Size>:
 * @param size - Размер шрифта (12 или 16).
 * @param color - Цвет текста.
 * @param back_color - Цвет фона.
 */
void LCD_ShowString_Size(uint16_t x, uint16_t y, const char *p, uint8_t size, uint16_t color, uint16_t back_color)
{
 80048c8:	b590      	push	{r4, r7, lr}
 80048ca:	b089      	sub	sp, #36	@ 0x24
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60ba      	str	r2, [r7, #8]
 80048d0:	461a      	mov	r2, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	81fb      	strh	r3, [r7, #14]
 80048d6:	460b      	mov	r3, r1
 80048d8:	81bb      	strh	r3, [r7, #12]
 80048da:	4613      	mov	r3, r2
 80048dc:	71fb      	strb	r3, [r7, #7]
    uint8_t char_width = (size == 12) ? 6 : 8;  // Ширина символа зависит от размера
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	2b0c      	cmp	r3, #12
 80048e2:	d101      	bne.n	80048e8 <LCD_ShowString_Size+0x20>
 80048e4:	2306      	movs	r3, #6
 80048e6:	e000      	b.n	80048ea <LCD_ShowString_Size+0x22>
 80048e8:	2308      	movs	r3, #8
 80048ea:	75fb      	strb	r3, [r7, #23]
    uint8_t char_height = size;                  // Высота символа равна размеру
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	75bb      	strb	r3, [r7, #22]
    
    while (*p != '\0')
 80048f0:	e02a      	b.n	8004948 <LCD_ShowString_Size+0x80>
    {
        // Проверяем, помещается ли символ на текущей строке
        if (x > (LCD_W - char_width))
 80048f2:	89fa      	ldrh	r2, [r7, #14]
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
 80048f6:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 80048fa:	429a      	cmp	r2, r3
 80048fc:	dd06      	ble.n	800490c <LCD_ShowString_Size+0x44>
        {
            x = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	81fb      	strh	r3, [r7, #14]
            y += char_height;
 8004902:	7dbb      	ldrb	r3, [r7, #22]
 8004904:	b29a      	uxth	r2, r3
 8004906:	89bb      	ldrh	r3, [r7, #12]
 8004908:	4413      	add	r3, r2
 800490a:	81bb      	strh	r3, [r7, #12]
        }
        
        // Проверяем, помещается ли строка на экране
        if (y > (LCD_H - char_height))
 800490c:	89ba      	ldrh	r2, [r7, #12]
 800490e:	7dbb      	ldrb	r3, [r7, #22]
 8004910:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8004914:	429a      	cmp	r2, r3
 8004916:	dd03      	ble.n	8004920 <LCD_ShowString_Size+0x58>
        {
            y = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	81bb      	strh	r3, [r7, #12]
            x = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	81fb      	strh	r3, [r7, #14]
        }
        
        LCD_ShowChar(x, y, *p, size, color, back_color);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	781a      	ldrb	r2, [r3, #0]
 8004924:	79fc      	ldrb	r4, [r7, #7]
 8004926:	89b9      	ldrh	r1, [r7, #12]
 8004928:	89f8      	ldrh	r0, [r7, #14]
 800492a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	4623      	mov	r3, r4
 8004934:	f7ff ff32 	bl	800479c <LCD_ShowChar>
        x += char_width;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	b29a      	uxth	r2, r3
 800493c:	89fb      	ldrh	r3, [r7, #14]
 800493e:	4413      	add	r3, r2
 8004940:	81fb      	strh	r3, [r7, #14]
        p++;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	3301      	adds	r3, #1
 8004946:	60bb      	str	r3, [r7, #8]
    while (*p != '\0')
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1d0      	bne.n	80048f2 <LCD_ShowString_Size+0x2a>
    }
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	bd90      	pop	{r4, r7, pc}
	...

0800495c <LCD_FillRect>:
 * @param x, y - Координаты верхнего левого угла.
 * @param w, h - Ширина и высота прямоугольника.
 * @param color - Цвет для заливки.
 */
void LCD_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800495c:	b590      	push	{r4, r7, lr}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	4604      	mov	r4, r0
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	461a      	mov	r2, r3
 800496a:	4623      	mov	r3, r4
 800496c:	80fb      	strh	r3, [r7, #6]
 800496e:	4603      	mov	r3, r0
 8004970:	80bb      	strh	r3, [r7, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	807b      	strh	r3, [r7, #2]
 8004976:	4613      	mov	r3, r2
 8004978:	803b      	strh	r3, [r7, #0]
    uint32_t i;
    uint32_t total_pixels = w * h;
 800497a:	887b      	ldrh	r3, [r7, #2]
 800497c:	883a      	ldrh	r2, [r7, #0]
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	60bb      	str	r3, [r7, #8]

    // Проверяем границы
    if (x >= LCD_W || y >= LCD_H) return;
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	2b9f      	cmp	r3, #159	@ 0x9f
 8004988:	d84e      	bhi.n	8004a28 <LCD_FillRect+0xcc>
 800498a:	88bb      	ldrh	r3, [r7, #4]
 800498c:	2b4f      	cmp	r3, #79	@ 0x4f
 800498e:	d84b      	bhi.n	8004a28 <LCD_FillRect+0xcc>
    if (x + w > LCD_W) w = LCD_W - x;
 8004990:	88fa      	ldrh	r2, [r7, #6]
 8004992:	887b      	ldrh	r3, [r7, #2]
 8004994:	4413      	add	r3, r2
 8004996:	2ba0      	cmp	r3, #160	@ 0xa0
 8004998:	dd03      	ble.n	80049a2 <LCD_FillRect+0x46>
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 80049a0:	807b      	strh	r3, [r7, #2]
    if (y + h > LCD_H) h = LCD_H - y;
 80049a2:	88ba      	ldrh	r2, [r7, #4]
 80049a4:	883b      	ldrh	r3, [r7, #0]
 80049a6:	4413      	add	r3, r2
 80049a8:	2b50      	cmp	r3, #80	@ 0x50
 80049aa:	dd03      	ble.n	80049b4 <LCD_FillRect+0x58>
 80049ac:	88bb      	ldrh	r3, [r7, #4]
 80049ae:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 80049b2:	803b      	strh	r3, [r7, #0]

    // Устанавливаем окно для рисования
    ST7735_AddrSet(x, y, x + w - 1, y + h - 1);
 80049b4:	88fa      	ldrh	r2, [r7, #6]
 80049b6:	887b      	ldrh	r3, [r7, #2]
 80049b8:	4413      	add	r3, r2
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29c      	uxth	r4, r3
 80049c0:	88ba      	ldrh	r2, [r7, #4]
 80049c2:	883b      	ldrh	r3, [r7, #0]
 80049c4:	4413      	add	r3, r2
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	88b9      	ldrh	r1, [r7, #4]
 80049ce:	88f8      	ldrh	r0, [r7, #6]
 80049d0:	4622      	mov	r2, r4
 80049d2:	f000 f99d 	bl	8004d10 <ST7735_AddrSet>
    
    // Теперь отправляем данные пикселей
    LCD_CS_LOW();
 80049d6:	2200      	movs	r2, #0
 80049d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80049dc:	4814      	ldr	r0, [pc, #80]	@ (8004a30 <LCD_FillRect+0xd4>)
 80049de:	f005 fb2d 	bl	800a03c <HAL_GPIO_WritePin>
    LCD_RS_HIGH(); // Режим данных
 80049e2:	2201      	movs	r2, #1
 80049e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80049e8:	4811      	ldr	r0, [pc, #68]	@ (8004a30 <LCD_FillRect+0xd4>)
 80049ea:	f005 fb27 	bl	800a03c <HAL_GPIO_WritePin>
    
    for (i = 0; i < total_pixels; i++)
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	e00e      	b.n	8004a12 <LCD_FillRect+0xb6>
    {
        ST7735_SPI_Send(color >> 8);
 80049f4:	8c3b      	ldrh	r3, [r7, #32]
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 f819 	bl	8004a34 <ST7735_SPI_Send>
        ST7735_SPI_Send(color);
 8004a02:	8c3b      	ldrh	r3, [r7, #32]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f814 	bl	8004a34 <ST7735_SPI_Send>
    for (i = 0; i < total_pixels; i++)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d3ec      	bcc.n	80049f4 <LCD_FillRect+0x98>
    }
    
    LCD_CS_HIGH();
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a20:	4803      	ldr	r0, [pc, #12]	@ (8004a30 <LCD_FillRect+0xd4>)
 8004a22:	f005 fb0b 	bl	800a03c <HAL_GPIO_WritePin>
 8004a26:	e000      	b.n	8004a2a <LCD_FillRect+0xce>
    if (x >= LCD_W || y >= LCD_H) return;
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd90      	pop	{r4, r7, pc}
 8004a30:	58021000 	.word	0x58021000

08004a34 <ST7735_SPI_Send>:
extern SPI_HandleTypeDef hspi4;

// --- Приватные функции для отправки данных по SPI ---

void ST7735_SPI_Send(uint8_t data)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	71fb      	strb	r3, [r7, #7]
    // Упрощенная версия без проверки флагов - HAL_SPI_Transmit уже содержит все необходимые проверки
    HAL_SPI_Transmit(&hspi4, &data, 1, 100);
 8004a3e:	1df9      	adds	r1, r7, #7
 8004a40:	2364      	movs	r3, #100	@ 0x64
 8004a42:	2201      	movs	r2, #1
 8004a44:	4803      	ldr	r0, [pc, #12]	@ (8004a54 <ST7735_SPI_Send+0x20>)
 8004a46:	f00a fb1d 	bl	800f084 <HAL_SPI_Transmit>
}
 8004a4a:	bf00      	nop
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2400ae9c 	.word	0x2400ae9c

08004a58 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();   // Активируем CS
 8004a62:	2200      	movs	r2, #0
 8004a64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a68:	480b      	ldr	r0, [pc, #44]	@ (8004a98 <ST7735_WriteCommand+0x40>)
 8004a6a:	f005 fae7 	bl	800a03c <HAL_GPIO_WritePin>
    LCD_RS_LOW();   // Режим команды
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a74:	4808      	ldr	r0, [pc, #32]	@ (8004a98 <ST7735_WriteCommand+0x40>)
 8004a76:	f005 fae1 	bl	800a03c <HAL_GPIO_WritePin>
    ST7735_SPI_Send(cmd);
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff ffd9 	bl	8004a34 <ST7735_SPI_Send>
    LCD_CS_HIGH();  // Деактивируем CS
 8004a82:	2201      	movs	r2, #1
 8004a84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a88:	4803      	ldr	r0, [pc, #12]	@ (8004a98 <ST7735_WriteCommand+0x40>)
 8004a8a:	f005 fad7 	bl	800a03c <HAL_GPIO_WritePin>
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	58021000 	.word	0x58021000

08004a9c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t data)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();   // Активируем CS
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004aac:	480b      	ldr	r0, [pc, #44]	@ (8004adc <ST7735_WriteData+0x40>)
 8004aae:	f005 fac5 	bl	800a03c <HAL_GPIO_WritePin>
    LCD_RS_HIGH();  // Режим данных
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ab8:	4808      	ldr	r0, [pc, #32]	@ (8004adc <ST7735_WriteData+0x40>)
 8004aba:	f005 fabf 	bl	800a03c <HAL_GPIO_WritePin>
    ST7735_SPI_Send(data);
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff ffb7 	bl	8004a34 <ST7735_SPI_Send>
    LCD_CS_HIGH();  // Деактивируем CS
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004acc:	4803      	ldr	r0, [pc, #12]	@ (8004adc <ST7735_WriteData+0x40>)
 8004ace:	f005 fab5 	bl	800a03c <HAL_GPIO_WritePin>
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	58021000 	.word	0x58021000

08004ae0 <ST7735_Init>:
/**
 * @brief Инициализирует дисплей ST7735.
 * @note Последовательность команд взята из рабочего примера WeAct.
 */
void ST7735_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
    LCD_CS_LOW();
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004aea:	4888      	ldr	r0, [pc, #544]	@ (8004d0c <ST7735_Init+0x22c>)
 8004aec:	f005 faa6 	bl	800a03c <HAL_GPIO_WritePin>
    LCD_RST_LOW();
 8004af0:	2200      	movs	r2, #0
 8004af2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004af6:	4885      	ldr	r0, [pc, #532]	@ (8004d0c <ST7735_Init+0x22c>)
 8004af8:	f005 faa0 	bl	800a03c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8004afc:	2064      	movs	r0, #100	@ 0x64
 8004afe:	f000 f9ed 	bl	8004edc <HAL_Delay>
    LCD_RST_HIGH();
 8004b02:	2201      	movs	r2, #1
 8004b04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b08:	4880      	ldr	r0, [pc, #512]	@ (8004d0c <ST7735_Init+0x22c>)
 8004b0a:	f005 fa97 	bl	800a03c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8004b0e:	2064      	movs	r0, #100	@ 0x64
 8004b10:	f000 f9e4 	bl	8004edc <HAL_Delay>

    ST7735_WriteCommand(ST7735_SWRESET); // 1: Software reset
 8004b14:	2001      	movs	r0, #1
 8004b16:	f7ff ff9f 	bl	8004a58 <ST7735_WriteCommand>
    HAL_Delay(150);
 8004b1a:	2096      	movs	r0, #150	@ 0x96
 8004b1c:	f000 f9de 	bl	8004edc <HAL_Delay>

    ST7735_WriteCommand(ST7735_SLPOUT);  // 2: Out of sleep mode
 8004b20:	2011      	movs	r0, #17
 8004b22:	f7ff ff99 	bl	8004a58 <ST7735_WriteCommand>
    HAL_Delay(255);
 8004b26:	20ff      	movs	r0, #255	@ 0xff
 8004b28:	f000 f9d8 	bl	8004edc <HAL_Delay>

    // 3: Frame rate control
    ST7735_WriteCommand(ST7735_FRMCTR1);
 8004b2c:	20b1      	movs	r0, #177	@ 0xb1
 8004b2e:	f7ff ff93 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0x01);
 8004b32:	2001      	movs	r0, #1
 8004b34:	f7ff ffb2 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 8004b38:	202c      	movs	r0, #44	@ 0x2c
 8004b3a:	f7ff ffaf 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 8004b3e:	202d      	movs	r0, #45	@ 0x2d
 8004b40:	f7ff ffac 	bl	8004a9c <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_FRMCTR2);
 8004b44:	20b2      	movs	r0, #178	@ 0xb2
 8004b46:	f7ff ff87 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0x01);
 8004b4a:	2001      	movs	r0, #1
 8004b4c:	f7ff ffa6 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 8004b50:	202c      	movs	r0, #44	@ 0x2c
 8004b52:	f7ff ffa3 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 8004b56:	202d      	movs	r0, #45	@ 0x2d
 8004b58:	f7ff ffa0 	bl	8004a9c <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_FRMCTR3);
 8004b5c:	20b3      	movs	r0, #179	@ 0xb3
 8004b5e:	f7ff ff7b 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0x01);
 8004b62:	2001      	movs	r0, #1
 8004b64:	f7ff ff9a 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 8004b68:	202c      	movs	r0, #44	@ 0x2c
 8004b6a:	f7ff ff97 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 8004b6e:	202d      	movs	r0, #45	@ 0x2d
 8004b70:	f7ff ff94 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x01);
 8004b74:	2001      	movs	r0, #1
 8004b76:	f7ff ff91 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 8004b7a:	202c      	movs	r0, #44	@ 0x2c
 8004b7c:	f7ff ff8e 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 8004b80:	202d      	movs	r0, #45	@ 0x2d
 8004b82:	f7ff ff8b 	bl	8004a9c <ST7735_WriteData>

    // 4: Display inversion control
    ST7735_WriteCommand(ST7735_INVCTR);
 8004b86:	20b4      	movs	r0, #180	@ 0xb4
 8004b88:	f7ff ff66 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0x07);
 8004b8c:	2007      	movs	r0, #7
 8004b8e:	f7ff ff85 	bl	8004a9c <ST7735_WriteData>

    // 5: Power control
    ST7735_WriteCommand(ST7735_PWCTR1);
 8004b92:	20c0      	movs	r0, #192	@ 0xc0
 8004b94:	f7ff ff60 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0xA2);
 8004b98:	20a2      	movs	r0, #162	@ 0xa2
 8004b9a:	f7ff ff7f 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x02);
 8004b9e:	2002      	movs	r0, #2
 8004ba0:	f7ff ff7c 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x84);
 8004ba4:	2084      	movs	r0, #132	@ 0x84
 8004ba6:	f7ff ff79 	bl	8004a9c <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_PWCTR2);
 8004baa:	20c1      	movs	r0, #193	@ 0xc1
 8004bac:	f7ff ff54 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0xC5);
 8004bb0:	20c5      	movs	r0, #197	@ 0xc5
 8004bb2:	f7ff ff73 	bl	8004a9c <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_PWCTR3);
 8004bb6:	20c2      	movs	r0, #194	@ 0xc2
 8004bb8:	f7ff ff4e 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0x0A);
 8004bbc:	200a      	movs	r0, #10
 8004bbe:	f7ff ff6d 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x00);
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f7ff ff6a 	bl	8004a9c <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_PWCTR4);
 8004bc8:	20c3      	movs	r0, #195	@ 0xc3
 8004bca:	f7ff ff45 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0x8A);
 8004bce:	208a      	movs	r0, #138	@ 0x8a
 8004bd0:	f7ff ff64 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2A);
 8004bd4:	202a      	movs	r0, #42	@ 0x2a
 8004bd6:	f7ff ff61 	bl	8004a9c <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_PWCTR5);
 8004bda:	20c4      	movs	r0, #196	@ 0xc4
 8004bdc:	f7ff ff3c 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0x8A);
 8004be0:	208a      	movs	r0, #138	@ 0x8a
 8004be2:	f7ff ff5b 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0xEE);
 8004be6:	20ee      	movs	r0, #238	@ 0xee
 8004be8:	f7ff ff58 	bl	8004a9c <ST7735_WriteData>

    // 6: VCOM control
    ST7735_WriteCommand(ST7735_VMCTR1);
 8004bec:	20c5      	movs	r0, #197	@ 0xc5
 8004bee:	f7ff ff33 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0x0E);
 8004bf2:	200e      	movs	r0, #14
 8004bf4:	f7ff ff52 	bl	8004a9c <ST7735_WriteData>

    // 7: Inversion on
    ST7735_WriteCommand(ST7735_INVON);
 8004bf8:	2021      	movs	r0, #33	@ 0x21
 8004bfa:	f7ff ff2d 	bl	8004a58 <ST7735_WriteCommand>

    // 8: Memory access control
    ST7735_WriteCommand(ST7735_MADCTL);
 8004bfe:	2036      	movs	r0, #54	@ 0x36
 8004c00:	f7ff ff2a 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0xA8); // Landscape rotated 180° с правильным порядком цветов (0xA0 + BGR бит)
 8004c04:	20a8      	movs	r0, #168	@ 0xa8
 8004c06:	f7ff ff49 	bl	8004a9c <ST7735_WriteData>

    // 9: Color mode
    ST7735_WriteCommand(ST7735_COLMOD);
 8004c0a:	203a      	movs	r0, #58	@ 0x3a
 8004c0c:	f7ff ff24 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0x05); // 16-bit color
 8004c10:	2005      	movs	r0, #5
 8004c12:	f7ff ff43 	bl	8004a9c <ST7735_WriteData>

    // 10: Gamma correction
    ST7735_WriteCommand(ST7735_GMCTRP1);
 8004c16:	20e0      	movs	r0, #224	@ 0xe0
 8004c18:	f7ff ff1e 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0x02);
 8004c1c:	2002      	movs	r0, #2
 8004c1e:	f7ff ff3d 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x1c);
 8004c22:	201c      	movs	r0, #28
 8004c24:	f7ff ff3a 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x07);
 8004c28:	2007      	movs	r0, #7
 8004c2a:	f7ff ff37 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x12);
 8004c2e:	2012      	movs	r0, #18
 8004c30:	f7ff ff34 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x37);
 8004c34:	2037      	movs	r0, #55	@ 0x37
 8004c36:	f7ff ff31 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x32);
 8004c3a:	2032      	movs	r0, #50	@ 0x32
 8004c3c:	f7ff ff2e 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x29);
 8004c40:	2029      	movs	r0, #41	@ 0x29
 8004c42:	f7ff ff2b 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2d);
 8004c46:	202d      	movs	r0, #45	@ 0x2d
 8004c48:	f7ff ff28 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x29);
 8004c4c:	2029      	movs	r0, #41	@ 0x29
 8004c4e:	f7ff ff25 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x25);
 8004c52:	2025      	movs	r0, #37	@ 0x25
 8004c54:	f7ff ff22 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2B);
 8004c58:	202b      	movs	r0, #43	@ 0x2b
 8004c5a:	f7ff ff1f 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x39);
 8004c5e:	2039      	movs	r0, #57	@ 0x39
 8004c60:	f7ff ff1c 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x00);
 8004c64:	2000      	movs	r0, #0
 8004c66:	f7ff ff19 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x01);
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	f7ff ff16 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x03);
 8004c70:	2003      	movs	r0, #3
 8004c72:	f7ff ff13 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x10);
 8004c76:	2010      	movs	r0, #16
 8004c78:	f7ff ff10 	bl	8004a9c <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_GMCTRN1);
 8004c7c:	20e1      	movs	r0, #225	@ 0xe1
 8004c7e:	f7ff feeb 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData(0x03);
 8004c82:	2003      	movs	r0, #3
 8004c84:	f7ff ff0a 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x1d);
 8004c88:	201d      	movs	r0, #29
 8004c8a:	f7ff ff07 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x07);
 8004c8e:	2007      	movs	r0, #7
 8004c90:	f7ff ff04 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x06);
 8004c94:	2006      	movs	r0, #6
 8004c96:	f7ff ff01 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2E);
 8004c9a:	202e      	movs	r0, #46	@ 0x2e
 8004c9c:	f7ff fefe 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2C);
 8004ca0:	202c      	movs	r0, #44	@ 0x2c
 8004ca2:	f7ff fefb 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x29);
 8004ca6:	2029      	movs	r0, #41	@ 0x29
 8004ca8:	f7ff fef8 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2D);
 8004cac:	202d      	movs	r0, #45	@ 0x2d
 8004cae:	f7ff fef5 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2E);
 8004cb2:	202e      	movs	r0, #46	@ 0x2e
 8004cb4:	f7ff fef2 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x2E);
 8004cb8:	202e      	movs	r0, #46	@ 0x2e
 8004cba:	f7ff feef 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x37);
 8004cbe:	2037      	movs	r0, #55	@ 0x37
 8004cc0:	f7ff feec 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x3F);
 8004cc4:	203f      	movs	r0, #63	@ 0x3f
 8004cc6:	f7ff fee9 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x00);
 8004cca:	2000      	movs	r0, #0
 8004ccc:	f7ff fee6 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x00);
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f7ff fee3 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x02);
 8004cd6:	2002      	movs	r0, #2
 8004cd8:	f7ff fee0 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData(0x10);
 8004cdc:	2010      	movs	r0, #16
 8004cde:	f7ff fedd 	bl	8004a9c <ST7735_WriteData>

    // 11: Normal display on
    ST7735_WriteCommand(ST7735_NORON);
 8004ce2:	2013      	movs	r0, #19
 8004ce4:	f7ff feb8 	bl	8004a58 <ST7735_WriteCommand>
    HAL_Delay(10);
 8004ce8:	200a      	movs	r0, #10
 8004cea:	f000 f8f7 	bl	8004edc <HAL_Delay>

    // 12: Display on
    ST7735_WriteCommand(ST7735_DISPON);
 8004cee:	2029      	movs	r0, #41	@ 0x29
 8004cf0:	f7ff feb2 	bl	8004a58 <ST7735_WriteCommand>
    HAL_Delay(100);
 8004cf4:	2064      	movs	r0, #100	@ 0x64
 8004cf6:	f000 f8f1 	bl	8004edc <HAL_Delay>

    LCD_CS_HIGH();
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d00:	4802      	ldr	r0, [pc, #8]	@ (8004d0c <ST7735_Init+0x22c>)
 8004d02:	f005 f99b 	bl	800a03c <HAL_GPIO_WritePin>
}
 8004d06:	bf00      	nop
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	58021000 	.word	0x58021000

08004d10 <ST7735_AddrSet>:
/**
 * @brief Устанавливает "окно" для отрисовки.
 * @note Использует смещения из lcd.h.
 */
void ST7735_AddrSet(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4604      	mov	r4, r0
 8004d18:	4608      	mov	r0, r1
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4623      	mov	r3, r4
 8004d20:	80fb      	strh	r3, [r7, #6]
 8004d22:	4603      	mov	r3, r0
 8004d24:	80bb      	strh	r3, [r7, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	807b      	strh	r3, [r7, #2]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	803b      	strh	r3, [r7, #0]
    ST7735_WriteCommand(ST7735_CASET);
 8004d2e:	202a      	movs	r0, #42	@ 0x2a
 8004d30:	f7ff fe92 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData((x1 + LCD_X_SHIFT) >> 8);
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	3301      	adds	r3, #1
 8004d38:	121b      	asrs	r3, r3, #8
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff fead 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData((x1 + LCD_X_SHIFT) & 0xFF);
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	3301      	adds	r3, #1
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fea6 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData((x2 + LCD_X_SHIFT) >> 8);
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	3301      	adds	r3, #1
 8004d54:	121b      	asrs	r3, r3, #8
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fe9f 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData((x2 + LCD_X_SHIFT) & 0xFF);
 8004d5e:	887b      	ldrh	r3, [r7, #2]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	3301      	adds	r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fe98 	bl	8004a9c <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_RASET);
 8004d6c:	202b      	movs	r0, #43	@ 0x2b
 8004d6e:	f7ff fe73 	bl	8004a58 <ST7735_WriteCommand>
    ST7735_WriteData((y1 + LCD_Y_SHIFT) >> 8);
 8004d72:	88bb      	ldrh	r3, [r7, #4]
 8004d74:	331a      	adds	r3, #26
 8004d76:	121b      	asrs	r3, r3, #8
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff fe8e 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData((y1 + LCD_Y_SHIFT) & 0xFF);
 8004d80:	88bb      	ldrh	r3, [r7, #4]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	331a      	adds	r3, #26
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fe87 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData((y2 + LCD_Y_SHIFT) >> 8);
 8004d8e:	883b      	ldrh	r3, [r7, #0]
 8004d90:	331a      	adds	r3, #26
 8004d92:	121b      	asrs	r3, r3, #8
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fe80 	bl	8004a9c <ST7735_WriteData>
    ST7735_WriteData((y2 + LCD_Y_SHIFT) & 0xFF);
 8004d9c:	883b      	ldrh	r3, [r7, #0]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	331a      	adds	r3, #26
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fe79 	bl	8004a9c <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_RAMWR);
 8004daa:	202c      	movs	r0, #44	@ 0x2c
 8004dac:	f7ff fe54 	bl	8004a58 <ST7735_WriteCommand>
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd90      	pop	{r4, r7, pc}

08004db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dbe:	2003      	movs	r0, #3
 8004dc0:	f002 f982 	bl	80070c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004dc4:	f007 fa7e 	bl	800c2c4 <HAL_RCC_GetSysClockFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <HAL_Init+0x68>)
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	4913      	ldr	r1, [pc, #76]	@ (8004e24 <HAL_Init+0x6c>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8004de0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004de2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e20 <HAL_Init+0x68>)
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	4a0e      	ldr	r2, [pc, #56]	@ (8004e24 <HAL_Init+0x6c>)
 8004dec:	5cd3      	ldrb	r3, [r2, r3]
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
 8004df8:	4a0b      	ldr	r2, [pc, #44]	@ (8004e28 <HAL_Init+0x70>)
 8004dfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004dfc:	4a0b      	ldr	r2, [pc, #44]	@ (8004e2c <HAL_Init+0x74>)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e02:	200f      	movs	r0, #15
 8004e04:	f000 f814 	bl	8004e30 <HAL_InitTick>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e002      	b.n	8004e18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004e12:	f7fe f81d 	bl	8002e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	58024400 	.word	0x58024400
 8004e24:	0801c79c 	.word	0x0801c79c
 8004e28:	2400001c 	.word	0x2400001c
 8004e2c:	24000018 	.word	0x24000018

08004e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004e38:	4b15      	ldr	r3, [pc, #84]	@ (8004e90 <HAL_InitTick+0x60>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e021      	b.n	8004e88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004e44:	4b13      	ldr	r3, [pc, #76]	@ (8004e94 <HAL_InitTick+0x64>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4b11      	ldr	r3, [pc, #68]	@ (8004e90 <HAL_InitTick+0x60>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f002 f975 	bl	800714a <HAL_SYSTICK_Config>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e00e      	b.n	8004e88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b0f      	cmp	r3, #15
 8004e6e:	d80a      	bhi.n	8004e86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e70:	2200      	movs	r2, #0
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	f04f 30ff 	mov.w	r0, #4294967295
 8004e78:	f002 f931 	bl	80070de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e7c:	4a06      	ldr	r2, [pc, #24]	@ (8004e98 <HAL_InitTick+0x68>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e000      	b.n	8004e88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	24000038 	.word	0x24000038
 8004e94:	24000018 	.word	0x24000018
 8004e98:	24000034 	.word	0x24000034

08004e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ea0:	4b06      	ldr	r3, [pc, #24]	@ (8004ebc <HAL_IncTick+0x20>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <HAL_IncTick+0x24>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4413      	add	r3, r2
 8004eac:	4a04      	ldr	r2, [pc, #16]	@ (8004ec0 <HAL_IncTick+0x24>)
 8004eae:	6013      	str	r3, [r2, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	24000038 	.word	0x24000038
 8004ec0:	2400d8bc 	.word	0x2400d8bc

08004ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	@ (8004ed8 <HAL_GetTick+0x14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	2400d8bc 	.word	0x2400d8bc

08004edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ee4:	f7ff ffee 	bl	8004ec4 <HAL_GetTick>
 8004ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef4:	d005      	beq.n	8004f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f20 <HAL_Delay+0x44>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f02:	bf00      	nop
 8004f04:	f7ff ffde 	bl	8004ec4 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d8f7      	bhi.n	8004f04 <HAL_Delay+0x28>
  {
  }
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	24000038 	.word	0x24000038

08004f24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	609a      	str	r2, [r3, #8]
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a18      	ldr	r2, [pc, #96]	@ (8004ffc <LL_ADC_SetChannelPreselection+0x70>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d027      	beq.n	8004fee <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d107      	bne.n	8004fb8 <LL_ADC_SetChannelPreselection+0x2c>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	0e9b      	lsrs	r3, r3, #26
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	e015      	b.n	8004fe4 <LL_ADC_SetChannelPreselection+0x58>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	fa93 f3a3 	rbit	r3, r3
 8004fc2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8004fce:	2320      	movs	r3, #32
 8004fd0:	e003      	b.n	8004fda <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	fab3 f383 	clz	r3, r3
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	2201      	movs	r2, #1
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	69d2      	ldr	r2, [r2, #28]
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	58026000 	.word	0x58026000

08005000 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3360      	adds	r3, #96	@ 0x60
 8005012:	461a      	mov	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4a10      	ldr	r2, [pc, #64]	@ (8005060 <LL_ADC_SetOffset+0x60>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d10b      	bne.n	800503c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	4313      	orrs	r3, r2
 8005032:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800503a:	e00b      	b.n	8005054 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	430b      	orrs	r3, r1
 800504e:	431a      	orrs	r2, r3
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	58026000 	.word	0x58026000

08005064 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3360      	adds	r3, #96	@ 0x60
 8005072:	461a      	mov	r2, r3
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 031f 	and.w	r3, r3, #31
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	fa01 f303 	lsl.w	r3, r1, r3
 80050b0:	431a      	orrs	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	611a      	str	r2, [r3, #16]
}
 80050b6:	bf00      	nop
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005104 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3360      	adds	r3, #96	@ 0x60
 80050dc:	461a      	mov	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	431a      	orrs	r2, r3
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	601a      	str	r2, [r3, #0]
  }
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	58026000 	.word	0x58026000

08005108 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4a0c      	ldr	r2, [pc, #48]	@ (8005148 <LL_ADC_SetOffsetSaturation+0x40>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d10e      	bne.n	800513a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3360      	adds	r3, #96	@ 0x60
 8005120:	461a      	mov	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	431a      	orrs	r2, r3
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	58026000 	.word	0x58026000

0800514c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4a0c      	ldr	r2, [pc, #48]	@ (800518c <LL_ADC_SetOffsetSign+0x40>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10e      	bne.n	800517e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3360      	adds	r3, #96	@ 0x60
 8005164:	461a      	mov	r2, r3
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	431a      	orrs	r2, r3
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800517e:	bf00      	nop
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	58026000 	.word	0x58026000

08005190 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3360      	adds	r3, #96	@ 0x60
 80051a0:	461a      	mov	r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4a0c      	ldr	r2, [pc, #48]	@ (80051e0 <LL_ADC_SetOffsetState+0x50>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d108      	bne.n	80051c4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	431a      	orrs	r2, r3
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80051c2:	e007      	b.n	80051d4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	601a      	str	r2, [r3, #0]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	58026000 	.word	0x58026000

080051e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800520a:	b480      	push	{r7}
 800520c:	b087      	sub	sp, #28
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3330      	adds	r3, #48	@ 0x30
 800521a:	461a      	mov	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	0a1b      	lsrs	r3, r3, #8
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	4413      	add	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	211f      	movs	r1, #31
 8005236:	fa01 f303 	lsl.w	r3, r1, r3
 800523a:	43db      	mvns	r3, r3
 800523c:	401a      	ands	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	0e9b      	lsrs	r3, r3, #26
 8005242:	f003 011f 	and.w	r1, r3, #31
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	fa01 f303 	lsl.w	r3, r1, r3
 8005250:	431a      	orrs	r2, r3
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f023 0203 	bic.w	r2, r3, #3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	60da      	str	r2, [r3, #12]
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f043 0201 	orr.w	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	60da      	str	r2, [r3, #12]
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a08      	ldr	r2, [pc, #32]	@ (80052d8 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d107      	bne.n	80052ca <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f023 0203 	bic.w	r2, r3, #3
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]
  }
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	58026000 	.word	0x58026000

080052dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3314      	adds	r3, #20
 80052ec:	461a      	mov	r2, r3
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	0e5b      	lsrs	r3, r3, #25
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	4413      	add	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	0d1b      	lsrs	r3, r3, #20
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2107      	movs	r1, #7
 800530a:	fa01 f303 	lsl.w	r3, r1, r3
 800530e:	43db      	mvns	r3, r3
 8005310:	401a      	ands	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	0d1b      	lsrs	r3, r3, #20
 8005316:	f003 031f 	and.w	r3, r3, #31
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	fa01 f303 	lsl.w	r3, r1, r3
 8005320:	431a      	orrs	r2, r3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a1a      	ldr	r2, [pc, #104]	@ (80053ac <LL_ADC_SetChannelSingleDiff+0x78>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d115      	bne.n	8005374 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005354:	43db      	mvns	r3, r3
 8005356:	401a      	ands	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f003 0318 	and.w	r3, r3, #24
 800535e:	4914      	ldr	r1, [pc, #80]	@ (80053b0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005360:	40d9      	lsrs	r1, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	400b      	ands	r3, r1
 8005366:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800536a:	431a      	orrs	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005372:	e014      	b.n	800539e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005380:	43db      	mvns	r3, r3
 8005382:	401a      	ands	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f003 0318 	and.w	r3, r3, #24
 800538a:	4909      	ldr	r1, [pc, #36]	@ (80053b0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800538c:	40d9      	lsrs	r1, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	400b      	ands	r3, r1
 8005392:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005396:	431a      	orrs	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800539e:	bf00      	nop
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	58026000 	.word	0x58026000
 80053b0:	000fffff 	.word	0x000fffff

080053b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 031f 	and.w	r3, r3, #31
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	4b04      	ldr	r3, [pc, #16]	@ (80053f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80053de:	4013      	ands	r3, r2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6093      	str	r3, [r2, #8]
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	5fffffc0 	.word	0x5fffffc0

080053f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005408:	d101      	bne.n	800540e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	4b05      	ldr	r3, [pc, #20]	@ (8005440 <LL_ADC_EnableInternalRegulator+0x24>)
 800542a:	4013      	ands	r3, r2
 800542c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	6fffffc0 	.word	0x6fffffc0

08005444 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005454:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005458:	d101      	bne.n	800545e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	4b05      	ldr	r3, [pc, #20]	@ (8005490 <LL_ADC_Enable+0x24>)
 800547a:	4013      	ands	r3, r2
 800547c:	f043 0201 	orr.w	r2, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	7fffffc0 	.word	0x7fffffc0

08005494 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	4b05      	ldr	r3, [pc, #20]	@ (80054b8 <LL_ADC_Disable+0x24>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	f043 0202 	orr.w	r2, r3, #2
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	7fffffc0 	.word	0x7fffffc0

080054bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <LL_ADC_IsEnabled+0x18>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <LL_ADC_IsEnabled+0x1a>
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d101      	bne.n	80054fa <LL_ADC_IsDisableOngoing+0x18>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <LL_ADC_IsDisableOngoing+0x1a>
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	4b05      	ldr	r3, [pc, #20]	@ (800552c <LL_ADC_REG_StartConversion+0x24>)
 8005516:	4013      	ands	r3, r2
 8005518:	f043 0204 	orr.w	r2, r3, #4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	7fffffc0 	.word	0x7fffffc0

08005530 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <LL_ADC_REG_StopConversion+0x24>)
 800553e:	4013      	ands	r3, r2
 8005540:	f043 0210 	orr.w	r2, r3, #16
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	7fffffc0 	.word	0x7fffffc0

08005558 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b04      	cmp	r3, #4
 800556a:	d101      	bne.n	8005570 <LL_ADC_REG_IsConversionOngoing+0x18>
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	4b05      	ldr	r3, [pc, #20]	@ (80055a4 <LL_ADC_INJ_StopConversion+0x24>)
 800558e:	4013      	ands	r3, r2
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	7fffffc0 	.word	0x7fffffc0

080055a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d101      	bne.n	80055c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055d0:	b590      	push	{r4, r7, lr}
 80055d2:	b089      	sub	sp, #36	@ 0x24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80055dc:	2300      	movs	r3, #0
 80055de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e1ee      	b.n	80059c8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7fd fc43 	bl	8002e84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff feef 	bl	80053f4 <LL_ADC_IsDeepPowerDownEnabled>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff fed5 	bl	80053d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff ff0a 	bl	8005444 <LL_ADC_IsInternalRegulatorEnabled>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d114      	bne.n	8005660 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff feee 	bl	800541c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005640:	4b8e      	ldr	r3, [pc, #568]	@ (800587c <HAL_ADC_Init+0x2ac>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	099b      	lsrs	r3, r3, #6
 8005646:	4a8e      	ldr	r2, [pc, #568]	@ (8005880 <HAL_ADC_Init+0x2b0>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	099b      	lsrs	r3, r3, #6
 800564e:	3301      	adds	r3, #1
 8005650:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005652:	e002      	b.n	800565a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	3b01      	subs	r3, #1
 8005658:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f9      	bne.n	8005654 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff feed 	bl	8005444 <LL_ADC_IsInternalRegulatorEnabled>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10d      	bne.n	800568c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005674:	f043 0210 	orr.w	r2, r3, #16
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005680:	f043 0201 	orr.w	r2, r3, #1
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff ff61 	bl	8005558 <LL_ADC_REG_IsConversionOngoing>
 8005696:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f040 8188 	bne.w	80059b6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f040 8184 	bne.w	80059b6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056b2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80056b6:	f043 0202 	orr.w	r2, r3, #2
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff fefa 	bl	80054bc <LL_ADC_IsEnabled>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d136      	bne.n	800573c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a6c      	ldr	r2, [pc, #432]	@ (8005884 <HAL_ADC_Init+0x2b4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_ADC_Init+0x112>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a6a      	ldr	r2, [pc, #424]	@ (8005888 <HAL_ADC_Init+0x2b8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10e      	bne.n	8005700 <HAL_ADC_Init+0x130>
 80056e2:	4868      	ldr	r0, [pc, #416]	@ (8005884 <HAL_ADC_Init+0x2b4>)
 80056e4:	f7ff feea 	bl	80054bc <LL_ADC_IsEnabled>
 80056e8:	4604      	mov	r4, r0
 80056ea:	4867      	ldr	r0, [pc, #412]	@ (8005888 <HAL_ADC_Init+0x2b8>)
 80056ec:	f7ff fee6 	bl	80054bc <LL_ADC_IsEnabled>
 80056f0:	4603      	mov	r3, r0
 80056f2:	4323      	orrs	r3, r4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf0c      	ite	eq
 80056f8:	2301      	moveq	r3, #1
 80056fa:	2300      	movne	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	e008      	b.n	8005712 <HAL_ADC_Init+0x142>
 8005700:	4862      	ldr	r0, [pc, #392]	@ (800588c <HAL_ADC_Init+0x2bc>)
 8005702:	f7ff fedb 	bl	80054bc <LL_ADC_IsEnabled>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	bf0c      	ite	eq
 800570c:	2301      	moveq	r3, #1
 800570e:	2300      	movne	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d012      	beq.n	800573c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a5a      	ldr	r2, [pc, #360]	@ (8005884 <HAL_ADC_Init+0x2b4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_ADC_Init+0x15a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a58      	ldr	r2, [pc, #352]	@ (8005888 <HAL_ADC_Init+0x2b8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d101      	bne.n	800572e <HAL_ADC_Init+0x15e>
 800572a:	4a59      	ldr	r2, [pc, #356]	@ (8005890 <HAL_ADC_Init+0x2c0>)
 800572c:	e000      	b.n	8005730 <HAL_ADC_Init+0x160>
 800572e:	4a59      	ldr	r2, [pc, #356]	@ (8005894 <HAL_ADC_Init+0x2c4>)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f7ff fbf4 	bl	8004f24 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a52      	ldr	r2, [pc, #328]	@ (800588c <HAL_ADC_Init+0x2bc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d129      	bne.n	800579a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	7e5b      	ldrb	r3, [r3, #25]
 800574a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005750:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8005756:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d013      	beq.n	8005788 <HAL_ADC_Init+0x1b8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b0c      	cmp	r3, #12
 8005766:	d00d      	beq.n	8005784 <HAL_ADC_Init+0x1b4>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2b1c      	cmp	r3, #28
 800576e:	d007      	beq.n	8005780 <HAL_ADC_Init+0x1b0>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b18      	cmp	r3, #24
 8005776:	d101      	bne.n	800577c <HAL_ADC_Init+0x1ac>
 8005778:	2318      	movs	r3, #24
 800577a:	e006      	b.n	800578a <HAL_ADC_Init+0x1ba>
 800577c:	2300      	movs	r3, #0
 800577e:	e004      	b.n	800578a <HAL_ADC_Init+0x1ba>
 8005780:	2310      	movs	r3, #16
 8005782:	e002      	b.n	800578a <HAL_ADC_Init+0x1ba>
 8005784:	2308      	movs	r3, #8
 8005786:	e000      	b.n	800578a <HAL_ADC_Init+0x1ba>
 8005788:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800578a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005792:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005794:	4313      	orrs	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	e00e      	b.n	80057b8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	7e5b      	ldrb	r3, [r3, #25]
 800579e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80057a4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80057aa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d106      	bne.n	80057d0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	3b01      	subs	r3, #1
 80057c8:	045b      	lsls	r3, r3, #17
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d009      	beq.n	80057ec <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a26      	ldr	r2, [pc, #152]	@ (800588c <HAL_ADC_Init+0x2bc>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d115      	bne.n	8005822 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	4b26      	ldr	r3, [pc, #152]	@ (8005898 <HAL_ADC_Init+0x2c8>)
 80057fe:	4013      	ands	r3, r2
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6812      	ldr	r2, [r2, #0]
 8005804:	69b9      	ldr	r1, [r7, #24]
 8005806:	430b      	orrs	r3, r1
 8005808:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	611a      	str	r2, [r3, #16]
 8005820:	e009      	b.n	8005836 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	4b1c      	ldr	r3, [pc, #112]	@ (800589c <HAL_ADC_Init+0x2cc>)
 800582a:	4013      	ands	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	69b9      	ldr	r1, [r7, #24]
 8005832:	430b      	orrs	r3, r1
 8005834:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fe8c 	bl	8005558 <LL_ADC_REG_IsConversionOngoing>
 8005840:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff feae 	bl	80055a8 <LL_ADC_INJ_IsConversionOngoing>
 800584c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	f040 808e 	bne.w	8005972 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f040 808a 	bne.w	8005972 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a0a      	ldr	r2, [pc, #40]	@ (800588c <HAL_ADC_Init+0x2bc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d11b      	bne.n	80058a0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	7e1b      	ldrb	r3, [r3, #24]
 800586c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005874:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8005876:	4313      	orrs	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	e018      	b.n	80058ae <HAL_ADC_Init+0x2de>
 800587c:	24000018 	.word	0x24000018
 8005880:	053e2d63 	.word	0x053e2d63
 8005884:	40022000 	.word	0x40022000
 8005888:	40022100 	.word	0x40022100
 800588c:	58026000 	.word	0x58026000
 8005890:	40022300 	.word	0x40022300
 8005894:	58026300 	.word	0x58026300
 8005898:	fff04007 	.word	0xfff04007
 800589c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	7e1b      	ldrb	r3, [r3, #24]
 80058a4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	4b46      	ldr	r3, [pc, #280]	@ (80059d0 <HAL_ADC_Init+0x400>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	69b9      	ldr	r1, [r7, #24]
 80058be:	430b      	orrs	r3, r1
 80058c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d137      	bne.n	800593c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a3f      	ldr	r2, [pc, #252]	@ (80059d4 <HAL_ADC_Init+0x404>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d116      	bne.n	800590a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	4b3d      	ldr	r3, [pc, #244]	@ (80059d8 <HAL_ADC_Init+0x408>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80058ee:	4311      	orrs	r1, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058f4:	4311      	orrs	r1, r2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80058fa:	430a      	orrs	r2, r1
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	611a      	str	r2, [r3, #16]
 8005908:	e020      	b.n	800594c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	4b32      	ldr	r3, [pc, #200]	@ (80059dc <HAL_ADC_Init+0x40c>)
 8005912:	4013      	ands	r3, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005918:	3a01      	subs	r2, #1
 800591a:	0411      	lsls	r1, r2, #16
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005920:	4311      	orrs	r1, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005926:	4311      	orrs	r1, r2
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800592c:	430a      	orrs	r2, r1
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0201 	orr.w	r2, r2, #1
 8005938:	611a      	str	r2, [r3, #16]
 800593a:	e007      	b.n	800594c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1b      	ldr	r2, [pc, #108]	@ (80059d4 <HAL_ADC_Init+0x404>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d002      	beq.n	8005972 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 f8c1 	bl	8006af4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d10c      	bne.n	8005994 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005980:	f023 010f 	bic.w	r1, r3, #15
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	1e5a      	subs	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	631a      	str	r2, [r3, #48]	@ 0x30
 8005992:	e007      	b.n	80059a4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 020f 	bic.w	r2, r2, #15
 80059a2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a8:	f023 0303 	bic.w	r3, r3, #3
 80059ac:	f043 0201 	orr.w	r2, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	661a      	str	r2, [r3, #96]	@ 0x60
 80059b4:	e007      	b.n	80059c6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ba:	f043 0210 	orr.w	r2, r3, #16
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80059c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3724      	adds	r7, #36	@ 0x24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd90      	pop	{r4, r7, pc}
 80059d0:	ffffbffc 	.word	0xffffbffc
 80059d4:	58026000 	.word	0x58026000
 80059d8:	fc00f81f 	.word	0xfc00f81f
 80059dc:	fc00f81e 	.word	0xfc00f81e

080059e0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_ADC_Stop+0x16>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e021      	b.n	8005a3a <HAL_ADC_Stop+0x5a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80059fe:	2103      	movs	r1, #3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fe3d 	bl	8006680 <ADC_ConversionStop>
 8005a06:	4603      	mov	r3, r0
 8005a08:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10f      	bne.n	8005a30 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 ff7b 	bl	800690c <ADC_Disable>
 8005a16:	4603      	mov	r3, r0
 8005a18:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d107      	bne.n	8005a30 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a24:	4b07      	ldr	r3, [pc, #28]	@ (8005a44 <HAL_ADC_Stop+0x64>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	f043 0201 	orr.w	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	ffffeefe 	.word	0xffffeefe

08005a48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a60      	ldr	r2, [pc, #384]	@ (8005bdc <HAL_ADC_Start_DMA+0x194>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d004      	beq.n	8005a68 <HAL_ADC_Start_DMA+0x20>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a5f      	ldr	r2, [pc, #380]	@ (8005be0 <HAL_ADC_Start_DMA+0x198>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d101      	bne.n	8005a6c <HAL_ADC_Start_DMA+0x24>
 8005a68:	4b5e      	ldr	r3, [pc, #376]	@ (8005be4 <HAL_ADC_Start_DMA+0x19c>)
 8005a6a:	e000      	b.n	8005a6e <HAL_ADC_Start_DMA+0x26>
 8005a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8005be8 <HAL_ADC_Start_DMA+0x1a0>)
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fca0 	bl	80053b4 <LL_ADC_GetMultimode>
 8005a74:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fd6c 	bl	8005558 <LL_ADC_REG_IsConversionOngoing>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f040 80a2 	bne.w	8005bcc <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_ADC_Start_DMA+0x4e>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e09d      	b.n	8005bd2 <HAL_ADC_Start_DMA+0x18a>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d006      	beq.n	8005ab2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b05      	cmp	r3, #5
 8005aa8:	d003      	beq.n	8005ab2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	2b09      	cmp	r3, #9
 8005aae:	f040 8086 	bne.w	8005bbe <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 fea0 	bl	80067f8 <ADC_Enable>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d178      	bne.n	8005bb4 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ac6:	4b49      	ldr	r3, [pc, #292]	@ (8005bec <HAL_ADC_Start_DMA+0x1a4>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a42      	ldr	r2, [pc, #264]	@ (8005be0 <HAL_ADC_Start_DMA+0x198>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d002      	beq.n	8005ae2 <HAL_ADC_Start_DMA+0x9a>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	e000      	b.n	8005ae4 <HAL_ADC_Start_DMA+0x9c>
 8005ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8005bdc <HAL_ADC_Start_DMA+0x194>)
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d002      	beq.n	8005af2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d105      	bne.n	8005afe <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d006      	beq.n	8005b18 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b0e:	f023 0206 	bic.w	r2, r3, #6
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	665a      	str	r2, [r3, #100]	@ 0x64
 8005b16:	e002      	b.n	8005b1e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b22:	4a33      	ldr	r2, [pc, #204]	@ (8005bf0 <HAL_ADC_Start_DMA+0x1a8>)
 8005b24:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2a:	4a32      	ldr	r2, [pc, #200]	@ (8005bf4 <HAL_ADC_Start_DMA+0x1ac>)
 8005b2c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b32:	4a31      	ldr	r2, [pc, #196]	@ (8005bf8 <HAL_ADC_Start_DMA+0x1b0>)
 8005b34:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	221c      	movs	r2, #28
 8005b3c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0210 	orr.w	r2, r2, #16
 8005b54:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a28      	ldr	r2, [pc, #160]	@ (8005bfc <HAL_ADC_Start_DMA+0x1b4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d10f      	bne.n	8005b80 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f7ff fb9a 	bl	80052a8 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff fb85 	bl	8005288 <LL_ADC_EnableDMAReq>
 8005b7e:	e007      	b.n	8005b90 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f7ff fb69 	bl	8005262 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3340      	adds	r3, #64	@ 0x40
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f002 f80a 	bl	8007bb8 <HAL_DMA_Start_IT>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff fcab 	bl	8005508 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005bb2:	e00d      	b.n	8005bd0 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8005bbc:	e008      	b.n	8005bd0 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005bca:	e001      	b.n	8005bd0 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005bcc:	2302      	movs	r3, #2
 8005bce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40022000 	.word	0x40022000
 8005be0:	40022100 	.word	0x40022100
 8005be4:	40022300 	.word	0x40022300
 8005be8:	58026300 	.word	0x58026300
 8005bec:	fffff0fe 	.word	0xfffff0fe
 8005bf0:	080069cb 	.word	0x080069cb
 8005bf4:	08006aa3 	.word	0x08006aa3
 8005bf8:	08006abf 	.word	0x08006abf
 8005bfc:	58026000 	.word	0x58026000

08005c00 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_ADC_Stop_DMA+0x16>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e04f      	b.n	8005cb6 <HAL_ADC_Stop_DMA+0xb6>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005c1e:	2103      	movs	r1, #3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fd2d 	bl	8006680 <ADC_ConversionStop>
 8005c26:	4603      	mov	r3, r0
 8005c28:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d13d      	bne.n	8005cac <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0203 	bic.w	r2, r2, #3
 8005c3e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d10f      	bne.n	8005c6e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c52:	4618      	mov	r0, r3
 8005c54:	f002 fa1a 	bl	800808c <HAL_DMA_Abort>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d005      	beq.n	8005c6e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0210 	bic.w	r2, r2, #16
 8005c7c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fe41 	bl	800690c <ADC_Disable>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	73fb      	strb	r3, [r7, #15]
 8005c8e:	e002      	b.n	8005c96 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fe3b 	bl	800690c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d107      	bne.n	8005cac <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ca0:	4b07      	ldr	r3, [pc, #28]	@ (8005cc0 <HAL_ADC_Stop_DMA+0xc0>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	f043 0201 	orr.w	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	661a      	str	r2, [r3, #96]	@ 0x60
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	ffffeefe 	.word	0xffffeefe

08005cc4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005cd8:	b590      	push	{r4, r7, lr}
 8005cda:	b0a5      	sub	sp, #148	@ 0x94
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cf2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	4aa4      	ldr	r2, [pc, #656]	@ (8005f8c <HAL_ADC_ConfigChannel+0x2b4>)
 8005cfa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d102      	bne.n	8005d0c <HAL_ADC_ConfigChannel+0x34>
 8005d06:	2302      	movs	r3, #2
 8005d08:	f000 bca2 	b.w	8006650 <HAL_ADC_ConfigChannel+0x978>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fc1d 	bl	8005558 <LL_ADC_REG_IsConversionOngoing>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f040 8486 	bne.w	8006632 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	db31      	blt.n	8005d92 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a97      	ldr	r2, [pc, #604]	@ (8005f90 <HAL_ADC_ConfigChannel+0x2b8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d02c      	beq.n	8005d92 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d108      	bne.n	8005d56 <HAL_ADC_ConfigChannel+0x7e>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	0e9b      	lsrs	r3, r3, #26
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	2201      	movs	r2, #1
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	e016      	b.n	8005d84 <HAL_ADC_ConfigChannel+0xac>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d5e:	fa93 f3a3 	rbit	r3, r3
 8005d62:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005d64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d66:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005d68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8005d6e:	2320      	movs	r3, #32
 8005d70:	e003      	b.n	8005d7a <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8005d72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d74:	fab3 f383 	clz	r3, r3
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2201      	movs	r2, #1
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	69d1      	ldr	r1, [r2, #28]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f7ff fa33 	bl	800520a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff fbd5 	bl	8005558 <LL_ADC_REG_IsConversionOngoing>
 8005dae:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fbf6 	bl	80055a8 <LL_ADC_INJ_IsConversionOngoing>
 8005dbc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f040 824a 	bne.w	800625e <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005dca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f040 8245 	bne.w	800625e <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6818      	ldr	r0, [r3, #0]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	6819      	ldr	r1, [r3, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	461a      	mov	r2, r3
 8005de2:	f7ff fa7b 	bl	80052dc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a69      	ldr	r2, [pc, #420]	@ (8005f90 <HAL_ADC_ConfigChannel+0x2b8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10d      	bne.n	8005e0c <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	695a      	ldr	r2, [r3, #20]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	08db      	lsrs	r3, r3, #3
 8005dfc:	f003 0303 	and.w	r3, r3, #3
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e0a:	e032      	b.n	8005e72 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e0c:	4b61      	ldr	r3, [pc, #388]	@ (8005f94 <HAL_ADC_ConfigChannel+0x2bc>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005e14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e18:	d10b      	bne.n	8005e32 <HAL_ADC_ConfigChannel+0x15a>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695a      	ldr	r2, [r3, #20]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	089b      	lsrs	r3, r3, #2
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	e01d      	b.n	8005e6e <HAL_ADC_ConfigChannel+0x196>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0310 	and.w	r3, r3, #16
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10b      	bne.n	8005e58 <HAL_ADC_ConfigChannel+0x180>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	695a      	ldr	r2, [r3, #20]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	089b      	lsrs	r3, r3, #2
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	e00a      	b.n	8005e6e <HAL_ADC_ConfigChannel+0x196>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	089b      	lsrs	r3, r3, #2
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d048      	beq.n	8005f0c <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	6919      	ldr	r1, [r3, #16]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e8a:	f7ff f8b9 	bl	8005000 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a3f      	ldr	r2, [pc, #252]	@ (8005f90 <HAL_ADC_ConfigChannel+0x2b8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d119      	bne.n	8005ecc <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6919      	ldr	r1, [r3, #16]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f7ff f951 	bl	800514c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	6919      	ldr	r1, [r3, #16]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d102      	bne.n	8005ec2 <HAL_ADC_ConfigChannel+0x1ea>
 8005ebc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ec0:	e000      	b.n	8005ec4 <HAL_ADC_ConfigChannel+0x1ec>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f7ff f91f 	bl	8005108 <LL_ADC_SetOffsetSaturation>
 8005eca:	e1c8      	b.n	800625e <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	6919      	ldr	r1, [r3, #16]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d102      	bne.n	8005ee4 <HAL_ADC_ConfigChannel+0x20c>
 8005ede:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ee2:	e000      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x20e>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f7ff f8ec 	bl	80050c4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	6919      	ldr	r1, [r3, #16]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	7e1b      	ldrb	r3, [r3, #24]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d102      	bne.n	8005f02 <HAL_ADC_ConfigChannel+0x22a>
 8005efc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f00:	e000      	b.n	8005f04 <HAL_ADC_ConfigChannel+0x22c>
 8005f02:	2300      	movs	r3, #0
 8005f04:	461a      	mov	r2, r3
 8005f06:	f7ff f8c3 	bl	8005090 <LL_ADC_SetDataRightShift>
 8005f0a:	e1a8      	b.n	800625e <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a1f      	ldr	r2, [pc, #124]	@ (8005f90 <HAL_ADC_ConfigChannel+0x2b8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	f040 815b 	bne.w	80061ce <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff f8a0 	bl	8005064 <LL_ADC_GetOffsetChannel>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <HAL_ADC_ConfigChannel+0x26c>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2100      	movs	r1, #0
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff f895 	bl	8005064 <LL_ADC_GetOffsetChannel>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	0e9b      	lsrs	r3, r3, #26
 8005f3e:	f003 021f 	and.w	r2, r3, #31
 8005f42:	e017      	b.n	8005f74 <HAL_ADC_ConfigChannel+0x29c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff f88a 	bl	8005064 <LL_ADC_GetOffsetChannel>
 8005f50:	4603      	mov	r3, r0
 8005f52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f56:	fa93 f3a3 	rbit	r3, r3
 8005f5a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005f5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8005f66:	2320      	movs	r3, #32
 8005f68:	e003      	b.n	8005f72 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8005f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f6c:	fab3 f383 	clz	r3, r3
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10b      	bne.n	8005f98 <HAL_ADC_ConfigChannel+0x2c0>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	0e9b      	lsrs	r3, r3, #26
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	e017      	b.n	8005fbc <HAL_ADC_ConfigChannel+0x2e4>
 8005f8c:	47ff0000 	.word	0x47ff0000
 8005f90:	58026000 	.word	0x58026000
 8005f94:	5c001000 	.word	0x5c001000
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fa0:	fa93 f3a3 	rbit	r3, r3
 8005fa4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005fa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fa8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005faa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8005fb0:	2320      	movs	r3, #32
 8005fb2:	e003      	b.n	8005fbc <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8005fb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fb6:	fab3 f383 	clz	r3, r3
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d106      	bne.n	8005fce <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff f8e1 	bl	8005190 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff f845 	bl	8005064 <LL_ADC_GetOffsetChannel>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <HAL_ADC_ConfigChannel+0x322>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff f83a 	bl	8005064 <LL_ADC_GetOffsetChannel>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	0e9b      	lsrs	r3, r3, #26
 8005ff4:	f003 021f 	and.w	r2, r3, #31
 8005ff8:	e017      	b.n	800602a <HAL_ADC_ConfigChannel+0x352>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2101      	movs	r1, #1
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff f82f 	bl	8005064 <LL_ADC_GetOffsetChannel>
 8006006:	4603      	mov	r3, r0
 8006008:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800600c:	fa93 f3a3 	rbit	r3, r3
 8006010:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006014:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800601c:	2320      	movs	r3, #32
 800601e:	e003      	b.n	8006028 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8006020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006022:	fab3 f383 	clz	r3, r3
 8006026:	b2db      	uxtb	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006032:	2b00      	cmp	r3, #0
 8006034:	d105      	bne.n	8006042 <HAL_ADC_ConfigChannel+0x36a>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	0e9b      	lsrs	r3, r3, #26
 800603c:	f003 031f 	and.w	r3, r3, #31
 8006040:	e011      	b.n	8006066 <HAL_ADC_ConfigChannel+0x38e>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800604a:	fa93 f3a3 	rbit	r3, r3
 800604e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006052:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800605a:	2320      	movs	r3, #32
 800605c:	e003      	b.n	8006066 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800605e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006060:	fab3 f383 	clz	r3, r3
 8006064:	b2db      	uxtb	r3, r3
 8006066:	429a      	cmp	r2, r3
 8006068:	d106      	bne.n	8006078 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2200      	movs	r2, #0
 8006070:	2101      	movs	r1, #1
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff f88c 	bl	8005190 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2102      	movs	r1, #2
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe fff0 	bl	8005064 <LL_ADC_GetOffsetChannel>
 8006084:	4603      	mov	r3, r0
 8006086:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <HAL_ADC_ConfigChannel+0x3cc>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2102      	movs	r1, #2
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe ffe5 	bl	8005064 <LL_ADC_GetOffsetChannel>
 800609a:	4603      	mov	r3, r0
 800609c:	0e9b      	lsrs	r3, r3, #26
 800609e:	f003 021f 	and.w	r2, r3, #31
 80060a2:	e017      	b.n	80060d4 <HAL_ADC_ConfigChannel+0x3fc>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2102      	movs	r1, #2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe ffda 	bl	8005064 <LL_ADC_GetOffsetChannel>
 80060b0:	4603      	mov	r3, r0
 80060b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b6:	fa93 f3a3 	rbit	r3, r3
 80060ba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80060bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80060c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80060c6:	2320      	movs	r3, #32
 80060c8:	e003      	b.n	80060d2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80060ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060cc:	fab3 f383 	clz	r3, r3
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d105      	bne.n	80060ec <HAL_ADC_ConfigChannel+0x414>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	0e9b      	lsrs	r3, r3, #26
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	e011      	b.n	8006110 <HAL_ADC_ConfigChannel+0x438>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	fa93 f3a3 	rbit	r3, r3
 80060f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80060fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8006104:	2320      	movs	r3, #32
 8006106:	e003      	b.n	8006110 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8006108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610a:	fab3 f383 	clz	r3, r3
 800610e:	b2db      	uxtb	r3, r3
 8006110:	429a      	cmp	r2, r3
 8006112:	d106      	bne.n	8006122 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2200      	movs	r2, #0
 800611a:	2102      	movs	r1, #2
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff f837 	bl	8005190 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2103      	movs	r1, #3
 8006128:	4618      	mov	r0, r3
 800612a:	f7fe ff9b 	bl	8005064 <LL_ADC_GetOffsetChannel>
 800612e:	4603      	mov	r3, r0
 8006130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <HAL_ADC_ConfigChannel+0x476>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2103      	movs	r1, #3
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe ff90 	bl	8005064 <LL_ADC_GetOffsetChannel>
 8006144:	4603      	mov	r3, r0
 8006146:	0e9b      	lsrs	r3, r3, #26
 8006148:	f003 021f 	and.w	r2, r3, #31
 800614c:	e017      	b.n	800617e <HAL_ADC_ConfigChannel+0x4a6>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2103      	movs	r1, #3
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe ff85 	bl	8005064 <LL_ADC_GetOffsetChannel>
 800615a:	4603      	mov	r3, r0
 800615c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	fa93 f3a3 	rbit	r3, r3
 8006164:	61fb      	str	r3, [r7, #28]
  return result;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006170:	2320      	movs	r3, #32
 8006172:	e003      	b.n	800617c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006176:	fab3 f383 	clz	r3, r3
 800617a:	b2db      	uxtb	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <HAL_ADC_ConfigChannel+0x4be>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	0e9b      	lsrs	r3, r3, #26
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	e011      	b.n	80061ba <HAL_ADC_ConfigChannel+0x4e2>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	fa93 f3a3 	rbit	r3, r3
 80061a2:	613b      	str	r3, [r7, #16]
  return result;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80061ae:	2320      	movs	r3, #32
 80061b0:	e003      	b.n	80061ba <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	fab3 f383 	clz	r3, r3
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d14f      	bne.n	800625e <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2200      	movs	r2, #0
 80061c4:	2103      	movs	r1, #3
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe ffe2 	bl	8005190 <LL_ADC_SetOffsetState>
 80061cc:	e047      	b.n	800625e <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	069b      	lsls	r3, r3, #26
 80061de:	429a      	cmp	r2, r3
 80061e0:	d107      	bne.n	80061f2 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80061f0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	069b      	lsls	r3, r3, #26
 8006202:	429a      	cmp	r2, r3
 8006204:	d107      	bne.n	8006216 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006214:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800621c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	069b      	lsls	r3, r3, #26
 8006226:	429a      	cmp	r2, r3
 8006228:	d107      	bne.n	800623a <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006238:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006240:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	069b      	lsls	r3, r3, #26
 800624a:	429a      	cmp	r2, r3
 800624c:	d107      	bne.n	800625e <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800625c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff f92a 	bl	80054bc <LL_ADC_IsEnabled>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	f040 81ea 	bne.w	8006644 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6818      	ldr	r0, [r3, #0]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	6819      	ldr	r1, [r3, #0]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	461a      	mov	r2, r3
 800627e:	f7ff f859 	bl	8005334 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	4a7a      	ldr	r2, [pc, #488]	@ (8006470 <HAL_ADC_ConfigChannel+0x798>)
 8006288:	4293      	cmp	r3, r2
 800628a:	f040 80e0 	bne.w	800644e <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4977      	ldr	r1, [pc, #476]	@ (8006474 <HAL_ADC_ConfigChannel+0x79c>)
 8006298:	428b      	cmp	r3, r1
 800629a:	d147      	bne.n	800632c <HAL_ADC_ConfigChannel+0x654>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4975      	ldr	r1, [pc, #468]	@ (8006478 <HAL_ADC_ConfigChannel+0x7a0>)
 80062a2:	428b      	cmp	r3, r1
 80062a4:	d040      	beq.n	8006328 <HAL_ADC_ConfigChannel+0x650>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4974      	ldr	r1, [pc, #464]	@ (800647c <HAL_ADC_ConfigChannel+0x7a4>)
 80062ac:	428b      	cmp	r3, r1
 80062ae:	d039      	beq.n	8006324 <HAL_ADC_ConfigChannel+0x64c>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4972      	ldr	r1, [pc, #456]	@ (8006480 <HAL_ADC_ConfigChannel+0x7a8>)
 80062b6:	428b      	cmp	r3, r1
 80062b8:	d032      	beq.n	8006320 <HAL_ADC_ConfigChannel+0x648>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4971      	ldr	r1, [pc, #452]	@ (8006484 <HAL_ADC_ConfigChannel+0x7ac>)
 80062c0:	428b      	cmp	r3, r1
 80062c2:	d02b      	beq.n	800631c <HAL_ADC_ConfigChannel+0x644>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	496f      	ldr	r1, [pc, #444]	@ (8006488 <HAL_ADC_ConfigChannel+0x7b0>)
 80062ca:	428b      	cmp	r3, r1
 80062cc:	d024      	beq.n	8006318 <HAL_ADC_ConfigChannel+0x640>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	496e      	ldr	r1, [pc, #440]	@ (800648c <HAL_ADC_ConfigChannel+0x7b4>)
 80062d4:	428b      	cmp	r3, r1
 80062d6:	d01d      	beq.n	8006314 <HAL_ADC_ConfigChannel+0x63c>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	496c      	ldr	r1, [pc, #432]	@ (8006490 <HAL_ADC_ConfigChannel+0x7b8>)
 80062de:	428b      	cmp	r3, r1
 80062e0:	d016      	beq.n	8006310 <HAL_ADC_ConfigChannel+0x638>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	496b      	ldr	r1, [pc, #428]	@ (8006494 <HAL_ADC_ConfigChannel+0x7bc>)
 80062e8:	428b      	cmp	r3, r1
 80062ea:	d00f      	beq.n	800630c <HAL_ADC_ConfigChannel+0x634>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4969      	ldr	r1, [pc, #420]	@ (8006498 <HAL_ADC_ConfigChannel+0x7c0>)
 80062f2:	428b      	cmp	r3, r1
 80062f4:	d008      	beq.n	8006308 <HAL_ADC_ConfigChannel+0x630>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4968      	ldr	r1, [pc, #416]	@ (800649c <HAL_ADC_ConfigChannel+0x7c4>)
 80062fc:	428b      	cmp	r3, r1
 80062fe:	d101      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x62c>
 8006300:	4b67      	ldr	r3, [pc, #412]	@ (80064a0 <HAL_ADC_ConfigChannel+0x7c8>)
 8006302:	e0a0      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006304:	2300      	movs	r3, #0
 8006306:	e09e      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006308:	4b66      	ldr	r3, [pc, #408]	@ (80064a4 <HAL_ADC_ConfigChannel+0x7cc>)
 800630a:	e09c      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 800630c:	4b66      	ldr	r3, [pc, #408]	@ (80064a8 <HAL_ADC_ConfigChannel+0x7d0>)
 800630e:	e09a      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006310:	4b60      	ldr	r3, [pc, #384]	@ (8006494 <HAL_ADC_ConfigChannel+0x7bc>)
 8006312:	e098      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006314:	4b5e      	ldr	r3, [pc, #376]	@ (8006490 <HAL_ADC_ConfigChannel+0x7b8>)
 8006316:	e096      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006318:	4b64      	ldr	r3, [pc, #400]	@ (80064ac <HAL_ADC_ConfigChannel+0x7d4>)
 800631a:	e094      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 800631c:	4b64      	ldr	r3, [pc, #400]	@ (80064b0 <HAL_ADC_ConfigChannel+0x7d8>)
 800631e:	e092      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006320:	4b64      	ldr	r3, [pc, #400]	@ (80064b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8006322:	e090      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006324:	4b64      	ldr	r3, [pc, #400]	@ (80064b8 <HAL_ADC_ConfigChannel+0x7e0>)
 8006326:	e08e      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006328:	2301      	movs	r3, #1
 800632a:	e08c      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4962      	ldr	r1, [pc, #392]	@ (80064bc <HAL_ADC_ConfigChannel+0x7e4>)
 8006332:	428b      	cmp	r3, r1
 8006334:	d140      	bne.n	80063b8 <HAL_ADC_ConfigChannel+0x6e0>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	494f      	ldr	r1, [pc, #316]	@ (8006478 <HAL_ADC_ConfigChannel+0x7a0>)
 800633c:	428b      	cmp	r3, r1
 800633e:	d039      	beq.n	80063b4 <HAL_ADC_ConfigChannel+0x6dc>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	494d      	ldr	r1, [pc, #308]	@ (800647c <HAL_ADC_ConfigChannel+0x7a4>)
 8006346:	428b      	cmp	r3, r1
 8006348:	d032      	beq.n	80063b0 <HAL_ADC_ConfigChannel+0x6d8>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	494c      	ldr	r1, [pc, #304]	@ (8006480 <HAL_ADC_ConfigChannel+0x7a8>)
 8006350:	428b      	cmp	r3, r1
 8006352:	d02b      	beq.n	80063ac <HAL_ADC_ConfigChannel+0x6d4>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	494a      	ldr	r1, [pc, #296]	@ (8006484 <HAL_ADC_ConfigChannel+0x7ac>)
 800635a:	428b      	cmp	r3, r1
 800635c:	d024      	beq.n	80063a8 <HAL_ADC_ConfigChannel+0x6d0>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4949      	ldr	r1, [pc, #292]	@ (8006488 <HAL_ADC_ConfigChannel+0x7b0>)
 8006364:	428b      	cmp	r3, r1
 8006366:	d01d      	beq.n	80063a4 <HAL_ADC_ConfigChannel+0x6cc>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4947      	ldr	r1, [pc, #284]	@ (800648c <HAL_ADC_ConfigChannel+0x7b4>)
 800636e:	428b      	cmp	r3, r1
 8006370:	d016      	beq.n	80063a0 <HAL_ADC_ConfigChannel+0x6c8>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4946      	ldr	r1, [pc, #280]	@ (8006490 <HAL_ADC_ConfigChannel+0x7b8>)
 8006378:	428b      	cmp	r3, r1
 800637a:	d00f      	beq.n	800639c <HAL_ADC_ConfigChannel+0x6c4>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4944      	ldr	r1, [pc, #272]	@ (8006494 <HAL_ADC_ConfigChannel+0x7bc>)
 8006382:	428b      	cmp	r3, r1
 8006384:	d008      	beq.n	8006398 <HAL_ADC_ConfigChannel+0x6c0>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4944      	ldr	r1, [pc, #272]	@ (800649c <HAL_ADC_ConfigChannel+0x7c4>)
 800638c:	428b      	cmp	r3, r1
 800638e:	d101      	bne.n	8006394 <HAL_ADC_ConfigChannel+0x6bc>
 8006390:	4b43      	ldr	r3, [pc, #268]	@ (80064a0 <HAL_ADC_ConfigChannel+0x7c8>)
 8006392:	e058      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006394:	2300      	movs	r3, #0
 8006396:	e056      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006398:	4b43      	ldr	r3, [pc, #268]	@ (80064a8 <HAL_ADC_ConfigChannel+0x7d0>)
 800639a:	e054      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 800639c:	4b3d      	ldr	r3, [pc, #244]	@ (8006494 <HAL_ADC_ConfigChannel+0x7bc>)
 800639e:	e052      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 80063a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006490 <HAL_ADC_ConfigChannel+0x7b8>)
 80063a2:	e050      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 80063a4:	4b41      	ldr	r3, [pc, #260]	@ (80064ac <HAL_ADC_ConfigChannel+0x7d4>)
 80063a6:	e04e      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 80063a8:	4b41      	ldr	r3, [pc, #260]	@ (80064b0 <HAL_ADC_ConfigChannel+0x7d8>)
 80063aa:	e04c      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 80063ac:	4b41      	ldr	r3, [pc, #260]	@ (80064b4 <HAL_ADC_ConfigChannel+0x7dc>)
 80063ae:	e04a      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 80063b0:	4b41      	ldr	r3, [pc, #260]	@ (80064b8 <HAL_ADC_ConfigChannel+0x7e0>)
 80063b2:	e048      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e046      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4940      	ldr	r1, [pc, #256]	@ (80064c0 <HAL_ADC_ConfigChannel+0x7e8>)
 80063be:	428b      	cmp	r3, r1
 80063c0:	d140      	bne.n	8006444 <HAL_ADC_ConfigChannel+0x76c>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	492c      	ldr	r1, [pc, #176]	@ (8006478 <HAL_ADC_ConfigChannel+0x7a0>)
 80063c8:	428b      	cmp	r3, r1
 80063ca:	d039      	beq.n	8006440 <HAL_ADC_ConfigChannel+0x768>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	492a      	ldr	r1, [pc, #168]	@ (800647c <HAL_ADC_ConfigChannel+0x7a4>)
 80063d2:	428b      	cmp	r3, r1
 80063d4:	d032      	beq.n	800643c <HAL_ADC_ConfigChannel+0x764>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4929      	ldr	r1, [pc, #164]	@ (8006480 <HAL_ADC_ConfigChannel+0x7a8>)
 80063dc:	428b      	cmp	r3, r1
 80063de:	d02b      	beq.n	8006438 <HAL_ADC_ConfigChannel+0x760>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4927      	ldr	r1, [pc, #156]	@ (8006484 <HAL_ADC_ConfigChannel+0x7ac>)
 80063e6:	428b      	cmp	r3, r1
 80063e8:	d024      	beq.n	8006434 <HAL_ADC_ConfigChannel+0x75c>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4926      	ldr	r1, [pc, #152]	@ (8006488 <HAL_ADC_ConfigChannel+0x7b0>)
 80063f0:	428b      	cmp	r3, r1
 80063f2:	d01d      	beq.n	8006430 <HAL_ADC_ConfigChannel+0x758>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4924      	ldr	r1, [pc, #144]	@ (800648c <HAL_ADC_ConfigChannel+0x7b4>)
 80063fa:	428b      	cmp	r3, r1
 80063fc:	d016      	beq.n	800642c <HAL_ADC_ConfigChannel+0x754>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4923      	ldr	r1, [pc, #140]	@ (8006490 <HAL_ADC_ConfigChannel+0x7b8>)
 8006404:	428b      	cmp	r3, r1
 8006406:	d00f      	beq.n	8006428 <HAL_ADC_ConfigChannel+0x750>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4926      	ldr	r1, [pc, #152]	@ (80064a8 <HAL_ADC_ConfigChannel+0x7d0>)
 800640e:	428b      	cmp	r3, r1
 8006410:	d008      	beq.n	8006424 <HAL_ADC_ConfigChannel+0x74c>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	492b      	ldr	r1, [pc, #172]	@ (80064c4 <HAL_ADC_ConfigChannel+0x7ec>)
 8006418:	428b      	cmp	r3, r1
 800641a:	d101      	bne.n	8006420 <HAL_ADC_ConfigChannel+0x748>
 800641c:	4b2a      	ldr	r3, [pc, #168]	@ (80064c8 <HAL_ADC_ConfigChannel+0x7f0>)
 800641e:	e012      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006420:	2300      	movs	r3, #0
 8006422:	e010      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006424:	4b27      	ldr	r3, [pc, #156]	@ (80064c4 <HAL_ADC_ConfigChannel+0x7ec>)
 8006426:	e00e      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006428:	4b1a      	ldr	r3, [pc, #104]	@ (8006494 <HAL_ADC_ConfigChannel+0x7bc>)
 800642a:	e00c      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 800642c:	4b18      	ldr	r3, [pc, #96]	@ (8006490 <HAL_ADC_ConfigChannel+0x7b8>)
 800642e:	e00a      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006430:	4b1e      	ldr	r3, [pc, #120]	@ (80064ac <HAL_ADC_ConfigChannel+0x7d4>)
 8006432:	e008      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006434:	4b1e      	ldr	r3, [pc, #120]	@ (80064b0 <HAL_ADC_ConfigChannel+0x7d8>)
 8006436:	e006      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006438:	4b1e      	ldr	r3, [pc, #120]	@ (80064b4 <HAL_ADC_ConfigChannel+0x7dc>)
 800643a:	e004      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 800643c:	4b1e      	ldr	r3, [pc, #120]	@ (80064b8 <HAL_ADC_ConfigChannel+0x7e0>)
 800643e:	e002      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <HAL_ADC_ConfigChannel+0x76e>
 8006444:	2300      	movs	r3, #0
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f7fe fd9f 	bl	8004f8c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f280 80f6 	bge.w	8006644 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a05      	ldr	r2, [pc, #20]	@ (8006474 <HAL_ADC_ConfigChannel+0x79c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d004      	beq.n	800646c <HAL_ADC_ConfigChannel+0x794>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a15      	ldr	r2, [pc, #84]	@ (80064bc <HAL_ADC_ConfigChannel+0x7e4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d131      	bne.n	80064d0 <HAL_ADC_ConfigChannel+0x7f8>
 800646c:	4b17      	ldr	r3, [pc, #92]	@ (80064cc <HAL_ADC_ConfigChannel+0x7f4>)
 800646e:	e030      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x7fa>
 8006470:	47ff0000 	.word	0x47ff0000
 8006474:	40022000 	.word	0x40022000
 8006478:	04300002 	.word	0x04300002
 800647c:	08600004 	.word	0x08600004
 8006480:	0c900008 	.word	0x0c900008
 8006484:	10c00010 	.word	0x10c00010
 8006488:	14f00020 	.word	0x14f00020
 800648c:	2a000400 	.word	0x2a000400
 8006490:	2e300800 	.word	0x2e300800
 8006494:	32601000 	.word	0x32601000
 8006498:	43210000 	.word	0x43210000
 800649c:	4b840000 	.word	0x4b840000
 80064a0:	4fb80000 	.word	0x4fb80000
 80064a4:	47520000 	.word	0x47520000
 80064a8:	36902000 	.word	0x36902000
 80064ac:	25b00200 	.word	0x25b00200
 80064b0:	21800100 	.word	0x21800100
 80064b4:	1d500080 	.word	0x1d500080
 80064b8:	19200040 	.word	0x19200040
 80064bc:	40022100 	.word	0x40022100
 80064c0:	58026000 	.word	0x58026000
 80064c4:	3ac04000 	.word	0x3ac04000
 80064c8:	3ef08000 	.word	0x3ef08000
 80064cc:	40022300 	.word	0x40022300
 80064d0:	4b61      	ldr	r3, [pc, #388]	@ (8006658 <HAL_ADC_ConfigChannel+0x980>)
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fe fd4c 	bl	8004f70 <LL_ADC_GetCommonPathInternalCh>
 80064d8:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a5f      	ldr	r2, [pc, #380]	@ (800665c <HAL_ADC_ConfigChannel+0x984>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d004      	beq.n	80064ee <HAL_ADC_ConfigChannel+0x816>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a5d      	ldr	r2, [pc, #372]	@ (8006660 <HAL_ADC_ConfigChannel+0x988>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d10e      	bne.n	800650c <HAL_ADC_ConfigChannel+0x834>
 80064ee:	485b      	ldr	r0, [pc, #364]	@ (800665c <HAL_ADC_ConfigChannel+0x984>)
 80064f0:	f7fe ffe4 	bl	80054bc <LL_ADC_IsEnabled>
 80064f4:	4604      	mov	r4, r0
 80064f6:	485a      	ldr	r0, [pc, #360]	@ (8006660 <HAL_ADC_ConfigChannel+0x988>)
 80064f8:	f7fe ffe0 	bl	80054bc <LL_ADC_IsEnabled>
 80064fc:	4603      	mov	r3, r0
 80064fe:	4323      	orrs	r3, r4
 8006500:	2b00      	cmp	r3, #0
 8006502:	bf0c      	ite	eq
 8006504:	2301      	moveq	r3, #1
 8006506:	2300      	movne	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	e008      	b.n	800651e <HAL_ADC_ConfigChannel+0x846>
 800650c:	4855      	ldr	r0, [pc, #340]	@ (8006664 <HAL_ADC_ConfigChannel+0x98c>)
 800650e:	f7fe ffd5 	bl	80054bc <LL_ADC_IsEnabled>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	bf0c      	ite	eq
 8006518:	2301      	moveq	r3, #1
 800651a:	2300      	movne	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d07d      	beq.n	800661e <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a50      	ldr	r2, [pc, #320]	@ (8006668 <HAL_ADC_ConfigChannel+0x990>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d130      	bne.n	800658e <HAL_ADC_ConfigChannel+0x8b6>
 800652c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800652e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d12b      	bne.n	800658e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a4a      	ldr	r2, [pc, #296]	@ (8006664 <HAL_ADC_ConfigChannel+0x98c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	f040 8081 	bne.w	8006644 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a45      	ldr	r2, [pc, #276]	@ (800665c <HAL_ADC_ConfigChannel+0x984>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d004      	beq.n	8006556 <HAL_ADC_ConfigChannel+0x87e>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a43      	ldr	r2, [pc, #268]	@ (8006660 <HAL_ADC_ConfigChannel+0x988>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d101      	bne.n	800655a <HAL_ADC_ConfigChannel+0x882>
 8006556:	4a45      	ldr	r2, [pc, #276]	@ (800666c <HAL_ADC_ConfigChannel+0x994>)
 8006558:	e000      	b.n	800655c <HAL_ADC_ConfigChannel+0x884>
 800655a:	4a3f      	ldr	r2, [pc, #252]	@ (8006658 <HAL_ADC_ConfigChannel+0x980>)
 800655c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800655e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006562:	4619      	mov	r1, r3
 8006564:	4610      	mov	r0, r2
 8006566:	f7fe fcf0 	bl	8004f4a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800656a:	4b41      	ldr	r3, [pc, #260]	@ (8006670 <HAL_ADC_ConfigChannel+0x998>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	099b      	lsrs	r3, r3, #6
 8006570:	4a40      	ldr	r2, [pc, #256]	@ (8006674 <HAL_ADC_ConfigChannel+0x99c>)
 8006572:	fba2 2303 	umull	r2, r3, r2, r3
 8006576:	099b      	lsrs	r3, r3, #6
 8006578:	3301      	adds	r3, #1
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800657e:	e002      	b.n	8006586 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3b01      	subs	r3, #1
 8006584:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f9      	bne.n	8006580 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800658c:	e05a      	b.n	8006644 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a39      	ldr	r2, [pc, #228]	@ (8006678 <HAL_ADC_ConfigChannel+0x9a0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d11e      	bne.n	80065d6 <HAL_ADC_ConfigChannel+0x8fe>
 8006598:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800659a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d119      	bne.n	80065d6 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a2f      	ldr	r2, [pc, #188]	@ (8006664 <HAL_ADC_ConfigChannel+0x98c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d14b      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a2a      	ldr	r2, [pc, #168]	@ (800665c <HAL_ADC_ConfigChannel+0x984>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d004      	beq.n	80065c0 <HAL_ADC_ConfigChannel+0x8e8>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a29      	ldr	r2, [pc, #164]	@ (8006660 <HAL_ADC_ConfigChannel+0x988>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d101      	bne.n	80065c4 <HAL_ADC_ConfigChannel+0x8ec>
 80065c0:	4a2a      	ldr	r2, [pc, #168]	@ (800666c <HAL_ADC_ConfigChannel+0x994>)
 80065c2:	e000      	b.n	80065c6 <HAL_ADC_ConfigChannel+0x8ee>
 80065c4:	4a24      	ldr	r2, [pc, #144]	@ (8006658 <HAL_ADC_ConfigChannel+0x980>)
 80065c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80065c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065cc:	4619      	mov	r1, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	f7fe fcbb 	bl	8004f4a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065d4:	e036      	b.n	8006644 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a28      	ldr	r2, [pc, #160]	@ (800667c <HAL_ADC_ConfigChannel+0x9a4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d131      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x96c>
 80065e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80065e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d12c      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006664 <HAL_ADC_ConfigChannel+0x98c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d127      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a18      	ldr	r2, [pc, #96]	@ (800665c <HAL_ADC_ConfigChannel+0x984>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <HAL_ADC_ConfigChannel+0x930>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a17      	ldr	r2, [pc, #92]	@ (8006660 <HAL_ADC_ConfigChannel+0x988>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d101      	bne.n	800660c <HAL_ADC_ConfigChannel+0x934>
 8006608:	4a18      	ldr	r2, [pc, #96]	@ (800666c <HAL_ADC_ConfigChannel+0x994>)
 800660a:	e000      	b.n	800660e <HAL_ADC_ConfigChannel+0x936>
 800660c:	4a12      	ldr	r2, [pc, #72]	@ (8006658 <HAL_ADC_ConfigChannel+0x980>)
 800660e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006610:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006614:	4619      	mov	r1, r3
 8006616:	4610      	mov	r0, r2
 8006618:	f7fe fc97 	bl	8004f4a <LL_ADC_SetCommonPathInternalCh>
 800661c:	e012      	b.n	8006644 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006622:	f043 0220 	orr.w	r2, r3, #32
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8006630:	e008      	b.n	8006644 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006636:	f043 0220 	orr.w	r2, r3, #32
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800664c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8006650:	4618      	mov	r0, r3
 8006652:	3794      	adds	r7, #148	@ 0x94
 8006654:	46bd      	mov	sp, r7
 8006656:	bd90      	pop	{r4, r7, pc}
 8006658:	58026300 	.word	0x58026300
 800665c:	40022000 	.word	0x40022000
 8006660:	40022100 	.word	0x40022100
 8006664:	58026000 	.word	0x58026000
 8006668:	c7520000 	.word	0xc7520000
 800666c:	40022300 	.word	0x40022300
 8006670:	24000018 	.word	0x24000018
 8006674:	053e2d63 	.word	0x053e2d63
 8006678:	c3210000 	.word	0xc3210000
 800667c:	cb840000 	.word	0xcb840000

08006680 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800668a:	2300      	movs	r3, #0
 800668c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe ff5e 	bl	8005558 <LL_ADC_REG_IsConversionOngoing>
 800669c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe ff80 	bl	80055a8 <LL_ADC_INJ_IsConversionOngoing>
 80066a8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d103      	bne.n	80066b8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 8098 	beq.w	80067e8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d02a      	beq.n	800671c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	7e5b      	ldrb	r3, [r3, #25]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d126      	bne.n	800671c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	7e1b      	ldrb	r3, [r3, #24]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d122      	bne.n	800671c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80066d6:	2301      	movs	r3, #1
 80066d8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80066da:	e014      	b.n	8006706 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	4a45      	ldr	r2, [pc, #276]	@ (80067f4 <ADC_ConversionStop+0x174>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d90d      	bls.n	8006700 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e8:	f043 0210 	orr.w	r2, r3, #16
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066f4:	f043 0201 	orr.w	r2, r3, #1
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e074      	b.n	80067ea <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	3301      	adds	r3, #1
 8006704:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006710:	2b40      	cmp	r3, #64	@ 0x40
 8006712:	d1e3      	bne.n	80066dc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2240      	movs	r2, #64	@ 0x40
 800671a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d014      	beq.n	800674c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe ff16 	bl	8005558 <LL_ADC_REG_IsConversionOngoing>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00c      	beq.n	800674c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe fed3 	bl	80054e2 <LL_ADC_IsDisableOngoing>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d104      	bne.n	800674c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe fef2 	bl	8005530 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d014      	beq.n	800677c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4618      	mov	r0, r3
 8006758:	f7fe ff26 	bl	80055a8 <LL_ADC_INJ_IsConversionOngoing>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00c      	beq.n	800677c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe febb 	bl	80054e2 <LL_ADC_IsDisableOngoing>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe ff02 	bl	8005580 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d005      	beq.n	800678e <ADC_ConversionStop+0x10e>
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	2b03      	cmp	r3, #3
 8006786:	d105      	bne.n	8006794 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006788:	230c      	movs	r3, #12
 800678a:	617b      	str	r3, [r7, #20]
        break;
 800678c:	e005      	b.n	800679a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800678e:	2308      	movs	r3, #8
 8006790:	617b      	str	r3, [r7, #20]
        break;
 8006792:	e002      	b.n	800679a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006794:	2304      	movs	r3, #4
 8006796:	617b      	str	r3, [r7, #20]
        break;
 8006798:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800679a:	f7fe fb93 	bl	8004ec4 <HAL_GetTick>
 800679e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80067a0:	e01b      	b.n	80067da <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80067a2:	f7fe fb8f 	bl	8004ec4 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b05      	cmp	r3, #5
 80067ae:	d914      	bls.n	80067da <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	4013      	ands	r3, r2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00d      	beq.n	80067da <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c2:	f043 0210 	orr.w	r2, r3, #16
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067ce:	f043 0201 	orr.w	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e007      	b.n	80067ea <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	4013      	ands	r3, r2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1dc      	bne.n	80067a2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3720      	adds	r7, #32
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	000cdbff 	.word	0x000cdbff

080067f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe fe59 	bl	80054bc <LL_ADC_IsEnabled>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d16e      	bne.n	80068ee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689a      	ldr	r2, [r3, #8]
 8006816:	4b38      	ldr	r3, [pc, #224]	@ (80068f8 <ADC_Enable+0x100>)
 8006818:	4013      	ands	r3, r2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00d      	beq.n	800683a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006822:	f043 0210 	orr.w	r2, r3, #16
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800682e:	f043 0201 	orr.w	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e05a      	b.n	80068f0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe fe14 	bl	800546c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006844:	f7fe fb3e 	bl	8004ec4 <HAL_GetTick>
 8006848:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a2b      	ldr	r2, [pc, #172]	@ (80068fc <ADC_Enable+0x104>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d004      	beq.n	800685e <ADC_Enable+0x66>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a29      	ldr	r2, [pc, #164]	@ (8006900 <ADC_Enable+0x108>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d101      	bne.n	8006862 <ADC_Enable+0x6a>
 800685e:	4b29      	ldr	r3, [pc, #164]	@ (8006904 <ADC_Enable+0x10c>)
 8006860:	e000      	b.n	8006864 <ADC_Enable+0x6c>
 8006862:	4b29      	ldr	r3, [pc, #164]	@ (8006908 <ADC_Enable+0x110>)
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe fda5 	bl	80053b4 <LL_ADC_GetMultimode>
 800686a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a23      	ldr	r2, [pc, #140]	@ (8006900 <ADC_Enable+0x108>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d002      	beq.n	800687c <ADC_Enable+0x84>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	e000      	b.n	800687e <ADC_Enable+0x86>
 800687c:	4b1f      	ldr	r3, [pc, #124]	@ (80068fc <ADC_Enable+0x104>)
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6812      	ldr	r2, [r2, #0]
 8006882:	4293      	cmp	r3, r2
 8006884:	d02c      	beq.n	80068e0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d130      	bne.n	80068ee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800688c:	e028      	b.n	80068e0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe fe12 	bl	80054bc <LL_ADC_IsEnabled>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d104      	bne.n	80068a8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fe fde2 	bl	800546c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80068a8:	f7fe fb0c 	bl	8004ec4 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d914      	bls.n	80068e0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d00d      	beq.n	80068e0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068c8:	f043 0210 	orr.w	r2, r3, #16
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068d4:	f043 0201 	orr.w	r2, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e007      	b.n	80068f0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d1cf      	bne.n	800688e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	8000003f 	.word	0x8000003f
 80068fc:	40022000 	.word	0x40022000
 8006900:	40022100 	.word	0x40022100
 8006904:	40022300 	.word	0x40022300
 8006908:	58026300 	.word	0x58026300

0800690c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f7fe fde2 	bl	80054e2 <LL_ADC_IsDisableOngoing>
 800691e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f7fe fdc9 	bl	80054bc <LL_ADC_IsEnabled>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d047      	beq.n	80069c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d144      	bne.n	80069c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f003 030d 	and.w	r3, r3, #13
 8006940:	2b01      	cmp	r3, #1
 8006942:	d10c      	bne.n	800695e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f7fe fda3 	bl	8005494 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2203      	movs	r2, #3
 8006954:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006956:	f7fe fab5 	bl	8004ec4 <HAL_GetTick>
 800695a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800695c:	e029      	b.n	80069b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006962:	f043 0210 	orr.w	r2, r3, #16
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800696e:	f043 0201 	orr.w	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e023      	b.n	80069c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800697a:	f7fe faa3 	bl	8004ec4 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d914      	bls.n	80069b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00d      	beq.n	80069b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800699a:	f043 0210 	orr.w	r2, r3, #16
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069a6:	f043 0201 	orr.w	r2, r3, #1
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e007      	b.n	80069c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1dc      	bne.n	800697a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b084      	sub	sp, #16
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d14b      	bne.n	8006a7c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d021      	beq.n	8006a42 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe fbee 	bl	80051e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d032      	beq.n	8006a74 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d12b      	bne.n	8006a74 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d11f      	bne.n	8006a74 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a38:	f043 0201 	orr.w	r2, r3, #1
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	661a      	str	r2, [r3, #96]	@ 0x60
 8006a40:	e018      	b.n	8006a74 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d111      	bne.n	8006a74 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d105      	bne.n	8006a74 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a6c:	f043 0201 	orr.w	r2, r3, #1
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f7f9 ff11 	bl	800089c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006a7a:	e00e      	b.n	8006a9a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7ff f91b 	bl	8005cc4 <HAL_ADC_ErrorCallback>
}
 8006a8e:	e004      	b.n	8006a9a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	4798      	blx	r3
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7f9 feb5 	bl	8000820 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ab6:	bf00      	nop
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ad0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006adc:	f043 0204 	orr.w	r2, r3, #4
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff f8ed 	bl	8005cc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006aea:	bf00      	nop
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a6c      	ldr	r2, [pc, #432]	@ (8006cb4 <ADC_ConfigureBoostMode+0x1c0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d004      	beq.n	8006b10 <ADC_ConfigureBoostMode+0x1c>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a6b      	ldr	r2, [pc, #428]	@ (8006cb8 <ADC_ConfigureBoostMode+0x1c4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d109      	bne.n	8006b24 <ADC_ConfigureBoostMode+0x30>
 8006b10:	4b6a      	ldr	r3, [pc, #424]	@ (8006cbc <ADC_ConfigureBoostMode+0x1c8>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bf14      	ite	ne
 8006b1c:	2301      	movne	r3, #1
 8006b1e:	2300      	moveq	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	e008      	b.n	8006b36 <ADC_ConfigureBoostMode+0x42>
 8006b24:	4b66      	ldr	r3, [pc, #408]	@ (8006cc0 <ADC_ConfigureBoostMode+0x1cc>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	bf14      	ite	ne
 8006b30:	2301      	movne	r3, #1
 8006b32:	2300      	moveq	r3, #0
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d01c      	beq.n	8006b74 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006b3a:	f005 fd3d 	bl	800c5b8 <HAL_RCC_GetHCLKFreq>
 8006b3e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b48:	d010      	beq.n	8006b6c <ADC_ConfigureBoostMode+0x78>
 8006b4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b4e:	d873      	bhi.n	8006c38 <ADC_ConfigureBoostMode+0x144>
 8006b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b54:	d002      	beq.n	8006b5c <ADC_ConfigureBoostMode+0x68>
 8006b56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b5a:	d16d      	bne.n	8006c38 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	0c1b      	lsrs	r3, r3, #16
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b68:	60fb      	str	r3, [r7, #12]
        break;
 8006b6a:	e068      	b.n	8006c3e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	089b      	lsrs	r3, r3, #2
 8006b70:	60fb      	str	r3, [r7, #12]
        break;
 8006b72:	e064      	b.n	8006c3e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006b74:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006b78:	f04f 0100 	mov.w	r1, #0
 8006b7c:	f006 ff18 	bl	800d9b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b80:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006b8a:	d051      	beq.n	8006c30 <ADC_ConfigureBoostMode+0x13c>
 8006b8c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006b90:	d854      	bhi.n	8006c3c <ADC_ConfigureBoostMode+0x148>
 8006b92:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006b96:	d047      	beq.n	8006c28 <ADC_ConfigureBoostMode+0x134>
 8006b98:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006b9c:	d84e      	bhi.n	8006c3c <ADC_ConfigureBoostMode+0x148>
 8006b9e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006ba2:	d03d      	beq.n	8006c20 <ADC_ConfigureBoostMode+0x12c>
 8006ba4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006ba8:	d848      	bhi.n	8006c3c <ADC_ConfigureBoostMode+0x148>
 8006baa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bae:	d033      	beq.n	8006c18 <ADC_ConfigureBoostMode+0x124>
 8006bb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bb4:	d842      	bhi.n	8006c3c <ADC_ConfigureBoostMode+0x148>
 8006bb6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006bba:	d029      	beq.n	8006c10 <ADC_ConfigureBoostMode+0x11c>
 8006bbc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006bc0:	d83c      	bhi.n	8006c3c <ADC_ConfigureBoostMode+0x148>
 8006bc2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006bc6:	d01a      	beq.n	8006bfe <ADC_ConfigureBoostMode+0x10a>
 8006bc8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006bcc:	d836      	bhi.n	8006c3c <ADC_ConfigureBoostMode+0x148>
 8006bce:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006bd2:	d014      	beq.n	8006bfe <ADC_ConfigureBoostMode+0x10a>
 8006bd4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006bd8:	d830      	bhi.n	8006c3c <ADC_ConfigureBoostMode+0x148>
 8006bda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bde:	d00e      	beq.n	8006bfe <ADC_ConfigureBoostMode+0x10a>
 8006be0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006be4:	d82a      	bhi.n	8006c3c <ADC_ConfigureBoostMode+0x148>
 8006be6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006bea:	d008      	beq.n	8006bfe <ADC_ConfigureBoostMode+0x10a>
 8006bec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006bf0:	d824      	bhi.n	8006c3c <ADC_ConfigureBoostMode+0x148>
 8006bf2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006bf6:	d002      	beq.n	8006bfe <ADC_ConfigureBoostMode+0x10a>
 8006bf8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006bfc:	d11e      	bne.n	8006c3c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	0c9b      	lsrs	r3, r3, #18
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0c:	60fb      	str	r3, [r7, #12]
        break;
 8006c0e:	e016      	b.n	8006c3e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	091b      	lsrs	r3, r3, #4
 8006c14:	60fb      	str	r3, [r7, #12]
        break;
 8006c16:	e012      	b.n	8006c3e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	095b      	lsrs	r3, r3, #5
 8006c1c:	60fb      	str	r3, [r7, #12]
        break;
 8006c1e:	e00e      	b.n	8006c3e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	099b      	lsrs	r3, r3, #6
 8006c24:	60fb      	str	r3, [r7, #12]
        break;
 8006c26:	e00a      	b.n	8006c3e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	09db      	lsrs	r3, r3, #7
 8006c2c:	60fb      	str	r3, [r7, #12]
        break;
 8006c2e:	e006      	b.n	8006c3e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	0a1b      	lsrs	r3, r3, #8
 8006c34:	60fb      	str	r3, [r7, #12]
        break;
 8006c36:	e002      	b.n	8006c3e <ADC_ConfigureBoostMode+0x14a>
        break;
 8006c38:	bf00      	nop
 8006c3a:	e000      	b.n	8006c3e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006c3c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	085b      	lsrs	r3, r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4a1f      	ldr	r2, [pc, #124]	@ (8006cc4 <ADC_ConfigureBoostMode+0x1d0>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d808      	bhi.n	8006c5e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006c5a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006c5c:	e025      	b.n	8006caa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4a19      	ldr	r2, [pc, #100]	@ (8006cc8 <ADC_ConfigureBoostMode+0x1d4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d80a      	bhi.n	8006c7c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c78:	609a      	str	r2, [r3, #8]
}
 8006c7a:	e016      	b.n	8006caa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4a13      	ldr	r2, [pc, #76]	@ (8006ccc <ADC_ConfigureBoostMode+0x1d8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d80a      	bhi.n	8006c9a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c96:	609a      	str	r2, [r3, #8]
}
 8006c98:	e007      	b.n	8006caa <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006ca8:	609a      	str	r2, [r3, #8]
}
 8006caa:	bf00      	nop
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40022000 	.word	0x40022000
 8006cb8:	40022100 	.word	0x40022100
 8006cbc:	40022300 	.word	0x40022300
 8006cc0:	58026300 	.word	0x58026300
 8006cc4:	005f5e10 	.word	0x005f5e10
 8006cc8:	00bebc20 	.word	0x00bebc20
 8006ccc:	017d7840 	.word	0x017d7840

08006cd0 <LL_ADC_IsEnabled>:
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <LL_ADC_IsEnabled+0x18>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e000      	b.n	8006cea <LL_ADC_IsEnabled+0x1a>
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <LL_ADC_REG_IsConversionOngoing>:
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d101      	bne.n	8006d0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006d1c:	b590      	push	{r4, r7, lr}
 8006d1e:	b0a3      	sub	sp, #140	@ 0x8c
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d101      	bne.n	8006d3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006d36:	2302      	movs	r3, #2
 8006d38:	e0c1      	b.n	8006ebe <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006d42:	2300      	movs	r3, #0
 8006d44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006d46:	2300      	movs	r3, #0
 8006d48:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a5e      	ldr	r2, [pc, #376]	@ (8006ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d102      	bne.n	8006d5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006d54:	4b5d      	ldr	r3, [pc, #372]	@ (8006ecc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	e001      	b.n	8006d5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10b      	bne.n	8006d7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d68:	f043 0220 	orr.w	r2, r3, #32
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e0a0      	b.n	8006ebe <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7ff ffb9 	bl	8006cf6 <LL_ADC_REG_IsConversionOngoing>
 8006d84:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff ffb2 	bl	8006cf6 <LL_ADC_REG_IsConversionOngoing>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f040 8081 	bne.w	8006e9c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d17c      	bne.n	8006e9c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a48      	ldr	r2, [pc, #288]	@ (8006ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d004      	beq.n	8006db6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a46      	ldr	r2, [pc, #280]	@ (8006ecc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d101      	bne.n	8006dba <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006db6:	4b46      	ldr	r3, [pc, #280]	@ (8006ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006db8:	e000      	b.n	8006dbc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006dba:	4b46      	ldr	r3, [pc, #280]	@ (8006ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006dbc:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d039      	beq.n	8006e3a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006dc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006dd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a3a      	ldr	r2, [pc, #232]	@ (8006ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a39      	ldr	r2, [pc, #228]	@ (8006ecc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d10e      	bne.n	8006e0a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006dec:	4836      	ldr	r0, [pc, #216]	@ (8006ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006dee:	f7ff ff6f 	bl	8006cd0 <LL_ADC_IsEnabled>
 8006df2:	4604      	mov	r4, r0
 8006df4:	4835      	ldr	r0, [pc, #212]	@ (8006ecc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006df6:	f7ff ff6b 	bl	8006cd0 <LL_ADC_IsEnabled>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4323      	orrs	r3, r4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf0c      	ite	eq
 8006e02:	2301      	moveq	r3, #1
 8006e04:	2300      	movne	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	e008      	b.n	8006e1c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006e0a:	4833      	ldr	r0, [pc, #204]	@ (8006ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006e0c:	f7ff ff60 	bl	8006cd0 <LL_ADC_IsEnabled>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	bf0c      	ite	eq
 8006e16:	2301      	moveq	r3, #1
 8006e18:	2300      	movne	r3, #0
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d047      	beq.n	8006eb0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006e20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	4b2d      	ldr	r3, [pc, #180]	@ (8006edc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006e26:	4013      	ands	r3, r2
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	6811      	ldr	r1, [r2, #0]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	6892      	ldr	r2, [r2, #8]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	431a      	orrs	r2, r3
 8006e34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e36:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e38:	e03a      	b.n	8006eb0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006e3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e44:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d004      	beq.n	8006e5a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a1d      	ldr	r2, [pc, #116]	@ (8006ecc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d10e      	bne.n	8006e78 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8006e5a:	481b      	ldr	r0, [pc, #108]	@ (8006ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e5c:	f7ff ff38 	bl	8006cd0 <LL_ADC_IsEnabled>
 8006e60:	4604      	mov	r4, r0
 8006e62:	481a      	ldr	r0, [pc, #104]	@ (8006ecc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e64:	f7ff ff34 	bl	8006cd0 <LL_ADC_IsEnabled>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	4323      	orrs	r3, r4
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	bf0c      	ite	eq
 8006e70:	2301      	moveq	r3, #1
 8006e72:	2300      	movne	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	e008      	b.n	8006e8a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8006e78:	4817      	ldr	r0, [pc, #92]	@ (8006ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006e7a:	f7ff ff29 	bl	8006cd0 <LL_ADC_IsEnabled>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bf0c      	ite	eq
 8006e84:	2301      	moveq	r3, #1
 8006e86:	2300      	movne	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d010      	beq.n	8006eb0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006e8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e90:	689a      	ldr	r2, [r3, #8]
 8006e92:	4b12      	ldr	r3, [pc, #72]	@ (8006edc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006e94:	4013      	ands	r3, r2
 8006e96:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006e98:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e9a:	e009      	b.n	8006eb0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea0:	f043 0220 	orr.w	r2, r3, #32
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8006eae:	e000      	b.n	8006eb2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006eb0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006eba:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	378c      	adds	r7, #140	@ 0x8c
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd90      	pop	{r4, r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	40022000 	.word	0x40022000
 8006ecc:	40022100 	.word	0x40022100
 8006ed0:	40022300 	.word	0x40022300
 8006ed4:	58026300 	.word	0x58026300
 8006ed8:	58026000 	.word	0x58026000
 8006edc:	fffff0e0 	.word	0xfffff0e0

08006ee0 <__NVIC_SetPriorityGrouping>:
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f20 <__NVIC_SetPriorityGrouping+0x40>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006efc:	4013      	ands	r3, r2
 8006efe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006f08:	4b06      	ldr	r3, [pc, #24]	@ (8006f24 <__NVIC_SetPriorityGrouping+0x44>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f0e:	4a04      	ldr	r2, [pc, #16]	@ (8006f20 <__NVIC_SetPriorityGrouping+0x40>)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	60d3      	str	r3, [r2, #12]
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	e000ed00 	.word	0xe000ed00
 8006f24:	05fa0000 	.word	0x05fa0000

08006f28 <__NVIC_GetPriorityGrouping>:
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f2c:	4b04      	ldr	r3, [pc, #16]	@ (8006f40 <__NVIC_GetPriorityGrouping+0x18>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	0a1b      	lsrs	r3, r3, #8
 8006f32:	f003 0307 	and.w	r3, r3, #7
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	e000ed00 	.word	0xe000ed00

08006f44 <__NVIC_EnableIRQ>:
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	db0b      	blt.n	8006f6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	f003 021f 	and.w	r2, r3, #31
 8006f5c:	4907      	ldr	r1, [pc, #28]	@ (8006f7c <__NVIC_EnableIRQ+0x38>)
 8006f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	2001      	movs	r0, #1
 8006f66:	fa00 f202 	lsl.w	r2, r0, r2
 8006f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	e000e100 	.word	0xe000e100

08006f80 <__NVIC_DisableIRQ>:
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	db12      	blt.n	8006fb8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	f003 021f 	and.w	r2, r3, #31
 8006f98:	490a      	ldr	r1, [pc, #40]	@ (8006fc4 <__NVIC_DisableIRQ+0x44>)
 8006f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	2001      	movs	r0, #1
 8006fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8006fa6:	3320      	adds	r3, #32
 8006fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006fac:	f3bf 8f4f 	dsb	sy
}
 8006fb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006fb2:	f3bf 8f6f 	isb	sy
}
 8006fb6:	bf00      	nop
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	e000e100 	.word	0xe000e100

08006fc8 <__NVIC_SetPriority>:
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	6039      	str	r1, [r7, #0]
 8006fd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	db0a      	blt.n	8006ff2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	490c      	ldr	r1, [pc, #48]	@ (8007014 <__NVIC_SetPriority+0x4c>)
 8006fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fe6:	0112      	lsls	r2, r2, #4
 8006fe8:	b2d2      	uxtb	r2, r2
 8006fea:	440b      	add	r3, r1
 8006fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006ff0:	e00a      	b.n	8007008 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	4908      	ldr	r1, [pc, #32]	@ (8007018 <__NVIC_SetPriority+0x50>)
 8006ff8:	88fb      	ldrh	r3, [r7, #6]
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	3b04      	subs	r3, #4
 8007000:	0112      	lsls	r2, r2, #4
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	440b      	add	r3, r1
 8007006:	761a      	strb	r2, [r3, #24]
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	e000e100 	.word	0xe000e100
 8007018:	e000ed00 	.word	0xe000ed00

0800701c <NVIC_EncodePriority>:
{
 800701c:	b480      	push	{r7}
 800701e:	b089      	sub	sp, #36	@ 0x24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	f1c3 0307 	rsb	r3, r3, #7
 8007036:	2b04      	cmp	r3, #4
 8007038:	bf28      	it	cs
 800703a:	2304      	movcs	r3, #4
 800703c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	3304      	adds	r3, #4
 8007042:	2b06      	cmp	r3, #6
 8007044:	d902      	bls.n	800704c <NVIC_EncodePriority+0x30>
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	3b03      	subs	r3, #3
 800704a:	e000      	b.n	800704e <NVIC_EncodePriority+0x32>
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007050:	f04f 32ff 	mov.w	r2, #4294967295
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	fa02 f303 	lsl.w	r3, r2, r3
 800705a:	43da      	mvns	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	401a      	ands	r2, r3
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007064:	f04f 31ff 	mov.w	r1, #4294967295
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	fa01 f303 	lsl.w	r3, r1, r3
 800706e:	43d9      	mvns	r1, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007074:	4313      	orrs	r3, r2
}
 8007076:	4618      	mov	r0, r3
 8007078:	3724      	adds	r7, #36	@ 0x24
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
	...

08007084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3b01      	subs	r3, #1
 8007090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007094:	d301      	bcc.n	800709a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007096:	2301      	movs	r3, #1
 8007098:	e00f      	b.n	80070ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800709a:	4a0a      	ldr	r2, [pc, #40]	@ (80070c4 <SysTick_Config+0x40>)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3b01      	subs	r3, #1
 80070a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070a2:	210f      	movs	r1, #15
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	f7ff ff8e 	bl	8006fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070ac:	4b05      	ldr	r3, [pc, #20]	@ (80070c4 <SysTick_Config+0x40>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070b2:	4b04      	ldr	r3, [pc, #16]	@ (80070c4 <SysTick_Config+0x40>)
 80070b4:	2207      	movs	r2, #7
 80070b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	e000e010 	.word	0xe000e010

080070c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff ff05 	bl	8006ee0 <__NVIC_SetPriorityGrouping>
}
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b086      	sub	sp, #24
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	4603      	mov	r3, r0
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	607a      	str	r2, [r7, #4]
 80070ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80070ec:	f7ff ff1c 	bl	8006f28 <__NVIC_GetPriorityGrouping>
 80070f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	6978      	ldr	r0, [r7, #20]
 80070f8:	f7ff ff90 	bl	800701c <NVIC_EncodePriority>
 80070fc:	4602      	mov	r2, r0
 80070fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007102:	4611      	mov	r1, r2
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff ff5f 	bl	8006fc8 <__NVIC_SetPriority>
}
 800710a:	bf00      	nop
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	4603      	mov	r3, r0
 800711a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800711c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007120:	4618      	mov	r0, r3
 8007122:	f7ff ff0f 	bl	8006f44 <__NVIC_EnableIRQ>
}
 8007126:	bf00      	nop
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	4603      	mov	r3, r0
 8007136:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff ff1f 	bl	8006f80 <__NVIC_DisableIRQ>
}
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff ff96 	bl	8007084 <SysTick_Config>
 8007158:	4603      	mov	r3, r0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e014      	b.n	800719e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	791b      	ldrb	r3, [r3, #4]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d105      	bne.n	800718a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7fb ff73 	bl	8003070 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071bc:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01d      	beq.n	8007204 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d018      	beq.n	8007204 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2204      	movs	r2, #4
 80071d6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	f043 0201 	orr.w	r2, r3, #1
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80071ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80071fc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f827 	bl	8007252 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01d      	beq.n	800724a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d018      	beq.n	800724a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2204      	movs	r2, #4
 800721c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f043 0202 	orr.w	r2, r3, #2
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007232:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007242:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f955 	bl	80074f4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800724a:	bf00      	nop
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
	...

08007268 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08a      	sub	sp, #40	@ 0x28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <HAL_DAC_ConfigChannel+0x1e>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e12d      	b.n	80074e6 <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	795b      	ldrb	r3, [r3, #5]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <HAL_DAC_ConfigChannel+0x34>
 8007298:	2302      	movs	r3, #2
 800729a:	e124      	b.n	80074e6 <HAL_DAC_ConfigChannel+0x27e>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2202      	movs	r2, #2
 80072a6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d17a      	bne.n	80073a6 <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80072b0:	f7fd fe08 	bl	8004ec4 <HAL_GetTick>
 80072b4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d13d      	bne.n	8007338 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80072bc:	e018      	b.n	80072f0 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80072be:	f7fd fe01 	bl	8004ec4 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d911      	bls.n	80072f0 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072d2:	4b87      	ldr	r3, [pc, #540]	@ (80074f0 <HAL_DAC_ConfigChannel+0x288>)
 80072d4:	4013      	ands	r3, r2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f043 0208 	orr.w	r2, r3, #8
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2203      	movs	r2, #3
 80072ea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e0fa      	b.n	80074e6 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072f6:	4b7e      	ldr	r3, [pc, #504]	@ (80074f0 <HAL_DAC_ConfigChannel+0x288>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1df      	bne.n	80072be <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	6992      	ldr	r2, [r2, #24]
 8007306:	641a      	str	r2, [r3, #64]	@ 0x40
 8007308:	e020      	b.n	800734c <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800730a:	f7fd fddb 	bl	8004ec4 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	2b01      	cmp	r3, #1
 8007316:	d90f      	bls.n	8007338 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800731e:	2b00      	cmp	r3, #0
 8007320:	da0a      	bge.n	8007338 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f043 0208 	orr.w	r2, r3, #8
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2203      	movs	r2, #3
 8007332:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e0d6      	b.n	80074e6 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800733e:	2b00      	cmp	r3, #0
 8007340:	dbe3      	blt.n	800730a <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	6992      	ldr	r2, [r2, #24]
 800734a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f003 0310 	and.w	r3, r3, #16
 8007358:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800735c:	fa01 f303 	lsl.w	r3, r1, r3
 8007360:	43db      	mvns	r3, r3
 8007362:	ea02 0103 	and.w	r1, r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	69da      	ldr	r2, [r3, #28]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f003 0310 	and.w	r3, r3, #16
 8007370:	409a      	lsls	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f003 0310 	and.w	r3, r3, #16
 8007386:	21ff      	movs	r1, #255	@ 0xff
 8007388:	fa01 f303 	lsl.w	r3, r1, r3
 800738c:	43db      	mvns	r3, r3
 800738e:	ea02 0103 	and.w	r1, r2, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	6a1a      	ldr	r2, [r3, #32]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f003 0310 	and.w	r3, r3, #16
 800739c:	409a      	lsls	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d11d      	bne.n	80073ea <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	221f      	movs	r2, #31
 80073be:	fa02 f303 	lsl.w	r3, r2, r3
 80073c2:	43db      	mvns	r3, r3
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	4013      	ands	r3, r2
 80073c8:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f003 0310 	and.w	r3, r3, #16
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	fa02 f303 	lsl.w	r3, r2, r3
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	4313      	orrs	r3, r2
 80073e0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2207      	movs	r2, #7
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	43db      	mvns	r3, r3
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	4013      	ands	r3, r2
 8007404:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d102      	bne.n	8007414 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 800740e:	2300      	movs	r3, #0
 8007410:	627b      	str	r3, [r7, #36]	@ 0x24
 8007412:	e00f      	b.n	8007434 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	2b02      	cmp	r3, #2
 800741a:	d102      	bne.n	8007422 <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800741c:	2301      	movs	r3, #1
 800741e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007420:	e008      	b.n	8007434 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d102      	bne.n	8007430 <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800742a:	2301      	movs	r3, #1
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
 800742e:	e001      	b.n	8007434 <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007430:	2300      	movs	r3, #0
 8007432:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	4313      	orrs	r3, r2
 800743e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007440:	4313      	orrs	r3, r2
 8007442:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	fa02 f303 	lsl.w	r3, r2, r3
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	4313      	orrs	r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6819      	ldr	r1, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800746e:	fa02 f303 	lsl.w	r3, r2, r3
 8007472:	43da      	mvns	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	400a      	ands	r2, r1
 800747a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f003 0310 	and.w	r3, r3, #16
 800748a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800748e:	fa02 f303 	lsl.w	r3, r2, r3
 8007492:	43db      	mvns	r3, r3
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	4013      	ands	r3, r2
 8007498:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f003 0310 	and.w	r3, r3, #16
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	fa02 f303 	lsl.w	r3, r2, r3
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6819      	ldr	r1, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	22c0      	movs	r2, #192	@ 0xc0
 80074c8:	fa02 f303 	lsl.w	r3, r2, r3
 80074cc:	43da      	mvns	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	400a      	ands	r2, r1
 80074d4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80074e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3728      	adds	r7, #40	@ 0x28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20008000 	.word	0x20008000

080074f4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007510:	f7fd fcd8 	bl	8004ec4 <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e312      	b.n	8007b46 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a66      	ldr	r2, [pc, #408]	@ (80076c0 <HAL_DMA_Init+0x1b8>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d04a      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a65      	ldr	r2, [pc, #404]	@ (80076c4 <HAL_DMA_Init+0x1bc>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d045      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a63      	ldr	r2, [pc, #396]	@ (80076c8 <HAL_DMA_Init+0x1c0>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d040      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a62      	ldr	r2, [pc, #392]	@ (80076cc <HAL_DMA_Init+0x1c4>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d03b      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a60      	ldr	r2, [pc, #384]	@ (80076d0 <HAL_DMA_Init+0x1c8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d036      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a5f      	ldr	r2, [pc, #380]	@ (80076d4 <HAL_DMA_Init+0x1cc>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d031      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a5d      	ldr	r2, [pc, #372]	@ (80076d8 <HAL_DMA_Init+0x1d0>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d02c      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a5c      	ldr	r2, [pc, #368]	@ (80076dc <HAL_DMA_Init+0x1d4>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d027      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a5a      	ldr	r2, [pc, #360]	@ (80076e0 <HAL_DMA_Init+0x1d8>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d022      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a59      	ldr	r2, [pc, #356]	@ (80076e4 <HAL_DMA_Init+0x1dc>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d01d      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a57      	ldr	r2, [pc, #348]	@ (80076e8 <HAL_DMA_Init+0x1e0>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d018      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a56      	ldr	r2, [pc, #344]	@ (80076ec <HAL_DMA_Init+0x1e4>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d013      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a54      	ldr	r2, [pc, #336]	@ (80076f0 <HAL_DMA_Init+0x1e8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00e      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a53      	ldr	r2, [pc, #332]	@ (80076f4 <HAL_DMA_Init+0x1ec>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d009      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a51      	ldr	r2, [pc, #324]	@ (80076f8 <HAL_DMA_Init+0x1f0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d004      	beq.n	80075c0 <HAL_DMA_Init+0xb8>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a50      	ldr	r2, [pc, #320]	@ (80076fc <HAL_DMA_Init+0x1f4>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d101      	bne.n	80075c4 <HAL_DMA_Init+0xbc>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e000      	b.n	80075c6 <HAL_DMA_Init+0xbe>
 80075c4:	2300      	movs	r3, #0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 813c 	beq.w	8007844 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a37      	ldr	r2, [pc, #220]	@ (80076c0 <HAL_DMA_Init+0x1b8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d04a      	beq.n	800767c <HAL_DMA_Init+0x174>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a36      	ldr	r2, [pc, #216]	@ (80076c4 <HAL_DMA_Init+0x1bc>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d045      	beq.n	800767c <HAL_DMA_Init+0x174>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a34      	ldr	r2, [pc, #208]	@ (80076c8 <HAL_DMA_Init+0x1c0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d040      	beq.n	800767c <HAL_DMA_Init+0x174>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a33      	ldr	r2, [pc, #204]	@ (80076cc <HAL_DMA_Init+0x1c4>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d03b      	beq.n	800767c <HAL_DMA_Init+0x174>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a31      	ldr	r2, [pc, #196]	@ (80076d0 <HAL_DMA_Init+0x1c8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d036      	beq.n	800767c <HAL_DMA_Init+0x174>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a30      	ldr	r2, [pc, #192]	@ (80076d4 <HAL_DMA_Init+0x1cc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d031      	beq.n	800767c <HAL_DMA_Init+0x174>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a2e      	ldr	r2, [pc, #184]	@ (80076d8 <HAL_DMA_Init+0x1d0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d02c      	beq.n	800767c <HAL_DMA_Init+0x174>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a2d      	ldr	r2, [pc, #180]	@ (80076dc <HAL_DMA_Init+0x1d4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d027      	beq.n	800767c <HAL_DMA_Init+0x174>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a2b      	ldr	r2, [pc, #172]	@ (80076e0 <HAL_DMA_Init+0x1d8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d022      	beq.n	800767c <HAL_DMA_Init+0x174>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a2a      	ldr	r2, [pc, #168]	@ (80076e4 <HAL_DMA_Init+0x1dc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d01d      	beq.n	800767c <HAL_DMA_Init+0x174>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a28      	ldr	r2, [pc, #160]	@ (80076e8 <HAL_DMA_Init+0x1e0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d018      	beq.n	800767c <HAL_DMA_Init+0x174>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a27      	ldr	r2, [pc, #156]	@ (80076ec <HAL_DMA_Init+0x1e4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d013      	beq.n	800767c <HAL_DMA_Init+0x174>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a25      	ldr	r2, [pc, #148]	@ (80076f0 <HAL_DMA_Init+0x1e8>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00e      	beq.n	800767c <HAL_DMA_Init+0x174>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a24      	ldr	r2, [pc, #144]	@ (80076f4 <HAL_DMA_Init+0x1ec>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d009      	beq.n	800767c <HAL_DMA_Init+0x174>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a22      	ldr	r2, [pc, #136]	@ (80076f8 <HAL_DMA_Init+0x1f0>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d004      	beq.n	800767c <HAL_DMA_Init+0x174>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a21      	ldr	r2, [pc, #132]	@ (80076fc <HAL_DMA_Init+0x1f4>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d108      	bne.n	800768e <HAL_DMA_Init+0x186>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0201 	bic.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	e007      	b.n	800769e <HAL_DMA_Init+0x196>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0201 	bic.w	r2, r2, #1
 800769c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800769e:	e02f      	b.n	8007700 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076a0:	f7fd fc10 	bl	8004ec4 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b05      	cmp	r3, #5
 80076ac:	d928      	bls.n	8007700 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2220      	movs	r2, #32
 80076b2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2203      	movs	r2, #3
 80076b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e242      	b.n	8007b46 <HAL_DMA_Init+0x63e>
 80076c0:	40020010 	.word	0x40020010
 80076c4:	40020028 	.word	0x40020028
 80076c8:	40020040 	.word	0x40020040
 80076cc:	40020058 	.word	0x40020058
 80076d0:	40020070 	.word	0x40020070
 80076d4:	40020088 	.word	0x40020088
 80076d8:	400200a0 	.word	0x400200a0
 80076dc:	400200b8 	.word	0x400200b8
 80076e0:	40020410 	.word	0x40020410
 80076e4:	40020428 	.word	0x40020428
 80076e8:	40020440 	.word	0x40020440
 80076ec:	40020458 	.word	0x40020458
 80076f0:	40020470 	.word	0x40020470
 80076f4:	40020488 	.word	0x40020488
 80076f8:	400204a0 	.word	0x400204a0
 80076fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1c8      	bne.n	80076a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	4b83      	ldr	r3, [pc, #524]	@ (8007928 <HAL_DMA_Init+0x420>)
 800771a:	4013      	ands	r3, r2
 800771c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007726:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007732:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800773e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a1b      	ldr	r3, [r3, #32]
 8007744:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4313      	orrs	r3, r2
 800774a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007750:	2b04      	cmp	r3, #4
 8007752:	d107      	bne.n	8007764 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775c:	4313      	orrs	r3, r2
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	2b28      	cmp	r3, #40	@ 0x28
 800776a:	d903      	bls.n	8007774 <HAL_DMA_Init+0x26c>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	2b2e      	cmp	r3, #46	@ 0x2e
 8007772:	d91f      	bls.n	80077b4 <HAL_DMA_Init+0x2ac>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b3e      	cmp	r3, #62	@ 0x3e
 800777a:	d903      	bls.n	8007784 <HAL_DMA_Init+0x27c>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	2b42      	cmp	r3, #66	@ 0x42
 8007782:	d917      	bls.n	80077b4 <HAL_DMA_Init+0x2ac>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	2b46      	cmp	r3, #70	@ 0x46
 800778a:	d903      	bls.n	8007794 <HAL_DMA_Init+0x28c>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	2b48      	cmp	r3, #72	@ 0x48
 8007792:	d90f      	bls.n	80077b4 <HAL_DMA_Init+0x2ac>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2b4e      	cmp	r3, #78	@ 0x4e
 800779a:	d903      	bls.n	80077a4 <HAL_DMA_Init+0x29c>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	2b52      	cmp	r3, #82	@ 0x52
 80077a2:	d907      	bls.n	80077b4 <HAL_DMA_Init+0x2ac>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	2b73      	cmp	r3, #115	@ 0x73
 80077aa:	d905      	bls.n	80077b8 <HAL_DMA_Init+0x2b0>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	2b77      	cmp	r3, #119	@ 0x77
 80077b2:	d801      	bhi.n	80077b8 <HAL_DMA_Init+0x2b0>
 80077b4:	2301      	movs	r3, #1
 80077b6:	e000      	b.n	80077ba <HAL_DMA_Init+0x2b2>
 80077b8:	2300      	movs	r3, #0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077c4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f023 0307 	bic.w	r3, r3, #7
 80077dc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d117      	bne.n	8007820 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00e      	beq.n	8007820 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f002 f8e8 	bl	80099d8 <DMA_CheckFifoParam>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d008      	beq.n	8007820 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2240      	movs	r2, #64	@ 0x40
 8007812:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e192      	b.n	8007b46 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f002 f823 	bl	8009874 <DMA_CalcBaseAndBitshift>
 800782e:	4603      	mov	r3, r0
 8007830:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007836:	f003 031f 	and.w	r3, r3, #31
 800783a:	223f      	movs	r2, #63	@ 0x3f
 800783c:	409a      	lsls	r2, r3
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	609a      	str	r2, [r3, #8]
 8007842:	e0c8      	b.n	80079d6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a38      	ldr	r2, [pc, #224]	@ (800792c <HAL_DMA_Init+0x424>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d022      	beq.n	8007894 <HAL_DMA_Init+0x38c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a37      	ldr	r2, [pc, #220]	@ (8007930 <HAL_DMA_Init+0x428>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d01d      	beq.n	8007894 <HAL_DMA_Init+0x38c>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a35      	ldr	r2, [pc, #212]	@ (8007934 <HAL_DMA_Init+0x42c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d018      	beq.n	8007894 <HAL_DMA_Init+0x38c>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a34      	ldr	r2, [pc, #208]	@ (8007938 <HAL_DMA_Init+0x430>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d013      	beq.n	8007894 <HAL_DMA_Init+0x38c>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a32      	ldr	r2, [pc, #200]	@ (800793c <HAL_DMA_Init+0x434>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00e      	beq.n	8007894 <HAL_DMA_Init+0x38c>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a31      	ldr	r2, [pc, #196]	@ (8007940 <HAL_DMA_Init+0x438>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d009      	beq.n	8007894 <HAL_DMA_Init+0x38c>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a2f      	ldr	r2, [pc, #188]	@ (8007944 <HAL_DMA_Init+0x43c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d004      	beq.n	8007894 <HAL_DMA_Init+0x38c>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a2e      	ldr	r2, [pc, #184]	@ (8007948 <HAL_DMA_Init+0x440>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d101      	bne.n	8007898 <HAL_DMA_Init+0x390>
 8007894:	2301      	movs	r3, #1
 8007896:	e000      	b.n	800789a <HAL_DMA_Init+0x392>
 8007898:	2300      	movs	r3, #0
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 8092 	beq.w	80079c4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a21      	ldr	r2, [pc, #132]	@ (800792c <HAL_DMA_Init+0x424>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d021      	beq.n	80078ee <HAL_DMA_Init+0x3e6>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a20      	ldr	r2, [pc, #128]	@ (8007930 <HAL_DMA_Init+0x428>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d01c      	beq.n	80078ee <HAL_DMA_Init+0x3e6>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a1e      	ldr	r2, [pc, #120]	@ (8007934 <HAL_DMA_Init+0x42c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d017      	beq.n	80078ee <HAL_DMA_Init+0x3e6>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a1d      	ldr	r2, [pc, #116]	@ (8007938 <HAL_DMA_Init+0x430>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d012      	beq.n	80078ee <HAL_DMA_Init+0x3e6>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a1b      	ldr	r2, [pc, #108]	@ (800793c <HAL_DMA_Init+0x434>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00d      	beq.n	80078ee <HAL_DMA_Init+0x3e6>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a1a      	ldr	r2, [pc, #104]	@ (8007940 <HAL_DMA_Init+0x438>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d008      	beq.n	80078ee <HAL_DMA_Init+0x3e6>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a18      	ldr	r2, [pc, #96]	@ (8007944 <HAL_DMA_Init+0x43c>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d003      	beq.n	80078ee <HAL_DMA_Init+0x3e6>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a17      	ldr	r2, [pc, #92]	@ (8007948 <HAL_DMA_Init+0x440>)
 80078ec:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2202      	movs	r2, #2
 80078f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	4b10      	ldr	r3, [pc, #64]	@ (800794c <HAL_DMA_Init+0x444>)
 800790a:	4013      	ands	r3, r2
 800790c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	2b40      	cmp	r3, #64	@ 0x40
 8007914:	d01c      	beq.n	8007950 <HAL_DMA_Init+0x448>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b80      	cmp	r3, #128	@ 0x80
 800791c:	d102      	bne.n	8007924 <HAL_DMA_Init+0x41c>
 800791e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007922:	e016      	b.n	8007952 <HAL_DMA_Init+0x44a>
 8007924:	2300      	movs	r3, #0
 8007926:	e014      	b.n	8007952 <HAL_DMA_Init+0x44a>
 8007928:	fe10803f 	.word	0xfe10803f
 800792c:	58025408 	.word	0x58025408
 8007930:	5802541c 	.word	0x5802541c
 8007934:	58025430 	.word	0x58025430
 8007938:	58025444 	.word	0x58025444
 800793c:	58025458 	.word	0x58025458
 8007940:	5802546c 	.word	0x5802546c
 8007944:	58025480 	.word	0x58025480
 8007948:	58025494 	.word	0x58025494
 800794c:	fffe000f 	.word	0xfffe000f
 8007950:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	68d2      	ldr	r2, [r2, #12]
 8007956:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007958:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007960:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007968:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007970:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007978:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007980:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	4b6e      	ldr	r3, [pc, #440]	@ (8007b50 <HAL_DMA_Init+0x648>)
 8007998:	4413      	add	r3, r2
 800799a:	4a6e      	ldr	r2, [pc, #440]	@ (8007b54 <HAL_DMA_Init+0x64c>)
 800799c:	fba2 2303 	umull	r2, r3, r2, r3
 80079a0:	091b      	lsrs	r3, r3, #4
 80079a2:	009a      	lsls	r2, r3, #2
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 ff63 	bl	8009874 <DMA_CalcBaseAndBitshift>
 80079ae:	4603      	mov	r3, r0
 80079b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079b6:	f003 031f 	and.w	r3, r3, #31
 80079ba:	2201      	movs	r2, #1
 80079bc:	409a      	lsls	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	605a      	str	r2, [r3, #4]
 80079c2:	e008      	b.n	80079d6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2240      	movs	r2, #64	@ 0x40
 80079c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2203      	movs	r2, #3
 80079ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e0b7      	b.n	8007b46 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a5f      	ldr	r2, [pc, #380]	@ (8007b58 <HAL_DMA_Init+0x650>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d072      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a5d      	ldr	r2, [pc, #372]	@ (8007b5c <HAL_DMA_Init+0x654>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d06d      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a5c      	ldr	r2, [pc, #368]	@ (8007b60 <HAL_DMA_Init+0x658>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d068      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a5a      	ldr	r2, [pc, #360]	@ (8007b64 <HAL_DMA_Init+0x65c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d063      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a59      	ldr	r2, [pc, #356]	@ (8007b68 <HAL_DMA_Init+0x660>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d05e      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a57      	ldr	r2, [pc, #348]	@ (8007b6c <HAL_DMA_Init+0x664>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d059      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a56      	ldr	r2, [pc, #344]	@ (8007b70 <HAL_DMA_Init+0x668>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d054      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a54      	ldr	r2, [pc, #336]	@ (8007b74 <HAL_DMA_Init+0x66c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d04f      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a53      	ldr	r2, [pc, #332]	@ (8007b78 <HAL_DMA_Init+0x670>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d04a      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a51      	ldr	r2, [pc, #324]	@ (8007b7c <HAL_DMA_Init+0x674>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d045      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a50      	ldr	r2, [pc, #320]	@ (8007b80 <HAL_DMA_Init+0x678>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d040      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a4e      	ldr	r2, [pc, #312]	@ (8007b84 <HAL_DMA_Init+0x67c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d03b      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a4d      	ldr	r2, [pc, #308]	@ (8007b88 <HAL_DMA_Init+0x680>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d036      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8007b8c <HAL_DMA_Init+0x684>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d031      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a4a      	ldr	r2, [pc, #296]	@ (8007b90 <HAL_DMA_Init+0x688>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d02c      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a48      	ldr	r2, [pc, #288]	@ (8007b94 <HAL_DMA_Init+0x68c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d027      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a47      	ldr	r2, [pc, #284]	@ (8007b98 <HAL_DMA_Init+0x690>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d022      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a45      	ldr	r2, [pc, #276]	@ (8007b9c <HAL_DMA_Init+0x694>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01d      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a44      	ldr	r2, [pc, #272]	@ (8007ba0 <HAL_DMA_Init+0x698>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d018      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a42      	ldr	r2, [pc, #264]	@ (8007ba4 <HAL_DMA_Init+0x69c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d013      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a41      	ldr	r2, [pc, #260]	@ (8007ba8 <HAL_DMA_Init+0x6a0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a3f      	ldr	r2, [pc, #252]	@ (8007bac <HAL_DMA_Init+0x6a4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d009      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a3e      	ldr	r2, [pc, #248]	@ (8007bb0 <HAL_DMA_Init+0x6a8>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d004      	beq.n	8007ac6 <HAL_DMA_Init+0x5be>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8007bb4 <HAL_DMA_Init+0x6ac>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d101      	bne.n	8007aca <HAL_DMA_Init+0x5c2>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <HAL_DMA_Init+0x5c4>
 8007aca:	2300      	movs	r3, #0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d032      	beq.n	8007b36 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 fffd 	bl	8009ad0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	2b80      	cmp	r3, #128	@ 0x80
 8007adc:	d102      	bne.n	8007ae4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007af8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d010      	beq.n	8007b24 <HAL_DMA_Init+0x61c>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	2b08      	cmp	r3, #8
 8007b08:	d80c      	bhi.n	8007b24 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f002 f87a 	bl	8009c04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007b20:	605a      	str	r2, [r3, #4]
 8007b22:	e008      	b.n	8007b36 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	a7fdabf8 	.word	0xa7fdabf8
 8007b54:	cccccccd 	.word	0xcccccccd
 8007b58:	40020010 	.word	0x40020010
 8007b5c:	40020028 	.word	0x40020028
 8007b60:	40020040 	.word	0x40020040
 8007b64:	40020058 	.word	0x40020058
 8007b68:	40020070 	.word	0x40020070
 8007b6c:	40020088 	.word	0x40020088
 8007b70:	400200a0 	.word	0x400200a0
 8007b74:	400200b8 	.word	0x400200b8
 8007b78:	40020410 	.word	0x40020410
 8007b7c:	40020428 	.word	0x40020428
 8007b80:	40020440 	.word	0x40020440
 8007b84:	40020458 	.word	0x40020458
 8007b88:	40020470 	.word	0x40020470
 8007b8c:	40020488 	.word	0x40020488
 8007b90:	400204a0 	.word	0x400204a0
 8007b94:	400204b8 	.word	0x400204b8
 8007b98:	58025408 	.word	0x58025408
 8007b9c:	5802541c 	.word	0x5802541c
 8007ba0:	58025430 	.word	0x58025430
 8007ba4:	58025444 	.word	0x58025444
 8007ba8:	58025458 	.word	0x58025458
 8007bac:	5802546c 	.word	0x5802546c
 8007bb0:	58025480 	.word	0x58025480
 8007bb4:	58025494 	.word	0x58025494

08007bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e226      	b.n	8008022 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d101      	bne.n	8007be2 <HAL_DMA_Start_IT+0x2a>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e21f      	b.n	8008022 <HAL_DMA_Start_IT+0x46a>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	f040 820a 	bne.w	800800c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a68      	ldr	r2, [pc, #416]	@ (8007dac <HAL_DMA_Start_IT+0x1f4>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d04a      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a66      	ldr	r2, [pc, #408]	@ (8007db0 <HAL_DMA_Start_IT+0x1f8>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d045      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a65      	ldr	r2, [pc, #404]	@ (8007db4 <HAL_DMA_Start_IT+0x1fc>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d040      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a63      	ldr	r2, [pc, #396]	@ (8007db8 <HAL_DMA_Start_IT+0x200>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d03b      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a62      	ldr	r2, [pc, #392]	@ (8007dbc <HAL_DMA_Start_IT+0x204>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d036      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a60      	ldr	r2, [pc, #384]	@ (8007dc0 <HAL_DMA_Start_IT+0x208>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d031      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a5f      	ldr	r2, [pc, #380]	@ (8007dc4 <HAL_DMA_Start_IT+0x20c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d02c      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a5d      	ldr	r2, [pc, #372]	@ (8007dc8 <HAL_DMA_Start_IT+0x210>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d027      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a5c      	ldr	r2, [pc, #368]	@ (8007dcc <HAL_DMA_Start_IT+0x214>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d022      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a5a      	ldr	r2, [pc, #360]	@ (8007dd0 <HAL_DMA_Start_IT+0x218>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d01d      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a59      	ldr	r2, [pc, #356]	@ (8007dd4 <HAL_DMA_Start_IT+0x21c>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d018      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a57      	ldr	r2, [pc, #348]	@ (8007dd8 <HAL_DMA_Start_IT+0x220>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d013      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a56      	ldr	r2, [pc, #344]	@ (8007ddc <HAL_DMA_Start_IT+0x224>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d00e      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a54      	ldr	r2, [pc, #336]	@ (8007de0 <HAL_DMA_Start_IT+0x228>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d009      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a53      	ldr	r2, [pc, #332]	@ (8007de4 <HAL_DMA_Start_IT+0x22c>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d004      	beq.n	8007ca6 <HAL_DMA_Start_IT+0xee>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a51      	ldr	r2, [pc, #324]	@ (8007de8 <HAL_DMA_Start_IT+0x230>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d108      	bne.n	8007cb8 <HAL_DMA_Start_IT+0x100>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0201 	bic.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	e007      	b.n	8007cc8 <HAL_DMA_Start_IT+0x110>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 0201 	bic.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f001 fc24 	bl	800951c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a34      	ldr	r2, [pc, #208]	@ (8007dac <HAL_DMA_Start_IT+0x1f4>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d04a      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a33      	ldr	r2, [pc, #204]	@ (8007db0 <HAL_DMA_Start_IT+0x1f8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d045      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a31      	ldr	r2, [pc, #196]	@ (8007db4 <HAL_DMA_Start_IT+0x1fc>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d040      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a30      	ldr	r2, [pc, #192]	@ (8007db8 <HAL_DMA_Start_IT+0x200>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d03b      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a2e      	ldr	r2, [pc, #184]	@ (8007dbc <HAL_DMA_Start_IT+0x204>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d036      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a2d      	ldr	r2, [pc, #180]	@ (8007dc0 <HAL_DMA_Start_IT+0x208>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d031      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a2b      	ldr	r2, [pc, #172]	@ (8007dc4 <HAL_DMA_Start_IT+0x20c>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d02c      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8007dc8 <HAL_DMA_Start_IT+0x210>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d027      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a28      	ldr	r2, [pc, #160]	@ (8007dcc <HAL_DMA_Start_IT+0x214>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d022      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a27      	ldr	r2, [pc, #156]	@ (8007dd0 <HAL_DMA_Start_IT+0x218>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d01d      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a25      	ldr	r2, [pc, #148]	@ (8007dd4 <HAL_DMA_Start_IT+0x21c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d018      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a24      	ldr	r2, [pc, #144]	@ (8007dd8 <HAL_DMA_Start_IT+0x220>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d013      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a22      	ldr	r2, [pc, #136]	@ (8007ddc <HAL_DMA_Start_IT+0x224>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d00e      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a21      	ldr	r2, [pc, #132]	@ (8007de0 <HAL_DMA_Start_IT+0x228>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d009      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a1f      	ldr	r2, [pc, #124]	@ (8007de4 <HAL_DMA_Start_IT+0x22c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d004      	beq.n	8007d74 <HAL_DMA_Start_IT+0x1bc>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8007de8 <HAL_DMA_Start_IT+0x230>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d101      	bne.n	8007d78 <HAL_DMA_Start_IT+0x1c0>
 8007d74:	2301      	movs	r3, #1
 8007d76:	e000      	b.n	8007d7a <HAL_DMA_Start_IT+0x1c2>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d036      	beq.n	8007dec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f023 021e 	bic.w	r2, r3, #30
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f042 0216 	orr.w	r2, r2, #22
 8007d90:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d03e      	beq.n	8007e18 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f042 0208 	orr.w	r2, r2, #8
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	e035      	b.n	8007e18 <HAL_DMA_Start_IT+0x260>
 8007dac:	40020010 	.word	0x40020010
 8007db0:	40020028 	.word	0x40020028
 8007db4:	40020040 	.word	0x40020040
 8007db8:	40020058 	.word	0x40020058
 8007dbc:	40020070 	.word	0x40020070
 8007dc0:	40020088 	.word	0x40020088
 8007dc4:	400200a0 	.word	0x400200a0
 8007dc8:	400200b8 	.word	0x400200b8
 8007dcc:	40020410 	.word	0x40020410
 8007dd0:	40020428 	.word	0x40020428
 8007dd4:	40020440 	.word	0x40020440
 8007dd8:	40020458 	.word	0x40020458
 8007ddc:	40020470 	.word	0x40020470
 8007de0:	40020488 	.word	0x40020488
 8007de4:	400204a0 	.word	0x400204a0
 8007de8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f023 020e 	bic.w	r2, r3, #14
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 020a 	orr.w	r2, r2, #10
 8007dfe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d007      	beq.n	8007e18 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0204 	orr.w	r2, r2, #4
 8007e16:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a83      	ldr	r2, [pc, #524]	@ (800802c <HAL_DMA_Start_IT+0x474>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d072      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a82      	ldr	r2, [pc, #520]	@ (8008030 <HAL_DMA_Start_IT+0x478>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d06d      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a80      	ldr	r2, [pc, #512]	@ (8008034 <HAL_DMA_Start_IT+0x47c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d068      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a7f      	ldr	r2, [pc, #508]	@ (8008038 <HAL_DMA_Start_IT+0x480>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d063      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a7d      	ldr	r2, [pc, #500]	@ (800803c <HAL_DMA_Start_IT+0x484>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d05e      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a7c      	ldr	r2, [pc, #496]	@ (8008040 <HAL_DMA_Start_IT+0x488>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d059      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a7a      	ldr	r2, [pc, #488]	@ (8008044 <HAL_DMA_Start_IT+0x48c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d054      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a79      	ldr	r2, [pc, #484]	@ (8008048 <HAL_DMA_Start_IT+0x490>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d04f      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a77      	ldr	r2, [pc, #476]	@ (800804c <HAL_DMA_Start_IT+0x494>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d04a      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a76      	ldr	r2, [pc, #472]	@ (8008050 <HAL_DMA_Start_IT+0x498>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d045      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a74      	ldr	r2, [pc, #464]	@ (8008054 <HAL_DMA_Start_IT+0x49c>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d040      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a73      	ldr	r2, [pc, #460]	@ (8008058 <HAL_DMA_Start_IT+0x4a0>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d03b      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a71      	ldr	r2, [pc, #452]	@ (800805c <HAL_DMA_Start_IT+0x4a4>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d036      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a70      	ldr	r2, [pc, #448]	@ (8008060 <HAL_DMA_Start_IT+0x4a8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d031      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a6e      	ldr	r2, [pc, #440]	@ (8008064 <HAL_DMA_Start_IT+0x4ac>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d02c      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a6d      	ldr	r2, [pc, #436]	@ (8008068 <HAL_DMA_Start_IT+0x4b0>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d027      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a6b      	ldr	r2, [pc, #428]	@ (800806c <HAL_DMA_Start_IT+0x4b4>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d022      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a6a      	ldr	r2, [pc, #424]	@ (8008070 <HAL_DMA_Start_IT+0x4b8>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d01d      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a68      	ldr	r2, [pc, #416]	@ (8008074 <HAL_DMA_Start_IT+0x4bc>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d018      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a67      	ldr	r2, [pc, #412]	@ (8008078 <HAL_DMA_Start_IT+0x4c0>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d013      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a65      	ldr	r2, [pc, #404]	@ (800807c <HAL_DMA_Start_IT+0x4c4>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00e      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a64      	ldr	r2, [pc, #400]	@ (8008080 <HAL_DMA_Start_IT+0x4c8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d009      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a62      	ldr	r2, [pc, #392]	@ (8008084 <HAL_DMA_Start_IT+0x4cc>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d004      	beq.n	8007f08 <HAL_DMA_Start_IT+0x350>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a61      	ldr	r2, [pc, #388]	@ (8008088 <HAL_DMA_Start_IT+0x4d0>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d101      	bne.n	8007f0c <HAL_DMA_Start_IT+0x354>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e000      	b.n	8007f0e <HAL_DMA_Start_IT+0x356>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01a      	beq.n	8007f48 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d007      	beq.n	8007f30 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f2e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d007      	beq.n	8007f48 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f46:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a37      	ldr	r2, [pc, #220]	@ (800802c <HAL_DMA_Start_IT+0x474>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d04a      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a36      	ldr	r2, [pc, #216]	@ (8008030 <HAL_DMA_Start_IT+0x478>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d045      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a34      	ldr	r2, [pc, #208]	@ (8008034 <HAL_DMA_Start_IT+0x47c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d040      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a33      	ldr	r2, [pc, #204]	@ (8008038 <HAL_DMA_Start_IT+0x480>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d03b      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a31      	ldr	r2, [pc, #196]	@ (800803c <HAL_DMA_Start_IT+0x484>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d036      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a30      	ldr	r2, [pc, #192]	@ (8008040 <HAL_DMA_Start_IT+0x488>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d031      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a2e      	ldr	r2, [pc, #184]	@ (8008044 <HAL_DMA_Start_IT+0x48c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d02c      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a2d      	ldr	r2, [pc, #180]	@ (8008048 <HAL_DMA_Start_IT+0x490>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d027      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800804c <HAL_DMA_Start_IT+0x494>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d022      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a2a      	ldr	r2, [pc, #168]	@ (8008050 <HAL_DMA_Start_IT+0x498>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d01d      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a28      	ldr	r2, [pc, #160]	@ (8008054 <HAL_DMA_Start_IT+0x49c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d018      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a27      	ldr	r2, [pc, #156]	@ (8008058 <HAL_DMA_Start_IT+0x4a0>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d013      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a25      	ldr	r2, [pc, #148]	@ (800805c <HAL_DMA_Start_IT+0x4a4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d00e      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a24      	ldr	r2, [pc, #144]	@ (8008060 <HAL_DMA_Start_IT+0x4a8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d009      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a22      	ldr	r2, [pc, #136]	@ (8008064 <HAL_DMA_Start_IT+0x4ac>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d004      	beq.n	8007fe8 <HAL_DMA_Start_IT+0x430>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a21      	ldr	r2, [pc, #132]	@ (8008068 <HAL_DMA_Start_IT+0x4b0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d108      	bne.n	8007ffa <HAL_DMA_Start_IT+0x442>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f042 0201 	orr.w	r2, r2, #1
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	e012      	b.n	8008020 <HAL_DMA_Start_IT+0x468>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f042 0201 	orr.w	r2, r2, #1
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	e009      	b.n	8008020 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008012:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	40020010 	.word	0x40020010
 8008030:	40020028 	.word	0x40020028
 8008034:	40020040 	.word	0x40020040
 8008038:	40020058 	.word	0x40020058
 800803c:	40020070 	.word	0x40020070
 8008040:	40020088 	.word	0x40020088
 8008044:	400200a0 	.word	0x400200a0
 8008048:	400200b8 	.word	0x400200b8
 800804c:	40020410 	.word	0x40020410
 8008050:	40020428 	.word	0x40020428
 8008054:	40020440 	.word	0x40020440
 8008058:	40020458 	.word	0x40020458
 800805c:	40020470 	.word	0x40020470
 8008060:	40020488 	.word	0x40020488
 8008064:	400204a0 	.word	0x400204a0
 8008068:	400204b8 	.word	0x400204b8
 800806c:	58025408 	.word	0x58025408
 8008070:	5802541c 	.word	0x5802541c
 8008074:	58025430 	.word	0x58025430
 8008078:	58025444 	.word	0x58025444
 800807c:	58025458 	.word	0x58025458
 8008080:	5802546c 	.word	0x5802546c
 8008084:	58025480 	.word	0x58025480
 8008088:	58025494 	.word	0x58025494

0800808c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008094:	f7fc ff16 	bl	8004ec4 <HAL_GetTick>
 8008098:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e2dc      	b.n	800865e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d008      	beq.n	80080c2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2280      	movs	r2, #128	@ 0x80
 80080b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e2cd      	b.n	800865e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a76      	ldr	r2, [pc, #472]	@ (80082a0 <HAL_DMA_Abort+0x214>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d04a      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a74      	ldr	r2, [pc, #464]	@ (80082a4 <HAL_DMA_Abort+0x218>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d045      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a73      	ldr	r2, [pc, #460]	@ (80082a8 <HAL_DMA_Abort+0x21c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d040      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a71      	ldr	r2, [pc, #452]	@ (80082ac <HAL_DMA_Abort+0x220>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d03b      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a70      	ldr	r2, [pc, #448]	@ (80082b0 <HAL_DMA_Abort+0x224>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d036      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a6e      	ldr	r2, [pc, #440]	@ (80082b4 <HAL_DMA_Abort+0x228>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d031      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a6d      	ldr	r2, [pc, #436]	@ (80082b8 <HAL_DMA_Abort+0x22c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d02c      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a6b      	ldr	r2, [pc, #428]	@ (80082bc <HAL_DMA_Abort+0x230>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d027      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a6a      	ldr	r2, [pc, #424]	@ (80082c0 <HAL_DMA_Abort+0x234>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d022      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a68      	ldr	r2, [pc, #416]	@ (80082c4 <HAL_DMA_Abort+0x238>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d01d      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a67      	ldr	r2, [pc, #412]	@ (80082c8 <HAL_DMA_Abort+0x23c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d018      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a65      	ldr	r2, [pc, #404]	@ (80082cc <HAL_DMA_Abort+0x240>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d013      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a64      	ldr	r2, [pc, #400]	@ (80082d0 <HAL_DMA_Abort+0x244>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d00e      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a62      	ldr	r2, [pc, #392]	@ (80082d4 <HAL_DMA_Abort+0x248>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d009      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a61      	ldr	r2, [pc, #388]	@ (80082d8 <HAL_DMA_Abort+0x24c>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d004      	beq.n	8008162 <HAL_DMA_Abort+0xd6>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a5f      	ldr	r2, [pc, #380]	@ (80082dc <HAL_DMA_Abort+0x250>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d101      	bne.n	8008166 <HAL_DMA_Abort+0xda>
 8008162:	2301      	movs	r3, #1
 8008164:	e000      	b.n	8008168 <HAL_DMA_Abort+0xdc>
 8008166:	2300      	movs	r3, #0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d013      	beq.n	8008194 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 021e 	bic.w	r2, r2, #30
 800817a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	695a      	ldr	r2, [r3, #20]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800818a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	617b      	str	r3, [r7, #20]
 8008192:	e00a      	b.n	80081aa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 020e 	bic.w	r2, r2, #14
 80081a2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a3c      	ldr	r2, [pc, #240]	@ (80082a0 <HAL_DMA_Abort+0x214>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d072      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a3a      	ldr	r2, [pc, #232]	@ (80082a4 <HAL_DMA_Abort+0x218>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d06d      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a39      	ldr	r2, [pc, #228]	@ (80082a8 <HAL_DMA_Abort+0x21c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d068      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a37      	ldr	r2, [pc, #220]	@ (80082ac <HAL_DMA_Abort+0x220>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d063      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a36      	ldr	r2, [pc, #216]	@ (80082b0 <HAL_DMA_Abort+0x224>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d05e      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a34      	ldr	r2, [pc, #208]	@ (80082b4 <HAL_DMA_Abort+0x228>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d059      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a33      	ldr	r2, [pc, #204]	@ (80082b8 <HAL_DMA_Abort+0x22c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d054      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a31      	ldr	r2, [pc, #196]	@ (80082bc <HAL_DMA_Abort+0x230>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d04f      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a30      	ldr	r2, [pc, #192]	@ (80082c0 <HAL_DMA_Abort+0x234>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d04a      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a2e      	ldr	r2, [pc, #184]	@ (80082c4 <HAL_DMA_Abort+0x238>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d045      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a2d      	ldr	r2, [pc, #180]	@ (80082c8 <HAL_DMA_Abort+0x23c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d040      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a2b      	ldr	r2, [pc, #172]	@ (80082cc <HAL_DMA_Abort+0x240>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d03b      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a2a      	ldr	r2, [pc, #168]	@ (80082d0 <HAL_DMA_Abort+0x244>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d036      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a28      	ldr	r2, [pc, #160]	@ (80082d4 <HAL_DMA_Abort+0x248>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d031      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a27      	ldr	r2, [pc, #156]	@ (80082d8 <HAL_DMA_Abort+0x24c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d02c      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a25      	ldr	r2, [pc, #148]	@ (80082dc <HAL_DMA_Abort+0x250>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d027      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a24      	ldr	r2, [pc, #144]	@ (80082e0 <HAL_DMA_Abort+0x254>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d022      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a22      	ldr	r2, [pc, #136]	@ (80082e4 <HAL_DMA_Abort+0x258>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d01d      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a21      	ldr	r2, [pc, #132]	@ (80082e8 <HAL_DMA_Abort+0x25c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d018      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a1f      	ldr	r2, [pc, #124]	@ (80082ec <HAL_DMA_Abort+0x260>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d013      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a1e      	ldr	r2, [pc, #120]	@ (80082f0 <HAL_DMA_Abort+0x264>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d00e      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a1c      	ldr	r2, [pc, #112]	@ (80082f4 <HAL_DMA_Abort+0x268>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d009      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a1b      	ldr	r2, [pc, #108]	@ (80082f8 <HAL_DMA_Abort+0x26c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d004      	beq.n	800829a <HAL_DMA_Abort+0x20e>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a19      	ldr	r2, [pc, #100]	@ (80082fc <HAL_DMA_Abort+0x270>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d132      	bne.n	8008300 <HAL_DMA_Abort+0x274>
 800829a:	2301      	movs	r3, #1
 800829c:	e031      	b.n	8008302 <HAL_DMA_Abort+0x276>
 800829e:	bf00      	nop
 80082a0:	40020010 	.word	0x40020010
 80082a4:	40020028 	.word	0x40020028
 80082a8:	40020040 	.word	0x40020040
 80082ac:	40020058 	.word	0x40020058
 80082b0:	40020070 	.word	0x40020070
 80082b4:	40020088 	.word	0x40020088
 80082b8:	400200a0 	.word	0x400200a0
 80082bc:	400200b8 	.word	0x400200b8
 80082c0:	40020410 	.word	0x40020410
 80082c4:	40020428 	.word	0x40020428
 80082c8:	40020440 	.word	0x40020440
 80082cc:	40020458 	.word	0x40020458
 80082d0:	40020470 	.word	0x40020470
 80082d4:	40020488 	.word	0x40020488
 80082d8:	400204a0 	.word	0x400204a0
 80082dc:	400204b8 	.word	0x400204b8
 80082e0:	58025408 	.word	0x58025408
 80082e4:	5802541c 	.word	0x5802541c
 80082e8:	58025430 	.word	0x58025430
 80082ec:	58025444 	.word	0x58025444
 80082f0:	58025458 	.word	0x58025458
 80082f4:	5802546c 	.word	0x5802546c
 80082f8:	58025480 	.word	0x58025480
 80082fc:	58025494 	.word	0x58025494
 8008300:	2300      	movs	r3, #0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d007      	beq.n	8008316 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008310:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008314:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a6d      	ldr	r2, [pc, #436]	@ (80084d0 <HAL_DMA_Abort+0x444>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d04a      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a6b      	ldr	r2, [pc, #428]	@ (80084d4 <HAL_DMA_Abort+0x448>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d045      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a6a      	ldr	r2, [pc, #424]	@ (80084d8 <HAL_DMA_Abort+0x44c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d040      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a68      	ldr	r2, [pc, #416]	@ (80084dc <HAL_DMA_Abort+0x450>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d03b      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a67      	ldr	r2, [pc, #412]	@ (80084e0 <HAL_DMA_Abort+0x454>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d036      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a65      	ldr	r2, [pc, #404]	@ (80084e4 <HAL_DMA_Abort+0x458>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d031      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a64      	ldr	r2, [pc, #400]	@ (80084e8 <HAL_DMA_Abort+0x45c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d02c      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a62      	ldr	r2, [pc, #392]	@ (80084ec <HAL_DMA_Abort+0x460>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d027      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a61      	ldr	r2, [pc, #388]	@ (80084f0 <HAL_DMA_Abort+0x464>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d022      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a5f      	ldr	r2, [pc, #380]	@ (80084f4 <HAL_DMA_Abort+0x468>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d01d      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a5e      	ldr	r2, [pc, #376]	@ (80084f8 <HAL_DMA_Abort+0x46c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d018      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a5c      	ldr	r2, [pc, #368]	@ (80084fc <HAL_DMA_Abort+0x470>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d013      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a5b      	ldr	r2, [pc, #364]	@ (8008500 <HAL_DMA_Abort+0x474>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00e      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a59      	ldr	r2, [pc, #356]	@ (8008504 <HAL_DMA_Abort+0x478>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d009      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a58      	ldr	r2, [pc, #352]	@ (8008508 <HAL_DMA_Abort+0x47c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d004      	beq.n	80083b6 <HAL_DMA_Abort+0x32a>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a56      	ldr	r2, [pc, #344]	@ (800850c <HAL_DMA_Abort+0x480>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d108      	bne.n	80083c8 <HAL_DMA_Abort+0x33c>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 0201 	bic.w	r2, r2, #1
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	e007      	b.n	80083d8 <HAL_DMA_Abort+0x34c>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0201 	bic.w	r2, r2, #1
 80083d6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80083d8:	e013      	b.n	8008402 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80083da:	f7fc fd73 	bl	8004ec4 <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	2b05      	cmp	r3, #5
 80083e6:	d90c      	bls.n	8008402 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2220      	movs	r2, #32
 80083ec:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2203      	movs	r2, #3
 80083f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e12d      	b.n	800865e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1e5      	bne.n	80083da <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a2f      	ldr	r2, [pc, #188]	@ (80084d0 <HAL_DMA_Abort+0x444>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d04a      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a2d      	ldr	r2, [pc, #180]	@ (80084d4 <HAL_DMA_Abort+0x448>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d045      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a2c      	ldr	r2, [pc, #176]	@ (80084d8 <HAL_DMA_Abort+0x44c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d040      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a2a      	ldr	r2, [pc, #168]	@ (80084dc <HAL_DMA_Abort+0x450>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d03b      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a29      	ldr	r2, [pc, #164]	@ (80084e0 <HAL_DMA_Abort+0x454>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d036      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a27      	ldr	r2, [pc, #156]	@ (80084e4 <HAL_DMA_Abort+0x458>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d031      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a26      	ldr	r2, [pc, #152]	@ (80084e8 <HAL_DMA_Abort+0x45c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d02c      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a24      	ldr	r2, [pc, #144]	@ (80084ec <HAL_DMA_Abort+0x460>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d027      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a23      	ldr	r2, [pc, #140]	@ (80084f0 <HAL_DMA_Abort+0x464>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d022      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a21      	ldr	r2, [pc, #132]	@ (80084f4 <HAL_DMA_Abort+0x468>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d01d      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a20      	ldr	r2, [pc, #128]	@ (80084f8 <HAL_DMA_Abort+0x46c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d018      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a1e      	ldr	r2, [pc, #120]	@ (80084fc <HAL_DMA_Abort+0x470>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d013      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a1d      	ldr	r2, [pc, #116]	@ (8008500 <HAL_DMA_Abort+0x474>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00e      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a1b      	ldr	r2, [pc, #108]	@ (8008504 <HAL_DMA_Abort+0x478>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d009      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a1a      	ldr	r2, [pc, #104]	@ (8008508 <HAL_DMA_Abort+0x47c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d004      	beq.n	80084ae <HAL_DMA_Abort+0x422>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a18      	ldr	r2, [pc, #96]	@ (800850c <HAL_DMA_Abort+0x480>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d101      	bne.n	80084b2 <HAL_DMA_Abort+0x426>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e000      	b.n	80084b4 <HAL_DMA_Abort+0x428>
 80084b2:	2300      	movs	r3, #0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d02b      	beq.n	8008510 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084bc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084c2:	f003 031f 	and.w	r3, r3, #31
 80084c6:	223f      	movs	r2, #63	@ 0x3f
 80084c8:	409a      	lsls	r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	609a      	str	r2, [r3, #8]
 80084ce:	e02a      	b.n	8008526 <HAL_DMA_Abort+0x49a>
 80084d0:	40020010 	.word	0x40020010
 80084d4:	40020028 	.word	0x40020028
 80084d8:	40020040 	.word	0x40020040
 80084dc:	40020058 	.word	0x40020058
 80084e0:	40020070 	.word	0x40020070
 80084e4:	40020088 	.word	0x40020088
 80084e8:	400200a0 	.word	0x400200a0
 80084ec:	400200b8 	.word	0x400200b8
 80084f0:	40020410 	.word	0x40020410
 80084f4:	40020428 	.word	0x40020428
 80084f8:	40020440 	.word	0x40020440
 80084fc:	40020458 	.word	0x40020458
 8008500:	40020470 	.word	0x40020470
 8008504:	40020488 	.word	0x40020488
 8008508:	400204a0 	.word	0x400204a0
 800850c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008514:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800851a:	f003 031f 	and.w	r3, r3, #31
 800851e:	2201      	movs	r2, #1
 8008520:	409a      	lsls	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a4f      	ldr	r2, [pc, #316]	@ (8008668 <HAL_DMA_Abort+0x5dc>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d072      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a4d      	ldr	r2, [pc, #308]	@ (800866c <HAL_DMA_Abort+0x5e0>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d06d      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a4c      	ldr	r2, [pc, #304]	@ (8008670 <HAL_DMA_Abort+0x5e4>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d068      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a4a      	ldr	r2, [pc, #296]	@ (8008674 <HAL_DMA_Abort+0x5e8>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d063      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a49      	ldr	r2, [pc, #292]	@ (8008678 <HAL_DMA_Abort+0x5ec>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d05e      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a47      	ldr	r2, [pc, #284]	@ (800867c <HAL_DMA_Abort+0x5f0>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d059      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a46      	ldr	r2, [pc, #280]	@ (8008680 <HAL_DMA_Abort+0x5f4>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d054      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a44      	ldr	r2, [pc, #272]	@ (8008684 <HAL_DMA_Abort+0x5f8>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d04f      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a43      	ldr	r2, [pc, #268]	@ (8008688 <HAL_DMA_Abort+0x5fc>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d04a      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a41      	ldr	r2, [pc, #260]	@ (800868c <HAL_DMA_Abort+0x600>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d045      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a40      	ldr	r2, [pc, #256]	@ (8008690 <HAL_DMA_Abort+0x604>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d040      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a3e      	ldr	r2, [pc, #248]	@ (8008694 <HAL_DMA_Abort+0x608>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d03b      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a3d      	ldr	r2, [pc, #244]	@ (8008698 <HAL_DMA_Abort+0x60c>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d036      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a3b      	ldr	r2, [pc, #236]	@ (800869c <HAL_DMA_Abort+0x610>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d031      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a3a      	ldr	r2, [pc, #232]	@ (80086a0 <HAL_DMA_Abort+0x614>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d02c      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a38      	ldr	r2, [pc, #224]	@ (80086a4 <HAL_DMA_Abort+0x618>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d027      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a37      	ldr	r2, [pc, #220]	@ (80086a8 <HAL_DMA_Abort+0x61c>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d022      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a35      	ldr	r2, [pc, #212]	@ (80086ac <HAL_DMA_Abort+0x620>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d01d      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a34      	ldr	r2, [pc, #208]	@ (80086b0 <HAL_DMA_Abort+0x624>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d018      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a32      	ldr	r2, [pc, #200]	@ (80086b4 <HAL_DMA_Abort+0x628>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d013      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a31      	ldr	r2, [pc, #196]	@ (80086b8 <HAL_DMA_Abort+0x62c>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d00e      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a2f      	ldr	r2, [pc, #188]	@ (80086bc <HAL_DMA_Abort+0x630>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d009      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a2e      	ldr	r2, [pc, #184]	@ (80086c0 <HAL_DMA_Abort+0x634>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d004      	beq.n	8008616 <HAL_DMA_Abort+0x58a>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a2c      	ldr	r2, [pc, #176]	@ (80086c4 <HAL_DMA_Abort+0x638>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d101      	bne.n	800861a <HAL_DMA_Abort+0x58e>
 8008616:	2301      	movs	r3, #1
 8008618:	e000      	b.n	800861c <HAL_DMA_Abort+0x590>
 800861a:	2300      	movs	r3, #0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d015      	beq.n	800864c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008628:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00c      	beq.n	800864c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800863c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008640:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800864a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	40020010 	.word	0x40020010
 800866c:	40020028 	.word	0x40020028
 8008670:	40020040 	.word	0x40020040
 8008674:	40020058 	.word	0x40020058
 8008678:	40020070 	.word	0x40020070
 800867c:	40020088 	.word	0x40020088
 8008680:	400200a0 	.word	0x400200a0
 8008684:	400200b8 	.word	0x400200b8
 8008688:	40020410 	.word	0x40020410
 800868c:	40020428 	.word	0x40020428
 8008690:	40020440 	.word	0x40020440
 8008694:	40020458 	.word	0x40020458
 8008698:	40020470 	.word	0x40020470
 800869c:	40020488 	.word	0x40020488
 80086a0:	400204a0 	.word	0x400204a0
 80086a4:	400204b8 	.word	0x400204b8
 80086a8:	58025408 	.word	0x58025408
 80086ac:	5802541c 	.word	0x5802541c
 80086b0:	58025430 	.word	0x58025430
 80086b4:	58025444 	.word	0x58025444
 80086b8:	58025458 	.word	0x58025458
 80086bc:	5802546c 	.word	0x5802546c
 80086c0:	58025480 	.word	0x58025480
 80086c4:	58025494 	.word	0x58025494

080086c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08a      	sub	sp, #40	@ 0x28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80086d4:	4b67      	ldr	r3, [pc, #412]	@ (8008874 <HAL_DMA_IRQHandler+0x1ac>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a67      	ldr	r2, [pc, #412]	@ (8008878 <HAL_DMA_IRQHandler+0x1b0>)
 80086da:	fba2 2303 	umull	r2, r3, r2, r3
 80086de:	0a9b      	lsrs	r3, r3, #10
 80086e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a5f      	ldr	r2, [pc, #380]	@ (800887c <HAL_DMA_IRQHandler+0x1b4>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d04a      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a5d      	ldr	r2, [pc, #372]	@ (8008880 <HAL_DMA_IRQHandler+0x1b8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d045      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a5c      	ldr	r2, [pc, #368]	@ (8008884 <HAL_DMA_IRQHandler+0x1bc>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d040      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a5a      	ldr	r2, [pc, #360]	@ (8008888 <HAL_DMA_IRQHandler+0x1c0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d03b      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a59      	ldr	r2, [pc, #356]	@ (800888c <HAL_DMA_IRQHandler+0x1c4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d036      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a57      	ldr	r2, [pc, #348]	@ (8008890 <HAL_DMA_IRQHandler+0x1c8>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d031      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a56      	ldr	r2, [pc, #344]	@ (8008894 <HAL_DMA_IRQHandler+0x1cc>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d02c      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a54      	ldr	r2, [pc, #336]	@ (8008898 <HAL_DMA_IRQHandler+0x1d0>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d027      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a53      	ldr	r2, [pc, #332]	@ (800889c <HAL_DMA_IRQHandler+0x1d4>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d022      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a51      	ldr	r2, [pc, #324]	@ (80088a0 <HAL_DMA_IRQHandler+0x1d8>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d01d      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a50      	ldr	r2, [pc, #320]	@ (80088a4 <HAL_DMA_IRQHandler+0x1dc>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d018      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a4e      	ldr	r2, [pc, #312]	@ (80088a8 <HAL_DMA_IRQHandler+0x1e0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d013      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a4d      	ldr	r2, [pc, #308]	@ (80088ac <HAL_DMA_IRQHandler+0x1e4>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00e      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a4b      	ldr	r2, [pc, #300]	@ (80088b0 <HAL_DMA_IRQHandler+0x1e8>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d009      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a4a      	ldr	r2, [pc, #296]	@ (80088b4 <HAL_DMA_IRQHandler+0x1ec>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d004      	beq.n	800879a <HAL_DMA_IRQHandler+0xd2>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a48      	ldr	r2, [pc, #288]	@ (80088b8 <HAL_DMA_IRQHandler+0x1f0>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d101      	bne.n	800879e <HAL_DMA_IRQHandler+0xd6>
 800879a:	2301      	movs	r3, #1
 800879c:	e000      	b.n	80087a0 <HAL_DMA_IRQHandler+0xd8>
 800879e:	2300      	movs	r3, #0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 842b 	beq.w	8008ffc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087aa:	f003 031f 	and.w	r3, r3, #31
 80087ae:	2208      	movs	r2, #8
 80087b0:	409a      	lsls	r2, r3
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	4013      	ands	r3, r2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 80a2 	beq.w	8008900 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a2e      	ldr	r2, [pc, #184]	@ (800887c <HAL_DMA_IRQHandler+0x1b4>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d04a      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a2d      	ldr	r2, [pc, #180]	@ (8008880 <HAL_DMA_IRQHandler+0x1b8>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d045      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a2b      	ldr	r2, [pc, #172]	@ (8008884 <HAL_DMA_IRQHandler+0x1bc>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d040      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a2a      	ldr	r2, [pc, #168]	@ (8008888 <HAL_DMA_IRQHandler+0x1c0>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d03b      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a28      	ldr	r2, [pc, #160]	@ (800888c <HAL_DMA_IRQHandler+0x1c4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d036      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a27      	ldr	r2, [pc, #156]	@ (8008890 <HAL_DMA_IRQHandler+0x1c8>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d031      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a25      	ldr	r2, [pc, #148]	@ (8008894 <HAL_DMA_IRQHandler+0x1cc>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d02c      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a24      	ldr	r2, [pc, #144]	@ (8008898 <HAL_DMA_IRQHandler+0x1d0>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d027      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a22      	ldr	r2, [pc, #136]	@ (800889c <HAL_DMA_IRQHandler+0x1d4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d022      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a21      	ldr	r2, [pc, #132]	@ (80088a0 <HAL_DMA_IRQHandler+0x1d8>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d01d      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a1f      	ldr	r2, [pc, #124]	@ (80088a4 <HAL_DMA_IRQHandler+0x1dc>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d018      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a1e      	ldr	r2, [pc, #120]	@ (80088a8 <HAL_DMA_IRQHandler+0x1e0>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d013      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a1c      	ldr	r2, [pc, #112]	@ (80088ac <HAL_DMA_IRQHandler+0x1e4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d00e      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a1b      	ldr	r2, [pc, #108]	@ (80088b0 <HAL_DMA_IRQHandler+0x1e8>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d009      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a19      	ldr	r2, [pc, #100]	@ (80088b4 <HAL_DMA_IRQHandler+0x1ec>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d004      	beq.n	800885c <HAL_DMA_IRQHandler+0x194>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a18      	ldr	r2, [pc, #96]	@ (80088b8 <HAL_DMA_IRQHandler+0x1f0>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d12f      	bne.n	80088bc <HAL_DMA_IRQHandler+0x1f4>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0304 	and.w	r3, r3, #4
 8008866:	2b00      	cmp	r3, #0
 8008868:	bf14      	ite	ne
 800886a:	2301      	movne	r3, #1
 800886c:	2300      	moveq	r3, #0
 800886e:	b2db      	uxtb	r3, r3
 8008870:	e02e      	b.n	80088d0 <HAL_DMA_IRQHandler+0x208>
 8008872:	bf00      	nop
 8008874:	24000018 	.word	0x24000018
 8008878:	1b4e81b5 	.word	0x1b4e81b5
 800887c:	40020010 	.word	0x40020010
 8008880:	40020028 	.word	0x40020028
 8008884:	40020040 	.word	0x40020040
 8008888:	40020058 	.word	0x40020058
 800888c:	40020070 	.word	0x40020070
 8008890:	40020088 	.word	0x40020088
 8008894:	400200a0 	.word	0x400200a0
 8008898:	400200b8 	.word	0x400200b8
 800889c:	40020410 	.word	0x40020410
 80088a0:	40020428 	.word	0x40020428
 80088a4:	40020440 	.word	0x40020440
 80088a8:	40020458 	.word	0x40020458
 80088ac:	40020470 	.word	0x40020470
 80088b0:	40020488 	.word	0x40020488
 80088b4:	400204a0 	.word	0x400204a0
 80088b8:	400204b8 	.word	0x400204b8
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0308 	and.w	r3, r3, #8
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	bf14      	ite	ne
 80088ca:	2301      	movne	r3, #1
 80088cc:	2300      	moveq	r3, #0
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d015      	beq.n	8008900 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f022 0204 	bic.w	r2, r2, #4
 80088e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088e8:	f003 031f 	and.w	r3, r3, #31
 80088ec:	2208      	movs	r2, #8
 80088ee:	409a      	lsls	r2, r3
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088f8:	f043 0201 	orr.w	r2, r3, #1
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008904:	f003 031f 	and.w	r3, r3, #31
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	fa22 f303 	lsr.w	r3, r2, r3
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d06e      	beq.n	80089f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a69      	ldr	r2, [pc, #420]	@ (8008ac0 <HAL_DMA_IRQHandler+0x3f8>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d04a      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a67      	ldr	r2, [pc, #412]	@ (8008ac4 <HAL_DMA_IRQHandler+0x3fc>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d045      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a66      	ldr	r2, [pc, #408]	@ (8008ac8 <HAL_DMA_IRQHandler+0x400>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d040      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a64      	ldr	r2, [pc, #400]	@ (8008acc <HAL_DMA_IRQHandler+0x404>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d03b      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a63      	ldr	r2, [pc, #396]	@ (8008ad0 <HAL_DMA_IRQHandler+0x408>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d036      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a61      	ldr	r2, [pc, #388]	@ (8008ad4 <HAL_DMA_IRQHandler+0x40c>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d031      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a60      	ldr	r2, [pc, #384]	@ (8008ad8 <HAL_DMA_IRQHandler+0x410>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d02c      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a5e      	ldr	r2, [pc, #376]	@ (8008adc <HAL_DMA_IRQHandler+0x414>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d027      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a5d      	ldr	r2, [pc, #372]	@ (8008ae0 <HAL_DMA_IRQHandler+0x418>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d022      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a5b      	ldr	r2, [pc, #364]	@ (8008ae4 <HAL_DMA_IRQHandler+0x41c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d01d      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a5a      	ldr	r2, [pc, #360]	@ (8008ae8 <HAL_DMA_IRQHandler+0x420>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d018      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a58      	ldr	r2, [pc, #352]	@ (8008aec <HAL_DMA_IRQHandler+0x424>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d013      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a57      	ldr	r2, [pc, #348]	@ (8008af0 <HAL_DMA_IRQHandler+0x428>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d00e      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a55      	ldr	r2, [pc, #340]	@ (8008af4 <HAL_DMA_IRQHandler+0x42c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d009      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a54      	ldr	r2, [pc, #336]	@ (8008af8 <HAL_DMA_IRQHandler+0x430>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d004      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x2ee>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a52      	ldr	r2, [pc, #328]	@ (8008afc <HAL_DMA_IRQHandler+0x434>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d10a      	bne.n	80089cc <HAL_DMA_IRQHandler+0x304>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	bf14      	ite	ne
 80089c4:	2301      	movne	r3, #1
 80089c6:	2300      	moveq	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	e003      	b.n	80089d4 <HAL_DMA_IRQHandler+0x30c>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2300      	movs	r3, #0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00d      	beq.n	80089f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089dc:	f003 031f 	and.w	r3, r3, #31
 80089e0:	2201      	movs	r2, #1
 80089e2:	409a      	lsls	r2, r3
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ec:	f043 0202 	orr.w	r2, r3, #2
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089f8:	f003 031f 	and.w	r3, r3, #31
 80089fc:	2204      	movs	r2, #4
 80089fe:	409a      	lsls	r2, r3
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	4013      	ands	r3, r2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 808f 	beq.w	8008b28 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8008ac0 <HAL_DMA_IRQHandler+0x3f8>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d04a      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a2a      	ldr	r2, [pc, #168]	@ (8008ac4 <HAL_DMA_IRQHandler+0x3fc>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d045      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a29      	ldr	r2, [pc, #164]	@ (8008ac8 <HAL_DMA_IRQHandler+0x400>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d040      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a27      	ldr	r2, [pc, #156]	@ (8008acc <HAL_DMA_IRQHandler+0x404>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d03b      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a26      	ldr	r2, [pc, #152]	@ (8008ad0 <HAL_DMA_IRQHandler+0x408>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d036      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a24      	ldr	r2, [pc, #144]	@ (8008ad4 <HAL_DMA_IRQHandler+0x40c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d031      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a23      	ldr	r2, [pc, #140]	@ (8008ad8 <HAL_DMA_IRQHandler+0x410>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d02c      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a21      	ldr	r2, [pc, #132]	@ (8008adc <HAL_DMA_IRQHandler+0x414>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d027      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a20      	ldr	r2, [pc, #128]	@ (8008ae0 <HAL_DMA_IRQHandler+0x418>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d022      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a1e      	ldr	r2, [pc, #120]	@ (8008ae4 <HAL_DMA_IRQHandler+0x41c>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d01d      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a1d      	ldr	r2, [pc, #116]	@ (8008ae8 <HAL_DMA_IRQHandler+0x420>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d018      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008aec <HAL_DMA_IRQHandler+0x424>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d013      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a1a      	ldr	r2, [pc, #104]	@ (8008af0 <HAL_DMA_IRQHandler+0x428>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d00e      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a18      	ldr	r2, [pc, #96]	@ (8008af4 <HAL_DMA_IRQHandler+0x42c>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d009      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a17      	ldr	r2, [pc, #92]	@ (8008af8 <HAL_DMA_IRQHandler+0x430>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d004      	beq.n	8008aaa <HAL_DMA_IRQHandler+0x3e2>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a15      	ldr	r2, [pc, #84]	@ (8008afc <HAL_DMA_IRQHandler+0x434>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d12a      	bne.n	8008b00 <HAL_DMA_IRQHandler+0x438>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 0302 	and.w	r3, r3, #2
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	bf14      	ite	ne
 8008ab8:	2301      	movne	r3, #1
 8008aba:	2300      	moveq	r3, #0
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	e023      	b.n	8008b08 <HAL_DMA_IRQHandler+0x440>
 8008ac0:	40020010 	.word	0x40020010
 8008ac4:	40020028 	.word	0x40020028
 8008ac8:	40020040 	.word	0x40020040
 8008acc:	40020058 	.word	0x40020058
 8008ad0:	40020070 	.word	0x40020070
 8008ad4:	40020088 	.word	0x40020088
 8008ad8:	400200a0 	.word	0x400200a0
 8008adc:	400200b8 	.word	0x400200b8
 8008ae0:	40020410 	.word	0x40020410
 8008ae4:	40020428 	.word	0x40020428
 8008ae8:	40020440 	.word	0x40020440
 8008aec:	40020458 	.word	0x40020458
 8008af0:	40020470 	.word	0x40020470
 8008af4:	40020488 	.word	0x40020488
 8008af8:	400204a0 	.word	0x400204a0
 8008afc:	400204b8 	.word	0x400204b8
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2300      	movs	r3, #0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00d      	beq.n	8008b28 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b10:	f003 031f 	and.w	r3, r3, #31
 8008b14:	2204      	movs	r2, #4
 8008b16:	409a      	lsls	r2, r3
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b20:	f043 0204 	orr.w	r2, r3, #4
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b2c:	f003 031f 	and.w	r3, r3, #31
 8008b30:	2210      	movs	r2, #16
 8008b32:	409a      	lsls	r2, r3
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	4013      	ands	r3, r2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 80a6 	beq.w	8008c8a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a85      	ldr	r2, [pc, #532]	@ (8008d58 <HAL_DMA_IRQHandler+0x690>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d04a      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a83      	ldr	r2, [pc, #524]	@ (8008d5c <HAL_DMA_IRQHandler+0x694>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d045      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a82      	ldr	r2, [pc, #520]	@ (8008d60 <HAL_DMA_IRQHandler+0x698>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d040      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a80      	ldr	r2, [pc, #512]	@ (8008d64 <HAL_DMA_IRQHandler+0x69c>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d03b      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a7f      	ldr	r2, [pc, #508]	@ (8008d68 <HAL_DMA_IRQHandler+0x6a0>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d036      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a7d      	ldr	r2, [pc, #500]	@ (8008d6c <HAL_DMA_IRQHandler+0x6a4>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d031      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a7c      	ldr	r2, [pc, #496]	@ (8008d70 <HAL_DMA_IRQHandler+0x6a8>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d02c      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a7a      	ldr	r2, [pc, #488]	@ (8008d74 <HAL_DMA_IRQHandler+0x6ac>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d027      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a79      	ldr	r2, [pc, #484]	@ (8008d78 <HAL_DMA_IRQHandler+0x6b0>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d022      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a77      	ldr	r2, [pc, #476]	@ (8008d7c <HAL_DMA_IRQHandler+0x6b4>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d01d      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a76      	ldr	r2, [pc, #472]	@ (8008d80 <HAL_DMA_IRQHandler+0x6b8>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d018      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a74      	ldr	r2, [pc, #464]	@ (8008d84 <HAL_DMA_IRQHandler+0x6bc>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d013      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a73      	ldr	r2, [pc, #460]	@ (8008d88 <HAL_DMA_IRQHandler+0x6c0>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d00e      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a71      	ldr	r2, [pc, #452]	@ (8008d8c <HAL_DMA_IRQHandler+0x6c4>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d009      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a70      	ldr	r2, [pc, #448]	@ (8008d90 <HAL_DMA_IRQHandler+0x6c8>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d004      	beq.n	8008bde <HAL_DMA_IRQHandler+0x516>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a6e      	ldr	r2, [pc, #440]	@ (8008d94 <HAL_DMA_IRQHandler+0x6cc>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d10a      	bne.n	8008bf4 <HAL_DMA_IRQHandler+0x52c>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0308 	and.w	r3, r3, #8
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	bf14      	ite	ne
 8008bec:	2301      	movne	r3, #1
 8008bee:	2300      	moveq	r3, #0
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	e009      	b.n	8008c08 <HAL_DMA_IRQHandler+0x540>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0304 	and.w	r3, r3, #4
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	bf14      	ite	ne
 8008c02:	2301      	movne	r3, #1
 8008c04:	2300      	moveq	r3, #0
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d03e      	beq.n	8008c8a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c10:	f003 031f 	and.w	r3, r3, #31
 8008c14:	2210      	movs	r2, #16
 8008c16:	409a      	lsls	r2, r3
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d018      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d108      	bne.n	8008c4a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d024      	beq.n	8008c8a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	4798      	blx	r3
 8008c48:	e01f      	b.n	8008c8a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d01b      	beq.n	8008c8a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	4798      	blx	r3
 8008c5a:	e016      	b.n	8008c8a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d107      	bne.n	8008c7a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f022 0208 	bic.w	r2, r2, #8
 8008c78:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c8e:	f003 031f 	and.w	r3, r3, #31
 8008c92:	2220      	movs	r2, #32
 8008c94:	409a      	lsls	r2, r3
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	4013      	ands	r3, r2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 8110 	beq.w	8008ec0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a2c      	ldr	r2, [pc, #176]	@ (8008d58 <HAL_DMA_IRQHandler+0x690>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d04a      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a2b      	ldr	r2, [pc, #172]	@ (8008d5c <HAL_DMA_IRQHandler+0x694>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d045      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a29      	ldr	r2, [pc, #164]	@ (8008d60 <HAL_DMA_IRQHandler+0x698>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d040      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a28      	ldr	r2, [pc, #160]	@ (8008d64 <HAL_DMA_IRQHandler+0x69c>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d03b      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a26      	ldr	r2, [pc, #152]	@ (8008d68 <HAL_DMA_IRQHandler+0x6a0>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d036      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a25      	ldr	r2, [pc, #148]	@ (8008d6c <HAL_DMA_IRQHandler+0x6a4>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d031      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a23      	ldr	r2, [pc, #140]	@ (8008d70 <HAL_DMA_IRQHandler+0x6a8>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d02c      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a22      	ldr	r2, [pc, #136]	@ (8008d74 <HAL_DMA_IRQHandler+0x6ac>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d027      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a20      	ldr	r2, [pc, #128]	@ (8008d78 <HAL_DMA_IRQHandler+0x6b0>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d022      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8008d7c <HAL_DMA_IRQHandler+0x6b4>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d01d      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a1d      	ldr	r2, [pc, #116]	@ (8008d80 <HAL_DMA_IRQHandler+0x6b8>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d018      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a1c      	ldr	r2, [pc, #112]	@ (8008d84 <HAL_DMA_IRQHandler+0x6bc>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d013      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8008d88 <HAL_DMA_IRQHandler+0x6c0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d00e      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a19      	ldr	r2, [pc, #100]	@ (8008d8c <HAL_DMA_IRQHandler+0x6c4>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d009      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a17      	ldr	r2, [pc, #92]	@ (8008d90 <HAL_DMA_IRQHandler+0x6c8>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d004      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x678>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a16      	ldr	r2, [pc, #88]	@ (8008d94 <HAL_DMA_IRQHandler+0x6cc>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d12b      	bne.n	8008d98 <HAL_DMA_IRQHandler+0x6d0>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0310 	and.w	r3, r3, #16
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	bf14      	ite	ne
 8008d4e:	2301      	movne	r3, #1
 8008d50:	2300      	moveq	r3, #0
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	e02a      	b.n	8008dac <HAL_DMA_IRQHandler+0x6e4>
 8008d56:	bf00      	nop
 8008d58:	40020010 	.word	0x40020010
 8008d5c:	40020028 	.word	0x40020028
 8008d60:	40020040 	.word	0x40020040
 8008d64:	40020058 	.word	0x40020058
 8008d68:	40020070 	.word	0x40020070
 8008d6c:	40020088 	.word	0x40020088
 8008d70:	400200a0 	.word	0x400200a0
 8008d74:	400200b8 	.word	0x400200b8
 8008d78:	40020410 	.word	0x40020410
 8008d7c:	40020428 	.word	0x40020428
 8008d80:	40020440 	.word	0x40020440
 8008d84:	40020458 	.word	0x40020458
 8008d88:	40020470 	.word	0x40020470
 8008d8c:	40020488 	.word	0x40020488
 8008d90:	400204a0 	.word	0x400204a0
 8008d94:	400204b8 	.word	0x400204b8
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	bf14      	ite	ne
 8008da6:	2301      	movne	r3, #1
 8008da8:	2300      	moveq	r3, #0
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 8087 	beq.w	8008ec0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008db6:	f003 031f 	and.w	r3, r3, #31
 8008dba:	2220      	movs	r2, #32
 8008dbc:	409a      	lsls	r2, r3
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b04      	cmp	r3, #4
 8008dcc:	d139      	bne.n	8008e42 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0216 	bic.w	r2, r2, #22
 8008ddc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	695a      	ldr	r2, [r3, #20]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008dec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d103      	bne.n	8008dfe <HAL_DMA_IRQHandler+0x736>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d007      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 0208 	bic.w	r2, r2, #8
 8008e0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e12:	f003 031f 	and.w	r3, r3, #31
 8008e16:	223f      	movs	r2, #63	@ 0x3f
 8008e18:	409a      	lsls	r2, r3
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 834a 	beq.w	80094cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	4798      	blx	r3
          }
          return;
 8008e40:	e344      	b.n	80094cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d018      	beq.n	8008e82 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d108      	bne.n	8008e70 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d02c      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	4798      	blx	r3
 8008e6e:	e027      	b.n	8008ec0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d023      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	4798      	blx	r3
 8008e80:	e01e      	b.n	8008ec0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10f      	bne.n	8008eb0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f022 0210 	bic.w	r2, r2, #16
 8008e9e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d003      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 8306 	beq.w	80094d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 8088 	beq.w	8008fe8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2204      	movs	r2, #4
 8008edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a7a      	ldr	r2, [pc, #488]	@ (80090d0 <HAL_DMA_IRQHandler+0xa08>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d04a      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a79      	ldr	r2, [pc, #484]	@ (80090d4 <HAL_DMA_IRQHandler+0xa0c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d045      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a77      	ldr	r2, [pc, #476]	@ (80090d8 <HAL_DMA_IRQHandler+0xa10>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d040      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a76      	ldr	r2, [pc, #472]	@ (80090dc <HAL_DMA_IRQHandler+0xa14>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d03b      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a74      	ldr	r2, [pc, #464]	@ (80090e0 <HAL_DMA_IRQHandler+0xa18>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d036      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a73      	ldr	r2, [pc, #460]	@ (80090e4 <HAL_DMA_IRQHandler+0xa1c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d031      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a71      	ldr	r2, [pc, #452]	@ (80090e8 <HAL_DMA_IRQHandler+0xa20>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d02c      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a70      	ldr	r2, [pc, #448]	@ (80090ec <HAL_DMA_IRQHandler+0xa24>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d027      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a6e      	ldr	r2, [pc, #440]	@ (80090f0 <HAL_DMA_IRQHandler+0xa28>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d022      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a6d      	ldr	r2, [pc, #436]	@ (80090f4 <HAL_DMA_IRQHandler+0xa2c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d01d      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a6b      	ldr	r2, [pc, #428]	@ (80090f8 <HAL_DMA_IRQHandler+0xa30>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d018      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a6a      	ldr	r2, [pc, #424]	@ (80090fc <HAL_DMA_IRQHandler+0xa34>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d013      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a68      	ldr	r2, [pc, #416]	@ (8009100 <HAL_DMA_IRQHandler+0xa38>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00e      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a67      	ldr	r2, [pc, #412]	@ (8009104 <HAL_DMA_IRQHandler+0xa3c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d009      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a65      	ldr	r2, [pc, #404]	@ (8009108 <HAL_DMA_IRQHandler+0xa40>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d004      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x8b8>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a64      	ldr	r2, [pc, #400]	@ (800910c <HAL_DMA_IRQHandler+0xa44>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d108      	bne.n	8008f92 <HAL_DMA_IRQHandler+0x8ca>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0201 	bic.w	r2, r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	e007      	b.n	8008fa2 <HAL_DMA_IRQHandler+0x8da>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 0201 	bic.w	r2, r2, #1
 8008fa0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	60fb      	str	r3, [r7, #12]
 8008fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d307      	bcc.n	8008fbe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1f2      	bne.n	8008fa2 <HAL_DMA_IRQHandler+0x8da>
 8008fbc:	e000      	b.n	8008fc0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008fbe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d004      	beq.n	8008fd8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2203      	movs	r2, #3
 8008fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008fd6:	e003      	b.n	8008fe0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f000 8272 	beq.w	80094d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	4798      	blx	r3
 8008ffa:	e26c      	b.n	80094d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a43      	ldr	r2, [pc, #268]	@ (8009110 <HAL_DMA_IRQHandler+0xa48>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d022      	beq.n	800904c <HAL_DMA_IRQHandler+0x984>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a42      	ldr	r2, [pc, #264]	@ (8009114 <HAL_DMA_IRQHandler+0xa4c>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d01d      	beq.n	800904c <HAL_DMA_IRQHandler+0x984>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a40      	ldr	r2, [pc, #256]	@ (8009118 <HAL_DMA_IRQHandler+0xa50>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d018      	beq.n	800904c <HAL_DMA_IRQHandler+0x984>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a3f      	ldr	r2, [pc, #252]	@ (800911c <HAL_DMA_IRQHandler+0xa54>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d013      	beq.n	800904c <HAL_DMA_IRQHandler+0x984>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a3d      	ldr	r2, [pc, #244]	@ (8009120 <HAL_DMA_IRQHandler+0xa58>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d00e      	beq.n	800904c <HAL_DMA_IRQHandler+0x984>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a3c      	ldr	r2, [pc, #240]	@ (8009124 <HAL_DMA_IRQHandler+0xa5c>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d009      	beq.n	800904c <HAL_DMA_IRQHandler+0x984>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a3a      	ldr	r2, [pc, #232]	@ (8009128 <HAL_DMA_IRQHandler+0xa60>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d004      	beq.n	800904c <HAL_DMA_IRQHandler+0x984>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a39      	ldr	r2, [pc, #228]	@ (800912c <HAL_DMA_IRQHandler+0xa64>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d101      	bne.n	8009050 <HAL_DMA_IRQHandler+0x988>
 800904c:	2301      	movs	r3, #1
 800904e:	e000      	b.n	8009052 <HAL_DMA_IRQHandler+0x98a>
 8009050:	2300      	movs	r3, #0
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 823f 	beq.w	80094d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009064:	f003 031f 	and.w	r3, r3, #31
 8009068:	2204      	movs	r2, #4
 800906a:	409a      	lsls	r2, r3
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	4013      	ands	r3, r2
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 80cd 	beq.w	8009210 <HAL_DMA_IRQHandler+0xb48>
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 80c7 	beq.w	8009210 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009086:	f003 031f 	and.w	r3, r3, #31
 800908a:	2204      	movs	r2, #4
 800908c:	409a      	lsls	r2, r3
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d049      	beq.n	8009130 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d109      	bne.n	80090ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 8210 	beq.w	80094d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090b8:	e20a      	b.n	80094d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 8206 	beq.w	80094d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090cc:	e200      	b.n	80094d0 <HAL_DMA_IRQHandler+0xe08>
 80090ce:	bf00      	nop
 80090d0:	40020010 	.word	0x40020010
 80090d4:	40020028 	.word	0x40020028
 80090d8:	40020040 	.word	0x40020040
 80090dc:	40020058 	.word	0x40020058
 80090e0:	40020070 	.word	0x40020070
 80090e4:	40020088 	.word	0x40020088
 80090e8:	400200a0 	.word	0x400200a0
 80090ec:	400200b8 	.word	0x400200b8
 80090f0:	40020410 	.word	0x40020410
 80090f4:	40020428 	.word	0x40020428
 80090f8:	40020440 	.word	0x40020440
 80090fc:	40020458 	.word	0x40020458
 8009100:	40020470 	.word	0x40020470
 8009104:	40020488 	.word	0x40020488
 8009108:	400204a0 	.word	0x400204a0
 800910c:	400204b8 	.word	0x400204b8
 8009110:	58025408 	.word	0x58025408
 8009114:	5802541c 	.word	0x5802541c
 8009118:	58025430 	.word	0x58025430
 800911c:	58025444 	.word	0x58025444
 8009120:	58025458 	.word	0x58025458
 8009124:	5802546c 	.word	0x5802546c
 8009128:	58025480 	.word	0x58025480
 800912c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	f003 0320 	and.w	r3, r3, #32
 8009136:	2b00      	cmp	r3, #0
 8009138:	d160      	bne.n	80091fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a7f      	ldr	r2, [pc, #508]	@ (800933c <HAL_DMA_IRQHandler+0xc74>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d04a      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a7d      	ldr	r2, [pc, #500]	@ (8009340 <HAL_DMA_IRQHandler+0xc78>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d045      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a7c      	ldr	r2, [pc, #496]	@ (8009344 <HAL_DMA_IRQHandler+0xc7c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d040      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a7a      	ldr	r2, [pc, #488]	@ (8009348 <HAL_DMA_IRQHandler+0xc80>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d03b      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a79      	ldr	r2, [pc, #484]	@ (800934c <HAL_DMA_IRQHandler+0xc84>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d036      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a77      	ldr	r2, [pc, #476]	@ (8009350 <HAL_DMA_IRQHandler+0xc88>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d031      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a76      	ldr	r2, [pc, #472]	@ (8009354 <HAL_DMA_IRQHandler+0xc8c>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d02c      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a74      	ldr	r2, [pc, #464]	@ (8009358 <HAL_DMA_IRQHandler+0xc90>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d027      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a73      	ldr	r2, [pc, #460]	@ (800935c <HAL_DMA_IRQHandler+0xc94>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d022      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a71      	ldr	r2, [pc, #452]	@ (8009360 <HAL_DMA_IRQHandler+0xc98>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d01d      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a70      	ldr	r2, [pc, #448]	@ (8009364 <HAL_DMA_IRQHandler+0xc9c>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d018      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a6e      	ldr	r2, [pc, #440]	@ (8009368 <HAL_DMA_IRQHandler+0xca0>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d013      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a6d      	ldr	r2, [pc, #436]	@ (800936c <HAL_DMA_IRQHandler+0xca4>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d00e      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a6b      	ldr	r2, [pc, #428]	@ (8009370 <HAL_DMA_IRQHandler+0xca8>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d009      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a6a      	ldr	r2, [pc, #424]	@ (8009374 <HAL_DMA_IRQHandler+0xcac>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d004      	beq.n	80091da <HAL_DMA_IRQHandler+0xb12>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a68      	ldr	r2, [pc, #416]	@ (8009378 <HAL_DMA_IRQHandler+0xcb0>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d108      	bne.n	80091ec <HAL_DMA_IRQHandler+0xb24>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0208 	bic.w	r2, r2, #8
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	e007      	b.n	80091fc <HAL_DMA_IRQHandler+0xb34>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f022 0204 	bic.w	r2, r2, #4
 80091fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 8165 	beq.w	80094d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800920e:	e15f      	b.n	80094d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009214:	f003 031f 	and.w	r3, r3, #31
 8009218:	2202      	movs	r2, #2
 800921a:	409a      	lsls	r2, r3
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	4013      	ands	r3, r2
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 80c5 	beq.w	80093b0 <HAL_DMA_IRQHandler+0xce8>
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f003 0302 	and.w	r3, r3, #2
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 80bf 	beq.w	80093b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009236:	f003 031f 	and.w	r3, r3, #31
 800923a:	2202      	movs	r2, #2
 800923c:	409a      	lsls	r2, r3
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d018      	beq.n	800927e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d109      	bne.n	800926a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 813a 	beq.w	80094d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009268:	e134      	b.n	80094d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 8130 	beq.w	80094d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800927c:	e12a      	b.n	80094d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f003 0320 	and.w	r3, r3, #32
 8009284:	2b00      	cmp	r3, #0
 8009286:	f040 8089 	bne.w	800939c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a2b      	ldr	r2, [pc, #172]	@ (800933c <HAL_DMA_IRQHandler+0xc74>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d04a      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a29      	ldr	r2, [pc, #164]	@ (8009340 <HAL_DMA_IRQHandler+0xc78>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d045      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a28      	ldr	r2, [pc, #160]	@ (8009344 <HAL_DMA_IRQHandler+0xc7c>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d040      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a26      	ldr	r2, [pc, #152]	@ (8009348 <HAL_DMA_IRQHandler+0xc80>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d03b      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a25      	ldr	r2, [pc, #148]	@ (800934c <HAL_DMA_IRQHandler+0xc84>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d036      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a23      	ldr	r2, [pc, #140]	@ (8009350 <HAL_DMA_IRQHandler+0xc88>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d031      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a22      	ldr	r2, [pc, #136]	@ (8009354 <HAL_DMA_IRQHandler+0xc8c>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d02c      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a20      	ldr	r2, [pc, #128]	@ (8009358 <HAL_DMA_IRQHandler+0xc90>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d027      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a1f      	ldr	r2, [pc, #124]	@ (800935c <HAL_DMA_IRQHandler+0xc94>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d022      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009360 <HAL_DMA_IRQHandler+0xc98>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d01d      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a1c      	ldr	r2, [pc, #112]	@ (8009364 <HAL_DMA_IRQHandler+0xc9c>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d018      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009368 <HAL_DMA_IRQHandler+0xca0>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d013      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a19      	ldr	r2, [pc, #100]	@ (800936c <HAL_DMA_IRQHandler+0xca4>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d00e      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a17      	ldr	r2, [pc, #92]	@ (8009370 <HAL_DMA_IRQHandler+0xca8>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d009      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a16      	ldr	r2, [pc, #88]	@ (8009374 <HAL_DMA_IRQHandler+0xcac>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d004      	beq.n	800932a <HAL_DMA_IRQHandler+0xc62>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a14      	ldr	r2, [pc, #80]	@ (8009378 <HAL_DMA_IRQHandler+0xcb0>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d128      	bne.n	800937c <HAL_DMA_IRQHandler+0xcb4>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0214 	bic.w	r2, r2, #20
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	e027      	b.n	800938c <HAL_DMA_IRQHandler+0xcc4>
 800933c:	40020010 	.word	0x40020010
 8009340:	40020028 	.word	0x40020028
 8009344:	40020040 	.word	0x40020040
 8009348:	40020058 	.word	0x40020058
 800934c:	40020070 	.word	0x40020070
 8009350:	40020088 	.word	0x40020088
 8009354:	400200a0 	.word	0x400200a0
 8009358:	400200b8 	.word	0x400200b8
 800935c:	40020410 	.word	0x40020410
 8009360:	40020428 	.word	0x40020428
 8009364:	40020440 	.word	0x40020440
 8009368:	40020458 	.word	0x40020458
 800936c:	40020470 	.word	0x40020470
 8009370:	40020488 	.word	0x40020488
 8009374:	400204a0 	.word	0x400204a0
 8009378:	400204b8 	.word	0x400204b8
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 020a 	bic.w	r2, r2, #10
 800938a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 8097 	beq.w	80094d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093ae:	e091      	b.n	80094d4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093b4:	f003 031f 	and.w	r3, r3, #31
 80093b8:	2208      	movs	r2, #8
 80093ba:	409a      	lsls	r2, r3
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	4013      	ands	r3, r2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 8088 	beq.w	80094d6 <HAL_DMA_IRQHandler+0xe0e>
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f003 0308 	and.w	r3, r3, #8
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f000 8082 	beq.w	80094d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a41      	ldr	r2, [pc, #260]	@ (80094dc <HAL_DMA_IRQHandler+0xe14>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d04a      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a3f      	ldr	r2, [pc, #252]	@ (80094e0 <HAL_DMA_IRQHandler+0xe18>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d045      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a3e      	ldr	r2, [pc, #248]	@ (80094e4 <HAL_DMA_IRQHandler+0xe1c>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d040      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a3c      	ldr	r2, [pc, #240]	@ (80094e8 <HAL_DMA_IRQHandler+0xe20>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d03b      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a3b      	ldr	r2, [pc, #236]	@ (80094ec <HAL_DMA_IRQHandler+0xe24>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d036      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a39      	ldr	r2, [pc, #228]	@ (80094f0 <HAL_DMA_IRQHandler+0xe28>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d031      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a38      	ldr	r2, [pc, #224]	@ (80094f4 <HAL_DMA_IRQHandler+0xe2c>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d02c      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a36      	ldr	r2, [pc, #216]	@ (80094f8 <HAL_DMA_IRQHandler+0xe30>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d027      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a35      	ldr	r2, [pc, #212]	@ (80094fc <HAL_DMA_IRQHandler+0xe34>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d022      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a33      	ldr	r2, [pc, #204]	@ (8009500 <HAL_DMA_IRQHandler+0xe38>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d01d      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a32      	ldr	r2, [pc, #200]	@ (8009504 <HAL_DMA_IRQHandler+0xe3c>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d018      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a30      	ldr	r2, [pc, #192]	@ (8009508 <HAL_DMA_IRQHandler+0xe40>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d013      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a2f      	ldr	r2, [pc, #188]	@ (800950c <HAL_DMA_IRQHandler+0xe44>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d00e      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a2d      	ldr	r2, [pc, #180]	@ (8009510 <HAL_DMA_IRQHandler+0xe48>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d009      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a2c      	ldr	r2, [pc, #176]	@ (8009514 <HAL_DMA_IRQHandler+0xe4c>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d004      	beq.n	8009472 <HAL_DMA_IRQHandler+0xdaa>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a2a      	ldr	r2, [pc, #168]	@ (8009518 <HAL_DMA_IRQHandler+0xe50>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d108      	bne.n	8009484 <HAL_DMA_IRQHandler+0xdbc>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f022 021c 	bic.w	r2, r2, #28
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	e007      	b.n	8009494 <HAL_DMA_IRQHandler+0xdcc>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 020e 	bic.w	r2, r2, #14
 8009492:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009498:	f003 031f 	and.w	r3, r3, #31
 800949c:	2201      	movs	r2, #1
 800949e:	409a      	lsls	r2, r3
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d009      	beq.n	80094d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	4798      	blx	r3
 80094ca:	e004      	b.n	80094d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80094cc:	bf00      	nop
 80094ce:	e002      	b.n	80094d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094d0:	bf00      	nop
 80094d2:	e000      	b.n	80094d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80094d6:	3728      	adds	r7, #40	@ 0x28
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	40020010 	.word	0x40020010
 80094e0:	40020028 	.word	0x40020028
 80094e4:	40020040 	.word	0x40020040
 80094e8:	40020058 	.word	0x40020058
 80094ec:	40020070 	.word	0x40020070
 80094f0:	40020088 	.word	0x40020088
 80094f4:	400200a0 	.word	0x400200a0
 80094f8:	400200b8 	.word	0x400200b8
 80094fc:	40020410 	.word	0x40020410
 8009500:	40020428 	.word	0x40020428
 8009504:	40020440 	.word	0x40020440
 8009508:	40020458 	.word	0x40020458
 800950c:	40020470 	.word	0x40020470
 8009510:	40020488 	.word	0x40020488
 8009514:	400204a0 	.word	0x400204a0
 8009518:	400204b8 	.word	0x400204b8

0800951c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800952e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009534:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a7f      	ldr	r2, [pc, #508]	@ (8009738 <DMA_SetConfig+0x21c>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d072      	beq.n	8009626 <DMA_SetConfig+0x10a>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a7d      	ldr	r2, [pc, #500]	@ (800973c <DMA_SetConfig+0x220>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d06d      	beq.n	8009626 <DMA_SetConfig+0x10a>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a7c      	ldr	r2, [pc, #496]	@ (8009740 <DMA_SetConfig+0x224>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d068      	beq.n	8009626 <DMA_SetConfig+0x10a>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a7a      	ldr	r2, [pc, #488]	@ (8009744 <DMA_SetConfig+0x228>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d063      	beq.n	8009626 <DMA_SetConfig+0x10a>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a79      	ldr	r2, [pc, #484]	@ (8009748 <DMA_SetConfig+0x22c>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d05e      	beq.n	8009626 <DMA_SetConfig+0x10a>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a77      	ldr	r2, [pc, #476]	@ (800974c <DMA_SetConfig+0x230>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d059      	beq.n	8009626 <DMA_SetConfig+0x10a>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a76      	ldr	r2, [pc, #472]	@ (8009750 <DMA_SetConfig+0x234>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d054      	beq.n	8009626 <DMA_SetConfig+0x10a>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a74      	ldr	r2, [pc, #464]	@ (8009754 <DMA_SetConfig+0x238>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d04f      	beq.n	8009626 <DMA_SetConfig+0x10a>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a73      	ldr	r2, [pc, #460]	@ (8009758 <DMA_SetConfig+0x23c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d04a      	beq.n	8009626 <DMA_SetConfig+0x10a>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a71      	ldr	r2, [pc, #452]	@ (800975c <DMA_SetConfig+0x240>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d045      	beq.n	8009626 <DMA_SetConfig+0x10a>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a70      	ldr	r2, [pc, #448]	@ (8009760 <DMA_SetConfig+0x244>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d040      	beq.n	8009626 <DMA_SetConfig+0x10a>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a6e      	ldr	r2, [pc, #440]	@ (8009764 <DMA_SetConfig+0x248>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d03b      	beq.n	8009626 <DMA_SetConfig+0x10a>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a6d      	ldr	r2, [pc, #436]	@ (8009768 <DMA_SetConfig+0x24c>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d036      	beq.n	8009626 <DMA_SetConfig+0x10a>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a6b      	ldr	r2, [pc, #428]	@ (800976c <DMA_SetConfig+0x250>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d031      	beq.n	8009626 <DMA_SetConfig+0x10a>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a6a      	ldr	r2, [pc, #424]	@ (8009770 <DMA_SetConfig+0x254>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d02c      	beq.n	8009626 <DMA_SetConfig+0x10a>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a68      	ldr	r2, [pc, #416]	@ (8009774 <DMA_SetConfig+0x258>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d027      	beq.n	8009626 <DMA_SetConfig+0x10a>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a67      	ldr	r2, [pc, #412]	@ (8009778 <DMA_SetConfig+0x25c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d022      	beq.n	8009626 <DMA_SetConfig+0x10a>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a65      	ldr	r2, [pc, #404]	@ (800977c <DMA_SetConfig+0x260>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d01d      	beq.n	8009626 <DMA_SetConfig+0x10a>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a64      	ldr	r2, [pc, #400]	@ (8009780 <DMA_SetConfig+0x264>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d018      	beq.n	8009626 <DMA_SetConfig+0x10a>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a62      	ldr	r2, [pc, #392]	@ (8009784 <DMA_SetConfig+0x268>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d013      	beq.n	8009626 <DMA_SetConfig+0x10a>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a61      	ldr	r2, [pc, #388]	@ (8009788 <DMA_SetConfig+0x26c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d00e      	beq.n	8009626 <DMA_SetConfig+0x10a>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a5f      	ldr	r2, [pc, #380]	@ (800978c <DMA_SetConfig+0x270>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d009      	beq.n	8009626 <DMA_SetConfig+0x10a>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a5e      	ldr	r2, [pc, #376]	@ (8009790 <DMA_SetConfig+0x274>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d004      	beq.n	8009626 <DMA_SetConfig+0x10a>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a5c      	ldr	r2, [pc, #368]	@ (8009794 <DMA_SetConfig+0x278>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d101      	bne.n	800962a <DMA_SetConfig+0x10e>
 8009626:	2301      	movs	r3, #1
 8009628:	e000      	b.n	800962c <DMA_SetConfig+0x110>
 800962a:	2300      	movs	r3, #0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00d      	beq.n	800964c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009638:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d004      	beq.n	800964c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800964a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a39      	ldr	r2, [pc, #228]	@ (8009738 <DMA_SetConfig+0x21c>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d04a      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a38      	ldr	r2, [pc, #224]	@ (800973c <DMA_SetConfig+0x220>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d045      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a36      	ldr	r2, [pc, #216]	@ (8009740 <DMA_SetConfig+0x224>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d040      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a35      	ldr	r2, [pc, #212]	@ (8009744 <DMA_SetConfig+0x228>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d03b      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a33      	ldr	r2, [pc, #204]	@ (8009748 <DMA_SetConfig+0x22c>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d036      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a32      	ldr	r2, [pc, #200]	@ (800974c <DMA_SetConfig+0x230>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d031      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a30      	ldr	r2, [pc, #192]	@ (8009750 <DMA_SetConfig+0x234>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d02c      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a2f      	ldr	r2, [pc, #188]	@ (8009754 <DMA_SetConfig+0x238>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d027      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a2d      	ldr	r2, [pc, #180]	@ (8009758 <DMA_SetConfig+0x23c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d022      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a2c      	ldr	r2, [pc, #176]	@ (800975c <DMA_SetConfig+0x240>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d01d      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a2a      	ldr	r2, [pc, #168]	@ (8009760 <DMA_SetConfig+0x244>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d018      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a29      	ldr	r2, [pc, #164]	@ (8009764 <DMA_SetConfig+0x248>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d013      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a27      	ldr	r2, [pc, #156]	@ (8009768 <DMA_SetConfig+0x24c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d00e      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a26      	ldr	r2, [pc, #152]	@ (800976c <DMA_SetConfig+0x250>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d009      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a24      	ldr	r2, [pc, #144]	@ (8009770 <DMA_SetConfig+0x254>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d004      	beq.n	80096ec <DMA_SetConfig+0x1d0>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a23      	ldr	r2, [pc, #140]	@ (8009774 <DMA_SetConfig+0x258>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d101      	bne.n	80096f0 <DMA_SetConfig+0x1d4>
 80096ec:	2301      	movs	r3, #1
 80096ee:	e000      	b.n	80096f2 <DMA_SetConfig+0x1d6>
 80096f0:	2300      	movs	r3, #0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d059      	beq.n	80097aa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096fa:	f003 031f 	and.w	r3, r3, #31
 80096fe:	223f      	movs	r2, #63	@ 0x3f
 8009700:	409a      	lsls	r2, r3
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009714:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	2b40      	cmp	r3, #64	@ 0x40
 8009724:	d138      	bne.n	8009798 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009736:	e086      	b.n	8009846 <DMA_SetConfig+0x32a>
 8009738:	40020010 	.word	0x40020010
 800973c:	40020028 	.word	0x40020028
 8009740:	40020040 	.word	0x40020040
 8009744:	40020058 	.word	0x40020058
 8009748:	40020070 	.word	0x40020070
 800974c:	40020088 	.word	0x40020088
 8009750:	400200a0 	.word	0x400200a0
 8009754:	400200b8 	.word	0x400200b8
 8009758:	40020410 	.word	0x40020410
 800975c:	40020428 	.word	0x40020428
 8009760:	40020440 	.word	0x40020440
 8009764:	40020458 	.word	0x40020458
 8009768:	40020470 	.word	0x40020470
 800976c:	40020488 	.word	0x40020488
 8009770:	400204a0 	.word	0x400204a0
 8009774:	400204b8 	.word	0x400204b8
 8009778:	58025408 	.word	0x58025408
 800977c:	5802541c 	.word	0x5802541c
 8009780:	58025430 	.word	0x58025430
 8009784:	58025444 	.word	0x58025444
 8009788:	58025458 	.word	0x58025458
 800978c:	5802546c 	.word	0x5802546c
 8009790:	58025480 	.word	0x58025480
 8009794:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	60da      	str	r2, [r3, #12]
}
 80097a8:	e04d      	b.n	8009846 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a29      	ldr	r2, [pc, #164]	@ (8009854 <DMA_SetConfig+0x338>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d022      	beq.n	80097fa <DMA_SetConfig+0x2de>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a27      	ldr	r2, [pc, #156]	@ (8009858 <DMA_SetConfig+0x33c>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d01d      	beq.n	80097fa <DMA_SetConfig+0x2de>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a26      	ldr	r2, [pc, #152]	@ (800985c <DMA_SetConfig+0x340>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d018      	beq.n	80097fa <DMA_SetConfig+0x2de>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a24      	ldr	r2, [pc, #144]	@ (8009860 <DMA_SetConfig+0x344>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d013      	beq.n	80097fa <DMA_SetConfig+0x2de>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a23      	ldr	r2, [pc, #140]	@ (8009864 <DMA_SetConfig+0x348>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d00e      	beq.n	80097fa <DMA_SetConfig+0x2de>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a21      	ldr	r2, [pc, #132]	@ (8009868 <DMA_SetConfig+0x34c>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d009      	beq.n	80097fa <DMA_SetConfig+0x2de>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a20      	ldr	r2, [pc, #128]	@ (800986c <DMA_SetConfig+0x350>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d004      	beq.n	80097fa <DMA_SetConfig+0x2de>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a1e      	ldr	r2, [pc, #120]	@ (8009870 <DMA_SetConfig+0x354>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d101      	bne.n	80097fe <DMA_SetConfig+0x2e2>
 80097fa:	2301      	movs	r3, #1
 80097fc:	e000      	b.n	8009800 <DMA_SetConfig+0x2e4>
 80097fe:	2300      	movs	r3, #0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d020      	beq.n	8009846 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009808:	f003 031f 	and.w	r3, r3, #31
 800980c:	2201      	movs	r2, #1
 800980e:	409a      	lsls	r2, r3
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	2b40      	cmp	r3, #64	@ 0x40
 8009822:	d108      	bne.n	8009836 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	60da      	str	r2, [r3, #12]
}
 8009834:	e007      	b.n	8009846 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	60da      	str	r2, [r3, #12]
}
 8009846:	bf00      	nop
 8009848:	371c      	adds	r7, #28
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	58025408 	.word	0x58025408
 8009858:	5802541c 	.word	0x5802541c
 800985c:	58025430 	.word	0x58025430
 8009860:	58025444 	.word	0x58025444
 8009864:	58025458 	.word	0x58025458
 8009868:	5802546c 	.word	0x5802546c
 800986c:	58025480 	.word	0x58025480
 8009870:	58025494 	.word	0x58025494

08009874 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a42      	ldr	r2, [pc, #264]	@ (800998c <DMA_CalcBaseAndBitshift+0x118>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d04a      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a41      	ldr	r2, [pc, #260]	@ (8009990 <DMA_CalcBaseAndBitshift+0x11c>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d045      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a3f      	ldr	r2, [pc, #252]	@ (8009994 <DMA_CalcBaseAndBitshift+0x120>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d040      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a3e      	ldr	r2, [pc, #248]	@ (8009998 <DMA_CalcBaseAndBitshift+0x124>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d03b      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a3c      	ldr	r2, [pc, #240]	@ (800999c <DMA_CalcBaseAndBitshift+0x128>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d036      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a3b      	ldr	r2, [pc, #236]	@ (80099a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d031      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a39      	ldr	r2, [pc, #228]	@ (80099a4 <DMA_CalcBaseAndBitshift+0x130>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d02c      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a38      	ldr	r2, [pc, #224]	@ (80099a8 <DMA_CalcBaseAndBitshift+0x134>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d027      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a36      	ldr	r2, [pc, #216]	@ (80099ac <DMA_CalcBaseAndBitshift+0x138>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d022      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a35      	ldr	r2, [pc, #212]	@ (80099b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d01d      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a33      	ldr	r2, [pc, #204]	@ (80099b4 <DMA_CalcBaseAndBitshift+0x140>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d018      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a32      	ldr	r2, [pc, #200]	@ (80099b8 <DMA_CalcBaseAndBitshift+0x144>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d013      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a30      	ldr	r2, [pc, #192]	@ (80099bc <DMA_CalcBaseAndBitshift+0x148>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d00e      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a2f      	ldr	r2, [pc, #188]	@ (80099c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d009      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a2d      	ldr	r2, [pc, #180]	@ (80099c4 <DMA_CalcBaseAndBitshift+0x150>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d004      	beq.n	800991c <DMA_CalcBaseAndBitshift+0xa8>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a2c      	ldr	r2, [pc, #176]	@ (80099c8 <DMA_CalcBaseAndBitshift+0x154>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d101      	bne.n	8009920 <DMA_CalcBaseAndBitshift+0xac>
 800991c:	2301      	movs	r3, #1
 800991e:	e000      	b.n	8009922 <DMA_CalcBaseAndBitshift+0xae>
 8009920:	2300      	movs	r3, #0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d024      	beq.n	8009970 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	3b10      	subs	r3, #16
 800992e:	4a27      	ldr	r2, [pc, #156]	@ (80099cc <DMA_CalcBaseAndBitshift+0x158>)
 8009930:	fba2 2303 	umull	r2, r3, r2, r3
 8009934:	091b      	lsrs	r3, r3, #4
 8009936:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f003 0307 	and.w	r3, r3, #7
 800993e:	4a24      	ldr	r2, [pc, #144]	@ (80099d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8009940:	5cd3      	ldrb	r3, [r2, r3]
 8009942:	461a      	mov	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b03      	cmp	r3, #3
 800994c:	d908      	bls.n	8009960 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	4b1f      	ldr	r3, [pc, #124]	@ (80099d4 <DMA_CalcBaseAndBitshift+0x160>)
 8009956:	4013      	ands	r3, r2
 8009958:	1d1a      	adds	r2, r3, #4
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	659a      	str	r2, [r3, #88]	@ 0x58
 800995e:	e00d      	b.n	800997c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	461a      	mov	r2, r3
 8009966:	4b1b      	ldr	r3, [pc, #108]	@ (80099d4 <DMA_CalcBaseAndBitshift+0x160>)
 8009968:	4013      	ands	r3, r2
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	6593      	str	r3, [r2, #88]	@ 0x58
 800996e:	e005      	b.n	800997c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009980:	4618      	mov	r0, r3
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	40020010 	.word	0x40020010
 8009990:	40020028 	.word	0x40020028
 8009994:	40020040 	.word	0x40020040
 8009998:	40020058 	.word	0x40020058
 800999c:	40020070 	.word	0x40020070
 80099a0:	40020088 	.word	0x40020088
 80099a4:	400200a0 	.word	0x400200a0
 80099a8:	400200b8 	.word	0x400200b8
 80099ac:	40020410 	.word	0x40020410
 80099b0:	40020428 	.word	0x40020428
 80099b4:	40020440 	.word	0x40020440
 80099b8:	40020458 	.word	0x40020458
 80099bc:	40020470 	.word	0x40020470
 80099c0:	40020488 	.word	0x40020488
 80099c4:	400204a0 	.word	0x400204a0
 80099c8:	400204b8 	.word	0x400204b8
 80099cc:	aaaaaaab 	.word	0xaaaaaaab
 80099d0:	0801d910 	.word	0x0801d910
 80099d4:	fffffc00 	.word	0xfffffc00

080099d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d120      	bne.n	8009a2e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d858      	bhi.n	8009aa6 <DMA_CheckFifoParam+0xce>
 80099f4:	a201      	add	r2, pc, #4	@ (adr r2, 80099fc <DMA_CheckFifoParam+0x24>)
 80099f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fa:	bf00      	nop
 80099fc:	08009a0d 	.word	0x08009a0d
 8009a00:	08009a1f 	.word	0x08009a1f
 8009a04:	08009a0d 	.word	0x08009a0d
 8009a08:	08009aa7 	.word	0x08009aa7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d048      	beq.n	8009aaa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009a1c:	e045      	b.n	8009aaa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009a26:	d142      	bne.n	8009aae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009a2c:	e03f      	b.n	8009aae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a36:	d123      	bne.n	8009a80 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d838      	bhi.n	8009ab2 <DMA_CheckFifoParam+0xda>
 8009a40:	a201      	add	r2, pc, #4	@ (adr r2, 8009a48 <DMA_CheckFifoParam+0x70>)
 8009a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a46:	bf00      	nop
 8009a48:	08009a59 	.word	0x08009a59
 8009a4c:	08009a5f 	.word	0x08009a5f
 8009a50:	08009a59 	.word	0x08009a59
 8009a54:	08009a71 	.word	0x08009a71
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	73fb      	strb	r3, [r7, #15]
        break;
 8009a5c:	e030      	b.n	8009ac0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d025      	beq.n	8009ab6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009a6e:	e022      	b.n	8009ab6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009a78:	d11f      	bne.n	8009aba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009a7e:	e01c      	b.n	8009aba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d902      	bls.n	8009a8e <DMA_CheckFifoParam+0xb6>
 8009a88:	2b03      	cmp	r3, #3
 8009a8a:	d003      	beq.n	8009a94 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009a8c:	e018      	b.n	8009ac0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	73fb      	strb	r3, [r7, #15]
        break;
 8009a92:	e015      	b.n	8009ac0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00e      	beq.n	8009abe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa4:	e00b      	b.n	8009abe <DMA_CheckFifoParam+0xe6>
        break;
 8009aa6:	bf00      	nop
 8009aa8:	e00a      	b.n	8009ac0 <DMA_CheckFifoParam+0xe8>
        break;
 8009aaa:	bf00      	nop
 8009aac:	e008      	b.n	8009ac0 <DMA_CheckFifoParam+0xe8>
        break;
 8009aae:	bf00      	nop
 8009ab0:	e006      	b.n	8009ac0 <DMA_CheckFifoParam+0xe8>
        break;
 8009ab2:	bf00      	nop
 8009ab4:	e004      	b.n	8009ac0 <DMA_CheckFifoParam+0xe8>
        break;
 8009ab6:	bf00      	nop
 8009ab8:	e002      	b.n	8009ac0 <DMA_CheckFifoParam+0xe8>
        break;
 8009aba:	bf00      	nop
 8009abc:	e000      	b.n	8009ac0 <DMA_CheckFifoParam+0xe8>
    break;
 8009abe:	bf00      	nop
    }
  }

  return status;
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop

08009ad0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a38      	ldr	r2, [pc, #224]	@ (8009bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d022      	beq.n	8009b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a36      	ldr	r2, [pc, #216]	@ (8009bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d01d      	beq.n	8009b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a35      	ldr	r2, [pc, #212]	@ (8009bcc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d018      	beq.n	8009b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a33      	ldr	r2, [pc, #204]	@ (8009bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d013      	beq.n	8009b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a32      	ldr	r2, [pc, #200]	@ (8009bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d00e      	beq.n	8009b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a30      	ldr	r2, [pc, #192]	@ (8009bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d009      	beq.n	8009b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a2f      	ldr	r2, [pc, #188]	@ (8009bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d004      	beq.n	8009b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a2d      	ldr	r2, [pc, #180]	@ (8009be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d101      	bne.n	8009b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e000      	b.n	8009b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009b32:	2300      	movs	r3, #0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d01a      	beq.n	8009b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	3b08      	subs	r3, #8
 8009b40:	4a28      	ldr	r2, [pc, #160]	@ (8009be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009b42:	fba2 2303 	umull	r2, r3, r2, r3
 8009b46:	091b      	lsrs	r3, r3, #4
 8009b48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4b26      	ldr	r3, [pc, #152]	@ (8009be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009b4e:	4413      	add	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	461a      	mov	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a24      	ldr	r2, [pc, #144]	@ (8009bec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009b5c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f003 031f 	and.w	r3, r3, #31
 8009b64:	2201      	movs	r2, #1
 8009b66:	409a      	lsls	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009b6c:	e024      	b.n	8009bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	3b10      	subs	r3, #16
 8009b76:	4a1e      	ldr	r2, [pc, #120]	@ (8009bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009b78:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7c:	091b      	lsrs	r3, r3, #4
 8009b7e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	4a1c      	ldr	r2, [pc, #112]	@ (8009bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d806      	bhi.n	8009b96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8009bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d902      	bls.n	8009b96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	3308      	adds	r3, #8
 8009b94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	4b18      	ldr	r3, [pc, #96]	@ (8009bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009b9a:	4413      	add	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a16      	ldr	r2, [pc, #88]	@ (8009c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009ba8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f003 031f 	and.w	r3, r3, #31
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	409a      	lsls	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009bb8:	bf00      	nop
 8009bba:	3714      	adds	r7, #20
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	58025408 	.word	0x58025408
 8009bc8:	5802541c 	.word	0x5802541c
 8009bcc:	58025430 	.word	0x58025430
 8009bd0:	58025444 	.word	0x58025444
 8009bd4:	58025458 	.word	0x58025458
 8009bd8:	5802546c 	.word	0x5802546c
 8009bdc:	58025480 	.word	0x58025480
 8009be0:	58025494 	.word	0x58025494
 8009be4:	cccccccd 	.word	0xcccccccd
 8009be8:	16009600 	.word	0x16009600
 8009bec:	58025880 	.word	0x58025880
 8009bf0:	aaaaaaab 	.word	0xaaaaaaab
 8009bf4:	400204b8 	.word	0x400204b8
 8009bf8:	4002040f 	.word	0x4002040f
 8009bfc:	10008200 	.word	0x10008200
 8009c00:	40020880 	.word	0x40020880

08009c04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d04a      	beq.n	8009cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2b08      	cmp	r3, #8
 8009c1e:	d847      	bhi.n	8009cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a25      	ldr	r2, [pc, #148]	@ (8009cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d022      	beq.n	8009c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a24      	ldr	r2, [pc, #144]	@ (8009cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d01d      	beq.n	8009c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a22      	ldr	r2, [pc, #136]	@ (8009cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d018      	beq.n	8009c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a21      	ldr	r2, [pc, #132]	@ (8009cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d013      	beq.n	8009c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8009ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00e      	beq.n	8009c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a1e      	ldr	r2, [pc, #120]	@ (8009cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d009      	beq.n	8009c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a1c      	ldr	r2, [pc, #112]	@ (8009cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d004      	beq.n	8009c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8009cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d101      	bne.n	8009c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009c70:	2301      	movs	r3, #1
 8009c72:	e000      	b.n	8009c76 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009c74:	2300      	movs	r3, #0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00a      	beq.n	8009c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	4b17      	ldr	r3, [pc, #92]	@ (8009cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009c7e:	4413      	add	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	461a      	mov	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a15      	ldr	r2, [pc, #84]	@ (8009ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009c8c:	671a      	str	r2, [r3, #112]	@ 0x70
 8009c8e:	e009      	b.n	8009ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4b14      	ldr	r3, [pc, #80]	@ (8009ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	461a      	mov	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a11      	ldr	r2, [pc, #68]	@ (8009ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009ca2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	2201      	movs	r2, #1
 8009caa:	409a      	lsls	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009cb0:	bf00      	nop
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	58025408 	.word	0x58025408
 8009cc0:	5802541c 	.word	0x5802541c
 8009cc4:	58025430 	.word	0x58025430
 8009cc8:	58025444 	.word	0x58025444
 8009ccc:	58025458 	.word	0x58025458
 8009cd0:	5802546c 	.word	0x5802546c
 8009cd4:	58025480 	.word	0x58025480
 8009cd8:	58025494 	.word	0x58025494
 8009cdc:	1600963f 	.word	0x1600963f
 8009ce0:	58025940 	.word	0x58025940
 8009ce4:	1000823f 	.word	0x1000823f
 8009ce8:	40020940 	.word	0x40020940

08009cec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b089      	sub	sp, #36	@ 0x24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009cfa:	4b86      	ldr	r3, [pc, #536]	@ (8009f14 <HAL_GPIO_Init+0x228>)
 8009cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009cfe:	e18c      	b.n	800a01a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	2101      	movs	r1, #1
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	fa01 f303 	lsl.w	r3, r1, r3
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 817e 	beq.w	800a014 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f003 0303 	and.w	r3, r3, #3
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d005      	beq.n	8009d30 <HAL_GPIO_Init+0x44>
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	f003 0303 	and.w	r3, r3, #3
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d130      	bne.n	8009d92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	2203      	movs	r2, #3
 8009d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d40:	43db      	mvns	r3, r3
 8009d42:	69ba      	ldr	r2, [r7, #24]
 8009d44:	4013      	ands	r3, r2
 8009d46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	005b      	lsls	r3, r3, #1
 8009d50:	fa02 f303 	lsl.w	r3, r2, r3
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	69ba      	ldr	r2, [r7, #24]
 8009d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009d66:	2201      	movs	r2, #1
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6e:	43db      	mvns	r3, r3
 8009d70:	69ba      	ldr	r2, [r7, #24]
 8009d72:	4013      	ands	r3, r2
 8009d74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	091b      	lsrs	r3, r3, #4
 8009d7c:	f003 0201 	and.w	r2, r3, #1
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	fa02 f303 	lsl.w	r3, r2, r3
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	69ba      	ldr	r2, [r7, #24]
 8009d90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	f003 0303 	and.w	r3, r3, #3
 8009d9a:	2b03      	cmp	r3, #3
 8009d9c:	d017      	beq.n	8009dce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	2203      	movs	r2, #3
 8009daa:	fa02 f303 	lsl.w	r3, r2, r3
 8009dae:	43db      	mvns	r3, r3
 8009db0:	69ba      	ldr	r2, [r7, #24]
 8009db2:	4013      	ands	r3, r2
 8009db4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	689a      	ldr	r2, [r3, #8]
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	005b      	lsls	r3, r3, #1
 8009dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc2:	69ba      	ldr	r2, [r7, #24]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	69ba      	ldr	r2, [r7, #24]
 8009dcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	f003 0303 	and.w	r3, r3, #3
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d123      	bne.n	8009e22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	08da      	lsrs	r2, r3, #3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	3208      	adds	r2, #8
 8009de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	f003 0307 	and.w	r3, r3, #7
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	220f      	movs	r2, #15
 8009df2:	fa02 f303 	lsl.w	r3, r2, r3
 8009df6:	43db      	mvns	r3, r3
 8009df8:	69ba      	ldr	r2, [r7, #24]
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	691a      	ldr	r2, [r3, #16]
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	f003 0307 	and.w	r3, r3, #7
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0e:	69ba      	ldr	r2, [r7, #24]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	08da      	lsrs	r2, r3, #3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	3208      	adds	r2, #8
 8009e1c:	69b9      	ldr	r1, [r7, #24]
 8009e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	2203      	movs	r2, #3
 8009e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e32:	43db      	mvns	r3, r3
 8009e34:	69ba      	ldr	r2, [r7, #24]
 8009e36:	4013      	ands	r3, r2
 8009e38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f003 0203 	and.w	r2, r3, #3
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	005b      	lsls	r3, r3, #1
 8009e46:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4a:	69ba      	ldr	r2, [r7, #24]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 80d8 	beq.w	800a014 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e64:	4b2c      	ldr	r3, [pc, #176]	@ (8009f18 <HAL_GPIO_Init+0x22c>)
 8009e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009e6a:	4a2b      	ldr	r2, [pc, #172]	@ (8009f18 <HAL_GPIO_Init+0x22c>)
 8009e6c:	f043 0302 	orr.w	r3, r3, #2
 8009e70:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009e74:	4b28      	ldr	r3, [pc, #160]	@ (8009f18 <HAL_GPIO_Init+0x22c>)
 8009e76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009e7a:	f003 0302 	and.w	r3, r3, #2
 8009e7e:	60fb      	str	r3, [r7, #12]
 8009e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009e82:	4a26      	ldr	r2, [pc, #152]	@ (8009f1c <HAL_GPIO_Init+0x230>)
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	089b      	lsrs	r3, r3, #2
 8009e88:	3302      	adds	r3, #2
 8009e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	f003 0303 	and.w	r3, r3, #3
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	220f      	movs	r2, #15
 8009e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9e:	43db      	mvns	r3, r3
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f20 <HAL_GPIO_Init+0x234>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d04a      	beq.n	8009f44 <HAL_GPIO_Init+0x258>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8009f24 <HAL_GPIO_Init+0x238>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d02b      	beq.n	8009f0e <HAL_GPIO_Init+0x222>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8009f28 <HAL_GPIO_Init+0x23c>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d025      	beq.n	8009f0a <HAL_GPIO_Init+0x21e>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8009f2c <HAL_GPIO_Init+0x240>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d01f      	beq.n	8009f06 <HAL_GPIO_Init+0x21a>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a19      	ldr	r2, [pc, #100]	@ (8009f30 <HAL_GPIO_Init+0x244>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d019      	beq.n	8009f02 <HAL_GPIO_Init+0x216>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a18      	ldr	r2, [pc, #96]	@ (8009f34 <HAL_GPIO_Init+0x248>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d013      	beq.n	8009efe <HAL_GPIO_Init+0x212>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a17      	ldr	r2, [pc, #92]	@ (8009f38 <HAL_GPIO_Init+0x24c>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d00d      	beq.n	8009efa <HAL_GPIO_Init+0x20e>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a16      	ldr	r2, [pc, #88]	@ (8009f3c <HAL_GPIO_Init+0x250>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d007      	beq.n	8009ef6 <HAL_GPIO_Init+0x20a>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a15      	ldr	r2, [pc, #84]	@ (8009f40 <HAL_GPIO_Init+0x254>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d101      	bne.n	8009ef2 <HAL_GPIO_Init+0x206>
 8009eee:	2309      	movs	r3, #9
 8009ef0:	e029      	b.n	8009f46 <HAL_GPIO_Init+0x25a>
 8009ef2:	230a      	movs	r3, #10
 8009ef4:	e027      	b.n	8009f46 <HAL_GPIO_Init+0x25a>
 8009ef6:	2307      	movs	r3, #7
 8009ef8:	e025      	b.n	8009f46 <HAL_GPIO_Init+0x25a>
 8009efa:	2306      	movs	r3, #6
 8009efc:	e023      	b.n	8009f46 <HAL_GPIO_Init+0x25a>
 8009efe:	2305      	movs	r3, #5
 8009f00:	e021      	b.n	8009f46 <HAL_GPIO_Init+0x25a>
 8009f02:	2304      	movs	r3, #4
 8009f04:	e01f      	b.n	8009f46 <HAL_GPIO_Init+0x25a>
 8009f06:	2303      	movs	r3, #3
 8009f08:	e01d      	b.n	8009f46 <HAL_GPIO_Init+0x25a>
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	e01b      	b.n	8009f46 <HAL_GPIO_Init+0x25a>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e019      	b.n	8009f46 <HAL_GPIO_Init+0x25a>
 8009f12:	bf00      	nop
 8009f14:	58000080 	.word	0x58000080
 8009f18:	58024400 	.word	0x58024400
 8009f1c:	58000400 	.word	0x58000400
 8009f20:	58020000 	.word	0x58020000
 8009f24:	58020400 	.word	0x58020400
 8009f28:	58020800 	.word	0x58020800
 8009f2c:	58020c00 	.word	0x58020c00
 8009f30:	58021000 	.word	0x58021000
 8009f34:	58021400 	.word	0x58021400
 8009f38:	58021800 	.word	0x58021800
 8009f3c:	58021c00 	.word	0x58021c00
 8009f40:	58022400 	.word	0x58022400
 8009f44:	2300      	movs	r3, #0
 8009f46:	69fa      	ldr	r2, [r7, #28]
 8009f48:	f002 0203 	and.w	r2, r2, #3
 8009f4c:	0092      	lsls	r2, r2, #2
 8009f4e:	4093      	lsls	r3, r2
 8009f50:	69ba      	ldr	r2, [r7, #24]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009f56:	4938      	ldr	r1, [pc, #224]	@ (800a038 <HAL_GPIO_Init+0x34c>)
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	089b      	lsrs	r3, r3, #2
 8009f5c:	3302      	adds	r3, #2
 8009f5e:	69ba      	ldr	r2, [r7, #24]
 8009f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	43db      	mvns	r3, r3
 8009f70:	69ba      	ldr	r2, [r7, #24]
 8009f72:	4013      	ands	r3, r2
 8009f74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009f8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	43db      	mvns	r3, r3
 8009f9e:	69ba      	ldr	r2, [r7, #24]
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d003      	beq.n	8009fb8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009fb0:	69ba      	ldr	r2, [r7, #24]
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009fb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	43db      	mvns	r3, r3
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	4013      	ands	r3, r2
 8009fce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d003      	beq.n	8009fe4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	69ba      	ldr	r2, [r7, #24]
 8009fe8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	43db      	mvns	r3, r3
 8009ff4:	69ba      	ldr	r2, [r7, #24]
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a002:	2b00      	cmp	r3, #0
 800a004:	d003      	beq.n	800a00e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	69ba      	ldr	r2, [r7, #24]
 800a012:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	3301      	adds	r3, #1
 800a018:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	fa22 f303 	lsr.w	r3, r2, r3
 800a024:	2b00      	cmp	r3, #0
 800a026:	f47f ae6b 	bne.w	8009d00 <HAL_GPIO_Init+0x14>
  }
}
 800a02a:	bf00      	nop
 800a02c:	bf00      	nop
 800a02e:	3724      	adds	r7, #36	@ 0x24
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	58000400 	.word	0x58000400

0800a03c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	460b      	mov	r3, r1
 800a046:	807b      	strh	r3, [r7, #2]
 800a048:	4613      	mov	r3, r2
 800a04a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a04c:	787b      	ldrb	r3, [r7, #1]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d003      	beq.n	800a05a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a052:	887a      	ldrh	r2, [r7, #2]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a058:	e003      	b.n	800a062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a05a:	887b      	ldrh	r3, [r7, #2]
 800a05c:	041a      	lsls	r2, r3, #16
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	619a      	str	r2, [r3, #24]
}
 800a062:	bf00      	nop
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a06e:	b480      	push	{r7}
 800a070:	b085      	sub	sp, #20
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	460b      	mov	r3, r1
 800a078:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a080:	887a      	ldrh	r2, [r7, #2]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	4013      	ands	r3, r2
 800a086:	041a      	lsls	r2, r3, #16
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	43d9      	mvns	r1, r3
 800a08c:	887b      	ldrh	r3, [r7, #2]
 800a08e:	400b      	ands	r3, r1
 800a090:	431a      	orrs	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	619a      	str	r2, [r3, #24]
}
 800a096:	bf00      	nop
 800a098:	3714      	adds	r7, #20
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b086      	sub	sp, #24
 800a0a6:	af02      	add	r7, sp, #8
 800a0a8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e0fe      	b.n	800a2b2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d106      	bne.n	800a0ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f00f fceb 	bl	8019aa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2203      	movs	r2, #3
 800a0d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f008 faff 	bl	80126de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6818      	ldr	r0, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7c1a      	ldrb	r2, [r3, #16]
 800a0e8:	f88d 2000 	strb.w	r2, [sp]
 800a0ec:	3304      	adds	r3, #4
 800a0ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0f0:	f008 f9d0 	bl	8012494 <USB_CoreInit>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d005      	beq.n	800a106 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	e0d5      	b.n	800a2b2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2100      	movs	r1, #0
 800a10c:	4618      	mov	r0, r3
 800a10e:	f008 faf7 	bl	8012700 <USB_SetCurrentMode>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d005      	beq.n	800a124 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e0c6      	b.n	800a2b2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]
 800a128:	e04a      	b.n	800a1c0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a12a:	7bfa      	ldrb	r2, [r7, #15]
 800a12c:	6879      	ldr	r1, [r7, #4]
 800a12e:	4613      	mov	r3, r2
 800a130:	00db      	lsls	r3, r3, #3
 800a132:	4413      	add	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	440b      	add	r3, r1
 800a138:	3315      	adds	r3, #21
 800a13a:	2201      	movs	r2, #1
 800a13c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a13e:	7bfa      	ldrb	r2, [r7, #15]
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	4613      	mov	r3, r2
 800a144:	00db      	lsls	r3, r3, #3
 800a146:	4413      	add	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	440b      	add	r3, r1
 800a14c:	3314      	adds	r3, #20
 800a14e:	7bfa      	ldrb	r2, [r7, #15]
 800a150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a152:	7bfa      	ldrb	r2, [r7, #15]
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	b298      	uxth	r0, r3
 800a158:	6879      	ldr	r1, [r7, #4]
 800a15a:	4613      	mov	r3, r2
 800a15c:	00db      	lsls	r3, r3, #3
 800a15e:	4413      	add	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	440b      	add	r3, r1
 800a164:	332e      	adds	r3, #46	@ 0x2e
 800a166:	4602      	mov	r2, r0
 800a168:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a16a:	7bfa      	ldrb	r2, [r7, #15]
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	4613      	mov	r3, r2
 800a170:	00db      	lsls	r3, r3, #3
 800a172:	4413      	add	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	440b      	add	r3, r1
 800a178:	3318      	adds	r3, #24
 800a17a:	2200      	movs	r2, #0
 800a17c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a17e:	7bfa      	ldrb	r2, [r7, #15]
 800a180:	6879      	ldr	r1, [r7, #4]
 800a182:	4613      	mov	r3, r2
 800a184:	00db      	lsls	r3, r3, #3
 800a186:	4413      	add	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	440b      	add	r3, r1
 800a18c:	331c      	adds	r3, #28
 800a18e:	2200      	movs	r2, #0
 800a190:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a192:	7bfa      	ldrb	r2, [r7, #15]
 800a194:	6879      	ldr	r1, [r7, #4]
 800a196:	4613      	mov	r3, r2
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	440b      	add	r3, r1
 800a1a0:	3320      	adds	r3, #32
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a1a6:	7bfa      	ldrb	r2, [r7, #15]
 800a1a8:	6879      	ldr	r1, [r7, #4]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	00db      	lsls	r3, r3, #3
 800a1ae:	4413      	add	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	440b      	add	r3, r1
 800a1b4:	3324      	adds	r3, #36	@ 0x24
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1ba:	7bfb      	ldrb	r3, [r7, #15]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	73fb      	strb	r3, [r7, #15]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	791b      	ldrb	r3, [r3, #4]
 800a1c4:	7bfa      	ldrb	r2, [r7, #15]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d3af      	bcc.n	800a12a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	73fb      	strb	r3, [r7, #15]
 800a1ce:	e044      	b.n	800a25a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a1d0:	7bfa      	ldrb	r2, [r7, #15]
 800a1d2:	6879      	ldr	r1, [r7, #4]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	4413      	add	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	440b      	add	r3, r1
 800a1de:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a1e6:	7bfa      	ldrb	r2, [r7, #15]
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	00db      	lsls	r3, r3, #3
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a1f8:	7bfa      	ldrb	r2, [r7, #15]
 800a1fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a1fc:	7bfa      	ldrb	r2, [r7, #15]
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4613      	mov	r3, r2
 800a202:	00db      	lsls	r3, r3, #3
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	440b      	add	r3, r1
 800a20a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a20e:	2200      	movs	r2, #0
 800a210:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a212:	7bfa      	ldrb	r2, [r7, #15]
 800a214:	6879      	ldr	r1, [r7, #4]
 800a216:	4613      	mov	r3, r2
 800a218:	00db      	lsls	r3, r3, #3
 800a21a:	4413      	add	r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	440b      	add	r3, r1
 800a220:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800a224:	2200      	movs	r2, #0
 800a226:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a228:	7bfa      	ldrb	r2, [r7, #15]
 800a22a:	6879      	ldr	r1, [r7, #4]
 800a22c:	4613      	mov	r3, r2
 800a22e:	00db      	lsls	r3, r3, #3
 800a230:	4413      	add	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	440b      	add	r3, r1
 800a236:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a23a:	2200      	movs	r2, #0
 800a23c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a23e:	7bfa      	ldrb	r2, [r7, #15]
 800a240:	6879      	ldr	r1, [r7, #4]
 800a242:	4613      	mov	r3, r2
 800a244:	00db      	lsls	r3, r3, #3
 800a246:	4413      	add	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	440b      	add	r3, r1
 800a24c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a250:	2200      	movs	r2, #0
 800a252:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a254:	7bfb      	ldrb	r3, [r7, #15]
 800a256:	3301      	adds	r3, #1
 800a258:	73fb      	strb	r3, [r7, #15]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	791b      	ldrb	r3, [r3, #4]
 800a25e:	7bfa      	ldrb	r2, [r7, #15]
 800a260:	429a      	cmp	r2, r3
 800a262:	d3b5      	bcc.n	800a1d0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	7c1a      	ldrb	r2, [r3, #16]
 800a26c:	f88d 2000 	strb.w	r2, [sp]
 800a270:	3304      	adds	r3, #4
 800a272:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a274:	f008 fa90 	bl	8012798 <USB_DevInit>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d005      	beq.n	800a28a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2202      	movs	r2, #2
 800a282:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e013      	b.n	800a2b2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	7b1b      	ldrb	r3, [r3, #12]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d102      	bne.n	800a2a6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f001 f99b 	bl	800b5dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f009 fad3 	bl	8013856 <USB_DevDisconnect>

  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b084      	sub	sp, #16
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d101      	bne.n	800a2d6 <HAL_PCD_Start+0x1c>
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	e022      	b.n	800a31c <HAL_PCD_Start+0x62>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d009      	beq.n	800a2fe <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d105      	bne.n	800a2fe <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f008 f9da 	bl	80126bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f009 fa81 	bl	8013814 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a324:	b590      	push	{r4, r7, lr}
 800a326:	b08d      	sub	sp, #52	@ 0x34
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f009 fb3f 	bl	80139be <USB_GetMode>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	f040 84b9 	bne.w	800acba <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f009 faa3 	bl	8013898 <USB_ReadInterrupts>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 84af 	beq.w	800acb8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	0a1b      	lsrs	r3, r3, #8
 800a364:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4618      	mov	r0, r3
 800a374:	f009 fa90 	bl	8013898 <USB_ReadInterrupts>
 800a378:	4603      	mov	r3, r0
 800a37a:	f003 0302 	and.w	r3, r3, #2
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d107      	bne.n	800a392 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	695a      	ldr	r2, [r3, #20]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f002 0202 	and.w	r2, r2, #2
 800a390:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4618      	mov	r0, r3
 800a398:	f009 fa7e 	bl	8013898 <USB_ReadInterrupts>
 800a39c:	4603      	mov	r3, r0
 800a39e:	f003 0310 	and.w	r3, r3, #16
 800a3a2:	2b10      	cmp	r3, #16
 800a3a4:	d161      	bne.n	800a46a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	699a      	ldr	r2, [r3, #24]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f022 0210 	bic.w	r2, r2, #16
 800a3b4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a3b6:	6a3b      	ldr	r3, [r7, #32]
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	f003 020f 	and.w	r2, r3, #15
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	00db      	lsls	r3, r3, #3
 800a3c6:	4413      	add	r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	3304      	adds	r3, #4
 800a3d4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800a3dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a3e0:	d124      	bne.n	800a42c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a3e2:	69ba      	ldr	r2, [r7, #24]
 800a3e4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d035      	beq.n	800a45a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	091b      	lsrs	r3, r3, #4
 800a3f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a3f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	461a      	mov	r2, r3
 800a400:	6a38      	ldr	r0, [r7, #32]
 800a402:	f009 f8b5 	bl	8013570 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	68da      	ldr	r2, [r3, #12]
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	091b      	lsrs	r3, r3, #4
 800a40e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a412:	441a      	add	r2, r3
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	695a      	ldr	r2, [r3, #20]
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	091b      	lsrs	r3, r3, #4
 800a420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a424:	441a      	add	r2, r3
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	615a      	str	r2, [r3, #20]
 800a42a:	e016      	b.n	800a45a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800a432:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a436:	d110      	bne.n	800a45a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a43e:	2208      	movs	r2, #8
 800a440:	4619      	mov	r1, r3
 800a442:	6a38      	ldr	r0, [r7, #32]
 800a444:	f009 f894 	bl	8013570 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	695a      	ldr	r2, [r3, #20]
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	091b      	lsrs	r3, r3, #4
 800a450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a454:	441a      	add	r2, r3
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	699a      	ldr	r2, [r3, #24]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f042 0210 	orr.w	r2, r2, #16
 800a468:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4618      	mov	r0, r3
 800a470:	f009 fa12 	bl	8013898 <USB_ReadInterrupts>
 800a474:	4603      	mov	r3, r0
 800a476:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a47a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a47e:	f040 80a7 	bne.w	800a5d0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a482:	2300      	movs	r3, #0
 800a484:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f009 fa17 	bl	80138be <USB_ReadDevAllOutEpInterrupt>
 800a490:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800a492:	e099      	b.n	800a5c8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f000 808e 	beq.w	800a5bc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4a6:	b2d2      	uxtb	r2, r2
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f009 fa3b 	bl	8013926 <USB_ReadDevOutEPInterrupt>
 800a4b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	f003 0301 	and.w	r3, r3, #1
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00c      	beq.n	800a4d6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4be:	015a      	lsls	r2, r3, #5
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a4ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fefd 	bl	800b2d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	f003 0308 	and.w	r3, r3, #8
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00c      	beq.n	800a4fa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	2308      	movs	r3, #8
 800a4f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a4f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 ffd3 	bl	800b4a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f003 0310 	and.w	r3, r3, #16
 800a500:	2b00      	cmp	r3, #0
 800a502:	d008      	beq.n	800a516 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a506:	015a      	lsls	r2, r3, #5
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	4413      	add	r3, r2
 800a50c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a510:	461a      	mov	r2, r3
 800a512:	2310      	movs	r3, #16
 800a514:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d030      	beq.n	800a582 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a520:	6a3b      	ldr	r3, [r7, #32]
 800a522:	695b      	ldr	r3, [r3, #20]
 800a524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a528:	2b80      	cmp	r3, #128	@ 0x80
 800a52a:	d109      	bne.n	800a540 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	69fa      	ldr	r2, [r7, #28]
 800a536:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a53a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a53e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a542:	4613      	mov	r3, r2
 800a544:	00db      	lsls	r3, r3, #3
 800a546:	4413      	add	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	4413      	add	r3, r2
 800a552:	3304      	adds	r3, #4
 800a554:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	78db      	ldrb	r3, [r3, #3]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d108      	bne.n	800a570 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2200      	movs	r2, #0
 800a562:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a566:	b2db      	uxtb	r3, r3
 800a568:	4619      	mov	r1, r3
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f00f fbd2 	bl	8019d14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a57c:	461a      	mov	r2, r3
 800a57e:	2302      	movs	r3, #2
 800a580:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	f003 0320 	and.w	r3, r3, #32
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d008      	beq.n	800a59e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58e:	015a      	lsls	r2, r3, #5
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	4413      	add	r3, r2
 800a594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a598:	461a      	mov	r2, r3
 800a59a:	2320      	movs	r3, #32
 800a59c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d009      	beq.n	800a5bc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a5ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5be:	3301      	adds	r3, #1
 800a5c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c4:	085b      	lsrs	r3, r3, #1
 800a5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f47f af62 	bne.w	800a494 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f009 f95f 	bl	8013898 <USB_ReadInterrupts>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a5e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5e4:	f040 80db 	bne.w	800a79e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f009 f980 	bl	80138f2 <USB_ReadDevAllInEpInterrupt>
 800a5f2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800a5f8:	e0cd      	b.n	800a796 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 80c2 	beq.w	800a78a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a60c:	b2d2      	uxtb	r2, r2
 800a60e:	4611      	mov	r1, r2
 800a610:	4618      	mov	r0, r3
 800a612:	f009 f9a6 	bl	8013962 <USB_ReadDevInEPInterrupt>
 800a616:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d057      	beq.n	800a6d2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a624:	f003 030f 	and.w	r3, r3, #15
 800a628:	2201      	movs	r2, #1
 800a62a:	fa02 f303 	lsl.w	r3, r2, r3
 800a62e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	43db      	mvns	r3, r3
 800a63c:	69f9      	ldr	r1, [r7, #28]
 800a63e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a642:	4013      	ands	r3, r2
 800a644:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a648:	015a      	lsls	r2, r3, #5
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	4413      	add	r3, r2
 800a64e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a652:	461a      	mov	r2, r3
 800a654:	2301      	movs	r3, #1
 800a656:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	799b      	ldrb	r3, [r3, #6]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d132      	bne.n	800a6c6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a660:	6879      	ldr	r1, [r7, #4]
 800a662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a664:	4613      	mov	r3, r2
 800a666:	00db      	lsls	r3, r3, #3
 800a668:	4413      	add	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	440b      	add	r3, r1
 800a66e:	3320      	adds	r3, #32
 800a670:	6819      	ldr	r1, [r3, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a676:	4613      	mov	r3, r2
 800a678:	00db      	lsls	r3, r3, #3
 800a67a:	4413      	add	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4403      	add	r3, r0
 800a680:	331c      	adds	r3, #28
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4419      	add	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a68a:	4613      	mov	r3, r2
 800a68c:	00db      	lsls	r3, r3, #3
 800a68e:	4413      	add	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4403      	add	r3, r0
 800a694:	3320      	adds	r3, #32
 800a696:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d113      	bne.n	800a6c6 <HAL_PCD_IRQHandler+0x3a2>
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	00db      	lsls	r3, r3, #3
 800a6a6:	4413      	add	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	440b      	add	r3, r1
 800a6ac:	3324      	adds	r3, #36	@ 0x24
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d108      	bne.n	800a6c6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6818      	ldr	r0, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a6be:	461a      	mov	r2, r3
 800a6c0:	2101      	movs	r1, #1
 800a6c2:	f009 f9af 	bl	8013a24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f00f fa86 	bl	8019bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f003 0308 	and.w	r3, r3, #8
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d008      	beq.n	800a6ee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	2308      	movs	r3, #8
 800a6ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	f003 0310 	and.w	r3, r3, #16
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d008      	beq.n	800a70a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a704:	461a      	mov	r2, r3
 800a706:	2310      	movs	r3, #16
 800a708:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a710:	2b00      	cmp	r3, #0
 800a712:	d008      	beq.n	800a726 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a716:	015a      	lsls	r2, r3, #5
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	4413      	add	r3, r2
 800a71c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a720:	461a      	mov	r2, r3
 800a722:	2340      	movs	r3, #64	@ 0x40
 800a724:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f003 0302 	and.w	r3, r3, #2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d023      	beq.n	800a778 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a730:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a732:	6a38      	ldr	r0, [r7, #32]
 800a734:	f008 f98e 	bl	8012a54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a73a:	4613      	mov	r3, r2
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	4413      	add	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	3310      	adds	r3, #16
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	4413      	add	r3, r2
 800a748:	3304      	adds	r3, #4
 800a74a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	78db      	ldrb	r3, [r3, #3]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d108      	bne.n	800a766 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	2200      	movs	r2, #0
 800a758:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f00f fae9 	bl	8019d38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a768:	015a      	lsls	r2, r3, #5
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a772:	461a      	mov	r2, r3
 800a774:	2302      	movs	r3, #2
 800a776:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d003      	beq.n	800a78a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a782:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fd17 	bl	800b1b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78c:	3301      	adds	r3, #1
 800a78e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a792:	085b      	lsrs	r3, r3, #1
 800a794:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f47f af2e 	bne.w	800a5fa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f009 f878 	bl	8013898 <USB_ReadInterrupts>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7b2:	d122      	bne.n	800a7fa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	69fa      	ldr	r2, [r7, #28]
 800a7be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7c2:	f023 0301 	bic.w	r3, r3, #1
 800a7c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d108      	bne.n	800a7e4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a7da:	2100      	movs	r1, #0
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 ff21 	bl	800b624 <HAL_PCDEx_LPM_Callback>
 800a7e2:	e002      	b.n	800a7ea <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f00f fa87 	bl	8019cf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	695a      	ldr	r2, [r3, #20]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800a7f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f009 f84a 	bl	8013898 <USB_ReadInterrupts>
 800a804:	4603      	mov	r3, r0
 800a806:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a80a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a80e:	d112      	bne.n	800a836 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d102      	bne.n	800a826 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f00f fa43 	bl	8019cac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	695a      	ldr	r2, [r3, #20]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800a834:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f009 f82c 	bl	8013898 <USB_ReadInterrupts>
 800a840:	4603      	mov	r3, r0
 800a842:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a846:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a84a:	d121      	bne.n	800a890 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	695a      	ldr	r2, [r3, #20]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800a85a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800a862:	2b00      	cmp	r3, #0
 800a864:	d111      	bne.n	800a88a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a874:	089b      	lsrs	r3, r3, #2
 800a876:	f003 020f 	and.w	r2, r3, #15
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a880:	2101      	movs	r1, #1
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fece 	bl	800b624 <HAL_PCDEx_LPM_Callback>
 800a888:	e002      	b.n	800a890 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f00f fa0e 	bl	8019cac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4618      	mov	r0, r3
 800a896:	f008 ffff 	bl	8013898 <USB_ReadInterrupts>
 800a89a:	4603      	mov	r3, r0
 800a89c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a8a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8a4:	f040 80b7 	bne.w	800aa16 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	69fa      	ldr	r2, [r7, #28]
 800a8b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8b6:	f023 0301 	bic.w	r3, r3, #1
 800a8ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2110      	movs	r1, #16
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f008 f8c6 	bl	8012a54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8cc:	e046      	b.n	800a95c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d0:	015a      	lsls	r2, r3, #5
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8da:	461a      	mov	r2, r3
 800a8dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a8e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8f2:	0151      	lsls	r1, r2, #5
 800a8f4:	69fa      	ldr	r2, [r7, #28]
 800a8f6:	440a      	add	r2, r1
 800a8f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a900:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a904:	015a      	lsls	r2, r3, #5
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	4413      	add	r3, r2
 800a90a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a90e:	461a      	mov	r2, r3
 800a910:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a914:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a926:	0151      	lsls	r1, r2, #5
 800a928:	69fa      	ldr	r2, [r7, #28]
 800a92a:	440a      	add	r2, r1
 800a92c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a930:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a934:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a938:	015a      	lsls	r2, r3, #5
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	4413      	add	r3, r2
 800a93e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a946:	0151      	lsls	r1, r2, #5
 800a948:	69fa      	ldr	r2, [r7, #28]
 800a94a:	440a      	add	r2, r1
 800a94c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a950:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a954:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a958:	3301      	adds	r3, #1
 800a95a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	791b      	ldrb	r3, [r3, #4]
 800a960:	461a      	mov	r2, r3
 800a962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a964:	4293      	cmp	r3, r2
 800a966:	d3b2      	bcc.n	800a8ce <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a96e:	69db      	ldr	r3, [r3, #28]
 800a970:	69fa      	ldr	r2, [r7, #28]
 800a972:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a976:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800a97a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	7bdb      	ldrb	r3, [r3, #15]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d016      	beq.n	800a9b2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a98a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a98e:	69fa      	ldr	r2, [r7, #28]
 800a990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a994:	f043 030b 	orr.w	r3, r3, #11
 800a998:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9a4:	69fa      	ldr	r2, [r7, #28]
 800a9a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9aa:	f043 030b 	orr.w	r3, r3, #11
 800a9ae:	6453      	str	r3, [r2, #68]	@ 0x44
 800a9b0:	e015      	b.n	800a9de <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9b8:	695a      	ldr	r2, [r3, #20]
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	f242 032b 	movw	r3, #8235	@ 0x202b
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	69fa      	ldr	r2, [r7, #28]
 800a9d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9d8:	f043 030b 	orr.w	r3, r3, #11
 800a9dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	69fa      	ldr	r2, [r7, #28]
 800a9e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9ec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a9f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6818      	ldr	r0, [r3, #0]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800aa00:	461a      	mov	r2, r3
 800aa02:	f009 f80f 	bl	8013a24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	695a      	ldr	r2, [r3, #20]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800aa14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f008 ff3c 	bl	8013898 <USB_ReadInterrupts>
 800aa20:	4603      	mov	r3, r0
 800aa22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa2a:	d123      	bne.n	800aa74 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f008 ffd3 	bl	80139dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f008 f883 	bl	8012b46 <USB_GetDevSpeed>
 800aa40:	4603      	mov	r3, r0
 800aa42:	461a      	mov	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681c      	ldr	r4, [r3, #0]
 800aa4c:	f001 fdb4 	bl	800c5b8 <HAL_RCC_GetHCLKFreq>
 800aa50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800aa56:	461a      	mov	r2, r3
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f007 fd8d 	bl	8012578 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f00f f8fc 	bl	8019c5c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	695a      	ldr	r2, [r3, #20]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800aa72:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f008 ff0d 	bl	8013898 <USB_ReadInterrupts>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	f003 0308 	and.w	r3, r3, #8
 800aa84:	2b08      	cmp	r3, #8
 800aa86:	d10a      	bne.n	800aa9e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f00f f8c3 	bl	8019c14 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	695a      	ldr	r2, [r3, #20]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f002 0208 	and.w	r2, r2, #8
 800aa9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f008 fef8 	bl	8013898 <USB_ReadInterrupts>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaae:	2b80      	cmp	r3, #128	@ 0x80
 800aab0:	d123      	bne.n	800aafa <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800aab2:	6a3b      	ldr	r3, [r7, #32]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aabe:	2301      	movs	r3, #1
 800aac0:	627b      	str	r3, [r7, #36]	@ 0x24
 800aac2:	e014      	b.n	800aaee <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aac8:	4613      	mov	r3, r2
 800aaca:	00db      	lsls	r3, r3, #3
 800aacc:	4413      	add	r3, r2
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	440b      	add	r3, r1
 800aad2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d105      	bne.n	800aae8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800aadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	4619      	mov	r1, r3
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fb0a 	bl	800b0fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaea:	3301      	adds	r3, #1
 800aaec:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	791b      	ldrb	r3, [r3, #4]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d3e4      	bcc.n	800aac4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f008 feca 	bl	8013898 <USB_ReadInterrupts>
 800ab04:	4603      	mov	r3, r0
 800ab06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab0e:	d13c      	bne.n	800ab8a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab10:	2301      	movs	r3, #1
 800ab12:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab14:	e02b      	b.n	800ab6e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800ab16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ab26:	6879      	ldr	r1, [r7, #4]
 800ab28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	00db      	lsls	r3, r3, #3
 800ab2e:	4413      	add	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	440b      	add	r3, r1
 800ab34:	3318      	adds	r3, #24
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d115      	bne.n	800ab68 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800ab3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	da12      	bge.n	800ab68 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab46:	4613      	mov	r3, r2
 800ab48:	00db      	lsls	r3, r3, #3
 800ab4a:	4413      	add	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	440b      	add	r3, r1
 800ab50:	3317      	adds	r3, #23
 800ab52:	2201      	movs	r2, #1
 800ab54:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ab56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	4619      	mov	r1, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 faca 	bl	800b0fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	791b      	ldrb	r3, [r3, #4]
 800ab72:	461a      	mov	r2, r3
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d3cd      	bcc.n	800ab16 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	695a      	ldr	r2, [r3, #20]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800ab88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f008 fe82 	bl	8013898 <USB_ReadInterrupts>
 800ab94:	4603      	mov	r3, r0
 800ab96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab9e:	d156      	bne.n	800ac4e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aba0:	2301      	movs	r3, #1
 800aba2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aba4:	e045      	b.n	800ac32 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800aba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba8:	015a      	lsls	r2, r3, #5
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	4413      	add	r3, r2
 800abae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800abb6:	6879      	ldr	r1, [r7, #4]
 800abb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abba:	4613      	mov	r3, r2
 800abbc:	00db      	lsls	r3, r3, #3
 800abbe:	4413      	add	r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	440b      	add	r3, r1
 800abc4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d12e      	bne.n	800ac2c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800abce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	da2b      	bge.n	800ac2c <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	0c1a      	lsrs	r2, r3, #16
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800abde:	4053      	eors	r3, r2
 800abe0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d121      	bne.n	800ac2c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800abe8:	6879      	ldr	r1, [r7, #4]
 800abea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abec:	4613      	mov	r3, r2
 800abee:	00db      	lsls	r3, r3, #3
 800abf0:	4413      	add	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	440b      	add	r3, r1
 800abf6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800abfa:	2201      	movs	r2, #1
 800abfc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800abfe:	6a3b      	ldr	r3, [r7, #32]
 800ac00:	699b      	ldr	r3, [r3, #24]
 800ac02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ac06:	6a3b      	ldr	r3, [r7, #32]
 800ac08:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	695b      	ldr	r3, [r3, #20]
 800ac0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10a      	bne.n	800ac2c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	69fa      	ldr	r2, [r7, #28]
 800ac20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ac28:	6053      	str	r3, [r2, #4]
            break;
 800ac2a:	e008      	b.n	800ac3e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2e:	3301      	adds	r3, #1
 800ac30:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	791b      	ldrb	r3, [r3, #4]
 800ac36:	461a      	mov	r2, r3
 800ac38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d3b3      	bcc.n	800aba6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	695a      	ldr	r2, [r3, #20]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800ac4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f008 fe20 	bl	8013898 <USB_ReadInterrupts>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ac5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac62:	d10a      	bne.n	800ac7a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f00f f879 	bl	8019d5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	695a      	ldr	r2, [r3, #20]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800ac78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f008 fe0a 	bl	8013898 <USB_ReadInterrupts>
 800ac84:	4603      	mov	r3, r0
 800ac86:	f003 0304 	and.w	r3, r3, #4
 800ac8a:	2b04      	cmp	r3, #4
 800ac8c:	d115      	bne.n	800acba <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	f003 0304 	and.w	r3, r3, #4
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f00f f871 	bl	8019d88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	6859      	ldr	r1, [r3, #4]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	69ba      	ldr	r2, [r7, #24]
 800acb2:	430a      	orrs	r2, r1
 800acb4:	605a      	str	r2, [r3, #4]
 800acb6:	e000      	b.n	800acba <HAL_PCD_IRQHandler+0x996>
      return;
 800acb8:	bf00      	nop
    }
  }
}
 800acba:	3734      	adds	r7, #52	@ 0x34
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd90      	pop	{r4, r7, pc}

0800acc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	460b      	mov	r3, r1
 800acca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d101      	bne.n	800acda <HAL_PCD_SetAddress+0x1a>
 800acd6:	2302      	movs	r3, #2
 800acd8:	e012      	b.n	800ad00 <HAL_PCD_SetAddress+0x40>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	78fa      	ldrb	r2, [r7, #3]
 800ace6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	78fa      	ldrb	r2, [r7, #3]
 800acee:	4611      	mov	r1, r2
 800acf0:	4618      	mov	r0, r3
 800acf2:	f008 fd69 	bl	80137c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	4608      	mov	r0, r1
 800ad12:	4611      	mov	r1, r2
 800ad14:	461a      	mov	r2, r3
 800ad16:	4603      	mov	r3, r0
 800ad18:	70fb      	strb	r3, [r7, #3]
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	803b      	strh	r3, [r7, #0]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ad26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	da0f      	bge.n	800ad4e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad2e:	78fb      	ldrb	r3, [r7, #3]
 800ad30:	f003 020f 	and.w	r2, r3, #15
 800ad34:	4613      	mov	r3, r2
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	4413      	add	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	3310      	adds	r3, #16
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	4413      	add	r3, r2
 800ad42:	3304      	adds	r3, #4
 800ad44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	705a      	strb	r2, [r3, #1]
 800ad4c:	e00f      	b.n	800ad6e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad4e:	78fb      	ldrb	r3, [r7, #3]
 800ad50:	f003 020f 	and.w	r2, r3, #15
 800ad54:	4613      	mov	r3, r2
 800ad56:	00db      	lsls	r3, r3, #3
 800ad58:	4413      	add	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	4413      	add	r3, r2
 800ad64:	3304      	adds	r3, #4
 800ad66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ad6e:	78fb      	ldrb	r3, [r7, #3]
 800ad70:	f003 030f 	and.w	r3, r3, #15
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800ad7a:	883b      	ldrh	r3, [r7, #0]
 800ad7c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	78ba      	ldrb	r2, [r7, #2]
 800ad88:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	785b      	ldrb	r3, [r3, #1]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d004      	beq.n	800ad9c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	461a      	mov	r2, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ad9c:	78bb      	ldrb	r3, [r7, #2]
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d102      	bne.n	800ada8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d101      	bne.n	800adb6 <HAL_PCD_EP_Open+0xae>
 800adb2:	2302      	movs	r3, #2
 800adb4:	e00e      	b.n	800add4 <HAL_PCD_EP_Open+0xcc>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68f9      	ldr	r1, [r7, #12]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f007 fee3 	bl	8012b90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800add2:	7afb      	ldrb	r3, [r7, #11]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	460b      	mov	r3, r1
 800ade6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ade8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adec:	2b00      	cmp	r3, #0
 800adee:	da0f      	bge.n	800ae10 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800adf0:	78fb      	ldrb	r3, [r7, #3]
 800adf2:	f003 020f 	and.w	r2, r3, #15
 800adf6:	4613      	mov	r3, r2
 800adf8:	00db      	lsls	r3, r3, #3
 800adfa:	4413      	add	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	3310      	adds	r3, #16
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	4413      	add	r3, r2
 800ae04:	3304      	adds	r3, #4
 800ae06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	705a      	strb	r2, [r3, #1]
 800ae0e:	e00f      	b.n	800ae30 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ae10:	78fb      	ldrb	r3, [r7, #3]
 800ae12:	f003 020f 	and.w	r2, r3, #15
 800ae16:	4613      	mov	r3, r2
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	4413      	add	r3, r2
 800ae26:	3304      	adds	r3, #4
 800ae28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae30:	78fb      	ldrb	r3, [r7, #3]
 800ae32:	f003 030f 	and.w	r3, r3, #15
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d101      	bne.n	800ae4a <HAL_PCD_EP_Close+0x6e>
 800ae46:	2302      	movs	r3, #2
 800ae48:	e00e      	b.n	800ae68 <HAL_PCD_EP_Close+0x8c>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	68f9      	ldr	r1, [r7, #12]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f007 ff21 	bl	8012ca0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	607a      	str	r2, [r7, #4]
 800ae7a:	603b      	str	r3, [r7, #0]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ae80:	7afb      	ldrb	r3, [r7, #11]
 800ae82:	f003 020f 	and.w	r2, r3, #15
 800ae86:	4613      	mov	r3, r2
 800ae88:	00db      	lsls	r3, r3, #3
 800ae8a:	4413      	add	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	4413      	add	r3, r2
 800ae96:	3304      	adds	r3, #4
 800ae98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aeb2:	7afb      	ldrb	r3, [r7, #11]
 800aeb4:	f003 030f 	and.w	r3, r3, #15
 800aeb8:	b2da      	uxtb	r2, r3
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	799b      	ldrb	r3, [r3, #6]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d102      	bne.n	800aecc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6818      	ldr	r0, [r3, #0]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	799b      	ldrb	r3, [r3, #6]
 800aed4:	461a      	mov	r2, r3
 800aed6:	6979      	ldr	r1, [r7, #20]
 800aed8:	f007 ffbe 	bl	8012e58 <USB_EPStartXfer>

  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3718      	adds	r7, #24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b083      	sub	sp, #12
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	460b      	mov	r3, r1
 800aef0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800aef2:	78fb      	ldrb	r3, [r7, #3]
 800aef4:	f003 020f 	and.w	r2, r3, #15
 800aef8:	6879      	ldr	r1, [r7, #4]
 800aefa:	4613      	mov	r3, r2
 800aefc:	00db      	lsls	r3, r3, #3
 800aefe:	4413      	add	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	440b      	add	r3, r1
 800af04:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800af08:	681b      	ldr	r3, [r3, #0]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	370c      	adds	r7, #12
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b086      	sub	sp, #24
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	607a      	str	r2, [r7, #4]
 800af20:	603b      	str	r3, [r7, #0]
 800af22:	460b      	mov	r3, r1
 800af24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af26:	7afb      	ldrb	r3, [r7, #11]
 800af28:	f003 020f 	and.w	r2, r3, #15
 800af2c:	4613      	mov	r3, r2
 800af2e:	00db      	lsls	r3, r3, #3
 800af30:	4413      	add	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	3310      	adds	r3, #16
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	4413      	add	r3, r2
 800af3a:	3304      	adds	r3, #4
 800af3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2200      	movs	r2, #0
 800af4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	2201      	movs	r2, #1
 800af54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800af56:	7afb      	ldrb	r3, [r7, #11]
 800af58:	f003 030f 	and.w	r3, r3, #15
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	799b      	ldrb	r3, [r3, #6]
 800af66:	2b01      	cmp	r3, #1
 800af68:	d102      	bne.n	800af70 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6818      	ldr	r0, [r3, #0]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	799b      	ldrb	r3, [r3, #6]
 800af78:	461a      	mov	r2, r3
 800af7a:	6979      	ldr	r1, [r7, #20]
 800af7c:	f007 ff6c 	bl	8012e58 <USB_EPStartXfer>

  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3718      	adds	r7, #24
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	460b      	mov	r3, r1
 800af94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800af96:	78fb      	ldrb	r3, [r7, #3]
 800af98:	f003 030f 	and.w	r3, r3, #15
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	7912      	ldrb	r2, [r2, #4]
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d901      	bls.n	800afa8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e04f      	b.n	800b048 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800afa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afac:	2b00      	cmp	r3, #0
 800afae:	da0f      	bge.n	800afd0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	f003 020f 	and.w	r2, r3, #15
 800afb6:	4613      	mov	r3, r2
 800afb8:	00db      	lsls	r3, r3, #3
 800afba:	4413      	add	r3, r2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	3310      	adds	r3, #16
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	4413      	add	r3, r2
 800afc4:	3304      	adds	r3, #4
 800afc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2201      	movs	r2, #1
 800afcc:	705a      	strb	r2, [r3, #1]
 800afce:	e00d      	b.n	800afec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800afd0:	78fa      	ldrb	r2, [r7, #3]
 800afd2:	4613      	mov	r3, r2
 800afd4:	00db      	lsls	r3, r3, #3
 800afd6:	4413      	add	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	4413      	add	r3, r2
 800afe2:	3304      	adds	r3, #4
 800afe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2201      	movs	r2, #1
 800aff0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aff2:	78fb      	ldrb	r3, [r7, #3]
 800aff4:	f003 030f 	and.w	r3, r3, #15
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b004:	2b01      	cmp	r3, #1
 800b006:	d101      	bne.n	800b00c <HAL_PCD_EP_SetStall+0x82>
 800b008:	2302      	movs	r3, #2
 800b00a:	e01d      	b.n	800b048 <HAL_PCD_EP_SetStall+0xbe>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68f9      	ldr	r1, [r7, #12]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f008 fb00 	bl	8013620 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b020:	78fb      	ldrb	r3, [r7, #3]
 800b022:	f003 030f 	and.w	r3, r3, #15
 800b026:	2b00      	cmp	r3, #0
 800b028:	d109      	bne.n	800b03e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6818      	ldr	r0, [r3, #0]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	7999      	ldrb	r1, [r3, #6]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b038:	461a      	mov	r2, r3
 800b03a:	f008 fcf3 	bl	8013a24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	460b      	mov	r3, r1
 800b05a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b05c:	78fb      	ldrb	r3, [r7, #3]
 800b05e:	f003 030f 	and.w	r3, r3, #15
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	7912      	ldrb	r2, [r2, #4]
 800b066:	4293      	cmp	r3, r2
 800b068:	d901      	bls.n	800b06e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e042      	b.n	800b0f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b06e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b072:	2b00      	cmp	r3, #0
 800b074:	da0f      	bge.n	800b096 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b076:	78fb      	ldrb	r3, [r7, #3]
 800b078:	f003 020f 	and.w	r2, r3, #15
 800b07c:	4613      	mov	r3, r2
 800b07e:	00db      	lsls	r3, r3, #3
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	3310      	adds	r3, #16
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	4413      	add	r3, r2
 800b08a:	3304      	adds	r3, #4
 800b08c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2201      	movs	r2, #1
 800b092:	705a      	strb	r2, [r3, #1]
 800b094:	e00f      	b.n	800b0b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b096:	78fb      	ldrb	r3, [r7, #3]
 800b098:	f003 020f 	and.w	r2, r3, #15
 800b09c:	4613      	mov	r3, r2
 800b09e:	00db      	lsls	r3, r3, #3
 800b0a0:	4413      	add	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	3304      	adds	r3, #4
 800b0ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b0bc:	78fb      	ldrb	r3, [r7, #3]
 800b0be:	f003 030f 	and.w	r3, r3, #15
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d101      	bne.n	800b0d6 <HAL_PCD_EP_ClrStall+0x86>
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	e00e      	b.n	800b0f4 <HAL_PCD_EP_ClrStall+0xa4>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68f9      	ldr	r1, [r7, #12]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f008 fb09 	bl	80136fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	da0c      	bge.n	800b12a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b110:	78fb      	ldrb	r3, [r7, #3]
 800b112:	f003 020f 	and.w	r2, r3, #15
 800b116:	4613      	mov	r3, r2
 800b118:	00db      	lsls	r3, r3, #3
 800b11a:	4413      	add	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	3310      	adds	r3, #16
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	4413      	add	r3, r2
 800b124:	3304      	adds	r3, #4
 800b126:	60fb      	str	r3, [r7, #12]
 800b128:	e00c      	b.n	800b144 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b12a:	78fb      	ldrb	r3, [r7, #3]
 800b12c:	f003 020f 	and.w	r2, r3, #15
 800b130:	4613      	mov	r3, r2
 800b132:	00db      	lsls	r3, r3, #3
 800b134:	4413      	add	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	4413      	add	r3, r2
 800b140:	3304      	adds	r3, #4
 800b142:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	68f9      	ldr	r1, [r7, #12]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f008 f928 	bl	80133a0 <USB_EPStopXfer>
 800b150:	4603      	mov	r3, r0
 800b152:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b154:	7afb      	ldrb	r3, [r7, #11]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b082      	sub	sp, #8
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	460b      	mov	r3, r1
 800b168:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b170:	2b01      	cmp	r3, #1
 800b172:	d101      	bne.n	800b178 <HAL_PCD_EP_Flush+0x1a>
 800b174:	2302      	movs	r3, #2
 800b176:	e01b      	b.n	800b1b0 <HAL_PCD_EP_Flush+0x52>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 800b180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b184:	2b00      	cmp	r3, #0
 800b186:	da09      	bge.n	800b19c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	78fb      	ldrb	r3, [r7, #3]
 800b18e:	f003 030f 	and.w	r3, r3, #15
 800b192:	4619      	mov	r1, r3
 800b194:	4610      	mov	r0, r2
 800b196:	f007 fc5d 	bl	8012a54 <USB_FlushTxFifo>
 800b19a:	e004      	b.n	800b1a6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f007 fc89 	bl	8012ab8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08a      	sub	sp, #40	@ 0x28
 800b1bc:	af02      	add	r7, sp, #8
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	00db      	lsls	r3, r3, #3
 800b1d2:	4413      	add	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	3310      	adds	r3, #16
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	4413      	add	r3, r2
 800b1dc:	3304      	adds	r3, #4
 800b1de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	695a      	ldr	r2, [r3, #20]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d901      	bls.n	800b1f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e06b      	b.n	800b2c8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	691a      	ldr	r2, [r3, #16]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	695b      	ldr	r3, [r3, #20]
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	69fa      	ldr	r2, [r7, #28]
 800b202:	429a      	cmp	r2, r3
 800b204:	d902      	bls.n	800b20c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	3303      	adds	r3, #3
 800b210:	089b      	lsrs	r3, r3, #2
 800b212:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b214:	e02a      	b.n	800b26c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	691a      	ldr	r2, [r3, #16]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	69fa      	ldr	r2, [r7, #28]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d902      	bls.n	800b232 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	3303      	adds	r3, #3
 800b236:	089b      	lsrs	r3, r3, #2
 800b238:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	68d9      	ldr	r1, [r3, #12]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	b2da      	uxtb	r2, r3
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	4603      	mov	r3, r0
 800b24e:	6978      	ldr	r0, [r7, #20]
 800b250:	f008 f950 	bl	80134f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	68da      	ldr	r2, [r3, #12]
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	441a      	add	r2, r3
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	695a      	ldr	r2, [r3, #20]
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	441a      	add	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	015a      	lsls	r2, r3, #5
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	4413      	add	r3, r2
 800b274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b27c:	69ba      	ldr	r2, [r7, #24]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d809      	bhi.n	800b296 <PCD_WriteEmptyTxFifo+0xde>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	695a      	ldr	r2, [r3, #20]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d203      	bcs.n	800b296 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1bf      	bne.n	800b216 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	691a      	ldr	r2, [r3, #16]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	695b      	ldr	r3, [r3, #20]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d811      	bhi.n	800b2c6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	f003 030f 	and.w	r3, r3, #15
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	43db      	mvns	r3, r3
 800b2bc:	6939      	ldr	r1, [r7, #16]
 800b2be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3720      	adds	r7, #32
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b088      	sub	sp, #32
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	333c      	adds	r3, #60	@ 0x3c
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	015a      	lsls	r2, r3, #5
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	799b      	ldrb	r3, [r3, #6]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d17b      	bne.n	800b3fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	f003 0308 	and.w	r3, r3, #8
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d015      	beq.n	800b33c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	4a61      	ldr	r2, [pc, #388]	@ (800b498 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b314:	4293      	cmp	r3, r2
 800b316:	f240 80b9 	bls.w	800b48c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 80b3 	beq.w	800b48c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	015a      	lsls	r2, r3, #5
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	4413      	add	r3, r2
 800b32e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b332:	461a      	mov	r2, r3
 800b334:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b338:	6093      	str	r3, [r2, #8]
 800b33a:	e0a7      	b.n	800b48c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	f003 0320 	and.w	r3, r3, #32
 800b342:	2b00      	cmp	r3, #0
 800b344:	d009      	beq.n	800b35a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	015a      	lsls	r2, r3, #5
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	4413      	add	r3, r2
 800b34e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b352:	461a      	mov	r2, r3
 800b354:	2320      	movs	r3, #32
 800b356:	6093      	str	r3, [r2, #8]
 800b358:	e098      	b.n	800b48c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b360:	2b00      	cmp	r3, #0
 800b362:	f040 8093 	bne.w	800b48c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	4a4b      	ldr	r2, [pc, #300]	@ (800b498 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d90f      	bls.n	800b38e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00a      	beq.n	800b38e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	015a      	lsls	r2, r3, #5
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	4413      	add	r3, r2
 800b380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b384:	461a      	mov	r2, r3
 800b386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b38a:	6093      	str	r3, [r2, #8]
 800b38c:	e07e      	b.n	800b48c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	4613      	mov	r3, r2
 800b392:	00db      	lsls	r3, r3, #3
 800b394:	4413      	add	r3, r2
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	4413      	add	r3, r2
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6a1a      	ldr	r2, [r3, #32]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	0159      	lsls	r1, r3, #5
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	440b      	add	r3, r1
 800b3b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3ba:	1ad2      	subs	r2, r2, r3
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d114      	bne.n	800b3f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d109      	bne.n	800b3e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6818      	ldr	r0, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b3d8:	461a      	mov	r2, r3
 800b3da:	2101      	movs	r1, #1
 800b3dc:	f008 fb22 	bl	8013a24 <USB_EP0_OutStart>
 800b3e0:	e006      	b.n	800b3f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	68da      	ldr	r2, [r3, #12]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	695b      	ldr	r3, [r3, #20]
 800b3ea:	441a      	add	r2, r3
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f00e fbd6 	bl	8019ba8 <HAL_PCD_DataOutStageCallback>
 800b3fc:	e046      	b.n	800b48c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	4a26      	ldr	r2, [pc, #152]	@ (800b49c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d124      	bne.n	800b450 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00a      	beq.n	800b426 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	015a      	lsls	r2, r3, #5
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	4413      	add	r3, r2
 800b418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b41c:	461a      	mov	r2, r3
 800b41e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b422:	6093      	str	r3, [r2, #8]
 800b424:	e032      	b.n	800b48c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	f003 0320 	and.w	r3, r3, #32
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d008      	beq.n	800b442 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b43c:	461a      	mov	r2, r3
 800b43e:	2320      	movs	r3, #32
 800b440:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	b2db      	uxtb	r3, r3
 800b446:	4619      	mov	r1, r3
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f00e fbad 	bl	8019ba8 <HAL_PCD_DataOutStageCallback>
 800b44e:	e01d      	b.n	800b48c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d114      	bne.n	800b480 <PCD_EP_OutXfrComplete_int+0x1b0>
 800b456:	6879      	ldr	r1, [r7, #4]
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	4613      	mov	r3, r2
 800b45c:	00db      	lsls	r3, r3, #3
 800b45e:	4413      	add	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	440b      	add	r3, r1
 800b464:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d108      	bne.n	800b480 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6818      	ldr	r0, [r3, #0]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b478:	461a      	mov	r2, r3
 800b47a:	2100      	movs	r1, #0
 800b47c:	f008 fad2 	bl	8013a24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	b2db      	uxtb	r3, r3
 800b484:	4619      	mov	r1, r3
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f00e fb8e 	bl	8019ba8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3720      	adds	r7, #32
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	4f54300a 	.word	0x4f54300a
 800b49c:	4f54310a 	.word	0x4f54310a

0800b4a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	333c      	adds	r3, #60	@ 0x3c
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	015a      	lsls	r2, r3, #5
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4a15      	ldr	r2, [pc, #84]	@ (800b528 <PCD_EP_OutSetupPacket_int+0x88>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d90e      	bls.n	800b4f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d009      	beq.n	800b4f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	015a      	lsls	r2, r3, #5
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f00e fb45 	bl	8019b84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	4a0a      	ldr	r2, [pc, #40]	@ (800b528 <PCD_EP_OutSetupPacket_int+0x88>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d90c      	bls.n	800b51c <PCD_EP_OutSetupPacket_int+0x7c>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	799b      	ldrb	r3, [r3, #6]
 800b506:	2b01      	cmp	r3, #1
 800b508:	d108      	bne.n	800b51c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6818      	ldr	r0, [r3, #0]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b514:	461a      	mov	r2, r3
 800b516:	2101      	movs	r1, #1
 800b518:	f008 fa84 	bl	8013a24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3718      	adds	r7, #24
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	4f54300a 	.word	0x4f54300a

0800b52c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	460b      	mov	r3, r1
 800b536:	70fb      	strb	r3, [r7, #3]
 800b538:	4613      	mov	r3, r2
 800b53a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b542:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b544:	78fb      	ldrb	r3, [r7, #3]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d107      	bne.n	800b55a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b54a:	883b      	ldrh	r3, [r7, #0]
 800b54c:	0419      	lsls	r1, r3, #16
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	430a      	orrs	r2, r1
 800b556:	629a      	str	r2, [r3, #40]	@ 0x28
 800b558:	e028      	b.n	800b5ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b560:	0c1b      	lsrs	r3, r3, #16
 800b562:	68ba      	ldr	r2, [r7, #8]
 800b564:	4413      	add	r3, r2
 800b566:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b568:	2300      	movs	r3, #0
 800b56a:	73fb      	strb	r3, [r7, #15]
 800b56c:	e00d      	b.n	800b58a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	7bfb      	ldrb	r3, [r7, #15]
 800b574:	3340      	adds	r3, #64	@ 0x40
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	4413      	add	r3, r2
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	0c1b      	lsrs	r3, r3, #16
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	4413      	add	r3, r2
 800b582:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b584:	7bfb      	ldrb	r3, [r7, #15]
 800b586:	3301      	adds	r3, #1
 800b588:	73fb      	strb	r3, [r7, #15]
 800b58a:	7bfa      	ldrb	r2, [r7, #15]
 800b58c:	78fb      	ldrb	r3, [r7, #3]
 800b58e:	3b01      	subs	r3, #1
 800b590:	429a      	cmp	r2, r3
 800b592:	d3ec      	bcc.n	800b56e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b594:	883b      	ldrh	r3, [r7, #0]
 800b596:	0418      	lsls	r0, r3, #16
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6819      	ldr	r1, [r3, #0]
 800b59c:	78fb      	ldrb	r3, [r7, #3]
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	4302      	orrs	r2, r0
 800b5a4:	3340      	adds	r3, #64	@ 0x40
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	440b      	add	r3, r1
 800b5aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3714      	adds	r7, #20
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b083      	sub	sp, #12
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	887a      	ldrh	r2, [r7, #2]
 800b5cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	699b      	ldr	r3, [r3, #24]
 800b5fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b60a:	4b05      	ldr	r3, [pc, #20]	@ (800b620 <HAL_PCDEx_ActivateLPM+0x44>)
 800b60c:	4313      	orrs	r3, r2
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800b612:	2300      	movs	r3, #0
}
 800b614:	4618      	mov	r0, r3
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	10000003 	.word	0x10000003

0800b624 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b644:	4b19      	ldr	r3, [pc, #100]	@ (800b6ac <HAL_PWREx_ConfigSupply+0x70>)
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	f003 0304 	and.w	r3, r3, #4
 800b64c:	2b04      	cmp	r3, #4
 800b64e:	d00a      	beq.n	800b666 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b650:	4b16      	ldr	r3, [pc, #88]	@ (800b6ac <HAL_PWREx_ConfigSupply+0x70>)
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	f003 0307 	and.w	r3, r3, #7
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d001      	beq.n	800b662 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e01f      	b.n	800b6a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	e01d      	b.n	800b6a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b666:	4b11      	ldr	r3, [pc, #68]	@ (800b6ac <HAL_PWREx_ConfigSupply+0x70>)
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	f023 0207 	bic.w	r2, r3, #7
 800b66e:	490f      	ldr	r1, [pc, #60]	@ (800b6ac <HAL_PWREx_ConfigSupply+0x70>)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4313      	orrs	r3, r2
 800b674:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b676:	f7f9 fc25 	bl	8004ec4 <HAL_GetTick>
 800b67a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b67c:	e009      	b.n	800b692 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b67e:	f7f9 fc21 	bl	8004ec4 <HAL_GetTick>
 800b682:	4602      	mov	r2, r0
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b68c:	d901      	bls.n	800b692 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e007      	b.n	800b6a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b692:	4b06      	ldr	r3, [pc, #24]	@ (800b6ac <HAL_PWREx_ConfigSupply+0x70>)
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b69a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b69e:	d1ee      	bne.n	800b67e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	58024800 	.word	0x58024800

0800b6b0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b6b4:	4b05      	ldr	r3, [pc, #20]	@ (800b6cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	4a04      	ldr	r2, [pc, #16]	@ (800b6cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b6ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b6be:	60d3      	str	r3, [r2, #12]
}
 800b6c0:	bf00      	nop
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	58024800 	.word	0x58024800

0800b6d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08c      	sub	sp, #48	@ 0x30
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e3c8      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f003 0301 	and.w	r3, r3, #1
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f000 8087 	beq.w	800b7fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6f0:	4b88      	ldr	r3, [pc, #544]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b6f2:	691b      	ldr	r3, [r3, #16]
 800b6f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b6f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b6fa:	4b86      	ldr	r3, [pc, #536]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b702:	2b10      	cmp	r3, #16
 800b704:	d007      	beq.n	800b716 <HAL_RCC_OscConfig+0x46>
 800b706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b708:	2b18      	cmp	r3, #24
 800b70a:	d110      	bne.n	800b72e <HAL_RCC_OscConfig+0x5e>
 800b70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b70e:	f003 0303 	and.w	r3, r3, #3
 800b712:	2b02      	cmp	r3, #2
 800b714:	d10b      	bne.n	800b72e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b716:	4b7f      	ldr	r3, [pc, #508]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d06c      	beq.n	800b7fc <HAL_RCC_OscConfig+0x12c>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d168      	bne.n	800b7fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	e3a2      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b736:	d106      	bne.n	800b746 <HAL_RCC_OscConfig+0x76>
 800b738:	4b76      	ldr	r3, [pc, #472]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a75      	ldr	r2, [pc, #468]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b73e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b742:	6013      	str	r3, [r2, #0]
 800b744:	e02e      	b.n	800b7a4 <HAL_RCC_OscConfig+0xd4>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10c      	bne.n	800b768 <HAL_RCC_OscConfig+0x98>
 800b74e:	4b71      	ldr	r3, [pc, #452]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a70      	ldr	r2, [pc, #448]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b758:	6013      	str	r3, [r2, #0]
 800b75a:	4b6e      	ldr	r3, [pc, #440]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a6d      	ldr	r2, [pc, #436]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b760:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b764:	6013      	str	r3, [r2, #0]
 800b766:	e01d      	b.n	800b7a4 <HAL_RCC_OscConfig+0xd4>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b770:	d10c      	bne.n	800b78c <HAL_RCC_OscConfig+0xbc>
 800b772:	4b68      	ldr	r3, [pc, #416]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a67      	ldr	r2, [pc, #412]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b77c:	6013      	str	r3, [r2, #0]
 800b77e:	4b65      	ldr	r3, [pc, #404]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a64      	ldr	r2, [pc, #400]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b788:	6013      	str	r3, [r2, #0]
 800b78a:	e00b      	b.n	800b7a4 <HAL_RCC_OscConfig+0xd4>
 800b78c:	4b61      	ldr	r3, [pc, #388]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a60      	ldr	r2, [pc, #384]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	4b5e      	ldr	r3, [pc, #376]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a5d      	ldr	r2, [pc, #372]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b79e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b7a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d013      	beq.n	800b7d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7ac:	f7f9 fb8a 	bl	8004ec4 <HAL_GetTick>
 800b7b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b7b2:	e008      	b.n	800b7c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b7b4:	f7f9 fb86 	bl	8004ec4 <HAL_GetTick>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7bc:	1ad3      	subs	r3, r2, r3
 800b7be:	2b64      	cmp	r3, #100	@ 0x64
 800b7c0:	d901      	bls.n	800b7c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	e356      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b7c6:	4b53      	ldr	r3, [pc, #332]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d0f0      	beq.n	800b7b4 <HAL_RCC_OscConfig+0xe4>
 800b7d2:	e014      	b.n	800b7fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7d4:	f7f9 fb76 	bl	8004ec4 <HAL_GetTick>
 800b7d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b7da:	e008      	b.n	800b7ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b7dc:	f7f9 fb72 	bl	8004ec4 <HAL_GetTick>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	2b64      	cmp	r3, #100	@ 0x64
 800b7e8:	d901      	bls.n	800b7ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b7ea:	2303      	movs	r3, #3
 800b7ec:	e342      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b7ee:	4b49      	ldr	r3, [pc, #292]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d1f0      	bne.n	800b7dc <HAL_RCC_OscConfig+0x10c>
 800b7fa:	e000      	b.n	800b7fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f003 0302 	and.w	r3, r3, #2
 800b806:	2b00      	cmp	r3, #0
 800b808:	f000 808c 	beq.w	800b924 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b80c:	4b41      	ldr	r3, [pc, #260]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b814:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b816:	4b3f      	ldr	r3, [pc, #252]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b81a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b81c:	6a3b      	ldr	r3, [r7, #32]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d007      	beq.n	800b832 <HAL_RCC_OscConfig+0x162>
 800b822:	6a3b      	ldr	r3, [r7, #32]
 800b824:	2b18      	cmp	r3, #24
 800b826:	d137      	bne.n	800b898 <HAL_RCC_OscConfig+0x1c8>
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	f003 0303 	and.w	r3, r3, #3
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d132      	bne.n	800b898 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b832:	4b38      	ldr	r3, [pc, #224]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f003 0304 	and.w	r3, r3, #4
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d005      	beq.n	800b84a <HAL_RCC_OscConfig+0x17a>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d101      	bne.n	800b84a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	e314      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b84a:	4b32      	ldr	r3, [pc, #200]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f023 0219 	bic.w	r2, r3, #25
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	492f      	ldr	r1, [pc, #188]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b858:	4313      	orrs	r3, r2
 800b85a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b85c:	f7f9 fb32 	bl	8004ec4 <HAL_GetTick>
 800b860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b862:	e008      	b.n	800b876 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b864:	f7f9 fb2e 	bl	8004ec4 <HAL_GetTick>
 800b868:	4602      	mov	r2, r0
 800b86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d901      	bls.n	800b876 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b872:	2303      	movs	r3, #3
 800b874:	e2fe      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b876:	4b27      	ldr	r3, [pc, #156]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 0304 	and.w	r3, r3, #4
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d0f0      	beq.n	800b864 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b882:	4b24      	ldr	r3, [pc, #144]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	691b      	ldr	r3, [r3, #16]
 800b88e:	061b      	lsls	r3, r3, #24
 800b890:	4920      	ldr	r1, [pc, #128]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b892:	4313      	orrs	r3, r2
 800b894:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b896:	e045      	b.n	800b924 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d026      	beq.n	800b8ee <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b8a0:	4b1c      	ldr	r3, [pc, #112]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f023 0219 	bic.w	r2, r3, #25
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	4919      	ldr	r1, [pc, #100]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8b2:	f7f9 fb07 	bl	8004ec4 <HAL_GetTick>
 800b8b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8b8:	e008      	b.n	800b8cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8ba:	f7f9 fb03 	bl	8004ec4 <HAL_GetTick>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d901      	bls.n	800b8cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	e2d3      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8cc:	4b11      	ldr	r3, [pc, #68]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 0304 	and.w	r3, r3, #4
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d0f0      	beq.n	800b8ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8d8:	4b0e      	ldr	r3, [pc, #56]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	061b      	lsls	r3, r3, #24
 800b8e6:	490b      	ldr	r1, [pc, #44]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	604b      	str	r3, [r1, #4]
 800b8ec:	e01a      	b.n	800b924 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b8ee:	4b09      	ldr	r3, [pc, #36]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a08      	ldr	r2, [pc, #32]	@ (800b914 <HAL_RCC_OscConfig+0x244>)
 800b8f4:	f023 0301 	bic.w	r3, r3, #1
 800b8f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8fa:	f7f9 fae3 	bl	8004ec4 <HAL_GetTick>
 800b8fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b900:	e00a      	b.n	800b918 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b902:	f7f9 fadf 	bl	8004ec4 <HAL_GetTick>
 800b906:	4602      	mov	r2, r0
 800b908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d903      	bls.n	800b918 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b910:	2303      	movs	r3, #3
 800b912:	e2af      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
 800b914:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b918:	4b96      	ldr	r3, [pc, #600]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 0304 	and.w	r3, r3, #4
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1ee      	bne.n	800b902 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 0310 	and.w	r3, r3, #16
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d06a      	beq.n	800ba06 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b930:	4b90      	ldr	r3, [pc, #576]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b938:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b93a:	4b8e      	ldr	r3, [pc, #568]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b93e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	2b08      	cmp	r3, #8
 800b944:	d007      	beq.n	800b956 <HAL_RCC_OscConfig+0x286>
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	2b18      	cmp	r3, #24
 800b94a:	d11b      	bne.n	800b984 <HAL_RCC_OscConfig+0x2b4>
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	f003 0303 	and.w	r3, r3, #3
 800b952:	2b01      	cmp	r3, #1
 800b954:	d116      	bne.n	800b984 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b956:	4b87      	ldr	r3, [pc, #540]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d005      	beq.n	800b96e <HAL_RCC_OscConfig+0x29e>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	69db      	ldr	r3, [r3, #28]
 800b966:	2b80      	cmp	r3, #128	@ 0x80
 800b968:	d001      	beq.n	800b96e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e282      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b96e:	4b81      	ldr	r3, [pc, #516]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	061b      	lsls	r3, r3, #24
 800b97c:	497d      	ldr	r1, [pc, #500]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b97e:	4313      	orrs	r3, r2
 800b980:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b982:	e040      	b.n	800ba06 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d023      	beq.n	800b9d4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b98c:	4b79      	ldr	r3, [pc, #484]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a78      	ldr	r2, [pc, #480]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b998:	f7f9 fa94 	bl	8004ec4 <HAL_GetTick>
 800b99c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b99e:	e008      	b.n	800b9b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b9a0:	f7f9 fa90 	bl	8004ec4 <HAL_GetTick>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d901      	bls.n	800b9b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	e260      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b9b2:	4b70      	ldr	r3, [pc, #448]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d0f0      	beq.n	800b9a0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b9be:	4b6d      	ldr	r3, [pc, #436]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	061b      	lsls	r3, r3, #24
 800b9cc:	4969      	ldr	r1, [pc, #420]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	60cb      	str	r3, [r1, #12]
 800b9d2:	e018      	b.n	800ba06 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b9d4:	4b67      	ldr	r3, [pc, #412]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a66      	ldr	r2, [pc, #408]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b9da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9e0:	f7f9 fa70 	bl	8004ec4 <HAL_GetTick>
 800b9e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b9e6:	e008      	b.n	800b9fa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b9e8:	f7f9 fa6c 	bl	8004ec4 <HAL_GetTick>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d901      	bls.n	800b9fa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	e23c      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b9fa:	4b5e      	ldr	r3, [pc, #376]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1f0      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f003 0308 	and.w	r3, r3, #8
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d036      	beq.n	800ba80 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	695b      	ldr	r3, [r3, #20]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d019      	beq.n	800ba4e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba1a:	4b56      	ldr	r3, [pc, #344]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800ba1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba1e:	4a55      	ldr	r2, [pc, #340]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800ba20:	f043 0301 	orr.w	r3, r3, #1
 800ba24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba26:	f7f9 fa4d 	bl	8004ec4 <HAL_GetTick>
 800ba2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ba2c:	e008      	b.n	800ba40 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba2e:	f7f9 fa49 	bl	8004ec4 <HAL_GetTick>
 800ba32:	4602      	mov	r2, r0
 800ba34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	2b02      	cmp	r3, #2
 800ba3a:	d901      	bls.n	800ba40 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	e219      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ba40:	4b4c      	ldr	r3, [pc, #304]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800ba42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba44:	f003 0302 	and.w	r3, r3, #2
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d0f0      	beq.n	800ba2e <HAL_RCC_OscConfig+0x35e>
 800ba4c:	e018      	b.n	800ba80 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba4e:	4b49      	ldr	r3, [pc, #292]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800ba50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba52:	4a48      	ldr	r2, [pc, #288]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800ba54:	f023 0301 	bic.w	r3, r3, #1
 800ba58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba5a:	f7f9 fa33 	bl	8004ec4 <HAL_GetTick>
 800ba5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ba60:	e008      	b.n	800ba74 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba62:	f7f9 fa2f 	bl	8004ec4 <HAL_GetTick>
 800ba66:	4602      	mov	r2, r0
 800ba68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d901      	bls.n	800ba74 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ba70:	2303      	movs	r3, #3
 800ba72:	e1ff      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ba74:	4b3f      	ldr	r3, [pc, #252]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800ba76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba78:	f003 0302 	and.w	r3, r3, #2
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1f0      	bne.n	800ba62 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 0320 	and.w	r3, r3, #32
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d036      	beq.n	800bafa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d019      	beq.n	800bac8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ba94:	4b37      	ldr	r3, [pc, #220]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a36      	ldr	r2, [pc, #216]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800ba9a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ba9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800baa0:	f7f9 fa10 	bl	8004ec4 <HAL_GetTick>
 800baa4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800baa6:	e008      	b.n	800baba <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800baa8:	f7f9 fa0c 	bl	8004ec4 <HAL_GetTick>
 800baac:	4602      	mov	r2, r0
 800baae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d901      	bls.n	800baba <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800bab6:	2303      	movs	r3, #3
 800bab8:	e1dc      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800baba:	4b2e      	ldr	r3, [pc, #184]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d0f0      	beq.n	800baa8 <HAL_RCC_OscConfig+0x3d8>
 800bac6:	e018      	b.n	800bafa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bac8:	4b2a      	ldr	r3, [pc, #168]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a29      	ldr	r2, [pc, #164]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800bace:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bad2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bad4:	f7f9 f9f6 	bl	8004ec4 <HAL_GetTick>
 800bad8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bada:	e008      	b.n	800baee <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800badc:	f7f9 f9f2 	bl	8004ec4 <HAL_GetTick>
 800bae0:	4602      	mov	r2, r0
 800bae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae4:	1ad3      	subs	r3, r2, r3
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d901      	bls.n	800baee <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800baea:	2303      	movs	r3, #3
 800baec:	e1c2      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800baee:	4b21      	ldr	r3, [pc, #132]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1f0      	bne.n	800badc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f003 0304 	and.w	r3, r3, #4
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	f000 8086 	beq.w	800bc14 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bb08:	4b1b      	ldr	r3, [pc, #108]	@ (800bb78 <HAL_RCC_OscConfig+0x4a8>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a1a      	ldr	r2, [pc, #104]	@ (800bb78 <HAL_RCC_OscConfig+0x4a8>)
 800bb0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb14:	f7f9 f9d6 	bl	8004ec4 <HAL_GetTick>
 800bb18:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb1a:	e008      	b.n	800bb2e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb1c:	f7f9 f9d2 	bl	8004ec4 <HAL_GetTick>
 800bb20:	4602      	mov	r2, r0
 800bb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	2b64      	cmp	r3, #100	@ 0x64
 800bb28:	d901      	bls.n	800bb2e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	e1a2      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb2e:	4b12      	ldr	r3, [pc, #72]	@ (800bb78 <HAL_RCC_OscConfig+0x4a8>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d0f0      	beq.n	800bb1c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d106      	bne.n	800bb50 <HAL_RCC_OscConfig+0x480>
 800bb42:	4b0c      	ldr	r3, [pc, #48]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800bb44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb46:	4a0b      	ldr	r2, [pc, #44]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800bb48:	f043 0301 	orr.w	r3, r3, #1
 800bb4c:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb4e:	e032      	b.n	800bbb6 <HAL_RCC_OscConfig+0x4e6>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d111      	bne.n	800bb7c <HAL_RCC_OscConfig+0x4ac>
 800bb58:	4b06      	ldr	r3, [pc, #24]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800bb5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb5c:	4a05      	ldr	r2, [pc, #20]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800bb5e:	f023 0301 	bic.w	r3, r3, #1
 800bb62:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb64:	4b03      	ldr	r3, [pc, #12]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800bb66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb68:	4a02      	ldr	r2, [pc, #8]	@ (800bb74 <HAL_RCC_OscConfig+0x4a4>)
 800bb6a:	f023 0304 	bic.w	r3, r3, #4
 800bb6e:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb70:	e021      	b.n	800bbb6 <HAL_RCC_OscConfig+0x4e6>
 800bb72:	bf00      	nop
 800bb74:	58024400 	.word	0x58024400
 800bb78:	58024800 	.word	0x58024800
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	2b05      	cmp	r3, #5
 800bb82:	d10c      	bne.n	800bb9e <HAL_RCC_OscConfig+0x4ce>
 800bb84:	4b83      	ldr	r3, [pc, #524]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bb86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb88:	4a82      	ldr	r2, [pc, #520]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bb8a:	f043 0304 	orr.w	r3, r3, #4
 800bb8e:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb90:	4b80      	ldr	r3, [pc, #512]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bb92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb94:	4a7f      	ldr	r2, [pc, #508]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bb96:	f043 0301 	orr.w	r3, r3, #1
 800bb9a:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb9c:	e00b      	b.n	800bbb6 <HAL_RCC_OscConfig+0x4e6>
 800bb9e:	4b7d      	ldr	r3, [pc, #500]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bba2:	4a7c      	ldr	r2, [pc, #496]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bba4:	f023 0301 	bic.w	r3, r3, #1
 800bba8:	6713      	str	r3, [r2, #112]	@ 0x70
 800bbaa:	4b7a      	ldr	r3, [pc, #488]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bbac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbae:	4a79      	ldr	r2, [pc, #484]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bbb0:	f023 0304 	bic.w	r3, r3, #4
 800bbb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d015      	beq.n	800bbea <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbbe:	f7f9 f981 	bl	8004ec4 <HAL_GetTick>
 800bbc2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bbc4:	e00a      	b.n	800bbdc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbc6:	f7f9 f97d 	bl	8004ec4 <HAL_GetTick>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d901      	bls.n	800bbdc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e14b      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bbdc:	4b6d      	ldr	r3, [pc, #436]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bbde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d0ee      	beq.n	800bbc6 <HAL_RCC_OscConfig+0x4f6>
 800bbe8:	e014      	b.n	800bc14 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbea:	f7f9 f96b 	bl	8004ec4 <HAL_GetTick>
 800bbee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bbf0:	e00a      	b.n	800bc08 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbf2:	f7f9 f967 	bl	8004ec4 <HAL_GetTick>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d901      	bls.n	800bc08 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800bc04:	2303      	movs	r3, #3
 800bc06:	e135      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc08:	4b62      	ldr	r3, [pc, #392]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bc0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc0c:	f003 0302 	and.w	r3, r3, #2
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d1ee      	bne.n	800bbf2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f000 812a 	beq.w	800be72 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bc1e:	4b5d      	ldr	r3, [pc, #372]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc26:	2b18      	cmp	r3, #24
 800bc28:	f000 80ba 	beq.w	800bda0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	f040 8095 	bne.w	800bd60 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc36:	4b57      	ldr	r3, [pc, #348]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a56      	ldr	r2, [pc, #344]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bc3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc42:	f7f9 f93f 	bl	8004ec4 <HAL_GetTick>
 800bc46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bc48:	e008      	b.n	800bc5c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc4a:	f7f9 f93b 	bl	8004ec4 <HAL_GetTick>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d901      	bls.n	800bc5c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	e10b      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bc5c:	4b4d      	ldr	r3, [pc, #308]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1f0      	bne.n	800bc4a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc68:	4b4a      	ldr	r3, [pc, #296]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bc6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bc6c:	4b4a      	ldr	r3, [pc, #296]	@ (800bd98 <HAL_RCC_OscConfig+0x6c8>)
 800bc6e:	4013      	ands	r3, r2
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bc78:	0112      	lsls	r2, r2, #4
 800bc7a:	430a      	orrs	r2, r1
 800bc7c:	4945      	ldr	r1, [pc, #276]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	628b      	str	r3, [r1, #40]	@ 0x28
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc86:	3b01      	subs	r3, #1
 800bc88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc90:	3b01      	subs	r3, #1
 800bc92:	025b      	lsls	r3, r3, #9
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	431a      	orrs	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	041b      	lsls	r3, r3, #16
 800bca0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bca4:	431a      	orrs	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	061b      	lsls	r3, r3, #24
 800bcae:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bcb2:	4938      	ldr	r1, [pc, #224]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bcb8:	4b36      	ldr	r3, [pc, #216]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bcba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcbc:	4a35      	ldr	r2, [pc, #212]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bcbe:	f023 0301 	bic.w	r3, r3, #1
 800bcc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bcc4:	4b33      	ldr	r3, [pc, #204]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bcc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bcc8:	4b34      	ldr	r3, [pc, #208]	@ (800bd9c <HAL_RCC_OscConfig+0x6cc>)
 800bcca:	4013      	ands	r3, r2
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bcd0:	00d2      	lsls	r2, r2, #3
 800bcd2:	4930      	ldr	r1, [pc, #192]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bcd8:	4b2e      	ldr	r3, [pc, #184]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bcda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcdc:	f023 020c 	bic.w	r2, r3, #12
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce4:	492b      	ldr	r1, [pc, #172]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bce6:	4313      	orrs	r3, r2
 800bce8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bcea:	4b2a      	ldr	r3, [pc, #168]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bcec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcee:	f023 0202 	bic.w	r2, r3, #2
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcf6:	4927      	ldr	r1, [pc, #156]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bcfc:	4b25      	ldr	r3, [pc, #148]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bcfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd00:	4a24      	ldr	r2, [pc, #144]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bd02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd08:	4b22      	ldr	r3, [pc, #136]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bd0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd0c:	4a21      	ldr	r2, [pc, #132]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bd0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bd14:	4b1f      	ldr	r3, [pc, #124]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bd16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd18:	4a1e      	ldr	r2, [pc, #120]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bd1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bd1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bd20:	4b1c      	ldr	r3, [pc, #112]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd24:	4a1b      	ldr	r2, [pc, #108]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bd26:	f043 0301 	orr.w	r3, r3, #1
 800bd2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd2c:	4b19      	ldr	r3, [pc, #100]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a18      	ldr	r2, [pc, #96]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bd32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bd36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd38:	f7f9 f8c4 	bl	8004ec4 <HAL_GetTick>
 800bd3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bd3e:	e008      	b.n	800bd52 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd40:	f7f9 f8c0 	bl	8004ec4 <HAL_GetTick>
 800bd44:	4602      	mov	r2, r0
 800bd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d901      	bls.n	800bd52 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e090      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bd52:	4b10      	ldr	r3, [pc, #64]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d0f0      	beq.n	800bd40 <HAL_RCC_OscConfig+0x670>
 800bd5e:	e088      	b.n	800be72 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd60:	4b0c      	ldr	r3, [pc, #48]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a0b      	ldr	r2, [pc, #44]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bd66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bd6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd6c:	f7f9 f8aa 	bl	8004ec4 <HAL_GetTick>
 800bd70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bd72:	e008      	b.n	800bd86 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd74:	f7f9 f8a6 	bl	8004ec4 <HAL_GetTick>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d901      	bls.n	800bd86 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800bd82:	2303      	movs	r3, #3
 800bd84:	e076      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bd86:	4b03      	ldr	r3, [pc, #12]	@ (800bd94 <HAL_RCC_OscConfig+0x6c4>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d1f0      	bne.n	800bd74 <HAL_RCC_OscConfig+0x6a4>
 800bd92:	e06e      	b.n	800be72 <HAL_RCC_OscConfig+0x7a2>
 800bd94:	58024400 	.word	0x58024400
 800bd98:	fffffc0c 	.word	0xfffffc0c
 800bd9c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bda0:	4b36      	ldr	r3, [pc, #216]	@ (800be7c <HAL_RCC_OscConfig+0x7ac>)
 800bda2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bda6:	4b35      	ldr	r3, [pc, #212]	@ (800be7c <HAL_RCC_OscConfig+0x7ac>)
 800bda8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdaa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d031      	beq.n	800be18 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	f003 0203 	and.w	r2, r3, #3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d12a      	bne.n	800be18 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	091b      	lsrs	r3, r3, #4
 800bdc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d122      	bne.n	800be18 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bddc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d11a      	bne.n	800be18 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	0a5b      	lsrs	r3, r3, #9
 800bde6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d111      	bne.n	800be18 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	0c1b      	lsrs	r3, r3, #16
 800bdf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be00:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800be02:	429a      	cmp	r2, r3
 800be04:	d108      	bne.n	800be18 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	0e1b      	lsrs	r3, r3, #24
 800be0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800be14:	429a      	cmp	r2, r3
 800be16:	d001      	beq.n	800be1c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800be18:	2301      	movs	r3, #1
 800be1a:	e02b      	b.n	800be74 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800be1c:	4b17      	ldr	r3, [pc, #92]	@ (800be7c <HAL_RCC_OscConfig+0x7ac>)
 800be1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be20:	08db      	lsrs	r3, r3, #3
 800be22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be26:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d01f      	beq.n	800be72 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800be32:	4b12      	ldr	r3, [pc, #72]	@ (800be7c <HAL_RCC_OscConfig+0x7ac>)
 800be34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be36:	4a11      	ldr	r2, [pc, #68]	@ (800be7c <HAL_RCC_OscConfig+0x7ac>)
 800be38:	f023 0301 	bic.w	r3, r3, #1
 800be3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800be3e:	f7f9 f841 	bl	8004ec4 <HAL_GetTick>
 800be42:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800be44:	bf00      	nop
 800be46:	f7f9 f83d 	bl	8004ec4 <HAL_GetTick>
 800be4a:	4602      	mov	r2, r0
 800be4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4e:	4293      	cmp	r3, r2
 800be50:	d0f9      	beq.n	800be46 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800be52:	4b0a      	ldr	r3, [pc, #40]	@ (800be7c <HAL_RCC_OscConfig+0x7ac>)
 800be54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be56:	4b0a      	ldr	r3, [pc, #40]	@ (800be80 <HAL_RCC_OscConfig+0x7b0>)
 800be58:	4013      	ands	r3, r2
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800be5e:	00d2      	lsls	r2, r2, #3
 800be60:	4906      	ldr	r1, [pc, #24]	@ (800be7c <HAL_RCC_OscConfig+0x7ac>)
 800be62:	4313      	orrs	r3, r2
 800be64:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800be66:	4b05      	ldr	r3, [pc, #20]	@ (800be7c <HAL_RCC_OscConfig+0x7ac>)
 800be68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be6a:	4a04      	ldr	r2, [pc, #16]	@ (800be7c <HAL_RCC_OscConfig+0x7ac>)
 800be6c:	f043 0301 	orr.w	r3, r3, #1
 800be70:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3730      	adds	r7, #48	@ 0x30
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	58024400 	.word	0x58024400
 800be80:	ffff0007 	.word	0xffff0007

0800be84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b086      	sub	sp, #24
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d101      	bne.n	800be98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	e19c      	b.n	800c1d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800be98:	4b8a      	ldr	r3, [pc, #552]	@ (800c0c4 <HAL_RCC_ClockConfig+0x240>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 030f 	and.w	r3, r3, #15
 800bea0:	683a      	ldr	r2, [r7, #0]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d910      	bls.n	800bec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bea6:	4b87      	ldr	r3, [pc, #540]	@ (800c0c4 <HAL_RCC_ClockConfig+0x240>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f023 020f 	bic.w	r2, r3, #15
 800beae:	4985      	ldr	r1, [pc, #532]	@ (800c0c4 <HAL_RCC_ClockConfig+0x240>)
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800beb6:	4b83      	ldr	r3, [pc, #524]	@ (800c0c4 <HAL_RCC_ClockConfig+0x240>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f003 030f 	and.w	r3, r3, #15
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d001      	beq.n	800bec8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	e184      	b.n	800c1d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f003 0304 	and.w	r3, r3, #4
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d010      	beq.n	800bef6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	691a      	ldr	r2, [r3, #16]
 800bed8:	4b7b      	ldr	r3, [pc, #492]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800beda:	699b      	ldr	r3, [r3, #24]
 800bedc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d908      	bls.n	800bef6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bee4:	4b78      	ldr	r3, [pc, #480]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bee6:	699b      	ldr	r3, [r3, #24]
 800bee8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	4975      	ldr	r1, [pc, #468]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bef2:	4313      	orrs	r3, r2
 800bef4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f003 0308 	and.w	r3, r3, #8
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d010      	beq.n	800bf24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	695a      	ldr	r2, [r3, #20]
 800bf06:	4b70      	ldr	r3, [pc, #448]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bf08:	69db      	ldr	r3, [r3, #28]
 800bf0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d908      	bls.n	800bf24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bf12:	4b6d      	ldr	r3, [pc, #436]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bf14:	69db      	ldr	r3, [r3, #28]
 800bf16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	695b      	ldr	r3, [r3, #20]
 800bf1e:	496a      	ldr	r1, [pc, #424]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bf20:	4313      	orrs	r3, r2
 800bf22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f003 0310 	and.w	r3, r3, #16
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d010      	beq.n	800bf52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	699a      	ldr	r2, [r3, #24]
 800bf34:	4b64      	ldr	r3, [pc, #400]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bf36:	69db      	ldr	r3, [r3, #28]
 800bf38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d908      	bls.n	800bf52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bf40:	4b61      	ldr	r3, [pc, #388]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bf42:	69db      	ldr	r3, [r3, #28]
 800bf44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	699b      	ldr	r3, [r3, #24]
 800bf4c:	495e      	ldr	r1, [pc, #376]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f003 0320 	and.w	r3, r3, #32
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d010      	beq.n	800bf80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	69da      	ldr	r2, [r3, #28]
 800bf62:	4b59      	ldr	r3, [pc, #356]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d908      	bls.n	800bf80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bf6e:	4b56      	ldr	r3, [pc, #344]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bf70:	6a1b      	ldr	r3, [r3, #32]
 800bf72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	69db      	ldr	r3, [r3, #28]
 800bf7a:	4953      	ldr	r1, [pc, #332]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f003 0302 	and.w	r3, r3, #2
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d010      	beq.n	800bfae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	68da      	ldr	r2, [r3, #12]
 800bf90:	4b4d      	ldr	r3, [pc, #308]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	f003 030f 	and.w	r3, r3, #15
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d908      	bls.n	800bfae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf9c:	4b4a      	ldr	r3, [pc, #296]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bf9e:	699b      	ldr	r3, [r3, #24]
 800bfa0:	f023 020f 	bic.w	r2, r3, #15
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	4947      	ldr	r1, [pc, #284]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 0301 	and.w	r3, r3, #1
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d055      	beq.n	800c066 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bfba:	4b43      	ldr	r3, [pc, #268]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	4940      	ldr	r1, [pc, #256]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d107      	bne.n	800bfe4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bfd4:	4b3c      	ldr	r3, [pc, #240]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d121      	bne.n	800c024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e0f6      	b.n	800c1d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	2b03      	cmp	r3, #3
 800bfea:	d107      	bne.n	800bffc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bfec:	4b36      	ldr	r3, [pc, #216]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d115      	bne.n	800c024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	e0ea      	b.n	800c1d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d107      	bne.n	800c014 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c004:	4b30      	ldr	r3, [pc, #192]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d109      	bne.n	800c024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	e0de      	b.n	800c1d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c014:	4b2c      	ldr	r3, [pc, #176]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 0304 	and.w	r3, r3, #4
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	e0d6      	b.n	800c1d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c024:	4b28      	ldr	r3, [pc, #160]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	f023 0207 	bic.w	r2, r3, #7
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	4925      	ldr	r1, [pc, #148]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800c032:	4313      	orrs	r3, r2
 800c034:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c036:	f7f8 ff45 	bl	8004ec4 <HAL_GetTick>
 800c03a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c03c:	e00a      	b.n	800c054 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c03e:	f7f8 ff41 	bl	8004ec4 <HAL_GetTick>
 800c042:	4602      	mov	r2, r0
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d901      	bls.n	800c054 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c050:	2303      	movs	r3, #3
 800c052:	e0be      	b.n	800c1d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c054:	4b1c      	ldr	r3, [pc, #112]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	00db      	lsls	r3, r3, #3
 800c062:	429a      	cmp	r2, r3
 800c064:	d1eb      	bne.n	800c03e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 0302 	and.w	r3, r3, #2
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d010      	beq.n	800c094 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68da      	ldr	r2, [r3, #12]
 800c076:	4b14      	ldr	r3, [pc, #80]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800c078:	699b      	ldr	r3, [r3, #24]
 800c07a:	f003 030f 	and.w	r3, r3, #15
 800c07e:	429a      	cmp	r2, r3
 800c080:	d208      	bcs.n	800c094 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c082:	4b11      	ldr	r3, [pc, #68]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800c084:	699b      	ldr	r3, [r3, #24]
 800c086:	f023 020f 	bic.w	r2, r3, #15
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	490e      	ldr	r1, [pc, #56]	@ (800c0c8 <HAL_RCC_ClockConfig+0x244>)
 800c090:	4313      	orrs	r3, r2
 800c092:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c094:	4b0b      	ldr	r3, [pc, #44]	@ (800c0c4 <HAL_RCC_ClockConfig+0x240>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 030f 	and.w	r3, r3, #15
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d214      	bcs.n	800c0cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0a2:	4b08      	ldr	r3, [pc, #32]	@ (800c0c4 <HAL_RCC_ClockConfig+0x240>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f023 020f 	bic.w	r2, r3, #15
 800c0aa:	4906      	ldr	r1, [pc, #24]	@ (800c0c4 <HAL_RCC_ClockConfig+0x240>)
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0b2:	4b04      	ldr	r3, [pc, #16]	@ (800c0c4 <HAL_RCC_ClockConfig+0x240>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f003 030f 	and.w	r3, r3, #15
 800c0ba:	683a      	ldr	r2, [r7, #0]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d005      	beq.n	800c0cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e086      	b.n	800c1d2 <HAL_RCC_ClockConfig+0x34e>
 800c0c4:	52002000 	.word	0x52002000
 800c0c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f003 0304 	and.w	r3, r3, #4
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d010      	beq.n	800c0fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	691a      	ldr	r2, [r3, #16]
 800c0dc:	4b3f      	ldr	r3, [pc, #252]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c0de:	699b      	ldr	r3, [r3, #24]
 800c0e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d208      	bcs.n	800c0fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c0e8:	4b3c      	ldr	r3, [pc, #240]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c0ea:	699b      	ldr	r3, [r3, #24]
 800c0ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	691b      	ldr	r3, [r3, #16]
 800c0f4:	4939      	ldr	r1, [pc, #228]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 0308 	and.w	r3, r3, #8
 800c102:	2b00      	cmp	r3, #0
 800c104:	d010      	beq.n	800c128 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	695a      	ldr	r2, [r3, #20]
 800c10a:	4b34      	ldr	r3, [pc, #208]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c10c:	69db      	ldr	r3, [r3, #28]
 800c10e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c112:	429a      	cmp	r2, r3
 800c114:	d208      	bcs.n	800c128 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c116:	4b31      	ldr	r3, [pc, #196]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c118:	69db      	ldr	r3, [r3, #28]
 800c11a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	695b      	ldr	r3, [r3, #20]
 800c122:	492e      	ldr	r1, [pc, #184]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c124:	4313      	orrs	r3, r2
 800c126:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0310 	and.w	r3, r3, #16
 800c130:	2b00      	cmp	r3, #0
 800c132:	d010      	beq.n	800c156 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	699a      	ldr	r2, [r3, #24]
 800c138:	4b28      	ldr	r3, [pc, #160]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c13a:	69db      	ldr	r3, [r3, #28]
 800c13c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c140:	429a      	cmp	r2, r3
 800c142:	d208      	bcs.n	800c156 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c144:	4b25      	ldr	r3, [pc, #148]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	4922      	ldr	r1, [pc, #136]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c152:	4313      	orrs	r3, r2
 800c154:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f003 0320 	and.w	r3, r3, #32
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d010      	beq.n	800c184 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	69da      	ldr	r2, [r3, #28]
 800c166:	4b1d      	ldr	r3, [pc, #116]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c16e:	429a      	cmp	r2, r3
 800c170:	d208      	bcs.n	800c184 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c172:	4b1a      	ldr	r3, [pc, #104]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	69db      	ldr	r3, [r3, #28]
 800c17e:	4917      	ldr	r1, [pc, #92]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c180:	4313      	orrs	r3, r2
 800c182:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c184:	f000 f89e 	bl	800c2c4 <HAL_RCC_GetSysClockFreq>
 800c188:	4602      	mov	r2, r0
 800c18a:	4b14      	ldr	r3, [pc, #80]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	0a1b      	lsrs	r3, r3, #8
 800c190:	f003 030f 	and.w	r3, r3, #15
 800c194:	4912      	ldr	r1, [pc, #72]	@ (800c1e0 <HAL_RCC_ClockConfig+0x35c>)
 800c196:	5ccb      	ldrb	r3, [r1, r3]
 800c198:	f003 031f 	and.w	r3, r3, #31
 800c19c:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c1a2:	4b0e      	ldr	r3, [pc, #56]	@ (800c1dc <HAL_RCC_ClockConfig+0x358>)
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	f003 030f 	and.w	r3, r3, #15
 800c1aa:	4a0d      	ldr	r2, [pc, #52]	@ (800c1e0 <HAL_RCC_ClockConfig+0x35c>)
 800c1ac:	5cd3      	ldrb	r3, [r2, r3]
 800c1ae:	f003 031f 	and.w	r3, r3, #31
 800c1b2:	693a      	ldr	r2, [r7, #16]
 800c1b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c1b8:	4a0a      	ldr	r2, [pc, #40]	@ (800c1e4 <HAL_RCC_ClockConfig+0x360>)
 800c1ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c1bc:	4a0a      	ldr	r2, [pc, #40]	@ (800c1e8 <HAL_RCC_ClockConfig+0x364>)
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c1c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c1ec <HAL_RCC_ClockConfig+0x368>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7f8 fe32 	bl	8004e30 <HAL_InitTick>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3718      	adds	r7, #24
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	58024400 	.word	0x58024400
 800c1e0:	0801c79c 	.word	0x0801c79c
 800c1e4:	2400001c 	.word	0x2400001c
 800c1e8:	24000018 	.word	0x24000018
 800c1ec:	24000034 	.word	0x24000034

0800c1f0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b08c      	sub	sp, #48	@ 0x30
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d12a      	bne.n	800c258 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800c202:	4b2d      	ldr	r3, [pc, #180]	@ (800c2b8 <HAL_RCC_MCOConfig+0xc8>)
 800c204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c208:	4a2b      	ldr	r2, [pc, #172]	@ (800c2b8 <HAL_RCC_MCOConfig+0xc8>)
 800c20a:	f043 0301 	orr.w	r3, r3, #1
 800c20e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c212:	4b29      	ldr	r3, [pc, #164]	@ (800c2b8 <HAL_RCC_MCOConfig+0xc8>)
 800c214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c218:	f003 0301 	and.w	r3, r3, #1
 800c21c:	61bb      	str	r3, [r7, #24]
 800c21e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800c220:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c226:	2302      	movs	r3, #2
 800c228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c22a:	2303      	movs	r3, #3
 800c22c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c22e:	2300      	movs	r3, #0
 800c230:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c232:	2300      	movs	r3, #0
 800c234:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800c236:	f107 031c 	add.w	r3, r7, #28
 800c23a:	4619      	mov	r1, r3
 800c23c:	481f      	ldr	r0, [pc, #124]	@ (800c2bc <HAL_RCC_MCOConfig+0xcc>)
 800c23e:	f7fd fd55 	bl	8009cec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800c242:	4b1d      	ldr	r3, [pc, #116]	@ (800c2b8 <HAL_RCC_MCOConfig+0xc8>)
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800c24a:	68b9      	ldr	r1, [r7, #8]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	430b      	orrs	r3, r1
 800c250:	4919      	ldr	r1, [pc, #100]	@ (800c2b8 <HAL_RCC_MCOConfig+0xc8>)
 800c252:	4313      	orrs	r3, r2
 800c254:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800c256:	e02a      	b.n	800c2ae <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800c258:	4b17      	ldr	r3, [pc, #92]	@ (800c2b8 <HAL_RCC_MCOConfig+0xc8>)
 800c25a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c25e:	4a16      	ldr	r2, [pc, #88]	@ (800c2b8 <HAL_RCC_MCOConfig+0xc8>)
 800c260:	f043 0304 	orr.w	r3, r3, #4
 800c264:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c268:	4b13      	ldr	r3, [pc, #76]	@ (800c2b8 <HAL_RCC_MCOConfig+0xc8>)
 800c26a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c26e:	f003 0304 	and.w	r3, r3, #4
 800c272:	617b      	str	r3, [r7, #20]
 800c274:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800c276:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c27a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c27c:	2302      	movs	r3, #2
 800c27e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c280:	2303      	movs	r3, #3
 800c282:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c284:	2300      	movs	r3, #0
 800c286:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c288:	2300      	movs	r3, #0
 800c28a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c28c:	f107 031c 	add.w	r3, r7, #28
 800c290:	4619      	mov	r1, r3
 800c292:	480b      	ldr	r0, [pc, #44]	@ (800c2c0 <HAL_RCC_MCOConfig+0xd0>)
 800c294:	f7fd fd2a 	bl	8009cec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800c298:	4b07      	ldr	r3, [pc, #28]	@ (800c2b8 <HAL_RCC_MCOConfig+0xc8>)
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	01d9      	lsls	r1, r3, #7
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	430b      	orrs	r3, r1
 800c2a8:	4903      	ldr	r1, [pc, #12]	@ (800c2b8 <HAL_RCC_MCOConfig+0xc8>)
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	610b      	str	r3, [r1, #16]
}
 800c2ae:	bf00      	nop
 800c2b0:	3730      	adds	r7, #48	@ 0x30
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	58024400 	.word	0x58024400
 800c2bc:	58020000 	.word	0x58020000
 800c2c0:	58020800 	.word	0x58020800

0800c2c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b089      	sub	sp, #36	@ 0x24
 800c2c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c2ca:	4bb3      	ldr	r3, [pc, #716]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c2d2:	2b18      	cmp	r3, #24
 800c2d4:	f200 8155 	bhi.w	800c582 <HAL_RCC_GetSysClockFreq+0x2be>
 800c2d8:	a201      	add	r2, pc, #4	@ (adr r2, 800c2e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2de:	bf00      	nop
 800c2e0:	0800c345 	.word	0x0800c345
 800c2e4:	0800c583 	.word	0x0800c583
 800c2e8:	0800c583 	.word	0x0800c583
 800c2ec:	0800c583 	.word	0x0800c583
 800c2f0:	0800c583 	.word	0x0800c583
 800c2f4:	0800c583 	.word	0x0800c583
 800c2f8:	0800c583 	.word	0x0800c583
 800c2fc:	0800c583 	.word	0x0800c583
 800c300:	0800c36b 	.word	0x0800c36b
 800c304:	0800c583 	.word	0x0800c583
 800c308:	0800c583 	.word	0x0800c583
 800c30c:	0800c583 	.word	0x0800c583
 800c310:	0800c583 	.word	0x0800c583
 800c314:	0800c583 	.word	0x0800c583
 800c318:	0800c583 	.word	0x0800c583
 800c31c:	0800c583 	.word	0x0800c583
 800c320:	0800c371 	.word	0x0800c371
 800c324:	0800c583 	.word	0x0800c583
 800c328:	0800c583 	.word	0x0800c583
 800c32c:	0800c583 	.word	0x0800c583
 800c330:	0800c583 	.word	0x0800c583
 800c334:	0800c583 	.word	0x0800c583
 800c338:	0800c583 	.word	0x0800c583
 800c33c:	0800c583 	.word	0x0800c583
 800c340:	0800c377 	.word	0x0800c377
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c344:	4b94      	ldr	r3, [pc, #592]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f003 0320 	and.w	r3, r3, #32
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d009      	beq.n	800c364 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c350:	4b91      	ldr	r3, [pc, #580]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	08db      	lsrs	r3, r3, #3
 800c356:	f003 0303 	and.w	r3, r3, #3
 800c35a:	4a90      	ldr	r2, [pc, #576]	@ (800c59c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c35c:	fa22 f303 	lsr.w	r3, r2, r3
 800c360:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c362:	e111      	b.n	800c588 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c364:	4b8d      	ldr	r3, [pc, #564]	@ (800c59c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c366:	61bb      	str	r3, [r7, #24]
      break;
 800c368:	e10e      	b.n	800c588 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c36a:	4b8d      	ldr	r3, [pc, #564]	@ (800c5a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c36c:	61bb      	str	r3, [r7, #24]
      break;
 800c36e:	e10b      	b.n	800c588 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c370:	4b8c      	ldr	r3, [pc, #560]	@ (800c5a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c372:	61bb      	str	r3, [r7, #24]
      break;
 800c374:	e108      	b.n	800c588 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c376:	4b88      	ldr	r3, [pc, #544]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c37a:	f003 0303 	and.w	r3, r3, #3
 800c37e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c380:	4b85      	ldr	r3, [pc, #532]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c384:	091b      	lsrs	r3, r3, #4
 800c386:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c38a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c38c:	4b82      	ldr	r3, [pc, #520]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c390:	f003 0301 	and.w	r3, r3, #1
 800c394:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c396:	4b80      	ldr	r3, [pc, #512]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c39a:	08db      	lsrs	r3, r3, #3
 800c39c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	fb02 f303 	mul.w	r3, r2, r3
 800c3a6:	ee07 3a90 	vmov	s15, r3
 800c3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	f000 80e1 	beq.w	800c57c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	2b02      	cmp	r3, #2
 800c3be:	f000 8083 	beq.w	800c4c8 <HAL_RCC_GetSysClockFreq+0x204>
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	f200 80a1 	bhi.w	800c50c <HAL_RCC_GetSysClockFreq+0x248>
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d003      	beq.n	800c3d8 <HAL_RCC_GetSysClockFreq+0x114>
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d056      	beq.n	800c484 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c3d6:	e099      	b.n	800c50c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3d8:	4b6f      	ldr	r3, [pc, #444]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 0320 	and.w	r3, r3, #32
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d02d      	beq.n	800c440 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3e4:	4b6c      	ldr	r3, [pc, #432]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	08db      	lsrs	r3, r3, #3
 800c3ea:	f003 0303 	and.w	r3, r3, #3
 800c3ee:	4a6b      	ldr	r2, [pc, #428]	@ (800c59c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c3f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	ee07 3a90 	vmov	s15, r3
 800c3fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	ee07 3a90 	vmov	s15, r3
 800c406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c40e:	4b62      	ldr	r3, [pc, #392]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c416:	ee07 3a90 	vmov	s15, r3
 800c41a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c41e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c422:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c5a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c42a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c42e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c43a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c43e:	e087      	b.n	800c550 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	ee07 3a90 	vmov	s15, r3
 800c446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c44a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c5ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800c44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c452:	4b51      	ldr	r3, [pc, #324]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c45a:	ee07 3a90 	vmov	s15, r3
 800c45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c462:	ed97 6a02 	vldr	s12, [r7, #8]
 800c466:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c5a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c46a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c46e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c47e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c482:	e065      	b.n	800c550 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	ee07 3a90 	vmov	s15, r3
 800c48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c48e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c5b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c496:	4b40      	ldr	r3, [pc, #256]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c49e:	ee07 3a90 	vmov	s15, r3
 800c4a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c4aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c5a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c4ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c4c6:	e043      	b.n	800c550 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	ee07 3a90 	vmov	s15, r3
 800c4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c5b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4da:	4b2f      	ldr	r3, [pc, #188]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4e2:	ee07 3a90 	vmov	s15, r3
 800c4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800c4ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c5a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c506:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c50a:	e021      	b.n	800c550 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	ee07 3a90 	vmov	s15, r3
 800c512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c516:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c5b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c51e:	4b1e      	ldr	r3, [pc, #120]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c526:	ee07 3a90 	vmov	s15, r3
 800c52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c52e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c532:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c5a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c53e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c54a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c54e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c550:	4b11      	ldr	r3, [pc, #68]	@ (800c598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c554:	0a5b      	lsrs	r3, r3, #9
 800c556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c55a:	3301      	adds	r3, #1
 800c55c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	ee07 3a90 	vmov	s15, r3
 800c564:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c568:	edd7 6a07 	vldr	s13, [r7, #28]
 800c56c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c574:	ee17 3a90 	vmov	r3, s15
 800c578:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c57a:	e005      	b.n	800c588 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c57c:	2300      	movs	r3, #0
 800c57e:	61bb      	str	r3, [r7, #24]
      break;
 800c580:	e002      	b.n	800c588 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c582:	4b07      	ldr	r3, [pc, #28]	@ (800c5a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c584:	61bb      	str	r3, [r7, #24]
      break;
 800c586:	bf00      	nop
  }

  return sysclockfreq;
 800c588:	69bb      	ldr	r3, [r7, #24]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3724      	adds	r7, #36	@ 0x24
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop
 800c598:	58024400 	.word	0x58024400
 800c59c:	03d09000 	.word	0x03d09000
 800c5a0:	003d0900 	.word	0x003d0900
 800c5a4:	017d7840 	.word	0x017d7840
 800c5a8:	46000000 	.word	0x46000000
 800c5ac:	4c742400 	.word	0x4c742400
 800c5b0:	4a742400 	.word	0x4a742400
 800c5b4:	4bbebc20 	.word	0x4bbebc20

0800c5b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c5be:	f7ff fe81 	bl	800c2c4 <HAL_RCC_GetSysClockFreq>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	4b10      	ldr	r3, [pc, #64]	@ (800c608 <HAL_RCC_GetHCLKFreq+0x50>)
 800c5c6:	699b      	ldr	r3, [r3, #24]
 800c5c8:	0a1b      	lsrs	r3, r3, #8
 800c5ca:	f003 030f 	and.w	r3, r3, #15
 800c5ce:	490f      	ldr	r1, [pc, #60]	@ (800c60c <HAL_RCC_GetHCLKFreq+0x54>)
 800c5d0:	5ccb      	ldrb	r3, [r1, r3]
 800c5d2:	f003 031f 	and.w	r3, r3, #31
 800c5d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c5dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c608 <HAL_RCC_GetHCLKFreq+0x50>)
 800c5de:	699b      	ldr	r3, [r3, #24]
 800c5e0:	f003 030f 	and.w	r3, r3, #15
 800c5e4:	4a09      	ldr	r2, [pc, #36]	@ (800c60c <HAL_RCC_GetHCLKFreq+0x54>)
 800c5e6:	5cd3      	ldrb	r3, [r2, r3]
 800c5e8:	f003 031f 	and.w	r3, r3, #31
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c5f2:	4a07      	ldr	r2, [pc, #28]	@ (800c610 <HAL_RCC_GetHCLKFreq+0x58>)
 800c5f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c5f6:	4a07      	ldr	r2, [pc, #28]	@ (800c614 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c5fc:	4b04      	ldr	r3, [pc, #16]	@ (800c610 <HAL_RCC_GetHCLKFreq+0x58>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
}
 800c600:	4618      	mov	r0, r3
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	58024400 	.word	0x58024400
 800c60c:	0801c79c 	.word	0x0801c79c
 800c610:	2400001c 	.word	0x2400001c
 800c614:	24000018 	.word	0x24000018

0800c618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c61c:	f7ff ffcc 	bl	800c5b8 <HAL_RCC_GetHCLKFreq>
 800c620:	4602      	mov	r2, r0
 800c622:	4b06      	ldr	r3, [pc, #24]	@ (800c63c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c624:	69db      	ldr	r3, [r3, #28]
 800c626:	091b      	lsrs	r3, r3, #4
 800c628:	f003 0307 	and.w	r3, r3, #7
 800c62c:	4904      	ldr	r1, [pc, #16]	@ (800c640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c62e:	5ccb      	ldrb	r3, [r1, r3]
 800c630:	f003 031f 	and.w	r3, r3, #31
 800c634:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c638:	4618      	mov	r0, r3
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	58024400 	.word	0x58024400
 800c640:	0801c79c 	.word	0x0801c79c

0800c644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c648:	f7ff ffb6 	bl	800c5b8 <HAL_RCC_GetHCLKFreq>
 800c64c:	4602      	mov	r2, r0
 800c64e:	4b06      	ldr	r3, [pc, #24]	@ (800c668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c650:	69db      	ldr	r3, [r3, #28]
 800c652:	0a1b      	lsrs	r3, r3, #8
 800c654:	f003 0307 	and.w	r3, r3, #7
 800c658:	4904      	ldr	r1, [pc, #16]	@ (800c66c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c65a:	5ccb      	ldrb	r3, [r1, r3]
 800c65c:	f003 031f 	and.w	r3, r3, #31
 800c660:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c664:	4618      	mov	r0, r3
 800c666:	bd80      	pop	{r7, pc}
 800c668:	58024400 	.word	0x58024400
 800c66c:	0801c79c 	.word	0x0801c79c

0800c670 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c674:	b0c6      	sub	sp, #280	@ 0x118
 800c676:	af00      	add	r7, sp, #0
 800c678:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c67c:	2300      	movs	r3, #0
 800c67e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c682:	2300      	movs	r3, #0
 800c684:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c690:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c694:	2500      	movs	r5, #0
 800c696:	ea54 0305 	orrs.w	r3, r4, r5
 800c69a:	d049      	beq.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c6a6:	d02f      	beq.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c6a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c6ac:	d828      	bhi.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c6ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6b2:	d01a      	beq.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c6b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6b8:	d822      	bhi.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d003      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c6be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6c2:	d007      	beq.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c6c4:	e01c      	b.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6c6:	4bab      	ldr	r3, [pc, #684]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ca:	4aaa      	ldr	r2, [pc, #680]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c6cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c6d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c6d2:	e01a      	b.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6d8:	3308      	adds	r3, #8
 800c6da:	2102      	movs	r1, #2
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f002 fa49 	bl	800eb74 <RCCEx_PLL2_Config>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c6e8:	e00f      	b.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ee:	3328      	adds	r3, #40	@ 0x28
 800c6f0:	2102      	movs	r1, #2
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f002 faf0 	bl	800ecd8 <RCCEx_PLL3_Config>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c6fe:	e004      	b.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c700:	2301      	movs	r3, #1
 800c702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c706:	e000      	b.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c70a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d10a      	bne.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c712:	4b98      	ldr	r3, [pc, #608]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c716:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c71e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c720:	4a94      	ldr	r2, [pc, #592]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c722:	430b      	orrs	r3, r1
 800c724:	6513      	str	r3, [r2, #80]	@ 0x50
 800c726:	e003      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c728:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c72c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c73c:	f04f 0900 	mov.w	r9, #0
 800c740:	ea58 0309 	orrs.w	r3, r8, r9
 800c744:	d047      	beq.n	800c7d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c74a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c74c:	2b04      	cmp	r3, #4
 800c74e:	d82a      	bhi.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c750:	a201      	add	r2, pc, #4	@ (adr r2, 800c758 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c756:	bf00      	nop
 800c758:	0800c76d 	.word	0x0800c76d
 800c75c:	0800c77b 	.word	0x0800c77b
 800c760:	0800c791 	.word	0x0800c791
 800c764:	0800c7af 	.word	0x0800c7af
 800c768:	0800c7af 	.word	0x0800c7af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c76c:	4b81      	ldr	r3, [pc, #516]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c770:	4a80      	ldr	r2, [pc, #512]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c778:	e01a      	b.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c77e:	3308      	adds	r3, #8
 800c780:	2100      	movs	r1, #0
 800c782:	4618      	mov	r0, r3
 800c784:	f002 f9f6 	bl	800eb74 <RCCEx_PLL2_Config>
 800c788:	4603      	mov	r3, r0
 800c78a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c78e:	e00f      	b.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c794:	3328      	adds	r3, #40	@ 0x28
 800c796:	2100      	movs	r1, #0
 800c798:	4618      	mov	r0, r3
 800c79a:	f002 fa9d 	bl	800ecd8 <RCCEx_PLL3_Config>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c7a4:	e004      	b.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7ac:	e000      	b.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c7ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d10a      	bne.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c7b8:	4b6e      	ldr	r3, [pc, #440]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c7ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7bc:	f023 0107 	bic.w	r1, r3, #7
 800c7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7c6:	4a6b      	ldr	r2, [pc, #428]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c7c8:	430b      	orrs	r3, r1
 800c7ca:	6513      	str	r3, [r2, #80]	@ 0x50
 800c7cc:	e003      	b.n	800c7d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7de:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800c7e2:	f04f 0b00 	mov.w	fp, #0
 800c7e6:	ea5a 030b 	orrs.w	r3, sl, fp
 800c7ea:	d05b      	beq.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c7f4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c7f8:	d03b      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c7fa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c7fe:	d834      	bhi.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c800:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c804:	d037      	beq.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c806:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c80a:	d82e      	bhi.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c80c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c810:	d033      	beq.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800c812:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c816:	d828      	bhi.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c818:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c81c:	d01a      	beq.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c81e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c822:	d822      	bhi.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c824:	2b00      	cmp	r3, #0
 800c826:	d003      	beq.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c828:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c82c:	d007      	beq.n	800c83e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800c82e:	e01c      	b.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c830:	4b50      	ldr	r3, [pc, #320]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c834:	4a4f      	ldr	r2, [pc, #316]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c83a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c83c:	e01e      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c842:	3308      	adds	r3, #8
 800c844:	2100      	movs	r1, #0
 800c846:	4618      	mov	r0, r3
 800c848:	f002 f994 	bl	800eb74 <RCCEx_PLL2_Config>
 800c84c:	4603      	mov	r3, r0
 800c84e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c852:	e013      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c858:	3328      	adds	r3, #40	@ 0x28
 800c85a:	2100      	movs	r1, #0
 800c85c:	4618      	mov	r0, r3
 800c85e:	f002 fa3b 	bl	800ecd8 <RCCEx_PLL3_Config>
 800c862:	4603      	mov	r3, r0
 800c864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c868:	e008      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c870:	e004      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c872:	bf00      	nop
 800c874:	e002      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c876:	bf00      	nop
 800c878:	e000      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c87a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c87c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10b      	bne.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c884:	4b3b      	ldr	r3, [pc, #236]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c888:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c890:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c894:	4a37      	ldr	r2, [pc, #220]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c896:	430b      	orrs	r3, r1
 800c898:	6593      	str	r3, [r2, #88]	@ 0x58
 800c89a:	e003      	b.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c89c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c8b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c8ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c8be:	460b      	mov	r3, r1
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	d05d      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c8cc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c8d0:	d03b      	beq.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c8d2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c8d6:	d834      	bhi.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c8d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c8dc:	d037      	beq.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c8de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c8e2:	d82e      	bhi.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c8e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c8e8:	d033      	beq.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c8ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c8ee:	d828      	bhi.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c8f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c8f4:	d01a      	beq.n	800c92c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c8f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c8fa:	d822      	bhi.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d003      	beq.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c904:	d007      	beq.n	800c916 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c906:	e01c      	b.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c908:	4b1a      	ldr	r3, [pc, #104]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c90c:	4a19      	ldr	r2, [pc, #100]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c90e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c914:	e01e      	b.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c91a:	3308      	adds	r3, #8
 800c91c:	2100      	movs	r1, #0
 800c91e:	4618      	mov	r0, r3
 800c920:	f002 f928 	bl	800eb74 <RCCEx_PLL2_Config>
 800c924:	4603      	mov	r3, r0
 800c926:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c92a:	e013      	b.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c930:	3328      	adds	r3, #40	@ 0x28
 800c932:	2100      	movs	r1, #0
 800c934:	4618      	mov	r0, r3
 800c936:	f002 f9cf 	bl	800ecd8 <RCCEx_PLL3_Config>
 800c93a:	4603      	mov	r3, r0
 800c93c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c940:	e008      	b.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c948:	e004      	b.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c94a:	bf00      	nop
 800c94c:	e002      	b.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c94e:	bf00      	nop
 800c950:	e000      	b.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c952:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c954:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10d      	bne.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c95c:	4b05      	ldr	r3, [pc, #20]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c95e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c960:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c968:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c96c:	4a01      	ldr	r2, [pc, #4]	@ (800c974 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c96e:	430b      	orrs	r3, r1
 800c970:	6593      	str	r3, [r2, #88]	@ 0x58
 800c972:	e005      	b.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c974:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c978:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c97c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c988:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c98c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c990:	2300      	movs	r3, #0
 800c992:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c996:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c99a:	460b      	mov	r3, r1
 800c99c:	4313      	orrs	r3, r2
 800c99e:	d03a      	beq.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9a6:	2b30      	cmp	r3, #48	@ 0x30
 800c9a8:	d01f      	beq.n	800c9ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c9aa:	2b30      	cmp	r3, #48	@ 0x30
 800c9ac:	d819      	bhi.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c9ae:	2b20      	cmp	r3, #32
 800c9b0:	d00c      	beq.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c9b2:	2b20      	cmp	r3, #32
 800c9b4:	d815      	bhi.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d019      	beq.n	800c9ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c9ba:	2b10      	cmp	r3, #16
 800c9bc:	d111      	bne.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9be:	4baa      	ldr	r3, [pc, #680]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9c2:	4aa9      	ldr	r2, [pc, #676]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c9c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c9ca:	e011      	b.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	2102      	movs	r1, #2
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f002 f8cd 	bl	800eb74 <RCCEx_PLL2_Config>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c9e0:	e006      	b.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c9e8:	e002      	b.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c9ea:	bf00      	nop
 800c9ec:	e000      	b.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c9ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10a      	bne.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c9f8:	4b9b      	ldr	r3, [pc, #620]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c9fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ca00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca06:	4a98      	ldr	r2, [pc, #608]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ca08:	430b      	orrs	r3, r1
 800ca0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ca0c:	e003      	b.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ca16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ca22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ca26:	2300      	movs	r3, #0
 800ca28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ca2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ca30:	460b      	mov	r3, r1
 800ca32:	4313      	orrs	r3, r2
 800ca34:	d051      	beq.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ca36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca40:	d035      	beq.n	800caae <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ca42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca46:	d82e      	bhi.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ca48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ca4c:	d031      	beq.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ca4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ca52:	d828      	bhi.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ca54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca58:	d01a      	beq.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ca5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca5e:	d822      	bhi.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d003      	beq.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ca64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca68:	d007      	beq.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ca6a:	e01c      	b.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca6c:	4b7e      	ldr	r3, [pc, #504]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ca6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca70:	4a7d      	ldr	r2, [pc, #500]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ca72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ca78:	e01c      	b.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca7e:	3308      	adds	r3, #8
 800ca80:	2100      	movs	r1, #0
 800ca82:	4618      	mov	r0, r3
 800ca84:	f002 f876 	bl	800eb74 <RCCEx_PLL2_Config>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ca8e:	e011      	b.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca94:	3328      	adds	r3, #40	@ 0x28
 800ca96:	2100      	movs	r1, #0
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f002 f91d 	bl	800ecd8 <RCCEx_PLL3_Config>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800caa4:	e006      	b.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800caac:	e002      	b.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800caae:	bf00      	nop
 800cab0:	e000      	b.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800cab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cab4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10a      	bne.n	800cad2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cabc:	4b6a      	ldr	r3, [pc, #424]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cabe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cac0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800cac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800caca:	4a67      	ldr	r2, [pc, #412]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cacc:	430b      	orrs	r3, r1
 800cace:	6513      	str	r3, [r2, #80]	@ 0x50
 800cad0:	e003      	b.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cad2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cad6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800cae6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800caea:	2300      	movs	r3, #0
 800caec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800caf0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800caf4:	460b      	mov	r3, r1
 800caf6:	4313      	orrs	r3, r2
 800caf8:	d053      	beq.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800cafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cafe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cb04:	d033      	beq.n	800cb6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800cb06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cb0a:	d82c      	bhi.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800cb0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cb10:	d02f      	beq.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800cb12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cb16:	d826      	bhi.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800cb18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cb1c:	d02b      	beq.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800cb1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cb22:	d820      	bhi.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800cb24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb28:	d012      	beq.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800cb2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb2e:	d81a      	bhi.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d022      	beq.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800cb34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb38:	d115      	bne.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb3e:	3308      	adds	r3, #8
 800cb40:	2101      	movs	r1, #1
 800cb42:	4618      	mov	r0, r3
 800cb44:	f002 f816 	bl	800eb74 <RCCEx_PLL2_Config>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cb4e:	e015      	b.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb54:	3328      	adds	r3, #40	@ 0x28
 800cb56:	2101      	movs	r1, #1
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f002 f8bd 	bl	800ecd8 <RCCEx_PLL3_Config>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cb64:	e00a      	b.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb6c:	e006      	b.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800cb6e:	bf00      	nop
 800cb70:	e004      	b.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800cb72:	bf00      	nop
 800cb74:	e002      	b.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800cb76:	bf00      	nop
 800cb78:	e000      	b.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800cb7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d10a      	bne.n	800cb9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cb84:	4b38      	ldr	r3, [pc, #224]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800cb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb92:	4a35      	ldr	r2, [pc, #212]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb94:	430b      	orrs	r3, r1
 800cb96:	6513      	str	r3, [r2, #80]	@ 0x50
 800cb98:	e003      	b.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbaa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800cbae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cbb8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	d058      	beq.n	800cc74 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cbc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cbca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cbce:	d033      	beq.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800cbd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cbd4:	d82c      	bhi.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cbd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbda:	d02f      	beq.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800cbdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbe0:	d826      	bhi.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cbe2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cbe6:	d02b      	beq.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800cbe8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cbec:	d820      	bhi.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cbee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbf2:	d012      	beq.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800cbf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbf8:	d81a      	bhi.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d022      	beq.n	800cc44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cbfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc02:	d115      	bne.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc08:	3308      	adds	r3, #8
 800cc0a:	2101      	movs	r1, #1
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f001 ffb1 	bl	800eb74 <RCCEx_PLL2_Config>
 800cc12:	4603      	mov	r3, r0
 800cc14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cc18:	e015      	b.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc1e:	3328      	adds	r3, #40	@ 0x28
 800cc20:	2101      	movs	r1, #1
 800cc22:	4618      	mov	r0, r3
 800cc24:	f002 f858 	bl	800ecd8 <RCCEx_PLL3_Config>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cc2e:	e00a      	b.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cc30:	2301      	movs	r3, #1
 800cc32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc36:	e006      	b.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cc38:	bf00      	nop
 800cc3a:	e004      	b.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cc3c:	bf00      	nop
 800cc3e:	e002      	b.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cc40:	bf00      	nop
 800cc42:	e000      	b.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cc44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d10e      	bne.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cc4e:	4b06      	ldr	r3, [pc, #24]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cc50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800cc56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cc5e:	4a02      	ldr	r2, [pc, #8]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cc60:	430b      	orrs	r3, r1
 800cc62:	6593      	str	r3, [r2, #88]	@ 0x58
 800cc64:	e006      	b.n	800cc74 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800cc66:	bf00      	nop
 800cc68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cc74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800cc80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cc84:	2300      	movs	r3, #0
 800cc86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cc8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	4313      	orrs	r3, r2
 800cc92:	d037      	beq.n	800cd04 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cc94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc9e:	d00e      	beq.n	800ccbe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800cca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cca4:	d816      	bhi.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d018      	beq.n	800ccdc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ccaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccae:	d111      	bne.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ccb0:	4bc4      	ldr	r3, [pc, #784]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ccb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccb4:	4ac3      	ldr	r2, [pc, #780]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ccb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ccba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ccbc:	e00f      	b.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ccbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccc2:	3308      	adds	r3, #8
 800ccc4:	2101      	movs	r1, #1
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f001 ff54 	bl	800eb74 <RCCEx_PLL2_Config>
 800cccc:	4603      	mov	r3, r0
 800ccce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ccd2:	e004      	b.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ccda:	e000      	b.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ccdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d10a      	bne.n	800ccfc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cce6:	4bb7      	ldr	r3, [pc, #732]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ccee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccf4:	4ab3      	ldr	r2, [pc, #716]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ccf6:	430b      	orrs	r3, r1
 800ccf8:	6513      	str	r3, [r2, #80]	@ 0x50
 800ccfa:	e003      	b.n	800cd04 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cd04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800cd10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd14:	2300      	movs	r3, #0
 800cd16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cd1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800cd1e:	460b      	mov	r3, r1
 800cd20:	4313      	orrs	r3, r2
 800cd22:	d039      	beq.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800cd24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd2a:	2b03      	cmp	r3, #3
 800cd2c:	d81c      	bhi.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800cd2e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd34 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800cd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd34:	0800cd71 	.word	0x0800cd71
 800cd38:	0800cd45 	.word	0x0800cd45
 800cd3c:	0800cd53 	.word	0x0800cd53
 800cd40:	0800cd71 	.word	0x0800cd71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd44:	4b9f      	ldr	r3, [pc, #636]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd48:	4a9e      	ldr	r2, [pc, #632]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cd50:	e00f      	b.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cd52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd56:	3308      	adds	r3, #8
 800cd58:	2102      	movs	r1, #2
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f001 ff0a 	bl	800eb74 <RCCEx_PLL2_Config>
 800cd60:	4603      	mov	r3, r0
 800cd62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cd66:	e004      	b.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cd6e:	e000      	b.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800cd70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d10a      	bne.n	800cd90 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800cd7a:	4b92      	ldr	r3, [pc, #584]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd7e:	f023 0103 	bic.w	r1, r3, #3
 800cd82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd88:	4a8e      	ldr	r2, [pc, #568]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd8a:	430b      	orrs	r3, r1
 800cd8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cd8e:	e003      	b.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800cda4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cdae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	f000 8099 	beq.w	800ceec <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cdba:	4b83      	ldr	r3, [pc, #524]	@ (800cfc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a82      	ldr	r2, [pc, #520]	@ (800cfc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cdc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cdc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cdc6:	f7f8 f87d 	bl	8004ec4 <HAL_GetTick>
 800cdca:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cdce:	e00b      	b.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cdd0:	f7f8 f878 	bl	8004ec4 <HAL_GetTick>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800cdda:	1ad3      	subs	r3, r2, r3
 800cddc:	2b64      	cmp	r3, #100	@ 0x64
 800cdde:	d903      	bls.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800cde0:	2303      	movs	r3, #3
 800cde2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cde6:	e005      	b.n	800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cde8:	4b77      	ldr	r3, [pc, #476]	@ (800cfc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d0ed      	beq.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800cdf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d173      	bne.n	800cee4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cdfc:	4b71      	ldr	r3, [pc, #452]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdfe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ce00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ce08:	4053      	eors	r3, r2
 800ce0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d015      	beq.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ce12:	4b6c      	ldr	r3, [pc, #432]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce1a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ce1e:	4b69      	ldr	r3, [pc, #420]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce22:	4a68      	ldr	r2, [pc, #416]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ce28:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ce2a:	4b66      	ldr	r3, [pc, #408]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce2e:	4a65      	ldr	r2, [pc, #404]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce34:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ce36:	4a63      	ldr	r2, [pc, #396]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ce3c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ce3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ce46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce4a:	d118      	bne.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce4c:	f7f8 f83a 	bl	8004ec4 <HAL_GetTick>
 800ce50:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ce54:	e00d      	b.n	800ce72 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce56:	f7f8 f835 	bl	8004ec4 <HAL_GetTick>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ce60:	1ad2      	subs	r2, r2, r3
 800ce62:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d903      	bls.n	800ce72 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ce6a:	2303      	movs	r3, #3
 800ce6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800ce70:	e005      	b.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ce72:	4b54      	ldr	r3, [pc, #336]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce76:	f003 0302 	and.w	r3, r3, #2
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d0eb      	beq.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ce7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d129      	bne.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ce86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ce8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce96:	d10e      	bne.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800ce98:	4b4a      	ldr	r3, [pc, #296]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce9a:	691b      	ldr	r3, [r3, #16]
 800ce9c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800cea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cea4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cea8:	091a      	lsrs	r2, r3, #4
 800ceaa:	4b48      	ldr	r3, [pc, #288]	@ (800cfcc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ceac:	4013      	ands	r3, r2
 800ceae:	4a45      	ldr	r2, [pc, #276]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ceb0:	430b      	orrs	r3, r1
 800ceb2:	6113      	str	r3, [r2, #16]
 800ceb4:	e005      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800ceb6:	4b43      	ldr	r3, [pc, #268]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	4a42      	ldr	r2, [pc, #264]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cebc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cec0:	6113      	str	r3, [r2, #16]
 800cec2:	4b40      	ldr	r3, [pc, #256]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cec4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800cec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ced2:	4a3c      	ldr	r2, [pc, #240]	@ (800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ced4:	430b      	orrs	r3, r1
 800ced6:	6713      	str	r3, [r2, #112]	@ 0x70
 800ced8:	e008      	b.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ceda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cede:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800cee2:	e003      	b.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cee4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cee8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ceec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef4:	f002 0301 	and.w	r3, r2, #1
 800cef8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cefc:	2300      	movs	r3, #0
 800cefe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cf02:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800cf06:	460b      	mov	r3, r1
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	f000 808f 	beq.w	800d02c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800cf0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf14:	2b28      	cmp	r3, #40	@ 0x28
 800cf16:	d871      	bhi.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800cf18:	a201      	add	r2, pc, #4	@ (adr r2, 800cf20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800cf1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1e:	bf00      	nop
 800cf20:	0800d005 	.word	0x0800d005
 800cf24:	0800cffd 	.word	0x0800cffd
 800cf28:	0800cffd 	.word	0x0800cffd
 800cf2c:	0800cffd 	.word	0x0800cffd
 800cf30:	0800cffd 	.word	0x0800cffd
 800cf34:	0800cffd 	.word	0x0800cffd
 800cf38:	0800cffd 	.word	0x0800cffd
 800cf3c:	0800cffd 	.word	0x0800cffd
 800cf40:	0800cfd1 	.word	0x0800cfd1
 800cf44:	0800cffd 	.word	0x0800cffd
 800cf48:	0800cffd 	.word	0x0800cffd
 800cf4c:	0800cffd 	.word	0x0800cffd
 800cf50:	0800cffd 	.word	0x0800cffd
 800cf54:	0800cffd 	.word	0x0800cffd
 800cf58:	0800cffd 	.word	0x0800cffd
 800cf5c:	0800cffd 	.word	0x0800cffd
 800cf60:	0800cfe7 	.word	0x0800cfe7
 800cf64:	0800cffd 	.word	0x0800cffd
 800cf68:	0800cffd 	.word	0x0800cffd
 800cf6c:	0800cffd 	.word	0x0800cffd
 800cf70:	0800cffd 	.word	0x0800cffd
 800cf74:	0800cffd 	.word	0x0800cffd
 800cf78:	0800cffd 	.word	0x0800cffd
 800cf7c:	0800cffd 	.word	0x0800cffd
 800cf80:	0800d005 	.word	0x0800d005
 800cf84:	0800cffd 	.word	0x0800cffd
 800cf88:	0800cffd 	.word	0x0800cffd
 800cf8c:	0800cffd 	.word	0x0800cffd
 800cf90:	0800cffd 	.word	0x0800cffd
 800cf94:	0800cffd 	.word	0x0800cffd
 800cf98:	0800cffd 	.word	0x0800cffd
 800cf9c:	0800cffd 	.word	0x0800cffd
 800cfa0:	0800d005 	.word	0x0800d005
 800cfa4:	0800cffd 	.word	0x0800cffd
 800cfa8:	0800cffd 	.word	0x0800cffd
 800cfac:	0800cffd 	.word	0x0800cffd
 800cfb0:	0800cffd 	.word	0x0800cffd
 800cfb4:	0800cffd 	.word	0x0800cffd
 800cfb8:	0800cffd 	.word	0x0800cffd
 800cfbc:	0800cffd 	.word	0x0800cffd
 800cfc0:	0800d005 	.word	0x0800d005
 800cfc4:	58024400 	.word	0x58024400
 800cfc8:	58024800 	.word	0x58024800
 800cfcc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cfd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfd4:	3308      	adds	r3, #8
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f001 fdcb 	bl	800eb74 <RCCEx_PLL2_Config>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cfe4:	e00f      	b.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cfe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfea:	3328      	adds	r3, #40	@ 0x28
 800cfec:	2101      	movs	r1, #1
 800cfee:	4618      	mov	r0, r3
 800cff0:	f001 fe72 	bl	800ecd8 <RCCEx_PLL3_Config>
 800cff4:	4603      	mov	r3, r0
 800cff6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cffa:	e004      	b.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d002:	e000      	b.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800d004:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d006:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10a      	bne.n	800d024 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d00e:	4bbf      	ldr	r3, [pc, #764]	@ (800d30c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d012:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800d016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d01a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d01c:	4abb      	ldr	r2, [pc, #748]	@ (800d30c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d01e:	430b      	orrs	r3, r1
 800d020:	6553      	str	r3, [r2, #84]	@ 0x54
 800d022:	e003      	b.n	800d02c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d024:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d028:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	f002 0302 	and.w	r3, r2, #2
 800d038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d03c:	2300      	movs	r3, #0
 800d03e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d042:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d046:	460b      	mov	r3, r1
 800d048:	4313      	orrs	r3, r2
 800d04a:	d041      	beq.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d052:	2b05      	cmp	r3, #5
 800d054:	d824      	bhi.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800d056:	a201      	add	r2, pc, #4	@ (adr r2, 800d05c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800d058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d05c:	0800d0a9 	.word	0x0800d0a9
 800d060:	0800d075 	.word	0x0800d075
 800d064:	0800d08b 	.word	0x0800d08b
 800d068:	0800d0a9 	.word	0x0800d0a9
 800d06c:	0800d0a9 	.word	0x0800d0a9
 800d070:	0800d0a9 	.word	0x0800d0a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d078:	3308      	adds	r3, #8
 800d07a:	2101      	movs	r1, #1
 800d07c:	4618      	mov	r0, r3
 800d07e:	f001 fd79 	bl	800eb74 <RCCEx_PLL2_Config>
 800d082:	4603      	mov	r3, r0
 800d084:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d088:	e00f      	b.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d08e:	3328      	adds	r3, #40	@ 0x28
 800d090:	2101      	movs	r1, #1
 800d092:	4618      	mov	r0, r3
 800d094:	f001 fe20 	bl	800ecd8 <RCCEx_PLL3_Config>
 800d098:	4603      	mov	r3, r0
 800d09a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d09e:	e004      	b.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d0a6:	e000      	b.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800d0a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d10a      	bne.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d0b2:	4b96      	ldr	r3, [pc, #600]	@ (800d30c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d0b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0b6:	f023 0107 	bic.w	r1, r3, #7
 800d0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0c0:	4a92      	ldr	r2, [pc, #584]	@ (800d30c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d0c2:	430b      	orrs	r3, r1
 800d0c4:	6553      	str	r3, [r2, #84]	@ 0x54
 800d0c6:	e003      	b.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d8:	f002 0304 	and.w	r3, r2, #4
 800d0dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d0e6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	d044      	beq.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0f8:	2b05      	cmp	r3, #5
 800d0fa:	d825      	bhi.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800d0fc:	a201      	add	r2, pc, #4	@ (adr r2, 800d104 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800d0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d102:	bf00      	nop
 800d104:	0800d151 	.word	0x0800d151
 800d108:	0800d11d 	.word	0x0800d11d
 800d10c:	0800d133 	.word	0x0800d133
 800d110:	0800d151 	.word	0x0800d151
 800d114:	0800d151 	.word	0x0800d151
 800d118:	0800d151 	.word	0x0800d151
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d120:	3308      	adds	r3, #8
 800d122:	2101      	movs	r1, #1
 800d124:	4618      	mov	r0, r3
 800d126:	f001 fd25 	bl	800eb74 <RCCEx_PLL2_Config>
 800d12a:	4603      	mov	r3, r0
 800d12c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d130:	e00f      	b.n	800d152 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d136:	3328      	adds	r3, #40	@ 0x28
 800d138:	2101      	movs	r1, #1
 800d13a:	4618      	mov	r0, r3
 800d13c:	f001 fdcc 	bl	800ecd8 <RCCEx_PLL3_Config>
 800d140:	4603      	mov	r3, r0
 800d142:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d146:	e004      	b.n	800d152 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d148:	2301      	movs	r3, #1
 800d14a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d14e:	e000      	b.n	800d152 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800d150:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d152:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d156:	2b00      	cmp	r3, #0
 800d158:	d10b      	bne.n	800d172 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d15a:	4b6c      	ldr	r3, [pc, #432]	@ (800d30c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d15c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d15e:	f023 0107 	bic.w	r1, r3, #7
 800d162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d16a:	4a68      	ldr	r2, [pc, #416]	@ (800d30c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d16c:	430b      	orrs	r3, r1
 800d16e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d170:	e003      	b.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d172:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d176:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d182:	f002 0320 	and.w	r3, r2, #32
 800d186:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d18a:	2300      	movs	r3, #0
 800d18c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d190:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d194:	460b      	mov	r3, r1
 800d196:	4313      	orrs	r3, r2
 800d198:	d055      	beq.n	800d246 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d19e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d1a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d1a6:	d033      	beq.n	800d210 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800d1a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d1ac:	d82c      	bhi.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d1ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1b2:	d02f      	beq.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800d1b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1b8:	d826      	bhi.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d1ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d1be:	d02b      	beq.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800d1c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d1c4:	d820      	bhi.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d1c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1ca:	d012      	beq.n	800d1f2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800d1cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1d0:	d81a      	bhi.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d022      	beq.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800d1d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1da:	d115      	bne.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1e0:	3308      	adds	r3, #8
 800d1e2:	2100      	movs	r1, #0
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f001 fcc5 	bl	800eb74 <RCCEx_PLL2_Config>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d1f0:	e015      	b.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1f6:	3328      	adds	r3, #40	@ 0x28
 800d1f8:	2102      	movs	r1, #2
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f001 fd6c 	bl	800ecd8 <RCCEx_PLL3_Config>
 800d200:	4603      	mov	r3, r0
 800d202:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d206:	e00a      	b.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d208:	2301      	movs	r3, #1
 800d20a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d20e:	e006      	b.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d210:	bf00      	nop
 800d212:	e004      	b.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d214:	bf00      	nop
 800d216:	e002      	b.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d218:	bf00      	nop
 800d21a:	e000      	b.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d21c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d21e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d222:	2b00      	cmp	r3, #0
 800d224:	d10b      	bne.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d226:	4b39      	ldr	r3, [pc, #228]	@ (800d30c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d22a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d232:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d236:	4a35      	ldr	r2, [pc, #212]	@ (800d30c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d238:	430b      	orrs	r3, r1
 800d23a:	6553      	str	r3, [r2, #84]	@ 0x54
 800d23c:	e003      	b.n	800d246 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d23e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d242:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d252:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d256:	2300      	movs	r3, #0
 800d258:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d25c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d260:	460b      	mov	r3, r1
 800d262:	4313      	orrs	r3, r2
 800d264:	d058      	beq.n	800d318 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d26a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d26e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d272:	d033      	beq.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800d274:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d278:	d82c      	bhi.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d27a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d27e:	d02f      	beq.n	800d2e0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800d280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d284:	d826      	bhi.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d286:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d28a:	d02b      	beq.n	800d2e4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800d28c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d290:	d820      	bhi.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d292:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d296:	d012      	beq.n	800d2be <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800d298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d29c:	d81a      	bhi.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d022      	beq.n	800d2e8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800d2a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2a6:	d115      	bne.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2ac:	3308      	adds	r3, #8
 800d2ae:	2100      	movs	r1, #0
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f001 fc5f 	bl	800eb74 <RCCEx_PLL2_Config>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d2bc:	e015      	b.n	800d2ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2c2:	3328      	adds	r3, #40	@ 0x28
 800d2c4:	2102      	movs	r1, #2
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f001 fd06 	bl	800ecd8 <RCCEx_PLL3_Config>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d2d2:	e00a      	b.n	800d2ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d2da:	e006      	b.n	800d2ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d2dc:	bf00      	nop
 800d2de:	e004      	b.n	800d2ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d2e0:	bf00      	nop
 800d2e2:	e002      	b.n	800d2ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d2e4:	bf00      	nop
 800d2e6:	e000      	b.n	800d2ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d2e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d10e      	bne.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d2f2:	4b06      	ldr	r3, [pc, #24]	@ (800d30c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d2f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2f6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d302:	4a02      	ldr	r2, [pc, #8]	@ (800d30c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d304:	430b      	orrs	r3, r1
 800d306:	6593      	str	r3, [r2, #88]	@ 0x58
 800d308:	e006      	b.n	800d318 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800d30a:	bf00      	nop
 800d30c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d314:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d320:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d324:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d328:	2300      	movs	r3, #0
 800d32a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d32e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d332:	460b      	mov	r3, r1
 800d334:	4313      	orrs	r3, r2
 800d336:	d055      	beq.n	800d3e4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d33c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d340:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d344:	d033      	beq.n	800d3ae <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800d346:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d34a:	d82c      	bhi.n	800d3a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d34c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d350:	d02f      	beq.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800d352:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d356:	d826      	bhi.n	800d3a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d358:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d35c:	d02b      	beq.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800d35e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d362:	d820      	bhi.n	800d3a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d368:	d012      	beq.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800d36a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d36e:	d81a      	bhi.n	800d3a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d370:	2b00      	cmp	r3, #0
 800d372:	d022      	beq.n	800d3ba <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800d374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d378:	d115      	bne.n	800d3a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d37e:	3308      	adds	r3, #8
 800d380:	2100      	movs	r1, #0
 800d382:	4618      	mov	r0, r3
 800d384:	f001 fbf6 	bl	800eb74 <RCCEx_PLL2_Config>
 800d388:	4603      	mov	r3, r0
 800d38a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d38e:	e015      	b.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d394:	3328      	adds	r3, #40	@ 0x28
 800d396:	2102      	movs	r1, #2
 800d398:	4618      	mov	r0, r3
 800d39a:	f001 fc9d 	bl	800ecd8 <RCCEx_PLL3_Config>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d3a4:	e00a      	b.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d3ac:	e006      	b.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d3ae:	bf00      	nop
 800d3b0:	e004      	b.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d3b2:	bf00      	nop
 800d3b4:	e002      	b.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d3b6:	bf00      	nop
 800d3b8:	e000      	b.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d3ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d10b      	bne.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d3c4:	4ba0      	ldr	r3, [pc, #640]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d3c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3c8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d3d4:	4a9c      	ldr	r2, [pc, #624]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d3d6:	430b      	orrs	r3, r1
 800d3d8:	6593      	str	r3, [r2, #88]	@ 0x58
 800d3da:	e003      	b.n	800d3e4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800d3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ec:	f002 0308 	and.w	r3, r2, #8
 800d3f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d3fa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d3fe:	460b      	mov	r3, r1
 800d400:	4313      	orrs	r3, r2
 800d402:	d01e      	beq.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800d404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d40c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d410:	d10c      	bne.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d416:	3328      	adds	r3, #40	@ 0x28
 800d418:	2102      	movs	r1, #2
 800d41a:	4618      	mov	r0, r3
 800d41c:	f001 fc5c 	bl	800ecd8 <RCCEx_PLL3_Config>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d002      	beq.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800d42c:	4b86      	ldr	r3, [pc, #536]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d42e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d430:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d43c:	4a82      	ldr	r2, [pc, #520]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d43e:	430b      	orrs	r3, r1
 800d440:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44a:	f002 0310 	and.w	r3, r2, #16
 800d44e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d452:	2300      	movs	r3, #0
 800d454:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d458:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d45c:	460b      	mov	r3, r1
 800d45e:	4313      	orrs	r3, r2
 800d460:	d01e      	beq.n	800d4a0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d46a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d46e:	d10c      	bne.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d474:	3328      	adds	r3, #40	@ 0x28
 800d476:	2102      	movs	r1, #2
 800d478:	4618      	mov	r0, r3
 800d47a:	f001 fc2d 	bl	800ecd8 <RCCEx_PLL3_Config>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d002      	beq.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800d484:	2301      	movs	r3, #1
 800d486:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d48a:	4b6f      	ldr	r3, [pc, #444]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d48c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d48e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d49a:	4a6b      	ldr	r2, [pc, #428]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d49c:	430b      	orrs	r3, r1
 800d49e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d4ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d4b2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	d03e      	beq.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d4c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4c8:	d022      	beq.n	800d510 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800d4ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4ce:	d81b      	bhi.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d003      	beq.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800d4d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4d8:	d00b      	beq.n	800d4f2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800d4da:	e015      	b.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4e0:	3308      	adds	r3, #8
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f001 fb45 	bl	800eb74 <RCCEx_PLL2_Config>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d4f0:	e00f      	b.n	800d512 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4f6:	3328      	adds	r3, #40	@ 0x28
 800d4f8:	2102      	movs	r1, #2
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f001 fbec 	bl	800ecd8 <RCCEx_PLL3_Config>
 800d500:	4603      	mov	r3, r0
 800d502:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d506:	e004      	b.n	800d512 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d508:	2301      	movs	r3, #1
 800d50a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d50e:	e000      	b.n	800d512 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800d510:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d512:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10b      	bne.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d51a:	4b4b      	ldr	r3, [pc, #300]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d51c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d51e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d526:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d52a:	4a47      	ldr	r2, [pc, #284]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d52c:	430b      	orrs	r3, r1
 800d52e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d530:	e003      	b.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d532:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d536:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d542:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d546:	673b      	str	r3, [r7, #112]	@ 0x70
 800d548:	2300      	movs	r3, #0
 800d54a:	677b      	str	r3, [r7, #116]	@ 0x74
 800d54c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d550:	460b      	mov	r3, r1
 800d552:	4313      	orrs	r3, r2
 800d554:	d03b      	beq.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d55a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d55e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d562:	d01f      	beq.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d564:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d568:	d818      	bhi.n	800d59c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800d56a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d56e:	d003      	beq.n	800d578 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800d570:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d574:	d007      	beq.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800d576:	e011      	b.n	800d59c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d578:	4b33      	ldr	r3, [pc, #204]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d57c:	4a32      	ldr	r2, [pc, #200]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d57e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d584:	e00f      	b.n	800d5a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d58a:	3328      	adds	r3, #40	@ 0x28
 800d58c:	2101      	movs	r1, #1
 800d58e:	4618      	mov	r0, r3
 800d590:	f001 fba2 	bl	800ecd8 <RCCEx_PLL3_Config>
 800d594:	4603      	mov	r3, r0
 800d596:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800d59a:	e004      	b.n	800d5a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d59c:	2301      	movs	r3, #1
 800d59e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d5a2:	e000      	b.n	800d5a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800d5a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d10b      	bne.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d5ae:	4b26      	ldr	r3, [pc, #152]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d5b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5be:	4a22      	ldr	r2, [pc, #136]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d5c0:	430b      	orrs	r3, r1
 800d5c2:	6553      	str	r3, [r2, #84]	@ 0x54
 800d5c4:	e003      	b.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d5da:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d5dc:	2300      	movs	r3, #0
 800d5de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d5e0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	d034      	beq.n	800d654 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d003      	beq.n	800d5fc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800d5f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5f8:	d007      	beq.n	800d60a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800d5fa:	e011      	b.n	800d620 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5fc:	4b12      	ldr	r3, [pc, #72]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d5fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d600:	4a11      	ldr	r2, [pc, #68]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d606:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d608:	e00e      	b.n	800d628 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d60e:	3308      	adds	r3, #8
 800d610:	2102      	movs	r1, #2
 800d612:	4618      	mov	r0, r3
 800d614:	f001 faae 	bl	800eb74 <RCCEx_PLL2_Config>
 800d618:	4603      	mov	r3, r0
 800d61a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d61e:	e003      	b.n	800d628 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800d620:	2301      	movs	r3, #1
 800d622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d626:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d628:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10d      	bne.n	800d64c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d630:	4b05      	ldr	r3, [pc, #20]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d634:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d63c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d63e:	4a02      	ldr	r2, [pc, #8]	@ (800d648 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d640:	430b      	orrs	r3, r1
 800d642:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d644:	e006      	b.n	800d654 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800d646:	bf00      	nop
 800d648:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d64c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d650:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d660:	663b      	str	r3, [r7, #96]	@ 0x60
 800d662:	2300      	movs	r3, #0
 800d664:	667b      	str	r3, [r7, #100]	@ 0x64
 800d666:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d66a:	460b      	mov	r3, r1
 800d66c:	4313      	orrs	r3, r2
 800d66e:	d00c      	beq.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d674:	3328      	adds	r3, #40	@ 0x28
 800d676:	2102      	movs	r1, #2
 800d678:	4618      	mov	r0, r3
 800d67a:	f001 fb2d 	bl	800ecd8 <RCCEx_PLL3_Config>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d002      	beq.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d692:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d696:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d698:	2300      	movs	r3, #0
 800d69a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d69c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	d036      	beq.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d6ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d6b0:	d018      	beq.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800d6b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d6b6:	d811      	bhi.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d6b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6bc:	d014      	beq.n	800d6e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800d6be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6c2:	d80b      	bhi.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d011      	beq.n	800d6ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800d6c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6cc:	d106      	bne.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d6ce:	4bb7      	ldr	r3, [pc, #732]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6d2:	4ab6      	ldr	r2, [pc, #728]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d6d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d6da:	e008      	b.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d6e2:	e004      	b.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d6e4:	bf00      	nop
 800d6e6:	e002      	b.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d6e8:	bf00      	nop
 800d6ea:	e000      	b.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d6ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d10a      	bne.n	800d70c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d6f6:	4bad      	ldr	r3, [pc, #692]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d702:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d704:	4aa9      	ldr	r2, [pc, #676]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d706:	430b      	orrs	r3, r1
 800d708:	6553      	str	r3, [r2, #84]	@ 0x54
 800d70a:	e003      	b.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d70c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d710:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d720:	653b      	str	r3, [r7, #80]	@ 0x50
 800d722:	2300      	movs	r3, #0
 800d724:	657b      	str	r3, [r7, #84]	@ 0x54
 800d726:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d72a:	460b      	mov	r3, r1
 800d72c:	4313      	orrs	r3, r2
 800d72e:	d009      	beq.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d730:	4b9e      	ldr	r3, [pc, #632]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d734:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d73c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d73e:	4a9b      	ldr	r2, [pc, #620]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d740:	430b      	orrs	r3, r1
 800d742:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d750:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d752:	2300      	movs	r3, #0
 800d754:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d756:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d75a:	460b      	mov	r3, r1
 800d75c:	4313      	orrs	r3, r2
 800d75e:	d009      	beq.n	800d774 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d760:	4b92      	ldr	r3, [pc, #584]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d764:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d76c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d76e:	4a8f      	ldr	r2, [pc, #572]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d770:	430b      	orrs	r3, r1
 800d772:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d780:	643b      	str	r3, [r7, #64]	@ 0x40
 800d782:	2300      	movs	r3, #0
 800d784:	647b      	str	r3, [r7, #68]	@ 0x44
 800d786:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d78a:	460b      	mov	r3, r1
 800d78c:	4313      	orrs	r3, r2
 800d78e:	d00e      	beq.n	800d7ae <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d790:	4b86      	ldr	r3, [pc, #536]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d792:	691b      	ldr	r3, [r3, #16]
 800d794:	4a85      	ldr	r2, [pc, #532]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d796:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d79a:	6113      	str	r3, [r2, #16]
 800d79c:	4b83      	ldr	r3, [pc, #524]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d79e:	6919      	ldr	r1, [r3, #16]
 800d7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d7a8:	4a80      	ldr	r2, [pc, #512]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d7aa:	430b      	orrs	r3, r1
 800d7ac:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d7ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7bc:	2300      	movs	r3, #0
 800d7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	d009      	beq.n	800d7de <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d7ca:	4b78      	ldr	r3, [pc, #480]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d7cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7d8:	4a74      	ldr	r2, [pc, #464]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d7da:	430b      	orrs	r3, r1
 800d7dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d7ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7f0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	d00a      	beq.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d7fa:	4b6c      	ldr	r3, [pc, #432]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d7fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7fe:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d80a:	4a68      	ldr	r2, [pc, #416]	@ (800d9ac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d80c:	430b      	orrs	r3, r1
 800d80e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d818:	2100      	movs	r1, #0
 800d81a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d81c:	f003 0301 	and.w	r3, r3, #1
 800d820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d822:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d826:	460b      	mov	r3, r1
 800d828:	4313      	orrs	r3, r2
 800d82a:	d011      	beq.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d830:	3308      	adds	r3, #8
 800d832:	2100      	movs	r1, #0
 800d834:	4618      	mov	r0, r3
 800d836:	f001 f99d 	bl	800eb74 <RCCEx_PLL2_Config>
 800d83a:	4603      	mov	r3, r0
 800d83c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d840:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d844:	2b00      	cmp	r3, #0
 800d846:	d003      	beq.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d84c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	2100      	movs	r1, #0
 800d85a:	6239      	str	r1, [r7, #32]
 800d85c:	f003 0302 	and.w	r3, r3, #2
 800d860:	627b      	str	r3, [r7, #36]	@ 0x24
 800d862:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d866:	460b      	mov	r3, r1
 800d868:	4313      	orrs	r3, r2
 800d86a:	d011      	beq.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d870:	3308      	adds	r3, #8
 800d872:	2101      	movs	r1, #1
 800d874:	4618      	mov	r0, r3
 800d876:	f001 f97d 	bl	800eb74 <RCCEx_PLL2_Config>
 800d87a:	4603      	mov	r3, r0
 800d87c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d880:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d884:	2b00      	cmp	r3, #0
 800d886:	d003      	beq.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d888:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d88c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d898:	2100      	movs	r1, #0
 800d89a:	61b9      	str	r1, [r7, #24]
 800d89c:	f003 0304 	and.w	r3, r3, #4
 800d8a0:	61fb      	str	r3, [r7, #28]
 800d8a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d8a6:	460b      	mov	r3, r1
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	d011      	beq.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8b0:	3308      	adds	r3, #8
 800d8b2:	2102      	movs	r1, #2
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f001 f95d 	bl	800eb74 <RCCEx_PLL2_Config>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d8c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d003      	beq.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d8cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d8:	2100      	movs	r1, #0
 800d8da:	6139      	str	r1, [r7, #16]
 800d8dc:	f003 0308 	and.w	r3, r3, #8
 800d8e0:	617b      	str	r3, [r7, #20]
 800d8e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	d011      	beq.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8f0:	3328      	adds	r3, #40	@ 0x28
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f001 f9ef 	bl	800ecd8 <RCCEx_PLL3_Config>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d904:	2b00      	cmp	r3, #0
 800d906:	d003      	beq.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d908:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d90c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d918:	2100      	movs	r1, #0
 800d91a:	60b9      	str	r1, [r7, #8]
 800d91c:	f003 0310 	and.w	r3, r3, #16
 800d920:	60fb      	str	r3, [r7, #12]
 800d922:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d926:	460b      	mov	r3, r1
 800d928:	4313      	orrs	r3, r2
 800d92a:	d011      	beq.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d930:	3328      	adds	r3, #40	@ 0x28
 800d932:	2101      	movs	r1, #1
 800d934:	4618      	mov	r0, r3
 800d936:	f001 f9cf 	bl	800ecd8 <RCCEx_PLL3_Config>
 800d93a:	4603      	mov	r3, r0
 800d93c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d944:	2b00      	cmp	r3, #0
 800d946:	d003      	beq.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d948:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d94c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d958:	2100      	movs	r1, #0
 800d95a:	6039      	str	r1, [r7, #0]
 800d95c:	f003 0320 	and.w	r3, r3, #32
 800d960:	607b      	str	r3, [r7, #4]
 800d962:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d966:	460b      	mov	r3, r1
 800d968:	4313      	orrs	r3, r2
 800d96a:	d011      	beq.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d970:	3328      	adds	r3, #40	@ 0x28
 800d972:	2102      	movs	r1, #2
 800d974:	4618      	mov	r0, r3
 800d976:	f001 f9af 	bl	800ecd8 <RCCEx_PLL3_Config>
 800d97a:	4603      	mov	r3, r0
 800d97c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d984:	2b00      	cmp	r3, #0
 800d986:	d003      	beq.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d988:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d98c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d990:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d994:	2b00      	cmp	r3, #0
 800d996:	d101      	bne.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d998:	2300      	movs	r3, #0
 800d99a:	e000      	b.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d99c:	2301      	movs	r3, #1
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9aa:	bf00      	nop
 800d9ac:	58024400 	.word	0x58024400

0800d9b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b090      	sub	sp, #64	@ 0x40
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d9ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9be:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d9c2:	430b      	orrs	r3, r1
 800d9c4:	f040 8094 	bne.w	800daf0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d9c8:	4b9b      	ldr	r3, [pc, #620]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d9ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9cc:	f003 0307 	and.w	r3, r3, #7
 800d9d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d4:	2b04      	cmp	r3, #4
 800d9d6:	f200 8087 	bhi.w	800dae8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800d9da:	a201      	add	r2, pc, #4	@ (adr r2, 800d9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800d9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e0:	0800d9f5 	.word	0x0800d9f5
 800d9e4:	0800da1d 	.word	0x0800da1d
 800d9e8:	0800da45 	.word	0x0800da45
 800d9ec:	0800dae1 	.word	0x0800dae1
 800d9f0:	0800da6d 	.word	0x0800da6d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d9f4:	4b90      	ldr	r3, [pc, #576]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da00:	d108      	bne.n	800da14 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da06:	4618      	mov	r0, r3
 800da08:	f000 ff62 	bl	800e8d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800da0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da10:	f000 bc93 	b.w	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da14:	2300      	movs	r3, #0
 800da16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da18:	f000 bc8f 	b.w	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800da1c:	4b86      	ldr	r3, [pc, #536]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da28:	d108      	bne.n	800da3c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da2a:	f107 0318 	add.w	r3, r7, #24
 800da2e:	4618      	mov	r0, r3
 800da30:	f000 fca6 	bl	800e380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da38:	f000 bc7f 	b.w	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da3c:	2300      	movs	r3, #0
 800da3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da40:	f000 bc7b 	b.w	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800da44:	4b7c      	ldr	r3, [pc, #496]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800da4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800da50:	d108      	bne.n	800da64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da52:	f107 030c 	add.w	r3, r7, #12
 800da56:	4618      	mov	r0, r3
 800da58:	f000 fde6 	bl	800e628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da60:	f000 bc6b 	b.w	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da64:	2300      	movs	r3, #0
 800da66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da68:	f000 bc67 	b.w	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800da6c:	4b72      	ldr	r3, [pc, #456]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800da6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800da74:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800da76:	4b70      	ldr	r3, [pc, #448]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f003 0304 	and.w	r3, r3, #4
 800da7e:	2b04      	cmp	r3, #4
 800da80:	d10c      	bne.n	800da9c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800da82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da84:	2b00      	cmp	r3, #0
 800da86:	d109      	bne.n	800da9c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da88:	4b6b      	ldr	r3, [pc, #428]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	08db      	lsrs	r3, r3, #3
 800da8e:	f003 0303 	and.w	r3, r3, #3
 800da92:	4a6a      	ldr	r2, [pc, #424]	@ (800dc3c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800da94:	fa22 f303 	lsr.w	r3, r2, r3
 800da98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800da9a:	e01f      	b.n	800dadc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800da9c:	4b66      	ldr	r3, [pc, #408]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800daa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800daa8:	d106      	bne.n	800dab8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800daaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dab0:	d102      	bne.n	800dab8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dab2:	4b63      	ldr	r3, [pc, #396]	@ (800dc40 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800dab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dab6:	e011      	b.n	800dadc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dab8:	4b5f      	ldr	r3, [pc, #380]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dac0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dac4:	d106      	bne.n	800dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800dac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dacc:	d102      	bne.n	800dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dace:	4b5d      	ldr	r3, [pc, #372]	@ (800dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dad2:	e003      	b.n	800dadc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dad4:	2300      	movs	r3, #0
 800dad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800dad8:	f000 bc2f 	b.w	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dadc:	f000 bc2d 	b.w	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dae0:	4b59      	ldr	r3, [pc, #356]	@ (800dc48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800dae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dae4:	f000 bc29 	b.w	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800dae8:	2300      	movs	r3, #0
 800daea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daec:	f000 bc25 	b.w	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800daf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800daf4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800daf8:	430b      	orrs	r3, r1
 800dafa:	f040 80a7 	bne.w	800dc4c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800dafe:	4b4e      	ldr	r3, [pc, #312]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800db00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db02:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800db06:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800db08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800db0e:	d054      	beq.n	800dbba <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800db10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800db16:	f200 808b 	bhi.w	800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800db1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800db20:	f000 8083 	beq.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800db24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db26:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800db2a:	f200 8081 	bhi.w	800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800db2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db34:	d02f      	beq.n	800db96 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800db36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db3c:	d878      	bhi.n	800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800db3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db40:	2b00      	cmp	r3, #0
 800db42:	d004      	beq.n	800db4e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800db44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db4a:	d012      	beq.n	800db72 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800db4c:	e070      	b.n	800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800db4e:	4b3a      	ldr	r3, [pc, #232]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db5a:	d107      	bne.n	800db6c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db60:	4618      	mov	r0, r3
 800db62:	f000 feb5 	bl	800e8d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800db66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db6a:	e3e6      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db6c:	2300      	movs	r3, #0
 800db6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db70:	e3e3      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800db72:	4b31      	ldr	r3, [pc, #196]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800db7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800db7e:	d107      	bne.n	800db90 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db80:	f107 0318 	add.w	r3, r7, #24
 800db84:	4618      	mov	r0, r3
 800db86:	f000 fbfb 	bl	800e380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db8e:	e3d4      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db90:	2300      	movs	r3, #0
 800db92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db94:	e3d1      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800db96:	4b28      	ldr	r3, [pc, #160]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800db9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dba2:	d107      	bne.n	800dbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dba4:	f107 030c 	add.w	r3, r7, #12
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 fd3d 	bl	800e628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dbb2:	e3c2      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbb8:	e3bf      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dbba:	4b1f      	ldr	r3, [pc, #124]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dbbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800dbc2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dbc4:	4b1c      	ldr	r3, [pc, #112]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f003 0304 	and.w	r3, r3, #4
 800dbcc:	2b04      	cmp	r3, #4
 800dbce:	d10c      	bne.n	800dbea <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800dbd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d109      	bne.n	800dbea <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dbd6:	4b18      	ldr	r3, [pc, #96]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	08db      	lsrs	r3, r3, #3
 800dbdc:	f003 0303 	and.w	r3, r3, #3
 800dbe0:	4a16      	ldr	r2, [pc, #88]	@ (800dc3c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800dbe2:	fa22 f303 	lsr.w	r3, r2, r3
 800dbe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbe8:	e01e      	b.n	800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dbea:	4b13      	ldr	r3, [pc, #76]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dbf6:	d106      	bne.n	800dc06 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800dbf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dbfe:	d102      	bne.n	800dc06 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dc00:	4b0f      	ldr	r3, [pc, #60]	@ (800dc40 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800dc02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc04:	e010      	b.n	800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dc06:	4b0c      	ldr	r3, [pc, #48]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc12:	d106      	bne.n	800dc22 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800dc14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc1a:	d102      	bne.n	800dc22 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dc1c:	4b09      	ldr	r3, [pc, #36]	@ (800dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dc1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc20:	e002      	b.n	800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dc22:	2300      	movs	r3, #0
 800dc24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800dc26:	e388      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dc28:	e387      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dc2a:	4b07      	ldr	r3, [pc, #28]	@ (800dc48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800dc2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc2e:	e384      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc34:	e381      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dc36:	bf00      	nop
 800dc38:	58024400 	.word	0x58024400
 800dc3c:	03d09000 	.word	0x03d09000
 800dc40:	003d0900 	.word	0x003d0900
 800dc44:	017d7840 	.word	0x017d7840
 800dc48:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800dc4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc50:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800dc54:	430b      	orrs	r3, r1
 800dc56:	f040 809c 	bne.w	800dd92 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800dc5a:	4b9e      	ldr	r3, [pc, #632]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dc5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc5e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800dc62:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800dc64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc6a:	d054      	beq.n	800dd16 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800dc6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc72:	f200 808b 	bhi.w	800dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800dc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dc7c:	f000 8083 	beq.w	800dd86 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800dc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dc86:	f200 8081 	bhi.w	800dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc90:	d02f      	beq.n	800dcf2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800dc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc98:	d878      	bhi.n	800dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d004      	beq.n	800dcaa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800dca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dca6:	d012      	beq.n	800dcce <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800dca8:	e070      	b.n	800dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dcaa:	4b8a      	ldr	r3, [pc, #552]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dcb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dcb6:	d107      	bne.n	800dcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dcb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f000 fe07 	bl	800e8d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dcc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcc6:	e338      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dccc:	e335      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dcce:	4b81      	ldr	r3, [pc, #516]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dcd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dcda:	d107      	bne.n	800dcec <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcdc:	f107 0318 	add.w	r3, r7, #24
 800dce0:	4618      	mov	r0, r3
 800dce2:	f000 fb4d 	bl	800e380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcea:	e326      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dcec:	2300      	movs	r3, #0
 800dcee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcf0:	e323      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dcf2:	4b78      	ldr	r3, [pc, #480]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dcfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dcfe:	d107      	bne.n	800dd10 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd00:	f107 030c 	add.w	r3, r7, #12
 800dd04:	4618      	mov	r0, r3
 800dd06:	f000 fc8f 	bl	800e628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd0e:	e314      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd10:	2300      	movs	r3, #0
 800dd12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd14:	e311      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dd16:	4b6f      	ldr	r3, [pc, #444]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800dd1e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dd20:	4b6c      	ldr	r3, [pc, #432]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f003 0304 	and.w	r3, r3, #4
 800dd28:	2b04      	cmp	r3, #4
 800dd2a:	d10c      	bne.n	800dd46 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800dd2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d109      	bne.n	800dd46 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dd32:	4b68      	ldr	r3, [pc, #416]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	08db      	lsrs	r3, r3, #3
 800dd38:	f003 0303 	and.w	r3, r3, #3
 800dd3c:	4a66      	ldr	r2, [pc, #408]	@ (800ded8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800dd3e:	fa22 f303 	lsr.w	r3, r2, r3
 800dd42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd44:	e01e      	b.n	800dd84 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dd46:	4b63      	ldr	r3, [pc, #396]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd52:	d106      	bne.n	800dd62 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800dd54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd5a:	d102      	bne.n	800dd62 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dd5c:	4b5f      	ldr	r3, [pc, #380]	@ (800dedc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800dd5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd60:	e010      	b.n	800dd84 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dd62:	4b5c      	ldr	r3, [pc, #368]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dd6e:	d106      	bne.n	800dd7e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800dd70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd76:	d102      	bne.n	800dd7e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dd78:	4b59      	ldr	r3, [pc, #356]	@ (800dee0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd7c:	e002      	b.n	800dd84 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800dd82:	e2da      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dd84:	e2d9      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dd86:	4b57      	ldr	r3, [pc, #348]	@ (800dee4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800dd88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd8a:	e2d6      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd90:	e2d3      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800dd92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd96:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800dd9a:	430b      	orrs	r3, r1
 800dd9c:	f040 80a7 	bne.w	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800dda0:	4b4c      	ldr	r3, [pc, #304]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dda2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dda4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800dda8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ddaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ddb0:	d055      	beq.n	800de5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ddb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ddb8:	f200 8096 	bhi.w	800dee8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ddbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddbe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ddc2:	f000 8084 	beq.w	800dece <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ddc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ddcc:	f200 808c 	bhi.w	800dee8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ddd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddd6:	d030      	beq.n	800de3a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ddd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddde:	f200 8083 	bhi.w	800dee8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800dde2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d004      	beq.n	800ddf2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800dde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddee:	d012      	beq.n	800de16 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ddf0:	e07a      	b.n	800dee8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ddf2:	4b38      	ldr	r3, [pc, #224]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ddfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ddfe:	d107      	bne.n	800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800de00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800de04:	4618      	mov	r0, r3
 800de06:	f000 fd63 	bl	800e8d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800de0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de0e:	e294      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800de10:	2300      	movs	r3, #0
 800de12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de14:	e291      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800de16:	4b2f      	ldr	r3, [pc, #188]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de22:	d107      	bne.n	800de34 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de24:	f107 0318 	add.w	r3, r7, #24
 800de28:	4618      	mov	r0, r3
 800de2a:	f000 faa9 	bl	800e380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800de2e:	69bb      	ldr	r3, [r7, #24]
 800de30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de32:	e282      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800de34:	2300      	movs	r3, #0
 800de36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de38:	e27f      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800de3a:	4b26      	ldr	r3, [pc, #152]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800de42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de46:	d107      	bne.n	800de58 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de48:	f107 030c 	add.w	r3, r7, #12
 800de4c:	4618      	mov	r0, r3
 800de4e:	f000 fbeb 	bl	800e628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de56:	e270      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800de58:	2300      	movs	r3, #0
 800de5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de5c:	e26d      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800de5e:	4b1d      	ldr	r3, [pc, #116]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800de60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800de66:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800de68:	4b1a      	ldr	r3, [pc, #104]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f003 0304 	and.w	r3, r3, #4
 800de70:	2b04      	cmp	r3, #4
 800de72:	d10c      	bne.n	800de8e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800de74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de76:	2b00      	cmp	r3, #0
 800de78:	d109      	bne.n	800de8e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de7a:	4b16      	ldr	r3, [pc, #88]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	08db      	lsrs	r3, r3, #3
 800de80:	f003 0303 	and.w	r3, r3, #3
 800de84:	4a14      	ldr	r2, [pc, #80]	@ (800ded8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800de86:	fa22 f303 	lsr.w	r3, r2, r3
 800de8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800de8c:	e01e      	b.n	800decc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800de8e:	4b11      	ldr	r3, [pc, #68]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de9a:	d106      	bne.n	800deaa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800de9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dea2:	d102      	bne.n	800deaa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dea4:	4b0d      	ldr	r3, [pc, #52]	@ (800dedc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800dea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dea8:	e010      	b.n	800decc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800deaa:	4b0a      	ldr	r3, [pc, #40]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800deb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800deb6:	d106      	bne.n	800dec6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800deb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800debe:	d102      	bne.n	800dec6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dec0:	4b07      	ldr	r3, [pc, #28]	@ (800dee0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dec4:	e002      	b.n	800decc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dec6:	2300      	movs	r3, #0
 800dec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800deca:	e236      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800decc:	e235      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dece:	4b05      	ldr	r3, [pc, #20]	@ (800dee4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ded0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ded2:	e232      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ded4:	58024400 	.word	0x58024400
 800ded8:	03d09000 	.word	0x03d09000
 800dedc:	003d0900 	.word	0x003d0900
 800dee0:	017d7840 	.word	0x017d7840
 800dee4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800dee8:	2300      	movs	r3, #0
 800deea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800deec:	e225      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800deee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800def2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800def6:	430b      	orrs	r3, r1
 800def8:	f040 8085 	bne.w	800e006 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800defc:	4b9c      	ldr	r3, [pc, #624]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800defe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df00:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800df04:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800df06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800df0c:	d06b      	beq.n	800dfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800df0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800df14:	d874      	bhi.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800df16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800df1c:	d056      	beq.n	800dfcc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800df1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800df24:	d86c      	bhi.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800df26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800df2c:	d03b      	beq.n	800dfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800df2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800df34:	d864      	bhi.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800df36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df3c:	d021      	beq.n	800df82 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800df3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df44:	d85c      	bhi.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800df46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d004      	beq.n	800df56 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800df4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df52:	d004      	beq.n	800df5e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800df54:	e054      	b.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800df56:	f7fe fb5f 	bl	800c618 <HAL_RCC_GetPCLK1Freq>
 800df5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800df5c:	e1ed      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800df5e:	4b84      	ldr	r3, [pc, #528]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800df6a:	d107      	bne.n	800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df6c:	f107 0318 	add.w	r3, r7, #24
 800df70:	4618      	mov	r0, r3
 800df72:	f000 fa05 	bl	800e380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df7a:	e1de      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800df7c:	2300      	movs	r3, #0
 800df7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df80:	e1db      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800df82:	4b7b      	ldr	r3, [pc, #492]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800df8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df8e:	d107      	bne.n	800dfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df90:	f107 030c 	add.w	r3, r7, #12
 800df94:	4618      	mov	r0, r3
 800df96:	f000 fb47 	bl	800e628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df9e:	e1cc      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfa4:	e1c9      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dfa6:	4b72      	ldr	r3, [pc, #456]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f003 0304 	and.w	r3, r3, #4
 800dfae:	2b04      	cmp	r3, #4
 800dfb0:	d109      	bne.n	800dfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dfb2:	4b6f      	ldr	r3, [pc, #444]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	08db      	lsrs	r3, r3, #3
 800dfb8:	f003 0303 	and.w	r3, r3, #3
 800dfbc:	4a6d      	ldr	r2, [pc, #436]	@ (800e174 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800dfbe:	fa22 f303 	lsr.w	r3, r2, r3
 800dfc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dfc4:	e1b9      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfca:	e1b6      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800dfcc:	4b68      	ldr	r3, [pc, #416]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dfd8:	d102      	bne.n	800dfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800dfda:	4b67      	ldr	r3, [pc, #412]	@ (800e178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800dfdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dfde:	e1ac      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfe4:	e1a9      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dfe6:	4b62      	ldr	r3, [pc, #392]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dfee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dff2:	d102      	bne.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800dff4:	4b61      	ldr	r3, [pc, #388]	@ (800e17c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800dff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dff8:	e19f      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dffe:	e19c      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800e000:	2300      	movs	r3, #0
 800e002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e004:	e199      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e00a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800e00e:	430b      	orrs	r3, r1
 800e010:	d173      	bne.n	800e0fa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e012:	4b57      	ldr	r3, [pc, #348]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e016:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e01a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e01e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e022:	d02f      	beq.n	800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800e024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e026:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e02a:	d863      	bhi.n	800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800e02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d004      	beq.n	800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800e032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e038:	d012      	beq.n	800e060 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800e03a:	e05b      	b.n	800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e03c:	4b4c      	ldr	r3, [pc, #304]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e044:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e048:	d107      	bne.n	800e05a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e04a:	f107 0318 	add.w	r3, r7, #24
 800e04e:	4618      	mov	r0, r3
 800e050:	f000 f996 	bl	800e380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e058:	e16f      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e05a:	2300      	movs	r3, #0
 800e05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e05e:	e16c      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e060:	4b43      	ldr	r3, [pc, #268]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e06c:	d107      	bne.n	800e07e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e06e:	f107 030c 	add.w	r3, r7, #12
 800e072:	4618      	mov	r0, r3
 800e074:	f000 fad8 	bl	800e628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e07c:	e15d      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e07e:	2300      	movs	r3, #0
 800e080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e082:	e15a      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e084:	4b3a      	ldr	r3, [pc, #232]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e088:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e08c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e08e:	4b38      	ldr	r3, [pc, #224]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f003 0304 	and.w	r3, r3, #4
 800e096:	2b04      	cmp	r3, #4
 800e098:	d10c      	bne.n	800e0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800e09a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d109      	bne.n	800e0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e0a0:	4b33      	ldr	r3, [pc, #204]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	08db      	lsrs	r3, r3, #3
 800e0a6:	f003 0303 	and.w	r3, r3, #3
 800e0aa:	4a32      	ldr	r2, [pc, #200]	@ (800e174 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800e0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800e0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e0b2:	e01e      	b.n	800e0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e0b4:	4b2e      	ldr	r3, [pc, #184]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0c0:	d106      	bne.n	800e0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800e0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e0c8:	d102      	bne.n	800e0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e0ca:	4b2b      	ldr	r3, [pc, #172]	@ (800e178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800e0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e0ce:	e010      	b.n	800e0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e0d0:	4b27      	ldr	r3, [pc, #156]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e0d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e0dc:	d106      	bne.n	800e0ec <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800e0de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e0e4:	d102      	bne.n	800e0ec <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e0e6:	4b25      	ldr	r3, [pc, #148]	@ (800e17c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800e0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e0ea:	e002      	b.n	800e0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e0f0:	e123      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e0f2:	e122      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0f8:	e11f      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e0fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0fe:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800e102:	430b      	orrs	r3, r1
 800e104:	d13c      	bne.n	800e180 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e106:	4b1a      	ldr	r3, [pc, #104]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e10a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e10e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e112:	2b00      	cmp	r3, #0
 800e114:	d004      	beq.n	800e120 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800e116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e11c:	d012      	beq.n	800e144 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800e11e:	e023      	b.n	800e168 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e120:	4b13      	ldr	r3, [pc, #76]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e128:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e12c:	d107      	bne.n	800e13e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e12e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e132:	4618      	mov	r0, r3
 800e134:	f000 fbcc 	bl	800e8d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e13c:	e0fd      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e13e:	2300      	movs	r3, #0
 800e140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e142:	e0fa      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e144:	4b0a      	ldr	r3, [pc, #40]	@ (800e170 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e14c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e150:	d107      	bne.n	800e162 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e152:	f107 0318 	add.w	r3, r7, #24
 800e156:	4618      	mov	r0, r3
 800e158:	f000 f912 	bl	800e380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e15c:	6a3b      	ldr	r3, [r7, #32]
 800e15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e160:	e0eb      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e162:	2300      	movs	r3, #0
 800e164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e166:	e0e8      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e168:	2300      	movs	r3, #0
 800e16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e16c:	e0e5      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e16e:	bf00      	nop
 800e170:	58024400 	.word	0x58024400
 800e174:	03d09000 	.word	0x03d09000
 800e178:	003d0900 	.word	0x003d0900
 800e17c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e180:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e184:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800e188:	430b      	orrs	r3, r1
 800e18a:	f040 8085 	bne.w	800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e18e:	4b6d      	ldr	r3, [pc, #436]	@ (800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e192:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800e196:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e19a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e19e:	d06b      	beq.n	800e278 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800e1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e1a6:	d874      	bhi.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1ae:	d056      	beq.n	800e25e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1b6:	d86c      	bhi.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e1be:	d03b      	beq.n	800e238 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800e1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e1c6:	d864      	bhi.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e1ce:	d021      	beq.n	800e214 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800e1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e1d6:	d85c      	bhi.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d004      	beq.n	800e1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800e1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e1e4:	d004      	beq.n	800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800e1e6:	e054      	b.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e1e8:	f000 f8b4 	bl	800e354 <HAL_RCCEx_GetD3PCLK1Freq>
 800e1ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e1ee:	e0a4      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e1f0:	4b54      	ldr	r3, [pc, #336]	@ (800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e1f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e1fc:	d107      	bne.n	800e20e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1fe:	f107 0318 	add.w	r3, r7, #24
 800e202:	4618      	mov	r0, r3
 800e204:	f000 f8bc 	bl	800e380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e20c:	e095      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e20e:	2300      	movs	r3, #0
 800e210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e212:	e092      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e214:	4b4b      	ldr	r3, [pc, #300]	@ (800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e21c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e220:	d107      	bne.n	800e232 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e222:	f107 030c 	add.w	r3, r7, #12
 800e226:	4618      	mov	r0, r3
 800e228:	f000 f9fe 	bl	800e628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e230:	e083      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e232:	2300      	movs	r3, #0
 800e234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e236:	e080      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e238:	4b42      	ldr	r3, [pc, #264]	@ (800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f003 0304 	and.w	r3, r3, #4
 800e240:	2b04      	cmp	r3, #4
 800e242:	d109      	bne.n	800e258 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e244:	4b3f      	ldr	r3, [pc, #252]	@ (800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	08db      	lsrs	r3, r3, #3
 800e24a:	f003 0303 	and.w	r3, r3, #3
 800e24e:	4a3e      	ldr	r2, [pc, #248]	@ (800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800e250:	fa22 f303 	lsr.w	r3, r2, r3
 800e254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e256:	e070      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e258:	2300      	movs	r3, #0
 800e25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e25c:	e06d      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e25e:	4b39      	ldr	r3, [pc, #228]	@ (800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e26a:	d102      	bne.n	800e272 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800e26c:	4b37      	ldr	r3, [pc, #220]	@ (800e34c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e270:	e063      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e272:	2300      	movs	r3, #0
 800e274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e276:	e060      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e278:	4b32      	ldr	r3, [pc, #200]	@ (800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e280:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e284:	d102      	bne.n	800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800e286:	4b32      	ldr	r3, [pc, #200]	@ (800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800e288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e28a:	e056      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e28c:	2300      	movs	r3, #0
 800e28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e290:	e053      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e292:	2300      	movs	r3, #0
 800e294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e296:	e050      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e29c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800e2a0:	430b      	orrs	r3, r1
 800e2a2:	d148      	bne.n	800e336 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e2a4:	4b27      	ldr	r3, [pc, #156]	@ (800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e2a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e2ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e2b4:	d02a      	beq.n	800e30c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800e2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e2bc:	d838      	bhi.n	800e330 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800e2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d004      	beq.n	800e2ce <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800e2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e2ca:	d00d      	beq.n	800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800e2cc:	e030      	b.n	800e330 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e2ce:	4b1d      	ldr	r3, [pc, #116]	@ (800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e2d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e2da:	d102      	bne.n	800e2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800e2dc:	4b1c      	ldr	r3, [pc, #112]	@ (800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800e2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2e0:	e02b      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2e6:	e028      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e2e8:	4b16      	ldr	r3, [pc, #88]	@ (800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e2f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e2f4:	d107      	bne.n	800e306 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e2f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f000 fae8 	bl	800e8d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e304:	e019      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e306:	2300      	movs	r3, #0
 800e308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e30a:	e016      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e30c:	4b0d      	ldr	r3, [pc, #52]	@ (800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e314:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e318:	d107      	bne.n	800e32a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e31a:	f107 0318 	add.w	r3, r7, #24
 800e31e:	4618      	mov	r0, r3
 800e320:	f000 f82e 	bl	800e380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e328:	e007      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e32a:	2300      	movs	r3, #0
 800e32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e32e:	e004      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800e330:	2300      	movs	r3, #0
 800e332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e334:	e001      	b.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800e336:	2300      	movs	r3, #0
 800e338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800e33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3740      	adds	r7, #64	@ 0x40
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	58024400 	.word	0x58024400
 800e348:	03d09000 	.word	0x03d09000
 800e34c:	003d0900 	.word	0x003d0900
 800e350:	017d7840 	.word	0x017d7840

0800e354 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e358:	f7fe f92e 	bl	800c5b8 <HAL_RCC_GetHCLKFreq>
 800e35c:	4602      	mov	r2, r0
 800e35e:	4b06      	ldr	r3, [pc, #24]	@ (800e378 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e360:	6a1b      	ldr	r3, [r3, #32]
 800e362:	091b      	lsrs	r3, r3, #4
 800e364:	f003 0307 	and.w	r3, r3, #7
 800e368:	4904      	ldr	r1, [pc, #16]	@ (800e37c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e36a:	5ccb      	ldrb	r3, [r1, r3]
 800e36c:	f003 031f 	and.w	r3, r3, #31
 800e370:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e374:	4618      	mov	r0, r3
 800e376:	bd80      	pop	{r7, pc}
 800e378:	58024400 	.word	0x58024400
 800e37c:	0801c79c 	.word	0x0801c79c

0800e380 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e380:	b480      	push	{r7}
 800e382:	b089      	sub	sp, #36	@ 0x24
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e388:	4ba1      	ldr	r3, [pc, #644]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e38c:	f003 0303 	and.w	r3, r3, #3
 800e390:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e392:	4b9f      	ldr	r3, [pc, #636]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e396:	0b1b      	lsrs	r3, r3, #12
 800e398:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e39c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e39e:	4b9c      	ldr	r3, [pc, #624]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e3a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3a2:	091b      	lsrs	r3, r3, #4
 800e3a4:	f003 0301 	and.w	r3, r3, #1
 800e3a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e3aa:	4b99      	ldr	r3, [pc, #612]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e3ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3ae:	08db      	lsrs	r3, r3, #3
 800e3b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3b4:	693a      	ldr	r2, [r7, #16]
 800e3b6:	fb02 f303 	mul.w	r3, r2, r3
 800e3ba:	ee07 3a90 	vmov	s15, r3
 800e3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f000 8111 	beq.w	800e5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	2b02      	cmp	r3, #2
 800e3d2:	f000 8083 	beq.w	800e4dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	2b02      	cmp	r3, #2
 800e3da:	f200 80a1 	bhi.w	800e520 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d003      	beq.n	800e3ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d056      	beq.n	800e498 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e3ea:	e099      	b.n	800e520 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3ec:	4b88      	ldr	r3, [pc, #544]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f003 0320 	and.w	r3, r3, #32
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d02d      	beq.n	800e454 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e3f8:	4b85      	ldr	r3, [pc, #532]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	08db      	lsrs	r3, r3, #3
 800e3fe:	f003 0303 	and.w	r3, r3, #3
 800e402:	4a84      	ldr	r2, [pc, #528]	@ (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e404:	fa22 f303 	lsr.w	r3, r2, r3
 800e408:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	ee07 3a90 	vmov	s15, r3
 800e410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	ee07 3a90 	vmov	s15, r3
 800e41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e41e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e422:	4b7b      	ldr	r3, [pc, #492]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e42a:	ee07 3a90 	vmov	s15, r3
 800e42e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e432:	ed97 6a03 	vldr	s12, [r7, #12]
 800e436:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e43a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e43e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e44a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e44e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e452:	e087      	b.n	800e564 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	ee07 3a90 	vmov	s15, r3
 800e45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e45e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e61c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e466:	4b6a      	ldr	r3, [pc, #424]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e46a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e46e:	ee07 3a90 	vmov	s15, r3
 800e472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e476:	ed97 6a03 	vldr	s12, [r7, #12]
 800e47a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e47e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e48a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e48e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e496:	e065      	b.n	800e564 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	ee07 3a90 	vmov	s15, r3
 800e49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e620 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e4a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4aa:	4b59      	ldr	r3, [pc, #356]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e4ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4b2:	ee07 3a90 	vmov	s15, r3
 800e4b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800e4be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e4c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e4c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e4ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e4da:	e043      	b.n	800e564 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	ee07 3a90 	vmov	s15, r3
 800e4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e4ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4ee:	4b48      	ldr	r3, [pc, #288]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e4f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4f6:	ee07 3a90 	vmov	s15, r3
 800e4fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800e502:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e50a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e50e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e51a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e51e:	e021      	b.n	800e564 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	ee07 3a90 	vmov	s15, r3
 800e526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e52a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e620 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e52e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e532:	4b37      	ldr	r3, [pc, #220]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e53a:	ee07 3a90 	vmov	s15, r3
 800e53e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e542:	ed97 6a03 	vldr	s12, [r7, #12]
 800e546:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e54a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e54e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e55a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e55e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e562:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e564:	4b2a      	ldr	r3, [pc, #168]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e568:	0a5b      	lsrs	r3, r3, #9
 800e56a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e56e:	ee07 3a90 	vmov	s15, r3
 800e572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e576:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e57a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e57e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e58a:	ee17 2a90 	vmov	r2, s15
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e592:	4b1f      	ldr	r3, [pc, #124]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e596:	0c1b      	lsrs	r3, r3, #16
 800e598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e59c:	ee07 3a90 	vmov	s15, r3
 800e5a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e5a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e5ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800e5b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5b8:	ee17 2a90 	vmov	r2, s15
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e5c0:	4b13      	ldr	r3, [pc, #76]	@ (800e610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5c4:	0e1b      	lsrs	r3, r3, #24
 800e5c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5ca:	ee07 3a90 	vmov	s15, r3
 800e5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e5d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e5da:	edd7 6a07 	vldr	s13, [r7, #28]
 800e5de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5e6:	ee17 2a90 	vmov	r2, s15
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e5ee:	e008      	b.n	800e602 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2200      	movs	r2, #0
 800e600:	609a      	str	r2, [r3, #8]
}
 800e602:	bf00      	nop
 800e604:	3724      	adds	r7, #36	@ 0x24
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop
 800e610:	58024400 	.word	0x58024400
 800e614:	03d09000 	.word	0x03d09000
 800e618:	46000000 	.word	0x46000000
 800e61c:	4c742400 	.word	0x4c742400
 800e620:	4a742400 	.word	0x4a742400
 800e624:	4bbebc20 	.word	0x4bbebc20

0800e628 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e628:	b480      	push	{r7}
 800e62a:	b089      	sub	sp, #36	@ 0x24
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e630:	4ba1      	ldr	r3, [pc, #644]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e634:	f003 0303 	and.w	r3, r3, #3
 800e638:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e63a:	4b9f      	ldr	r3, [pc, #636]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e63e:	0d1b      	lsrs	r3, r3, #20
 800e640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e644:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e646:	4b9c      	ldr	r3, [pc, #624]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e64a:	0a1b      	lsrs	r3, r3, #8
 800e64c:	f003 0301 	and.w	r3, r3, #1
 800e650:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e652:	4b99      	ldr	r3, [pc, #612]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e656:	08db      	lsrs	r3, r3, #3
 800e658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e65c:	693a      	ldr	r2, [r7, #16]
 800e65e:	fb02 f303 	mul.w	r3, r2, r3
 800e662:	ee07 3a90 	vmov	s15, r3
 800e666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e66a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	2b00      	cmp	r3, #0
 800e672:	f000 8111 	beq.w	800e898 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	2b02      	cmp	r3, #2
 800e67a:	f000 8083 	beq.w	800e784 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e67e:	69bb      	ldr	r3, [r7, #24]
 800e680:	2b02      	cmp	r3, #2
 800e682:	f200 80a1 	bhi.w	800e7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d003      	beq.n	800e694 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d056      	beq.n	800e740 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e692:	e099      	b.n	800e7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e694:	4b88      	ldr	r3, [pc, #544]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f003 0320 	and.w	r3, r3, #32
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d02d      	beq.n	800e6fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e6a0:	4b85      	ldr	r3, [pc, #532]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	08db      	lsrs	r3, r3, #3
 800e6a6:	f003 0303 	and.w	r3, r3, #3
 800e6aa:	4a84      	ldr	r2, [pc, #528]	@ (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e6ac:	fa22 f303 	lsr.w	r3, r2, r3
 800e6b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	ee07 3a90 	vmov	s15, r3
 800e6b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	ee07 3a90 	vmov	s15, r3
 800e6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6ca:	4b7b      	ldr	r3, [pc, #492]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6d2:	ee07 3a90 	vmov	s15, r3
 800e6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6da:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e6fa:	e087      	b.n	800e80c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	ee07 3a90 	vmov	s15, r3
 800e702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e706:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e70e:	4b6a      	ldr	r3, [pc, #424]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e716:	ee07 3a90 	vmov	s15, r3
 800e71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e71e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e722:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e72e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e73a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e73e:	e065      	b.n	800e80c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	ee07 3a90 	vmov	s15, r3
 800e746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e74a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e752:	4b59      	ldr	r3, [pc, #356]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e75a:	ee07 3a90 	vmov	s15, r3
 800e75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e762:	ed97 6a03 	vldr	s12, [r7, #12]
 800e766:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e77e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e782:	e043      	b.n	800e80c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	ee07 3a90 	vmov	s15, r3
 800e78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e78e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e8cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e796:	4b48      	ldr	r3, [pc, #288]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e79e:	ee07 3a90 	vmov	s15, r3
 800e7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e7aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e7c6:	e021      	b.n	800e80c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	ee07 3a90 	vmov	s15, r3
 800e7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e7d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7da:	4b37      	ldr	r3, [pc, #220]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7e2:	ee07 3a90 	vmov	s15, r3
 800e7e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800e7ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e7f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e7fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e802:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e80a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e80c:	4b2a      	ldr	r3, [pc, #168]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e80e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e810:	0a5b      	lsrs	r3, r3, #9
 800e812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e816:	ee07 3a90 	vmov	s15, r3
 800e81a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e81e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e822:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e826:	edd7 6a07 	vldr	s13, [r7, #28]
 800e82a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e82e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e832:	ee17 2a90 	vmov	r2, s15
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e83a:	4b1f      	ldr	r3, [pc, #124]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e83c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e83e:	0c1b      	lsrs	r3, r3, #16
 800e840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e844:	ee07 3a90 	vmov	s15, r3
 800e848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e84c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e850:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e854:	edd7 6a07 	vldr	s13, [r7, #28]
 800e858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e85c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e860:	ee17 2a90 	vmov	r2, s15
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e868:	4b13      	ldr	r3, [pc, #76]	@ (800e8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e86a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e86c:	0e1b      	lsrs	r3, r3, #24
 800e86e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e872:	ee07 3a90 	vmov	s15, r3
 800e876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e87a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e87e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e882:	edd7 6a07 	vldr	s13, [r7, #28]
 800e886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e88a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e88e:	ee17 2a90 	vmov	r2, s15
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e896:	e008      	b.n	800e8aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	609a      	str	r2, [r3, #8]
}
 800e8aa:	bf00      	nop
 800e8ac:	3724      	adds	r7, #36	@ 0x24
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop
 800e8b8:	58024400 	.word	0x58024400
 800e8bc:	03d09000 	.word	0x03d09000
 800e8c0:	46000000 	.word	0x46000000
 800e8c4:	4c742400 	.word	0x4c742400
 800e8c8:	4a742400 	.word	0x4a742400
 800e8cc:	4bbebc20 	.word	0x4bbebc20

0800e8d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b089      	sub	sp, #36	@ 0x24
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e8d8:	4ba0      	ldr	r3, [pc, #640]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e8da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8dc:	f003 0303 	and.w	r3, r3, #3
 800e8e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e8e2:	4b9e      	ldr	r3, [pc, #632]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e8e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8e6:	091b      	lsrs	r3, r3, #4
 800e8e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e8ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e8ee:	4b9b      	ldr	r3, [pc, #620]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8f2:	f003 0301 	and.w	r3, r3, #1
 800e8f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e8f8:	4b98      	ldr	r3, [pc, #608]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e8fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8fc:	08db      	lsrs	r3, r3, #3
 800e8fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e902:	693a      	ldr	r2, [r7, #16]
 800e904:	fb02 f303 	mul.w	r3, r2, r3
 800e908:	ee07 3a90 	vmov	s15, r3
 800e90c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e910:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	2b00      	cmp	r3, #0
 800e918:	f000 8111 	beq.w	800eb3e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	2b02      	cmp	r3, #2
 800e920:	f000 8083 	beq.w	800ea2a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	2b02      	cmp	r3, #2
 800e928:	f200 80a1 	bhi.w	800ea6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d003      	beq.n	800e93a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e932:	69bb      	ldr	r3, [r7, #24]
 800e934:	2b01      	cmp	r3, #1
 800e936:	d056      	beq.n	800e9e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e938:	e099      	b.n	800ea6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e93a:	4b88      	ldr	r3, [pc, #544]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f003 0320 	and.w	r3, r3, #32
 800e942:	2b00      	cmp	r3, #0
 800e944:	d02d      	beq.n	800e9a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e946:	4b85      	ldr	r3, [pc, #532]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	08db      	lsrs	r3, r3, #3
 800e94c:	f003 0303 	and.w	r3, r3, #3
 800e950:	4a83      	ldr	r2, [pc, #524]	@ (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e952:	fa22 f303 	lsr.w	r3, r2, r3
 800e956:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	ee07 3a90 	vmov	s15, r3
 800e95e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	ee07 3a90 	vmov	s15, r3
 800e968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e96c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e970:	4b7a      	ldr	r3, [pc, #488]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e978:	ee07 3a90 	vmov	s15, r3
 800e97c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e980:	ed97 6a03 	vldr	s12, [r7, #12]
 800e984:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800eb64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e988:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e98c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e990:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e99c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e9a0:	e087      	b.n	800eab2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	ee07 3a90 	vmov	s15, r3
 800e9a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9ac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800eb68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e9b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9b4:	4b69      	ldr	r3, [pc, #420]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9bc:	ee07 3a90 	vmov	s15, r3
 800e9c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9c8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800eb64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e9cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e9d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9e4:	e065      	b.n	800eab2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	ee07 3a90 	vmov	s15, r3
 800e9ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9f0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800eb6c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e9f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9f8:	4b58      	ldr	r3, [pc, #352]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea00:	ee07 3a90 	vmov	s15, r3
 800ea04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea08:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea0c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800eb64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ea10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea28:	e043      	b.n	800eab2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	ee07 3a90 	vmov	s15, r3
 800ea30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea34:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800eb70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ea38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea3c:	4b47      	ldr	r3, [pc, #284]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea44:	ee07 3a90 	vmov	s15, r3
 800ea48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea50:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800eb64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ea54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea6c:	e021      	b.n	800eab2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	ee07 3a90 	vmov	s15, r3
 800ea74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea78:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800eb68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ea7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea80:	4b36      	ldr	r3, [pc, #216]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea88:	ee07 3a90 	vmov	s15, r3
 800ea8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea90:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea94:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800eb64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ea98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eaa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eaa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eaa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eab0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800eab2:	4b2a      	ldr	r3, [pc, #168]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eab6:	0a5b      	lsrs	r3, r3, #9
 800eab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eabc:	ee07 3a90 	vmov	s15, r3
 800eac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eac4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eacc:	edd7 6a07 	vldr	s13, [r7, #28]
 800ead0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ead4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ead8:	ee17 2a90 	vmov	r2, s15
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800eae0:	4b1e      	ldr	r3, [pc, #120]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eae4:	0c1b      	lsrs	r3, r3, #16
 800eae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eaea:	ee07 3a90 	vmov	s15, r3
 800eaee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eaf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eafa:	edd7 6a07 	vldr	s13, [r7, #28]
 800eafe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb06:	ee17 2a90 	vmov	r2, s15
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800eb0e:	4b13      	ldr	r3, [pc, #76]	@ (800eb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb12:	0e1b      	lsrs	r3, r3, #24
 800eb14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb18:	ee07 3a90 	vmov	s15, r3
 800eb1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eb24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb28:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb34:	ee17 2a90 	vmov	r2, s15
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800eb3c:	e008      	b.n	800eb50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	609a      	str	r2, [r3, #8]
}
 800eb50:	bf00      	nop
 800eb52:	3724      	adds	r7, #36	@ 0x24
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr
 800eb5c:	58024400 	.word	0x58024400
 800eb60:	03d09000 	.word	0x03d09000
 800eb64:	46000000 	.word	0x46000000
 800eb68:	4c742400 	.word	0x4c742400
 800eb6c:	4a742400 	.word	0x4a742400
 800eb70:	4bbebc20 	.word	0x4bbebc20

0800eb74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eb82:	4b53      	ldr	r3, [pc, #332]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800eb84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb86:	f003 0303 	and.w	r3, r3, #3
 800eb8a:	2b03      	cmp	r3, #3
 800eb8c:	d101      	bne.n	800eb92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	e099      	b.n	800ecc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800eb92:	4b4f      	ldr	r3, [pc, #316]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4a4e      	ldr	r2, [pc, #312]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800eb98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eb9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eb9e:	f7f6 f991 	bl	8004ec4 <HAL_GetTick>
 800eba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800eba4:	e008      	b.n	800ebb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800eba6:	f7f6 f98d 	bl	8004ec4 <HAL_GetTick>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	2b02      	cmp	r3, #2
 800ebb2:	d901      	bls.n	800ebb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ebb4:	2303      	movs	r3, #3
 800ebb6:	e086      	b.n	800ecc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ebb8:	4b45      	ldr	r3, [pc, #276]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d1f0      	bne.n	800eba6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ebc4:	4b42      	ldr	r3, [pc, #264]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ebc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebc8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	031b      	lsls	r3, r3, #12
 800ebd2:	493f      	ldr	r1, [pc, #252]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	628b      	str	r3, [r1, #40]	@ 0x28
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	3b01      	subs	r3, #1
 800ebde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	689b      	ldr	r3, [r3, #8]
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	025b      	lsls	r3, r3, #9
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	431a      	orrs	r2, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	68db      	ldr	r3, [r3, #12]
 800ebf2:	3b01      	subs	r3, #1
 800ebf4:	041b      	lsls	r3, r3, #16
 800ebf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ebfa:	431a      	orrs	r2, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	3b01      	subs	r3, #1
 800ec02:	061b      	lsls	r3, r3, #24
 800ec04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ec08:	4931      	ldr	r1, [pc, #196]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ec0e:	4b30      	ldr	r3, [pc, #192]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	695b      	ldr	r3, [r3, #20]
 800ec1a:	492d      	ldr	r1, [pc, #180]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ec20:	4b2b      	ldr	r3, [pc, #172]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec24:	f023 0220 	bic.w	r2, r3, #32
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	699b      	ldr	r3, [r3, #24]
 800ec2c:	4928      	ldr	r1, [pc, #160]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ec32:	4b27      	ldr	r3, [pc, #156]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec36:	4a26      	ldr	r2, [pc, #152]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec38:	f023 0310 	bic.w	r3, r3, #16
 800ec3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ec3e:	4b24      	ldr	r3, [pc, #144]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ec42:	4b24      	ldr	r3, [pc, #144]	@ (800ecd4 <RCCEx_PLL2_Config+0x160>)
 800ec44:	4013      	ands	r3, r2
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	69d2      	ldr	r2, [r2, #28]
 800ec4a:	00d2      	lsls	r2, r2, #3
 800ec4c:	4920      	ldr	r1, [pc, #128]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ec52:	4b1f      	ldr	r3, [pc, #124]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec56:	4a1e      	ldr	r2, [pc, #120]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec58:	f043 0310 	orr.w	r3, r3, #16
 800ec5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d106      	bne.n	800ec72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ec64:	4b1a      	ldr	r3, [pc, #104]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec68:	4a19      	ldr	r2, [pc, #100]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ec6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ec70:	e00f      	b.n	800ec92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d106      	bne.n	800ec86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ec78:	4b15      	ldr	r3, [pc, #84]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec7c:	4a14      	ldr	r2, [pc, #80]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ec84:	e005      	b.n	800ec92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ec86:	4b12      	ldr	r3, [pc, #72]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec8a:	4a11      	ldr	r2, [pc, #68]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ec90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ec92:	4b0f      	ldr	r3, [pc, #60]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4a0e      	ldr	r2, [pc, #56]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ec98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ec9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec9e:	f7f6 f911 	bl	8004ec4 <HAL_GetTick>
 800eca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800eca4:	e008      	b.n	800ecb8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800eca6:	f7f6 f90d 	bl	8004ec4 <HAL_GetTick>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	2b02      	cmp	r3, #2
 800ecb2:	d901      	bls.n	800ecb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ecb4:	2303      	movs	r3, #3
 800ecb6:	e006      	b.n	800ecc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ecb8:	4b05      	ldr	r3, [pc, #20]	@ (800ecd0 <RCCEx_PLL2_Config+0x15c>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d0f0      	beq.n	800eca6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ecc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	58024400 	.word	0x58024400
 800ecd4:	ffff0007 	.word	0xffff0007

0800ecd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ece2:	2300      	movs	r3, #0
 800ece4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ece6:	4b53      	ldr	r3, [pc, #332]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ece8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecea:	f003 0303 	and.w	r3, r3, #3
 800ecee:	2b03      	cmp	r3, #3
 800ecf0:	d101      	bne.n	800ecf6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e099      	b.n	800ee2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ecf6:	4b4f      	ldr	r3, [pc, #316]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4a4e      	ldr	r2, [pc, #312]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ecfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ed00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed02:	f7f6 f8df 	bl	8004ec4 <HAL_GetTick>
 800ed06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ed08:	e008      	b.n	800ed1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ed0a:	f7f6 f8db 	bl	8004ec4 <HAL_GetTick>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	1ad3      	subs	r3, r2, r3
 800ed14:	2b02      	cmp	r3, #2
 800ed16:	d901      	bls.n	800ed1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ed18:	2303      	movs	r3, #3
 800ed1a:	e086      	b.n	800ee2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ed1c:	4b45      	ldr	r3, [pc, #276]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d1f0      	bne.n	800ed0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ed28:	4b42      	ldr	r3, [pc, #264]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ed2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed2c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	051b      	lsls	r3, r3, #20
 800ed36:	493f      	ldr	r1, [pc, #252]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	628b      	str	r3, [r1, #40]	@ 0x28
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	3b01      	subs	r3, #1
 800ed42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	689b      	ldr	r3, [r3, #8]
 800ed4a:	3b01      	subs	r3, #1
 800ed4c:	025b      	lsls	r3, r3, #9
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	431a      	orrs	r2, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	3b01      	subs	r3, #1
 800ed58:	041b      	lsls	r3, r3, #16
 800ed5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ed5e:	431a      	orrs	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	691b      	ldr	r3, [r3, #16]
 800ed64:	3b01      	subs	r3, #1
 800ed66:	061b      	lsls	r3, r3, #24
 800ed68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ed6c:	4931      	ldr	r1, [pc, #196]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ed6e:	4313      	orrs	r3, r2
 800ed70:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ed72:	4b30      	ldr	r3, [pc, #192]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ed74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	492d      	ldr	r1, [pc, #180]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ed80:	4313      	orrs	r3, r2
 800ed82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ed84:	4b2b      	ldr	r3, [pc, #172]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ed86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed88:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	699b      	ldr	r3, [r3, #24]
 800ed90:	4928      	ldr	r1, [pc, #160]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ed92:	4313      	orrs	r3, r2
 800ed94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ed96:	4b27      	ldr	r3, [pc, #156]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ed98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed9a:	4a26      	ldr	r2, [pc, #152]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ed9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eda0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800eda2:	4b24      	ldr	r3, [pc, #144]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800eda4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eda6:	4b24      	ldr	r3, [pc, #144]	@ (800ee38 <RCCEx_PLL3_Config+0x160>)
 800eda8:	4013      	ands	r3, r2
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	69d2      	ldr	r2, [r2, #28]
 800edae:	00d2      	lsls	r2, r2, #3
 800edb0:	4920      	ldr	r1, [pc, #128]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800edb2:	4313      	orrs	r3, r2
 800edb4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800edb6:	4b1f      	ldr	r3, [pc, #124]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800edb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edba:	4a1e      	ldr	r2, [pc, #120]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800edbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800edc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d106      	bne.n	800edd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800edc8:	4b1a      	ldr	r3, [pc, #104]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800edca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edcc:	4a19      	ldr	r2, [pc, #100]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800edce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800edd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800edd4:	e00f      	b.n	800edf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d106      	bne.n	800edea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800eddc:	4b15      	ldr	r3, [pc, #84]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800edde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ede0:	4a14      	ldr	r2, [pc, #80]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ede2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ede6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ede8:	e005      	b.n	800edf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800edea:	4b12      	ldr	r3, [pc, #72]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800edec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edee:	4a11      	ldr	r2, [pc, #68]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800edf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800edf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800edf6:	4b0f      	ldr	r3, [pc, #60]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a0e      	ldr	r2, [pc, #56]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800edfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ee00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ee02:	f7f6 f85f 	bl	8004ec4 <HAL_GetTick>
 800ee06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ee08:	e008      	b.n	800ee1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ee0a:	f7f6 f85b 	bl	8004ec4 <HAL_GetTick>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	1ad3      	subs	r3, r2, r3
 800ee14:	2b02      	cmp	r3, #2
 800ee16:	d901      	bls.n	800ee1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ee18:	2303      	movs	r3, #3
 800ee1a:	e006      	b.n	800ee2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ee1c:	4b05      	ldr	r3, [pc, #20]	@ (800ee34 <RCCEx_PLL3_Config+0x15c>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d0f0      	beq.n	800ee0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ee28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3710      	adds	r7, #16
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	58024400 	.word	0x58024400
 800ee38:	ffff0007 	.word	0xffff0007

0800ee3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d101      	bne.n	800ee4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	e10f      	b.n	800f06e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2200      	movs	r2, #0
 800ee52:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4a87      	ldr	r2, [pc, #540]	@ (800f078 <HAL_SPI_Init+0x23c>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d00f      	beq.n	800ee7e <HAL_SPI_Init+0x42>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4a86      	ldr	r2, [pc, #536]	@ (800f07c <HAL_SPI_Init+0x240>)
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d00a      	beq.n	800ee7e <HAL_SPI_Init+0x42>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4a84      	ldr	r2, [pc, #528]	@ (800f080 <HAL_SPI_Init+0x244>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d005      	beq.n	800ee7e <HAL_SPI_Init+0x42>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	2b0f      	cmp	r3, #15
 800ee78:	d901      	bls.n	800ee7e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	e0f7      	b.n	800f06e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 fbbc 	bl	800f5fc <SPI_GetPacketSize>
 800ee84:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a7b      	ldr	r2, [pc, #492]	@ (800f078 <HAL_SPI_Init+0x23c>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d00c      	beq.n	800eeaa <HAL_SPI_Init+0x6e>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a79      	ldr	r2, [pc, #484]	@ (800f07c <HAL_SPI_Init+0x240>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d007      	beq.n	800eeaa <HAL_SPI_Init+0x6e>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a78      	ldr	r2, [pc, #480]	@ (800f080 <HAL_SPI_Init+0x244>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d002      	beq.n	800eeaa <HAL_SPI_Init+0x6e>
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2b08      	cmp	r3, #8
 800eea8:	d811      	bhi.n	800eece <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eeae:	4a72      	ldr	r2, [pc, #456]	@ (800f078 <HAL_SPI_Init+0x23c>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d009      	beq.n	800eec8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a70      	ldr	r2, [pc, #448]	@ (800f07c <HAL_SPI_Init+0x240>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d004      	beq.n	800eec8 <HAL_SPI_Init+0x8c>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4a6f      	ldr	r2, [pc, #444]	@ (800f080 <HAL_SPI_Init+0x244>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d104      	bne.n	800eed2 <HAL_SPI_Init+0x96>
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2b10      	cmp	r3, #16
 800eecc:	d901      	bls.n	800eed2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800eece:	2301      	movs	r3, #1
 800eed0:	e0cd      	b.n	800f06e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d106      	bne.n	800eeec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2200      	movs	r2, #0
 800eee2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f7f4 f910 	bl	800310c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2202      	movs	r2, #2
 800eef0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f022 0201 	bic.w	r2, r2, #1
 800ef02:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	689b      	ldr	r3, [r3, #8]
 800ef0a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ef0e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	699b      	ldr	r3, [r3, #24]
 800ef14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ef18:	d119      	bne.n	800ef4e <HAL_SPI_Init+0x112>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ef22:	d103      	bne.n	800ef2c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d008      	beq.n	800ef3e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d10c      	bne.n	800ef4e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef3c:	d107      	bne.n	800ef4e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ef4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d00f      	beq.n	800ef7a <HAL_SPI_Init+0x13e>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	2b06      	cmp	r3, #6
 800ef60:	d90b      	bls.n	800ef7a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	430a      	orrs	r2, r1
 800ef76:	601a      	str	r2, [r3, #0]
 800ef78:	e007      	b.n	800ef8a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ef88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	69da      	ldr	r2, [r3, #28]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef92:	431a      	orrs	r2, r3
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	431a      	orrs	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef9c:	ea42 0103 	orr.w	r1, r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	68da      	ldr	r2, [r3, #12]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	430a      	orrs	r2, r1
 800efaa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efb4:	431a      	orrs	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efba:	431a      	orrs	r2, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	699b      	ldr	r3, [r3, #24]
 800efc0:	431a      	orrs	r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	691b      	ldr	r3, [r3, #16]
 800efc6:	431a      	orrs	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	695b      	ldr	r3, [r3, #20]
 800efcc:	431a      	orrs	r2, r3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	431a      	orrs	r2, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	431a      	orrs	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efde:	431a      	orrs	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	689b      	ldr	r3, [r3, #8]
 800efe4:	431a      	orrs	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800efea:	ea42 0103 	orr.w	r1, r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	430a      	orrs	r2, r1
 800eff8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d113      	bne.n	800f02a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f014:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f028:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f022 0201 	bic.w	r2, r2, #1
 800f038:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00a      	beq.n	800f05c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	430a      	orrs	r2, r1
 800f05a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2200      	movs	r2, #0
 800f060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2201      	movs	r2, #1
 800f068:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800f06c:	2300      	movs	r3, #0
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3710      	adds	r7, #16
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	40013000 	.word	0x40013000
 800f07c:	40003800 	.word	0x40003800
 800f080:	40003c00 	.word	0x40003c00

0800f084 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b088      	sub	sp, #32
 800f088:	af02      	add	r7, sp, #8
 800f08a:	60f8      	str	r0, [r7, #12]
 800f08c:	60b9      	str	r1, [r7, #8]
 800f08e:	603b      	str	r3, [r7, #0]
 800f090:	4613      	mov	r3, r2
 800f092:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	3320      	adds	r3, #32
 800f09a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f09c:	f7f5 ff12 	bl	8004ec4 <HAL_GetTick>
 800f0a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d001      	beq.n	800f0b2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800f0ae:	2302      	movs	r3, #2
 800f0b0:	e1d1      	b.n	800f456 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d002      	beq.n	800f0be <HAL_SPI_Transmit+0x3a>
 800f0b8:	88fb      	ldrh	r3, [r7, #6]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d101      	bne.n	800f0c2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	e1c9      	b.n	800f456 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d101      	bne.n	800f0d0 <HAL_SPI_Transmit+0x4c>
 800f0cc:	2302      	movs	r3, #2
 800f0ce:	e1c2      	b.n	800f456 <HAL_SPI_Transmit+0x3d2>
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2203      	movs	r2, #3
 800f0dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	68ba      	ldr	r2, [r7, #8]
 800f0ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	88fa      	ldrh	r2, [r7, #6]
 800f0f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	88fa      	ldrh	r2, [r7, #6]
 800f0fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2200      	movs	r2, #0
 800f102:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2200      	movs	r2, #0
 800f108:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2200      	movs	r2, #0
 800f110:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2200      	movs	r2, #0
 800f11e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f128:	d108      	bne.n	800f13c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f138:	601a      	str	r2, [r3, #0]
 800f13a:	e009      	b.n	800f150 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	68db      	ldr	r3, [r3, #12]
 800f142:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f14e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	685a      	ldr	r2, [r3, #4]
 800f156:	4b96      	ldr	r3, [pc, #600]	@ (800f3b0 <HAL_SPI_Transmit+0x32c>)
 800f158:	4013      	ands	r3, r2
 800f15a:	88f9      	ldrh	r1, [r7, #6]
 800f15c:	68fa      	ldr	r2, [r7, #12]
 800f15e:	6812      	ldr	r2, [r2, #0]
 800f160:	430b      	orrs	r3, r1
 800f162:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f042 0201 	orr.w	r2, r2, #1
 800f172:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f17c:	d107      	bne.n	800f18e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f18c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	2b0f      	cmp	r3, #15
 800f194:	d947      	bls.n	800f226 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f196:	e03f      	b.n	800f218 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	695b      	ldr	r3, [r3, #20]
 800f19e:	f003 0302 	and.w	r3, r3, #2
 800f1a2:	2b02      	cmp	r3, #2
 800f1a4:	d114      	bne.n	800f1d0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	6812      	ldr	r2, [r2, #0]
 800f1b0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f1b6:	1d1a      	adds	r2, r3, #4
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	3b01      	subs	r3, #1
 800f1c6:	b29a      	uxth	r2, r3
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f1ce:	e023      	b.n	800f218 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1d0:	f7f5 fe78 	bl	8004ec4 <HAL_GetTick>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	1ad3      	subs	r3, r2, r3
 800f1da:	683a      	ldr	r2, [r7, #0]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d803      	bhi.n	800f1e8 <HAL_SPI_Transmit+0x164>
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1e6:	d102      	bne.n	800f1ee <HAL_SPI_Transmit+0x16a>
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d114      	bne.n	800f218 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1ee:	68f8      	ldr	r0, [r7, #12]
 800f1f0:	f000 f936 	bl	800f460 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f1fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2201      	movs	r2, #1
 800f208:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2200      	movs	r2, #0
 800f210:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f214:	2303      	movs	r3, #3
 800f216:	e11e      	b.n	800f456 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f21e:	b29b      	uxth	r3, r3
 800f220:	2b00      	cmp	r3, #0
 800f222:	d1b9      	bne.n	800f198 <HAL_SPI_Transmit+0x114>
 800f224:	e0f1      	b.n	800f40a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	2b07      	cmp	r3, #7
 800f22c:	f240 80e6 	bls.w	800f3fc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f230:	e05d      	b.n	800f2ee <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	695b      	ldr	r3, [r3, #20]
 800f238:	f003 0302 	and.w	r3, r3, #2
 800f23c:	2b02      	cmp	r3, #2
 800f23e:	d132      	bne.n	800f2a6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f246:	b29b      	uxth	r3, r3
 800f248:	2b01      	cmp	r3, #1
 800f24a:	d918      	bls.n	800f27e <HAL_SPI_Transmit+0x1fa>
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f250:	2b00      	cmp	r3, #0
 800f252:	d014      	beq.n	800f27e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	6812      	ldr	r2, [r2, #0]
 800f25e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f264:	1d1a      	adds	r2, r3, #4
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f270:	b29b      	uxth	r3, r3
 800f272:	3b02      	subs	r3, #2
 800f274:	b29a      	uxth	r2, r3
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f27c:	e037      	b.n	800f2ee <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f282:	881a      	ldrh	r2, [r3, #0]
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f28c:	1c9a      	adds	r2, r3, #2
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f298:	b29b      	uxth	r3, r3
 800f29a:	3b01      	subs	r3, #1
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f2a4:	e023      	b.n	800f2ee <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2a6:	f7f5 fe0d 	bl	8004ec4 <HAL_GetTick>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	1ad3      	subs	r3, r2, r3
 800f2b0:	683a      	ldr	r2, [r7, #0]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d803      	bhi.n	800f2be <HAL_SPI_Transmit+0x23a>
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2bc:	d102      	bne.n	800f2c4 <HAL_SPI_Transmit+0x240>
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d114      	bne.n	800f2ee <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2c4:	68f8      	ldr	r0, [r7, #12]
 800f2c6:	f000 f8cb 	bl	800f460 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2201      	movs	r2, #1
 800f2de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f2ea:	2303      	movs	r3, #3
 800f2ec:	e0b3      	b.n	800f456 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d19b      	bne.n	800f232 <HAL_SPI_Transmit+0x1ae>
 800f2fa:	e086      	b.n	800f40a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	695b      	ldr	r3, [r3, #20]
 800f302:	f003 0302 	and.w	r3, r3, #2
 800f306:	2b02      	cmp	r3, #2
 800f308:	d154      	bne.n	800f3b4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f310:	b29b      	uxth	r3, r3
 800f312:	2b03      	cmp	r3, #3
 800f314:	d918      	bls.n	800f348 <HAL_SPI_Transmit+0x2c4>
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f31a:	2b40      	cmp	r3, #64	@ 0x40
 800f31c:	d914      	bls.n	800f348 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	6812      	ldr	r2, [r2, #0]
 800f328:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f32e:	1d1a      	adds	r2, r3, #4
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	3b04      	subs	r3, #4
 800f33e:	b29a      	uxth	r2, r3
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f346:	e059      	b.n	800f3fc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f34e:	b29b      	uxth	r3, r3
 800f350:	2b01      	cmp	r3, #1
 800f352:	d917      	bls.n	800f384 <HAL_SPI_Transmit+0x300>
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d013      	beq.n	800f384 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f360:	881a      	ldrh	r2, [r3, #0]
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f36a:	1c9a      	adds	r2, r3, #2
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f376:	b29b      	uxth	r3, r3
 800f378:	3b02      	subs	r3, #2
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f382:	e03b      	b.n	800f3fc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	3320      	adds	r3, #32
 800f38e:	7812      	ldrb	r2, [r2, #0]
 800f390:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f396:	1c5a      	adds	r2, r3, #1
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	b29a      	uxth	r2, r3
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f3ae:	e025      	b.n	800f3fc <HAL_SPI_Transmit+0x378>
 800f3b0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3b4:	f7f5 fd86 	bl	8004ec4 <HAL_GetTick>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	1ad3      	subs	r3, r2, r3
 800f3be:	683a      	ldr	r2, [r7, #0]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d803      	bhi.n	800f3cc <HAL_SPI_Transmit+0x348>
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ca:	d102      	bne.n	800f3d2 <HAL_SPI_Transmit+0x34e>
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d114      	bne.n	800f3fc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f000 f844 	bl	800f460 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f3de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f3f8:	2303      	movs	r3, #3
 800f3fa:	e02c      	b.n	800f456 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f402:	b29b      	uxth	r3, r3
 800f404:	2b00      	cmp	r3, #0
 800f406:	f47f af79 	bne.w	800f2fc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	2200      	movs	r2, #0
 800f412:	2108      	movs	r1, #8
 800f414:	68f8      	ldr	r0, [r7, #12]
 800f416:	f000 f8c3 	bl	800f5a0 <SPI_WaitOnFlagUntilTimeout>
 800f41a:	4603      	mov	r3, r0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d007      	beq.n	800f430 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f426:	f043 0220 	orr.w	r2, r3, #32
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f430:	68f8      	ldr	r0, [r7, #12]
 800f432:	f000 f815 	bl	800f460 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2201      	movs	r2, #1
 800f43a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2200      	movs	r2, #0
 800f442:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d001      	beq.n	800f454 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800f450:	2301      	movs	r3, #1
 800f452:	e000      	b.n	800f456 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800f454:	2300      	movs	r3, #0
  }
}
 800f456:	4618      	mov	r0, r3
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop

0800f460 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f460:	b480      	push	{r7}
 800f462:	b085      	sub	sp, #20
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	695b      	ldr	r3, [r3, #20]
 800f46e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	699a      	ldr	r2, [r3, #24]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f042 0208 	orr.w	r2, r2, #8
 800f47e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	699a      	ldr	r2, [r3, #24]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	f042 0210 	orr.w	r2, r2, #16
 800f48e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	681a      	ldr	r2, [r3, #0]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f022 0201 	bic.w	r2, r2, #1
 800f49e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	6919      	ldr	r1, [r3, #16]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681a      	ldr	r2, [r3, #0]
 800f4aa:	4b3c      	ldr	r3, [pc, #240]	@ (800f59c <SPI_CloseTransfer+0x13c>)
 800f4ac:	400b      	ands	r3, r1
 800f4ae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	689a      	ldr	r2, [r3, #8]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800f4be:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f4c6:	b2db      	uxtb	r3, r3
 800f4c8:	2b04      	cmp	r3, #4
 800f4ca:	d014      	beq.n	800f4f6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	f003 0320 	and.w	r3, r3, #32
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d00f      	beq.n	800f4f6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	699a      	ldr	r2, [r3, #24]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f042 0220 	orr.w	r2, r2, #32
 800f4f4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	2b03      	cmp	r3, #3
 800f500:	d014      	beq.n	800f52c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d00f      	beq.n	800f52c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f512:	f043 0204 	orr.w	r2, r3, #4
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	699a      	ldr	r2, [r3, #24]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f52a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f532:	2b00      	cmp	r3, #0
 800f534:	d00f      	beq.n	800f556 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f53c:	f043 0201 	orr.w	r2, r3, #1
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	699a      	ldr	r2, [r3, #24]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f554:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00f      	beq.n	800f580 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f566:	f043 0208 	orr.w	r2, r3, #8
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	699a      	ldr	r2, [r3, #24]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f57e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800f590:	bf00      	nop
 800f592:	3714      	adds	r7, #20
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr
 800f59c:	fffffc90 	.word	0xfffffc90

0800f5a0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	603b      	str	r3, [r7, #0]
 800f5ac:	4613      	mov	r3, r2
 800f5ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f5b0:	e010      	b.n	800f5d4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5b2:	f7f5 fc87 	bl	8004ec4 <HAL_GetTick>
 800f5b6:	4602      	mov	r2, r0
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	1ad3      	subs	r3, r2, r3
 800f5bc:	683a      	ldr	r2, [r7, #0]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d803      	bhi.n	800f5ca <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c8:	d102      	bne.n	800f5d0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d101      	bne.n	800f5d4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f5d0:	2303      	movs	r3, #3
 800f5d2:	e00f      	b.n	800f5f4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	695a      	ldr	r2, [r3, #20]
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	4013      	ands	r3, r2
 800f5de:	68ba      	ldr	r2, [r7, #8]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	bf0c      	ite	eq
 800f5e4:	2301      	moveq	r3, #1
 800f5e6:	2300      	movne	r3, #0
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	79fb      	ldrb	r3, [r7, #7]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d0df      	beq.n	800f5b2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f5f2:	2300      	movs	r3, #0
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3710      	adds	r7, #16
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b085      	sub	sp, #20
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f608:	095b      	lsrs	r3, r3, #5
 800f60a:	3301      	adds	r3, #1
 800f60c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	3301      	adds	r3, #1
 800f614:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	3307      	adds	r3, #7
 800f61a:	08db      	lsrs	r3, r3, #3
 800f61c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	fb02 f303 	mul.w	r3, r2, r3
}
 800f626:	4618      	mov	r0, r3
 800f628:	3714      	adds	r7, #20
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr

0800f632 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b082      	sub	sp, #8
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d101      	bne.n	800f644 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f640:	2301      	movs	r3, #1
 800f642:	e049      	b.n	800f6d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d106      	bne.n	800f65e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2200      	movs	r2, #0
 800f654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f7f3 fe0d 	bl	8003278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2202      	movs	r2, #2
 800f662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681a      	ldr	r2, [r3, #0]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	3304      	adds	r3, #4
 800f66e:	4619      	mov	r1, r3
 800f670:	4610      	mov	r0, r2
 800f672:	f000 fe2b 	bl	80102cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2201      	movs	r2, #1
 800f67a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2201      	movs	r2, #1
 800f682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2201      	movs	r2, #1
 800f68a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2201      	movs	r2, #1
 800f692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2201      	movs	r2, #1
 800f69a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2201      	movs	r2, #1
 800f6aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2201      	movs	r2, #1
 800f6b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2201      	movs	r2, #1
 800f6d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f6d6:	2300      	movs	r3, #0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3708      	adds	r7, #8
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d001      	beq.n	800f6f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	e056      	b.n	800f7a6 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2202      	movs	r2, #2
 800f6fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4a2b      	ldr	r2, [pc, #172]	@ (800f7b4 <HAL_TIM_Base_Start+0xd4>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d02c      	beq.n	800f764 <HAL_TIM_Base_Start+0x84>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f712:	d027      	beq.n	800f764 <HAL_TIM_Base_Start+0x84>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4a27      	ldr	r2, [pc, #156]	@ (800f7b8 <HAL_TIM_Base_Start+0xd8>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d022      	beq.n	800f764 <HAL_TIM_Base_Start+0x84>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a26      	ldr	r2, [pc, #152]	@ (800f7bc <HAL_TIM_Base_Start+0xdc>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d01d      	beq.n	800f764 <HAL_TIM_Base_Start+0x84>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4a24      	ldr	r2, [pc, #144]	@ (800f7c0 <HAL_TIM_Base_Start+0xe0>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d018      	beq.n	800f764 <HAL_TIM_Base_Start+0x84>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	4a23      	ldr	r2, [pc, #140]	@ (800f7c4 <HAL_TIM_Base_Start+0xe4>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d013      	beq.n	800f764 <HAL_TIM_Base_Start+0x84>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	4a21      	ldr	r2, [pc, #132]	@ (800f7c8 <HAL_TIM_Base_Start+0xe8>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d00e      	beq.n	800f764 <HAL_TIM_Base_Start+0x84>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4a20      	ldr	r2, [pc, #128]	@ (800f7cc <HAL_TIM_Base_Start+0xec>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d009      	beq.n	800f764 <HAL_TIM_Base_Start+0x84>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a1e      	ldr	r2, [pc, #120]	@ (800f7d0 <HAL_TIM_Base_Start+0xf0>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d004      	beq.n	800f764 <HAL_TIM_Base_Start+0x84>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	4a1d      	ldr	r2, [pc, #116]	@ (800f7d4 <HAL_TIM_Base_Start+0xf4>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d115      	bne.n	800f790 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	689a      	ldr	r2, [r3, #8]
 800f76a:	4b1b      	ldr	r3, [pc, #108]	@ (800f7d8 <HAL_TIM_Base_Start+0xf8>)
 800f76c:	4013      	ands	r3, r2
 800f76e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2b06      	cmp	r3, #6
 800f774:	d015      	beq.n	800f7a2 <HAL_TIM_Base_Start+0xc2>
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f77c:	d011      	beq.n	800f7a2 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f042 0201 	orr.w	r2, r2, #1
 800f78c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f78e:	e008      	b.n	800f7a2 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f042 0201 	orr.w	r2, r2, #1
 800f79e:	601a      	str	r2, [r3, #0]
 800f7a0:	e000      	b.n	800f7a4 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f7a4:	2300      	movs	r3, #0
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3714      	adds	r7, #20
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	40010000 	.word	0x40010000
 800f7b8:	40000400 	.word	0x40000400
 800f7bc:	40000800 	.word	0x40000800
 800f7c0:	40000c00 	.word	0x40000c00
 800f7c4:	40010400 	.word	0x40010400
 800f7c8:	40001800 	.word	0x40001800
 800f7cc:	40014000 	.word	0x40014000
 800f7d0:	4000e000 	.word	0x4000e000
 800f7d4:	4000e400 	.word	0x4000e400
 800f7d8:	00010007 	.word	0x00010007

0800f7dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b085      	sub	sp, #20
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d001      	beq.n	800f7f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	e05e      	b.n	800f8b2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2202      	movs	r2, #2
 800f7f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	68da      	ldr	r2, [r3, #12]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f042 0201 	orr.w	r2, r2, #1
 800f80a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4a2b      	ldr	r2, [pc, #172]	@ (800f8c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d02c      	beq.n	800f870 <HAL_TIM_Base_Start_IT+0x94>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f81e:	d027      	beq.n	800f870 <HAL_TIM_Base_Start_IT+0x94>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	4a27      	ldr	r2, [pc, #156]	@ (800f8c4 <HAL_TIM_Base_Start_IT+0xe8>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d022      	beq.n	800f870 <HAL_TIM_Base_Start_IT+0x94>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4a26      	ldr	r2, [pc, #152]	@ (800f8c8 <HAL_TIM_Base_Start_IT+0xec>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d01d      	beq.n	800f870 <HAL_TIM_Base_Start_IT+0x94>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4a24      	ldr	r2, [pc, #144]	@ (800f8cc <HAL_TIM_Base_Start_IT+0xf0>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d018      	beq.n	800f870 <HAL_TIM_Base_Start_IT+0x94>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	4a23      	ldr	r2, [pc, #140]	@ (800f8d0 <HAL_TIM_Base_Start_IT+0xf4>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d013      	beq.n	800f870 <HAL_TIM_Base_Start_IT+0x94>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4a21      	ldr	r2, [pc, #132]	@ (800f8d4 <HAL_TIM_Base_Start_IT+0xf8>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d00e      	beq.n	800f870 <HAL_TIM_Base_Start_IT+0x94>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	4a20      	ldr	r2, [pc, #128]	@ (800f8d8 <HAL_TIM_Base_Start_IT+0xfc>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d009      	beq.n	800f870 <HAL_TIM_Base_Start_IT+0x94>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a1e      	ldr	r2, [pc, #120]	@ (800f8dc <HAL_TIM_Base_Start_IT+0x100>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d004      	beq.n	800f870 <HAL_TIM_Base_Start_IT+0x94>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4a1d      	ldr	r2, [pc, #116]	@ (800f8e0 <HAL_TIM_Base_Start_IT+0x104>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d115      	bne.n	800f89c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	689a      	ldr	r2, [r3, #8]
 800f876:	4b1b      	ldr	r3, [pc, #108]	@ (800f8e4 <HAL_TIM_Base_Start_IT+0x108>)
 800f878:	4013      	ands	r3, r2
 800f87a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2b06      	cmp	r3, #6
 800f880:	d015      	beq.n	800f8ae <HAL_TIM_Base_Start_IT+0xd2>
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f888:	d011      	beq.n	800f8ae <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f042 0201 	orr.w	r2, r2, #1
 800f898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f89a:	e008      	b.n	800f8ae <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f042 0201 	orr.w	r2, r2, #1
 800f8aa:	601a      	str	r2, [r3, #0]
 800f8ac:	e000      	b.n	800f8b0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f8b0:	2300      	movs	r3, #0
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3714      	adds	r7, #20
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	40010000 	.word	0x40010000
 800f8c4:	40000400 	.word	0x40000400
 800f8c8:	40000800 	.word	0x40000800
 800f8cc:	40000c00 	.word	0x40000c00
 800f8d0:	40010400 	.word	0x40010400
 800f8d4:	40001800 	.word	0x40001800
 800f8d8:	40014000 	.word	0x40014000
 800f8dc:	4000e000 	.word	0x4000e000
 800f8e0:	4000e400 	.word	0x4000e400
 800f8e4:	00010007 	.word	0x00010007

0800f8e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d101      	bne.n	800f8fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	e049      	b.n	800f98e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b00      	cmp	r3, #0
 800f904:	d106      	bne.n	800f914 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2200      	movs	r2, #0
 800f90a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f7f3 fc90 	bl	8003234 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2202      	movs	r2, #2
 800f918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	3304      	adds	r3, #4
 800f924:	4619      	mov	r1, r3
 800f926:	4610      	mov	r0, r2
 800f928:	f000 fcd0 	bl	80102cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2201      	movs	r2, #1
 800f930:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2201      	movs	r2, #1
 800f938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2201      	movs	r2, #1
 800f940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2201      	movs	r2, #1
 800f948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2201      	movs	r2, #1
 800f950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2201      	movs	r2, #1
 800f958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2201      	movs	r2, #1
 800f960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2201      	movs	r2, #1
 800f968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2201      	movs	r2, #1
 800f970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2201      	movs	r2, #1
 800f978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2201      	movs	r2, #1
 800f980:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2201      	movs	r2, #1
 800f988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3708      	adds	r7, #8
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
	...

0800f998 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d109      	bne.n	800f9bc <HAL_TIM_PWM_Start+0x24>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	2b01      	cmp	r3, #1
 800f9b2:	bf14      	ite	ne
 800f9b4:	2301      	movne	r3, #1
 800f9b6:	2300      	moveq	r3, #0
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	e03c      	b.n	800fa36 <HAL_TIM_PWM_Start+0x9e>
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	2b04      	cmp	r3, #4
 800f9c0:	d109      	bne.n	800f9d6 <HAL_TIM_PWM_Start+0x3e>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f9c8:	b2db      	uxtb	r3, r3
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	bf14      	ite	ne
 800f9ce:	2301      	movne	r3, #1
 800f9d0:	2300      	moveq	r3, #0
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	e02f      	b.n	800fa36 <HAL_TIM_PWM_Start+0x9e>
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	2b08      	cmp	r3, #8
 800f9da:	d109      	bne.n	800f9f0 <HAL_TIM_PWM_Start+0x58>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	bf14      	ite	ne
 800f9e8:	2301      	movne	r3, #1
 800f9ea:	2300      	moveq	r3, #0
 800f9ec:	b2db      	uxtb	r3, r3
 800f9ee:	e022      	b.n	800fa36 <HAL_TIM_PWM_Start+0x9e>
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	2b0c      	cmp	r3, #12
 800f9f4:	d109      	bne.n	800fa0a <HAL_TIM_PWM_Start+0x72>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	bf14      	ite	ne
 800fa02:	2301      	movne	r3, #1
 800fa04:	2300      	moveq	r3, #0
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	e015      	b.n	800fa36 <HAL_TIM_PWM_Start+0x9e>
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	2b10      	cmp	r3, #16
 800fa0e:	d109      	bne.n	800fa24 <HAL_TIM_PWM_Start+0x8c>
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fa16:	b2db      	uxtb	r3, r3
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	bf14      	ite	ne
 800fa1c:	2301      	movne	r3, #1
 800fa1e:	2300      	moveq	r3, #0
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	e008      	b.n	800fa36 <HAL_TIM_PWM_Start+0x9e>
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	bf14      	ite	ne
 800fa30:	2301      	movne	r3, #1
 800fa32:	2300      	moveq	r3, #0
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d001      	beq.n	800fa3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	e0ab      	b.n	800fb96 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d104      	bne.n	800fa4e <HAL_TIM_PWM_Start+0xb6>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2202      	movs	r2, #2
 800fa48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fa4c:	e023      	b.n	800fa96 <HAL_TIM_PWM_Start+0xfe>
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	2b04      	cmp	r3, #4
 800fa52:	d104      	bne.n	800fa5e <HAL_TIM_PWM_Start+0xc6>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2202      	movs	r2, #2
 800fa58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fa5c:	e01b      	b.n	800fa96 <HAL_TIM_PWM_Start+0xfe>
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	2b08      	cmp	r3, #8
 800fa62:	d104      	bne.n	800fa6e <HAL_TIM_PWM_Start+0xd6>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2202      	movs	r2, #2
 800fa68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fa6c:	e013      	b.n	800fa96 <HAL_TIM_PWM_Start+0xfe>
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	2b0c      	cmp	r3, #12
 800fa72:	d104      	bne.n	800fa7e <HAL_TIM_PWM_Start+0xe6>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2202      	movs	r2, #2
 800fa78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fa7c:	e00b      	b.n	800fa96 <HAL_TIM_PWM_Start+0xfe>
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	2b10      	cmp	r3, #16
 800fa82:	d104      	bne.n	800fa8e <HAL_TIM_PWM_Start+0xf6>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2202      	movs	r2, #2
 800fa88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fa8c:	e003      	b.n	800fa96 <HAL_TIM_PWM_Start+0xfe>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2202      	movs	r2, #2
 800fa92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	6839      	ldr	r1, [r7, #0]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f001 f91e 	bl	8010ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4a3d      	ldr	r2, [pc, #244]	@ (800fba0 <HAL_TIM_PWM_Start+0x208>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d013      	beq.n	800fad6 <HAL_TIM_PWM_Start+0x13e>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	4a3c      	ldr	r2, [pc, #240]	@ (800fba4 <HAL_TIM_PWM_Start+0x20c>)
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d00e      	beq.n	800fad6 <HAL_TIM_PWM_Start+0x13e>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a3a      	ldr	r2, [pc, #232]	@ (800fba8 <HAL_TIM_PWM_Start+0x210>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d009      	beq.n	800fad6 <HAL_TIM_PWM_Start+0x13e>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	4a39      	ldr	r2, [pc, #228]	@ (800fbac <HAL_TIM_PWM_Start+0x214>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	d004      	beq.n	800fad6 <HAL_TIM_PWM_Start+0x13e>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4a37      	ldr	r2, [pc, #220]	@ (800fbb0 <HAL_TIM_PWM_Start+0x218>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d101      	bne.n	800fada <HAL_TIM_PWM_Start+0x142>
 800fad6:	2301      	movs	r3, #1
 800fad8:	e000      	b.n	800fadc <HAL_TIM_PWM_Start+0x144>
 800fada:	2300      	movs	r3, #0
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d007      	beq.n	800faf0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800faee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4a2a      	ldr	r2, [pc, #168]	@ (800fba0 <HAL_TIM_PWM_Start+0x208>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d02c      	beq.n	800fb54 <HAL_TIM_PWM_Start+0x1bc>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb02:	d027      	beq.n	800fb54 <HAL_TIM_PWM_Start+0x1bc>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	4a2a      	ldr	r2, [pc, #168]	@ (800fbb4 <HAL_TIM_PWM_Start+0x21c>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d022      	beq.n	800fb54 <HAL_TIM_PWM_Start+0x1bc>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	4a29      	ldr	r2, [pc, #164]	@ (800fbb8 <HAL_TIM_PWM_Start+0x220>)
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d01d      	beq.n	800fb54 <HAL_TIM_PWM_Start+0x1bc>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	4a27      	ldr	r2, [pc, #156]	@ (800fbbc <HAL_TIM_PWM_Start+0x224>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d018      	beq.n	800fb54 <HAL_TIM_PWM_Start+0x1bc>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4a1f      	ldr	r2, [pc, #124]	@ (800fba4 <HAL_TIM_PWM_Start+0x20c>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d013      	beq.n	800fb54 <HAL_TIM_PWM_Start+0x1bc>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4a23      	ldr	r2, [pc, #140]	@ (800fbc0 <HAL_TIM_PWM_Start+0x228>)
 800fb32:	4293      	cmp	r3, r2
 800fb34:	d00e      	beq.n	800fb54 <HAL_TIM_PWM_Start+0x1bc>
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4a1b      	ldr	r2, [pc, #108]	@ (800fba8 <HAL_TIM_PWM_Start+0x210>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d009      	beq.n	800fb54 <HAL_TIM_PWM_Start+0x1bc>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4a1f      	ldr	r2, [pc, #124]	@ (800fbc4 <HAL_TIM_PWM_Start+0x22c>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d004      	beq.n	800fb54 <HAL_TIM_PWM_Start+0x1bc>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4a1e      	ldr	r2, [pc, #120]	@ (800fbc8 <HAL_TIM_PWM_Start+0x230>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d115      	bne.n	800fb80 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	689a      	ldr	r2, [r3, #8]
 800fb5a:	4b1c      	ldr	r3, [pc, #112]	@ (800fbcc <HAL_TIM_PWM_Start+0x234>)
 800fb5c:	4013      	ands	r3, r2
 800fb5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2b06      	cmp	r3, #6
 800fb64:	d015      	beq.n	800fb92 <HAL_TIM_PWM_Start+0x1fa>
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb6c:	d011      	beq.n	800fb92 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f042 0201 	orr.w	r2, r2, #1
 800fb7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb7e:	e008      	b.n	800fb92 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	f042 0201 	orr.w	r2, r2, #1
 800fb8e:	601a      	str	r2, [r3, #0]
 800fb90:	e000      	b.n	800fb94 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fb94:	2300      	movs	r3, #0
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3710      	adds	r7, #16
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}
 800fb9e:	bf00      	nop
 800fba0:	40010000 	.word	0x40010000
 800fba4:	40010400 	.word	0x40010400
 800fba8:	40014000 	.word	0x40014000
 800fbac:	40014400 	.word	0x40014400
 800fbb0:	40014800 	.word	0x40014800
 800fbb4:	40000400 	.word	0x40000400
 800fbb8:	40000800 	.word	0x40000800
 800fbbc:	40000c00 	.word	0x40000c00
 800fbc0:	40001800 	.word	0x40001800
 800fbc4:	4000e000 	.word	0x4000e000
 800fbc8:	4000e400 	.word	0x4000e400
 800fbcc:	00010007 	.word	0x00010007

0800fbd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	691b      	ldr	r3, [r3, #16]
 800fbe6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	f003 0302 	and.w	r3, r3, #2
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d020      	beq.n	800fc34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	f003 0302 	and.w	r3, r3, #2
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d01b      	beq.n	800fc34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f06f 0202 	mvn.w	r2, #2
 800fc04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2201      	movs	r2, #1
 800fc0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	699b      	ldr	r3, [r3, #24]
 800fc12:	f003 0303 	and.w	r3, r3, #3
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d003      	beq.n	800fc22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f000 fb38 	bl	8010290 <HAL_TIM_IC_CaptureCallback>
 800fc20:	e005      	b.n	800fc2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 fb2a 	bl	801027c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 fb3b 	bl	80102a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2200      	movs	r2, #0
 800fc32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	f003 0304 	and.w	r3, r3, #4
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d020      	beq.n	800fc80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	f003 0304 	and.w	r3, r3, #4
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d01b      	beq.n	800fc80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f06f 0204 	mvn.w	r2, #4
 800fc50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2202      	movs	r2, #2
 800fc56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	699b      	ldr	r3, [r3, #24]
 800fc5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d003      	beq.n	800fc6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f000 fb12 	bl	8010290 <HAL_TIM_IC_CaptureCallback>
 800fc6c:	e005      	b.n	800fc7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 fb04 	bl	801027c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f000 fb15 	bl	80102a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	f003 0308 	and.w	r3, r3, #8
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d020      	beq.n	800fccc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f003 0308 	and.w	r3, r3, #8
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d01b      	beq.n	800fccc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f06f 0208 	mvn.w	r2, #8
 800fc9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2204      	movs	r2, #4
 800fca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	69db      	ldr	r3, [r3, #28]
 800fcaa:	f003 0303 	and.w	r3, r3, #3
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d003      	beq.n	800fcba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f000 faec 	bl	8010290 <HAL_TIM_IC_CaptureCallback>
 800fcb8:	e005      	b.n	800fcc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 fade 	bl	801027c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f000 faef 	bl	80102a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	f003 0310 	and.w	r3, r3, #16
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d020      	beq.n	800fd18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f003 0310 	and.w	r3, r3, #16
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d01b      	beq.n	800fd18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f06f 0210 	mvn.w	r2, #16
 800fce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2208      	movs	r2, #8
 800fcee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	69db      	ldr	r3, [r3, #28]
 800fcf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d003      	beq.n	800fd06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 fac6 	bl	8010290 <HAL_TIM_IC_CaptureCallback>
 800fd04:	e005      	b.n	800fd12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 fab8 	bl	801027c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 fac9 	bl	80102a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	f003 0301 	and.w	r3, r3, #1
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d00c      	beq.n	800fd3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f003 0301 	and.w	r3, r3, #1
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d007      	beq.n	800fd3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f06f 0201 	mvn.w	r2, #1
 800fd34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f7f2 fcde 	bl	80026f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d104      	bne.n	800fd50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d00c      	beq.n	800fd6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d007      	beq.n	800fd6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800fd62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f001 f913 	bl	8010f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d00c      	beq.n	800fd8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d007      	beq.n	800fd8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800fd86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f001 f90b 	bl	8010fa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d00c      	beq.n	800fdb2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d007      	beq.n	800fdb2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fdaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f000 fa83 	bl	80102b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	f003 0320 	and.w	r3, r3, #32
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00c      	beq.n	800fdd6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f003 0320 	and.w	r3, r3, #32
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d007      	beq.n	800fdd6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f06f 0220 	mvn.w	r2, #32
 800fdce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f001 f8d3 	bl	8010f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fdd6:	bf00      	nop
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
	...

0800fde0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b086      	sub	sp, #24
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fdec:	2300      	movs	r3, #0
 800fdee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fdf6:	2b01      	cmp	r3, #1
 800fdf8:	d101      	bne.n	800fdfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fdfa:	2302      	movs	r3, #2
 800fdfc:	e0ff      	b.n	800fffe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	2201      	movs	r2, #1
 800fe02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2b14      	cmp	r3, #20
 800fe0a:	f200 80f0 	bhi.w	800ffee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fe0e:	a201      	add	r2, pc, #4	@ (adr r2, 800fe14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fe10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe14:	0800fe69 	.word	0x0800fe69
 800fe18:	0800ffef 	.word	0x0800ffef
 800fe1c:	0800ffef 	.word	0x0800ffef
 800fe20:	0800ffef 	.word	0x0800ffef
 800fe24:	0800fea9 	.word	0x0800fea9
 800fe28:	0800ffef 	.word	0x0800ffef
 800fe2c:	0800ffef 	.word	0x0800ffef
 800fe30:	0800ffef 	.word	0x0800ffef
 800fe34:	0800feeb 	.word	0x0800feeb
 800fe38:	0800ffef 	.word	0x0800ffef
 800fe3c:	0800ffef 	.word	0x0800ffef
 800fe40:	0800ffef 	.word	0x0800ffef
 800fe44:	0800ff2b 	.word	0x0800ff2b
 800fe48:	0800ffef 	.word	0x0800ffef
 800fe4c:	0800ffef 	.word	0x0800ffef
 800fe50:	0800ffef 	.word	0x0800ffef
 800fe54:	0800ff6d 	.word	0x0800ff6d
 800fe58:	0800ffef 	.word	0x0800ffef
 800fe5c:	0800ffef 	.word	0x0800ffef
 800fe60:	0800ffef 	.word	0x0800ffef
 800fe64:	0800ffad 	.word	0x0800ffad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	68b9      	ldr	r1, [r7, #8]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f000 fad8 	bl	8010424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	699a      	ldr	r2, [r3, #24]
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f042 0208 	orr.w	r2, r2, #8
 800fe82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	699a      	ldr	r2, [r3, #24]
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	f022 0204 	bic.w	r2, r2, #4
 800fe92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	6999      	ldr	r1, [r3, #24]
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	691a      	ldr	r2, [r3, #16]
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	430a      	orrs	r2, r1
 800fea4:	619a      	str	r2, [r3, #24]
      break;
 800fea6:	e0a5      	b.n	800fff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	68b9      	ldr	r1, [r7, #8]
 800feae:	4618      	mov	r0, r3
 800feb0:	f000 fb48 	bl	8010544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	699a      	ldr	r2, [r3, #24]
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	699a      	ldr	r2, [r3, #24]
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	6999      	ldr	r1, [r3, #24]
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	691b      	ldr	r3, [r3, #16]
 800fede:	021a      	lsls	r2, r3, #8
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	430a      	orrs	r2, r1
 800fee6:	619a      	str	r2, [r3, #24]
      break;
 800fee8:	e084      	b.n	800fff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	68b9      	ldr	r1, [r7, #8]
 800fef0:	4618      	mov	r0, r3
 800fef2:	f000 fbb1 	bl	8010658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	69da      	ldr	r2, [r3, #28]
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	f042 0208 	orr.w	r2, r2, #8
 800ff04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	69da      	ldr	r2, [r3, #28]
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	f022 0204 	bic.w	r2, r2, #4
 800ff14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	69d9      	ldr	r1, [r3, #28]
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	691a      	ldr	r2, [r3, #16]
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	430a      	orrs	r2, r1
 800ff26:	61da      	str	r2, [r3, #28]
      break;
 800ff28:	e064      	b.n	800fff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	68b9      	ldr	r1, [r7, #8]
 800ff30:	4618      	mov	r0, r3
 800ff32:	f000 fc19 	bl	8010768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	69da      	ldr	r2, [r3, #28]
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ff44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	69da      	ldr	r2, [r3, #28]
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ff54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	69d9      	ldr	r1, [r3, #28]
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	691b      	ldr	r3, [r3, #16]
 800ff60:	021a      	lsls	r2, r3, #8
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	430a      	orrs	r2, r1
 800ff68:	61da      	str	r2, [r3, #28]
      break;
 800ff6a:	e043      	b.n	800fff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	68b9      	ldr	r1, [r7, #8]
 800ff72:	4618      	mov	r0, r3
 800ff74:	f000 fc62 	bl	801083c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f042 0208 	orr.w	r2, r2, #8
 800ff86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f022 0204 	bic.w	r2, r2, #4
 800ff96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	691a      	ldr	r2, [r3, #16]
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	430a      	orrs	r2, r1
 800ffa8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ffaa:	e023      	b.n	800fff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	68b9      	ldr	r1, [r7, #8]
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f000 fca6 	bl	8010904 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ffc6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ffd6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	691b      	ldr	r3, [r3, #16]
 800ffe2:	021a      	lsls	r2, r3, #8
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	430a      	orrs	r2, r1
 800ffea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ffec:	e002      	b.n	800fff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ffee:	2301      	movs	r3, #1
 800fff0:	75fb      	strb	r3, [r7, #23]
      break;
 800fff2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	2200      	movs	r2, #0
 800fff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fffc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3718      	adds	r7, #24
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop

08010008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010012:	2300      	movs	r3, #0
 8010014:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801001c:	2b01      	cmp	r3, #1
 801001e:	d101      	bne.n	8010024 <HAL_TIM_ConfigClockSource+0x1c>
 8010020:	2302      	movs	r3, #2
 8010022:	e0dc      	b.n	80101de <HAL_TIM_ConfigClockSource+0x1d6>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2201      	movs	r2, #1
 8010028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2202      	movs	r2, #2
 8010030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	689b      	ldr	r3, [r3, #8]
 801003a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801003c:	68ba      	ldr	r2, [r7, #8]
 801003e:	4b6a      	ldr	r3, [pc, #424]	@ (80101e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8010040:	4013      	ands	r3, r2
 8010042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801004a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	68ba      	ldr	r2, [r7, #8]
 8010052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a64      	ldr	r2, [pc, #400]	@ (80101ec <HAL_TIM_ConfigClockSource+0x1e4>)
 801005a:	4293      	cmp	r3, r2
 801005c:	f000 80a9 	beq.w	80101b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8010060:	4a62      	ldr	r2, [pc, #392]	@ (80101ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8010062:	4293      	cmp	r3, r2
 8010064:	f200 80ae 	bhi.w	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8010068:	4a61      	ldr	r2, [pc, #388]	@ (80101f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 801006a:	4293      	cmp	r3, r2
 801006c:	f000 80a1 	beq.w	80101b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8010070:	4a5f      	ldr	r2, [pc, #380]	@ (80101f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8010072:	4293      	cmp	r3, r2
 8010074:	f200 80a6 	bhi.w	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8010078:	4a5e      	ldr	r2, [pc, #376]	@ (80101f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 801007a:	4293      	cmp	r3, r2
 801007c:	f000 8099 	beq.w	80101b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8010080:	4a5c      	ldr	r2, [pc, #368]	@ (80101f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010082:	4293      	cmp	r3, r2
 8010084:	f200 809e 	bhi.w	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8010088:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801008c:	f000 8091 	beq.w	80101b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8010090:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010094:	f200 8096 	bhi.w	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8010098:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801009c:	f000 8089 	beq.w	80101b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80100a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80100a4:	f200 808e 	bhi.w	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80100a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80100ac:	d03e      	beq.n	801012c <HAL_TIM_ConfigClockSource+0x124>
 80100ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80100b2:	f200 8087 	bhi.w	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80100b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80100ba:	f000 8086 	beq.w	80101ca <HAL_TIM_ConfigClockSource+0x1c2>
 80100be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80100c2:	d87f      	bhi.n	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80100c4:	2b70      	cmp	r3, #112	@ 0x70
 80100c6:	d01a      	beq.n	80100fe <HAL_TIM_ConfigClockSource+0xf6>
 80100c8:	2b70      	cmp	r3, #112	@ 0x70
 80100ca:	d87b      	bhi.n	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80100cc:	2b60      	cmp	r3, #96	@ 0x60
 80100ce:	d050      	beq.n	8010172 <HAL_TIM_ConfigClockSource+0x16a>
 80100d0:	2b60      	cmp	r3, #96	@ 0x60
 80100d2:	d877      	bhi.n	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80100d4:	2b50      	cmp	r3, #80	@ 0x50
 80100d6:	d03c      	beq.n	8010152 <HAL_TIM_ConfigClockSource+0x14a>
 80100d8:	2b50      	cmp	r3, #80	@ 0x50
 80100da:	d873      	bhi.n	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80100dc:	2b40      	cmp	r3, #64	@ 0x40
 80100de:	d058      	beq.n	8010192 <HAL_TIM_ConfigClockSource+0x18a>
 80100e0:	2b40      	cmp	r3, #64	@ 0x40
 80100e2:	d86f      	bhi.n	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80100e4:	2b30      	cmp	r3, #48	@ 0x30
 80100e6:	d064      	beq.n	80101b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80100e8:	2b30      	cmp	r3, #48	@ 0x30
 80100ea:	d86b      	bhi.n	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80100ec:	2b20      	cmp	r3, #32
 80100ee:	d060      	beq.n	80101b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80100f0:	2b20      	cmp	r3, #32
 80100f2:	d867      	bhi.n	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d05c      	beq.n	80101b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80100f8:	2b10      	cmp	r3, #16
 80100fa:	d05a      	beq.n	80101b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80100fc:	e062      	b.n	80101c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801010e:	f000 fdc7 	bl	8010ca0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	689b      	ldr	r3, [r3, #8]
 8010118:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010120:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	68ba      	ldr	r2, [r7, #8]
 8010128:	609a      	str	r2, [r3, #8]
      break;
 801012a:	e04f      	b.n	80101cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801013c:	f000 fdb0 	bl	8010ca0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	689a      	ldr	r2, [r3, #8]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801014e:	609a      	str	r2, [r3, #8]
      break;
 8010150:	e03c      	b.n	80101cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801015e:	461a      	mov	r2, r3
 8010160:	f000 fd20 	bl	8010ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	2150      	movs	r1, #80	@ 0x50
 801016a:	4618      	mov	r0, r3
 801016c:	f000 fd7a 	bl	8010c64 <TIM_ITRx_SetConfig>
      break;
 8010170:	e02c      	b.n	80101cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801017e:	461a      	mov	r2, r3
 8010180:	f000 fd3f 	bl	8010c02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	2160      	movs	r1, #96	@ 0x60
 801018a:	4618      	mov	r0, r3
 801018c:	f000 fd6a 	bl	8010c64 <TIM_ITRx_SetConfig>
      break;
 8010190:	e01c      	b.n	80101cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801019e:	461a      	mov	r2, r3
 80101a0:	f000 fd00 	bl	8010ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2140      	movs	r1, #64	@ 0x40
 80101aa:	4618      	mov	r0, r3
 80101ac:	f000 fd5a 	bl	8010c64 <TIM_ITRx_SetConfig>
      break;
 80101b0:	e00c      	b.n	80101cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681a      	ldr	r2, [r3, #0]
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4619      	mov	r1, r3
 80101bc:	4610      	mov	r0, r2
 80101be:	f000 fd51 	bl	8010c64 <TIM_ITRx_SetConfig>
      break;
 80101c2:	e003      	b.n	80101cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80101c4:	2301      	movs	r3, #1
 80101c6:	73fb      	strb	r3, [r7, #15]
      break;
 80101c8:	e000      	b.n	80101cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80101ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2201      	movs	r2, #1
 80101d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2200      	movs	r2, #0
 80101d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80101dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3710      	adds	r7, #16
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
 80101e6:	bf00      	nop
 80101e8:	ffceff88 	.word	0xffceff88
 80101ec:	00100040 	.word	0x00100040
 80101f0:	00100030 	.word	0x00100030
 80101f4:	00100020 	.word	0x00100020

080101f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010208:	2b01      	cmp	r3, #1
 801020a:	d101      	bne.n	8010210 <HAL_TIM_SlaveConfigSynchro+0x18>
 801020c:	2302      	movs	r3, #2
 801020e:	e031      	b.n	8010274 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2201      	movs	r2, #1
 8010214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2202      	movs	r2, #2
 801021c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8010220:	6839      	ldr	r1, [r7, #0]
 8010222:	6878      	ldr	r0, [r7, #4]
 8010224:	f000 fbd4 	bl	80109d0 <TIM_SlaveTimer_SetConfig>
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d009      	beq.n	8010242 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2201      	movs	r2, #1
 8010232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2200      	movs	r2, #0
 801023a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 801023e:	2301      	movs	r3, #1
 8010240:	e018      	b.n	8010274 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	68da      	ldr	r2, [r3, #12]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010250:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	68da      	ldr	r2, [r3, #12]
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010260:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2201      	movs	r2, #1
 8010266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2200      	movs	r2, #0
 801026e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010272:	2300      	movs	r3, #0
}
 8010274:	4618      	mov	r0, r3
 8010276:	3708      	adds	r7, #8
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010284:	bf00      	nop
 8010286:	370c      	adds	r7, #12
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010298:	bf00      	nop
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr

080102a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80102a4:	b480      	push	{r7}
 80102a6:	b083      	sub	sp, #12
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80102ac:	bf00      	nop
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80102c0:	bf00      	nop
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b085      	sub	sp, #20
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	4a47      	ldr	r2, [pc, #284]	@ (80103fc <TIM_Base_SetConfig+0x130>)
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d013      	beq.n	801030c <TIM_Base_SetConfig+0x40>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80102ea:	d00f      	beq.n	801030c <TIM_Base_SetConfig+0x40>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	4a44      	ldr	r2, [pc, #272]	@ (8010400 <TIM_Base_SetConfig+0x134>)
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d00b      	beq.n	801030c <TIM_Base_SetConfig+0x40>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	4a43      	ldr	r2, [pc, #268]	@ (8010404 <TIM_Base_SetConfig+0x138>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d007      	beq.n	801030c <TIM_Base_SetConfig+0x40>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	4a42      	ldr	r2, [pc, #264]	@ (8010408 <TIM_Base_SetConfig+0x13c>)
 8010300:	4293      	cmp	r3, r2
 8010302:	d003      	beq.n	801030c <TIM_Base_SetConfig+0x40>
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	4a41      	ldr	r2, [pc, #260]	@ (801040c <TIM_Base_SetConfig+0x140>)
 8010308:	4293      	cmp	r3, r2
 801030a:	d108      	bne.n	801031e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	68fa      	ldr	r2, [r7, #12]
 801031a:	4313      	orrs	r3, r2
 801031c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	4a36      	ldr	r2, [pc, #216]	@ (80103fc <TIM_Base_SetConfig+0x130>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d027      	beq.n	8010376 <TIM_Base_SetConfig+0xaa>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801032c:	d023      	beq.n	8010376 <TIM_Base_SetConfig+0xaa>
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	4a33      	ldr	r2, [pc, #204]	@ (8010400 <TIM_Base_SetConfig+0x134>)
 8010332:	4293      	cmp	r3, r2
 8010334:	d01f      	beq.n	8010376 <TIM_Base_SetConfig+0xaa>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	4a32      	ldr	r2, [pc, #200]	@ (8010404 <TIM_Base_SetConfig+0x138>)
 801033a:	4293      	cmp	r3, r2
 801033c:	d01b      	beq.n	8010376 <TIM_Base_SetConfig+0xaa>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	4a31      	ldr	r2, [pc, #196]	@ (8010408 <TIM_Base_SetConfig+0x13c>)
 8010342:	4293      	cmp	r3, r2
 8010344:	d017      	beq.n	8010376 <TIM_Base_SetConfig+0xaa>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	4a30      	ldr	r2, [pc, #192]	@ (801040c <TIM_Base_SetConfig+0x140>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d013      	beq.n	8010376 <TIM_Base_SetConfig+0xaa>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	4a2f      	ldr	r2, [pc, #188]	@ (8010410 <TIM_Base_SetConfig+0x144>)
 8010352:	4293      	cmp	r3, r2
 8010354:	d00f      	beq.n	8010376 <TIM_Base_SetConfig+0xaa>
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	4a2e      	ldr	r2, [pc, #184]	@ (8010414 <TIM_Base_SetConfig+0x148>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d00b      	beq.n	8010376 <TIM_Base_SetConfig+0xaa>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	4a2d      	ldr	r2, [pc, #180]	@ (8010418 <TIM_Base_SetConfig+0x14c>)
 8010362:	4293      	cmp	r3, r2
 8010364:	d007      	beq.n	8010376 <TIM_Base_SetConfig+0xaa>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	4a2c      	ldr	r2, [pc, #176]	@ (801041c <TIM_Base_SetConfig+0x150>)
 801036a:	4293      	cmp	r3, r2
 801036c:	d003      	beq.n	8010376 <TIM_Base_SetConfig+0xaa>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4a2b      	ldr	r2, [pc, #172]	@ (8010420 <TIM_Base_SetConfig+0x154>)
 8010372:	4293      	cmp	r3, r2
 8010374:	d108      	bne.n	8010388 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801037c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	68db      	ldr	r3, [r3, #12]
 8010382:	68fa      	ldr	r2, [r7, #12]
 8010384:	4313      	orrs	r3, r2
 8010386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	695b      	ldr	r3, [r3, #20]
 8010392:	4313      	orrs	r3, r2
 8010394:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	689a      	ldr	r2, [r3, #8]
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	4a14      	ldr	r2, [pc, #80]	@ (80103fc <TIM_Base_SetConfig+0x130>)
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d00f      	beq.n	80103ce <TIM_Base_SetConfig+0x102>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4a16      	ldr	r2, [pc, #88]	@ (801040c <TIM_Base_SetConfig+0x140>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d00b      	beq.n	80103ce <TIM_Base_SetConfig+0x102>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4a15      	ldr	r2, [pc, #84]	@ (8010410 <TIM_Base_SetConfig+0x144>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d007      	beq.n	80103ce <TIM_Base_SetConfig+0x102>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4a14      	ldr	r2, [pc, #80]	@ (8010414 <TIM_Base_SetConfig+0x148>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d003      	beq.n	80103ce <TIM_Base_SetConfig+0x102>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	4a13      	ldr	r2, [pc, #76]	@ (8010418 <TIM_Base_SetConfig+0x14c>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d103      	bne.n	80103d6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	691a      	ldr	r2, [r3, #16]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f043 0204 	orr.w	r2, r3, #4
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2201      	movs	r2, #1
 80103e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	68fa      	ldr	r2, [r7, #12]
 80103ec:	601a      	str	r2, [r3, #0]
}
 80103ee:	bf00      	nop
 80103f0:	3714      	adds	r7, #20
 80103f2:	46bd      	mov	sp, r7
 80103f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f8:	4770      	bx	lr
 80103fa:	bf00      	nop
 80103fc:	40010000 	.word	0x40010000
 8010400:	40000400 	.word	0x40000400
 8010404:	40000800 	.word	0x40000800
 8010408:	40000c00 	.word	0x40000c00
 801040c:	40010400 	.word	0x40010400
 8010410:	40014000 	.word	0x40014000
 8010414:	40014400 	.word	0x40014400
 8010418:	40014800 	.word	0x40014800
 801041c:	4000e000 	.word	0x4000e000
 8010420:	4000e400 	.word	0x4000e400

08010424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010424:	b480      	push	{r7}
 8010426:	b087      	sub	sp, #28
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6a1b      	ldr	r3, [r3, #32]
 8010432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6a1b      	ldr	r3, [r3, #32]
 8010438:	f023 0201 	bic.w	r2, r3, #1
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	699b      	ldr	r3, [r3, #24]
 801044a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801044c:	68fa      	ldr	r2, [r7, #12]
 801044e:	4b37      	ldr	r3, [pc, #220]	@ (801052c <TIM_OC1_SetConfig+0x108>)
 8010450:	4013      	ands	r3, r2
 8010452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	f023 0303 	bic.w	r3, r3, #3
 801045a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	68fa      	ldr	r2, [r7, #12]
 8010462:	4313      	orrs	r3, r2
 8010464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	f023 0302 	bic.w	r3, r3, #2
 801046c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	689b      	ldr	r3, [r3, #8]
 8010472:	697a      	ldr	r2, [r7, #20]
 8010474:	4313      	orrs	r3, r2
 8010476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	4a2d      	ldr	r2, [pc, #180]	@ (8010530 <TIM_OC1_SetConfig+0x10c>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d00f      	beq.n	80104a0 <TIM_OC1_SetConfig+0x7c>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	4a2c      	ldr	r2, [pc, #176]	@ (8010534 <TIM_OC1_SetConfig+0x110>)
 8010484:	4293      	cmp	r3, r2
 8010486:	d00b      	beq.n	80104a0 <TIM_OC1_SetConfig+0x7c>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	4a2b      	ldr	r2, [pc, #172]	@ (8010538 <TIM_OC1_SetConfig+0x114>)
 801048c:	4293      	cmp	r3, r2
 801048e:	d007      	beq.n	80104a0 <TIM_OC1_SetConfig+0x7c>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	4a2a      	ldr	r2, [pc, #168]	@ (801053c <TIM_OC1_SetConfig+0x118>)
 8010494:	4293      	cmp	r3, r2
 8010496:	d003      	beq.n	80104a0 <TIM_OC1_SetConfig+0x7c>
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	4a29      	ldr	r2, [pc, #164]	@ (8010540 <TIM_OC1_SetConfig+0x11c>)
 801049c:	4293      	cmp	r3, r2
 801049e:	d10c      	bne.n	80104ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	f023 0308 	bic.w	r3, r3, #8
 80104a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	68db      	ldr	r3, [r3, #12]
 80104ac:	697a      	ldr	r2, [r7, #20]
 80104ae:	4313      	orrs	r3, r2
 80104b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	f023 0304 	bic.w	r3, r3, #4
 80104b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4a1c      	ldr	r2, [pc, #112]	@ (8010530 <TIM_OC1_SetConfig+0x10c>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d00f      	beq.n	80104e2 <TIM_OC1_SetConfig+0xbe>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	4a1b      	ldr	r2, [pc, #108]	@ (8010534 <TIM_OC1_SetConfig+0x110>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d00b      	beq.n	80104e2 <TIM_OC1_SetConfig+0xbe>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	4a1a      	ldr	r2, [pc, #104]	@ (8010538 <TIM_OC1_SetConfig+0x114>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d007      	beq.n	80104e2 <TIM_OC1_SetConfig+0xbe>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	4a19      	ldr	r2, [pc, #100]	@ (801053c <TIM_OC1_SetConfig+0x118>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d003      	beq.n	80104e2 <TIM_OC1_SetConfig+0xbe>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4a18      	ldr	r2, [pc, #96]	@ (8010540 <TIM_OC1_SetConfig+0x11c>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d111      	bne.n	8010506 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80104e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80104f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	695b      	ldr	r3, [r3, #20]
 80104f6:	693a      	ldr	r2, [r7, #16]
 80104f8:	4313      	orrs	r3, r2
 80104fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	699b      	ldr	r3, [r3, #24]
 8010500:	693a      	ldr	r2, [r7, #16]
 8010502:	4313      	orrs	r3, r2
 8010504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	693a      	ldr	r2, [r7, #16]
 801050a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	68fa      	ldr	r2, [r7, #12]
 8010510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	685a      	ldr	r2, [r3, #4]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	697a      	ldr	r2, [r7, #20]
 801051e:	621a      	str	r2, [r3, #32]
}
 8010520:	bf00      	nop
 8010522:	371c      	adds	r7, #28
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr
 801052c:	fffeff8f 	.word	0xfffeff8f
 8010530:	40010000 	.word	0x40010000
 8010534:	40010400 	.word	0x40010400
 8010538:	40014000 	.word	0x40014000
 801053c:	40014400 	.word	0x40014400
 8010540:	40014800 	.word	0x40014800

08010544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010544:	b480      	push	{r7}
 8010546:	b087      	sub	sp, #28
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6a1b      	ldr	r3, [r3, #32]
 8010552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6a1b      	ldr	r3, [r3, #32]
 8010558:	f023 0210 	bic.w	r2, r3, #16
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	699b      	ldr	r3, [r3, #24]
 801056a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	4b34      	ldr	r3, [pc, #208]	@ (8010640 <TIM_OC2_SetConfig+0xfc>)
 8010570:	4013      	ands	r3, r2
 8010572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801057a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	021b      	lsls	r3, r3, #8
 8010582:	68fa      	ldr	r2, [r7, #12]
 8010584:	4313      	orrs	r3, r2
 8010586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	f023 0320 	bic.w	r3, r3, #32
 801058e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	689b      	ldr	r3, [r3, #8]
 8010594:	011b      	lsls	r3, r3, #4
 8010596:	697a      	ldr	r2, [r7, #20]
 8010598:	4313      	orrs	r3, r2
 801059a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	4a29      	ldr	r2, [pc, #164]	@ (8010644 <TIM_OC2_SetConfig+0x100>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	d003      	beq.n	80105ac <TIM_OC2_SetConfig+0x68>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4a28      	ldr	r2, [pc, #160]	@ (8010648 <TIM_OC2_SetConfig+0x104>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d10d      	bne.n	80105c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80105b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	68db      	ldr	r3, [r3, #12]
 80105b8:	011b      	lsls	r3, r3, #4
 80105ba:	697a      	ldr	r2, [r7, #20]
 80105bc:	4313      	orrs	r3, r2
 80105be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	4a1e      	ldr	r2, [pc, #120]	@ (8010644 <TIM_OC2_SetConfig+0x100>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d00f      	beq.n	80105f0 <TIM_OC2_SetConfig+0xac>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	4a1d      	ldr	r2, [pc, #116]	@ (8010648 <TIM_OC2_SetConfig+0x104>)
 80105d4:	4293      	cmp	r3, r2
 80105d6:	d00b      	beq.n	80105f0 <TIM_OC2_SetConfig+0xac>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	4a1c      	ldr	r2, [pc, #112]	@ (801064c <TIM_OC2_SetConfig+0x108>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d007      	beq.n	80105f0 <TIM_OC2_SetConfig+0xac>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	4a1b      	ldr	r2, [pc, #108]	@ (8010650 <TIM_OC2_SetConfig+0x10c>)
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d003      	beq.n	80105f0 <TIM_OC2_SetConfig+0xac>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	4a1a      	ldr	r2, [pc, #104]	@ (8010654 <TIM_OC2_SetConfig+0x110>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d113      	bne.n	8010618 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80105f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80105fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	695b      	ldr	r3, [r3, #20]
 8010604:	009b      	lsls	r3, r3, #2
 8010606:	693a      	ldr	r2, [r7, #16]
 8010608:	4313      	orrs	r3, r2
 801060a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	699b      	ldr	r3, [r3, #24]
 8010610:	009b      	lsls	r3, r3, #2
 8010612:	693a      	ldr	r2, [r7, #16]
 8010614:	4313      	orrs	r3, r2
 8010616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	693a      	ldr	r2, [r7, #16]
 801061c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	68fa      	ldr	r2, [r7, #12]
 8010622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	685a      	ldr	r2, [r3, #4]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	697a      	ldr	r2, [r7, #20]
 8010630:	621a      	str	r2, [r3, #32]
}
 8010632:	bf00      	nop
 8010634:	371c      	adds	r7, #28
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	feff8fff 	.word	0xfeff8fff
 8010644:	40010000 	.word	0x40010000
 8010648:	40010400 	.word	0x40010400
 801064c:	40014000 	.word	0x40014000
 8010650:	40014400 	.word	0x40014400
 8010654:	40014800 	.word	0x40014800

08010658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010658:	b480      	push	{r7}
 801065a:	b087      	sub	sp, #28
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6a1b      	ldr	r3, [r3, #32]
 8010666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6a1b      	ldr	r3, [r3, #32]
 801066c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	685b      	ldr	r3, [r3, #4]
 8010678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	69db      	ldr	r3, [r3, #28]
 801067e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010680:	68fa      	ldr	r2, [r7, #12]
 8010682:	4b33      	ldr	r3, [pc, #204]	@ (8010750 <TIM_OC3_SetConfig+0xf8>)
 8010684:	4013      	ands	r3, r2
 8010686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	f023 0303 	bic.w	r3, r3, #3
 801068e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	68fa      	ldr	r2, [r7, #12]
 8010696:	4313      	orrs	r3, r2
 8010698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80106a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	689b      	ldr	r3, [r3, #8]
 80106a6:	021b      	lsls	r3, r3, #8
 80106a8:	697a      	ldr	r2, [r7, #20]
 80106aa:	4313      	orrs	r3, r2
 80106ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	4a28      	ldr	r2, [pc, #160]	@ (8010754 <TIM_OC3_SetConfig+0xfc>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d003      	beq.n	80106be <TIM_OC3_SetConfig+0x66>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	4a27      	ldr	r2, [pc, #156]	@ (8010758 <TIM_OC3_SetConfig+0x100>)
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d10d      	bne.n	80106da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80106c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	68db      	ldr	r3, [r3, #12]
 80106ca:	021b      	lsls	r3, r3, #8
 80106cc:	697a      	ldr	r2, [r7, #20]
 80106ce:	4313      	orrs	r3, r2
 80106d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80106d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4a1d      	ldr	r2, [pc, #116]	@ (8010754 <TIM_OC3_SetConfig+0xfc>)
 80106de:	4293      	cmp	r3, r2
 80106e0:	d00f      	beq.n	8010702 <TIM_OC3_SetConfig+0xaa>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4a1c      	ldr	r2, [pc, #112]	@ (8010758 <TIM_OC3_SetConfig+0x100>)
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d00b      	beq.n	8010702 <TIM_OC3_SetConfig+0xaa>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	4a1b      	ldr	r2, [pc, #108]	@ (801075c <TIM_OC3_SetConfig+0x104>)
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d007      	beq.n	8010702 <TIM_OC3_SetConfig+0xaa>
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	4a1a      	ldr	r2, [pc, #104]	@ (8010760 <TIM_OC3_SetConfig+0x108>)
 80106f6:	4293      	cmp	r3, r2
 80106f8:	d003      	beq.n	8010702 <TIM_OC3_SetConfig+0xaa>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	4a19      	ldr	r2, [pc, #100]	@ (8010764 <TIM_OC3_SetConfig+0x10c>)
 80106fe:	4293      	cmp	r3, r2
 8010700:	d113      	bne.n	801072a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	695b      	ldr	r3, [r3, #20]
 8010716:	011b      	lsls	r3, r3, #4
 8010718:	693a      	ldr	r2, [r7, #16]
 801071a:	4313      	orrs	r3, r2
 801071c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	699b      	ldr	r3, [r3, #24]
 8010722:	011b      	lsls	r3, r3, #4
 8010724:	693a      	ldr	r2, [r7, #16]
 8010726:	4313      	orrs	r3, r2
 8010728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	693a      	ldr	r2, [r7, #16]
 801072e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	68fa      	ldr	r2, [r7, #12]
 8010734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	685a      	ldr	r2, [r3, #4]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	697a      	ldr	r2, [r7, #20]
 8010742:	621a      	str	r2, [r3, #32]
}
 8010744:	bf00      	nop
 8010746:	371c      	adds	r7, #28
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr
 8010750:	fffeff8f 	.word	0xfffeff8f
 8010754:	40010000 	.word	0x40010000
 8010758:	40010400 	.word	0x40010400
 801075c:	40014000 	.word	0x40014000
 8010760:	40014400 	.word	0x40014400
 8010764:	40014800 	.word	0x40014800

08010768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010768:	b480      	push	{r7}
 801076a:	b087      	sub	sp, #28
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6a1b      	ldr	r3, [r3, #32]
 8010776:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6a1b      	ldr	r3, [r3, #32]
 801077c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	685b      	ldr	r3, [r3, #4]
 8010788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	69db      	ldr	r3, [r3, #28]
 801078e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010790:	68fa      	ldr	r2, [r7, #12]
 8010792:	4b24      	ldr	r3, [pc, #144]	@ (8010824 <TIM_OC4_SetConfig+0xbc>)
 8010794:	4013      	ands	r3, r2
 8010796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801079e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	021b      	lsls	r3, r3, #8
 80107a6:	68fa      	ldr	r2, [r7, #12]
 80107a8:	4313      	orrs	r3, r2
 80107aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80107ac:	693b      	ldr	r3, [r7, #16]
 80107ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80107b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	689b      	ldr	r3, [r3, #8]
 80107b8:	031b      	lsls	r3, r3, #12
 80107ba:	693a      	ldr	r2, [r7, #16]
 80107bc:	4313      	orrs	r3, r2
 80107be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	4a19      	ldr	r2, [pc, #100]	@ (8010828 <TIM_OC4_SetConfig+0xc0>)
 80107c4:	4293      	cmp	r3, r2
 80107c6:	d00f      	beq.n	80107e8 <TIM_OC4_SetConfig+0x80>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	4a18      	ldr	r2, [pc, #96]	@ (801082c <TIM_OC4_SetConfig+0xc4>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d00b      	beq.n	80107e8 <TIM_OC4_SetConfig+0x80>
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	4a17      	ldr	r2, [pc, #92]	@ (8010830 <TIM_OC4_SetConfig+0xc8>)
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d007      	beq.n	80107e8 <TIM_OC4_SetConfig+0x80>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4a16      	ldr	r2, [pc, #88]	@ (8010834 <TIM_OC4_SetConfig+0xcc>)
 80107dc:	4293      	cmp	r3, r2
 80107de:	d003      	beq.n	80107e8 <TIM_OC4_SetConfig+0x80>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	4a15      	ldr	r2, [pc, #84]	@ (8010838 <TIM_OC4_SetConfig+0xd0>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d109      	bne.n	80107fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80107ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	695b      	ldr	r3, [r3, #20]
 80107f4:	019b      	lsls	r3, r3, #6
 80107f6:	697a      	ldr	r2, [r7, #20]
 80107f8:	4313      	orrs	r3, r2
 80107fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	697a      	ldr	r2, [r7, #20]
 8010800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	68fa      	ldr	r2, [r7, #12]
 8010806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	685a      	ldr	r2, [r3, #4]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	693a      	ldr	r2, [r7, #16]
 8010814:	621a      	str	r2, [r3, #32]
}
 8010816:	bf00      	nop
 8010818:	371c      	adds	r7, #28
 801081a:	46bd      	mov	sp, r7
 801081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010820:	4770      	bx	lr
 8010822:	bf00      	nop
 8010824:	feff8fff 	.word	0xfeff8fff
 8010828:	40010000 	.word	0x40010000
 801082c:	40010400 	.word	0x40010400
 8010830:	40014000 	.word	0x40014000
 8010834:	40014400 	.word	0x40014400
 8010838:	40014800 	.word	0x40014800

0801083c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801083c:	b480      	push	{r7}
 801083e:	b087      	sub	sp, #28
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6a1b      	ldr	r3, [r3, #32]
 801084a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6a1b      	ldr	r3, [r3, #32]
 8010850:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010864:	68fa      	ldr	r2, [r7, #12]
 8010866:	4b21      	ldr	r3, [pc, #132]	@ (80108ec <TIM_OC5_SetConfig+0xb0>)
 8010868:	4013      	ands	r3, r2
 801086a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	68fa      	ldr	r2, [r7, #12]
 8010872:	4313      	orrs	r3, r2
 8010874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801087c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	689b      	ldr	r3, [r3, #8]
 8010882:	041b      	lsls	r3, r3, #16
 8010884:	693a      	ldr	r2, [r7, #16]
 8010886:	4313      	orrs	r3, r2
 8010888:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	4a18      	ldr	r2, [pc, #96]	@ (80108f0 <TIM_OC5_SetConfig+0xb4>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d00f      	beq.n	80108b2 <TIM_OC5_SetConfig+0x76>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	4a17      	ldr	r2, [pc, #92]	@ (80108f4 <TIM_OC5_SetConfig+0xb8>)
 8010896:	4293      	cmp	r3, r2
 8010898:	d00b      	beq.n	80108b2 <TIM_OC5_SetConfig+0x76>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	4a16      	ldr	r2, [pc, #88]	@ (80108f8 <TIM_OC5_SetConfig+0xbc>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	d007      	beq.n	80108b2 <TIM_OC5_SetConfig+0x76>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	4a15      	ldr	r2, [pc, #84]	@ (80108fc <TIM_OC5_SetConfig+0xc0>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d003      	beq.n	80108b2 <TIM_OC5_SetConfig+0x76>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4a14      	ldr	r2, [pc, #80]	@ (8010900 <TIM_OC5_SetConfig+0xc4>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d109      	bne.n	80108c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80108b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	695b      	ldr	r3, [r3, #20]
 80108be:	021b      	lsls	r3, r3, #8
 80108c0:	697a      	ldr	r2, [r7, #20]
 80108c2:	4313      	orrs	r3, r2
 80108c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	697a      	ldr	r2, [r7, #20]
 80108ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	68fa      	ldr	r2, [r7, #12]
 80108d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	685a      	ldr	r2, [r3, #4]
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	693a      	ldr	r2, [r7, #16]
 80108de:	621a      	str	r2, [r3, #32]
}
 80108e0:	bf00      	nop
 80108e2:	371c      	adds	r7, #28
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr
 80108ec:	fffeff8f 	.word	0xfffeff8f
 80108f0:	40010000 	.word	0x40010000
 80108f4:	40010400 	.word	0x40010400
 80108f8:	40014000 	.word	0x40014000
 80108fc:	40014400 	.word	0x40014400
 8010900:	40014800 	.word	0x40014800

08010904 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010904:	b480      	push	{r7}
 8010906:	b087      	sub	sp, #28
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6a1b      	ldr	r3, [r3, #32]
 8010912:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6a1b      	ldr	r3, [r3, #32]
 8010918:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801092a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801092c:	68fa      	ldr	r2, [r7, #12]
 801092e:	4b22      	ldr	r3, [pc, #136]	@ (80109b8 <TIM_OC6_SetConfig+0xb4>)
 8010930:	4013      	ands	r3, r2
 8010932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	021b      	lsls	r3, r3, #8
 801093a:	68fa      	ldr	r2, [r7, #12]
 801093c:	4313      	orrs	r3, r2
 801093e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	689b      	ldr	r3, [r3, #8]
 801094c:	051b      	lsls	r3, r3, #20
 801094e:	693a      	ldr	r2, [r7, #16]
 8010950:	4313      	orrs	r3, r2
 8010952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	4a19      	ldr	r2, [pc, #100]	@ (80109bc <TIM_OC6_SetConfig+0xb8>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d00f      	beq.n	801097c <TIM_OC6_SetConfig+0x78>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	4a18      	ldr	r2, [pc, #96]	@ (80109c0 <TIM_OC6_SetConfig+0xbc>)
 8010960:	4293      	cmp	r3, r2
 8010962:	d00b      	beq.n	801097c <TIM_OC6_SetConfig+0x78>
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	4a17      	ldr	r2, [pc, #92]	@ (80109c4 <TIM_OC6_SetConfig+0xc0>)
 8010968:	4293      	cmp	r3, r2
 801096a:	d007      	beq.n	801097c <TIM_OC6_SetConfig+0x78>
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	4a16      	ldr	r2, [pc, #88]	@ (80109c8 <TIM_OC6_SetConfig+0xc4>)
 8010970:	4293      	cmp	r3, r2
 8010972:	d003      	beq.n	801097c <TIM_OC6_SetConfig+0x78>
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	4a15      	ldr	r2, [pc, #84]	@ (80109cc <TIM_OC6_SetConfig+0xc8>)
 8010978:	4293      	cmp	r3, r2
 801097a:	d109      	bne.n	8010990 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010982:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	695b      	ldr	r3, [r3, #20]
 8010988:	029b      	lsls	r3, r3, #10
 801098a:	697a      	ldr	r2, [r7, #20]
 801098c:	4313      	orrs	r3, r2
 801098e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	697a      	ldr	r2, [r7, #20]
 8010994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	68fa      	ldr	r2, [r7, #12]
 801099a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	685a      	ldr	r2, [r3, #4]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	693a      	ldr	r2, [r7, #16]
 80109a8:	621a      	str	r2, [r3, #32]
}
 80109aa:	bf00      	nop
 80109ac:	371c      	adds	r7, #28
 80109ae:	46bd      	mov	sp, r7
 80109b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b4:	4770      	bx	lr
 80109b6:	bf00      	nop
 80109b8:	feff8fff 	.word	0xfeff8fff
 80109bc:	40010000 	.word	0x40010000
 80109c0:	40010400 	.word	0x40010400
 80109c4:	40014000 	.word	0x40014000
 80109c8:	40014400 	.word	0x40014400
 80109cc:	40014800 	.word	0x40014800

080109d0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b086      	sub	sp, #24
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80109da:	2300      	movs	r3, #0
 80109dc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	689b      	ldr	r3, [r3, #8]
 80109e4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80109e6:	693a      	ldr	r2, [r7, #16]
 80109e8:	4b65      	ldr	r3, [pc, #404]	@ (8010b80 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80109ea:	4013      	ands	r3, r2
 80109ec:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	693a      	ldr	r2, [r7, #16]
 80109f4:	4313      	orrs	r3, r2
 80109f6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80109f8:	693a      	ldr	r2, [r7, #16]
 80109fa:	4b62      	ldr	r3, [pc, #392]	@ (8010b84 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80109fc:	4013      	ands	r3, r2
 80109fe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	693a      	ldr	r2, [r7, #16]
 8010a06:	4313      	orrs	r3, r2
 8010a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	693a      	ldr	r2, [r7, #16]
 8010a10:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	4a5c      	ldr	r2, [pc, #368]	@ (8010b88 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	f000 80ab 	beq.w	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010a1e:	4a5a      	ldr	r2, [pc, #360]	@ (8010b88 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8010a20:	4293      	cmp	r3, r2
 8010a22:	f200 80a4 	bhi.w	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010a26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010a2a:	f000 80a3 	beq.w	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010a2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010a32:	f200 809c 	bhi.w	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010a36:	4a55      	ldr	r2, [pc, #340]	@ (8010b8c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	f000 809b 	beq.w	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010a3e:	4a53      	ldr	r2, [pc, #332]	@ (8010b8c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	f200 8094 	bhi.w	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010a46:	4a52      	ldr	r2, [pc, #328]	@ (8010b90 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8010a48:	4293      	cmp	r3, r2
 8010a4a:	f000 8093 	beq.w	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010a4e:	4a50      	ldr	r2, [pc, #320]	@ (8010b90 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8010a50:	4293      	cmp	r3, r2
 8010a52:	f200 808c 	bhi.w	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010a56:	4a4f      	ldr	r2, [pc, #316]	@ (8010b94 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	f000 808b 	beq.w	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010a5e:	4a4d      	ldr	r2, [pc, #308]	@ (8010b94 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8010a60:	4293      	cmp	r3, r2
 8010a62:	f200 8084 	bhi.w	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010a66:	4a4c      	ldr	r2, [pc, #304]	@ (8010b98 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	f000 8083 	beq.w	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8010b98 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d87c      	bhi.n	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010a74:	4a49      	ldr	r2, [pc, #292]	@ (8010b9c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d07c      	beq.n	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010a7a:	4a48      	ldr	r2, [pc, #288]	@ (8010b9c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d876      	bhi.n	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010a80:	4a47      	ldr	r2, [pc, #284]	@ (8010ba0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d076      	beq.n	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010a86:	4a46      	ldr	r2, [pc, #280]	@ (8010ba0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d870      	bhi.n	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010a8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010a90:	d070      	beq.n	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010a92:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010a96:	d86a      	bhi.n	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010a98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010a9c:	d06a      	beq.n	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010aa2:	d864      	bhi.n	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010aa4:	2b70      	cmp	r3, #112	@ 0x70
 8010aa6:	d01a      	beq.n	8010ade <TIM_SlaveTimer_SetConfig+0x10e>
 8010aa8:	2b70      	cmp	r3, #112	@ 0x70
 8010aaa:	d860      	bhi.n	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010aac:	2b60      	cmp	r3, #96	@ 0x60
 8010aae:	d054      	beq.n	8010b5a <TIM_SlaveTimer_SetConfig+0x18a>
 8010ab0:	2b60      	cmp	r3, #96	@ 0x60
 8010ab2:	d85c      	bhi.n	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010ab4:	2b50      	cmp	r3, #80	@ 0x50
 8010ab6:	d046      	beq.n	8010b46 <TIM_SlaveTimer_SetConfig+0x176>
 8010ab8:	2b50      	cmp	r3, #80	@ 0x50
 8010aba:	d858      	bhi.n	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010abc:	2b40      	cmp	r3, #64	@ 0x40
 8010abe:	d019      	beq.n	8010af4 <TIM_SlaveTimer_SetConfig+0x124>
 8010ac0:	2b40      	cmp	r3, #64	@ 0x40
 8010ac2:	d854      	bhi.n	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010ac4:	2b30      	cmp	r3, #48	@ 0x30
 8010ac6:	d055      	beq.n	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010ac8:	2b30      	cmp	r3, #48	@ 0x30
 8010aca:	d850      	bhi.n	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010acc:	2b20      	cmp	r3, #32
 8010ace:	d051      	beq.n	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010ad0:	2b20      	cmp	r3, #32
 8010ad2:	d84c      	bhi.n	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d04d      	beq.n	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010ad8:	2b10      	cmp	r3, #16
 8010ada:	d04b      	beq.n	8010b74 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010adc:	e047      	b.n	8010b6e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8010aee:	f000 f8d7 	bl	8010ca0 <TIM_ETR_SetConfig>
      break;
 8010af2:	e040      	b.n	8010b76 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	2b05      	cmp	r3, #5
 8010afa:	d101      	bne.n	8010b00 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8010afc:	2301      	movs	r3, #1
 8010afe:	e03b      	b.n	8010b78 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	6a1b      	ldr	r3, [r3, #32]
 8010b06:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	6a1a      	ldr	r2, [r3, #32]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	f022 0201 	bic.w	r2, r2, #1
 8010b16:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	699b      	ldr	r3, [r3, #24]
 8010b1e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010b26:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	691b      	ldr	r3, [r3, #16]
 8010b2c:	011b      	lsls	r3, r3, #4
 8010b2e:	68ba      	ldr	r2, [r7, #8]
 8010b30:	4313      	orrs	r3, r2
 8010b32:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	68ba      	ldr	r2, [r7, #8]
 8010b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	68fa      	ldr	r2, [r7, #12]
 8010b42:	621a      	str	r2, [r3, #32]
      break;
 8010b44:	e017      	b.n	8010b76 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b52:	461a      	mov	r2, r3
 8010b54:	f000 f826 	bl	8010ba4 <TIM_TI1_ConfigInputStage>
      break;
 8010b58:	e00d      	b.n	8010b76 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010b66:	461a      	mov	r2, r3
 8010b68:	f000 f84b 	bl	8010c02 <TIM_TI2_ConfigInputStage>
      break;
 8010b6c:	e003      	b.n	8010b76 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8010b6e:	2301      	movs	r3, #1
 8010b70:	75fb      	strb	r3, [r7, #23]
      break;
 8010b72:	e000      	b.n	8010b76 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8010b74:	bf00      	nop
  }

  return status;
 8010b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3718      	adds	r7, #24
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	ffcfff8f 	.word	0xffcfff8f
 8010b84:	fffefff8 	.word	0xfffefff8
 8010b88:	00200010 	.word	0x00200010
 8010b8c:	00100070 	.word	0x00100070
 8010b90:	00100060 	.word	0x00100060
 8010b94:	00100050 	.word	0x00100050
 8010b98:	00100040 	.word	0x00100040
 8010b9c:	00100030 	.word	0x00100030
 8010ba0:	00100020 	.word	0x00100020

08010ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010ba4:	b480      	push	{r7}
 8010ba6:	b087      	sub	sp, #28
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	60f8      	str	r0, [r7, #12]
 8010bac:	60b9      	str	r1, [r7, #8]
 8010bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	6a1b      	ldr	r3, [r3, #32]
 8010bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	6a1b      	ldr	r3, [r3, #32]
 8010bba:	f023 0201 	bic.w	r2, r3, #1
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	699b      	ldr	r3, [r3, #24]
 8010bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	011b      	lsls	r3, r3, #4
 8010bd4:	693a      	ldr	r2, [r7, #16]
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	f023 030a 	bic.w	r3, r3, #10
 8010be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010be2:	697a      	ldr	r2, [r7, #20]
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	4313      	orrs	r3, r2
 8010be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	693a      	ldr	r2, [r7, #16]
 8010bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	697a      	ldr	r2, [r7, #20]
 8010bf4:	621a      	str	r2, [r3, #32]
}
 8010bf6:	bf00      	nop
 8010bf8:	371c      	adds	r7, #28
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr

08010c02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010c02:	b480      	push	{r7}
 8010c04:	b087      	sub	sp, #28
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	60f8      	str	r0, [r7, #12]
 8010c0a:	60b9      	str	r1, [r7, #8]
 8010c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	6a1b      	ldr	r3, [r3, #32]
 8010c12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	6a1b      	ldr	r3, [r3, #32]
 8010c18:	f023 0210 	bic.w	r2, r3, #16
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	699b      	ldr	r3, [r3, #24]
 8010c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010c26:	693b      	ldr	r3, [r7, #16]
 8010c28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	031b      	lsls	r3, r3, #12
 8010c32:	693a      	ldr	r2, [r7, #16]
 8010c34:	4313      	orrs	r3, r2
 8010c36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010c3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	011b      	lsls	r3, r3, #4
 8010c44:	697a      	ldr	r2, [r7, #20]
 8010c46:	4313      	orrs	r3, r2
 8010c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	693a      	ldr	r2, [r7, #16]
 8010c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	697a      	ldr	r2, [r7, #20]
 8010c54:	621a      	str	r2, [r3, #32]
}
 8010c56:	bf00      	nop
 8010c58:	371c      	adds	r7, #28
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c60:	4770      	bx	lr
	...

08010c64 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010c64:	b480      	push	{r7}
 8010c66:	b085      	sub	sp, #20
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	689b      	ldr	r3, [r3, #8]
 8010c72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010c74:	68fa      	ldr	r2, [r7, #12]
 8010c76:	4b09      	ldr	r3, [pc, #36]	@ (8010c9c <TIM_ITRx_SetConfig+0x38>)
 8010c78:	4013      	ands	r3, r2
 8010c7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010c7c:	683a      	ldr	r2, [r7, #0]
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	4313      	orrs	r3, r2
 8010c82:	f043 0307 	orr.w	r3, r3, #7
 8010c86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	68fa      	ldr	r2, [r7, #12]
 8010c8c:	609a      	str	r2, [r3, #8]
}
 8010c8e:	bf00      	nop
 8010c90:	3714      	adds	r7, #20
 8010c92:	46bd      	mov	sp, r7
 8010c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c98:	4770      	bx	lr
 8010c9a:	bf00      	nop
 8010c9c:	ffcfff8f 	.word	0xffcfff8f

08010ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010ca0:	b480      	push	{r7}
 8010ca2:	b087      	sub	sp, #28
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	60f8      	str	r0, [r7, #12]
 8010ca8:	60b9      	str	r1, [r7, #8]
 8010caa:	607a      	str	r2, [r7, #4]
 8010cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	689b      	ldr	r3, [r3, #8]
 8010cb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010cba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	021a      	lsls	r2, r3, #8
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	431a      	orrs	r2, r3
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	697a      	ldr	r2, [r7, #20]
 8010cca:	4313      	orrs	r3, r2
 8010ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	697a      	ldr	r2, [r7, #20]
 8010cd2:	609a      	str	r2, [r3, #8]
}
 8010cd4:	bf00      	nop
 8010cd6:	371c      	adds	r7, #28
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b087      	sub	sp, #28
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	60f8      	str	r0, [r7, #12]
 8010ce8:	60b9      	str	r1, [r7, #8]
 8010cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	f003 031f 	and.w	r3, r3, #31
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8010cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	6a1a      	ldr	r2, [r3, #32]
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	43db      	mvns	r3, r3
 8010d02:	401a      	ands	r2, r3
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	6a1a      	ldr	r2, [r3, #32]
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	f003 031f 	and.w	r3, r3, #31
 8010d12:	6879      	ldr	r1, [r7, #4]
 8010d14:	fa01 f303 	lsl.w	r3, r1, r3
 8010d18:	431a      	orrs	r2, r3
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	621a      	str	r2, [r3, #32]
}
 8010d1e:	bf00      	nop
 8010d20:	371c      	adds	r7, #28
 8010d22:	46bd      	mov	sp, r7
 8010d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d28:	4770      	bx	lr
	...

08010d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b085      	sub	sp, #20
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d101      	bne.n	8010d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010d40:	2302      	movs	r3, #2
 8010d42:	e077      	b.n	8010e34 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2201      	movs	r2, #1
 8010d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2202      	movs	r2, #2
 8010d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	685b      	ldr	r3, [r3, #4]
 8010d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	4a35      	ldr	r2, [pc, #212]	@ (8010e40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010d6a:	4293      	cmp	r3, r2
 8010d6c:	d004      	beq.n	8010d78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	4a34      	ldr	r2, [pc, #208]	@ (8010e44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010d74:	4293      	cmp	r3, r2
 8010d76:	d108      	bne.n	8010d8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010d7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	68fa      	ldr	r2, [r7, #12]
 8010d86:	4313      	orrs	r3, r2
 8010d88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010d90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	68fa      	ldr	r2, [r7, #12]
 8010d98:	4313      	orrs	r3, r2
 8010d9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	68fa      	ldr	r2, [r7, #12]
 8010da2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	4a25      	ldr	r2, [pc, #148]	@ (8010e40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010daa:	4293      	cmp	r3, r2
 8010dac:	d02c      	beq.n	8010e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010db6:	d027      	beq.n	8010e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	4a22      	ldr	r2, [pc, #136]	@ (8010e48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d022      	beq.n	8010e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	4a21      	ldr	r2, [pc, #132]	@ (8010e4c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010dc8:	4293      	cmp	r3, r2
 8010dca:	d01d      	beq.n	8010e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8010e50 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d018      	beq.n	8010e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	4a1a      	ldr	r2, [pc, #104]	@ (8010e44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d013      	beq.n	8010e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	4a1b      	ldr	r2, [pc, #108]	@ (8010e54 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010de6:	4293      	cmp	r3, r2
 8010de8:	d00e      	beq.n	8010e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	4a1a      	ldr	r2, [pc, #104]	@ (8010e58 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010df0:	4293      	cmp	r3, r2
 8010df2:	d009      	beq.n	8010e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	4a18      	ldr	r2, [pc, #96]	@ (8010e5c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d004      	beq.n	8010e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	4a17      	ldr	r2, [pc, #92]	@ (8010e60 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010e04:	4293      	cmp	r3, r2
 8010e06:	d10c      	bne.n	8010e22 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010e0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	689b      	ldr	r3, [r3, #8]
 8010e14:	68ba      	ldr	r2, [r7, #8]
 8010e16:	4313      	orrs	r3, r2
 8010e18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	68ba      	ldr	r2, [r7, #8]
 8010e20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2201      	movs	r2, #1
 8010e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010e32:	2300      	movs	r3, #0
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3714      	adds	r7, #20
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3e:	4770      	bx	lr
 8010e40:	40010000 	.word	0x40010000
 8010e44:	40010400 	.word	0x40010400
 8010e48:	40000400 	.word	0x40000400
 8010e4c:	40000800 	.word	0x40000800
 8010e50:	40000c00 	.word	0x40000c00
 8010e54:	40001800 	.word	0x40001800
 8010e58:	40014000 	.word	0x40014000
 8010e5c:	4000e000 	.word	0x4000e000
 8010e60:	4000e400 	.word	0x4000e400

08010e64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b085      	sub	sp, #20
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010e78:	2b01      	cmp	r3, #1
 8010e7a:	d101      	bne.n	8010e80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010e7c:	2302      	movs	r3, #2
 8010e7e:	e073      	b.n	8010f68 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2201      	movs	r2, #1
 8010e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	68db      	ldr	r3, [r3, #12]
 8010e92:	4313      	orrs	r3, r2
 8010e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	689b      	ldr	r3, [r3, #8]
 8010ea0:	4313      	orrs	r3, r2
 8010ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	4313      	orrs	r3, r2
 8010ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	691b      	ldr	r3, [r3, #16]
 8010eca:	4313      	orrs	r3, r2
 8010ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	695b      	ldr	r3, [r3, #20]
 8010ed8:	4313      	orrs	r3, r2
 8010eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ee6:	4313      	orrs	r3, r2
 8010ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	699b      	ldr	r3, [r3, #24]
 8010ef4:	041b      	lsls	r3, r3, #16
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	69db      	ldr	r3, [r3, #28]
 8010f04:	4313      	orrs	r3, r2
 8010f06:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	4a19      	ldr	r2, [pc, #100]	@ (8010f74 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d004      	beq.n	8010f1c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4a18      	ldr	r2, [pc, #96]	@ (8010f78 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d11c      	bne.n	8010f56 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f26:	051b      	lsls	r3, r3, #20
 8010f28:	4313      	orrs	r3, r2
 8010f2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	6a1b      	ldr	r3, [r3, #32]
 8010f36:	4313      	orrs	r3, r2
 8010f38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f44:	4313      	orrs	r3, r2
 8010f46:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f52:	4313      	orrs	r3, r2
 8010f54:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	68fa      	ldr	r2, [r7, #12]
 8010f5c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2200      	movs	r2, #0
 8010f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010f66:	2300      	movs	r3, #0
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3714      	adds	r7, #20
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr
 8010f74:	40010000 	.word	0x40010000
 8010f78:	40010400 	.word	0x40010400

08010f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010f84:	bf00      	nop
 8010f86:	370c      	adds	r7, #12
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8e:	4770      	bx	lr

08010f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010f90:	b480      	push	{r7}
 8010f92:	b083      	sub	sp, #12
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010f98:	bf00      	nop
 8010f9a:	370c      	adds	r7, #12
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa2:	4770      	bx	lr

08010fa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010fac:	bf00      	nop
 8010fae:	370c      	adds	r7, #12
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d101      	bne.n	8010fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	e042      	b.n	8011050 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d106      	bne.n	8010fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f7f2 faa9 	bl	8003534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2224      	movs	r2, #36	@ 0x24
 8010fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	681a      	ldr	r2, [r3, #0]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	f022 0201 	bic.w	r2, r2, #1
 8010ff8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d002      	beq.n	8011008 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 ff22 	bl	8011e4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f000 f8b3 	bl	8011174 <UART_SetConfig>
 801100e:	4603      	mov	r3, r0
 8011010:	2b01      	cmp	r3, #1
 8011012:	d101      	bne.n	8011018 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8011014:	2301      	movs	r3, #1
 8011016:	e01b      	b.n	8011050 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	685a      	ldr	r2, [r3, #4]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	689a      	ldr	r2, [r3, #8]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	681a      	ldr	r2, [r3, #0]
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	f042 0201 	orr.w	r2, r2, #1
 8011046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f000 ffa1 	bl	8011f90 <UART_CheckIdleState>
 801104e:	4603      	mov	r3, r0
}
 8011050:	4618      	mov	r0, r3
 8011052:	3708      	adds	r7, #8
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08a      	sub	sp, #40	@ 0x28
 801105c:	af02      	add	r7, sp, #8
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	60b9      	str	r1, [r7, #8]
 8011062:	603b      	str	r3, [r7, #0]
 8011064:	4613      	mov	r3, r2
 8011066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801106e:	2b20      	cmp	r3, #32
 8011070:	d17b      	bne.n	801116a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d002      	beq.n	801107e <HAL_UART_Transmit+0x26>
 8011078:	88fb      	ldrh	r3, [r7, #6]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d101      	bne.n	8011082 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801107e:	2301      	movs	r3, #1
 8011080:	e074      	b.n	801116c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	2200      	movs	r2, #0
 8011086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2221      	movs	r2, #33	@ 0x21
 801108e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011092:	f7f3 ff17 	bl	8004ec4 <HAL_GetTick>
 8011096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	88fa      	ldrh	r2, [r7, #6]
 801109c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	88fa      	ldrh	r2, [r7, #6]
 80110a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	689b      	ldr	r3, [r3, #8]
 80110ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80110b0:	d108      	bne.n	80110c4 <HAL_UART_Transmit+0x6c>
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	691b      	ldr	r3, [r3, #16]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d104      	bne.n	80110c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80110ba:	2300      	movs	r3, #0
 80110bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	61bb      	str	r3, [r7, #24]
 80110c2:	e003      	b.n	80110cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80110c8:	2300      	movs	r3, #0
 80110ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80110cc:	e030      	b.n	8011130 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	2200      	movs	r2, #0
 80110d6:	2180      	movs	r1, #128	@ 0x80
 80110d8:	68f8      	ldr	r0, [r7, #12]
 80110da:	f001 f803 	bl	80120e4 <UART_WaitOnFlagUntilTimeout>
 80110de:	4603      	mov	r3, r0
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d005      	beq.n	80110f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	2220      	movs	r2, #32
 80110e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80110ec:	2303      	movs	r3, #3
 80110ee:	e03d      	b.n	801116c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80110f0:	69fb      	ldr	r3, [r7, #28]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d10b      	bne.n	801110e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	881b      	ldrh	r3, [r3, #0]
 80110fa:	461a      	mov	r2, r3
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011104:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011106:	69bb      	ldr	r3, [r7, #24]
 8011108:	3302      	adds	r3, #2
 801110a:	61bb      	str	r3, [r7, #24]
 801110c:	e007      	b.n	801111e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801110e:	69fb      	ldr	r3, [r7, #28]
 8011110:	781a      	ldrb	r2, [r3, #0]
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011118:	69fb      	ldr	r3, [r7, #28]
 801111a:	3301      	adds	r3, #1
 801111c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011124:	b29b      	uxth	r3, r3
 8011126:	3b01      	subs	r3, #1
 8011128:	b29a      	uxth	r2, r3
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011136:	b29b      	uxth	r3, r3
 8011138:	2b00      	cmp	r3, #0
 801113a:	d1c8      	bne.n	80110ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	9300      	str	r3, [sp, #0]
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	2200      	movs	r2, #0
 8011144:	2140      	movs	r1, #64	@ 0x40
 8011146:	68f8      	ldr	r0, [r7, #12]
 8011148:	f000 ffcc 	bl	80120e4 <UART_WaitOnFlagUntilTimeout>
 801114c:	4603      	mov	r3, r0
 801114e:	2b00      	cmp	r3, #0
 8011150:	d005      	beq.n	801115e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	2220      	movs	r2, #32
 8011156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801115a:	2303      	movs	r3, #3
 801115c:	e006      	b.n	801116c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	2220      	movs	r2, #32
 8011162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8011166:	2300      	movs	r3, #0
 8011168:	e000      	b.n	801116c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801116a:	2302      	movs	r3, #2
  }
}
 801116c:	4618      	mov	r0, r3
 801116e:	3720      	adds	r7, #32
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011178:	b092      	sub	sp, #72	@ 0x48
 801117a:	af00      	add	r7, sp, #0
 801117c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801117e:	2300      	movs	r3, #0
 8011180:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	689a      	ldr	r2, [r3, #8]
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	691b      	ldr	r3, [r3, #16]
 801118c:	431a      	orrs	r2, r3
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	695b      	ldr	r3, [r3, #20]
 8011192:	431a      	orrs	r2, r3
 8011194:	697b      	ldr	r3, [r7, #20]
 8011196:	69db      	ldr	r3, [r3, #28]
 8011198:	4313      	orrs	r3, r2
 801119a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	681a      	ldr	r2, [r3, #0]
 80111a2:	4bbe      	ldr	r3, [pc, #760]	@ (801149c <UART_SetConfig+0x328>)
 80111a4:	4013      	ands	r3, r2
 80111a6:	697a      	ldr	r2, [r7, #20]
 80111a8:	6812      	ldr	r2, [r2, #0]
 80111aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80111ac:	430b      	orrs	r3, r1
 80111ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	685b      	ldr	r3, [r3, #4]
 80111b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	68da      	ldr	r2, [r3, #12]
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	430a      	orrs	r2, r1
 80111c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	699b      	ldr	r3, [r3, #24]
 80111ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	4ab3      	ldr	r2, [pc, #716]	@ (80114a0 <UART_SetConfig+0x32c>)
 80111d2:	4293      	cmp	r3, r2
 80111d4:	d004      	beq.n	80111e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	6a1b      	ldr	r3, [r3, #32]
 80111da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80111dc:	4313      	orrs	r3, r2
 80111de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	689a      	ldr	r2, [r3, #8]
 80111e6:	4baf      	ldr	r3, [pc, #700]	@ (80114a4 <UART_SetConfig+0x330>)
 80111e8:	4013      	ands	r3, r2
 80111ea:	697a      	ldr	r2, [r7, #20]
 80111ec:	6812      	ldr	r2, [r2, #0]
 80111ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80111f0:	430b      	orrs	r3, r1
 80111f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111fa:	f023 010f 	bic.w	r1, r3, #15
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	430a      	orrs	r2, r1
 8011208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	4aa6      	ldr	r2, [pc, #664]	@ (80114a8 <UART_SetConfig+0x334>)
 8011210:	4293      	cmp	r3, r2
 8011212:	d177      	bne.n	8011304 <UART_SetConfig+0x190>
 8011214:	4ba5      	ldr	r3, [pc, #660]	@ (80114ac <UART_SetConfig+0x338>)
 8011216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011218:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801121c:	2b28      	cmp	r3, #40	@ 0x28
 801121e:	d86d      	bhi.n	80112fc <UART_SetConfig+0x188>
 8011220:	a201      	add	r2, pc, #4	@ (adr r2, 8011228 <UART_SetConfig+0xb4>)
 8011222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011226:	bf00      	nop
 8011228:	080112cd 	.word	0x080112cd
 801122c:	080112fd 	.word	0x080112fd
 8011230:	080112fd 	.word	0x080112fd
 8011234:	080112fd 	.word	0x080112fd
 8011238:	080112fd 	.word	0x080112fd
 801123c:	080112fd 	.word	0x080112fd
 8011240:	080112fd 	.word	0x080112fd
 8011244:	080112fd 	.word	0x080112fd
 8011248:	080112d5 	.word	0x080112d5
 801124c:	080112fd 	.word	0x080112fd
 8011250:	080112fd 	.word	0x080112fd
 8011254:	080112fd 	.word	0x080112fd
 8011258:	080112fd 	.word	0x080112fd
 801125c:	080112fd 	.word	0x080112fd
 8011260:	080112fd 	.word	0x080112fd
 8011264:	080112fd 	.word	0x080112fd
 8011268:	080112dd 	.word	0x080112dd
 801126c:	080112fd 	.word	0x080112fd
 8011270:	080112fd 	.word	0x080112fd
 8011274:	080112fd 	.word	0x080112fd
 8011278:	080112fd 	.word	0x080112fd
 801127c:	080112fd 	.word	0x080112fd
 8011280:	080112fd 	.word	0x080112fd
 8011284:	080112fd 	.word	0x080112fd
 8011288:	080112e5 	.word	0x080112e5
 801128c:	080112fd 	.word	0x080112fd
 8011290:	080112fd 	.word	0x080112fd
 8011294:	080112fd 	.word	0x080112fd
 8011298:	080112fd 	.word	0x080112fd
 801129c:	080112fd 	.word	0x080112fd
 80112a0:	080112fd 	.word	0x080112fd
 80112a4:	080112fd 	.word	0x080112fd
 80112a8:	080112ed 	.word	0x080112ed
 80112ac:	080112fd 	.word	0x080112fd
 80112b0:	080112fd 	.word	0x080112fd
 80112b4:	080112fd 	.word	0x080112fd
 80112b8:	080112fd 	.word	0x080112fd
 80112bc:	080112fd 	.word	0x080112fd
 80112c0:	080112fd 	.word	0x080112fd
 80112c4:	080112fd 	.word	0x080112fd
 80112c8:	080112f5 	.word	0x080112f5
 80112cc:	2301      	movs	r3, #1
 80112ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80112d2:	e326      	b.n	8011922 <UART_SetConfig+0x7ae>
 80112d4:	2304      	movs	r3, #4
 80112d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80112da:	e322      	b.n	8011922 <UART_SetConfig+0x7ae>
 80112dc:	2308      	movs	r3, #8
 80112de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80112e2:	e31e      	b.n	8011922 <UART_SetConfig+0x7ae>
 80112e4:	2310      	movs	r3, #16
 80112e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80112ea:	e31a      	b.n	8011922 <UART_SetConfig+0x7ae>
 80112ec:	2320      	movs	r3, #32
 80112ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80112f2:	e316      	b.n	8011922 <UART_SetConfig+0x7ae>
 80112f4:	2340      	movs	r3, #64	@ 0x40
 80112f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80112fa:	e312      	b.n	8011922 <UART_SetConfig+0x7ae>
 80112fc:	2380      	movs	r3, #128	@ 0x80
 80112fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011302:	e30e      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4a69      	ldr	r2, [pc, #420]	@ (80114b0 <UART_SetConfig+0x33c>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d130      	bne.n	8011370 <UART_SetConfig+0x1fc>
 801130e:	4b67      	ldr	r3, [pc, #412]	@ (80114ac <UART_SetConfig+0x338>)
 8011310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011312:	f003 0307 	and.w	r3, r3, #7
 8011316:	2b05      	cmp	r3, #5
 8011318:	d826      	bhi.n	8011368 <UART_SetConfig+0x1f4>
 801131a:	a201      	add	r2, pc, #4	@ (adr r2, 8011320 <UART_SetConfig+0x1ac>)
 801131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011320:	08011339 	.word	0x08011339
 8011324:	08011341 	.word	0x08011341
 8011328:	08011349 	.word	0x08011349
 801132c:	08011351 	.word	0x08011351
 8011330:	08011359 	.word	0x08011359
 8011334:	08011361 	.word	0x08011361
 8011338:	2300      	movs	r3, #0
 801133a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801133e:	e2f0      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011340:	2304      	movs	r3, #4
 8011342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011346:	e2ec      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011348:	2308      	movs	r3, #8
 801134a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801134e:	e2e8      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011350:	2310      	movs	r3, #16
 8011352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011356:	e2e4      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011358:	2320      	movs	r3, #32
 801135a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801135e:	e2e0      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011360:	2340      	movs	r3, #64	@ 0x40
 8011362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011366:	e2dc      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011368:	2380      	movs	r3, #128	@ 0x80
 801136a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801136e:	e2d8      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	4a4f      	ldr	r2, [pc, #316]	@ (80114b4 <UART_SetConfig+0x340>)
 8011376:	4293      	cmp	r3, r2
 8011378:	d130      	bne.n	80113dc <UART_SetConfig+0x268>
 801137a:	4b4c      	ldr	r3, [pc, #304]	@ (80114ac <UART_SetConfig+0x338>)
 801137c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801137e:	f003 0307 	and.w	r3, r3, #7
 8011382:	2b05      	cmp	r3, #5
 8011384:	d826      	bhi.n	80113d4 <UART_SetConfig+0x260>
 8011386:	a201      	add	r2, pc, #4	@ (adr r2, 801138c <UART_SetConfig+0x218>)
 8011388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801138c:	080113a5 	.word	0x080113a5
 8011390:	080113ad 	.word	0x080113ad
 8011394:	080113b5 	.word	0x080113b5
 8011398:	080113bd 	.word	0x080113bd
 801139c:	080113c5 	.word	0x080113c5
 80113a0:	080113cd 	.word	0x080113cd
 80113a4:	2300      	movs	r3, #0
 80113a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113aa:	e2ba      	b.n	8011922 <UART_SetConfig+0x7ae>
 80113ac:	2304      	movs	r3, #4
 80113ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113b2:	e2b6      	b.n	8011922 <UART_SetConfig+0x7ae>
 80113b4:	2308      	movs	r3, #8
 80113b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113ba:	e2b2      	b.n	8011922 <UART_SetConfig+0x7ae>
 80113bc:	2310      	movs	r3, #16
 80113be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113c2:	e2ae      	b.n	8011922 <UART_SetConfig+0x7ae>
 80113c4:	2320      	movs	r3, #32
 80113c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113ca:	e2aa      	b.n	8011922 <UART_SetConfig+0x7ae>
 80113cc:	2340      	movs	r3, #64	@ 0x40
 80113ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113d2:	e2a6      	b.n	8011922 <UART_SetConfig+0x7ae>
 80113d4:	2380      	movs	r3, #128	@ 0x80
 80113d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80113da:	e2a2      	b.n	8011922 <UART_SetConfig+0x7ae>
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	4a35      	ldr	r2, [pc, #212]	@ (80114b8 <UART_SetConfig+0x344>)
 80113e2:	4293      	cmp	r3, r2
 80113e4:	d130      	bne.n	8011448 <UART_SetConfig+0x2d4>
 80113e6:	4b31      	ldr	r3, [pc, #196]	@ (80114ac <UART_SetConfig+0x338>)
 80113e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113ea:	f003 0307 	and.w	r3, r3, #7
 80113ee:	2b05      	cmp	r3, #5
 80113f0:	d826      	bhi.n	8011440 <UART_SetConfig+0x2cc>
 80113f2:	a201      	add	r2, pc, #4	@ (adr r2, 80113f8 <UART_SetConfig+0x284>)
 80113f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f8:	08011411 	.word	0x08011411
 80113fc:	08011419 	.word	0x08011419
 8011400:	08011421 	.word	0x08011421
 8011404:	08011429 	.word	0x08011429
 8011408:	08011431 	.word	0x08011431
 801140c:	08011439 	.word	0x08011439
 8011410:	2300      	movs	r3, #0
 8011412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011416:	e284      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011418:	2304      	movs	r3, #4
 801141a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801141e:	e280      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011420:	2308      	movs	r3, #8
 8011422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011426:	e27c      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011428:	2310      	movs	r3, #16
 801142a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801142e:	e278      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011430:	2320      	movs	r3, #32
 8011432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011436:	e274      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011438:	2340      	movs	r3, #64	@ 0x40
 801143a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801143e:	e270      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011440:	2380      	movs	r3, #128	@ 0x80
 8011442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011446:	e26c      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4a1b      	ldr	r2, [pc, #108]	@ (80114bc <UART_SetConfig+0x348>)
 801144e:	4293      	cmp	r3, r2
 8011450:	d142      	bne.n	80114d8 <UART_SetConfig+0x364>
 8011452:	4b16      	ldr	r3, [pc, #88]	@ (80114ac <UART_SetConfig+0x338>)
 8011454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011456:	f003 0307 	and.w	r3, r3, #7
 801145a:	2b05      	cmp	r3, #5
 801145c:	d838      	bhi.n	80114d0 <UART_SetConfig+0x35c>
 801145e:	a201      	add	r2, pc, #4	@ (adr r2, 8011464 <UART_SetConfig+0x2f0>)
 8011460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011464:	0801147d 	.word	0x0801147d
 8011468:	08011485 	.word	0x08011485
 801146c:	0801148d 	.word	0x0801148d
 8011470:	08011495 	.word	0x08011495
 8011474:	080114c1 	.word	0x080114c1
 8011478:	080114c9 	.word	0x080114c9
 801147c:	2300      	movs	r3, #0
 801147e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011482:	e24e      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011484:	2304      	movs	r3, #4
 8011486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801148a:	e24a      	b.n	8011922 <UART_SetConfig+0x7ae>
 801148c:	2308      	movs	r3, #8
 801148e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011492:	e246      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011494:	2310      	movs	r3, #16
 8011496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801149a:	e242      	b.n	8011922 <UART_SetConfig+0x7ae>
 801149c:	cfff69f3 	.word	0xcfff69f3
 80114a0:	58000c00 	.word	0x58000c00
 80114a4:	11fff4ff 	.word	0x11fff4ff
 80114a8:	40011000 	.word	0x40011000
 80114ac:	58024400 	.word	0x58024400
 80114b0:	40004400 	.word	0x40004400
 80114b4:	40004800 	.word	0x40004800
 80114b8:	40004c00 	.word	0x40004c00
 80114bc:	40005000 	.word	0x40005000
 80114c0:	2320      	movs	r3, #32
 80114c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114c6:	e22c      	b.n	8011922 <UART_SetConfig+0x7ae>
 80114c8:	2340      	movs	r3, #64	@ 0x40
 80114ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114ce:	e228      	b.n	8011922 <UART_SetConfig+0x7ae>
 80114d0:	2380      	movs	r3, #128	@ 0x80
 80114d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80114d6:	e224      	b.n	8011922 <UART_SetConfig+0x7ae>
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	4ab1      	ldr	r2, [pc, #708]	@ (80117a4 <UART_SetConfig+0x630>)
 80114de:	4293      	cmp	r3, r2
 80114e0:	d176      	bne.n	80115d0 <UART_SetConfig+0x45c>
 80114e2:	4bb1      	ldr	r3, [pc, #708]	@ (80117a8 <UART_SetConfig+0x634>)
 80114e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80114ea:	2b28      	cmp	r3, #40	@ 0x28
 80114ec:	d86c      	bhi.n	80115c8 <UART_SetConfig+0x454>
 80114ee:	a201      	add	r2, pc, #4	@ (adr r2, 80114f4 <UART_SetConfig+0x380>)
 80114f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114f4:	08011599 	.word	0x08011599
 80114f8:	080115c9 	.word	0x080115c9
 80114fc:	080115c9 	.word	0x080115c9
 8011500:	080115c9 	.word	0x080115c9
 8011504:	080115c9 	.word	0x080115c9
 8011508:	080115c9 	.word	0x080115c9
 801150c:	080115c9 	.word	0x080115c9
 8011510:	080115c9 	.word	0x080115c9
 8011514:	080115a1 	.word	0x080115a1
 8011518:	080115c9 	.word	0x080115c9
 801151c:	080115c9 	.word	0x080115c9
 8011520:	080115c9 	.word	0x080115c9
 8011524:	080115c9 	.word	0x080115c9
 8011528:	080115c9 	.word	0x080115c9
 801152c:	080115c9 	.word	0x080115c9
 8011530:	080115c9 	.word	0x080115c9
 8011534:	080115a9 	.word	0x080115a9
 8011538:	080115c9 	.word	0x080115c9
 801153c:	080115c9 	.word	0x080115c9
 8011540:	080115c9 	.word	0x080115c9
 8011544:	080115c9 	.word	0x080115c9
 8011548:	080115c9 	.word	0x080115c9
 801154c:	080115c9 	.word	0x080115c9
 8011550:	080115c9 	.word	0x080115c9
 8011554:	080115b1 	.word	0x080115b1
 8011558:	080115c9 	.word	0x080115c9
 801155c:	080115c9 	.word	0x080115c9
 8011560:	080115c9 	.word	0x080115c9
 8011564:	080115c9 	.word	0x080115c9
 8011568:	080115c9 	.word	0x080115c9
 801156c:	080115c9 	.word	0x080115c9
 8011570:	080115c9 	.word	0x080115c9
 8011574:	080115b9 	.word	0x080115b9
 8011578:	080115c9 	.word	0x080115c9
 801157c:	080115c9 	.word	0x080115c9
 8011580:	080115c9 	.word	0x080115c9
 8011584:	080115c9 	.word	0x080115c9
 8011588:	080115c9 	.word	0x080115c9
 801158c:	080115c9 	.word	0x080115c9
 8011590:	080115c9 	.word	0x080115c9
 8011594:	080115c1 	.word	0x080115c1
 8011598:	2301      	movs	r3, #1
 801159a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801159e:	e1c0      	b.n	8011922 <UART_SetConfig+0x7ae>
 80115a0:	2304      	movs	r3, #4
 80115a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80115a6:	e1bc      	b.n	8011922 <UART_SetConfig+0x7ae>
 80115a8:	2308      	movs	r3, #8
 80115aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80115ae:	e1b8      	b.n	8011922 <UART_SetConfig+0x7ae>
 80115b0:	2310      	movs	r3, #16
 80115b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80115b6:	e1b4      	b.n	8011922 <UART_SetConfig+0x7ae>
 80115b8:	2320      	movs	r3, #32
 80115ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80115be:	e1b0      	b.n	8011922 <UART_SetConfig+0x7ae>
 80115c0:	2340      	movs	r3, #64	@ 0x40
 80115c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80115c6:	e1ac      	b.n	8011922 <UART_SetConfig+0x7ae>
 80115c8:	2380      	movs	r3, #128	@ 0x80
 80115ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80115ce:	e1a8      	b.n	8011922 <UART_SetConfig+0x7ae>
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	4a75      	ldr	r2, [pc, #468]	@ (80117ac <UART_SetConfig+0x638>)
 80115d6:	4293      	cmp	r3, r2
 80115d8:	d130      	bne.n	801163c <UART_SetConfig+0x4c8>
 80115da:	4b73      	ldr	r3, [pc, #460]	@ (80117a8 <UART_SetConfig+0x634>)
 80115dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80115de:	f003 0307 	and.w	r3, r3, #7
 80115e2:	2b05      	cmp	r3, #5
 80115e4:	d826      	bhi.n	8011634 <UART_SetConfig+0x4c0>
 80115e6:	a201      	add	r2, pc, #4	@ (adr r2, 80115ec <UART_SetConfig+0x478>)
 80115e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ec:	08011605 	.word	0x08011605
 80115f0:	0801160d 	.word	0x0801160d
 80115f4:	08011615 	.word	0x08011615
 80115f8:	0801161d 	.word	0x0801161d
 80115fc:	08011625 	.word	0x08011625
 8011600:	0801162d 	.word	0x0801162d
 8011604:	2300      	movs	r3, #0
 8011606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801160a:	e18a      	b.n	8011922 <UART_SetConfig+0x7ae>
 801160c:	2304      	movs	r3, #4
 801160e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011612:	e186      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011614:	2308      	movs	r3, #8
 8011616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801161a:	e182      	b.n	8011922 <UART_SetConfig+0x7ae>
 801161c:	2310      	movs	r3, #16
 801161e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011622:	e17e      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011624:	2320      	movs	r3, #32
 8011626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801162a:	e17a      	b.n	8011922 <UART_SetConfig+0x7ae>
 801162c:	2340      	movs	r3, #64	@ 0x40
 801162e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011632:	e176      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011634:	2380      	movs	r3, #128	@ 0x80
 8011636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801163a:	e172      	b.n	8011922 <UART_SetConfig+0x7ae>
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	4a5b      	ldr	r2, [pc, #364]	@ (80117b0 <UART_SetConfig+0x63c>)
 8011642:	4293      	cmp	r3, r2
 8011644:	d130      	bne.n	80116a8 <UART_SetConfig+0x534>
 8011646:	4b58      	ldr	r3, [pc, #352]	@ (80117a8 <UART_SetConfig+0x634>)
 8011648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801164a:	f003 0307 	and.w	r3, r3, #7
 801164e:	2b05      	cmp	r3, #5
 8011650:	d826      	bhi.n	80116a0 <UART_SetConfig+0x52c>
 8011652:	a201      	add	r2, pc, #4	@ (adr r2, 8011658 <UART_SetConfig+0x4e4>)
 8011654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011658:	08011671 	.word	0x08011671
 801165c:	08011679 	.word	0x08011679
 8011660:	08011681 	.word	0x08011681
 8011664:	08011689 	.word	0x08011689
 8011668:	08011691 	.word	0x08011691
 801166c:	08011699 	.word	0x08011699
 8011670:	2300      	movs	r3, #0
 8011672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011676:	e154      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011678:	2304      	movs	r3, #4
 801167a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801167e:	e150      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011680:	2308      	movs	r3, #8
 8011682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011686:	e14c      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011688:	2310      	movs	r3, #16
 801168a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801168e:	e148      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011690:	2320      	movs	r3, #32
 8011692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011696:	e144      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011698:	2340      	movs	r3, #64	@ 0x40
 801169a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801169e:	e140      	b.n	8011922 <UART_SetConfig+0x7ae>
 80116a0:	2380      	movs	r3, #128	@ 0x80
 80116a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80116a6:	e13c      	b.n	8011922 <UART_SetConfig+0x7ae>
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	4a41      	ldr	r2, [pc, #260]	@ (80117b4 <UART_SetConfig+0x640>)
 80116ae:	4293      	cmp	r3, r2
 80116b0:	f040 8082 	bne.w	80117b8 <UART_SetConfig+0x644>
 80116b4:	4b3c      	ldr	r3, [pc, #240]	@ (80117a8 <UART_SetConfig+0x634>)
 80116b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80116b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80116bc:	2b28      	cmp	r3, #40	@ 0x28
 80116be:	d86d      	bhi.n	801179c <UART_SetConfig+0x628>
 80116c0:	a201      	add	r2, pc, #4	@ (adr r2, 80116c8 <UART_SetConfig+0x554>)
 80116c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116c6:	bf00      	nop
 80116c8:	0801176d 	.word	0x0801176d
 80116cc:	0801179d 	.word	0x0801179d
 80116d0:	0801179d 	.word	0x0801179d
 80116d4:	0801179d 	.word	0x0801179d
 80116d8:	0801179d 	.word	0x0801179d
 80116dc:	0801179d 	.word	0x0801179d
 80116e0:	0801179d 	.word	0x0801179d
 80116e4:	0801179d 	.word	0x0801179d
 80116e8:	08011775 	.word	0x08011775
 80116ec:	0801179d 	.word	0x0801179d
 80116f0:	0801179d 	.word	0x0801179d
 80116f4:	0801179d 	.word	0x0801179d
 80116f8:	0801179d 	.word	0x0801179d
 80116fc:	0801179d 	.word	0x0801179d
 8011700:	0801179d 	.word	0x0801179d
 8011704:	0801179d 	.word	0x0801179d
 8011708:	0801177d 	.word	0x0801177d
 801170c:	0801179d 	.word	0x0801179d
 8011710:	0801179d 	.word	0x0801179d
 8011714:	0801179d 	.word	0x0801179d
 8011718:	0801179d 	.word	0x0801179d
 801171c:	0801179d 	.word	0x0801179d
 8011720:	0801179d 	.word	0x0801179d
 8011724:	0801179d 	.word	0x0801179d
 8011728:	08011785 	.word	0x08011785
 801172c:	0801179d 	.word	0x0801179d
 8011730:	0801179d 	.word	0x0801179d
 8011734:	0801179d 	.word	0x0801179d
 8011738:	0801179d 	.word	0x0801179d
 801173c:	0801179d 	.word	0x0801179d
 8011740:	0801179d 	.word	0x0801179d
 8011744:	0801179d 	.word	0x0801179d
 8011748:	0801178d 	.word	0x0801178d
 801174c:	0801179d 	.word	0x0801179d
 8011750:	0801179d 	.word	0x0801179d
 8011754:	0801179d 	.word	0x0801179d
 8011758:	0801179d 	.word	0x0801179d
 801175c:	0801179d 	.word	0x0801179d
 8011760:	0801179d 	.word	0x0801179d
 8011764:	0801179d 	.word	0x0801179d
 8011768:	08011795 	.word	0x08011795
 801176c:	2301      	movs	r3, #1
 801176e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011772:	e0d6      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011774:	2304      	movs	r3, #4
 8011776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801177a:	e0d2      	b.n	8011922 <UART_SetConfig+0x7ae>
 801177c:	2308      	movs	r3, #8
 801177e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011782:	e0ce      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011784:	2310      	movs	r3, #16
 8011786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801178a:	e0ca      	b.n	8011922 <UART_SetConfig+0x7ae>
 801178c:	2320      	movs	r3, #32
 801178e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011792:	e0c6      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011794:	2340      	movs	r3, #64	@ 0x40
 8011796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801179a:	e0c2      	b.n	8011922 <UART_SetConfig+0x7ae>
 801179c:	2380      	movs	r3, #128	@ 0x80
 801179e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117a2:	e0be      	b.n	8011922 <UART_SetConfig+0x7ae>
 80117a4:	40011400 	.word	0x40011400
 80117a8:	58024400 	.word	0x58024400
 80117ac:	40007800 	.word	0x40007800
 80117b0:	40007c00 	.word	0x40007c00
 80117b4:	40011800 	.word	0x40011800
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	4aad      	ldr	r2, [pc, #692]	@ (8011a74 <UART_SetConfig+0x900>)
 80117be:	4293      	cmp	r3, r2
 80117c0:	d176      	bne.n	80118b0 <UART_SetConfig+0x73c>
 80117c2:	4bad      	ldr	r3, [pc, #692]	@ (8011a78 <UART_SetConfig+0x904>)
 80117c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80117c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80117ca:	2b28      	cmp	r3, #40	@ 0x28
 80117cc:	d86c      	bhi.n	80118a8 <UART_SetConfig+0x734>
 80117ce:	a201      	add	r2, pc, #4	@ (adr r2, 80117d4 <UART_SetConfig+0x660>)
 80117d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117d4:	08011879 	.word	0x08011879
 80117d8:	080118a9 	.word	0x080118a9
 80117dc:	080118a9 	.word	0x080118a9
 80117e0:	080118a9 	.word	0x080118a9
 80117e4:	080118a9 	.word	0x080118a9
 80117e8:	080118a9 	.word	0x080118a9
 80117ec:	080118a9 	.word	0x080118a9
 80117f0:	080118a9 	.word	0x080118a9
 80117f4:	08011881 	.word	0x08011881
 80117f8:	080118a9 	.word	0x080118a9
 80117fc:	080118a9 	.word	0x080118a9
 8011800:	080118a9 	.word	0x080118a9
 8011804:	080118a9 	.word	0x080118a9
 8011808:	080118a9 	.word	0x080118a9
 801180c:	080118a9 	.word	0x080118a9
 8011810:	080118a9 	.word	0x080118a9
 8011814:	08011889 	.word	0x08011889
 8011818:	080118a9 	.word	0x080118a9
 801181c:	080118a9 	.word	0x080118a9
 8011820:	080118a9 	.word	0x080118a9
 8011824:	080118a9 	.word	0x080118a9
 8011828:	080118a9 	.word	0x080118a9
 801182c:	080118a9 	.word	0x080118a9
 8011830:	080118a9 	.word	0x080118a9
 8011834:	08011891 	.word	0x08011891
 8011838:	080118a9 	.word	0x080118a9
 801183c:	080118a9 	.word	0x080118a9
 8011840:	080118a9 	.word	0x080118a9
 8011844:	080118a9 	.word	0x080118a9
 8011848:	080118a9 	.word	0x080118a9
 801184c:	080118a9 	.word	0x080118a9
 8011850:	080118a9 	.word	0x080118a9
 8011854:	08011899 	.word	0x08011899
 8011858:	080118a9 	.word	0x080118a9
 801185c:	080118a9 	.word	0x080118a9
 8011860:	080118a9 	.word	0x080118a9
 8011864:	080118a9 	.word	0x080118a9
 8011868:	080118a9 	.word	0x080118a9
 801186c:	080118a9 	.word	0x080118a9
 8011870:	080118a9 	.word	0x080118a9
 8011874:	080118a1 	.word	0x080118a1
 8011878:	2301      	movs	r3, #1
 801187a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801187e:	e050      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011880:	2304      	movs	r3, #4
 8011882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011886:	e04c      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011888:	2308      	movs	r3, #8
 801188a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801188e:	e048      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011890:	2310      	movs	r3, #16
 8011892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011896:	e044      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011898:	2320      	movs	r3, #32
 801189a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801189e:	e040      	b.n	8011922 <UART_SetConfig+0x7ae>
 80118a0:	2340      	movs	r3, #64	@ 0x40
 80118a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118a6:	e03c      	b.n	8011922 <UART_SetConfig+0x7ae>
 80118a8:	2380      	movs	r3, #128	@ 0x80
 80118aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118ae:	e038      	b.n	8011922 <UART_SetConfig+0x7ae>
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	4a71      	ldr	r2, [pc, #452]	@ (8011a7c <UART_SetConfig+0x908>)
 80118b6:	4293      	cmp	r3, r2
 80118b8:	d130      	bne.n	801191c <UART_SetConfig+0x7a8>
 80118ba:	4b6f      	ldr	r3, [pc, #444]	@ (8011a78 <UART_SetConfig+0x904>)
 80118bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118be:	f003 0307 	and.w	r3, r3, #7
 80118c2:	2b05      	cmp	r3, #5
 80118c4:	d826      	bhi.n	8011914 <UART_SetConfig+0x7a0>
 80118c6:	a201      	add	r2, pc, #4	@ (adr r2, 80118cc <UART_SetConfig+0x758>)
 80118c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118cc:	080118e5 	.word	0x080118e5
 80118d0:	080118ed 	.word	0x080118ed
 80118d4:	080118f5 	.word	0x080118f5
 80118d8:	080118fd 	.word	0x080118fd
 80118dc:	08011905 	.word	0x08011905
 80118e0:	0801190d 	.word	0x0801190d
 80118e4:	2302      	movs	r3, #2
 80118e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118ea:	e01a      	b.n	8011922 <UART_SetConfig+0x7ae>
 80118ec:	2304      	movs	r3, #4
 80118ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118f2:	e016      	b.n	8011922 <UART_SetConfig+0x7ae>
 80118f4:	2308      	movs	r3, #8
 80118f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118fa:	e012      	b.n	8011922 <UART_SetConfig+0x7ae>
 80118fc:	2310      	movs	r3, #16
 80118fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011902:	e00e      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011904:	2320      	movs	r3, #32
 8011906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801190a:	e00a      	b.n	8011922 <UART_SetConfig+0x7ae>
 801190c:	2340      	movs	r3, #64	@ 0x40
 801190e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011912:	e006      	b.n	8011922 <UART_SetConfig+0x7ae>
 8011914:	2380      	movs	r3, #128	@ 0x80
 8011916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801191a:	e002      	b.n	8011922 <UART_SetConfig+0x7ae>
 801191c:	2380      	movs	r3, #128	@ 0x80
 801191e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	4a55      	ldr	r2, [pc, #340]	@ (8011a7c <UART_SetConfig+0x908>)
 8011928:	4293      	cmp	r3, r2
 801192a:	f040 80f8 	bne.w	8011b1e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801192e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011932:	2b20      	cmp	r3, #32
 8011934:	dc46      	bgt.n	80119c4 <UART_SetConfig+0x850>
 8011936:	2b02      	cmp	r3, #2
 8011938:	db75      	blt.n	8011a26 <UART_SetConfig+0x8b2>
 801193a:	3b02      	subs	r3, #2
 801193c:	2b1e      	cmp	r3, #30
 801193e:	d872      	bhi.n	8011a26 <UART_SetConfig+0x8b2>
 8011940:	a201      	add	r2, pc, #4	@ (adr r2, 8011948 <UART_SetConfig+0x7d4>)
 8011942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011946:	bf00      	nop
 8011948:	080119cb 	.word	0x080119cb
 801194c:	08011a27 	.word	0x08011a27
 8011950:	080119d3 	.word	0x080119d3
 8011954:	08011a27 	.word	0x08011a27
 8011958:	08011a27 	.word	0x08011a27
 801195c:	08011a27 	.word	0x08011a27
 8011960:	080119e3 	.word	0x080119e3
 8011964:	08011a27 	.word	0x08011a27
 8011968:	08011a27 	.word	0x08011a27
 801196c:	08011a27 	.word	0x08011a27
 8011970:	08011a27 	.word	0x08011a27
 8011974:	08011a27 	.word	0x08011a27
 8011978:	08011a27 	.word	0x08011a27
 801197c:	08011a27 	.word	0x08011a27
 8011980:	080119f3 	.word	0x080119f3
 8011984:	08011a27 	.word	0x08011a27
 8011988:	08011a27 	.word	0x08011a27
 801198c:	08011a27 	.word	0x08011a27
 8011990:	08011a27 	.word	0x08011a27
 8011994:	08011a27 	.word	0x08011a27
 8011998:	08011a27 	.word	0x08011a27
 801199c:	08011a27 	.word	0x08011a27
 80119a0:	08011a27 	.word	0x08011a27
 80119a4:	08011a27 	.word	0x08011a27
 80119a8:	08011a27 	.word	0x08011a27
 80119ac:	08011a27 	.word	0x08011a27
 80119b0:	08011a27 	.word	0x08011a27
 80119b4:	08011a27 	.word	0x08011a27
 80119b8:	08011a27 	.word	0x08011a27
 80119bc:	08011a27 	.word	0x08011a27
 80119c0:	08011a19 	.word	0x08011a19
 80119c4:	2b40      	cmp	r3, #64	@ 0x40
 80119c6:	d02a      	beq.n	8011a1e <UART_SetConfig+0x8aa>
 80119c8:	e02d      	b.n	8011a26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80119ca:	f7fc fcc3 	bl	800e354 <HAL_RCCEx_GetD3PCLK1Freq>
 80119ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80119d0:	e02f      	b.n	8011a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80119d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fc fcd2 	bl	800e380 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80119dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80119e0:	e027      	b.n	8011a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80119e2:	f107 0318 	add.w	r3, r7, #24
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7fc fe1e 	bl	800e628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80119ec:	69fb      	ldr	r3, [r7, #28]
 80119ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80119f0:	e01f      	b.n	8011a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80119f2:	4b21      	ldr	r3, [pc, #132]	@ (8011a78 <UART_SetConfig+0x904>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	f003 0320 	and.w	r3, r3, #32
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d009      	beq.n	8011a12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80119fe:	4b1e      	ldr	r3, [pc, #120]	@ (8011a78 <UART_SetConfig+0x904>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	08db      	lsrs	r3, r3, #3
 8011a04:	f003 0303 	and.w	r3, r3, #3
 8011a08:	4a1d      	ldr	r2, [pc, #116]	@ (8011a80 <UART_SetConfig+0x90c>)
 8011a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8011a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011a10:	e00f      	b.n	8011a32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011a12:	4b1b      	ldr	r3, [pc, #108]	@ (8011a80 <UART_SetConfig+0x90c>)
 8011a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011a16:	e00c      	b.n	8011a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011a18:	4b1a      	ldr	r3, [pc, #104]	@ (8011a84 <UART_SetConfig+0x910>)
 8011a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011a1c:	e009      	b.n	8011a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011a24:	e005      	b.n	8011a32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011a26:	2300      	movs	r3, #0
 8011a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011a30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	f000 81ee 	beq.w	8011e16 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a3e:	4a12      	ldr	r2, [pc, #72]	@ (8011a88 <UART_SetConfig+0x914>)
 8011a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a44:	461a      	mov	r2, r3
 8011a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a4c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	685a      	ldr	r2, [r3, #4]
 8011a52:	4613      	mov	r3, r2
 8011a54:	005b      	lsls	r3, r3, #1
 8011a56:	4413      	add	r3, r2
 8011a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d305      	bcc.n	8011a6a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d910      	bls.n	8011a8c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011a70:	e1d1      	b.n	8011e16 <UART_SetConfig+0xca2>
 8011a72:	bf00      	nop
 8011a74:	40011c00 	.word	0x40011c00
 8011a78:	58024400 	.word	0x58024400
 8011a7c:	58000c00 	.word	0x58000c00
 8011a80:	03d09000 	.word	0x03d09000
 8011a84:	003d0900 	.word	0x003d0900
 8011a88:	0801d918 	.word	0x0801d918
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a8e:	2200      	movs	r2, #0
 8011a90:	60bb      	str	r3, [r7, #8]
 8011a92:	60fa      	str	r2, [r7, #12]
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a98:	4ac0      	ldr	r2, [pc, #768]	@ (8011d9c <UART_SetConfig+0xc28>)
 8011a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	603b      	str	r3, [r7, #0]
 8011aa4:	607a      	str	r2, [r7, #4]
 8011aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011aaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011aae:	f7ee fc67 	bl	8000380 <__aeabi_uldivmod>
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	460b      	mov	r3, r1
 8011ab6:	4610      	mov	r0, r2
 8011ab8:	4619      	mov	r1, r3
 8011aba:	f04f 0200 	mov.w	r2, #0
 8011abe:	f04f 0300 	mov.w	r3, #0
 8011ac2:	020b      	lsls	r3, r1, #8
 8011ac4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011ac8:	0202      	lsls	r2, r0, #8
 8011aca:	6979      	ldr	r1, [r7, #20]
 8011acc:	6849      	ldr	r1, [r1, #4]
 8011ace:	0849      	lsrs	r1, r1, #1
 8011ad0:	2000      	movs	r0, #0
 8011ad2:	460c      	mov	r4, r1
 8011ad4:	4605      	mov	r5, r0
 8011ad6:	eb12 0804 	adds.w	r8, r2, r4
 8011ada:	eb43 0905 	adc.w	r9, r3, r5
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	685b      	ldr	r3, [r3, #4]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	469a      	mov	sl, r3
 8011ae6:	4693      	mov	fp, r2
 8011ae8:	4652      	mov	r2, sl
 8011aea:	465b      	mov	r3, fp
 8011aec:	4640      	mov	r0, r8
 8011aee:	4649      	mov	r1, r9
 8011af0:	f7ee fc46 	bl	8000380 <__aeabi_uldivmod>
 8011af4:	4602      	mov	r2, r0
 8011af6:	460b      	mov	r3, r1
 8011af8:	4613      	mov	r3, r2
 8011afa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011afe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011b02:	d308      	bcc.n	8011b16 <UART_SetConfig+0x9a2>
 8011b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011b0a:	d204      	bcs.n	8011b16 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b12:	60da      	str	r2, [r3, #12]
 8011b14:	e17f      	b.n	8011e16 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011b16:	2301      	movs	r3, #1
 8011b18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011b1c:	e17b      	b.n	8011e16 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	69db      	ldr	r3, [r3, #28]
 8011b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011b26:	f040 80bd 	bne.w	8011ca4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011b2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011b2e:	2b20      	cmp	r3, #32
 8011b30:	dc48      	bgt.n	8011bc4 <UART_SetConfig+0xa50>
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	db7b      	blt.n	8011c2e <UART_SetConfig+0xaba>
 8011b36:	2b20      	cmp	r3, #32
 8011b38:	d879      	bhi.n	8011c2e <UART_SetConfig+0xaba>
 8011b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8011b40 <UART_SetConfig+0x9cc>)
 8011b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b40:	08011bcb 	.word	0x08011bcb
 8011b44:	08011bd3 	.word	0x08011bd3
 8011b48:	08011c2f 	.word	0x08011c2f
 8011b4c:	08011c2f 	.word	0x08011c2f
 8011b50:	08011bdb 	.word	0x08011bdb
 8011b54:	08011c2f 	.word	0x08011c2f
 8011b58:	08011c2f 	.word	0x08011c2f
 8011b5c:	08011c2f 	.word	0x08011c2f
 8011b60:	08011beb 	.word	0x08011beb
 8011b64:	08011c2f 	.word	0x08011c2f
 8011b68:	08011c2f 	.word	0x08011c2f
 8011b6c:	08011c2f 	.word	0x08011c2f
 8011b70:	08011c2f 	.word	0x08011c2f
 8011b74:	08011c2f 	.word	0x08011c2f
 8011b78:	08011c2f 	.word	0x08011c2f
 8011b7c:	08011c2f 	.word	0x08011c2f
 8011b80:	08011bfb 	.word	0x08011bfb
 8011b84:	08011c2f 	.word	0x08011c2f
 8011b88:	08011c2f 	.word	0x08011c2f
 8011b8c:	08011c2f 	.word	0x08011c2f
 8011b90:	08011c2f 	.word	0x08011c2f
 8011b94:	08011c2f 	.word	0x08011c2f
 8011b98:	08011c2f 	.word	0x08011c2f
 8011b9c:	08011c2f 	.word	0x08011c2f
 8011ba0:	08011c2f 	.word	0x08011c2f
 8011ba4:	08011c2f 	.word	0x08011c2f
 8011ba8:	08011c2f 	.word	0x08011c2f
 8011bac:	08011c2f 	.word	0x08011c2f
 8011bb0:	08011c2f 	.word	0x08011c2f
 8011bb4:	08011c2f 	.word	0x08011c2f
 8011bb8:	08011c2f 	.word	0x08011c2f
 8011bbc:	08011c2f 	.word	0x08011c2f
 8011bc0:	08011c21 	.word	0x08011c21
 8011bc4:	2b40      	cmp	r3, #64	@ 0x40
 8011bc6:	d02e      	beq.n	8011c26 <UART_SetConfig+0xab2>
 8011bc8:	e031      	b.n	8011c2e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011bca:	f7fa fd25 	bl	800c618 <HAL_RCC_GetPCLK1Freq>
 8011bce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011bd0:	e033      	b.n	8011c3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011bd2:	f7fa fd37 	bl	800c644 <HAL_RCC_GetPCLK2Freq>
 8011bd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011bd8:	e02f      	b.n	8011c3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7fc fbce 	bl	800e380 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011be8:	e027      	b.n	8011c3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011bea:	f107 0318 	add.w	r3, r7, #24
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fc fd1a 	bl	800e628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011bf4:	69fb      	ldr	r3, [r7, #28]
 8011bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011bf8:	e01f      	b.n	8011c3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011bfa:	4b69      	ldr	r3, [pc, #420]	@ (8011da0 <UART_SetConfig+0xc2c>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	f003 0320 	and.w	r3, r3, #32
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d009      	beq.n	8011c1a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011c06:	4b66      	ldr	r3, [pc, #408]	@ (8011da0 <UART_SetConfig+0xc2c>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	08db      	lsrs	r3, r3, #3
 8011c0c:	f003 0303 	and.w	r3, r3, #3
 8011c10:	4a64      	ldr	r2, [pc, #400]	@ (8011da4 <UART_SetConfig+0xc30>)
 8011c12:	fa22 f303 	lsr.w	r3, r2, r3
 8011c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011c18:	e00f      	b.n	8011c3a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011c1a:	4b62      	ldr	r3, [pc, #392]	@ (8011da4 <UART_SetConfig+0xc30>)
 8011c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c1e:	e00c      	b.n	8011c3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011c20:	4b61      	ldr	r3, [pc, #388]	@ (8011da8 <UART_SetConfig+0xc34>)
 8011c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c24:	e009      	b.n	8011c3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011c2c:	e005      	b.n	8011c3a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011c32:	2301      	movs	r3, #1
 8011c34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011c38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	f000 80ea 	beq.w	8011e16 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c46:	4a55      	ldr	r2, [pc, #340]	@ (8011d9c <UART_SetConfig+0xc28>)
 8011c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c54:	005a      	lsls	r2, r3, #1
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	085b      	lsrs	r3, r3, #1
 8011c5c:	441a      	add	r2, r3
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c6a:	2b0f      	cmp	r3, #15
 8011c6c:	d916      	bls.n	8011c9c <UART_SetConfig+0xb28>
 8011c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011c74:	d212      	bcs.n	8011c9c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c78:	b29b      	uxth	r3, r3
 8011c7a:	f023 030f 	bic.w	r3, r3, #15
 8011c7e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c82:	085b      	lsrs	r3, r3, #1
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	f003 0307 	and.w	r3, r3, #7
 8011c8a:	b29a      	uxth	r2, r3
 8011c8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011c8e:	4313      	orrs	r3, r2
 8011c90:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011c98:	60da      	str	r2, [r3, #12]
 8011c9a:	e0bc      	b.n	8011e16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011ca2:	e0b8      	b.n	8011e16 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011ca4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011ca8:	2b20      	cmp	r3, #32
 8011caa:	dc4b      	bgt.n	8011d44 <UART_SetConfig+0xbd0>
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	f2c0 8087 	blt.w	8011dc0 <UART_SetConfig+0xc4c>
 8011cb2:	2b20      	cmp	r3, #32
 8011cb4:	f200 8084 	bhi.w	8011dc0 <UART_SetConfig+0xc4c>
 8011cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8011cc0 <UART_SetConfig+0xb4c>)
 8011cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cbe:	bf00      	nop
 8011cc0:	08011d4b 	.word	0x08011d4b
 8011cc4:	08011d53 	.word	0x08011d53
 8011cc8:	08011dc1 	.word	0x08011dc1
 8011ccc:	08011dc1 	.word	0x08011dc1
 8011cd0:	08011d5b 	.word	0x08011d5b
 8011cd4:	08011dc1 	.word	0x08011dc1
 8011cd8:	08011dc1 	.word	0x08011dc1
 8011cdc:	08011dc1 	.word	0x08011dc1
 8011ce0:	08011d6b 	.word	0x08011d6b
 8011ce4:	08011dc1 	.word	0x08011dc1
 8011ce8:	08011dc1 	.word	0x08011dc1
 8011cec:	08011dc1 	.word	0x08011dc1
 8011cf0:	08011dc1 	.word	0x08011dc1
 8011cf4:	08011dc1 	.word	0x08011dc1
 8011cf8:	08011dc1 	.word	0x08011dc1
 8011cfc:	08011dc1 	.word	0x08011dc1
 8011d00:	08011d7b 	.word	0x08011d7b
 8011d04:	08011dc1 	.word	0x08011dc1
 8011d08:	08011dc1 	.word	0x08011dc1
 8011d0c:	08011dc1 	.word	0x08011dc1
 8011d10:	08011dc1 	.word	0x08011dc1
 8011d14:	08011dc1 	.word	0x08011dc1
 8011d18:	08011dc1 	.word	0x08011dc1
 8011d1c:	08011dc1 	.word	0x08011dc1
 8011d20:	08011dc1 	.word	0x08011dc1
 8011d24:	08011dc1 	.word	0x08011dc1
 8011d28:	08011dc1 	.word	0x08011dc1
 8011d2c:	08011dc1 	.word	0x08011dc1
 8011d30:	08011dc1 	.word	0x08011dc1
 8011d34:	08011dc1 	.word	0x08011dc1
 8011d38:	08011dc1 	.word	0x08011dc1
 8011d3c:	08011dc1 	.word	0x08011dc1
 8011d40:	08011db3 	.word	0x08011db3
 8011d44:	2b40      	cmp	r3, #64	@ 0x40
 8011d46:	d037      	beq.n	8011db8 <UART_SetConfig+0xc44>
 8011d48:	e03a      	b.n	8011dc0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011d4a:	f7fa fc65 	bl	800c618 <HAL_RCC_GetPCLK1Freq>
 8011d4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011d50:	e03c      	b.n	8011dcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011d52:	f7fa fc77 	bl	800c644 <HAL_RCC_GetPCLK2Freq>
 8011d56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011d58:	e038      	b.n	8011dcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7fc fb0e 	bl	800e380 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011d68:	e030      	b.n	8011dcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d6a:	f107 0318 	add.w	r3, r7, #24
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7fc fc5a 	bl	800e628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011d74:	69fb      	ldr	r3, [r7, #28]
 8011d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011d78:	e028      	b.n	8011dcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d7a:	4b09      	ldr	r3, [pc, #36]	@ (8011da0 <UART_SetConfig+0xc2c>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	f003 0320 	and.w	r3, r3, #32
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d012      	beq.n	8011dac <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011d86:	4b06      	ldr	r3, [pc, #24]	@ (8011da0 <UART_SetConfig+0xc2c>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	08db      	lsrs	r3, r3, #3
 8011d8c:	f003 0303 	and.w	r3, r3, #3
 8011d90:	4a04      	ldr	r2, [pc, #16]	@ (8011da4 <UART_SetConfig+0xc30>)
 8011d92:	fa22 f303 	lsr.w	r3, r2, r3
 8011d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011d98:	e018      	b.n	8011dcc <UART_SetConfig+0xc58>
 8011d9a:	bf00      	nop
 8011d9c:	0801d918 	.word	0x0801d918
 8011da0:	58024400 	.word	0x58024400
 8011da4:	03d09000 	.word	0x03d09000
 8011da8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011dac:	4b24      	ldr	r3, [pc, #144]	@ (8011e40 <UART_SetConfig+0xccc>)
 8011dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011db0:	e00c      	b.n	8011dcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011db2:	4b24      	ldr	r3, [pc, #144]	@ (8011e44 <UART_SetConfig+0xcd0>)
 8011db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011db6:	e009      	b.n	8011dcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011db8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011dbe:	e005      	b.n	8011dcc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011dca:	bf00      	nop
    }

    if (pclk != 0U)
 8011dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d021      	beq.n	8011e16 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8011e48 <UART_SetConfig+0xcd4>)
 8011dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ddc:	461a      	mov	r2, r3
 8011dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011de0:	fbb3 f2f2 	udiv	r2, r3, r2
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	085b      	lsrs	r3, r3, #1
 8011dea:	441a      	add	r2, r3
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011df4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011df8:	2b0f      	cmp	r3, #15
 8011dfa:	d909      	bls.n	8011e10 <UART_SetConfig+0xc9c>
 8011dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011e02:	d205      	bcs.n	8011e10 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e06:	b29a      	uxth	r2, r3
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	60da      	str	r2, [r3, #12]
 8011e0e:	e002      	b.n	8011e16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011e10:	2301      	movs	r3, #1
 8011e12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	2201      	movs	r2, #1
 8011e1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	2201      	movs	r2, #1
 8011e22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011e32:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3748      	adds	r7, #72	@ 0x48
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011e40:	03d09000 	.word	0x03d09000
 8011e44:	003d0900 	.word	0x003d0900
 8011e48:	0801d918 	.word	0x0801d918

08011e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b083      	sub	sp, #12
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e58:	f003 0308 	and.w	r3, r3, #8
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d00a      	beq.n	8011e76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	430a      	orrs	r2, r1
 8011e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e7a:	f003 0301 	and.w	r3, r3, #1
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d00a      	beq.n	8011e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	685b      	ldr	r3, [r3, #4]
 8011e88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	430a      	orrs	r2, r1
 8011e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e9c:	f003 0302 	and.w	r3, r3, #2
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d00a      	beq.n	8011eba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	685b      	ldr	r3, [r3, #4]
 8011eaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	430a      	orrs	r2, r1
 8011eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ebe:	f003 0304 	and.w	r3, r3, #4
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d00a      	beq.n	8011edc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	430a      	orrs	r2, r1
 8011eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ee0:	f003 0310 	and.w	r3, r3, #16
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d00a      	beq.n	8011efe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	689b      	ldr	r3, [r3, #8]
 8011eee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	430a      	orrs	r2, r1
 8011efc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f02:	f003 0320 	and.w	r3, r3, #32
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d00a      	beq.n	8011f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	689b      	ldr	r3, [r3, #8]
 8011f10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	430a      	orrs	r2, r1
 8011f1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d01a      	beq.n	8011f62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	430a      	orrs	r2, r1
 8011f40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011f4a:	d10a      	bne.n	8011f62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	430a      	orrs	r2, r1
 8011f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d00a      	beq.n	8011f84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	685b      	ldr	r3, [r3, #4]
 8011f74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	430a      	orrs	r2, r1
 8011f82:	605a      	str	r2, [r3, #4]
  }
}
 8011f84:	bf00      	nop
 8011f86:	370c      	adds	r7, #12
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8e:	4770      	bx	lr

08011f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b098      	sub	sp, #96	@ 0x60
 8011f94:	af02      	add	r7, sp, #8
 8011f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011fa0:	f7f2 ff90 	bl	8004ec4 <HAL_GetTick>
 8011fa4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	f003 0308 	and.w	r3, r3, #8
 8011fb0:	2b08      	cmp	r3, #8
 8011fb2:	d12f      	bne.n	8012014 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011fb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011fb8:	9300      	str	r3, [sp, #0]
 8011fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f000 f88e 	bl	80120e4 <UART_WaitOnFlagUntilTimeout>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d022      	beq.n	8012014 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fd6:	e853 3f00 	ldrex	r3, [r3]
 8011fda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011fe2:	653b      	str	r3, [r7, #80]	@ 0x50
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	461a      	mov	r2, r3
 8011fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8011fee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011ff2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011ff4:	e841 2300 	strex	r3, r2, [r1]
 8011ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d1e6      	bne.n	8011fce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2220      	movs	r2, #32
 8012004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2200      	movs	r2, #0
 801200c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012010:	2303      	movs	r3, #3
 8012012:	e063      	b.n	80120dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	f003 0304 	and.w	r3, r3, #4
 801201e:	2b04      	cmp	r3, #4
 8012020:	d149      	bne.n	80120b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012022:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012026:	9300      	str	r3, [sp, #0]
 8012028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801202a:	2200      	movs	r2, #0
 801202c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f000 f857 	bl	80120e4 <UART_WaitOnFlagUntilTimeout>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d03c      	beq.n	80120b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012044:	e853 3f00 	ldrex	r3, [r3]
 8012048:	623b      	str	r3, [r7, #32]
   return(result);
 801204a:	6a3b      	ldr	r3, [r7, #32]
 801204c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	461a      	mov	r2, r3
 8012058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801205a:	633b      	str	r3, [r7, #48]	@ 0x30
 801205c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801205e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012062:	e841 2300 	strex	r3, r2, [r1]
 8012066:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801206a:	2b00      	cmp	r3, #0
 801206c:	d1e6      	bne.n	801203c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	3308      	adds	r3, #8
 8012074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	e853 3f00 	ldrex	r3, [r3]
 801207c:	60fb      	str	r3, [r7, #12]
   return(result);
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	f023 0301 	bic.w	r3, r3, #1
 8012084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	3308      	adds	r3, #8
 801208c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801208e:	61fa      	str	r2, [r7, #28]
 8012090:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012092:	69b9      	ldr	r1, [r7, #24]
 8012094:	69fa      	ldr	r2, [r7, #28]
 8012096:	e841 2300 	strex	r3, r2, [r1]
 801209a:	617b      	str	r3, [r7, #20]
   return(result);
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d1e5      	bne.n	801206e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2220      	movs	r2, #32
 80120a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2200      	movs	r2, #0
 80120ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80120b2:	2303      	movs	r3, #3
 80120b4:	e012      	b.n	80120dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2220      	movs	r2, #32
 80120ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2220      	movs	r2, #32
 80120c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2200      	movs	r2, #0
 80120ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2200      	movs	r2, #0
 80120d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2200      	movs	r2, #0
 80120d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80120da:	2300      	movs	r3, #0
}
 80120dc:	4618      	mov	r0, r3
 80120de:	3758      	adds	r7, #88	@ 0x58
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}

080120e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b084      	sub	sp, #16
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	60f8      	str	r0, [r7, #12]
 80120ec:	60b9      	str	r1, [r7, #8]
 80120ee:	603b      	str	r3, [r7, #0]
 80120f0:	4613      	mov	r3, r2
 80120f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80120f4:	e04f      	b.n	8012196 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80120f6:	69bb      	ldr	r3, [r7, #24]
 80120f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120fc:	d04b      	beq.n	8012196 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80120fe:	f7f2 fee1 	bl	8004ec4 <HAL_GetTick>
 8012102:	4602      	mov	r2, r0
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	1ad3      	subs	r3, r2, r3
 8012108:	69ba      	ldr	r2, [r7, #24]
 801210a:	429a      	cmp	r2, r3
 801210c:	d302      	bcc.n	8012114 <UART_WaitOnFlagUntilTimeout+0x30>
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d101      	bne.n	8012118 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012114:	2303      	movs	r3, #3
 8012116:	e04e      	b.n	80121b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	f003 0304 	and.w	r3, r3, #4
 8012122:	2b00      	cmp	r3, #0
 8012124:	d037      	beq.n	8012196 <UART_WaitOnFlagUntilTimeout+0xb2>
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	2b80      	cmp	r3, #128	@ 0x80
 801212a:	d034      	beq.n	8012196 <UART_WaitOnFlagUntilTimeout+0xb2>
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	2b40      	cmp	r3, #64	@ 0x40
 8012130:	d031      	beq.n	8012196 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	69db      	ldr	r3, [r3, #28]
 8012138:	f003 0308 	and.w	r3, r3, #8
 801213c:	2b08      	cmp	r3, #8
 801213e:	d110      	bne.n	8012162 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	2208      	movs	r2, #8
 8012146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012148:	68f8      	ldr	r0, [r7, #12]
 801214a:	f000 f839 	bl	80121c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2208      	movs	r2, #8
 8012152:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	2200      	movs	r2, #0
 801215a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801215e:	2301      	movs	r3, #1
 8012160:	e029      	b.n	80121b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	69db      	ldr	r3, [r3, #28]
 8012168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801216c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012170:	d111      	bne.n	8012196 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801217a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f000 f81f 	bl	80121c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	2220      	movs	r2, #32
 8012186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	2200      	movs	r2, #0
 801218e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8012192:	2303      	movs	r3, #3
 8012194:	e00f      	b.n	80121b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	69da      	ldr	r2, [r3, #28]
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	4013      	ands	r3, r2
 80121a0:	68ba      	ldr	r2, [r7, #8]
 80121a2:	429a      	cmp	r2, r3
 80121a4:	bf0c      	ite	eq
 80121a6:	2301      	moveq	r3, #1
 80121a8:	2300      	movne	r3, #0
 80121aa:	b2db      	uxtb	r3, r3
 80121ac:	461a      	mov	r2, r3
 80121ae:	79fb      	ldrb	r3, [r7, #7]
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d0a0      	beq.n	80120f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80121b4:	2300      	movs	r3, #0
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3710      	adds	r7, #16
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
	...

080121c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80121c0:	b480      	push	{r7}
 80121c2:	b095      	sub	sp, #84	@ 0x54
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121d0:	e853 3f00 	ldrex	r3, [r3]
 80121d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80121d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80121dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	461a      	mov	r2, r3
 80121e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80121e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80121ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80121ee:	e841 2300 	strex	r3, r2, [r1]
 80121f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80121f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d1e6      	bne.n	80121c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	3308      	adds	r3, #8
 8012200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012202:	6a3b      	ldr	r3, [r7, #32]
 8012204:	e853 3f00 	ldrex	r3, [r3]
 8012208:	61fb      	str	r3, [r7, #28]
   return(result);
 801220a:	69fa      	ldr	r2, [r7, #28]
 801220c:	4b1e      	ldr	r3, [pc, #120]	@ (8012288 <UART_EndRxTransfer+0xc8>)
 801220e:	4013      	ands	r3, r2
 8012210:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	3308      	adds	r3, #8
 8012218:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801221a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801221c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801221e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012222:	e841 2300 	strex	r3, r2, [r1]
 8012226:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801222a:	2b00      	cmp	r3, #0
 801222c:	d1e5      	bne.n	80121fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012232:	2b01      	cmp	r3, #1
 8012234:	d118      	bne.n	8012268 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	e853 3f00 	ldrex	r3, [r3]
 8012242:	60bb      	str	r3, [r7, #8]
   return(result);
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	f023 0310 	bic.w	r3, r3, #16
 801224a:	647b      	str	r3, [r7, #68]	@ 0x44
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	461a      	mov	r2, r3
 8012252:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012254:	61bb      	str	r3, [r7, #24]
 8012256:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012258:	6979      	ldr	r1, [r7, #20]
 801225a:	69ba      	ldr	r2, [r7, #24]
 801225c:	e841 2300 	strex	r3, r2, [r1]
 8012260:	613b      	str	r3, [r7, #16]
   return(result);
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d1e6      	bne.n	8012236 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2220      	movs	r2, #32
 801226c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2200      	movs	r2, #0
 8012274:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2200      	movs	r2, #0
 801227a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801227c:	bf00      	nop
 801227e:	3754      	adds	r7, #84	@ 0x54
 8012280:	46bd      	mov	sp, r7
 8012282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012286:	4770      	bx	lr
 8012288:	effffffe 	.word	0xeffffffe

0801228c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801228c:	b480      	push	{r7}
 801228e:	b085      	sub	sp, #20
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801229a:	2b01      	cmp	r3, #1
 801229c:	d101      	bne.n	80122a2 <HAL_UARTEx_DisableFifoMode+0x16>
 801229e:	2302      	movs	r3, #2
 80122a0:	e027      	b.n	80122f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2201      	movs	r2, #1
 80122a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2224      	movs	r2, #36	@ 0x24
 80122ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	681a      	ldr	r2, [r3, #0]
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	f022 0201 	bic.w	r2, r2, #1
 80122c8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80122d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2200      	movs	r2, #0
 80122d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	68fa      	ldr	r2, [r7, #12]
 80122de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2220      	movs	r2, #32
 80122e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2200      	movs	r2, #0
 80122ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80122f0:	2300      	movs	r3, #0
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3714      	adds	r7, #20
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr

080122fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80122fe:	b580      	push	{r7, lr}
 8012300:	b084      	sub	sp, #16
 8012302:	af00      	add	r7, sp, #0
 8012304:	6078      	str	r0, [r7, #4]
 8012306:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801230e:	2b01      	cmp	r3, #1
 8012310:	d101      	bne.n	8012316 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012312:	2302      	movs	r3, #2
 8012314:	e02d      	b.n	8012372 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2201      	movs	r2, #1
 801231a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	2224      	movs	r2, #36	@ 0x24
 8012322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	681a      	ldr	r2, [r3, #0]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	f022 0201 	bic.w	r2, r2, #1
 801233c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	689b      	ldr	r3, [r3, #8]
 8012344:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	683a      	ldr	r2, [r7, #0]
 801234e:	430a      	orrs	r2, r1
 8012350:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f000 f850 	bl	80123f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	68fa      	ldr	r2, [r7, #12]
 801235e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2220      	movs	r2, #32
 8012364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2200      	movs	r2, #0
 801236c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012370:	2300      	movs	r3, #0
}
 8012372:	4618      	mov	r0, r3
 8012374:	3710      	adds	r7, #16
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}

0801237a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801237a:	b580      	push	{r7, lr}
 801237c:	b084      	sub	sp, #16
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
 8012382:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801238a:	2b01      	cmp	r3, #1
 801238c:	d101      	bne.n	8012392 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801238e:	2302      	movs	r3, #2
 8012390:	e02d      	b.n	80123ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2201      	movs	r2, #1
 8012396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2224      	movs	r2, #36	@ 0x24
 801239e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f022 0201 	bic.w	r2, r2, #1
 80123b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	689b      	ldr	r3, [r3, #8]
 80123c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	683a      	ldr	r2, [r7, #0]
 80123ca:	430a      	orrs	r2, r1
 80123cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 f812 	bl	80123f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	68fa      	ldr	r2, [r7, #12]
 80123da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2220      	movs	r2, #32
 80123e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2200      	movs	r2, #0
 80123e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80123ec:	2300      	movs	r3, #0
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3710      	adds	r7, #16
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}
	...

080123f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b085      	sub	sp, #20
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012404:	2b00      	cmp	r3, #0
 8012406:	d108      	bne.n	801241a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2201      	movs	r2, #1
 801240c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2201      	movs	r2, #1
 8012414:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012418:	e031      	b.n	801247e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801241a:	2310      	movs	r3, #16
 801241c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801241e:	2310      	movs	r3, #16
 8012420:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	689b      	ldr	r3, [r3, #8]
 8012428:	0e5b      	lsrs	r3, r3, #25
 801242a:	b2db      	uxtb	r3, r3
 801242c:	f003 0307 	and.w	r3, r3, #7
 8012430:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	689b      	ldr	r3, [r3, #8]
 8012438:	0f5b      	lsrs	r3, r3, #29
 801243a:	b2db      	uxtb	r3, r3
 801243c:	f003 0307 	and.w	r3, r3, #7
 8012440:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012442:	7bbb      	ldrb	r3, [r7, #14]
 8012444:	7b3a      	ldrb	r2, [r7, #12]
 8012446:	4911      	ldr	r1, [pc, #68]	@ (801248c <UARTEx_SetNbDataToProcess+0x94>)
 8012448:	5c8a      	ldrb	r2, [r1, r2]
 801244a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801244e:	7b3a      	ldrb	r2, [r7, #12]
 8012450:	490f      	ldr	r1, [pc, #60]	@ (8012490 <UARTEx_SetNbDataToProcess+0x98>)
 8012452:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012454:	fb93 f3f2 	sdiv	r3, r3, r2
 8012458:	b29a      	uxth	r2, r3
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012460:	7bfb      	ldrb	r3, [r7, #15]
 8012462:	7b7a      	ldrb	r2, [r7, #13]
 8012464:	4909      	ldr	r1, [pc, #36]	@ (801248c <UARTEx_SetNbDataToProcess+0x94>)
 8012466:	5c8a      	ldrb	r2, [r1, r2]
 8012468:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801246c:	7b7a      	ldrb	r2, [r7, #13]
 801246e:	4908      	ldr	r1, [pc, #32]	@ (8012490 <UARTEx_SetNbDataToProcess+0x98>)
 8012470:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012472:	fb93 f3f2 	sdiv	r3, r3, r2
 8012476:	b29a      	uxth	r2, r3
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801247e:	bf00      	nop
 8012480:	3714      	adds	r7, #20
 8012482:	46bd      	mov	sp, r7
 8012484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012488:	4770      	bx	lr
 801248a:	bf00      	nop
 801248c:	0801d930 	.word	0x0801d930
 8012490:	0801d938 	.word	0x0801d938

08012494 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012494:	b084      	sub	sp, #16
 8012496:	b580      	push	{r7, lr}
 8012498:	b084      	sub	sp, #16
 801249a:	af00      	add	r7, sp, #0
 801249c:	6078      	str	r0, [r7, #4]
 801249e:	f107 001c 	add.w	r0, r7, #28
 80124a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80124a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80124aa:	2b01      	cmp	r3, #1
 80124ac:	d121      	bne.n	80124f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	68da      	ldr	r2, [r3, #12]
 80124be:	4b2c      	ldr	r3, [pc, #176]	@ (8012570 <USB_CoreInit+0xdc>)
 80124c0:	4013      	ands	r3, r2
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	68db      	ldr	r3, [r3, #12]
 80124ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80124d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80124d6:	2b01      	cmp	r3, #1
 80124d8:	d105      	bne.n	80124e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	68db      	ldr	r3, [r3, #12]
 80124de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f001 fafa 	bl	8013ae0 <USB_CoreReset>
 80124ec:	4603      	mov	r3, r0
 80124ee:	73fb      	strb	r3, [r7, #15]
 80124f0:	e01b      	b.n	801252a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	68db      	ldr	r3, [r3, #12]
 80124f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f001 faee 	bl	8013ae0 <USB_CoreReset>
 8012504:	4603      	mov	r3, r0
 8012506:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012508:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801250c:	2b00      	cmp	r3, #0
 801250e:	d106      	bne.n	801251e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012514:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	639a      	str	r2, [r3, #56]	@ 0x38
 801251c:	e005      	b.n	801252a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012522:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801252a:	7fbb      	ldrb	r3, [r7, #30]
 801252c:	2b01      	cmp	r3, #1
 801252e:	d116      	bne.n	801255e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012534:	b29a      	uxth	r2, r3
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801253e:	4b0d      	ldr	r3, [pc, #52]	@ (8012574 <USB_CoreInit+0xe0>)
 8012540:	4313      	orrs	r3, r2
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	689b      	ldr	r3, [r3, #8]
 801254a:	f043 0206 	orr.w	r2, r3, #6
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	689b      	ldr	r3, [r3, #8]
 8012556:	f043 0220 	orr.w	r2, r3, #32
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012560:	4618      	mov	r0, r3
 8012562:	3710      	adds	r7, #16
 8012564:	46bd      	mov	sp, r7
 8012566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801256a:	b004      	add	sp, #16
 801256c:	4770      	bx	lr
 801256e:	bf00      	nop
 8012570:	ffbdffbf 	.word	0xffbdffbf
 8012574:	03ee0000 	.word	0x03ee0000

08012578 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012578:	b480      	push	{r7}
 801257a:	b087      	sub	sp, #28
 801257c:	af00      	add	r7, sp, #0
 801257e:	60f8      	str	r0, [r7, #12]
 8012580:	60b9      	str	r1, [r7, #8]
 8012582:	4613      	mov	r3, r2
 8012584:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012586:	79fb      	ldrb	r3, [r7, #7]
 8012588:	2b02      	cmp	r3, #2
 801258a:	d165      	bne.n	8012658 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	4a41      	ldr	r2, [pc, #260]	@ (8012694 <USB_SetTurnaroundTime+0x11c>)
 8012590:	4293      	cmp	r3, r2
 8012592:	d906      	bls.n	80125a2 <USB_SetTurnaroundTime+0x2a>
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	4a40      	ldr	r2, [pc, #256]	@ (8012698 <USB_SetTurnaroundTime+0x120>)
 8012598:	4293      	cmp	r3, r2
 801259a:	d202      	bcs.n	80125a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801259c:	230f      	movs	r3, #15
 801259e:	617b      	str	r3, [r7, #20]
 80125a0:	e062      	b.n	8012668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	4a3c      	ldr	r2, [pc, #240]	@ (8012698 <USB_SetTurnaroundTime+0x120>)
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d306      	bcc.n	80125b8 <USB_SetTurnaroundTime+0x40>
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	4a3b      	ldr	r2, [pc, #236]	@ (801269c <USB_SetTurnaroundTime+0x124>)
 80125ae:	4293      	cmp	r3, r2
 80125b0:	d202      	bcs.n	80125b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80125b2:	230e      	movs	r3, #14
 80125b4:	617b      	str	r3, [r7, #20]
 80125b6:	e057      	b.n	8012668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	4a38      	ldr	r2, [pc, #224]	@ (801269c <USB_SetTurnaroundTime+0x124>)
 80125bc:	4293      	cmp	r3, r2
 80125be:	d306      	bcc.n	80125ce <USB_SetTurnaroundTime+0x56>
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	4a37      	ldr	r2, [pc, #220]	@ (80126a0 <USB_SetTurnaroundTime+0x128>)
 80125c4:	4293      	cmp	r3, r2
 80125c6:	d202      	bcs.n	80125ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80125c8:	230d      	movs	r3, #13
 80125ca:	617b      	str	r3, [r7, #20]
 80125cc:	e04c      	b.n	8012668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	4a33      	ldr	r2, [pc, #204]	@ (80126a0 <USB_SetTurnaroundTime+0x128>)
 80125d2:	4293      	cmp	r3, r2
 80125d4:	d306      	bcc.n	80125e4 <USB_SetTurnaroundTime+0x6c>
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	4a32      	ldr	r2, [pc, #200]	@ (80126a4 <USB_SetTurnaroundTime+0x12c>)
 80125da:	4293      	cmp	r3, r2
 80125dc:	d802      	bhi.n	80125e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80125de:	230c      	movs	r3, #12
 80125e0:	617b      	str	r3, [r7, #20]
 80125e2:	e041      	b.n	8012668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	4a2f      	ldr	r2, [pc, #188]	@ (80126a4 <USB_SetTurnaroundTime+0x12c>)
 80125e8:	4293      	cmp	r3, r2
 80125ea:	d906      	bls.n	80125fa <USB_SetTurnaroundTime+0x82>
 80125ec:	68bb      	ldr	r3, [r7, #8]
 80125ee:	4a2e      	ldr	r2, [pc, #184]	@ (80126a8 <USB_SetTurnaroundTime+0x130>)
 80125f0:	4293      	cmp	r3, r2
 80125f2:	d802      	bhi.n	80125fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80125f4:	230b      	movs	r3, #11
 80125f6:	617b      	str	r3, [r7, #20]
 80125f8:	e036      	b.n	8012668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	4a2a      	ldr	r2, [pc, #168]	@ (80126a8 <USB_SetTurnaroundTime+0x130>)
 80125fe:	4293      	cmp	r3, r2
 8012600:	d906      	bls.n	8012610 <USB_SetTurnaroundTime+0x98>
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	4a29      	ldr	r2, [pc, #164]	@ (80126ac <USB_SetTurnaroundTime+0x134>)
 8012606:	4293      	cmp	r3, r2
 8012608:	d802      	bhi.n	8012610 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801260a:	230a      	movs	r3, #10
 801260c:	617b      	str	r3, [r7, #20]
 801260e:	e02b      	b.n	8012668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	4a26      	ldr	r2, [pc, #152]	@ (80126ac <USB_SetTurnaroundTime+0x134>)
 8012614:	4293      	cmp	r3, r2
 8012616:	d906      	bls.n	8012626 <USB_SetTurnaroundTime+0xae>
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	4a25      	ldr	r2, [pc, #148]	@ (80126b0 <USB_SetTurnaroundTime+0x138>)
 801261c:	4293      	cmp	r3, r2
 801261e:	d202      	bcs.n	8012626 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012620:	2309      	movs	r3, #9
 8012622:	617b      	str	r3, [r7, #20]
 8012624:	e020      	b.n	8012668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	4a21      	ldr	r2, [pc, #132]	@ (80126b0 <USB_SetTurnaroundTime+0x138>)
 801262a:	4293      	cmp	r3, r2
 801262c:	d306      	bcc.n	801263c <USB_SetTurnaroundTime+0xc4>
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	4a20      	ldr	r2, [pc, #128]	@ (80126b4 <USB_SetTurnaroundTime+0x13c>)
 8012632:	4293      	cmp	r3, r2
 8012634:	d802      	bhi.n	801263c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012636:	2308      	movs	r3, #8
 8012638:	617b      	str	r3, [r7, #20]
 801263a:	e015      	b.n	8012668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	4a1d      	ldr	r2, [pc, #116]	@ (80126b4 <USB_SetTurnaroundTime+0x13c>)
 8012640:	4293      	cmp	r3, r2
 8012642:	d906      	bls.n	8012652 <USB_SetTurnaroundTime+0xda>
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	4a1c      	ldr	r2, [pc, #112]	@ (80126b8 <USB_SetTurnaroundTime+0x140>)
 8012648:	4293      	cmp	r3, r2
 801264a:	d202      	bcs.n	8012652 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801264c:	2307      	movs	r3, #7
 801264e:	617b      	str	r3, [r7, #20]
 8012650:	e00a      	b.n	8012668 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012652:	2306      	movs	r3, #6
 8012654:	617b      	str	r3, [r7, #20]
 8012656:	e007      	b.n	8012668 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012658:	79fb      	ldrb	r3, [r7, #7]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d102      	bne.n	8012664 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801265e:	2309      	movs	r3, #9
 8012660:	617b      	str	r3, [r7, #20]
 8012662:	e001      	b.n	8012668 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012664:	2309      	movs	r3, #9
 8012666:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	68da      	ldr	r2, [r3, #12]
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	029b      	lsls	r3, r3, #10
 801267c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8012680:	431a      	orrs	r2, r3
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012686:	2300      	movs	r3, #0
}
 8012688:	4618      	mov	r0, r3
 801268a:	371c      	adds	r7, #28
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr
 8012694:	00d8acbf 	.word	0x00d8acbf
 8012698:	00e4e1c0 	.word	0x00e4e1c0
 801269c:	00f42400 	.word	0x00f42400
 80126a0:	01067380 	.word	0x01067380
 80126a4:	011a499f 	.word	0x011a499f
 80126a8:	01312cff 	.word	0x01312cff
 80126ac:	014ca43f 	.word	0x014ca43f
 80126b0:	016e3600 	.word	0x016e3600
 80126b4:	01a6ab1f 	.word	0x01a6ab1f
 80126b8:	01e84800 	.word	0x01e84800

080126bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80126bc:	b480      	push	{r7}
 80126be:	b083      	sub	sp, #12
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	689b      	ldr	r3, [r3, #8]
 80126c8:	f043 0201 	orr.w	r2, r3, #1
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80126d0:	2300      	movs	r3, #0
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	370c      	adds	r7, #12
 80126d6:	46bd      	mov	sp, r7
 80126d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126dc:	4770      	bx	lr

080126de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80126de:	b480      	push	{r7}
 80126e0:	b083      	sub	sp, #12
 80126e2:	af00      	add	r7, sp, #0
 80126e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	689b      	ldr	r3, [r3, #8]
 80126ea:	f023 0201 	bic.w	r2, r3, #1
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80126f2:	2300      	movs	r3, #0
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	370c      	adds	r7, #12
 80126f8:	46bd      	mov	sp, r7
 80126fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fe:	4770      	bx	lr

08012700 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b084      	sub	sp, #16
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	460b      	mov	r3, r1
 801270a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801270c:	2300      	movs	r3, #0
 801270e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	68db      	ldr	r3, [r3, #12]
 8012714:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801271c:	78fb      	ldrb	r3, [r7, #3]
 801271e:	2b01      	cmp	r3, #1
 8012720:	d115      	bne.n	801274e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	68db      	ldr	r3, [r3, #12]
 8012726:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801272e:	200a      	movs	r0, #10
 8012730:	f7f2 fbd4 	bl	8004edc <HAL_Delay>
      ms += 10U;
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	330a      	adds	r3, #10
 8012738:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f001 f93f 	bl	80139be <USB_GetMode>
 8012740:	4603      	mov	r3, r0
 8012742:	2b01      	cmp	r3, #1
 8012744:	d01e      	beq.n	8012784 <USB_SetCurrentMode+0x84>
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	2bc7      	cmp	r3, #199	@ 0xc7
 801274a:	d9f0      	bls.n	801272e <USB_SetCurrentMode+0x2e>
 801274c:	e01a      	b.n	8012784 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801274e:	78fb      	ldrb	r3, [r7, #3]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d115      	bne.n	8012780 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	68db      	ldr	r3, [r3, #12]
 8012758:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8012760:	200a      	movs	r0, #10
 8012762:	f7f2 fbbb 	bl	8004edc <HAL_Delay>
      ms += 10U;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	330a      	adds	r3, #10
 801276a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f001 f926 	bl	80139be <USB_GetMode>
 8012772:	4603      	mov	r3, r0
 8012774:	2b00      	cmp	r3, #0
 8012776:	d005      	beq.n	8012784 <USB_SetCurrentMode+0x84>
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	2bc7      	cmp	r3, #199	@ 0xc7
 801277c:	d9f0      	bls.n	8012760 <USB_SetCurrentMode+0x60>
 801277e:	e001      	b.n	8012784 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012780:	2301      	movs	r3, #1
 8012782:	e005      	b.n	8012790 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	2bc8      	cmp	r3, #200	@ 0xc8
 8012788:	d101      	bne.n	801278e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801278a:	2301      	movs	r3, #1
 801278c:	e000      	b.n	8012790 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801278e:	2300      	movs	r3, #0
}
 8012790:	4618      	mov	r0, r3
 8012792:	3710      	adds	r7, #16
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}

08012798 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012798:	b084      	sub	sp, #16
 801279a:	b580      	push	{r7, lr}
 801279c:	b086      	sub	sp, #24
 801279e:	af00      	add	r7, sp, #0
 80127a0:	6078      	str	r0, [r7, #4]
 80127a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80127a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80127aa:	2300      	movs	r3, #0
 80127ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80127b2:	2300      	movs	r3, #0
 80127b4:	613b      	str	r3, [r7, #16]
 80127b6:	e009      	b.n	80127cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	693b      	ldr	r3, [r7, #16]
 80127bc:	3340      	adds	r3, #64	@ 0x40
 80127be:	009b      	lsls	r3, r3, #2
 80127c0:	4413      	add	r3, r2
 80127c2:	2200      	movs	r2, #0
 80127c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	3301      	adds	r3, #1
 80127ca:	613b      	str	r3, [r7, #16]
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	2b0e      	cmp	r3, #14
 80127d0:	d9f2      	bls.n	80127b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80127d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d11c      	bne.n	8012814 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127e0:	685b      	ldr	r3, [r3, #4]
 80127e2:	68fa      	ldr	r2, [r7, #12]
 80127e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80127e8:	f043 0302 	orr.w	r3, r3, #2
 80127ec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127f2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	601a      	str	r2, [r3, #0]
 8012812:	e005      	b.n	8012820 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012818:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012826:	461a      	mov	r2, r3
 8012828:	2300      	movs	r3, #0
 801282a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801282c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8012830:	2b01      	cmp	r3, #1
 8012832:	d10d      	bne.n	8012850 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012838:	2b00      	cmp	r3, #0
 801283a:	d104      	bne.n	8012846 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801283c:	2100      	movs	r1, #0
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f000 f968 	bl	8012b14 <USB_SetDevSpeed>
 8012844:	e008      	b.n	8012858 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012846:	2101      	movs	r1, #1
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f000 f963 	bl	8012b14 <USB_SetDevSpeed>
 801284e:	e003      	b.n	8012858 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012850:	2103      	movs	r1, #3
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f000 f95e 	bl	8012b14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012858:	2110      	movs	r1, #16
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f000 f8fa 	bl	8012a54 <USB_FlushTxFifo>
 8012860:	4603      	mov	r3, r0
 8012862:	2b00      	cmp	r3, #0
 8012864:	d001      	beq.n	801286a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8012866:	2301      	movs	r3, #1
 8012868:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f000 f924 	bl	8012ab8 <USB_FlushRxFifo>
 8012870:	4603      	mov	r3, r0
 8012872:	2b00      	cmp	r3, #0
 8012874:	d001      	beq.n	801287a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8012876:	2301      	movs	r3, #1
 8012878:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012880:	461a      	mov	r2, r3
 8012882:	2300      	movs	r3, #0
 8012884:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801288c:	461a      	mov	r2, r3
 801288e:	2300      	movs	r3, #0
 8012890:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012898:	461a      	mov	r2, r3
 801289a:	2300      	movs	r3, #0
 801289c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801289e:	2300      	movs	r3, #0
 80128a0:	613b      	str	r3, [r7, #16]
 80128a2:	e043      	b.n	801292c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80128a4:	693b      	ldr	r3, [r7, #16]
 80128a6:	015a      	lsls	r2, r3, #5
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	4413      	add	r3, r2
 80128ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80128b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80128ba:	d118      	bne.n	80128ee <USB_DevInit+0x156>
    {
      if (i == 0U)
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d10a      	bne.n	80128d8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	015a      	lsls	r2, r3, #5
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	4413      	add	r3, r2
 80128ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80128ce:	461a      	mov	r2, r3
 80128d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80128d4:	6013      	str	r3, [r2, #0]
 80128d6:	e013      	b.n	8012900 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	015a      	lsls	r2, r3, #5
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	4413      	add	r3, r2
 80128e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80128e4:	461a      	mov	r2, r3
 80128e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80128ea:	6013      	str	r3, [r2, #0]
 80128ec:	e008      	b.n	8012900 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80128ee:	693b      	ldr	r3, [r7, #16]
 80128f0:	015a      	lsls	r2, r3, #5
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	4413      	add	r3, r2
 80128f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80128fa:	461a      	mov	r2, r3
 80128fc:	2300      	movs	r3, #0
 80128fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012900:	693b      	ldr	r3, [r7, #16]
 8012902:	015a      	lsls	r2, r3, #5
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	4413      	add	r3, r2
 8012908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801290c:	461a      	mov	r2, r3
 801290e:	2300      	movs	r3, #0
 8012910:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	015a      	lsls	r2, r3, #5
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	4413      	add	r3, r2
 801291a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801291e:	461a      	mov	r2, r3
 8012920:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012924:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012926:	693b      	ldr	r3, [r7, #16]
 8012928:	3301      	adds	r3, #1
 801292a:	613b      	str	r3, [r7, #16]
 801292c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012930:	461a      	mov	r2, r3
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	4293      	cmp	r3, r2
 8012936:	d3b5      	bcc.n	80128a4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012938:	2300      	movs	r3, #0
 801293a:	613b      	str	r3, [r7, #16]
 801293c:	e043      	b.n	80129c6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801293e:	693b      	ldr	r3, [r7, #16]
 8012940:	015a      	lsls	r2, r3, #5
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	4413      	add	r3, r2
 8012946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012950:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012954:	d118      	bne.n	8012988 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8012956:	693b      	ldr	r3, [r7, #16]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d10a      	bne.n	8012972 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	015a      	lsls	r2, r3, #5
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	4413      	add	r3, r2
 8012964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012968:	461a      	mov	r2, r3
 801296a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801296e:	6013      	str	r3, [r2, #0]
 8012970:	e013      	b.n	801299a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012972:	693b      	ldr	r3, [r7, #16]
 8012974:	015a      	lsls	r2, r3, #5
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	4413      	add	r3, r2
 801297a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801297e:	461a      	mov	r2, r3
 8012980:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012984:	6013      	str	r3, [r2, #0]
 8012986:	e008      	b.n	801299a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	015a      	lsls	r2, r3, #5
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	4413      	add	r3, r2
 8012990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012994:	461a      	mov	r2, r3
 8012996:	2300      	movs	r3, #0
 8012998:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	015a      	lsls	r2, r3, #5
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	4413      	add	r3, r2
 80129a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129a6:	461a      	mov	r2, r3
 80129a8:	2300      	movs	r3, #0
 80129aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80129ac:	693b      	ldr	r3, [r7, #16]
 80129ae:	015a      	lsls	r2, r3, #5
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	4413      	add	r3, r2
 80129b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129b8:	461a      	mov	r2, r3
 80129ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80129be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80129c0:	693b      	ldr	r3, [r7, #16]
 80129c2:	3301      	adds	r3, #1
 80129c4:	613b      	str	r3, [r7, #16]
 80129c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80129ca:	461a      	mov	r2, r3
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	4293      	cmp	r3, r2
 80129d0:	d3b5      	bcc.n	801293e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80129d8:	691b      	ldr	r3, [r3, #16]
 80129da:	68fa      	ldr	r2, [r7, #12]
 80129dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80129e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80129e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2200      	movs	r2, #0
 80129ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80129f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80129f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d105      	bne.n	8012a08 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	699b      	ldr	r3, [r3, #24]
 8012a00:	f043 0210 	orr.w	r2, r3, #16
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	699a      	ldr	r2, [r3, #24]
 8012a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8012a4c <USB_DevInit+0x2b4>)
 8012a0e:	4313      	orrs	r3, r2
 8012a10:	687a      	ldr	r2, [r7, #4]
 8012a12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012a14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d005      	beq.n	8012a28 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	699b      	ldr	r3, [r3, #24]
 8012a20:	f043 0208 	orr.w	r2, r3, #8
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012a28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012a2c:	2b01      	cmp	r3, #1
 8012a2e:	d105      	bne.n	8012a3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	699a      	ldr	r2, [r3, #24]
 8012a34:	4b06      	ldr	r3, [pc, #24]	@ (8012a50 <USB_DevInit+0x2b8>)
 8012a36:	4313      	orrs	r3, r2
 8012a38:	687a      	ldr	r2, [r7, #4]
 8012a3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3718      	adds	r7, #24
 8012a42:	46bd      	mov	sp, r7
 8012a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012a48:	b004      	add	sp, #16
 8012a4a:	4770      	bx	lr
 8012a4c:	803c3800 	.word	0x803c3800
 8012a50:	40000004 	.word	0x40000004

08012a54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012a54:	b480      	push	{r7}
 8012a56:	b085      	sub	sp, #20
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	3301      	adds	r3, #1
 8012a66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012a6e:	d901      	bls.n	8012a74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012a70:	2303      	movs	r3, #3
 8012a72:	e01b      	b.n	8012aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	691b      	ldr	r3, [r3, #16]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	daf2      	bge.n	8012a62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	019b      	lsls	r3, r3, #6
 8012a84:	f043 0220 	orr.w	r2, r3, #32
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012a98:	d901      	bls.n	8012a9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012a9a:	2303      	movs	r3, #3
 8012a9c:	e006      	b.n	8012aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	691b      	ldr	r3, [r3, #16]
 8012aa2:	f003 0320 	and.w	r3, r3, #32
 8012aa6:	2b20      	cmp	r3, #32
 8012aa8:	d0f0      	beq.n	8012a8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012aaa:	2300      	movs	r3, #0
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	3714      	adds	r7, #20
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab6:	4770      	bx	lr

08012ab8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012ab8:	b480      	push	{r7}
 8012aba:	b085      	sub	sp, #20
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012ad0:	d901      	bls.n	8012ad6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012ad2:	2303      	movs	r3, #3
 8012ad4:	e018      	b.n	8012b08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	691b      	ldr	r3, [r3, #16]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	daf2      	bge.n	8012ac4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	2210      	movs	r2, #16
 8012ae6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	3301      	adds	r3, #1
 8012aec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012af4:	d901      	bls.n	8012afa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012af6:	2303      	movs	r3, #3
 8012af8:	e006      	b.n	8012b08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	691b      	ldr	r3, [r3, #16]
 8012afe:	f003 0310 	and.w	r3, r3, #16
 8012b02:	2b10      	cmp	r3, #16
 8012b04:	d0f0      	beq.n	8012ae8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012b06:	2300      	movs	r3, #0
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3714      	adds	r7, #20
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b12:	4770      	bx	lr

08012b14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012b14:	b480      	push	{r7}
 8012b16:	b085      	sub	sp, #20
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
 8012b1c:	460b      	mov	r3, r1
 8012b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012b2a:	681a      	ldr	r2, [r3, #0]
 8012b2c:	78fb      	ldrb	r3, [r7, #3]
 8012b2e:	68f9      	ldr	r1, [r7, #12]
 8012b30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012b34:	4313      	orrs	r3, r2
 8012b36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012b38:	2300      	movs	r3, #0
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3714      	adds	r7, #20
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b44:	4770      	bx	lr

08012b46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8012b46:	b480      	push	{r7}
 8012b48:	b087      	sub	sp, #28
 8012b4a:	af00      	add	r7, sp, #0
 8012b4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012b58:	689b      	ldr	r3, [r3, #8]
 8012b5a:	f003 0306 	and.w	r3, r3, #6
 8012b5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d102      	bne.n	8012b6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012b66:	2300      	movs	r3, #0
 8012b68:	75fb      	strb	r3, [r7, #23]
 8012b6a:	e00a      	b.n	8012b82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	2b02      	cmp	r3, #2
 8012b70:	d002      	beq.n	8012b78 <USB_GetDevSpeed+0x32>
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	2b06      	cmp	r3, #6
 8012b76:	d102      	bne.n	8012b7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012b78:	2302      	movs	r3, #2
 8012b7a:	75fb      	strb	r3, [r7, #23]
 8012b7c:	e001      	b.n	8012b82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012b7e:	230f      	movs	r3, #15
 8012b80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	371c      	adds	r7, #28
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr

08012b90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012b90:	b480      	push	{r7}
 8012b92:	b085      	sub	sp, #20
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
 8012b98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	785b      	ldrb	r3, [r3, #1]
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d139      	bne.n	8012c20 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012bb2:	69da      	ldr	r2, [r3, #28]
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	781b      	ldrb	r3, [r3, #0]
 8012bb8:	f003 030f 	and.w	r3, r3, #15
 8012bbc:	2101      	movs	r1, #1
 8012bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	68f9      	ldr	r1, [r7, #12]
 8012bc6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012bca:	4313      	orrs	r3, r2
 8012bcc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	015a      	lsls	r2, r3, #5
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	4413      	add	r3, r2
 8012bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d153      	bne.n	8012c8c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	015a      	lsls	r2, r3, #5
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	4413      	add	r3, r2
 8012bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	689b      	ldr	r3, [r3, #8]
 8012bf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	791b      	ldrb	r3, [r3, #4]
 8012bfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012c00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	059b      	lsls	r3, r3, #22
 8012c06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012c08:	431a      	orrs	r2, r3
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	0159      	lsls	r1, r3, #5
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	440b      	add	r3, r1
 8012c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012c16:	4619      	mov	r1, r3
 8012c18:	4b20      	ldr	r3, [pc, #128]	@ (8012c9c <USB_ActivateEndpoint+0x10c>)
 8012c1a:	4313      	orrs	r3, r2
 8012c1c:	600b      	str	r3, [r1, #0]
 8012c1e:	e035      	b.n	8012c8c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012c26:	69da      	ldr	r2, [r3, #28]
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	f003 030f 	and.w	r3, r3, #15
 8012c30:	2101      	movs	r1, #1
 8012c32:	fa01 f303 	lsl.w	r3, r1, r3
 8012c36:	041b      	lsls	r3, r3, #16
 8012c38:	68f9      	ldr	r1, [r7, #12]
 8012c3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012c3e:	4313      	orrs	r3, r2
 8012c40:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	015a      	lsls	r2, r3, #5
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	4413      	add	r3, r2
 8012c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d119      	bne.n	8012c8c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	015a      	lsls	r2, r3, #5
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	4413      	add	r3, r2
 8012c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c64:	681a      	ldr	r2, [r3, #0]
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	689b      	ldr	r3, [r3, #8]
 8012c6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	791b      	ldrb	r3, [r3, #4]
 8012c72:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012c74:	430b      	orrs	r3, r1
 8012c76:	431a      	orrs	r2, r3
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	0159      	lsls	r1, r3, #5
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	440b      	add	r3, r1
 8012c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c84:	4619      	mov	r1, r3
 8012c86:	4b05      	ldr	r3, [pc, #20]	@ (8012c9c <USB_ActivateEndpoint+0x10c>)
 8012c88:	4313      	orrs	r3, r2
 8012c8a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012c8c:	2300      	movs	r3, #0
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3714      	adds	r7, #20
 8012c92:	46bd      	mov	sp, r7
 8012c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c98:	4770      	bx	lr
 8012c9a:	bf00      	nop
 8012c9c:	10008000 	.word	0x10008000

08012ca0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012ca0:	b480      	push	{r7}
 8012ca2:	b085      	sub	sp, #20
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	785b      	ldrb	r3, [r3, #1]
 8012cb8:	2b01      	cmp	r3, #1
 8012cba:	d161      	bne.n	8012d80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012cbc:	68bb      	ldr	r3, [r7, #8]
 8012cbe:	015a      	lsls	r2, r3, #5
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012cce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012cd2:	d11f      	bne.n	8012d14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012cd4:	68bb      	ldr	r3, [r7, #8]
 8012cd6:	015a      	lsls	r2, r3, #5
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	4413      	add	r3, r2
 8012cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	68ba      	ldr	r2, [r7, #8]
 8012ce4:	0151      	lsls	r1, r2, #5
 8012ce6:	68fa      	ldr	r2, [r7, #12]
 8012ce8:	440a      	add	r2, r1
 8012cea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012cee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012cf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	015a      	lsls	r2, r3, #5
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	4413      	add	r3, r2
 8012cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	68ba      	ldr	r2, [r7, #8]
 8012d04:	0151      	lsls	r1, r2, #5
 8012d06:	68fa      	ldr	r2, [r7, #12]
 8012d08:	440a      	add	r2, r1
 8012d0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012d0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012d12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012d1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	f003 030f 	and.w	r3, r3, #15
 8012d24:	2101      	movs	r1, #1
 8012d26:	fa01 f303 	lsl.w	r3, r1, r3
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	43db      	mvns	r3, r3
 8012d2e:	68f9      	ldr	r1, [r7, #12]
 8012d30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012d34:	4013      	ands	r3, r2
 8012d36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012d3e:	69da      	ldr	r2, [r3, #28]
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	f003 030f 	and.w	r3, r3, #15
 8012d48:	2101      	movs	r1, #1
 8012d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	43db      	mvns	r3, r3
 8012d52:	68f9      	ldr	r1, [r7, #12]
 8012d54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012d58:	4013      	ands	r3, r2
 8012d5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	015a      	lsls	r2, r3, #5
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	4413      	add	r3, r2
 8012d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d68:	681a      	ldr	r2, [r3, #0]
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	0159      	lsls	r1, r3, #5
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	440b      	add	r3, r1
 8012d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012d76:	4619      	mov	r1, r3
 8012d78:	4b35      	ldr	r3, [pc, #212]	@ (8012e50 <USB_DeactivateEndpoint+0x1b0>)
 8012d7a:	4013      	ands	r3, r2
 8012d7c:	600b      	str	r3, [r1, #0]
 8012d7e:	e060      	b.n	8012e42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	015a      	lsls	r2, r3, #5
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	4413      	add	r3, r2
 8012d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012d92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012d96:	d11f      	bne.n	8012dd8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	015a      	lsls	r2, r3, #5
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	4413      	add	r3, r2
 8012da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	68ba      	ldr	r2, [r7, #8]
 8012da8:	0151      	lsls	r1, r2, #5
 8012daa:	68fa      	ldr	r2, [r7, #12]
 8012dac:	440a      	add	r2, r1
 8012dae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012db2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012db6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012db8:	68bb      	ldr	r3, [r7, #8]
 8012dba:	015a      	lsls	r2, r3, #5
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	4413      	add	r3, r2
 8012dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	68ba      	ldr	r2, [r7, #8]
 8012dc8:	0151      	lsls	r1, r2, #5
 8012dca:	68fa      	ldr	r2, [r7, #12]
 8012dcc:	440a      	add	r2, r1
 8012dce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012dd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012dde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	f003 030f 	and.w	r3, r3, #15
 8012de8:	2101      	movs	r1, #1
 8012dea:	fa01 f303 	lsl.w	r3, r1, r3
 8012dee:	041b      	lsls	r3, r3, #16
 8012df0:	43db      	mvns	r3, r3
 8012df2:	68f9      	ldr	r1, [r7, #12]
 8012df4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012df8:	4013      	ands	r3, r2
 8012dfa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012e02:	69da      	ldr	r2, [r3, #28]
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	781b      	ldrb	r3, [r3, #0]
 8012e08:	f003 030f 	and.w	r3, r3, #15
 8012e0c:	2101      	movs	r1, #1
 8012e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8012e12:	041b      	lsls	r3, r3, #16
 8012e14:	43db      	mvns	r3, r3
 8012e16:	68f9      	ldr	r1, [r7, #12]
 8012e18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012e1c:	4013      	ands	r3, r2
 8012e1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	015a      	lsls	r2, r3, #5
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	4413      	add	r3, r2
 8012e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e2c:	681a      	ldr	r2, [r3, #0]
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	0159      	lsls	r1, r3, #5
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	440b      	add	r3, r1
 8012e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	4b05      	ldr	r3, [pc, #20]	@ (8012e54 <USB_DeactivateEndpoint+0x1b4>)
 8012e3e:	4013      	ands	r3, r2
 8012e40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012e42:	2300      	movs	r3, #0
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3714      	adds	r7, #20
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr
 8012e50:	ec337800 	.word	0xec337800
 8012e54:	eff37800 	.word	0xeff37800

08012e58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b08a      	sub	sp, #40	@ 0x28
 8012e5c:	af02      	add	r7, sp, #8
 8012e5e:	60f8      	str	r0, [r7, #12]
 8012e60:	60b9      	str	r1, [r7, #8]
 8012e62:	4613      	mov	r3, r2
 8012e64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012e6a:	68bb      	ldr	r3, [r7, #8]
 8012e6c:	781b      	ldrb	r3, [r3, #0]
 8012e6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	785b      	ldrb	r3, [r3, #1]
 8012e74:	2b01      	cmp	r3, #1
 8012e76:	f040 8185 	bne.w	8013184 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	691b      	ldr	r3, [r3, #16]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d132      	bne.n	8012ee8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	015a      	lsls	r2, r3, #5
 8012e86:	69fb      	ldr	r3, [r7, #28]
 8012e88:	4413      	add	r3, r2
 8012e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e8e:	691a      	ldr	r2, [r3, #16]
 8012e90:	69bb      	ldr	r3, [r7, #24]
 8012e92:	0159      	lsls	r1, r3, #5
 8012e94:	69fb      	ldr	r3, [r7, #28]
 8012e96:	440b      	add	r3, r1
 8012e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e9c:	4619      	mov	r1, r3
 8012e9e:	4ba7      	ldr	r3, [pc, #668]	@ (801313c <USB_EPStartXfer+0x2e4>)
 8012ea0:	4013      	ands	r3, r2
 8012ea2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012ea4:	69bb      	ldr	r3, [r7, #24]
 8012ea6:	015a      	lsls	r2, r3, #5
 8012ea8:	69fb      	ldr	r3, [r7, #28]
 8012eaa:	4413      	add	r3, r2
 8012eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012eb0:	691b      	ldr	r3, [r3, #16]
 8012eb2:	69ba      	ldr	r2, [r7, #24]
 8012eb4:	0151      	lsls	r1, r2, #5
 8012eb6:	69fa      	ldr	r2, [r7, #28]
 8012eb8:	440a      	add	r2, r1
 8012eba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012ebe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012ec2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	015a      	lsls	r2, r3, #5
 8012ec8:	69fb      	ldr	r3, [r7, #28]
 8012eca:	4413      	add	r3, r2
 8012ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ed0:	691a      	ldr	r2, [r3, #16]
 8012ed2:	69bb      	ldr	r3, [r7, #24]
 8012ed4:	0159      	lsls	r1, r3, #5
 8012ed6:	69fb      	ldr	r3, [r7, #28]
 8012ed8:	440b      	add	r3, r1
 8012eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ede:	4619      	mov	r1, r3
 8012ee0:	4b97      	ldr	r3, [pc, #604]	@ (8013140 <USB_EPStartXfer+0x2e8>)
 8012ee2:	4013      	ands	r3, r2
 8012ee4:	610b      	str	r3, [r1, #16]
 8012ee6:	e097      	b.n	8013018 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012ee8:	69bb      	ldr	r3, [r7, #24]
 8012eea:	015a      	lsls	r2, r3, #5
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	4413      	add	r3, r2
 8012ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ef4:	691a      	ldr	r2, [r3, #16]
 8012ef6:	69bb      	ldr	r3, [r7, #24]
 8012ef8:	0159      	lsls	r1, r3, #5
 8012efa:	69fb      	ldr	r3, [r7, #28]
 8012efc:	440b      	add	r3, r1
 8012efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f02:	4619      	mov	r1, r3
 8012f04:	4b8e      	ldr	r3, [pc, #568]	@ (8013140 <USB_EPStartXfer+0x2e8>)
 8012f06:	4013      	ands	r3, r2
 8012f08:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012f0a:	69bb      	ldr	r3, [r7, #24]
 8012f0c:	015a      	lsls	r2, r3, #5
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	4413      	add	r3, r2
 8012f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f16:	691a      	ldr	r2, [r3, #16]
 8012f18:	69bb      	ldr	r3, [r7, #24]
 8012f1a:	0159      	lsls	r1, r3, #5
 8012f1c:	69fb      	ldr	r3, [r7, #28]
 8012f1e:	440b      	add	r3, r1
 8012f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f24:	4619      	mov	r1, r3
 8012f26:	4b85      	ldr	r3, [pc, #532]	@ (801313c <USB_EPStartXfer+0x2e4>)
 8012f28:	4013      	ands	r3, r2
 8012f2a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8012f2c:	69bb      	ldr	r3, [r7, #24]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d11a      	bne.n	8012f68 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	691a      	ldr	r2, [r3, #16]
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	689b      	ldr	r3, [r3, #8]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d903      	bls.n	8012f46 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	689a      	ldr	r2, [r3, #8]
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012f46:	69bb      	ldr	r3, [r7, #24]
 8012f48:	015a      	lsls	r2, r3, #5
 8012f4a:	69fb      	ldr	r3, [r7, #28]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f52:	691b      	ldr	r3, [r3, #16]
 8012f54:	69ba      	ldr	r2, [r7, #24]
 8012f56:	0151      	lsls	r1, r2, #5
 8012f58:	69fa      	ldr	r2, [r7, #28]
 8012f5a:	440a      	add	r2, r1
 8012f5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012f60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012f64:	6113      	str	r3, [r2, #16]
 8012f66:	e044      	b.n	8012ff2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	691a      	ldr	r2, [r3, #16]
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	689b      	ldr	r3, [r3, #8]
 8012f70:	4413      	add	r3, r2
 8012f72:	1e5a      	subs	r2, r3, #1
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	689b      	ldr	r3, [r3, #8]
 8012f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f7c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	015a      	lsls	r2, r3, #5
 8012f82:	69fb      	ldr	r3, [r7, #28]
 8012f84:	4413      	add	r3, r2
 8012f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f8a:	691a      	ldr	r2, [r3, #16]
 8012f8c:	8afb      	ldrh	r3, [r7, #22]
 8012f8e:	04d9      	lsls	r1, r3, #19
 8012f90:	4b6c      	ldr	r3, [pc, #432]	@ (8013144 <USB_EPStartXfer+0x2ec>)
 8012f92:	400b      	ands	r3, r1
 8012f94:	69b9      	ldr	r1, [r7, #24]
 8012f96:	0148      	lsls	r0, r1, #5
 8012f98:	69f9      	ldr	r1, [r7, #28]
 8012f9a:	4401      	add	r1, r0
 8012f9c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012fa0:	4313      	orrs	r3, r2
 8012fa2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	791b      	ldrb	r3, [r3, #4]
 8012fa8:	2b01      	cmp	r3, #1
 8012faa:	d122      	bne.n	8012ff2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012fac:	69bb      	ldr	r3, [r7, #24]
 8012fae:	015a      	lsls	r2, r3, #5
 8012fb0:	69fb      	ldr	r3, [r7, #28]
 8012fb2:	4413      	add	r3, r2
 8012fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012fb8:	691b      	ldr	r3, [r3, #16]
 8012fba:	69ba      	ldr	r2, [r7, #24]
 8012fbc:	0151      	lsls	r1, r2, #5
 8012fbe:	69fa      	ldr	r2, [r7, #28]
 8012fc0:	440a      	add	r2, r1
 8012fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012fc6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8012fca:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8012fcc:	69bb      	ldr	r3, [r7, #24]
 8012fce:	015a      	lsls	r2, r3, #5
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	4413      	add	r3, r2
 8012fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012fd8:	691a      	ldr	r2, [r3, #16]
 8012fda:	8afb      	ldrh	r3, [r7, #22]
 8012fdc:	075b      	lsls	r3, r3, #29
 8012fde:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8012fe2:	69b9      	ldr	r1, [r7, #24]
 8012fe4:	0148      	lsls	r0, r1, #5
 8012fe6:	69f9      	ldr	r1, [r7, #28]
 8012fe8:	4401      	add	r1, r0
 8012fea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012fee:	4313      	orrs	r3, r2
 8012ff0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012ff2:	69bb      	ldr	r3, [r7, #24]
 8012ff4:	015a      	lsls	r2, r3, #5
 8012ff6:	69fb      	ldr	r3, [r7, #28]
 8012ff8:	4413      	add	r3, r2
 8012ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012ffe:	691a      	ldr	r2, [r3, #16]
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	691b      	ldr	r3, [r3, #16]
 8013004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013008:	69b9      	ldr	r1, [r7, #24]
 801300a:	0148      	lsls	r0, r1, #5
 801300c:	69f9      	ldr	r1, [r7, #28]
 801300e:	4401      	add	r1, r0
 8013010:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013014:	4313      	orrs	r3, r2
 8013016:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013018:	79fb      	ldrb	r3, [r7, #7]
 801301a:	2b01      	cmp	r3, #1
 801301c:	d14b      	bne.n	80130b6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	69db      	ldr	r3, [r3, #28]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d009      	beq.n	801303a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013026:	69bb      	ldr	r3, [r7, #24]
 8013028:	015a      	lsls	r2, r3, #5
 801302a:	69fb      	ldr	r3, [r7, #28]
 801302c:	4413      	add	r3, r2
 801302e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013032:	461a      	mov	r2, r3
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	69db      	ldr	r3, [r3, #28]
 8013038:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	791b      	ldrb	r3, [r3, #4]
 801303e:	2b01      	cmp	r3, #1
 8013040:	d128      	bne.n	8013094 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013048:	689b      	ldr	r3, [r3, #8]
 801304a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801304e:	2b00      	cmp	r3, #0
 8013050:	d110      	bne.n	8013074 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013052:	69bb      	ldr	r3, [r7, #24]
 8013054:	015a      	lsls	r2, r3, #5
 8013056:	69fb      	ldr	r3, [r7, #28]
 8013058:	4413      	add	r3, r2
 801305a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	69ba      	ldr	r2, [r7, #24]
 8013062:	0151      	lsls	r1, r2, #5
 8013064:	69fa      	ldr	r2, [r7, #28]
 8013066:	440a      	add	r2, r1
 8013068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801306c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013070:	6013      	str	r3, [r2, #0]
 8013072:	e00f      	b.n	8013094 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013074:	69bb      	ldr	r3, [r7, #24]
 8013076:	015a      	lsls	r2, r3, #5
 8013078:	69fb      	ldr	r3, [r7, #28]
 801307a:	4413      	add	r3, r2
 801307c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	69ba      	ldr	r2, [r7, #24]
 8013084:	0151      	lsls	r1, r2, #5
 8013086:	69fa      	ldr	r2, [r7, #28]
 8013088:	440a      	add	r2, r1
 801308a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801308e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013092:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013094:	69bb      	ldr	r3, [r7, #24]
 8013096:	015a      	lsls	r2, r3, #5
 8013098:	69fb      	ldr	r3, [r7, #28]
 801309a:	4413      	add	r3, r2
 801309c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	69ba      	ldr	r2, [r7, #24]
 80130a4:	0151      	lsls	r1, r2, #5
 80130a6:	69fa      	ldr	r2, [r7, #28]
 80130a8:	440a      	add	r2, r1
 80130aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80130ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80130b2:	6013      	str	r3, [r2, #0]
 80130b4:	e169      	b.n	801338a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80130b6:	69bb      	ldr	r3, [r7, #24]
 80130b8:	015a      	lsls	r2, r3, #5
 80130ba:	69fb      	ldr	r3, [r7, #28]
 80130bc:	4413      	add	r3, r2
 80130be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	69ba      	ldr	r2, [r7, #24]
 80130c6:	0151      	lsls	r1, r2, #5
 80130c8:	69fa      	ldr	r2, [r7, #28]
 80130ca:	440a      	add	r2, r1
 80130cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80130d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80130d4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	791b      	ldrb	r3, [r3, #4]
 80130da:	2b01      	cmp	r3, #1
 80130dc:	d015      	beq.n	801310a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	691b      	ldr	r3, [r3, #16]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	f000 8151 	beq.w	801338a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	f003 030f 	and.w	r3, r3, #15
 80130f8:	2101      	movs	r1, #1
 80130fa:	fa01 f303 	lsl.w	r3, r1, r3
 80130fe:	69f9      	ldr	r1, [r7, #28]
 8013100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013104:	4313      	orrs	r3, r2
 8013106:	634b      	str	r3, [r1, #52]	@ 0x34
 8013108:	e13f      	b.n	801338a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801310a:	69fb      	ldr	r3, [r7, #28]
 801310c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013110:	689b      	ldr	r3, [r3, #8]
 8013112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013116:	2b00      	cmp	r3, #0
 8013118:	d116      	bne.n	8013148 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801311a:	69bb      	ldr	r3, [r7, #24]
 801311c:	015a      	lsls	r2, r3, #5
 801311e:	69fb      	ldr	r3, [r7, #28]
 8013120:	4413      	add	r3, r2
 8013122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	69ba      	ldr	r2, [r7, #24]
 801312a:	0151      	lsls	r1, r2, #5
 801312c:	69fa      	ldr	r2, [r7, #28]
 801312e:	440a      	add	r2, r1
 8013130:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013134:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013138:	6013      	str	r3, [r2, #0]
 801313a:	e015      	b.n	8013168 <USB_EPStartXfer+0x310>
 801313c:	e007ffff 	.word	0xe007ffff
 8013140:	fff80000 	.word	0xfff80000
 8013144:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013148:	69bb      	ldr	r3, [r7, #24]
 801314a:	015a      	lsls	r2, r3, #5
 801314c:	69fb      	ldr	r3, [r7, #28]
 801314e:	4413      	add	r3, r2
 8013150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	69ba      	ldr	r2, [r7, #24]
 8013158:	0151      	lsls	r1, r2, #5
 801315a:	69fa      	ldr	r2, [r7, #28]
 801315c:	440a      	add	r2, r1
 801315e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013166:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	68d9      	ldr	r1, [r3, #12]
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	781a      	ldrb	r2, [r3, #0]
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	691b      	ldr	r3, [r3, #16]
 8013174:	b298      	uxth	r0, r3
 8013176:	79fb      	ldrb	r3, [r7, #7]
 8013178:	9300      	str	r3, [sp, #0]
 801317a:	4603      	mov	r3, r0
 801317c:	68f8      	ldr	r0, [r7, #12]
 801317e:	f000 f9b9 	bl	80134f4 <USB_WritePacket>
 8013182:	e102      	b.n	801338a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013184:	69bb      	ldr	r3, [r7, #24]
 8013186:	015a      	lsls	r2, r3, #5
 8013188:	69fb      	ldr	r3, [r7, #28]
 801318a:	4413      	add	r3, r2
 801318c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013190:	691a      	ldr	r2, [r3, #16]
 8013192:	69bb      	ldr	r3, [r7, #24]
 8013194:	0159      	lsls	r1, r3, #5
 8013196:	69fb      	ldr	r3, [r7, #28]
 8013198:	440b      	add	r3, r1
 801319a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801319e:	4619      	mov	r1, r3
 80131a0:	4b7c      	ldr	r3, [pc, #496]	@ (8013394 <USB_EPStartXfer+0x53c>)
 80131a2:	4013      	ands	r3, r2
 80131a4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80131a6:	69bb      	ldr	r3, [r7, #24]
 80131a8:	015a      	lsls	r2, r3, #5
 80131aa:	69fb      	ldr	r3, [r7, #28]
 80131ac:	4413      	add	r3, r2
 80131ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80131b2:	691a      	ldr	r2, [r3, #16]
 80131b4:	69bb      	ldr	r3, [r7, #24]
 80131b6:	0159      	lsls	r1, r3, #5
 80131b8:	69fb      	ldr	r3, [r7, #28]
 80131ba:	440b      	add	r3, r1
 80131bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80131c0:	4619      	mov	r1, r3
 80131c2:	4b75      	ldr	r3, [pc, #468]	@ (8013398 <USB_EPStartXfer+0x540>)
 80131c4:	4013      	ands	r3, r2
 80131c6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80131c8:	69bb      	ldr	r3, [r7, #24]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d12f      	bne.n	801322e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	691b      	ldr	r3, [r3, #16]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d003      	beq.n	80131de <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	689a      	ldr	r2, [r3, #8]
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	689a      	ldr	r2, [r3, #8]
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80131e6:	69bb      	ldr	r3, [r7, #24]
 80131e8:	015a      	lsls	r2, r3, #5
 80131ea:	69fb      	ldr	r3, [r7, #28]
 80131ec:	4413      	add	r3, r2
 80131ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80131f2:	691a      	ldr	r2, [r3, #16]
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	6a1b      	ldr	r3, [r3, #32]
 80131f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80131fc:	69b9      	ldr	r1, [r7, #24]
 80131fe:	0148      	lsls	r0, r1, #5
 8013200:	69f9      	ldr	r1, [r7, #28]
 8013202:	4401      	add	r1, r0
 8013204:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013208:	4313      	orrs	r3, r2
 801320a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801320c:	69bb      	ldr	r3, [r7, #24]
 801320e:	015a      	lsls	r2, r3, #5
 8013210:	69fb      	ldr	r3, [r7, #28]
 8013212:	4413      	add	r3, r2
 8013214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013218:	691b      	ldr	r3, [r3, #16]
 801321a:	69ba      	ldr	r2, [r7, #24]
 801321c:	0151      	lsls	r1, r2, #5
 801321e:	69fa      	ldr	r2, [r7, #28]
 8013220:	440a      	add	r2, r1
 8013222:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013226:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801322a:	6113      	str	r3, [r2, #16]
 801322c:	e05f      	b.n	80132ee <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	691b      	ldr	r3, [r3, #16]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d123      	bne.n	801327e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013236:	69bb      	ldr	r3, [r7, #24]
 8013238:	015a      	lsls	r2, r3, #5
 801323a:	69fb      	ldr	r3, [r7, #28]
 801323c:	4413      	add	r3, r2
 801323e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013242:	691a      	ldr	r2, [r3, #16]
 8013244:	68bb      	ldr	r3, [r7, #8]
 8013246:	689b      	ldr	r3, [r3, #8]
 8013248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801324c:	69b9      	ldr	r1, [r7, #24]
 801324e:	0148      	lsls	r0, r1, #5
 8013250:	69f9      	ldr	r1, [r7, #28]
 8013252:	4401      	add	r1, r0
 8013254:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013258:	4313      	orrs	r3, r2
 801325a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801325c:	69bb      	ldr	r3, [r7, #24]
 801325e:	015a      	lsls	r2, r3, #5
 8013260:	69fb      	ldr	r3, [r7, #28]
 8013262:	4413      	add	r3, r2
 8013264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013268:	691b      	ldr	r3, [r3, #16]
 801326a:	69ba      	ldr	r2, [r7, #24]
 801326c:	0151      	lsls	r1, r2, #5
 801326e:	69fa      	ldr	r2, [r7, #28]
 8013270:	440a      	add	r2, r1
 8013272:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013276:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801327a:	6113      	str	r3, [r2, #16]
 801327c:	e037      	b.n	80132ee <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	691a      	ldr	r2, [r3, #16]
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	689b      	ldr	r3, [r3, #8]
 8013286:	4413      	add	r3, r2
 8013288:	1e5a      	subs	r2, r3, #1
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	689b      	ldr	r3, [r3, #8]
 801328e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013292:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	689b      	ldr	r3, [r3, #8]
 8013298:	8afa      	ldrh	r2, [r7, #22]
 801329a:	fb03 f202 	mul.w	r2, r3, r2
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80132a2:	69bb      	ldr	r3, [r7, #24]
 80132a4:	015a      	lsls	r2, r3, #5
 80132a6:	69fb      	ldr	r3, [r7, #28]
 80132a8:	4413      	add	r3, r2
 80132aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80132ae:	691a      	ldr	r2, [r3, #16]
 80132b0:	8afb      	ldrh	r3, [r7, #22]
 80132b2:	04d9      	lsls	r1, r3, #19
 80132b4:	4b39      	ldr	r3, [pc, #228]	@ (801339c <USB_EPStartXfer+0x544>)
 80132b6:	400b      	ands	r3, r1
 80132b8:	69b9      	ldr	r1, [r7, #24]
 80132ba:	0148      	lsls	r0, r1, #5
 80132bc:	69f9      	ldr	r1, [r7, #28]
 80132be:	4401      	add	r1, r0
 80132c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80132c4:	4313      	orrs	r3, r2
 80132c6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80132c8:	69bb      	ldr	r3, [r7, #24]
 80132ca:	015a      	lsls	r2, r3, #5
 80132cc:	69fb      	ldr	r3, [r7, #28]
 80132ce:	4413      	add	r3, r2
 80132d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80132d4:	691a      	ldr	r2, [r3, #16]
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	6a1b      	ldr	r3, [r3, #32]
 80132da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80132de:	69b9      	ldr	r1, [r7, #24]
 80132e0:	0148      	lsls	r0, r1, #5
 80132e2:	69f9      	ldr	r1, [r7, #28]
 80132e4:	4401      	add	r1, r0
 80132e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80132ea:	4313      	orrs	r3, r2
 80132ec:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80132ee:	79fb      	ldrb	r3, [r7, #7]
 80132f0:	2b01      	cmp	r3, #1
 80132f2:	d10d      	bne.n	8013310 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	68db      	ldr	r3, [r3, #12]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d009      	beq.n	8013310 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	68d9      	ldr	r1, [r3, #12]
 8013300:	69bb      	ldr	r3, [r7, #24]
 8013302:	015a      	lsls	r2, r3, #5
 8013304:	69fb      	ldr	r3, [r7, #28]
 8013306:	4413      	add	r3, r2
 8013308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801330c:	460a      	mov	r2, r1
 801330e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	791b      	ldrb	r3, [r3, #4]
 8013314:	2b01      	cmp	r3, #1
 8013316:	d128      	bne.n	801336a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013318:	69fb      	ldr	r3, [r7, #28]
 801331a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801331e:	689b      	ldr	r3, [r3, #8]
 8013320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013324:	2b00      	cmp	r3, #0
 8013326:	d110      	bne.n	801334a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013328:	69bb      	ldr	r3, [r7, #24]
 801332a:	015a      	lsls	r2, r3, #5
 801332c:	69fb      	ldr	r3, [r7, #28]
 801332e:	4413      	add	r3, r2
 8013330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	69ba      	ldr	r2, [r7, #24]
 8013338:	0151      	lsls	r1, r2, #5
 801333a:	69fa      	ldr	r2, [r7, #28]
 801333c:	440a      	add	r2, r1
 801333e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013342:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013346:	6013      	str	r3, [r2, #0]
 8013348:	e00f      	b.n	801336a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801334a:	69bb      	ldr	r3, [r7, #24]
 801334c:	015a      	lsls	r2, r3, #5
 801334e:	69fb      	ldr	r3, [r7, #28]
 8013350:	4413      	add	r3, r2
 8013352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	69ba      	ldr	r2, [r7, #24]
 801335a:	0151      	lsls	r1, r2, #5
 801335c:	69fa      	ldr	r2, [r7, #28]
 801335e:	440a      	add	r2, r1
 8013360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013368:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801336a:	69bb      	ldr	r3, [r7, #24]
 801336c:	015a      	lsls	r2, r3, #5
 801336e:	69fb      	ldr	r3, [r7, #28]
 8013370:	4413      	add	r3, r2
 8013372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	69ba      	ldr	r2, [r7, #24]
 801337a:	0151      	lsls	r1, r2, #5
 801337c:	69fa      	ldr	r2, [r7, #28]
 801337e:	440a      	add	r2, r1
 8013380:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013384:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013388:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801338a:	2300      	movs	r3, #0
}
 801338c:	4618      	mov	r0, r3
 801338e:	3720      	adds	r7, #32
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	fff80000 	.word	0xfff80000
 8013398:	e007ffff 	.word	0xe007ffff
 801339c:	1ff80000 	.word	0x1ff80000

080133a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80133a0:	b480      	push	{r7}
 80133a2:	b087      	sub	sp, #28
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80133aa:	2300      	movs	r3, #0
 80133ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80133ae:	2300      	movs	r3, #0
 80133b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	785b      	ldrb	r3, [r3, #1]
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	d14a      	bne.n	8013454 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	015a      	lsls	r2, r3, #5
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	4413      	add	r3, r2
 80133c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80133d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80133d6:	f040 8086 	bne.w	80134e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	781b      	ldrb	r3, [r3, #0]
 80133de:	015a      	lsls	r2, r3, #5
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	4413      	add	r3, r2
 80133e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	683a      	ldr	r2, [r7, #0]
 80133ec:	7812      	ldrb	r2, [r2, #0]
 80133ee:	0151      	lsls	r1, r2, #5
 80133f0:	693a      	ldr	r2, [r7, #16]
 80133f2:	440a      	add	r2, r1
 80133f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80133f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80133fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	781b      	ldrb	r3, [r3, #0]
 8013402:	015a      	lsls	r2, r3, #5
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	4413      	add	r3, r2
 8013408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	683a      	ldr	r2, [r7, #0]
 8013410:	7812      	ldrb	r2, [r2, #0]
 8013412:	0151      	lsls	r1, r2, #5
 8013414:	693a      	ldr	r2, [r7, #16]
 8013416:	440a      	add	r2, r1
 8013418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801341c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013420:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	3301      	adds	r3, #1
 8013426:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801342e:	4293      	cmp	r3, r2
 8013430:	d902      	bls.n	8013438 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013432:	2301      	movs	r3, #1
 8013434:	75fb      	strb	r3, [r7, #23]
          break;
 8013436:	e056      	b.n	80134e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	015a      	lsls	r2, r3, #5
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	4413      	add	r3, r2
 8013442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801344c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013450:	d0e7      	beq.n	8013422 <USB_EPStopXfer+0x82>
 8013452:	e048      	b.n	80134e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	781b      	ldrb	r3, [r3, #0]
 8013458:	015a      	lsls	r2, r3, #5
 801345a:	693b      	ldr	r3, [r7, #16]
 801345c:	4413      	add	r3, r2
 801345e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013468:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801346c:	d13b      	bne.n	80134e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	781b      	ldrb	r3, [r3, #0]
 8013472:	015a      	lsls	r2, r3, #5
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	4413      	add	r3, r2
 8013478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	683a      	ldr	r2, [r7, #0]
 8013480:	7812      	ldrb	r2, [r2, #0]
 8013482:	0151      	lsls	r1, r2, #5
 8013484:	693a      	ldr	r2, [r7, #16]
 8013486:	440a      	add	r2, r1
 8013488:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801348c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013490:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	781b      	ldrb	r3, [r3, #0]
 8013496:	015a      	lsls	r2, r3, #5
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	4413      	add	r3, r2
 801349c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	683a      	ldr	r2, [r7, #0]
 80134a4:	7812      	ldrb	r2, [r2, #0]
 80134a6:	0151      	lsls	r1, r2, #5
 80134a8:	693a      	ldr	r2, [r7, #16]
 80134aa:	440a      	add	r2, r1
 80134ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80134b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80134b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	3301      	adds	r3, #1
 80134ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80134c2:	4293      	cmp	r3, r2
 80134c4:	d902      	bls.n	80134cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80134c6:	2301      	movs	r3, #1
 80134c8:	75fb      	strb	r3, [r7, #23]
          break;
 80134ca:	e00c      	b.n	80134e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	781b      	ldrb	r3, [r3, #0]
 80134d0:	015a      	lsls	r2, r3, #5
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	4413      	add	r3, r2
 80134d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80134e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80134e4:	d0e7      	beq.n	80134b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80134e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80134e8:	4618      	mov	r0, r3
 80134ea:	371c      	adds	r7, #28
 80134ec:	46bd      	mov	sp, r7
 80134ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f2:	4770      	bx	lr

080134f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80134f4:	b480      	push	{r7}
 80134f6:	b089      	sub	sp, #36	@ 0x24
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	60f8      	str	r0, [r7, #12]
 80134fc:	60b9      	str	r1, [r7, #8]
 80134fe:	4611      	mov	r1, r2
 8013500:	461a      	mov	r2, r3
 8013502:	460b      	mov	r3, r1
 8013504:	71fb      	strb	r3, [r7, #7]
 8013506:	4613      	mov	r3, r2
 8013508:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013512:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013516:	2b00      	cmp	r3, #0
 8013518:	d123      	bne.n	8013562 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801351a:	88bb      	ldrh	r3, [r7, #4]
 801351c:	3303      	adds	r3, #3
 801351e:	089b      	lsrs	r3, r3, #2
 8013520:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013522:	2300      	movs	r3, #0
 8013524:	61bb      	str	r3, [r7, #24]
 8013526:	e018      	b.n	801355a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013528:	79fb      	ldrb	r3, [r7, #7]
 801352a:	031a      	lsls	r2, r3, #12
 801352c:	697b      	ldr	r3, [r7, #20]
 801352e:	4413      	add	r3, r2
 8013530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013534:	461a      	mov	r2, r3
 8013536:	69fb      	ldr	r3, [r7, #28]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801353c:	69fb      	ldr	r3, [r7, #28]
 801353e:	3301      	adds	r3, #1
 8013540:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013542:	69fb      	ldr	r3, [r7, #28]
 8013544:	3301      	adds	r3, #1
 8013546:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013548:	69fb      	ldr	r3, [r7, #28]
 801354a:	3301      	adds	r3, #1
 801354c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801354e:	69fb      	ldr	r3, [r7, #28]
 8013550:	3301      	adds	r3, #1
 8013552:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013554:	69bb      	ldr	r3, [r7, #24]
 8013556:	3301      	adds	r3, #1
 8013558:	61bb      	str	r3, [r7, #24]
 801355a:	69ba      	ldr	r2, [r7, #24]
 801355c:	693b      	ldr	r3, [r7, #16]
 801355e:	429a      	cmp	r2, r3
 8013560:	d3e2      	bcc.n	8013528 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013562:	2300      	movs	r3, #0
}
 8013564:	4618      	mov	r0, r3
 8013566:	3724      	adds	r7, #36	@ 0x24
 8013568:	46bd      	mov	sp, r7
 801356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356e:	4770      	bx	lr

08013570 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013570:	b480      	push	{r7}
 8013572:	b08b      	sub	sp, #44	@ 0x2c
 8013574:	af00      	add	r7, sp, #0
 8013576:	60f8      	str	r0, [r7, #12]
 8013578:	60b9      	str	r1, [r7, #8]
 801357a:	4613      	mov	r3, r2
 801357c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013586:	88fb      	ldrh	r3, [r7, #6]
 8013588:	089b      	lsrs	r3, r3, #2
 801358a:	b29b      	uxth	r3, r3
 801358c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801358e:	88fb      	ldrh	r3, [r7, #6]
 8013590:	f003 0303 	and.w	r3, r3, #3
 8013594:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013596:	2300      	movs	r3, #0
 8013598:	623b      	str	r3, [r7, #32]
 801359a:	e014      	b.n	80135c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80135a2:	681a      	ldr	r2, [r3, #0]
 80135a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80135a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135aa:	3301      	adds	r3, #1
 80135ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80135ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b0:	3301      	adds	r3, #1
 80135b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80135b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b6:	3301      	adds	r3, #1
 80135b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80135ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135bc:	3301      	adds	r3, #1
 80135be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80135c0:	6a3b      	ldr	r3, [r7, #32]
 80135c2:	3301      	adds	r3, #1
 80135c4:	623b      	str	r3, [r7, #32]
 80135c6:	6a3a      	ldr	r2, [r7, #32]
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d3e6      	bcc.n	801359c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80135ce:	8bfb      	ldrh	r3, [r7, #30]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d01e      	beq.n	8013612 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80135d4:	2300      	movs	r3, #0
 80135d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80135de:	461a      	mov	r2, r3
 80135e0:	f107 0310 	add.w	r3, r7, #16
 80135e4:	6812      	ldr	r2, [r2, #0]
 80135e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80135e8:	693a      	ldr	r2, [r7, #16]
 80135ea:	6a3b      	ldr	r3, [r7, #32]
 80135ec:	b2db      	uxtb	r3, r3
 80135ee:	00db      	lsls	r3, r3, #3
 80135f0:	fa22 f303 	lsr.w	r3, r2, r3
 80135f4:	b2da      	uxtb	r2, r3
 80135f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135f8:	701a      	strb	r2, [r3, #0]
      i++;
 80135fa:	6a3b      	ldr	r3, [r7, #32]
 80135fc:	3301      	adds	r3, #1
 80135fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8013600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013602:	3301      	adds	r3, #1
 8013604:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8013606:	8bfb      	ldrh	r3, [r7, #30]
 8013608:	3b01      	subs	r3, #1
 801360a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801360c:	8bfb      	ldrh	r3, [r7, #30]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d1ea      	bne.n	80135e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013614:	4618      	mov	r0, r3
 8013616:	372c      	adds	r7, #44	@ 0x2c
 8013618:	46bd      	mov	sp, r7
 801361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361e:	4770      	bx	lr

08013620 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013620:	b480      	push	{r7}
 8013622:	b085      	sub	sp, #20
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	781b      	ldrb	r3, [r3, #0]
 8013632:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013634:	683b      	ldr	r3, [r7, #0]
 8013636:	785b      	ldrb	r3, [r3, #1]
 8013638:	2b01      	cmp	r3, #1
 801363a:	d12c      	bne.n	8013696 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	015a      	lsls	r2, r3, #5
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	4413      	add	r3, r2
 8013644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	2b00      	cmp	r3, #0
 801364c:	db12      	blt.n	8013674 <USB_EPSetStall+0x54>
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d00f      	beq.n	8013674 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	015a      	lsls	r2, r3, #5
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	4413      	add	r3, r2
 801365c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	68ba      	ldr	r2, [r7, #8]
 8013664:	0151      	lsls	r1, r2, #5
 8013666:	68fa      	ldr	r2, [r7, #12]
 8013668:	440a      	add	r2, r1
 801366a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801366e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013672:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	015a      	lsls	r2, r3, #5
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	4413      	add	r3, r2
 801367c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	68ba      	ldr	r2, [r7, #8]
 8013684:	0151      	lsls	r1, r2, #5
 8013686:	68fa      	ldr	r2, [r7, #12]
 8013688:	440a      	add	r2, r1
 801368a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801368e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013692:	6013      	str	r3, [r2, #0]
 8013694:	e02b      	b.n	80136ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	015a      	lsls	r2, r3, #5
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	4413      	add	r3, r2
 801369e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	db12      	blt.n	80136ce <USB_EPSetStall+0xae>
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d00f      	beq.n	80136ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	015a      	lsls	r2, r3, #5
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	4413      	add	r3, r2
 80136b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	68ba      	ldr	r2, [r7, #8]
 80136be:	0151      	lsls	r1, r2, #5
 80136c0:	68fa      	ldr	r2, [r7, #12]
 80136c2:	440a      	add	r2, r1
 80136c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80136c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80136cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80136ce:	68bb      	ldr	r3, [r7, #8]
 80136d0:	015a      	lsls	r2, r3, #5
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	4413      	add	r3, r2
 80136d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	68ba      	ldr	r2, [r7, #8]
 80136de:	0151      	lsls	r1, r2, #5
 80136e0:	68fa      	ldr	r2, [r7, #12]
 80136e2:	440a      	add	r2, r1
 80136e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80136e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80136ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80136ee:	2300      	movs	r3, #0
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	3714      	adds	r7, #20
 80136f4:	46bd      	mov	sp, r7
 80136f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fa:	4770      	bx	lr

080136fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80136fc:	b480      	push	{r7}
 80136fe:	b085      	sub	sp, #20
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
 8013704:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	785b      	ldrb	r3, [r3, #1]
 8013714:	2b01      	cmp	r3, #1
 8013716:	d128      	bne.n	801376a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	015a      	lsls	r2, r3, #5
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	4413      	add	r3, r2
 8013720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	68ba      	ldr	r2, [r7, #8]
 8013728:	0151      	lsls	r1, r2, #5
 801372a:	68fa      	ldr	r2, [r7, #12]
 801372c:	440a      	add	r2, r1
 801372e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013732:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013736:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013738:	683b      	ldr	r3, [r7, #0]
 801373a:	791b      	ldrb	r3, [r3, #4]
 801373c:	2b03      	cmp	r3, #3
 801373e:	d003      	beq.n	8013748 <USB_EPClearStall+0x4c>
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	791b      	ldrb	r3, [r3, #4]
 8013744:	2b02      	cmp	r3, #2
 8013746:	d138      	bne.n	80137ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	015a      	lsls	r2, r3, #5
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	4413      	add	r3, r2
 8013750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	68ba      	ldr	r2, [r7, #8]
 8013758:	0151      	lsls	r1, r2, #5
 801375a:	68fa      	ldr	r2, [r7, #12]
 801375c:	440a      	add	r2, r1
 801375e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013766:	6013      	str	r3, [r2, #0]
 8013768:	e027      	b.n	80137ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	015a      	lsls	r2, r3, #5
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	4413      	add	r3, r2
 8013772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	68ba      	ldr	r2, [r7, #8]
 801377a:	0151      	lsls	r1, r2, #5
 801377c:	68fa      	ldr	r2, [r7, #12]
 801377e:	440a      	add	r2, r1
 8013780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013784:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013788:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	791b      	ldrb	r3, [r3, #4]
 801378e:	2b03      	cmp	r3, #3
 8013790:	d003      	beq.n	801379a <USB_EPClearStall+0x9e>
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	791b      	ldrb	r3, [r3, #4]
 8013796:	2b02      	cmp	r3, #2
 8013798:	d10f      	bne.n	80137ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	015a      	lsls	r2, r3, #5
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	4413      	add	r3, r2
 80137a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	68ba      	ldr	r2, [r7, #8]
 80137aa:	0151      	lsls	r1, r2, #5
 80137ac:	68fa      	ldr	r2, [r7, #12]
 80137ae:	440a      	add	r2, r1
 80137b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80137b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80137b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80137ba:	2300      	movs	r3, #0
}
 80137bc:	4618      	mov	r0, r3
 80137be:	3714      	adds	r7, #20
 80137c0:	46bd      	mov	sp, r7
 80137c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c6:	4770      	bx	lr

080137c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80137c8:	b480      	push	{r7}
 80137ca:	b085      	sub	sp, #20
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
 80137d0:	460b      	mov	r3, r1
 80137d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	68fa      	ldr	r2, [r7, #12]
 80137e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80137e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80137ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80137f2:	681a      	ldr	r2, [r3, #0]
 80137f4:	78fb      	ldrb	r3, [r7, #3]
 80137f6:	011b      	lsls	r3, r3, #4
 80137f8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80137fc:	68f9      	ldr	r1, [r7, #12]
 80137fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013802:	4313      	orrs	r3, r2
 8013804:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013806:	2300      	movs	r3, #0
}
 8013808:	4618      	mov	r0, r3
 801380a:	3714      	adds	r7, #20
 801380c:	46bd      	mov	sp, r7
 801380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013812:	4770      	bx	lr

08013814 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8013814:	b480      	push	{r7}
 8013816:	b085      	sub	sp, #20
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	68fa      	ldr	r2, [r7, #12]
 801382a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801382e:	f023 0303 	bic.w	r3, r3, #3
 8013832:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801383a:	685b      	ldr	r3, [r3, #4]
 801383c:	68fa      	ldr	r2, [r7, #12]
 801383e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013842:	f023 0302 	bic.w	r3, r3, #2
 8013846:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013848:	2300      	movs	r3, #0
}
 801384a:	4618      	mov	r0, r3
 801384c:	3714      	adds	r7, #20
 801384e:	46bd      	mov	sp, r7
 8013850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013854:	4770      	bx	lr

08013856 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8013856:	b480      	push	{r7}
 8013858:	b085      	sub	sp, #20
 801385a:	af00      	add	r7, sp, #0
 801385c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	68fa      	ldr	r2, [r7, #12]
 801386c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013870:	f023 0303 	bic.w	r3, r3, #3
 8013874:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801387c:	685b      	ldr	r3, [r3, #4]
 801387e:	68fa      	ldr	r2, [r7, #12]
 8013880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013884:	f043 0302 	orr.w	r3, r3, #2
 8013888:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801388a:	2300      	movs	r3, #0
}
 801388c:	4618      	mov	r0, r3
 801388e:	3714      	adds	r7, #20
 8013890:	46bd      	mov	sp, r7
 8013892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013896:	4770      	bx	lr

08013898 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8013898:	b480      	push	{r7}
 801389a:	b085      	sub	sp, #20
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	695b      	ldr	r3, [r3, #20]
 80138a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	699b      	ldr	r3, [r3, #24]
 80138aa:	68fa      	ldr	r2, [r7, #12]
 80138ac:	4013      	ands	r3, r2
 80138ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80138b0:	68fb      	ldr	r3, [r7, #12]
}
 80138b2:	4618      	mov	r0, r3
 80138b4:	3714      	adds	r7, #20
 80138b6:	46bd      	mov	sp, r7
 80138b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138bc:	4770      	bx	lr

080138be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80138be:	b480      	push	{r7}
 80138c0:	b085      	sub	sp, #20
 80138c2:	af00      	add	r7, sp, #0
 80138c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80138d0:	699b      	ldr	r3, [r3, #24]
 80138d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80138da:	69db      	ldr	r3, [r3, #28]
 80138dc:	68ba      	ldr	r2, [r7, #8]
 80138de:	4013      	ands	r3, r2
 80138e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	0c1b      	lsrs	r3, r3, #16
}
 80138e6:	4618      	mov	r0, r3
 80138e8:	3714      	adds	r7, #20
 80138ea:	46bd      	mov	sp, r7
 80138ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f0:	4770      	bx	lr

080138f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80138f2:	b480      	push	{r7}
 80138f4:	b085      	sub	sp, #20
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013904:	699b      	ldr	r3, [r3, #24]
 8013906:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801390e:	69db      	ldr	r3, [r3, #28]
 8013910:	68ba      	ldr	r2, [r7, #8]
 8013912:	4013      	ands	r3, r2
 8013914:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	b29b      	uxth	r3, r3
}
 801391a:	4618      	mov	r0, r3
 801391c:	3714      	adds	r7, #20
 801391e:	46bd      	mov	sp, r7
 8013920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013924:	4770      	bx	lr

08013926 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013926:	b480      	push	{r7}
 8013928:	b085      	sub	sp, #20
 801392a:	af00      	add	r7, sp, #0
 801392c:	6078      	str	r0, [r7, #4]
 801392e:	460b      	mov	r3, r1
 8013930:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013936:	78fb      	ldrb	r3, [r7, #3]
 8013938:	015a      	lsls	r2, r3, #5
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	4413      	add	r3, r2
 801393e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013942:	689b      	ldr	r3, [r3, #8]
 8013944:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801394c:	695b      	ldr	r3, [r3, #20]
 801394e:	68ba      	ldr	r2, [r7, #8]
 8013950:	4013      	ands	r3, r2
 8013952:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013954:	68bb      	ldr	r3, [r7, #8]
}
 8013956:	4618      	mov	r0, r3
 8013958:	3714      	adds	r7, #20
 801395a:	46bd      	mov	sp, r7
 801395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013960:	4770      	bx	lr

08013962 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013962:	b480      	push	{r7}
 8013964:	b087      	sub	sp, #28
 8013966:	af00      	add	r7, sp, #0
 8013968:	6078      	str	r0, [r7, #4]
 801396a:	460b      	mov	r3, r1
 801396c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013978:	691b      	ldr	r3, [r3, #16]
 801397a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013984:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013986:	78fb      	ldrb	r3, [r7, #3]
 8013988:	f003 030f 	and.w	r3, r3, #15
 801398c:	68fa      	ldr	r2, [r7, #12]
 801398e:	fa22 f303 	lsr.w	r3, r2, r3
 8013992:	01db      	lsls	r3, r3, #7
 8013994:	b2db      	uxtb	r3, r3
 8013996:	693a      	ldr	r2, [r7, #16]
 8013998:	4313      	orrs	r3, r2
 801399a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801399c:	78fb      	ldrb	r3, [r7, #3]
 801399e:	015a      	lsls	r2, r3, #5
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	4413      	add	r3, r2
 80139a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139a8:	689b      	ldr	r3, [r3, #8]
 80139aa:	693a      	ldr	r2, [r7, #16]
 80139ac:	4013      	ands	r3, r2
 80139ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80139b0:	68bb      	ldr	r3, [r7, #8]
}
 80139b2:	4618      	mov	r0, r3
 80139b4:	371c      	adds	r7, #28
 80139b6:	46bd      	mov	sp, r7
 80139b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139bc:	4770      	bx	lr

080139be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80139be:	b480      	push	{r7}
 80139c0:	b083      	sub	sp, #12
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	695b      	ldr	r3, [r3, #20]
 80139ca:	f003 0301 	and.w	r3, r3, #1
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	370c      	adds	r7, #12
 80139d2:	46bd      	mov	sp, r7
 80139d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d8:	4770      	bx	lr
	...

080139dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80139dc:	b480      	push	{r7}
 80139de:	b085      	sub	sp, #20
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139ee:	681a      	ldr	r2, [r3, #0]
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139f6:	4619      	mov	r1, r3
 80139f8:	4b09      	ldr	r3, [pc, #36]	@ (8013a20 <USB_ActivateSetup+0x44>)
 80139fa:	4013      	ands	r3, r2
 80139fc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013a04:	685b      	ldr	r3, [r3, #4]
 8013a06:	68fa      	ldr	r2, [r7, #12]
 8013a08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013a10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013a12:	2300      	movs	r3, #0
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3714      	adds	r7, #20
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr
 8013a20:	fffff800 	.word	0xfffff800

08013a24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8013a24:	b480      	push	{r7}
 8013a26:	b087      	sub	sp, #28
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	60f8      	str	r0, [r7, #12]
 8013a2c:	460b      	mov	r3, r1
 8013a2e:	607a      	str	r2, [r7, #4]
 8013a30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	333c      	adds	r3, #60	@ 0x3c
 8013a3a:	3304      	adds	r3, #4
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	4a26      	ldr	r2, [pc, #152]	@ (8013adc <USB_EP0_OutStart+0xb8>)
 8013a44:	4293      	cmp	r3, r2
 8013a46:	d90a      	bls.n	8013a5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a48:	697b      	ldr	r3, [r7, #20]
 8013a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013a54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013a58:	d101      	bne.n	8013a5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	e037      	b.n	8013ace <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013a5e:	697b      	ldr	r3, [r7, #20]
 8013a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a64:	461a      	mov	r2, r3
 8013a66:	2300      	movs	r3, #0
 8013a68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013a6a:	697b      	ldr	r3, [r7, #20]
 8013a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a70:	691b      	ldr	r3, [r3, #16]
 8013a72:	697a      	ldr	r2, [r7, #20]
 8013a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013a78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013a7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a84:	691b      	ldr	r3, [r3, #16]
 8013a86:	697a      	ldr	r2, [r7, #20]
 8013a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013a8c:	f043 0318 	orr.w	r3, r3, #24
 8013a90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013a92:	697b      	ldr	r3, [r7, #20]
 8013a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a98:	691b      	ldr	r3, [r3, #16]
 8013a9a:	697a      	ldr	r2, [r7, #20]
 8013a9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013aa0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8013aa4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013aa6:	7afb      	ldrb	r3, [r7, #11]
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d10f      	bne.n	8013acc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013aac:	697b      	ldr	r3, [r7, #20]
 8013aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	697a      	ldr	r2, [r7, #20]
 8013ac2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013ac6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8013aca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013acc:	2300      	movs	r3, #0
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	371c      	adds	r7, #28
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad8:	4770      	bx	lr
 8013ada:	bf00      	nop
 8013adc:	4f54300a 	.word	0x4f54300a

08013ae0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013ae0:	b480      	push	{r7}
 8013ae2:	b085      	sub	sp, #20
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013ae8:	2300      	movs	r3, #0
 8013aea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	3301      	adds	r3, #1
 8013af0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013af8:	d901      	bls.n	8013afe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013afa:	2303      	movs	r3, #3
 8013afc:	e01b      	b.n	8013b36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	691b      	ldr	r3, [r3, #16]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	daf2      	bge.n	8013aec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013b06:	2300      	movs	r3, #0
 8013b08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	691b      	ldr	r3, [r3, #16]
 8013b0e:	f043 0201 	orr.w	r2, r3, #1
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	3301      	adds	r3, #1
 8013b1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013b22:	d901      	bls.n	8013b28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013b24:	2303      	movs	r3, #3
 8013b26:	e006      	b.n	8013b36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	691b      	ldr	r3, [r3, #16]
 8013b2c:	f003 0301 	and.w	r3, r3, #1
 8013b30:	2b01      	cmp	r3, #1
 8013b32:	d0f0      	beq.n	8013b16 <USB_CoreReset+0x36>

  return HAL_OK;
 8013b34:	2300      	movs	r3, #0
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	3714      	adds	r7, #20
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b40:	4770      	bx	lr

08013b42 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013b42:	b480      	push	{r7}
 8013b44:	b083      	sub	sp, #12
 8013b46:	af00      	add	r7, sp, #0
 8013b48:	6078      	str	r0, [r7, #4]
 8013b4a:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d101      	bne.n	8013b56 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013b52:	2303      	movs	r3, #3
 8013b54:	e009      	b.n	8013b6a <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	33b0      	adds	r3, #176	@ 0xb0
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	4413      	add	r3, r2
 8013b64:	683a      	ldr	r2, [r7, #0]
 8013b66:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013b68:	2300      	movs	r3, #0
}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	370c      	adds	r7, #12
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b74:	4770      	bx	lr

08013b76 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013b76:	b480      	push	{r7}
 8013b78:	b087      	sub	sp, #28
 8013b7a:	af00      	add	r7, sp, #0
 8013b7c:	60f8      	str	r0, [r7, #12]
 8013b7e:	60b9      	str	r1, [r7, #8]
 8013b80:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	32b0      	adds	r2, #176	@ 0xb0
 8013b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b90:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d101      	bne.n	8013b9c <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013b98:	2303      	movs	r3, #3
 8013b9a:	e008      	b.n	8013bae <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013b9c:	697b      	ldr	r3, [r7, #20]
 8013b9e:	68ba      	ldr	r2, [r7, #8]
 8013ba0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	687a      	ldr	r2, [r7, #4]
 8013ba8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013bac:	2300      	movs	r3, #0
}
 8013bae:	4618      	mov	r0, r3
 8013bb0:	371c      	adds	r7, #28
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb8:	4770      	bx	lr

08013bba <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013bba:	b480      	push	{r7}
 8013bbc:	b085      	sub	sp, #20
 8013bbe:	af00      	add	r7, sp, #0
 8013bc0:	6078      	str	r0, [r7, #4]
 8013bc2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	32b0      	adds	r2, #176	@ 0xb0
 8013bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bd2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d101      	bne.n	8013bde <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013bda:	2303      	movs	r3, #3
 8013bdc:	e004      	b.n	8013be8 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	683a      	ldr	r2, [r7, #0]
 8013be2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8013be6:	2300      	movs	r3, #0
}
 8013be8:	4618      	mov	r0, r3
 8013bea:	3714      	adds	r7, #20
 8013bec:	46bd      	mov	sp, r7
 8013bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf2:	4770      	bx	lr

08013bf4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b084      	sub	sp, #16
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	32b0      	adds	r2, #176	@ 0xb0
 8013c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c0a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013c10:	68bb      	ldr	r3, [r7, #8]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d101      	bne.n	8013c1a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013c16:	2303      	movs	r3, #3
 8013c18:	e025      	b.n	8013c66 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d11f      	bne.n	8013c64 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	2201      	movs	r2, #1
 8013c28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013c2c:	4b10      	ldr	r3, [pc, #64]	@ (8013c70 <USBD_CDC_TransmitPacket+0x7c>)
 8013c2e:	781b      	ldrb	r3, [r3, #0]
 8013c30:	f003 020f 	and.w	r2, r3, #15
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	4613      	mov	r3, r2
 8013c3e:	009b      	lsls	r3, r3, #2
 8013c40:	4413      	add	r3, r2
 8013c42:	009b      	lsls	r3, r3, #2
 8013c44:	4403      	add	r3, r0
 8013c46:	3318      	adds	r3, #24
 8013c48:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013c4a:	4b09      	ldr	r3, [pc, #36]	@ (8013c70 <USBD_CDC_TransmitPacket+0x7c>)
 8013c4c:	7819      	ldrb	r1, [r3, #0]
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f006 fa18 	bl	801a090 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013c60:	2300      	movs	r3, #0
 8013c62:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3710      	adds	r7, #16
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}
 8013c6e:	bf00      	nop
 8013c70:	24000039 	.word	0x24000039

08013c74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b084      	sub	sp, #16
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	32b0      	adds	r2, #176	@ 0xb0
 8013c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	32b0      	adds	r2, #176	@ 0xb0
 8013c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d101      	bne.n	8013ca2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013c9e:	2303      	movs	r3, #3
 8013ca0:	e018      	b.n	8013cd4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	7c1b      	ldrb	r3, [r3, #16]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d10a      	bne.n	8013cc0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013caa:	4b0c      	ldr	r3, [pc, #48]	@ (8013cdc <USBD_CDC_ReceivePacket+0x68>)
 8013cac:	7819      	ldrb	r1, [r3, #0]
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013cb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f006 fa0a 	bl	801a0d2 <USBD_LL_PrepareReceive>
 8013cbe:	e008      	b.n	8013cd2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013cc0:	4b06      	ldr	r3, [pc, #24]	@ (8013cdc <USBD_CDC_ReceivePacket+0x68>)
 8013cc2:	7819      	ldrb	r1, [r3, #0]
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013cca:	2340      	movs	r3, #64	@ 0x40
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f006 fa00 	bl	801a0d2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013cd2:	2300      	movs	r3, #0
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3710      	adds	r7, #16
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}
 8013cdc:	2400003a 	.word	0x2400003a

08013ce0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b086      	sub	sp, #24
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	60f8      	str	r0, [r7, #12]
 8013ce8:	60b9      	str	r1, [r7, #8]
 8013cea:	4613      	mov	r3, r2
 8013cec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d101      	bne.n	8013cf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013cf4:	2303      	movs	r3, #3
 8013cf6:	e01f      	b.n	8013d38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	2200      	movs	r2, #0
 8013d04:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d003      	beq.n	8013d1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	68ba      	ldr	r2, [r7, #8]
 8013d1a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	2201      	movs	r2, #1
 8013d22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	79fa      	ldrb	r2, [r7, #7]
 8013d2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013d2c:	68f8      	ldr	r0, [r7, #12]
 8013d2e:	f006 f843 	bl	8019db8 <USBD_LL_Init>
 8013d32:	4603      	mov	r3, r0
 8013d34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3718      	adds	r7, #24
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}

08013d40 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b084      	sub	sp, #16
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013d4e:	683b      	ldr	r3, [r7, #0]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d101      	bne.n	8013d58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013d54:	2303      	movs	r3, #3
 8013d56:	e025      	b.n	8013da4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	683a      	ldr	r2, [r7, #0]
 8013d5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	32ae      	adds	r2, #174	@ 0xae
 8013d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d00f      	beq.n	8013d94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	32ae      	adds	r2, #174	@ 0xae
 8013d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d84:	f107 020e 	add.w	r2, r7, #14
 8013d88:	4610      	mov	r0, r2
 8013d8a:	4798      	blx	r3
 8013d8c:	4602      	mov	r2, r0
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013d9a:	1c5a      	adds	r2, r3, #1
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8013da2:	2300      	movs	r3, #0
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3710      	adds	r7, #16
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}

08013dac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f006 f863 	bl	8019e80 <USBD_LL_Start>
 8013dba:	4603      	mov	r3, r0
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3708      	adds	r7, #8
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013dc4:	b480      	push	{r7}
 8013dc6:	b083      	sub	sp, #12
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013dcc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	370c      	adds	r7, #12
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd8:	4770      	bx	lr

08013dda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013dda:	b580      	push	{r7, lr}
 8013ddc:	b084      	sub	sp, #16
 8013dde:	af00      	add	r7, sp, #0
 8013de0:	6078      	str	r0, [r7, #4]
 8013de2:	460b      	mov	r3, r1
 8013de4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013de6:	2300      	movs	r3, #0
 8013de8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d009      	beq.n	8013e08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	78fa      	ldrb	r2, [r7, #3]
 8013dfe:	4611      	mov	r1, r2
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	4798      	blx	r3
 8013e04:	4603      	mov	r3, r0
 8013e06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	3710      	adds	r7, #16
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}

08013e12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013e12:	b580      	push	{r7, lr}
 8013e14:	b084      	sub	sp, #16
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	6078      	str	r0, [r7, #4]
 8013e1a:	460b      	mov	r3, r1
 8013e1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	78fa      	ldrb	r2, [r7, #3]
 8013e2c:	4611      	mov	r1, r2
 8013e2e:	6878      	ldr	r0, [r7, #4]
 8013e30:	4798      	blx	r3
 8013e32:	4603      	mov	r3, r0
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d001      	beq.n	8013e3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013e38:	2303      	movs	r3, #3
 8013e3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	3710      	adds	r7, #16
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}

08013e46 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013e46:	b580      	push	{r7, lr}
 8013e48:	b084      	sub	sp, #16
 8013e4a:	af00      	add	r7, sp, #0
 8013e4c:	6078      	str	r0, [r7, #4]
 8013e4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013e56:	6839      	ldr	r1, [r7, #0]
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f001 f8e2 	bl	8015022 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	2201      	movs	r2, #1
 8013e62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013e6c:	461a      	mov	r2, r3
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013e7a:	f003 031f 	and.w	r3, r3, #31
 8013e7e:	2b02      	cmp	r3, #2
 8013e80:	d01a      	beq.n	8013eb8 <USBD_LL_SetupStage+0x72>
 8013e82:	2b02      	cmp	r3, #2
 8013e84:	d822      	bhi.n	8013ecc <USBD_LL_SetupStage+0x86>
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d002      	beq.n	8013e90 <USBD_LL_SetupStage+0x4a>
 8013e8a:	2b01      	cmp	r3, #1
 8013e8c:	d00a      	beq.n	8013ea4 <USBD_LL_SetupStage+0x5e>
 8013e8e:	e01d      	b.n	8013ecc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013e96:	4619      	mov	r1, r3
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f000 fb0f 	bl	80144bc <USBD_StdDevReq>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8013ea2:	e020      	b.n	8013ee6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013eaa:	4619      	mov	r1, r3
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f000 fb77 	bl	80145a0 <USBD_StdItfReq>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8013eb6:	e016      	b.n	8013ee6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013ebe:	4619      	mov	r1, r3
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	f000 fbd9 	bl	8014678 <USBD_StdEPReq>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8013eca:	e00c      	b.n	8013ee6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013ed2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013ed6:	b2db      	uxtb	r3, r3
 8013ed8:	4619      	mov	r1, r3
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f006 f84f 	bl	8019f7e <USBD_LL_StallEP>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8013ee4:	bf00      	nop
  }

  return ret;
 8013ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3710      	adds	r7, #16
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}

08013ef0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b086      	sub	sp, #24
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	60f8      	str	r0, [r7, #12]
 8013ef8:	460b      	mov	r3, r1
 8013efa:	607a      	str	r2, [r7, #4]
 8013efc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013efe:	2300      	movs	r3, #0
 8013f00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013f02:	7afb      	ldrb	r3, [r7, #11]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d16e      	bne.n	8013fe6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013f0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013f16:	2b03      	cmp	r3, #3
 8013f18:	f040 8098 	bne.w	801404c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	689a      	ldr	r2, [r3, #8]
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	429a      	cmp	r2, r3
 8013f26:	d913      	bls.n	8013f50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013f28:	693b      	ldr	r3, [r7, #16]
 8013f2a:	689a      	ldr	r2, [r3, #8]
 8013f2c:	693b      	ldr	r3, [r7, #16]
 8013f2e:	68db      	ldr	r3, [r3, #12]
 8013f30:	1ad2      	subs	r2, r2, r3
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	68da      	ldr	r2, [r3, #12]
 8013f3a:	693b      	ldr	r3, [r7, #16]
 8013f3c:	689b      	ldr	r3, [r3, #8]
 8013f3e:	4293      	cmp	r3, r2
 8013f40:	bf28      	it	cs
 8013f42:	4613      	movcs	r3, r2
 8013f44:	461a      	mov	r2, r3
 8013f46:	6879      	ldr	r1, [r7, #4]
 8013f48:	68f8      	ldr	r0, [r7, #12]
 8013f4a:	f001 f96a 	bl	8015222 <USBD_CtlContinueRx>
 8013f4e:	e07d      	b.n	801404c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013f56:	f003 031f 	and.w	r3, r3, #31
 8013f5a:	2b02      	cmp	r3, #2
 8013f5c:	d014      	beq.n	8013f88 <USBD_LL_DataOutStage+0x98>
 8013f5e:	2b02      	cmp	r3, #2
 8013f60:	d81d      	bhi.n	8013f9e <USBD_LL_DataOutStage+0xae>
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d002      	beq.n	8013f6c <USBD_LL_DataOutStage+0x7c>
 8013f66:	2b01      	cmp	r3, #1
 8013f68:	d003      	beq.n	8013f72 <USBD_LL_DataOutStage+0x82>
 8013f6a:	e018      	b.n	8013f9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	75bb      	strb	r3, [r7, #22]
            break;
 8013f70:	e018      	b.n	8013fa4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013f78:	b2db      	uxtb	r3, r3
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	68f8      	ldr	r0, [r7, #12]
 8013f7e:	f000 fa64 	bl	801444a <USBD_CoreFindIF>
 8013f82:	4603      	mov	r3, r0
 8013f84:	75bb      	strb	r3, [r7, #22]
            break;
 8013f86:	e00d      	b.n	8013fa4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013f8e:	b2db      	uxtb	r3, r3
 8013f90:	4619      	mov	r1, r3
 8013f92:	68f8      	ldr	r0, [r7, #12]
 8013f94:	f000 fa66 	bl	8014464 <USBD_CoreFindEP>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	75bb      	strb	r3, [r7, #22]
            break;
 8013f9c:	e002      	b.n	8013fa4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	75bb      	strb	r3, [r7, #22]
            break;
 8013fa2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013fa4:	7dbb      	ldrb	r3, [r7, #22]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d119      	bne.n	8013fde <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013fb0:	b2db      	uxtb	r3, r3
 8013fb2:	2b03      	cmp	r3, #3
 8013fb4:	d113      	bne.n	8013fde <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013fb6:	7dba      	ldrb	r2, [r7, #22]
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	32ae      	adds	r2, #174	@ 0xae
 8013fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fc0:	691b      	ldr	r3, [r3, #16]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d00b      	beq.n	8013fde <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013fc6:	7dba      	ldrb	r2, [r7, #22]
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013fce:	7dba      	ldrb	r2, [r7, #22]
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	32ae      	adds	r2, #174	@ 0xae
 8013fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fd8:	691b      	ldr	r3, [r3, #16]
 8013fda:	68f8      	ldr	r0, [r7, #12]
 8013fdc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013fde:	68f8      	ldr	r0, [r7, #12]
 8013fe0:	f001 f930 	bl	8015244 <USBD_CtlSendStatus>
 8013fe4:	e032      	b.n	801404c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013fe6:	7afb      	ldrb	r3, [r7, #11]
 8013fe8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013fec:	b2db      	uxtb	r3, r3
 8013fee:	4619      	mov	r1, r3
 8013ff0:	68f8      	ldr	r0, [r7, #12]
 8013ff2:	f000 fa37 	bl	8014464 <USBD_CoreFindEP>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013ffa:	7dbb      	ldrb	r3, [r7, #22]
 8013ffc:	2bff      	cmp	r3, #255	@ 0xff
 8013ffe:	d025      	beq.n	801404c <USBD_LL_DataOutStage+0x15c>
 8014000:	7dbb      	ldrb	r3, [r7, #22]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d122      	bne.n	801404c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801400c:	b2db      	uxtb	r3, r3
 801400e:	2b03      	cmp	r3, #3
 8014010:	d117      	bne.n	8014042 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014012:	7dba      	ldrb	r2, [r7, #22]
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	32ae      	adds	r2, #174	@ 0xae
 8014018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801401c:	699b      	ldr	r3, [r3, #24]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d00f      	beq.n	8014042 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014022:	7dba      	ldrb	r2, [r7, #22]
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801402a:	7dba      	ldrb	r2, [r7, #22]
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	32ae      	adds	r2, #174	@ 0xae
 8014030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014034:	699b      	ldr	r3, [r3, #24]
 8014036:	7afa      	ldrb	r2, [r7, #11]
 8014038:	4611      	mov	r1, r2
 801403a:	68f8      	ldr	r0, [r7, #12]
 801403c:	4798      	blx	r3
 801403e:	4603      	mov	r3, r0
 8014040:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014042:	7dfb      	ldrb	r3, [r7, #23]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d001      	beq.n	801404c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014048:	7dfb      	ldrb	r3, [r7, #23]
 801404a:	e000      	b.n	801404e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801404c:	2300      	movs	r3, #0
}
 801404e:	4618      	mov	r0, r3
 8014050:	3718      	adds	r7, #24
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}

08014056 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014056:	b580      	push	{r7, lr}
 8014058:	b086      	sub	sp, #24
 801405a:	af00      	add	r7, sp, #0
 801405c:	60f8      	str	r0, [r7, #12]
 801405e:	460b      	mov	r3, r1
 8014060:	607a      	str	r2, [r7, #4]
 8014062:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014064:	7afb      	ldrb	r3, [r7, #11]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d16f      	bne.n	801414a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	3314      	adds	r3, #20
 801406e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014076:	2b02      	cmp	r3, #2
 8014078:	d15a      	bne.n	8014130 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801407a:	693b      	ldr	r3, [r7, #16]
 801407c:	689a      	ldr	r2, [r3, #8]
 801407e:	693b      	ldr	r3, [r7, #16]
 8014080:	68db      	ldr	r3, [r3, #12]
 8014082:	429a      	cmp	r2, r3
 8014084:	d914      	bls.n	80140b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014086:	693b      	ldr	r3, [r7, #16]
 8014088:	689a      	ldr	r2, [r3, #8]
 801408a:	693b      	ldr	r3, [r7, #16]
 801408c:	68db      	ldr	r3, [r3, #12]
 801408e:	1ad2      	subs	r2, r2, r3
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014094:	693b      	ldr	r3, [r7, #16]
 8014096:	689b      	ldr	r3, [r3, #8]
 8014098:	461a      	mov	r2, r3
 801409a:	6879      	ldr	r1, [r7, #4]
 801409c:	68f8      	ldr	r0, [r7, #12]
 801409e:	f001 f892 	bl	80151c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80140a2:	2300      	movs	r3, #0
 80140a4:	2200      	movs	r2, #0
 80140a6:	2100      	movs	r1, #0
 80140a8:	68f8      	ldr	r0, [r7, #12]
 80140aa:	f006 f812 	bl	801a0d2 <USBD_LL_PrepareReceive>
 80140ae:	e03f      	b.n	8014130 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	68da      	ldr	r2, [r3, #12]
 80140b4:	693b      	ldr	r3, [r7, #16]
 80140b6:	689b      	ldr	r3, [r3, #8]
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d11c      	bne.n	80140f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80140bc:	693b      	ldr	r3, [r7, #16]
 80140be:	685a      	ldr	r2, [r3, #4]
 80140c0:	693b      	ldr	r3, [r7, #16]
 80140c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d316      	bcc.n	80140f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	685a      	ldr	r2, [r3, #4]
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d20f      	bcs.n	80140f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80140d6:	2200      	movs	r2, #0
 80140d8:	2100      	movs	r1, #0
 80140da:	68f8      	ldr	r0, [r7, #12]
 80140dc:	f001 f873 	bl	80151c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2200      	movs	r2, #0
 80140e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80140e8:	2300      	movs	r3, #0
 80140ea:	2200      	movs	r2, #0
 80140ec:	2100      	movs	r1, #0
 80140ee:	68f8      	ldr	r0, [r7, #12]
 80140f0:	f005 ffef 	bl	801a0d2 <USBD_LL_PrepareReceive>
 80140f4:	e01c      	b.n	8014130 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80140fc:	b2db      	uxtb	r3, r3
 80140fe:	2b03      	cmp	r3, #3
 8014100:	d10f      	bne.n	8014122 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014108:	68db      	ldr	r3, [r3, #12]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d009      	beq.n	8014122 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	2200      	movs	r2, #0
 8014112:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801411c:	68db      	ldr	r3, [r3, #12]
 801411e:	68f8      	ldr	r0, [r7, #12]
 8014120:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014122:	2180      	movs	r1, #128	@ 0x80
 8014124:	68f8      	ldr	r0, [r7, #12]
 8014126:	f005 ff2a 	bl	8019f7e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801412a:	68f8      	ldr	r0, [r7, #12]
 801412c:	f001 f89d 	bl	801526a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8014136:	2b00      	cmp	r3, #0
 8014138:	d03a      	beq.n	80141b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801413a:	68f8      	ldr	r0, [r7, #12]
 801413c:	f7ff fe42 	bl	8013dc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	2200      	movs	r2, #0
 8014144:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8014148:	e032      	b.n	80141b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801414a:	7afb      	ldrb	r3, [r7, #11]
 801414c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014150:	b2db      	uxtb	r3, r3
 8014152:	4619      	mov	r1, r3
 8014154:	68f8      	ldr	r0, [r7, #12]
 8014156:	f000 f985 	bl	8014464 <USBD_CoreFindEP>
 801415a:	4603      	mov	r3, r0
 801415c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801415e:	7dfb      	ldrb	r3, [r7, #23]
 8014160:	2bff      	cmp	r3, #255	@ 0xff
 8014162:	d025      	beq.n	80141b0 <USBD_LL_DataInStage+0x15a>
 8014164:	7dfb      	ldrb	r3, [r7, #23]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d122      	bne.n	80141b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014170:	b2db      	uxtb	r3, r3
 8014172:	2b03      	cmp	r3, #3
 8014174:	d11c      	bne.n	80141b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014176:	7dfa      	ldrb	r2, [r7, #23]
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	32ae      	adds	r2, #174	@ 0xae
 801417c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014180:	695b      	ldr	r3, [r3, #20]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d014      	beq.n	80141b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014186:	7dfa      	ldrb	r2, [r7, #23]
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801418e:	7dfa      	ldrb	r2, [r7, #23]
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	32ae      	adds	r2, #174	@ 0xae
 8014194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014198:	695b      	ldr	r3, [r3, #20]
 801419a:	7afa      	ldrb	r2, [r7, #11]
 801419c:	4611      	mov	r1, r2
 801419e:	68f8      	ldr	r0, [r7, #12]
 80141a0:	4798      	blx	r3
 80141a2:	4603      	mov	r3, r0
 80141a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80141a6:	7dbb      	ldrb	r3, [r7, #22]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d001      	beq.n	80141b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80141ac:	7dbb      	ldrb	r3, [r7, #22]
 80141ae:	e000      	b.n	80141b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80141b0:	2300      	movs	r3, #0
}
 80141b2:	4618      	mov	r0, r3
 80141b4:	3718      	adds	r7, #24
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd80      	pop	{r7, pc}

080141ba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80141ba:	b580      	push	{r7, lr}
 80141bc:	b084      	sub	sp, #16
 80141be:	af00      	add	r7, sp, #0
 80141c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80141c2:	2300      	movs	r3, #0
 80141c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2201      	movs	r2, #1
 80141ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	2200      	movs	r2, #0
 80141d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	2200      	movs	r2, #0
 80141da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2200      	movs	r2, #0
 80141e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	2200      	movs	r2, #0
 80141e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d014      	beq.n	8014220 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d00e      	beq.n	8014220 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	687a      	ldr	r2, [r7, #4]
 801420c:	6852      	ldr	r2, [r2, #4]
 801420e:	b2d2      	uxtb	r2, r2
 8014210:	4611      	mov	r1, r2
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	4798      	blx	r3
 8014216:	4603      	mov	r3, r0
 8014218:	2b00      	cmp	r3, #0
 801421a:	d001      	beq.n	8014220 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801421c:	2303      	movs	r3, #3
 801421e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014220:	2340      	movs	r3, #64	@ 0x40
 8014222:	2200      	movs	r2, #0
 8014224:	2100      	movs	r1, #0
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f005 fe45 	bl	8019eb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	2201      	movs	r2, #1
 8014230:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2240      	movs	r2, #64	@ 0x40
 8014238:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801423c:	2340      	movs	r3, #64	@ 0x40
 801423e:	2200      	movs	r2, #0
 8014240:	2180      	movs	r1, #128	@ 0x80
 8014242:	6878      	ldr	r0, [r7, #4]
 8014244:	f005 fe37 	bl	8019eb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	2201      	movs	r2, #1
 801424c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2240      	movs	r2, #64	@ 0x40
 8014252:	621a      	str	r2, [r3, #32]

  return ret;
 8014254:	7bfb      	ldrb	r3, [r7, #15]
}
 8014256:	4618      	mov	r0, r3
 8014258:	3710      	adds	r7, #16
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}

0801425e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801425e:	b480      	push	{r7}
 8014260:	b083      	sub	sp, #12
 8014262:	af00      	add	r7, sp, #0
 8014264:	6078      	str	r0, [r7, #4]
 8014266:	460b      	mov	r3, r1
 8014268:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	78fa      	ldrb	r2, [r7, #3]
 801426e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014270:	2300      	movs	r3, #0
}
 8014272:	4618      	mov	r0, r3
 8014274:	370c      	adds	r7, #12
 8014276:	46bd      	mov	sp, r7
 8014278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427c:	4770      	bx	lr

0801427e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801427e:	b480      	push	{r7}
 8014280:	b083      	sub	sp, #12
 8014282:	af00      	add	r7, sp, #0
 8014284:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801428c:	b2db      	uxtb	r3, r3
 801428e:	2b04      	cmp	r3, #4
 8014290:	d006      	beq.n	80142a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014298:	b2da      	uxtb	r2, r3
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2204      	movs	r2, #4
 80142a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80142a8:	2300      	movs	r3, #0
}
 80142aa:	4618      	mov	r0, r3
 80142ac:	370c      	adds	r7, #12
 80142ae:	46bd      	mov	sp, r7
 80142b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b4:	4770      	bx	lr

080142b6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80142b6:	b480      	push	{r7}
 80142b8:	b083      	sub	sp, #12
 80142ba:	af00      	add	r7, sp, #0
 80142bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142c4:	b2db      	uxtb	r3, r3
 80142c6:	2b04      	cmp	r3, #4
 80142c8:	d106      	bne.n	80142d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80142d0:	b2da      	uxtb	r2, r3
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80142d8:	2300      	movs	r3, #0
}
 80142da:	4618      	mov	r0, r3
 80142dc:	370c      	adds	r7, #12
 80142de:	46bd      	mov	sp, r7
 80142e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e4:	4770      	bx	lr

080142e6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80142e6:	b580      	push	{r7, lr}
 80142e8:	b082      	sub	sp, #8
 80142ea:	af00      	add	r7, sp, #0
 80142ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142f4:	b2db      	uxtb	r3, r3
 80142f6:	2b03      	cmp	r3, #3
 80142f8:	d110      	bne.n	801431c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014300:	2b00      	cmp	r3, #0
 8014302:	d00b      	beq.n	801431c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801430a:	69db      	ldr	r3, [r3, #28]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d005      	beq.n	801431c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014316:	69db      	ldr	r3, [r3, #28]
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801431c:	2300      	movs	r3, #0
}
 801431e:	4618      	mov	r0, r3
 8014320:	3708      	adds	r7, #8
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}

08014326 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014326:	b580      	push	{r7, lr}
 8014328:	b082      	sub	sp, #8
 801432a:	af00      	add	r7, sp, #0
 801432c:	6078      	str	r0, [r7, #4]
 801432e:	460b      	mov	r3, r1
 8014330:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	32ae      	adds	r2, #174	@ 0xae
 801433c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d101      	bne.n	8014348 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014344:	2303      	movs	r3, #3
 8014346:	e01c      	b.n	8014382 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801434e:	b2db      	uxtb	r3, r3
 8014350:	2b03      	cmp	r3, #3
 8014352:	d115      	bne.n	8014380 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	32ae      	adds	r2, #174	@ 0xae
 801435e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014362:	6a1b      	ldr	r3, [r3, #32]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d00b      	beq.n	8014380 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	32ae      	adds	r2, #174	@ 0xae
 8014372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014376:	6a1b      	ldr	r3, [r3, #32]
 8014378:	78fa      	ldrb	r2, [r7, #3]
 801437a:	4611      	mov	r1, r2
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014380:	2300      	movs	r3, #0
}
 8014382:	4618      	mov	r0, r3
 8014384:	3708      	adds	r7, #8
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}

0801438a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801438a:	b580      	push	{r7, lr}
 801438c:	b082      	sub	sp, #8
 801438e:	af00      	add	r7, sp, #0
 8014390:	6078      	str	r0, [r7, #4]
 8014392:	460b      	mov	r3, r1
 8014394:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	32ae      	adds	r2, #174	@ 0xae
 80143a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d101      	bne.n	80143ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80143a8:	2303      	movs	r3, #3
 80143aa:	e01c      	b.n	80143e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80143b2:	b2db      	uxtb	r3, r3
 80143b4:	2b03      	cmp	r3, #3
 80143b6:	d115      	bne.n	80143e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	32ae      	adds	r2, #174	@ 0xae
 80143c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d00b      	beq.n	80143e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	32ae      	adds	r2, #174	@ 0xae
 80143d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143dc:	78fa      	ldrb	r2, [r7, #3]
 80143de:	4611      	mov	r1, r2
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80143e4:	2300      	movs	r3, #0
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	3708      	adds	r7, #8
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}

080143ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80143ee:	b480      	push	{r7}
 80143f0:	b083      	sub	sp, #12
 80143f2:	af00      	add	r7, sp, #0
 80143f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80143f6:	2300      	movs	r3, #0
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	370c      	adds	r7, #12
 80143fc:	46bd      	mov	sp, r7
 80143fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014402:	4770      	bx	lr

08014404 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b084      	sub	sp, #16
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801440c:	2300      	movs	r3, #0
 801440e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	2201      	movs	r2, #1
 8014414:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801441e:	2b00      	cmp	r3, #0
 8014420:	d00e      	beq.n	8014440 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014428:	685b      	ldr	r3, [r3, #4]
 801442a:	687a      	ldr	r2, [r7, #4]
 801442c:	6852      	ldr	r2, [r2, #4]
 801442e:	b2d2      	uxtb	r2, r2
 8014430:	4611      	mov	r1, r2
 8014432:	6878      	ldr	r0, [r7, #4]
 8014434:	4798      	blx	r3
 8014436:	4603      	mov	r3, r0
 8014438:	2b00      	cmp	r3, #0
 801443a:	d001      	beq.n	8014440 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801443c:	2303      	movs	r3, #3
 801443e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014440:	7bfb      	ldrb	r3, [r7, #15]
}
 8014442:	4618      	mov	r0, r3
 8014444:	3710      	adds	r7, #16
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}

0801444a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801444a:	b480      	push	{r7}
 801444c:	b083      	sub	sp, #12
 801444e:	af00      	add	r7, sp, #0
 8014450:	6078      	str	r0, [r7, #4]
 8014452:	460b      	mov	r3, r1
 8014454:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014456:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014458:	4618      	mov	r0, r3
 801445a:	370c      	adds	r7, #12
 801445c:	46bd      	mov	sp, r7
 801445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014462:	4770      	bx	lr

08014464 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014464:	b480      	push	{r7}
 8014466:	b083      	sub	sp, #12
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
 801446c:	460b      	mov	r3, r1
 801446e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014470:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014472:	4618      	mov	r0, r3
 8014474:	370c      	adds	r7, #12
 8014476:	46bd      	mov	sp, r7
 8014478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447c:	4770      	bx	lr

0801447e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801447e:	b480      	push	{r7}
 8014480:	b087      	sub	sp, #28
 8014482:	af00      	add	r7, sp, #0
 8014484:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014490:	697b      	ldr	r3, [r7, #20]
 8014492:	3301      	adds	r3, #1
 8014494:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801449c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80144a0:	021b      	lsls	r3, r3, #8
 80144a2:	b21a      	sxth	r2, r3
 80144a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80144a8:	4313      	orrs	r3, r2
 80144aa:	b21b      	sxth	r3, r3
 80144ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80144ae:	89fb      	ldrh	r3, [r7, #14]
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	371c      	adds	r7, #28
 80144b4:	46bd      	mov	sp, r7
 80144b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ba:	4770      	bx	lr

080144bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b084      	sub	sp, #16
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
 80144c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80144c6:	2300      	movs	r3, #0
 80144c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80144d2:	2b40      	cmp	r3, #64	@ 0x40
 80144d4:	d005      	beq.n	80144e2 <USBD_StdDevReq+0x26>
 80144d6:	2b40      	cmp	r3, #64	@ 0x40
 80144d8:	d857      	bhi.n	801458a <USBD_StdDevReq+0xce>
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d00f      	beq.n	80144fe <USBD_StdDevReq+0x42>
 80144de:	2b20      	cmp	r3, #32
 80144e0:	d153      	bne.n	801458a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	32ae      	adds	r2, #174	@ 0xae
 80144ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144f0:	689b      	ldr	r3, [r3, #8]
 80144f2:	6839      	ldr	r1, [r7, #0]
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	4798      	blx	r3
 80144f8:	4603      	mov	r3, r0
 80144fa:	73fb      	strb	r3, [r7, #15]
      break;
 80144fc:	e04a      	b.n	8014594 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	785b      	ldrb	r3, [r3, #1]
 8014502:	2b09      	cmp	r3, #9
 8014504:	d83b      	bhi.n	801457e <USBD_StdDevReq+0xc2>
 8014506:	a201      	add	r2, pc, #4	@ (adr r2, 801450c <USBD_StdDevReq+0x50>)
 8014508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801450c:	08014561 	.word	0x08014561
 8014510:	08014575 	.word	0x08014575
 8014514:	0801457f 	.word	0x0801457f
 8014518:	0801456b 	.word	0x0801456b
 801451c:	0801457f 	.word	0x0801457f
 8014520:	0801453f 	.word	0x0801453f
 8014524:	08014535 	.word	0x08014535
 8014528:	0801457f 	.word	0x0801457f
 801452c:	08014557 	.word	0x08014557
 8014530:	08014549 	.word	0x08014549
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014534:	6839      	ldr	r1, [r7, #0]
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f000 fa3c 	bl	80149b4 <USBD_GetDescriptor>
          break;
 801453c:	e024      	b.n	8014588 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801453e:	6839      	ldr	r1, [r7, #0]
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f000 fbcb 	bl	8014cdc <USBD_SetAddress>
          break;
 8014546:	e01f      	b.n	8014588 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014548:	6839      	ldr	r1, [r7, #0]
 801454a:	6878      	ldr	r0, [r7, #4]
 801454c:	f000 fc0a 	bl	8014d64 <USBD_SetConfig>
 8014550:	4603      	mov	r3, r0
 8014552:	73fb      	strb	r3, [r7, #15]
          break;
 8014554:	e018      	b.n	8014588 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014556:	6839      	ldr	r1, [r7, #0]
 8014558:	6878      	ldr	r0, [r7, #4]
 801455a:	f000 fcad 	bl	8014eb8 <USBD_GetConfig>
          break;
 801455e:	e013      	b.n	8014588 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014560:	6839      	ldr	r1, [r7, #0]
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f000 fcde 	bl	8014f24 <USBD_GetStatus>
          break;
 8014568:	e00e      	b.n	8014588 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801456a:	6839      	ldr	r1, [r7, #0]
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f000 fd0d 	bl	8014f8c <USBD_SetFeature>
          break;
 8014572:	e009      	b.n	8014588 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014574:	6839      	ldr	r1, [r7, #0]
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f000 fd31 	bl	8014fde <USBD_ClrFeature>
          break;
 801457c:	e004      	b.n	8014588 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801457e:	6839      	ldr	r1, [r7, #0]
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f000 fd88 	bl	8015096 <USBD_CtlError>
          break;
 8014586:	bf00      	nop
      }
      break;
 8014588:	e004      	b.n	8014594 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801458a:	6839      	ldr	r1, [r7, #0]
 801458c:	6878      	ldr	r0, [r7, #4]
 801458e:	f000 fd82 	bl	8015096 <USBD_CtlError>
      break;
 8014592:	bf00      	nop
  }

  return ret;
 8014594:	7bfb      	ldrb	r3, [r7, #15]
}
 8014596:	4618      	mov	r0, r3
 8014598:	3710      	adds	r7, #16
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}
 801459e:	bf00      	nop

080145a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b084      	sub	sp, #16
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
 80145a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80145aa:	2300      	movs	r3, #0
 80145ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80145ae:	683b      	ldr	r3, [r7, #0]
 80145b0:	781b      	ldrb	r3, [r3, #0]
 80145b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80145b6:	2b40      	cmp	r3, #64	@ 0x40
 80145b8:	d005      	beq.n	80145c6 <USBD_StdItfReq+0x26>
 80145ba:	2b40      	cmp	r3, #64	@ 0x40
 80145bc:	d852      	bhi.n	8014664 <USBD_StdItfReq+0xc4>
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d001      	beq.n	80145c6 <USBD_StdItfReq+0x26>
 80145c2:	2b20      	cmp	r3, #32
 80145c4:	d14e      	bne.n	8014664 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80145cc:	b2db      	uxtb	r3, r3
 80145ce:	3b01      	subs	r3, #1
 80145d0:	2b02      	cmp	r3, #2
 80145d2:	d840      	bhi.n	8014656 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	889b      	ldrh	r3, [r3, #4]
 80145d8:	b2db      	uxtb	r3, r3
 80145da:	2b03      	cmp	r3, #3
 80145dc:	d836      	bhi.n	801464c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	889b      	ldrh	r3, [r3, #4]
 80145e2:	b2db      	uxtb	r3, r3
 80145e4:	4619      	mov	r1, r3
 80145e6:	6878      	ldr	r0, [r7, #4]
 80145e8:	f7ff ff2f 	bl	801444a <USBD_CoreFindIF>
 80145ec:	4603      	mov	r3, r0
 80145ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80145f0:	7bbb      	ldrb	r3, [r7, #14]
 80145f2:	2bff      	cmp	r3, #255	@ 0xff
 80145f4:	d01d      	beq.n	8014632 <USBD_StdItfReq+0x92>
 80145f6:	7bbb      	ldrb	r3, [r7, #14]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d11a      	bne.n	8014632 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80145fc:	7bba      	ldrb	r2, [r7, #14]
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	32ae      	adds	r2, #174	@ 0xae
 8014602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014606:	689b      	ldr	r3, [r3, #8]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d00f      	beq.n	801462c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801460c:	7bba      	ldrb	r2, [r7, #14]
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014614:	7bba      	ldrb	r2, [r7, #14]
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	32ae      	adds	r2, #174	@ 0xae
 801461a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801461e:	689b      	ldr	r3, [r3, #8]
 8014620:	6839      	ldr	r1, [r7, #0]
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	4798      	blx	r3
 8014626:	4603      	mov	r3, r0
 8014628:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801462a:	e004      	b.n	8014636 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801462c:	2303      	movs	r3, #3
 801462e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014630:	e001      	b.n	8014636 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014632:	2303      	movs	r3, #3
 8014634:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	88db      	ldrh	r3, [r3, #6]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d110      	bne.n	8014660 <USBD_StdItfReq+0xc0>
 801463e:	7bfb      	ldrb	r3, [r7, #15]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d10d      	bne.n	8014660 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f000 fdfd 	bl	8015244 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801464a:	e009      	b.n	8014660 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801464c:	6839      	ldr	r1, [r7, #0]
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f000 fd21 	bl	8015096 <USBD_CtlError>
          break;
 8014654:	e004      	b.n	8014660 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014656:	6839      	ldr	r1, [r7, #0]
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	f000 fd1c 	bl	8015096 <USBD_CtlError>
          break;
 801465e:	e000      	b.n	8014662 <USBD_StdItfReq+0xc2>
          break;
 8014660:	bf00      	nop
      }
      break;
 8014662:	e004      	b.n	801466e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014664:	6839      	ldr	r1, [r7, #0]
 8014666:	6878      	ldr	r0, [r7, #4]
 8014668:	f000 fd15 	bl	8015096 <USBD_CtlError>
      break;
 801466c:	bf00      	nop
  }

  return ret;
 801466e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014670:	4618      	mov	r0, r3
 8014672:	3710      	adds	r7, #16
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}

08014678 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b084      	sub	sp, #16
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
 8014680:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014682:	2300      	movs	r3, #0
 8014684:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	889b      	ldrh	r3, [r3, #4]
 801468a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	781b      	ldrb	r3, [r3, #0]
 8014690:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014694:	2b40      	cmp	r3, #64	@ 0x40
 8014696:	d007      	beq.n	80146a8 <USBD_StdEPReq+0x30>
 8014698:	2b40      	cmp	r3, #64	@ 0x40
 801469a:	f200 817f 	bhi.w	801499c <USBD_StdEPReq+0x324>
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d02a      	beq.n	80146f8 <USBD_StdEPReq+0x80>
 80146a2:	2b20      	cmp	r3, #32
 80146a4:	f040 817a 	bne.w	801499c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80146a8:	7bbb      	ldrb	r3, [r7, #14]
 80146aa:	4619      	mov	r1, r3
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f7ff fed9 	bl	8014464 <USBD_CoreFindEP>
 80146b2:	4603      	mov	r3, r0
 80146b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80146b6:	7b7b      	ldrb	r3, [r7, #13]
 80146b8:	2bff      	cmp	r3, #255	@ 0xff
 80146ba:	f000 8174 	beq.w	80149a6 <USBD_StdEPReq+0x32e>
 80146be:	7b7b      	ldrb	r3, [r7, #13]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	f040 8170 	bne.w	80149a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80146c6:	7b7a      	ldrb	r2, [r7, #13]
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80146ce:	7b7a      	ldrb	r2, [r7, #13]
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	32ae      	adds	r2, #174	@ 0xae
 80146d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146d8:	689b      	ldr	r3, [r3, #8]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	f000 8163 	beq.w	80149a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80146e0:	7b7a      	ldrb	r2, [r7, #13]
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	32ae      	adds	r2, #174	@ 0xae
 80146e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146ea:	689b      	ldr	r3, [r3, #8]
 80146ec:	6839      	ldr	r1, [r7, #0]
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	4798      	blx	r3
 80146f2:	4603      	mov	r3, r0
 80146f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80146f6:	e156      	b.n	80149a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	785b      	ldrb	r3, [r3, #1]
 80146fc:	2b03      	cmp	r3, #3
 80146fe:	d008      	beq.n	8014712 <USBD_StdEPReq+0x9a>
 8014700:	2b03      	cmp	r3, #3
 8014702:	f300 8145 	bgt.w	8014990 <USBD_StdEPReq+0x318>
 8014706:	2b00      	cmp	r3, #0
 8014708:	f000 809b 	beq.w	8014842 <USBD_StdEPReq+0x1ca>
 801470c:	2b01      	cmp	r3, #1
 801470e:	d03c      	beq.n	801478a <USBD_StdEPReq+0x112>
 8014710:	e13e      	b.n	8014990 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014718:	b2db      	uxtb	r3, r3
 801471a:	2b02      	cmp	r3, #2
 801471c:	d002      	beq.n	8014724 <USBD_StdEPReq+0xac>
 801471e:	2b03      	cmp	r3, #3
 8014720:	d016      	beq.n	8014750 <USBD_StdEPReq+0xd8>
 8014722:	e02c      	b.n	801477e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014724:	7bbb      	ldrb	r3, [r7, #14]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d00d      	beq.n	8014746 <USBD_StdEPReq+0xce>
 801472a:	7bbb      	ldrb	r3, [r7, #14]
 801472c:	2b80      	cmp	r3, #128	@ 0x80
 801472e:	d00a      	beq.n	8014746 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014730:	7bbb      	ldrb	r3, [r7, #14]
 8014732:	4619      	mov	r1, r3
 8014734:	6878      	ldr	r0, [r7, #4]
 8014736:	f005 fc22 	bl	8019f7e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801473a:	2180      	movs	r1, #128	@ 0x80
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f005 fc1e 	bl	8019f7e <USBD_LL_StallEP>
 8014742:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014744:	e020      	b.n	8014788 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014746:	6839      	ldr	r1, [r7, #0]
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f000 fca4 	bl	8015096 <USBD_CtlError>
              break;
 801474e:	e01b      	b.n	8014788 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	885b      	ldrh	r3, [r3, #2]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d10e      	bne.n	8014776 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014758:	7bbb      	ldrb	r3, [r7, #14]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d00b      	beq.n	8014776 <USBD_StdEPReq+0xfe>
 801475e:	7bbb      	ldrb	r3, [r7, #14]
 8014760:	2b80      	cmp	r3, #128	@ 0x80
 8014762:	d008      	beq.n	8014776 <USBD_StdEPReq+0xfe>
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	88db      	ldrh	r3, [r3, #6]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d104      	bne.n	8014776 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801476c:	7bbb      	ldrb	r3, [r7, #14]
 801476e:	4619      	mov	r1, r3
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f005 fc04 	bl	8019f7e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014776:	6878      	ldr	r0, [r7, #4]
 8014778:	f000 fd64 	bl	8015244 <USBD_CtlSendStatus>

              break;
 801477c:	e004      	b.n	8014788 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801477e:	6839      	ldr	r1, [r7, #0]
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f000 fc88 	bl	8015096 <USBD_CtlError>
              break;
 8014786:	bf00      	nop
          }
          break;
 8014788:	e107      	b.n	801499a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014790:	b2db      	uxtb	r3, r3
 8014792:	2b02      	cmp	r3, #2
 8014794:	d002      	beq.n	801479c <USBD_StdEPReq+0x124>
 8014796:	2b03      	cmp	r3, #3
 8014798:	d016      	beq.n	80147c8 <USBD_StdEPReq+0x150>
 801479a:	e04b      	b.n	8014834 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801479c:	7bbb      	ldrb	r3, [r7, #14]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d00d      	beq.n	80147be <USBD_StdEPReq+0x146>
 80147a2:	7bbb      	ldrb	r3, [r7, #14]
 80147a4:	2b80      	cmp	r3, #128	@ 0x80
 80147a6:	d00a      	beq.n	80147be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80147a8:	7bbb      	ldrb	r3, [r7, #14]
 80147aa:	4619      	mov	r1, r3
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f005 fbe6 	bl	8019f7e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80147b2:	2180      	movs	r1, #128	@ 0x80
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f005 fbe2 	bl	8019f7e <USBD_LL_StallEP>
 80147ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80147bc:	e040      	b.n	8014840 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80147be:	6839      	ldr	r1, [r7, #0]
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f000 fc68 	bl	8015096 <USBD_CtlError>
              break;
 80147c6:	e03b      	b.n	8014840 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	885b      	ldrh	r3, [r3, #2]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d136      	bne.n	801483e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80147d0:	7bbb      	ldrb	r3, [r7, #14]
 80147d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d004      	beq.n	80147e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80147da:	7bbb      	ldrb	r3, [r7, #14]
 80147dc:	4619      	mov	r1, r3
 80147de:	6878      	ldr	r0, [r7, #4]
 80147e0:	f005 fbec 	bl	8019fbc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f000 fd2d 	bl	8015244 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80147ea:	7bbb      	ldrb	r3, [r7, #14]
 80147ec:	4619      	mov	r1, r3
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	f7ff fe38 	bl	8014464 <USBD_CoreFindEP>
 80147f4:	4603      	mov	r3, r0
 80147f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80147f8:	7b7b      	ldrb	r3, [r7, #13]
 80147fa:	2bff      	cmp	r3, #255	@ 0xff
 80147fc:	d01f      	beq.n	801483e <USBD_StdEPReq+0x1c6>
 80147fe:	7b7b      	ldrb	r3, [r7, #13]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d11c      	bne.n	801483e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014804:	7b7a      	ldrb	r2, [r7, #13]
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801480c:	7b7a      	ldrb	r2, [r7, #13]
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	32ae      	adds	r2, #174	@ 0xae
 8014812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014816:	689b      	ldr	r3, [r3, #8]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d010      	beq.n	801483e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801481c:	7b7a      	ldrb	r2, [r7, #13]
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	32ae      	adds	r2, #174	@ 0xae
 8014822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014826:	689b      	ldr	r3, [r3, #8]
 8014828:	6839      	ldr	r1, [r7, #0]
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	4798      	blx	r3
 801482e:	4603      	mov	r3, r0
 8014830:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014832:	e004      	b.n	801483e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014834:	6839      	ldr	r1, [r7, #0]
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f000 fc2d 	bl	8015096 <USBD_CtlError>
              break;
 801483c:	e000      	b.n	8014840 <USBD_StdEPReq+0x1c8>
              break;
 801483e:	bf00      	nop
          }
          break;
 8014840:	e0ab      	b.n	801499a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014848:	b2db      	uxtb	r3, r3
 801484a:	2b02      	cmp	r3, #2
 801484c:	d002      	beq.n	8014854 <USBD_StdEPReq+0x1dc>
 801484e:	2b03      	cmp	r3, #3
 8014850:	d032      	beq.n	80148b8 <USBD_StdEPReq+0x240>
 8014852:	e097      	b.n	8014984 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014854:	7bbb      	ldrb	r3, [r7, #14]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d007      	beq.n	801486a <USBD_StdEPReq+0x1f2>
 801485a:	7bbb      	ldrb	r3, [r7, #14]
 801485c:	2b80      	cmp	r3, #128	@ 0x80
 801485e:	d004      	beq.n	801486a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014860:	6839      	ldr	r1, [r7, #0]
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f000 fc17 	bl	8015096 <USBD_CtlError>
                break;
 8014868:	e091      	b.n	801498e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801486a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801486e:	2b00      	cmp	r3, #0
 8014870:	da0b      	bge.n	801488a <USBD_StdEPReq+0x212>
 8014872:	7bbb      	ldrb	r3, [r7, #14]
 8014874:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014878:	4613      	mov	r3, r2
 801487a:	009b      	lsls	r3, r3, #2
 801487c:	4413      	add	r3, r2
 801487e:	009b      	lsls	r3, r3, #2
 8014880:	3310      	adds	r3, #16
 8014882:	687a      	ldr	r2, [r7, #4]
 8014884:	4413      	add	r3, r2
 8014886:	3304      	adds	r3, #4
 8014888:	e00b      	b.n	80148a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801488a:	7bbb      	ldrb	r3, [r7, #14]
 801488c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014890:	4613      	mov	r3, r2
 8014892:	009b      	lsls	r3, r3, #2
 8014894:	4413      	add	r3, r2
 8014896:	009b      	lsls	r3, r3, #2
 8014898:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801489c:	687a      	ldr	r2, [r7, #4]
 801489e:	4413      	add	r3, r2
 80148a0:	3304      	adds	r3, #4
 80148a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	2200      	movs	r2, #0
 80148a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80148aa:	68bb      	ldr	r3, [r7, #8]
 80148ac:	2202      	movs	r2, #2
 80148ae:	4619      	mov	r1, r3
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f000 fc6d 	bl	8015190 <USBD_CtlSendData>
              break;
 80148b6:	e06a      	b.n	801498e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80148b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	da11      	bge.n	80148e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80148c0:	7bbb      	ldrb	r3, [r7, #14]
 80148c2:	f003 020f 	and.w	r2, r3, #15
 80148c6:	6879      	ldr	r1, [r7, #4]
 80148c8:	4613      	mov	r3, r2
 80148ca:	009b      	lsls	r3, r3, #2
 80148cc:	4413      	add	r3, r2
 80148ce:	009b      	lsls	r3, r3, #2
 80148d0:	440b      	add	r3, r1
 80148d2:	3324      	adds	r3, #36	@ 0x24
 80148d4:	881b      	ldrh	r3, [r3, #0]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d117      	bne.n	801490a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80148da:	6839      	ldr	r1, [r7, #0]
 80148dc:	6878      	ldr	r0, [r7, #4]
 80148de:	f000 fbda 	bl	8015096 <USBD_CtlError>
                  break;
 80148e2:	e054      	b.n	801498e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80148e4:	7bbb      	ldrb	r3, [r7, #14]
 80148e6:	f003 020f 	and.w	r2, r3, #15
 80148ea:	6879      	ldr	r1, [r7, #4]
 80148ec:	4613      	mov	r3, r2
 80148ee:	009b      	lsls	r3, r3, #2
 80148f0:	4413      	add	r3, r2
 80148f2:	009b      	lsls	r3, r3, #2
 80148f4:	440b      	add	r3, r1
 80148f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80148fa:	881b      	ldrh	r3, [r3, #0]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d104      	bne.n	801490a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014900:	6839      	ldr	r1, [r7, #0]
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f000 fbc7 	bl	8015096 <USBD_CtlError>
                  break;
 8014908:	e041      	b.n	801498e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801490a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801490e:	2b00      	cmp	r3, #0
 8014910:	da0b      	bge.n	801492a <USBD_StdEPReq+0x2b2>
 8014912:	7bbb      	ldrb	r3, [r7, #14]
 8014914:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014918:	4613      	mov	r3, r2
 801491a:	009b      	lsls	r3, r3, #2
 801491c:	4413      	add	r3, r2
 801491e:	009b      	lsls	r3, r3, #2
 8014920:	3310      	adds	r3, #16
 8014922:	687a      	ldr	r2, [r7, #4]
 8014924:	4413      	add	r3, r2
 8014926:	3304      	adds	r3, #4
 8014928:	e00b      	b.n	8014942 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801492a:	7bbb      	ldrb	r3, [r7, #14]
 801492c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014930:	4613      	mov	r3, r2
 8014932:	009b      	lsls	r3, r3, #2
 8014934:	4413      	add	r3, r2
 8014936:	009b      	lsls	r3, r3, #2
 8014938:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801493c:	687a      	ldr	r2, [r7, #4]
 801493e:	4413      	add	r3, r2
 8014940:	3304      	adds	r3, #4
 8014942:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014944:	7bbb      	ldrb	r3, [r7, #14]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d002      	beq.n	8014950 <USBD_StdEPReq+0x2d8>
 801494a:	7bbb      	ldrb	r3, [r7, #14]
 801494c:	2b80      	cmp	r3, #128	@ 0x80
 801494e:	d103      	bne.n	8014958 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	2200      	movs	r2, #0
 8014954:	601a      	str	r2, [r3, #0]
 8014956:	e00e      	b.n	8014976 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014958:	7bbb      	ldrb	r3, [r7, #14]
 801495a:	4619      	mov	r1, r3
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f005 fb4c 	bl	8019ffa <USBD_LL_IsStallEP>
 8014962:	4603      	mov	r3, r0
 8014964:	2b00      	cmp	r3, #0
 8014966:	d003      	beq.n	8014970 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	2201      	movs	r2, #1
 801496c:	601a      	str	r2, [r3, #0]
 801496e:	e002      	b.n	8014976 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	2200      	movs	r2, #0
 8014974:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	2202      	movs	r2, #2
 801497a:	4619      	mov	r1, r3
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f000 fc07 	bl	8015190 <USBD_CtlSendData>
              break;
 8014982:	e004      	b.n	801498e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014984:	6839      	ldr	r1, [r7, #0]
 8014986:	6878      	ldr	r0, [r7, #4]
 8014988:	f000 fb85 	bl	8015096 <USBD_CtlError>
              break;
 801498c:	bf00      	nop
          }
          break;
 801498e:	e004      	b.n	801499a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014990:	6839      	ldr	r1, [r7, #0]
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f000 fb7f 	bl	8015096 <USBD_CtlError>
          break;
 8014998:	bf00      	nop
      }
      break;
 801499a:	e005      	b.n	80149a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801499c:	6839      	ldr	r1, [r7, #0]
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f000 fb79 	bl	8015096 <USBD_CtlError>
      break;
 80149a4:	e000      	b.n	80149a8 <USBD_StdEPReq+0x330>
      break;
 80149a6:	bf00      	nop
  }

  return ret;
 80149a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	3710      	adds	r7, #16
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}
	...

080149b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b084      	sub	sp, #16
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80149be:	2300      	movs	r3, #0
 80149c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80149c2:	2300      	movs	r3, #0
 80149c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80149c6:	2300      	movs	r3, #0
 80149c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	885b      	ldrh	r3, [r3, #2]
 80149ce:	0a1b      	lsrs	r3, r3, #8
 80149d0:	b29b      	uxth	r3, r3
 80149d2:	3b01      	subs	r3, #1
 80149d4:	2b0e      	cmp	r3, #14
 80149d6:	f200 8152 	bhi.w	8014c7e <USBD_GetDescriptor+0x2ca>
 80149da:	a201      	add	r2, pc, #4	@ (adr r2, 80149e0 <USBD_GetDescriptor+0x2c>)
 80149dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149e0:	08014a51 	.word	0x08014a51
 80149e4:	08014a69 	.word	0x08014a69
 80149e8:	08014aa9 	.word	0x08014aa9
 80149ec:	08014c7f 	.word	0x08014c7f
 80149f0:	08014c7f 	.word	0x08014c7f
 80149f4:	08014c1f 	.word	0x08014c1f
 80149f8:	08014c4b 	.word	0x08014c4b
 80149fc:	08014c7f 	.word	0x08014c7f
 8014a00:	08014c7f 	.word	0x08014c7f
 8014a04:	08014c7f 	.word	0x08014c7f
 8014a08:	08014c7f 	.word	0x08014c7f
 8014a0c:	08014c7f 	.word	0x08014c7f
 8014a10:	08014c7f 	.word	0x08014c7f
 8014a14:	08014c7f 	.word	0x08014c7f
 8014a18:	08014a1d 	.word	0x08014a1d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a22:	69db      	ldr	r3, [r3, #28]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d00b      	beq.n	8014a40 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a2e:	69db      	ldr	r3, [r3, #28]
 8014a30:	687a      	ldr	r2, [r7, #4]
 8014a32:	7c12      	ldrb	r2, [r2, #16]
 8014a34:	f107 0108 	add.w	r1, r7, #8
 8014a38:	4610      	mov	r0, r2
 8014a3a:	4798      	blx	r3
 8014a3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014a3e:	e126      	b.n	8014c8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014a40:	6839      	ldr	r1, [r7, #0]
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f000 fb27 	bl	8015096 <USBD_CtlError>
        err++;
 8014a48:	7afb      	ldrb	r3, [r7, #11]
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	72fb      	strb	r3, [r7, #11]
      break;
 8014a4e:	e11e      	b.n	8014c8e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	687a      	ldr	r2, [r7, #4]
 8014a5a:	7c12      	ldrb	r2, [r2, #16]
 8014a5c:	f107 0108 	add.w	r1, r7, #8
 8014a60:	4610      	mov	r0, r2
 8014a62:	4798      	blx	r3
 8014a64:	60f8      	str	r0, [r7, #12]
      break;
 8014a66:	e112      	b.n	8014c8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	7c1b      	ldrb	r3, [r3, #16]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d10d      	bne.n	8014a8c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a78:	f107 0208 	add.w	r2, r7, #8
 8014a7c:	4610      	mov	r0, r2
 8014a7e:	4798      	blx	r3
 8014a80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	3301      	adds	r3, #1
 8014a86:	2202      	movs	r2, #2
 8014a88:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014a8a:	e100      	b.n	8014c8e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a94:	f107 0208 	add.w	r2, r7, #8
 8014a98:	4610      	mov	r0, r2
 8014a9a:	4798      	blx	r3
 8014a9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	3301      	adds	r3, #1
 8014aa2:	2202      	movs	r2, #2
 8014aa4:	701a      	strb	r2, [r3, #0]
      break;
 8014aa6:	e0f2      	b.n	8014c8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	885b      	ldrh	r3, [r3, #2]
 8014aac:	b2db      	uxtb	r3, r3
 8014aae:	2b05      	cmp	r3, #5
 8014ab0:	f200 80ac 	bhi.w	8014c0c <USBD_GetDescriptor+0x258>
 8014ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8014abc <USBD_GetDescriptor+0x108>)
 8014ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014aba:	bf00      	nop
 8014abc:	08014ad5 	.word	0x08014ad5
 8014ac0:	08014b09 	.word	0x08014b09
 8014ac4:	08014b3d 	.word	0x08014b3d
 8014ac8:	08014b71 	.word	0x08014b71
 8014acc:	08014ba5 	.word	0x08014ba5
 8014ad0:	08014bd9 	.word	0x08014bd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014ada:	685b      	ldr	r3, [r3, #4]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d00b      	beq.n	8014af8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014ae6:	685b      	ldr	r3, [r3, #4]
 8014ae8:	687a      	ldr	r2, [r7, #4]
 8014aea:	7c12      	ldrb	r2, [r2, #16]
 8014aec:	f107 0108 	add.w	r1, r7, #8
 8014af0:	4610      	mov	r0, r2
 8014af2:	4798      	blx	r3
 8014af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014af6:	e091      	b.n	8014c1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014af8:	6839      	ldr	r1, [r7, #0]
 8014afa:	6878      	ldr	r0, [r7, #4]
 8014afc:	f000 facb 	bl	8015096 <USBD_CtlError>
            err++;
 8014b00:	7afb      	ldrb	r3, [r7, #11]
 8014b02:	3301      	adds	r3, #1
 8014b04:	72fb      	strb	r3, [r7, #11]
          break;
 8014b06:	e089      	b.n	8014c1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b0e:	689b      	ldr	r3, [r3, #8]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d00b      	beq.n	8014b2c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b1a:	689b      	ldr	r3, [r3, #8]
 8014b1c:	687a      	ldr	r2, [r7, #4]
 8014b1e:	7c12      	ldrb	r2, [r2, #16]
 8014b20:	f107 0108 	add.w	r1, r7, #8
 8014b24:	4610      	mov	r0, r2
 8014b26:	4798      	blx	r3
 8014b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b2a:	e077      	b.n	8014c1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014b2c:	6839      	ldr	r1, [r7, #0]
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f000 fab1 	bl	8015096 <USBD_CtlError>
            err++;
 8014b34:	7afb      	ldrb	r3, [r7, #11]
 8014b36:	3301      	adds	r3, #1
 8014b38:	72fb      	strb	r3, [r7, #11]
          break;
 8014b3a:	e06f      	b.n	8014c1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b42:	68db      	ldr	r3, [r3, #12]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d00b      	beq.n	8014b60 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b4e:	68db      	ldr	r3, [r3, #12]
 8014b50:	687a      	ldr	r2, [r7, #4]
 8014b52:	7c12      	ldrb	r2, [r2, #16]
 8014b54:	f107 0108 	add.w	r1, r7, #8
 8014b58:	4610      	mov	r0, r2
 8014b5a:	4798      	blx	r3
 8014b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b5e:	e05d      	b.n	8014c1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014b60:	6839      	ldr	r1, [r7, #0]
 8014b62:	6878      	ldr	r0, [r7, #4]
 8014b64:	f000 fa97 	bl	8015096 <USBD_CtlError>
            err++;
 8014b68:	7afb      	ldrb	r3, [r7, #11]
 8014b6a:	3301      	adds	r3, #1
 8014b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8014b6e:	e055      	b.n	8014c1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b76:	691b      	ldr	r3, [r3, #16]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d00b      	beq.n	8014b94 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b82:	691b      	ldr	r3, [r3, #16]
 8014b84:	687a      	ldr	r2, [r7, #4]
 8014b86:	7c12      	ldrb	r2, [r2, #16]
 8014b88:	f107 0108 	add.w	r1, r7, #8
 8014b8c:	4610      	mov	r0, r2
 8014b8e:	4798      	blx	r3
 8014b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b92:	e043      	b.n	8014c1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014b94:	6839      	ldr	r1, [r7, #0]
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f000 fa7d 	bl	8015096 <USBD_CtlError>
            err++;
 8014b9c:	7afb      	ldrb	r3, [r7, #11]
 8014b9e:	3301      	adds	r3, #1
 8014ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8014ba2:	e03b      	b.n	8014c1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014baa:	695b      	ldr	r3, [r3, #20]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d00b      	beq.n	8014bc8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014bb6:	695b      	ldr	r3, [r3, #20]
 8014bb8:	687a      	ldr	r2, [r7, #4]
 8014bba:	7c12      	ldrb	r2, [r2, #16]
 8014bbc:	f107 0108 	add.w	r1, r7, #8
 8014bc0:	4610      	mov	r0, r2
 8014bc2:	4798      	blx	r3
 8014bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bc6:	e029      	b.n	8014c1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014bc8:	6839      	ldr	r1, [r7, #0]
 8014bca:	6878      	ldr	r0, [r7, #4]
 8014bcc:	f000 fa63 	bl	8015096 <USBD_CtlError>
            err++;
 8014bd0:	7afb      	ldrb	r3, [r7, #11]
 8014bd2:	3301      	adds	r3, #1
 8014bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8014bd6:	e021      	b.n	8014c1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014bde:	699b      	ldr	r3, [r3, #24]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d00b      	beq.n	8014bfc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014bea:	699b      	ldr	r3, [r3, #24]
 8014bec:	687a      	ldr	r2, [r7, #4]
 8014bee:	7c12      	ldrb	r2, [r2, #16]
 8014bf0:	f107 0108 	add.w	r1, r7, #8
 8014bf4:	4610      	mov	r0, r2
 8014bf6:	4798      	blx	r3
 8014bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bfa:	e00f      	b.n	8014c1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014bfc:	6839      	ldr	r1, [r7, #0]
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	f000 fa49 	bl	8015096 <USBD_CtlError>
            err++;
 8014c04:	7afb      	ldrb	r3, [r7, #11]
 8014c06:	3301      	adds	r3, #1
 8014c08:	72fb      	strb	r3, [r7, #11]
          break;
 8014c0a:	e007      	b.n	8014c1c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014c0c:	6839      	ldr	r1, [r7, #0]
 8014c0e:	6878      	ldr	r0, [r7, #4]
 8014c10:	f000 fa41 	bl	8015096 <USBD_CtlError>
          err++;
 8014c14:	7afb      	ldrb	r3, [r7, #11]
 8014c16:	3301      	adds	r3, #1
 8014c18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014c1a:	bf00      	nop
      }
      break;
 8014c1c:	e037      	b.n	8014c8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	7c1b      	ldrb	r3, [r3, #16]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d109      	bne.n	8014c3a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c2e:	f107 0208 	add.w	r2, r7, #8
 8014c32:	4610      	mov	r0, r2
 8014c34:	4798      	blx	r3
 8014c36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014c38:	e029      	b.n	8014c8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014c3a:	6839      	ldr	r1, [r7, #0]
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f000 fa2a 	bl	8015096 <USBD_CtlError>
        err++;
 8014c42:	7afb      	ldrb	r3, [r7, #11]
 8014c44:	3301      	adds	r3, #1
 8014c46:	72fb      	strb	r3, [r7, #11]
      break;
 8014c48:	e021      	b.n	8014c8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	7c1b      	ldrb	r3, [r3, #16]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d10d      	bne.n	8014c6e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c5a:	f107 0208 	add.w	r2, r7, #8
 8014c5e:	4610      	mov	r0, r2
 8014c60:	4798      	blx	r3
 8014c62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	3301      	adds	r3, #1
 8014c68:	2207      	movs	r2, #7
 8014c6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014c6c:	e00f      	b.n	8014c8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014c6e:	6839      	ldr	r1, [r7, #0]
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f000 fa10 	bl	8015096 <USBD_CtlError>
        err++;
 8014c76:	7afb      	ldrb	r3, [r7, #11]
 8014c78:	3301      	adds	r3, #1
 8014c7a:	72fb      	strb	r3, [r7, #11]
      break;
 8014c7c:	e007      	b.n	8014c8e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014c7e:	6839      	ldr	r1, [r7, #0]
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f000 fa08 	bl	8015096 <USBD_CtlError>
      err++;
 8014c86:	7afb      	ldrb	r3, [r7, #11]
 8014c88:	3301      	adds	r3, #1
 8014c8a:	72fb      	strb	r3, [r7, #11]
      break;
 8014c8c:	bf00      	nop
  }

  if (err != 0U)
 8014c8e:	7afb      	ldrb	r3, [r7, #11]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d11e      	bne.n	8014cd2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014c94:	683b      	ldr	r3, [r7, #0]
 8014c96:	88db      	ldrh	r3, [r3, #6]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d016      	beq.n	8014cca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014c9c:	893b      	ldrh	r3, [r7, #8]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d00e      	beq.n	8014cc0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014ca2:	683b      	ldr	r3, [r7, #0]
 8014ca4:	88da      	ldrh	r2, [r3, #6]
 8014ca6:	893b      	ldrh	r3, [r7, #8]
 8014ca8:	4293      	cmp	r3, r2
 8014caa:	bf28      	it	cs
 8014cac:	4613      	movcs	r3, r2
 8014cae:	b29b      	uxth	r3, r3
 8014cb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014cb2:	893b      	ldrh	r3, [r7, #8]
 8014cb4:	461a      	mov	r2, r3
 8014cb6:	68f9      	ldr	r1, [r7, #12]
 8014cb8:	6878      	ldr	r0, [r7, #4]
 8014cba:	f000 fa69 	bl	8015190 <USBD_CtlSendData>
 8014cbe:	e009      	b.n	8014cd4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014cc0:	6839      	ldr	r1, [r7, #0]
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f000 f9e7 	bl	8015096 <USBD_CtlError>
 8014cc8:	e004      	b.n	8014cd4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014cca:	6878      	ldr	r0, [r7, #4]
 8014ccc:	f000 faba 	bl	8015244 <USBD_CtlSendStatus>
 8014cd0:	e000      	b.n	8014cd4 <USBD_GetDescriptor+0x320>
    return;
 8014cd2:	bf00      	nop
  }
}
 8014cd4:	3710      	adds	r7, #16
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}
 8014cda:	bf00      	nop

08014cdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	b084      	sub	sp, #16
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
 8014ce4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014ce6:	683b      	ldr	r3, [r7, #0]
 8014ce8:	889b      	ldrh	r3, [r3, #4]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d131      	bne.n	8014d52 <USBD_SetAddress+0x76>
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	88db      	ldrh	r3, [r3, #6]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d12d      	bne.n	8014d52 <USBD_SetAddress+0x76>
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	885b      	ldrh	r3, [r3, #2]
 8014cfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8014cfc:	d829      	bhi.n	8014d52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	885b      	ldrh	r3, [r3, #2]
 8014d02:	b2db      	uxtb	r3, r3
 8014d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014d08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014d10:	b2db      	uxtb	r3, r3
 8014d12:	2b03      	cmp	r3, #3
 8014d14:	d104      	bne.n	8014d20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014d16:	6839      	ldr	r1, [r7, #0]
 8014d18:	6878      	ldr	r0, [r7, #4]
 8014d1a:	f000 f9bc 	bl	8015096 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d1e:	e01d      	b.n	8014d5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	7bfa      	ldrb	r2, [r7, #15]
 8014d24:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014d28:	7bfb      	ldrb	r3, [r7, #15]
 8014d2a:	4619      	mov	r1, r3
 8014d2c:	6878      	ldr	r0, [r7, #4]
 8014d2e:	f005 f990 	bl	801a052 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f000 fa86 	bl	8015244 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014d38:	7bfb      	ldrb	r3, [r7, #15]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d004      	beq.n	8014d48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2202      	movs	r2, #2
 8014d42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d46:	e009      	b.n	8014d5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2201      	movs	r2, #1
 8014d4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d50:	e004      	b.n	8014d5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014d52:	6839      	ldr	r1, [r7, #0]
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f000 f99e 	bl	8015096 <USBD_CtlError>
  }
}
 8014d5a:	bf00      	nop
 8014d5c:	bf00      	nop
 8014d5e:	3710      	adds	r7, #16
 8014d60:	46bd      	mov	sp, r7
 8014d62:	bd80      	pop	{r7, pc}

08014d64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b084      	sub	sp, #16
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	885b      	ldrh	r3, [r3, #2]
 8014d76:	b2da      	uxtb	r2, r3
 8014d78:	4b4e      	ldr	r3, [pc, #312]	@ (8014eb4 <USBD_SetConfig+0x150>)
 8014d7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014d7c:	4b4d      	ldr	r3, [pc, #308]	@ (8014eb4 <USBD_SetConfig+0x150>)
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	2b01      	cmp	r3, #1
 8014d82:	d905      	bls.n	8014d90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014d84:	6839      	ldr	r1, [r7, #0]
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f000 f985 	bl	8015096 <USBD_CtlError>
    return USBD_FAIL;
 8014d8c:	2303      	movs	r3, #3
 8014d8e:	e08c      	b.n	8014eaa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014d96:	b2db      	uxtb	r3, r3
 8014d98:	2b02      	cmp	r3, #2
 8014d9a:	d002      	beq.n	8014da2 <USBD_SetConfig+0x3e>
 8014d9c:	2b03      	cmp	r3, #3
 8014d9e:	d029      	beq.n	8014df4 <USBD_SetConfig+0x90>
 8014da0:	e075      	b.n	8014e8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014da2:	4b44      	ldr	r3, [pc, #272]	@ (8014eb4 <USBD_SetConfig+0x150>)
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d020      	beq.n	8014dec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014daa:	4b42      	ldr	r3, [pc, #264]	@ (8014eb4 <USBD_SetConfig+0x150>)
 8014dac:	781b      	ldrb	r3, [r3, #0]
 8014dae:	461a      	mov	r2, r3
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014db4:	4b3f      	ldr	r3, [pc, #252]	@ (8014eb4 <USBD_SetConfig+0x150>)
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	4619      	mov	r1, r3
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f7ff f80d 	bl	8013dda <USBD_SetClassConfig>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014dc4:	7bfb      	ldrb	r3, [r7, #15]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d008      	beq.n	8014ddc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014dca:	6839      	ldr	r1, [r7, #0]
 8014dcc:	6878      	ldr	r0, [r7, #4]
 8014dce:	f000 f962 	bl	8015096 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	2202      	movs	r2, #2
 8014dd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014dda:	e065      	b.n	8014ea8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014ddc:	6878      	ldr	r0, [r7, #4]
 8014dde:	f000 fa31 	bl	8015244 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	2203      	movs	r2, #3
 8014de6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014dea:	e05d      	b.n	8014ea8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014dec:	6878      	ldr	r0, [r7, #4]
 8014dee:	f000 fa29 	bl	8015244 <USBD_CtlSendStatus>
      break;
 8014df2:	e059      	b.n	8014ea8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014df4:	4b2f      	ldr	r3, [pc, #188]	@ (8014eb4 <USBD_SetConfig+0x150>)
 8014df6:	781b      	ldrb	r3, [r3, #0]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d112      	bne.n	8014e22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	2202      	movs	r2, #2
 8014e00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014e04:	4b2b      	ldr	r3, [pc, #172]	@ (8014eb4 <USBD_SetConfig+0x150>)
 8014e06:	781b      	ldrb	r3, [r3, #0]
 8014e08:	461a      	mov	r2, r3
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014e0e:	4b29      	ldr	r3, [pc, #164]	@ (8014eb4 <USBD_SetConfig+0x150>)
 8014e10:	781b      	ldrb	r3, [r3, #0]
 8014e12:	4619      	mov	r1, r3
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f7fe fffc 	bl	8013e12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014e1a:	6878      	ldr	r0, [r7, #4]
 8014e1c:	f000 fa12 	bl	8015244 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014e20:	e042      	b.n	8014ea8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014e22:	4b24      	ldr	r3, [pc, #144]	@ (8014eb4 <USBD_SetConfig+0x150>)
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	461a      	mov	r2, r3
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	685b      	ldr	r3, [r3, #4]
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d02a      	beq.n	8014e86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	685b      	ldr	r3, [r3, #4]
 8014e34:	b2db      	uxtb	r3, r3
 8014e36:	4619      	mov	r1, r3
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f7fe ffea 	bl	8013e12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8014eb4 <USBD_SetConfig+0x150>)
 8014e40:	781b      	ldrb	r3, [r3, #0]
 8014e42:	461a      	mov	r2, r3
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014e48:	4b1a      	ldr	r3, [pc, #104]	@ (8014eb4 <USBD_SetConfig+0x150>)
 8014e4a:	781b      	ldrb	r3, [r3, #0]
 8014e4c:	4619      	mov	r1, r3
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f7fe ffc3 	bl	8013dda <USBD_SetClassConfig>
 8014e54:	4603      	mov	r3, r0
 8014e56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014e58:	7bfb      	ldrb	r3, [r7, #15]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d00f      	beq.n	8014e7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014e5e:	6839      	ldr	r1, [r7, #0]
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f000 f918 	bl	8015096 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	b2db      	uxtb	r3, r3
 8014e6c:	4619      	mov	r1, r3
 8014e6e:	6878      	ldr	r0, [r7, #4]
 8014e70:	f7fe ffcf 	bl	8013e12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2202      	movs	r2, #2
 8014e78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014e7c:	e014      	b.n	8014ea8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014e7e:	6878      	ldr	r0, [r7, #4]
 8014e80:	f000 f9e0 	bl	8015244 <USBD_CtlSendStatus>
      break;
 8014e84:	e010      	b.n	8014ea8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f000 f9dc 	bl	8015244 <USBD_CtlSendStatus>
      break;
 8014e8c:	e00c      	b.n	8014ea8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014e8e:	6839      	ldr	r1, [r7, #0]
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f000 f900 	bl	8015096 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014e96:	4b07      	ldr	r3, [pc, #28]	@ (8014eb4 <USBD_SetConfig+0x150>)
 8014e98:	781b      	ldrb	r3, [r3, #0]
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	6878      	ldr	r0, [r7, #4]
 8014e9e:	f7fe ffb8 	bl	8013e12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014ea2:	2303      	movs	r3, #3
 8014ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8014ea6:	bf00      	nop
  }

  return ret;
 8014ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014eaa:	4618      	mov	r0, r3
 8014eac:	3710      	adds	r7, #16
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}
 8014eb2:	bf00      	nop
 8014eb4:	2400d8c0 	.word	0x2400d8c0

08014eb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b082      	sub	sp, #8
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
 8014ec0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	88db      	ldrh	r3, [r3, #6]
 8014ec6:	2b01      	cmp	r3, #1
 8014ec8:	d004      	beq.n	8014ed4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014eca:	6839      	ldr	r1, [r7, #0]
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f000 f8e2 	bl	8015096 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014ed2:	e023      	b.n	8014f1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014eda:	b2db      	uxtb	r3, r3
 8014edc:	2b02      	cmp	r3, #2
 8014ede:	dc02      	bgt.n	8014ee6 <USBD_GetConfig+0x2e>
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	dc03      	bgt.n	8014eec <USBD_GetConfig+0x34>
 8014ee4:	e015      	b.n	8014f12 <USBD_GetConfig+0x5a>
 8014ee6:	2b03      	cmp	r3, #3
 8014ee8:	d00b      	beq.n	8014f02 <USBD_GetConfig+0x4a>
 8014eea:	e012      	b.n	8014f12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2200      	movs	r2, #0
 8014ef0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	3308      	adds	r3, #8
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	4619      	mov	r1, r3
 8014efa:	6878      	ldr	r0, [r7, #4]
 8014efc:	f000 f948 	bl	8015190 <USBD_CtlSendData>
        break;
 8014f00:	e00c      	b.n	8014f1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	3304      	adds	r3, #4
 8014f06:	2201      	movs	r2, #1
 8014f08:	4619      	mov	r1, r3
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f000 f940 	bl	8015190 <USBD_CtlSendData>
        break;
 8014f10:	e004      	b.n	8014f1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014f12:	6839      	ldr	r1, [r7, #0]
 8014f14:	6878      	ldr	r0, [r7, #4]
 8014f16:	f000 f8be 	bl	8015096 <USBD_CtlError>
        break;
 8014f1a:	bf00      	nop
}
 8014f1c:	bf00      	nop
 8014f1e:	3708      	adds	r7, #8
 8014f20:	46bd      	mov	sp, r7
 8014f22:	bd80      	pop	{r7, pc}

08014f24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b082      	sub	sp, #8
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
 8014f2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014f34:	b2db      	uxtb	r3, r3
 8014f36:	3b01      	subs	r3, #1
 8014f38:	2b02      	cmp	r3, #2
 8014f3a:	d81e      	bhi.n	8014f7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	88db      	ldrh	r3, [r3, #6]
 8014f40:	2b02      	cmp	r3, #2
 8014f42:	d004      	beq.n	8014f4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014f44:	6839      	ldr	r1, [r7, #0]
 8014f46:	6878      	ldr	r0, [r7, #4]
 8014f48:	f000 f8a5 	bl	8015096 <USBD_CtlError>
        break;
 8014f4c:	e01a      	b.n	8014f84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	2201      	movs	r2, #1
 8014f52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d005      	beq.n	8014f6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	68db      	ldr	r3, [r3, #12]
 8014f62:	f043 0202 	orr.w	r2, r3, #2
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	330c      	adds	r3, #12
 8014f6e:	2202      	movs	r2, #2
 8014f70:	4619      	mov	r1, r3
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f000 f90c 	bl	8015190 <USBD_CtlSendData>
      break;
 8014f78:	e004      	b.n	8014f84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014f7a:	6839      	ldr	r1, [r7, #0]
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f000 f88a 	bl	8015096 <USBD_CtlError>
      break;
 8014f82:	bf00      	nop
  }
}
 8014f84:	bf00      	nop
 8014f86:	3708      	adds	r7, #8
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}

08014f8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b082      	sub	sp, #8
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
 8014f94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014f96:	683b      	ldr	r3, [r7, #0]
 8014f98:	885b      	ldrh	r3, [r3, #2]
 8014f9a:	2b01      	cmp	r3, #1
 8014f9c:	d107      	bne.n	8014fae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2201      	movs	r2, #1
 8014fa2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014fa6:	6878      	ldr	r0, [r7, #4]
 8014fa8:	f000 f94c 	bl	8015244 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014fac:	e013      	b.n	8014fd6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014fae:	683b      	ldr	r3, [r7, #0]
 8014fb0:	885b      	ldrh	r3, [r3, #2]
 8014fb2:	2b02      	cmp	r3, #2
 8014fb4:	d10b      	bne.n	8014fce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	889b      	ldrh	r3, [r3, #4]
 8014fba:	0a1b      	lsrs	r3, r3, #8
 8014fbc:	b29b      	uxth	r3, r3
 8014fbe:	b2da      	uxtb	r2, r3
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014fc6:	6878      	ldr	r0, [r7, #4]
 8014fc8:	f000 f93c 	bl	8015244 <USBD_CtlSendStatus>
}
 8014fcc:	e003      	b.n	8014fd6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014fce:	6839      	ldr	r1, [r7, #0]
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f000 f860 	bl	8015096 <USBD_CtlError>
}
 8014fd6:	bf00      	nop
 8014fd8:	3708      	adds	r7, #8
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}

08014fde <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014fde:	b580      	push	{r7, lr}
 8014fe0:	b082      	sub	sp, #8
 8014fe2:	af00      	add	r7, sp, #0
 8014fe4:	6078      	str	r0, [r7, #4]
 8014fe6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014fee:	b2db      	uxtb	r3, r3
 8014ff0:	3b01      	subs	r3, #1
 8014ff2:	2b02      	cmp	r3, #2
 8014ff4:	d80b      	bhi.n	801500e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	885b      	ldrh	r3, [r3, #2]
 8014ffa:	2b01      	cmp	r3, #1
 8014ffc:	d10c      	bne.n	8015018 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	2200      	movs	r2, #0
 8015002:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f000 f91c 	bl	8015244 <USBD_CtlSendStatus>
      }
      break;
 801500c:	e004      	b.n	8015018 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801500e:	6839      	ldr	r1, [r7, #0]
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f000 f840 	bl	8015096 <USBD_CtlError>
      break;
 8015016:	e000      	b.n	801501a <USBD_ClrFeature+0x3c>
      break;
 8015018:	bf00      	nop
  }
}
 801501a:	bf00      	nop
 801501c:	3708      	adds	r7, #8
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}

08015022 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015022:	b580      	push	{r7, lr}
 8015024:	b084      	sub	sp, #16
 8015026:	af00      	add	r7, sp, #0
 8015028:	6078      	str	r0, [r7, #4]
 801502a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	781a      	ldrb	r2, [r3, #0]
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	3301      	adds	r3, #1
 801503c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	781a      	ldrb	r2, [r3, #0]
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	3301      	adds	r3, #1
 801504a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801504c:	68f8      	ldr	r0, [r7, #12]
 801504e:	f7ff fa16 	bl	801447e <SWAPBYTE>
 8015052:	4603      	mov	r3, r0
 8015054:	461a      	mov	r2, r3
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	3301      	adds	r3, #1
 801505e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	3301      	adds	r3, #1
 8015064:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015066:	68f8      	ldr	r0, [r7, #12]
 8015068:	f7ff fa09 	bl	801447e <SWAPBYTE>
 801506c:	4603      	mov	r3, r0
 801506e:	461a      	mov	r2, r3
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	3301      	adds	r3, #1
 8015078:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	3301      	adds	r3, #1
 801507e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015080:	68f8      	ldr	r0, [r7, #12]
 8015082:	f7ff f9fc 	bl	801447e <SWAPBYTE>
 8015086:	4603      	mov	r3, r0
 8015088:	461a      	mov	r2, r3
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	80da      	strh	r2, [r3, #6]
}
 801508e:	bf00      	nop
 8015090:	3710      	adds	r7, #16
 8015092:	46bd      	mov	sp, r7
 8015094:	bd80      	pop	{r7, pc}

08015096 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015096:	b580      	push	{r7, lr}
 8015098:	b082      	sub	sp, #8
 801509a:	af00      	add	r7, sp, #0
 801509c:	6078      	str	r0, [r7, #4]
 801509e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80150a0:	2180      	movs	r1, #128	@ 0x80
 80150a2:	6878      	ldr	r0, [r7, #4]
 80150a4:	f004 ff6b 	bl	8019f7e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80150a8:	2100      	movs	r1, #0
 80150aa:	6878      	ldr	r0, [r7, #4]
 80150ac:	f004 ff67 	bl	8019f7e <USBD_LL_StallEP>
}
 80150b0:	bf00      	nop
 80150b2:	3708      	adds	r7, #8
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}

080150b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b086      	sub	sp, #24
 80150bc:	af00      	add	r7, sp, #0
 80150be:	60f8      	str	r0, [r7, #12]
 80150c0:	60b9      	str	r1, [r7, #8]
 80150c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80150c4:	2300      	movs	r3, #0
 80150c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d042      	beq.n	8015154 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80150d2:	6938      	ldr	r0, [r7, #16]
 80150d4:	f000 f842 	bl	801515c <USBD_GetLen>
 80150d8:	4603      	mov	r3, r0
 80150da:	3301      	adds	r3, #1
 80150dc:	005b      	lsls	r3, r3, #1
 80150de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80150e2:	d808      	bhi.n	80150f6 <USBD_GetString+0x3e>
 80150e4:	6938      	ldr	r0, [r7, #16]
 80150e6:	f000 f839 	bl	801515c <USBD_GetLen>
 80150ea:	4603      	mov	r3, r0
 80150ec:	3301      	adds	r3, #1
 80150ee:	b29b      	uxth	r3, r3
 80150f0:	005b      	lsls	r3, r3, #1
 80150f2:	b29a      	uxth	r2, r3
 80150f4:	e001      	b.n	80150fa <USBD_GetString+0x42>
 80150f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80150fe:	7dfb      	ldrb	r3, [r7, #23]
 8015100:	68ba      	ldr	r2, [r7, #8]
 8015102:	4413      	add	r3, r2
 8015104:	687a      	ldr	r2, [r7, #4]
 8015106:	7812      	ldrb	r2, [r2, #0]
 8015108:	701a      	strb	r2, [r3, #0]
  idx++;
 801510a:	7dfb      	ldrb	r3, [r7, #23]
 801510c:	3301      	adds	r3, #1
 801510e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015110:	7dfb      	ldrb	r3, [r7, #23]
 8015112:	68ba      	ldr	r2, [r7, #8]
 8015114:	4413      	add	r3, r2
 8015116:	2203      	movs	r2, #3
 8015118:	701a      	strb	r2, [r3, #0]
  idx++;
 801511a:	7dfb      	ldrb	r3, [r7, #23]
 801511c:	3301      	adds	r3, #1
 801511e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015120:	e013      	b.n	801514a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8015122:	7dfb      	ldrb	r3, [r7, #23]
 8015124:	68ba      	ldr	r2, [r7, #8]
 8015126:	4413      	add	r3, r2
 8015128:	693a      	ldr	r2, [r7, #16]
 801512a:	7812      	ldrb	r2, [r2, #0]
 801512c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801512e:	693b      	ldr	r3, [r7, #16]
 8015130:	3301      	adds	r3, #1
 8015132:	613b      	str	r3, [r7, #16]
    idx++;
 8015134:	7dfb      	ldrb	r3, [r7, #23]
 8015136:	3301      	adds	r3, #1
 8015138:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801513a:	7dfb      	ldrb	r3, [r7, #23]
 801513c:	68ba      	ldr	r2, [r7, #8]
 801513e:	4413      	add	r3, r2
 8015140:	2200      	movs	r2, #0
 8015142:	701a      	strb	r2, [r3, #0]
    idx++;
 8015144:	7dfb      	ldrb	r3, [r7, #23]
 8015146:	3301      	adds	r3, #1
 8015148:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801514a:	693b      	ldr	r3, [r7, #16]
 801514c:	781b      	ldrb	r3, [r3, #0]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d1e7      	bne.n	8015122 <USBD_GetString+0x6a>
 8015152:	e000      	b.n	8015156 <USBD_GetString+0x9e>
    return;
 8015154:	bf00      	nop
  }
}
 8015156:	3718      	adds	r7, #24
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}

0801515c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801515c:	b480      	push	{r7}
 801515e:	b085      	sub	sp, #20
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015164:	2300      	movs	r3, #0
 8015166:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801516c:	e005      	b.n	801517a <USBD_GetLen+0x1e>
  {
    len++;
 801516e:	7bfb      	ldrb	r3, [r7, #15]
 8015170:	3301      	adds	r3, #1
 8015172:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	3301      	adds	r3, #1
 8015178:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d1f5      	bne.n	801516e <USBD_GetLen+0x12>
  }

  return len;
 8015182:	7bfb      	ldrb	r3, [r7, #15]
}
 8015184:	4618      	mov	r0, r3
 8015186:	3714      	adds	r7, #20
 8015188:	46bd      	mov	sp, r7
 801518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518e:	4770      	bx	lr

08015190 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b084      	sub	sp, #16
 8015194:	af00      	add	r7, sp, #0
 8015196:	60f8      	str	r0, [r7, #12]
 8015198:	60b9      	str	r1, [r7, #8]
 801519a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	2202      	movs	r2, #2
 80151a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	687a      	ldr	r2, [r7, #4]
 80151a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	687a      	ldr	r2, [r7, #4]
 80151ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	68ba      	ldr	r2, [r7, #8]
 80151b4:	2100      	movs	r1, #0
 80151b6:	68f8      	ldr	r0, [r7, #12]
 80151b8:	f004 ff6a 	bl	801a090 <USBD_LL_Transmit>

  return USBD_OK;
 80151bc:	2300      	movs	r3, #0
}
 80151be:	4618      	mov	r0, r3
 80151c0:	3710      	adds	r7, #16
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}

080151c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80151c6:	b580      	push	{r7, lr}
 80151c8:	b084      	sub	sp, #16
 80151ca:	af00      	add	r7, sp, #0
 80151cc:	60f8      	str	r0, [r7, #12]
 80151ce:	60b9      	str	r1, [r7, #8]
 80151d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	68ba      	ldr	r2, [r7, #8]
 80151d6:	2100      	movs	r1, #0
 80151d8:	68f8      	ldr	r0, [r7, #12]
 80151da:	f004 ff59 	bl	801a090 <USBD_LL_Transmit>

  return USBD_OK;
 80151de:	2300      	movs	r3, #0
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3710      	adds	r7, #16
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}

080151e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b084      	sub	sp, #16
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	60f8      	str	r0, [r7, #12]
 80151f0:	60b9      	str	r1, [r7, #8]
 80151f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	2203      	movs	r2, #3
 80151f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	687a      	ldr	r2, [r7, #4]
 8015200:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	687a      	ldr	r2, [r7, #4]
 8015208:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	68ba      	ldr	r2, [r7, #8]
 8015210:	2100      	movs	r1, #0
 8015212:	68f8      	ldr	r0, [r7, #12]
 8015214:	f004 ff5d 	bl	801a0d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015218:	2300      	movs	r3, #0
}
 801521a:	4618      	mov	r0, r3
 801521c:	3710      	adds	r7, #16
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}

08015222 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015222:	b580      	push	{r7, lr}
 8015224:	b084      	sub	sp, #16
 8015226:	af00      	add	r7, sp, #0
 8015228:	60f8      	str	r0, [r7, #12]
 801522a:	60b9      	str	r1, [r7, #8]
 801522c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	68ba      	ldr	r2, [r7, #8]
 8015232:	2100      	movs	r1, #0
 8015234:	68f8      	ldr	r0, [r7, #12]
 8015236:	f004 ff4c 	bl	801a0d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801523a:	2300      	movs	r3, #0
}
 801523c:	4618      	mov	r0, r3
 801523e:	3710      	adds	r7, #16
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}

08015244 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b082      	sub	sp, #8
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2204      	movs	r2, #4
 8015250:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015254:	2300      	movs	r3, #0
 8015256:	2200      	movs	r2, #0
 8015258:	2100      	movs	r1, #0
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f004 ff18 	bl	801a090 <USBD_LL_Transmit>

  return USBD_OK;
 8015260:	2300      	movs	r3, #0
}
 8015262:	4618      	mov	r0, r3
 8015264:	3708      	adds	r7, #8
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}

0801526a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801526a:	b580      	push	{r7, lr}
 801526c:	b082      	sub	sp, #8
 801526e:	af00      	add	r7, sp, #0
 8015270:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2205      	movs	r2, #5
 8015276:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801527a:	2300      	movs	r3, #0
 801527c:	2200      	movs	r2, #0
 801527e:	2100      	movs	r1, #0
 8015280:	6878      	ldr	r0, [r7, #4]
 8015282:	f004 ff26 	bl	801a0d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015286:	2300      	movs	r3, #0
}
 8015288:	4618      	mov	r0, r3
 801528a:	3708      	adds	r7, #8
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b084      	sub	sp, #16
 8015294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  uint32_t now_ms = HAL_GetTick();
 8015296:	f7ef fe15 	bl	8004ec4 <HAL_GetTick>
 801529a:	60f8      	str	r0, [r7, #12]
  uint32_t mins = (now_ms / 1000) / 60;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	4a3f      	ldr	r2, [pc, #252]	@ (801539c <MX_USB_DEVICE_Init+0x10c>)
 80152a0:	fba2 2303 	umull	r2, r3, r2, r3
 80152a4:	0b9b      	lsrs	r3, r3, #14
 80152a6:	60bb      	str	r3, [r7, #8]
  uint32_t secs = (now_ms / 1000) % 60;
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	4a3d      	ldr	r2, [pc, #244]	@ (80153a0 <MX_USB_DEVICE_Init+0x110>)
 80152ac:	fba2 2303 	umull	r2, r3, r2, r3
 80152b0:	099a      	lsrs	r2, r3, #6
 80152b2:	4b3c      	ldr	r3, [pc, #240]	@ (80153a4 <MX_USB_DEVICE_Init+0x114>)
 80152b4:	fba3 1302 	umull	r1, r3, r3, r2
 80152b8:	0959      	lsrs	r1, r3, #5
 80152ba:	460b      	mov	r3, r1
 80152bc:	011b      	lsls	r3, r3, #4
 80152be:	1a5b      	subs	r3, r3, r1
 80152c0:	009b      	lsls	r3, r3, #2
 80152c2:	1ad3      	subs	r3, r2, r3
 80152c4:	607b      	str	r3, [r7, #4]
  uint32_t ms   = now_ms % 1000;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	4a35      	ldr	r2, [pc, #212]	@ (80153a0 <MX_USB_DEVICE_Init+0x110>)
 80152ca:	fba2 1203 	umull	r1, r2, r2, r3
 80152ce:	0992      	lsrs	r2, r2, #6
 80152d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80152d4:	fb01 f202 	mul.w	r2, r1, r2
 80152d8:	1a9b      	subs	r3, r3, r2
 80152da:	603b      	str	r3, [r7, #0]
  
  printf("[%02lu:%02lu.%03lu][USB_INIT] Starting MX_USB_DEVICE_Init...\r\n", mins, secs, ms);
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	687a      	ldr	r2, [r7, #4]
 80152e0:	68b9      	ldr	r1, [r7, #8]
 80152e2:	4831      	ldr	r0, [pc, #196]	@ (80153a8 <MX_USB_DEVICE_Init+0x118>)
 80152e4:	f005 f832 	bl	801a34c <iprintf>

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80152e8:	2201      	movs	r2, #1
 80152ea:	4930      	ldr	r1, [pc, #192]	@ (80153ac <MX_USB_DEVICE_Init+0x11c>)
 80152ec:	4830      	ldr	r0, [pc, #192]	@ (80153b0 <MX_USB_DEVICE_Init+0x120>)
 80152ee:	f7fe fcf7 	bl	8013ce0 <USBD_Init>
 80152f2:	4603      	mov	r3, r0
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d007      	beq.n	8015308 <MX_USB_DEVICE_Init+0x78>
  {
    printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_Init FAILED\r\n", mins, secs, ms);
 80152f8:	683b      	ldr	r3, [r7, #0]
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	68b9      	ldr	r1, [r7, #8]
 80152fe:	482d      	ldr	r0, [pc, #180]	@ (80153b4 <MX_USB_DEVICE_Init+0x124>)
 8015300:	f005 f824 	bl	801a34c <iprintf>
    Error_Handler();
 8015304:	f7ed fd34 	bl	8002d70 <Error_Handler>
  }
  printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_Init OK\r\n", mins, secs, ms);
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	687a      	ldr	r2, [r7, #4]
 801530c:	68b9      	ldr	r1, [r7, #8]
 801530e:	482a      	ldr	r0, [pc, #168]	@ (80153b8 <MX_USB_DEVICE_Init+0x128>)
 8015310:	f005 f81c 	bl	801a34c <iprintf>

  /* Register composite class: CDC (IF0/1) + Vendor (IF2) */
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC_VENDOR) != USBD_OK)
 8015314:	4929      	ldr	r1, [pc, #164]	@ (80153bc <MX_USB_DEVICE_Init+0x12c>)
 8015316:	4826      	ldr	r0, [pc, #152]	@ (80153b0 <MX_USB_DEVICE_Init+0x120>)
 8015318:	f7fe fd12 	bl	8013d40 <USBD_RegisterClass>
 801531c:	4603      	mov	r3, r0
 801531e:	2b00      	cmp	r3, #0
 8015320:	d007      	beq.n	8015332 <MX_USB_DEVICE_Init+0xa2>
  {
    printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_RegisterClass FAILED\r\n", mins, secs, ms);
 8015322:	683b      	ldr	r3, [r7, #0]
 8015324:	687a      	ldr	r2, [r7, #4]
 8015326:	68b9      	ldr	r1, [r7, #8]
 8015328:	4825      	ldr	r0, [pc, #148]	@ (80153c0 <MX_USB_DEVICE_Init+0x130>)
 801532a:	f005 f80f 	bl	801a34c <iprintf>
    Error_Handler();
 801532e:	f7ed fd1f 	bl	8002d70 <Error_Handler>
  }
  printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_RegisterClass OK\r\n", mins, secs, ms);
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	687a      	ldr	r2, [r7, #4]
 8015336:	68b9      	ldr	r1, [r7, #8]
 8015338:	4822      	ldr	r0, [pc, #136]	@ (80153c4 <MX_USB_DEVICE_Init+0x134>)
 801533a:	f005 f807 	bl	801a34c <iprintf>

  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801533e:	4922      	ldr	r1, [pc, #136]	@ (80153c8 <MX_USB_DEVICE_Init+0x138>)
 8015340:	481b      	ldr	r0, [pc, #108]	@ (80153b0 <MX_USB_DEVICE_Init+0x120>)
 8015342:	f7fe fbfe 	bl	8013b42 <USBD_CDC_RegisterInterface>
 8015346:	4603      	mov	r3, r0
 8015348:	2b00      	cmp	r3, #0
 801534a:	d007      	beq.n	801535c <MX_USB_DEVICE_Init+0xcc>
  {
    printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_CDC_RegisterInterface FAILED\r\n", mins, secs, ms);
 801534c:	683b      	ldr	r3, [r7, #0]
 801534e:	687a      	ldr	r2, [r7, #4]
 8015350:	68b9      	ldr	r1, [r7, #8]
 8015352:	481e      	ldr	r0, [pc, #120]	@ (80153cc <MX_USB_DEVICE_Init+0x13c>)
 8015354:	f004 fffa 	bl	801a34c <iprintf>
    Error_Handler();
 8015358:	f7ed fd0a 	bl	8002d70 <Error_Handler>
  }
  printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_CDC_RegisterInterface OK\r\n", mins, secs, ms);
 801535c:	683b      	ldr	r3, [r7, #0]
 801535e:	687a      	ldr	r2, [r7, #4]
 8015360:	68b9      	ldr	r1, [r7, #8]
 8015362:	481b      	ldr	r0, [pc, #108]	@ (80153d0 <MX_USB_DEVICE_Init+0x140>)
 8015364:	f004 fff2 	bl	801a34c <iprintf>

  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8015368:	4811      	ldr	r0, [pc, #68]	@ (80153b0 <MX_USB_DEVICE_Init+0x120>)
 801536a:	f7fe fd1f 	bl	8013dac <USBD_Start>
 801536e:	4603      	mov	r3, r0
 8015370:	2b00      	cmp	r3, #0
 8015372:	d007      	beq.n	8015384 <MX_USB_DEVICE_Init+0xf4>
  {
    printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_Start FAILED\r\n", mins, secs, ms);
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	687a      	ldr	r2, [r7, #4]
 8015378:	68b9      	ldr	r1, [r7, #8]
 801537a:	4816      	ldr	r0, [pc, #88]	@ (80153d4 <MX_USB_DEVICE_Init+0x144>)
 801537c:	f004 ffe6 	bl	801a34c <iprintf>
    Error_Handler();
 8015380:	f7ed fcf6 	bl	8002d70 <Error_Handler>
  }
  printf("[%02lu:%02lu.%03lu][USB_INIT] USBD_Start OK - device should enumerate now\r\n", mins, secs, ms);
 8015384:	683b      	ldr	r3, [r7, #0]
 8015386:	687a      	ldr	r2, [r7, #4]
 8015388:	68b9      	ldr	r1, [r7, #8]
 801538a:	4813      	ldr	r0, [pc, #76]	@ (80153d8 <MX_USB_DEVICE_Init+0x148>)
 801538c:	f004 ffde 	bl	801a34c <iprintf>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015390:	f7f6 f98e 	bl	800b6b0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015394:	bf00      	nop
 8015396:	3710      	adds	r7, #16
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}
 801539c:	45e7b273 	.word	0x45e7b273
 80153a0:	10624dd3 	.word	0x10624dd3
 80153a4:	88888889 	.word	0x88888889
 80153a8:	0801c174 	.word	0x0801c174
 80153ac:	240001f4 	.word	0x240001f4
 80153b0:	2400d8c4 	.word	0x2400d8c4
 80153b4:	0801c1b4 	.word	0x0801c1b4
 80153b8:	0801c1e8 	.word	0x0801c1e8
 80153bc:	240001a8 	.word	0x240001a8
 80153c0:	0801c218 	.word	0x0801c218
 80153c4:	0801c254 	.word	0x0801c254
 80153c8:	240001e0 	.word	0x240001e0
 80153cc:	0801c28c 	.word	0x0801c28c
 80153d0:	0801c2d0 	.word	0x0801c2d0
 80153d4:	0801c310 	.word	0x0801c310
 80153d8:	0801c344 	.word	0x0801c344

080153dc <vnd_update_lcd_params>:
static uint32_t diag_current_pair_seq = 0xFFFFFFFFu;
static uint16_t win_start0 = 0, win_len0 = 0, win_start1 = 0, win_len1 = 0;

/* Локальная утилита: обновить LCD параметрами, присланными хостом */
static void vnd_update_lcd_params(void)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b082      	sub	sp, #8
 80153e0:	af00      	add	r7, sp, #0
    /* Частота блоков (пар кадров A+B): в FULL берём из периода пары, в DIAG — diag_hz */
    uint16_t block_hz = 0;
 80153e2:	2300      	movs	r3, #0
 80153e4:	80fb      	strh	r3, [r7, #6]
    if(full_mode) {
 80153e6:	4b19      	ldr	r3, [pc, #100]	@ (801544c <vnd_update_lcd_params+0x70>)
 80153e8:	781b      	ldrb	r3, [r3, #0]
 80153ea:	b2db      	uxtb	r3, r3
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d00f      	beq.n	8015410 <vnd_update_lcd_params+0x34>
        uint16_t pp = vnd_pair_period_ms;
 80153f0:	4b17      	ldr	r3, [pc, #92]	@ (8015450 <vnd_update_lcd_params+0x74>)
 80153f2:	881b      	ldrh	r3, [r3, #0]
 80153f4:	80bb      	strh	r3, [r7, #4]
        block_hz = (pp > 0) ? (uint16_t)(1000u / pp) : 0u;
 80153f6:	88bb      	ldrh	r3, [r7, #4]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d006      	beq.n	801540a <vnd_update_lcd_params+0x2e>
 80153fc:	88bb      	ldrh	r3, [r7, #4]
 80153fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015402:	fbb2 f3f3 	udiv	r3, r2, r3
 8015406:	b29b      	uxth	r3, r3
 8015408:	e000      	b.n	801540c <vnd_update_lcd_params+0x30>
 801540a:	2300      	movs	r3, #0
 801540c:	80fb      	strh	r3, [r7, #6]
 801540e:	e002      	b.n	8015416 <vnd_update_lcd_params+0x3a>
    } else {
        block_hz = diag_hz;
 8015410:	4b10      	ldr	r3, [pc, #64]	@ (8015454 <vnd_update_lcd_params+0x78>)
 8015412:	881b      	ldrh	r3, [r3, #0]
 8015414:	80fb      	strh	r3, [r7, #6]
    }

    /* Кол-во сэмплов на канал в кадре: если явно задано командой — используем его, иначе активное */
    uint16_t frame_samples = (vnd_frame_samples_req != 0) ? vnd_frame_samples_req
 8015416:	4b10      	ldr	r3, [pc, #64]	@ (8015458 <vnd_update_lcd_params+0x7c>)
 8015418:	881b      	ldrh	r3, [r3, #0]
 801541a:	b29b      	uxth	r3, r3
 801541c:	2b00      	cmp	r3, #0
 801541e:	d10c      	bne.n	801543a <vnd_update_lcd_params+0x5e>
                                : ((cur_samples_per_frame != 0) ? cur_samples_per_frame
 8015420:	4b0e      	ldr	r3, [pc, #56]	@ (801545c <vnd_update_lcd_params+0x80>)
 8015422:	881b      	ldrh	r3, [r3, #0]
 8015424:	b29b      	uxth	r3, r3
    uint16_t frame_samples = (vnd_frame_samples_req != 0) ? vnd_frame_samples_req
 8015426:	2b00      	cmp	r3, #0
 8015428:	d103      	bne.n	8015432 <vnd_update_lcd_params+0x56>
                                                                : adc_stream_get_active_samples());
 801542a:	f7eb f82b 	bl	8000484 <adc_stream_get_active_samples>
 801542e:	4603      	mov	r3, r0
 8015430:	e006      	b.n	8015440 <vnd_update_lcd_params+0x64>
    uint16_t frame_samples = (vnd_frame_samples_req != 0) ? vnd_frame_samples_req
 8015432:	4b0a      	ldr	r3, [pc, #40]	@ (801545c <vnd_update_lcd_params+0x80>)
 8015434:	881b      	ldrh	r3, [r3, #0]
 8015436:	b29b      	uxth	r3, r3
 8015438:	e002      	b.n	8015440 <vnd_update_lcd_params+0x64>
 801543a:	4b07      	ldr	r3, [pc, #28]	@ (8015458 <vnd_update_lcd_params+0x7c>)
 801543c:	881b      	ldrh	r3, [r3, #0]
 801543e:	b29b      	uxth	r3, r3
 8015440:	807b      	strh	r3, [r7, #2]
    //     block_hz,
    //     win_start0, win_len0,
    //     win_start1, win_len1,
    //     (uint8_t)full_mode
    // );
}
 8015442:	bf00      	nop
 8015444:	3708      	adds	r7, #8
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}
 801544a:	bf00      	nop
 801544c:	2400003c 	.word	0x2400003c
 8015450:	2400003e 	.word	0x2400003e
 8015454:	24000040 	.word	0x24000040
 8015458:	2400dc3a 	.word	0x2400dc3a
 801545c:	2400dba8 	.word	0x2400dba8

08015460 <vnd_cdc_duplicate_preview>:
static uint32_t cdc_last_send_ms = 0;       /* для троттлинга */
static char     cdc_line_buf[1024];         /* статический буфер для передачи */
static uint16_t rd_le16(const uint8_t *p){ return (uint16_t)(p[0] | (p[1] << 8)); }
static uint32_t rd_le32(const uint8_t *p){ return (uint32_t)(p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24)); }
static void vnd_cdc_duplicate_preview(const uint8_t *buf, uint16_t len, const char *tag)
{
 8015460:	b480      	push	{r7}
 8015462:	b085      	sub	sp, #20
 8015464:	af00      	add	r7, sp, #0
 8015466:	60f8      	str	r0, [r7, #12]
 8015468:	460b      	mov	r3, r1
 801546a:	607a      	str	r2, [r7, #4]
 801546c:	817b      	strh	r3, [r7, #10]
    /* При отключённом превью не выводим копию потока в CDC */
#if !VND_CDC_PREVIEW_ENABLE
    (void)buf; (void)len; (void)tag;
    return;
 801546e:	bf00      	nop
    uint8_t rc = CDC_Transmit_HS((uint8_t*)cdc_line_buf, (uint16_t)off);
    if (rc == USBD_OK) {
        cdc_last_send_ms = now;
    }
#endif
}
 8015470:	3714      	adds	r7, #20
 8015472:	46bd      	mov	sp, r7
 8015474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015478:	4770      	bx	lr
	...

0801547c <cdc_logf>:
static uint32_t cdc_stats_last_ms = 0;         /* последняя отметка отправки статистики */
static uint64_t cdc_stats_prev_bytes = 0ULL;   /* предыдущее значение счётчика байт */
static char     cdc_evt_buf[160];              /* буфер форматирования событий */

static void cdc_logf(const char *fmt, ...)
{
 801547c:	b40f      	push	{r0, r1, r2, r3}
 801547e:	b580      	push	{r7, lr}
 8015480:	b082      	sub	sp, #8
 8015482:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, fmt);
 8015484:	f107 0314 	add.w	r3, r7, #20
 8015488:	603b      	str	r3, [r7, #0]
    int n = vsnprintf(cdc_evt_buf, sizeof(cdc_evt_buf) - 2, fmt, ap);
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	693a      	ldr	r2, [r7, #16]
 801548e:	219e      	movs	r1, #158	@ 0x9e
 8015490:	4812      	ldr	r0, [pc, #72]	@ (80154dc <cdc_logf+0x60>)
 8015492:	f005 f927 	bl	801a6e4 <vsniprintf>
 8015496:	6078      	str	r0, [r7, #4]
    va_end(ap);
    if(n < 0) return;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2b00      	cmp	r3, #0
 801549c:	db17      	blt.n	80154ce <cdc_logf+0x52>
    if(n > (int)sizeof(cdc_evt_buf) - 2) n = (int)sizeof(cdc_evt_buf) - 2;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	2b9e      	cmp	r3, #158	@ 0x9e
 80154a2:	dd01      	ble.n	80154a8 <cdc_logf+0x2c>
 80154a4:	239e      	movs	r3, #158	@ 0x9e
 80154a6:	607b      	str	r3, [r7, #4]
    cdc_evt_buf[n++] = '\r';
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	1c5a      	adds	r2, r3, #1
 80154ac:	607a      	str	r2, [r7, #4]
 80154ae:	4a0b      	ldr	r2, [pc, #44]	@ (80154dc <cdc_logf+0x60>)
 80154b0:	210d      	movs	r1, #13
 80154b2:	54d1      	strb	r1, [r2, r3]
    cdc_evt_buf[n++] = '\n';
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	1c5a      	adds	r2, r3, #1
 80154b8:	607a      	str	r2, [r7, #4]
 80154ba:	4a08      	ldr	r2, [pc, #32]	@ (80154dc <cdc_logf+0x60>)
 80154bc:	210a      	movs	r1, #10
 80154be:	54d1      	strb	r1, [r2, r3]
    /* неблокирующая попытка: если CDC занят — событие может быть пропущено */
    (void)CDC_Transmit_HS((uint8_t*)cdc_evt_buf, (uint16_t)n);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	b29b      	uxth	r3, r3
 80154c4:	4619      	mov	r1, r3
 80154c6:	4805      	ldr	r0, [pc, #20]	@ (80154dc <cdc_logf+0x60>)
 80154c8:	f004 f976 	bl	80197b8 <CDC_Transmit_HS>
 80154cc:	e000      	b.n	80154d0 <cdc_logf+0x54>
    if(n < 0) return;
 80154ce:	bf00      	nop
}
 80154d0:	3708      	adds	r7, #8
 80154d2:	46bd      	mov	sp, r7
 80154d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80154d8:	b004      	add	sp, #16
 80154da:	4770      	bx	lr
 80154dc:	2400f290 	.word	0x2400f290

080154e0 <vnd_cdc_periodic_stats>:

static void vnd_cdc_periodic_stats(uint32_t now_ms)
{
 80154e0:	b5b0      	push	{r4, r5, r7, lr}
 80154e2:	b08c      	sub	sp, #48	@ 0x30
 80154e4:	af04      	add	r7, sp, #16
 80154e6:	6078      	str	r0, [r7, #4]
    /* В диагностическом режиме не трогаем CDC вовсе — уменьшаем накладные расходы */
    if(diag_mode_active){ return; }
 80154e8:	4923      	ldr	r1, [pc, #140]	@ (8015578 <vnd_cdc_periodic_stats+0x98>)
 80154ea:	7809      	ldrb	r1, [r1, #0]
 80154ec:	2900      	cmp	r1, #0
 80154ee:	d13d      	bne.n	801556c <vnd_cdc_periodic_stats+0x8c>
    if(now_ms - cdc_stats_last_ms < 1000) return; /* не чаще 1 Гц */
 80154f0:	4922      	ldr	r1, [pc, #136]	@ (801557c <vnd_cdc_periodic_stats+0x9c>)
 80154f2:	6809      	ldr	r1, [r1, #0]
 80154f4:	6878      	ldr	r0, [r7, #4]
 80154f6:	1a41      	subs	r1, r0, r1
 80154f8:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 80154fc:	d338      	bcc.n	8015570 <vnd_cdc_periodic_stats+0x90>
    cdc_stats_last_ms = now_ms;
 80154fe:	481f      	ldr	r0, [pc, #124]	@ (801557c <vnd_cdc_periodic_stats+0x9c>)
 8015500:	6879      	ldr	r1, [r7, #4]
 8015502:	6001      	str	r1, [r0, #0]
    uint64_t cur = vnd_total_tx_bytes;
 8015504:	491e      	ldr	r1, [pc, #120]	@ (8015580 <vnd_cdc_periodic_stats+0xa0>)
 8015506:	e9d1 0100 	ldrd	r0, r1, [r1]
 801550a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint64_t d   = (cur >= cdc_stats_prev_bytes) ? (cur - cdc_stats_prev_bytes) : 0ULL;
 801550e:	491d      	ldr	r1, [pc, #116]	@ (8015584 <vnd_cdc_periodic_stats+0xa4>)
 8015510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015514:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8015518:	4284      	cmp	r4, r0
 801551a:	eb75 0101 	sbcs.w	r1, r5, r1
 801551e:	d308      	bcc.n	8015532 <vnd_cdc_periodic_stats+0x52>
 8015520:	4918      	ldr	r1, [pc, #96]	@ (8015584 <vnd_cdc_periodic_stats+0xa4>)
 8015522:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015526:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 801552a:	1a22      	subs	r2, r4, r0
 801552c:	eb65 0301 	sbc.w	r3, r5, r1
 8015530:	e003      	b.n	801553a <vnd_cdc_periodic_stats+0x5a>
 8015532:	f04f 0200 	mov.w	r2, #0
 8015536:	f04f 0300 	mov.w	r3, #0
 801553a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    cdc_stats_prev_bytes = cur;
 801553e:	4911      	ldr	r1, [pc, #68]	@ (8015584 <vnd_cdc_periodic_stats+0xa4>)
 8015540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015544:	e9c1 2300 	strd	r2, r3, [r1]
    uint32_t bps = (uint32_t)d; /* за ~1 секунду */
 8015548:	693b      	ldr	r3, [r7, #16]
 801554a:	60fb      	str	r3, [r7, #12]
    cdc_logf("STAT bytes_total=%llu bps=%lu streaming=%u diag=%u",
 801554c:	4b0e      	ldr	r3, [pc, #56]	@ (8015588 <vnd_cdc_periodic_stats+0xa8>)
 801554e:	781b      	ldrb	r3, [r3, #0]
 8015550:	b2db      	uxtb	r3, r3
 8015552:	461a      	mov	r2, r3
 8015554:	4b08      	ldr	r3, [pc, #32]	@ (8015578 <vnd_cdc_periodic_stats+0x98>)
 8015556:	781b      	ldrb	r3, [r3, #0]
 8015558:	9302      	str	r3, [sp, #8]
 801555a:	9201      	str	r2, [sp, #4]
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	9300      	str	r3, [sp, #0]
 8015560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015564:	4809      	ldr	r0, [pc, #36]	@ (801558c <vnd_cdc_periodic_stats+0xac>)
 8015566:	f7ff ff89 	bl	801547c <cdc_logf>
 801556a:	e002      	b.n	8015572 <vnd_cdc_periodic_stats+0x92>
    if(diag_mode_active){ return; }
 801556c:	bf00      	nop
 801556e:	e000      	b.n	8015572 <vnd_cdc_periodic_stats+0x92>
    if(now_ms - cdc_stats_last_ms < 1000) return; /* не чаще 1 Гц */
 8015570:	bf00      	nop
             (unsigned long long)cur, (unsigned long)bps, (unsigned)streaming, (unsigned)diag_mode_active);
}
 8015572:	3720      	adds	r7, #32
 8015574:	46bd      	mov	sp, r7
 8015576:	bdb0      	pop	{r4, r5, r7, pc}
 8015578:	2400dced 	.word	0x2400dced
 801557c:	2400f284 	.word	0x2400f284
 8015580:	2400dc30 	.word	0x2400dc30
 8015584:	2400f288 	.word	0x2400f288
 8015588:	2400dba0 	.word	0x2400dba0
 801558c:	0801c390 	.word	0x0801c390

08015590 <vnd_tx_meta_push>:
static inline uint8_t vnd_tx_meta_depth(void){
    uint8_t h = vnd_tx_meta_head, t = vnd_tx_meta_tail;
    if(h>=t) return (uint8_t)(h - t);
    return (uint8_t)(VND_TX_META_FIFO - (t - h));
}
static inline void vnd_tx_meta_push(uint8_t is_frame, uint8_t flags, uint32_t seq_field){
 8015590:	b590      	push	{r4, r7, lr}
 8015592:	b085      	sub	sp, #20
 8015594:	af00      	add	r7, sp, #0
 8015596:	4603      	mov	r3, r0
 8015598:	603a      	str	r2, [r7, #0]
 801559a:	71fb      	strb	r3, [r7, #7]
 801559c:	460b      	mov	r3, r1
 801559e:	71bb      	strb	r3, [r7, #6]
    uint8_t next = (uint8_t)((vnd_tx_meta_head + 1u) % VND_TX_META_FIFO);
 80155a0:	4b2b      	ldr	r3, [pc, #172]	@ (8015650 <vnd_tx_meta_push+0xc0>)
 80155a2:	781b      	ldrb	r3, [r3, #0]
 80155a4:	3301      	adds	r3, #1
 80155a6:	b2db      	uxtb	r3, r3
 80155a8:	f003 0307 	and.w	r3, r3, #7
 80155ac:	73fb      	strb	r3, [r7, #15]
    if(next == vnd_tx_meta_tail){
 80155ae:	4b29      	ldr	r3, [pc, #164]	@ (8015654 <vnd_tx_meta_push+0xc4>)
 80155b0:	781b      	ldrb	r3, [r3, #0]
 80155b2:	7bfa      	ldrb	r2, [r7, #15]
 80155b4:	429a      	cmp	r2, r3
 80155b6:	d10d      	bne.n	80155d4 <vnd_tx_meta_push+0x44>
        /* overflow - drop oldest */
        vnd_tx_meta_tail = (uint8_t)((vnd_tx_meta_tail + 1u) % VND_TX_META_FIFO);
 80155b8:	4b26      	ldr	r3, [pc, #152]	@ (8015654 <vnd_tx_meta_push+0xc4>)
 80155ba:	781b      	ldrb	r3, [r3, #0]
 80155bc:	3301      	adds	r3, #1
 80155be:	b2db      	uxtb	r3, r3
 80155c0:	f003 0307 	and.w	r3, r3, #7
 80155c4:	b2da      	uxtb	r2, r3
 80155c6:	4b23      	ldr	r3, [pc, #140]	@ (8015654 <vnd_tx_meta_push+0xc4>)
 80155c8:	701a      	strb	r2, [r3, #0]
        meta_overflow_events++;
 80155ca:	4b23      	ldr	r3, [pc, #140]	@ (8015658 <vnd_tx_meta_push+0xc8>)
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	3301      	adds	r3, #1
 80155d0:	4a21      	ldr	r2, [pc, #132]	@ (8015658 <vnd_tx_meta_push+0xc8>)
 80155d2:	6013      	str	r3, [r2, #0]
        VND_LOG("WARN META_FIFO_OVF depth_before=%u", (unsigned)vnd_tx_meta_depth());
    }
    vnd_tx_meta_fifo[vnd_tx_meta_head].is_frame = is_frame;
 80155d4:	4b1e      	ldr	r3, [pc, #120]	@ (8015650 <vnd_tx_meta_push+0xc0>)
 80155d6:	781b      	ldrb	r3, [r3, #0]
 80155d8:	4619      	mov	r1, r3
 80155da:	4a20      	ldr	r2, [pc, #128]	@ (801565c <vnd_tx_meta_push+0xcc>)
 80155dc:	460b      	mov	r3, r1
 80155de:	005b      	lsls	r3, r3, #1
 80155e0:	440b      	add	r3, r1
 80155e2:	009b      	lsls	r3, r3, #2
 80155e4:	4413      	add	r3, r2
 80155e6:	79fa      	ldrb	r2, [r7, #7]
 80155e8:	701a      	strb	r2, [r3, #0]
    vnd_tx_meta_fifo[vnd_tx_meta_head].flags = flags;
 80155ea:	4b19      	ldr	r3, [pc, #100]	@ (8015650 <vnd_tx_meta_push+0xc0>)
 80155ec:	781b      	ldrb	r3, [r3, #0]
 80155ee:	4619      	mov	r1, r3
 80155f0:	4a1a      	ldr	r2, [pc, #104]	@ (801565c <vnd_tx_meta_push+0xcc>)
 80155f2:	460b      	mov	r3, r1
 80155f4:	005b      	lsls	r3, r3, #1
 80155f6:	440b      	add	r3, r1
 80155f8:	009b      	lsls	r3, r3, #2
 80155fa:	4413      	add	r3, r2
 80155fc:	3301      	adds	r3, #1
 80155fe:	79ba      	ldrb	r2, [r7, #6]
 8015600:	701a      	strb	r2, [r3, #0]
    vnd_tx_meta_fifo[vnd_tx_meta_head].seq_field = seq_field;
 8015602:	4b13      	ldr	r3, [pc, #76]	@ (8015650 <vnd_tx_meta_push+0xc0>)
 8015604:	781b      	ldrb	r3, [r3, #0]
 8015606:	4619      	mov	r1, r3
 8015608:	4a14      	ldr	r2, [pc, #80]	@ (801565c <vnd_tx_meta_push+0xcc>)
 801560a:	460b      	mov	r3, r1
 801560c:	005b      	lsls	r3, r3, #1
 801560e:	440b      	add	r3, r1
 8015610:	009b      	lsls	r3, r3, #2
 8015612:	4413      	add	r3, r2
 8015614:	3304      	adds	r3, #4
 8015616:	683a      	ldr	r2, [r7, #0]
 8015618:	601a      	str	r2, [r3, #0]
    vnd_tx_meta_fifo[vnd_tx_meta_head].push_tick = HAL_GetTick();
 801561a:	4b0d      	ldr	r3, [pc, #52]	@ (8015650 <vnd_tx_meta_push+0xc0>)
 801561c:	781b      	ldrb	r3, [r3, #0]
 801561e:	461c      	mov	r4, r3
 8015620:	f7ef fc50 	bl	8004ec4 <HAL_GetTick>
 8015624:	4602      	mov	r2, r0
 8015626:	490d      	ldr	r1, [pc, #52]	@ (801565c <vnd_tx_meta_push+0xcc>)
 8015628:	4623      	mov	r3, r4
 801562a:	005b      	lsls	r3, r3, #1
 801562c:	4423      	add	r3, r4
 801562e:	009b      	lsls	r3, r3, #2
 8015630:	440b      	add	r3, r1
 8015632:	3308      	adds	r3, #8
 8015634:	601a      	str	r2, [r3, #0]
    vnd_tx_meta_head = next;
 8015636:	4a06      	ldr	r2, [pc, #24]	@ (8015650 <vnd_tx_meta_push+0xc0>)
 8015638:	7bfb      	ldrb	r3, [r7, #15]
 801563a:	7013      	strb	r3, [r2, #0]
    meta_push_total++;
 801563c:	4b08      	ldr	r3, [pc, #32]	@ (8015660 <vnd_tx_meta_push+0xd0>)
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	3301      	adds	r3, #1
 8015642:	4a07      	ldr	r2, [pc, #28]	@ (8015660 <vnd_tx_meta_push+0xd0>)
 8015644:	6013      	str	r3, [r2, #0]
    /* Умеренный лог только для рабочих кадров (A/B/TEST); STAT слишком часты не будут */
    if(is_frame){
        VND_LOG("META_PUSH fl=0x%02X seq=%lu depth=%u", (unsigned)flags, (unsigned long)seq_field, (unsigned)vnd_tx_meta_depth());
    }
}
 8015646:	bf00      	nop
 8015648:	3714      	adds	r7, #20
 801564a:	46bd      	mov	sp, r7
 801564c:	bd90      	pop	{r4, r7, pc}
 801564e:	bf00      	nop
 8015650:	2401a058 	.word	0x2401a058
 8015654:	2401a059 	.word	0x2401a059
 8015658:	2401a068 	.word	0x2401a068
 801565c:	24019ff8 	.word	0x24019ff8
 8015660:	2401a05c 	.word	0x2401a05c

08015664 <vnd_tx_meta_pop>:
static inline int vnd_tx_meta_pop(vnd_tx_meta_t *out){
 8015664:	b480      	push	{r7}
 8015666:	b083      	sub	sp, #12
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
    if(vnd_tx_meta_tail == vnd_tx_meta_head){ meta_empty_events++; return 0; } /* empty */
 801566c:	4b17      	ldr	r3, [pc, #92]	@ (80156cc <vnd_tx_meta_pop+0x68>)
 801566e:	781a      	ldrb	r2, [r3, #0]
 8015670:	4b17      	ldr	r3, [pc, #92]	@ (80156d0 <vnd_tx_meta_pop+0x6c>)
 8015672:	781b      	ldrb	r3, [r3, #0]
 8015674:	429a      	cmp	r2, r3
 8015676:	d106      	bne.n	8015686 <vnd_tx_meta_pop+0x22>
 8015678:	4b16      	ldr	r3, [pc, #88]	@ (80156d4 <vnd_tx_meta_pop+0x70>)
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	3301      	adds	r3, #1
 801567e:	4a15      	ldr	r2, [pc, #84]	@ (80156d4 <vnd_tx_meta_pop+0x70>)
 8015680:	6013      	str	r3, [r2, #0]
 8015682:	2300      	movs	r3, #0
 8015684:	e01c      	b.n	80156c0 <vnd_tx_meta_pop+0x5c>
    *out = vnd_tx_meta_fifo[vnd_tx_meta_tail];
 8015686:	4b11      	ldr	r3, [pc, #68]	@ (80156cc <vnd_tx_meta_pop+0x68>)
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	4619      	mov	r1, r3
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	4a12      	ldr	r2, [pc, #72]	@ (80156d8 <vnd_tx_meta_pop+0x74>)
 8015690:	460b      	mov	r3, r1
 8015692:	005b      	lsls	r3, r3, #1
 8015694:	440b      	add	r3, r1
 8015696:	009b      	lsls	r3, r3, #2
 8015698:	441a      	add	r2, r3
 801569a:	4603      	mov	r3, r0
 801569c:	ca07      	ldmia	r2, {r0, r1, r2}
 801569e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    vnd_tx_meta_tail = (uint8_t)((vnd_tx_meta_tail + 1u) % VND_TX_META_FIFO);
 80156a2:	4b0a      	ldr	r3, [pc, #40]	@ (80156cc <vnd_tx_meta_pop+0x68>)
 80156a4:	781b      	ldrb	r3, [r3, #0]
 80156a6:	3301      	adds	r3, #1
 80156a8:	b2db      	uxtb	r3, r3
 80156aa:	f003 0307 	and.w	r3, r3, #7
 80156ae:	b2da      	uxtb	r2, r3
 80156b0:	4b06      	ldr	r3, [pc, #24]	@ (80156cc <vnd_tx_meta_pop+0x68>)
 80156b2:	701a      	strb	r2, [r3, #0]
    meta_pop_total++;
 80156b4:	4b09      	ldr	r3, [pc, #36]	@ (80156dc <vnd_tx_meta_pop+0x78>)
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	3301      	adds	r3, #1
 80156ba:	4a08      	ldr	r2, [pc, #32]	@ (80156dc <vnd_tx_meta_pop+0x78>)
 80156bc:	6013      	str	r3, [r2, #0]
    return 1;
 80156be:	2301      	movs	r3, #1
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	370c      	adds	r7, #12
 80156c4:	46bd      	mov	sp, r7
 80156c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ca:	4770      	bx	lr
 80156cc:	2401a059 	.word	0x2401a059
 80156d0:	2401a058 	.word	0x2401a058
 80156d4:	2401a064 	.word	0x2401a064
 80156d8:	24019ff8 	.word	0x24019ff8
 80156dc:	2401a060 	.word	0x2401a060

080156e0 <vnd_tx_meta_after>:
/* Унифицированная фиксация метаданных после успешного запуска передачи */
static inline void vnd_tx_meta_after(uint8_t *buf, uint16_t len){
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b086      	sub	sp, #24
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
 80156e8:	460b      	mov	r3, r1
 80156ea:	807b      	strh	r3, [r7, #2]
    uint8_t is_frame = 0, flags = 0; uint32_t seq_field = 0;
 80156ec:	2300      	movs	r3, #0
 80156ee:	75fb      	strb	r3, [r7, #23]
 80156f0:	2300      	movs	r3, #0
 80156f2:	75bb      	strb	r3, [r7, #22]
 80156f4:	2300      	movs	r3, #0
 80156f6:	613b      	str	r3, [r7, #16]
    if(len >= VND_FRAME_HDR_SIZE){
 80156f8:	887b      	ldrh	r3, [r7, #2]
 80156fa:	2b1f      	cmp	r3, #31
 80156fc:	d910      	bls.n	8015720 <vnd_tx_meta_after+0x40>
        const vnd_frame_hdr_t *h = (const vnd_frame_hdr_t*)buf;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	60fb      	str	r3, [r7, #12]
        if(h->magic == 0xA55A){ is_frame = 1; flags = h->flags; seq_field = h->seq; }
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	881b      	ldrh	r3, [r3, #0]
 8015706:	b29b      	uxth	r3, r3
 8015708:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 801570c:	4293      	cmp	r3, r2
 801570e:	d107      	bne.n	8015720 <vnd_tx_meta_after+0x40>
 8015710:	2301      	movs	r3, #1
 8015712:	75fb      	strb	r3, [r7, #23]
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	78db      	ldrb	r3, [r3, #3]
 8015718:	75bb      	strb	r3, [r7, #22]
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	685b      	ldr	r3, [r3, #4]
 801571e:	613b      	str	r3, [r7, #16]
    }
    /* Сохраняем последнюю отправку для fallback-классификации */
    last_tx_is_frame = is_frame; last_tx_flags = flags; last_tx_seq = seq_field;
 8015720:	4a09      	ldr	r2, [pc, #36]	@ (8015748 <vnd_tx_meta_after+0x68>)
 8015722:	7dfb      	ldrb	r3, [r7, #23]
 8015724:	7013      	strb	r3, [r2, #0]
 8015726:	4a09      	ldr	r2, [pc, #36]	@ (801574c <vnd_tx_meta_after+0x6c>)
 8015728:	7dbb      	ldrb	r3, [r7, #22]
 801572a:	7013      	strb	r3, [r2, #0]
 801572c:	4a08      	ldr	r2, [pc, #32]	@ (8015750 <vnd_tx_meta_after+0x70>)
 801572e:	693b      	ldr	r3, [r7, #16]
 8015730:	6013      	str	r3, [r2, #0]
    vnd_tx_meta_push(is_frame, flags, seq_field);
 8015732:	7db9      	ldrb	r1, [r7, #22]
 8015734:	7dfb      	ldrb	r3, [r7, #23]
 8015736:	693a      	ldr	r2, [r7, #16]
 8015738:	4618      	mov	r0, r3
 801573a:	f7ff ff29 	bl	8015590 <vnd_tx_meta_push>
}
 801573e:	bf00      	nop
 8015740:	3718      	adds	r7, #24
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}
 8015746:	bf00      	nop
 8015748:	2400dc20 	.word	0x2400dc20
 801574c:	2400dc21 	.word	0x2400dc21
 8015750:	2400dc24 	.word	0x2400dc24

08015754 <vnd_meta_neutralize>:
/* Нейтрализовать «застрявшую» запись в meta-FIFO (например, после ForceTxIdle),
   чтобы последующий TxCplt не принял её за реальный кадр и не исказил порядок. */
static void vnd_meta_neutralize(uint8_t flags_mask, uint32_t seq_field)
{
 8015754:	b480      	push	{r7}
 8015756:	b085      	sub	sp, #20
 8015758:	af00      	add	r7, sp, #0
 801575a:	4603      	mov	r3, r0
 801575c:	6039      	str	r1, [r7, #0]
 801575e:	71fb      	strb	r3, [r7, #7]
    uint8_t t = vnd_tx_meta_tail;
 8015760:	4b19      	ldr	r3, [pc, #100]	@ (80157c8 <vnd_meta_neutralize+0x74>)
 8015762:	781b      	ldrb	r3, [r3, #0]
 8015764:	73fb      	strb	r3, [r7, #15]
    while(t != vnd_tx_meta_head){
 8015766:	e022      	b.n	80157ae <vnd_meta_neutralize+0x5a>
        vnd_tx_meta_t *m = &vnd_tx_meta_fifo[t];
 8015768:	7bfa      	ldrb	r2, [r7, #15]
 801576a:	4613      	mov	r3, r2
 801576c:	005b      	lsls	r3, r3, #1
 801576e:	4413      	add	r3, r2
 8015770:	009b      	lsls	r3, r3, #2
 8015772:	4a16      	ldr	r2, [pc, #88]	@ (80157cc <vnd_meta_neutralize+0x78>)
 8015774:	4413      	add	r3, r2
 8015776:	60bb      	str	r3, [r7, #8]
        if(m->is_frame && (m->flags == flags_mask) && (m->seq_field == seq_field)){
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d010      	beq.n	80157a2 <vnd_meta_neutralize+0x4e>
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	785b      	ldrb	r3, [r3, #1]
 8015784:	79fa      	ldrb	r2, [r7, #7]
 8015786:	429a      	cmp	r2, r3
 8015788:	d10b      	bne.n	80157a2 <vnd_meta_neutralize+0x4e>
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	683a      	ldr	r2, [r7, #0]
 8015790:	429a      	cmp	r2, r3
 8015792:	d106      	bne.n	80157a2 <vnd_meta_neutralize+0x4e>
            m->is_frame = 0; m->flags = 0; /* превратить в служебный */
 8015794:	68bb      	ldr	r3, [r7, #8]
 8015796:	2200      	movs	r2, #0
 8015798:	701a      	strb	r2, [r3, #0]
 801579a:	68bb      	ldr	r3, [r7, #8]
 801579c:	2200      	movs	r2, #0
 801579e:	705a      	strb	r2, [r3, #1]
            VND_LOG("META_NEUTRALIZE fl=0x%02X seq=%lu", (unsigned)flags_mask, (unsigned long)seq_field);
            break;
 80157a0:	e00b      	b.n	80157ba <vnd_meta_neutralize+0x66>
        }
        t = (uint8_t)((t + 1u) % VND_TX_META_FIFO);
 80157a2:	7bfb      	ldrb	r3, [r7, #15]
 80157a4:	3301      	adds	r3, #1
 80157a6:	b2db      	uxtb	r3, r3
 80157a8:	f003 0307 	and.w	r3, r3, #7
 80157ac:	73fb      	strb	r3, [r7, #15]
    while(t != vnd_tx_meta_head){
 80157ae:	4b08      	ldr	r3, [pc, #32]	@ (80157d0 <vnd_meta_neutralize+0x7c>)
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	7bfa      	ldrb	r2, [r7, #15]
 80157b4:	429a      	cmp	r2, r3
 80157b6:	d1d7      	bne.n	8015768 <vnd_meta_neutralize+0x14>
    }
}
 80157b8:	bf00      	nop
 80157ba:	bf00      	nop
 80157bc:	3714      	adds	r7, #20
 80157be:	46bd      	mov	sp, r7
 80157c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c4:	4770      	bx	lr
 80157c6:	bf00      	nop
 80157c8:	2401a059 	.word	0x2401a059
 80157cc:	24019ff8 	.word	0x24019ff8
 80157d0:	2401a058 	.word	0x2401a058

080157d4 <vnd_recompute_pair_timing>:
static void vnd_emergency_keepalive(uint32_t now_ms);
/* Сервис: асинхронная обработка команд управления (EP0 SOFT/DEEP RESET) */
extern void USBD_VND_ProcessControlRequests(void);
/* Вычисление периода пары по требуемым samples_per_frame и текущему профилю ADC (buf_rate_hz) */
static void vnd_recompute_pair_timing(uint16_t samples_per_frame)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b086      	sub	sp, #24
 80157d8:	af00      	add	r7, sp, #0
 80157da:	4603      	mov	r3, r0
 80157dc:	80fb      	strh	r3, [r7, #6]
    /* Используем частоту буферов (Fs блоков/с), а не абсолютную частоту сэмплов */
    extern uint16_t adc_stream_get_buf_rate(void);
    uint16_t buf_rate = adc_stream_get_buf_rate();
 80157de:	f7ea fe5d 	bl	800049c <adc_stream_get_buf_rate>
 80157e2:	4603      	mov	r3, r0
 80157e4:	82fb      	strh	r3, [r7, #22]
    if(buf_rate == 0) buf_rate = 20; /* защита от деления на ноль */
 80157e6:	8afb      	ldrh	r3, [r7, #22]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d101      	bne.n	80157f0 <vnd_recompute_pair_timing+0x1c>
 80157ec:	2314      	movs	r3, #20
 80157ee:	82fb      	strh	r3, [r7, #22]
    if(samples_per_frame == 0) samples_per_frame = 1;
 80157f0:	88fb      	ldrh	r3, [r7, #6]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d101      	bne.n	80157fa <vnd_recompute_pair_timing+0x26>
 80157f6:	2301      	movs	r3, #1
 80157f8:	80fb      	strh	r3, [r7, #6]
    /* period_ms ≈ 1000 * samples_per_frame / buf_rate (округление) */
    uint32_t num = (uint32_t)samples_per_frame * 1000u + (uint32_t)(buf_rate/2u);
 80157fa:	88fb      	ldrh	r3, [r7, #6]
 80157fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015800:	fb02 f303 	mul.w	r3, r2, r3
 8015804:	8afa      	ldrh	r2, [r7, #22]
 8015806:	0852      	lsrs	r2, r2, #1
 8015808:	b292      	uxth	r2, r2
 801580a:	4413      	add	r3, r2
 801580c:	60fb      	str	r3, [r7, #12]
    uint32_t ms  = num / (uint32_t)buf_rate;
 801580e:	8afb      	ldrh	r3, [r7, #22]
 8015810:	68fa      	ldr	r2, [r7, #12]
 8015812:	fbb2 f3f3 	udiv	r3, r2, r3
 8015816:	613b      	str	r3, [r7, #16]
    if(ms == 0) ms = 1;
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d101      	bne.n	8015822 <vnd_recompute_pair_timing+0x4e>
 801581e:	2301      	movs	r3, #1
 8015820:	613b      	str	r3, [r7, #16]
    vnd_pair_period_ms = (uint16_t)((ms > 1000u) ? 1000u : ms);
 8015822:	693b      	ldr	r3, [r7, #16]
 8015824:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015828:	d802      	bhi.n	8015830 <vnd_recompute_pair_timing+0x5c>
 801582a:	693b      	ldr	r3, [r7, #16]
 801582c:	b29b      	uxth	r3, r3
 801582e:	e001      	b.n	8015834 <vnd_recompute_pair_timing+0x60>
 8015830:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015834:	4a02      	ldr	r2, [pc, #8]	@ (8015840 <vnd_recompute_pair_timing+0x6c>)
 8015836:	8013      	strh	r3, [r2, #0]
    /* Примечание: период больше не используется как задержка — передаём сразу при готовности данных.
       Оставляем расчёт только для информационных целей. */
    VND_LOG("PAIR_TIMING(info): samples=%u buf_rate=%u -> period≈%u ms",
        (unsigned)samples_per_frame, (unsigned)buf_rate, (unsigned)vnd_pair_period_ms);
}
 8015838:	bf00      	nop
 801583a:	3718      	adds	r7, #24
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}
 8015840:	2400003e 	.word	0x2400003e

08015844 <vnd_pipeline_stop_reset>:

/* Публичная функция: полный сброс/останов пайплайна */
void vnd_pipeline_stop_reset(int deep)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
    /* Остановить передачу и внутренние состояния */
    streaming = 0; diag_mode_active = 0; full_mode = 1;
 801584c:	4b37      	ldr	r3, [pc, #220]	@ (801592c <vnd_pipeline_stop_reset+0xe8>)
 801584e:	2200      	movs	r2, #0
 8015850:	701a      	strb	r2, [r3, #0]
 8015852:	4b37      	ldr	r3, [pc, #220]	@ (8015930 <vnd_pipeline_stop_reset+0xec>)
 8015854:	2200      	movs	r2, #0
 8015856:	701a      	strb	r2, [r3, #0]
 8015858:	4b36      	ldr	r3, [pc, #216]	@ (8015934 <vnd_pipeline_stop_reset+0xf0>)
 801585a:	2201      	movs	r2, #1
 801585c:	701a      	strb	r2, [r3, #0]
    stop_request = 0; pending_status = 0; start_stat_inflight = 0; status_ack_pending = 0; start_ack_done = 1;
 801585e:	4b36      	ldr	r3, [pc, #216]	@ (8015938 <vnd_pipeline_stop_reset+0xf4>)
 8015860:	2200      	movs	r2, #0
 8015862:	701a      	strb	r2, [r3, #0]
 8015864:	4b35      	ldr	r3, [pc, #212]	@ (801593c <vnd_pipeline_stop_reset+0xf8>)
 8015866:	2200      	movs	r2, #0
 8015868:	701a      	strb	r2, [r3, #0]
 801586a:	4b35      	ldr	r3, [pc, #212]	@ (8015940 <vnd_pipeline_stop_reset+0xfc>)
 801586c:	2200      	movs	r2, #0
 801586e:	701a      	strb	r2, [r3, #0]
 8015870:	4b34      	ldr	r3, [pc, #208]	@ (8015944 <vnd_pipeline_stop_reset+0x100>)
 8015872:	2200      	movs	r2, #0
 8015874:	701a      	strb	r2, [r3, #0]
 8015876:	4b34      	ldr	r3, [pc, #208]	@ (8015948 <vnd_pipeline_stop_reset+0x104>)
 8015878:	2201      	movs	r2, #1
 801587a:	701a      	strb	r2, [r3, #0]
    vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0; sending_channel = 0xFF; pending_B = 0; pending_B_since_ms = 0;
 801587c:	4b33      	ldr	r3, [pc, #204]	@ (801594c <vnd_pipeline_stop_reset+0x108>)
 801587e:	2200      	movs	r2, #0
 8015880:	701a      	strb	r2, [r3, #0]
 8015882:	4b33      	ldr	r3, [pc, #204]	@ (8015950 <vnd_pipeline_stop_reset+0x10c>)
 8015884:	2201      	movs	r2, #1
 8015886:	701a      	strb	r2, [r3, #0]
 8015888:	4b32      	ldr	r3, [pc, #200]	@ (8015954 <vnd_pipeline_stop_reset+0x110>)
 801588a:	2200      	movs	r2, #0
 801588c:	701a      	strb	r2, [r3, #0]
 801588e:	4b32      	ldr	r3, [pc, #200]	@ (8015958 <vnd_pipeline_stop_reset+0x114>)
 8015890:	22ff      	movs	r2, #255	@ 0xff
 8015892:	701a      	strb	r2, [r3, #0]
 8015894:	4b31      	ldr	r3, [pc, #196]	@ (801595c <vnd_pipeline_stop_reset+0x118>)
 8015896:	2200      	movs	r2, #0
 8015898:	701a      	strb	r2, [r3, #0]
 801589a:	4b31      	ldr	r3, [pc, #196]	@ (8015960 <vnd_pipeline_stop_reset+0x11c>)
 801589c:	2200      	movs	r2, #0
 801589e:	601a      	str	r2, [r3, #0]
    test_sent = 0; test_in_flight = 0; vnd_tx_kick = 1;
 80158a0:	4b30      	ldr	r3, [pc, #192]	@ (8015964 <vnd_pipeline_stop_reset+0x120>)
 80158a2:	2200      	movs	r2, #0
 80158a4:	701a      	strb	r2, [r3, #0]
 80158a6:	4b30      	ldr	r3, [pc, #192]	@ (8015968 <vnd_pipeline_stop_reset+0x124>)
 80158a8:	2200      	movs	r2, #0
 80158aa:	701a      	strb	r2, [r3, #0]
 80158ac:	4b2f      	ldr	r3, [pc, #188]	@ (801596c <vnd_pipeline_stop_reset+0x128>)
 80158ae:	2201      	movs	r2, #1
 80158b0:	701a      	strb	r2, [r3, #0]
    /* Очистить мета-FIFO и счётчики */
    vnd_tx_meta_head = vnd_tx_meta_tail = 0; meta_push_total = meta_pop_total = meta_empty_events = meta_overflow_events = 0;
 80158b2:	4b2f      	ldr	r3, [pc, #188]	@ (8015970 <vnd_pipeline_stop_reset+0x12c>)
 80158b4:	2200      	movs	r2, #0
 80158b6:	701a      	strb	r2, [r3, #0]
 80158b8:	4b2d      	ldr	r3, [pc, #180]	@ (8015970 <vnd_pipeline_stop_reset+0x12c>)
 80158ba:	781a      	ldrb	r2, [r3, #0]
 80158bc:	4b2d      	ldr	r3, [pc, #180]	@ (8015974 <vnd_pipeline_stop_reset+0x130>)
 80158be:	701a      	strb	r2, [r3, #0]
 80158c0:	4b2d      	ldr	r3, [pc, #180]	@ (8015978 <vnd_pipeline_stop_reset+0x134>)
 80158c2:	2200      	movs	r2, #0
 80158c4:	601a      	str	r2, [r3, #0]
 80158c6:	4b2c      	ldr	r3, [pc, #176]	@ (8015978 <vnd_pipeline_stop_reset+0x134>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	4a2c      	ldr	r2, [pc, #176]	@ (801597c <vnd_pipeline_stop_reset+0x138>)
 80158cc:	6013      	str	r3, [r2, #0]
 80158ce:	4b2b      	ldr	r3, [pc, #172]	@ (801597c <vnd_pipeline_stop_reset+0x138>)
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	4a2b      	ldr	r2, [pc, #172]	@ (8015980 <vnd_pipeline_stop_reset+0x13c>)
 80158d4:	6013      	str	r3, [r2, #0]
 80158d6:	4b2a      	ldr	r3, [pc, #168]	@ (8015980 <vnd_pipeline_stop_reset+0x13c>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	4a2a      	ldr	r2, [pc, #168]	@ (8015984 <vnd_pipeline_stop_reset+0x140>)
 80158dc:	6013      	str	r3, [r2, #0]
    stream_seq = 0; next_seq_to_assign = 0; dbg_produced_seq = 0; first_pair_done = 0;
 80158de:	4b2a      	ldr	r3, [pc, #168]	@ (8015988 <vnd_pipeline_stop_reset+0x144>)
 80158e0:	2200      	movs	r2, #0
 80158e2:	601a      	str	r2, [r3, #0]
 80158e4:	4b29      	ldr	r3, [pc, #164]	@ (801598c <vnd_pipeline_stop_reset+0x148>)
 80158e6:	2200      	movs	r2, #0
 80158e8:	601a      	str	r2, [r3, #0]
 80158ea:	4b29      	ldr	r3, [pc, #164]	@ (8015990 <vnd_pipeline_stop_reset+0x14c>)
 80158ec:	2200      	movs	r2, #0
 80158ee:	601a      	str	r2, [r3, #0]
 80158f0:	4b28      	ldr	r3, [pc, #160]	@ (8015994 <vnd_pipeline_stop_reset+0x150>)
 80158f2:	2200      	movs	r2, #0
 80158f4:	701a      	strb	r2, [r3, #0]
    cur_samples_per_frame = 0; cur_expected_frame_size = 0; dbg_any_valid_frame = 0;
 80158f6:	4b28      	ldr	r3, [pc, #160]	@ (8015998 <vnd_pipeline_stop_reset+0x154>)
 80158f8:	2200      	movs	r2, #0
 80158fa:	801a      	strh	r2, [r3, #0]
 80158fc:	4b27      	ldr	r3, [pc, #156]	@ (801599c <vnd_pipeline_stop_reset+0x158>)
 80158fe:	2200      	movs	r2, #0
 8015900:	801a      	strh	r2, [r3, #0]
 8015902:	4b27      	ldr	r3, [pc, #156]	@ (80159a0 <vnd_pipeline_stop_reset+0x15c>)
 8015904:	2200      	movs	r2, #0
 8015906:	701a      	strb	r2, [r3, #0]
    vnd_reset_buffers();
 8015908:	f000 f904 	bl	8015b14 <vnd_reset_buffers>
    /* Остановить источник данных/ADC DMA при глубоком сбросе */
    if(deep){ extern void adc_stream_stop(void); adc_stream_stop(); }
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d001      	beq.n	8015916 <vnd_pipeline_stop_reset+0xd2>
 8015912:	f7ea fd6f 	bl	80003f4 <adc_stream_stop>
    /* Индикация */
    HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_RESET);
 8015916:	2200      	movs	r2, #0
 8015918:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801591c:	4821      	ldr	r0, [pc, #132]	@ (80159a4 <vnd_pipeline_stop_reset+0x160>)
 801591e:	f7f4 fb8d 	bl	800a03c <HAL_GPIO_WritePin>
}
 8015922:	bf00      	nop
 8015924:	3708      	adds	r7, #8
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}
 801592a:	bf00      	nop
 801592c:	2400dba0 	.word	0x2400dba0
 8015930:	2400dced 	.word	0x2400dced
 8015934:	2400003c 	.word	0x2400003c
 8015938:	2400dc57 	.word	0x2400dc57
 801593c:	2400dcec 	.word	0x2400dcec
 8015940:	2400dc54 	.word	0x2400dc54
 8015944:	2400dc56 	.word	0x2400dc56
 8015948:	2400dc55 	.word	0x2400dc55
 801594c:	2400dbb4 	.word	0x2400dbb4
 8015950:	2400003b 	.word	0x2400003b
 8015954:	2400dbb5 	.word	0x2400dbb5
 8015958:	2400004c 	.word	0x2400004c
 801595c:	24019ff2 	.word	0x24019ff2
 8015960:	24019ff4 	.word	0x24019ff4
 8015964:	2400dbb6 	.word	0x2400dbb6
 8015968:	2400dbb7 	.word	0x2400dbb7
 801596c:	2400dc50 	.word	0x2400dc50
 8015970:	2401a059 	.word	0x2401a059
 8015974:	2401a058 	.word	0x2401a058
 8015978:	2401a068 	.word	0x2401a068
 801597c:	2401a064 	.word	0x2401a064
 8015980:	2401a060 	.word	0x2401a060
 8015984:	2401a05c 	.word	0x2401a05c
 8015988:	2400dba4 	.word	0x2400dba4
 801598c:	2400dbe8 	.word	0x2400dbe8
 8015990:	2400dbb8 	.word	0x2400dbb8
 8015994:	2400dc40 	.word	0x2400dc40
 8015998:	2400dba8 	.word	0x2400dba8
 801599c:	2400dbaa 	.word	0x2400dbaa
 80159a0:	2400dc15 	.word	0x2400dc15
 80159a4:	58020c00 	.word	0x58020c00

080159a8 <vnd_force_complete_test_meta_if_stale>:
   в FIFO присутствует meta с flags=0x80 и возраст > 60 мс.
   Вместо удаления элемента (что может рассинхронизировать последующие TxCplt), мы помечаем его как служебный:
     is_frame=0; flags=0; — таким образом последующий TxCplt безопасно извлекёт и проигнорирует.
   Гейтинг отправки A перестанет видеть TEST meta (по flags) и разрешит прогресс. */
static void vnd_force_complete_test_meta_if_stale(void)
{
 80159a8:	b480      	push	{r7}
 80159aa:	b083      	sub	sp, #12
 80159ac:	af00      	add	r7, sp, #0
#if VND_DISABLE_TEST
    /* В режиме без TEST: убедимся, что meta-FIFO не содержит блокирующих TEST записей */
    uint8_t t = vnd_tx_meta_tail;
 80159ae:	4b15      	ldr	r3, [pc, #84]	@ (8015a04 <vnd_force_complete_test_meta_if_stale+0x5c>)
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	71fb      	strb	r3, [r7, #7]
    while(t != vnd_tx_meta_head){
 80159b4:	e01b      	b.n	80159ee <vnd_force_complete_test_meta_if_stale+0x46>
        vnd_tx_meta_t *m = &vnd_tx_meta_fifo[t];
 80159b6:	79fa      	ldrb	r2, [r7, #7]
 80159b8:	4613      	mov	r3, r2
 80159ba:	005b      	lsls	r3, r3, #1
 80159bc:	4413      	add	r3, r2
 80159be:	009b      	lsls	r3, r3, #2
 80159c0:	4a11      	ldr	r2, [pc, #68]	@ (8015a08 <vnd_force_complete_test_meta_if_stale+0x60>)
 80159c2:	4413      	add	r3, r2
 80159c4:	603b      	str	r3, [r7, #0]
        if(m->is_frame && m->flags == 0x80){ m->is_frame = 0; m->flags = 0; }
 80159c6:	683b      	ldr	r3, [r7, #0]
 80159c8:	781b      	ldrb	r3, [r3, #0]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d009      	beq.n	80159e2 <vnd_force_complete_test_meta_if_stale+0x3a>
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	785b      	ldrb	r3, [r3, #1]
 80159d2:	2b80      	cmp	r3, #128	@ 0x80
 80159d4:	d105      	bne.n	80159e2 <vnd_force_complete_test_meta_if_stale+0x3a>
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	2200      	movs	r2, #0
 80159da:	701a      	strb	r2, [r3, #0]
 80159dc:	683b      	ldr	r3, [r7, #0]
 80159de:	2200      	movs	r2, #0
 80159e0:	705a      	strb	r2, [r3, #1]
        t = (uint8_t)((t + 1u) % VND_TX_META_FIFO);
 80159e2:	79fb      	ldrb	r3, [r7, #7]
 80159e4:	3301      	adds	r3, #1
 80159e6:	b2db      	uxtb	r3, r3
 80159e8:	f003 0307 	and.w	r3, r3, #7
 80159ec:	71fb      	strb	r3, [r7, #7]
    while(t != vnd_tx_meta_head){
 80159ee:	4b07      	ldr	r3, [pc, #28]	@ (8015a0c <vnd_force_complete_test_meta_if_stale+0x64>)
 80159f0:	781b      	ldrb	r3, [r3, #0]
 80159f2:	79fa      	ldrb	r2, [r7, #7]
 80159f4:	429a      	cmp	r2, r3
 80159f6:	d1de      	bne.n	80159b6 <vnd_force_complete_test_meta_if_stale+0xe>
    }
    return;
 80159f8:	bf00      	nop
            break; /* обрабатываем только первый TEST */
        }
        t = (uint8_t)((t + 1u) % VND_TX_META_FIFO);
    }
#endif
}
 80159fa:	370c      	adds	r7, #12
 80159fc:	46bd      	mov	sp, r7
 80159fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a02:	4770      	bx	lr
 8015a04:	2401a059 	.word	0x2401a059
 8015a08:	24019ff8 	.word	0x24019ff8
 8015a0c:	2401a058 	.word	0x2401a058

08015a10 <vnd_try_send_pending_status_from_task>:

/* Отправка отложенного STAT только из таска */
static void vnd_try_send_pending_status_from_task(void)
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b082      	sub	sp, #8
 8015a14:	af00      	add	r7, sp, #0
    /* В диагностическом режиме полностью запрещаем любые STAT по bulk-IN,
       чтобы исключить окна между A и B. Для статуса используйте EP0 (ctrl).
       Также ACK-STOP в DIAG не отправляем через bulk (см. обработчик STOP). */
    if(diag_mode_active){ return; }
 8015a16:	4b2d      	ldr	r3, [pc, #180]	@ (8015acc <vnd_try_send_pending_status_from_task+0xbc>)
 8015a18:	781b      	ldrb	r3, [r3, #0]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d14d      	bne.n	8015aba <vnd_try_send_pending_status_from_task+0xaa>
    if(!pending_status) return;
 8015a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8015ad0 <vnd_try_send_pending_status_from_task+0xc0>)
 8015a20:	781b      	ldrb	r3, [r3, #0]
 8015a22:	b2db      	uxtb	r3, r3
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d04a      	beq.n	8015abe <vnd_try_send_pending_status_from_task+0xae>
    /* Нельзя отправлять STAT, если есть незавершённая передача (даже если busy временно сброшен) */
    if(vnd_ep_busy || vnd_inflight) return;
 8015a28:	4b2a      	ldr	r3, [pc, #168]	@ (8015ad4 <vnd_try_send_pending_status_from_task+0xc4>)
 8015a2a:	781b      	ldrb	r3, [r3, #0]
 8015a2c:	b2db      	uxtb	r3, r3
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d147      	bne.n	8015ac2 <vnd_try_send_pending_status_from_task+0xb2>
 8015a32:	4b29      	ldr	r3, [pc, #164]	@ (8015ad8 <vnd_try_send_pending_status_from_task+0xc8>)
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	b2db      	uxtb	r3, r3
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d142      	bne.n	8015ac2 <vnd_try_send_pending_status_from_task+0xb2>
    uint16_t l = vnd_build_status((uint8_t*)status_buf, sizeof(status_buf));
 8015a3c:	2140      	movs	r1, #64	@ 0x40
 8015a3e:	4827      	ldr	r0, [pc, #156]	@ (8015adc <vnd_try_send_pending_status_from_task+0xcc>)
 8015a40:	f000 f912 	bl	8015c68 <vnd_build_status>
 8015a44:	4603      	mov	r3, r0
 8015a46:	80fb      	strh	r3, [r7, #6]
        if(!l) { pending_status = 0; return; } /* (очистка дублирующего кода STAT уже выполнена выше) */
 8015a48:	88fb      	ldrh	r3, [r7, #6]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d103      	bne.n	8015a56 <vnd_try_send_pending_status_from_task+0x46>
 8015a4e:	4b20      	ldr	r3, [pc, #128]	@ (8015ad0 <vnd_try_send_pending_status_from_task+0xc0>)
 8015a50:	2200      	movs	r2, #0
 8015a52:	701a      	strb	r2, [r3, #0]
 8015a54:	e036      	b.n	8015ac4 <vnd_try_send_pending_status_from_task+0xb4>
    vnd_status_permit_once = 1;
 8015a56:	4b22      	ldr	r3, [pc, #136]	@ (8015ae0 <vnd_try_send_pending_status_from_task+0xd0>)
 8015a58:	2201      	movs	r2, #1
 8015a5a:	701a      	strb	r2, [r3, #0]
    vnd_tx_ready = 0; vnd_ep_busy = 1; vnd_last_tx_len = l; vnd_last_tx_start_ms = HAL_GetTick();
 8015a5c:	4b21      	ldr	r3, [pc, #132]	@ (8015ae4 <vnd_try_send_pending_status_from_task+0xd4>)
 8015a5e:	2200      	movs	r2, #0
 8015a60:	701a      	strb	r2, [r3, #0]
 8015a62:	4b1c      	ldr	r3, [pc, #112]	@ (8015ad4 <vnd_try_send_pending_status_from_task+0xc4>)
 8015a64:	2201      	movs	r2, #1
 8015a66:	701a      	strb	r2, [r3, #0]
 8015a68:	4a1f      	ldr	r2, [pc, #124]	@ (8015ae8 <vnd_try_send_pending_status_from_task+0xd8>)
 8015a6a:	88fb      	ldrh	r3, [r7, #6]
 8015a6c:	8013      	strh	r3, [r2, #0]
 8015a6e:	f7ef fa29 	bl	8004ec4 <HAL_GetTick>
 8015a72:	4603      	mov	r3, r0
 8015a74:	4a1d      	ldr	r2, [pc, #116]	@ (8015aec <vnd_try_send_pending_status_from_task+0xdc>)
 8015a76:	6013      	str	r3, [r2, #0]
    if(USBD_VND_Transmit(&hUsbDeviceHS, (uint8_t*)status_buf, l) == USBD_OK){
 8015a78:	88fb      	ldrh	r3, [r7, #6]
 8015a7a:	461a      	mov	r2, r3
 8015a7c:	4917      	ldr	r1, [pc, #92]	@ (8015adc <vnd_try_send_pending_status_from_task+0xcc>)
 8015a7e:	481c      	ldr	r0, [pc, #112]	@ (8015af0 <vnd_try_send_pending_status_from_task+0xe0>)
 8015a80:	f003 f8e0 	bl	8018c44 <USBD_VND_Transmit>
 8015a84:	4603      	mov	r3, r0
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d110      	bne.n	8015aac <vnd_try_send_pending_status_from_task+0x9c>
        vnd_tx_meta_after((uint8_t*)status_buf, l);
 8015a8a:	88fb      	ldrh	r3, [r7, #6]
 8015a8c:	4619      	mov	r1, r3
 8015a8e:	4813      	ldr	r0, [pc, #76]	@ (8015adc <vnd_try_send_pending_status_from_task+0xcc>)
 8015a90:	f7ff fe26 	bl	80156e0 <vnd_tx_meta_after>
        VND_LOG("STAT_TX pending(task) len=%u depth=%u", l, (unsigned)vnd_tx_meta_depth());
        if(stop_request){ stop_stat_inflight = 1; }
 8015a94:	4b17      	ldr	r3, [pc, #92]	@ (8015af4 <vnd_try_send_pending_status_from_task+0xe4>)
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	b2db      	uxtb	r3, r3
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d002      	beq.n	8015aa4 <vnd_try_send_pending_status_from_task+0x94>
 8015a9e:	4b16      	ldr	r3, [pc, #88]	@ (8015af8 <vnd_try_send_pending_status_from_task+0xe8>)
 8015aa0:	2201      	movs	r2, #1
 8015aa2:	701a      	strb	r2, [r3, #0]
        pending_status = 0;
 8015aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8015ad0 <vnd_try_send_pending_status_from_task+0xc0>)
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	701a      	strb	r2, [r3, #0]
 8015aaa:	e00b      	b.n	8015ac4 <vnd_try_send_pending_status_from_task+0xb4>
    } else {
        VND_LOG("STAT_TX pending(task) busy/fail");
        vnd_tx_ready = 1; vnd_ep_busy = 0;
 8015aac:	4b0d      	ldr	r3, [pc, #52]	@ (8015ae4 <vnd_try_send_pending_status_from_task+0xd4>)
 8015aae:	2201      	movs	r2, #1
 8015ab0:	701a      	strb	r2, [r3, #0]
 8015ab2:	4b08      	ldr	r3, [pc, #32]	@ (8015ad4 <vnd_try_send_pending_status_from_task+0xc4>)
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	701a      	strb	r2, [r3, #0]
 8015ab8:	e004      	b.n	8015ac4 <vnd_try_send_pending_status_from_task+0xb4>
    if(diag_mode_active){ return; }
 8015aba:	bf00      	nop
 8015abc:	e002      	b.n	8015ac4 <vnd_try_send_pending_status_from_task+0xb4>
    if(!pending_status) return;
 8015abe:	bf00      	nop
 8015ac0:	e000      	b.n	8015ac4 <vnd_try_send_pending_status_from_task+0xb4>
    if(vnd_ep_busy || vnd_inflight) return;
 8015ac2:	bf00      	nop
    }
}
 8015ac4:	3708      	adds	r7, #8
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}
 8015aca:	bf00      	nop
 8015acc:	2400dced 	.word	0x2400dced
 8015ad0:	2400dcec 	.word	0x2400dcec
 8015ad4:	2400dbb4 	.word	0x2400dbb4
 8015ad8:	2400dbb5 	.word	0x2400dbb5
 8015adc:	2400dc6c 	.word	0x2400dc6c
 8015ae0:	2400dc51 	.word	0x2400dc51
 8015ae4:	2400003b 	.word	0x2400003b
 8015ae8:	2400dc18 	.word	0x2400dc18
 8015aec:	2400dc1c 	.word	0x2400dc1c
 8015af0:	2400d8c4 	.word	0x2400d8c4
 8015af4:	2400dc57 	.word	0x2400dc57
 8015af8:	2400dc58 	.word	0x2400dc58

08015afc <usb_vendor_periodic_tick>:

/* Тик от таймера */
static volatile uint8_t vnd_tick_flag = 0;
void usb_vendor_periodic_tick(void){ vnd_tick_flag = 1; }
 8015afc:	b480      	push	{r7}
 8015afe:	af00      	add	r7, sp, #0
 8015b00:	4b03      	ldr	r3, [pc, #12]	@ (8015b10 <usb_vendor_periodic_tick+0x14>)
 8015b02:	2201      	movs	r2, #1
 8015b04:	701a      	strb	r2, [r3, #0]
 8015b06:	bf00      	nop
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0e:	4770      	bx	lr
 8015b10:	2401a06c 	.word	0x2401a06c

08015b14 <vnd_reset_buffers>:

/* ---------------- Вспомогательные ---------------- */
static void vnd_reset_buffers(void){
 8015b14:	b590      	push	{r4, r7, lr}
 8015b16:	b083      	sub	sp, #12
 8015b18:	af00      	add	r7, sp, #0
    for(uint8_t p=0;p<VND_PAIR_BUFFERS;p++) for(uint8_t c=0;c<2;c++){ g_frames[p][c].st=FB_FILL; g_frames[p][c].samples=0; g_frames[p][c].flags = c?VND_FLAGS_ADC1:VND_FLAGS_ADC0; g_frames[p][c].frame_size=0; g_frames[p][c].seq=0; memset(g_frames[p][c].buf,0xCC,sizeof(g_frames[p][c].buf)); }
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	71fb      	strb	r3, [r7, #7]
 8015b1e:	e075      	b.n	8015c0c <vnd_reset_buffers+0xf8>
 8015b20:	2300      	movs	r3, #0
 8015b22:	71bb      	strb	r3, [r7, #6]
 8015b24:	e06c      	b.n	8015c00 <vnd_reset_buffers+0xec>
 8015b26:	79fb      	ldrb	r3, [r7, #7]
 8015b28:	79ba      	ldrb	r2, [r7, #6]
 8015b2a:	4947      	ldr	r1, [pc, #284]	@ (8015c48 <vnd_reset_buffers+0x134>)
 8015b2c:	f640 20cc 	movw	r0, #2764	@ 0xacc
 8015b30:	fb00 f202 	mul.w	r2, r0, r2
 8015b34:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015b38:	fb00 f303 	mul.w	r3, r0, r3
 8015b3c:	4413      	add	r3, r2
 8015b3e:	440b      	add	r3, r1
 8015b40:	2200      	movs	r2, #0
 8015b42:	701a      	strb	r2, [r3, #0]
 8015b44:	79fb      	ldrb	r3, [r7, #7]
 8015b46:	79ba      	ldrb	r2, [r7, #6]
 8015b48:	493f      	ldr	r1, [pc, #252]	@ (8015c48 <vnd_reset_buffers+0x134>)
 8015b4a:	f640 20cc 	movw	r0, #2764	@ 0xacc
 8015b4e:	fb00 f202 	mul.w	r2, r0, r2
 8015b52:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015b56:	fb00 f303 	mul.w	r3, r0, r3
 8015b5a:	4413      	add	r3, r2
 8015b5c:	440b      	add	r3, r1
 8015b5e:	3302      	adds	r3, #2
 8015b60:	2200      	movs	r2, #0
 8015b62:	801a      	strh	r2, [r3, #0]
 8015b64:	79bb      	ldrb	r3, [r7, #6]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d001      	beq.n	8015b6e <vnd_reset_buffers+0x5a>
 8015b6a:	2402      	movs	r4, #2
 8015b6c:	e000      	b.n	8015b70 <vnd_reset_buffers+0x5c>
 8015b6e:	2401      	movs	r4, #1
 8015b70:	79fb      	ldrb	r3, [r7, #7]
 8015b72:	79ba      	ldrb	r2, [r7, #6]
 8015b74:	4934      	ldr	r1, [pc, #208]	@ (8015c48 <vnd_reset_buffers+0x134>)
 8015b76:	f640 20cc 	movw	r0, #2764	@ 0xacc
 8015b7a:	fb00 f202 	mul.w	r2, r0, r2
 8015b7e:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015b82:	fb00 f303 	mul.w	r3, r0, r3
 8015b86:	4413      	add	r3, r2
 8015b88:	440b      	add	r3, r1
 8015b8a:	3304      	adds	r3, #4
 8015b8c:	4622      	mov	r2, r4
 8015b8e:	701a      	strb	r2, [r3, #0]
 8015b90:	79fb      	ldrb	r3, [r7, #7]
 8015b92:	79ba      	ldrb	r2, [r7, #6]
 8015b94:	492c      	ldr	r1, [pc, #176]	@ (8015c48 <vnd_reset_buffers+0x134>)
 8015b96:	f640 20cc 	movw	r0, #2764	@ 0xacc
 8015b9a:	fb00 f202 	mul.w	r2, r0, r2
 8015b9e:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015ba2:	fb00 f303 	mul.w	r3, r0, r3
 8015ba6:	4413      	add	r3, r2
 8015ba8:	440b      	add	r3, r1
 8015baa:	3306      	adds	r3, #6
 8015bac:	2200      	movs	r2, #0
 8015bae:	801a      	strh	r2, [r3, #0]
 8015bb0:	79fb      	ldrb	r3, [r7, #7]
 8015bb2:	79ba      	ldrb	r2, [r7, #6]
 8015bb4:	4924      	ldr	r1, [pc, #144]	@ (8015c48 <vnd_reset_buffers+0x134>)
 8015bb6:	f640 20cc 	movw	r0, #2764	@ 0xacc
 8015bba:	fb00 f202 	mul.w	r2, r0, r2
 8015bbe:	f241 5098 	movw	r0, #5528	@ 0x1598
 8015bc2:	fb00 f303 	mul.w	r3, r0, r3
 8015bc6:	4413      	add	r3, r2
 8015bc8:	440b      	add	r3, r1
 8015bca:	3308      	adds	r3, #8
 8015bcc:	2200      	movs	r2, #0
 8015bce:	601a      	str	r2, [r3, #0]
 8015bd0:	79fb      	ldrb	r3, [r7, #7]
 8015bd2:	79ba      	ldrb	r2, [r7, #6]
 8015bd4:	f640 21cc 	movw	r1, #2764	@ 0xacc
 8015bd8:	fb01 f202 	mul.w	r2, r1, r2
 8015bdc:	f241 5198 	movw	r1, #5528	@ 0x1598
 8015be0:	fb01 f303 	mul.w	r3, r1, r3
 8015be4:	4413      	add	r3, r2
 8015be6:	3308      	adds	r3, #8
 8015be8:	4a17      	ldr	r2, [pc, #92]	@ (8015c48 <vnd_reset_buffers+0x134>)
 8015bea:	4413      	add	r3, r2
 8015bec:	3304      	adds	r3, #4
 8015bee:	f44f 622c 	mov.w	r2, #2752	@ 0xac0
 8015bf2:	21cc      	movs	r1, #204	@ 0xcc
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f004 fe15 	bl	801a824 <memset>
 8015bfa:	79bb      	ldrb	r3, [r7, #6]
 8015bfc:	3301      	adds	r3, #1
 8015bfe:	71bb      	strb	r3, [r7, #6]
 8015c00:	79bb      	ldrb	r3, [r7, #6]
 8015c02:	2b01      	cmp	r3, #1
 8015c04:	d98f      	bls.n	8015b26 <vnd_reset_buffers+0x12>
 8015c06:	79fb      	ldrb	r3, [r7, #7]
 8015c08:	3301      	adds	r3, #1
 8015c0a:	71fb      	strb	r3, [r7, #7]
 8015c0c:	79fb      	ldrb	r3, [r7, #7]
 8015c0e:	2b07      	cmp	r3, #7
 8015c10:	d986      	bls.n	8015b20 <vnd_reset_buffers+0xc>
    pair_fill_idx=pair_send_idx=0; sending_channel=0xFF; channel0_sent_curseq=channel1_sent_curseq=0; pending_B = 0; pending_B_since_ms = 0; }
 8015c12:	4b0e      	ldr	r3, [pc, #56]	@ (8015c4c <vnd_reset_buffers+0x138>)
 8015c14:	2200      	movs	r2, #0
 8015c16:	701a      	strb	r2, [r3, #0]
 8015c18:	4b0c      	ldr	r3, [pc, #48]	@ (8015c4c <vnd_reset_buffers+0x138>)
 8015c1a:	781a      	ldrb	r2, [r3, #0]
 8015c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8015c50 <vnd_reset_buffers+0x13c>)
 8015c1e:	701a      	strb	r2, [r3, #0]
 8015c20:	4b0c      	ldr	r3, [pc, #48]	@ (8015c54 <vnd_reset_buffers+0x140>)
 8015c22:	22ff      	movs	r2, #255	@ 0xff
 8015c24:	701a      	strb	r2, [r3, #0]
 8015c26:	4b0c      	ldr	r3, [pc, #48]	@ (8015c58 <vnd_reset_buffers+0x144>)
 8015c28:	2200      	movs	r2, #0
 8015c2a:	701a      	strb	r2, [r3, #0]
 8015c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8015c58 <vnd_reset_buffers+0x144>)
 8015c2e:	781a      	ldrb	r2, [r3, #0]
 8015c30:	4b0a      	ldr	r3, [pc, #40]	@ (8015c5c <vnd_reset_buffers+0x148>)
 8015c32:	701a      	strb	r2, [r3, #0]
 8015c34:	4b0a      	ldr	r3, [pc, #40]	@ (8015c60 <vnd_reset_buffers+0x14c>)
 8015c36:	2200      	movs	r2, #0
 8015c38:	701a      	strb	r2, [r3, #0]
 8015c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8015c64 <vnd_reset_buffers+0x150>)
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	601a      	str	r2, [r3, #0]
 8015c40:	bf00      	nop
 8015c42:	370c      	adds	r7, #12
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd90      	pop	{r4, r7, pc}
 8015c48:	2400f330 	.word	0x2400f330
 8015c4c:	24019ff1 	.word	0x24019ff1
 8015c50:	24019ff0 	.word	0x24019ff0
 8015c54:	2400004c 	.word	0x2400004c
 8015c58:	2400dc69 	.word	0x2400dc69
 8015c5c:	2400dc68 	.word	0x2400dc68
 8015c60:	24019ff2 	.word	0x24019ff2
 8015c64:	24019ff4 	.word	0x24019ff4

08015c68 <vnd_build_status>:

uint16_t vnd_build_status(uint8_t *dst, uint16_t max_len){
 8015c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c6a:	b093      	sub	sp, #76	@ 0x4c
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
 8015c70:	460b      	mov	r3, r1
 8015c72:	807b      	strh	r3, [r7, #2]
    if(max_len < sizeof(vnd_status_v1_t)) return 0;
 8015c74:	887b      	ldrh	r3, [r7, #2]
 8015c76:	2b3f      	cmp	r3, #63	@ 0x3f
 8015c78:	d801      	bhi.n	8015c7e <vnd_build_status+0x16>
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	e1e1      	b.n	8016042 <vnd_build_status+0x3da>
    memset(&g_status,0,sizeof(g_status));
 8015c7e:	2240      	movs	r2, #64	@ 0x40
 8015c80:	2100      	movs	r1, #0
 8015c82:	4813      	ldr	r0, [pc, #76]	@ (8015cd0 <vnd_build_status+0x68>)
 8015c84:	f004 fdce 	bl	801a824 <memset>
    /* Сигнатура 'STAT' в первых 4 байтах */
    g_status.sig[0] = 'S';
 8015c88:	4b11      	ldr	r3, [pc, #68]	@ (8015cd0 <vnd_build_status+0x68>)
 8015c8a:	2253      	movs	r2, #83	@ 0x53
 8015c8c:	701a      	strb	r2, [r3, #0]
    g_status.sig[1] = 'T';
 8015c8e:	4b10      	ldr	r3, [pc, #64]	@ (8015cd0 <vnd_build_status+0x68>)
 8015c90:	2254      	movs	r2, #84	@ 0x54
 8015c92:	705a      	strb	r2, [r3, #1]
    g_status.sig[2] = 'A';
 8015c94:	4b0e      	ldr	r3, [pc, #56]	@ (8015cd0 <vnd_build_status+0x68>)
 8015c96:	2241      	movs	r2, #65	@ 0x41
 8015c98:	709a      	strb	r2, [r3, #2]
    g_status.sig[3] = 'T';
 8015c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8015cd0 <vnd_build_status+0x68>)
 8015c9c:	2254      	movs	r2, #84	@ 0x54
 8015c9e:	70da      	strb	r2, [r3, #3]
    g_status.version = 1;
 8015ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8015cd0 <vnd_build_status+0x68>)
 8015ca2:	2201      	movs	r2, #1
 8015ca4:	711a      	strb	r2, [r3, #4]
    g_status.cur_samples = cur_samples_per_frame;
 8015ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8015cd4 <vnd_build_status+0x6c>)
 8015ca8:	881b      	ldrh	r3, [r3, #0]
 8015caa:	b29a      	uxth	r2, r3
 8015cac:	4b08      	ldr	r3, [pc, #32]	@ (8015cd0 <vnd_build_status+0x68>)
 8015cae:	80da      	strh	r2, [r3, #6]
    g_status.frame_bytes = (uint16_t)(VND_FRAME_HDR_SIZE + cur_samples_per_frame*2u);
 8015cb0:	4b08      	ldr	r3, [pc, #32]	@ (8015cd4 <vnd_build_status+0x6c>)
 8015cb2:	881b      	ldrh	r3, [r3, #0]
 8015cb4:	b29b      	uxth	r3, r3
 8015cb6:	3310      	adds	r3, #16
 8015cb8:	b29b      	uxth	r3, r3
 8015cba:	005b      	lsls	r3, r3, #1
 8015cbc:	b29a      	uxth	r2, r3
 8015cbe:	4b04      	ldr	r3, [pc, #16]	@ (8015cd0 <vnd_build_status+0x68>)
 8015cc0:	811a      	strh	r2, [r3, #8]
    g_status.test_frames = test_sent ? 1u : 0u;
 8015cc2:	4b05      	ldr	r3, [pc, #20]	@ (8015cd8 <vnd_build_status+0x70>)
 8015cc4:	781b      	ldrb	r3, [r3, #0]
 8015cc6:	b2db      	uxtb	r3, r3
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d007      	beq.n	8015cdc <vnd_build_status+0x74>
 8015ccc:	2201      	movs	r2, #1
 8015cce:	e006      	b.n	8015cde <vnd_build_status+0x76>
 8015cd0:	2400dcac 	.word	0x2400dcac
 8015cd4:	2400dba8 	.word	0x2400dba8
 8015cd8:	2400dbb6 	.word	0x2400dbb6
 8015cdc:	2200      	movs	r2, #0
 8015cde:	4bad      	ldr	r3, [pc, #692]	@ (8015f94 <vnd_build_status+0x32c>)
 8015ce0:	815a      	strh	r2, [r3, #10]
    g_status.produced_seq = dbg_produced_seq;
 8015ce2:	4bad      	ldr	r3, [pc, #692]	@ (8015f98 <vnd_build_status+0x330>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	4aab      	ldr	r2, [pc, #684]	@ (8015f94 <vnd_build_status+0x32c>)
 8015ce8:	60d3      	str	r3, [r2, #12]
    g_status.sent0 = dbg_sent_ch0_total;
 8015cea:	4bac      	ldr	r3, [pc, #688]	@ (8015f9c <vnd_build_status+0x334>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	4aa9      	ldr	r2, [pc, #676]	@ (8015f94 <vnd_build_status+0x32c>)
 8015cf0:	6113      	str	r3, [r2, #16]
    g_status.sent1 = dbg_sent_ch1_total;
 8015cf2:	4bab      	ldr	r3, [pc, #684]	@ (8015fa0 <vnd_build_status+0x338>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	4aa7      	ldr	r2, [pc, #668]	@ (8015f94 <vnd_build_status+0x32c>)
 8015cf8:	6153      	str	r3, [r2, #20]
    g_status.dbg_tx_cplt = dbg_tx_cplt;
 8015cfa:	4baa      	ldr	r3, [pc, #680]	@ (8015fa4 <vnd_build_status+0x33c>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	4aa5      	ldr	r2, [pc, #660]	@ (8015f94 <vnd_build_status+0x32c>)
 8015d00:	6193      	str	r3, [r2, #24]
    g_status.dbg_partial_frame_abort = dbg_partial_frame_abort;
 8015d02:	4ba9      	ldr	r3, [pc, #676]	@ (8015fa8 <vnd_build_status+0x340>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	4aa3      	ldr	r2, [pc, #652]	@ (8015f94 <vnd_build_status+0x32c>)
 8015d08:	61d3      	str	r3, [r2, #28]
    g_status.dbg_size_mismatch = dbg_size_mismatch;
 8015d0a:	4ba8      	ldr	r3, [pc, #672]	@ (8015fac <vnd_build_status+0x344>)
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	4aa1      	ldr	r2, [pc, #644]	@ (8015f94 <vnd_build_status+0x32c>)
 8015d10:	6213      	str	r3, [r2, #32]
    /* Получим DMA счётчики */
    adc_stream_debug_t d; adc_stream_get_debug(&d);
 8015d12:	f107 030c 	add.w	r3, r7, #12
 8015d16:	4618      	mov	r0, r3
 8015d18:	f7ea fd3a 	bl	8000790 <adc_stream_get_debug>
    g_status.dma_done0 = d.dma_full0;
 8015d1c:	6a3b      	ldr	r3, [r7, #32]
 8015d1e:	4a9d      	ldr	r2, [pc, #628]	@ (8015f94 <vnd_build_status+0x32c>)
 8015d20:	6253      	str	r3, [r2, #36]	@ 0x24
    g_status.dma_done1 = d.dma_full1;
 8015d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d24:	4a9b      	ldr	r2, [pc, #620]	@ (8015f94 <vnd_build_status+0x32c>)
 8015d26:	6293      	str	r3, [r2, #40]	@ 0x28
    g_status.frame_wr_seq = d.frame_wr_seq;
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	4a9a      	ldr	r2, [pc, #616]	@ (8015f94 <vnd_build_status+0x32c>)
 8015d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(streaming) g_status.flags_runtime |= VND_STFLAG_STREAMING;
 8015d2e:	4ba0      	ldr	r3, [pc, #640]	@ (8015fb0 <vnd_build_status+0x348>)
 8015d30:	781b      	ldrb	r3, [r3, #0]
 8015d32:	b2db      	uxtb	r3, r3
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d006      	beq.n	8015d46 <vnd_build_status+0xde>
 8015d38:	4b96      	ldr	r3, [pc, #600]	@ (8015f94 <vnd_build_status+0x32c>)
 8015d3a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8015d3c:	f043 0301 	orr.w	r3, r3, #1
 8015d40:	b29a      	uxth	r2, r3
 8015d42:	4b94      	ldr	r3, [pc, #592]	@ (8015f94 <vnd_build_status+0x32c>)
 8015d44:	861a      	strh	r2, [r3, #48]	@ 0x30
    if(diag_mode_active) g_status.flags_runtime |= VND_STFLAG_DIAG_ACTIVE;
 8015d46:	4b9b      	ldr	r3, [pc, #620]	@ (8015fb4 <vnd_build_status+0x34c>)
 8015d48:	781b      	ldrb	r3, [r3, #0]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d006      	beq.n	8015d5c <vnd_build_status+0xf4>
 8015d4e:	4b91      	ldr	r3, [pc, #580]	@ (8015f94 <vnd_build_status+0x32c>)
 8015d50:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8015d52:	f043 0302 	orr.w	r3, r3, #2
 8015d56:	b29a      	uxth	r2, r3
 8015d58:	4b8e      	ldr	r3, [pc, #568]	@ (8015f94 <vnd_build_status+0x32c>)
 8015d5a:	861a      	strh	r2, [r3, #48]	@ 0x30
    /* Новые поля диагностики */
    uint16_t f2 = 0;
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    /* Бит0 = занятость IN EP: локальная (vnd_ep_busy) ИЛИ низкоуровневая (LL vnd_tx_busy) */
    {
        extern uint8_t USBD_VND_TxIsBusy(void);
        uint8_t ll_busy = USBD_VND_TxIsBusy();
 8015d62:	f002 ffd7 	bl	8018d14 <USBD_VND_TxIsBusy>
 8015d66:	4603      	mov	r3, r0
 8015d68:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
        if(vnd_ep_busy || ll_busy) f2 |= 1u<<0;
 8015d6c:	4b92      	ldr	r3, [pc, #584]	@ (8015fb8 <vnd_build_status+0x350>)
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	b2db      	uxtb	r3, r3
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d103      	bne.n	8015d7e <vnd_build_status+0x116>
 8015d76:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d005      	beq.n	8015d8a <vnd_build_status+0x122>
 8015d7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015d82:	f043 0301 	orr.w	r3, r3, #1
 8015d86:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    }
    if(vnd_tx_ready)         f2 |= 1u<<1;
 8015d8a:	4b8c      	ldr	r3, [pc, #560]	@ (8015fbc <vnd_build_status+0x354>)
 8015d8c:	781b      	ldrb	r3, [r3, #0]
 8015d8e:	b2db      	uxtb	r3, r3
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d005      	beq.n	8015da0 <vnd_build_status+0x138>
 8015d94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015d98:	f043 0302 	orr.w	r3, r3, #2
 8015d9c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(pending_B)            f2 |= 1u<<2;
 8015da0:	4b87      	ldr	r3, [pc, #540]	@ (8015fc0 <vnd_build_status+0x358>)
 8015da2:	781b      	ldrb	r3, [r3, #0]
 8015da4:	b2db      	uxtb	r3, r3
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d005      	beq.n	8015db6 <vnd_build_status+0x14e>
 8015daa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015dae:	f043 0304 	orr.w	r3, r3, #4
 8015db2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(test_in_flight)       f2 |= 1u<<3;
 8015db6:	4b83      	ldr	r3, [pc, #524]	@ (8015fc4 <vnd_build_status+0x35c>)
 8015db8:	781b      	ldrb	r3, [r3, #0]
 8015dba:	b2db      	uxtb	r3, r3
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d005      	beq.n	8015dcc <vnd_build_status+0x164>
 8015dc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015dc4:	f043 0308 	orr.w	r3, r3, #8
 8015dc8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(start_ack_done)       f2 |= 1u<<4;
 8015dcc:	4b7e      	ldr	r3, [pc, #504]	@ (8015fc8 <vnd_build_status+0x360>)
 8015dce:	781b      	ldrb	r3, [r3, #0]
 8015dd0:	b2db      	uxtb	r3, r3
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d005      	beq.n	8015de2 <vnd_build_status+0x17a>
 8015dd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015dda:	f043 0310 	orr.w	r3, r3, #16
 8015dde:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(start_stat_inflight)  f2 |= 1u<<5;
 8015de2:	4b7a      	ldr	r3, [pc, #488]	@ (8015fcc <vnd_build_status+0x364>)
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	b2db      	uxtb	r3, r3
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d005      	beq.n	8015df8 <vnd_build_status+0x190>
 8015dec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015df0:	f043 0320 	orr.w	r3, r3, #32
 8015df4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(start_stat_planned)   f2 |= 1u<<6;
 8015df8:	4b75      	ldr	r3, [pc, #468]	@ (8015fd0 <vnd_build_status+0x368>)
 8015dfa:	781b      	ldrb	r3, [r3, #0]
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d005      	beq.n	8015e0e <vnd_build_status+0x1a6>
 8015e02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015e0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(pending_status)       f2 |= 1u<<7;
 8015e0e:	4b71      	ldr	r3, [pc, #452]	@ (8015fd4 <vnd_build_status+0x36c>)
 8015e10:	781b      	ldrb	r3, [r3, #0]
 8015e12:	b2db      	uxtb	r3, r3
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d005      	beq.n	8015e24 <vnd_build_status+0x1bc>
 8015e18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015e20:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(simple_tx_mode)       f2 |= 1u<<8;
 8015e24:	4b6c      	ldr	r3, [pc, #432]	@ (8015fd8 <vnd_build_status+0x370>)
 8015e26:	781b      	ldrb	r3, [r3, #0]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d005      	beq.n	8015e38 <vnd_build_status+0x1d0>
 8015e2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015e34:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(diag_mode_active)     f2 |= 1u<<9;
 8015e38:	4b5e      	ldr	r3, [pc, #376]	@ (8015fb4 <vnd_build_status+0x34c>)
 8015e3a:	781b      	ldrb	r3, [r3, #0]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d005      	beq.n	8015e4c <vnd_build_status+0x1e4>
 8015e40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015e44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8015e48:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(first_pair_done)      f2 |= 1u<<10; /* переместим ниже биты READY/SENDING */
 8015e4c:	4b63      	ldr	r3, [pc, #396]	@ (8015fdc <vnd_build_status+0x374>)
 8015e4e:	781b      	ldrb	r3, [r3, #0]
 8015e50:	b2db      	uxtb	r3, r3
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d005      	beq.n	8015e62 <vnd_build_status+0x1fa>
 8015e56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015e5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8015e5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    /* Доп. диагностика: наличие готовых кадров в текущей паре */
    {
        ChanFrame *fa = &g_frames[pair_send_idx][0];
 8015e62:	4b5f      	ldr	r3, [pc, #380]	@ (8015fe0 <vnd_build_status+0x378>)
 8015e64:	781b      	ldrb	r3, [r3, #0]
 8015e66:	461a      	mov	r2, r3
 8015e68:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015e6c:	fb02 f303 	mul.w	r3, r2, r3
 8015e70:	4a5c      	ldr	r2, [pc, #368]	@ (8015fe4 <vnd_build_status+0x37c>)
 8015e72:	4413      	add	r3, r2
 8015e74:	643b      	str	r3, [r7, #64]	@ 0x40
        ChanFrame *fb = &g_frames[pair_send_idx][1];
 8015e76:	4b5a      	ldr	r3, [pc, #360]	@ (8015fe0 <vnd_build_status+0x378>)
 8015e78:	781b      	ldrb	r3, [r3, #0]
 8015e7a:	461a      	mov	r2, r3
 8015e7c:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015e80:	fb02 f303 	mul.w	r3, r2, r3
 8015e84:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8015e88:	4a56      	ldr	r2, [pc, #344]	@ (8015fe4 <vnd_build_status+0x37c>)
 8015e8a:	4413      	add	r3, r2
 8015e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (fa->st == FB_READY) f2 |= 1u<<11;
 8015e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	b2db      	uxtb	r3, r3
 8015e94:	2b01      	cmp	r3, #1
 8015e96:	d105      	bne.n	8015ea4 <vnd_build_status+0x23c>
 8015e98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015e9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015ea0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (fb->st == FB_READY) f2 |= 1u<<12;
 8015ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ea6:	781b      	ldrb	r3, [r3, #0]
 8015ea8:	b2db      	uxtb	r3, r3
 8015eaa:	2b01      	cmp	r3, #1
 8015eac:	d105      	bne.n	8015eba <vnd_build_status+0x252>
 8015eae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015eb2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8015eb6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        /* Новые биты: состояние SENDING для A/B чтобы различать READY и активную передачу */
        if (fa->st == FB_SENDING) f2 |= 1u<<13;
 8015eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015ebc:	781b      	ldrb	r3, [r3, #0]
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	2b02      	cmp	r3, #2
 8015ec2:	d105      	bne.n	8015ed0 <vnd_build_status+0x268>
 8015ec4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015ec8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015ecc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (fb->st == FB_SENDING) f2 |= 1u<<14;
 8015ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ed2:	781b      	ldrb	r3, [r3, #0]
 8015ed4:	b2db      	uxtb	r3, r3
 8015ed6:	2b02      	cmp	r3, #2
 8015ed8:	d105      	bne.n	8015ee6 <vnd_build_status+0x27e>
 8015eda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015ede:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015ee2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        /* ДОБАВЛЕНО: наличие готовых кадров в буфере подготовки (pair_fill_idx) */
        ChanFrame *fa_fill = &g_frames[pair_fill_idx][0];
 8015ee6:	4b40      	ldr	r3, [pc, #256]	@ (8015fe8 <vnd_build_status+0x380>)
 8015ee8:	781b      	ldrb	r3, [r3, #0]
 8015eea:	461a      	mov	r2, r3
 8015eec:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015ef0:	fb02 f303 	mul.w	r3, r2, r3
 8015ef4:	4a3b      	ldr	r2, [pc, #236]	@ (8015fe4 <vnd_build_status+0x37c>)
 8015ef6:	4413      	add	r3, r2
 8015ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
        ChanFrame *fb_fill = &g_frames[pair_fill_idx][1];
 8015efa:	4b3b      	ldr	r3, [pc, #236]	@ (8015fe8 <vnd_build_status+0x380>)
 8015efc:	781b      	ldrb	r3, [r3, #0]
 8015efe:	461a      	mov	r2, r3
 8015f00:	f241 5398 	movw	r3, #5528	@ 0x1598
 8015f04:	fb02 f303 	mul.w	r3, r2, r3
 8015f08:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8015f0c:	4a35      	ldr	r2, [pc, #212]	@ (8015fe4 <vnd_build_status+0x37c>)
 8015f0e:	4413      	add	r3, r2
 8015f10:	637b      	str	r3, [r7, #52]	@ 0x34
    if (fa_fill->st == FB_READY) f2 |= 1u<<15;
 8015f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f14:	781b      	ldrb	r3, [r3, #0]
 8015f16:	b2db      	uxtb	r3, r3
 8015f18:	2b01      	cmp	r3, #1
 8015f1a:	d107      	bne.n	8015f2c <vnd_build_status+0x2c4>
 8015f1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015f28:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    /* Места под отдельный бит для B_fill нет в v1: пропускаем, чтобы не конфликтовать с битом0 */
    }
    g_status.flags2 = f2;
 8015f2c:	4a19      	ldr	r2, [pc, #100]	@ (8015f94 <vnd_build_status+0x32c>)
 8015f2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015f32:	8653      	strh	r3, [r2, #50]	@ 0x32
    g_status.sending_ch = sending_channel;
 8015f34:	4b2d      	ldr	r3, [pc, #180]	@ (8015fec <vnd_build_status+0x384>)
 8015f36:	781a      	ldrb	r2, [r3, #0]
 8015f38:	4b16      	ldr	r3, [pc, #88]	@ (8015f94 <vnd_build_status+0x32c>)
 8015f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    g_status.pair_idx = (uint16_t)(((uint16_t)pair_fill_idx << 8) | (uint16_t)pair_send_idx);
 8015f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8015fe8 <vnd_build_status+0x380>)
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	b21b      	sxth	r3, r3
 8015f44:	021b      	lsls	r3, r3, #8
 8015f46:	b21a      	sxth	r2, r3
 8015f48:	4b25      	ldr	r3, [pc, #148]	@ (8015fe0 <vnd_build_status+0x378>)
 8015f4a:	781b      	ldrb	r3, [r3, #0]
 8015f4c:	b21b      	sxth	r3, r3
 8015f4e:	4313      	orrs	r3, r2
 8015f50:	b21b      	sxth	r3, r3
 8015f52:	b29a      	uxth	r2, r3
 8015f54:	4b0f      	ldr	r3, [pc, #60]	@ (8015f94 <vnd_build_status+0x32c>)
 8015f56:	86da      	strh	r2, [r3, #54]	@ 0x36
    g_status.last_tx_len = vnd_last_tx_len;
 8015f58:	4b25      	ldr	r3, [pc, #148]	@ (8015ff0 <vnd_build_status+0x388>)
 8015f5a:	881b      	ldrh	r3, [r3, #0]
 8015f5c:	b29a      	uxth	r2, r3
 8015f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8015f94 <vnd_build_status+0x32c>)
 8015f60:	871a      	strh	r2, [r3, #56]	@ 0x38
    g_status.cur_stream_seq = stream_seq;
 8015f62:	4b24      	ldr	r3, [pc, #144]	@ (8015ff4 <vnd_build_status+0x38c>)
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	4a0b      	ldr	r2, [pc, #44]	@ (8015f94 <vnd_build_status+0x32c>)
 8015f68:	f8c2 303a 	str.w	r3, [r2, #58]	@ 0x3a
        reserved0 = LSB dbg_prepare_calls, reserved2(low) = LSB dbg_prepare_ok,
        reserved3 = LSW frame_rd_seq (для сравнения с frame_wr_seq). */
     /* Упаковываем в reserved0: нижние 4 бита = LSB dbg_prepare_calls, старшие 4 = lastTxRC (LL) */
     do {
         extern uint8_t USBD_VND_LastTxRC(void);
         uint8_t rc = USBD_VND_LastTxRC();
 8015f6c:	f002 fede 	bl	8018d2c <USBD_VND_LastTxRC>
 8015f70:	4603      	mov	r3, r0
 8015f72:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
         uint8_t lsb = (uint8_t)(dbg_prepare_calls & 0x0Fu);
 8015f76:	4b20      	ldr	r3, [pc, #128]	@ (8015ff8 <vnd_build_status+0x390>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	b2db      	uxtb	r3, r3
 8015f7c:	f003 030f 	and.w	r3, r3, #15
 8015f80:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
         g_status.reserved0 = (uint8_t)((rc << 4) | lsb);
 8015f84:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8015f88:	011b      	lsls	r3, r3, #4
 8015f8a:	b25a      	sxtb	r2, r3
 8015f8c:	f997 3032 	ldrsb.w	r3, [r7, #50]	@ 0x32
 8015f90:	e034      	b.n	8015ffc <vnd_build_status+0x394>
 8015f92:	bf00      	nop
 8015f94:	2400dcac 	.word	0x2400dcac
 8015f98:	2400dbb8 	.word	0x2400dbb8
 8015f9c:	2400dbdc 	.word	0x2400dbdc
 8015fa0:	2400dbe0 	.word	0x2400dbe0
 8015fa4:	2400dbe4 	.word	0x2400dbe4
 8015fa8:	2400dbc4 	.word	0x2400dbc4
 8015fac:	2400dbc8 	.word	0x2400dbc8
 8015fb0:	2400dba0 	.word	0x2400dba0
 8015fb4:	2400dced 	.word	0x2400dced
 8015fb8:	2400dbb4 	.word	0x2400dbb4
 8015fbc:	2400003b 	.word	0x2400003b
 8015fc0:	24019ff2 	.word	0x24019ff2
 8015fc4:	2400dbb7 	.word	0x2400dbb7
 8015fc8:	2400dc55 	.word	0x2400dc55
 8015fcc:	2400dc54 	.word	0x2400dc54
 8015fd0:	2400dc53 	.word	0x2400dc53
 8015fd4:	2400dcec 	.word	0x2400dcec
 8015fd8:	2400004d 	.word	0x2400004d
 8015fdc:	2400dc40 	.word	0x2400dc40
 8015fe0:	24019ff1 	.word	0x24019ff1
 8015fe4:	2400f330 	.word	0x2400f330
 8015fe8:	24019ff0 	.word	0x24019ff0
 8015fec:	2400004c 	.word	0x2400004c
 8015ff0:	2400dc18 	.word	0x2400dc18
 8015ff4:	2400dba4 	.word	0x2400dba4
 8015ff8:	2400dc5c 	.word	0x2400dc5c
 8015ffc:	4313      	orrs	r3, r2
 8015ffe:	b25b      	sxtb	r3, r3
 8016000:	b2da      	uxtb	r2, r3
 8016002:	4b12      	ldr	r3, [pc, #72]	@ (801604c <vnd_build_status+0x3e4>)
 8016004:	715a      	strb	r2, [r3, #5]
     } while(0);
     /* reserved2: младший байт dbg_prepare_ok */
     g_status.reserved2 = (uint8_t)(dbg_prepare_ok & 0xFFu);
 8016006:	4b12      	ldr	r3, [pc, #72]	@ (8016050 <vnd_build_status+0x3e8>)
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	b2da      	uxtb	r2, r3
 801600c:	4b0f      	ldr	r3, [pc, #60]	@ (801604c <vnd_build_status+0x3e4>)
 801600e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
     extern volatile uint32_t frame_rd_seq; /* из adc_stream.c */
     g_status.reserved3 = (uint16_t)(frame_rd_seq & 0xFFFFu);
 8016012:	4b10      	ldr	r3, [pc, #64]	@ (8016054 <vnd_build_status+0x3ec>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	b29a      	uxth	r2, r3
 8016018:	4b0c      	ldr	r3, [pc, #48]	@ (801604c <vnd_build_status+0x3e4>)
 801601a:	87da      	strh	r2, [r3, #62]	@ 0x3e
     /* Хак: инкремент dbg_skipped_frames отображаем в sent0/sent1 дельтах, но здесь добавим только
        косвенную диагностику: если skips растут, host увидит разницу produced_seq - sent*. Дополнительно
        можно временно печатать в CDC при отладке (сейчас лог выключен для скорости). */
    memcpy(dst,&g_status,sizeof(g_status));
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	4a0b      	ldr	r2, [pc, #44]	@ (801604c <vnd_build_status+0x3e4>)
 8016020:	4614      	mov	r4, r2
 8016022:	469c      	mov	ip, r3
 8016024:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 8016028:	4665      	mov	r5, ip
 801602a:	4626      	mov	r6, r4
 801602c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801602e:	6028      	str	r0, [r5, #0]
 8016030:	6069      	str	r1, [r5, #4]
 8016032:	60aa      	str	r2, [r5, #8]
 8016034:	60eb      	str	r3, [r5, #12]
 8016036:	3410      	adds	r4, #16
 8016038:	f10c 0c10 	add.w	ip, ip, #16
 801603c:	4574      	cmp	r4, lr
 801603e:	d1f3      	bne.n	8016028 <vnd_build_status+0x3c0>
    return (uint16_t)sizeof(g_status);
 8016040:	2340      	movs	r3, #64	@ 0x40
}
 8016042:	4618      	mov	r0, r3
 8016044:	374c      	adds	r7, #76	@ 0x4c
 8016046:	46bd      	mov	sp, r7
 8016048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801604a:	bf00      	nop
 801604c:	2400dcac 	.word	0x2400dcac
 8016050:	2400dc60 	.word	0x2400dc60
 8016054:	2400ad04 	.word	0x2400ad04

08016058 <vnd_is_streaming>:

uint8_t vnd_is_streaming(void){ return streaming; }
 8016058:	b480      	push	{r7}
 801605a:	af00      	add	r7, sp, #0
 801605c:	4b03      	ldr	r3, [pc, #12]	@ (801606c <vnd_is_streaming+0x14>)
 801605e:	781b      	ldrb	r3, [r3, #0]
 8016060:	b2db      	uxtb	r3, r3
 8016062:	4618      	mov	r0, r3
 8016064:	46bd      	mov	sp, r7
 8016066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606a:	4770      	bx	lr
 801606c:	2400dba0 	.word	0x2400dba0

08016070 <vnd_prepare_pair>:

/* функция vnd_generate_test_sawtooth() реализована в vnd_testgen.c */

static void vnd_prepare_pair(void)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b090      	sub	sp, #64	@ 0x40
 8016074:	af00      	add	r7, sp, #0
    dbg_prepare_calls++;
 8016076:	4b93      	ldr	r3, [pc, #588]	@ (80162c4 <vnd_prepare_pair+0x254>)
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	3301      	adds	r3, #1
 801607c:	4a91      	ldr	r2, [pc, #580]	@ (80162c4 <vnd_prepare_pair+0x254>)
 801607e:	6013      	str	r3, [r2, #0]
    VND_LOG("PREPARE_PAIR called (fill_idx=%u)", (unsigned)pair_fill_idx);
    uint16_t *ch1 = NULL, *ch2 = NULL; uint16_t samples = 0;
 8016080:	2300      	movs	r3, #0
 8016082:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016084:	2300      	movs	r3, #0
 8016086:	637b      	str	r3, [r7, #52]	@ 0x34
 8016088:	2300      	movs	r3, #0
 801608a:	867b      	strh	r3, [r7, #50]	@ 0x32
    
#if USE_TEST_SAWTOOTH
    /* Тестовый режим: используем последнюю сгенерированную пару буферов */
    {
        uint16_t *tb0 = NULL, *tb1 = NULL; uint16_t avail = 0;
 801608c:	2300      	movs	r3, #0
 801608e:	60bb      	str	r3, [r7, #8]
 8016090:	2300      	movs	r3, #0
 8016092:	607b      	str	r3, [r7, #4]
 8016094:	2300      	movs	r3, #0
 8016096:	807b      	strh	r3, [r7, #2]
        if(!vnd_testgen_try_consume_latest(&tb0, &tb1, &avail)){
 8016098:	1cba      	adds	r2, r7, #2
 801609a:	1d39      	adds	r1, r7, #4
 801609c:	f107 0308 	add.w	r3, r7, #8
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7ee fa95 	bl	80045d0 <vnd_testgen_try_consume_latest>
 80160a6:	4603      	mov	r3, r0
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	f000 8103 	beq.w	80162b4 <vnd_prepare_pair+0x244>
            return; /* нет новых данных */
        }
        ch1 = tb0; ch2 = tb1;
 80160ae:	68bb      	ldr	r3, [r7, #8]
 80160b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	637b      	str	r3, [r7, #52]	@ 0x34
        samples = (avail != 0) ? avail : VND_FULL_DEFAULT_SAMPLES;
 80160b6:	887b      	ldrh	r3, [r7, #2]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d001      	beq.n	80160c0 <vnd_prepare_pair+0x50>
 80160bc:	887b      	ldrh	r3, [r7, #2]
 80160be:	e001      	b.n	80160c4 <vnd_prepare_pair+0x54>
 80160c0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80160c4:	867b      	strh	r3, [r7, #50]	@ 0x32
        /* ИСПРАВЛЕНИЕ: использовать глобальный getter вместо внутреннего debug поля,
           чтобы получить актуальное значение samples после смены профиля */
        samples = adc_stream_get_active_samples();
    }
#endif
    if(samples == 0){
 80160c6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	f000 80f5 	beq.w	80162b8 <vnd_prepare_pair+0x248>
        /* Нет новых данных от АЦП — ничего не отправляем */
        return;
    }
    /* Применяем усечение до блокировки формата */
    uint16_t effective = samples;
 80160ce:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80160d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    /* Применим явный лимит от хоста (samples_per_frame) если задан */
    if(vnd_frame_samples_req && vnd_frame_samples_req < effective) effective = vnd_frame_samples_req;
 80160d2:	4b7d      	ldr	r3, [pc, #500]	@ (80162c8 <vnd_prepare_pair+0x258>)
 80160d4:	881b      	ldrh	r3, [r3, #0]
 80160d6:	b29b      	uxth	r3, r3
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d008      	beq.n	80160ee <vnd_prepare_pair+0x7e>
 80160dc:	4b7a      	ldr	r3, [pc, #488]	@ (80162c8 <vnd_prepare_pair+0x258>)
 80160de:	881b      	ldrh	r3, [r3, #0]
 80160e0:	b29b      	uxth	r3, r3
 80160e2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d902      	bls.n	80160ee <vnd_prepare_pair+0x7e>
 80160e8:	4b77      	ldr	r3, [pc, #476]	@ (80162c8 <vnd_prepare_pair+0x258>)
 80160ea:	881b      	ldrh	r3, [r3, #0]
 80160ec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if(vnd_trunc_samples && vnd_trunc_samples < effective) effective = vnd_trunc_samples;
 80160ee:	4b77      	ldr	r3, [pc, #476]	@ (80162cc <vnd_prepare_pair+0x25c>)
 80160f0:	881b      	ldrh	r3, [r3, #0]
 80160f2:	b29b      	uxth	r3, r3
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d008      	beq.n	801610a <vnd_prepare_pair+0x9a>
 80160f8:	4b74      	ldr	r3, [pc, #464]	@ (80162cc <vnd_prepare_pair+0x25c>)
 80160fa:	881b      	ldrh	r3, [r3, #0]
 80160fc:	b29b      	uxth	r3, r3
 80160fe:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016100:	429a      	cmp	r2, r3
 8016102:	d902      	bls.n	801610a <vnd_prepare_pair+0x9a>
 8016104:	4b71      	ldr	r3, [pc, #452]	@ (80162cc <vnd_prepare_pair+0x25c>)
 8016106:	881b      	ldrh	r3, [r3, #0]
 8016108:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if(cur_samples_per_frame == 0){
 801610a:	4b71      	ldr	r3, [pc, #452]	@ (80162d0 <vnd_prepare_pair+0x260>)
 801610c:	881b      	ldrh	r3, [r3, #0]
 801610e:	b29b      	uxth	r3, r3
 8016110:	2b00      	cmp	r3, #0
 8016112:	d112      	bne.n	801613a <vnd_prepare_pair+0xca>
        if(effective > VND_MAX_SAMPLES) effective = VND_MAX_SAMPLES;
 8016114:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016116:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 801611a:	d902      	bls.n	8016122 <vnd_prepare_pair+0xb2>
 801611c:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 8016120:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        cur_samples_per_frame = effective;
 8016122:	4a6b      	ldr	r2, [pc, #428]	@ (80162d0 <vnd_prepare_pair+0x260>)
 8016124:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016126:	8013      	strh	r3, [r2, #0]
        cur_expected_frame_size = (uint16_t)(VND_FRAME_HDR_SIZE + (uint32_t)cur_samples_per_frame * 2u);
 8016128:	4b69      	ldr	r3, [pc, #420]	@ (80162d0 <vnd_prepare_pair+0x260>)
 801612a:	881b      	ldrh	r3, [r3, #0]
 801612c:	b29b      	uxth	r3, r3
 801612e:	3310      	adds	r3, #16
 8016130:	b29b      	uxth	r3, r3
 8016132:	005b      	lsls	r3, r3, #1
 8016134:	b29a      	uxth	r2, r3
 8016136:	4b67      	ldr	r3, [pc, #412]	@ (80162d4 <vnd_prepare_pair+0x264>)
 8016138:	801a      	strh	r2, [r3, #0]
    VND_LOG("SIZE_LOCK %u (raw=%u trunc=%u)", cur_samples_per_frame, samples, vnd_trunc_samples);
    /* Не меняем stream_seq здесь: seq инкрементируется только после завершения кадра B (TxCplt) */
    }
    if(effective != cur_samples_per_frame){
 801613a:	4b65      	ldr	r3, [pc, #404]	@ (80162d0 <vnd_prepare_pair+0x260>)
 801613c:	881b      	ldrh	r3, [r3, #0]
 801613e:	b29b      	uxth	r3, r3
 8016140:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016142:	429a      	cmp	r2, r3
 8016144:	d005      	beq.n	8016152 <vnd_prepare_pair+0xe2>
        VND_LOG("SIZE_MISMATCH: eff=%u cur=%u raw=%u", effective, cur_samples_per_frame, samples);
        dbg_partial_frame_abort++;
 8016146:	4b64      	ldr	r3, [pc, #400]	@ (80162d8 <vnd_prepare_pair+0x268>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	3301      	adds	r3, #1
 801614c:	4a62      	ldr	r2, [pc, #392]	@ (80162d8 <vnd_prepare_pair+0x268>)
 801614e:	6013      	str	r3, [r2, #0]
        return;
 8016150:	e0b5      	b.n	80162be <vnd_prepare_pair+0x24e>
    }
    ChanFrame *f0 = &g_frames[pair_fill_idx][0];
 8016152:	4b62      	ldr	r3, [pc, #392]	@ (80162dc <vnd_prepare_pair+0x26c>)
 8016154:	781b      	ldrb	r3, [r3, #0]
 8016156:	461a      	mov	r2, r3
 8016158:	f241 5398 	movw	r3, #5528	@ 0x1598
 801615c:	fb02 f303 	mul.w	r3, r2, r3
 8016160:	4a5f      	ldr	r2, [pc, #380]	@ (80162e0 <vnd_prepare_pair+0x270>)
 8016162:	4413      	add	r3, r2
 8016164:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ChanFrame *f1 = &g_frames[pair_fill_idx][1];
 8016166:	4b5d      	ldr	r3, [pc, #372]	@ (80162dc <vnd_prepare_pair+0x26c>)
 8016168:	781b      	ldrb	r3, [r3, #0]
 801616a:	461a      	mov	r2, r3
 801616c:	f241 5398 	movw	r3, #5528	@ 0x1598
 8016170:	fb02 f303 	mul.w	r3, r2, r3
 8016174:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8016178:	4a59      	ldr	r2, [pc, #356]	@ (80162e0 <vnd_prepare_pair+0x270>)
 801617a:	4413      	add	r3, r2
 801617c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(f0->st != FB_FILL || f1->st != FB_FILL) return;
 801617e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016180:	781b      	ldrb	r3, [r3, #0]
 8016182:	b2db      	uxtb	r3, r3
 8016184:	2b00      	cmp	r3, #0
 8016186:	f040 8099 	bne.w	80162bc <vnd_prepare_pair+0x24c>
 801618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801618c:	781b      	ldrb	r3, [r3, #0]
 801618e:	b2db      	uxtb	r3, r3
 8016190:	2b00      	cmp	r3, #0
 8016192:	f040 8093 	bne.w	80162bc <vnd_prepare_pair+0x24c>
    memset(f0->buf, 0, sizeof(f0->buf)); memset(f1->buf, 0, sizeof(f1->buf));
 8016196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016198:	330c      	adds	r3, #12
 801619a:	f44f 622c 	mov.w	r2, #2752	@ 0xac0
 801619e:	2100      	movs	r1, #0
 80161a0:	4618      	mov	r0, r3
 80161a2:	f004 fb3f 	bl	801a824 <memset>
 80161a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161a8:	330c      	adds	r3, #12
 80161aa:	f44f 622c 	mov.w	r2, #2752	@ 0xac0
 80161ae:	2100      	movs	r1, #0
 80161b0:	4618      	mov	r0, r3
 80161b2:	f004 fb37 	bl	801a824 <memset>
    uint32_t pair_timestamp = HAL_GetTick();
 80161b6:	f7ee fe85 	bl	8004ec4 <HAL_GetTick>
 80161ba:	6278      	str	r0, [r7, #36]	@ 0x24
    /* подробный лог пары убран для снижения нагрузки */
    /* Применяем усечение, если задано и меньше доступного */
    uint16_t use_samples = cur_samples_per_frame; /* уже определено и проверено */
 80161bc:	4b44      	ldr	r3, [pc, #272]	@ (80162d0 <vnd_prepare_pair+0x260>)
 80161be:	881b      	ldrh	r3, [r3, #0]
 80161c0:	847b      	strh	r3, [r7, #34]	@ 0x22
    for(uint16_t i = 0; i < use_samples; i++){
 80161c2:	2300      	movs	r3, #0
 80161c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80161c6:	e02e      	b.n	8016226 <vnd_prepare_pair+0x1b6>
#if USE_TEST_SAWTOOTH
        /* В тестовом режиме гарантируем детерминированный шаблон 1..N
           независимо от источника буферов, чтобы упростить верификацию хостом. */
        uint16_t a = (uint16_t)(i + 1);
 80161c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80161ca:	3301      	adds	r3, #1
 80161cc:	82fb      	strh	r3, [r7, #22]
        uint16_t b = (uint16_t)(i + 1);
 80161ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80161d0:	3301      	adds	r3, #1
 80161d2:	82bb      	strh	r3, [r7, #20]
#else
        uint16_t a = ch1[i];
        uint16_t b = ch2[i];
#endif
        uint8_t *p0 = f0->buf + VND_FRAME_HDR_SIZE + 2 * i; p0[0] = (uint8_t)(a & 0xFF); p0[1] = (uint8_t)(a >> 8);
 80161d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161d6:	f103 020c 	add.w	r2, r3, #12
 80161da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80161dc:	005b      	lsls	r3, r3, #1
 80161de:	3320      	adds	r3, #32
 80161e0:	4413      	add	r3, r2
 80161e2:	613b      	str	r3, [r7, #16]
 80161e4:	8afb      	ldrh	r3, [r7, #22]
 80161e6:	b2da      	uxtb	r2, r3
 80161e8:	693b      	ldr	r3, [r7, #16]
 80161ea:	701a      	strb	r2, [r3, #0]
 80161ec:	8afb      	ldrh	r3, [r7, #22]
 80161ee:	0a1b      	lsrs	r3, r3, #8
 80161f0:	b29a      	uxth	r2, r3
 80161f2:	693b      	ldr	r3, [r7, #16]
 80161f4:	3301      	adds	r3, #1
 80161f6:	b2d2      	uxtb	r2, r2
 80161f8:	701a      	strb	r2, [r3, #0]
        uint8_t *p1 = f1->buf + VND_FRAME_HDR_SIZE + 2 * i; p1[0] = (uint8_t)(b & 0xFF); p1[1] = (uint8_t)(b >> 8);
 80161fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161fc:	f103 020c 	add.w	r2, r3, #12
 8016200:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016202:	005b      	lsls	r3, r3, #1
 8016204:	3320      	adds	r3, #32
 8016206:	4413      	add	r3, r2
 8016208:	60fb      	str	r3, [r7, #12]
 801620a:	8abb      	ldrh	r3, [r7, #20]
 801620c:	b2da      	uxtb	r2, r3
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	701a      	strb	r2, [r3, #0]
 8016212:	8abb      	ldrh	r3, [r7, #20]
 8016214:	0a1b      	lsrs	r3, r3, #8
 8016216:	b29a      	uxth	r2, r3
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	3301      	adds	r3, #1
 801621c:	b2d2      	uxtb	r2, r2
 801621e:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < use_samples; i++){
 8016220:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016222:	3301      	adds	r3, #1
 8016224:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8016226:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8016228:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801622a:	429a      	cmp	r2, r3
 801622c:	d3cc      	bcc.n	80161c8 <vnd_prepare_pair+0x158>
    }
    f0->samples = f1->samples = use_samples; 
 801622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016230:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016232:	805a      	strh	r2, [r3, #2]
 8016234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016236:	885a      	ldrh	r2, [r3, #2]
 8016238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801623a:	805a      	strh	r2, [r3, #2]
    /* Incrementing seq counter для каждой пары */
    static volatile uint32_t real_pair_seq = 1;  /* Начинаем с 1, чтобы избежать путаницы с инициализацией (=0) */
    f0->seq = f1->seq = real_pair_seq++;
 801623c:	4b29      	ldr	r3, [pc, #164]	@ (80162e4 <vnd_prepare_pair+0x274>)
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	1c5a      	adds	r2, r3, #1
 8016242:	4928      	ldr	r1, [pc, #160]	@ (80162e4 <vnd_prepare_pair+0x274>)
 8016244:	600a      	str	r2, [r1, #0]
 8016246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016248:	6093      	str	r3, [r2, #8]
 801624a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801624c:	689a      	ldr	r2, [r3, #8]
 801624e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016250:	609a      	str	r2, [r3, #8]
    vnd_frame_hdr_t *h0 = (vnd_frame_hdr_t*)f0->buf; h0->timestamp = pair_timestamp;
 8016252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016254:	330c      	adds	r3, #12
 8016256:	61fb      	str	r3, [r7, #28]
 8016258:	69fb      	ldr	r3, [r7, #28]
 801625a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801625c:	609a      	str	r2, [r3, #8]
    vnd_frame_hdr_t *h1 = (vnd_frame_hdr_t*)f1->buf; h1->timestamp = pair_timestamp;
 801625e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016260:	330c      	adds	r3, #12
 8016262:	61bb      	str	r3, [r7, #24]
 8016264:	69bb      	ldr	r3, [r7, #24]
 8016266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016268:	609a      	str	r2, [r3, #8]
    vnd_build_frame(f0); vnd_build_frame(f1);
 801626a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801626c:	f000 f83e 	bl	80162ec <vnd_build_frame>
 8016270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016272:	f000 f83b 	bl	80162ec <vnd_build_frame>
    if(f0->st == FB_FILL || f1->st == FB_FILL){ dbg_partial_frame_abort++; VND_LOG("build failed"); return; }
 8016276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016278:	781b      	ldrb	r3, [r3, #0]
 801627a:	b2db      	uxtb	r3, r3
 801627c:	2b00      	cmp	r3, #0
 801627e:	d004      	beq.n	801628a <vnd_prepare_pair+0x21a>
 8016280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016282:	781b      	ldrb	r3, [r3, #0]
 8016284:	b2db      	uxtb	r3, r3
 8016286:	2b00      	cmp	r3, #0
 8016288:	d105      	bne.n	8016296 <vnd_prepare_pair+0x226>
 801628a:	4b13      	ldr	r3, [pc, #76]	@ (80162d8 <vnd_prepare_pair+0x268>)
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	3301      	adds	r3, #1
 8016290:	4a11      	ldr	r2, [pc, #68]	@ (80162d8 <vnd_prepare_pair+0x268>)
 8016292:	6013      	str	r3, [r2, #0]
 8016294:	e013      	b.n	80162be <vnd_prepare_pair+0x24e>
    /* VND_LOG("Pair prepared, fill_idx=%u", pair_fill_idx); */
    pair_fill_idx = (pair_fill_idx + 1u) % VND_PAIR_BUFFERS;
 8016296:	4b11      	ldr	r3, [pc, #68]	@ (80162dc <vnd_prepare_pair+0x26c>)
 8016298:	781b      	ldrb	r3, [r3, #0]
 801629a:	3301      	adds	r3, #1
 801629c:	b2db      	uxtb	r3, r3
 801629e:	f003 0307 	and.w	r3, r3, #7
 80162a2:	b2da      	uxtb	r2, r3
 80162a4:	4b0d      	ldr	r3, [pc, #52]	@ (80162dc <vnd_prepare_pair+0x26c>)
 80162a6:	701a      	strb	r2, [r3, #0]
    dbg_prepare_ok++;
 80162a8:	4b0f      	ldr	r3, [pc, #60]	@ (80162e8 <vnd_prepare_pair+0x278>)
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	3301      	adds	r3, #1
 80162ae:	4a0e      	ldr	r2, [pc, #56]	@ (80162e8 <vnd_prepare_pair+0x278>)
 80162b0:	6013      	str	r3, [r2, #0]
 80162b2:	e004      	b.n	80162be <vnd_prepare_pair+0x24e>
            return; /* нет новых данных */
 80162b4:	bf00      	nop
 80162b6:	e002      	b.n	80162be <vnd_prepare_pair+0x24e>
        return;
 80162b8:	bf00      	nop
 80162ba:	e000      	b.n	80162be <vnd_prepare_pair+0x24e>
    if(f0->st != FB_FILL || f1->st != FB_FILL) return;
 80162bc:	bf00      	nop
}
 80162be:	3740      	adds	r7, #64	@ 0x40
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}
 80162c4:	2400dc5c 	.word	0x2400dc5c
 80162c8:	2400dc3a 	.word	0x2400dc3a
 80162cc:	2400dc38 	.word	0x2400dc38
 80162d0:	2400dba8 	.word	0x2400dba8
 80162d4:	2400dbaa 	.word	0x2400dbaa
 80162d8:	2400dbc4 	.word	0x2400dbc4
 80162dc:	24019ff0 	.word	0x24019ff0
 80162e0:	2400f330 	.word	0x2400f330
 80162e4:	24000050 	.word	0x24000050
 80162e8:	2400dc60 	.word	0x2400dc60

080162ec <vnd_build_frame>:

static void vnd_build_frame(ChanFrame *cf)
{
 80162ec:	b480      	push	{r7}
 80162ee:	b087      	sub	sp, #28
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
    if(cf->samples == 0){ cf->st = FB_FILL; return; }
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	885b      	ldrh	r3, [r3, #2]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d103      	bne.n	8016304 <vnd_build_frame+0x18>
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	2200      	movs	r2, #0
 8016300:	701a      	strb	r2, [r3, #0]
 8016302:	e06d      	b.n	80163e0 <vnd_build_frame+0xf4>
    uint32_t payload_len = (uint32_t)cf->samples * 2u;
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	885b      	ldrh	r3, [r3, #2]
 8016308:	005b      	lsls	r3, r3, #1
 801630a:	617b      	str	r3, [r7, #20]
    uint32_t total = VND_FRAME_HDR_SIZE + payload_len;
 801630c:	697b      	ldr	r3, [r7, #20]
 801630e:	3320      	adds	r3, #32
 8016310:	613b      	str	r3, [r7, #16]
    vnd_frame_hdr_t *h = (vnd_frame_hdr_t*)cf->buf;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	330c      	adds	r3, #12
 8016316:	60fb      	str	r3, [r7, #12]
    
    h->magic = 0xA55A; h->ver = 0x01; h->flags = (cf->flags & VND_FLAGS_ADC0) ? 0x01 : 0x02; h->seq = cf->seq; h->total_samples = (uint16_t)cf->samples;
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	2200      	movs	r2, #0
 801631c:	f042 025a 	orr.w	r2, r2, #90	@ 0x5a
 8016320:	701a      	strb	r2, [r3, #0]
 8016322:	2200      	movs	r2, #0
 8016324:	f062 025a 	orn	r2, r2, #90	@ 0x5a
 8016328:	705a      	strb	r2, [r3, #1]
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	2201      	movs	r2, #1
 801632e:	709a      	strb	r2, [r3, #2]
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	791b      	ldrb	r3, [r3, #4]
 8016334:	f003 0301 	and.w	r3, r3, #1
 8016338:	2b00      	cmp	r3, #0
 801633a:	d001      	beq.n	8016340 <vnd_build_frame+0x54>
 801633c:	2201      	movs	r2, #1
 801633e:	e000      	b.n	8016342 <vnd_build_frame+0x56>
 8016340:	2202      	movs	r2, #2
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	70da      	strb	r2, [r3, #3]
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	689a      	ldr	r2, [r3, #8]
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	605a      	str	r2, [r3, #4]
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	885a      	ldrh	r2, [r3, #2]
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	819a      	strh	r2, [r3, #12]
    VND_LOG("BUILD_FRAME cf_seq=%lu flags=0x%02X samples=%u", (unsigned long)cf->seq, (unsigned)h->flags, (unsigned)cf->samples);
    h->zone_count = 0; h->zone1_offset = 0; h->zone1_length = 0; h->reserved = 0; h->reserved2 = 0; h->crc16 = 0;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	2200      	movs	r2, #0
 801635a:	739a      	strb	r2, [r3, #14]
 801635c:	2200      	movs	r2, #0
 801635e:	73da      	strb	r2, [r3, #15]
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	2200      	movs	r2, #0
 8016364:	741a      	strb	r2, [r3, #16]
 8016366:	2200      	movs	r2, #0
 8016368:	745a      	strb	r2, [r3, #17]
 801636a:	2200      	movs	r2, #0
 801636c:	749a      	strb	r2, [r3, #18]
 801636e:	2200      	movs	r2, #0
 8016370:	74da      	strb	r2, [r3, #19]
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	2200      	movs	r2, #0
 8016376:	751a      	strb	r2, [r3, #20]
 8016378:	2200      	movs	r2, #0
 801637a:	755a      	strb	r2, [r3, #21]
 801637c:	2200      	movs	r2, #0
 801637e:	759a      	strb	r2, [r3, #22]
 8016380:	2200      	movs	r2, #0
 8016382:	75da      	strb	r2, [r3, #23]
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	2200      	movs	r2, #0
 8016388:	761a      	strb	r2, [r3, #24]
 801638a:	2200      	movs	r2, #0
 801638c:	765a      	strb	r2, [r3, #25]
 801638e:	2200      	movs	r2, #0
 8016390:	769a      	strb	r2, [r3, #26]
 8016392:	2200      	movs	r2, #0
 8016394:	76da      	strb	r2, [r3, #27]
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	2200      	movs	r2, #0
 801639a:	771a      	strb	r2, [r3, #28]
 801639c:	2200      	movs	r2, #0
 801639e:	775a      	strb	r2, [r3, #29]
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	2200      	movs	r2, #0
 80163a4:	779a      	strb	r2, [r3, #30]
 80163a6:	2200      	movs	r2, #0
 80163a8:	77da      	strb	r2, [r3, #31]
    cf->frame_size = (uint16_t)total;
 80163aa:	693b      	ldr	r3, [r7, #16]
 80163ac:	b29a      	uxth	r2, r3
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	80da      	strh	r2, [r3, #6]
    if(cur_expected_frame_size && cf->frame_size != cur_expected_frame_size) dbg_size_mismatch++;
 80163b2:	4b0e      	ldr	r3, [pc, #56]	@ (80163ec <vnd_build_frame+0x100>)
 80163b4:	881b      	ldrh	r3, [r3, #0]
 80163b6:	b29b      	uxth	r3, r3
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d00b      	beq.n	80163d4 <vnd_build_frame+0xe8>
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	88da      	ldrh	r2, [r3, #6]
 80163c0:	4b0a      	ldr	r3, [pc, #40]	@ (80163ec <vnd_build_frame+0x100>)
 80163c2:	881b      	ldrh	r3, [r3, #0]
 80163c4:	b29b      	uxth	r3, r3
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d004      	beq.n	80163d4 <vnd_build_frame+0xe8>
 80163ca:	4b09      	ldr	r3, [pc, #36]	@ (80163f0 <vnd_build_frame+0x104>)
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	3301      	adds	r3, #1
 80163d0:	4a07      	ldr	r2, [pc, #28]	@ (80163f0 <vnd_build_frame+0x104>)
 80163d2:	6013      	str	r3, [r2, #0]
    dbg_any_valid_frame = 1; cf->st = FB_READY;
 80163d4:	4b07      	ldr	r3, [pc, #28]	@ (80163f4 <vnd_build_frame+0x108>)
 80163d6:	2201      	movs	r2, #1
 80163d8:	701a      	strb	r2, [r3, #0]
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	2201      	movs	r2, #1
 80163de:	701a      	strb	r2, [r3, #0]
}
 80163e0:	371c      	adds	r7, #28
 80163e2:	46bd      	mov	sp, r7
 80163e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e8:	4770      	bx	lr
 80163ea:	bf00      	nop
 80163ec:	2400dbaa 	.word	0x2400dbaa
 80163f0:	2400dbc8 	.word	0x2400dbc8
 80163f4:	2400dc15 	.word	0x2400dc15

080163f8 <vnd_validate_frame>:
/* allow_zero_samples используется как флаги:
 *  bit0 (1): разрешить total_samples==0
 *  bit1 (2): разрешить длину >= ожидаемой и кратную 64 (для паддинга до MPS)
 */
static int vnd_validate_frame(const uint8_t *buf, uint16_t len, uint8_t expect_test, uint8_t allow_flags)
{
 80163f8:	b480      	push	{r7}
 80163fa:	b085      	sub	sp, #20
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
 8016400:	4608      	mov	r0, r1
 8016402:	4611      	mov	r1, r2
 8016404:	461a      	mov	r2, r3
 8016406:	4603      	mov	r3, r0
 8016408:	807b      	strh	r3, [r7, #2]
 801640a:	460b      	mov	r3, r1
 801640c:	707b      	strb	r3, [r7, #1]
 801640e:	4613      	mov	r3, r2
 8016410:	703b      	strb	r3, [r7, #0]
    (void)expect_test;
    if (!buf || len < VND_FRAME_HDR_SIZE)
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d002      	beq.n	801641e <vnd_validate_frame+0x26>
 8016418:	887b      	ldrh	r3, [r7, #2]
 801641a:	2b1f      	cmp	r3, #31
 801641c:	d801      	bhi.n	8016422 <vnd_validate_frame+0x2a>
        return 0;
 801641e:	2300      	movs	r3, #0
 8016420:	e03f      	b.n	80164a2 <vnd_validate_frame+0xaa>
    const vnd_frame_hdr_t *h = (const vnd_frame_hdr_t*)buf;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	60fb      	str	r3, [r7, #12]
    if (h->magic != 0xA55A)
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	881b      	ldrh	r3, [r3, #0]
 801642a:	b29b      	uxth	r3, r3
 801642c:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016430:	4293      	cmp	r3, r2
 8016432:	d001      	beq.n	8016438 <vnd_validate_frame+0x40>
        return 0;
 8016434:	2300      	movs	r3, #0
 8016436:	e034      	b.n	80164a2 <vnd_validate_frame+0xaa>
    if (h->total_samples > VND_MAX_SAMPLES)
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	899b      	ldrh	r3, [r3, #12]
 801643c:	b29b      	uxth	r3, r3
 801643e:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8016442:	d901      	bls.n	8016448 <vnd_validate_frame+0x50>
        return 0;
 8016444:	2300      	movs	r3, #0
 8016446:	e02c      	b.n	80164a2 <vnd_validate_frame+0xaa>
    if (!(allow_flags & 0x01) && h->total_samples == 0)
 8016448:	783b      	ldrb	r3, [r7, #0]
 801644a:	f003 0301 	and.w	r3, r3, #1
 801644e:	2b00      	cmp	r3, #0
 8016450:	d106      	bne.n	8016460 <vnd_validate_frame+0x68>
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	899b      	ldrh	r3, [r3, #12]
 8016456:	b29b      	uxth	r3, r3
 8016458:	2b00      	cmp	r3, #0
 801645a:	d101      	bne.n	8016460 <vnd_validate_frame+0x68>
        return 0;
 801645c:	2300      	movs	r3, #0
 801645e:	e020      	b.n	80164a2 <vnd_validate_frame+0xaa>
    {
        uint16_t expected = (uint16_t)(VND_FRAME_HDR_SIZE + h->total_samples * 2u);
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	899b      	ldrh	r3, [r3, #12]
 8016464:	b29b      	uxth	r3, r3
 8016466:	3310      	adds	r3, #16
 8016468:	b29b      	uxth	r3, r3
 801646a:	005b      	lsls	r3, r3, #1
 801646c:	817b      	strh	r3, [r7, #10]
        if (len != expected) {
 801646e:	887a      	ldrh	r2, [r7, #2]
 8016470:	897b      	ldrh	r3, [r7, #10]
 8016472:	429a      	cmp	r2, r3
 8016474:	d014      	beq.n	80164a0 <vnd_validate_frame+0xa8>
            /* Разрешаем «припадиненные» кадры: длина >= expected и кратна 64 байтам (FS/HS совместимо) */
            if ((allow_flags & 0x02) == 0) return 0;
 8016476:	783b      	ldrb	r3, [r7, #0]
 8016478:	f003 0302 	and.w	r3, r3, #2
 801647c:	2b00      	cmp	r3, #0
 801647e:	d101      	bne.n	8016484 <vnd_validate_frame+0x8c>
 8016480:	2300      	movs	r3, #0
 8016482:	e00e      	b.n	80164a2 <vnd_validate_frame+0xaa>
            if (len < expected) return 0;
 8016484:	887a      	ldrh	r2, [r7, #2]
 8016486:	897b      	ldrh	r3, [r7, #10]
 8016488:	429a      	cmp	r2, r3
 801648a:	d201      	bcs.n	8016490 <vnd_validate_frame+0x98>
 801648c:	2300      	movs	r3, #0
 801648e:	e008      	b.n	80164a2 <vnd_validate_frame+0xaa>
            if ((len % 64u) != 0u) return 0;
 8016490:	887b      	ldrh	r3, [r7, #2]
 8016492:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016496:	b29b      	uxth	r3, r3
 8016498:	2b00      	cmp	r3, #0
 801649a:	d001      	beq.n	80164a0 <vnd_validate_frame+0xa8>
 801649c:	2300      	movs	r3, #0
 801649e:	e000      	b.n	80164a2 <vnd_validate_frame+0xaa>
        }
    }
    return 1;
 80164a0:	2301      	movs	r3, #1
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	3714      	adds	r7, #20
 80164a6:	46bd      	mov	sp, r7
 80164a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ac:	4770      	bx	lr
	...

080164b0 <vnd_transmit_frame>:

static USBD_StatusTypeDef __attribute__((unused)) vnd_transmit_frame(uint8_t *buf, uint16_t len, uint8_t is_test, uint8_t allow_zero_samples, const char *tag)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b08a      	sub	sp, #40	@ 0x28
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
 80164b8:	4608      	mov	r0, r1
 80164ba:	4611      	mov	r1, r2
 80164bc:	461a      	mov	r2, r3
 80164be:	4603      	mov	r3, r0
 80164c0:	807b      	strh	r3, [r7, #2]
 80164c2:	460b      	mov	r3, r1
 80164c4:	707b      	strb	r3, [r7, #1]
 80164c6:	4613      	mov	r3, r2
 80164c8:	703b      	strb	r3, [r7, #0]
    (void)is_test; dbg_tx_attempt++;
 80164ca:	4b6d      	ldr	r3, [pc, #436]	@ (8016680 <vnd_transmit_frame+0x1d0>)
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	3301      	adds	r3, #1
 80164d0:	4a6b      	ldr	r2, [pc, #428]	@ (8016680 <vnd_transmit_frame+0x1d0>)
 80164d2:	6013      	str	r3, [r2, #0]
    if(!vnd_validate_frame(buf, len, is_test, allow_zero_samples)){ dbg_tx_reject++; vnd_error_counter++; if(vnd_last_error == 0) vnd_last_error = 3; VND_LOG("TX_REJECT %s", tag ? tag : "?"); return USBD_FAIL; }
 80164d4:	783b      	ldrb	r3, [r7, #0]
 80164d6:	787a      	ldrb	r2, [r7, #1]
 80164d8:	8879      	ldrh	r1, [r7, #2]
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f7ff ff8c 	bl	80163f8 <vnd_validate_frame>
 80164e0:	4603      	mov	r3, r0
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d112      	bne.n	801650c <vnd_transmit_frame+0x5c>
 80164e6:	4b67      	ldr	r3, [pc, #412]	@ (8016684 <vnd_transmit_frame+0x1d4>)
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	3301      	adds	r3, #1
 80164ec:	4a65      	ldr	r2, [pc, #404]	@ (8016684 <vnd_transmit_frame+0x1d4>)
 80164ee:	6013      	str	r3, [r2, #0]
 80164f0:	4b65      	ldr	r3, [pc, #404]	@ (8016688 <vnd_transmit_frame+0x1d8>)
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	3301      	adds	r3, #1
 80164f6:	4a64      	ldr	r2, [pc, #400]	@ (8016688 <vnd_transmit_frame+0x1d8>)
 80164f8:	6013      	str	r3, [r2, #0]
 80164fa:	4b64      	ldr	r3, [pc, #400]	@ (801668c <vnd_transmit_frame+0x1dc>)
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d102      	bne.n	8016508 <vnd_transmit_frame+0x58>
 8016502:	4b62      	ldr	r3, [pc, #392]	@ (801668c <vnd_transmit_frame+0x1dc>)
 8016504:	2203      	movs	r2, #3
 8016506:	601a      	str	r2, [r3, #0]
 8016508:	2303      	movs	r3, #3
 801650a:	e0b5      	b.n	8016678 <vnd_transmit_frame+0x1c8>
    if(!vnd_tx_ready || vnd_ep_busy || vnd_inflight){ vnd_error_counter++; VND_LOG("TX_SKIP busy/inflight tag=%s", tag ? tag : "?"); return USBD_BUSY; }
 801650c:	4b60      	ldr	r3, [pc, #384]	@ (8016690 <vnd_transmit_frame+0x1e0>)
 801650e:	781b      	ldrb	r3, [r3, #0]
 8016510:	b2db      	uxtb	r3, r3
 8016512:	2b00      	cmp	r3, #0
 8016514:	d009      	beq.n	801652a <vnd_transmit_frame+0x7a>
 8016516:	4b5f      	ldr	r3, [pc, #380]	@ (8016694 <vnd_transmit_frame+0x1e4>)
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	b2db      	uxtb	r3, r3
 801651c:	2b00      	cmp	r3, #0
 801651e:	d104      	bne.n	801652a <vnd_transmit_frame+0x7a>
 8016520:	4b5d      	ldr	r3, [pc, #372]	@ (8016698 <vnd_transmit_frame+0x1e8>)
 8016522:	781b      	ldrb	r3, [r3, #0]
 8016524:	b2db      	uxtb	r3, r3
 8016526:	2b00      	cmp	r3, #0
 8016528:	d006      	beq.n	8016538 <vnd_transmit_frame+0x88>
 801652a:	4b57      	ldr	r3, [pc, #348]	@ (8016688 <vnd_transmit_frame+0x1d8>)
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	3301      	adds	r3, #1
 8016530:	4a55      	ldr	r2, [pc, #340]	@ (8016688 <vnd_transmit_frame+0x1d8>)
 8016532:	6013      	str	r3, [r2, #0]
 8016534:	2301      	movs	r3, #1
 8016536:	e09f      	b.n	8016678 <vnd_transmit_frame+0x1c8>
    vnd_tx_ready = 0; vnd_ep_busy = 1; vnd_inflight = 1; vnd_last_tx_len = len; vnd_last_tx_start_ms = HAL_GetTick();
 8016538:	4b55      	ldr	r3, [pc, #340]	@ (8016690 <vnd_transmit_frame+0x1e0>)
 801653a:	2200      	movs	r2, #0
 801653c:	701a      	strb	r2, [r3, #0]
 801653e:	4b55      	ldr	r3, [pc, #340]	@ (8016694 <vnd_transmit_frame+0x1e4>)
 8016540:	2201      	movs	r2, #1
 8016542:	701a      	strb	r2, [r3, #0]
 8016544:	4b54      	ldr	r3, [pc, #336]	@ (8016698 <vnd_transmit_frame+0x1e8>)
 8016546:	2201      	movs	r2, #1
 8016548:	701a      	strb	r2, [r3, #0]
 801654a:	4a54      	ldr	r2, [pc, #336]	@ (801669c <vnd_transmit_frame+0x1ec>)
 801654c:	887b      	ldrh	r3, [r7, #2]
 801654e:	8013      	strh	r3, [r2, #0]
 8016550:	f7ee fcb8 	bl	8004ec4 <HAL_GetTick>
 8016554:	4603      	mov	r3, r0
 8016556:	4a52      	ldr	r2, [pc, #328]	@ (80166a0 <vnd_transmit_frame+0x1f0>)
 8016558:	6013      	str	r3, [r2, #0]

    /* Фиксируем метаданные кадра; НЕ переписываем seq перед отправкой.
       Последовательность пар контролируется строго: seq фиксируется при сборке пары,
       а инкремент выполняется только по завершению B (TxCplt). Это исключает случаи,
       когда задержавшийся B получает «будущий» seq. */
    uint8_t is_frame=0, flags=0; uint32_t seq_field=0; int rewrote_seq = 0;
 801655a:	2300      	movs	r3, #0
 801655c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016560:	2300      	movs	r3, #0
 8016562:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016566:	2300      	movs	r3, #0
 8016568:	623b      	str	r3, [r7, #32]
 801656a:	2300      	movs	r3, #0
 801656c:	61fb      	str	r3, [r7, #28]
    if(len >= VND_FRAME_HDR_SIZE){
 801656e:	887b      	ldrh	r3, [r7, #2]
 8016570:	2b1f      	cmp	r3, #31
 8016572:	d912      	bls.n	801659a <vnd_transmit_frame+0xea>
        vnd_frame_hdr_t *hh = (vnd_frame_hdr_t*)buf;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	61bb      	str	r3, [r7, #24]
        if(hh->magic == 0xA55A){ is_frame = 1; flags = hh->flags; seq_field = hh->seq; }
 8016578:	69bb      	ldr	r3, [r7, #24]
 801657a:	881b      	ldrh	r3, [r3, #0]
 801657c:	b29b      	uxth	r3, r3
 801657e:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016582:	4293      	cmp	r3, r2
 8016584:	d109      	bne.n	801659a <vnd_transmit_frame+0xea>
 8016586:	2301      	movs	r3, #1
 8016588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801658c:	69bb      	ldr	r3, [r7, #24]
 801658e:	78db      	ldrb	r3, [r3, #3]
 8016590:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016594:	69bb      	ldr	r3, [r7, #24]
 8016596:	685b      	ldr	r3, [r3, #4]
 8016598:	623b      	str	r3, [r7, #32]
    }

    /* Зафиксируем точный тип текущего кадра в полёте */
    if(len >= VND_FRAME_HDR_SIZE){ const vnd_frame_hdr_t *hh = (const vnd_frame_hdr_t*)buf; if(hh->magic==0xA55A){ inflight_is_frame = 1; inflight_flags = hh->flags; inflight_seq = hh->seq; } else { inflight_is_frame = 0; inflight_flags = 0; inflight_seq = 0; } } else { inflight_is_frame = 0; inflight_flags = 0; inflight_seq = 0; }
 801659a:	887b      	ldrh	r3, [r7, #2]
 801659c:	2b1f      	cmp	r3, #31
 801659e:	d91e      	bls.n	80165de <vnd_transmit_frame+0x12e>
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	617b      	str	r3, [r7, #20]
 80165a4:	697b      	ldr	r3, [r7, #20]
 80165a6:	881b      	ldrh	r3, [r3, #0]
 80165a8:	b29b      	uxth	r3, r3
 80165aa:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80165ae:	4293      	cmp	r3, r2
 80165b0:	d10b      	bne.n	80165ca <vnd_transmit_frame+0x11a>
 80165b2:	4b3c      	ldr	r3, [pc, #240]	@ (80166a4 <vnd_transmit_frame+0x1f4>)
 80165b4:	2201      	movs	r2, #1
 80165b6:	701a      	strb	r2, [r3, #0]
 80165b8:	697b      	ldr	r3, [r7, #20]
 80165ba:	78da      	ldrb	r2, [r3, #3]
 80165bc:	4b3a      	ldr	r3, [pc, #232]	@ (80166a8 <vnd_transmit_frame+0x1f8>)
 80165be:	701a      	strb	r2, [r3, #0]
 80165c0:	697b      	ldr	r3, [r7, #20]
 80165c2:	685b      	ldr	r3, [r3, #4]
 80165c4:	4a39      	ldr	r2, [pc, #228]	@ (80166ac <vnd_transmit_frame+0x1fc>)
 80165c6:	6013      	str	r3, [r2, #0]
 80165c8:	e012      	b.n	80165f0 <vnd_transmit_frame+0x140>
 80165ca:	4b36      	ldr	r3, [pc, #216]	@ (80166a4 <vnd_transmit_frame+0x1f4>)
 80165cc:	2200      	movs	r2, #0
 80165ce:	701a      	strb	r2, [r3, #0]
 80165d0:	4b35      	ldr	r3, [pc, #212]	@ (80166a8 <vnd_transmit_frame+0x1f8>)
 80165d2:	2200      	movs	r2, #0
 80165d4:	701a      	strb	r2, [r3, #0]
 80165d6:	4b35      	ldr	r3, [pc, #212]	@ (80166ac <vnd_transmit_frame+0x1fc>)
 80165d8:	2200      	movs	r2, #0
 80165da:	601a      	str	r2, [r3, #0]
 80165dc:	e008      	b.n	80165f0 <vnd_transmit_frame+0x140>
 80165de:	4b31      	ldr	r3, [pc, #196]	@ (80166a4 <vnd_transmit_frame+0x1f4>)
 80165e0:	2200      	movs	r2, #0
 80165e2:	701a      	strb	r2, [r3, #0]
 80165e4:	4b30      	ldr	r3, [pc, #192]	@ (80166a8 <vnd_transmit_frame+0x1f8>)
 80165e6:	2200      	movs	r2, #0
 80165e8:	701a      	strb	r2, [r3, #0]
 80165ea:	4b30      	ldr	r3, [pc, #192]	@ (80166ac <vnd_transmit_frame+0x1fc>)
 80165ec:	2200      	movs	r2, #0
 80165ee:	601a      	str	r2, [r3, #0]
    USBD_StatusTypeDef rc = USBD_VND_Transmit(&hUsbDeviceHS, buf, len);
 80165f0:	887b      	ldrh	r3, [r7, #2]
 80165f2:	461a      	mov	r2, r3
 80165f4:	6879      	ldr	r1, [r7, #4]
 80165f6:	482e      	ldr	r0, [pc, #184]	@ (80166b0 <vnd_transmit_frame+0x200>)
 80165f8:	f002 fb24 	bl	8018c44 <USBD_VND_Transmit>
 80165fc:	4603      	mov	r3, r0
 80165fe:	74fb      	strb	r3, [r7, #19]
    if(rc == USBD_BUSY){
 8016600:	7cfb      	ldrb	r3, [r7, #19]
 8016602:	2b01      	cmp	r3, #1
 8016604:	d126      	bne.n	8016654 <vnd_transmit_frame+0x1a4>
        dbg_resend_blocked++; vnd_error_counter++; if(vnd_last_error == 0) vnd_last_error = 4;
 8016606:	4b2b      	ldr	r3, [pc, #172]	@ (80166b4 <vnd_transmit_frame+0x204>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	3301      	adds	r3, #1
 801660c:	4a29      	ldr	r2, [pc, #164]	@ (80166b4 <vnd_transmit_frame+0x204>)
 801660e:	6013      	str	r3, [r2, #0]
 8016610:	4b1d      	ldr	r3, [pc, #116]	@ (8016688 <vnd_transmit_frame+0x1d8>)
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	3301      	adds	r3, #1
 8016616:	4a1c      	ldr	r2, [pc, #112]	@ (8016688 <vnd_transmit_frame+0x1d8>)
 8016618:	6013      	str	r3, [r2, #0]
 801661a:	4b1c      	ldr	r3, [pc, #112]	@ (801668c <vnd_transmit_frame+0x1dc>)
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d102      	bne.n	8016628 <vnd_transmit_frame+0x178>
 8016622:	4b1a      	ldr	r3, [pc, #104]	@ (801668c <vnd_transmit_frame+0x1dc>)
 8016624:	2204      	movs	r2, #4
 8016626:	601a      	str	r2, [r3, #0]
        /* Диагностика LL: получим last rc/len и флаг занятости */
        extern uint8_t USBD_VND_TxIsBusy(void);
        extern uint8_t USBD_VND_LastTxRC(void);
        extern uint16_t USBD_VND_LastTxLen(void);
        uint8_t ll_busy = USBD_VND_TxIsBusy(); uint8_t ll_rc = USBD_VND_LastTxRC(); uint16_t ll_len = USBD_VND_LastTxLen();
 8016628:	f002 fb74 	bl	8018d14 <USBD_VND_TxIsBusy>
 801662c:	4603      	mov	r3, r0
 801662e:	72fb      	strb	r3, [r7, #11]
 8016630:	f002 fb7c 	bl	8018d2c <USBD_VND_LastTxRC>
 8016634:	4603      	mov	r3, r0
 8016636:	72bb      	strb	r3, [r7, #10]
 8016638:	f002 fb84 	bl	8018d44 <USBD_VND_LastTxLen>
 801663c:	4603      	mov	r3, r0
 801663e:	813b      	strh	r3, [r7, #8]
        VND_LOG("TX_BUSY tag=%s len=%u ll_busy=%u last_rc=%u last_len=%u", tag?tag:"?", (unsigned)len, (unsigned)ll_busy, (unsigned)ll_rc, (unsigned)ll_len);
        vnd_tx_ready = 1; vnd_ep_busy = 0; vnd_inflight = 0;
 8016640:	4b13      	ldr	r3, [pc, #76]	@ (8016690 <vnd_transmit_frame+0x1e0>)
 8016642:	2201      	movs	r2, #1
 8016644:	701a      	strb	r2, [r3, #0]
 8016646:	4b13      	ldr	r3, [pc, #76]	@ (8016694 <vnd_transmit_frame+0x1e4>)
 8016648:	2200      	movs	r2, #0
 801664a:	701a      	strb	r2, [r3, #0]
 801664c:	4b12      	ldr	r3, [pc, #72]	@ (8016698 <vnd_transmit_frame+0x1e8>)
 801664e:	2200      	movs	r2, #0
 8016650:	701a      	strb	r2, [r3, #0]
 8016652:	e010      	b.n	8016676 <vnd_transmit_frame+0x1c6>
    }
    else {
        /* Фиксируем метаданные ТОЛЬКО после успешного запуска передачи, иначе не сместим FIFO зря */
        vnd_tx_meta_after(buf, len);
 8016654:	887b      	ldrh	r3, [r7, #2]
 8016656:	4619      	mov	r1, r3
 8016658:	6878      	ldr	r0, [r7, #4]
 801665a:	f7ff f841 	bl	80156e0 <vnd_tx_meta_after>
        if(is_frame){
 801665e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016662:	2b00      	cmp	r3, #0
 8016664:	d001      	beq.n	801666a <vnd_transmit_frame+0x1ba>
            const vnd_frame_hdr_t *lh = (const vnd_frame_hdr_t*)buf;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	60fb      	str	r3, [r7, #12]
            }
        } else {
            VND_LOG("SEND tag=%s (no-hdr) cur_stream_seq=%lu len=%u", tag ? tag : "?", (unsigned long)stream_seq, len);
        }
        /* Дублирование в CDC (работает для кадров ADC0/ADC1 и диагностических) */
        vnd_cdc_duplicate_preview(buf, len, tag);
 801666a:	887b      	ldrh	r3, [r7, #2]
 801666c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801666e:	4619      	mov	r1, r3
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f7fe fef5 	bl	8015460 <vnd_cdc_duplicate_preview>
    }
    return rc;
 8016676:	7cfb      	ldrb	r3, [r7, #19]
}
 8016678:	4618      	mov	r0, r3
 801667a:	3728      	adds	r7, #40	@ 0x28
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}
 8016680:	2400dbd0 	.word	0x2400dbd0
 8016684:	2400dbd4 	.word	0x2400dbd4
 8016688:	2400dbec 	.word	0x2400dbec
 801668c:	2400dbb0 	.word	0x2400dbb0
 8016690:	2400003b 	.word	0x2400003b
 8016694:	2400dbb4 	.word	0x2400dbb4
 8016698:	2400dbb5 	.word	0x2400dbb5
 801669c:	2400dc18 	.word	0x2400dc18
 80166a0:	2400dc1c 	.word	0x2400dc1c
 80166a4:	2400dc28 	.word	0x2400dc28
 80166a8:	2400dc29 	.word	0x2400dc29
 80166ac:	2400dc2c 	.word	0x2400dc2c
 80166b0:	2400d8c4 	.word	0x2400d8c4
 80166b4:	2400dbcc 	.word	0x2400dbcc

080166b8 <vnd_diag_prepare_pair>:

/* Упрощённая диагностическая пара A/B: подготовка буферов по текущему cur_samples_per_frame */
static void vnd_diag_prepare_pair(uint32_t seq, uint16_t samples)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b088      	sub	sp, #32
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
 80166c0:	460b      	mov	r3, r1
 80166c2:	807b      	strh	r3, [r7, #2]
    if(samples == 0) samples = VND_DEFAULT_TEST_SAMPLES;
 80166c4:	887b      	ldrh	r3, [r7, #2]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d101      	bne.n	80166ce <vnd_diag_prepare_pair+0x16>
 80166ca:	2350      	movs	r3, #80	@ 0x50
 80166cc:	807b      	strh	r3, [r7, #2]
    if(samples > VND_MAX_SAMPLES) samples = VND_MAX_SAMPLES;
 80166ce:	887b      	ldrh	r3, [r7, #2]
 80166d0:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 80166d4:	d902      	bls.n	80166dc <vnd_diag_prepare_pair+0x24>
 80166d6:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 80166da:	807b      	strh	r3, [r7, #2]
    uint16_t base_len = (uint16_t)(VND_FRAME_HDR_SIZE + (uint32_t)samples*2u);
 80166dc:	887b      	ldrh	r3, [r7, #2]
 80166de:	3310      	adds	r3, #16
 80166e0:	b29b      	uxth	r3, r3
 80166e2:	005b      	lsls	r3, r3, #1
 80166e4:	833b      	strh	r3, [r7, #24]
    /* Паддинг до кратности 512 (HS max packet); кратность 64 обеспечивает совместимость и для FS */
    uint16_t pad_unit = 512u;
 80166e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80166ea:	82fb      	strh	r3, [r7, #22]
    uint16_t padded = (uint16_t)(((uint32_t)(base_len + (pad_unit-1u)) / pad_unit) * pad_unit);
 80166ec:	8b3a      	ldrh	r2, [r7, #24]
 80166ee:	8afb      	ldrh	r3, [r7, #22]
 80166f0:	4413      	add	r3, r2
 80166f2:	1e5a      	subs	r2, r3, #1
 80166f4:	8afb      	ldrh	r3, [r7, #22]
 80166f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80166fa:	b29b      	uxth	r3, r3
 80166fc:	8afa      	ldrh	r2, [r7, #22]
 80166fe:	fb12 f303 	smulbb	r3, r2, r3
 8016702:	83fb      	strh	r3, [r7, #30]
    if (padded < base_len) padded = base_len; /* защита от переполнения (не ожидается) */
 8016704:	8bfa      	ldrh	r2, [r7, #30]
 8016706:	8b3b      	ldrh	r3, [r7, #24]
 8016708:	429a      	cmp	r2, r3
 801670a:	d201      	bcs.n	8016710 <vnd_diag_prepare_pair+0x58>
 801670c:	8b3b      	ldrh	r3, [r7, #24]
 801670e:	83fb      	strh	r3, [r7, #30]
    diag_frame_len = padded;
 8016710:	4a44      	ldr	r2, [pc, #272]	@ (8016824 <vnd_diag_prepare_pair+0x16c>)
 8016712:	8bfb      	ldrh	r3, [r7, #30]
 8016714:	8013      	strh	r3, [r2, #0]
    /* A */
    memset(diag_a_buf, 0, diag_frame_len);
 8016716:	4b43      	ldr	r3, [pc, #268]	@ (8016824 <vnd_diag_prepare_pair+0x16c>)
 8016718:	881b      	ldrh	r3, [r3, #0]
 801671a:	461a      	mov	r2, r3
 801671c:	2100      	movs	r1, #0
 801671e:	4842      	ldr	r0, [pc, #264]	@ (8016828 <vnd_diag_prepare_pair+0x170>)
 8016720:	f004 f880 	bl	801a824 <memset>
    vnd_frame_hdr_t *ha = (vnd_frame_hdr_t*)diag_a_buf;
 8016724:	4b40      	ldr	r3, [pc, #256]	@ (8016828 <vnd_diag_prepare_pair+0x170>)
 8016726:	613b      	str	r3, [r7, #16]
    ha->magic = 0xA55A; ha->ver = 0x01; ha->flags = 0x01; ha->seq = seq; ha->timestamp = HAL_GetTick(); ha->total_samples = samples;
 8016728:	693b      	ldr	r3, [r7, #16]
 801672a:	2200      	movs	r2, #0
 801672c:	f042 025a 	orr.w	r2, r2, #90	@ 0x5a
 8016730:	701a      	strb	r2, [r3, #0]
 8016732:	2200      	movs	r2, #0
 8016734:	f062 025a 	orn	r2, r2, #90	@ 0x5a
 8016738:	705a      	strb	r2, [r3, #1]
 801673a:	693b      	ldr	r3, [r7, #16]
 801673c:	2201      	movs	r2, #1
 801673e:	709a      	strb	r2, [r3, #2]
 8016740:	693b      	ldr	r3, [r7, #16]
 8016742:	2201      	movs	r2, #1
 8016744:	70da      	strb	r2, [r3, #3]
 8016746:	693b      	ldr	r3, [r7, #16]
 8016748:	687a      	ldr	r2, [r7, #4]
 801674a:	605a      	str	r2, [r3, #4]
 801674c:	f7ee fbba 	bl	8004ec4 <HAL_GetTick>
 8016750:	4602      	mov	r2, r0
 8016752:	693b      	ldr	r3, [r7, #16]
 8016754:	609a      	str	r2, [r3, #8]
 8016756:	693b      	ldr	r3, [r7, #16]
 8016758:	887a      	ldrh	r2, [r7, #2]
 801675a:	819a      	strh	r2, [r3, #12]
    for(uint16_t i=0;i<samples;i++){ uint16_t v=i; diag_a_buf[VND_FRAME_HDR_SIZE+2*i]=(uint8_t)(v & 0xFF); diag_a_buf[VND_FRAME_HDR_SIZE+2*i+1]=(uint8_t)(v>>8); }
 801675c:	2300      	movs	r3, #0
 801675e:	83bb      	strh	r3, [r7, #28]
 8016760:	e014      	b.n	801678c <vnd_diag_prepare_pair+0xd4>
 8016762:	8bbb      	ldrh	r3, [r7, #28]
 8016764:	813b      	strh	r3, [r7, #8]
 8016766:	8bbb      	ldrh	r3, [r7, #28]
 8016768:	005b      	lsls	r3, r3, #1
 801676a:	3320      	adds	r3, #32
 801676c:	893a      	ldrh	r2, [r7, #8]
 801676e:	b2d1      	uxtb	r1, r2
 8016770:	4a2d      	ldr	r2, [pc, #180]	@ (8016828 <vnd_diag_prepare_pair+0x170>)
 8016772:	54d1      	strb	r1, [r2, r3]
 8016774:	893b      	ldrh	r3, [r7, #8]
 8016776:	0a1b      	lsrs	r3, r3, #8
 8016778:	b29a      	uxth	r2, r3
 801677a:	8bbb      	ldrh	r3, [r7, #28]
 801677c:	005b      	lsls	r3, r3, #1
 801677e:	3321      	adds	r3, #33	@ 0x21
 8016780:	b2d1      	uxtb	r1, r2
 8016782:	4a29      	ldr	r2, [pc, #164]	@ (8016828 <vnd_diag_prepare_pair+0x170>)
 8016784:	54d1      	strb	r1, [r2, r3]
 8016786:	8bbb      	ldrh	r3, [r7, #28]
 8016788:	3301      	adds	r3, #1
 801678a:	83bb      	strh	r3, [r7, #28]
 801678c:	8bba      	ldrh	r2, [r7, #28]
 801678e:	887b      	ldrh	r3, [r7, #2]
 8016790:	429a      	cmp	r2, r3
 8016792:	d3e6      	bcc.n	8016762 <vnd_diag_prepare_pair+0xaa>
    /* B */
    memset(diag_b_buf, 0, diag_frame_len);
 8016794:	4b23      	ldr	r3, [pc, #140]	@ (8016824 <vnd_diag_prepare_pair+0x16c>)
 8016796:	881b      	ldrh	r3, [r3, #0]
 8016798:	461a      	mov	r2, r3
 801679a:	2100      	movs	r1, #0
 801679c:	4823      	ldr	r0, [pc, #140]	@ (801682c <vnd_diag_prepare_pair+0x174>)
 801679e:	f004 f841 	bl	801a824 <memset>
    vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)diag_b_buf;
 80167a2:	4b22      	ldr	r3, [pc, #136]	@ (801682c <vnd_diag_prepare_pair+0x174>)
 80167a4:	60fb      	str	r3, [r7, #12]
    hb->magic = 0xA55A; hb->ver = 0x01; hb->flags = 0x02; hb->seq = seq; hb->timestamp = ha->timestamp; hb->total_samples = samples;
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	2200      	movs	r2, #0
 80167aa:	f042 025a 	orr.w	r2, r2, #90	@ 0x5a
 80167ae:	701a      	strb	r2, [r3, #0]
 80167b0:	2200      	movs	r2, #0
 80167b2:	f062 025a 	orn	r2, r2, #90	@ 0x5a
 80167b6:	705a      	strb	r2, [r3, #1]
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	2201      	movs	r2, #1
 80167bc:	709a      	strb	r2, [r3, #2]
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	2202      	movs	r2, #2
 80167c2:	70da      	strb	r2, [r3, #3]
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	687a      	ldr	r2, [r7, #4]
 80167c8:	605a      	str	r2, [r3, #4]
 80167ca:	693b      	ldr	r3, [r7, #16]
 80167cc:	689a      	ldr	r2, [r3, #8]
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	609a      	str	r2, [r3, #8]
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	887a      	ldrh	r2, [r7, #2]
 80167d6:	819a      	strh	r2, [r3, #12]
    for(uint16_t i=0;i<samples;i++){ uint16_t v=0x0100u+i; diag_b_buf[VND_FRAME_HDR_SIZE+2*i]=(uint8_t)(v & 0xFF); diag_b_buf[VND_FRAME_HDR_SIZE+2*i+1]=(uint8_t)(v>>8); }
 80167d8:	2300      	movs	r3, #0
 80167da:	837b      	strh	r3, [r7, #26]
 80167dc:	e016      	b.n	801680c <vnd_diag_prepare_pair+0x154>
 80167de:	8b7b      	ldrh	r3, [r7, #26]
 80167e0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80167e4:	817b      	strh	r3, [r7, #10]
 80167e6:	8b7b      	ldrh	r3, [r7, #26]
 80167e8:	005b      	lsls	r3, r3, #1
 80167ea:	3320      	adds	r3, #32
 80167ec:	897a      	ldrh	r2, [r7, #10]
 80167ee:	b2d1      	uxtb	r1, r2
 80167f0:	4a0e      	ldr	r2, [pc, #56]	@ (801682c <vnd_diag_prepare_pair+0x174>)
 80167f2:	54d1      	strb	r1, [r2, r3]
 80167f4:	897b      	ldrh	r3, [r7, #10]
 80167f6:	0a1b      	lsrs	r3, r3, #8
 80167f8:	b29a      	uxth	r2, r3
 80167fa:	8b7b      	ldrh	r3, [r7, #26]
 80167fc:	005b      	lsls	r3, r3, #1
 80167fe:	3321      	adds	r3, #33	@ 0x21
 8016800:	b2d1      	uxtb	r1, r2
 8016802:	4a0a      	ldr	r2, [pc, #40]	@ (801682c <vnd_diag_prepare_pair+0x174>)
 8016804:	54d1      	strb	r1, [r2, r3]
 8016806:	8b7b      	ldrh	r3, [r7, #26]
 8016808:	3301      	adds	r3, #1
 801680a:	837b      	strh	r3, [r7, #26]
 801680c:	8b7a      	ldrh	r2, [r7, #26]
 801680e:	887b      	ldrh	r3, [r7, #2]
 8016810:	429a      	cmp	r2, r3
 8016812:	d3e4      	bcc.n	80167de <vnd_diag_prepare_pair+0x126>
    diag_current_pair_seq = seq; /* зафиксируем seq текущей пары для гарантии совпадения A/B */
 8016814:	4a06      	ldr	r2, [pc, #24]	@ (8016830 <vnd_diag_prepare_pair+0x178>)
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	6013      	str	r3, [r2, #0]
}
 801681a:	bf00      	nop
 801681c:	3720      	adds	r7, #32
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}
 8016822:	bf00      	nop
 8016824:	2400dcf8 	.word	0x2400dcf8
 8016828:	2400dcfc 	.word	0x2400dcfc
 801682c:	2400e7bc 	.word	0x2400e7bc
 8016830:	24000048 	.word	0x24000048

08016834 <vnd_diag_try_tx>:

/* Попытка отправки диагностического кадра: A, затем (если не A-only) B */
static int vnd_diag_try_tx(void)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b086      	sub	sp, #24
 8016838:	af02      	add	r7, sp, #8
    if(vnd_ep_busy) return 0;
 801683a:	4b4c      	ldr	r3, [pc, #304]	@ (801696c <vnd_diag_try_tx+0x138>)
 801683c:	781b      	ldrb	r3, [r3, #0]
 801683e:	b2db      	uxtb	r3, r3
 8016840:	2b00      	cmp	r3, #0
 8016842:	d001      	beq.n	8016848 <vnd_diag_try_tx+0x14>
 8016844:	2300      	movs	r3, #0
 8016846:	e08d      	b.n	8016964 <vnd_diag_try_tx+0x130>
    if(diag_frame_len == 0) return 0;
 8016848:	4b49      	ldr	r3, [pc, #292]	@ (8016970 <vnd_diag_try_tx+0x13c>)
 801684a:	881b      	ldrh	r3, [r3, #0]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d101      	bne.n	8016854 <vnd_diag_try_tx+0x20>
 8016850:	2300      	movs	r3, #0
 8016852:	e087      	b.n	8016964 <vnd_diag_try_tx+0x130>
        sending_channel = 0; /* для корректной статистики */
        return 1;
    } else { return 0; }
#else
    /* В DIAG режиме используем pending_B как главный флаг: если он установлен — шлём B, иначе A */
    if(pending_B)
 8016854:	4b47      	ldr	r3, [pc, #284]	@ (8016974 <vnd_diag_try_tx+0x140>)
 8016856:	781b      	ldrb	r3, [r3, #0]
 8016858:	b2db      	uxtb	r3, r3
 801685a:	2b00      	cmp	r3, #0
 801685c:	d041      	beq.n	80168e2 <vnd_diag_try_tx+0xae>
    {
        if(!vnd_validate_frame(diag_b_buf, diag_frame_len, 0, 0x02)) return 0; /* allow padding */
 801685e:	4b44      	ldr	r3, [pc, #272]	@ (8016970 <vnd_diag_try_tx+0x13c>)
 8016860:	8819      	ldrh	r1, [r3, #0]
 8016862:	2302      	movs	r3, #2
 8016864:	2200      	movs	r2, #0
 8016866:	4844      	ldr	r0, [pc, #272]	@ (8016978 <vnd_diag_try_tx+0x144>)
 8016868:	f7ff fdc6 	bl	80163f8 <vnd_validate_frame>
 801686c:	4603      	mov	r3, r0
 801686e:	2b00      	cmp	r3, #0
 8016870:	d101      	bne.n	8016876 <vnd_diag_try_tx+0x42>
 8016872:	2300      	movs	r3, #0
 8016874:	e076      	b.n	8016964 <vnd_diag_try_tx+0x130>
        /* Прямое копирование полей из заголовка A: seq/timestamp/ns всегда совпадают в паре */
        if(diag_frame_len >= VND_FRAME_HDR_SIZE){
 8016876:	4b3e      	ldr	r3, [pc, #248]	@ (8016970 <vnd_diag_try_tx+0x13c>)
 8016878:	881b      	ldrh	r3, [r3, #0]
 801687a:	2b1f      	cmp	r3, #31
 801687c:	d91e      	bls.n	80168bc <vnd_diag_try_tx+0x88>
            vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)diag_b_buf;
 801687e:	4b3e      	ldr	r3, [pc, #248]	@ (8016978 <vnd_diag_try_tx+0x144>)
 8016880:	60bb      	str	r3, [r7, #8]
            const vnd_frame_hdr_t *ha = (const vnd_frame_hdr_t*)diag_a_buf;
 8016882:	4b3e      	ldr	r3, [pc, #248]	@ (801697c <vnd_diag_try_tx+0x148>)
 8016884:	607b      	str	r3, [r7, #4]
            if(hb->magic == 0xA55A && ha->magic == 0xA55A){
 8016886:	68bb      	ldr	r3, [r7, #8]
 8016888:	881b      	ldrh	r3, [r3, #0]
 801688a:	b29b      	uxth	r3, r3
 801688c:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016890:	4293      	cmp	r3, r2
 8016892:	d113      	bne.n	80168bc <vnd_diag_try_tx+0x88>
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	881b      	ldrh	r3, [r3, #0]
 8016898:	b29b      	uxth	r3, r3
 801689a:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 801689e:	4293      	cmp	r3, r2
 80168a0:	d10c      	bne.n	80168bc <vnd_diag_try_tx+0x88>
                hb->seq = ha->seq;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	685a      	ldr	r2, [r3, #4]
 80168a6:	68bb      	ldr	r3, [r7, #8]
 80168a8:	605a      	str	r2, [r3, #4]
                hb->timestamp = ha->timestamp;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	689a      	ldr	r2, [r3, #8]
 80168ae:	68bb      	ldr	r3, [r7, #8]
 80168b0:	609a      	str	r2, [r3, #8]
                hb->total_samples = ha->total_samples;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	899b      	ldrh	r3, [r3, #12]
 80168b6:	b29a      	uxth	r2, r3
 80168b8:	68bb      	ldr	r3, [r7, #8]
 80168ba:	819a      	strh	r2, [r3, #12]
            }
        }
        if(vnd_transmit_frame(diag_b_buf, diag_frame_len, 0, 0x02, "ADC1") == USBD_OK){
 80168bc:	4b2c      	ldr	r3, [pc, #176]	@ (8016970 <vnd_diag_try_tx+0x13c>)
 80168be:	8819      	ldrh	r1, [r3, #0]
 80168c0:	4b2f      	ldr	r3, [pc, #188]	@ (8016980 <vnd_diag_try_tx+0x14c>)
 80168c2:	9300      	str	r3, [sp, #0]
 80168c4:	2302      	movs	r3, #2
 80168c6:	2200      	movs	r2, #0
 80168c8:	482b      	ldr	r0, [pc, #172]	@ (8016978 <vnd_diag_try_tx+0x144>)
 80168ca:	f7ff fdf1 	bl	80164b0 <vnd_transmit_frame>
 80168ce:	4603      	mov	r3, r0
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d104      	bne.n	80168de <vnd_diag_try_tx+0xaa>
            sending_channel = 1; /* информативно */
 80168d4:	4b2b      	ldr	r3, [pc, #172]	@ (8016984 <vnd_diag_try_tx+0x150>)
 80168d6:	2201      	movs	r2, #1
 80168d8:	701a      	strb	r2, [r3, #0]
            /* печать в CDC отключена для максимальной скорости */
            return 1;
 80168da:	2301      	movs	r3, #1
 80168dc:	e042      	b.n	8016964 <vnd_diag_try_tx+0x130>
        } else { return 0; }
 80168de:	2300      	movs	r3, #0
 80168e0:	e040      	b.n	8016964 <vnd_diag_try_tx+0x130>
    }
    /* Иначе шлём A, когда EP свободен */
    /* Allow padded A-frames as well (len >= expected and multiple of 64/512) */
    if(!vnd_validate_frame(diag_a_buf, diag_frame_len, 0, 0x02)) return 0; /* allow padding */
 80168e2:	4b23      	ldr	r3, [pc, #140]	@ (8016970 <vnd_diag_try_tx+0x13c>)
 80168e4:	8819      	ldrh	r1, [r3, #0]
 80168e6:	2302      	movs	r3, #2
 80168e8:	2200      	movs	r2, #0
 80168ea:	4824      	ldr	r0, [pc, #144]	@ (801697c <vnd_diag_try_tx+0x148>)
 80168ec:	f7ff fd84 	bl	80163f8 <vnd_validate_frame>
 80168f0:	4603      	mov	r3, r0
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d101      	bne.n	80168fa <vnd_diag_try_tx+0xc6>
 80168f6:	2300      	movs	r3, #0
 80168f8:	e034      	b.n	8016964 <vnd_diag_try_tx+0x130>
    /* Безопасная синхронизация seq для A: если по какой-то причине новая пара
       ещё не была собрана, принудительно проставим актуальный stream_seq в hdr */
    if(diag_frame_len >= VND_FRAME_HDR_SIZE){
 80168fa:	4b1d      	ldr	r3, [pc, #116]	@ (8016970 <vnd_diag_try_tx+0x13c>)
 80168fc:	881b      	ldrh	r3, [r3, #0]
 80168fe:	2b1f      	cmp	r3, #31
 8016900:	d916      	bls.n	8016930 <vnd_diag_try_tx+0xfc>
        vnd_frame_hdr_t *ha = (vnd_frame_hdr_t*)diag_a_buf;
 8016902:	4b1e      	ldr	r3, [pc, #120]	@ (801697c <vnd_diag_try_tx+0x148>)
 8016904:	60fb      	str	r3, [r7, #12]
        if(ha->magic == 0xA55A){
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	881b      	ldrh	r3, [r3, #0]
 801690a:	b29b      	uxth	r3, r3
 801690c:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016910:	4293      	cmp	r3, r2
 8016912:	d10d      	bne.n	8016930 <vnd_diag_try_tx+0xfc>
            if(ha->seq != stream_seq){
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	685a      	ldr	r2, [r3, #4]
 8016918:	4b1b      	ldr	r3, [pc, #108]	@ (8016988 <vnd_diag_try_tx+0x154>)
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	429a      	cmp	r2, r3
 801691e:	d003      	beq.n	8016928 <vnd_diag_try_tx+0xf4>
                ha->seq = stream_seq;
 8016920:	4b19      	ldr	r3, [pc, #100]	@ (8016988 <vnd_diag_try_tx+0x154>)
 8016922:	681a      	ldr	r2, [r3, #0]
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	605a      	str	r2, [r3, #4]
            }
            /* Всегда фиксируем текущий seq A как seq пары для последующего B */
            diag_current_pair_seq = ha->seq;
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	685b      	ldr	r3, [r3, #4]
 801692c:	4a17      	ldr	r2, [pc, #92]	@ (801698c <vnd_diag_try_tx+0x158>)
 801692e:	6013      	str	r3, [r2, #0]
        }
    }
    if(vnd_transmit_frame(diag_a_buf, diag_frame_len, 0, 0x02, "ADC0") == USBD_OK){
 8016930:	4b0f      	ldr	r3, [pc, #60]	@ (8016970 <vnd_diag_try_tx+0x13c>)
 8016932:	8819      	ldrh	r1, [r3, #0]
 8016934:	4b16      	ldr	r3, [pc, #88]	@ (8016990 <vnd_diag_try_tx+0x15c>)
 8016936:	9300      	str	r3, [sp, #0]
 8016938:	2302      	movs	r3, #2
 801693a:	2200      	movs	r2, #0
 801693c:	480f      	ldr	r0, [pc, #60]	@ (801697c <vnd_diag_try_tx+0x148>)
 801693e:	f7ff fdb7 	bl	80164b0 <vnd_transmit_frame>
 8016942:	4603      	mov	r3, r0
 8016944:	2b00      	cmp	r3, #0
 8016946:	d10c      	bne.n	8016962 <vnd_diag_try_tx+0x12e>
        sending_channel = 0; /* ожидаем B после TxCplt A */
 8016948:	4b0e      	ldr	r3, [pc, #56]	@ (8016984 <vnd_diag_try_tx+0x150>)
 801694a:	2200      	movs	r2, #0
 801694c:	701a      	strb	r2, [r3, #0]
        /* Закрываем STAT-окно между A и B: сразу помечаем ожидание B */
        pending_B = 1; pending_B_since_ms = HAL_GetTick();
 801694e:	4b09      	ldr	r3, [pc, #36]	@ (8016974 <vnd_diag_try_tx+0x140>)
 8016950:	2201      	movs	r2, #1
 8016952:	701a      	strb	r2, [r3, #0]
 8016954:	f7ee fab6 	bl	8004ec4 <HAL_GetTick>
 8016958:	4603      	mov	r3, r0
 801695a:	4a0e      	ldr	r2, [pc, #56]	@ (8016994 <vnd_diag_try_tx+0x160>)
 801695c:	6013      	str	r3, [r2, #0]
        /* печать в CDC отключена для максимальной скорости */
        return 1;
 801695e:	2301      	movs	r3, #1
 8016960:	e000      	b.n	8016964 <vnd_diag_try_tx+0x130>
    } else { return 0; }
 8016962:	2300      	movs	r3, #0
#endif
}
 8016964:	4618      	mov	r0, r3
 8016966:	3710      	adds	r7, #16
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}
 801696c:	2400dbb4 	.word	0x2400dbb4
 8016970:	2400dcf8 	.word	0x2400dcf8
 8016974:	24019ff2 	.word	0x24019ff2
 8016978:	2400e7bc 	.word	0x2400e7bc
 801697c:	2400dcfc 	.word	0x2400dcfc
 8016980:	0801c3c4 	.word	0x0801c3c4
 8016984:	2400004c 	.word	0x2400004c
 8016988:	2400dba4 	.word	0x2400dba4
 801698c:	24000048 	.word	0x24000048
 8016990:	0801c3cc 	.word	0x0801c3cc
 8016994:	24019ff4 	.word	0x24019ff4

08016998 <vnd_try_send_B_immediate>:

/* === Немедленная отправка B после завершения A (внутри TxCplt) === */
static int vnd_try_send_B_immediate(void)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b086      	sub	sp, #24
 801699c:	af02      	add	r7, sp, #8
    if(vnd_ep_busy) return 0;
 801699e:	4b52      	ldr	r3, [pc, #328]	@ (8016ae8 <vnd_try_send_B_immediate+0x150>)
 80169a0:	781b      	ldrb	r3, [r3, #0]
 80169a2:	b2db      	uxtb	r3, r3
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d001      	beq.n	80169ac <vnd_try_send_B_immediate+0x14>
 80169a8:	2300      	movs	r3, #0
 80169aa:	e098      	b.n	8016ade <vnd_try_send_B_immediate+0x146>
    /* DIAG режим: используем заранее подготовленный diag_b_buf с текущим seq */
    if(diag_mode_active){
 80169ac:	4b4f      	ldr	r3, [pc, #316]	@ (8016aec <vnd_try_send_B_immediate+0x154>)
 80169ae:	781b      	ldrb	r3, [r3, #0]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d04e      	beq.n	8016a52 <vnd_try_send_B_immediate+0xba>
        if(!pending_B) return 0;
 80169b4:	4b4e      	ldr	r3, [pc, #312]	@ (8016af0 <vnd_try_send_B_immediate+0x158>)
 80169b6:	781b      	ldrb	r3, [r3, #0]
 80169b8:	b2db      	uxtb	r3, r3
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d101      	bne.n	80169c2 <vnd_try_send_B_immediate+0x2a>
 80169be:	2300      	movs	r3, #0
 80169c0:	e08d      	b.n	8016ade <vnd_try_send_B_immediate+0x146>
        if(diag_frame_len == 0) return 0;
 80169c2:	4b4c      	ldr	r3, [pc, #304]	@ (8016af4 <vnd_try_send_B_immediate+0x15c>)
 80169c4:	881b      	ldrh	r3, [r3, #0]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d101      	bne.n	80169ce <vnd_try_send_B_immediate+0x36>
 80169ca:	2300      	movs	r3, #0
 80169cc:	e087      	b.n	8016ade <vnd_try_send_B_immediate+0x146>
        if(diag_frame_len >= VND_FRAME_HDR_SIZE){
 80169ce:	4b49      	ldr	r3, [pc, #292]	@ (8016af4 <vnd_try_send_B_immediate+0x15c>)
 80169d0:	881b      	ldrh	r3, [r3, #0]
 80169d2:	2b1f      	cmp	r3, #31
 80169d4:	d91e      	bls.n	8016a14 <vnd_try_send_B_immediate+0x7c>
            vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)diag_b_buf;
 80169d6:	4b48      	ldr	r3, [pc, #288]	@ (8016af8 <vnd_try_send_B_immediate+0x160>)
 80169d8:	607b      	str	r3, [r7, #4]
            const vnd_frame_hdr_t *ha = (const vnd_frame_hdr_t*)diag_a_buf;
 80169da:	4b48      	ldr	r3, [pc, #288]	@ (8016afc <vnd_try_send_B_immediate+0x164>)
 80169dc:	603b      	str	r3, [r7, #0]
            /* В DIAG заголовок B копируем из A для гарантированной идентичности пары */
            if(hb->magic == 0xA55A && ha->magic == 0xA55A){
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	881b      	ldrh	r3, [r3, #0]
 80169e2:	b29b      	uxth	r3, r3
 80169e4:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80169e8:	4293      	cmp	r3, r2
 80169ea:	d113      	bne.n	8016a14 <vnd_try_send_B_immediate+0x7c>
 80169ec:	683b      	ldr	r3, [r7, #0]
 80169ee:	881b      	ldrh	r3, [r3, #0]
 80169f0:	b29b      	uxth	r3, r3
 80169f2:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80169f6:	4293      	cmp	r3, r2
 80169f8:	d10c      	bne.n	8016a14 <vnd_try_send_B_immediate+0x7c>
                hb->seq = ha->seq;
 80169fa:	683b      	ldr	r3, [r7, #0]
 80169fc:	685a      	ldr	r2, [r3, #4]
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	605a      	str	r2, [r3, #4]
                hb->timestamp = ha->timestamp;
 8016a02:	683b      	ldr	r3, [r7, #0]
 8016a04:	689a      	ldr	r2, [r3, #8]
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	609a      	str	r2, [r3, #8]
                hb->total_samples = ha->total_samples;
 8016a0a:	683b      	ldr	r3, [r7, #0]
 8016a0c:	899b      	ldrh	r3, [r3, #12]
 8016a0e:	b29a      	uxth	r2, r3
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	819a      	strh	r2, [r3, #12]
            }
        }
        if(!vnd_validate_frame(diag_b_buf, diag_frame_len, 0, 0x02)) return 0;
 8016a14:	4b37      	ldr	r3, [pc, #220]	@ (8016af4 <vnd_try_send_B_immediate+0x15c>)
 8016a16:	8819      	ldrh	r1, [r3, #0]
 8016a18:	2302      	movs	r3, #2
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	4836      	ldr	r0, [pc, #216]	@ (8016af8 <vnd_try_send_B_immediate+0x160>)
 8016a1e:	f7ff fceb 	bl	80163f8 <vnd_validate_frame>
 8016a22:	4603      	mov	r3, r0
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d101      	bne.n	8016a2c <vnd_try_send_B_immediate+0x94>
 8016a28:	2300      	movs	r3, #0
 8016a2a:	e058      	b.n	8016ade <vnd_try_send_B_immediate+0x146>
        if(vnd_transmit_frame(diag_b_buf, diag_frame_len, 0, 0x02, "ADC1-IMM") == USBD_OK){
 8016a2c:	4b31      	ldr	r3, [pc, #196]	@ (8016af4 <vnd_try_send_B_immediate+0x15c>)
 8016a2e:	8819      	ldrh	r1, [r3, #0]
 8016a30:	4b33      	ldr	r3, [pc, #204]	@ (8016b00 <vnd_try_send_B_immediate+0x168>)
 8016a32:	9300      	str	r3, [sp, #0]
 8016a34:	2302      	movs	r3, #2
 8016a36:	2200      	movs	r2, #0
 8016a38:	482f      	ldr	r0, [pc, #188]	@ (8016af8 <vnd_try_send_B_immediate+0x160>)
 8016a3a:	f7ff fd39 	bl	80164b0 <vnd_transmit_frame>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d104      	bne.n	8016a4e <vnd_try_send_B_immediate+0xb6>
            sending_channel = 1; /* B в полёте */
 8016a44:	4b2f      	ldr	r3, [pc, #188]	@ (8016b04 <vnd_try_send_B_immediate+0x16c>)
 8016a46:	2201      	movs	r2, #1
 8016a48:	701a      	strb	r2, [r3, #0]
            return 1;
 8016a4a:	2301      	movs	r3, #1
 8016a4c:	e047      	b.n	8016ade <vnd_try_send_B_immediate+0x146>
        }
        return 0;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	e045      	b.n	8016ade <vnd_try_send_B_immediate+0x146>
    }
    /* Полный режим: отправляем B из текущего pair_send_idx, если READY */
    ChanFrame *fB = &g_frames[pair_send_idx][1];
 8016a52:	4b2d      	ldr	r3, [pc, #180]	@ (8016b08 <vnd_try_send_B_immediate+0x170>)
 8016a54:	781b      	ldrb	r3, [r3, #0]
 8016a56:	461a      	mov	r2, r3
 8016a58:	f241 5398 	movw	r3, #5528	@ 0x1598
 8016a5c:	fb02 f303 	mul.w	r3, r2, r3
 8016a60:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8016a64:	4a29      	ldr	r2, [pc, #164]	@ (8016b0c <vnd_try_send_B_immediate+0x174>)
 8016a66:	4413      	add	r3, r2
 8016a68:	60fb      	str	r3, [r7, #12]
    if(fB->st != FB_READY) return 0;
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	781b      	ldrb	r3, [r3, #0]
 8016a6e:	b2db      	uxtb	r3, r3
 8016a70:	2b01      	cmp	r3, #1
 8016a72:	d001      	beq.n	8016a78 <vnd_try_send_B_immediate+0xe0>
 8016a74:	2300      	movs	r3, #0
 8016a76:	e032      	b.n	8016ade <vnd_try_send_B_immediate+0x146>
    /* Корректируем seq при необходимости (безопасно) */
    if(fB->frame_size >= VND_FRAME_HDR_SIZE){
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	88db      	ldrh	r3, [r3, #6]
 8016a7c:	2b1f      	cmp	r3, #31
 8016a7e:	d917      	bls.n	8016ab0 <vnd_try_send_B_immediate+0x118>
        vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)fB->buf;
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	330c      	adds	r3, #12
 8016a84:	60bb      	str	r3, [r7, #8]
        if(hb->magic == 0xA55A && hb->seq != stream_seq){ hb->seq = stream_seq; fB->seq = stream_seq; }
 8016a86:	68bb      	ldr	r3, [r7, #8]
 8016a88:	881b      	ldrh	r3, [r3, #0]
 8016a8a:	b29b      	uxth	r3, r3
 8016a8c:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016a90:	4293      	cmp	r3, r2
 8016a92:	d10d      	bne.n	8016ab0 <vnd_try_send_B_immediate+0x118>
 8016a94:	68bb      	ldr	r3, [r7, #8]
 8016a96:	685a      	ldr	r2, [r3, #4]
 8016a98:	4b1d      	ldr	r3, [pc, #116]	@ (8016b10 <vnd_try_send_B_immediate+0x178>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	429a      	cmp	r2, r3
 8016a9e:	d007      	beq.n	8016ab0 <vnd_try_send_B_immediate+0x118>
 8016aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8016b10 <vnd_try_send_B_immediate+0x178>)
 8016aa2:	681a      	ldr	r2, [r3, #0]
 8016aa4:	68bb      	ldr	r3, [r7, #8]
 8016aa6:	605a      	str	r2, [r3, #4]
 8016aa8:	4b19      	ldr	r3, [pc, #100]	@ (8016b10 <vnd_try_send_B_immediate+0x178>)
 8016aaa:	681a      	ldr	r2, [r3, #0]
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	609a      	str	r2, [r3, #8]
    }
    if(vnd_transmit_frame(fB->buf, fB->frame_size, 0, 0, "ADC1-IMM") == USBD_OK){
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	f103 000c 	add.w	r0, r3, #12
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	88d9      	ldrh	r1, [r3, #6]
 8016aba:	4b11      	ldr	r3, [pc, #68]	@ (8016b00 <vnd_try_send_B_immediate+0x168>)
 8016abc:	9300      	str	r3, [sp, #0]
 8016abe:	2300      	movs	r3, #0
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	f7ff fcf5 	bl	80164b0 <vnd_transmit_frame>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d107      	bne.n	8016adc <vnd_try_send_B_immediate+0x144>
        fB->st = FB_SENDING; sending_channel = 1;
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	2202      	movs	r2, #2
 8016ad0:	701a      	strb	r2, [r3, #0]
 8016ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8016b04 <vnd_try_send_B_immediate+0x16c>)
 8016ad4:	2201      	movs	r2, #1
 8016ad6:	701a      	strb	r2, [r3, #0]
        return 1;
 8016ad8:	2301      	movs	r3, #1
 8016ada:	e000      	b.n	8016ade <vnd_try_send_B_immediate+0x146>
    }
    return 0;
 8016adc:	2300      	movs	r3, #0
}
 8016ade:	4618      	mov	r0, r3
 8016ae0:	3710      	adds	r7, #16
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	bd80      	pop	{r7, pc}
 8016ae6:	bf00      	nop
 8016ae8:	2400dbb4 	.word	0x2400dbb4
 8016aec:	2400dced 	.word	0x2400dced
 8016af0:	24019ff2 	.word	0x24019ff2
 8016af4:	2400dcf8 	.word	0x2400dcf8
 8016af8:	2400e7bc 	.word	0x2400e7bc
 8016afc:	2400dcfc 	.word	0x2400dcfc
 8016b00:	0801c3d4 	.word	0x0801c3d4
 8016b04:	2400004c 	.word	0x2400004c
 8016b08:	24019ff1 	.word	0x24019ff1
 8016b0c:	2400f330 	.word	0x2400f330
 8016b10:	2400dba4 	.word	0x2400dba4

08016b14 <vnd_try_send_A_nextpair_immediate>:

/* === Немедленная отправка A следующей пары после завершения B (внутри TxCplt) === */
static int vnd_try_send_A_nextpair_immediate(void)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b084      	sub	sp, #16
 8016b18:	af02      	add	r7, sp, #8
    if(vnd_ep_busy) return 0;
 8016b1a:	4b52      	ldr	r3, [pc, #328]	@ (8016c64 <vnd_try_send_A_nextpair_immediate+0x150>)
 8016b1c:	781b      	ldrb	r3, [r3, #0]
 8016b1e:	b2db      	uxtb	r3, r3
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d001      	beq.n	8016b28 <vnd_try_send_A_nextpair_immediate+0x14>
 8016b24:	2300      	movs	r3, #0
 8016b26:	e098      	b.n	8016c5a <vnd_try_send_A_nextpair_immediate+0x146>
    /* После B мы уже сдвинули pair_send_idx/seq во внешней логике — тут пытаемся сразу выстрелить A новой пары */
    if(diag_mode_active){
 8016b28:	4b4f      	ldr	r3, [pc, #316]	@ (8016c68 <vnd_try_send_A_nextpair_immediate+0x154>)
 8016b2a:	781b      	ldrb	r3, [r3, #0]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d037      	beq.n	8016ba0 <vnd_try_send_A_nextpair_immediate+0x8c>
        /* Подготовим следующую пару под новый stream_seq и сразу пошлём A */
        vnd_diag_prepare_pair(stream_seq, cur_samples_per_frame ? cur_samples_per_frame : diag_samples);
 8016b30:	4b4e      	ldr	r3, [pc, #312]	@ (8016c6c <vnd_try_send_A_nextpair_immediate+0x158>)
 8016b32:	681a      	ldr	r2, [r3, #0]
 8016b34:	4b4e      	ldr	r3, [pc, #312]	@ (8016c70 <vnd_try_send_A_nextpair_immediate+0x15c>)
 8016b36:	881b      	ldrh	r3, [r3, #0]
 8016b38:	b29b      	uxth	r3, r3
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d003      	beq.n	8016b46 <vnd_try_send_A_nextpair_immediate+0x32>
 8016b3e:	4b4c      	ldr	r3, [pc, #304]	@ (8016c70 <vnd_try_send_A_nextpair_immediate+0x15c>)
 8016b40:	881b      	ldrh	r3, [r3, #0]
 8016b42:	b29b      	uxth	r3, r3
 8016b44:	e001      	b.n	8016b4a <vnd_try_send_A_nextpair_immediate+0x36>
 8016b46:	4b4b      	ldr	r3, [pc, #300]	@ (8016c74 <vnd_try_send_A_nextpair_immediate+0x160>)
 8016b48:	881b      	ldrh	r3, [r3, #0]
 8016b4a:	4619      	mov	r1, r3
 8016b4c:	4610      	mov	r0, r2
 8016b4e:	f7ff fdb3 	bl	80166b8 <vnd_diag_prepare_pair>
        if(!vnd_validate_frame(diag_a_buf, diag_frame_len, 0, 0x02)) return 0;
 8016b52:	4b49      	ldr	r3, [pc, #292]	@ (8016c78 <vnd_try_send_A_nextpair_immediate+0x164>)
 8016b54:	8819      	ldrh	r1, [r3, #0]
 8016b56:	2302      	movs	r3, #2
 8016b58:	2200      	movs	r2, #0
 8016b5a:	4848      	ldr	r0, [pc, #288]	@ (8016c7c <vnd_try_send_A_nextpair_immediate+0x168>)
 8016b5c:	f7ff fc4c 	bl	80163f8 <vnd_validate_frame>
 8016b60:	4603      	mov	r3, r0
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d101      	bne.n	8016b6a <vnd_try_send_A_nextpair_immediate+0x56>
 8016b66:	2300      	movs	r3, #0
 8016b68:	e077      	b.n	8016c5a <vnd_try_send_A_nextpair_immediate+0x146>
        if(vnd_transmit_frame(diag_a_buf, diag_frame_len, 0, 0x02, "ADC0-IMM") == USBD_OK){
 8016b6a:	4b43      	ldr	r3, [pc, #268]	@ (8016c78 <vnd_try_send_A_nextpair_immediate+0x164>)
 8016b6c:	8819      	ldrh	r1, [r3, #0]
 8016b6e:	4b44      	ldr	r3, [pc, #272]	@ (8016c80 <vnd_try_send_A_nextpair_immediate+0x16c>)
 8016b70:	9300      	str	r3, [sp, #0]
 8016b72:	2302      	movs	r3, #2
 8016b74:	2200      	movs	r2, #0
 8016b76:	4841      	ldr	r0, [pc, #260]	@ (8016c7c <vnd_try_send_A_nextpair_immediate+0x168>)
 8016b78:	f7ff fc9a 	bl	80164b0 <vnd_transmit_frame>
 8016b7c:	4603      	mov	r3, r0
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d10c      	bne.n	8016b9c <vnd_try_send_A_nextpair_immediate+0x88>
            sending_channel = 0; pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8016b82:	4b40      	ldr	r3, [pc, #256]	@ (8016c84 <vnd_try_send_A_nextpair_immediate+0x170>)
 8016b84:	2200      	movs	r2, #0
 8016b86:	701a      	strb	r2, [r3, #0]
 8016b88:	4b3f      	ldr	r3, [pc, #252]	@ (8016c88 <vnd_try_send_A_nextpair_immediate+0x174>)
 8016b8a:	2201      	movs	r2, #1
 8016b8c:	701a      	strb	r2, [r3, #0]
 8016b8e:	f7ee f999 	bl	8004ec4 <HAL_GetTick>
 8016b92:	4603      	mov	r3, r0
 8016b94:	4a3d      	ldr	r2, [pc, #244]	@ (8016c8c <vnd_try_send_A_nextpair_immediate+0x178>)
 8016b96:	6013      	str	r3, [r2, #0]
            return 1;
 8016b98:	2301      	movs	r3, #1
 8016b9a:	e05e      	b.n	8016c5a <vnd_try_send_A_nextpair_immediate+0x146>
        }
        return 0;
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	e05c      	b.n	8016c5a <vnd_try_send_A_nextpair_immediate+0x146>
    }
    /* Полный режим: убедимся, что в буфере подготовки есть готовый A; если нет — попробуем собрать */
    ChanFrame *fA = &g_frames[pair_send_idx][0];
 8016ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8016c90 <vnd_try_send_A_nextpair_immediate+0x17c>)
 8016ba2:	781b      	ldrb	r3, [r3, #0]
 8016ba4:	461a      	mov	r2, r3
 8016ba6:	f241 5398 	movw	r3, #5528	@ 0x1598
 8016baa:	fb02 f303 	mul.w	r3, r2, r3
 8016bae:	4a39      	ldr	r2, [pc, #228]	@ (8016c94 <vnd_try_send_A_nextpair_immediate+0x180>)
 8016bb0:	4413      	add	r3, r2
 8016bb2:	607b      	str	r3, [r7, #4]
    if(fA->st != FB_READY){
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	781b      	ldrb	r3, [r3, #0]
 8016bb8:	b2db      	uxtb	r3, r3
 8016bba:	2b01      	cmp	r3, #1
 8016bbc:	d012      	beq.n	8016be4 <vnd_try_send_A_nextpair_immediate+0xd0>
        vnd_prepare_pair();
 8016bbe:	f7ff fa57 	bl	8016070 <vnd_prepare_pair>
        fA = &g_frames[pair_send_idx][0];
 8016bc2:	4b33      	ldr	r3, [pc, #204]	@ (8016c90 <vnd_try_send_A_nextpair_immediate+0x17c>)
 8016bc4:	781b      	ldrb	r3, [r3, #0]
 8016bc6:	461a      	mov	r2, r3
 8016bc8:	f241 5398 	movw	r3, #5528	@ 0x1598
 8016bcc:	fb02 f303 	mul.w	r3, r2, r3
 8016bd0:	4a30      	ldr	r2, [pc, #192]	@ (8016c94 <vnd_try_send_A_nextpair_immediate+0x180>)
 8016bd2:	4413      	add	r3, r2
 8016bd4:	607b      	str	r3, [r7, #4]
        if(fA->st != FB_READY) return 0;
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	b2db      	uxtb	r3, r3
 8016bdc:	2b01      	cmp	r3, #1
 8016bde:	d001      	beq.n	8016be4 <vnd_try_send_A_nextpair_immediate+0xd0>
 8016be0:	2300      	movs	r3, #0
 8016be2:	e03a      	b.n	8016c5a <vnd_try_send_A_nextpair_immediate+0x146>
    }
    /* Принудительно синхронизируем seq A с текущим stream_seq для консистентности пары */
    if(fA->frame_size >= VND_FRAME_HDR_SIZE){
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	88db      	ldrh	r3, [r3, #6]
 8016be8:	2b1f      	cmp	r3, #31
 8016bea:	d917      	bls.n	8016c1c <vnd_try_send_A_nextpair_immediate+0x108>
        vnd_frame_hdr_t *ha = (vnd_frame_hdr_t*)fA->buf;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	330c      	adds	r3, #12
 8016bf0:	603b      	str	r3, [r7, #0]
        if(ha->magic == 0xA55A && ha->seq != stream_seq){ ha->seq = stream_seq; fA->seq = stream_seq; }
 8016bf2:	683b      	ldr	r3, [r7, #0]
 8016bf4:	881b      	ldrh	r3, [r3, #0]
 8016bf6:	b29b      	uxth	r3, r3
 8016bf8:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8016bfc:	4293      	cmp	r3, r2
 8016bfe:	d10d      	bne.n	8016c1c <vnd_try_send_A_nextpair_immediate+0x108>
 8016c00:	683b      	ldr	r3, [r7, #0]
 8016c02:	685a      	ldr	r2, [r3, #4]
 8016c04:	4b19      	ldr	r3, [pc, #100]	@ (8016c6c <vnd_try_send_A_nextpair_immediate+0x158>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	429a      	cmp	r2, r3
 8016c0a:	d007      	beq.n	8016c1c <vnd_try_send_A_nextpair_immediate+0x108>
 8016c0c:	4b17      	ldr	r3, [pc, #92]	@ (8016c6c <vnd_try_send_A_nextpair_immediate+0x158>)
 8016c0e:	681a      	ldr	r2, [r3, #0]
 8016c10:	683b      	ldr	r3, [r7, #0]
 8016c12:	605a      	str	r2, [r3, #4]
 8016c14:	4b15      	ldr	r3, [pc, #84]	@ (8016c6c <vnd_try_send_A_nextpair_immediate+0x158>)
 8016c16:	681a      	ldr	r2, [r3, #0]
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	609a      	str	r2, [r3, #8]
    }
    if(vnd_transmit_frame(fA->buf, fA->frame_size, 0, 0, "ADC0-IMM") == USBD_OK){
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	f103 000c 	add.w	r0, r3, #12
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	88d9      	ldrh	r1, [r3, #6]
 8016c26:	4b16      	ldr	r3, [pc, #88]	@ (8016c80 <vnd_try_send_A_nextpair_immediate+0x16c>)
 8016c28:	9300      	str	r3, [sp, #0]
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	f7ff fc3f 	bl	80164b0 <vnd_transmit_frame>
 8016c32:	4603      	mov	r3, r0
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d10f      	bne.n	8016c58 <vnd_try_send_A_nextpair_immediate+0x144>
        fA->st = FB_SENDING; sending_channel = 0; pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	2202      	movs	r2, #2
 8016c3c:	701a      	strb	r2, [r3, #0]
 8016c3e:	4b11      	ldr	r3, [pc, #68]	@ (8016c84 <vnd_try_send_A_nextpair_immediate+0x170>)
 8016c40:	2200      	movs	r2, #0
 8016c42:	701a      	strb	r2, [r3, #0]
 8016c44:	4b10      	ldr	r3, [pc, #64]	@ (8016c88 <vnd_try_send_A_nextpair_immediate+0x174>)
 8016c46:	2201      	movs	r2, #1
 8016c48:	701a      	strb	r2, [r3, #0]
 8016c4a:	f7ee f93b 	bl	8004ec4 <HAL_GetTick>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	4a0e      	ldr	r2, [pc, #56]	@ (8016c8c <vnd_try_send_A_nextpair_immediate+0x178>)
 8016c52:	6013      	str	r3, [r2, #0]
        return 1;
 8016c54:	2301      	movs	r3, #1
 8016c56:	e000      	b.n	8016c5a <vnd_try_send_A_nextpair_immediate+0x146>
    }
    return 0;
 8016c58:	2300      	movs	r3, #0
}
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	3708      	adds	r7, #8
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}
 8016c62:	bf00      	nop
 8016c64:	2400dbb4 	.word	0x2400dbb4
 8016c68:	2400dced 	.word	0x2400dced
 8016c6c:	2400dba4 	.word	0x2400dba4
 8016c70:	2400dba8 	.word	0x2400dba8
 8016c74:	24000042 	.word	0x24000042
 8016c78:	2400dcf8 	.word	0x2400dcf8
 8016c7c:	2400dcfc 	.word	0x2400dcfc
 8016c80:	0801c3e0 	.word	0x0801c3e0
 8016c84:	2400004c 	.word	0x2400004c
 8016c88:	24019ff2 	.word	0x24019ff2
 8016c8c:	24019ff4 	.word	0x24019ff4
 8016c90:	24019ff1 	.word	0x24019ff1
 8016c94:	2400f330 	.word	0x2400f330

08016c98 <vnd_log_hdr_layout>:

/* Лог структуры заголовка кадра для отладки */
static void vnd_log_hdr_layout(void){
 8016c98:	b480      	push	{r7}
 8016c9a:	af00      	add	r7, sp, #0
#if VND_ENABLE_LOG
    VND_LOG("HDR sz=%u off.magic=%u off.seq=%u off.timestamp=%u off.total=%u", (unsigned)sizeof(vnd_frame_hdr_t),
            (unsigned)offsetof(vnd_frame_hdr_t,magic), (unsigned)offsetof(vnd_frame_hdr_t,seq),
            (unsigned)offsetof(vnd_frame_hdr_t,timestamp), (unsigned)offsetof(vnd_frame_hdr_t,total_samples));
#endif
}
 8016c9c:	bf00      	nop
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca4:	4770      	bx	lr

08016ca6 <vnd_try_send_test_from_task>:
    } else { vnd_tx_ready = 1; vnd_ep_busy = 0; VND_LOG("EMERG_TEST_BUSY"); }
}

/* Отправка единственного тестового кадра (строго из таска) */
static void vnd_try_send_test_from_task(void)
{
 8016ca6:	b480      	push	{r7}
 8016ca8:	b08d      	sub	sp, #52	@ 0x34
 8016caa:	af00      	add	r7, sp, #0
           чтобы не попасть на BUSY/ZLP гонки. Далее обычная логика отправит A/B. */
    } else {
        VND_LOG("TEST_TX busy/fail");
        vnd_tx_ready = 1; vnd_ep_busy = 0;
    }
}
 8016cac:	3734      	adds	r7, #52	@ 0x34
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb4:	4770      	bx	lr
	...

08016cb8 <Vendor_Stream_Task>:
    }
}

/* Основной периодический таск */
void __attribute__((unused)) Vendor_Stream_Task(void)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b0a0      	sub	sp, #128	@ 0x80
 8016cbc:	af02      	add	r7, sp, #8
    dbg_task_calls++;
 8016cbe:	4b95      	ldr	r3, [pc, #596]	@ (8016f14 <Vendor_Stream_Task+0x25c>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	3301      	adds	r3, #1
 8016cc4:	4a93      	ldr	r2, [pc, #588]	@ (8016f14 <Vendor_Stream_Task+0x25c>)
 8016cc6:	6013      	str	r3, [r2, #0]
    /* Сервис EP0: выполняем отложенные SOFT/DEEP RESET без блокировки SETUP */
    USBD_VND_ProcessControlRequests();
 8016cc8:	f001 ff9c 	bl	8018c04 <USBD_VND_ProcessControlRequests>
    /* ПРИОРИТЕТ 0: если не сконфигурировано стримингом — обслуживаем оффлайн-STAT */
    if(!streaming)
 8016ccc:	4b92      	ldr	r3, [pc, #584]	@ (8016f18 <Vendor_Stream_Task+0x260>)
 8016cce:	781b      	ldrb	r3, [r3, #0]
 8016cd0:	b2db      	uxtb	r3, r3
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d110      	bne.n	8016cf8 <Vendor_Stream_Task+0x40>
    {
    if(!vnd_ep_busy && !vnd_inflight){ vnd_try_send_pending_status_from_task(); }
 8016cd6:	4b91      	ldr	r3, [pc, #580]	@ (8016f1c <Vendor_Stream_Task+0x264>)
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	b2db      	uxtb	r3, r3
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d106      	bne.n	8016cee <Vendor_Stream_Task+0x36>
 8016ce0:	4b8f      	ldr	r3, [pc, #572]	@ (8016f20 <Vendor_Stream_Task+0x268>)
 8016ce2:	781b      	ldrb	r3, [r3, #0]
 8016ce4:	b2db      	uxtb	r3, r3
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d101      	bne.n	8016cee <Vendor_Stream_Task+0x36>
 8016cea:	f7fe fe91 	bl	8015a10 <vnd_try_send_pending_status_from_task>
        vnd_tick_flag = 0;
 8016cee:	4b8d      	ldr	r3, [pc, #564]	@ (8016f24 <Vendor_Stream_Task+0x26c>)
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	701a      	strb	r2, [r3, #0]
        return;
 8016cf4:	f000 bd48 	b.w	8017788 <Vendor_Stream_Task+0xad0>
    }
    /* подавляем частый шум лога при каждом заходе в таск */
    if(!dbg_printed_sizes)
 8016cf8:	4b8b      	ldr	r3, [pc, #556]	@ (8016f28 <Vendor_Stream_Task+0x270>)
 8016cfa:	781b      	ldrb	r3, [r3, #0]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d104      	bne.n	8016d0a <Vendor_Stream_Task+0x52>
    {
        vnd_log_hdr_layout();
 8016d00:	f7ff ffca 	bl	8016c98 <vnd_log_hdr_layout>
        dbg_printed_sizes = 1;
 8016d04:	4b88      	ldr	r3, [pc, #544]	@ (8016f28 <Vendor_Stream_Task+0x270>)
 8016d06:	2201      	movs	r2, #1
 8016d08:	701a      	strb	r2, [r3, #0]
    }
    /* СУПЕР-ПРИОРИТЕТ: если пришёл STOP — разрешаем только ACK-STAT, полностью блокируем стрим */
    if (stop_request) {
 8016d0a:	4b88      	ldr	r3, [pc, #544]	@ (8016f2c <Vendor_Stream_Task+0x274>)
 8016d0c:	781b      	ldrb	r3, [r3, #0]
 8016d0e:	b2db      	uxtb	r3, r3
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d02c      	beq.n	8016d6e <Vendor_Stream_Task+0xb6>
        if (!vnd_ep_busy) {
 8016d14:	4b81      	ldr	r3, [pc, #516]	@ (8016f1c <Vendor_Stream_Task+0x264>)
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	b2db      	uxtb	r3, r3
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d109      	bne.n	8016d32 <Vendor_Stream_Task+0x7a>
            if (!pending_status) pending_status = 1; /* гарантируем наличие отложенного STAT */
 8016d1e:	4b84      	ldr	r3, [pc, #528]	@ (8016f30 <Vendor_Stream_Task+0x278>)
 8016d20:	781b      	ldrb	r3, [r3, #0]
 8016d22:	b2db      	uxtb	r3, r3
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d102      	bne.n	8016d2e <Vendor_Stream_Task+0x76>
 8016d28:	4b81      	ldr	r3, [pc, #516]	@ (8016f30 <Vendor_Stream_Task+0x278>)
 8016d2a:	2201      	movs	r2, #1
 8016d2c:	701a      	strb	r2, [r3, #0]
            vnd_try_send_pending_status_from_task();
 8016d2e:	f7fe fe6f 	bl	8015a10 <vnd_try_send_pending_status_from_task>
        }
        if (vnd_tick_flag) vnd_tick_flag = 0;
 8016d32:	4b7c      	ldr	r3, [pc, #496]	@ (8016f24 <Vendor_Stream_Task+0x26c>)
 8016d34:	781b      	ldrb	r3, [r3, #0]
 8016d36:	b2db      	uxtb	r3, r3
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d002      	beq.n	8016d42 <Vendor_Stream_Task+0x8a>
 8016d3c:	4b79      	ldr	r3, [pc, #484]	@ (8016f24 <Vendor_Stream_Task+0x26c>)
 8016d3e:	2200      	movs	r2, #0
 8016d40:	701a      	strb	r2, [r3, #0]
        /* Логируем попытки передачи после STOP */
        if (pending_B || test_sent) {
 8016d42:	4b7c      	ldr	r3, [pc, #496]	@ (8016f34 <Vendor_Stream_Task+0x27c>)
 8016d44:	781b      	ldrb	r3, [r3, #0]
 8016d46:	b2db      	uxtb	r3, r3
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d105      	bne.n	8016d58 <Vendor_Stream_Task+0xa0>
 8016d4c:	4b7a      	ldr	r3, [pc, #488]	@ (8016f38 <Vendor_Stream_Task+0x280>)
 8016d4e:	781b      	ldrb	r3, [r3, #0]
 8016d50:	b2db      	uxtb	r3, r3
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	f000 8511 	beq.w	801777a <Vendor_Stream_Task+0xac2>
            VND_LOG("BLOCK: попытка передачи после STOP (pending_B=%d, test_sent=%d)", pending_B, test_sent);
            pending_B = 0; test_sent = 0; sending_channel = 0xFF;
 8016d58:	4b76      	ldr	r3, [pc, #472]	@ (8016f34 <Vendor_Stream_Task+0x27c>)
 8016d5a:	2200      	movs	r2, #0
 8016d5c:	701a      	strb	r2, [r3, #0]
 8016d5e:	4b76      	ldr	r3, [pc, #472]	@ (8016f38 <Vendor_Stream_Task+0x280>)
 8016d60:	2200      	movs	r2, #0
 8016d62:	701a      	strb	r2, [r3, #0]
 8016d64:	4b75      	ldr	r3, [pc, #468]	@ (8016f3c <Vendor_Stream_Task+0x284>)
 8016d66:	22ff      	movs	r2, #255	@ 0xff
 8016d68:	701a      	strb	r2, [r3, #0]
        }
        return; /* ждём TxCplt ACK-STOP */
 8016d6a:	f000 bd06 	b.w	801777a <Vendor_Stream_Task+0xac2>
    }

    /* Универсальная антиклин‑разблокировка EP: если IN висит >200 мс — принудительно снимаем busy */
    do {
        uint32_t now_ms = HAL_GetTick();
 8016d6e:	f7ee f8a9 	bl	8004ec4 <HAL_GetTick>
 8016d72:	66b8      	str	r0, [r7, #104]	@ 0x68
        extern uint8_t USBD_VND_TxIsBusy(void);
        uint8_t vbusy = USBD_VND_TxIsBusy();
 8016d74:	f001 ffce 	bl	8018d14 <USBD_VND_TxIsBusy>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        if ( (vnd_ep_busy || vbusy) && vnd_last_tx_start_ms != 0 && (now_ms - vnd_last_tx_start_ms) > 200) {
 8016d7e:	4b67      	ldr	r3, [pc, #412]	@ (8016f1c <Vendor_Stream_Task+0x264>)
 8016d80:	781b      	ldrb	r3, [r3, #0]
 8016d82:	b2db      	uxtb	r3, r3
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d103      	bne.n	8016d90 <Vendor_Stream_Task+0xd8>
 8016d88:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d011      	beq.n	8016db4 <Vendor_Stream_Task+0xfc>
 8016d90:	4b6b      	ldr	r3, [pc, #428]	@ (8016f40 <Vendor_Stream_Task+0x288>)
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d00d      	beq.n	8016db4 <Vendor_Stream_Task+0xfc>
 8016d98:	4b69      	ldr	r3, [pc, #420]	@ (8016f40 <Vendor_Stream_Task+0x288>)
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016d9e:	1ad3      	subs	r3, r2, r3
 8016da0:	2bc8      	cmp	r3, #200	@ 0xc8
 8016da2:	d907      	bls.n	8016db4 <Vendor_Stream_Task+0xfc>
            extern void USBD_VND_ForceTxIdle(void);
            USBD_VND_ForceTxIdle();
 8016da4:	f001 ffda 	bl	8018d5c <USBD_VND_ForceTxIdle>
            vnd_ep_busy = 0; vnd_tx_ready = 1;
 8016da8:	4b5c      	ldr	r3, [pc, #368]	@ (8016f1c <Vendor_Stream_Task+0x264>)
 8016daa:	2200      	movs	r2, #0
 8016dac:	701a      	strb	r2, [r3, #0]
 8016dae:	4b65      	ldr	r3, [pc, #404]	@ (8016f44 <Vendor_Stream_Task+0x28c>)
 8016db0:	2201      	movs	r2, #1
 8016db2:	701a      	strb	r2, [r3, #0]
        }
    } while(0);

    /* ACK-STAT на START: отключено, чтобы не занимать Vendor IN перед первой парой.
       Хост может опрашивать состояние через GET_STATUS (EP0). */
    if(status_ack_pending){ start_ack_done = 1; status_ack_pending = 0; }
 8016db4:	4b64      	ldr	r3, [pc, #400]	@ (8016f48 <Vendor_Stream_Task+0x290>)
 8016db6:	781b      	ldrb	r3, [r3, #0]
 8016db8:	b2db      	uxtb	r3, r3
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d005      	beq.n	8016dca <Vendor_Stream_Task+0x112>
 8016dbe:	4b63      	ldr	r3, [pc, #396]	@ (8016f4c <Vendor_Stream_Task+0x294>)
 8016dc0:	2201      	movs	r2, #1
 8016dc2:	701a      	strb	r2, [r3, #0]
 8016dc4:	4b60      	ldr	r3, [pc, #384]	@ (8016f48 <Vendor_Stream_Task+0x290>)
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	701a      	strb	r2, [r3, #0]

    uint32_t now = HAL_GetTick();
 8016dca:	f7ee f87b 	bl	8004ec4 <HAL_GetTick>
 8016dce:	6638      	str	r0, [r7, #96]	@ 0x60
    /* Fallback: если ACK так и не ушёл в полёт (status_ack_pending держится),
       не ждём бесконечно — считаем ACK выполненным и продолжаем к TEST. */
    if(!test_sent && !start_ack_done && status_ack_pending){
 8016dd0:	4b59      	ldr	r3, [pc, #356]	@ (8016f38 <Vendor_Stream_Task+0x280>)
 8016dd2:	781b      	ldrb	r3, [r3, #0]
 8016dd4:	b2db      	uxtb	r3, r3
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d124      	bne.n	8016e24 <Vendor_Stream_Task+0x16c>
 8016dda:	4b5c      	ldr	r3, [pc, #368]	@ (8016f4c <Vendor_Stream_Task+0x294>)
 8016ddc:	781b      	ldrb	r3, [r3, #0]
 8016dde:	b2db      	uxtb	r3, r3
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d11f      	bne.n	8016e24 <Vendor_Stream_Task+0x16c>
 8016de4:	4b58      	ldr	r3, [pc, #352]	@ (8016f48 <Vendor_Stream_Task+0x290>)
 8016de6:	781b      	ldrb	r3, [r3, #0]
 8016de8:	b2db      	uxtb	r3, r3
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d01a      	beq.n	8016e24 <Vendor_Stream_Task+0x16c>
        if(now - start_cmd_ms > 200){
 8016dee:	4b58      	ldr	r3, [pc, #352]	@ (8016f50 <Vendor_Stream_Task+0x298>)
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8016df4:	1ad3      	subs	r3, r2, r3
 8016df6:	2bc8      	cmp	r3, #200	@ 0xc8
 8016df8:	d914      	bls.n	8016e24 <Vendor_Stream_Task+0x16c>
            start_ack_done = 1; status_ack_pending = 0;
 8016dfa:	4b54      	ldr	r3, [pc, #336]	@ (8016f4c <Vendor_Stream_Task+0x294>)
 8016dfc:	2201      	movs	r2, #1
 8016dfe:	701a      	strb	r2, [r3, #0]
 8016e00:	4b51      	ldr	r3, [pc, #324]	@ (8016f48 <Vendor_Stream_Task+0x290>)
 8016e02:	2200      	movs	r2, #0
 8016e04:	701a      	strb	r2, [r3, #0]
            vnd_ep_busy = 0; vnd_tx_ready = 1;
 8016e06:	4b45      	ldr	r3, [pc, #276]	@ (8016f1c <Vendor_Stream_Task+0x264>)
 8016e08:	2200      	movs	r2, #0
 8016e0a:	701a      	strb	r2, [r3, #0]
 8016e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8016f44 <Vendor_Stream_Task+0x28c>)
 8016e0e:	2201      	movs	r2, #1
 8016e10:	701a      	strb	r2, [r3, #0]
            extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 8016e12:	f001 ffa3 	bl	8018d5c <USBD_VND_ForceTxIdle>
            VND_LOG("ACK_FALLBACK(no inflight) -> allow TEST");
            if(!vnd_ep_busy){ vnd_try_send_test_from_task(); }
 8016e16:	4b41      	ldr	r3, [pc, #260]	@ (8016f1c <Vendor_Stream_Task+0x264>)
 8016e18:	781b      	ldrb	r3, [r3, #0]
 8016e1a:	b2db      	uxtb	r3, r3
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d101      	bne.n	8016e24 <Vendor_Stream_Task+0x16c>
 8016e20:	f7ff ff41 	bl	8016ca6 <vnd_try_send_test_from_task>
        }
    }

    if(!test_sent && start_stat_inflight) {
 8016e24:	4b44      	ldr	r3, [pc, #272]	@ (8016f38 <Vendor_Stream_Task+0x280>)
 8016e26:	781b      	ldrb	r3, [r3, #0]
 8016e28:	b2db      	uxtb	r3, r3
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d126      	bne.n	8016e7c <Vendor_Stream_Task+0x1c4>
 8016e2e:	4b49      	ldr	r3, [pc, #292]	@ (8016f54 <Vendor_Stream_Task+0x29c>)
 8016e30:	781b      	ldrb	r3, [r3, #0]
 8016e32:	b2db      	uxtb	r3, r3
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d021      	beq.n	8016e7c <Vendor_Stream_Task+0x1c4>
        if(now - vnd_last_tx_start_ms > 80) {
 8016e38:	4b41      	ldr	r3, [pc, #260]	@ (8016f40 <Vendor_Stream_Task+0x288>)
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8016e3e:	1ad3      	subs	r3, r2, r3
 8016e40:	2b50      	cmp	r3, #80	@ 0x50
 8016e42:	d91b      	bls.n	8016e7c <Vendor_Stream_Task+0x1c4>
            /* На некоторых хостах ACK-STAT может не завершиться DataIn/ZLP. Разблокируем вручную. */
            start_stat_inflight = 0; start_ack_done = 1; vnd_ep_busy = 0; vnd_tx_ready = 1;
 8016e44:	4b43      	ldr	r3, [pc, #268]	@ (8016f54 <Vendor_Stream_Task+0x29c>)
 8016e46:	2200      	movs	r2, #0
 8016e48:	701a      	strb	r2, [r3, #0]
 8016e4a:	4b40      	ldr	r3, [pc, #256]	@ (8016f4c <Vendor_Stream_Task+0x294>)
 8016e4c:	2201      	movs	r2, #1
 8016e4e:	701a      	strb	r2, [r3, #0]
 8016e50:	4b32      	ldr	r3, [pc, #200]	@ (8016f1c <Vendor_Stream_Task+0x264>)
 8016e52:	2200      	movs	r2, #0
 8016e54:	701a      	strb	r2, [r3, #0]
 8016e56:	4b3b      	ldr	r3, [pc, #236]	@ (8016f44 <Vendor_Stream_Task+0x28c>)
 8016e58:	2201      	movs	r2, #1
 8016e5a:	701a      	strb	r2, [r3, #0]
            extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 8016e5c:	f001 ff7e 	bl	8018d5c <USBD_VND_ForceTxIdle>
            VND_LOG("ACK_TIMEOUT -> unlock test");
            /* Сразу отдадим ещё один STAT (если был queued) и попробуем отправить TEST */
            if(pending_status && !vnd_ep_busy){
 8016e60:	4b33      	ldr	r3, [pc, #204]	@ (8016f30 <Vendor_Stream_Task+0x278>)
 8016e62:	781b      	ldrb	r3, [r3, #0]
 8016e64:	b2db      	uxtb	r3, r3
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d006      	beq.n	8016e78 <Vendor_Stream_Task+0x1c0>
 8016e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8016f1c <Vendor_Stream_Task+0x264>)
 8016e6c:	781b      	ldrb	r3, [r3, #0]
 8016e6e:	b2db      	uxtb	r3, r3
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d101      	bne.n	8016e78 <Vendor_Stream_Task+0x1c0>
                vnd_try_send_pending_status_from_task();
 8016e74:	f7fe fdcc 	bl	8015a10 <vnd_try_send_pending_status_from_task>
            }
            if(!vnd_ep_busy){
 8016e78:	4b28      	ldr	r3, [pc, #160]	@ (8016f1c <Vendor_Stream_Task+0x264>)
 8016e7a:	781b      	ldrb	r3, [r3, #0]
#endif
            }
        }
    }
    /* Аварийный обход: если тест не ушёл за разумное время после START — считаем его выполненным и продолжаем */
    if(!test_sent && (now - start_cmd_ms) > 160) {
 8016e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8016f38 <Vendor_Stream_Task+0x280>)
 8016e7e:	781b      	ldrb	r3, [r3, #0]
 8016e80:	b2db      	uxtb	r3, r3
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d10e      	bne.n	8016ea4 <Vendor_Stream_Task+0x1ec>
 8016e86:	4b32      	ldr	r3, [pc, #200]	@ (8016f50 <Vendor_Stream_Task+0x298>)
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8016e8c:	1ad3      	subs	r3, r2, r3
 8016e8e:	2ba0      	cmp	r3, #160	@ 0xa0
 8016e90:	d908      	bls.n	8016ea4 <Vendor_Stream_Task+0x1ec>
        test_in_flight = 0;
 8016e92:	4b31      	ldr	r3, [pc, #196]	@ (8016f58 <Vendor_Stream_Task+0x2a0>)
 8016e94:	2200      	movs	r2, #0
 8016e96:	701a      	strb	r2, [r3, #0]
        test_sent = 1;
 8016e98:	4b27      	ldr	r3, [pc, #156]	@ (8016f38 <Vendor_Stream_Task+0x280>)
 8016e9a:	2201      	movs	r2, #1
 8016e9c:	701a      	strb	r2, [r3, #0]
        start_ack_done = 1;
 8016e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8016f4c <Vendor_Stream_Task+0x294>)
 8016ea0:	2201      	movs	r2, #1
 8016ea2:	701a      	strb	r2, [r3, #0]
        VND_LOG("TEST_FALLTHRU after %lums -> proceed to A/B", (unsigned long)(now - start_cmd_ms));
    }
    /* ВАЖНО: сначала попробуем подготовить пару A/B, чтобы не зациклиться на ранних STAT.
       Подготовка пары не зависит от занятости EP, поэтому убираем лишний гейтинг по vnd_ep_busy. */
    {
        ChanFrame *fA0 = &g_frames[pair_send_idx][0];
 8016ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8016f5c <Vendor_Stream_Task+0x2a4>)
 8016ea6:	781b      	ldrb	r3, [r3, #0]
 8016ea8:	461a      	mov	r2, r3
 8016eaa:	f241 5398 	movw	r3, #5528	@ 0x1598
 8016eae:	fb02 f303 	mul.w	r3, r2, r3
 8016eb2:	4a2b      	ldr	r2, [pc, #172]	@ (8016f60 <Vendor_Stream_Task+0x2a8>)
 8016eb4:	4413      	add	r3, r2
 8016eb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if(fA0->st != FB_READY){ vnd_prepare_pair(); }
 8016eb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016eba:	781b      	ldrb	r3, [r3, #0]
 8016ebc:	b2db      	uxtb	r3, r3
 8016ebe:	2b01      	cmp	r3, #1
 8016ec0:	d001      	beq.n	8016ec6 <Vendor_Stream_Task+0x20e>
 8016ec2:	f7ff f8d5 	bl	8016070 <vnd_prepare_pair>
    }
    /* Раннее окно для GET_STATUS до первой пары — отключено: STAT по IN только между парами. */
    /* Дополнительный ранний запуск TEST: если после START прошло >50 мс и EP свободен */
    if(!test_sent && !test_in_flight) {
 8016ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8016f38 <Vendor_Stream_Task+0x280>)
 8016ec8:	781b      	ldrb	r3, [r3, #0]
 8016eca:	b2db      	uxtb	r3, r3
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d149      	bne.n	8016f64 <Vendor_Stream_Task+0x2ac>
 8016ed0:	4b21      	ldr	r3, [pc, #132]	@ (8016f58 <Vendor_Stream_Task+0x2a0>)
 8016ed2:	781b      	ldrb	r3, [r3, #0]
 8016ed4:	b2db      	uxtb	r3, r3
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d144      	bne.n	8016f64 <Vendor_Stream_Task+0x2ac>
        if(!vnd_ep_busy){
 8016eda:	4b10      	ldr	r3, [pc, #64]	@ (8016f1c <Vendor_Stream_Task+0x264>)
 8016edc:	781b      	ldrb	r3, [r3, #0]
 8016ede:	b2db      	uxtb	r3, r3
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d13f      	bne.n	8016f64 <Vendor_Stream_Task+0x2ac>
            if (now - start_cmd_ms > 50) {
 8016ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8016f50 <Vendor_Stream_Task+0x298>)
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8016eea:	1ad3      	subs	r3, r2, r3
 8016eec:	2b32      	cmp	r3, #50	@ 0x32
 8016eee:	d939      	bls.n	8016f64 <Vendor_Stream_Task+0x2ac>
                vnd_try_send_test_from_task();
 8016ef0:	f7ff fed9 	bl	8016ca6 <vnd_try_send_test_from_task>
                if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 8016ef4:	4b09      	ldr	r3, [pc, #36]	@ (8016f1c <Vendor_Stream_Task+0x264>)
 8016ef6:	781b      	ldrb	r3, [r3, #0]
 8016ef8:	b2db      	uxtb	r3, r3
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d032      	beq.n	8016f64 <Vendor_Stream_Task+0x2ac>
 8016efe:	4b09      	ldr	r3, [pc, #36]	@ (8016f24 <Vendor_Stream_Task+0x26c>)
 8016f00:	781b      	ldrb	r3, [r3, #0]
 8016f02:	b2db      	uxtb	r3, r3
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	f000 843a 	beq.w	801777e <Vendor_Stream_Task+0xac6>
 8016f0a:	4b06      	ldr	r3, [pc, #24]	@ (8016f24 <Vendor_Stream_Task+0x26c>)
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	701a      	strb	r2, [r3, #0]
 8016f10:	f000 bc35 	b.w	801777e <Vendor_Stream_Task+0xac6>
 8016f14:	2400dc64 	.word	0x2400dc64
 8016f18:	2400dba0 	.word	0x2400dba0
 8016f1c:	2400dbb4 	.word	0x2400dbb4
 8016f20:	2400dbb5 	.word	0x2400dbb5
 8016f24:	2401a06c 	.word	0x2401a06c
 8016f28:	2400dc14 	.word	0x2400dc14
 8016f2c:	2400dc57 	.word	0x2400dc57
 8016f30:	2400dcec 	.word	0x2400dcec
 8016f34:	24019ff2 	.word	0x24019ff2
 8016f38:	2400dbb6 	.word	0x2400dbb6
 8016f3c:	2400004c 	.word	0x2400004c
 8016f40:	2400dc1c 	.word	0x2400dc1c
 8016f44:	2400003b 	.word	0x2400003b
 8016f48:	2400dc56 	.word	0x2400dc56
 8016f4c:	2400dc55 	.word	0x2400dc55
 8016f50:	2400dbac 	.word	0x2400dbac
 8016f54:	2400dc54 	.word	0x2400dc54
 8016f58:	2400dbb7 	.word	0x2400dbb7
 8016f5c:	24019ff1 	.word	0x24019ff1
 8016f60:	2400f330 	.word	0x2400f330
            }
        }
    }
    if(test_in_flight && (now - vnd_last_tx_start_ms) > 100){
 8016f64:	4b68      	ldr	r3, [pc, #416]	@ (8017108 <Vendor_Stream_Task+0x450>)
 8016f66:	781b      	ldrb	r3, [r3, #0]
 8016f68:	b2db      	uxtb	r3, r3
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d016      	beq.n	8016f9c <Vendor_Stream_Task+0x2e4>
 8016f6e:	4b67      	ldr	r3, [pc, #412]	@ (801710c <Vendor_Stream_Task+0x454>)
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8016f74:	1ad3      	subs	r3, r2, r3
 8016f76:	2b64      	cmp	r3, #100	@ 0x64
 8016f78:	d910      	bls.n	8016f9c <Vendor_Stream_Task+0x2e4>
        /* На некоторых хостах (FS/RPi) DataIn может не вызваться после короткого TEST.
           Чтобы не зависнуть с занятым EP, снимаем busy и продолжаем. */
    test_in_flight = 0;
 8016f7a:	4b63      	ldr	r3, [pc, #396]	@ (8017108 <Vendor_Stream_Task+0x450>)
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	701a      	strb	r2, [r3, #0]
    test_sent = 1;
 8016f80:	4b63      	ldr	r3, [pc, #396]	@ (8017110 <Vendor_Stream_Task+0x458>)
 8016f82:	2201      	movs	r2, #1
 8016f84:	701a      	strb	r2, [r3, #0]
    vnd_ep_busy = 0;
 8016f86:	4b63      	ldr	r3, [pc, #396]	@ (8017114 <Vendor_Stream_Task+0x45c>)
 8016f88:	2200      	movs	r2, #0
 8016f8a:	701a      	strb	r2, [r3, #0]
    vnd_tx_ready = 1;
 8016f8c:	4b62      	ldr	r3, [pc, #392]	@ (8017118 <Vendor_Stream_Task+0x460>)
 8016f8e:	2201      	movs	r2, #1
 8016f90:	701a      	strb	r2, [r3, #0]
    extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 8016f92:	f001 fee3 	bl	8018d5c <USBD_VND_ForceTxIdle>
        vnd_tx_kick = 1;
 8016f96:	4b61      	ldr	r3, [pc, #388]	@ (801711c <Vendor_Stream_Task+0x464>)
 8016f98:	2201      	movs	r2, #1
 8016f9a:	701a      	strb	r2, [r3, #0]
        VND_LOG("TEST_TIMEOUT -> unlock EP");
    }
    if(!test_sent){
 8016f9c:	4b5c      	ldr	r3, [pc, #368]	@ (8017110 <Vendor_Stream_Task+0x458>)
 8016f9e:	781b      	ldrb	r3, [r3, #0]
 8016fa0:	b2db      	uxtb	r3, r3
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d101      	bne.n	8016faa <Vendor_Stream_Task+0x2f2>
        if(!vnd_ep_busy){
 8016fa6:	4b5b      	ldr	r3, [pc, #364]	@ (8017114 <Vendor_Stream_Task+0x45c>)
 8016fa8:	781b      	ldrb	r3, [r3, #0]
        }
        /* Не выходим раньше времени: позволим подготовку/отправку A/B идти параллельно,
           чтобы не блокироваться на тестовом кадре. */
    }

    if(diag_mode_active){
 8016faa:	4b5d      	ldr	r3, [pc, #372]	@ (8017120 <Vendor_Stream_Task+0x468>)
 8016fac:	781b      	ldrb	r3, [r3, #0]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d04d      	beq.n	801704e <Vendor_Stream_Task+0x396>
        /* Зафиксируем размер один раз */
        if(cur_samples_per_frame == 0){
 8016fb2:	4b5c      	ldr	r3, [pc, #368]	@ (8017124 <Vendor_Stream_Task+0x46c>)
 8016fb4:	881b      	ldrh	r3, [r3, #0]
 8016fb6:	b29b      	uxth	r3, r3
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d119      	bne.n	8016ff0 <Vendor_Stream_Task+0x338>
            uint16_t s = diag_samples; if(s > VND_MAX_SAMPLES) s = VND_MAX_SAMPLES;
 8016fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8017128 <Vendor_Stream_Task+0x470>)
 8016fbe:	881b      	ldrh	r3, [r3, #0]
 8016fc0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8016fc4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8016fc8:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8016fcc:	d903      	bls.n	8016fd6 <Vendor_Stream_Task+0x31e>
 8016fce:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 8016fd2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
            cur_samples_per_frame = s;
 8016fd6:	4a53      	ldr	r2, [pc, #332]	@ (8017124 <Vendor_Stream_Task+0x46c>)
 8016fd8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8016fdc:	8013      	strh	r3, [r2, #0]
            cur_expected_frame_size = (uint16_t)(VND_FRAME_HDR_SIZE + cur_samples_per_frame*2u);
 8016fde:	4b51      	ldr	r3, [pc, #324]	@ (8017124 <Vendor_Stream_Task+0x46c>)
 8016fe0:	881b      	ldrh	r3, [r3, #0]
 8016fe2:	b29b      	uxth	r3, r3
 8016fe4:	3310      	adds	r3, #16
 8016fe6:	b29b      	uxth	r3, r3
 8016fe8:	005b      	lsls	r3, r3, #1
 8016fea:	b29a      	uxth	r2, r3
 8016fec:	4b4f      	ldr	r3, [pc, #316]	@ (801712c <Vendor_Stream_Task+0x474>)
 8016fee:	801a      	strh	r2, [r3, #0]
        }
        /* Подготовить пару для текущего stream_seq, если ещё не подготовлена и не идёт передача */
        if(sending_channel == 0xFF && !pending_B && diag_prepared_seq != stream_seq){
 8016ff0:	4b4f      	ldr	r3, [pc, #316]	@ (8017130 <Vendor_Stream_Task+0x478>)
 8016ff2:	781b      	ldrb	r3, [r3, #0]
 8016ff4:	2bff      	cmp	r3, #255	@ 0xff
 8016ff6:	d117      	bne.n	8017028 <Vendor_Stream_Task+0x370>
 8016ff8:	4b4e      	ldr	r3, [pc, #312]	@ (8017134 <Vendor_Stream_Task+0x47c>)
 8016ffa:	781b      	ldrb	r3, [r3, #0]
 8016ffc:	b2db      	uxtb	r3, r3
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d112      	bne.n	8017028 <Vendor_Stream_Task+0x370>
 8017002:	4b4d      	ldr	r3, [pc, #308]	@ (8017138 <Vendor_Stream_Task+0x480>)
 8017004:	681a      	ldr	r2, [r3, #0]
 8017006:	4b4d      	ldr	r3, [pc, #308]	@ (801713c <Vendor_Stream_Task+0x484>)
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	429a      	cmp	r2, r3
 801700c:	d00c      	beq.n	8017028 <Vendor_Stream_Task+0x370>
            vnd_diag_prepare_pair(stream_seq, cur_samples_per_frame);
 801700e:	4b4b      	ldr	r3, [pc, #300]	@ (801713c <Vendor_Stream_Task+0x484>)
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	4a44      	ldr	r2, [pc, #272]	@ (8017124 <Vendor_Stream_Task+0x46c>)
 8017014:	8812      	ldrh	r2, [r2, #0]
 8017016:	b292      	uxth	r2, r2
 8017018:	4611      	mov	r1, r2
 801701a:	4618      	mov	r0, r3
 801701c:	f7ff fb4c 	bl	80166b8 <vnd_diag_prepare_pair>
            diag_prepared_seq = stream_seq;
 8017020:	4b46      	ldr	r3, [pc, #280]	@ (801713c <Vendor_Stream_Task+0x484>)
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	4a44      	ldr	r2, [pc, #272]	@ (8017138 <Vendor_Stream_Task+0x480>)
 8017026:	6013      	str	r3, [r2, #0]
        }
        /* В DIAG STAT через bulk полностью заблокирован (см. vnd_try_send_pending_status_from_task) */
        /* Отправка диагностических кадров без темпирования: A затем B */
        if(!vnd_ep_busy){ (void)vnd_diag_try_tx(); }
 8017028:	4b3a      	ldr	r3, [pc, #232]	@ (8017114 <Vendor_Stream_Task+0x45c>)
 801702a:	781b      	ldrb	r3, [r3, #0]
 801702c:	b2db      	uxtb	r3, r3
 801702e:	2b00      	cmp	r3, #0
 8017030:	d101      	bne.n	8017036 <Vendor_Stream_Task+0x37e>
 8017032:	f7ff fbff 	bl	8016834 <vnd_diag_try_tx>
        if(vnd_tick_flag) vnd_tick_flag = 0;
 8017036:	4b42      	ldr	r3, [pc, #264]	@ (8017140 <Vendor_Stream_Task+0x488>)
 8017038:	781b      	ldrb	r3, [r3, #0]
 801703a:	b2db      	uxtb	r3, r3
 801703c:	2b00      	cmp	r3, #0
 801703e:	d002      	beq.n	8017046 <Vendor_Stream_Task+0x38e>
 8017040:	4b3f      	ldr	r3, [pc, #252]	@ (8017140 <Vendor_Stream_Task+0x488>)
 8017042:	2200      	movs	r2, #0
 8017044:	701a      	strb	r2, [r3, #0]
        vnd_cdc_periodic_stats(now);
 8017046:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8017048:	f7fe fa4a 	bl	80154e0 <vnd_cdc_periodic_stats>
        return;
 801704c:	e39c      	b.n	8017788 <Vendor_Stream_Task+0xad0>
    }
    
    if(!full_mode){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 801704e:	4b3d      	ldr	r3, [pc, #244]	@ (8017144 <Vendor_Stream_Task+0x48c>)
 8017050:	781b      	ldrb	r3, [r3, #0]
 8017052:	b2db      	uxtb	r3, r3
 8017054:	2b00      	cmp	r3, #0
 8017056:	d109      	bne.n	801706c <Vendor_Stream_Task+0x3b4>
 8017058:	4b39      	ldr	r3, [pc, #228]	@ (8017140 <Vendor_Stream_Task+0x488>)
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	b2db      	uxtb	r3, r3
 801705e:	2b00      	cmp	r3, #0
 8017060:	f000 838f 	beq.w	8017782 <Vendor_Stream_Task+0xaca>
 8017064:	4b36      	ldr	r3, [pc, #216]	@ (8017140 <Vendor_Stream_Task+0x488>)
 8017066:	2200      	movs	r2, #0
 8017068:	701a      	strb	r2, [r3, #0]
 801706a:	e38a      	b.n	8017782 <Vendor_Stream_Task+0xaca>

    /* Упреждающая подготовка пары: когда TEST уже завершён и B не ожидается. */
    if(test_sent && !pending_B){
 801706c:	4b28      	ldr	r3, [pc, #160]	@ (8017110 <Vendor_Stream_Task+0x458>)
 801706e:	781b      	ldrb	r3, [r3, #0]
 8017070:	b2db      	uxtb	r3, r3
 8017072:	2b00      	cmp	r3, #0
 8017074:	d015      	beq.n	80170a2 <Vendor_Stream_Task+0x3ea>
 8017076:	4b2f      	ldr	r3, [pc, #188]	@ (8017134 <Vendor_Stream_Task+0x47c>)
 8017078:	781b      	ldrb	r3, [r3, #0]
 801707a:	b2db      	uxtb	r3, r3
 801707c:	2b00      	cmp	r3, #0
 801707e:	d110      	bne.n	80170a2 <Vendor_Stream_Task+0x3ea>
        ChanFrame *fa_chk = &g_frames[pair_send_idx][0];
 8017080:	4b31      	ldr	r3, [pc, #196]	@ (8017148 <Vendor_Stream_Task+0x490>)
 8017082:	781b      	ldrb	r3, [r3, #0]
 8017084:	461a      	mov	r2, r3
 8017086:	f241 5398 	movw	r3, #5528	@ 0x1598
 801708a:	fb02 f303 	mul.w	r3, r2, r3
 801708e:	4a2f      	ldr	r2, [pc, #188]	@ (801714c <Vendor_Stream_Task+0x494>)
 8017090:	4413      	add	r3, r2
 8017092:	65bb      	str	r3, [r7, #88]	@ 0x58
        if(fa_chk->st != FB_READY){ vnd_prepare_pair(); }
 8017094:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017096:	781b      	ldrb	r3, [r3, #0]
 8017098:	b2db      	uxtb	r3, r3
 801709a:	2b01      	cmp	r3, #1
 801709c:	d001      	beq.n	80170a2 <Vendor_Stream_Task+0x3ea>
 801709e:	f7fe ffe7 	bl	8016070 <vnd_prepare_pair>
    }

    /* Окно для GET_STATUS: отправлять STAT строго между парами, чтобы не разрывать A/B. */
    if(!vnd_ep_busy && !vnd_inflight && pending_status){
 80170a2:	4b1c      	ldr	r3, [pc, #112]	@ (8017114 <Vendor_Stream_Task+0x45c>)
 80170a4:	781b      	ldrb	r3, [r3, #0]
 80170a6:	b2db      	uxtb	r3, r3
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d157      	bne.n	801715c <Vendor_Stream_Task+0x4a4>
 80170ac:	4b28      	ldr	r3, [pc, #160]	@ (8017150 <Vendor_Stream_Task+0x498>)
 80170ae:	781b      	ldrb	r3, [r3, #0]
 80170b0:	b2db      	uxtb	r3, r3
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d152      	bne.n	801715c <Vendor_Stream_Task+0x4a4>
 80170b6:	4b27      	ldr	r3, [pc, #156]	@ (8017154 <Vendor_Stream_Task+0x49c>)
 80170b8:	781b      	ldrb	r3, [r3, #0]
 80170ba:	b2db      	uxtb	r3, r3
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d04d      	beq.n	801715c <Vendor_Stream_Task+0x4a4>
        if (test_sent && !pending_B && first_pair_done && sending_channel == 0xFF) {
 80170c0:	4b13      	ldr	r3, [pc, #76]	@ (8017110 <Vendor_Stream_Task+0x458>)
 80170c2:	781b      	ldrb	r3, [r3, #0]
 80170c4:	b2db      	uxtb	r3, r3
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d048      	beq.n	801715c <Vendor_Stream_Task+0x4a4>
 80170ca:	4b1a      	ldr	r3, [pc, #104]	@ (8017134 <Vendor_Stream_Task+0x47c>)
 80170cc:	781b      	ldrb	r3, [r3, #0]
 80170ce:	b2db      	uxtb	r3, r3
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d143      	bne.n	801715c <Vendor_Stream_Task+0x4a4>
 80170d4:	4b20      	ldr	r3, [pc, #128]	@ (8017158 <Vendor_Stream_Task+0x4a0>)
 80170d6:	781b      	ldrb	r3, [r3, #0]
 80170d8:	b2db      	uxtb	r3, r3
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d03e      	beq.n	801715c <Vendor_Stream_Task+0x4a4>
 80170de:	4b14      	ldr	r3, [pc, #80]	@ (8017130 <Vendor_Stream_Task+0x478>)
 80170e0:	781b      	ldrb	r3, [r3, #0]
 80170e2:	2bff      	cmp	r3, #255	@ 0xff
 80170e4:	d13a      	bne.n	801715c <Vendor_Stream_Task+0x4a4>
            vnd_try_send_pending_status_from_task();
 80170e6:	f7fe fc93 	bl	8015a10 <vnd_try_send_pending_status_from_task>
            if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 80170ea:	4b0a      	ldr	r3, [pc, #40]	@ (8017114 <Vendor_Stream_Task+0x45c>)
 80170ec:	781b      	ldrb	r3, [r3, #0]
 80170ee:	b2db      	uxtb	r3, r3
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d033      	beq.n	801715c <Vendor_Stream_Task+0x4a4>
 80170f4:	4b12      	ldr	r3, [pc, #72]	@ (8017140 <Vendor_Stream_Task+0x488>)
 80170f6:	781b      	ldrb	r3, [r3, #0]
 80170f8:	b2db      	uxtb	r3, r3
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	f000 8343 	beq.w	8017786 <Vendor_Stream_Task+0xace>
 8017100:	4b0f      	ldr	r3, [pc, #60]	@ (8017140 <Vendor_Stream_Task+0x488>)
 8017102:	2200      	movs	r2, #0
 8017104:	701a      	strb	r2, [r3, #0]
 8017106:	e33e      	b.n	8017786 <Vendor_Stream_Task+0xace>
 8017108:	2400dbb7 	.word	0x2400dbb7
 801710c:	2400dc1c 	.word	0x2400dc1c
 8017110:	2400dbb6 	.word	0x2400dbb6
 8017114:	2400dbb4 	.word	0x2400dbb4
 8017118:	2400003b 	.word	0x2400003b
 801711c:	2400dc50 	.word	0x2400dc50
 8017120:	2400dced 	.word	0x2400dced
 8017124:	2400dba8 	.word	0x2400dba8
 8017128:	24000042 	.word	0x24000042
 801712c:	2400dbaa 	.word	0x2400dbaa
 8017130:	2400004c 	.word	0x2400004c
 8017134:	24019ff2 	.word	0x24019ff2
 8017138:	24000044 	.word	0x24000044
 801713c:	2400dba4 	.word	0x2400dba4
 8017140:	2401a06c 	.word	0x2401a06c
 8017144:	2400003c 	.word	0x2400003c
 8017148:	24019ff1 	.word	0x24019ff1
 801714c:	2400f330 	.word	0x2400f330
 8017150:	2400dbb5 	.word	0x2400dbb5
 8017154:	2400dcec 	.word	0x2400dcec
 8017158:	2400dc40 	.word	0x2400dc40
        }
    }

    if(vnd_tx_kick) vnd_tx_kick = 0;
 801715c:	4b76      	ldr	r3, [pc, #472]	@ (8017338 <Vendor_Stream_Task+0x680>)
 801715e:	781b      	ldrb	r3, [r3, #0]
 8017160:	b2db      	uxtb	r3, r3
 8017162:	2b00      	cmp	r3, #0
 8017164:	d002      	beq.n	801716c <Vendor_Stream_Task+0x4b4>
 8017166:	4b74      	ldr	r3, [pc, #464]	@ (8017338 <Vendor_Stream_Task+0x680>)
 8017168:	2200      	movs	r2, #0
 801716a:	701a      	strb	r2, [r3, #0]
    /* Разрешаем подготовку следующей пары даже если EP занят (параллельная заполнение буферов) */
    /* if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; } */

    /* Если TEST уже логически завершён, но его мета застряла в FIFO (нет TxCplt) —
       через ~60 мс превращаем её в служебную, чтобы не блокировать отправку A. */
    vnd_force_complete_test_meta_if_stale();
 801716c:	f7fe fc1c 	bl	80159a8 <vnd_force_complete_test_meta_if_stale>

    static uint8_t first_pair_logged = 0; /* диагностический лог первой пары */

    static uint8_t first_bq_logged = 0; /* однократный лог первой постановки B */
    if(pending_B){
 8017170:	4b72      	ldr	r3, [pc, #456]	@ (801733c <Vendor_Stream_Task+0x684>)
 8017172:	781b      	ldrb	r3, [r3, #0]
 8017174:	b2db      	uxtb	r3, r3
 8017176:	2b00      	cmp	r3, #0
 8017178:	f000 816c 	beq.w	8017454 <Vendor_Stream_Task+0x79c>
        /* Гарантируем, что текущая пара действительно подготовлена: если A ещё не готов (FB_FILL) — соберём пару сейчас. */
        ChanFrame *fA_pre = &g_frames[pair_send_idx][0];
 801717c:	4b70      	ldr	r3, [pc, #448]	@ (8017340 <Vendor_Stream_Task+0x688>)
 801717e:	781b      	ldrb	r3, [r3, #0]
 8017180:	461a      	mov	r2, r3
 8017182:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017186:	fb02 f303 	mul.w	r3, r2, r3
 801718a:	4a6e      	ldr	r2, [pc, #440]	@ (8017344 <Vendor_Stream_Task+0x68c>)
 801718c:	4413      	add	r3, r2
 801718e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if(fA_pre->st == FB_FILL && !vnd_ep_busy){ vnd_prepare_pair(); }
 8017190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017192:	781b      	ldrb	r3, [r3, #0]
 8017194:	b2db      	uxtb	r3, r3
 8017196:	2b00      	cmp	r3, #0
 8017198:	d106      	bne.n	80171a8 <Vendor_Stream_Task+0x4f0>
 801719a:	4b6b      	ldr	r3, [pc, #428]	@ (8017348 <Vendor_Stream_Task+0x690>)
 801719c:	781b      	ldrb	r3, [r3, #0]
 801719e:	b2db      	uxtb	r3, r3
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d101      	bne.n	80171a8 <Vendor_Stream_Task+0x4f0>
 80171a4:	f7fe ff64 	bl	8016070 <vnd_prepare_pair>
        ChanFrame *fB = &g_frames[pair_send_idx][1];
 80171a8:	4b65      	ldr	r3, [pc, #404]	@ (8017340 <Vendor_Stream_Task+0x688>)
 80171aa:	781b      	ldrb	r3, [r3, #0]
 80171ac:	461a      	mov	r2, r3
 80171ae:	f241 5398 	movw	r3, #5528	@ 0x1598
 80171b2:	fb02 f303 	mul.w	r3, r2, r3
 80171b6:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80171ba:	4a62      	ldr	r2, [pc, #392]	@ (8017344 <Vendor_Stream_Task+0x68c>)
 80171bc:	4413      	add	r3, r2
 80171be:	64bb      	str	r3, [r7, #72]	@ 0x48
        if(fB->st == FB_READY){
 80171c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171c2:	781b      	ldrb	r3, [r3, #0]
 80171c4:	b2db      	uxtb	r3, r3
 80171c6:	2b01      	cmp	r3, #1
 80171c8:	d149      	bne.n	801725e <Vendor_Stream_Task+0x5a6>
            /* Перед отправкой B корректируем seq, если он отличается от ожидаемого stream_seq */
            if(fB->frame_size >= VND_FRAME_HDR_SIZE){
 80171ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171cc:	88db      	ldrh	r3, [r3, #6]
 80171ce:	2b1f      	cmp	r3, #31
 80171d0:	d917      	bls.n	8017202 <Vendor_Stream_Task+0x54a>
                vnd_frame_hdr_t *hb = (vnd_frame_hdr_t*)fB->buf;
 80171d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171d4:	330c      	adds	r3, #12
 80171d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                if(hb->magic == 0xA55A && hb->seq != stream_seq){
 80171d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171da:	881b      	ldrh	r3, [r3, #0]
 80171dc:	b29b      	uxth	r3, r3
 80171de:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80171e2:	4293      	cmp	r3, r2
 80171e4:	d10d      	bne.n	8017202 <Vendor_Stream_Task+0x54a>
 80171e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171e8:	685a      	ldr	r2, [r3, #4]
 80171ea:	4b58      	ldr	r3, [pc, #352]	@ (801734c <Vendor_Stream_Task+0x694>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d007      	beq.n	8017202 <Vendor_Stream_Task+0x54a>
                    VND_LOG("PATCH_B_SEQ hdr=%lu -> %lu", (unsigned long)hb->seq, (unsigned long)stream_seq);
                    hb->seq = stream_seq; fB->seq = stream_seq;
 80171f2:	4b56      	ldr	r3, [pc, #344]	@ (801734c <Vendor_Stream_Task+0x694>)
 80171f4:	681a      	ldr	r2, [r3, #0]
 80171f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171f8:	605a      	str	r2, [r3, #4]
 80171fa:	4b54      	ldr	r3, [pc, #336]	@ (801734c <Vendor_Stream_Task+0x694>)
 80171fc:	681a      	ldr	r2, [r3, #0]
 80171fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017200:	609a      	str	r2, [r3, #8]
                }
            }
            USBD_StatusTypeDef rcB = vnd_transmit_frame(fB->buf, fB->frame_size, 0, 0, "ADC1");
 8017202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017204:	f103 000c 	add.w	r0, r3, #12
 8017208:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801720a:	88d9      	ldrh	r1, [r3, #6]
 801720c:	4b50      	ldr	r3, [pc, #320]	@ (8017350 <Vendor_Stream_Task+0x698>)
 801720e:	9300      	str	r3, [sp, #0]
 8017210:	2300      	movs	r3, #0
 8017212:	2200      	movs	r2, #0
 8017214:	f7ff f94c 	bl	80164b0 <vnd_transmit_frame>
 8017218:	4603      	mov	r3, r0
 801721a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            if (rcB == USBD_OK) {
 801721e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8017222:	2b00      	cmp	r3, #0
 8017224:	d10d      	bne.n	8017242 <Vendor_Stream_Task+0x58a>
                if(!first_bq_logged){ first_bq_logged = 1; VND_LOG("FIRST_B queued size=%u", (unsigned)fB->frame_size); }
 8017226:	4b4b      	ldr	r3, [pc, #300]	@ (8017354 <Vendor_Stream_Task+0x69c>)
 8017228:	781b      	ldrb	r3, [r3, #0]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d102      	bne.n	8017234 <Vendor_Stream_Task+0x57c>
 801722e:	4b49      	ldr	r3, [pc, #292]	@ (8017354 <Vendor_Stream_Task+0x69c>)
 8017230:	2201      	movs	r2, #1
 8017232:	701a      	strb	r2, [r3, #0]
                fB->st = FB_SENDING; sending_channel = 1; return;
 8017234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017236:	2202      	movs	r2, #2
 8017238:	701a      	strb	r2, [r3, #0]
 801723a:	4b47      	ldr	r3, [pc, #284]	@ (8017358 <Vendor_Stream_Task+0x6a0>)
 801723c:	2201      	movs	r2, #1
 801723e:	701a      	strb	r2, [r3, #0]
 8017240:	e2a2      	b.n	8017788 <Vendor_Stream_Task+0xad0>
            } else if (rcB == USBD_BUSY) {
 8017242:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8017246:	2b01      	cmp	r3, #1
 8017248:	f040 8094 	bne.w	8017374 <Vendor_Stream_Task+0x6bc>
                static uint32_t b_busy_retry = 0; b_busy_retry++;
 801724c:	4b43      	ldr	r3, [pc, #268]	@ (801735c <Vendor_Stream_Task+0x6a4>)
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	3301      	adds	r3, #1
 8017252:	4a42      	ldr	r2, [pc, #264]	@ (801735c <Vendor_Stream_Task+0x6a4>)
 8017254:	6013      	str	r3, [r2, #0]
                if (b_busy_retry == 1 || (b_busy_retry % 10) == 0) {
 8017256:	4b41      	ldr	r3, [pc, #260]	@ (801735c <Vendor_Stream_Task+0x6a4>)
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	2b01      	cmp	r3, #1
 801725c:	e08a      	b.n	8017374 <Vendor_Stream_Task+0x6bc>
                VND_LOG("B_TX_FAIL rc=%d", (int)rcB);
            }
        } else {
            /* Диагностируем, почему ждём B: выводим однократно переход в нестандартное состояние */
            static uint32_t last_log_ms = 0;
            uint32_t now_ms = HAL_GetTick();
 801725e:	f7ed fe31 	bl	8004ec4 <HAL_GetTick>
 8017262:	6478      	str	r0, [r7, #68]	@ 0x44
            if(now_ms - last_log_ms > 200){
 8017264:	4b3e      	ldr	r3, [pc, #248]	@ (8017360 <Vendor_Stream_Task+0x6a8>)
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801726a:	1ad3      	subs	r3, r2, r3
 801726c:	2bc8      	cmp	r3, #200	@ 0xc8
 801726e:	d902      	bls.n	8017276 <Vendor_Stream_Task+0x5be>
                VND_LOG("WAIT_B st=%u pair_send=%u fill_idx=%u seq=%lu cur_seq=%lu", (unsigned)fB->st, (unsigned)pair_send_idx, (unsigned)pair_fill_idx, (unsigned long)fB->seq, (unsigned long)stream_seq);
                last_log_ms = now_ms;
 8017270:	4a3b      	ldr	r2, [pc, #236]	@ (8017360 <Vendor_Stream_Task+0x6a8>)
 8017272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017274:	6013      	str	r3, [r2, #0]
            }
            /* Watchdog B: если B уже в полёте и нет TxCplt слишком долго — форсируем завершение пары */
            if(fB->st == FB_SENDING && (now_ms - vnd_last_tx_start_ms) > 150){
 8017276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017278:	781b      	ldrb	r3, [r3, #0]
 801727a:	b2db      	uxtb	r3, r3
 801727c:	2b02      	cmp	r3, #2
 801727e:	d179      	bne.n	8017374 <Vendor_Stream_Task+0x6bc>
 8017280:	4b38      	ldr	r3, [pc, #224]	@ (8017364 <Vendor_Stream_Task+0x6ac>)
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017286:	1ad3      	subs	r3, r2, r3
 8017288:	2b96      	cmp	r3, #150	@ 0x96
 801728a:	d973      	bls.n	8017374 <Vendor_Stream_Task+0x6bc>
                /* Не закрываем пару! Снимаем busy, нейтрализуем старую мета и переотправляем B */
                extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 801728c:	f001 fd66 	bl	8018d5c <USBD_VND_ForceTxIdle>
                vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0;
 8017290:	4b2d      	ldr	r3, [pc, #180]	@ (8017348 <Vendor_Stream_Task+0x690>)
 8017292:	2200      	movs	r2, #0
 8017294:	701a      	strb	r2, [r3, #0]
 8017296:	4b34      	ldr	r3, [pc, #208]	@ (8017368 <Vendor_Stream_Task+0x6b0>)
 8017298:	2201      	movs	r2, #1
 801729a:	701a      	strb	r2, [r3, #0]
 801729c:	4b33      	ldr	r3, [pc, #204]	@ (801736c <Vendor_Stream_Task+0x6b4>)
 801729e:	2200      	movs	r2, #0
 80172a0:	701a      	strb	r2, [r3, #0]
                vnd_meta_neutralize(0x02, g_frames[pair_send_idx][1].seq);
 80172a2:	4b27      	ldr	r3, [pc, #156]	@ (8017340 <Vendor_Stream_Task+0x688>)
 80172a4:	781b      	ldrb	r3, [r3, #0]
 80172a6:	4619      	mov	r1, r3
 80172a8:	4a26      	ldr	r2, [pc, #152]	@ (8017344 <Vendor_Stream_Task+0x68c>)
 80172aa:	f241 5398 	movw	r3, #5528	@ 0x1598
 80172ae:	fb01 f303 	mul.w	r3, r1, r3
 80172b2:	4413      	add	r3, r2
 80172b4:	f603 23d4 	addw	r3, r3, #2772	@ 0xad4
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	4619      	mov	r1, r3
 80172bc:	2002      	movs	r0, #2
 80172be:	f7fe fa49 	bl	8015754 <vnd_meta_neutralize>
                g_frames[pair_send_idx][1].st = FB_READY; sending_channel = 0xFF;
 80172c2:	4b1f      	ldr	r3, [pc, #124]	@ (8017340 <Vendor_Stream_Task+0x688>)
 80172c4:	781b      	ldrb	r3, [r3, #0]
 80172c6:	4619      	mov	r1, r3
 80172c8:	4a1e      	ldr	r2, [pc, #120]	@ (8017344 <Vendor_Stream_Task+0x68c>)
 80172ca:	f241 5398 	movw	r3, #5528	@ 0x1598
 80172ce:	fb01 f303 	mul.w	r3, r1, r3
 80172d2:	4413      	add	r3, r2
 80172d4:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80172d8:	2201      	movs	r2, #1
 80172da:	701a      	strb	r2, [r3, #0]
 80172dc:	4b1e      	ldr	r3, [pc, #120]	@ (8017358 <Vendor_Stream_Task+0x6a0>)
 80172de:	22ff      	movs	r2, #255	@ 0xff
 80172e0:	701a      	strb	r2, [r3, #0]
                VND_LOG("B_TXCPLT_WD (>150ms) -> retry B seq=%lu", (unsigned long)g_frames[pair_send_idx][1].seq);
                /* Попробуем сразу переотправить */
                ChanFrame *fB2 = &g_frames[pair_send_idx][1];
 80172e2:	4b17      	ldr	r3, [pc, #92]	@ (8017340 <Vendor_Stream_Task+0x688>)
 80172e4:	781b      	ldrb	r3, [r3, #0]
 80172e6:	461a      	mov	r2, r3
 80172e8:	f241 5398 	movw	r3, #5528	@ 0x1598
 80172ec:	fb02 f303 	mul.w	r3, r2, r3
 80172f0:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80172f4:	4a13      	ldr	r2, [pc, #76]	@ (8017344 <Vendor_Stream_Task+0x68c>)
 80172f6:	4413      	add	r3, r2
 80172f8:	643b      	str	r3, [r7, #64]	@ 0x40
                if(!vnd_ep_busy && fB2->st == FB_READY){
 80172fa:	4b13      	ldr	r3, [pc, #76]	@ (8017348 <Vendor_Stream_Task+0x690>)
 80172fc:	781b      	ldrb	r3, [r3, #0]
 80172fe:	b2db      	uxtb	r3, r3
 8017300:	2b00      	cmp	r3, #0
 8017302:	d137      	bne.n	8017374 <Vendor_Stream_Task+0x6bc>
 8017304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017306:	781b      	ldrb	r3, [r3, #0]
 8017308:	b2db      	uxtb	r3, r3
 801730a:	2b01      	cmp	r3, #1
 801730c:	d132      	bne.n	8017374 <Vendor_Stream_Task+0x6bc>
                    if(vnd_transmit_frame(fB2->buf, fB2->frame_size, 0, 0, "ADC1-RETRY") == USBD_OK){ fB2->st = FB_SENDING; sending_channel = 1; return; }
 801730e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017310:	f103 000c 	add.w	r0, r3, #12
 8017314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017316:	88d9      	ldrh	r1, [r3, #6]
 8017318:	4b15      	ldr	r3, [pc, #84]	@ (8017370 <Vendor_Stream_Task+0x6b8>)
 801731a:	9300      	str	r3, [sp, #0]
 801731c:	2300      	movs	r3, #0
 801731e:	2200      	movs	r2, #0
 8017320:	f7ff f8c6 	bl	80164b0 <vnd_transmit_frame>
 8017324:	4603      	mov	r3, r0
 8017326:	2b00      	cmp	r3, #0
 8017328:	d124      	bne.n	8017374 <Vendor_Stream_Task+0x6bc>
 801732a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801732c:	2202      	movs	r2, #2
 801732e:	701a      	strb	r2, [r3, #0]
 8017330:	4b09      	ldr	r3, [pc, #36]	@ (8017358 <Vendor_Stream_Task+0x6a0>)
 8017332:	2201      	movs	r2, #1
 8017334:	701a      	strb	r2, [r3, #0]
 8017336:	e227      	b.n	8017788 <Vendor_Stream_Task+0xad0>
 8017338:	2400dc50 	.word	0x2400dc50
 801733c:	24019ff2 	.word	0x24019ff2
 8017340:	24019ff1 	.word	0x24019ff1
 8017344:	2400f330 	.word	0x2400f330
 8017348:	2400dbb4 	.word	0x2400dbb4
 801734c:	2400dba4 	.word	0x2400dba4
 8017350:	0801c3c4 	.word	0x0801c3c4
 8017354:	2401a06d 	.word	0x2401a06d
 8017358:	2400004c 	.word	0x2400004c
 801735c:	2401a070 	.word	0x2401a070
 8017360:	2401a074 	.word	0x2401a074
 8017364:	2400dc1c 	.word	0x2400dc1c
 8017368:	2400003b 	.word	0x2400003b
 801736c:	2400dbb5 	.word	0x2400dbb5
 8017370:	0801c3f4 	.word	0x0801c3f4
            }
            /* Не синтезируем B: ждём реальные данные, пока EP свободен */
        }
        /* Дополнительный watchdog зависшего pending_B, даже если fB->st перешёл из READY в FILL из-за сброса */
        do {
            uint32_t now_ms2 = HAL_GetTick();
 8017374:	f7ed fda6 	bl	8004ec4 <HAL_GetTick>
 8017378:	6378      	str	r0, [r7, #52]	@ 0x34
            if(!vnd_ep_busy && sending_channel == 0xFF && (now_ms2 - vnd_last_txcplt_ms) > 40){
 801737a:	4b7f      	ldr	r3, [pc, #508]	@ (8017578 <Vendor_Stream_Task+0x8c0>)
 801737c:	781b      	ldrb	r3, [r3, #0]
 801737e:	b2db      	uxtb	r3, r3
 8017380:	2b00      	cmp	r3, #0
 8017382:	f040 8115 	bne.w	80175b0 <Vendor_Stream_Task+0x8f8>
 8017386:	4b7d      	ldr	r3, [pc, #500]	@ (801757c <Vendor_Stream_Task+0x8c4>)
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	2bff      	cmp	r3, #255	@ 0xff
 801738c:	f040 8110 	bne.w	80175b0 <Vendor_Stream_Task+0x8f8>
 8017390:	4b7b      	ldr	r3, [pc, #492]	@ (8017580 <Vendor_Stream_Task+0x8c8>)
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017396:	1ad3      	subs	r3, r2, r3
 8017398:	2b28      	cmp	r3, #40	@ 0x28
 801739a:	f240 8109 	bls.w	80175b0 <Vendor_Stream_Task+0x8f8>
                ChanFrame *fBchk = &g_frames[pair_send_idx][1];
 801739e:	4b79      	ldr	r3, [pc, #484]	@ (8017584 <Vendor_Stream_Task+0x8cc>)
 80173a0:	781b      	ldrb	r3, [r3, #0]
 80173a2:	461a      	mov	r2, r3
 80173a4:	f241 5398 	movw	r3, #5528	@ 0x1598
 80173a8:	fb02 f303 	mul.w	r3, r2, r3
 80173ac:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 80173b0:	4a75      	ldr	r2, [pc, #468]	@ (8017588 <Vendor_Stream_Task+0x8d0>)
 80173b2:	4413      	add	r3, r2
 80173b4:	633b      	str	r3, [r7, #48]	@ 0x30
                ChanFrame *fAchk = &g_frames[pair_send_idx][0];
 80173b6:	4b73      	ldr	r3, [pc, #460]	@ (8017584 <Vendor_Stream_Task+0x8cc>)
 80173b8:	781b      	ldrb	r3, [r3, #0]
 80173ba:	461a      	mov	r2, r3
 80173bc:	f241 5398 	movw	r3, #5528	@ 0x1598
 80173c0:	fb02 f303 	mul.w	r3, r2, r3
 80173c4:	4a70      	ldr	r2, [pc, #448]	@ (8017588 <Vendor_Stream_Task+0x8d0>)
 80173c6:	4413      	add	r3, r2
 80173c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                if(fAchk->st != FB_SENDING && fBchk->st != FB_SENDING){
 80173ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173cc:	781b      	ldrb	r3, [r3, #0]
 80173ce:	b2db      	uxtb	r3, r3
 80173d0:	2b02      	cmp	r3, #2
 80173d2:	f000 80ed 	beq.w	80175b0 <Vendor_Stream_Task+0x8f8>
 80173d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	b2db      	uxtb	r3, r3
 80173dc:	2b02      	cmp	r3, #2
 80173de:	f000 80e7 	beq.w	80175b0 <Vendor_Stream_Task+0x8f8>
                    if(fBchk->st == FB_READY){
 80173e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173e4:	781b      	ldrb	r3, [r3, #0]
 80173e6:	b2db      	uxtb	r3, r3
 80173e8:	2b01      	cmp	r3, #1
 80173ea:	d130      	bne.n	801744e <Vendor_Stream_Task+0x796>
                        /* Перед отправкой по вотчдогу также поправим seq при необходимости */
                        if(fBchk->frame_size >= VND_FRAME_HDR_SIZE){
 80173ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173ee:	88db      	ldrh	r3, [r3, #6]
 80173f0:	2b1f      	cmp	r3, #31
 80173f2:	d917      	bls.n	8017424 <Vendor_Stream_Task+0x76c>
                            vnd_frame_hdr_t *hb2 = (vnd_frame_hdr_t*)fBchk->buf;
 80173f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173f6:	330c      	adds	r3, #12
 80173f8:	62bb      	str	r3, [r7, #40]	@ 0x28
                            if(hb2->magic == 0xA55A && hb2->seq != stream_seq){ hb2->seq = stream_seq; fBchk->seq = stream_seq; VND_LOG("PATCH_B_SEQ_WDG->%lu", (unsigned long)stream_seq); }
 80173fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173fc:	881b      	ldrh	r3, [r3, #0]
 80173fe:	b29b      	uxth	r3, r3
 8017400:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8017404:	4293      	cmp	r3, r2
 8017406:	d10d      	bne.n	8017424 <Vendor_Stream_Task+0x76c>
 8017408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801740a:	685a      	ldr	r2, [r3, #4]
 801740c:	4b5f      	ldr	r3, [pc, #380]	@ (801758c <Vendor_Stream_Task+0x8d4>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	429a      	cmp	r2, r3
 8017412:	d007      	beq.n	8017424 <Vendor_Stream_Task+0x76c>
 8017414:	4b5d      	ldr	r3, [pc, #372]	@ (801758c <Vendor_Stream_Task+0x8d4>)
 8017416:	681a      	ldr	r2, [r3, #0]
 8017418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801741a:	605a      	str	r2, [r3, #4]
 801741c:	4b5b      	ldr	r3, [pc, #364]	@ (801758c <Vendor_Stream_Task+0x8d4>)
 801741e:	681a      	ldr	r2, [r3, #0]
 8017420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017422:	609a      	str	r2, [r3, #8]
                        }
                        if (vnd_transmit_frame(fBchk->buf, fBchk->frame_size, 0, 0, "ADC1-WDG") == USBD_OK){
 8017424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017426:	f103 000c 	add.w	r0, r3, #12
 801742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801742c:	88d9      	ldrh	r1, [r3, #6]
 801742e:	4b58      	ldr	r3, [pc, #352]	@ (8017590 <Vendor_Stream_Task+0x8d8>)
 8017430:	9300      	str	r3, [sp, #0]
 8017432:	2300      	movs	r3, #0
 8017434:	2200      	movs	r2, #0
 8017436:	f7ff f83b 	bl	80164b0 <vnd_transmit_frame>
 801743a:	4603      	mov	r3, r0
 801743c:	2b00      	cmp	r3, #0
 801743e:	d106      	bne.n	801744e <Vendor_Stream_Task+0x796>
                            fBchk->st = FB_SENDING; sending_channel = 1; VND_LOG("PEND_B_WDG_RETRY len=%u", (unsigned)fBchk->frame_size); return; }
 8017440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017442:	2202      	movs	r2, #2
 8017444:	701a      	strb	r2, [r3, #0]
 8017446:	4b4d      	ldr	r3, [pc, #308]	@ (801757c <Vendor_Stream_Task+0x8c4>)
 8017448:	2201      	movs	r2, #1
 801744a:	701a      	strb	r2, [r3, #0]
 801744c:	e19c      	b.n	8017788 <Vendor_Stream_Task+0xad0>
                    }
                    /* Строгий порядок A→B: НЕ сбрасываем pending_B.
                       Ждём или синтезируем B выше (см. B_SYNTH_READY), чтобы закрыть пару. */
                    if(fBchk->st != FB_READY){
 801744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017450:	781b      	ldrb	r3, [r3, #0]
 8017452:	e0ad      	b.n	80175b0 <Vendor_Stream_Task+0x8f8>
                    }
                }
            }
        } while(0);
    } else {
    ChanFrame *fA = &g_frames[pair_send_idx][0];
 8017454:	4b4b      	ldr	r3, [pc, #300]	@ (8017584 <Vendor_Stream_Task+0x8cc>)
 8017456:	781b      	ldrb	r3, [r3, #0]
 8017458:	461a      	mov	r2, r3
 801745a:	f241 5398 	movw	r3, #5528	@ 0x1598
 801745e:	fb02 f303 	mul.w	r3, r2, r3
 8017462:	4a49      	ldr	r2, [pc, #292]	@ (8017588 <Vendor_Stream_Task+0x8d0>)
 8017464:	4413      	add	r3, r2
 8017466:	673b      	str	r3, [r7, #112]	@ 0x70
        /* Watchdog: если A завис в SENDING и долго нет TxCplt — считаем A завершённым и переходим к B */
        do {
            uint32_t now_ms = HAL_GetTick();
 8017468:	f7ed fd2c 	bl	8004ec4 <HAL_GetTick>
 801746c:	6578      	str	r0, [r7, #84]	@ 0x54
            if (fA->st == FB_SENDING && (now_ms - vnd_last_tx_start_ms) > 120) {
 801746e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017470:	781b      	ldrb	r3, [r3, #0]
 8017472:	b2db      	uxtb	r3, r3
 8017474:	2b02      	cmp	r3, #2
 8017476:	d128      	bne.n	80174ca <Vendor_Stream_Task+0x812>
 8017478:	4b46      	ldr	r3, [pc, #280]	@ (8017594 <Vendor_Stream_Task+0x8dc>)
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801747e:	1ad3      	subs	r3, r2, r3
 8017480:	2b78      	cmp	r3, #120	@ 0x78
 8017482:	d922      	bls.n	80174ca <Vendor_Stream_Task+0x812>
                /* Не считаем A завершённым — лишь снимаем busy, нейтрализуем старую мета и открываем ожидание B */
                VND_LOG("A_TXCPLT_WD (>120ms) -> open pending_B, neutralize A meta, continue");
                extern void USBD_VND_ForceTxIdle(void); USBD_VND_ForceTxIdle();
 8017484:	f001 fc6a 	bl	8018d5c <USBD_VND_ForceTxIdle>
                vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0; sending_channel = 0xFF;
 8017488:	4b3b      	ldr	r3, [pc, #236]	@ (8017578 <Vendor_Stream_Task+0x8c0>)
 801748a:	2200      	movs	r2, #0
 801748c:	701a      	strb	r2, [r3, #0]
 801748e:	4b42      	ldr	r3, [pc, #264]	@ (8017598 <Vendor_Stream_Task+0x8e0>)
 8017490:	2201      	movs	r2, #1
 8017492:	701a      	strb	r2, [r3, #0]
 8017494:	4b41      	ldr	r3, [pc, #260]	@ (801759c <Vendor_Stream_Task+0x8e4>)
 8017496:	2200      	movs	r2, #0
 8017498:	701a      	strb	r2, [r3, #0]
 801749a:	4b38      	ldr	r3, [pc, #224]	@ (801757c <Vendor_Stream_Task+0x8c4>)
 801749c:	22ff      	movs	r2, #255	@ 0xff
 801749e:	701a      	strb	r2, [r3, #0]
                vnd_meta_neutralize(0x01, g_frames[pair_send_idx][0].seq);
 80174a0:	4b38      	ldr	r3, [pc, #224]	@ (8017584 <Vendor_Stream_Task+0x8cc>)
 80174a2:	781b      	ldrb	r3, [r3, #0]
 80174a4:	4619      	mov	r1, r3
 80174a6:	4a38      	ldr	r2, [pc, #224]	@ (8017588 <Vendor_Stream_Task+0x8d0>)
 80174a8:	f241 5398 	movw	r3, #5528	@ 0x1598
 80174ac:	fb01 f303 	mul.w	r3, r1, r3
 80174b0:	4413      	add	r3, r2
 80174b2:	3308      	adds	r3, #8
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	4619      	mov	r1, r3
 80174b8:	2001      	movs	r0, #1
 80174ba:	f7fe f94b 	bl	8015754 <vnd_meta_neutralize>
                pending_B = 1; pending_B_since_ms = now_ms;
 80174be:	4b38      	ldr	r3, [pc, #224]	@ (80175a0 <Vendor_Stream_Task+0x8e8>)
 80174c0:	2201      	movs	r2, #1
 80174c2:	701a      	strb	r2, [r3, #0]
 80174c4:	4a37      	ldr	r2, [pc, #220]	@ (80175a4 <Vendor_Stream_Task+0x8ec>)
 80174c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80174c8:	6013      	str	r3, [r2, #0]
            }
        } while(0);
        if(fA->st != FB_READY){ vnd_prepare_pair(); fA = &g_frames[pair_send_idx][0]; }
 80174ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	b2db      	uxtb	r3, r3
 80174d0:	2b01      	cmp	r3, #1
 80174d2:	d00b      	beq.n	80174ec <Vendor_Stream_Task+0x834>
 80174d4:	f7fe fdcc 	bl	8016070 <vnd_prepare_pair>
 80174d8:	4b2a      	ldr	r3, [pc, #168]	@ (8017584 <Vendor_Stream_Task+0x8cc>)
 80174da:	781b      	ldrb	r3, [r3, #0]
 80174dc:	461a      	mov	r2, r3
 80174de:	f241 5398 	movw	r3, #5528	@ 0x1598
 80174e2:	fb02 f303 	mul.w	r3, r2, r3
 80174e6:	4a28      	ldr	r2, [pc, #160]	@ (8017588 <Vendor_Stream_Task+0x8d0>)
 80174e8:	4413      	add	r3, r2
 80174ea:	673b      	str	r3, [r7, #112]	@ 0x70
    if(fA->st == FB_READY){
 80174ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80174ee:	781b      	ldrb	r3, [r3, #0]
 80174f0:	b2db      	uxtb	r3, r3
 80174f2:	2b01      	cmp	r3, #1
 80174f4:	d15c      	bne.n	80175b0 <Vendor_Stream_Task+0x8f8>
            /* Искусственных задержек между кадрами нет: отправляем A сразу при готовности EP и данных */
            /* Отправляем A: в режиме без TEST не проверяем test_in_flight вовсе */
#if VND_DISABLE_TEST
            /* Перед отправкой A — также синхронизируем seq с текущим stream_seq */
            if(fA->frame_size >= VND_FRAME_HDR_SIZE){
 80174f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80174f8:	88db      	ldrh	r3, [r3, #6]
 80174fa:	2b1f      	cmp	r3, #31
 80174fc:	d917      	bls.n	801752e <Vendor_Stream_Task+0x876>
                vnd_frame_hdr_t *ha = (vnd_frame_hdr_t*)fA->buf;
 80174fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017500:	330c      	adds	r3, #12
 8017502:	653b      	str	r3, [r7, #80]	@ 0x50
                if(ha->magic == 0xA55A && ha->seq != stream_seq){ ha->seq = stream_seq; fA->seq = stream_seq; }
 8017504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017506:	881b      	ldrh	r3, [r3, #0]
 8017508:	b29b      	uxth	r3, r3
 801750a:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 801750e:	4293      	cmp	r3, r2
 8017510:	d10d      	bne.n	801752e <Vendor_Stream_Task+0x876>
 8017512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017514:	685a      	ldr	r2, [r3, #4]
 8017516:	4b1d      	ldr	r3, [pc, #116]	@ (801758c <Vendor_Stream_Task+0x8d4>)
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	429a      	cmp	r2, r3
 801751c:	d007      	beq.n	801752e <Vendor_Stream_Task+0x876>
 801751e:	4b1b      	ldr	r3, [pc, #108]	@ (801758c <Vendor_Stream_Task+0x8d4>)
 8017520:	681a      	ldr	r2, [r3, #0]
 8017522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017524:	605a      	str	r2, [r3, #4]
 8017526:	4b19      	ldr	r3, [pc, #100]	@ (801758c <Vendor_Stream_Task+0x8d4>)
 8017528:	681a      	ldr	r2, [r3, #0]
 801752a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801752c:	609a      	str	r2, [r3, #8]
            }
            VND_LOG("TRY_A len=%u hdr_seq=%lu", (unsigned)fA->frame_size, (unsigned long)((vnd_frame_hdr_t*)fA->buf)->seq);
            if (vnd_transmit_frame(fA->buf, fA->frame_size, 0, 0, "ADC0") == USBD_OK) {
 801752e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017530:	f103 000c 	add.w	r0, r3, #12
 8017534:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017536:	88d9      	ldrh	r1, [r3, #6]
 8017538:	4b1b      	ldr	r3, [pc, #108]	@ (80175a8 <Vendor_Stream_Task+0x8f0>)
 801753a:	9300      	str	r3, [sp, #0]
 801753c:	2300      	movs	r3, #0
 801753e:	2200      	movs	r2, #0
 8017540:	f7fe ffb6 	bl	80164b0 <vnd_transmit_frame>
 8017544:	4603      	mov	r3, r0
 8017546:	2b00      	cmp	r3, #0
 8017548:	d132      	bne.n	80175b0 <Vendor_Stream_Task+0x8f8>
                static uint8_t first_a_logged = 0;
                if(!first_a_logged){ first_a_logged = 1; VND_LOG("FIRST_A queued size=%u", (unsigned)fA->frame_size); }
 801754a:	4b18      	ldr	r3, [pc, #96]	@ (80175ac <Vendor_Stream_Task+0x8f4>)
 801754c:	781b      	ldrb	r3, [r3, #0]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d102      	bne.n	8017558 <Vendor_Stream_Task+0x8a0>
 8017552:	4b16      	ldr	r3, [pc, #88]	@ (80175ac <Vendor_Stream_Task+0x8f4>)
 8017554:	2201      	movs	r2, #1
 8017556:	701a      	strb	r2, [r3, #0]
                fA->st = FB_SENDING; sending_channel = 0;
 8017558:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801755a:	2202      	movs	r2, #2
 801755c:	701a      	strb	r2, [r3, #0]
 801755e:	4b07      	ldr	r3, [pc, #28]	@ (801757c <Vendor_Stream_Task+0x8c4>)
 8017560:	2200      	movs	r2, #0
 8017562:	701a      	strb	r2, [r3, #0]
                /* Ранний запрет STAT между A и B: сразу помечаем ожидание B */
                pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8017564:	4b0e      	ldr	r3, [pc, #56]	@ (80175a0 <Vendor_Stream_Task+0x8e8>)
 8017566:	2201      	movs	r2, #1
 8017568:	701a      	strb	r2, [r3, #0]
 801756a:	f7ed fcab 	bl	8004ec4 <HAL_GetTick>
 801756e:	4603      	mov	r3, r0
 8017570:	4a0c      	ldr	r2, [pc, #48]	@ (80175a4 <Vendor_Stream_Task+0x8ec>)
 8017572:	6013      	str	r3, [r2, #0]
                return;
 8017574:	e108      	b.n	8017788 <Vendor_Stream_Task+0xad0>
 8017576:	bf00      	nop
 8017578:	2400dbb4 	.word	0x2400dbb4
 801757c:	2400004c 	.word	0x2400004c
 8017580:	2400dbf0 	.word	0x2400dbf0
 8017584:	24019ff1 	.word	0x24019ff1
 8017588:	2400f330 	.word	0x2400f330
 801758c:	2400dba4 	.word	0x2400dba4
 8017590:	0801c400 	.word	0x0801c400
 8017594:	2400dc1c 	.word	0x2400dc1c
 8017598:	2400003b 	.word	0x2400003b
 801759c:	2400dbb5 	.word	0x2400dbb5
 80175a0:	24019ff2 	.word	0x24019ff2
 80175a4:	24019ff4 	.word	0x24019ff4
 80175a8:	0801c3cc 	.word	0x0801c3cc
 80175ac:	2401a078 	.word	0x2401a078
                }
            }
#endif
        }
    }
    if(vnd_tick_flag) vnd_tick_flag = 0;
 80175b0:	4b77      	ldr	r3, [pc, #476]	@ (8017790 <Vendor_Stream_Task+0xad8>)
 80175b2:	781b      	ldrb	r3, [r3, #0]
 80175b4:	b2db      	uxtb	r3, r3
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d002      	beq.n	80175c0 <Vendor_Stream_Task+0x908>
 80175ba:	4b75      	ldr	r3, [pc, #468]	@ (8017790 <Vendor_Stream_Task+0xad8>)
 80175bc:	2200      	movs	r2, #0
 80175be:	701a      	strb	r2, [r3, #0]
    if(cur_samples_per_frame == 0 && start_cmd_ms && (now - start_cmd_ms) > VND_DMA_TIMEOUT_MS && !no_dma_status_sent){
 80175c0:	4b74      	ldr	r3, [pc, #464]	@ (8017794 <Vendor_Stream_Task+0xadc>)
 80175c2:	881b      	ldrh	r3, [r3, #0]
 80175c4:	b29b      	uxth	r3, r3
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d126      	bne.n	8017618 <Vendor_Stream_Task+0x960>
 80175ca:	4b73      	ldr	r3, [pc, #460]	@ (8017798 <Vendor_Stream_Task+0xae0>)
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d022      	beq.n	8017618 <Vendor_Stream_Task+0x960>
 80175d2:	4b71      	ldr	r3, [pc, #452]	@ (8017798 <Vendor_Stream_Task+0xae0>)
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80175d8:	1ad3      	subs	r3, r2, r3
 80175da:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80175de:	d91b      	bls.n	8017618 <Vendor_Stream_Task+0x960>
 80175e0:	4b6e      	ldr	r3, [pc, #440]	@ (801779c <Vendor_Stream_Task+0xae4>)
 80175e2:	781b      	ldrb	r3, [r3, #0]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d117      	bne.n	8017618 <Vendor_Stream_Task+0x960>
        adc_stream_debug_t dbg; adc_stream_get_debug(&dbg);
 80175e8:	1d3b      	adds	r3, r7, #4
 80175ea:	4618      	mov	r0, r3
 80175ec:	f7e9 f8d0 	bl	8000790 <adc_stream_get_debug>
        if(dbg.dma_full0 == dma_snapshot_full0 && dbg.dma_full1 == dma_snapshot_full1){ no_dma_status_sent = 1; if(vnd_last_error == 0) vnd_last_error = 1; VND_LOG("ERR DMA_TIMEOUT"); }
 80175f0:	69ba      	ldr	r2, [r7, #24]
 80175f2:	4b6b      	ldr	r3, [pc, #428]	@ (80177a0 <Vendor_Stream_Task+0xae8>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	429a      	cmp	r2, r3
 80175f8:	d10e      	bne.n	8017618 <Vendor_Stream_Task+0x960>
 80175fa:	6a3a      	ldr	r2, [r7, #32]
 80175fc:	4b69      	ldr	r3, [pc, #420]	@ (80177a4 <Vendor_Stream_Task+0xaec>)
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	429a      	cmp	r2, r3
 8017602:	d109      	bne.n	8017618 <Vendor_Stream_Task+0x960>
 8017604:	4b65      	ldr	r3, [pc, #404]	@ (801779c <Vendor_Stream_Task+0xae4>)
 8017606:	2201      	movs	r2, #1
 8017608:	701a      	strb	r2, [r3, #0]
 801760a:	4b67      	ldr	r3, [pc, #412]	@ (80177a8 <Vendor_Stream_Task+0xaf0>)
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	2b00      	cmp	r3, #0
 8017610:	d102      	bne.n	8017618 <Vendor_Stream_Task+0x960>
 8017612:	4b65      	ldr	r3, [pc, #404]	@ (80177a8 <Vendor_Stream_Task+0xaf0>)
 8017614:	2201      	movs	r2, #1
 8017616:	601a      	str	r2, [r3, #0]
    }
    /* Периодическая CDC-статистика по байтам/скорости */
    vnd_cdc_periodic_stats(now);
 8017618:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801761a:	f7fd ff61 	bl	80154e0 <vnd_cdc_periodic_stats>
    /* Периодическое обновление дисплея LCD с информацией о потоке */
    // stream_display_periodic_update();
    /* Небольшой NAK-watchdog: если давно не было завершений — попросим мягкий ресет класса.
       Он выполнится асинхронно и не блокирует EP0. */
    if((now - vnd_last_txcplt_ms) > 1500){
 801761e:	4b63      	ldr	r3, [pc, #396]	@ (80177ac <Vendor_Stream_Task+0xaf4>)
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017624:	1ad3      	subs	r3, r2, r3
 8017626:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 801762a:	4293      	cmp	r3, r2
 801762c:	d904      	bls.n	8017638 <Vendor_Stream_Task+0x980>
        extern void USBD_VND_RequestSoftReset(void);
        USBD_VND_RequestSoftReset();
 801762e:	f001 fa3f 	bl	8018ab0 <USBD_VND_RequestSoftReset>
        vnd_last_txcplt_ms = now; /* предотвратить лавину запросов */
 8017632:	4a5e      	ldr	r2, [pc, #376]	@ (80177ac <Vendor_Stream_Task+0xaf4>)
 8017634:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017636:	6013      	str	r3, [r2, #0]
        VND_LOG("WDG_SOFT_RESET_REQ");
    }
    /* Аварийный keepalive тестом — только в диагностике; в полном режиме не посылаем TEST повторно */
    if(!full_mode){
 8017638:	4b5d      	ldr	r3, [pc, #372]	@ (80177b0 <Vendor_Stream_Task+0xaf8>)
 801763a:	781b      	ldrb	r3, [r3, #0]
 801763c:	b2db      	uxtb	r3, r3
 801763e:	2b00      	cmp	r3, #0
 8017640:	d10b      	bne.n	801765a <Vendor_Stream_Task+0x9a2>
        /* В DIAG режиме можно слать keepalive TEST — оставляем как было. */
    if(dbg_tx_cplt == 0 && (now - start_cmd_ms) > 150 && !vnd_ep_busy){
 8017642:	4b5c      	ldr	r3, [pc, #368]	@ (80177b4 <Vendor_Stream_Task+0xafc>)
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d107      	bne.n	801765a <Vendor_Stream_Task+0x9a2>
 801764a:	4b53      	ldr	r3, [pc, #332]	@ (8017798 <Vendor_Stream_Task+0xae0>)
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017650:	1ad3      	subs	r3, r2, r3
 8017652:	2b96      	cmp	r3, #150	@ 0x96
 8017654:	d901      	bls.n	801765a <Vendor_Stream_Task+0x9a2>
 8017656:	4b58      	ldr	r3, [pc, #352]	@ (80177b8 <Vendor_Stream_Task+0xb00>)
 8017658:	781b      	ldrb	r3, [r3, #0]
    }
    /* Периодический диагностический лог ранней стадии: пока нет ни одного TXCPLT или отсутствует прогресс */
    do {
        static uint32_t last_diag_ms = 0;
        static uint32_t last_diag_txcplt = 0;
        if(now - last_diag_ms > 200){
 801765a:	4b58      	ldr	r3, [pc, #352]	@ (80177bc <Vendor_Stream_Task+0xb04>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017660:	1ad3      	subs	r3, r2, r3
 8017662:	2bc8      	cmp	r3, #200	@ 0xc8
 8017664:	d910      	bls.n	8017688 <Vendor_Stream_Task+0x9d0>
            if(dbg_tx_cplt == 0 || dbg_tx_cplt != last_diag_txcplt){
 8017666:	4b53      	ldr	r3, [pc, #332]	@ (80177b4 <Vendor_Stream_Task+0xafc>)
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d005      	beq.n	801767a <Vendor_Stream_Task+0x9c2>
 801766e:	4b51      	ldr	r3, [pc, #324]	@ (80177b4 <Vendor_Stream_Task+0xafc>)
 8017670:	681a      	ldr	r2, [r3, #0]
 8017672:	4b53      	ldr	r3, [pc, #332]	@ (80177c0 <Vendor_Stream_Task+0xb08>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	429a      	cmp	r2, r3
 8017678:	d003      	beq.n	8017682 <Vendor_Stream_Task+0x9ca>
                /* Получим отладочные счётчики DMA, если доступны */
                VND_LOG("DIAG txcplt=%lu test_sent=%u test_in_flight=%u pendB=%u ep_busy=%u inflight=%u ch=%u ackPend=%u seq=%lu prod=%lu sent0=%lu sent1=%lu wr=%lu rd=%lu metaDepth=%u", (unsigned long)dbg_tx_cplt, (unsigned)test_sent, (unsigned)test_in_flight, (unsigned)pending_B, (unsigned)vnd_ep_busy, (unsigned)vnd_inflight, (unsigned)sending_channel, (unsigned)status_ack_pending, (unsigned long)stream_seq, (unsigned long)dbg_produced_seq, (unsigned long)dbg_sent_ch0_total, (unsigned long)dbg_sent_ch1_total, (unsigned long)frame_wr_seq, (unsigned long)frame_rd_seq, (unsigned)vnd_tx_meta_depth());
                last_diag_txcplt = dbg_tx_cplt;
 801767a:	4b4e      	ldr	r3, [pc, #312]	@ (80177b4 <Vendor_Stream_Task+0xafc>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	4a50      	ldr	r2, [pc, #320]	@ (80177c0 <Vendor_Stream_Task+0xb08>)
 8017680:	6013      	str	r3, [r2, #0]
            }
            last_diag_ms = now;
 8017682:	4a4e      	ldr	r2, [pc, #312]	@ (80177bc <Vendor_Stream_Task+0xb04>)
 8017684:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017686:	6013      	str	r3, [r2, #0]
        }
    } while(0);

    /* Ускоренный watchdog: 600мс без завершений передачи считаем зависанием */
    if(streaming && (now - vnd_last_txcplt_ms) > 600){
 8017688:	4b4e      	ldr	r3, [pc, #312]	@ (80177c4 <Vendor_Stream_Task+0xb0c>)
 801768a:	781b      	ldrb	r3, [r3, #0]
 801768c:	b2db      	uxtb	r3, r3
 801768e:	2b00      	cmp	r3, #0
 8017690:	d07a      	beq.n	8017788 <Vendor_Stream_Task+0xad0>
 8017692:	4b46      	ldr	r3, [pc, #280]	@ (80177ac <Vendor_Stream_Task+0xaf4>)
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017698:	1ad3      	subs	r3, r2, r3
 801769a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 801769e:	d973      	bls.n	8017788 <Vendor_Stream_Task+0xad0>
        VND_LOG("WDG_RESTART (no TXCPLT >600ms) reset test/pendingB");
        /* Полный мягкий сброс внутренней машины, без остановки DMA */
        stream_seq = 0; dbg_produced_seq = 0;
 80176a0:	4b49      	ldr	r3, [pc, #292]	@ (80177c8 <Vendor_Stream_Task+0xb10>)
 80176a2:	2200      	movs	r2, #0
 80176a4:	601a      	str	r2, [r3, #0]
 80176a6:	4b49      	ldr	r3, [pc, #292]	@ (80177cc <Vendor_Stream_Task+0xb14>)
 80176a8:	2200      	movs	r2, #0
 80176aa:	601a      	str	r2, [r3, #0]
        /* ВАЖНО: НЕ сбрасываем cur_samples_per_frame/cur_expected_frame_size,
           чтобы сохранить зафиксированный размер кадра (например, 300 семплов)
           и избежать периодов с cur_samples=0 в STAT после быстрого рестарта. */
        vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0; sending_channel = 0xFF; pending_B = 0; pending_B_since_ms = 0;
 80176ac:	4b42      	ldr	r3, [pc, #264]	@ (80177b8 <Vendor_Stream_Task+0xb00>)
 80176ae:	2200      	movs	r2, #0
 80176b0:	701a      	strb	r2, [r3, #0]
 80176b2:	4b47      	ldr	r3, [pc, #284]	@ (80177d0 <Vendor_Stream_Task+0xb18>)
 80176b4:	2201      	movs	r2, #1
 80176b6:	701a      	strb	r2, [r3, #0]
 80176b8:	4b46      	ldr	r3, [pc, #280]	@ (80177d4 <Vendor_Stream_Task+0xb1c>)
 80176ba:	2200      	movs	r2, #0
 80176bc:	701a      	strb	r2, [r3, #0]
 80176be:	4b46      	ldr	r3, [pc, #280]	@ (80177d8 <Vendor_Stream_Task+0xb20>)
 80176c0:	22ff      	movs	r2, #255	@ 0xff
 80176c2:	701a      	strb	r2, [r3, #0]
 80176c4:	4b45      	ldr	r3, [pc, #276]	@ (80177dc <Vendor_Stream_Task+0xb24>)
 80176c6:	2200      	movs	r2, #0
 80176c8:	701a      	strb	r2, [r3, #0]
 80176ca:	4b45      	ldr	r3, [pc, #276]	@ (80177e0 <Vendor_Stream_Task+0xb28>)
 80176cc:	2200      	movs	r2, #0
 80176ce:	601a      	str	r2, [r3, #0]
        /* TEST всегда считаем выполненным, даже если VND_DISABLE_TEST=0, чтобы не блокировать A/B */
        test_sent = 1; test_in_flight = 0;
 80176d0:	4b44      	ldr	r3, [pc, #272]	@ (80177e4 <Vendor_Stream_Task+0xb2c>)
 80176d2:	2201      	movs	r2, #1
 80176d4:	701a      	strb	r2, [r3, #0]
 80176d6:	4b44      	ldr	r3, [pc, #272]	@ (80177e8 <Vendor_Stream_Task+0xb30>)
 80176d8:	2200      	movs	r2, #0
 80176da:	701a      	strb	r2, [r3, #0]
        start_ack_done = 1; status_ack_pending = 0;
 80176dc:	4b43      	ldr	r3, [pc, #268]	@ (80177ec <Vendor_Stream_Task+0xb34>)
 80176de:	2201      	movs	r2, #1
 80176e0:	701a      	strb	r2, [r3, #0]
 80176e2:	4b43      	ldr	r3, [pc, #268]	@ (80177f0 <Vendor_Stream_Task+0xb38>)
 80176e4:	2200      	movs	r2, #0
 80176e6:	701a      	strb	r2, [r3, #0]
        vnd_last_txcplt_ms = now;
 80176e8:	4a30      	ldr	r2, [pc, #192]	@ (80177ac <Vendor_Stream_Task+0xaf4>)
 80176ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80176ec:	6013      	str	r3, [r2, #0]
        vnd_tx_meta_head = vnd_tx_meta_tail = 0; meta_push_total = meta_pop_total = meta_empty_events = meta_overflow_events = 0; /* clear FIFO */
 80176ee:	4b41      	ldr	r3, [pc, #260]	@ (80177f4 <Vendor_Stream_Task+0xb3c>)
 80176f0:	2200      	movs	r2, #0
 80176f2:	701a      	strb	r2, [r3, #0]
 80176f4:	4b3f      	ldr	r3, [pc, #252]	@ (80177f4 <Vendor_Stream_Task+0xb3c>)
 80176f6:	781a      	ldrb	r2, [r3, #0]
 80176f8:	4b3f      	ldr	r3, [pc, #252]	@ (80177f8 <Vendor_Stream_Task+0xb40>)
 80176fa:	701a      	strb	r2, [r3, #0]
 80176fc:	4b3f      	ldr	r3, [pc, #252]	@ (80177fc <Vendor_Stream_Task+0xb44>)
 80176fe:	2200      	movs	r2, #0
 8017700:	601a      	str	r2, [r3, #0]
 8017702:	4b3e      	ldr	r3, [pc, #248]	@ (80177fc <Vendor_Stream_Task+0xb44>)
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	4a3e      	ldr	r2, [pc, #248]	@ (8017800 <Vendor_Stream_Task+0xb48>)
 8017708:	6013      	str	r3, [r2, #0]
 801770a:	4b3d      	ldr	r3, [pc, #244]	@ (8017800 <Vendor_Stream_Task+0xb48>)
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	4a3d      	ldr	r2, [pc, #244]	@ (8017804 <Vendor_Stream_Task+0xb4c>)
 8017710:	6013      	str	r3, [r2, #0]
 8017712:	4b3c      	ldr	r3, [pc, #240]	@ (8017804 <Vendor_Stream_Task+0xb4c>)
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	4a3c      	ldr	r2, [pc, #240]	@ (8017808 <Vendor_Stream_Task+0xb50>)
 8017718:	6013      	str	r3, [r2, #0]
        /* Сбросить все пары в g_frames в FB_FILL состояние */
        for(unsigned i = 0; i < VND_PAIR_BUFFERS; i++){
 801771a:	2300      	movs	r3, #0
 801771c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801771e:	e016      	b.n	801774e <Vendor_Stream_Task+0xa96>
            g_frames[i][0].st = FB_FILL;
 8017720:	4a3a      	ldr	r2, [pc, #232]	@ (801780c <Vendor_Stream_Task+0xb54>)
 8017722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017724:	f241 5198 	movw	r1, #5528	@ 0x1598
 8017728:	fb01 f303 	mul.w	r3, r1, r3
 801772c:	4413      	add	r3, r2
 801772e:	2200      	movs	r2, #0
 8017730:	701a      	strb	r2, [r3, #0]
            g_frames[i][1].st = FB_FILL;
 8017732:	4a36      	ldr	r2, [pc, #216]	@ (801780c <Vendor_Stream_Task+0xb54>)
 8017734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017736:	f241 5198 	movw	r1, #5528	@ 0x1598
 801773a:	fb01 f303 	mul.w	r3, r1, r3
 801773e:	4413      	add	r3, r2
 8017740:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8017744:	2200      	movs	r2, #0
 8017746:	701a      	strb	r2, [r3, #0]
        for(unsigned i = 0; i < VND_PAIR_BUFFERS; i++){
 8017748:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801774a:	3301      	adds	r3, #1
 801774c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801774e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017750:	2b07      	cmp	r3, #7
 8017752:	d9e5      	bls.n	8017720 <Vendor_Stream_Task+0xa68>
        }
        pair_fill_idx = 0;
 8017754:	4b2e      	ldr	r3, [pc, #184]	@ (8017810 <Vendor_Stream_Task+0xb58>)
 8017756:	2200      	movs	r2, #0
 8017758:	701a      	strb	r2, [r3, #0]
        pair_send_idx = 0;
 801775a:	4b2e      	ldr	r3, [pc, #184]	@ (8017814 <Vendor_Stream_Task+0xb5c>)
 801775c:	2200      	movs	r2, #0
 801775e:	701a      	strb	r2, [r3, #0]
        /* Разрешаем немедленный запуск следующей пары и готовим её прямо сейчас */
        next_seq_to_assign = stream_seq;
 8017760:	4b19      	ldr	r3, [pc, #100]	@ (80177c8 <Vendor_Stream_Task+0xb10>)
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	4a2c      	ldr	r2, [pc, #176]	@ (8017818 <Vendor_Stream_Task+0xb60>)
 8017766:	6013      	str	r3, [r2, #0]
        vnd_next_pair_ms = now; /* не ждать периода */
 8017768:	4a2c      	ldr	r2, [pc, #176]	@ (801781c <Vendor_Stream_Task+0xb64>)
 801776a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801776c:	6013      	str	r3, [r2, #0]
        vnd_prepare_pair();
 801776e:	f7fe fc7f 	bl	8016070 <vnd_prepare_pair>
        vnd_tx_kick = 1;
 8017772:	4b2b      	ldr	r3, [pc, #172]	@ (8017820 <Vendor_Stream_Task+0xb68>)
 8017774:	2201      	movs	r2, #1
 8017776:	701a      	strb	r2, [r3, #0]
 8017778:	e006      	b.n	8017788 <Vendor_Stream_Task+0xad0>
        return; /* ждём TxCplt ACK-STOP */
 801777a:	bf00      	nop
 801777c:	e004      	b.n	8017788 <Vendor_Stream_Task+0xad0>
                if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 801777e:	bf00      	nop
 8017780:	e002      	b.n	8017788 <Vendor_Stream_Task+0xad0>
    if(!full_mode){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 8017782:	bf00      	nop
 8017784:	e000      	b.n	8017788 <Vendor_Stream_Task+0xad0>
            if(vnd_ep_busy){ if(vnd_tick_flag) vnd_tick_flag = 0; return; }
 8017786:	bf00      	nop
    }

    /* Если нет прогресса — не синтезируем кадры; ждём реальные данные от АЦП */
}
 8017788:	3778      	adds	r7, #120	@ 0x78
 801778a:	46bd      	mov	sp, r7
 801778c:	bd80      	pop	{r7, pc}
 801778e:	bf00      	nop
 8017790:	2401a06c 	.word	0x2401a06c
 8017794:	2400dba8 	.word	0x2400dba8
 8017798:	2400dbac 	.word	0x2400dbac
 801779c:	2400dc0c 	.word	0x2400dc0c
 80177a0:	2400dc04 	.word	0x2400dc04
 80177a4:	2400dc08 	.word	0x2400dc08
 80177a8:	2400dbb0 	.word	0x2400dbb0
 80177ac:	2400dbf0 	.word	0x2400dbf0
 80177b0:	2400003c 	.word	0x2400003c
 80177b4:	2400dbe4 	.word	0x2400dbe4
 80177b8:	2400dbb4 	.word	0x2400dbb4
 80177bc:	2401a07c 	.word	0x2401a07c
 80177c0:	2401a080 	.word	0x2401a080
 80177c4:	2400dba0 	.word	0x2400dba0
 80177c8:	2400dba4 	.word	0x2400dba4
 80177cc:	2400dbb8 	.word	0x2400dbb8
 80177d0:	2400003b 	.word	0x2400003b
 80177d4:	2400dbb5 	.word	0x2400dbb5
 80177d8:	2400004c 	.word	0x2400004c
 80177dc:	24019ff2 	.word	0x24019ff2
 80177e0:	24019ff4 	.word	0x24019ff4
 80177e4:	2400dbb6 	.word	0x2400dbb6
 80177e8:	2400dbb7 	.word	0x2400dbb7
 80177ec:	2400dc55 	.word	0x2400dc55
 80177f0:	2400dc56 	.word	0x2400dc56
 80177f4:	2401a059 	.word	0x2401a059
 80177f8:	2401a058 	.word	0x2401a058
 80177fc:	2401a068 	.word	0x2401a068
 8017800:	2401a064 	.word	0x2401a064
 8017804:	2401a060 	.word	0x2401a060
 8017808:	2401a05c 	.word	0x2401a05c
 801780c:	2400f330 	.word	0x2400f330
 8017810:	24019ff0 	.word	0x24019ff0
 8017814:	24019ff1 	.word	0x24019ff1
 8017818:	2400dbe8 	.word	0x2400dbe8
 801781c:	2400dc3c 	.word	0x2400dc3c
 8017820:	2400dc50 	.word	0x2400dc50

08017824 <USBD_VND_TxCplt>:

/* Обработчик завершения передачи */
void USBD_VND_TxCplt(void)
{
 8017824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017828:	b0a6      	sub	sp, #152	@ 0x98
 801782a:	af02      	add	r7, sp, #8
    uint8_t prev_sending = sending_channel;
 801782c:	4baa      	ldr	r3, [pc, #680]	@ (8017ad8 <USBD_VND_TxCplt+0x2b4>)
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    dbg_tx_cplt++;
 8017834:	4ba9      	ldr	r3, [pc, #676]	@ (8017adc <USBD_VND_TxCplt+0x2b8>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	1c5a      	adds	r2, r3, #1
 801783a:	4ba8      	ldr	r3, [pc, #672]	@ (8017adc <USBD_VND_TxCplt+0x2b8>)
 801783c:	601a      	str	r2, [r3, #0]
    vnd_tx_ready = 1;
 801783e:	4aa8      	ldr	r2, [pc, #672]	@ (8017ae0 <USBD_VND_TxCplt+0x2bc>)
 8017840:	2301      	movs	r3, #1
 8017842:	7013      	strb	r3, [r2, #0]
    vnd_ep_busy = 0;
 8017844:	4aa7      	ldr	r2, [pc, #668]	@ (8017ae4 <USBD_VND_TxCplt+0x2c0>)
 8017846:	2300      	movs	r3, #0
 8017848:	7013      	strb	r3, [r2, #0]
    vnd_inflight = 0;
 801784a:	4aa7      	ldr	r2, [pc, #668]	@ (8017ae8 <USBD_VND_TxCplt+0x2c4>)
 801784c:	2300      	movs	r3, #0
 801784e:	7013      	strb	r3, [r2, #0]
    vnd_last_txcplt_ms = HAL_GetTick();
 8017850:	f7ed fb38 	bl	8004ec4 <HAL_GetTick>
 8017854:	4602      	mov	r2, r0
 8017856:	4ba5      	ldr	r3, [pc, #660]	@ (8017aec <USBD_VND_TxCplt+0x2c8>)
 8017858:	601a      	str	r2, [r3, #0]
    VND_LOG("TXCPLT len=%u dt=%lums depth=%u push=%lu pop=%lu empty=%lu ovf=%lu", (unsigned)vnd_last_tx_len,
        (unsigned long)(HAL_GetTick() - vnd_last_tx_start_ms), (unsigned)vnd_tx_meta_depth(),
        (unsigned long)meta_push_total, (unsigned long)meta_pop_total, (unsigned long)meta_empty_events, (unsigned long)meta_overflow_events);
    vnd_total_tx_bytes += vnd_last_tx_len; /* учитывать и тестовые, и статусные, и рабочие */
 801785a:	4ba5      	ldr	r3, [pc, #660]	@ (8017af0 <USBD_VND_TxCplt+0x2cc>)
 801785c:	881b      	ldrh	r3, [r3, #0]
 801785e:	b29b      	uxth	r3, r3
 8017860:	b29b      	uxth	r3, r3
 8017862:	2200      	movs	r2, #0
 8017864:	461c      	mov	r4, r3
 8017866:	4615      	mov	r5, r2
 8017868:	4ba2      	ldr	r3, [pc, #648]	@ (8017af4 <USBD_VND_TxCplt+0x2d0>)
 801786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801786e:	eb14 0802 	adds.w	r8, r4, r2
 8017872:	eb45 0903 	adc.w	r9, r5, r3
 8017876:	4b9f      	ldr	r3, [pc, #636]	@ (8017af4 <USBD_VND_TxCplt+0x2d0>)
 8017878:	e9c3 8900 	strd	r8, r9, [r3]
    /* Зафиксировать завершение стартового ACK (если был) */
    if(start_stat_inflight){ start_stat_inflight = 0; start_ack_done = 1; }
 801787c:	4b9e      	ldr	r3, [pc, #632]	@ (8017af8 <USBD_VND_TxCplt+0x2d4>)
 801787e:	781b      	ldrb	r3, [r3, #0]
 8017880:	b2db      	uxtb	r3, r3
 8017882:	2b00      	cmp	r3, #0
 8017884:	d005      	beq.n	8017892 <USBD_VND_TxCplt+0x6e>
 8017886:	4a9c      	ldr	r2, [pc, #624]	@ (8017af8 <USBD_VND_TxCplt+0x2d4>)
 8017888:	2300      	movs	r3, #0
 801788a:	7013      	strb	r3, [r2, #0]
 801788c:	4a9b      	ldr	r2, [pc, #620]	@ (8017afc <USBD_VND_TxCplt+0x2d8>)
 801788e:	2301      	movs	r3, #1
 8017890:	7013      	strb	r3, [r2, #0]

    /* Надёжная классификация завершившегося буфера (приоритет inflight_* затем meta FIFO) */
    vnd_tx_meta_t meta; int have_meta = vnd_tx_meta_pop(&meta);
 8017892:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8017896:	4618      	mov	r0, r3
 8017898:	f7fd fee4 	bl	8015664 <vnd_tx_meta_pop>
 801789c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    uint8_t eff_is_frame = 0; uint8_t eff_flags = 0; uint32_t eff_seq = 0;
 80178a0:	2300      	movs	r3, #0
 80178a2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80178a6:	2300      	movs	r3, #0
 80178a8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 80178ac:	2300      	movs	r3, #0
 80178ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if(inflight_is_frame){ eff_is_frame = 1; eff_flags = inflight_flags; eff_seq = inflight_seq; }
 80178b2:	4b93      	ldr	r3, [pc, #588]	@ (8017b00 <USBD_VND_TxCplt+0x2dc>)
 80178b4:	781b      	ldrb	r3, [r3, #0]
 80178b6:	b2db      	uxtb	r3, r3
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d00b      	beq.n	80178d4 <USBD_VND_TxCplt+0xb0>
 80178bc:	2301      	movs	r3, #1
 80178be:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80178c2:	4b90      	ldr	r3, [pc, #576]	@ (8017b04 <USBD_VND_TxCplt+0x2e0>)
 80178c4:	781b      	ldrb	r3, [r3, #0]
 80178c6:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 80178ca:	4b8f      	ldr	r3, [pc, #572]	@ (8017b08 <USBD_VND_TxCplt+0x2e4>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80178d2:	e026      	b.n	8017922 <USBD_VND_TxCplt+0xfe>
    else if(have_meta && meta.is_frame){ eff_is_frame = 1; eff_flags = meta.flags; eff_seq = meta.seq_field; }
 80178d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d00e      	beq.n	80178fa <USBD_VND_TxCplt+0xd6>
 80178dc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d00a      	beq.n	80178fa <USBD_VND_TxCplt+0xd6>
 80178e4:	2301      	movs	r3, #1
 80178e6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80178ea:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80178ee:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 80178f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80178f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80178f8:	e013      	b.n	8017922 <USBD_VND_TxCplt+0xfe>
    else if(have_meta){ eff_is_frame = 0; }
 80178fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d003      	beq.n	801790a <USBD_VND_TxCplt+0xe6>
 8017902:	2300      	movs	r3, #0
 8017904:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8017908:	e00b      	b.n	8017922 <USBD_VND_TxCplt+0xfe>
    else { eff_is_frame = last_tx_is_frame; eff_flags = last_tx_flags; eff_seq = last_tx_seq; }
 801790a:	4b80      	ldr	r3, [pc, #512]	@ (8017b0c <USBD_VND_TxCplt+0x2e8>)
 801790c:	781b      	ldrb	r3, [r3, #0]
 801790e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8017912:	4b7f      	ldr	r3, [pc, #508]	@ (8017b10 <USBD_VND_TxCplt+0x2ec>)
 8017914:	781b      	ldrb	r3, [r3, #0]
 8017916:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 801791a:	4b7e      	ldr	r3, [pc, #504]	@ (8017b14 <USBD_VND_TxCplt+0x2f0>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    inflight_is_frame = 0; inflight_flags = 0; inflight_seq = 0;
 8017922:	4a77      	ldr	r2, [pc, #476]	@ (8017b00 <USBD_VND_TxCplt+0x2dc>)
 8017924:	2300      	movs	r3, #0
 8017926:	7013      	strb	r3, [r2, #0]
 8017928:	4a76      	ldr	r2, [pc, #472]	@ (8017b04 <USBD_VND_TxCplt+0x2e0>)
 801792a:	2300      	movs	r3, #0
 801792c:	7013      	strb	r3, [r2, #0]
 801792e:	4a76      	ldr	r2, [pc, #472]	@ (8017b08 <USBD_VND_TxCplt+0x2e4>)
 8017930:	2300      	movs	r3, #0
 8017932:	6013      	str	r3, [r2, #0]
    VND_LOG("TXCPLT_CLASS is_frame=%u fl=0x%02X seq=%lu depth_now=%u (meta_have=%d)", (unsigned)eff_is_frame, (unsigned)eff_flags, (unsigned long)eff_seq, (unsigned)vnd_tx_meta_depth(), have_meta);

    /* Если это был ACK на STOP — после него переводим систему в остановленное состояние */
    if(stop_stat_inflight){
 8017934:	4b78      	ldr	r3, [pc, #480]	@ (8017b18 <USBD_VND_TxCplt+0x2f4>)
 8017936:	781b      	ldrb	r3, [r3, #0]
 8017938:	b2db      	uxtb	r3, r3
 801793a:	2b00      	cmp	r3, #0
 801793c:	d054      	beq.n	80179e8 <USBD_VND_TxCplt+0x1c4>
        stop_stat_inflight = 0;
 801793e:	4b76      	ldr	r3, [pc, #472]	@ (8017b18 <USBD_VND_TxCplt+0x2f4>)
 8017940:	2200      	movs	r2, #0
 8017942:	701a      	strb	r2, [r3, #0]
        stop_request = 0;
 8017944:	4b75      	ldr	r3, [pc, #468]	@ (8017b1c <USBD_VND_TxCplt+0x2f8>)
 8017946:	2200      	movs	r2, #0
 8017948:	701a      	strb	r2, [r3, #0]
        if(streaming){ streaming = 0; VND_LOG("STOP_STREAM after STAT"); }
 801794a:	4b75      	ldr	r3, [pc, #468]	@ (8017b20 <USBD_VND_TxCplt+0x2fc>)
 801794c:	781b      	ldrb	r3, [r3, #0]
 801794e:	b2db      	uxtb	r3, r3
 8017950:	2b00      	cmp	r3, #0
 8017952:	d002      	beq.n	801795a <USBD_VND_TxCplt+0x136>
 8017954:	4b72      	ldr	r3, [pc, #456]	@ (8017b20 <USBD_VND_TxCplt+0x2fc>)
 8017956:	2200      	movs	r2, #0
 8017958:	701a      	strb	r2, [r3, #0]
        diag_mode_active = 0;
 801795a:	4b72      	ldr	r3, [pc, #456]	@ (8017b24 <USBD_VND_TxCplt+0x300>)
 801795c:	2200      	movs	r2, #0
 801795e:	701a      	strb	r2, [r3, #0]
        vnd_reset_buffers();
 8017960:	f7fe f8d8 	bl	8015b14 <vnd_reset_buffers>
        sending_channel = 0xFF; pending_B = 0; test_sent = 0; test_in_flight = 0; vnd_inflight = 0;
 8017964:	4b5c      	ldr	r3, [pc, #368]	@ (8017ad8 <USBD_VND_TxCplt+0x2b4>)
 8017966:	22ff      	movs	r2, #255	@ 0xff
 8017968:	701a      	strb	r2, [r3, #0]
 801796a:	4b6f      	ldr	r3, [pc, #444]	@ (8017b28 <USBD_VND_TxCplt+0x304>)
 801796c:	2200      	movs	r2, #0
 801796e:	701a      	strb	r2, [r3, #0]
 8017970:	4b6e      	ldr	r3, [pc, #440]	@ (8017b2c <USBD_VND_TxCplt+0x308>)
 8017972:	2200      	movs	r2, #0
 8017974:	701a      	strb	r2, [r3, #0]
 8017976:	4b6e      	ldr	r3, [pc, #440]	@ (8017b30 <USBD_VND_TxCplt+0x30c>)
 8017978:	2200      	movs	r2, #0
 801797a:	701a      	strb	r2, [r3, #0]
 801797c:	4b5a      	ldr	r3, [pc, #360]	@ (8017ae8 <USBD_VND_TxCplt+0x2c4>)
 801797e:	2200      	movs	r2, #0
 8017980:	701a      	strb	r2, [r3, #0]
        /* Останавливаем DMA и сбрасываем буферы */
        extern void adc_stream_stop(void);
        adc_stream_stop();
 8017982:	f7e8 fd37 	bl	80003f4 <adc_stream_stop>
        /* Индикация STOP: погасить пин Data_ready и вывести CDC-событие */
        HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_RESET);
 8017986:	2200      	movs	r2, #0
 8017988:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801798c:	4869      	ldr	r0, [pc, #420]	@ (8017b34 <USBD_VND_TxCplt+0x310>)
 801798e:	f7f2 fb55 	bl	800a03c <HAL_GPIO_WritePin>
        {
            uint64_t cur = vnd_total_tx_bytes;
 8017992:	4b58      	ldr	r3, [pc, #352]	@ (8017af4 <USBD_VND_TxCplt+0x2d0>)
 8017994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017998:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
            uint64_t delta = (cur >= vnd_tx_bytes_at_start) ? (cur - vnd_tx_bytes_at_start) : 0ULL;
 801799c:	4b66      	ldr	r3, [pc, #408]	@ (8017b38 <USBD_VND_TxCplt+0x314>)
 801799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80179a6:	4290      	cmp	r0, r2
 80179a8:	eb71 0303 	sbcs.w	r3, r1, r3
 80179ac:	d309      	bcc.n	80179c2 <USBD_VND_TxCplt+0x19e>
 80179ae:	4b62      	ldr	r3, [pc, #392]	@ (8017b38 <USBD_VND_TxCplt+0x314>)
 80179b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179b4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80179b8:	ebb0 0a02 	subs.w	sl, r0, r2
 80179bc:	eb61 0b03 	sbc.w	fp, r1, r3
 80179c0:	e003      	b.n	80179ca <USBD_VND_TxCplt+0x1a6>
 80179c2:	f04f 0a00 	mov.w	sl, #0
 80179c6:	f04f 0b00 	mov.w	fp, #0
 80179ca:	e9c7 ab14 	strd	sl, fp, [r7, #80]	@ 0x50
            cdc_logf("EVT STOP total=%llu delta=%llu", (unsigned long long)cur, (unsigned long long)delta);
 80179ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80179d2:	e9cd 2300 	strd	r2, r3, [sp]
 80179d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80179da:	4858      	ldr	r0, [pc, #352]	@ (8017b3c <USBD_VND_TxCplt+0x318>)
 80179dc:	f7fd fd4e 	bl	801547c <cdc_logf>
        }
        vnd_tx_kick = 1; /* пнуть таск на всякий случай */
 80179e0:	4b57      	ldr	r3, [pc, #348]	@ (8017b40 <USBD_VND_TxCplt+0x31c>)
 80179e2:	2201      	movs	r2, #1
 80179e4:	701a      	strb	r2, [r3, #0]
        return;
 80179e6:	e310      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
    }
    if(test_in_flight)
 80179e8:	4b51      	ldr	r3, [pc, #324]	@ (8017b30 <USBD_VND_TxCplt+0x30c>)
 80179ea:	781b      	ldrb	r3, [r3, #0]
 80179ec:	b2db      	uxtb	r3, r3
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d00b      	beq.n	8017a0a <USBD_VND_TxCplt+0x1e6>
    {
        test_in_flight = 0;
 80179f2:	4b4f      	ldr	r3, [pc, #316]	@ (8017b30 <USBD_VND_TxCplt+0x30c>)
 80179f4:	2200      	movs	r2, #0
 80179f6:	701a      	strb	r2, [r3, #0]
        test_sent = 1; /* помечаем тест выполненным ровно один раз, не сбрасывать вне START */
 80179f8:	4b4c      	ldr	r3, [pc, #304]	@ (8017b2c <USBD_VND_TxCplt+0x308>)
 80179fa:	2201      	movs	r2, #1
 80179fc:	701a      	strb	r2, [r3, #0]
        first_test_sent_ms = HAL_GetTick();
 80179fe:	f7ed fa61 	bl	8004ec4 <HAL_GetTick>
 8017a02:	4603      	mov	r3, r0
 8017a04:	4a4f      	ldr	r2, [pc, #316]	@ (8017b44 <USBD_VND_TxCplt+0x320>)
 8017a06:	6013      	str	r3, [r2, #0]
        VND_LOG("TEST_TXCPLT");
        return;
 8017a08:	e2ff      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
    }
    if(!streaming){ vnd_tx_kick = 1; return; }
 8017a0a:	4b45      	ldr	r3, [pc, #276]	@ (8017b20 <USBD_VND_TxCplt+0x2fc>)
 8017a0c:	781b      	ldrb	r3, [r3, #0]
 8017a0e:	b2db      	uxtb	r3, r3
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d103      	bne.n	8017a1c <USBD_VND_TxCplt+0x1f8>
 8017a14:	4b4a      	ldr	r3, [pc, #296]	@ (8017b40 <USBD_VND_TxCplt+0x31c>)
 8017a16:	2201      	movs	r2, #1
 8017a18:	701a      	strb	r2, [r3, #0]
 8017a1a:	e2f6      	b.n	801800a <USBD_VND_TxCplt+0x7e6>

    /* Диагностический режим: используем eff_flags для точной классификации (устраняет гонку по sending_channel) */
    if(diag_mode_active){
 8017a1c:	4b41      	ldr	r3, [pc, #260]	@ (8017b24 <USBD_VND_TxCplt+0x300>)
 8017a1e:	781b      	ldrb	r3, [r3, #0]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	f000 8110 	beq.w	8017c46 <USBD_VND_TxCplt+0x422>
        if(!eff_is_frame){
 8017a26:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d103      	bne.n	8017a36 <USBD_VND_TxCplt+0x212>
            /* STAT/ZLP — просто продолжим */
            vnd_tx_kick = 1; return;
 8017a2e:	4b44      	ldr	r3, [pc, #272]	@ (8017b40 <USBD_VND_TxCplt+0x31c>)
 8017a30:	2201      	movs	r2, #1
 8017a32:	701a      	strb	r2, [r3, #0]
 8017a34:	e2e9      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
        }
        if(eff_flags == 0x01){
 8017a36:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8017a3a:	2b01      	cmp	r3, #1
 8017a3c:	f040 8094 	bne.w	8017b68 <USBD_VND_TxCplt+0x344>
            /* Завершился A: считаем и просим отправить B */
            dbg_tx_sent++; dbg_sent_ch0_total++; dbg_sent_seq_adc0++;
 8017a40:	4b41      	ldr	r3, [pc, #260]	@ (8017b48 <USBD_VND_TxCplt+0x324>)
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	3301      	adds	r3, #1
 8017a46:	4a40      	ldr	r2, [pc, #256]	@ (8017b48 <USBD_VND_TxCplt+0x324>)
 8017a48:	6013      	str	r3, [r2, #0]
 8017a4a:	4b40      	ldr	r3, [pc, #256]	@ (8017b4c <USBD_VND_TxCplt+0x328>)
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	3301      	adds	r3, #1
 8017a50:	4a3e      	ldr	r2, [pc, #248]	@ (8017b4c <USBD_VND_TxCplt+0x328>)
 8017a52:	6013      	str	r3, [r2, #0]
 8017a54:	4b3e      	ldr	r3, [pc, #248]	@ (8017b50 <USBD_VND_TxCplt+0x32c>)
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	3301      	adds	r3, #1
 8017a5a:	4a3d      	ldr	r2, [pc, #244]	@ (8017b50 <USBD_VND_TxCplt+0x32c>)
 8017a5c:	6013      	str	r3, [r2, #0]
            /* В DIAG считаем семплы по текущему размеру кадра */
            vnd_total_tx_samples += (uint64_t)((cur_samples_per_frame != 0) ? cur_samples_per_frame : diag_samples);
 8017a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8017b54 <USBD_VND_TxCplt+0x330>)
 8017a60:	881b      	ldrh	r3, [r3, #0]
 8017a62:	b29b      	uxth	r3, r3
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d007      	beq.n	8017a78 <USBD_VND_TxCplt+0x254>
 8017a68:	4b3a      	ldr	r3, [pc, #232]	@ (8017b54 <USBD_VND_TxCplt+0x330>)
 8017a6a:	881b      	ldrh	r3, [r3, #0]
 8017a6c:	b29b      	uxth	r3, r3
 8017a6e:	b29b      	uxth	r3, r3
 8017a70:	2200      	movs	r2, #0
 8017a72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017a74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8017a76:	e005      	b.n	8017a84 <USBD_VND_TxCplt+0x260>
 8017a78:	4b37      	ldr	r3, [pc, #220]	@ (8017b58 <USBD_VND_TxCplt+0x334>)
 8017a7a:	881b      	ldrh	r3, [r3, #0]
 8017a7c:	b29b      	uxth	r3, r3
 8017a7e:	2200      	movs	r2, #0
 8017a80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017a82:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8017a84:	4b35      	ldr	r3, [pc, #212]	@ (8017b5c <USBD_VND_TxCplt+0x338>)
 8017a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a8a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8017a8e:	4621      	mov	r1, r4
 8017a90:	1889      	adds	r1, r1, r2
 8017a92:	62b9      	str	r1, [r7, #40]	@ 0x28
 8017a94:	4629      	mov	r1, r5
 8017a96:	eb43 0101 	adc.w	r1, r3, r1
 8017a9a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8017a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8017b5c <USBD_VND_TxCplt+0x338>)
 8017a9e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8017aa2:	e9c3 1200 	strd	r1, r2, [r3]
            sending_channel = 0; /* завершили A */
 8017aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8017ad8 <USBD_VND_TxCplt+0x2b4>)
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	701a      	strb	r2, [r3, #0]
            pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8017aac:	4b1e      	ldr	r3, [pc, #120]	@ (8017b28 <USBD_VND_TxCplt+0x304>)
 8017aae:	2201      	movs	r2, #1
 8017ab0:	701a      	strb	r2, [r3, #0]
 8017ab2:	f7ed fa07 	bl	8004ec4 <HAL_GetTick>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	4a29      	ldr	r2, [pc, #164]	@ (8017b60 <USBD_VND_TxCplt+0x33c>)
 8017aba:	6013      	str	r3, [r2, #0]
            /* Зафиксируем seq этой пары для B */
            diag_current_pair_seq = eff_seq;
 8017abc:	4a29      	ldr	r2, [pc, #164]	@ (8017b64 <USBD_VND_TxCplt+0x340>)
 8017abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017ac2:	6013      	str	r3, [r2, #0]
            /* Немедленно пытаемся отправить B, чтобы убрать паузу между A и B */
            if(!vnd_try_send_B_immediate()){
 8017ac4:	f7fe ff68 	bl	8016998 <vnd_try_send_B_immediate>
 8017ac8:	4603      	mov	r3, r0
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	f040 8296 	bne.w	8017ffc <USBD_VND_TxCplt+0x7d8>
                /* печать в CDC отключена для максимальной скорости */
                vnd_tx_kick = 1; return;
 8017ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8017b40 <USBD_VND_TxCplt+0x31c>)
 8017ad2:	2201      	movs	r2, #1
 8017ad4:	701a      	strb	r2, [r3, #0]
 8017ad6:	e298      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
 8017ad8:	2400004c 	.word	0x2400004c
 8017adc:	2400dbe4 	.word	0x2400dbe4
 8017ae0:	2400003b 	.word	0x2400003b
 8017ae4:	2400dbb4 	.word	0x2400dbb4
 8017ae8:	2400dbb5 	.word	0x2400dbb5
 8017aec:	2400dbf0 	.word	0x2400dbf0
 8017af0:	2400dc18 	.word	0x2400dc18
 8017af4:	2400dc30 	.word	0x2400dc30
 8017af8:	2400dc54 	.word	0x2400dc54
 8017afc:	2400dc55 	.word	0x2400dc55
 8017b00:	2400dc28 	.word	0x2400dc28
 8017b04:	2400dc29 	.word	0x2400dc29
 8017b08:	2400dc2c 	.word	0x2400dc2c
 8017b0c:	2400dc20 	.word	0x2400dc20
 8017b10:	2400dc21 	.word	0x2400dc21
 8017b14:	2400dc24 	.word	0x2400dc24
 8017b18:	2400dc58 	.word	0x2400dc58
 8017b1c:	2400dc57 	.word	0x2400dc57
 8017b20:	2400dba0 	.word	0x2400dba0
 8017b24:	2400dced 	.word	0x2400dced
 8017b28:	24019ff2 	.word	0x24019ff2
 8017b2c:	2400dbb6 	.word	0x2400dbb6
 8017b30:	2400dbb7 	.word	0x2400dbb7
 8017b34:	58020c00 	.word	0x58020c00
 8017b38:	2400dc48 	.word	0x2400dc48
 8017b3c:	0801c40c 	.word	0x0801c40c
 8017b40:	2400dc50 	.word	0x2400dc50
 8017b44:	2400dc00 	.word	0x2400dc00
 8017b48:	2400dbd8 	.word	0x2400dbd8
 8017b4c:	2400dbdc 	.word	0x2400dbdc
 8017b50:	2400dbbc 	.word	0x2400dbbc
 8017b54:	2400dba8 	.word	0x2400dba8
 8017b58:	24000042 	.word	0x24000042
 8017b5c:	2400dbf8 	.word	0x2400dbf8
 8017b60:	24019ff4 	.word	0x24019ff4
 8017b64:	24000048 	.word	0x24000048
            } else {
                /* B пошёл в полёт — дальше обычная обработка после его завершения */
                return;
            }
        } else if(eff_flags == 0x02){
 8017b68:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8017b6c:	2b02      	cmp	r3, #2
 8017b6e:	d15b      	bne.n	8017c28 <USBD_VND_TxCplt+0x404>
            /* Завершился B: закрываем пару, двигаем seq */
            dbg_tx_sent++; dbg_sent_ch1_total++; dbg_sent_seq_adc1++;
 8017b70:	4ba1      	ldr	r3, [pc, #644]	@ (8017df8 <USBD_VND_TxCplt+0x5d4>)
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	3301      	adds	r3, #1
 8017b76:	4aa0      	ldr	r2, [pc, #640]	@ (8017df8 <USBD_VND_TxCplt+0x5d4>)
 8017b78:	6013      	str	r3, [r2, #0]
 8017b7a:	4ba0      	ldr	r3, [pc, #640]	@ (8017dfc <USBD_VND_TxCplt+0x5d8>)
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	3301      	adds	r3, #1
 8017b80:	4a9e      	ldr	r2, [pc, #632]	@ (8017dfc <USBD_VND_TxCplt+0x5d8>)
 8017b82:	6013      	str	r3, [r2, #0]
 8017b84:	4b9e      	ldr	r3, [pc, #632]	@ (8017e00 <USBD_VND_TxCplt+0x5dc>)
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	3301      	adds	r3, #1
 8017b8a:	4a9d      	ldr	r2, [pc, #628]	@ (8017e00 <USBD_VND_TxCplt+0x5dc>)
 8017b8c:	6013      	str	r3, [r2, #0]
            vnd_total_tx_samples += (uint64_t)((cur_samples_per_frame != 0) ? cur_samples_per_frame : diag_samples);
 8017b8e:	4b9d      	ldr	r3, [pc, #628]	@ (8017e04 <USBD_VND_TxCplt+0x5e0>)
 8017b90:	881b      	ldrh	r3, [r3, #0]
 8017b92:	b29b      	uxth	r3, r3
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d007      	beq.n	8017ba8 <USBD_VND_TxCplt+0x384>
 8017b98:	4b9a      	ldr	r3, [pc, #616]	@ (8017e04 <USBD_VND_TxCplt+0x5e0>)
 8017b9a:	881b      	ldrh	r3, [r3, #0]
 8017b9c:	b29b      	uxth	r3, r3
 8017b9e:	b29b      	uxth	r3, r3
 8017ba0:	2200      	movs	r2, #0
 8017ba2:	633b      	str	r3, [r7, #48]	@ 0x30
 8017ba4:	637a      	str	r2, [r7, #52]	@ 0x34
 8017ba6:	e005      	b.n	8017bb4 <USBD_VND_TxCplt+0x390>
 8017ba8:	4b97      	ldr	r3, [pc, #604]	@ (8017e08 <USBD_VND_TxCplt+0x5e4>)
 8017baa:	881b      	ldrh	r3, [r3, #0]
 8017bac:	b29b      	uxth	r3, r3
 8017bae:	2200      	movs	r2, #0
 8017bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8017bb2:	637a      	str	r2, [r7, #52]	@ 0x34
 8017bb4:	4b95      	ldr	r3, [pc, #596]	@ (8017e0c <USBD_VND_TxCplt+0x5e8>)
 8017bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8017bbe:	4621      	mov	r1, r4
 8017bc0:	1889      	adds	r1, r1, r2
 8017bc2:	6239      	str	r1, [r7, #32]
 8017bc4:	4629      	mov	r1, r5
 8017bc6:	eb43 0101 	adc.w	r1, r3, r1
 8017bca:	6279      	str	r1, [r7, #36]	@ 0x24
 8017bcc:	4b8f      	ldr	r3, [pc, #572]	@ (8017e0c <USBD_VND_TxCplt+0x5e8>)
 8017bce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8017bd2:	e9c3 1200 	strd	r1, r2, [r3]
            stream_seq++; dbg_produced_seq++;
 8017bd6:	4b8e      	ldr	r3, [pc, #568]	@ (8017e10 <USBD_VND_TxCplt+0x5ec>)
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	3301      	adds	r3, #1
 8017bdc:	4a8c      	ldr	r2, [pc, #560]	@ (8017e10 <USBD_VND_TxCplt+0x5ec>)
 8017bde:	6013      	str	r3, [r2, #0]
 8017be0:	4b8c      	ldr	r3, [pc, #560]	@ (8017e14 <USBD_VND_TxCplt+0x5f0>)
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	3301      	adds	r3, #1
 8017be6:	4a8b      	ldr	r2, [pc, #556]	@ (8017e14 <USBD_VND_TxCplt+0x5f0>)
 8017be8:	6013      	str	r3, [r2, #0]
            pending_B = 0; pending_B_since_ms = 0; sending_channel = 0xFF;
 8017bea:	4b8b      	ldr	r3, [pc, #556]	@ (8017e18 <USBD_VND_TxCplt+0x5f4>)
 8017bec:	2200      	movs	r2, #0
 8017bee:	701a      	strb	r2, [r3, #0]
 8017bf0:	4b8a      	ldr	r3, [pc, #552]	@ (8017e1c <USBD_VND_TxCplt+0x5f8>)
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	601a      	str	r2, [r3, #0]
 8017bf6:	4b8a      	ldr	r3, [pc, #552]	@ (8017e20 <USBD_VND_TxCplt+0x5fc>)
 8017bf8:	22ff      	movs	r2, #255	@ 0xff
 8017bfa:	701a      	strb	r2, [r3, #0]
            diag_prepared_seq = 0xFFFFFFFFu; /* заставим подготовить новую пару */
 8017bfc:	4b89      	ldr	r3, [pc, #548]	@ (8017e24 <USBD_VND_TxCplt+0x600>)
 8017bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8017c02:	601a      	str	r2, [r3, #0]
            if(!first_pair_done){ first_pair_done = 1; }
 8017c04:	4b88      	ldr	r3, [pc, #544]	@ (8017e28 <USBD_VND_TxCplt+0x604>)
 8017c06:	781b      	ldrb	r3, [r3, #0]
 8017c08:	b2db      	uxtb	r3, r3
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d102      	bne.n	8017c14 <USBD_VND_TxCplt+0x3f0>
 8017c0e:	4b86      	ldr	r3, [pc, #536]	@ (8017e28 <USBD_VND_TxCplt+0x604>)
 8017c10:	2201      	movs	r2, #1
 8017c12:	701a      	strb	r2, [r3, #0]
            /* Сразу пытаемся отправить следующий A новой пары */
            if(!vnd_try_send_A_nextpair_immediate()){
 8017c14:	f7fe ff7e 	bl	8016b14 <vnd_try_send_A_nextpair_immediate>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	f040 81f0 	bne.w	8018000 <USBD_VND_TxCplt+0x7dc>
                /* печать в CDC отключена для максимальной скорости */
                vnd_tx_kick = 1; return;
 8017c20:	4b82      	ldr	r3, [pc, #520]	@ (8017e2c <USBD_VND_TxCplt+0x608>)
 8017c22:	2201      	movs	r2, #1
 8017c24:	701a      	strb	r2, [r3, #0]
 8017c26:	e1f0      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
            } else {
                return;
            }
        } else if(eff_flags == 0x80){
 8017c28:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8017c2c:	2b80      	cmp	r3, #128	@ 0x80
 8017c2e:	d106      	bne.n	8017c3e <USBD_VND_TxCplt+0x41a>
            /* TEST */
            sending_channel = 0xFF;
 8017c30:	4b7b      	ldr	r3, [pc, #492]	@ (8017e20 <USBD_VND_TxCplt+0x5fc>)
 8017c32:	22ff      	movs	r2, #255	@ 0xff
 8017c34:	701a      	strb	r2, [r3, #0]
            vnd_tx_kick = 1; return;
 8017c36:	4b7d      	ldr	r3, [pc, #500]	@ (8017e2c <USBD_VND_TxCplt+0x608>)
 8017c38:	2201      	movs	r2, #1
 8017c3a:	701a      	strb	r2, [r3, #0]
 8017c3c:	e1e5      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
        } else {
            /* неизвестный флаг — игнорируем */
            vnd_tx_kick = 1; return;
 8017c3e:	4b7b      	ldr	r3, [pc, #492]	@ (8017e2c <USBD_VND_TxCplt+0x608>)
 8017c40:	2201      	movs	r2, #1
 8017c42:	701a      	strb	r2, [r3, #0]
 8017c44:	e1e1      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
        }
    }

    /* Ниже — обычная ветка для полнофункционального режима */
    if(!eff_is_frame){
 8017c46:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d167      	bne.n	8017d1e <USBD_VND_TxCplt+0x4fa>
        /* STAT или иной служебный пакет — используем предыдущее состояние канала как подсказку */
        if(prev_sending == 0){
 8017c4e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d113      	bne.n	8017c7e <USBD_VND_TxCplt+0x45a>
            if(!pending_B){ pending_B = 1; pending_B_since_ms = HAL_GetTick(); VND_LOG("GUARD(NON-FRAME): pending_B"); }
 8017c56:	4b70      	ldr	r3, [pc, #448]	@ (8017e18 <USBD_VND_TxCplt+0x5f4>)
 8017c58:	781b      	ldrb	r3, [r3, #0]
 8017c5a:	b2db      	uxtb	r3, r3
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d107      	bne.n	8017c70 <USBD_VND_TxCplt+0x44c>
 8017c60:	4b6d      	ldr	r3, [pc, #436]	@ (8017e18 <USBD_VND_TxCplt+0x5f4>)
 8017c62:	2201      	movs	r2, #1
 8017c64:	701a      	strb	r2, [r3, #0]
 8017c66:	f7ed f92d 	bl	8004ec4 <HAL_GetTick>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	4a6b      	ldr	r2, [pc, #428]	@ (8017e1c <USBD_VND_TxCplt+0x5f8>)
 8017c6e:	6013      	str	r3, [r2, #0]
            sending_channel = 0xFF; vnd_tx_kick = 1; return;
 8017c70:	4b6b      	ldr	r3, [pc, #428]	@ (8017e20 <USBD_VND_TxCplt+0x5fc>)
 8017c72:	22ff      	movs	r2, #255	@ 0xff
 8017c74:	701a      	strb	r2, [r3, #0]
 8017c76:	4b6d      	ldr	r3, [pc, #436]	@ (8017e2c <USBD_VND_TxCplt+0x608>)
 8017c78:	2201      	movs	r2, #1
 8017c7a:	701a      	strb	r2, [r3, #0]
 8017c7c:	e1c5      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
        } else if(prev_sending == 1){
 8017c7e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8017c82:	2b01      	cmp	r3, #1
 8017c84:	d144      	bne.n	8017d10 <USBD_VND_TxCplt+0x4ec>
            /* Считаем, что завершился B: закрываем пару безопасно */
        ChanFrame *f0 = &g_frames[pair_send_idx][0];
 8017c86:	4b6a      	ldr	r3, [pc, #424]	@ (8017e30 <USBD_VND_TxCplt+0x60c>)
 8017c88:	781b      	ldrb	r3, [r3, #0]
 8017c8a:	461a      	mov	r2, r3
 8017c8c:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017c90:	fb02 f303 	mul.w	r3, r2, r3
 8017c94:	4a67      	ldr	r2, [pc, #412]	@ (8017e34 <USBD_VND_TxCplt+0x610>)
 8017c96:	4413      	add	r3, r2
 8017c98:	66bb      	str	r3, [r7, #104]	@ 0x68
        ChanFrame *f1 = &g_frames[pair_send_idx][1];
 8017c9a:	4b65      	ldr	r3, [pc, #404]	@ (8017e30 <USBD_VND_TxCplt+0x60c>)
 8017c9c:	781b      	ldrb	r3, [r3, #0]
 8017c9e:	461a      	mov	r2, r3
 8017ca0:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017ca4:	fb02 f303 	mul.w	r3, r2, r3
 8017ca8:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8017cac:	4a61      	ldr	r2, [pc, #388]	@ (8017e34 <USBD_VND_TxCplt+0x610>)
 8017cae:	4413      	add	r3, r2
 8017cb0:	667b      	str	r3, [r7, #100]	@ 0x64
        f0->st = f1->st = FB_FILL;
 8017cb2:	2100      	movs	r1, #0
 8017cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017cb6:	460a      	mov	r2, r1
 8017cb8:	701a      	strb	r2, [r3, #0]
 8017cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017cbc:	460a      	mov	r2, r1
 8017cbe:	701a      	strb	r2, [r3, #0]
        pair_send_idx = (pair_send_idx + 1u) % VND_PAIR_BUFFERS;
 8017cc0:	4b5b      	ldr	r3, [pc, #364]	@ (8017e30 <USBD_VND_TxCplt+0x60c>)
 8017cc2:	781b      	ldrb	r3, [r3, #0]
 8017cc4:	3301      	adds	r3, #1
 8017cc6:	b2db      	uxtb	r3, r3
 8017cc8:	f003 0307 	and.w	r3, r3, #7
 8017ccc:	b2da      	uxtb	r2, r3
 8017cce:	4b58      	ldr	r3, [pc, #352]	@ (8017e30 <USBD_VND_TxCplt+0x60c>)
 8017cd0:	701a      	strb	r2, [r3, #0]
        stream_seq++; dbg_produced_seq++;
 8017cd2:	4b4f      	ldr	r3, [pc, #316]	@ (8017e10 <USBD_VND_TxCplt+0x5ec>)
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	3301      	adds	r3, #1
 8017cd8:	4a4d      	ldr	r2, [pc, #308]	@ (8017e10 <USBD_VND_TxCplt+0x5ec>)
 8017cda:	6013      	str	r3, [r2, #0]
 8017cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8017e14 <USBD_VND_TxCplt+0x5f0>)
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	3301      	adds	r3, #1
 8017ce2:	4a4c      	ldr	r2, [pc, #304]	@ (8017e14 <USBD_VND_TxCplt+0x5f0>)
 8017ce4:	6013      	str	r3, [r2, #0]
        pending_B = 0; pending_B_since_ms = 0; sending_channel = 0xFF;
 8017ce6:	4b4c      	ldr	r3, [pc, #304]	@ (8017e18 <USBD_VND_TxCplt+0x5f4>)
 8017ce8:	2200      	movs	r2, #0
 8017cea:	701a      	strb	r2, [r3, #0]
 8017cec:	4b4b      	ldr	r3, [pc, #300]	@ (8017e1c <USBD_VND_TxCplt+0x5f8>)
 8017cee:	2200      	movs	r2, #0
 8017cf0:	601a      	str	r2, [r3, #0]
 8017cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8017e20 <USBD_VND_TxCplt+0x5fc>)
 8017cf4:	22ff      	movs	r2, #255	@ 0xff
 8017cf6:	701a      	strb	r2, [r3, #0]
    /* Не планируем задержку следующей пары: передавать сразу при готовности */
            if(!first_pair_done){ first_pair_done = 1; }
 8017cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8017e28 <USBD_VND_TxCplt+0x604>)
 8017cfa:	781b      	ldrb	r3, [r3, #0]
 8017cfc:	b2db      	uxtb	r3, r3
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d102      	bne.n	8017d08 <USBD_VND_TxCplt+0x4e4>
 8017d02:	4b49      	ldr	r3, [pc, #292]	@ (8017e28 <USBD_VND_TxCplt+0x604>)
 8017d04:	2201      	movs	r2, #1
 8017d06:	701a      	strb	r2, [r3, #0]
            VND_LOG("GUARD(NON-FRAME): assume B done -> advance seq=%lu", (unsigned long)stream_seq);
            vnd_tx_kick = 1; return;
 8017d08:	4b48      	ldr	r3, [pc, #288]	@ (8017e2c <USBD_VND_TxCplt+0x608>)
 8017d0a:	2201      	movs	r2, #1
 8017d0c:	701a      	strb	r2, [r3, #0]
 8017d0e:	e17c      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
        } else {
            sending_channel = 0xFF; vnd_tx_kick = 1; return;
 8017d10:	4b43      	ldr	r3, [pc, #268]	@ (8017e20 <USBD_VND_TxCplt+0x5fc>)
 8017d12:	22ff      	movs	r2, #255	@ 0xff
 8017d14:	701a      	strb	r2, [r3, #0]
 8017d16:	4b45      	ldr	r3, [pc, #276]	@ (8017e2c <USBD_VND_TxCplt+0x608>)
 8017d18:	2201      	movs	r2, #1
 8017d1a:	701a      	strb	r2, [r3, #0]
 8017d1c:	e175      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
        }
    }
    uint8_t fl = eff_flags;
 8017d1e:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8017d22:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if(fl == 0x80){
 8017d26:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017d2a:	2b80      	cmp	r3, #128	@ 0x80
 8017d2c:	d106      	bne.n	8017d3c <USBD_VND_TxCplt+0x518>
        /* TEST */
        sending_channel = 0xFF; /* тест одиночный */
 8017d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8017e20 <USBD_VND_TxCplt+0x5fc>)
 8017d30:	22ff      	movs	r2, #255	@ 0xff
 8017d32:	701a      	strb	r2, [r3, #0]
        vnd_tx_kick = 1; return;
 8017d34:	4b3d      	ldr	r3, [pc, #244]	@ (8017e2c <USBD_VND_TxCplt+0x608>)
 8017d36:	2201      	movs	r2, #1
 8017d38:	701a      	strb	r2, [r3, #0]
 8017d3a:	e166      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
    }
    if(fl == 0x01){
 8017d3c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017d40:	2b01      	cmp	r3, #1
 8017d42:	d17f      	bne.n	8017e44 <USBD_VND_TxCplt+0x620>
        /* Это канал A */
        if(pending_B){ VND_LOG("WARN A_WHILE_PENDING_B seq=%lu hdr.seq=%lu", (unsigned long)stream_seq, (unsigned long)eff_seq); }
 8017d44:	4b34      	ldr	r3, [pc, #208]	@ (8017e18 <USBD_VND_TxCplt+0x5f4>)
 8017d46:	781b      	ldrb	r3, [r3, #0]
        if(eff_seq != stream_seq){
 8017d48:	4b31      	ldr	r3, [pc, #196]	@ (8017e10 <USBD_VND_TxCplt+0x5ec>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
            VND_LOG("WARN A_SEQ_MISMATCH hdr=%lu stream_seq=%lu", (unsigned long)eff_seq, (unsigned long)stream_seq);
        }
        static uint8_t first_a_txcplt_logged = 0; if(!first_a_txcplt_logged){ first_a_txcplt_logged = 1; VND_LOG("FIRST_A txcplt seq=%lu", (unsigned long)eff_seq); }
 8017d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8017e38 <USBD_VND_TxCplt+0x614>)
 8017d4e:	781b      	ldrb	r3, [r3, #0]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d102      	bne.n	8017d5a <USBD_VND_TxCplt+0x536>
 8017d54:	4b38      	ldr	r3, [pc, #224]	@ (8017e38 <USBD_VND_TxCplt+0x614>)
 8017d56:	2201      	movs	r2, #1
 8017d58:	701a      	strb	r2, [r3, #0]
    dbg_tx_sent++; dbg_sent_ch0_total++; dbg_sent_seq_adc0++;
 8017d5a:	4b27      	ldr	r3, [pc, #156]	@ (8017df8 <USBD_VND_TxCplt+0x5d4>)
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	3301      	adds	r3, #1
 8017d60:	4a25      	ldr	r2, [pc, #148]	@ (8017df8 <USBD_VND_TxCplt+0x5d4>)
 8017d62:	6013      	str	r3, [r2, #0]
 8017d64:	4b35      	ldr	r3, [pc, #212]	@ (8017e3c <USBD_VND_TxCplt+0x618>)
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	3301      	adds	r3, #1
 8017d6a:	4a34      	ldr	r2, [pc, #208]	@ (8017e3c <USBD_VND_TxCplt+0x618>)
 8017d6c:	6013      	str	r3, [r2, #0]
 8017d6e:	4b34      	ldr	r3, [pc, #208]	@ (8017e40 <USBD_VND_TxCplt+0x61c>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	3301      	adds	r3, #1
 8017d74:	4a32      	ldr	r2, [pc, #200]	@ (8017e40 <USBD_VND_TxCplt+0x61c>)
 8017d76:	6013      	str	r3, [r2, #0]
    /* Добавим число сэмплов канала A из текущей пары */
    vnd_total_tx_samples += (uint64_t)g_frames[pair_send_idx][0].samples;
 8017d78:	4b2d      	ldr	r3, [pc, #180]	@ (8017e30 <USBD_VND_TxCplt+0x60c>)
 8017d7a:	781b      	ldrb	r3, [r3, #0]
 8017d7c:	4619      	mov	r1, r3
 8017d7e:	4a2d      	ldr	r2, [pc, #180]	@ (8017e34 <USBD_VND_TxCplt+0x610>)
 8017d80:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017d84:	fb01 f303 	mul.w	r3, r1, r3
 8017d88:	4413      	add	r3, r2
 8017d8a:	3302      	adds	r3, #2
 8017d8c:	881b      	ldrh	r3, [r3, #0]
 8017d8e:	b29b      	uxth	r3, r3
 8017d90:	2200      	movs	r2, #0
 8017d92:	61bb      	str	r3, [r7, #24]
 8017d94:	61fa      	str	r2, [r7, #28]
 8017d96:	4b1d      	ldr	r3, [pc, #116]	@ (8017e0c <USBD_VND_TxCplt+0x5e8>)
 8017d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d9c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8017da0:	4621      	mov	r1, r4
 8017da2:	1889      	adds	r1, r1, r2
 8017da4:	6139      	str	r1, [r7, #16]
 8017da6:	4629      	mov	r1, r5
 8017da8:	eb43 0101 	adc.w	r1, r3, r1
 8017dac:	6179      	str	r1, [r7, #20]
 8017dae:	4b17      	ldr	r3, [pc, #92]	@ (8017e0c <USBD_VND_TxCplt+0x5e8>)
 8017db0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8017db4:	e9c3 1200 	strd	r1, r2, [r3]
        /* пометим A как завершённый для наглядности статуса */
        g_frames[pair_send_idx][0].st = FB_FILL;
 8017db8:	4b1d      	ldr	r3, [pc, #116]	@ (8017e30 <USBD_VND_TxCplt+0x60c>)
 8017dba:	781b      	ldrb	r3, [r3, #0]
 8017dbc:	4619      	mov	r1, r3
 8017dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8017e34 <USBD_VND_TxCplt+0x610>)
 8017dc0:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017dc4:	fb01 f303 	mul.w	r3, r1, r3
 8017dc8:	4413      	add	r3, r2
 8017dca:	2200      	movs	r2, #0
 8017dcc:	701a      	strb	r2, [r3, #0]
        sending_channel = 0xFF;
 8017dce:	4b14      	ldr	r3, [pc, #80]	@ (8017e20 <USBD_VND_TxCplt+0x5fc>)
 8017dd0:	22ff      	movs	r2, #255	@ 0xff
 8017dd2:	701a      	strb	r2, [r3, #0]
        /* Запускаем ожидание B ровно здесь */
        pending_B = 1; pending_B_since_ms = HAL_GetTick();
 8017dd4:	4b10      	ldr	r3, [pc, #64]	@ (8017e18 <USBD_VND_TxCplt+0x5f4>)
 8017dd6:	2201      	movs	r2, #1
 8017dd8:	701a      	strb	r2, [r3, #0]
 8017dda:	f7ed f873 	bl	8004ec4 <HAL_GetTick>
 8017dde:	4603      	mov	r3, r0
 8017de0:	4a0e      	ldr	r2, [pc, #56]	@ (8017e1c <USBD_VND_TxCplt+0x5f8>)
 8017de2:	6013      	str	r3, [r2, #0]
        /* Попытаемся немедленно отправить B, чтобы не ждать захода таска */
        if(!vnd_try_send_B_immediate()){
 8017de4:	f7fe fdd8 	bl	8016998 <vnd_try_send_B_immediate>
 8017de8:	4603      	mov	r3, r0
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	f040 810a 	bne.w	8018004 <USBD_VND_TxCplt+0x7e0>
            vnd_tx_kick = 1; return;
 8017df0:	4b0e      	ldr	r3, [pc, #56]	@ (8017e2c <USBD_VND_TxCplt+0x608>)
 8017df2:	2201      	movs	r2, #1
 8017df4:	701a      	strb	r2, [r3, #0]
 8017df6:	e108      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
 8017df8:	2400dbd8 	.word	0x2400dbd8
 8017dfc:	2400dbe0 	.word	0x2400dbe0
 8017e00:	2400dbc0 	.word	0x2400dbc0
 8017e04:	2400dba8 	.word	0x2400dba8
 8017e08:	24000042 	.word	0x24000042
 8017e0c:	2400dbf8 	.word	0x2400dbf8
 8017e10:	2400dba4 	.word	0x2400dba4
 8017e14:	2400dbb8 	.word	0x2400dbb8
 8017e18:	24019ff2 	.word	0x24019ff2
 8017e1c:	24019ff4 	.word	0x24019ff4
 8017e20:	2400004c 	.word	0x2400004c
 8017e24:	24000044 	.word	0x24000044
 8017e28:	2400dc40 	.word	0x2400dc40
 8017e2c:	2400dc50 	.word	0x2400dc50
 8017e30:	24019ff1 	.word	0x24019ff1
 8017e34:	2400f330 	.word	0x2400f330
 8017e38:	2401a084 	.word	0x2401a084
 8017e3c:	2400dbdc 	.word	0x2400dbdc
 8017e40:	2400dbbc 	.word	0x2400dbbc
        } else { return; }
    } else if(fl == 0x02){
 8017e44:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8017e48:	2b02      	cmp	r3, #2
 8017e4a:	f040 8085 	bne.w	8017f58 <USBD_VND_TxCplt+0x734>
    /* Канал B завершён — закрываем пару */
        if(!pending_B){ VND_LOG("WARN B_WITHOUT_PENDING seq=%lu hdr.seq=%lu", (unsigned long)stream_seq, (unsigned long)eff_seq); }
 8017e4e:	4b71      	ldr	r3, [pc, #452]	@ (8018014 <USBD_VND_TxCplt+0x7f0>)
 8017e50:	781b      	ldrb	r3, [r3, #0]
        if(eff_seq != stream_seq){
 8017e52:	4b71      	ldr	r3, [pc, #452]	@ (8018018 <USBD_VND_TxCplt+0x7f4>)
 8017e54:	681b      	ldr	r3, [r3, #0]
            VND_LOG("WARN B_SEQ_MISMATCH hdr=%lu stream_seq=%lu", (unsigned long)eff_seq, (unsigned long)stream_seq);
        }
        static uint8_t first_b_logged = 0; if(!first_b_logged){ first_b_logged = 1; VND_LOG("FIRST_B txcplt seq=%lu", (unsigned long)eff_seq); }
 8017e56:	4b71      	ldr	r3, [pc, #452]	@ (801801c <USBD_VND_TxCplt+0x7f8>)
 8017e58:	781b      	ldrb	r3, [r3, #0]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d102      	bne.n	8017e64 <USBD_VND_TxCplt+0x640>
 8017e5e:	4b6f      	ldr	r3, [pc, #444]	@ (801801c <USBD_VND_TxCplt+0x7f8>)
 8017e60:	2201      	movs	r2, #1
 8017e62:	701a      	strb	r2, [r3, #0]
    dbg_tx_sent++; dbg_sent_ch1_total++; dbg_sent_seq_adc1++;
 8017e64:	4b6e      	ldr	r3, [pc, #440]	@ (8018020 <USBD_VND_TxCplt+0x7fc>)
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	3301      	adds	r3, #1
 8017e6a:	4a6d      	ldr	r2, [pc, #436]	@ (8018020 <USBD_VND_TxCplt+0x7fc>)
 8017e6c:	6013      	str	r3, [r2, #0]
 8017e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8018024 <USBD_VND_TxCplt+0x800>)
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	3301      	adds	r3, #1
 8017e74:	4a6b      	ldr	r2, [pc, #428]	@ (8018024 <USBD_VND_TxCplt+0x800>)
 8017e76:	6013      	str	r3, [r2, #0]
 8017e78:	4b6b      	ldr	r3, [pc, #428]	@ (8018028 <USBD_VND_TxCplt+0x804>)
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	3301      	adds	r3, #1
 8017e7e:	4a6a      	ldr	r2, [pc, #424]	@ (8018028 <USBD_VND_TxCplt+0x804>)
 8017e80:	6013      	str	r3, [r2, #0]
    vnd_total_tx_samples += (uint64_t)g_frames[pair_send_idx][1].samples;
 8017e82:	4b6a      	ldr	r3, [pc, #424]	@ (801802c <USBD_VND_TxCplt+0x808>)
 8017e84:	781b      	ldrb	r3, [r3, #0]
 8017e86:	4619      	mov	r1, r3
 8017e88:	4a69      	ldr	r2, [pc, #420]	@ (8018030 <USBD_VND_TxCplt+0x80c>)
 8017e8a:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017e8e:	fb01 f303 	mul.w	r3, r1, r3
 8017e92:	4413      	add	r3, r2
 8017e94:	f603 23ce 	addw	r3, r3, #2766	@ 0xace
 8017e98:	881b      	ldrh	r3, [r3, #0]
 8017e9a:	b29b      	uxth	r3, r3
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	60bb      	str	r3, [r7, #8]
 8017ea0:	60fa      	str	r2, [r7, #12]
 8017ea2:	4b64      	ldr	r3, [pc, #400]	@ (8018034 <USBD_VND_TxCplt+0x810>)
 8017ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ea8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8017eac:	4621      	mov	r1, r4
 8017eae:	1889      	adds	r1, r1, r2
 8017eb0:	6039      	str	r1, [r7, #0]
 8017eb2:	4629      	mov	r1, r5
 8017eb4:	eb43 0101 	adc.w	r1, r3, r1
 8017eb8:	6079      	str	r1, [r7, #4]
 8017eba:	4b5e      	ldr	r3, [pc, #376]	@ (8018034 <USBD_VND_TxCplt+0x810>)
 8017ebc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8017ec0:	e9c3 1200 	strd	r1, r2, [r3]
        ChanFrame *f0 = &g_frames[pair_send_idx][0];
 8017ec4:	4b59      	ldr	r3, [pc, #356]	@ (801802c <USBD_VND_TxCplt+0x808>)
 8017ec6:	781b      	ldrb	r3, [r3, #0]
 8017ec8:	461a      	mov	r2, r3
 8017eca:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017ece:	fb02 f303 	mul.w	r3, r2, r3
 8017ed2:	4a57      	ldr	r2, [pc, #348]	@ (8018030 <USBD_VND_TxCplt+0x80c>)
 8017ed4:	4413      	add	r3, r2
 8017ed6:	673b      	str	r3, [r7, #112]	@ 0x70
        ChanFrame *f1 = &g_frames[pair_send_idx][1];
 8017ed8:	4b54      	ldr	r3, [pc, #336]	@ (801802c <USBD_VND_TxCplt+0x808>)
 8017eda:	781b      	ldrb	r3, [r3, #0]
 8017edc:	461a      	mov	r2, r3
 8017ede:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017ee2:	fb02 f303 	mul.w	r3, r2, r3
 8017ee6:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8017eea:	4a51      	ldr	r2, [pc, #324]	@ (8018030 <USBD_VND_TxCplt+0x80c>)
 8017eec:	4413      	add	r3, r2
 8017eee:	66fb      	str	r3, [r7, #108]	@ 0x6c
        f0->st = f1->st = FB_FILL;
 8017ef0:	2100      	movs	r1, #0
 8017ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017ef4:	460a      	mov	r2, r1
 8017ef6:	701a      	strb	r2, [r3, #0]
 8017ef8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017efa:	460a      	mov	r2, r1
 8017efc:	701a      	strb	r2, [r3, #0]
        pair_send_idx = (pair_send_idx + 1u) % VND_PAIR_BUFFERS;
 8017efe:	4b4b      	ldr	r3, [pc, #300]	@ (801802c <USBD_VND_TxCplt+0x808>)
 8017f00:	781b      	ldrb	r3, [r3, #0]
 8017f02:	3301      	adds	r3, #1
 8017f04:	b2db      	uxtb	r3, r3
 8017f06:	f003 0307 	and.w	r3, r3, #7
 8017f0a:	b2da      	uxtb	r2, r3
 8017f0c:	4b47      	ldr	r3, [pc, #284]	@ (801802c <USBD_VND_TxCplt+0x808>)
 8017f0e:	701a      	strb	r2, [r3, #0]
        stream_seq++; dbg_produced_seq++;
 8017f10:	4b41      	ldr	r3, [pc, #260]	@ (8018018 <USBD_VND_TxCplt+0x7f4>)
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	3301      	adds	r3, #1
 8017f16:	4a40      	ldr	r2, [pc, #256]	@ (8018018 <USBD_VND_TxCplt+0x7f4>)
 8017f18:	6013      	str	r3, [r2, #0]
 8017f1a:	4b47      	ldr	r3, [pc, #284]	@ (8018038 <USBD_VND_TxCplt+0x814>)
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	3301      	adds	r3, #1
 8017f20:	4a45      	ldr	r2, [pc, #276]	@ (8018038 <USBD_VND_TxCplt+0x814>)
 8017f22:	6013      	str	r3, [r2, #0]
        pending_B = 0; pending_B_since_ms = 0; sending_channel = 0xFF;
 8017f24:	4b3b      	ldr	r3, [pc, #236]	@ (8018014 <USBD_VND_TxCplt+0x7f0>)
 8017f26:	2200      	movs	r2, #0
 8017f28:	701a      	strb	r2, [r3, #0]
 8017f2a:	4b44      	ldr	r3, [pc, #272]	@ (801803c <USBD_VND_TxCplt+0x818>)
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	601a      	str	r2, [r3, #0]
 8017f30:	4b43      	ldr	r3, [pc, #268]	@ (8018040 <USBD_VND_TxCplt+0x81c>)
 8017f32:	22ff      	movs	r2, #255	@ 0xff
 8017f34:	701a      	strb	r2, [r3, #0]
        if(!first_pair_done){ first_pair_done = 1; }
 8017f36:	4b43      	ldr	r3, [pc, #268]	@ (8018044 <USBD_VND_TxCplt+0x820>)
 8017f38:	781b      	ldrb	r3, [r3, #0]
 8017f3a:	b2db      	uxtb	r3, r3
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d102      	bne.n	8017f46 <USBD_VND_TxCplt+0x722>
 8017f40:	4b40      	ldr	r3, [pc, #256]	@ (8018044 <USBD_VND_TxCplt+0x820>)
 8017f42:	2201      	movs	r2, #1
 8017f44:	701a      	strb	r2, [r3, #0]
        /* Сразу пытаемся отправить следующий A новой пары (если готов) */
        if(!vnd_try_send_A_nextpair_immediate()){
 8017f46:	f7fe fde5 	bl	8016b14 <vnd_try_send_A_nextpair_immediate>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d15b      	bne.n	8018008 <USBD_VND_TxCplt+0x7e4>
            /* Без планирования задержек: следующая пара начнётся как только готова */
            vnd_tx_kick = 1; return;
 8017f50:	4b3d      	ldr	r3, [pc, #244]	@ (8018048 <USBD_VND_TxCplt+0x824>)
 8017f52:	2201      	movs	r2, #1
 8017f54:	701a      	strb	r2, [r3, #0]
 8017f56:	e058      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
        } else { return; }
    } else {
        VND_LOG("WARN UNKNOWN FLAGS 0x%02X in TxCplt", (unsigned)fl);
        sending_channel = 0xFF;
 8017f58:	4b39      	ldr	r3, [pc, #228]	@ (8018040 <USBD_VND_TxCplt+0x81c>)
 8017f5a:	22ff      	movs	r2, #255	@ 0xff
 8017f5c:	701a      	strb	r2, [r3, #0]
        /* РЕЗЕРВ: если классификация не распознала, но прямо перед этим слали B — закроем пару */
        if(pending_B && (prev_sending == 1 || last_tx_flags == 0x02)){
 8017f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8018014 <USBD_VND_TxCplt+0x7f0>)
 8017f60:	781b      	ldrb	r3, [r3, #0]
 8017f62:	b2db      	uxtb	r3, r3
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d045      	beq.n	8017ff4 <USBD_VND_TxCplt+0x7d0>
 8017f68:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8017f6c:	2b01      	cmp	r3, #1
 8017f6e:	d004      	beq.n	8017f7a <USBD_VND_TxCplt+0x756>
 8017f70:	4b36      	ldr	r3, [pc, #216]	@ (801804c <USBD_VND_TxCplt+0x828>)
 8017f72:	781b      	ldrb	r3, [r3, #0]
 8017f74:	b2db      	uxtb	r3, r3
 8017f76:	2b02      	cmp	r3, #2
 8017f78:	d13c      	bne.n	8017ff4 <USBD_VND_TxCplt+0x7d0>
            ChanFrame *f0 = &g_frames[pair_send_idx][0];
 8017f7a:	4b2c      	ldr	r3, [pc, #176]	@ (801802c <USBD_VND_TxCplt+0x808>)
 8017f7c:	781b      	ldrb	r3, [r3, #0]
 8017f7e:	461a      	mov	r2, r3
 8017f80:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017f84:	fb02 f303 	mul.w	r3, r2, r3
 8017f88:	4a29      	ldr	r2, [pc, #164]	@ (8018030 <USBD_VND_TxCplt+0x80c>)
 8017f8a:	4413      	add	r3, r2
 8017f8c:	67bb      	str	r3, [r7, #120]	@ 0x78
            ChanFrame *f1 = &g_frames[pair_send_idx][1];
 8017f8e:	4b27      	ldr	r3, [pc, #156]	@ (801802c <USBD_VND_TxCplt+0x808>)
 8017f90:	781b      	ldrb	r3, [r3, #0]
 8017f92:	461a      	mov	r2, r3
 8017f94:	f241 5398 	movw	r3, #5528	@ 0x1598
 8017f98:	fb02 f303 	mul.w	r3, r2, r3
 8017f9c:	f603 23cc 	addw	r3, r3, #2764	@ 0xacc
 8017fa0:	4a23      	ldr	r2, [pc, #140]	@ (8018030 <USBD_VND_TxCplt+0x80c>)
 8017fa2:	4413      	add	r3, r2
 8017fa4:	677b      	str	r3, [r7, #116]	@ 0x74
            f0->st = f1->st = FB_FILL;
 8017fa6:	2100      	movs	r1, #0
 8017fa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017faa:	460a      	mov	r2, r1
 8017fac:	701a      	strb	r2, [r3, #0]
 8017fae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017fb0:	460a      	mov	r2, r1
 8017fb2:	701a      	strb	r2, [r3, #0]
            pair_send_idx = (pair_send_idx + 1u) % VND_PAIR_BUFFERS;
 8017fb4:	4b1d      	ldr	r3, [pc, #116]	@ (801802c <USBD_VND_TxCplt+0x808>)
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	3301      	adds	r3, #1
 8017fba:	b2db      	uxtb	r3, r3
 8017fbc:	f003 0307 	and.w	r3, r3, #7
 8017fc0:	b2da      	uxtb	r2, r3
 8017fc2:	4b1a      	ldr	r3, [pc, #104]	@ (801802c <USBD_VND_TxCplt+0x808>)
 8017fc4:	701a      	strb	r2, [r3, #0]
            stream_seq++; dbg_produced_seq++;
 8017fc6:	4b14      	ldr	r3, [pc, #80]	@ (8018018 <USBD_VND_TxCplt+0x7f4>)
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	3301      	adds	r3, #1
 8017fcc:	4a12      	ldr	r2, [pc, #72]	@ (8018018 <USBD_VND_TxCplt+0x7f4>)
 8017fce:	6013      	str	r3, [r2, #0]
 8017fd0:	4b19      	ldr	r3, [pc, #100]	@ (8018038 <USBD_VND_TxCplt+0x814>)
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	3301      	adds	r3, #1
 8017fd6:	4a18      	ldr	r2, [pc, #96]	@ (8018038 <USBD_VND_TxCplt+0x814>)
 8017fd8:	6013      	str	r3, [r2, #0]
            pending_B = 0; pending_B_since_ms = 0; sending_channel = 0xFF;
 8017fda:	4b0e      	ldr	r3, [pc, #56]	@ (8018014 <USBD_VND_TxCplt+0x7f0>)
 8017fdc:	2200      	movs	r2, #0
 8017fde:	701a      	strb	r2, [r3, #0]
 8017fe0:	4b16      	ldr	r3, [pc, #88]	@ (801803c <USBD_VND_TxCplt+0x818>)
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	601a      	str	r2, [r3, #0]
 8017fe6:	4b16      	ldr	r3, [pc, #88]	@ (8018040 <USBD_VND_TxCplt+0x81c>)
 8017fe8:	22ff      	movs	r2, #255	@ 0xff
 8017fea:	701a      	strb	r2, [r3, #0]
            /* Без планирования задержек */
            VND_LOG("FALLBACK_CLOSE_PAIR after UNKNOWN meta (assume B)");
            vnd_tx_kick = 1; return;
 8017fec:	4b16      	ldr	r3, [pc, #88]	@ (8018048 <USBD_VND_TxCplt+0x824>)
 8017fee:	2201      	movs	r2, #1
 8017ff0:	701a      	strb	r2, [r3, #0]
 8017ff2:	e00a      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
        }
        vnd_tx_kick = 1; return;
 8017ff4:	4b14      	ldr	r3, [pc, #80]	@ (8018048 <USBD_VND_TxCplt+0x824>)
 8017ff6:	2201      	movs	r2, #1
 8017ff8:	701a      	strb	r2, [r3, #0]
 8017ffa:	e006      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
                return;
 8017ffc:	bf00      	nop
 8017ffe:	e004      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
                return;
 8018000:	bf00      	nop
 8018002:	e002      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
        } else { return; }
 8018004:	bf00      	nop
 8018006:	e000      	b.n	801800a <USBD_VND_TxCplt+0x7e6>
        } else { return; }
 8018008:	bf00      	nop
    }
}
 801800a:	3790      	adds	r7, #144	@ 0x90
 801800c:	46bd      	mov	sp, r7
 801800e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018012:	bf00      	nop
 8018014:	24019ff2 	.word	0x24019ff2
 8018018:	2400dba4 	.word	0x2400dba4
 801801c:	2401a085 	.word	0x2401a085
 8018020:	2400dbd8 	.word	0x2400dbd8
 8018024:	2400dbe0 	.word	0x2400dbe0
 8018028:	2400dbc0 	.word	0x2400dbc0
 801802c:	24019ff1 	.word	0x24019ff1
 8018030:	2400f330 	.word	0x2400f330
 8018034:	2400dbf8 	.word	0x2400dbf8
 8018038:	2400dbb8 	.word	0x2400dbb8
 801803c:	24019ff4 	.word	0x24019ff4
 8018040:	2400004c 	.word	0x2400004c
 8018044:	2400dc40 	.word	0x2400dc40
 8018048:	2400dc50 	.word	0x2400dc50
 801804c:	2400dc21 	.word	0x2400dc21

08018050 <USBD_VND_DataReceived>:

/* Приём команд */
void USBD_VND_DataReceived(const uint8_t *data, uint32_t len)
{
 8018050:	b5b0      	push	{r4, r5, r7, lr}
 8018052:	b09e      	sub	sp, #120	@ 0x78
 8018054:	af04      	add	r7, sp, #16
 8018056:	6078      	str	r0, [r7, #4]
 8018058:	6039      	str	r1, [r7, #0]
    if(!len) return;
 801805a:	683b      	ldr	r3, [r7, #0]
 801805c:	2b00      	cmp	r3, #0
 801805e:	f000 84db 	beq.w	8018a18 <USBD_VND_DataReceived+0x9c8>
    uint8_t cmd = data[0];
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	781b      	ldrb	r3, [r3, #0]
 8018066:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
    static uint32_t rcv_count = 0;
    rcv_count++;
 801806a:	4bb2      	ldr	r3, [pc, #712]	@ (8018334 <USBD_VND_DataReceived+0x2e4>)
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	3301      	adds	r3, #1
 8018070:	4ab0      	ldr	r2, [pc, #704]	@ (8018334 <USBD_VND_DataReceived+0x2e4>)
 8018072:	6013      	str	r3, [r2, #0]
    printf("[VND_RCV] #%lu CMD 0x%02X len=%lu\r\n", rcv_count, cmd, (unsigned long)len);
 8018074:	4baf      	ldr	r3, [pc, #700]	@ (8018334 <USBD_VND_DataReceived+0x2e4>)
 8018076:	6819      	ldr	r1, [r3, #0]
 8018078:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 801807c:	683b      	ldr	r3, [r7, #0]
 801807e:	48ae      	ldr	r0, [pc, #696]	@ (8018338 <USBD_VND_DataReceived+0x2e8>)
 8018080:	f002 f964 	bl	801a34c <iprintf>
    VND_LOG("CMD 0x%02X len=%lu", cmd, (unsigned long)len);
    switch(cmd)
 8018084:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8018088:	3b10      	subs	r3, #16
 801808a:	2b20      	cmp	r3, #32
 801808c:	f200 84c6 	bhi.w	8018a1c <USBD_VND_DataReceived+0x9cc>
 8018090:	a201      	add	r2, pc, #4	@ (adr r2, 8018098 <USBD_VND_DataReceived+0x48>)
 8018092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018096:	bf00      	nop
 8018098:	080186e5 	.word	0x080186e5
 801809c:	0801876b 	.word	0x0801876b
 80180a0:	08018a1d 	.word	0x08018a1d
 80180a4:	080187eb 	.word	0x080187eb
 80180a8:	08018917 	.word	0x08018917
 80180ac:	080189e9 	.word	0x080189e9
 80180b0:	080188cf 	.word	0x080188cf
 80180b4:	08018485 	.word	0x08018485
 80180b8:	08018a1d 	.word	0x08018a1d
 80180bc:	08018a1d 	.word	0x08018a1d
 80180c0:	08018a1d 	.word	0x08018a1d
 80180c4:	08018a1d 	.word	0x08018a1d
 80180c8:	08018a1d 	.word	0x08018a1d
 80180cc:	08018a1d 	.word	0x08018a1d
 80180d0:	08018a1d 	.word	0x08018a1d
 80180d4:	08018a1d 	.word	0x08018a1d
 80180d8:	0801811d 	.word	0x0801811d
 80180dc:	08018505 	.word	0x08018505
 80180e0:	08018a1d 	.word	0x08018a1d
 80180e4:	08018a1d 	.word	0x08018a1d
 80180e8:	08018a1d 	.word	0x08018a1d
 80180ec:	08018a1d 	.word	0x08018a1d
 80180f0:	08018a1d 	.word	0x08018a1d
 80180f4:	08018a1d 	.word	0x08018a1d
 80180f8:	08018a1d 	.word	0x08018a1d
 80180fc:	08018a1d 	.word	0x08018a1d
 8018100:	08018a1d 	.word	0x08018a1d
 8018104:	08018a1d 	.word	0x08018a1d
 8018108:	08018a1d 	.word	0x08018a1d
 801810c:	08018a1d 	.word	0x08018a1d
 8018110:	08018a1d 	.word	0x08018a1d
 8018114:	08018a1d 	.word	0x08018a1d
 8018118:	080185db 	.word	0x080185db
    {
        case VND_CMD_START_STREAM:
        {
            /* Разрешаем START в любое время: мягко перезапускаем поток */
                VND_LOG("START_STREAM received");
                vnd_reset_buffers();
 801811c:	f7fd fcfa 	bl	8015b14 <vnd_reset_buffers>
                pair_send_idx = 0; pair_fill_idx = 0; sending_channel = 0xFF; pending_B = 0; pending_B_since_ms = 0;
 8018120:	4b86      	ldr	r3, [pc, #536]	@ (801833c <USBD_VND_DataReceived+0x2ec>)
 8018122:	2200      	movs	r2, #0
 8018124:	701a      	strb	r2, [r3, #0]
 8018126:	4b86      	ldr	r3, [pc, #536]	@ (8018340 <USBD_VND_DataReceived+0x2f0>)
 8018128:	2200      	movs	r2, #0
 801812a:	701a      	strb	r2, [r3, #0]
 801812c:	4b85      	ldr	r3, [pc, #532]	@ (8018344 <USBD_VND_DataReceived+0x2f4>)
 801812e:	22ff      	movs	r2, #255	@ 0xff
 8018130:	701a      	strb	r2, [r3, #0]
 8018132:	4b85      	ldr	r3, [pc, #532]	@ (8018348 <USBD_VND_DataReceived+0x2f8>)
 8018134:	2200      	movs	r2, #0
 8018136:	701a      	strb	r2, [r3, #0]
 8018138:	4b84      	ldr	r3, [pc, #528]	@ (801834c <USBD_VND_DataReceived+0x2fc>)
 801813a:	2200      	movs	r2, #0
 801813c:	601a      	str	r2, [r3, #0]
                /* Сброс фиксации размера и планировщика */
                cur_samples_per_frame = 0; cur_expected_frame_size = 0;
 801813e:	4b84      	ldr	r3, [pc, #528]	@ (8018350 <USBD_VND_DataReceived+0x300>)
 8018140:	2200      	movs	r2, #0
 8018142:	801a      	strh	r2, [r3, #0]
 8018144:	4b83      	ldr	r3, [pc, #524]	@ (8018354 <USBD_VND_DataReceived+0x304>)
 8018146:	2200      	movs	r2, #0
 8018148:	801a      	strh	r2, [r3, #0]
                vnd_next_pair_ms = 0;
 801814a:	4b83      	ldr	r3, [pc, #524]	@ (8018358 <USBD_VND_DataReceived+0x308>)
 801814c:	2200      	movs	r2, #0
 801814e:	601a      	str	r2, [r3, #0]
                /* Состояние теста/ACK */
                test_in_flight = 0; test_pending = 0;
 8018150:	4b82      	ldr	r3, [pc, #520]	@ (801835c <USBD_VND_DataReceived+0x30c>)
 8018152:	2200      	movs	r2, #0
 8018154:	701a      	strb	r2, [r3, #0]
 8018156:	4b82      	ldr	r3, [pc, #520]	@ (8018360 <USBD_VND_DataReceived+0x310>)
 8018158:	2200      	movs	r2, #0
 801815a:	701a      	strb	r2, [r3, #0]
#if VND_DISABLE_TEST
                test_sent = 1; /* тест отключён: считать выполненным */
 801815c:	4b81      	ldr	r3, [pc, #516]	@ (8018364 <USBD_VND_DataReceived+0x314>)
 801815e:	2201      	movs	r2, #1
 8018160:	701a      	strb	r2, [r3, #0]
#else
                test_sent = 0;
#endif
                start_stat_planned = 0; start_stat_inflight = 0; start_ack_done = 1; /* ACK считаем выполненным логически */
 8018162:	4b81      	ldr	r3, [pc, #516]	@ (8018368 <USBD_VND_DataReceived+0x318>)
 8018164:	2200      	movs	r2, #0
 8018166:	701a      	strb	r2, [r3, #0]
 8018168:	4b80      	ldr	r3, [pc, #512]	@ (801836c <USBD_VND_DataReceived+0x31c>)
 801816a:	2200      	movs	r2, #0
 801816c:	701a      	strb	r2, [r3, #0]
 801816e:	4b80      	ldr	r3, [pc, #512]	@ (8018370 <USBD_VND_DataReceived+0x320>)
 8018170:	2201      	movs	r2, #1
 8018172:	701a      	strb	r2, [r3, #0]
                pending_status = 0; status_ack_pending = 0; /* не пытаться слать STAT через IN */
 8018174:	4b7f      	ldr	r3, [pc, #508]	@ (8018374 <USBD_VND_DataReceived+0x324>)
 8018176:	2200      	movs	r2, #0
 8018178:	701a      	strb	r2, [r3, #0]
 801817a:	4b7f      	ldr	r3, [pc, #508]	@ (8018378 <USBD_VND_DataReceived+0x328>)
 801817c:	2200      	movs	r2, #0
 801817e:	701a      	strb	r2, [r3, #0]
                vnd_error_counter = 0;
 8018180:	4b7e      	ldr	r3, [pc, #504]	@ (801837c <USBD_VND_DataReceived+0x32c>)
 8018182:	2200      	movs	r2, #0
 8018184:	601a      	str	r2, [r3, #0]
                /* Синхронизация последовательностей пар */
                stream_seq = 0; next_seq_to_assign = 0; dbg_produced_seq = 0;
 8018186:	4b7e      	ldr	r3, [pc, #504]	@ (8018380 <USBD_VND_DataReceived+0x330>)
 8018188:	2200      	movs	r2, #0
 801818a:	601a      	str	r2, [r3, #0]
 801818c:	4b7d      	ldr	r3, [pc, #500]	@ (8018384 <USBD_VND_DataReceived+0x334>)
 801818e:	2200      	movs	r2, #0
 8018190:	601a      	str	r2, [r3, #0]
 8018192:	4b7d      	ldr	r3, [pc, #500]	@ (8018388 <USBD_VND_DataReceived+0x338>)
 8018194:	2200      	movs	r2, #0
 8018196:	601a      	str	r2, [r3, #0]
                first_pair_done = 0;
 8018198:	4b7c      	ldr	r3, [pc, #496]	@ (801838c <USBD_VND_DataReceived+0x33c>)
 801819a:	2200      	movs	r2, #0
 801819c:	701a      	strb	r2, [r3, #0]
                dbg_sent_ch0_total = 0; dbg_sent_ch1_total = 0;
 801819e:	4b7c      	ldr	r3, [pc, #496]	@ (8018390 <USBD_VND_DataReceived+0x340>)
 80181a0:	2200      	movs	r2, #0
 80181a2:	601a      	str	r2, [r3, #0]
 80181a4:	4b7b      	ldr	r3, [pc, #492]	@ (8018394 <USBD_VND_DataReceived+0x344>)
 80181a6:	2200      	movs	r2, #0
 80181a8:	601a      	str	r2, [r3, #0]
                start_cmd_ms = HAL_GetTick();
 80181aa:	f7ec fe8b 	bl	8004ec4 <HAL_GetTick>
 80181ae:	4603      	mov	r3, r0
 80181b0:	4a79      	ldr	r2, [pc, #484]	@ (8018398 <USBD_VND_DataReceived+0x348>)
 80181b2:	6013      	str	r3, [r2, #0]
                /* Снимем DMA снапшот для контроля таймаута */
                adc_stream_debug_t dbg; adc_stream_get_debug(&dbg);
 80181b4:	f107 0308 	add.w	r3, r7, #8
 80181b8:	4618      	mov	r0, r3
 80181ba:	f7e8 fae9 	bl	8000790 <adc_stream_get_debug>
                dma_snapshot_full0 = dbg.dma_full0; dma_snapshot_full1 = dbg.dma_full1;
 80181be:	69fb      	ldr	r3, [r7, #28]
 80181c0:	4a76      	ldr	r2, [pc, #472]	@ (801839c <USBD_VND_DataReceived+0x34c>)
 80181c2:	6013      	str	r3, [r2, #0]
 80181c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181c6:	4a76      	ldr	r2, [pc, #472]	@ (80183a0 <USBD_VND_DataReceived+0x350>)
 80181c8:	6013      	str	r3, [r2, #0]
                /* Зафиксировать размер кадра по умолчанию для полного режима (300 семплов) */
                if (full_mode) {
 80181ca:	4b76      	ldr	r3, [pc, #472]	@ (80183a4 <USBD_VND_DataReceived+0x354>)
 80181cc:	781b      	ldrb	r3, [r3, #0]
 80181ce:	b2db      	uxtb	r3, r3
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d00f      	beq.n	80181f4 <USBD_VND_DataReceived+0x1a4>
                    vnd_frame_samples_req = VND_FULL_DEFAULT_SAMPLES;
 80181d4:	4b74      	ldr	r3, [pc, #464]	@ (80183a8 <USBD_VND_DataReceived+0x358>)
 80181d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80181da:	801a      	strh	r2, [r3, #0]
                    vnd_recompute_pair_timing(vnd_frame_samples_req);
 80181dc:	4b72      	ldr	r3, [pc, #456]	@ (80183a8 <USBD_VND_DataReceived+0x358>)
 80181de:	881b      	ldrh	r3, [r3, #0]
 80181e0:	b29b      	uxth	r3, r3
 80181e2:	4618      	mov	r0, r3
 80181e4:	f7fd faf6 	bl	80157d4 <vnd_recompute_pair_timing>
                    cur_samples_per_frame = 0; /* снять lock, чтобы применилось немедленно */
 80181e8:	4b59      	ldr	r3, [pc, #356]	@ (8018350 <USBD_VND_DataReceived+0x300>)
 80181ea:	2200      	movs	r2, #0
 80181ec:	801a      	strh	r2, [r3, #0]
                    cur_expected_frame_size = 0;
 80181ee:	4b59      	ldr	r3, [pc, #356]	@ (8018354 <USBD_VND_DataReceived+0x304>)
 80181f0:	2200      	movs	r2, #0
 80181f2:	801a      	strh	r2, [r3, #0]
                }
                /* ПРОАКТИВНО: очистим возможный "хвост" занятости IN EP с прошлой сессии */
                do {
                    extern void USBD_VND_ForceTxIdle(void);
                    USBD_VND_ForceTxIdle();
 80181f4:	f000 fdb2 	bl	8018d5c <USBD_VND_ForceTxIdle>
                    vnd_ep_busy = 0; vnd_tx_ready = 1; vnd_inflight = 0;
 80181f8:	4b6c      	ldr	r3, [pc, #432]	@ (80183ac <USBD_VND_DataReceived+0x35c>)
 80181fa:	2200      	movs	r2, #0
 80181fc:	701a      	strb	r2, [r3, #0]
 80181fe:	4b6c      	ldr	r3, [pc, #432]	@ (80183b0 <USBD_VND_DataReceived+0x360>)
 8018200:	2201      	movs	r2, #1
 8018202:	701a      	strb	r2, [r3, #0]
 8018204:	4b6b      	ldr	r3, [pc, #428]	@ (80183b4 <USBD_VND_DataReceived+0x364>)
 8018206:	2200      	movs	r2, #0
 8018208:	701a      	strb	r2, [r3, #0]
                    vnd_last_tx_start_ms = 0; /* чтобы WDG не сработал по старой метке */
 801820a:	4b6b      	ldr	r3, [pc, #428]	@ (80183b8 <USBD_VND_DataReceived+0x368>)
 801820c:	2200      	movs	r2, #0
 801820e:	601a      	str	r2, [r3, #0]
                    /* Полностью очистим meta-FIFO для корректной классификации первой пары */
                    vnd_tx_meta_head = vnd_tx_meta_tail = 0;
 8018210:	4b6a      	ldr	r3, [pc, #424]	@ (80183bc <USBD_VND_DataReceived+0x36c>)
 8018212:	2200      	movs	r2, #0
 8018214:	701a      	strb	r2, [r3, #0]
 8018216:	4b69      	ldr	r3, [pc, #420]	@ (80183bc <USBD_VND_DataReceived+0x36c>)
 8018218:	781a      	ldrb	r2, [r3, #0]
 801821a:	4b69      	ldr	r3, [pc, #420]	@ (80183c0 <USBD_VND_DataReceived+0x370>)
 801821c:	701a      	strb	r2, [r3, #0]
                    meta_push_total = meta_pop_total = meta_empty_events = meta_overflow_events = 0;
 801821e:	4b69      	ldr	r3, [pc, #420]	@ (80183c4 <USBD_VND_DataReceived+0x374>)
 8018220:	2200      	movs	r2, #0
 8018222:	601a      	str	r2, [r3, #0]
 8018224:	4b67      	ldr	r3, [pc, #412]	@ (80183c4 <USBD_VND_DataReceived+0x374>)
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	4a67      	ldr	r2, [pc, #412]	@ (80183c8 <USBD_VND_DataReceived+0x378>)
 801822a:	6013      	str	r3, [r2, #0]
 801822c:	4b66      	ldr	r3, [pc, #408]	@ (80183c8 <USBD_VND_DataReceived+0x378>)
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	4a66      	ldr	r2, [pc, #408]	@ (80183cc <USBD_VND_DataReceived+0x37c>)
 8018232:	6013      	str	r3, [r2, #0]
 8018234:	4b65      	ldr	r3, [pc, #404]	@ (80183cc <USBD_VND_DataReceived+0x37c>)
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	4a65      	ldr	r2, [pc, #404]	@ (80183d0 <USBD_VND_DataReceived+0x380>)
 801823a:	6013      	str	r3, [r2, #0]
                } while(0);
                streaming = 1;
 801823c:	4b65      	ldr	r3, [pc, #404]	@ (80183d4 <USBD_VND_DataReceived+0x384>)
 801823e:	2201      	movs	r2, #1
 8018240:	701a      	strb	r2, [r3, #0]
                dbg_last_forced_stat_ms = start_cmd_ms;
 8018242:	4b55      	ldr	r3, [pc, #340]	@ (8018398 <USBD_VND_DataReceived+0x348>)
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	4a64      	ldr	r2, [pc, #400]	@ (80183d8 <USBD_VND_DataReceived+0x388>)
 8018248:	6013      	str	r3, [r2, #0]
                vnd_tx_ready = 1; vnd_ep_busy = 0; vnd_inflight = 0;
 801824a:	4b59      	ldr	r3, [pc, #356]	@ (80183b0 <USBD_VND_DataReceived+0x360>)
 801824c:	2201      	movs	r2, #1
 801824e:	701a      	strb	r2, [r3, #0]
 8018250:	4b56      	ldr	r3, [pc, #344]	@ (80183ac <USBD_VND_DataReceived+0x35c>)
 8018252:	2200      	movs	r2, #0
 8018254:	701a      	strb	r2, [r3, #0]
 8018256:	4b57      	ldr	r3, [pc, #348]	@ (80183b4 <USBD_VND_DataReceived+0x364>)
 8018258:	2200      	movs	r2, #0
 801825a:	701a      	strb	r2, [r3, #0]
                vnd_last_txcplt_ms = HAL_GetTick();
 801825c:	f7ec fe32 	bl	8004ec4 <HAL_GetTick>
 8018260:	4603      	mov	r3, r0
 8018262:	4a5e      	ldr	r2, [pc, #376]	@ (80183dc <USBD_VND_DataReceived+0x38c>)
 8018264:	6013      	str	r3, [r2, #0]
                /* Разрешим STAT только после первой завершённой пары */
                first_pair_done = 0; pending_status = 0; vnd_status_permit_once = 0;
 8018266:	4b49      	ldr	r3, [pc, #292]	@ (801838c <USBD_VND_DataReceived+0x33c>)
 8018268:	2200      	movs	r2, #0
 801826a:	701a      	strb	r2, [r3, #0]
 801826c:	4b41      	ldr	r3, [pc, #260]	@ (8018374 <USBD_VND_DataReceived+0x324>)
 801826e:	2200      	movs	r2, #0
 8018270:	701a      	strb	r2, [r3, #0]
 8018272:	4b5b      	ldr	r3, [pc, #364]	@ (80183e0 <USBD_VND_DataReceived+0x390>)
 8018274:	2200      	movs	r2, #0
 8018276:	701a      	strb	r2, [r3, #0]
                /* Индикация START */
                vnd_tx_bytes_at_start = vnd_total_tx_bytes;
 8018278:	4b5a      	ldr	r3, [pc, #360]	@ (80183e4 <USBD_VND_DataReceived+0x394>)
 801827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801827e:	495a      	ldr	r1, [pc, #360]	@ (80183e8 <USBD_VND_DataReceived+0x398>)
 8018280:	e9c1 2300 	strd	r2, r3, [r1]
                HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_SET);
 8018284:	2201      	movs	r2, #1
 8018286:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801828a:	4858      	ldr	r0, [pc, #352]	@ (80183ec <USBD_VND_DataReceived+0x39c>)
 801828c:	f7f1 fed6 	bl	800a03c <HAL_GPIO_WritePin>
                /* КРИТИЧНО: перезапускаем ADC/DMA после STOP */
                {
                    extern ADC_HandleTypeDef hadc1, hadc2;
                    extern HAL_StatusTypeDef adc_stream_start(ADC_HandleTypeDef *adc1, ADC_HandleTypeDef *adc2);
                    HAL_StatusTypeDef adc_st = adc_stream_start(&hadc1, &hadc2);
 8018290:	4957      	ldr	r1, [pc, #348]	@ (80183f0 <USBD_VND_DataReceived+0x3a0>)
 8018292:	4858      	ldr	r0, [pc, #352]	@ (80183f4 <USBD_VND_DataReceived+0x3a4>)
 8018294:	f7e8 fa00 	bl	8000698 <adc_stream_start>
 8018298:	4603      	mov	r3, r0
 801829a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                    if(adc_st != HAL_OK){
 801829e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d005      	beq.n	80182b2 <USBD_VND_DataReceived+0x262>
                        VND_LOG("START_STREAM: adc_stream_start FAILED (%d)", adc_st);
                        cdc_logf("ERR ADC_START_FAIL st=%d", adc_st);
 80182a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80182aa:	4619      	mov	r1, r3
 80182ac:	4852      	ldr	r0, [pc, #328]	@ (80183f8 <USBD_VND_DataReceived+0x3a8>)
 80182ae:	f7fd f8e5 	bl	801547c <cdc_logf>
                        VND_LOG("START_STREAM: ADC/DMA restarted OK");
                    }
                }
                /* ДИАГНОСТИКА: выводим активный профиль и параметры */
                {
                    uint8_t prof = adc_stream_get_profile();
 80182b2:	f7e8 f8db 	bl	800046c <adc_stream_get_profile>
 80182b6:	4603      	mov	r3, r0
 80182b8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
                    uint16_t samp = adc_stream_get_active_samples();
 80182bc:	f7e8 f8e2 	bl	8000484 <adc_stream_get_active_samples>
 80182c0:	4603      	mov	r3, r0
 80182c2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                    uint16_t rate = adc_stream_get_buf_rate();
 80182c6:	f7e8 f8e9 	bl	800049c <adc_stream_get_buf_rate>
 80182ca:	4603      	mov	r3, r0
 80182cc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
                    cdc_logf("EVT START t=%lu profile=%u samples=%u rate=%u Hz bytes=%llu", 
 80182d0:	4b31      	ldr	r3, [pc, #196]	@ (8018398 <USBD_VND_DataReceived+0x348>)
 80182d2:	6818      	ldr	r0, [r3, #0]
 80182d4:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80182d8:	f8b7 5044 	ldrh.w	r5, [r7, #68]	@ 0x44
 80182dc:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 80182e0:	4b41      	ldr	r3, [pc, #260]	@ (80183e8 <USBD_VND_DataReceived+0x398>)
 80182e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80182ea:	9100      	str	r1, [sp, #0]
 80182ec:	462b      	mov	r3, r5
 80182ee:	4622      	mov	r2, r4
 80182f0:	4601      	mov	r1, r0
 80182f2:	4842      	ldr	r0, [pc, #264]	@ (80183fc <USBD_VND_DataReceived+0x3ac>)
 80182f4:	f7fd f8c2 	bl	801547c <cdc_logf>
                    //     .frames_sent = 0,
                    //     .is_streaming = 1
                    // };
                    // stream_display_update(&stream_info);
                    /* Параметры хоста (профиль/окна/частоты) */
                    vnd_update_lcd_params();
 80182f8:	f7fd f870 	bl	80153dc <vnd_update_lcd_params>
                }
                if(!full_mode){ diag_mode_active = 1; }
 80182fc:	4b29      	ldr	r3, [pc, #164]	@ (80183a4 <USBD_VND_DataReceived+0x354>)
 80182fe:	781b      	ldrb	r3, [r3, #0]
 8018300:	b2db      	uxtb	r3, r3
 8018302:	2b00      	cmp	r3, #0
 8018304:	d102      	bne.n	801830c <USBD_VND_DataReceived+0x2bc>
 8018306:	4b3e      	ldr	r3, [pc, #248]	@ (8018400 <USBD_VND_DataReceived+0x3b0>)
 8018308:	2201      	movs	r2, #1
 801830a:	701a      	strb	r2, [r3, #0]
                /* Не формируем синтетическую первую пару: ждём реальные данные */
#if !VND_DISABLE_TEST
                if(!test_sent && !test_in_flight && !vnd_ep_busy){ vnd_try_send_test_from_task(); }
#endif
                /* Диагностический режим: подготовка и первая отправка */
                if(diag_mode_active){
 801830c:	4b3c      	ldr	r3, [pc, #240]	@ (8018400 <USBD_VND_DataReceived+0x3b0>)
 801830e:	781b      	ldrb	r3, [r3, #0]
 8018310:	2b00      	cmp	r3, #0
 8018312:	f000 8385 	beq.w	8018a20 <USBD_VND_DataReceived+0x9d0>
                    if(cur_samples_per_frame == 0){
 8018316:	4b0e      	ldr	r3, [pc, #56]	@ (8018350 <USBD_VND_DataReceived+0x300>)
 8018318:	881b      	ldrh	r3, [r3, #0]
 801831a:	b29b      	uxth	r3, r3
 801831c:	2b00      	cmp	r3, #0
 801831e:	f040 808f 	bne.w	8018440 <USBD_VND_DataReceived+0x3f0>
                        /* если хост задал samples_per_frame — используем его для DIAG */
                        uint16_t ds = (vnd_frame_samples_req != 0) ? vnd_frame_samples_req : diag_samples;
 8018322:	4b21      	ldr	r3, [pc, #132]	@ (80183a8 <USBD_VND_DataReceived+0x358>)
 8018324:	881b      	ldrh	r3, [r3, #0]
 8018326:	b29b      	uxth	r3, r3
 8018328:	2b00      	cmp	r3, #0
 801832a:	d06b      	beq.n	8018404 <USBD_VND_DataReceived+0x3b4>
 801832c:	4b1e      	ldr	r3, [pc, #120]	@ (80183a8 <USBD_VND_DataReceived+0x358>)
 801832e:	881b      	ldrh	r3, [r3, #0]
 8018330:	b29b      	uxth	r3, r3
 8018332:	e069      	b.n	8018408 <USBD_VND_DataReceived+0x3b8>
 8018334:	2401a088 	.word	0x2401a088
 8018338:	0801c42c 	.word	0x0801c42c
 801833c:	24019ff1 	.word	0x24019ff1
 8018340:	24019ff0 	.word	0x24019ff0
 8018344:	2400004c 	.word	0x2400004c
 8018348:	24019ff2 	.word	0x24019ff2
 801834c:	24019ff4 	.word	0x24019ff4
 8018350:	2400dba8 	.word	0x2400dba8
 8018354:	2400dbaa 	.word	0x2400dbaa
 8018358:	2400dc3c 	.word	0x2400dc3c
 801835c:	2400dbb7 	.word	0x2400dbb7
 8018360:	2400dc52 	.word	0x2400dc52
 8018364:	2400dbb6 	.word	0x2400dbb6
 8018368:	2400dc53 	.word	0x2400dc53
 801836c:	2400dc54 	.word	0x2400dc54
 8018370:	2400dc55 	.word	0x2400dc55
 8018374:	2400dcec 	.word	0x2400dcec
 8018378:	2400dc56 	.word	0x2400dc56
 801837c:	2400dbec 	.word	0x2400dbec
 8018380:	2400dba4 	.word	0x2400dba4
 8018384:	2400dbe8 	.word	0x2400dbe8
 8018388:	2400dbb8 	.word	0x2400dbb8
 801838c:	2400dc40 	.word	0x2400dc40
 8018390:	2400dbdc 	.word	0x2400dbdc
 8018394:	2400dbe0 	.word	0x2400dbe0
 8018398:	2400dbac 	.word	0x2400dbac
 801839c:	2400dc04 	.word	0x2400dc04
 80183a0:	2400dc08 	.word	0x2400dc08
 80183a4:	2400003c 	.word	0x2400003c
 80183a8:	2400dc3a 	.word	0x2400dc3a
 80183ac:	2400dbb4 	.word	0x2400dbb4
 80183b0:	2400003b 	.word	0x2400003b
 80183b4:	2400dbb5 	.word	0x2400dbb5
 80183b8:	2400dc1c 	.word	0x2400dc1c
 80183bc:	2401a059 	.word	0x2401a059
 80183c0:	2401a058 	.word	0x2401a058
 80183c4:	2401a068 	.word	0x2401a068
 80183c8:	2401a064 	.word	0x2401a064
 80183cc:	2401a060 	.word	0x2401a060
 80183d0:	2401a05c 	.word	0x2401a05c
 80183d4:	2400dba0 	.word	0x2400dba0
 80183d8:	2400dc10 	.word	0x2400dc10
 80183dc:	2400dbf0 	.word	0x2400dbf0
 80183e0:	2400dc51 	.word	0x2400dc51
 80183e4:	2400dc30 	.word	0x2400dc30
 80183e8:	2400dc48 	.word	0x2400dc48
 80183ec:	58020c00 	.word	0x58020c00
 80183f0:	2400ada4 	.word	0x2400ada4
 80183f4:	2400ad34 	.word	0x2400ad34
 80183f8:	0801c450 	.word	0x0801c450
 80183fc:	0801c46c 	.word	0x0801c46c
 8018400:	2400dced 	.word	0x2400dced
 8018404:	4b98      	ldr	r3, [pc, #608]	@ (8018668 <USBD_VND_DataReceived+0x618>)
 8018406:	881b      	ldrh	r3, [r3, #0]
 8018408:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
                        if(ds > VND_MAX_SAMPLES) ds = VND_MAX_SAMPLES;
 801840c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8018410:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8018414:	d903      	bls.n	801841e <USBD_VND_DataReceived+0x3ce>
 8018416:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 801841a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
                        diag_samples = ds;
 801841e:	4a92      	ldr	r2, [pc, #584]	@ (8018668 <USBD_VND_DataReceived+0x618>)
 8018420:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8018424:	8013      	strh	r3, [r2, #0]
                        cur_samples_per_frame = diag_samples;
 8018426:	4b90      	ldr	r3, [pc, #576]	@ (8018668 <USBD_VND_DataReceived+0x618>)
 8018428:	881a      	ldrh	r2, [r3, #0]
 801842a:	4b90      	ldr	r3, [pc, #576]	@ (801866c <USBD_VND_DataReceived+0x61c>)
 801842c:	801a      	strh	r2, [r3, #0]
                        cur_expected_frame_size = (uint16_t)(VND_FRAME_HDR_SIZE + cur_samples_per_frame*2u);
 801842e:	4b8f      	ldr	r3, [pc, #572]	@ (801866c <USBD_VND_DataReceived+0x61c>)
 8018430:	881b      	ldrh	r3, [r3, #0]
 8018432:	b29b      	uxth	r3, r3
 8018434:	3310      	adds	r3, #16
 8018436:	b29b      	uxth	r3, r3
 8018438:	005b      	lsls	r3, r3, #1
 801843a:	b29a      	uxth	r2, r3
 801843c:	4b8c      	ldr	r3, [pc, #560]	@ (8018670 <USBD_VND_DataReceived+0x620>)
 801843e:	801a      	strh	r2, [r3, #0]
                    }
                    diag_prepared_seq = 0xFFFFFFFFu; diag_current_pair_seq = 0xFFFFFFFFu;
 8018440:	4b8c      	ldr	r3, [pc, #560]	@ (8018674 <USBD_VND_DataReceived+0x624>)
 8018442:	f04f 32ff 	mov.w	r2, #4294967295
 8018446:	601a      	str	r2, [r3, #0]
 8018448:	4b8b      	ldr	r3, [pc, #556]	@ (8018678 <USBD_VND_DataReceived+0x628>)
 801844a:	f04f 32ff 	mov.w	r2, #4294967295
 801844e:	601a      	str	r2, [r3, #0]
                    vnd_diag_prepare_pair(stream_seq, cur_samples_per_frame);
 8018450:	4b8a      	ldr	r3, [pc, #552]	@ (801867c <USBD_VND_DataReceived+0x62c>)
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	4a85      	ldr	r2, [pc, #532]	@ (801866c <USBD_VND_DataReceived+0x61c>)
 8018456:	8812      	ldrh	r2, [r2, #0]
 8018458:	b292      	uxth	r2, r2
 801845a:	4611      	mov	r1, r2
 801845c:	4618      	mov	r0, r3
 801845e:	f7fe f92b 	bl	80166b8 <vnd_diag_prepare_pair>
                    diag_prepared_seq = stream_seq; diag_current_pair_seq = stream_seq;
 8018462:	4b86      	ldr	r3, [pc, #536]	@ (801867c <USBD_VND_DataReceived+0x62c>)
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	4a83      	ldr	r2, [pc, #524]	@ (8018674 <USBD_VND_DataReceived+0x624>)
 8018468:	6013      	str	r3, [r2, #0]
 801846a:	4b84      	ldr	r3, [pc, #528]	@ (801867c <USBD_VND_DataReceived+0x62c>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	4a82      	ldr	r2, [pc, #520]	@ (8018678 <USBD_VND_DataReceived+0x628>)
 8018470:	6013      	str	r3, [r2, #0]
                    if(!vnd_ep_busy){ (void)vnd_diag_try_tx(); }
 8018472:	4b83      	ldr	r3, [pc, #524]	@ (8018680 <USBD_VND_DataReceived+0x630>)
 8018474:	781b      	ldrb	r3, [r3, #0]
 8018476:	b2db      	uxtb	r3, r3
 8018478:	2b00      	cmp	r3, #0
 801847a:	f040 82d1 	bne.w	8018a20 <USBD_VND_DataReceived+0x9d0>
 801847e:	f7fe f9d9 	bl	8016834 <vnd_diag_try_tx>
                }
        }
        break;
 8018482:	e2cd      	b.n	8018a20 <USBD_VND_DataReceived+0x9d0>
        case VND_CMD_SET_FRAME_SAMPLES:
            if(len >= 3){
 8018484:	683b      	ldr	r3, [r7, #0]
 8018486:	2b02      	cmp	r3, #2
 8018488:	f240 82cc 	bls.w	8018a24 <USBD_VND_DataReceived+0x9d4>
                uint16_t ns = (uint16_t)(data[1] | (data[2] << 8));
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	3301      	adds	r3, #1
 8018490:	781b      	ldrb	r3, [r3, #0]
 8018492:	b21a      	sxth	r2, r3
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	3302      	adds	r3, #2
 8018498:	781b      	ldrb	r3, [r3, #0]
 801849a:	b21b      	sxth	r3, r3
 801849c:	021b      	lsls	r3, r3, #8
 801849e:	b21b      	sxth	r3, r3
 80184a0:	4313      	orrs	r3, r2
 80184a2:	b21b      	sxth	r3, r3
 80184a4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
                if(ns > VND_MAX_SAMPLES) ns = VND_MAX_SAMPLES;
 80184a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80184ac:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 80184b0:	d903      	bls.n	80184ba <USBD_VND_DataReceived+0x46a>
 80184b2:	f44f 63aa 	mov.w	r3, #1360	@ 0x550
 80184b6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
                vnd_frame_samples_req = ns;
 80184ba:	4a72      	ldr	r2, [pc, #456]	@ (8018684 <USBD_VND_DataReceived+0x634>)
 80184bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80184c0:	8013      	strh	r3, [r2, #0]
                /* Применим к диагностике сразу, чтобы DIAG шёл с нужным размером */
                diag_samples = (ns != 0) ? ns : diag_samples;
 80184c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d002      	beq.n	80184d0 <USBD_VND_DataReceived+0x480>
 80184ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80184ce:	e001      	b.n	80184d4 <USBD_VND_DataReceived+0x484>
 80184d0:	4b65      	ldr	r3, [pc, #404]	@ (8018668 <USBD_VND_DataReceived+0x618>)
 80184d2:	881b      	ldrh	r3, [r3, #0]
 80184d4:	4a64      	ldr	r2, [pc, #400]	@ (8018668 <USBD_VND_DataReceived+0x618>)
 80184d6:	8013      	strh	r3, [r2, #0]
                vnd_recompute_pair_timing(vnd_frame_samples_req);
 80184d8:	4b6a      	ldr	r3, [pc, #424]	@ (8018684 <USBD_VND_DataReceived+0x634>)
 80184da:	881b      	ldrh	r3, [r3, #0]
 80184dc:	b29b      	uxth	r3, r3
 80184de:	4618      	mov	r0, r3
 80184e0:	f7fd f978 	bl	80157d4 <vnd_recompute_pair_timing>
                /* Снимем фиксацию размера, чтобы применилось при следующем build */
                cur_samples_per_frame = 0; cur_expected_frame_size = 0;
 80184e4:	4b61      	ldr	r3, [pc, #388]	@ (801866c <USBD_VND_DataReceived+0x61c>)
 80184e6:	2200      	movs	r2, #0
 80184e8:	801a      	strh	r2, [r3, #0]
 80184ea:	4b61      	ldr	r3, [pc, #388]	@ (8018670 <USBD_VND_DataReceived+0x620>)
 80184ec:	2200      	movs	r2, #0
 80184ee:	801a      	strh	r2, [r3, #0]
                VND_LOG("SET_FRAME_SAMPLES %u -> period=%ums", (unsigned)vnd_frame_samples_req, (unsigned)vnd_pair_period_ms);
                cdc_logf("EVT SET_FRAME_SAMPLES %u", (unsigned)vnd_frame_samples_req);
 80184f0:	4b64      	ldr	r3, [pc, #400]	@ (8018684 <USBD_VND_DataReceived+0x634>)
 80184f2:	881b      	ldrh	r3, [r3, #0]
 80184f4:	b29b      	uxth	r3, r3
 80184f6:	4619      	mov	r1, r3
 80184f8:	4863      	ldr	r0, [pc, #396]	@ (8018688 <USBD_VND_DataReceived+0x638>)
 80184fa:	f7fc ffbf 	bl	801547c <cdc_logf>
                vnd_update_lcd_params();
 80184fe:	f7fc ff6d 	bl	80153dc <vnd_update_lcd_params>
            }
            break;
 8018502:	e28f      	b.n	8018a24 <USBD_VND_DataReceived+0x9d4>
        case VND_CMD_STOP_STREAM:
        {
            /* В полном режиме: STOP с ACK-STAT между парами; в DIAG — немедленная остановка без STAT по bulk */
            if(diag_mode_active){
 8018504:	4b61      	ldr	r3, [pc, #388]	@ (801868c <USBD_VND_DataReceived+0x63c>)
 8018506:	781b      	ldrb	r3, [r3, #0]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d058      	beq.n	80185be <USBD_VND_DataReceived+0x56e>
                /* Мгновенно останавливаем стрим без ACK-STAT в bulk, чтобы не нарушать DIAG поток */
                stop_request = 0; pending_status = 0;
 801850c:	4b60      	ldr	r3, [pc, #384]	@ (8018690 <USBD_VND_DataReceived+0x640>)
 801850e:	2200      	movs	r2, #0
 8018510:	701a      	strb	r2, [r3, #0]
 8018512:	4b60      	ldr	r3, [pc, #384]	@ (8018694 <USBD_VND_DataReceived+0x644>)
 8018514:	2200      	movs	r2, #0
 8018516:	701a      	strb	r2, [r3, #0]
                if(streaming){ streaming = 0; VND_LOG("STOP_STREAM (diag, immediate)"); }
 8018518:	4b5f      	ldr	r3, [pc, #380]	@ (8018698 <USBD_VND_DataReceived+0x648>)
 801851a:	781b      	ldrb	r3, [r3, #0]
 801851c:	b2db      	uxtb	r3, r3
 801851e:	2b00      	cmp	r3, #0
 8018520:	d002      	beq.n	8018528 <USBD_VND_DataReceived+0x4d8>
 8018522:	4b5d      	ldr	r3, [pc, #372]	@ (8018698 <USBD_VND_DataReceived+0x648>)
 8018524:	2200      	movs	r2, #0
 8018526:	701a      	strb	r2, [r3, #0]
                diag_mode_active = 0;
 8018528:	4b58      	ldr	r3, [pc, #352]	@ (801868c <USBD_VND_DataReceived+0x63c>)
 801852a:	2200      	movs	r2, #0
 801852c:	701a      	strb	r2, [r3, #0]
                vnd_reset_buffers();
 801852e:	f7fd faf1 	bl	8015b14 <vnd_reset_buffers>
                sending_channel = 0xFF; pending_B = 0; pending_B_since_ms = 0; test_sent = 0; test_in_flight = 0; vnd_inflight = 0;
 8018532:	4b5a      	ldr	r3, [pc, #360]	@ (801869c <USBD_VND_DataReceived+0x64c>)
 8018534:	22ff      	movs	r2, #255	@ 0xff
 8018536:	701a      	strb	r2, [r3, #0]
 8018538:	4b59      	ldr	r3, [pc, #356]	@ (80186a0 <USBD_VND_DataReceived+0x650>)
 801853a:	2200      	movs	r2, #0
 801853c:	701a      	strb	r2, [r3, #0]
 801853e:	4b59      	ldr	r3, [pc, #356]	@ (80186a4 <USBD_VND_DataReceived+0x654>)
 8018540:	2200      	movs	r2, #0
 8018542:	601a      	str	r2, [r3, #0]
 8018544:	4b58      	ldr	r3, [pc, #352]	@ (80186a8 <USBD_VND_DataReceived+0x658>)
 8018546:	2200      	movs	r2, #0
 8018548:	701a      	strb	r2, [r3, #0]
 801854a:	4b58      	ldr	r3, [pc, #352]	@ (80186ac <USBD_VND_DataReceived+0x65c>)
 801854c:	2200      	movs	r2, #0
 801854e:	701a      	strb	r2, [r3, #0]
 8018550:	4b57      	ldr	r3, [pc, #348]	@ (80186b0 <USBD_VND_DataReceived+0x660>)
 8018552:	2200      	movs	r2, #0
 8018554:	701a      	strb	r2, [r3, #0]
                /* Останавливаем DMA/источник данных */
                extern void adc_stream_stop(void);
                adc_stream_stop();
 8018556:	f7e7 ff4d 	bl	80003f4 <adc_stream_stop>
                HAL_GPIO_WritePin(Data_ready_GPIO22_GPIO_Port, Data_ready_GPIO22_Pin, GPIO_PIN_RESET);
 801855a:	2200      	movs	r2, #0
 801855c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018560:	4854      	ldr	r0, [pc, #336]	@ (80186b4 <USBD_VND_DataReceived+0x664>)
 8018562:	f7f1 fd6b 	bl	800a03c <HAL_GPIO_WritePin>
                {
                    uint64_t cur = vnd_total_tx_bytes;
 8018566:	4b54      	ldr	r3, [pc, #336]	@ (80186b8 <USBD_VND_DataReceived+0x668>)
 8018568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801856c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
                    uint64_t delta = (cur >= vnd_tx_bytes_at_start) ? (cur - vnd_tx_bytes_at_start) : 0ULL;
 8018570:	4b52      	ldr	r3, [pc, #328]	@ (80186bc <USBD_VND_DataReceived+0x66c>)
 8018572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018576:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801857a:	4290      	cmp	r0, r2
 801857c:	eb71 0303 	sbcs.w	r3, r1, r3
 8018580:	d308      	bcc.n	8018594 <USBD_VND_DataReceived+0x544>
 8018582:	4b4e      	ldr	r3, [pc, #312]	@ (80186bc <USBD_VND_DataReceived+0x66c>)
 8018584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018588:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801858c:	1a84      	subs	r4, r0, r2
 801858e:	eb61 0503 	sbc.w	r5, r1, r3
 8018592:	e003      	b.n	801859c <USBD_VND_DataReceived+0x54c>
 8018594:	f04f 0400 	mov.w	r4, #0
 8018598:	f04f 0500 	mov.w	r5, #0
 801859c:	e9c7 4512 	strd	r4, r5, [r7, #72]	@ 0x48
                    cdc_logf("EVT STOP total=%llu delta=%llu", (unsigned long long)cur, (unsigned long long)delta);
 80185a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80185a4:	e9cd 2300 	strd	r2, r3, [sp]
 80185a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80185ac:	4844      	ldr	r0, [pc, #272]	@ (80186c0 <USBD_VND_DataReceived+0x670>)
 80185ae:	f7fc ff65 	bl	801547c <cdc_logf>
                    //     .sample_count = 0,
                    //     .frames_sent = dbg_sent_ch0_total + dbg_sent_ch1_total,
                    //     .is_streaming = 0
                    // };
                    // stream_display_update(&stream_info);
                    vnd_update_lcd_params();
 80185b2:	f7fc ff13 	bl	80153dc <vnd_update_lcd_params>
                }
                vnd_tx_kick = 1; /* пнуть таск на всякий случай */
 80185b6:	4b43      	ldr	r3, [pc, #268]	@ (80186c4 <USBD_VND_DataReceived+0x674>)
 80185b8:	2201      	movs	r2, #1
 80185ba:	701a      	strb	r2, [r3, #0]
                pending_status = 1; /* попросим отправить STAT между парами */
                VND_LOG("STOP_STREAM request -> queue STAT");
                cdc_logf("EVT STOP_REQ t=%lu", (unsigned long)HAL_GetTick());
            }
        }
        break;
 80185bc:	e243      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
                stop_request = 1; /* помечаем запрос остановки */
 80185be:	4b34      	ldr	r3, [pc, #208]	@ (8018690 <USBD_VND_DataReceived+0x640>)
 80185c0:	2201      	movs	r2, #1
 80185c2:	701a      	strb	r2, [r3, #0]
                pending_status = 1; /* попросим отправить STAT между парами */
 80185c4:	4b33      	ldr	r3, [pc, #204]	@ (8018694 <USBD_VND_DataReceived+0x644>)
 80185c6:	2201      	movs	r2, #1
 80185c8:	701a      	strb	r2, [r3, #0]
                cdc_logf("EVT STOP_REQ t=%lu", (unsigned long)HAL_GetTick());
 80185ca:	f7ec fc7b 	bl	8004ec4 <HAL_GetTick>
 80185ce:	4603      	mov	r3, r0
 80185d0:	4619      	mov	r1, r3
 80185d2:	483d      	ldr	r0, [pc, #244]	@ (80186c8 <USBD_VND_DataReceived+0x678>)
 80185d4:	f7fc ff52 	bl	801547c <cdc_logf>
        break;
 80185d8:	e235      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
        case VND_CMD_GET_STATUS:
        {
            /* GET_STATUS всегда допускается: во время стрима — только между парами */
            if(streaming){
 80185da:	4b2f      	ldr	r3, [pc, #188]	@ (8018698 <USBD_VND_DataReceived+0x648>)
 80185dc:	781b      	ldrb	r3, [r3, #0]
 80185de:	b2db      	uxtb	r3, r3
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d008      	beq.n	80185f6 <USBD_VND_DataReceived+0x5a6>
                /* В DIAG-режиме исключаем любые STAT в bulk-потоке: используйте EP0 (ctrl) */
                if(diag_mode_active){ VND_LOG("GET_STATUS bulk ignored in DIAG (use EP0)"); break; }
 80185e4:	4b29      	ldr	r3, [pc, #164]	@ (801868c <USBD_VND_DataReceived+0x63c>)
 80185e6:	781b      	ldrb	r3, [r3, #0]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	f040 821d 	bne.w	8018a28 <USBD_VND_DataReceived+0x9d8>
                pending_status = 1; VND_LOG("GET_STATUS queued"); break;
 80185ee:	4b29      	ldr	r3, [pc, #164]	@ (8018694 <USBD_VND_DataReceived+0x644>)
 80185f0:	2201      	movs	r2, #1
 80185f2:	701a      	strb	r2, [r3, #0]
 80185f4:	e227      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
            }
            if(!vnd_ep_busy)
 80185f6:	4b22      	ldr	r3, [pc, #136]	@ (8018680 <USBD_VND_DataReceived+0x630>)
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	b2db      	uxtb	r3, r3
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d12f      	bne.n	8018660 <USBD_VND_DataReceived+0x610>
            {
                vnd_status_permit_once = 1;
 8018600:	4b32      	ldr	r3, [pc, #200]	@ (80186cc <USBD_VND_DataReceived+0x67c>)
 8018602:	2201      	movs	r2, #1
 8018604:	701a      	strb	r2, [r3, #0]
                uint16_t l = vnd_build_status((uint8_t*)status_buf, sizeof(status_buf));
 8018606:	2140      	movs	r1, #64	@ 0x40
 8018608:	4831      	ldr	r0, [pc, #196]	@ (80186d0 <USBD_VND_DataReceived+0x680>)
 801860a:	f7fd fb2d 	bl	8015c68 <vnd_build_status>
 801860e:	4603      	mov	r3, r0
 8018610:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                if(l)
 8018614:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8018618:	2b00      	cmp	r3, #0
 801861a:	f000 8207 	beq.w	8018a2c <USBD_VND_DataReceived+0x9dc>
                {
                    vnd_tx_ready = 0; vnd_ep_busy = 1; vnd_last_tx_len = l; vnd_last_tx_start_ms = HAL_GetTick();
 801861e:	4b2d      	ldr	r3, [pc, #180]	@ (80186d4 <USBD_VND_DataReceived+0x684>)
 8018620:	2200      	movs	r2, #0
 8018622:	701a      	strb	r2, [r3, #0]
 8018624:	4b16      	ldr	r3, [pc, #88]	@ (8018680 <USBD_VND_DataReceived+0x630>)
 8018626:	2201      	movs	r2, #1
 8018628:	701a      	strb	r2, [r3, #0]
 801862a:	4a2b      	ldr	r2, [pc, #172]	@ (80186d8 <USBD_VND_DataReceived+0x688>)
 801862c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8018630:	8013      	strh	r3, [r2, #0]
 8018632:	f7ec fc47 	bl	8004ec4 <HAL_GetTick>
 8018636:	4603      	mov	r3, r0
 8018638:	4a28      	ldr	r2, [pc, #160]	@ (80186dc <USBD_VND_DataReceived+0x68c>)
 801863a:	6013      	str	r3, [r2, #0]
                    if(USBD_VND_Transmit(&hUsbDeviceHS, (uint8_t*)status_buf, l) == USBD_OK)
 801863c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8018640:	461a      	mov	r2, r3
 8018642:	4923      	ldr	r1, [pc, #140]	@ (80186d0 <USBD_VND_DataReceived+0x680>)
 8018644:	4826      	ldr	r0, [pc, #152]	@ (80186e0 <USBD_VND_DataReceived+0x690>)
 8018646:	f000 fafd 	bl	8018c44 <USBD_VND_Transmit>
 801864a:	4603      	mov	r3, r0
 801864c:	2b00      	cmp	r3, #0
 801864e:	f000 81ed 	beq.w	8018a2c <USBD_VND_DataReceived+0x9dc>
                        VND_LOG("STAT_TX req len=%u", l);
                    else { VND_LOG("STAT_BUSY_FAIL"); vnd_tx_ready = 1; vnd_ep_busy = 0; }
 8018652:	4b20      	ldr	r3, [pc, #128]	@ (80186d4 <USBD_VND_DataReceived+0x684>)
 8018654:	2201      	movs	r2, #1
 8018656:	701a      	strb	r2, [r3, #0]
 8018658:	4b09      	ldr	r3, [pc, #36]	@ (8018680 <USBD_VND_DataReceived+0x630>)
 801865a:	2200      	movs	r2, #0
 801865c:	701a      	strb	r2, [r3, #0]
                }
            } else {
                pending_status = 1; VND_LOG("STAT_PENDING on GET_STATUS");
            }
        }
        break;
 801865e:	e1e5      	b.n	8018a2c <USBD_VND_DataReceived+0x9dc>
                pending_status = 1; VND_LOG("STAT_PENDING on GET_STATUS");
 8018660:	4b0c      	ldr	r3, [pc, #48]	@ (8018694 <USBD_VND_DataReceived+0x644>)
 8018662:	2201      	movs	r2, #1
 8018664:	701a      	strb	r2, [r3, #0]
        break;
 8018666:	e1e1      	b.n	8018a2c <USBD_VND_DataReceived+0x9dc>
 8018668:	24000042 	.word	0x24000042
 801866c:	2400dba8 	.word	0x2400dba8
 8018670:	2400dbaa 	.word	0x2400dbaa
 8018674:	24000044 	.word	0x24000044
 8018678:	24000048 	.word	0x24000048
 801867c:	2400dba4 	.word	0x2400dba4
 8018680:	2400dbb4 	.word	0x2400dbb4
 8018684:	2400dc3a 	.word	0x2400dc3a
 8018688:	0801c4a8 	.word	0x0801c4a8
 801868c:	2400dced 	.word	0x2400dced
 8018690:	2400dc57 	.word	0x2400dc57
 8018694:	2400dcec 	.word	0x2400dcec
 8018698:	2400dba0 	.word	0x2400dba0
 801869c:	2400004c 	.word	0x2400004c
 80186a0:	24019ff2 	.word	0x24019ff2
 80186a4:	24019ff4 	.word	0x24019ff4
 80186a8:	2400dbb6 	.word	0x2400dbb6
 80186ac:	2400dbb7 	.word	0x2400dbb7
 80186b0:	2400dbb5 	.word	0x2400dbb5
 80186b4:	58020c00 	.word	0x58020c00
 80186b8:	2400dc30 	.word	0x2400dc30
 80186bc:	2400dc48 	.word	0x2400dc48
 80186c0:	0801c40c 	.word	0x0801c40c
 80186c4:	2400dc50 	.word	0x2400dc50
 80186c8:	0801c4c4 	.word	0x0801c4c4
 80186cc:	2400dc51 	.word	0x2400dc51
 80186d0:	2400dc6c 	.word	0x2400dc6c
 80186d4:	2400003b 	.word	0x2400003b
 80186d8:	2400dc18 	.word	0x2400dc18
 80186dc:	2400dc1c 	.word	0x2400dc1c
 80186e0:	2400d8c4 	.word	0x2400d8c4
        case VND_CMD_SET_WINDOWS:
            if(len >= 9)
 80186e4:	683b      	ldr	r3, [r7, #0]
 80186e6:	2b08      	cmp	r3, #8
 80186e8:	f240 81a2 	bls.w	8018a30 <USBD_VND_DataReceived+0x9e0>
            {
                /* 1 + 8 байт */
                win_start0 = (uint16_t)(data[1] | (data[2] << 8));
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	3301      	adds	r3, #1
 80186f0:	781b      	ldrb	r3, [r3, #0]
 80186f2:	b21a      	sxth	r2, r3
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	3302      	adds	r3, #2
 80186f8:	781b      	ldrb	r3, [r3, #0]
 80186fa:	b21b      	sxth	r3, r3
 80186fc:	021b      	lsls	r3, r3, #8
 80186fe:	b21b      	sxth	r3, r3
 8018700:	4313      	orrs	r3, r2
 8018702:	b21b      	sxth	r3, r3
 8018704:	b29a      	uxth	r2, r3
 8018706:	4ba1      	ldr	r3, [pc, #644]	@ (801898c <USBD_VND_DataReceived+0x93c>)
 8018708:	801a      	strh	r2, [r3, #0]
                win_len0   = (uint16_t)(data[3] | (data[4] << 8));
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	3303      	adds	r3, #3
 801870e:	781b      	ldrb	r3, [r3, #0]
 8018710:	b21a      	sxth	r2, r3
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	3304      	adds	r3, #4
 8018716:	781b      	ldrb	r3, [r3, #0]
 8018718:	b21b      	sxth	r3, r3
 801871a:	021b      	lsls	r3, r3, #8
 801871c:	b21b      	sxth	r3, r3
 801871e:	4313      	orrs	r3, r2
 8018720:	b21b      	sxth	r3, r3
 8018722:	b29a      	uxth	r2, r3
 8018724:	4b9a      	ldr	r3, [pc, #616]	@ (8018990 <USBD_VND_DataReceived+0x940>)
 8018726:	801a      	strh	r2, [r3, #0]
                win_start1 = (uint16_t)(data[5] | (data[6] << 8));
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	3305      	adds	r3, #5
 801872c:	781b      	ldrb	r3, [r3, #0]
 801872e:	b21a      	sxth	r2, r3
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	3306      	adds	r3, #6
 8018734:	781b      	ldrb	r3, [r3, #0]
 8018736:	b21b      	sxth	r3, r3
 8018738:	021b      	lsls	r3, r3, #8
 801873a:	b21b      	sxth	r3, r3
 801873c:	4313      	orrs	r3, r2
 801873e:	b21b      	sxth	r3, r3
 8018740:	b29a      	uxth	r2, r3
 8018742:	4b94      	ldr	r3, [pc, #592]	@ (8018994 <USBD_VND_DataReceived+0x944>)
 8018744:	801a      	strh	r2, [r3, #0]
                win_len1   = (uint16_t)(data[7] | (data[8] << 8));
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	3307      	adds	r3, #7
 801874a:	781b      	ldrb	r3, [r3, #0]
 801874c:	b21a      	sxth	r2, r3
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	3308      	adds	r3, #8
 8018752:	781b      	ldrb	r3, [r3, #0]
 8018754:	b21b      	sxth	r3, r3
 8018756:	021b      	lsls	r3, r3, #8
 8018758:	b21b      	sxth	r3, r3
 801875a:	4313      	orrs	r3, r2
 801875c:	b21b      	sxth	r3, r3
 801875e:	b29a      	uxth	r2, r3
 8018760:	4b8d      	ldr	r3, [pc, #564]	@ (8018998 <USBD_VND_DataReceived+0x948>)
 8018762:	801a      	strh	r2, [r3, #0]
                VND_LOG("SET_WINDOWS s0=%u l0=%u s1=%u l1=%u", win_start0, win_len0, win_start1, win_len1);
                vnd_update_lcd_params();
 8018764:	f7fc fe3a 	bl	80153dc <vnd_update_lcd_params>
            }
            break;
 8018768:	e162      	b.n	8018a30 <USBD_VND_DataReceived+0x9e0>
        case VND_CMD_SET_BLOCK_HZ:
            if(len >= 3)
 801876a:	683b      	ldr	r3, [r7, #0]
 801876c:	2b02      	cmp	r3, #2
 801876e:	f240 8161 	bls.w	8018a34 <USBD_VND_DataReceived+0x9e4>
            {
                uint16_t hz = (uint16_t)(data[1] | (data[2] << 8));
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	3301      	adds	r3, #1
 8018776:	781b      	ldrb	r3, [r3, #0]
 8018778:	b21a      	sxth	r2, r3
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	3302      	adds	r3, #2
 801877e:	781b      	ldrb	r3, [r3, #0]
 8018780:	b21b      	sxth	r3, r3
 8018782:	021b      	lsls	r3, r3, #8
 8018784:	b21b      	sxth	r3, r3
 8018786:	4313      	orrs	r3, r2
 8018788:	b21b      	sxth	r3, r3
 801878a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
                if(hz == 0xFFFF) hz = 100;
 801878e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8018792:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018796:	4293      	cmp	r3, r2
 8018798:	d102      	bne.n	80187a0 <USBD_VND_DataReceived+0x750>
 801879a:	2364      	movs	r3, #100	@ 0x64
 801879c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
                if(hz < 20) hz = 20;
 80187a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80187a4:	2b13      	cmp	r3, #19
 80187a6:	d802      	bhi.n	80187ae <USBD_VND_DataReceived+0x75e>
 80187a8:	2314      	movs	r3, #20
 80187aa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
                if(hz > 100) hz = 100;
 80187ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80187b2:	2b64      	cmp	r3, #100	@ 0x64
 80187b4:	d902      	bls.n	80187bc <USBD_VND_DataReceived+0x76c>
 80187b6:	2364      	movs	r3, #100	@ 0x64
 80187b8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
                diag_hz = hz;
 80187bc:	4a77      	ldr	r2, [pc, #476]	@ (801899c <USBD_VND_DataReceived+0x94c>)
 80187be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80187c2:	8013      	strh	r3, [r2, #0]
                diag_period_ms = 1000 / diag_hz;
 80187c4:	4b75      	ldr	r3, [pc, #468]	@ (801899c <USBD_VND_DataReceived+0x94c>)
 80187c6:	881b      	ldrh	r3, [r3, #0]
 80187c8:	461a      	mov	r2, r3
 80187ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80187ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80187d2:	461a      	mov	r2, r3
 80187d4:	4b72      	ldr	r3, [pc, #456]	@ (80189a0 <USBD_VND_DataReceived+0x950>)
 80187d6:	601a      	str	r2, [r3, #0]
                VND_LOG("SET_BLOCK_HZ %u", diag_hz);
                cdc_logf("EVT SET_BLOCK_HZ %u", (unsigned)diag_hz);
 80187d8:	4b70      	ldr	r3, [pc, #448]	@ (801899c <USBD_VND_DataReceived+0x94c>)
 80187da:	881b      	ldrh	r3, [r3, #0]
 80187dc:	4619      	mov	r1, r3
 80187de:	4871      	ldr	r0, [pc, #452]	@ (80189a4 <USBD_VND_DataReceived+0x954>)
 80187e0:	f7fc fe4c 	bl	801547c <cdc_logf>
                vnd_update_lcd_params();
 80187e4:	f7fc fdfa 	bl	80153dc <vnd_update_lcd_params>
            }
            break;
 80187e8:	e124      	b.n	8018a34 <USBD_VND_DataReceived+0x9e4>
        case VND_CMD_SET_FULL_MODE:
            if(len >= 2)
 80187ea:	683b      	ldr	r3, [r7, #0]
 80187ec:	2b01      	cmp	r3, #1
 80187ee:	f240 8123 	bls.w	8018a38 <USBD_VND_DataReceived+0x9e8>
            {
                uint8_t full = data[1] ? 1 : 0;
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	3301      	adds	r3, #1
 80187f6:	781b      	ldrb	r3, [r3, #0]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	bf14      	ite	ne
 80187fc:	2301      	movne	r3, #1
 80187fe:	2300      	moveq	r3, #0
 8018800:	b2db      	uxtb	r3, r3
 8018802:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                full_mode = full;
 8018806:	4a68      	ldr	r2, [pc, #416]	@ (80189a8 <USBD_VND_DataReceived+0x958>)
 8018808:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801880c:	7013      	strb	r3, [r2, #0]
                VND_LOG("SET_FULL_MODE %u", full_mode);
                cdc_logf("EVT SET_FULL_MODE %u", (unsigned)full_mode);
 801880e:	4b66      	ldr	r3, [pc, #408]	@ (80189a8 <USBD_VND_DataReceived+0x958>)
 8018810:	781b      	ldrb	r3, [r3, #0]
 8018812:	b2db      	uxtb	r3, r3
 8018814:	4619      	mov	r1, r3
 8018816:	4865      	ldr	r0, [pc, #404]	@ (80189ac <USBD_VND_DataReceived+0x95c>)
 8018818:	f7fc fe30 	bl	801547c <cdc_logf>
                if(streaming){
 801881c:	4b64      	ldr	r3, [pc, #400]	@ (80189b0 <USBD_VND_DataReceived+0x960>)
 801881e:	781b      	ldrb	r3, [r3, #0]
 8018820:	b2db      	uxtb	r3, r3
 8018822:	2b00      	cmp	r3, #0
 8018824:	d005      	beq.n	8018832 <USBD_VND_DataReceived+0x7e2>
                    /* Переключение режима на лету: сброс пары и разрешение TEST не требуется */
                    pending_B = 0; sending_channel = 0xFF;
 8018826:	4b63      	ldr	r3, [pc, #396]	@ (80189b4 <USBD_VND_DataReceived+0x964>)
 8018828:	2200      	movs	r2, #0
 801882a:	701a      	strb	r2, [r3, #0]
 801882c:	4b62      	ldr	r3, [pc, #392]	@ (80189b8 <USBD_VND_DataReceived+0x968>)
 801882e:	22ff      	movs	r2, #255	@ 0xff
 8018830:	701a      	strb	r2, [r3, #0]
                }
                if(full_mode){
 8018832:	4b5d      	ldr	r3, [pc, #372]	@ (80189a8 <USBD_VND_DataReceived+0x958>)
 8018834:	781b      	ldrb	r3, [r3, #0]
 8018836:	b2db      	uxtb	r3, r3
 8018838:	2b00      	cmp	r3, #0
 801883a:	d017      	beq.n	801886c <USBD_VND_DataReceived+0x81c>
                    /* Возврат к нормальному режиму ADC */
                    diag_mode_active = 0; diag_prepared_seq = 0xFFFFFFFFu;
 801883c:	4b5f      	ldr	r3, [pc, #380]	@ (80189bc <USBD_VND_DataReceived+0x96c>)
 801883e:	2200      	movs	r2, #0
 8018840:	701a      	strb	r2, [r3, #0]
 8018842:	4b5f      	ldr	r3, [pc, #380]	@ (80189c0 <USBD_VND_DataReceived+0x970>)
 8018844:	f04f 32ff 	mov.w	r2, #4294967295
 8018848:	601a      	str	r2, [r3, #0]
                    /* При входе в полный режим – задать дефолт 300 сэмплов, снять lock и пересчитать период */
                    vnd_frame_samples_req = VND_FULL_DEFAULT_SAMPLES;
 801884a:	4b5e      	ldr	r3, [pc, #376]	@ (80189c4 <USBD_VND_DataReceived+0x974>)
 801884c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8018850:	801a      	strh	r2, [r3, #0]
                    cur_samples_per_frame = 0;
 8018852:	4b5d      	ldr	r3, [pc, #372]	@ (80189c8 <USBD_VND_DataReceived+0x978>)
 8018854:	2200      	movs	r2, #0
 8018856:	801a      	strh	r2, [r3, #0]
                    cur_expected_frame_size = 0;
 8018858:	4b5c      	ldr	r3, [pc, #368]	@ (80189cc <USBD_VND_DataReceived+0x97c>)
 801885a:	2200      	movs	r2, #0
 801885c:	801a      	strh	r2, [r3, #0]
                    vnd_recompute_pair_timing(vnd_frame_samples_req);
 801885e:	4b59      	ldr	r3, [pc, #356]	@ (80189c4 <USBD_VND_DataReceived+0x974>)
 8018860:	881b      	ldrh	r3, [r3, #0]
 8018862:	b29b      	uxth	r3, r3
 8018864:	4618      	mov	r0, r3
 8018866:	f7fc ffb5 	bl	80157d4 <vnd_recompute_pair_timing>
 801886a:	e02d      	b.n	80188c8 <USBD_VND_DataReceived+0x878>
                } else {
                    /* Включаем диагностический режим (пила) */
                    diag_mode_active = 1;
 801886c:	4b53      	ldr	r3, [pc, #332]	@ (80189bc <USBD_VND_DataReceived+0x96c>)
 801886e:	2201      	movs	r2, #1
 8018870:	701a      	strb	r2, [r3, #0]
                    diag_samples = (cur_samples_per_frame != 0) ? cur_samples_per_frame : VND_DEFAULT_TEST_SAMPLES;
 8018872:	4b55      	ldr	r3, [pc, #340]	@ (80189c8 <USBD_VND_DataReceived+0x978>)
 8018874:	881b      	ldrh	r3, [r3, #0]
 8018876:	b29b      	uxth	r3, r3
 8018878:	2b00      	cmp	r3, #0
 801887a:	d003      	beq.n	8018884 <USBD_VND_DataReceived+0x834>
 801887c:	4b52      	ldr	r3, [pc, #328]	@ (80189c8 <USBD_VND_DataReceived+0x978>)
 801887e:	881b      	ldrh	r3, [r3, #0]
 8018880:	b29b      	uxth	r3, r3
 8018882:	e000      	b.n	8018886 <USBD_VND_DataReceived+0x836>
 8018884:	2350      	movs	r3, #80	@ 0x50
 8018886:	4a52      	ldr	r2, [pc, #328]	@ (80189d0 <USBD_VND_DataReceived+0x980>)
 8018888:	8013      	strh	r3, [r2, #0]
                    if(diag_samples > VND_MAX_SAMPLES) diag_samples = VND_MAX_SAMPLES;
 801888a:	4b51      	ldr	r3, [pc, #324]	@ (80189d0 <USBD_VND_DataReceived+0x980>)
 801888c:	881b      	ldrh	r3, [r3, #0]
 801888e:	f5b3 6faa 	cmp.w	r3, #1360	@ 0x550
 8018892:	d903      	bls.n	801889c <USBD_VND_DataReceived+0x84c>
 8018894:	4b4e      	ldr	r3, [pc, #312]	@ (80189d0 <USBD_VND_DataReceived+0x980>)
 8018896:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 801889a:	801a      	strh	r2, [r3, #0]
                    cur_samples_per_frame = diag_samples;
 801889c:	4b4c      	ldr	r3, [pc, #304]	@ (80189d0 <USBD_VND_DataReceived+0x980>)
 801889e:	881a      	ldrh	r2, [r3, #0]
 80188a0:	4b49      	ldr	r3, [pc, #292]	@ (80189c8 <USBD_VND_DataReceived+0x978>)
 80188a2:	801a      	strh	r2, [r3, #0]
                    cur_expected_frame_size = (uint16_t)(VND_FRAME_HDR_SIZE + cur_samples_per_frame*2u);
 80188a4:	4b48      	ldr	r3, [pc, #288]	@ (80189c8 <USBD_VND_DataReceived+0x978>)
 80188a6:	881b      	ldrh	r3, [r3, #0]
 80188a8:	b29b      	uxth	r3, r3
 80188aa:	3310      	adds	r3, #16
 80188ac:	b29b      	uxth	r3, r3
 80188ae:	005b      	lsls	r3, r3, #1
 80188b0:	b29a      	uxth	r2, r3
 80188b2:	4b46      	ldr	r3, [pc, #280]	@ (80189cc <USBD_VND_DataReceived+0x97c>)
 80188b4:	801a      	strh	r2, [r3, #0]
                    /* Разрешаем немедленную отправку диагностических кадров */
                    diag_next_ms = HAL_GetTick(); diag_prepared_seq = 0xFFFFFFFFu;
 80188b6:	f7ec fb05 	bl	8004ec4 <HAL_GetTick>
 80188ba:	4603      	mov	r3, r0
 80188bc:	4a45      	ldr	r2, [pc, #276]	@ (80189d4 <USBD_VND_DataReceived+0x984>)
 80188be:	6013      	str	r3, [r2, #0]
 80188c0:	4b3f      	ldr	r3, [pc, #252]	@ (80189c0 <USBD_VND_DataReceived+0x970>)
 80188c2:	f04f 32ff 	mov.w	r2, #4294967295
 80188c6:	601a      	str	r2, [r3, #0]
                }
                vnd_update_lcd_params();
 80188c8:	f7fc fd88 	bl	80153dc <vnd_update_lcd_params>
            }
            break;
 80188cc:	e0b4      	b.n	8018a38 <USBD_VND_DataReceived+0x9e8>
        case VND_CMD_SET_TRUNC_SAMPLES:
            if(len >= 3){
 80188ce:	683b      	ldr	r3, [r7, #0]
 80188d0:	2b02      	cmp	r3, #2
 80188d2:	f240 80b3 	bls.w	8018a3c <USBD_VND_DataReceived+0x9ec>
                uint16_t ns = (uint16_t)(data[1] | (data[2] << 8));
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	3301      	adds	r3, #1
 80188da:	781b      	ldrb	r3, [r3, #0]
 80188dc:	b21a      	sxth	r2, r3
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	3302      	adds	r3, #2
 80188e2:	781b      	ldrb	r3, [r3, #0]
 80188e4:	b21b      	sxth	r3, r3
 80188e6:	021b      	lsls	r3, r3, #8
 80188e8:	b21b      	sxth	r3, r3
 80188ea:	4313      	orrs	r3, r2
 80188ec:	b21b      	sxth	r3, r3
 80188ee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                vnd_trunc_samples = ns;
 80188f2:	4a39      	ldr	r2, [pc, #228]	@ (80189d8 <USBD_VND_DataReceived+0x988>)
 80188f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80188f8:	8013      	strh	r3, [r2, #0]
                VND_LOG("SET_TRUNC_SAMPLES %u", (unsigned)vnd_trunc_samples);
                cdc_logf("EVT SET_TRUNC %u", (unsigned)vnd_trunc_samples);
 80188fa:	4b37      	ldr	r3, [pc, #220]	@ (80189d8 <USBD_VND_DataReceived+0x988>)
 80188fc:	881b      	ldrh	r3, [r3, #0]
 80188fe:	b29b      	uxth	r3, r3
 8018900:	4619      	mov	r1, r3
 8018902:	4836      	ldr	r0, [pc, #216]	@ (80189dc <USBD_VND_DataReceived+0x98c>)
 8018904:	f7fc fdba 	bl	801547c <cdc_logf>
                /* Сбросим текущий lock размера, чтобы статус отразил новые размеры, применится при следующем кадре */
                cur_samples_per_frame = 0;
 8018908:	4b2f      	ldr	r3, [pc, #188]	@ (80189c8 <USBD_VND_DataReceived+0x978>)
 801890a:	2200      	movs	r2, #0
 801890c:	801a      	strh	r2, [r3, #0]
                cur_expected_frame_size = 0;
 801890e:	4b2f      	ldr	r3, [pc, #188]	@ (80189cc <USBD_VND_DataReceived+0x97c>)
 8018910:	2200      	movs	r2, #0
 8018912:	801a      	strh	r2, [r3, #0]
            }
            break;
 8018914:	e092      	b.n	8018a3c <USBD_VND_DataReceived+0x9ec>
        case VND_CMD_SET_PROFILE:
            if(len >= 2)
 8018916:	683b      	ldr	r3, [r7, #0]
 8018918:	2b01      	cmp	r3, #1
 801891a:	f240 8091 	bls.w	8018a40 <USBD_VND_DataReceived+0x9f0>
            {
                uint8_t profile = data[1];
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	3301      	adds	r3, #1
 8018922:	781b      	ldrb	r3, [r3, #0]
 8018924:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t prof_id = ADC_PROFILE_B_DEFAULT;
 8018928:	2301      	movs	r3, #1
 801892a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                if(profile == 1) prof_id = ADC_PROFILE_A_200HZ;
 801892e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8018932:	2b01      	cmp	r3, #1
 8018934:	d103      	bne.n	801893e <USBD_VND_DataReceived+0x8ee>
 8018936:	2300      	movs	r3, #0
 8018938:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 801893c:	e006      	b.n	801894c <USBD_VND_DataReceived+0x8fc>
                else if(profile == 2) prof_id = ADC_PROFILE_B_DEFAULT;
 801893e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8018942:	2b02      	cmp	r3, #2
 8018944:	d102      	bne.n	801894c <USBD_VND_DataReceived+0x8fc>
 8018946:	2301      	movs	r3, #1
 8018948:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                int rc = adc_stream_set_profile(prof_id);
 801894c:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8018950:	4618      	mov	r0, r3
 8018952:	f7e7 fe4d 	bl	80005f0 <adc_stream_set_profile>
 8018956:	6378      	str	r0, [r7, #52]	@ 0x34
                VND_LOG("SET_PROFILE %u -> prof_id=%u rc=%d", profile, prof_id, rc);
                /* ДИАГНОСТИКА: вывести текущее состояние после смены профиля */
                if(rc == 0) {
 8018958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801895a:	2b00      	cmp	r3, #0
 801895c:	d170      	bne.n	8018a40 <USBD_VND_DataReceived+0x9f0>
                    host_profile = profile; /* запомним для LCD ровно то, что прислал хост */
 801895e:	4a20      	ldr	r2, [pc, #128]	@ (80189e0 <USBD_VND_DataReceived+0x990>)
 8018960:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8018964:	7013      	strb	r3, [r2, #0]
                    uint16_t cur_samples = adc_stream_get_active_samples();
 8018966:	f7e7 fd8d 	bl	8000484 <adc_stream_get_active_samples>
 801896a:	4603      	mov	r3, r0
 801896c:	867b      	strh	r3, [r7, #50]	@ 0x32
                    uint16_t cur_rate = adc_stream_get_buf_rate();
 801896e:	f7e7 fd95 	bl	800049c <adc_stream_get_buf_rate>
 8018972:	4603      	mov	r3, r0
 8018974:	863b      	strh	r3, [r7, #48]	@ 0x30
                    cdc_logf("EVT SET_PROFILE p=%u samples=%u rate=%u Hz", profile, cur_samples, cur_rate);
 8018976:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 801897a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801897c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801897e:	4819      	ldr	r0, [pc, #100]	@ (80189e4 <USBD_VND_DataReceived+0x994>)
 8018980:	f7fc fd7c 	bl	801547c <cdc_logf>
                    vnd_update_lcd_params();
 8018984:	f7fc fd2a 	bl	80153dc <vnd_update_lcd_params>
                }
            }
            break;
 8018988:	e05a      	b.n	8018a40 <USBD_VND_DataReceived+0x9f0>
 801898a:	bf00      	nop
 801898c:	2400f27c 	.word	0x2400f27c
 8018990:	2400f27e 	.word	0x2400f27e
 8018994:	2400f280 	.word	0x2400f280
 8018998:	2400f282 	.word	0x2400f282
 801899c:	24000040 	.word	0x24000040
 80189a0:	2400dcf0 	.word	0x2400dcf0
 80189a4:	0801c4d8 	.word	0x0801c4d8
 80189a8:	2400003c 	.word	0x2400003c
 80189ac:	0801c4ec 	.word	0x0801c4ec
 80189b0:	2400dba0 	.word	0x2400dba0
 80189b4:	24019ff2 	.word	0x24019ff2
 80189b8:	2400004c 	.word	0x2400004c
 80189bc:	2400dced 	.word	0x2400dced
 80189c0:	24000044 	.word	0x24000044
 80189c4:	2400dc3a 	.word	0x2400dc3a
 80189c8:	2400dba8 	.word	0x2400dba8
 80189cc:	2400dbaa 	.word	0x2400dbaa
 80189d0:	24000042 	.word	0x24000042
 80189d4:	2400dcf4 	.word	0x2400dcf4
 80189d8:	2400dc38 	.word	0x2400dc38
 80189dc:	0801c504 	.word	0x0801c504
 80189e0:	2400dc16 	.word	0x2400dc16
 80189e4:	0801c518 	.word	0x0801c518
        case VND_CMD_SET_ROI_US:
            if(len >= 5)
 80189e8:	683b      	ldr	r3, [r7, #0]
 80189ea:	2b04      	cmp	r3, #4
 80189ec:	d92a      	bls.n	8018a44 <USBD_VND_DataReceived+0x9f4>
            {
                uint32_t us = (uint32_t)(data[1] | (data[2] << 8) | (data[3] << 16) | (data[4] << 24));
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	3301      	adds	r3, #1
 80189f2:	781b      	ldrb	r3, [r3, #0]
 80189f4:	461a      	mov	r2, r3
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	3302      	adds	r3, #2
 80189fa:	781b      	ldrb	r3, [r3, #0]
 80189fc:	021b      	lsls	r3, r3, #8
 80189fe:	431a      	orrs	r2, r3
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	3303      	adds	r3, #3
 8018a04:	781b      	ldrb	r3, [r3, #0]
 8018a06:	041b      	lsls	r3, r3, #16
 8018a08:	431a      	orrs	r2, r3
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	3304      	adds	r3, #4
 8018a0e:	781b      	ldrb	r3, [r3, #0]
 8018a10:	061b      	lsls	r3, r3, #24
 8018a12:	4313      	orrs	r3, r2
 8018a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
                /* TODO: применить ROI к цепочке выборки */
                VND_LOG("SET_ROI_US %lu", (unsigned long)us);
            }
            break;
 8018a16:	e015      	b.n	8018a44 <USBD_VND_DataReceived+0x9f4>
    if(!len) return;
 8018a18:	bf00      	nop
 8018a1a:	e014      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
        default:
            VND_LOG("IGN %02X", cmd);
            break;
 8018a1c:	bf00      	nop
 8018a1e:	e012      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
        break;
 8018a20:	bf00      	nop
 8018a22:	e010      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
            break;
 8018a24:	bf00      	nop
 8018a26:	e00e      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
                if(diag_mode_active){ VND_LOG("GET_STATUS bulk ignored in DIAG (use EP0)"); break; }
 8018a28:	bf00      	nop
 8018a2a:	e00c      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
        break;
 8018a2c:	bf00      	nop
 8018a2e:	e00a      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
            break;
 8018a30:	bf00      	nop
 8018a32:	e008      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
            break;
 8018a34:	bf00      	nop
 8018a36:	e006      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
            break;
 8018a38:	bf00      	nop
 8018a3a:	e004      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
            break;
 8018a3c:	bf00      	nop
 8018a3e:	e002      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
            break;
 8018a40:	bf00      	nop
 8018a42:	e000      	b.n	8018a46 <USBD_VND_DataReceived+0x9f6>
            break;
 8018a44:	bf00      	nop
    }
}
 8018a46:	3768      	adds	r7, #104	@ 0x68
 8018a48:	46bd      	mov	sp, r7
 8018a4a:	bdb0      	pop	{r4, r5, r7, pc}

08018a4c <vnd_get_total_tx_bytes>:
    return vnd_last_txcplt_ms;
}

/* Общее число переданных байт (все передачи) */
uint64_t vnd_get_total_tx_bytes(void)
{
 8018a4c:	b480      	push	{r7}
 8018a4e:	af00      	add	r7, sp, #0
    return vnd_total_tx_bytes;
 8018a50:	4b04      	ldr	r3, [pc, #16]	@ (8018a64 <vnd_get_total_tx_bytes+0x18>)
 8018a52:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8018a56:	4610      	mov	r0, r2
 8018a58:	4619      	mov	r1, r3
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a60:	4770      	bx	lr
 8018a62:	bf00      	nop
 8018a64:	2400dc30 	.word	0x2400dc30

08018a68 <vnd_get_total_tx_samples>:

/* Общее число переданных сэмплов (оба канала суммарно) */
uint64_t vnd_get_total_tx_samples(void)
{
 8018a68:	b480      	push	{r7}
 8018a6a:	af00      	add	r7, sp, #0
    return vnd_total_tx_samples;
 8018a6c:	4b04      	ldr	r3, [pc, #16]	@ (8018a80 <vnd_get_total_tx_samples+0x18>)
 8018a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8018a72:	4610      	mov	r0, r2
 8018a74:	4619      	mov	r1, r3
 8018a76:	46bd      	mov	sp, r7
 8018a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a7c:	4770      	bx	lr
 8018a7e:	bf00      	nop
 8018a80:	2400dbf8 	.word	0x2400dbf8

08018a84 <adc_stream_on_new_frames>:

/* Хук от цепочки ADC: когда появились новые кадры — пинаем таск */
void adc_stream_on_new_frames(uint32_t frames_added)
{
 8018a84:	b480      	push	{r7}
 8018a86:	b083      	sub	sp, #12
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	6078      	str	r0, [r7, #4]
    (void)frames_added;
    /* минимальный kick: если не заняты и идёт стрим — дать шанс таску отправить */
    if(streaming){ vnd_tx_kick = 1; }
 8018a8c:	4b06      	ldr	r3, [pc, #24]	@ (8018aa8 <adc_stream_on_new_frames+0x24>)
 8018a8e:	781b      	ldrb	r3, [r3, #0]
 8018a90:	b2db      	uxtb	r3, r3
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d002      	beq.n	8018a9c <adc_stream_on_new_frames+0x18>
 8018a96:	4b05      	ldr	r3, [pc, #20]	@ (8018aac <adc_stream_on_new_frames+0x28>)
 8018a98:	2201      	movs	r2, #1
 8018a9a:	701a      	strb	r2, [r3, #0]
}
 8018a9c:	bf00      	nop
 8018a9e:	370c      	adds	r7, #12
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa6:	4770      	bx	lr
 8018aa8:	2400dba0 	.word	0x2400dba0
 8018aac:	2400dc50 	.word	0x2400dc50

08018ab0 <USBD_VND_RequestSoftReset>:
static volatile uint8_t vnd_tx_busy = 0;
static volatile uint8_t vnd_last_tx_rc = 0xFF; /* последний rc из USBD_LL_Transmit */
static volatile uint16_t vnd_last_tx_len = 0;

/* Запросить soft/deep reset откуда угодно (в т.ч. из приложения) */
void USBD_VND_RequestSoftReset(void){ g_req_soft_reset = 1; }
 8018ab0:	b480      	push	{r7}
 8018ab2:	af00      	add	r7, sp, #0
 8018ab4:	4b03      	ldr	r3, [pc, #12]	@ (8018ac4 <USBD_VND_RequestSoftReset+0x14>)
 8018ab6:	2201      	movs	r2, #1
 8018ab8:	701a      	strb	r2, [r3, #0]
 8018aba:	bf00      	nop
 8018abc:	46bd      	mov	sp, r7
 8018abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac2:	4770      	bx	lr
 8018ac4:	2401a08c 	.word	0x2401a08c

08018ac8 <VND_Class_SoftReset>:
void USBD_VND_RequestDeepReset(void){ g_req_deep_reset = 1; }

/* Выполнить мягкий/глубокий ресет класса Vendor (без ре-энумерации USB) */
static void VND_Class_SoftReset(USBD_HandleTypeDef *pdev)
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	b082      	sub	sp, #8
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	6078      	str	r0, [r7, #4]
  /* Снять занятость, очистить возможные STALL, флешнуть FIFO EP */
  USBD_VND_ForceTxIdle();
 8018ad0:	f000 f944 	bl	8018d5c <USBD_VND_ForceTxIdle>
  (void)USBD_LL_FlushEP(pdev, VND_IN_EP);
 8018ad4:	2183      	movs	r1, #131	@ 0x83
 8018ad6:	6878      	ldr	r0, [r7, #4]
 8018ad8:	f001 fa32 	bl	8019f40 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, VND_OUT_EP);
 8018adc:	2103      	movs	r1, #3
 8018ade:	6878      	ldr	r0, [r7, #4]
 8018ae0:	f001 fa2e 	bl	8019f40 <USBD_LL_FlushEP>
  (void)USBD_LL_ClearStallEP(pdev, VND_IN_EP);
 8018ae4:	2183      	movs	r1, #131	@ 0x83
 8018ae6:	6878      	ldr	r0, [r7, #4]
 8018ae8:	f001 fa68 	bl	8019fbc <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, VND_OUT_EP);
 8018aec:	2103      	movs	r1, #3
 8018aee:	6878      	ldr	r0, [r7, #4]
 8018af0:	f001 fa64 	bl	8019fbc <USBD_LL_ClearStallEP>
  /* Реарм приёма */
  if (g_alt_if2 == 1) {
 8018af4:	4b0e      	ldr	r3, [pc, #56]	@ (8018b30 <VND_Class_SoftReset+0x68>)
 8018af6:	781b      	ldrb	r3, [r3, #0]
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	2b01      	cmp	r3, #1
 8018afc:	d111      	bne.n	8018b22 <VND_Class_SoftReset+0x5a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	7c1b      	ldrb	r3, [r3, #16]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d107      	bne.n	8018b16 <VND_Class_SoftReset+0x4e>
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_HS_MAX_PACKET_SIZE);
 8018b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8018b34 <VND_Class_SoftReset+0x6c>)
 8018b0c:	2103      	movs	r1, #3
 8018b0e:	6878      	ldr	r0, [r7, #4]
 8018b10:	f001 fadf 	bl	801a0d2 <USBD_LL_PrepareReceive>
 8018b14:	e005      	b.n	8018b22 <VND_Class_SoftReset+0x5a>
    else
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_FS_MAX_PACKET_SIZE);
 8018b16:	2340      	movs	r3, #64	@ 0x40
 8018b18:	4a06      	ldr	r2, [pc, #24]	@ (8018b34 <VND_Class_SoftReset+0x6c>)
 8018b1a:	2103      	movs	r1, #3
 8018b1c:	6878      	ldr	r0, [r7, #4]
 8018b1e:	f001 fad8 	bl	801a0d2 <USBD_LL_PrepareReceive>
  }
  /* Остановить и очистить пайплайн приложения */
  vnd_pipeline_stop_reset(0);
 8018b22:	2000      	movs	r0, #0
 8018b24:	f7fc fe8e 	bl	8015844 <vnd_pipeline_stop_reset>
}
 8018b28:	bf00      	nop
 8018b2a:	3708      	adds	r7, #8
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}
 8018b30:	2401a08e 	.word	0x2401a08e
 8018b34:	2401a090 	.word	0x2401a090

08018b38 <VND_Class_DeepReset>:

static void VND_Class_DeepReset(USBD_HandleTypeDef *pdev)
{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b082      	sub	sp, #8
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	6078      	str	r0, [r7, #4]
  /* Закрыть и переоткрыть конечные точки Vendor */
  (void)USBD_LL_CloseEP(pdev, VND_IN_EP);  pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 0U;
 8018b40:	2183      	movs	r1, #131	@ 0x83
 8018b42:	6878      	ldr	r0, [r7, #4]
 8018b44:	f001 f9dd 	bl	8019f02 <USBD_LL_CloseEP>
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  (void)USBD_LL_CloseEP(pdev, VND_OUT_EP); pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 0U;
 8018b50:	2103      	movs	r1, #3
 8018b52:	6878      	ldr	r0, [r7, #4]
 8018b54:	f001 f9d5 	bl	8019f02 <USBD_LL_CloseEP>
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
  if (g_alt_if2 == 1) {
 8018b60:	4b26      	ldr	r3, [pc, #152]	@ (8018bfc <VND_Class_DeepReset+0xc4>)
 8018b62:	781b      	ldrb	r3, [r3, #0]
 8018b64:	b2db      	uxtb	r3, r3
 8018b66:	2b01      	cmp	r3, #1
 8018b68:	d140      	bne.n	8018bec <VND_Class_DeepReset+0xb4>
    if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	7c1b      	ldrb	r3, [r3, #16]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d116      	bne.n	8018ba0 <VND_Class_DeepReset+0x68>
      (void)USBD_LL_OpenEP(pdev, VND_IN_EP,  USBD_EP_TYPE_BULK, VND_DATA_HS_MAX_PACKET_SIZE);
 8018b72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018b76:	2202      	movs	r2, #2
 8018b78:	2183      	movs	r1, #131	@ 0x83
 8018b7a:	6878      	ldr	r0, [r7, #4]
 8018b7c:	f001 f99b 	bl	8019eb6 <USBD_LL_OpenEP>
      pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 1U;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	2201      	movs	r2, #1
 8018b84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      (void)USBD_LL_OpenEP(pdev, VND_OUT_EP, USBD_EP_TYPE_BULK, VND_DATA_HS_MAX_PACKET_SIZE);
 8018b88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018b8c:	2202      	movs	r2, #2
 8018b8e:	2103      	movs	r1, #3
 8018b90:	6878      	ldr	r0, [r7, #4]
 8018b92:	f001 f990 	bl	8019eb6 <USBD_LL_OpenEP>
      pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 1U;
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	2201      	movs	r2, #1
 8018b9a:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
 8018b9e:	e013      	b.n	8018bc8 <VND_Class_DeepReset+0x90>
    } else {
      (void)USBD_LL_OpenEP(pdev, VND_IN_EP,  USBD_EP_TYPE_BULK, VND_DATA_FS_MAX_PACKET_SIZE);
 8018ba0:	2340      	movs	r3, #64	@ 0x40
 8018ba2:	2202      	movs	r2, #2
 8018ba4:	2183      	movs	r1, #131	@ 0x83
 8018ba6:	6878      	ldr	r0, [r7, #4]
 8018ba8:	f001 f985 	bl	8019eb6 <USBD_LL_OpenEP>
      pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 1U;
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	2201      	movs	r2, #1
 8018bb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      (void)USBD_LL_OpenEP(pdev, VND_OUT_EP, USBD_EP_TYPE_BULK, VND_DATA_FS_MAX_PACKET_SIZE);
 8018bb4:	2340      	movs	r3, #64	@ 0x40
 8018bb6:	2202      	movs	r2, #2
 8018bb8:	2103      	movs	r1, #3
 8018bba:	6878      	ldr	r0, [r7, #4]
 8018bbc:	f001 f97b 	bl	8019eb6 <USBD_LL_OpenEP>
      pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 1U;
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	2201      	movs	r2, #1
 8018bc4:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
    }
    /* Реарм приёма */
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	7c1b      	ldrb	r3, [r3, #16]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d107      	bne.n	8018be0 <VND_Class_DeepReset+0xa8>
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_HS_MAX_PACKET_SIZE);
 8018bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8018c00 <VND_Class_DeepReset+0xc8>)
 8018bd6:	2103      	movs	r1, #3
 8018bd8:	6878      	ldr	r0, [r7, #4]
 8018bda:	f001 fa7a 	bl	801a0d2 <USBD_LL_PrepareReceive>
 8018bde:	e005      	b.n	8018bec <VND_Class_DeepReset+0xb4>
    else
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_FS_MAX_PACKET_SIZE);
 8018be0:	2340      	movs	r3, #64	@ 0x40
 8018be2:	4a07      	ldr	r2, [pc, #28]	@ (8018c00 <VND_Class_DeepReset+0xc8>)
 8018be4:	2103      	movs	r1, #3
 8018be6:	6878      	ldr	r0, [r7, #4]
 8018be8:	f001 fa73 	bl	801a0d2 <USBD_LL_PrepareReceive>
  }
  /* Полная переинициализация пайплайна приложения */
  vnd_pipeline_stop_reset(1);
 8018bec:	2001      	movs	r0, #1
 8018bee:	f7fc fe29 	bl	8015844 <vnd_pipeline_stop_reset>
}
 8018bf2:	bf00      	nop
 8018bf4:	3708      	adds	r7, #8
 8018bf6:	46bd      	mov	sp, r7
 8018bf8:	bd80      	pop	{r7, pc}
 8018bfa:	bf00      	nop
 8018bfc:	2401a08e 	.word	0x2401a08e
 8018c00:	2401a090 	.word	0x2401a090

08018c04 <USBD_VND_ProcessControlRequests>:

/* Фоновый сервис для исполнения заявок управления */
void USBD_VND_ProcessControlRequests(void)
{
 8018c04:	b580      	push	{r7, lr}
 8018c06:	af00      	add	r7, sp, #0
  if (g_req_deep_reset) { g_req_deep_reset = 0; VND_Class_DeepReset(&hUsbDeviceHS); }
 8018c08:	4b0b      	ldr	r3, [pc, #44]	@ (8018c38 <USBD_VND_ProcessControlRequests+0x34>)
 8018c0a:	781b      	ldrb	r3, [r3, #0]
 8018c0c:	b2db      	uxtb	r3, r3
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d005      	beq.n	8018c1e <USBD_VND_ProcessControlRequests+0x1a>
 8018c12:	4b09      	ldr	r3, [pc, #36]	@ (8018c38 <USBD_VND_ProcessControlRequests+0x34>)
 8018c14:	2200      	movs	r2, #0
 8018c16:	701a      	strb	r2, [r3, #0]
 8018c18:	4808      	ldr	r0, [pc, #32]	@ (8018c3c <USBD_VND_ProcessControlRequests+0x38>)
 8018c1a:	f7ff ff8d 	bl	8018b38 <VND_Class_DeepReset>
  if (g_req_soft_reset) { g_req_soft_reset = 0; VND_Class_SoftReset(&hUsbDeviceHS); }
 8018c1e:	4b08      	ldr	r3, [pc, #32]	@ (8018c40 <USBD_VND_ProcessControlRequests+0x3c>)
 8018c20:	781b      	ldrb	r3, [r3, #0]
 8018c22:	b2db      	uxtb	r3, r3
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d005      	beq.n	8018c34 <USBD_VND_ProcessControlRequests+0x30>
 8018c28:	4b05      	ldr	r3, [pc, #20]	@ (8018c40 <USBD_VND_ProcessControlRequests+0x3c>)
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	701a      	strb	r2, [r3, #0]
 8018c2e:	4803      	ldr	r0, [pc, #12]	@ (8018c3c <USBD_VND_ProcessControlRequests+0x38>)
 8018c30:	f7ff ff4a 	bl	8018ac8 <VND_Class_SoftReset>
}
 8018c34:	bf00      	nop
 8018c36:	bd80      	pop	{r7, pc}
 8018c38:	2401a08d 	.word	0x2401a08d
 8018c3c:	2400d8c4 	.word	0x2400d8c4
 8018c40:	2401a08c 	.word	0x2401a08c

08018c44 <USBD_VND_Transmit>:
/* Слабый callback завершения передачи Vendor IN */
__weak void USBD_VND_TxCplt(void) {}

/* API для передачи по Vendor */
uint8_t USBD_VND_Transmit(USBD_HandleTypeDef *pdev, const uint8_t *data, uint16_t len)
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b086      	sub	sp, #24
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	60f8      	str	r0, [r7, #12]
 8018c4c:	60b9      	str	r1, [r7, #8]
 8018c4e:	4613      	mov	r3, r2
 8018c50:	80fb      	strh	r3, [r7, #6]
  if (len > (uint16_t)sizeof(vnd_tx_buf)) return (uint8_t)USBD_FAIL; /* недопустимо: кадр больше ожидаемого */
 8018c52:	88fb      	ldrh	r3, [r7, #6]
 8018c54:	f5b3 6f02 	cmp.w	r3, #2080	@ 0x820
 8018c58:	d901      	bls.n	8018c5e <USBD_VND_Transmit+0x1a>
 8018c5a:	2303      	movs	r3, #3
 8018c5c:	e048      	b.n	8018cf0 <USBD_VND_Transmit+0xac>
  /* Сначала проверяем занятость; при BUSY — минимальный лог без засорения основного [VND_TX] */
  if (vnd_tx_busy) {
 8018c5e:	4b26      	ldr	r3, [pc, #152]	@ (8018cf8 <USBD_VND_Transmit+0xb4>)
 8018c60:	781b      	ldrb	r3, [r3, #0]
 8018c62:	b2db      	uxtb	r3, r3
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d001      	beq.n	8018c6c <USBD_VND_Transmit+0x28>
      VND_LOGF("[VND_BUSY] ep=0x%02X len=%u head=%02X %02X %02X %02X\r\n", (unsigned)VND_IN_EP, (unsigned)len,
             (unsigned)data[0], (unsigned)data[1], (unsigned)data[2], (unsigned)data[3]);
    } else {
      VND_LOGF("[VND_BUSY] ep=0x%02X len=%u\r\n", (unsigned)VND_IN_EP, (unsigned)len);
    }
    return (uint8_t)USBD_BUSY;
 8018c68:	2301      	movs	r3, #1
 8018c6a:	e041      	b.n	8018cf0 <USBD_VND_Transmit+0xac>
  }
  memcpy(vnd_tx_buf, data, len);
 8018c6c:	88fb      	ldrh	r3, [r7, #6]
 8018c6e:	461a      	mov	r2, r3
 8018c70:	68b9      	ldr	r1, [r7, #8]
 8018c72:	4822      	ldr	r0, [pc, #136]	@ (8018cfc <USBD_VND_Transmit+0xb8>)
 8018c74:	f001 fe77 	bl	801a966 <memcpy>
  }
#endif
  /* Жёсткий запрет STAT mid-stream: если это не рабочий кадр (не 0x5A 0xA5) и идёт стрим, разрешаем только при явном разрешении */
  extern uint8_t streaming; /* из usb_vendor_app.c */
  extern volatile uint8_t vnd_status_permit_once; /* одноразовое разрешение STAT */
  if (streaming) {
 8018c78:	4b21      	ldr	r3, [pc, #132]	@ (8018d00 <USBD_VND_Transmit+0xbc>)
 8018c7a:	781b      	ldrb	r3, [r3, #0]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d015      	beq.n	8018cac <USBD_VND_Transmit+0x68>
    if (!(len >= 2 && vnd_tx_buf[0]==0x5A && vnd_tx_buf[1]==0xA5)) {
 8018c80:	88fb      	ldrh	r3, [r7, #6]
 8018c82:	2b01      	cmp	r3, #1
 8018c84:	d907      	bls.n	8018c96 <USBD_VND_Transmit+0x52>
 8018c86:	4b1d      	ldr	r3, [pc, #116]	@ (8018cfc <USBD_VND_Transmit+0xb8>)
 8018c88:	781b      	ldrb	r3, [r3, #0]
 8018c8a:	2b5a      	cmp	r3, #90	@ 0x5a
 8018c8c:	d103      	bne.n	8018c96 <USBD_VND_Transmit+0x52>
 8018c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8018cfc <USBD_VND_Transmit+0xb8>)
 8018c90:	785b      	ldrb	r3, [r3, #1]
 8018c92:	2ba5      	cmp	r3, #165	@ 0xa5
 8018c94:	d00a      	beq.n	8018cac <USBD_VND_Transmit+0x68>
      if (vnd_status_permit_once) {
 8018c96:	4b1b      	ldr	r3, [pc, #108]	@ (8018d04 <USBD_VND_Transmit+0xc0>)
 8018c98:	781b      	ldrb	r3, [r3, #0]
 8018c9a:	b2db      	uxtb	r3, r3
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d003      	beq.n	8018ca8 <USBD_VND_Transmit+0x64>
        vnd_status_permit_once = 0; /* использовать разрешение один раз */
 8018ca0:	4b18      	ldr	r3, [pc, #96]	@ (8018d04 <USBD_VND_Transmit+0xc0>)
 8018ca2:	2200      	movs	r2, #0
 8018ca4:	701a      	strb	r2, [r3, #0]
 8018ca6:	e001      	b.n	8018cac <USBD_VND_Transmit+0x68>
          VND_LOGF("[VND_BLOCK] ep=0x%02X len=%u head=%02X %02X %02X %02X\r\n", (unsigned)VND_IN_EP, (unsigned)len,
                 (unsigned)vnd_tx_buf[0], (unsigned)vnd_tx_buf[1], (unsigned)vnd_tx_buf[2], (unsigned)vnd_tx_buf[3]);
        } else {
          VND_LOGF("[VND_BLOCK] ep=0x%02X len=%u\r\n", (unsigned)VND_IN_EP, (unsigned)len);
        }
        return (uint8_t)USBD_BUSY;
 8018ca8:	2301      	movs	r3, #1
 8018caa:	e021      	b.n	8018cf0 <USBD_VND_Transmit+0xac>
      }
    }
  }
  vnd_tx_busy = 1U;
 8018cac:	4b12      	ldr	r3, [pc, #72]	@ (8018cf8 <USBD_VND_Transmit+0xb4>)
 8018cae:	2201      	movs	r2, #1
 8018cb0:	701a      	strb	r2, [r3, #0]
  /* Восстанавливаем total_length для корректной ZLP логики в DataIn callback */
  pdev->ep_in[VND_IN_EP & 0x0FU].total_length = len;
 8018cb2:	88fa      	ldrh	r2, [r7, #6]
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	655a      	str	r2, [r3, #84]	@ 0x54
  vnd_last_tx_len = len;
 8018cb8:	4a13      	ldr	r2, [pc, #76]	@ (8018d08 <USBD_VND_Transmit+0xc4>)
 8018cba:	88fb      	ldrh	r3, [r7, #6]
 8018cbc:	8013      	strh	r3, [r2, #0]
    vnd_last_tx_rc = (uint8_t)USBD_LL_Transmit(pdev, VND_IN_EP, vnd_tx_buf, len);
 8018cbe:	88fb      	ldrh	r3, [r7, #6]
 8018cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8018cfc <USBD_VND_Transmit+0xb8>)
 8018cc2:	2183      	movs	r1, #131	@ 0x83
 8018cc4:	68f8      	ldr	r0, [r7, #12]
 8018cc6:	f001 f9e3 	bl	801a090 <USBD_LL_Transmit>
 8018cca:	4603      	mov	r3, r0
 8018ccc:	461a      	mov	r2, r3
 8018cce:	4b0f      	ldr	r3, [pc, #60]	@ (8018d0c <USBD_VND_Transmit+0xc8>)
 8018cd0:	701a      	strb	r2, [r3, #0]
    
    /* КРИТИЧЕСКИ ВАЖНО: memory barrier через volatile read USB регистра.
       Без этого компилятор может переупорядочить операции и HAL ISR не увидит
       правильное состояние. Чтение GINTSTS безопасно и гарантирует порядок. */
    {
        USB_OTG_GlobalTypeDef *usb_reg = (USB_OTG_GlobalTypeDef *)USB1_OTG_HS_PERIPH_BASE;
 8018cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8018d10 <USBD_VND_Transmit+0xcc>)
 8018cd4:	617b      	str	r3, [r7, #20]
        (void)usb_reg->GINTSTS; /* volatile read для memory barrier */
 8018cd6:	697b      	ldr	r3, [r7, #20]
 8018cd8:	695b      	ldr	r3, [r3, #20]
    }  /* Логируем только реально поставленные в LL передачи как [VND_TX] */
  if (vnd_last_tx_rc == (uint8_t)USBD_OK) {
 8018cda:	4b0c      	ldr	r3, [pc, #48]	@ (8018d0c <USBD_VND_Transmit+0xc8>)
 8018cdc:	781b      	ldrb	r3, [r3, #0]
 8018cde:	b2db      	uxtb	r3, r3
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d002      	beq.n	8018cea <USBD_VND_Transmit+0xa6>
    } else {
      VND_LOGF("[VND_TX] ep=0x%02X len=%u\r\n", (unsigned)VND_IN_EP, (unsigned)len);
    }
  } else {
    /* Если LL вернул BUSY/FAIL — снимаем флаг занятости и логируем как FAIL */
    vnd_tx_busy = 0U;
 8018ce4:	4b04      	ldr	r3, [pc, #16]	@ (8018cf8 <USBD_VND_Transmit+0xb4>)
 8018ce6:	2200      	movs	r2, #0
 8018ce8:	701a      	strb	r2, [r3, #0]
             (unsigned)vnd_tx_buf[0], (unsigned)vnd_tx_buf[1], (unsigned)vnd_tx_buf[2], (unsigned)vnd_tx_buf[3]);
    } else {
      VND_LOGF("[VND_FAIL] ep=0x%02X rc=%u len=%u\r\n", (unsigned)VND_IN_EP, (unsigned)vnd_last_tx_rc, (unsigned)len);
    }
  }
  return vnd_last_tx_rc;
 8018cea:	4b08      	ldr	r3, [pc, #32]	@ (8018d0c <USBD_VND_Transmit+0xc8>)
 8018cec:	781b      	ldrb	r3, [r3, #0]
 8018cee:	b2db      	uxtb	r3, r3
}
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	3718      	adds	r7, #24
 8018cf4:	46bd      	mov	sp, r7
 8018cf6:	bd80      	pop	{r7, pc}
 8018cf8:	2401aab4 	.word	0x2401aab4
 8018cfc:	2401a290 	.word	0x2401a290
 8018d00:	2400dba0 	.word	0x2400dba0
 8018d04:	2400dc51 	.word	0x2400dc51
 8018d08:	2401aab6 	.word	0x2401aab6
 8018d0c:	24000054 	.word	0x24000054
 8018d10:	40040000 	.word	0x40040000

08018d14 <USBD_VND_TxIsBusy>:
  vnd_rx_len = 0; /* помечаем прочитанным */
  return copy;
}

/* Диагностика состояния Vendor IN */
uint8_t USBD_VND_TxIsBusy(void) { return vnd_tx_busy; }
 8018d14:	b480      	push	{r7}
 8018d16:	af00      	add	r7, sp, #0
 8018d18:	4b03      	ldr	r3, [pc, #12]	@ (8018d28 <USBD_VND_TxIsBusy+0x14>)
 8018d1a:	781b      	ldrb	r3, [r3, #0]
 8018d1c:	b2db      	uxtb	r3, r3
 8018d1e:	4618      	mov	r0, r3
 8018d20:	46bd      	mov	sp, r7
 8018d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d26:	4770      	bx	lr
 8018d28:	2401aab4 	.word	0x2401aab4

08018d2c <USBD_VND_LastTxRC>:
uint8_t USBD_VND_LastTxRC(void) { return vnd_last_tx_rc; }
 8018d2c:	b480      	push	{r7}
 8018d2e:	af00      	add	r7, sp, #0
 8018d30:	4b03      	ldr	r3, [pc, #12]	@ (8018d40 <USBD_VND_LastTxRC+0x14>)
 8018d32:	781b      	ldrb	r3, [r3, #0]
 8018d34:	b2db      	uxtb	r3, r3
 8018d36:	4618      	mov	r0, r3
 8018d38:	46bd      	mov	sp, r7
 8018d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d3e:	4770      	bx	lr
 8018d40:	24000054 	.word	0x24000054

08018d44 <USBD_VND_LastTxLen>:
uint16_t USBD_VND_LastTxLen(void) { return vnd_last_tx_len; }
 8018d44:	b480      	push	{r7}
 8018d46:	af00      	add	r7, sp, #0
 8018d48:	4b03      	ldr	r3, [pc, #12]	@ (8018d58 <USBD_VND_LastTxLen+0x14>)
 8018d4a:	881b      	ldrh	r3, [r3, #0]
 8018d4c:	b29b      	uxth	r3, r3
 8018d4e:	4618      	mov	r0, r3
 8018d50:	46bd      	mov	sp, r7
 8018d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d56:	4770      	bx	lr
 8018d58:	2401aab6 	.word	0x2401aab6

08018d5c <USBD_VND_ForceTxIdle>:

/* Форсируем свободное состояние TX (использовать осторожно: только при подтверждённом клине) */
void USBD_VND_ForceTxIdle(void)
{
 8018d5c:	b480      	push	{r7}
 8018d5e:	af00      	add	r7, sp, #0
  if (vnd_tx_busy) {
 8018d60:	4b04      	ldr	r3, [pc, #16]	@ (8018d74 <USBD_VND_ForceTxIdle+0x18>)
 8018d62:	781b      	ldrb	r3, [r3, #0]
    VND_LOGF("[VND_FORCE_IDLE] clearing busy (last len=%u rc=%u)\r\n", (unsigned)vnd_last_tx_len, (unsigned)vnd_last_tx_rc);
  }
  vnd_tx_busy = 0U;
 8018d64:	4b03      	ldr	r3, [pc, #12]	@ (8018d74 <USBD_VND_ForceTxIdle+0x18>)
 8018d66:	2200      	movs	r2, #0
 8018d68:	701a      	strb	r2, [r3, #0]
}
 8018d6a:	bf00      	nop
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d72:	4770      	bx	lr
 8018d74:	2401aab4 	.word	0x2401aab4

08018d78 <USBD_CDCVND_Init>:
  USBD_CDCVND_GetDeviceQualifierDescriptor,
};

/* ---------------- Реализация коллбэков ---------------- */
static uint8_t USBD_CDCVND_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b084      	sub	sp, #16
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	460b      	mov	r3, r1
 8018d82:	70fb      	strb	r3, [r7, #3]
  g_alt_if2 = 0; /* при конфигурации по умолчанию IF2 в alt0 (idle) */
 8018d84:	4b40      	ldr	r3, [pc, #256]	@ (8018e88 <USBD_CDCVND_Init+0x110>)
 8018d86:	2200      	movs	r2, #0
 8018d88:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8018d8a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8018d8e:	f001 f9d5 	bl	801a13c <USBD_static_malloc>
 8018d92:	60f8      	str	r0, [r7, #12]
  if (!hcdc) { pdev->pClassData = NULL; return (uint8_t)USBD_EMEM; }
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d105      	bne.n	8018da6 <USBD_CDCVND_Init+0x2e>
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	2200      	movs	r2, #0
 8018d9e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
 8018da2:	2302      	movs	r3, #2
 8018da4:	e06b      	b.n	8018e7e <USBD_CDCVND_Init+0x106>
  pdev->pClassData = hcdc;
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	68fa      	ldr	r2, [r7, #12]
 8018daa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	7c1b      	ldrb	r3, [r3, #16]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d119      	bne.n	8018dea <USBD_CDCVND_Init+0x72>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP,  USBD_EP_TYPE_BULK, CDC_DATA_HS_IN_PACKET_SIZE);
 8018db6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018dba:	2202      	movs	r2, #2
 8018dbc:	2181      	movs	r1, #129	@ 0x81
 8018dbe:	6878      	ldr	r0, [r7, #4]
 8018dc0:	f001 f879 	bl	8019eb6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	2201      	movs	r2, #1
 8018dc8:	871a      	strh	r2, [r3, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK, CDC_DATA_HS_OUT_PACKET_SIZE);
 8018dca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018dce:	2202      	movs	r2, #2
 8018dd0:	2101      	movs	r1, #1
 8018dd2:	6878      	ldr	r0, [r7, #4]
 8018dd4:	f001 f86f 	bl	8019eb6 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2201      	movs	r2, #1
 8018ddc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	2210      	movs	r2, #16
 8018de4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8018de8:	e016      	b.n	8018e18 <USBD_CDCVND_Init+0xa0>
    /* Vendor IF#2 alt0 по умолчанию — EP будут открыты по SET_INTERFACE(alt=1) */
  } else {
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP,  USBD_EP_TYPE_BULK, CDC_DATA_FS_IN_PACKET_SIZE);
 8018dea:	2340      	movs	r3, #64	@ 0x40
 8018dec:	2202      	movs	r2, #2
 8018dee:	2181      	movs	r1, #129	@ 0x81
 8018df0:	6878      	ldr	r0, [r7, #4]
 8018df2:	f001 f860 	bl	8019eb6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	2201      	movs	r2, #1
 8018dfa:	871a      	strh	r2, [r3, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK, CDC_DATA_FS_OUT_PACKET_SIZE);
 8018dfc:	2340      	movs	r3, #64	@ 0x40
 8018dfe:	2202      	movs	r2, #2
 8018e00:	2101      	movs	r1, #1
 8018e02:	6878      	ldr	r0, [r7, #4]
 8018e04:	f001 f857 	bl	8019eb6 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	2201      	movs	r2, #1
 8018e0c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	2210      	movs	r2, #16
 8018e14:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    /* Vendor IF#2 alt0 по умолчанию — EP будут открыты по SET_INTERFACE(alt=1) */
  }
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8018e18:	2308      	movs	r3, #8
 8018e1a:	2203      	movs	r2, #3
 8018e1c:	2182      	movs	r1, #130	@ 0x82
 8018e1e:	6878      	ldr	r0, [r7, #4]
 8018e20:	f001 f849 	bl	8019eb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	2201      	movs	r2, #1
 8018e28:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  if (CDC_USR(pdev)) CDC_USR(pdev)->Init();
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d004      	beq.n	8018e40 <USBD_CDCVND_Init+0xc8>
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	4798      	blx	r3
  hcdc->TxState = 0; hcdc->RxState = 0;
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	2200      	movs	r2, #0
 8018e44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	2200      	movs	r2, #0
 8018e4c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  /* Готовим приём CDC OUT; Vendor OUT готовим только после включения alt1 */
  if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	7c1b      	ldrb	r3, [r3, #16]
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d109      	bne.n	8018e6c <USBD_CDCVND_Init+0xf4>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer, CDC_DATA_HS_OUT_PACKET_SIZE);
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8018e5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018e62:	2101      	movs	r1, #1
 8018e64:	6878      	ldr	r0, [r7, #4]
 8018e66:	f001 f934 	bl	801a0d2 <USBD_LL_PrepareReceive>
 8018e6a:	e007      	b.n	8018e7c <USBD_CDCVND_Init+0x104>
  } else {
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer, CDC_DATA_FS_OUT_PACKET_SIZE);
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8018e72:	2340      	movs	r3, #64	@ 0x40
 8018e74:	2101      	movs	r1, #1
 8018e76:	6878      	ldr	r0, [r7, #4]
 8018e78:	f001 f92b 	bl	801a0d2 <USBD_LL_PrepareReceive>
    VND_LOGF("[VND_INIT] SPEED=FS vnd_mps=%u cdc_in_mps=%u\r\n",
             (unsigned)pdev->ep_in[VND_IN_EP & 0x0FU].maxpacket,
             (unsigned)pdev->ep_in[CDC_IN_EP & 0x0FU].maxpacket);
  }

  return (uint8_t)USBD_OK;
 8018e7c:	2300      	movs	r3, #0
}
 8018e7e:	4618      	mov	r0, r3
 8018e80:	3710      	adds	r7, #16
 8018e82:	46bd      	mov	sp, r7
 8018e84:	bd80      	pop	{r7, pc}
 8018e86:	bf00      	nop
 8018e88:	2401a08e 	.word	0x2401a08e

08018e8c <USBD_CDCVND_DeInit>:

static uint8_t USBD_CDCVND_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b082      	sub	sp, #8
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
 8018e94:	460b      	mov	r3, r1
 8018e96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8018e98:	2181      	movs	r1, #129	@ 0x81
 8018e9a:	6878      	ldr	r0, [r7, #4]
 8018e9c:	f001 f831 	bl	8019f02 <USBD_LL_CloseEP>
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	871a      	strh	r2, [r3, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP); pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8018ea6:	2101      	movs	r1, #1
 8018ea8:	6878      	ldr	r0, [r7, #4]
 8018eaa:	f001 f82a 	bl	8019f02 <USBD_LL_CloseEP>
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP); pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U; pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8018eb6:	2182      	movs	r1, #130	@ 0x82
 8018eb8:	6878      	ldr	r0, [r7, #4]
 8018eba:	f001 f822 	bl	8019f02 <USBD_LL_CloseEP>
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	2200      	movs	r2, #0
 8018ec2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	2200      	movs	r2, #0
 8018eca:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  (void)USBD_LL_CloseEP(pdev, VND_IN_EP);  pdev->ep_in[VND_IN_EP & 0xFU].is_used = 0U;
 8018ece:	2183      	movs	r1, #131	@ 0x83
 8018ed0:	6878      	ldr	r0, [r7, #4]
 8018ed2:	f001 f816 	bl	8019f02 <USBD_LL_CloseEP>
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	2200      	movs	r2, #0
 8018eda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  (void)USBD_LL_CloseEP(pdev, VND_OUT_EP); pdev->ep_out[VND_OUT_EP & 0xFU].is_used = 0U;
 8018ede:	2103      	movs	r1, #3
 8018ee0:	6878      	ldr	r0, [r7, #4]
 8018ee2:	f001 f80e 	bl	8019f02 <USBD_LL_CloseEP>
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	2200      	movs	r2, #0
 8018eea:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
  if (pdev->pClassData) {
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d013      	beq.n	8018f20 <USBD_CDCVND_DeInit+0x94>
    if (CDC_USR(pdev)) CDC_USR(pdev)->DeInit();
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d004      	beq.n	8018f0c <USBD_CDCVND_DeInit+0x80>
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8018f08:	685b      	ldr	r3, [r3, #4]
 8018f0a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8018f12:	4618      	mov	r0, r3
 8018f14:	f001 f920 	bl	801a158 <USBD_static_free>
    pdev->pClassData = NULL;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2200      	movs	r2, #0
 8018f1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }
  return (uint8_t)USBD_OK;
 8018f20:	2300      	movs	r3, #0
}
 8018f22:	4618      	mov	r0, r3
 8018f24:	3708      	adds	r7, #8
 8018f26:	46bd      	mov	sp, r7
 8018f28:	bd80      	pop	{r7, pc}
	...

08018f2c <USBD_CDCVND_Setup>:

static uint8_t USBD_CDCVND_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b096      	sub	sp, #88	@ 0x58
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	6078      	str	r0, [r7, #4]
 8018f34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8018f3c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (!hcdc) return (uint8_t)USBD_FAIL;
 8018f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d101      	bne.n	8018f48 <USBD_CDCVND_Setup+0x1c>
 8018f44:	2303      	movs	r3, #3
 8018f46:	e1a1      	b.n	801928c <USBD_CDCVND_Setup+0x360>
  uint16_t status_info = 0; uint16_t len;
 8018f48:	2300      	movs	r3, #0
 8018f4a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  /* ДОБАВЛЕНО: ветка обработки vendor-specific control (GET_STATUS / SOFT/DEEP RESET) */
  if ( (req->bmRequest & USB_REQ_TYPE_MASK) == USB_REQ_TYPE_VENDOR ) {
 8018f4e:	683b      	ldr	r3, [r7, #0]
 8018f50:	781b      	ldrb	r3, [r3, #0]
 8018f52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018f56:	2b40      	cmp	r3, #64	@ 0x40
 8018f58:	d155      	bne.n	8019006 <USBD_CDCVND_Setup+0xda>
    VND_LOGF("[SETUP:VND] bm=0x%02X bReq=0x%02X wIndex=%u wLength=%u", (unsigned)req->bmRequest, (unsigned)req->bRequest, (unsigned)req->wIndex, (unsigned)req->wLength);
    /* Принимаем IN GET_STATUS вне зависимости от получателя и номера интерфейса (wIndex),
       чтобы упростить жизнь хостам, где CTRL к Interface может быть ограничен. */
    if ( (req->bmRequest & 0x80U) && req->bRequest == VND_CMD_GET_STATUS ) {
 8018f5a:	683b      	ldr	r3, [r7, #0]
 8018f5c:	781b      	ldrb	r3, [r3, #0]
 8018f5e:	b25b      	sxtb	r3, r3
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	da20      	bge.n	8018fa6 <USBD_CDCVND_Setup+0x7a>
 8018f64:	683b      	ldr	r3, [r7, #0]
 8018f66:	785b      	ldrb	r3, [r3, #1]
 8018f68:	2b30      	cmp	r3, #48	@ 0x30
 8018f6a:	d11c      	bne.n	8018fa6 <USBD_CDCVND_Setup+0x7a>
      uint8_t buf[64];
      uint16_t l = vnd_build_status(buf, sizeof(buf));
 8018f6c:	f107 0308 	add.w	r3, r7, #8
 8018f70:	2140      	movs	r1, #64	@ 0x40
 8018f72:	4618      	mov	r0, r3
 8018f74:	f7fc fe78 	bl	8015c68 <vnd_build_status>
 8018f78:	4603      	mov	r3, r0
 8018f7a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      if(!l){ USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 8018f7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d105      	bne.n	8018f92 <USBD_CDCVND_Setup+0x66>
 8018f86:	6839      	ldr	r1, [r7, #0]
 8018f88:	6878      	ldr	r0, [r7, #4]
 8018f8a:	f7fc f884 	bl	8015096 <USBD_CtlError>
 8018f8e:	2303      	movs	r3, #3
 8018f90:	e17c      	b.n	801928c <USBD_CDCVND_Setup+0x360>
      VND_LOGF("[SETUP:VND] -> STAT %uB", (unsigned)l);
      USBD_CtlSendData(pdev, buf, l);
 8018f92:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018f96:	f107 0308 	add.w	r3, r7, #8
 8018f9a:	4619      	mov	r1, r3
 8018f9c:	6878      	ldr	r0, [r7, #4]
 8018f9e:	f7fc f8f7 	bl	8015190 <USBD_CtlSendData>
      return (uint8_t)USBD_OK;
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	e172      	b.n	801928c <USBD_CDCVND_Setup+0x360>
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength == 0 && req->bRequest == 0x7Eu ) {
 8018fa6:	683b      	ldr	r3, [r7, #0]
 8018fa8:	781b      	ldrb	r3, [r3, #0]
 8018faa:	b25b      	sxtb	r3, r3
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	db0f      	blt.n	8018fd0 <USBD_CDCVND_Setup+0xa4>
 8018fb0:	683b      	ldr	r3, [r7, #0]
 8018fb2:	88db      	ldrh	r3, [r3, #6]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d10b      	bne.n	8018fd0 <USBD_CDCVND_Setup+0xa4>
 8018fb8:	683b      	ldr	r3, [r7, #0]
 8018fba:	785b      	ldrb	r3, [r3, #1]
 8018fbc:	2b7e      	cmp	r3, #126	@ 0x7e
 8018fbe:	d107      	bne.n	8018fd0 <USBD_CDCVND_Setup+0xa4>
      /* SOFT_RESET: мгновенно подтверждаем статусом и выполняем ресет в фоне */
      g_req_soft_reset = 1; USBD_CtlSendStatus(pdev); return (uint8_t)USBD_OK;
 8018fc0:	4ba8      	ldr	r3, [pc, #672]	@ (8019264 <USBD_CDCVND_Setup+0x338>)
 8018fc2:	2201      	movs	r2, #1
 8018fc4:	701a      	strb	r2, [r3, #0]
 8018fc6:	6878      	ldr	r0, [r7, #4]
 8018fc8:	f7fc f93c 	bl	8015244 <USBD_CtlSendStatus>
 8018fcc:	2300      	movs	r3, #0
 8018fce:	e15d      	b.n	801928c <USBD_CDCVND_Setup+0x360>
    } else if ( (req->bmRequest & 0x80U) == 0 && req->wLength == 0 && req->bRequest == 0x7Fu ) {
 8018fd0:	683b      	ldr	r3, [r7, #0]
 8018fd2:	781b      	ldrb	r3, [r3, #0]
 8018fd4:	b25b      	sxtb	r3, r3
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	db0f      	blt.n	8018ffa <USBD_CDCVND_Setup+0xce>
 8018fda:	683b      	ldr	r3, [r7, #0]
 8018fdc:	88db      	ldrh	r3, [r3, #6]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d10b      	bne.n	8018ffa <USBD_CDCVND_Setup+0xce>
 8018fe2:	683b      	ldr	r3, [r7, #0]
 8018fe4:	785b      	ldrb	r3, [r3, #1]
 8018fe6:	2b7f      	cmp	r3, #127	@ 0x7f
 8018fe8:	d107      	bne.n	8018ffa <USBD_CDCVND_Setup+0xce>
      /* DEEP_RESET: то же, но с переоткрытием EP */
      g_req_deep_reset = 1; USBD_CtlSendStatus(pdev); return (uint8_t)USBD_OK;
 8018fea:	4b9f      	ldr	r3, [pc, #636]	@ (8019268 <USBD_CDCVND_Setup+0x33c>)
 8018fec:	2201      	movs	r2, #1
 8018fee:	701a      	strb	r2, [r3, #0]
 8018ff0:	6878      	ldr	r0, [r7, #4]
 8018ff2:	f7fc f927 	bl	8015244 <USBD_CtlSendStatus>
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	e148      	b.n	801928c <USBD_CDCVND_Setup+0x360>
    } else {
      VND_LOGF("[SETUP:VND] unsupported -> STALL");
      USBD_CtlError(pdev, req);
 8018ffa:	6839      	ldr	r1, [r7, #0]
 8018ffc:	6878      	ldr	r0, [r7, #4]
 8018ffe:	f7fc f84a 	bl	8015096 <USBD_CtlError>
      return (uint8_t)USBD_FAIL;
 8019002:	2303      	movs	r3, #3
 8019004:	e142      	b.n	801928c <USBD_CDCVND_Setup+0x360>
    }
  }
  switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8019006:	683b      	ldr	r3, [r7, #0]
 8019008:	781b      	ldrb	r3, [r3, #0]
 801900a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801900e:	2b00      	cmp	r3, #0
 8019010:	d04c      	beq.n	80190ac <USBD_CDCVND_Setup+0x180>
 8019012:	2b20      	cmp	r3, #32
 8019014:	f040 8120 	bne.w	8019258 <USBD_CDCVND_Setup+0x32c>
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U) {
 8019018:	683b      	ldr	r3, [r7, #0]
 801901a:	88db      	ldrh	r3, [r3, #6]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d035      	beq.n	801908c <USBD_CDCVND_Setup+0x160>
        if (req->bmRequest & 0x80U) {
 8019020:	683b      	ldr	r3, [r7, #0]
 8019022:	781b      	ldrb	r3, [r3, #0]
 8019024:	b25b      	sxtb	r3, r3
 8019026:	2b00      	cmp	r3, #0
 8019028:	da1d      	bge.n	8019066 <USBD_CDCVND_Setup+0x13a>
          if (CDC_USR(pdev)) CDC_USR(pdev)->Control(req->bRequest, (uint8_t*)hcdc->data, req->wLength); // cast
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019030:	2b00      	cmp	r3, #0
 8019032:	d009      	beq.n	8019048 <USBD_CDCVND_Setup+0x11c>
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801903a:	689b      	ldr	r3, [r3, #8]
 801903c:	683a      	ldr	r2, [r7, #0]
 801903e:	7850      	ldrb	r0, [r2, #1]
 8019040:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019042:	683a      	ldr	r2, [r7, #0]
 8019044:	88d2      	ldrh	r2, [r2, #6]
 8019046:	4798      	blx	r3
          len = (uint16_t)MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8019048:	683b      	ldr	r3, [r7, #0]
 801904a:	88db      	ldrh	r3, [r3, #6]
 801904c:	2b07      	cmp	r3, #7
 801904e:	bf28      	it	cs
 8019050:	2307      	movcs	r3, #7
 8019052:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
          USBD_CtlSendData(pdev, (uint8_t*)hcdc->data, len); // cast
 8019056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019058:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 801905c:	4619      	mov	r1, r3
 801905e:	6878      	ldr	r0, [r7, #4]
 8019060:	f7fc f896 	bl	8015190 <USBD_CtlSendData>
          USBD_CtlPrepareRx(pdev, (uint8_t*)hcdc->data, req->wLength); // cast
        }
      } else {
        if (CDC_USR(pdev)) CDC_USR(pdev)->Control(req->bRequest, (uint8_t*)req, 0U);
      }
      break;
 8019064:	e110      	b.n	8019288 <USBD_CDCVND_Setup+0x35c>
          hcdc->CmdOpCode = req->bRequest; hcdc->CmdLength = (uint8_t)req->wLength;
 8019066:	683b      	ldr	r3, [r7, #0]
 8019068:	785a      	ldrb	r2, [r3, #1]
 801906a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801906c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
 8019070:	683b      	ldr	r3, [r7, #0]
 8019072:	88db      	ldrh	r3, [r3, #6]
 8019074:	b2da      	uxtb	r2, r3
 8019076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019078:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t*)hcdc->data, req->wLength); // cast
 801907c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801907e:	683b      	ldr	r3, [r7, #0]
 8019080:	88db      	ldrh	r3, [r3, #6]
 8019082:	461a      	mov	r2, r3
 8019084:	6878      	ldr	r0, [r7, #4]
 8019086:	f7fc f8af 	bl	80151e8 <USBD_CtlPrepareRx>
      break;
 801908a:	e0fd      	b.n	8019288 <USBD_CDCVND_Setup+0x35c>
        if (CDC_USR(pdev)) CDC_USR(pdev)->Control(req->bRequest, (uint8_t*)req, 0U);
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019092:	2b00      	cmp	r3, #0
 8019094:	f000 80f8 	beq.w	8019288 <USBD_CDCVND_Setup+0x35c>
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801909e:	689b      	ldr	r3, [r3, #8]
 80190a0:	683a      	ldr	r2, [r7, #0]
 80190a2:	7850      	ldrb	r0, [r2, #1]
 80190a4:	2200      	movs	r2, #0
 80190a6:	6839      	ldr	r1, [r7, #0]
 80190a8:	4798      	blx	r3
      break;
 80190aa:	e0ed      	b.n	8019288 <USBD_CDCVND_Setup+0x35c>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest) {
 80190ac:	683b      	ldr	r3, [r7, #0]
 80190ae:	785b      	ldrb	r3, [r3, #1]
 80190b0:	2b0b      	cmp	r3, #11
 80190b2:	d03b      	beq.n	801912c <USBD_CDCVND_Setup+0x200>
 80190b4:	2b0b      	cmp	r3, #11
 80190b6:	f300 80c8 	bgt.w	801924a <USBD_CDCVND_Setup+0x31e>
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d002      	beq.n	80190c4 <USBD_CDCVND_Setup+0x198>
 80190be:	2b0a      	cmp	r3, #10
 80190c0:	d014      	beq.n	80190ec <USBD_CDCVND_Setup+0x1c0>
 80190c2:	e0c2      	b.n	801924a <USBD_CDCVND_Setup+0x31e>
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED) USBD_CtlSendData(pdev, (uint8_t*)&status_info, 2U); else { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80190ca:	b2db      	uxtb	r3, r3
 80190cc:	2b03      	cmp	r3, #3
 80190ce:	d107      	bne.n	80190e0 <USBD_CDCVND_Setup+0x1b4>
 80190d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80190d4:	2202      	movs	r2, #2
 80190d6:	4619      	mov	r1, r3
 80190d8:	6878      	ldr	r0, [r7, #4]
 80190da:	f7fc f859 	bl	8015190 <USBD_CtlSendData>
          break;
 80190de:	e0ba      	b.n	8019256 <USBD_CDCVND_Setup+0x32a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED) USBD_CtlSendData(pdev, (uint8_t*)&status_info, 2U); else { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 80190e0:	6839      	ldr	r1, [r7, #0]
 80190e2:	6878      	ldr	r0, [r7, #4]
 80190e4:	f7fb ffd7 	bl	8015096 <USBD_CtlError>
 80190e8:	2303      	movs	r3, #3
 80190ea:	e0cf      	b.n	801928c <USBD_CDCVND_Setup+0x360>
        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80190f2:	b2db      	uxtb	r3, r3
 80190f4:	2b03      	cmp	r3, #3
 80190f6:	d113      	bne.n	8019120 <USBD_CDCVND_Setup+0x1f4>
            uint8_t cur = 0;
 80190f8:	2300      	movs	r3, #0
 80190fa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            if (req->wIndex == 2) cur = (uint8_t)g_alt_if2; /* наш Vendor IF */
 80190fe:	683b      	ldr	r3, [r7, #0]
 8019100:	889b      	ldrh	r3, [r3, #4]
 8019102:	2b02      	cmp	r3, #2
 8019104:	d104      	bne.n	8019110 <USBD_CDCVND_Setup+0x1e4>
 8019106:	4b59      	ldr	r3, [pc, #356]	@ (801926c <USBD_CDCVND_Setup+0x340>)
 8019108:	781b      	ldrb	r3, [r3, #0]
 801910a:	b2db      	uxtb	r3, r3
 801910c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            /* CDC интерфейсы IF0/IF1 всегда alt0 */
            USBD_CtlSendData(pdev, &cur, 1U);
 8019110:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 8019114:	2201      	movs	r2, #1
 8019116:	4619      	mov	r1, r3
 8019118:	6878      	ldr	r0, [r7, #4]
 801911a:	f7fc f839 	bl	8015190 <USBD_CtlSendData>
          } else { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
          break;
 801911e:	e09a      	b.n	8019256 <USBD_CDCVND_Setup+0x32a>
          } else { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 8019120:	6839      	ldr	r1, [r7, #0]
 8019122:	6878      	ldr	r0, [r7, #4]
 8019124:	f7fb ffb7 	bl	8015096 <USBD_CtlError>
 8019128:	2303      	movs	r3, #3
 801912a:	e0af      	b.n	801928c <USBD_CDCVND_Setup+0x360>
        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED) { USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL; }
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019132:	b2db      	uxtb	r3, r3
 8019134:	2b03      	cmp	r3, #3
 8019136:	d005      	beq.n	8019144 <USBD_CDCVND_Setup+0x218>
 8019138:	6839      	ldr	r1, [r7, #0]
 801913a:	6878      	ldr	r0, [r7, #4]
 801913c:	f7fb ffab 	bl	8015096 <USBD_CtlError>
 8019140:	2303      	movs	r3, #3
 8019142:	e0a3      	b.n	801928c <USBD_CDCVND_Setup+0x360>
          /* Поддержка altsetting для IF#2: 0 -> idle (закрыть EP), 1 -> stream (открыть EP) */
          if (req->wIndex == 2) {
 8019144:	683b      	ldr	r3, [r7, #0]
 8019146:	889b      	ldrh	r3, [r3, #4]
 8019148:	2b02      	cmp	r3, #2
 801914a:	d179      	bne.n	8019240 <USBD_CDCVND_Setup+0x314>
            uint16_t alt = req->wValue;
 801914c:	683b      	ldr	r3, [r7, #0]
 801914e:	885b      	ldrh	r3, [r3, #2]
 8019150:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
            if (alt == 0) {
 8019154:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8019158:	2b00      	cmp	r3, #0
 801915a:	d119      	bne.n	8019190 <USBD_CDCVND_Setup+0x264>
              /* Остановить пайплайн приложения и закрыть EP */
              printf("[USB_IF2] SET_INTERFACE alt=0 (CLOSE)\r\n");
 801915c:	4844      	ldr	r0, [pc, #272]	@ (8019270 <USBD_CDCVND_Setup+0x344>)
 801915e:	f001 f95d 	bl	801a41c <puts>
              vnd_pipeline_stop_reset(0);
 8019162:	2000      	movs	r0, #0
 8019164:	f7fc fb6e 	bl	8015844 <vnd_pipeline_stop_reset>
              (void)USBD_LL_CloseEP(pdev, VND_IN_EP);  pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 0U;
 8019168:	2183      	movs	r1, #131	@ 0x83
 801916a:	6878      	ldr	r0, [r7, #4]
 801916c:	f000 fec9 	bl	8019f02 <USBD_LL_CloseEP>
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	2200      	movs	r2, #0
 8019174:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
              (void)USBD_LL_CloseEP(pdev, VND_OUT_EP); pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 0U;
 8019178:	2103      	movs	r1, #3
 801917a:	6878      	ldr	r0, [r7, #4]
 801917c:	f000 fec1 	bl	8019f02 <USBD_LL_CloseEP>
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	2200      	movs	r2, #0
 8019184:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
              g_alt_if2 = 0;
 8019188:	4b38      	ldr	r3, [pc, #224]	@ (801926c <USBD_CDCVND_Setup+0x340>)
 801918a:	2200      	movs	r2, #0
 801918c:	701a      	strb	r2, [r3, #0]
 801918e:	e050      	b.n	8019232 <USBD_CDCVND_Setup+0x306>
            } else if (alt == 1) {
 8019190:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8019194:	2b01      	cmp	r3, #1
 8019196:	d14c      	bne.n	8019232 <USBD_CDCVND_Setup+0x306>
              /* Открыть EP и реармить приём */
              printf("[USB_IF2] SET_INTERFACE alt=1 (OPEN) speed=%s\r\n", 
                     pdev->dev_speed == USBD_SPEED_HIGH ? "HS" : "FS");
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	7c1b      	ldrb	r3, [r3, #16]
              printf("[USB_IF2] SET_INTERFACE alt=1 (OPEN) speed=%s\r\n", 
 801919c:	2b00      	cmp	r3, #0
 801919e:	d101      	bne.n	80191a4 <USBD_CDCVND_Setup+0x278>
 80191a0:	4b34      	ldr	r3, [pc, #208]	@ (8019274 <USBD_CDCVND_Setup+0x348>)
 80191a2:	e000      	b.n	80191a6 <USBD_CDCVND_Setup+0x27a>
 80191a4:	4b34      	ldr	r3, [pc, #208]	@ (8019278 <USBD_CDCVND_Setup+0x34c>)
 80191a6:	4619      	mov	r1, r3
 80191a8:	4834      	ldr	r0, [pc, #208]	@ (801927c <USBD_CDCVND_Setup+0x350>)
 80191aa:	f001 f8cf 	bl	801a34c <iprintf>
              if (pdev->dev_speed == USBD_SPEED_HIGH) {
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	7c1b      	ldrb	r3, [r3, #16]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d11d      	bne.n	80191f2 <USBD_CDCVND_Setup+0x2c6>
                (void)USBD_LL_OpenEP(pdev, VND_IN_EP,  USBD_EP_TYPE_BULK, VND_DATA_HS_MAX_PACKET_SIZE);
 80191b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80191ba:	2202      	movs	r2, #2
 80191bc:	2183      	movs	r1, #131	@ 0x83
 80191be:	6878      	ldr	r0, [r7, #4]
 80191c0:	f000 fe79 	bl	8019eb6 <USBD_LL_OpenEP>
                pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 1U;
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	2201      	movs	r2, #1
 80191c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                (void)USBD_LL_OpenEP(pdev, VND_OUT_EP, USBD_EP_TYPE_BULK, VND_DATA_HS_MAX_PACKET_SIZE);
 80191cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80191d0:	2202      	movs	r2, #2
 80191d2:	2103      	movs	r1, #3
 80191d4:	6878      	ldr	r0, [r7, #4]
 80191d6:	f000 fe6e 	bl	8019eb6 <USBD_LL_OpenEP>
                pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 1U;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	2201      	movs	r2, #1
 80191de:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
                (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_HS_MAX_PACKET_SIZE);
 80191e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80191e6:	4a26      	ldr	r2, [pc, #152]	@ (8019280 <USBD_CDCVND_Setup+0x354>)
 80191e8:	2103      	movs	r1, #3
 80191ea:	6878      	ldr	r0, [r7, #4]
 80191ec:	f000 ff71 	bl	801a0d2 <USBD_LL_PrepareReceive>
 80191f0:	e019      	b.n	8019226 <USBD_CDCVND_Setup+0x2fa>
              } else {
                (void)USBD_LL_OpenEP(pdev, VND_IN_EP,  USBD_EP_TYPE_BULK, VND_DATA_FS_MAX_PACKET_SIZE);
 80191f2:	2340      	movs	r3, #64	@ 0x40
 80191f4:	2202      	movs	r2, #2
 80191f6:	2183      	movs	r1, #131	@ 0x83
 80191f8:	6878      	ldr	r0, [r7, #4]
 80191fa:	f000 fe5c 	bl	8019eb6 <USBD_LL_OpenEP>
                pdev->ep_in[VND_IN_EP & 0x0FU].is_used = 1U;
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	2201      	movs	r2, #1
 8019202:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                (void)USBD_LL_OpenEP(pdev, VND_OUT_EP, USBD_EP_TYPE_BULK, VND_DATA_FS_MAX_PACKET_SIZE);
 8019206:	2340      	movs	r3, #64	@ 0x40
 8019208:	2202      	movs	r2, #2
 801920a:	2103      	movs	r1, #3
 801920c:	6878      	ldr	r0, [r7, #4]
 801920e:	f000 fe52 	bl	8019eb6 <USBD_LL_OpenEP>
                pdev->ep_out[VND_OUT_EP & 0x0FU].is_used = 1U;
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	2201      	movs	r2, #1
 8019216:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
                (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_FS_MAX_PACKET_SIZE);
 801921a:	2340      	movs	r3, #64	@ 0x40
 801921c:	4a18      	ldr	r2, [pc, #96]	@ (8019280 <USBD_CDCVND_Setup+0x354>)
 801921e:	2103      	movs	r1, #3
 8019220:	6878      	ldr	r0, [r7, #4]
 8019222:	f000 ff56 	bl	801a0d2 <USBD_LL_PrepareReceive>
              }
              g_alt_if2 = 1;
 8019226:	4b11      	ldr	r3, [pc, #68]	@ (801926c <USBD_CDCVND_Setup+0x340>)
 8019228:	2201      	movs	r2, #1
 801922a:	701a      	strb	r2, [r3, #0]
              printf("[USB_IF2] EP#3 and EP#83 opened, receiving enabled\r\n");
 801922c:	4815      	ldr	r0, [pc, #84]	@ (8019284 <USBD_CDCVND_Setup+0x358>)
 801922e:	f001 f8f5 	bl	801a41c <puts>
            }
            USBD_CtlSendStatus(pdev);
 8019232:	6878      	ldr	r0, [r7, #4]
 8019234:	f7fc f806 	bl	8015244 <USBD_CtlSendStatus>
            /* Выполним возможные отложенные сервисы */
            USBD_VND_ProcessControlRequests();
 8019238:	f7ff fce4 	bl	8018c04 <USBD_VND_ProcessControlRequests>
            return (uint8_t)USBD_OK;
 801923c:	2300      	movs	r3, #0
 801923e:	e025      	b.n	801928c <USBD_CDCVND_Setup+0x360>
          }
          /* Иные интерфейсы (CDC IF0/IF1) — поддерживают только alt=0. Подтверждаем статусом без действий. */
          USBD_CtlSendStatus(pdev);
 8019240:	6878      	ldr	r0, [r7, #4]
 8019242:	f7fb ffff 	bl	8015244 <USBD_CtlSendStatus>
          return (uint8_t)USBD_OK;
 8019246:	2300      	movs	r3, #0
 8019248:	e020      	b.n	801928c <USBD_CDCVND_Setup+0x360>
        default: USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL;
 801924a:	6839      	ldr	r1, [r7, #0]
 801924c:	6878      	ldr	r0, [r7, #4]
 801924e:	f7fb ff22 	bl	8015096 <USBD_CtlError>
 8019252:	2303      	movs	r3, #3
 8019254:	e01a      	b.n	801928c <USBD_CDCVND_Setup+0x360>
      }
      break;
 8019256:	e018      	b.n	801928a <USBD_CDCVND_Setup+0x35e>
    default: USBD_CtlError(pdev, req); return (uint8_t)USBD_FAIL;
 8019258:	6839      	ldr	r1, [r7, #0]
 801925a:	6878      	ldr	r0, [r7, #4]
 801925c:	f7fb ff1b 	bl	8015096 <USBD_CtlError>
 8019260:	2303      	movs	r3, #3
 8019262:	e013      	b.n	801928c <USBD_CDCVND_Setup+0x360>
 8019264:	2401a08c 	.word	0x2401a08c
 8019268:	2401a08d 	.word	0x2401a08d
 801926c:	2401a08e 	.word	0x2401a08e
 8019270:	0801c5fc 	.word	0x0801c5fc
 8019274:	0801c624 	.word	0x0801c624
 8019278:	0801c628 	.word	0x0801c628
 801927c:	0801c62c 	.word	0x0801c62c
 8019280:	2401a090 	.word	0x2401a090
 8019284:	0801c65c 	.word	0x0801c65c
      break;
 8019288:	bf00      	nop
  }
  return (uint8_t)USBD_OK;
 801928a:	2300      	movs	r3, #0
}
 801928c:	4618      	mov	r0, r3
 801928e:	3758      	adds	r7, #88	@ 0x58
 8019290:	46bd      	mov	sp, r7
 8019292:	bd80      	pop	{r7, pc}

08019294 <USBD_CDCVND_DataIn>:

static uint8_t USBD_CDCVND_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b086      	sub	sp, #24
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
 801929c:	460b      	mov	r3, r1
 801929e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80192a6:	617b      	str	r3, [r7, #20]
  if (!hcdc) return (uint8_t)USBD_FAIL;
 80192a8:	697b      	ldr	r3, [r7, #20]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d101      	bne.n	80192b2 <USBD_CDCVND_DataIn+0x1e>
 80192ae:	2303      	movs	r3, #3
 80192b0:	e0a1      	b.n	80193f6 <USBD_CDCVND_DataIn+0x162>
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80192b8:	613b      	str	r3, [r7, #16]
  if ((CDC_IN_EP & 0x7FU) == epnum) {
 80192ba:	78fb      	ldrb	r3, [r7, #3]
 80192bc:	2b01      	cmp	r3, #1
 80192be:	d150      	bne.n	8019362 <USBD_CDCVND_DataIn+0xce>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U)) {
 80192c0:	78fa      	ldrb	r2, [r7, #3]
 80192c2:	6879      	ldr	r1, [r7, #4]
 80192c4:	4613      	mov	r3, r2
 80192c6:	009b      	lsls	r3, r3, #2
 80192c8:	4413      	add	r3, r2
 80192ca:	009b      	lsls	r3, r3, #2
 80192cc:	440b      	add	r3, r1
 80192ce:	3318      	adds	r3, #24
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d029      	beq.n	801932a <USBD_CDCVND_DataIn+0x96>
 80192d6:	78fa      	ldrb	r2, [r7, #3]
 80192d8:	6879      	ldr	r1, [r7, #4]
 80192da:	4613      	mov	r3, r2
 80192dc:	009b      	lsls	r3, r3, #2
 80192de:	4413      	add	r3, r2
 80192e0:	009b      	lsls	r3, r3, #2
 80192e2:	440b      	add	r3, r1
 80192e4:	3318      	adds	r3, #24
 80192e6:	681a      	ldr	r2, [r3, #0]
 80192e8:	78f9      	ldrb	r1, [r7, #3]
 80192ea:	6938      	ldr	r0, [r7, #16]
 80192ec:	460b      	mov	r3, r1
 80192ee:	00db      	lsls	r3, r3, #3
 80192f0:	440b      	add	r3, r1
 80192f2:	009b      	lsls	r3, r3, #2
 80192f4:	4403      	add	r3, r0
 80192f6:	331c      	adds	r3, #28
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	fbb2 f1f3 	udiv	r1, r2, r3
 80192fe:	fb01 f303 	mul.w	r3, r1, r3
 8019302:	1ad3      	subs	r3, r2, r3
 8019304:	2b00      	cmp	r3, #0
 8019306:	d110      	bne.n	801932a <USBD_CDCVND_DataIn+0x96>
      pdev->ep_in[epnum].total_length = 0U;
 8019308:	78fa      	ldrb	r2, [r7, #3]
 801930a:	6879      	ldr	r1, [r7, #4]
 801930c:	4613      	mov	r3, r2
 801930e:	009b      	lsls	r3, r3, #2
 8019310:	4413      	add	r3, r2
 8019312:	009b      	lsls	r3, r3, #2
 8019314:	440b      	add	r3, r1
 8019316:	3318      	adds	r3, #24
 8019318:	2200      	movs	r2, #0
 801931a:	601a      	str	r2, [r3, #0]
      (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U); /* ZLP */
 801931c:	78f9      	ldrb	r1, [r7, #3]
 801931e:	2300      	movs	r3, #0
 8019320:	2200      	movs	r2, #0
 8019322:	6878      	ldr	r0, [r7, #4]
 8019324:	f000 feb4 	bl	801a090 <USBD_LL_Transmit>
 8019328:	e064      	b.n	80193f4 <USBD_CDCVND_DataIn+0x160>
    } else {
      hcdc->TxState = 0U;
 801932a:	697b      	ldr	r3, [r7, #20]
 801932c:	2200      	movs	r2, #0
 801932e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
      if (CDC_USR(pdev) && CDC_USR(pdev)->TransmitCplt) CDC_USR(pdev)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019338:	2b00      	cmp	r3, #0
 801933a:	d05b      	beq.n	80193f4 <USBD_CDCVND_DataIn+0x160>
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019342:	691b      	ldr	r3, [r3, #16]
 8019344:	2b00      	cmp	r3, #0
 8019346:	d055      	beq.n	80193f4 <USBD_CDCVND_DataIn+0x160>
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801934e:	691b      	ldr	r3, [r3, #16]
 8019350:	697a      	ldr	r2, [r7, #20]
 8019352:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8019356:	697a      	ldr	r2, [r7, #20]
 8019358:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 801935c:	78fa      	ldrb	r2, [r7, #3]
 801935e:	4798      	blx	r3
 8019360:	e048      	b.n	80193f4 <USBD_CDCVND_DataIn+0x160>
    }
  } else if ((VND_IN_EP & 0x7FU) == epnum) {
 8019362:	78fb      	ldrb	r3, [r7, #3]
 8019364:	2b03      	cmp	r3, #3
 8019366:	d145      	bne.n	80193f4 <USBD_CDCVND_DataIn+0x160>
    /* Vendor Bulk IN: CDC-подобная схема завершения.
       Если длина передачи кратна размеру пакета (MPS), требуется отправить ZLP,
       иначе некоторые хосты (Windows/libusb FS) будут ждать продолжения и в итоге
       получать таймаут. Поведение аналогично CDC. */
    uint16_t tl = pdev->ep_in[epnum].total_length;
 8019368:	78fa      	ldrb	r2, [r7, #3]
 801936a:	6879      	ldr	r1, [r7, #4]
 801936c:	4613      	mov	r3, r2
 801936e:	009b      	lsls	r3, r3, #2
 8019370:	4413      	add	r3, r2
 8019372:	009b      	lsls	r3, r3, #2
 8019374:	440b      	add	r3, r1
 8019376:	3318      	adds	r3, #24
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	81fb      	strh	r3, [r7, #14]
    uint16_t mps = hpcd->IN_ep[epnum].maxpacket;
 801937c:	78fa      	ldrb	r2, [r7, #3]
 801937e:	6939      	ldr	r1, [r7, #16]
 8019380:	4613      	mov	r3, r2
 8019382:	00db      	lsls	r3, r3, #3
 8019384:	4413      	add	r3, r2
 8019386:	009b      	lsls	r3, r3, #2
 8019388:	440b      	add	r3, r1
 801938a:	331c      	adds	r3, #28
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	81bb      	strh	r3, [r7, #12]
    static uint32_t vnd_dataIn_counter = 0; vnd_dataIn_counter++;
 8019390:	4b1b      	ldr	r3, [pc, #108]	@ (8019400 <USBD_CDCVND_DataIn+0x16c>)
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	3301      	adds	r3, #1
 8019396:	4a1a      	ldr	r2, [pc, #104]	@ (8019400 <USBD_CDCVND_DataIn+0x16c>)
 8019398:	6013      	str	r3, [r2, #0]
    VND_LOGF("[VND_DataIn:ENTER] ep=%u tl=%u mps=%u busy=%u cnt=%lu\r\n", (unsigned)epnum, (unsigned)tl,(unsigned)mps,(unsigned)vnd_tx_busy,(unsigned long)vnd_dataIn_counter);
    if ((tl > 0U) && ((tl % mps) == 0U)) {
 801939a:	89fb      	ldrh	r3, [r7, #14]
 801939c:	2b00      	cmp	r3, #0
 801939e:	d01a      	beq.n	80193d6 <USBD_CDCVND_DataIn+0x142>
 80193a0:	89fb      	ldrh	r3, [r7, #14]
 80193a2:	89ba      	ldrh	r2, [r7, #12]
 80193a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80193a8:	fb01 f202 	mul.w	r2, r1, r2
 80193ac:	1a9b      	subs	r3, r3, r2
 80193ae:	b29b      	uxth	r3, r3
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d110      	bne.n	80193d6 <USBD_CDCVND_DataIn+0x142>
      /* Нужен ZLP для корректного завершения трансфера */
      VND_LOGF("[VND_DataIn] ep=%u total=%u -> SEND ZLP (phase1) cnt=%lu\r\n", (unsigned)epnum, (unsigned)tl, (unsigned long)vnd_dataIn_counter);
      pdev->ep_in[epnum].total_length = 0U;
 80193b4:	78fa      	ldrb	r2, [r7, #3]
 80193b6:	6879      	ldr	r1, [r7, #4]
 80193b8:	4613      	mov	r3, r2
 80193ba:	009b      	lsls	r3, r3, #2
 80193bc:	4413      	add	r3, r2
 80193be:	009b      	lsls	r3, r3, #2
 80193c0:	440b      	add	r3, r1
 80193c2:	3318      	adds	r3, #24
 80193c4:	2200      	movs	r2, #0
 80193c6:	601a      	str	r2, [r3, #0]
      (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U); /* ZLP */
 80193c8:	78f9      	ldrb	r1, [r7, #3]
 80193ca:	2300      	movs	r3, #0
 80193cc:	2200      	movs	r2, #0
 80193ce:	6878      	ldr	r0, [r7, #4]
 80193d0:	f000 fe5e 	bl	801a090 <USBD_LL_Transmit>
 80193d4:	e00e      	b.n	80193f4 <USBD_CDCVND_DataIn+0x160>
      /* НЕ вызываем TxCplt здесь — он будет вызван при следующем DataIn после ZLP */
    } else {
      /* Обычное завершение (либо tl=0 после ZLP, либо tl не кратно mps) */
      VND_LOGF("[VND_DataIn] ep=%u total=%u -> COMPLETE (TxCplt) cnt=%lu\r\n", (unsigned)epnum, (unsigned)tl, (unsigned long)vnd_dataIn_counter);
      pdev->ep_in[epnum].total_length = 0U; /* очистить остаток для надёжности */
 80193d6:	78fa      	ldrb	r2, [r7, #3]
 80193d8:	6879      	ldr	r1, [r7, #4]
 80193da:	4613      	mov	r3, r2
 80193dc:	009b      	lsls	r3, r3, #2
 80193de:	4413      	add	r3, r2
 80193e0:	009b      	lsls	r3, r3, #2
 80193e2:	440b      	add	r3, r1
 80193e4:	3318      	adds	r3, #24
 80193e6:	2200      	movs	r2, #0
 80193e8:	601a      	str	r2, [r3, #0]
      vnd_tx_busy = 0U;
 80193ea:	4b06      	ldr	r3, [pc, #24]	@ (8019404 <USBD_CDCVND_DataIn+0x170>)
 80193ec:	2200      	movs	r2, #0
 80193ee:	701a      	strb	r2, [r3, #0]
      USBD_VND_TxCplt();
 80193f0:	f7fe fa18 	bl	8017824 <USBD_VND_TxCplt>
    }
  }
  return (uint8_t)USBD_OK;
 80193f4:	2300      	movs	r3, #0
}
 80193f6:	4618      	mov	r0, r3
 80193f8:	3718      	adds	r7, #24
 80193fa:	46bd      	mov	sp, r7
 80193fc:	bd80      	pop	{r7, pc}
 80193fe:	bf00      	nop
 8019400:	2401aab8 	.word	0x2401aab8
 8019404:	2401aab4 	.word	0x2401aab4

08019408 <USBD_CDCVND_DataOut>:

static uint8_t USBD_CDCVND_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019408:	b580      	push	{r7, lr}
 801940a:	b084      	sub	sp, #16
 801940c:	af00      	add	r7, sp, #0
 801940e:	6078      	str	r0, [r7, #4]
 8019410:	460b      	mov	r3, r1
 8019412:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801941a:	60fb      	str	r3, [r7, #12]
  if (!hcdc) return (uint8_t)USBD_FAIL;
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d101      	bne.n	8019426 <USBD_CDCVND_DataOut+0x1e>
 8019422:	2303      	movs	r3, #3
 8019424:	e054      	b.n	80194d0 <USBD_CDCVND_DataOut+0xc8>
  if (epnum == (CDC_OUT_EP & 0x7FU)) {
 8019426:	78fb      	ldrb	r3, [r7, #3]
 8019428:	2b01      	cmp	r3, #1
 801942a:	d120      	bne.n	801946e <USBD_CDCVND_DataOut+0x66>
    hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801942c:	78fb      	ldrb	r3, [r7, #3]
 801942e:	4619      	mov	r1, r3
 8019430:	6878      	ldr	r0, [r7, #4]
 8019432:	f000 fe6f 	bl	801a114 <USBD_LL_GetRxDataSize>
 8019436:	4602      	mov	r2, r0
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
    if (CDC_USR(pdev) && CDC_USR(pdev)->Receive) CDC_USR(pdev)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019444:	2b00      	cmp	r3, #0
 8019446:	d042      	beq.n	80194ce <USBD_CDCVND_DataOut+0xc6>
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801944e:	68db      	ldr	r3, [r3, #12]
 8019450:	2b00      	cmp	r3, #0
 8019452:	d03c      	beq.n	80194ce <USBD_CDCVND_DataOut+0xc6>
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801945a:	68db      	ldr	r3, [r3, #12]
 801945c:	68fa      	ldr	r2, [r7, #12]
 801945e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8019462:	68fa      	ldr	r2, [r7, #12]
 8019464:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8019468:	4611      	mov	r1, r2
 801946a:	4798      	blx	r3
 801946c:	e02f      	b.n	80194ce <USBD_CDCVND_DataOut+0xc6>
  } else if (epnum == (VND_OUT_EP & 0x7FU)) {
 801946e:	78fb      	ldrb	r3, [r7, #3]
 8019470:	2b03      	cmp	r3, #3
 8019472:	d12c      	bne.n	80194ce <USBD_CDCVND_DataOut+0xc6>
    vnd_rx_len = USBD_LL_GetRxDataSize(pdev, epnum);
 8019474:	78fb      	ldrb	r3, [r7, #3]
 8019476:	4619      	mov	r1, r3
 8019478:	6878      	ldr	r0, [r7, #4]
 801947a:	f000 fe4b 	bl	801a114 <USBD_LL_GetRxDataSize>
 801947e:	4603      	mov	r3, r0
 8019480:	4a15      	ldr	r2, [pc, #84]	@ (80194d8 <USBD_CDCVND_DataOut+0xd0>)
 8019482:	6013      	str	r3, [r2, #0]
    /* Мини-лог: подтверждаем приём однобайтовой команды */
    if (vnd_rx_len > 0) {
 8019484:	4b14      	ldr	r3, [pc, #80]	@ (80194d8 <USBD_CDCVND_DataOut+0xd0>)
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	2b00      	cmp	r3, #0
 801948a:	d008      	beq.n	801949e <USBD_CDCVND_DataOut+0x96>
      printf("[CMD] 0x%02X len=%lu\r\n", (unsigned)vnd_rx_buf[0], (unsigned long)vnd_rx_len);
 801948c:	4b13      	ldr	r3, [pc, #76]	@ (80194dc <USBD_CDCVND_DataOut+0xd4>)
 801948e:	781b      	ldrb	r3, [r3, #0]
 8019490:	4619      	mov	r1, r3
 8019492:	4b11      	ldr	r3, [pc, #68]	@ (80194d8 <USBD_CDCVND_DataOut+0xd0>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	461a      	mov	r2, r3
 8019498:	4811      	ldr	r0, [pc, #68]	@ (80194e0 <USBD_CDCVND_DataOut+0xd8>)
 801949a:	f000 ff57 	bl	801a34c <iprintf>
    }
    USBD_VND_DataReceived(vnd_rx_buf, vnd_rx_len);
 801949e:	4b0e      	ldr	r3, [pc, #56]	@ (80194d8 <USBD_CDCVND_DataOut+0xd0>)
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	4619      	mov	r1, r3
 80194a4:	480d      	ldr	r0, [pc, #52]	@ (80194dc <USBD_CDCVND_DataOut+0xd4>)
 80194a6:	f7fe fdd3 	bl	8018050 <USBD_VND_DataReceived>
    /* Реармим */
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	7c1b      	ldrb	r3, [r3, #16]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d107      	bne.n	80194c2 <USBD_CDCVND_DataOut+0xba>
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_HS_MAX_PACKET_SIZE);
 80194b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80194b6:	4a09      	ldr	r2, [pc, #36]	@ (80194dc <USBD_CDCVND_DataOut+0xd4>)
 80194b8:	2103      	movs	r1, #3
 80194ba:	6878      	ldr	r0, [r7, #4]
 80194bc:	f000 fe09 	bl	801a0d2 <USBD_LL_PrepareReceive>
 80194c0:	e005      	b.n	80194ce <USBD_CDCVND_DataOut+0xc6>
    else
      (void)USBD_LL_PrepareReceive(pdev, VND_OUT_EP, vnd_rx_buf, VND_DATA_FS_MAX_PACKET_SIZE);
 80194c2:	2340      	movs	r3, #64	@ 0x40
 80194c4:	4a05      	ldr	r2, [pc, #20]	@ (80194dc <USBD_CDCVND_DataOut+0xd4>)
 80194c6:	2103      	movs	r1, #3
 80194c8:	6878      	ldr	r0, [r7, #4]
 80194ca:	f000 fe02 	bl	801a0d2 <USBD_LL_PrepareReceive>
  }
  return (uint8_t)USBD_OK;
 80194ce:	2300      	movs	r3, #0
}
 80194d0:	4618      	mov	r0, r3
 80194d2:	3710      	adds	r7, #16
 80194d4:	46bd      	mov	sp, r7
 80194d6:	bd80      	pop	{r7, pc}
 80194d8:	2401aab0 	.word	0x2401aab0
 80194dc:	2401a090 	.word	0x2401a090
 80194e0:	0801c690 	.word	0x0801c690

080194e4 <USBD_CDCVND_EP0_RxReady>:

static uint8_t USBD_CDCVND_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b084      	sub	sp, #16
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80194f2:	60fb      	str	r3, [r7, #12]
  if (!hcdc) return (uint8_t)USBD_FAIL;
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d101      	bne.n	80194fe <USBD_CDCVND_EP0_RxReady+0x1a>
 80194fa:	2303      	movs	r3, #3
 80194fc:	e01a      	b.n	8019534 <USBD_CDCVND_EP0_RxReady+0x50>
  if (CDC_USR(pdev) && (hcdc->CmdOpCode != 0xFFU)) {
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019504:	2b00      	cmp	r3, #0
 8019506:	d014      	beq.n	8019532 <USBD_CDCVND_EP0_RxReady+0x4e>
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801950e:	2bff      	cmp	r3, #255	@ 0xff
 8019510:	d00f      	beq.n	8019532 <USBD_CDCVND_EP0_RxReady+0x4e>
    CDC_USR(pdev)->Control(hcdc->CmdOpCode, (uint8_t*)hcdc->data, hcdc->CmdLength); // cast
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8019518:	689b      	ldr	r3, [r3, #8]
 801951a:	68fa      	ldr	r2, [r7, #12]
 801951c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
 8019520:	68f9      	ldr	r1, [r7, #12]
 8019522:	68fa      	ldr	r2, [r7, #12]
 8019524:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
 8019528:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	22ff      	movs	r2, #255	@ 0xff
 801952e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }
  return (uint8_t)USBD_OK;
 8019532:	2300      	movs	r3, #0
}
 8019534:	4618      	mov	r0, r3
 8019536:	3710      	adds	r7, #16
 8019538:	46bd      	mov	sp, r7
 801953a:	bd80      	pop	{r7, pc}

0801953c <USBD_CDCVND_GetFSCfgDesc>:

static uint8_t *USBD_CDCVND_GetFSCfgDesc(uint16_t *length) { *length = sizeof(USBD_CDCVND_CfgFSDesc); return USBD_CDCVND_CfgFSDesc; }
 801953c:	b480      	push	{r7}
 801953e:	b083      	sub	sp, #12
 8019540:	af00      	add	r7, sp, #0
 8019542:	6078      	str	r0, [r7, #4]
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	226b      	movs	r2, #107	@ 0x6b
 8019548:	801a      	strh	r2, [r3, #0]
 801954a:	4b03      	ldr	r3, [pc, #12]	@ (8019558 <USBD_CDCVND_GetFSCfgDesc+0x1c>)
 801954c:	4618      	mov	r0, r3
 801954e:	370c      	adds	r7, #12
 8019550:	46bd      	mov	sp, r7
 8019552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019556:	4770      	bx	lr
 8019558:	240000d0 	.word	0x240000d0

0801955c <USBD_CDCVND_GetHSCfgDesc>:
static uint8_t *USBD_CDCVND_GetHSCfgDesc(uint16_t *length) { *length = sizeof(USBD_CDCVND_CfgHSDesc); return USBD_CDCVND_CfgHSDesc; }
 801955c:	b480      	push	{r7}
 801955e:	b083      	sub	sp, #12
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	226b      	movs	r2, #107	@ 0x6b
 8019568:	801a      	strh	r2, [r3, #0]
 801956a:	4b03      	ldr	r3, [pc, #12]	@ (8019578 <USBD_CDCVND_GetHSCfgDesc+0x1c>)
 801956c:	4618      	mov	r0, r3
 801956e:	370c      	adds	r7, #12
 8019570:	46bd      	mov	sp, r7
 8019572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019576:	4770      	bx	lr
 8019578:	24000064 	.word	0x24000064

0801957c <USBD_CDCVND_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_CDCVND_GetOtherSpeedCfgDesc(uint16_t *length) { *length = sizeof(USBD_CDCVND_OtherSpeedCfgDesc); return USBD_CDCVND_OtherSpeedCfgDesc; }
 801957c:	b480      	push	{r7}
 801957e:	b083      	sub	sp, #12
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	226b      	movs	r2, #107	@ 0x6b
 8019588:	801a      	strh	r2, [r3, #0]
 801958a:	4b03      	ldr	r3, [pc, #12]	@ (8019598 <USBD_CDCVND_GetOtherSpeedCfgDesc+0x1c>)
 801958c:	4618      	mov	r0, r3
 801958e:	370c      	adds	r7, #12
 8019590:	46bd      	mov	sp, r7
 8019592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019596:	4770      	bx	lr
 8019598:	2400013c 	.word	0x2400013c

0801959c <USBD_CDCVND_GetDeviceQualifierDescriptor>:
static uint8_t *USBD_CDCVND_GetDeviceQualifierDescriptor(uint16_t *length) { *length = USB_LEN_DEV_QUALIFIER_DESC; return USBD_CDCVND_DeviceQualifierDesc; }
 801959c:	b480      	push	{r7}
 801959e:	b083      	sub	sp, #12
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	220a      	movs	r2, #10
 80195a8:	801a      	strh	r2, [r3, #0]
 80195aa:	4b03      	ldr	r3, [pc, #12]	@ (80195b8 <USBD_CDCVND_GetDeviceQualifierDescriptor+0x1c>)
 80195ac:	4618      	mov	r0, r3
 80195ae:	370c      	adds	r7, #12
 80195b0:	46bd      	mov	sp, r7
 80195b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b6:	4770      	bx	lr
 80195b8:	24000058 	.word	0x24000058

080195bc <__NVIC_SystemReset>:
{
 80195bc:	b480      	push	{r7}
 80195be:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80195c0:	f3bf 8f4f 	dsb	sy
}
 80195c4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80195c6:	4b06      	ldr	r3, [pc, #24]	@ (80195e0 <__NVIC_SystemReset+0x24>)
 80195c8:	68db      	ldr	r3, [r3, #12]
 80195ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80195ce:	4904      	ldr	r1, [pc, #16]	@ (80195e0 <__NVIC_SystemReset+0x24>)
 80195d0:	4b04      	ldr	r3, [pc, #16]	@ (80195e4 <__NVIC_SystemReset+0x28>)
 80195d2:	4313      	orrs	r3, r2
 80195d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80195d6:	f3bf 8f4f 	dsb	sy
}
 80195da:	bf00      	nop
    __NOP();
 80195dc:	bf00      	nop
 80195de:	e7fd      	b.n	80195dc <__NVIC_SystemReset+0x20>
 80195e0:	e000ed00 	.word	0xe000ed00
 80195e4:	05fa0004 	.word	0x05fa0004

080195e8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80195e8:	b580      	push	{r7, lr}
 80195ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80195ec:	2200      	movs	r2, #0
 80195ee:	4906      	ldr	r1, [pc, #24]	@ (8019608 <CDC_Init_HS+0x20>)
 80195f0:	4806      	ldr	r0, [pc, #24]	@ (801960c <CDC_Init_HS+0x24>)
 80195f2:	f7fa fac0 	bl	8013b76 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80195f6:	4906      	ldr	r1, [pc, #24]	@ (8019610 <CDC_Init_HS+0x28>)
 80195f8:	4804      	ldr	r0, [pc, #16]	@ (801960c <CDC_Init_HS+0x24>)
 80195fa:	f7fa fade 	bl	8013bba <USBD_CDC_SetRxBuffer>
  usb_stream_init(); // инициализация протокол/стрим
 80195fe:	f7ea ffcf 	bl	80045a0 <usb_stream_init>
  return (USBD_OK);
 8019602:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8019604:	4618      	mov	r0, r3
 8019606:	bd80      	pop	{r7, pc}
 8019608:	2401b2bc 	.word	0x2401b2bc
 801960c:	2400d8c4 	.word	0x2400d8c4
 8019610:	2401aabc 	.word	0x2401aabc

08019614 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8019614:	b480      	push	{r7}
 8019616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8019618:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801961a:	4618      	mov	r0, r3
 801961c:	46bd      	mov	sp, r7
 801961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019622:	4770      	bx	lr

08019624 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019624:	b480      	push	{r7}
 8019626:	b083      	sub	sp, #12
 8019628:	af00      	add	r7, sp, #0
 801962a:	4603      	mov	r3, r0
 801962c:	6039      	str	r1, [r7, #0]
 801962e:	71fb      	strb	r3, [r7, #7]
 8019630:	4613      	mov	r3, r2
 8019632:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8019634:	79fb      	ldrb	r3, [r7, #7]
 8019636:	2b23      	cmp	r3, #35	@ 0x23
 8019638:	d84a      	bhi.n	80196d0 <CDC_Control_HS+0xac>
 801963a:	a201      	add	r2, pc, #4	@ (adr r2, 8019640 <CDC_Control_HS+0x1c>)
 801963c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019640:	080196d1 	.word	0x080196d1
 8019644:	080196d1 	.word	0x080196d1
 8019648:	080196d1 	.word	0x080196d1
 801964c:	080196d1 	.word	0x080196d1
 8019650:	080196d1 	.word	0x080196d1
 8019654:	080196d1 	.word	0x080196d1
 8019658:	080196d1 	.word	0x080196d1
 801965c:	080196d1 	.word	0x080196d1
 8019660:	080196d1 	.word	0x080196d1
 8019664:	080196d1 	.word	0x080196d1
 8019668:	080196d1 	.word	0x080196d1
 801966c:	080196d1 	.word	0x080196d1
 8019670:	080196d1 	.word	0x080196d1
 8019674:	080196d1 	.word	0x080196d1
 8019678:	080196d1 	.word	0x080196d1
 801967c:	080196d1 	.word	0x080196d1
 8019680:	080196d1 	.word	0x080196d1
 8019684:	080196d1 	.word	0x080196d1
 8019688:	080196d1 	.word	0x080196d1
 801968c:	080196d1 	.word	0x080196d1
 8019690:	080196d1 	.word	0x080196d1
 8019694:	080196d1 	.word	0x080196d1
 8019698:	080196d1 	.word	0x080196d1
 801969c:	080196d1 	.word	0x080196d1
 80196a0:	080196d1 	.word	0x080196d1
 80196a4:	080196d1 	.word	0x080196d1
 80196a8:	080196d1 	.word	0x080196d1
 80196ac:	080196d1 	.word	0x080196d1
 80196b0:	080196d1 	.word	0x080196d1
 80196b4:	080196d1 	.word	0x080196d1
 80196b8:	080196d1 	.word	0x080196d1
 80196bc:	080196d1 	.word	0x080196d1
 80196c0:	080196d1 	.word	0x080196d1
 80196c4:	080196d1 	.word	0x080196d1
 80196c8:	080196d1 	.word	0x080196d1
 80196cc:	080196d1 	.word	0x080196d1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80196d0:	bf00      	nop
  }

  return (USBD_OK);
 80196d2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80196d4:	4618      	mov	r0, r3
 80196d6:	370c      	adds	r7, #12
 80196d8:	46bd      	mov	sp, r7
 80196da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196de:	4770      	bx	lr

080196e0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80196e0:	b580      	push	{r7, lr}
 80196e2:	b084      	sub	sp, #16
 80196e4:	af00      	add	r7, sp, #0
 80196e6:	6078      	str	r0, [r7, #4]
 80196e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  // Проверка текстовой команды RESET
  if (*Len >= 5 && Buf[0] == 'R' && Buf[1] == 'E' && Buf[2] == 'S' && Buf[3] == 'E' && Buf[4] == 'T') {
 80196ea:	683b      	ldr	r3, [r7, #0]
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	2b04      	cmp	r3, #4
 80196f0:	d91f      	bls.n	8019732 <CDC_Receive_HS+0x52>
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	781b      	ldrb	r3, [r3, #0]
 80196f6:	2b52      	cmp	r3, #82	@ 0x52
 80196f8:	d11b      	bne.n	8019732 <CDC_Receive_HS+0x52>
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	3301      	adds	r3, #1
 80196fe:	781b      	ldrb	r3, [r3, #0]
 8019700:	2b45      	cmp	r3, #69	@ 0x45
 8019702:	d116      	bne.n	8019732 <CDC_Receive_HS+0x52>
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	3302      	adds	r3, #2
 8019708:	781b      	ldrb	r3, [r3, #0]
 801970a:	2b53      	cmp	r3, #83	@ 0x53
 801970c:	d111      	bne.n	8019732 <CDC_Receive_HS+0x52>
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	3303      	adds	r3, #3
 8019712:	781b      	ldrb	r3, [r3, #0]
 8019714:	2b45      	cmp	r3, #69	@ 0x45
 8019716:	d10c      	bne.n	8019732 <CDC_Receive_HS+0x52>
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	3304      	adds	r3, #4
 801971c:	781b      	ldrb	r3, [r3, #0]
 801971e:	2b54      	cmp	r3, #84	@ 0x54
 8019720:	d107      	bne.n	8019732 <CDC_Receive_HS+0x52>
    printf("[CDC] RESET command received - performing software reset\r\n");
 8019722:	4822      	ldr	r0, [pc, #136]	@ (80197ac <CDC_Receive_HS+0xcc>)
 8019724:	f000 fe7a 	bl	801a41c <puts>
    HAL_Delay(100); // Дать время на отправку сообщения
 8019728:	2064      	movs	r0, #100	@ 0x64
 801972a:	f7eb fbd7 	bl	8004edc <HAL_Delay>
    NVIC_SystemReset(); // Программный сброс
 801972e:	f7ff ff45 	bl	80195bc <__NVIC_SystemReset>
  }
  
  // Проксируем команды протокола в Vendor и отключаем CDC-протокол для этих команд,
  // чтобы не запускалась параллельная передача кадров по CDC.
  uint8_t vendor_forwarded = 0;
 8019732:	2300      	movs	r3, #0
 8019734:	73fb      	strb	r3, [r7, #15]
  if (*Len >= 1) {
 8019736:	683b      	ldr	r3, [r7, #0]
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d021      	beq.n	8019782 <CDC_Receive_HS+0xa2>
    uint8_t cmd = Buf[0];
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	781b      	ldrb	r3, [r3, #0]
 8019742:	73bb      	strb	r3, [r7, #14]
    switch (cmd) {
 8019744:	7bbb      	ldrb	r3, [r7, #14]
 8019746:	3b13      	subs	r3, #19
 8019748:	2b1d      	cmp	r3, #29
 801974a:	bf8c      	ite	hi
 801974c:	2201      	movhi	r2, #1
 801974e:	2200      	movls	r2, #0
 8019750:	b2d2      	uxtb	r2, r2
 8019752:	2a00      	cmp	r2, #0
 8019754:	d114      	bne.n	8019780 <CDC_Receive_HS+0xa0>
 8019756:	4a16      	ldr	r2, [pc, #88]	@ (80197b0 <CDC_Receive_HS+0xd0>)
 8019758:	fa22 f303 	lsr.w	r3, r2, r3
 801975c:	f003 0301 	and.w	r3, r3, #1
 8019760:	2b00      	cmp	r3, #0
 8019762:	bf14      	ite	ne
 8019764:	2301      	movne	r3, #1
 8019766:	2300      	moveq	r3, #0
 8019768:	b2db      	uxtb	r3, r3
 801976a:	2b00      	cmp	r3, #0
 801976c:	d008      	beq.n	8019780 <CDC_Receive_HS+0xa0>
      case 0x14u: // VND_CMD_SET_PROFILE
      case 0x15u: // VND_CMD_SET_ROI_US
      case 0x20u: // VND_CMD_START_STREAM
      case 0x21u: // VND_CMD_STOP_STREAM
      case 0x30u: // VND_CMD_GET_STATUS
        USBD_VND_DataReceived(Buf, *Len);
 801976e:	683b      	ldr	r3, [r7, #0]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	4619      	mov	r1, r3
 8019774:	6878      	ldr	r0, [r7, #4]
 8019776:	f7fe fc6b 	bl	8018050 <USBD_VND_DataReceived>
        vendor_forwarded = 1;
 801977a:	2301      	movs	r3, #1
 801977c:	73fb      	strb	r3, [r7, #15]
        break;
 801977e:	e000      	b.n	8019782 <CDC_Receive_HS+0xa2>
      default:
        break;
 8019780:	bf00      	nop
    }
  }
  // В CDC-протокол НЕ передаём пакеты, которые были распознаны как Vendor команды
  if (!vendor_forwarded) {
 8019782:	7bfb      	ldrb	r3, [r7, #15]
 8019784:	2b00      	cmp	r3, #0
 8019786:	d105      	bne.n	8019794 <CDC_Receive_HS+0xb4>
    usb_stream_on_rx_bytes(Buf, *Len);
 8019788:	683b      	ldr	r3, [r7, #0]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	4619      	mov	r1, r3
 801978e:	6878      	ldr	r0, [r7, #4]
 8019790:	f7ea fdae 	bl	80042f0 <usb_stream_on_rx_bytes>
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8019794:	6879      	ldr	r1, [r7, #4]
 8019796:	4807      	ldr	r0, [pc, #28]	@ (80197b4 <CDC_Receive_HS+0xd4>)
 8019798:	f7fa fa0f 	bl	8013bba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801979c:	4805      	ldr	r0, [pc, #20]	@ (80197b4 <CDC_Receive_HS+0xd4>)
 801979e:	f7fa fa69 	bl	8013c74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80197a2:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80197a4:	4618      	mov	r0, r3
 80197a6:	3710      	adds	r7, #16
 80197a8:	46bd      	mov	sp, r7
 80197aa:	bd80      	pop	{r7, pc}
 80197ac:	0801c6a8 	.word	0x0801c6a8
 80197b0:	20006007 	.word	0x20006007
 80197b4:	2400d8c4 	.word	0x2400d8c4

080197b8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b084      	sub	sp, #16
 80197bc:	af00      	add	r7, sp, #0
 80197be:	6078      	str	r0, [r7, #4]
 80197c0:	460b      	mov	r3, r1
 80197c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80197c4:	2300      	movs	r3, #0
 80197c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80197c8:	4b0d      	ldr	r3, [pc, #52]	@ (8019800 <CDC_Transmit_HS+0x48>)
 80197ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80197ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80197d0:	68bb      	ldr	r3, [r7, #8]
 80197d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d001      	beq.n	80197de <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80197da:	2301      	movs	r3, #1
 80197dc:	e00b      	b.n	80197f6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80197de:	887b      	ldrh	r3, [r7, #2]
 80197e0:	461a      	mov	r2, r3
 80197e2:	6879      	ldr	r1, [r7, #4]
 80197e4:	4806      	ldr	r0, [pc, #24]	@ (8019800 <CDC_Transmit_HS+0x48>)
 80197e6:	f7fa f9c6 	bl	8013b76 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80197ea:	4805      	ldr	r0, [pc, #20]	@ (8019800 <CDC_Transmit_HS+0x48>)
 80197ec:	f7fa fa02 	bl	8013bf4 <USBD_CDC_TransmitPacket>
 80197f0:	4603      	mov	r3, r0
 80197f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80197f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80197f6:	4618      	mov	r0, r3
 80197f8:	3710      	adds	r7, #16
 80197fa:	46bd      	mov	sp, r7
 80197fc:	bd80      	pop	{r7, pc}
 80197fe:	bf00      	nop
 8019800:	2400d8c4 	.word	0x2400d8c4

08019804 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019804:	b480      	push	{r7}
 8019806:	b087      	sub	sp, #28
 8019808:	af00      	add	r7, sp, #0
 801980a:	60f8      	str	r0, [r7, #12]
 801980c:	60b9      	str	r1, [r7, #8]
 801980e:	4613      	mov	r3, r2
 8019810:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019812:	2300      	movs	r3, #0
 8019814:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8019816:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801981a:	4618      	mov	r0, r3
 801981c:	371c      	adds	r7, #28
 801981e:	46bd      	mov	sp, r7
 8019820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019824:	4770      	bx	lr
	...

08019828 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019828:	b480      	push	{r7}
 801982a:	b083      	sub	sp, #12
 801982c:	af00      	add	r7, sp, #0
 801982e:	4603      	mov	r3, r0
 8019830:	6039      	str	r1, [r7, #0]
 8019832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8019834:	683b      	ldr	r3, [r7, #0]
 8019836:	2212      	movs	r2, #18
 8019838:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801983a:	4b03      	ldr	r3, [pc, #12]	@ (8019848 <USBD_HS_DeviceDescriptor+0x20>)
}
 801983c:	4618      	mov	r0, r3
 801983e:	370c      	adds	r7, #12
 8019840:	46bd      	mov	sp, r7
 8019842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019846:	4770      	bx	lr
 8019848:	24000214 	.word	0x24000214

0801984c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801984c:	b480      	push	{r7}
 801984e:	b083      	sub	sp, #12
 8019850:	af00      	add	r7, sp, #0
 8019852:	4603      	mov	r3, r0
 8019854:	6039      	str	r1, [r7, #0]
 8019856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019858:	683b      	ldr	r3, [r7, #0]
 801985a:	2204      	movs	r2, #4
 801985c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801985e:	4b03      	ldr	r3, [pc, #12]	@ (801986c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8019860:	4618      	mov	r0, r3
 8019862:	370c      	adds	r7, #12
 8019864:	46bd      	mov	sp, r7
 8019866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801986a:	4770      	bx	lr
 801986c:	24000228 	.word	0x24000228

08019870 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019870:	b580      	push	{r7, lr}
 8019872:	b082      	sub	sp, #8
 8019874:	af00      	add	r7, sp, #0
 8019876:	4603      	mov	r3, r0
 8019878:	6039      	str	r1, [r7, #0]
 801987a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801987c:	79fb      	ldrb	r3, [r7, #7]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d105      	bne.n	801988e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8019882:	683a      	ldr	r2, [r7, #0]
 8019884:	4907      	ldr	r1, [pc, #28]	@ (80198a4 <USBD_HS_ProductStrDescriptor+0x34>)
 8019886:	4808      	ldr	r0, [pc, #32]	@ (80198a8 <USBD_HS_ProductStrDescriptor+0x38>)
 8019888:	f7fb fc16 	bl	80150b8 <USBD_GetString>
 801988c:	e004      	b.n	8019898 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801988e:	683a      	ldr	r2, [r7, #0]
 8019890:	4904      	ldr	r1, [pc, #16]	@ (80198a4 <USBD_HS_ProductStrDescriptor+0x34>)
 8019892:	4805      	ldr	r0, [pc, #20]	@ (80198a8 <USBD_HS_ProductStrDescriptor+0x38>)
 8019894:	f7fb fc10 	bl	80150b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019898:	4b02      	ldr	r3, [pc, #8]	@ (80198a4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801989a:	4618      	mov	r0, r3
 801989c:	3708      	adds	r7, #8
 801989e:	46bd      	mov	sp, r7
 80198a0:	bd80      	pop	{r7, pc}
 80198a2:	bf00      	nop
 80198a4:	2401babc 	.word	0x2401babc
 80198a8:	0801c6e4 	.word	0x0801c6e4

080198ac <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80198ac:	b580      	push	{r7, lr}
 80198ae:	b082      	sub	sp, #8
 80198b0:	af00      	add	r7, sp, #0
 80198b2:	4603      	mov	r3, r0
 80198b4:	6039      	str	r1, [r7, #0]
 80198b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80198b8:	683a      	ldr	r2, [r7, #0]
 80198ba:	4904      	ldr	r1, [pc, #16]	@ (80198cc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80198bc:	4804      	ldr	r0, [pc, #16]	@ (80198d0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80198be:	f7fb fbfb 	bl	80150b8 <USBD_GetString>
  return USBD_StrDesc;
 80198c2:	4b02      	ldr	r3, [pc, #8]	@ (80198cc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80198c4:	4618      	mov	r0, r3
 80198c6:	3708      	adds	r7, #8
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bd80      	pop	{r7, pc}
 80198cc:	2401babc 	.word	0x2401babc
 80198d0:	0801c6f0 	.word	0x0801c6f0

080198d4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80198d4:	b580      	push	{r7, lr}
 80198d6:	b082      	sub	sp, #8
 80198d8:	af00      	add	r7, sp, #0
 80198da:	4603      	mov	r3, r0
 80198dc:	6039      	str	r1, [r7, #0]
 80198de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80198e0:	683b      	ldr	r3, [r7, #0]
 80198e2:	221a      	movs	r2, #26
 80198e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80198e6:	f000 f843 	bl	8019970 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80198ea:	4b02      	ldr	r3, [pc, #8]	@ (80198f4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80198ec:	4618      	mov	r0, r3
 80198ee:	3708      	adds	r7, #8
 80198f0:	46bd      	mov	sp, r7
 80198f2:	bd80      	pop	{r7, pc}
 80198f4:	2400022c 	.word	0x2400022c

080198f8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b082      	sub	sp, #8
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	4603      	mov	r3, r0
 8019900:	6039      	str	r1, [r7, #0]
 8019902:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019904:	79fb      	ldrb	r3, [r7, #7]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d105      	bne.n	8019916 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801990a:	683a      	ldr	r2, [r7, #0]
 801990c:	4907      	ldr	r1, [pc, #28]	@ (801992c <USBD_HS_ConfigStrDescriptor+0x34>)
 801990e:	4808      	ldr	r0, [pc, #32]	@ (8019930 <USBD_HS_ConfigStrDescriptor+0x38>)
 8019910:	f7fb fbd2 	bl	80150b8 <USBD_GetString>
 8019914:	e004      	b.n	8019920 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8019916:	683a      	ldr	r2, [r7, #0]
 8019918:	4904      	ldr	r1, [pc, #16]	@ (801992c <USBD_HS_ConfigStrDescriptor+0x34>)
 801991a:	4805      	ldr	r0, [pc, #20]	@ (8019930 <USBD_HS_ConfigStrDescriptor+0x38>)
 801991c:	f7fb fbcc 	bl	80150b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019920:	4b02      	ldr	r3, [pc, #8]	@ (801992c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8019922:	4618      	mov	r0, r3
 8019924:	3708      	adds	r7, #8
 8019926:	46bd      	mov	sp, r7
 8019928:	bd80      	pop	{r7, pc}
 801992a:	bf00      	nop
 801992c:	2401babc 	.word	0x2401babc
 8019930:	0801c6fc 	.word	0x0801c6fc

08019934 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019934:	b580      	push	{r7, lr}
 8019936:	b082      	sub	sp, #8
 8019938:	af00      	add	r7, sp, #0
 801993a:	4603      	mov	r3, r0
 801993c:	6039      	str	r1, [r7, #0]
 801993e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019940:	79fb      	ldrb	r3, [r7, #7]
 8019942:	2b00      	cmp	r3, #0
 8019944:	d105      	bne.n	8019952 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8019946:	683a      	ldr	r2, [r7, #0]
 8019948:	4907      	ldr	r1, [pc, #28]	@ (8019968 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801994a:	4808      	ldr	r0, [pc, #32]	@ (801996c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801994c:	f7fb fbb4 	bl	80150b8 <USBD_GetString>
 8019950:	e004      	b.n	801995c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8019952:	683a      	ldr	r2, [r7, #0]
 8019954:	4904      	ldr	r1, [pc, #16]	@ (8019968 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8019956:	4805      	ldr	r0, [pc, #20]	@ (801996c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8019958:	f7fb fbae 	bl	80150b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801995c:	4b02      	ldr	r3, [pc, #8]	@ (8019968 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801995e:	4618      	mov	r0, r3
 8019960:	3708      	adds	r7, #8
 8019962:	46bd      	mov	sp, r7
 8019964:	bd80      	pop	{r7, pc}
 8019966:	bf00      	nop
 8019968:	2401babc 	.word	0x2401babc
 801996c:	0801c710 	.word	0x0801c710

08019970 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019970:	b580      	push	{r7, lr}
 8019972:	b084      	sub	sp, #16
 8019974:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019976:	4b0f      	ldr	r3, [pc, #60]	@ (80199b4 <Get_SerialNum+0x44>)
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801997c:	4b0e      	ldr	r3, [pc, #56]	@ (80199b8 <Get_SerialNum+0x48>)
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019982:	4b0e      	ldr	r3, [pc, #56]	@ (80199bc <Get_SerialNum+0x4c>)
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019988:	68fa      	ldr	r2, [r7, #12]
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	4413      	add	r3, r2
 801998e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	2b00      	cmp	r3, #0
 8019994:	d009      	beq.n	80199aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019996:	2208      	movs	r2, #8
 8019998:	4909      	ldr	r1, [pc, #36]	@ (80199c0 <Get_SerialNum+0x50>)
 801999a:	68f8      	ldr	r0, [r7, #12]
 801999c:	f000 f814 	bl	80199c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80199a0:	2204      	movs	r2, #4
 80199a2:	4908      	ldr	r1, [pc, #32]	@ (80199c4 <Get_SerialNum+0x54>)
 80199a4:	68b8      	ldr	r0, [r7, #8]
 80199a6:	f000 f80f 	bl	80199c8 <IntToUnicode>
  }
}
 80199aa:	bf00      	nop
 80199ac:	3710      	adds	r7, #16
 80199ae:	46bd      	mov	sp, r7
 80199b0:	bd80      	pop	{r7, pc}
 80199b2:	bf00      	nop
 80199b4:	1ff1e800 	.word	0x1ff1e800
 80199b8:	1ff1e804 	.word	0x1ff1e804
 80199bc:	1ff1e808 	.word	0x1ff1e808
 80199c0:	2400022e 	.word	0x2400022e
 80199c4:	2400023e 	.word	0x2400023e

080199c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80199c8:	b480      	push	{r7}
 80199ca:	b087      	sub	sp, #28
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	60f8      	str	r0, [r7, #12]
 80199d0:	60b9      	str	r1, [r7, #8]
 80199d2:	4613      	mov	r3, r2
 80199d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80199d6:	2300      	movs	r3, #0
 80199d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80199da:	2300      	movs	r3, #0
 80199dc:	75fb      	strb	r3, [r7, #23]
 80199de:	e027      	b.n	8019a30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	0f1b      	lsrs	r3, r3, #28
 80199e4:	2b09      	cmp	r3, #9
 80199e6:	d80b      	bhi.n	8019a00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	0f1b      	lsrs	r3, r3, #28
 80199ec:	b2da      	uxtb	r2, r3
 80199ee:	7dfb      	ldrb	r3, [r7, #23]
 80199f0:	005b      	lsls	r3, r3, #1
 80199f2:	4619      	mov	r1, r3
 80199f4:	68bb      	ldr	r3, [r7, #8]
 80199f6:	440b      	add	r3, r1
 80199f8:	3230      	adds	r2, #48	@ 0x30
 80199fa:	b2d2      	uxtb	r2, r2
 80199fc:	701a      	strb	r2, [r3, #0]
 80199fe:	e00a      	b.n	8019a16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	0f1b      	lsrs	r3, r3, #28
 8019a04:	b2da      	uxtb	r2, r3
 8019a06:	7dfb      	ldrb	r3, [r7, #23]
 8019a08:	005b      	lsls	r3, r3, #1
 8019a0a:	4619      	mov	r1, r3
 8019a0c:	68bb      	ldr	r3, [r7, #8]
 8019a0e:	440b      	add	r3, r1
 8019a10:	3237      	adds	r2, #55	@ 0x37
 8019a12:	b2d2      	uxtb	r2, r2
 8019a14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	011b      	lsls	r3, r3, #4
 8019a1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019a1c:	7dfb      	ldrb	r3, [r7, #23]
 8019a1e:	005b      	lsls	r3, r3, #1
 8019a20:	3301      	adds	r3, #1
 8019a22:	68ba      	ldr	r2, [r7, #8]
 8019a24:	4413      	add	r3, r2
 8019a26:	2200      	movs	r2, #0
 8019a28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019a2a:	7dfb      	ldrb	r3, [r7, #23]
 8019a2c:	3301      	adds	r3, #1
 8019a2e:	75fb      	strb	r3, [r7, #23]
 8019a30:	7dfa      	ldrb	r2, [r7, #23]
 8019a32:	79fb      	ldrb	r3, [r7, #7]
 8019a34:	429a      	cmp	r2, r3
 8019a36:	d3d3      	bcc.n	80199e0 <IntToUnicode+0x18>
  }
}
 8019a38:	bf00      	nop
 8019a3a:	bf00      	nop
 8019a3c:	371c      	adds	r7, #28
 8019a3e:	46bd      	mov	sp, r7
 8019a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a44:	4770      	bx	lr

08019a46 <USBD_Desc_GetVID>:
/* USER CODE BEGIN 1 */
/* Simple accessors for boot-time diagnostics */
uint16_t USBD_Desc_GetVID(void) { return (uint16_t)USBD_VID; }
 8019a46:	b480      	push	{r7}
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	f64c 23fe 	movw	r3, #51966	@ 0xcafe
 8019a4e:	4618      	mov	r0, r3
 8019a50:	46bd      	mov	sp, r7
 8019a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a56:	4770      	bx	lr

08019a58 <USBD_Desc_GetPID>:
uint16_t USBD_Desc_GetPID(void) { return (uint16_t)USBD_PID_HS; }
 8019a58:	b480      	push	{r7}
 8019a5a:	af00      	add	r7, sp, #0
 8019a5c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8019a60:	4618      	mov	r0, r3
 8019a62:	46bd      	mov	sp, r7
 8019a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a68:	4770      	bx	lr

08019a6a <USBD_Desc_GetLangID>:
uint16_t USBD_Desc_GetLangID(void) { return (uint16_t)USBD_LANGID_STRING; }
 8019a6a:	b480      	push	{r7}
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	f240 4309 	movw	r3, #1033	@ 0x409
 8019a72:	4618      	mov	r0, r3
 8019a74:	46bd      	mov	sp, r7
 8019a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a7a:	4770      	bx	lr

08019a7c <USBD_Desc_GetManufacturer>:
const char* USBD_Desc_GetManufacturer(void) { return USBD_MANUFACTURER_STRING; }
 8019a7c:	b480      	push	{r7}
 8019a7e:	af00      	add	r7, sp, #0
 8019a80:	4b02      	ldr	r3, [pc, #8]	@ (8019a8c <USBD_Desc_GetManufacturer+0x10>)
 8019a82:	4618      	mov	r0, r3
 8019a84:	46bd      	mov	sp, r7
 8019a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a8a:	4770      	bx	lr
 8019a8c:	0801c6f0 	.word	0x0801c6f0

08019a90 <USBD_Desc_GetProduct>:
const char* USBD_Desc_GetProduct(void) { return USBD_PRODUCT_STRING_HS; }
 8019a90:	b480      	push	{r7}
 8019a92:	af00      	add	r7, sp, #0
 8019a94:	4b02      	ldr	r3, [pc, #8]	@ (8019aa0 <USBD_Desc_GetProduct+0x10>)
 8019a96:	4618      	mov	r0, r3
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9e:	4770      	bx	lr
 8019aa0:	0801c6e4 	.word	0x0801c6e4

08019aa4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019aa4:	b580      	push	{r7, lr}
 8019aa6:	b0b8      	sub	sp, #224	@ 0xe0
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8019aac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8019ab0:	22b8      	movs	r2, #184	@ 0xb8
 8019ab2:	2100      	movs	r1, #0
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	f000 feb5 	bl	801a824 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	4a2e      	ldr	r2, [pc, #184]	@ (8019b78 <HAL_PCD_MspInit+0xd4>)
 8019ac0:	4293      	cmp	r3, r2
 8019ac2:	d154      	bne.n	8019b6e <HAL_PCD_MspInit+0xca>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */
  /* Настройка GPIO DM/DP (PA11/PA12) для встроенного FS PHY */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8019b7c <HAL_PCD_MspInit+0xd8>)
 8019ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8019aca:	4a2c      	ldr	r2, [pc, #176]	@ (8019b7c <HAL_PCD_MspInit+0xd8>)
 8019acc:	f043 0301 	orr.w	r3, r3, #1
 8019ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8019ad4:	4b29      	ldr	r3, [pc, #164]	@ (8019b7c <HAL_PCD_MspInit+0xd8>)
 8019ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8019ada:	f003 0301 	and.w	r3, r3, #1
 8019ade:	613b      	str	r3, [r7, #16]
 8019ae0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019ae2:	f107 0314 	add.w	r3, r7, #20
 8019ae6:	2200      	movs	r2, #0
 8019ae8:	601a      	str	r2, [r3, #0]
 8019aea:	605a      	str	r2, [r3, #4]
 8019aec:	609a      	str	r2, [r3, #8]
 8019aee:	60da      	str	r2, [r3, #12]
 8019af0:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12; // DM / DP
 8019af2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8019af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019af8:	2302      	movs	r3, #2
 8019afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019afc:	2300      	movs	r3, #0
 8019afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019b00:	2303      	movs	r3, #3
 8019b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8019b04:	230a      	movs	r3, #10
 8019b06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019b08:	f107 0314 	add.w	r3, r7, #20
 8019b0c:	4619      	mov	r1, r3
 8019b0e:	481c      	ldr	r0, [pc, #112]	@ (8019b80 <HAL_PCD_MspInit+0xdc>)
 8019b10:	f7f0 f8ec 	bl	8009cec <HAL_GPIO_Init>
  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8019b14:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8019b18:	f04f 0300 	mov.w	r3, #0
 8019b1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8019b20:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8019b24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8019b28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8019b2c:	4618      	mov	r0, r3
 8019b2e:	f7f2 fd9f 	bl	800c670 <HAL_RCCEx_PeriphCLKConfig>
 8019b32:	4603      	mov	r3, r0
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d001      	beq.n	8019b3c <HAL_PCD_MspInit+0x98>
    {
      Error_Handler();
 8019b38:	f7e9 f91a 	bl	8002d70 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8019b3c:	f7f1 fdb8 	bl	800b6b0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8019b40:	4b0e      	ldr	r3, [pc, #56]	@ (8019b7c <HAL_PCD_MspInit+0xd8>)
 8019b42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8019b46:	4a0d      	ldr	r2, [pc, #52]	@ (8019b7c <HAL_PCD_MspInit+0xd8>)
 8019b48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8019b4c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8019b50:	4b0a      	ldr	r3, [pc, #40]	@ (8019b7c <HAL_PCD_MspInit+0xd8>)
 8019b52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8019b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8019b5a:	60fb      	str	r3, [r7, #12]
 8019b5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8019b5e:	2200      	movs	r2, #0
 8019b60:	2105      	movs	r1, #5
 8019b62:	204d      	movs	r0, #77	@ 0x4d
 8019b64:	f7ed fabb 	bl	80070de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8019b68:	204d      	movs	r0, #77	@ 0x4d
 8019b6a:	f7ed fad2 	bl	8007112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */
    // (Опционально) включить VBUS sensing, если линия VBUS заведена на соответствующий пин:
    // MODIFY_REG(USB_OTG_HS->GCCFG, 0, USB_OTG_GCCFG_VBDEN);
  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8019b6e:	bf00      	nop
 8019b70:	37e0      	adds	r7, #224	@ 0xe0
 8019b72:	46bd      	mov	sp, r7
 8019b74:	bd80      	pop	{r7, pc}
 8019b76:	bf00      	nop
 8019b78:	40040000 	.word	0x40040000
 8019b7c:	58024400 	.word	0x58024400
 8019b80:	58020000 	.word	0x58020000

08019b84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b082      	sub	sp, #8
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8019b98:	4619      	mov	r1, r3
 8019b9a:	4610      	mov	r0, r2
 8019b9c:	f7fa f953 	bl	8013e46 <USBD_LL_SetupStage>
}
 8019ba0:	bf00      	nop
 8019ba2:	3708      	adds	r7, #8
 8019ba4:	46bd      	mov	sp, r7
 8019ba6:	bd80      	pop	{r7, pc}

08019ba8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b082      	sub	sp, #8
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	6078      	str	r0, [r7, #4]
 8019bb0:	460b      	mov	r3, r1
 8019bb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8019bba:	78fa      	ldrb	r2, [r7, #3]
 8019bbc:	6879      	ldr	r1, [r7, #4]
 8019bbe:	4613      	mov	r3, r2
 8019bc0:	00db      	lsls	r3, r3, #3
 8019bc2:	4413      	add	r3, r2
 8019bc4:	009b      	lsls	r3, r3, #2
 8019bc6:	440b      	add	r3, r1
 8019bc8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8019bcc:	681a      	ldr	r2, [r3, #0]
 8019bce:	78fb      	ldrb	r3, [r7, #3]
 8019bd0:	4619      	mov	r1, r3
 8019bd2:	f7fa f98d 	bl	8013ef0 <USBD_LL_DataOutStage>
}
 8019bd6:	bf00      	nop
 8019bd8:	3708      	adds	r7, #8
 8019bda:	46bd      	mov	sp, r7
 8019bdc:	bd80      	pop	{r7, pc}

08019bde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019bde:	b580      	push	{r7, lr}
 8019be0:	b082      	sub	sp, #8
 8019be2:	af00      	add	r7, sp, #0
 8019be4:	6078      	str	r0, [r7, #4]
 8019be6:	460b      	mov	r3, r1
 8019be8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8019bf0:	78fa      	ldrb	r2, [r7, #3]
 8019bf2:	6879      	ldr	r1, [r7, #4]
 8019bf4:	4613      	mov	r3, r2
 8019bf6:	00db      	lsls	r3, r3, #3
 8019bf8:	4413      	add	r3, r2
 8019bfa:	009b      	lsls	r3, r3, #2
 8019bfc:	440b      	add	r3, r1
 8019bfe:	3320      	adds	r3, #32
 8019c00:	681a      	ldr	r2, [r3, #0]
 8019c02:	78fb      	ldrb	r3, [r7, #3]
 8019c04:	4619      	mov	r1, r3
 8019c06:	f7fa fa26 	bl	8014056 <USBD_LL_DataInStage>
}
 8019c0a:	bf00      	nop
 8019c0c:	3708      	adds	r7, #8
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	bd80      	pop	{r7, pc}
	...

08019c14 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b084      	sub	sp, #16
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019c22:	4618      	mov	r0, r3
 8019c24:	f7fa fb5f 	bl	80142e6 <USBD_LL_SOF>
  /* USER CODE BEGIN SOF_TS */
  /* Update last SOF timestamp (ms) for host presence detection */
  g_usb_last_sof_ms = HAL_GetTick();
 8019c28:	f7eb f94c 	bl	8004ec4 <HAL_GetTick>
 8019c2c:	4603      	mov	r3, r0
 8019c2e:	4a09      	ldr	r2, [pc, #36]	@ (8019c54 <HAL_PCD_SOFCallback+0x40>)
 8019c30:	6013      	str	r3, [r2, #0]
  /* Периодически проверяем таймаут отсутствия SOF (>1000мс) и сбрасываем метку для UI */
  uint32_t now = g_usb_last_sof_ms;
 8019c32:	4b08      	ldr	r3, [pc, #32]	@ (8019c54 <HAL_PCD_SOFCallback+0x40>)
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	60fb      	str	r3, [r7, #12]
  if(now - g_usb_last_poll_ms >= 250){
 8019c38:	4b07      	ldr	r3, [pc, #28]	@ (8019c58 <HAL_PCD_SOFCallback+0x44>)
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	68fa      	ldr	r2, [r7, #12]
 8019c3e:	1ad3      	subs	r3, r2, r3
 8019c40:	2bf9      	cmp	r3, #249	@ 0xf9
 8019c42:	d902      	bls.n	8019c4a <HAL_PCD_SOFCallback+0x36>
    g_usb_last_poll_ms = now;
 8019c44:	4a04      	ldr	r2, [pc, #16]	@ (8019c58 <HAL_PCD_SOFCallback+0x44>)
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SOF_TS */
}
 8019c4a:	bf00      	nop
 8019c4c:	3710      	adds	r7, #16
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	bd80      	pop	{r7, pc}
 8019c52:	bf00      	nop
 8019c54:	2401bcbc 	.word	0x2401bcbc
 8019c58:	2401bcc0 	.word	0x2401bcc0

08019c5c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c5c:	b580      	push	{r7, lr}
 8019c5e:	b084      	sub	sp, #16
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019c64:	2301      	movs	r3, #1
 8019c66:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	79db      	ldrb	r3, [r3, #7]
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d102      	bne.n	8019c76 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8019c70:	2300      	movs	r3, #0
 8019c72:	73fb      	strb	r3, [r7, #15]
 8019c74:	e008      	b.n	8019c88 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	79db      	ldrb	r3, [r3, #7]
 8019c7a:	2b02      	cmp	r3, #2
 8019c7c:	d102      	bne.n	8019c84 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8019c7e:	2301      	movs	r3, #1
 8019c80:	73fb      	strb	r3, [r7, #15]
 8019c82:	e001      	b.n	8019c88 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019c84:	f7e9 f874 	bl	8002d70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019c8e:	7bfa      	ldrb	r2, [r7, #15]
 8019c90:	4611      	mov	r1, r2
 8019c92:	4618      	mov	r0, r3
 8019c94:	f7fa fae3 	bl	801425e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	f7fa fa8b 	bl	80141ba <USBD_LL_Reset>
}
 8019ca4:	bf00      	nop
 8019ca6:	3710      	adds	r7, #16
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bd80      	pop	{r7, pc}

08019cac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019cac:	b580      	push	{r7, lr}
 8019cae:	b082      	sub	sp, #8
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019cba:	4618      	mov	r0, r3
 8019cbc:	f7fa fadf 	bl	801427e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	687a      	ldr	r2, [r7, #4]
 8019ccc:	6812      	ldr	r2, [r2, #0]
 8019cce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8019cd2:	f043 0301 	orr.w	r3, r3, #1
 8019cd6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	7adb      	ldrb	r3, [r3, #11]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d005      	beq.n	8019cec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019ce0:	4b04      	ldr	r3, [pc, #16]	@ (8019cf4 <HAL_PCD_SuspendCallback+0x48>)
 8019ce2:	691b      	ldr	r3, [r3, #16]
 8019ce4:	4a03      	ldr	r2, [pc, #12]	@ (8019cf4 <HAL_PCD_SuspendCallback+0x48>)
 8019ce6:	f043 0306 	orr.w	r3, r3, #6
 8019cea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019cec:	bf00      	nop
 8019cee:	3708      	adds	r7, #8
 8019cf0:	46bd      	mov	sp, r7
 8019cf2:	bd80      	pop	{r7, pc}
 8019cf4:	e000ed00 	.word	0xe000ed00

08019cf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b082      	sub	sp, #8
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019d06:	4618      	mov	r0, r3
 8019d08:	f7fa fad5 	bl	80142b6 <USBD_LL_Resume>
}
 8019d0c:	bf00      	nop
 8019d0e:	3708      	adds	r7, #8
 8019d10:	46bd      	mov	sp, r7
 8019d12:	bd80      	pop	{r7, pc}

08019d14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b082      	sub	sp, #8
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	6078      	str	r0, [r7, #4]
 8019d1c:	460b      	mov	r3, r1
 8019d1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019d26:	78fa      	ldrb	r2, [r7, #3]
 8019d28:	4611      	mov	r1, r2
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	f7fa fb2d 	bl	801438a <USBD_LL_IsoOUTIncomplete>
}
 8019d30:	bf00      	nop
 8019d32:	3708      	adds	r7, #8
 8019d34:	46bd      	mov	sp, r7
 8019d36:	bd80      	pop	{r7, pc}

08019d38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b082      	sub	sp, #8
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
 8019d40:	460b      	mov	r3, r1
 8019d42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019d4a:	78fa      	ldrb	r2, [r7, #3]
 8019d4c:	4611      	mov	r1, r2
 8019d4e:	4618      	mov	r0, r3
 8019d50:	f7fa fae9 	bl	8014326 <USBD_LL_IsoINIncomplete>
}
 8019d54:	bf00      	nop
 8019d56:	3708      	adds	r7, #8
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	bd80      	pop	{r7, pc}

08019d5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	b082      	sub	sp, #8
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019d6a:	4618      	mov	r0, r3
 8019d6c:	f7fa fb3f 	bl	80143ee <USBD_LL_DevConnected>
  /* USER CODE BEGIN CONNECT_EVT */
  g_usb_last_sof_ms = HAL_GetTick();
 8019d70:	f7eb f8a8 	bl	8004ec4 <HAL_GetTick>
 8019d74:	4603      	mov	r3, r0
 8019d76:	4a03      	ldr	r2, [pc, #12]	@ (8019d84 <HAL_PCD_ConnectCallback+0x28>)
 8019d78:	6013      	str	r3, [r2, #0]
  /* USER CODE END CONNECT_EVT */
}
 8019d7a:	bf00      	nop
 8019d7c:	3708      	adds	r7, #8
 8019d7e:	46bd      	mov	sp, r7
 8019d80:	bd80      	pop	{r7, pc}
 8019d82:	bf00      	nop
 8019d84:	2401bcbc 	.word	0x2401bcbc

08019d88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b082      	sub	sp, #8
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8019d96:	4618      	mov	r0, r3
 8019d98:	f7fa fb34 	bl	8014404 <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN DISCONNECT_EVT */
  /* On disconnect, clear the timestamp so UI can show USB:-- */
  g_usb_last_sof_ms = 0;
 8019d9c:	4b04      	ldr	r3, [pc, #16]	@ (8019db0 <HAL_PCD_DisconnectCallback+0x28>)
 8019d9e:	2200      	movs	r2, #0
 8019da0:	601a      	str	r2, [r3, #0]
  g_usb_last_poll_ms = 0;
 8019da2:	4b04      	ldr	r3, [pc, #16]	@ (8019db4 <HAL_PCD_DisconnectCallback+0x2c>)
 8019da4:	2200      	movs	r2, #0
 8019da6:	601a      	str	r2, [r3, #0]
  /* USER CODE END DISCONNECT_EVT */
}
 8019da8:	bf00      	nop
 8019daa:	3708      	adds	r7, #8
 8019dac:	46bd      	mov	sp, r7
 8019dae:	bd80      	pop	{r7, pc}
 8019db0:	2401bcbc 	.word	0x2401bcbc
 8019db4:	2401bcc0 	.word	0x2401bcc0

08019db8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019db8:	b580      	push	{r7, lr}
 8019dba:	b082      	sub	sp, #8
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	781b      	ldrb	r3, [r3, #0]
 8019dc4:	2b01      	cmp	r3, #1
 8019dc6:	d151      	bne.n	8019e6c <USBD_LL_Init+0xb4>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8019dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	4a29      	ldr	r2, [pc, #164]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019dd4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8019dd8:	4b27      	ldr	r3, [pc, #156]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019dda:	4a28      	ldr	r2, [pc, #160]	@ (8019e7c <USBD_LL_Init+0xc4>)
 8019ddc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8019dde:	4b26      	ldr	r3, [pc, #152]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019de0:	2209      	movs	r2, #9
 8019de2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8019de4:	4b24      	ldr	r3, [pc, #144]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019de6:	2202      	movs	r2, #2
 8019de8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8019dea:	4b23      	ldr	r3, [pc, #140]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019dec:	2200      	movs	r2, #0
 8019dee:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8019df0:	4b21      	ldr	r3, [pc, #132]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019df2:	2202      	movs	r2, #2
 8019df4:	725a      	strb	r2, [r3, #9]
  /* Включаем генерацию SOF, чтобы UI мог отслеживать активность хоста */
  hpcd_USB_OTG_HS.Init.Sof_enable = ENABLE;
 8019df6:	4b20      	ldr	r3, [pc, #128]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019df8:	2201      	movs	r2, #1
 8019dfa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8019dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019dfe:	2200      	movs	r2, #0
 8019e00:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8019e02:	4b1d      	ldr	r3, [pc, #116]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019e04:	2200      	movs	r2, #0
 8019e06:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE; /* VBUS sensing отключен, как в оригинале */
 8019e08:	4b1b      	ldr	r3, [pc, #108]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019e0a:	2200      	movs	r2, #0
 8019e0c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8019e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019e10:	2200      	movs	r2, #0
 8019e12:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8019e14:	4b18      	ldr	r3, [pc, #96]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019e16:	2200      	movs	r2, #0
 8019e18:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8019e1a:	4817      	ldr	r0, [pc, #92]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019e1c:	f7f0 f941 	bl	800a0a2 <HAL_PCD_Init>
 8019e20:	4603      	mov	r3, r0
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d001      	beq.n	8019e2a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8019e26:	f7e8 ffa3 	bl	8002d70 <Error_Handler>
  }

  /* Включаем pull-up для enumeration */
  MODIFY_REG(USB_OTG_HS->GCCFG, 0, USB_OTG_GCCFG_PWRDWN);
 8019e2a:	4b14      	ldr	r3, [pc, #80]	@ (8019e7c <USBD_LL_Init+0xc4>)
 8019e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019e2e:	4a13      	ldr	r2, [pc, #76]	@ (8019e7c <USBD_LL_Init+0xc4>)
 8019e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8019e34:	6393      	str	r3, [r2, #56]	@ 0x38
     TX1 (CDC IN)0x100 (256 words = 1024 bytes)
     TX2 (CDC CMD IN)0x40  (64 words = 256 bytes)
     TX3 (VND IN)0x100 (256 words = 1024 bytes)
     ИТОГО: 0x480 words = 4608 bytes (чуть больше 4KB, но STM32H7 USB OTG HS поддерживает)
  */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8019e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8019e3a:	480f      	ldr	r0, [pc, #60]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019e3c:	f7f1 fbbd 	bl	800b5ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x40);
 8019e40:	2240      	movs	r2, #64	@ 0x40
 8019e42:	2100      	movs	r1, #0
 8019e44:	480c      	ldr	r0, [pc, #48]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019e46:	f7f1 fb71 	bl	800b52c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x100);
 8019e4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019e4e:	2101      	movs	r1, #1
 8019e50:	4809      	ldr	r0, [pc, #36]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019e52:	f7f1 fb6b 	bl	800b52c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 2, 0x40);
 8019e56:	2240      	movs	r2, #64	@ 0x40
 8019e58:	2102      	movs	r1, #2
 8019e5a:	4807      	ldr	r0, [pc, #28]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019e5c:	f7f1 fb66 	bl	800b52c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 3, 0x100);
 8019e60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019e64:	2103      	movs	r1, #3
 8019e66:	4804      	ldr	r0, [pc, #16]	@ (8019e78 <USBD_LL_Init+0xc0>)
 8019e68:	f7f1 fb60 	bl	800b52c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8019e6c:	2300      	movs	r3, #0
}
 8019e6e:	4618      	mov	r0, r3
 8019e70:	3708      	adds	r7, #8
 8019e72:	46bd      	mov	sp, r7
 8019e74:	bd80      	pop	{r7, pc}
 8019e76:	bf00      	nop
 8019e78:	2401bcc4 	.word	0x2401bcc4
 8019e7c:	40040000 	.word	0x40040000

08019e80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019e80:	b580      	push	{r7, lr}
 8019e82:	b084      	sub	sp, #16
 8019e84:	af00      	add	r7, sp, #0
 8019e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019e88:	2300      	movs	r3, #0
 8019e8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e8c:	2300      	movs	r3, #0
 8019e8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019e96:	4618      	mov	r0, r3
 8019e98:	f7f0 fa0f 	bl	800a2ba <HAL_PCD_Start>
 8019e9c:	4603      	mov	r3, r0
 8019e9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019ea0:	7bfb      	ldrb	r3, [r7, #15]
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	f000 f962 	bl	801a16c <USBD_Get_USB_Status>
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019eac:	7bbb      	ldrb	r3, [r7, #14]
}
 8019eae:	4618      	mov	r0, r3
 8019eb0:	3710      	adds	r7, #16
 8019eb2:	46bd      	mov	sp, r7
 8019eb4:	bd80      	pop	{r7, pc}

08019eb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019eb6:	b580      	push	{r7, lr}
 8019eb8:	b084      	sub	sp, #16
 8019eba:	af00      	add	r7, sp, #0
 8019ebc:	6078      	str	r0, [r7, #4]
 8019ebe:	4608      	mov	r0, r1
 8019ec0:	4611      	mov	r1, r2
 8019ec2:	461a      	mov	r2, r3
 8019ec4:	4603      	mov	r3, r0
 8019ec6:	70fb      	strb	r3, [r7, #3]
 8019ec8:	460b      	mov	r3, r1
 8019eca:	70bb      	strb	r3, [r7, #2]
 8019ecc:	4613      	mov	r3, r2
 8019ece:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ed0:	2300      	movs	r3, #0
 8019ed2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ed4:	2300      	movs	r3, #0
 8019ed6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019ede:	78bb      	ldrb	r3, [r7, #2]
 8019ee0:	883a      	ldrh	r2, [r7, #0]
 8019ee2:	78f9      	ldrb	r1, [r7, #3]
 8019ee4:	f7f0 ff10 	bl	800ad08 <HAL_PCD_EP_Open>
 8019ee8:	4603      	mov	r3, r0
 8019eea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019eec:	7bfb      	ldrb	r3, [r7, #15]
 8019eee:	4618      	mov	r0, r3
 8019ef0:	f000 f93c 	bl	801a16c <USBD_Get_USB_Status>
 8019ef4:	4603      	mov	r3, r0
 8019ef6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019ef8:	7bbb      	ldrb	r3, [r7, #14]
}
 8019efa:	4618      	mov	r0, r3
 8019efc:	3710      	adds	r7, #16
 8019efe:	46bd      	mov	sp, r7
 8019f00:	bd80      	pop	{r7, pc}

08019f02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019f02:	b580      	push	{r7, lr}
 8019f04:	b084      	sub	sp, #16
 8019f06:	af00      	add	r7, sp, #0
 8019f08:	6078      	str	r0, [r7, #4]
 8019f0a:	460b      	mov	r3, r1
 8019f0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f0e:	2300      	movs	r3, #0
 8019f10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f12:	2300      	movs	r3, #0
 8019f14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019f1c:	78fa      	ldrb	r2, [r7, #3]
 8019f1e:	4611      	mov	r1, r2
 8019f20:	4618      	mov	r0, r3
 8019f22:	f7f0 ff5b 	bl	800addc <HAL_PCD_EP_Close>
 8019f26:	4603      	mov	r3, r0
 8019f28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f2a:	7bfb      	ldrb	r3, [r7, #15]
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	f000 f91d 	bl	801a16c <USBD_Get_USB_Status>
 8019f32:	4603      	mov	r3, r0
 8019f34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019f36:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f38:	4618      	mov	r0, r3
 8019f3a:	3710      	adds	r7, #16
 8019f3c:	46bd      	mov	sp, r7
 8019f3e:	bd80      	pop	{r7, pc}

08019f40 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b084      	sub	sp, #16
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	6078      	str	r0, [r7, #4]
 8019f48:	460b      	mov	r3, r1
 8019f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f4c:	2300      	movs	r3, #0
 8019f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f50:	2300      	movs	r3, #0
 8019f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019f5a:	78fa      	ldrb	r2, [r7, #3]
 8019f5c:	4611      	mov	r1, r2
 8019f5e:	4618      	mov	r0, r3
 8019f60:	f7f1 f8fd 	bl	800b15e <HAL_PCD_EP_Flush>
 8019f64:	4603      	mov	r3, r0
 8019f66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f68:	7bfb      	ldrb	r3, [r7, #15]
 8019f6a:	4618      	mov	r0, r3
 8019f6c:	f000 f8fe 	bl	801a16c <USBD_Get_USB_Status>
 8019f70:	4603      	mov	r3, r0
 8019f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f76:	4618      	mov	r0, r3
 8019f78:	3710      	adds	r7, #16
 8019f7a:	46bd      	mov	sp, r7
 8019f7c:	bd80      	pop	{r7, pc}

08019f7e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019f7e:	b580      	push	{r7, lr}
 8019f80:	b084      	sub	sp, #16
 8019f82:	af00      	add	r7, sp, #0
 8019f84:	6078      	str	r0, [r7, #4]
 8019f86:	460b      	mov	r3, r1
 8019f88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f8a:	2300      	movs	r3, #0
 8019f8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f8e:	2300      	movs	r3, #0
 8019f90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019f98:	78fa      	ldrb	r2, [r7, #3]
 8019f9a:	4611      	mov	r1, r2
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f7f0 fff4 	bl	800af8a <HAL_PCD_EP_SetStall>
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019fa6:	7bfb      	ldrb	r3, [r7, #15]
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f000 f8df 	bl	801a16c <USBD_Get_USB_Status>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019fb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	3710      	adds	r7, #16
 8019fb8:	46bd      	mov	sp, r7
 8019fba:	bd80      	pop	{r7, pc}

08019fbc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	b084      	sub	sp, #16
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	6078      	str	r0, [r7, #4]
 8019fc4:	460b      	mov	r3, r1
 8019fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019fc8:	2300      	movs	r3, #0
 8019fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fcc:	2300      	movs	r3, #0
 8019fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019fd6:	78fa      	ldrb	r2, [r7, #3]
 8019fd8:	4611      	mov	r1, r2
 8019fda:	4618      	mov	r0, r3
 8019fdc:	f7f1 f838 	bl	800b050 <HAL_PCD_EP_ClrStall>
 8019fe0:	4603      	mov	r3, r0
 8019fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019fe4:	7bfb      	ldrb	r3, [r7, #15]
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	f000 f8c0 	bl	801a16c <USBD_Get_USB_Status>
 8019fec:	4603      	mov	r3, r0
 8019fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	3710      	adds	r7, #16
 8019ff6:	46bd      	mov	sp, r7
 8019ff8:	bd80      	pop	{r7, pc}

08019ffa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019ffa:	b480      	push	{r7}
 8019ffc:	b085      	sub	sp, #20
 8019ffe:	af00      	add	r7, sp, #0
 801a000:	6078      	str	r0, [r7, #4]
 801a002:	460b      	mov	r3, r1
 801a004:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a00c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a00e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a012:	2b00      	cmp	r3, #0
 801a014:	da0b      	bge.n	801a02e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a016:	78fb      	ldrb	r3, [r7, #3]
 801a018:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a01c:	68f9      	ldr	r1, [r7, #12]
 801a01e:	4613      	mov	r3, r2
 801a020:	00db      	lsls	r3, r3, #3
 801a022:	4413      	add	r3, r2
 801a024:	009b      	lsls	r3, r3, #2
 801a026:	440b      	add	r3, r1
 801a028:	3316      	adds	r3, #22
 801a02a:	781b      	ldrb	r3, [r3, #0]
 801a02c:	e00b      	b.n	801a046 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a02e:	78fb      	ldrb	r3, [r7, #3]
 801a030:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a034:	68f9      	ldr	r1, [r7, #12]
 801a036:	4613      	mov	r3, r2
 801a038:	00db      	lsls	r3, r3, #3
 801a03a:	4413      	add	r3, r2
 801a03c:	009b      	lsls	r3, r3, #2
 801a03e:	440b      	add	r3, r1
 801a040:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801a044:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a046:	4618      	mov	r0, r3
 801a048:	3714      	adds	r7, #20
 801a04a:	46bd      	mov	sp, r7
 801a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a050:	4770      	bx	lr

0801a052 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a052:	b580      	push	{r7, lr}
 801a054:	b084      	sub	sp, #16
 801a056:	af00      	add	r7, sp, #0
 801a058:	6078      	str	r0, [r7, #4]
 801a05a:	460b      	mov	r3, r1
 801a05c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a05e:	2300      	movs	r3, #0
 801a060:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a062:	2300      	movs	r3, #0
 801a064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a06c:	78fa      	ldrb	r2, [r7, #3]
 801a06e:	4611      	mov	r1, r2
 801a070:	4618      	mov	r0, r3
 801a072:	f7f0 fe25 	bl	800acc0 <HAL_PCD_SetAddress>
 801a076:	4603      	mov	r3, r0
 801a078:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a07a:	7bfb      	ldrb	r3, [r7, #15]
 801a07c:	4618      	mov	r0, r3
 801a07e:	f000 f875 	bl	801a16c <USBD_Get_USB_Status>
 801a082:	4603      	mov	r3, r0
 801a084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a086:	7bbb      	ldrb	r3, [r7, #14]
}
 801a088:	4618      	mov	r0, r3
 801a08a:	3710      	adds	r7, #16
 801a08c:	46bd      	mov	sp, r7
 801a08e:	bd80      	pop	{r7, pc}

0801a090 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a090:	b580      	push	{r7, lr}
 801a092:	b086      	sub	sp, #24
 801a094:	af00      	add	r7, sp, #0
 801a096:	60f8      	str	r0, [r7, #12]
 801a098:	607a      	str	r2, [r7, #4]
 801a09a:	603b      	str	r3, [r7, #0]
 801a09c:	460b      	mov	r3, r1
 801a09e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a0a4:	2300      	movs	r3, #0
 801a0a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a0a8:	68fb      	ldr	r3, [r7, #12]
 801a0aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a0ae:	7af9      	ldrb	r1, [r7, #11]
 801a0b0:	683b      	ldr	r3, [r7, #0]
 801a0b2:	687a      	ldr	r2, [r7, #4]
 801a0b4:	f7f0 ff2f 	bl	800af16 <HAL_PCD_EP_Transmit>
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a0bc:	7dfb      	ldrb	r3, [r7, #23]
 801a0be:	4618      	mov	r0, r3
 801a0c0:	f000 f854 	bl	801a16c <USBD_Get_USB_Status>
 801a0c4:	4603      	mov	r3, r0
 801a0c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a0c8:	7dbb      	ldrb	r3, [r7, #22]
}
 801a0ca:	4618      	mov	r0, r3
 801a0cc:	3718      	adds	r7, #24
 801a0ce:	46bd      	mov	sp, r7
 801a0d0:	bd80      	pop	{r7, pc}

0801a0d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a0d2:	b580      	push	{r7, lr}
 801a0d4:	b086      	sub	sp, #24
 801a0d6:	af00      	add	r7, sp, #0
 801a0d8:	60f8      	str	r0, [r7, #12]
 801a0da:	607a      	str	r2, [r7, #4]
 801a0dc:	603b      	str	r3, [r7, #0]
 801a0de:	460b      	mov	r3, r1
 801a0e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a0f0:	7af9      	ldrb	r1, [r7, #11]
 801a0f2:	683b      	ldr	r3, [r7, #0]
 801a0f4:	687a      	ldr	r2, [r7, #4]
 801a0f6:	f7f0 febb 	bl	800ae70 <HAL_PCD_EP_Receive>
 801a0fa:	4603      	mov	r3, r0
 801a0fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a0fe:	7dfb      	ldrb	r3, [r7, #23]
 801a100:	4618      	mov	r0, r3
 801a102:	f000 f833 	bl	801a16c <USBD_Get_USB_Status>
 801a106:	4603      	mov	r3, r0
 801a108:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a10a:	7dbb      	ldrb	r3, [r7, #22]
}
 801a10c:	4618      	mov	r0, r3
 801a10e:	3718      	adds	r7, #24
 801a110:	46bd      	mov	sp, r7
 801a112:	bd80      	pop	{r7, pc}

0801a114 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a114:	b580      	push	{r7, lr}
 801a116:	b082      	sub	sp, #8
 801a118:	af00      	add	r7, sp, #0
 801a11a:	6078      	str	r0, [r7, #4]
 801a11c:	460b      	mov	r3, r1
 801a11e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a126:	78fa      	ldrb	r2, [r7, #3]
 801a128:	4611      	mov	r1, r2
 801a12a:	4618      	mov	r0, r3
 801a12c:	f7f0 fedb 	bl	800aee6 <HAL_PCD_EP_GetRxCount>
 801a130:	4603      	mov	r3, r0
}
 801a132:	4618      	mov	r0, r3
 801a134:	3708      	adds	r7, #8
 801a136:	46bd      	mov	sp, r7
 801a138:	bd80      	pop	{r7, pc}
	...

0801a13c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a13c:	b480      	push	{r7}
 801a13e:	b083      	sub	sp, #12
 801a140:	af00      	add	r7, sp, #0
 801a142:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a144:	4b03      	ldr	r3, [pc, #12]	@ (801a154 <USBD_static_malloc+0x18>)
}
 801a146:	4618      	mov	r0, r3
 801a148:	370c      	adds	r7, #12
 801a14a:	46bd      	mov	sp, r7
 801a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a150:	4770      	bx	lr
 801a152:	bf00      	nop
 801a154:	2401c1a8 	.word	0x2401c1a8

0801a158 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a158:	b480      	push	{r7}
 801a15a:	b083      	sub	sp, #12
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801a160:	bf00      	nop
 801a162:	370c      	adds	r7, #12
 801a164:	46bd      	mov	sp, r7
 801a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a16a:	4770      	bx	lr

0801a16c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a16c:	b480      	push	{r7}
 801a16e:	b085      	sub	sp, #20
 801a170:	af00      	add	r7, sp, #0
 801a172:	4603      	mov	r3, r0
 801a174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a176:	2300      	movs	r3, #0
 801a178:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a17a:	79fb      	ldrb	r3, [r7, #7]
 801a17c:	2b03      	cmp	r3, #3
 801a17e:	d817      	bhi.n	801a1b0 <USBD_Get_USB_Status+0x44>
 801a180:	a201      	add	r2, pc, #4	@ (adr r2, 801a188 <USBD_Get_USB_Status+0x1c>)
 801a182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a186:	bf00      	nop
 801a188:	0801a199 	.word	0x0801a199
 801a18c:	0801a19f 	.word	0x0801a19f
 801a190:	0801a1a5 	.word	0x0801a1a5
 801a194:	0801a1ab 	.word	0x0801a1ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a198:	2300      	movs	r3, #0
 801a19a:	73fb      	strb	r3, [r7, #15]
    break;
 801a19c:	e00b      	b.n	801a1b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a19e:	2303      	movs	r3, #3
 801a1a0:	73fb      	strb	r3, [r7, #15]
    break;
 801a1a2:	e008      	b.n	801a1b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a1a4:	2301      	movs	r3, #1
 801a1a6:	73fb      	strb	r3, [r7, #15]
    break;
 801a1a8:	e005      	b.n	801a1b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a1aa:	2303      	movs	r3, #3
 801a1ac:	73fb      	strb	r3, [r7, #15]
    break;
 801a1ae:	e002      	b.n	801a1b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a1b0:	2303      	movs	r3, #3
 801a1b2:	73fb      	strb	r3, [r7, #15]
    break;
 801a1b4:	bf00      	nop
  }
  return usb_status;
 801a1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	3714      	adds	r7, #20
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c2:	4770      	bx	lr

0801a1c4 <std>:
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	b510      	push	{r4, lr}
 801a1c8:	4604      	mov	r4, r0
 801a1ca:	e9c0 3300 	strd	r3, r3, [r0]
 801a1ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a1d2:	6083      	str	r3, [r0, #8]
 801a1d4:	8181      	strh	r1, [r0, #12]
 801a1d6:	6643      	str	r3, [r0, #100]	@ 0x64
 801a1d8:	81c2      	strh	r2, [r0, #14]
 801a1da:	6183      	str	r3, [r0, #24]
 801a1dc:	4619      	mov	r1, r3
 801a1de:	2208      	movs	r2, #8
 801a1e0:	305c      	adds	r0, #92	@ 0x5c
 801a1e2:	f000 fb1f 	bl	801a824 <memset>
 801a1e6:	4b0d      	ldr	r3, [pc, #52]	@ (801a21c <std+0x58>)
 801a1e8:	6263      	str	r3, [r4, #36]	@ 0x24
 801a1ea:	4b0d      	ldr	r3, [pc, #52]	@ (801a220 <std+0x5c>)
 801a1ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a1ee:	4b0d      	ldr	r3, [pc, #52]	@ (801a224 <std+0x60>)
 801a1f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a1f2:	4b0d      	ldr	r3, [pc, #52]	@ (801a228 <std+0x64>)
 801a1f4:	6323      	str	r3, [r4, #48]	@ 0x30
 801a1f6:	4b0d      	ldr	r3, [pc, #52]	@ (801a22c <std+0x68>)
 801a1f8:	6224      	str	r4, [r4, #32]
 801a1fa:	429c      	cmp	r4, r3
 801a1fc:	d006      	beq.n	801a20c <std+0x48>
 801a1fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a202:	4294      	cmp	r4, r2
 801a204:	d002      	beq.n	801a20c <std+0x48>
 801a206:	33d0      	adds	r3, #208	@ 0xd0
 801a208:	429c      	cmp	r4, r3
 801a20a:	d105      	bne.n	801a218 <std+0x54>
 801a20c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a214:	f000 bba4 	b.w	801a960 <__retarget_lock_init_recursive>
 801a218:	bd10      	pop	{r4, pc}
 801a21a:	bf00      	nop
 801a21c:	0801a601 	.word	0x0801a601
 801a220:	0801a623 	.word	0x0801a623
 801a224:	0801a65b 	.word	0x0801a65b
 801a228:	0801a681 	.word	0x0801a681
 801a22c:	2401c3c8 	.word	0x2401c3c8

0801a230 <stdio_exit_handler>:
 801a230:	4a02      	ldr	r2, [pc, #8]	@ (801a23c <stdio_exit_handler+0xc>)
 801a232:	4903      	ldr	r1, [pc, #12]	@ (801a240 <stdio_exit_handler+0x10>)
 801a234:	4803      	ldr	r0, [pc, #12]	@ (801a244 <stdio_exit_handler+0x14>)
 801a236:	f000 b86b 	b.w	801a310 <_fwalk_sglue>
 801a23a:	bf00      	nop
 801a23c:	24000248 	.word	0x24000248
 801a240:	0801b4e1 	.word	0x0801b4e1
 801a244:	24000258 	.word	0x24000258

0801a248 <cleanup_stdio>:
 801a248:	6841      	ldr	r1, [r0, #4]
 801a24a:	4b0c      	ldr	r3, [pc, #48]	@ (801a27c <cleanup_stdio+0x34>)
 801a24c:	4299      	cmp	r1, r3
 801a24e:	b510      	push	{r4, lr}
 801a250:	4604      	mov	r4, r0
 801a252:	d001      	beq.n	801a258 <cleanup_stdio+0x10>
 801a254:	f001 f944 	bl	801b4e0 <_fflush_r>
 801a258:	68a1      	ldr	r1, [r4, #8]
 801a25a:	4b09      	ldr	r3, [pc, #36]	@ (801a280 <cleanup_stdio+0x38>)
 801a25c:	4299      	cmp	r1, r3
 801a25e:	d002      	beq.n	801a266 <cleanup_stdio+0x1e>
 801a260:	4620      	mov	r0, r4
 801a262:	f001 f93d 	bl	801b4e0 <_fflush_r>
 801a266:	68e1      	ldr	r1, [r4, #12]
 801a268:	4b06      	ldr	r3, [pc, #24]	@ (801a284 <cleanup_stdio+0x3c>)
 801a26a:	4299      	cmp	r1, r3
 801a26c:	d004      	beq.n	801a278 <cleanup_stdio+0x30>
 801a26e:	4620      	mov	r0, r4
 801a270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a274:	f001 b934 	b.w	801b4e0 <_fflush_r>
 801a278:	bd10      	pop	{r4, pc}
 801a27a:	bf00      	nop
 801a27c:	2401c3c8 	.word	0x2401c3c8
 801a280:	2401c430 	.word	0x2401c430
 801a284:	2401c498 	.word	0x2401c498

0801a288 <global_stdio_init.part.0>:
 801a288:	4b0c      	ldr	r3, [pc, #48]	@ (801a2bc <global_stdio_init.part.0+0x34>)
 801a28a:	4a0d      	ldr	r2, [pc, #52]	@ (801a2c0 <global_stdio_init.part.0+0x38>)
 801a28c:	480d      	ldr	r0, [pc, #52]	@ (801a2c4 <global_stdio_init.part.0+0x3c>)
 801a28e:	b510      	push	{r4, lr}
 801a290:	2104      	movs	r1, #4
 801a292:	601a      	str	r2, [r3, #0]
 801a294:	2200      	movs	r2, #0
 801a296:	f7ff ff95 	bl	801a1c4 <std>
 801a29a:	4b0a      	ldr	r3, [pc, #40]	@ (801a2c4 <global_stdio_init.part.0+0x3c>)
 801a29c:	2201      	movs	r2, #1
 801a29e:	461c      	mov	r4, r3
 801a2a0:	2109      	movs	r1, #9
 801a2a2:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 801a2a6:	f7ff ff8d 	bl	801a1c4 <std>
 801a2aa:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a2ae:	2202      	movs	r2, #2
 801a2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2b4:	2112      	movs	r1, #18
 801a2b6:	f7ff bf85 	b.w	801a1c4 <std>
 801a2ba:	bf00      	nop
 801a2bc:	2401c500 	.word	0x2401c500
 801a2c0:	0801a231 	.word	0x0801a231
 801a2c4:	2401c3c8 	.word	0x2401c3c8

0801a2c8 <__sfp_lock_acquire>:
 801a2c8:	4801      	ldr	r0, [pc, #4]	@ (801a2d0 <__sfp_lock_acquire+0x8>)
 801a2ca:	f000 bb4a 	b.w	801a962 <__retarget_lock_acquire_recursive>
 801a2ce:	bf00      	nop
 801a2d0:	2401c509 	.word	0x2401c509

0801a2d4 <__sfp_lock_release>:
 801a2d4:	4801      	ldr	r0, [pc, #4]	@ (801a2dc <__sfp_lock_release+0x8>)
 801a2d6:	f000 bb45 	b.w	801a964 <__retarget_lock_release_recursive>
 801a2da:	bf00      	nop
 801a2dc:	2401c509 	.word	0x2401c509

0801a2e0 <__sinit>:
 801a2e0:	b510      	push	{r4, lr}
 801a2e2:	4604      	mov	r4, r0
 801a2e4:	f7ff fff0 	bl	801a2c8 <__sfp_lock_acquire>
 801a2e8:	6a23      	ldr	r3, [r4, #32]
 801a2ea:	b11b      	cbz	r3, 801a2f4 <__sinit+0x14>
 801a2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2f0:	f7ff bff0 	b.w	801a2d4 <__sfp_lock_release>
 801a2f4:	4b04      	ldr	r3, [pc, #16]	@ (801a308 <__sinit+0x28>)
 801a2f6:	6223      	str	r3, [r4, #32]
 801a2f8:	4b04      	ldr	r3, [pc, #16]	@ (801a30c <__sinit+0x2c>)
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d1f5      	bne.n	801a2ec <__sinit+0xc>
 801a300:	f7ff ffc2 	bl	801a288 <global_stdio_init.part.0>
 801a304:	e7f2      	b.n	801a2ec <__sinit+0xc>
 801a306:	bf00      	nop
 801a308:	0801a249 	.word	0x0801a249
 801a30c:	2401c500 	.word	0x2401c500

0801a310 <_fwalk_sglue>:
 801a310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a314:	4607      	mov	r7, r0
 801a316:	4688      	mov	r8, r1
 801a318:	4614      	mov	r4, r2
 801a31a:	2600      	movs	r6, #0
 801a31c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a320:	f1b9 0901 	subs.w	r9, r9, #1
 801a324:	d505      	bpl.n	801a332 <_fwalk_sglue+0x22>
 801a326:	6824      	ldr	r4, [r4, #0]
 801a328:	2c00      	cmp	r4, #0
 801a32a:	d1f7      	bne.n	801a31c <_fwalk_sglue+0xc>
 801a32c:	4630      	mov	r0, r6
 801a32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a332:	89ab      	ldrh	r3, [r5, #12]
 801a334:	2b01      	cmp	r3, #1
 801a336:	d907      	bls.n	801a348 <_fwalk_sglue+0x38>
 801a338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a33c:	3301      	adds	r3, #1
 801a33e:	d003      	beq.n	801a348 <_fwalk_sglue+0x38>
 801a340:	4629      	mov	r1, r5
 801a342:	4638      	mov	r0, r7
 801a344:	47c0      	blx	r8
 801a346:	4306      	orrs	r6, r0
 801a348:	3568      	adds	r5, #104	@ 0x68
 801a34a:	e7e9      	b.n	801a320 <_fwalk_sglue+0x10>

0801a34c <iprintf>:
 801a34c:	b40f      	push	{r0, r1, r2, r3}
 801a34e:	b507      	push	{r0, r1, r2, lr}
 801a350:	4906      	ldr	r1, [pc, #24]	@ (801a36c <iprintf+0x20>)
 801a352:	ab04      	add	r3, sp, #16
 801a354:	6808      	ldr	r0, [r1, #0]
 801a356:	f853 2b04 	ldr.w	r2, [r3], #4
 801a35a:	6881      	ldr	r1, [r0, #8]
 801a35c:	9301      	str	r3, [sp, #4]
 801a35e:	f000 fd97 	bl	801ae90 <_vfiprintf_r>
 801a362:	b003      	add	sp, #12
 801a364:	f85d eb04 	ldr.w	lr, [sp], #4
 801a368:	b004      	add	sp, #16
 801a36a:	4770      	bx	lr
 801a36c:	24000254 	.word	0x24000254

0801a370 <_puts_r>:
 801a370:	6a03      	ldr	r3, [r0, #32]
 801a372:	b570      	push	{r4, r5, r6, lr}
 801a374:	6884      	ldr	r4, [r0, #8]
 801a376:	4605      	mov	r5, r0
 801a378:	460e      	mov	r6, r1
 801a37a:	b90b      	cbnz	r3, 801a380 <_puts_r+0x10>
 801a37c:	f7ff ffb0 	bl	801a2e0 <__sinit>
 801a380:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a382:	07db      	lsls	r3, r3, #31
 801a384:	d405      	bmi.n	801a392 <_puts_r+0x22>
 801a386:	89a3      	ldrh	r3, [r4, #12]
 801a388:	0598      	lsls	r0, r3, #22
 801a38a:	d402      	bmi.n	801a392 <_puts_r+0x22>
 801a38c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a38e:	f000 fae8 	bl	801a962 <__retarget_lock_acquire_recursive>
 801a392:	89a3      	ldrh	r3, [r4, #12]
 801a394:	0719      	lsls	r1, r3, #28
 801a396:	d502      	bpl.n	801a39e <_puts_r+0x2e>
 801a398:	6923      	ldr	r3, [r4, #16]
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d135      	bne.n	801a40a <_puts_r+0x9a>
 801a39e:	4621      	mov	r1, r4
 801a3a0:	4628      	mov	r0, r5
 801a3a2:	f000 f9eb 	bl	801a77c <__swsetup_r>
 801a3a6:	b380      	cbz	r0, 801a40a <_puts_r+0x9a>
 801a3a8:	f04f 35ff 	mov.w	r5, #4294967295
 801a3ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a3ae:	07da      	lsls	r2, r3, #31
 801a3b0:	d405      	bmi.n	801a3be <_puts_r+0x4e>
 801a3b2:	89a3      	ldrh	r3, [r4, #12]
 801a3b4:	059b      	lsls	r3, r3, #22
 801a3b6:	d402      	bmi.n	801a3be <_puts_r+0x4e>
 801a3b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a3ba:	f000 fad3 	bl	801a964 <__retarget_lock_release_recursive>
 801a3be:	4628      	mov	r0, r5
 801a3c0:	bd70      	pop	{r4, r5, r6, pc}
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	da04      	bge.n	801a3d0 <_puts_r+0x60>
 801a3c6:	69a2      	ldr	r2, [r4, #24]
 801a3c8:	4293      	cmp	r3, r2
 801a3ca:	db17      	blt.n	801a3fc <_puts_r+0x8c>
 801a3cc:	290a      	cmp	r1, #10
 801a3ce:	d015      	beq.n	801a3fc <_puts_r+0x8c>
 801a3d0:	6823      	ldr	r3, [r4, #0]
 801a3d2:	1c5a      	adds	r2, r3, #1
 801a3d4:	6022      	str	r2, [r4, #0]
 801a3d6:	7019      	strb	r1, [r3, #0]
 801a3d8:	68a3      	ldr	r3, [r4, #8]
 801a3da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a3de:	3b01      	subs	r3, #1
 801a3e0:	60a3      	str	r3, [r4, #8]
 801a3e2:	2900      	cmp	r1, #0
 801a3e4:	d1ed      	bne.n	801a3c2 <_puts_r+0x52>
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	da11      	bge.n	801a40e <_puts_r+0x9e>
 801a3ea:	4622      	mov	r2, r4
 801a3ec:	210a      	movs	r1, #10
 801a3ee:	4628      	mov	r0, r5
 801a3f0:	f000 f986 	bl	801a700 <__swbuf_r>
 801a3f4:	3001      	adds	r0, #1
 801a3f6:	d0d7      	beq.n	801a3a8 <_puts_r+0x38>
 801a3f8:	250a      	movs	r5, #10
 801a3fa:	e7d7      	b.n	801a3ac <_puts_r+0x3c>
 801a3fc:	4622      	mov	r2, r4
 801a3fe:	4628      	mov	r0, r5
 801a400:	f000 f97e 	bl	801a700 <__swbuf_r>
 801a404:	3001      	adds	r0, #1
 801a406:	d1e7      	bne.n	801a3d8 <_puts_r+0x68>
 801a408:	e7ce      	b.n	801a3a8 <_puts_r+0x38>
 801a40a:	3e01      	subs	r6, #1
 801a40c:	e7e4      	b.n	801a3d8 <_puts_r+0x68>
 801a40e:	6823      	ldr	r3, [r4, #0]
 801a410:	1c5a      	adds	r2, r3, #1
 801a412:	6022      	str	r2, [r4, #0]
 801a414:	220a      	movs	r2, #10
 801a416:	701a      	strb	r2, [r3, #0]
 801a418:	e7ee      	b.n	801a3f8 <_puts_r+0x88>
	...

0801a41c <puts>:
 801a41c:	4b02      	ldr	r3, [pc, #8]	@ (801a428 <puts+0xc>)
 801a41e:	4601      	mov	r1, r0
 801a420:	6818      	ldr	r0, [r3, #0]
 801a422:	f7ff bfa5 	b.w	801a370 <_puts_r>
 801a426:	bf00      	nop
 801a428:	24000254 	.word	0x24000254

0801a42c <setvbuf>:
 801a42c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a430:	461d      	mov	r5, r3
 801a432:	4b57      	ldr	r3, [pc, #348]	@ (801a590 <setvbuf+0x164>)
 801a434:	681f      	ldr	r7, [r3, #0]
 801a436:	4604      	mov	r4, r0
 801a438:	460e      	mov	r6, r1
 801a43a:	4690      	mov	r8, r2
 801a43c:	b127      	cbz	r7, 801a448 <setvbuf+0x1c>
 801a43e:	6a3b      	ldr	r3, [r7, #32]
 801a440:	b913      	cbnz	r3, 801a448 <setvbuf+0x1c>
 801a442:	4638      	mov	r0, r7
 801a444:	f7ff ff4c 	bl	801a2e0 <__sinit>
 801a448:	f1b8 0f02 	cmp.w	r8, #2
 801a44c:	d006      	beq.n	801a45c <setvbuf+0x30>
 801a44e:	f1b8 0f01 	cmp.w	r8, #1
 801a452:	f200 809a 	bhi.w	801a58a <setvbuf+0x15e>
 801a456:	2d00      	cmp	r5, #0
 801a458:	f2c0 8097 	blt.w	801a58a <setvbuf+0x15e>
 801a45c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a45e:	07d9      	lsls	r1, r3, #31
 801a460:	d405      	bmi.n	801a46e <setvbuf+0x42>
 801a462:	89a3      	ldrh	r3, [r4, #12]
 801a464:	059a      	lsls	r2, r3, #22
 801a466:	d402      	bmi.n	801a46e <setvbuf+0x42>
 801a468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a46a:	f000 fa7a 	bl	801a962 <__retarget_lock_acquire_recursive>
 801a46e:	4621      	mov	r1, r4
 801a470:	4638      	mov	r0, r7
 801a472:	f001 f835 	bl	801b4e0 <_fflush_r>
 801a476:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a478:	b141      	cbz	r1, 801a48c <setvbuf+0x60>
 801a47a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a47e:	4299      	cmp	r1, r3
 801a480:	d002      	beq.n	801a488 <setvbuf+0x5c>
 801a482:	4638      	mov	r0, r7
 801a484:	f000 fa7e 	bl	801a984 <_free_r>
 801a488:	2300      	movs	r3, #0
 801a48a:	6363      	str	r3, [r4, #52]	@ 0x34
 801a48c:	2300      	movs	r3, #0
 801a48e:	61a3      	str	r3, [r4, #24]
 801a490:	6063      	str	r3, [r4, #4]
 801a492:	89a3      	ldrh	r3, [r4, #12]
 801a494:	061b      	lsls	r3, r3, #24
 801a496:	d503      	bpl.n	801a4a0 <setvbuf+0x74>
 801a498:	6921      	ldr	r1, [r4, #16]
 801a49a:	4638      	mov	r0, r7
 801a49c:	f000 fa72 	bl	801a984 <_free_r>
 801a4a0:	89a3      	ldrh	r3, [r4, #12]
 801a4a2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 801a4a6:	f023 0303 	bic.w	r3, r3, #3
 801a4aa:	f1b8 0f02 	cmp.w	r8, #2
 801a4ae:	81a3      	strh	r3, [r4, #12]
 801a4b0:	d061      	beq.n	801a576 <setvbuf+0x14a>
 801a4b2:	ab01      	add	r3, sp, #4
 801a4b4:	466a      	mov	r2, sp
 801a4b6:	4621      	mov	r1, r4
 801a4b8:	4638      	mov	r0, r7
 801a4ba:	f001 f839 	bl	801b530 <__swhatbuf_r>
 801a4be:	89a3      	ldrh	r3, [r4, #12]
 801a4c0:	4318      	orrs	r0, r3
 801a4c2:	81a0      	strh	r0, [r4, #12]
 801a4c4:	bb2d      	cbnz	r5, 801a512 <setvbuf+0xe6>
 801a4c6:	9d00      	ldr	r5, [sp, #0]
 801a4c8:	4628      	mov	r0, r5
 801a4ca:	f000 faa5 	bl	801aa18 <malloc>
 801a4ce:	4606      	mov	r6, r0
 801a4d0:	2800      	cmp	r0, #0
 801a4d2:	d152      	bne.n	801a57a <setvbuf+0x14e>
 801a4d4:	f8dd 9000 	ldr.w	r9, [sp]
 801a4d8:	45a9      	cmp	r9, r5
 801a4da:	d140      	bne.n	801a55e <setvbuf+0x132>
 801a4dc:	f04f 35ff 	mov.w	r5, #4294967295
 801a4e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4e4:	f043 0202 	orr.w	r2, r3, #2
 801a4e8:	81a2      	strh	r2, [r4, #12]
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	60a2      	str	r2, [r4, #8]
 801a4ee:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 801a4f2:	6022      	str	r2, [r4, #0]
 801a4f4:	6122      	str	r2, [r4, #16]
 801a4f6:	2201      	movs	r2, #1
 801a4f8:	6162      	str	r2, [r4, #20]
 801a4fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a4fc:	07d6      	lsls	r6, r2, #31
 801a4fe:	d404      	bmi.n	801a50a <setvbuf+0xde>
 801a500:	0598      	lsls	r0, r3, #22
 801a502:	d402      	bmi.n	801a50a <setvbuf+0xde>
 801a504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a506:	f000 fa2d 	bl	801a964 <__retarget_lock_release_recursive>
 801a50a:	4628      	mov	r0, r5
 801a50c:	b003      	add	sp, #12
 801a50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a512:	2e00      	cmp	r6, #0
 801a514:	d0d8      	beq.n	801a4c8 <setvbuf+0x9c>
 801a516:	6a3b      	ldr	r3, [r7, #32]
 801a518:	b913      	cbnz	r3, 801a520 <setvbuf+0xf4>
 801a51a:	4638      	mov	r0, r7
 801a51c:	f7ff fee0 	bl	801a2e0 <__sinit>
 801a520:	f1b8 0f01 	cmp.w	r8, #1
 801a524:	bf08      	it	eq
 801a526:	89a3      	ldrheq	r3, [r4, #12]
 801a528:	6026      	str	r6, [r4, #0]
 801a52a:	bf04      	itt	eq
 801a52c:	f043 0301 	orreq.w	r3, r3, #1
 801a530:	81a3      	strheq	r3, [r4, #12]
 801a532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a536:	f013 0208 	ands.w	r2, r3, #8
 801a53a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801a53e:	d01e      	beq.n	801a57e <setvbuf+0x152>
 801a540:	07d9      	lsls	r1, r3, #31
 801a542:	bf41      	itttt	mi
 801a544:	2200      	movmi	r2, #0
 801a546:	426d      	negmi	r5, r5
 801a548:	60a2      	strmi	r2, [r4, #8]
 801a54a:	61a5      	strmi	r5, [r4, #24]
 801a54c:	bf58      	it	pl
 801a54e:	60a5      	strpl	r5, [r4, #8]
 801a550:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a552:	07d2      	lsls	r2, r2, #31
 801a554:	d401      	bmi.n	801a55a <setvbuf+0x12e>
 801a556:	059b      	lsls	r3, r3, #22
 801a558:	d513      	bpl.n	801a582 <setvbuf+0x156>
 801a55a:	2500      	movs	r5, #0
 801a55c:	e7d5      	b.n	801a50a <setvbuf+0xde>
 801a55e:	4648      	mov	r0, r9
 801a560:	f000 fa5a 	bl	801aa18 <malloc>
 801a564:	4606      	mov	r6, r0
 801a566:	2800      	cmp	r0, #0
 801a568:	d0b8      	beq.n	801a4dc <setvbuf+0xb0>
 801a56a:	89a3      	ldrh	r3, [r4, #12]
 801a56c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a570:	81a3      	strh	r3, [r4, #12]
 801a572:	464d      	mov	r5, r9
 801a574:	e7cf      	b.n	801a516 <setvbuf+0xea>
 801a576:	2500      	movs	r5, #0
 801a578:	e7b2      	b.n	801a4e0 <setvbuf+0xb4>
 801a57a:	46a9      	mov	r9, r5
 801a57c:	e7f5      	b.n	801a56a <setvbuf+0x13e>
 801a57e:	60a2      	str	r2, [r4, #8]
 801a580:	e7e6      	b.n	801a550 <setvbuf+0x124>
 801a582:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a584:	f000 f9ee 	bl	801a964 <__retarget_lock_release_recursive>
 801a588:	e7e7      	b.n	801a55a <setvbuf+0x12e>
 801a58a:	f04f 35ff 	mov.w	r5, #4294967295
 801a58e:	e7bc      	b.n	801a50a <setvbuf+0xde>
 801a590:	24000254 	.word	0x24000254

0801a594 <sniprintf>:
 801a594:	b40c      	push	{r2, r3}
 801a596:	b530      	push	{r4, r5, lr}
 801a598:	4b18      	ldr	r3, [pc, #96]	@ (801a5fc <sniprintf+0x68>)
 801a59a:	1e0c      	subs	r4, r1, #0
 801a59c:	681d      	ldr	r5, [r3, #0]
 801a59e:	b09d      	sub	sp, #116	@ 0x74
 801a5a0:	da08      	bge.n	801a5b4 <sniprintf+0x20>
 801a5a2:	238b      	movs	r3, #139	@ 0x8b
 801a5a4:	602b      	str	r3, [r5, #0]
 801a5a6:	f04f 30ff 	mov.w	r0, #4294967295
 801a5aa:	b01d      	add	sp, #116	@ 0x74
 801a5ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a5b0:	b002      	add	sp, #8
 801a5b2:	4770      	bx	lr
 801a5b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a5b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a5bc:	f04f 0300 	mov.w	r3, #0
 801a5c0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a5c2:	bf14      	ite	ne
 801a5c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a5c8:	4623      	moveq	r3, r4
 801a5ca:	9304      	str	r3, [sp, #16]
 801a5cc:	9307      	str	r3, [sp, #28]
 801a5ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a5d2:	9002      	str	r0, [sp, #8]
 801a5d4:	9006      	str	r0, [sp, #24]
 801a5d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a5da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a5dc:	ab21      	add	r3, sp, #132	@ 0x84
 801a5de:	a902      	add	r1, sp, #8
 801a5e0:	4628      	mov	r0, r5
 801a5e2:	9301      	str	r3, [sp, #4]
 801a5e4:	f000 fb2e 	bl	801ac44 <_svfiprintf_r>
 801a5e8:	1c43      	adds	r3, r0, #1
 801a5ea:	bfbc      	itt	lt
 801a5ec:	238b      	movlt	r3, #139	@ 0x8b
 801a5ee:	602b      	strlt	r3, [r5, #0]
 801a5f0:	2c00      	cmp	r4, #0
 801a5f2:	d0da      	beq.n	801a5aa <sniprintf+0x16>
 801a5f4:	9b02      	ldr	r3, [sp, #8]
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	701a      	strb	r2, [r3, #0]
 801a5fa:	e7d6      	b.n	801a5aa <sniprintf+0x16>
 801a5fc:	24000254 	.word	0x24000254

0801a600 <__sread>:
 801a600:	b510      	push	{r4, lr}
 801a602:	460c      	mov	r4, r1
 801a604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a608:	f000 f95c 	bl	801a8c4 <_read_r>
 801a60c:	2800      	cmp	r0, #0
 801a60e:	bfab      	itete	ge
 801a610:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a612:	89a3      	ldrhlt	r3, [r4, #12]
 801a614:	181b      	addge	r3, r3, r0
 801a616:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a61a:	bfac      	ite	ge
 801a61c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a61e:	81a3      	strhlt	r3, [r4, #12]
 801a620:	bd10      	pop	{r4, pc}

0801a622 <__swrite>:
 801a622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a626:	461f      	mov	r7, r3
 801a628:	898b      	ldrh	r3, [r1, #12]
 801a62a:	05db      	lsls	r3, r3, #23
 801a62c:	4605      	mov	r5, r0
 801a62e:	460c      	mov	r4, r1
 801a630:	4616      	mov	r6, r2
 801a632:	d505      	bpl.n	801a640 <__swrite+0x1e>
 801a634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a638:	2302      	movs	r3, #2
 801a63a:	2200      	movs	r2, #0
 801a63c:	f000 f930 	bl	801a8a0 <_lseek_r>
 801a640:	89a3      	ldrh	r3, [r4, #12]
 801a642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a646:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a64a:	81a3      	strh	r3, [r4, #12]
 801a64c:	4632      	mov	r2, r6
 801a64e:	463b      	mov	r3, r7
 801a650:	4628      	mov	r0, r5
 801a652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a656:	f000 b947 	b.w	801a8e8 <_write_r>

0801a65a <__sseek>:
 801a65a:	b510      	push	{r4, lr}
 801a65c:	460c      	mov	r4, r1
 801a65e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a662:	f000 f91d 	bl	801a8a0 <_lseek_r>
 801a666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a66a:	1c42      	adds	r2, r0, #1
 801a66c:	bf0b      	itete	eq
 801a66e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a672:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a676:	81a3      	strheq	r3, [r4, #12]
 801a678:	81a3      	strhne	r3, [r4, #12]
 801a67a:	bf18      	it	ne
 801a67c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a67e:	bd10      	pop	{r4, pc}

0801a680 <__sclose>:
 801a680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a684:	f000 b8fc 	b.w	801a880 <_close_r>

0801a688 <_vsniprintf_r>:
 801a688:	b530      	push	{r4, r5, lr}
 801a68a:	4614      	mov	r4, r2
 801a68c:	2c00      	cmp	r4, #0
 801a68e:	b09b      	sub	sp, #108	@ 0x6c
 801a690:	4605      	mov	r5, r0
 801a692:	461a      	mov	r2, r3
 801a694:	da05      	bge.n	801a6a2 <_vsniprintf_r+0x1a>
 801a696:	238b      	movs	r3, #139	@ 0x8b
 801a698:	6003      	str	r3, [r0, #0]
 801a69a:	f04f 30ff 	mov.w	r0, #4294967295
 801a69e:	b01b      	add	sp, #108	@ 0x6c
 801a6a0:	bd30      	pop	{r4, r5, pc}
 801a6a2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a6a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a6aa:	f04f 0300 	mov.w	r3, #0
 801a6ae:	9319      	str	r3, [sp, #100]	@ 0x64
 801a6b0:	bf14      	ite	ne
 801a6b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a6b6:	4623      	moveq	r3, r4
 801a6b8:	9302      	str	r3, [sp, #8]
 801a6ba:	9305      	str	r3, [sp, #20]
 801a6bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a6c0:	9100      	str	r1, [sp, #0]
 801a6c2:	9104      	str	r1, [sp, #16]
 801a6c4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a6c8:	4669      	mov	r1, sp
 801a6ca:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a6cc:	f000 faba 	bl	801ac44 <_svfiprintf_r>
 801a6d0:	1c43      	adds	r3, r0, #1
 801a6d2:	bfbc      	itt	lt
 801a6d4:	238b      	movlt	r3, #139	@ 0x8b
 801a6d6:	602b      	strlt	r3, [r5, #0]
 801a6d8:	2c00      	cmp	r4, #0
 801a6da:	d0e0      	beq.n	801a69e <_vsniprintf_r+0x16>
 801a6dc:	9b00      	ldr	r3, [sp, #0]
 801a6de:	2200      	movs	r2, #0
 801a6e0:	701a      	strb	r2, [r3, #0]
 801a6e2:	e7dc      	b.n	801a69e <_vsniprintf_r+0x16>

0801a6e4 <vsniprintf>:
 801a6e4:	b507      	push	{r0, r1, r2, lr}
 801a6e6:	9300      	str	r3, [sp, #0]
 801a6e8:	4613      	mov	r3, r2
 801a6ea:	460a      	mov	r2, r1
 801a6ec:	4601      	mov	r1, r0
 801a6ee:	4803      	ldr	r0, [pc, #12]	@ (801a6fc <vsniprintf+0x18>)
 801a6f0:	6800      	ldr	r0, [r0, #0]
 801a6f2:	f7ff ffc9 	bl	801a688 <_vsniprintf_r>
 801a6f6:	b003      	add	sp, #12
 801a6f8:	f85d fb04 	ldr.w	pc, [sp], #4
 801a6fc:	24000254 	.word	0x24000254

0801a700 <__swbuf_r>:
 801a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a702:	460e      	mov	r6, r1
 801a704:	4614      	mov	r4, r2
 801a706:	4605      	mov	r5, r0
 801a708:	b118      	cbz	r0, 801a712 <__swbuf_r+0x12>
 801a70a:	6a03      	ldr	r3, [r0, #32]
 801a70c:	b90b      	cbnz	r3, 801a712 <__swbuf_r+0x12>
 801a70e:	f7ff fde7 	bl	801a2e0 <__sinit>
 801a712:	69a3      	ldr	r3, [r4, #24]
 801a714:	60a3      	str	r3, [r4, #8]
 801a716:	89a3      	ldrh	r3, [r4, #12]
 801a718:	071a      	lsls	r2, r3, #28
 801a71a:	d501      	bpl.n	801a720 <__swbuf_r+0x20>
 801a71c:	6923      	ldr	r3, [r4, #16]
 801a71e:	b943      	cbnz	r3, 801a732 <__swbuf_r+0x32>
 801a720:	4621      	mov	r1, r4
 801a722:	4628      	mov	r0, r5
 801a724:	f000 f82a 	bl	801a77c <__swsetup_r>
 801a728:	b118      	cbz	r0, 801a732 <__swbuf_r+0x32>
 801a72a:	f04f 37ff 	mov.w	r7, #4294967295
 801a72e:	4638      	mov	r0, r7
 801a730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a732:	6823      	ldr	r3, [r4, #0]
 801a734:	6922      	ldr	r2, [r4, #16]
 801a736:	1a98      	subs	r0, r3, r2
 801a738:	6963      	ldr	r3, [r4, #20]
 801a73a:	b2f6      	uxtb	r6, r6
 801a73c:	4283      	cmp	r3, r0
 801a73e:	4637      	mov	r7, r6
 801a740:	dc05      	bgt.n	801a74e <__swbuf_r+0x4e>
 801a742:	4621      	mov	r1, r4
 801a744:	4628      	mov	r0, r5
 801a746:	f000 fecb 	bl	801b4e0 <_fflush_r>
 801a74a:	2800      	cmp	r0, #0
 801a74c:	d1ed      	bne.n	801a72a <__swbuf_r+0x2a>
 801a74e:	68a3      	ldr	r3, [r4, #8]
 801a750:	3b01      	subs	r3, #1
 801a752:	60a3      	str	r3, [r4, #8]
 801a754:	6823      	ldr	r3, [r4, #0]
 801a756:	1c5a      	adds	r2, r3, #1
 801a758:	6022      	str	r2, [r4, #0]
 801a75a:	701e      	strb	r6, [r3, #0]
 801a75c:	6962      	ldr	r2, [r4, #20]
 801a75e:	1c43      	adds	r3, r0, #1
 801a760:	429a      	cmp	r2, r3
 801a762:	d004      	beq.n	801a76e <__swbuf_r+0x6e>
 801a764:	89a3      	ldrh	r3, [r4, #12]
 801a766:	07db      	lsls	r3, r3, #31
 801a768:	d5e1      	bpl.n	801a72e <__swbuf_r+0x2e>
 801a76a:	2e0a      	cmp	r6, #10
 801a76c:	d1df      	bne.n	801a72e <__swbuf_r+0x2e>
 801a76e:	4621      	mov	r1, r4
 801a770:	4628      	mov	r0, r5
 801a772:	f000 feb5 	bl	801b4e0 <_fflush_r>
 801a776:	2800      	cmp	r0, #0
 801a778:	d0d9      	beq.n	801a72e <__swbuf_r+0x2e>
 801a77a:	e7d6      	b.n	801a72a <__swbuf_r+0x2a>

0801a77c <__swsetup_r>:
 801a77c:	b538      	push	{r3, r4, r5, lr}
 801a77e:	4b28      	ldr	r3, [pc, #160]	@ (801a820 <__swsetup_r+0xa4>)
 801a780:	4605      	mov	r5, r0
 801a782:	6818      	ldr	r0, [r3, #0]
 801a784:	460c      	mov	r4, r1
 801a786:	b118      	cbz	r0, 801a790 <__swsetup_r+0x14>
 801a788:	6a03      	ldr	r3, [r0, #32]
 801a78a:	b90b      	cbnz	r3, 801a790 <__swsetup_r+0x14>
 801a78c:	f7ff fda8 	bl	801a2e0 <__sinit>
 801a790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a794:	071a      	lsls	r2, r3, #28
 801a796:	d421      	bmi.n	801a7dc <__swsetup_r+0x60>
 801a798:	06d8      	lsls	r0, r3, #27
 801a79a:	d407      	bmi.n	801a7ac <__swsetup_r+0x30>
 801a79c:	2209      	movs	r2, #9
 801a79e:	602a      	str	r2, [r5, #0]
 801a7a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a7a4:	81a3      	strh	r3, [r4, #12]
 801a7a6:	f04f 30ff 	mov.w	r0, #4294967295
 801a7aa:	e030      	b.n	801a80e <__swsetup_r+0x92>
 801a7ac:	0759      	lsls	r1, r3, #29
 801a7ae:	d512      	bpl.n	801a7d6 <__swsetup_r+0x5a>
 801a7b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a7b2:	b141      	cbz	r1, 801a7c6 <__swsetup_r+0x4a>
 801a7b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a7b8:	4299      	cmp	r1, r3
 801a7ba:	d002      	beq.n	801a7c2 <__swsetup_r+0x46>
 801a7bc:	4628      	mov	r0, r5
 801a7be:	f000 f8e1 	bl	801a984 <_free_r>
 801a7c2:	2300      	movs	r3, #0
 801a7c4:	6363      	str	r3, [r4, #52]	@ 0x34
 801a7c6:	2200      	movs	r2, #0
 801a7c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7cc:	6062      	str	r2, [r4, #4]
 801a7ce:	6922      	ldr	r2, [r4, #16]
 801a7d0:	6022      	str	r2, [r4, #0]
 801a7d2:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a7d6:	f043 0308 	orr.w	r3, r3, #8
 801a7da:	81a3      	strh	r3, [r4, #12]
 801a7dc:	6922      	ldr	r2, [r4, #16]
 801a7de:	b93a      	cbnz	r2, 801a7f0 <__swsetup_r+0x74>
 801a7e0:	059a      	lsls	r2, r3, #22
 801a7e2:	d501      	bpl.n	801a7e8 <__swsetup_r+0x6c>
 801a7e4:	0618      	lsls	r0, r3, #24
 801a7e6:	d503      	bpl.n	801a7f0 <__swsetup_r+0x74>
 801a7e8:	4621      	mov	r1, r4
 801a7ea:	4628      	mov	r0, r5
 801a7ec:	f000 fec4 	bl	801b578 <__smakebuf_r>
 801a7f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7f4:	f013 0201 	ands.w	r2, r3, #1
 801a7f8:	d00a      	beq.n	801a810 <__swsetup_r+0x94>
 801a7fa:	2200      	movs	r2, #0
 801a7fc:	60a2      	str	r2, [r4, #8]
 801a7fe:	6962      	ldr	r2, [r4, #20]
 801a800:	4252      	negs	r2, r2
 801a802:	61a2      	str	r2, [r4, #24]
 801a804:	6922      	ldr	r2, [r4, #16]
 801a806:	b942      	cbnz	r2, 801a81a <__swsetup_r+0x9e>
 801a808:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a80c:	d1c8      	bne.n	801a7a0 <__swsetup_r+0x24>
 801a80e:	bd38      	pop	{r3, r4, r5, pc}
 801a810:	0799      	lsls	r1, r3, #30
 801a812:	bf58      	it	pl
 801a814:	6962      	ldrpl	r2, [r4, #20]
 801a816:	60a2      	str	r2, [r4, #8]
 801a818:	e7f4      	b.n	801a804 <__swsetup_r+0x88>
 801a81a:	2000      	movs	r0, #0
 801a81c:	e7f7      	b.n	801a80e <__swsetup_r+0x92>
 801a81e:	bf00      	nop
 801a820:	24000254 	.word	0x24000254

0801a824 <memset>:
 801a824:	4402      	add	r2, r0
 801a826:	4603      	mov	r3, r0
 801a828:	4293      	cmp	r3, r2
 801a82a:	d100      	bne.n	801a82e <memset+0xa>
 801a82c:	4770      	bx	lr
 801a82e:	f803 1b01 	strb.w	r1, [r3], #1
 801a832:	e7f9      	b.n	801a828 <memset+0x4>

0801a834 <strncmp>:
 801a834:	b510      	push	{r4, lr}
 801a836:	b16a      	cbz	r2, 801a854 <strncmp+0x20>
 801a838:	3901      	subs	r1, #1
 801a83a:	1884      	adds	r4, r0, r2
 801a83c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a840:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a844:	429a      	cmp	r2, r3
 801a846:	d103      	bne.n	801a850 <strncmp+0x1c>
 801a848:	42a0      	cmp	r0, r4
 801a84a:	d001      	beq.n	801a850 <strncmp+0x1c>
 801a84c:	2a00      	cmp	r2, #0
 801a84e:	d1f5      	bne.n	801a83c <strncmp+0x8>
 801a850:	1ad0      	subs	r0, r2, r3
 801a852:	bd10      	pop	{r4, pc}
 801a854:	4610      	mov	r0, r2
 801a856:	e7fc      	b.n	801a852 <strncmp+0x1e>

0801a858 <strncpy>:
 801a858:	b510      	push	{r4, lr}
 801a85a:	3901      	subs	r1, #1
 801a85c:	4603      	mov	r3, r0
 801a85e:	b132      	cbz	r2, 801a86e <strncpy+0x16>
 801a860:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a864:	f803 4b01 	strb.w	r4, [r3], #1
 801a868:	3a01      	subs	r2, #1
 801a86a:	2c00      	cmp	r4, #0
 801a86c:	d1f7      	bne.n	801a85e <strncpy+0x6>
 801a86e:	441a      	add	r2, r3
 801a870:	2100      	movs	r1, #0
 801a872:	4293      	cmp	r3, r2
 801a874:	d100      	bne.n	801a878 <strncpy+0x20>
 801a876:	bd10      	pop	{r4, pc}
 801a878:	f803 1b01 	strb.w	r1, [r3], #1
 801a87c:	e7f9      	b.n	801a872 <strncpy+0x1a>
	...

0801a880 <_close_r>:
 801a880:	b538      	push	{r3, r4, r5, lr}
 801a882:	4d06      	ldr	r5, [pc, #24]	@ (801a89c <_close_r+0x1c>)
 801a884:	2300      	movs	r3, #0
 801a886:	4604      	mov	r4, r0
 801a888:	4608      	mov	r0, r1
 801a88a:	602b      	str	r3, [r5, #0]
 801a88c:	f7e9 f8ca 	bl	8003a24 <_close>
 801a890:	1c43      	adds	r3, r0, #1
 801a892:	d102      	bne.n	801a89a <_close_r+0x1a>
 801a894:	682b      	ldr	r3, [r5, #0]
 801a896:	b103      	cbz	r3, 801a89a <_close_r+0x1a>
 801a898:	6023      	str	r3, [r4, #0]
 801a89a:	bd38      	pop	{r3, r4, r5, pc}
 801a89c:	2401c504 	.word	0x2401c504

0801a8a0 <_lseek_r>:
 801a8a0:	b538      	push	{r3, r4, r5, lr}
 801a8a2:	4d07      	ldr	r5, [pc, #28]	@ (801a8c0 <_lseek_r+0x20>)
 801a8a4:	4604      	mov	r4, r0
 801a8a6:	4608      	mov	r0, r1
 801a8a8:	4611      	mov	r1, r2
 801a8aa:	2200      	movs	r2, #0
 801a8ac:	602a      	str	r2, [r5, #0]
 801a8ae:	461a      	mov	r2, r3
 801a8b0:	f7e9 f8df 	bl	8003a72 <_lseek>
 801a8b4:	1c43      	adds	r3, r0, #1
 801a8b6:	d102      	bne.n	801a8be <_lseek_r+0x1e>
 801a8b8:	682b      	ldr	r3, [r5, #0]
 801a8ba:	b103      	cbz	r3, 801a8be <_lseek_r+0x1e>
 801a8bc:	6023      	str	r3, [r4, #0]
 801a8be:	bd38      	pop	{r3, r4, r5, pc}
 801a8c0:	2401c504 	.word	0x2401c504

0801a8c4 <_read_r>:
 801a8c4:	b538      	push	{r3, r4, r5, lr}
 801a8c6:	4d07      	ldr	r5, [pc, #28]	@ (801a8e4 <_read_r+0x20>)
 801a8c8:	4604      	mov	r4, r0
 801a8ca:	4608      	mov	r0, r1
 801a8cc:	4611      	mov	r1, r2
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	602a      	str	r2, [r5, #0]
 801a8d2:	461a      	mov	r2, r3
 801a8d4:	f7e9 f856 	bl	8003984 <_read>
 801a8d8:	1c43      	adds	r3, r0, #1
 801a8da:	d102      	bne.n	801a8e2 <_read_r+0x1e>
 801a8dc:	682b      	ldr	r3, [r5, #0]
 801a8de:	b103      	cbz	r3, 801a8e2 <_read_r+0x1e>
 801a8e0:	6023      	str	r3, [r4, #0]
 801a8e2:	bd38      	pop	{r3, r4, r5, pc}
 801a8e4:	2401c504 	.word	0x2401c504

0801a8e8 <_write_r>:
 801a8e8:	b538      	push	{r3, r4, r5, lr}
 801a8ea:	4d07      	ldr	r5, [pc, #28]	@ (801a908 <_write_r+0x20>)
 801a8ec:	4604      	mov	r4, r0
 801a8ee:	4608      	mov	r0, r1
 801a8f0:	4611      	mov	r1, r2
 801a8f2:	2200      	movs	r2, #0
 801a8f4:	602a      	str	r2, [r5, #0]
 801a8f6:	461a      	mov	r2, r3
 801a8f8:	f7e9 f861 	bl	80039be <_write>
 801a8fc:	1c43      	adds	r3, r0, #1
 801a8fe:	d102      	bne.n	801a906 <_write_r+0x1e>
 801a900:	682b      	ldr	r3, [r5, #0]
 801a902:	b103      	cbz	r3, 801a906 <_write_r+0x1e>
 801a904:	6023      	str	r3, [r4, #0]
 801a906:	bd38      	pop	{r3, r4, r5, pc}
 801a908:	2401c504 	.word	0x2401c504

0801a90c <__errno>:
 801a90c:	4b01      	ldr	r3, [pc, #4]	@ (801a914 <__errno+0x8>)
 801a90e:	6818      	ldr	r0, [r3, #0]
 801a910:	4770      	bx	lr
 801a912:	bf00      	nop
 801a914:	24000254 	.word	0x24000254

0801a918 <__libc_init_array>:
 801a918:	b570      	push	{r4, r5, r6, lr}
 801a91a:	4b0d      	ldr	r3, [pc, #52]	@ (801a950 <__libc_init_array+0x38>)
 801a91c:	4d0d      	ldr	r5, [pc, #52]	@ (801a954 <__libc_init_array+0x3c>)
 801a91e:	1b5b      	subs	r3, r3, r5
 801a920:	109c      	asrs	r4, r3, #2
 801a922:	2600      	movs	r6, #0
 801a924:	42a6      	cmp	r6, r4
 801a926:	d109      	bne.n	801a93c <__libc_init_array+0x24>
 801a928:	f001 f85c 	bl	801b9e4 <_init>
 801a92c:	4d0a      	ldr	r5, [pc, #40]	@ (801a958 <__libc_init_array+0x40>)
 801a92e:	4b0b      	ldr	r3, [pc, #44]	@ (801a95c <__libc_init_array+0x44>)
 801a930:	1b5b      	subs	r3, r3, r5
 801a932:	109c      	asrs	r4, r3, #2
 801a934:	2600      	movs	r6, #0
 801a936:	42a6      	cmp	r6, r4
 801a938:	d105      	bne.n	801a946 <__libc_init_array+0x2e>
 801a93a:	bd70      	pop	{r4, r5, r6, pc}
 801a93c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a940:	4798      	blx	r3
 801a942:	3601      	adds	r6, #1
 801a944:	e7ee      	b.n	801a924 <__libc_init_array+0xc>
 801a946:	f855 3b04 	ldr.w	r3, [r5], #4
 801a94a:	4798      	blx	r3
 801a94c:	3601      	adds	r6, #1
 801a94e:	e7f2      	b.n	801a936 <__libc_init_array+0x1e>
 801a950:	0801d97c 	.word	0x0801d97c
 801a954:	0801d97c 	.word	0x0801d97c
 801a958:	0801d97c 	.word	0x0801d97c
 801a95c:	0801d980 	.word	0x0801d980

0801a960 <__retarget_lock_init_recursive>:
 801a960:	4770      	bx	lr

0801a962 <__retarget_lock_acquire_recursive>:
 801a962:	4770      	bx	lr

0801a964 <__retarget_lock_release_recursive>:
 801a964:	4770      	bx	lr

0801a966 <memcpy>:
 801a966:	440a      	add	r2, r1
 801a968:	4291      	cmp	r1, r2
 801a96a:	f100 33ff 	add.w	r3, r0, #4294967295
 801a96e:	d100      	bne.n	801a972 <memcpy+0xc>
 801a970:	4770      	bx	lr
 801a972:	b510      	push	{r4, lr}
 801a974:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a978:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a97c:	4291      	cmp	r1, r2
 801a97e:	d1f9      	bne.n	801a974 <memcpy+0xe>
 801a980:	bd10      	pop	{r4, pc}
	...

0801a984 <_free_r>:
 801a984:	b538      	push	{r3, r4, r5, lr}
 801a986:	4605      	mov	r5, r0
 801a988:	2900      	cmp	r1, #0
 801a98a:	d041      	beq.n	801aa10 <_free_r+0x8c>
 801a98c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a990:	1f0c      	subs	r4, r1, #4
 801a992:	2b00      	cmp	r3, #0
 801a994:	bfb8      	it	lt
 801a996:	18e4      	addlt	r4, r4, r3
 801a998:	f000 f8e8 	bl	801ab6c <__malloc_lock>
 801a99c:	4a1d      	ldr	r2, [pc, #116]	@ (801aa14 <_free_r+0x90>)
 801a99e:	6813      	ldr	r3, [r2, #0]
 801a9a0:	b933      	cbnz	r3, 801a9b0 <_free_r+0x2c>
 801a9a2:	6063      	str	r3, [r4, #4]
 801a9a4:	6014      	str	r4, [r2, #0]
 801a9a6:	4628      	mov	r0, r5
 801a9a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a9ac:	f000 b8e4 	b.w	801ab78 <__malloc_unlock>
 801a9b0:	42a3      	cmp	r3, r4
 801a9b2:	d908      	bls.n	801a9c6 <_free_r+0x42>
 801a9b4:	6820      	ldr	r0, [r4, #0]
 801a9b6:	1821      	adds	r1, r4, r0
 801a9b8:	428b      	cmp	r3, r1
 801a9ba:	bf01      	itttt	eq
 801a9bc:	6819      	ldreq	r1, [r3, #0]
 801a9be:	685b      	ldreq	r3, [r3, #4]
 801a9c0:	1809      	addeq	r1, r1, r0
 801a9c2:	6021      	streq	r1, [r4, #0]
 801a9c4:	e7ed      	b.n	801a9a2 <_free_r+0x1e>
 801a9c6:	461a      	mov	r2, r3
 801a9c8:	685b      	ldr	r3, [r3, #4]
 801a9ca:	b10b      	cbz	r3, 801a9d0 <_free_r+0x4c>
 801a9cc:	42a3      	cmp	r3, r4
 801a9ce:	d9fa      	bls.n	801a9c6 <_free_r+0x42>
 801a9d0:	6811      	ldr	r1, [r2, #0]
 801a9d2:	1850      	adds	r0, r2, r1
 801a9d4:	42a0      	cmp	r0, r4
 801a9d6:	d10b      	bne.n	801a9f0 <_free_r+0x6c>
 801a9d8:	6820      	ldr	r0, [r4, #0]
 801a9da:	4401      	add	r1, r0
 801a9dc:	1850      	adds	r0, r2, r1
 801a9de:	4283      	cmp	r3, r0
 801a9e0:	6011      	str	r1, [r2, #0]
 801a9e2:	d1e0      	bne.n	801a9a6 <_free_r+0x22>
 801a9e4:	6818      	ldr	r0, [r3, #0]
 801a9e6:	685b      	ldr	r3, [r3, #4]
 801a9e8:	6053      	str	r3, [r2, #4]
 801a9ea:	4408      	add	r0, r1
 801a9ec:	6010      	str	r0, [r2, #0]
 801a9ee:	e7da      	b.n	801a9a6 <_free_r+0x22>
 801a9f0:	d902      	bls.n	801a9f8 <_free_r+0x74>
 801a9f2:	230c      	movs	r3, #12
 801a9f4:	602b      	str	r3, [r5, #0]
 801a9f6:	e7d6      	b.n	801a9a6 <_free_r+0x22>
 801a9f8:	6820      	ldr	r0, [r4, #0]
 801a9fa:	1821      	adds	r1, r4, r0
 801a9fc:	428b      	cmp	r3, r1
 801a9fe:	bf04      	itt	eq
 801aa00:	6819      	ldreq	r1, [r3, #0]
 801aa02:	685b      	ldreq	r3, [r3, #4]
 801aa04:	6063      	str	r3, [r4, #4]
 801aa06:	bf04      	itt	eq
 801aa08:	1809      	addeq	r1, r1, r0
 801aa0a:	6021      	streq	r1, [r4, #0]
 801aa0c:	6054      	str	r4, [r2, #4]
 801aa0e:	e7ca      	b.n	801a9a6 <_free_r+0x22>
 801aa10:	bd38      	pop	{r3, r4, r5, pc}
 801aa12:	bf00      	nop
 801aa14:	2401c510 	.word	0x2401c510

0801aa18 <malloc>:
 801aa18:	4b02      	ldr	r3, [pc, #8]	@ (801aa24 <malloc+0xc>)
 801aa1a:	4601      	mov	r1, r0
 801aa1c:	6818      	ldr	r0, [r3, #0]
 801aa1e:	f000 b825 	b.w	801aa6c <_malloc_r>
 801aa22:	bf00      	nop
 801aa24:	24000254 	.word	0x24000254

0801aa28 <sbrk_aligned>:
 801aa28:	b570      	push	{r4, r5, r6, lr}
 801aa2a:	4e0f      	ldr	r6, [pc, #60]	@ (801aa68 <sbrk_aligned+0x40>)
 801aa2c:	460c      	mov	r4, r1
 801aa2e:	6831      	ldr	r1, [r6, #0]
 801aa30:	4605      	mov	r5, r0
 801aa32:	b911      	cbnz	r1, 801aa3a <sbrk_aligned+0x12>
 801aa34:	f000 fe14 	bl	801b660 <_sbrk_r>
 801aa38:	6030      	str	r0, [r6, #0]
 801aa3a:	4621      	mov	r1, r4
 801aa3c:	4628      	mov	r0, r5
 801aa3e:	f000 fe0f 	bl	801b660 <_sbrk_r>
 801aa42:	1c43      	adds	r3, r0, #1
 801aa44:	d103      	bne.n	801aa4e <sbrk_aligned+0x26>
 801aa46:	f04f 34ff 	mov.w	r4, #4294967295
 801aa4a:	4620      	mov	r0, r4
 801aa4c:	bd70      	pop	{r4, r5, r6, pc}
 801aa4e:	1cc4      	adds	r4, r0, #3
 801aa50:	f024 0403 	bic.w	r4, r4, #3
 801aa54:	42a0      	cmp	r0, r4
 801aa56:	d0f8      	beq.n	801aa4a <sbrk_aligned+0x22>
 801aa58:	1a21      	subs	r1, r4, r0
 801aa5a:	4628      	mov	r0, r5
 801aa5c:	f000 fe00 	bl	801b660 <_sbrk_r>
 801aa60:	3001      	adds	r0, #1
 801aa62:	d1f2      	bne.n	801aa4a <sbrk_aligned+0x22>
 801aa64:	e7ef      	b.n	801aa46 <sbrk_aligned+0x1e>
 801aa66:	bf00      	nop
 801aa68:	2401c50c 	.word	0x2401c50c

0801aa6c <_malloc_r>:
 801aa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa70:	1ccd      	adds	r5, r1, #3
 801aa72:	f025 0503 	bic.w	r5, r5, #3
 801aa76:	3508      	adds	r5, #8
 801aa78:	2d0c      	cmp	r5, #12
 801aa7a:	bf38      	it	cc
 801aa7c:	250c      	movcc	r5, #12
 801aa7e:	2d00      	cmp	r5, #0
 801aa80:	4606      	mov	r6, r0
 801aa82:	db01      	blt.n	801aa88 <_malloc_r+0x1c>
 801aa84:	42a9      	cmp	r1, r5
 801aa86:	d904      	bls.n	801aa92 <_malloc_r+0x26>
 801aa88:	230c      	movs	r3, #12
 801aa8a:	6033      	str	r3, [r6, #0]
 801aa8c:	2000      	movs	r0, #0
 801aa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ab68 <_malloc_r+0xfc>
 801aa96:	f000 f869 	bl	801ab6c <__malloc_lock>
 801aa9a:	f8d8 3000 	ldr.w	r3, [r8]
 801aa9e:	461c      	mov	r4, r3
 801aaa0:	bb44      	cbnz	r4, 801aaf4 <_malloc_r+0x88>
 801aaa2:	4629      	mov	r1, r5
 801aaa4:	4630      	mov	r0, r6
 801aaa6:	f7ff ffbf 	bl	801aa28 <sbrk_aligned>
 801aaaa:	1c43      	adds	r3, r0, #1
 801aaac:	4604      	mov	r4, r0
 801aaae:	d158      	bne.n	801ab62 <_malloc_r+0xf6>
 801aab0:	f8d8 4000 	ldr.w	r4, [r8]
 801aab4:	4627      	mov	r7, r4
 801aab6:	2f00      	cmp	r7, #0
 801aab8:	d143      	bne.n	801ab42 <_malloc_r+0xd6>
 801aaba:	2c00      	cmp	r4, #0
 801aabc:	d04b      	beq.n	801ab56 <_malloc_r+0xea>
 801aabe:	6823      	ldr	r3, [r4, #0]
 801aac0:	4639      	mov	r1, r7
 801aac2:	4630      	mov	r0, r6
 801aac4:	eb04 0903 	add.w	r9, r4, r3
 801aac8:	f000 fdca 	bl	801b660 <_sbrk_r>
 801aacc:	4581      	cmp	r9, r0
 801aace:	d142      	bne.n	801ab56 <_malloc_r+0xea>
 801aad0:	6821      	ldr	r1, [r4, #0]
 801aad2:	1a6d      	subs	r5, r5, r1
 801aad4:	4629      	mov	r1, r5
 801aad6:	4630      	mov	r0, r6
 801aad8:	f7ff ffa6 	bl	801aa28 <sbrk_aligned>
 801aadc:	3001      	adds	r0, #1
 801aade:	d03a      	beq.n	801ab56 <_malloc_r+0xea>
 801aae0:	6823      	ldr	r3, [r4, #0]
 801aae2:	442b      	add	r3, r5
 801aae4:	6023      	str	r3, [r4, #0]
 801aae6:	f8d8 3000 	ldr.w	r3, [r8]
 801aaea:	685a      	ldr	r2, [r3, #4]
 801aaec:	bb62      	cbnz	r2, 801ab48 <_malloc_r+0xdc>
 801aaee:	f8c8 7000 	str.w	r7, [r8]
 801aaf2:	e00f      	b.n	801ab14 <_malloc_r+0xa8>
 801aaf4:	6822      	ldr	r2, [r4, #0]
 801aaf6:	1b52      	subs	r2, r2, r5
 801aaf8:	d420      	bmi.n	801ab3c <_malloc_r+0xd0>
 801aafa:	2a0b      	cmp	r2, #11
 801aafc:	d917      	bls.n	801ab2e <_malloc_r+0xc2>
 801aafe:	1961      	adds	r1, r4, r5
 801ab00:	42a3      	cmp	r3, r4
 801ab02:	6025      	str	r5, [r4, #0]
 801ab04:	bf18      	it	ne
 801ab06:	6059      	strne	r1, [r3, #4]
 801ab08:	6863      	ldr	r3, [r4, #4]
 801ab0a:	bf08      	it	eq
 801ab0c:	f8c8 1000 	streq.w	r1, [r8]
 801ab10:	5162      	str	r2, [r4, r5]
 801ab12:	604b      	str	r3, [r1, #4]
 801ab14:	4630      	mov	r0, r6
 801ab16:	f000 f82f 	bl	801ab78 <__malloc_unlock>
 801ab1a:	f104 000b 	add.w	r0, r4, #11
 801ab1e:	1d23      	adds	r3, r4, #4
 801ab20:	f020 0007 	bic.w	r0, r0, #7
 801ab24:	1ac2      	subs	r2, r0, r3
 801ab26:	bf1c      	itt	ne
 801ab28:	1a1b      	subne	r3, r3, r0
 801ab2a:	50a3      	strne	r3, [r4, r2]
 801ab2c:	e7af      	b.n	801aa8e <_malloc_r+0x22>
 801ab2e:	6862      	ldr	r2, [r4, #4]
 801ab30:	42a3      	cmp	r3, r4
 801ab32:	bf0c      	ite	eq
 801ab34:	f8c8 2000 	streq.w	r2, [r8]
 801ab38:	605a      	strne	r2, [r3, #4]
 801ab3a:	e7eb      	b.n	801ab14 <_malloc_r+0xa8>
 801ab3c:	4623      	mov	r3, r4
 801ab3e:	6864      	ldr	r4, [r4, #4]
 801ab40:	e7ae      	b.n	801aaa0 <_malloc_r+0x34>
 801ab42:	463c      	mov	r4, r7
 801ab44:	687f      	ldr	r7, [r7, #4]
 801ab46:	e7b6      	b.n	801aab6 <_malloc_r+0x4a>
 801ab48:	461a      	mov	r2, r3
 801ab4a:	685b      	ldr	r3, [r3, #4]
 801ab4c:	42a3      	cmp	r3, r4
 801ab4e:	d1fb      	bne.n	801ab48 <_malloc_r+0xdc>
 801ab50:	2300      	movs	r3, #0
 801ab52:	6053      	str	r3, [r2, #4]
 801ab54:	e7de      	b.n	801ab14 <_malloc_r+0xa8>
 801ab56:	230c      	movs	r3, #12
 801ab58:	6033      	str	r3, [r6, #0]
 801ab5a:	4630      	mov	r0, r6
 801ab5c:	f000 f80c 	bl	801ab78 <__malloc_unlock>
 801ab60:	e794      	b.n	801aa8c <_malloc_r+0x20>
 801ab62:	6005      	str	r5, [r0, #0]
 801ab64:	e7d6      	b.n	801ab14 <_malloc_r+0xa8>
 801ab66:	bf00      	nop
 801ab68:	2401c510 	.word	0x2401c510

0801ab6c <__malloc_lock>:
 801ab6c:	4801      	ldr	r0, [pc, #4]	@ (801ab74 <__malloc_lock+0x8>)
 801ab6e:	f7ff bef8 	b.w	801a962 <__retarget_lock_acquire_recursive>
 801ab72:	bf00      	nop
 801ab74:	2401c508 	.word	0x2401c508

0801ab78 <__malloc_unlock>:
 801ab78:	4801      	ldr	r0, [pc, #4]	@ (801ab80 <__malloc_unlock+0x8>)
 801ab7a:	f7ff bef3 	b.w	801a964 <__retarget_lock_release_recursive>
 801ab7e:	bf00      	nop
 801ab80:	2401c508 	.word	0x2401c508

0801ab84 <__ssputs_r>:
 801ab84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab88:	688e      	ldr	r6, [r1, #8]
 801ab8a:	461f      	mov	r7, r3
 801ab8c:	42be      	cmp	r6, r7
 801ab8e:	4682      	mov	sl, r0
 801ab90:	460c      	mov	r4, r1
 801ab92:	4690      	mov	r8, r2
 801ab94:	4633      	mov	r3, r6
 801ab96:	d853      	bhi.n	801ac40 <__ssputs_r+0xbc>
 801ab98:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801ab9c:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 801aba0:	d02b      	beq.n	801abfa <__ssputs_r+0x76>
 801aba2:	6965      	ldr	r5, [r4, #20]
 801aba4:	6823      	ldr	r3, [r4, #0]
 801aba6:	6909      	ldr	r1, [r1, #16]
 801aba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801abac:	eba3 0901 	sub.w	r9, r3, r1
 801abb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801abb4:	1c7b      	adds	r3, r7, #1
 801abb6:	106d      	asrs	r5, r5, #1
 801abb8:	444b      	add	r3, r9
 801abba:	42ab      	cmp	r3, r5
 801abbc:	462a      	mov	r2, r5
 801abbe:	bf84      	itt	hi
 801abc0:	461d      	movhi	r5, r3
 801abc2:	462a      	movhi	r2, r5
 801abc4:	0543      	lsls	r3, r0, #21
 801abc6:	d527      	bpl.n	801ac18 <__ssputs_r+0x94>
 801abc8:	4611      	mov	r1, r2
 801abca:	4650      	mov	r0, sl
 801abcc:	f7ff ff4e 	bl	801aa6c <_malloc_r>
 801abd0:	4606      	mov	r6, r0
 801abd2:	b358      	cbz	r0, 801ac2c <__ssputs_r+0xa8>
 801abd4:	6921      	ldr	r1, [r4, #16]
 801abd6:	464a      	mov	r2, r9
 801abd8:	f7ff fec5 	bl	801a966 <memcpy>
 801abdc:	89a3      	ldrh	r3, [r4, #12]
 801abde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801abe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801abe6:	81a3      	strh	r3, [r4, #12]
 801abe8:	6126      	str	r6, [r4, #16]
 801abea:	6165      	str	r5, [r4, #20]
 801abec:	444e      	add	r6, r9
 801abee:	eba5 0509 	sub.w	r5, r5, r9
 801abf2:	6026      	str	r6, [r4, #0]
 801abf4:	60a5      	str	r5, [r4, #8]
 801abf6:	463e      	mov	r6, r7
 801abf8:	463b      	mov	r3, r7
 801abfa:	461f      	mov	r7, r3
 801abfc:	6820      	ldr	r0, [r4, #0]
 801abfe:	463a      	mov	r2, r7
 801ac00:	4641      	mov	r1, r8
 801ac02:	f000 fcf2 	bl	801b5ea <memmove>
 801ac06:	68a3      	ldr	r3, [r4, #8]
 801ac08:	1b9b      	subs	r3, r3, r6
 801ac0a:	60a3      	str	r3, [r4, #8]
 801ac0c:	6823      	ldr	r3, [r4, #0]
 801ac0e:	443b      	add	r3, r7
 801ac10:	6023      	str	r3, [r4, #0]
 801ac12:	2000      	movs	r0, #0
 801ac14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac18:	4650      	mov	r0, sl
 801ac1a:	f000 fd31 	bl	801b680 <_realloc_r>
 801ac1e:	4606      	mov	r6, r0
 801ac20:	2800      	cmp	r0, #0
 801ac22:	d1e1      	bne.n	801abe8 <__ssputs_r+0x64>
 801ac24:	6921      	ldr	r1, [r4, #16]
 801ac26:	4650      	mov	r0, sl
 801ac28:	f7ff feac 	bl	801a984 <_free_r>
 801ac2c:	230c      	movs	r3, #12
 801ac2e:	f8ca 3000 	str.w	r3, [sl]
 801ac32:	89a3      	ldrh	r3, [r4, #12]
 801ac34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ac38:	81a3      	strh	r3, [r4, #12]
 801ac3a:	f04f 30ff 	mov.w	r0, #4294967295
 801ac3e:	e7e9      	b.n	801ac14 <__ssputs_r+0x90>
 801ac40:	463e      	mov	r6, r7
 801ac42:	e7db      	b.n	801abfc <__ssputs_r+0x78>

0801ac44 <_svfiprintf_r>:
 801ac44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac48:	4698      	mov	r8, r3
 801ac4a:	898b      	ldrh	r3, [r1, #12]
 801ac4c:	061b      	lsls	r3, r3, #24
 801ac4e:	b09d      	sub	sp, #116	@ 0x74
 801ac50:	4607      	mov	r7, r0
 801ac52:	460d      	mov	r5, r1
 801ac54:	4614      	mov	r4, r2
 801ac56:	d510      	bpl.n	801ac7a <_svfiprintf_r+0x36>
 801ac58:	690b      	ldr	r3, [r1, #16]
 801ac5a:	b973      	cbnz	r3, 801ac7a <_svfiprintf_r+0x36>
 801ac5c:	2140      	movs	r1, #64	@ 0x40
 801ac5e:	f7ff ff05 	bl	801aa6c <_malloc_r>
 801ac62:	6028      	str	r0, [r5, #0]
 801ac64:	6128      	str	r0, [r5, #16]
 801ac66:	b930      	cbnz	r0, 801ac76 <_svfiprintf_r+0x32>
 801ac68:	230c      	movs	r3, #12
 801ac6a:	603b      	str	r3, [r7, #0]
 801ac6c:	f04f 30ff 	mov.w	r0, #4294967295
 801ac70:	b01d      	add	sp, #116	@ 0x74
 801ac72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac76:	2340      	movs	r3, #64	@ 0x40
 801ac78:	616b      	str	r3, [r5, #20]
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac7e:	2320      	movs	r3, #32
 801ac80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ac84:	f8cd 800c 	str.w	r8, [sp, #12]
 801ac88:	2330      	movs	r3, #48	@ 0x30
 801ac8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ae28 <_svfiprintf_r+0x1e4>
 801ac8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ac92:	f04f 0901 	mov.w	r9, #1
 801ac96:	4623      	mov	r3, r4
 801ac98:	469a      	mov	sl, r3
 801ac9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac9e:	b10a      	cbz	r2, 801aca4 <_svfiprintf_r+0x60>
 801aca0:	2a25      	cmp	r2, #37	@ 0x25
 801aca2:	d1f9      	bne.n	801ac98 <_svfiprintf_r+0x54>
 801aca4:	ebba 0b04 	subs.w	fp, sl, r4
 801aca8:	d00b      	beq.n	801acc2 <_svfiprintf_r+0x7e>
 801acaa:	465b      	mov	r3, fp
 801acac:	4622      	mov	r2, r4
 801acae:	4629      	mov	r1, r5
 801acb0:	4638      	mov	r0, r7
 801acb2:	f7ff ff67 	bl	801ab84 <__ssputs_r>
 801acb6:	3001      	adds	r0, #1
 801acb8:	f000 80a7 	beq.w	801ae0a <_svfiprintf_r+0x1c6>
 801acbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801acbe:	445a      	add	r2, fp
 801acc0:	9209      	str	r2, [sp, #36]	@ 0x24
 801acc2:	f89a 3000 	ldrb.w	r3, [sl]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	f000 809f 	beq.w	801ae0a <_svfiprintf_r+0x1c6>
 801accc:	2300      	movs	r3, #0
 801acce:	f04f 32ff 	mov.w	r2, #4294967295
 801acd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801acd6:	f10a 0a01 	add.w	sl, sl, #1
 801acda:	9304      	str	r3, [sp, #16]
 801acdc:	9307      	str	r3, [sp, #28]
 801acde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ace2:	931a      	str	r3, [sp, #104]	@ 0x68
 801ace4:	4654      	mov	r4, sl
 801ace6:	2205      	movs	r2, #5
 801ace8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acec:	484e      	ldr	r0, [pc, #312]	@ (801ae28 <_svfiprintf_r+0x1e4>)
 801acee:	f7e5 faf7 	bl	80002e0 <memchr>
 801acf2:	9a04      	ldr	r2, [sp, #16]
 801acf4:	b9d8      	cbnz	r0, 801ad2e <_svfiprintf_r+0xea>
 801acf6:	06d0      	lsls	r0, r2, #27
 801acf8:	bf44      	itt	mi
 801acfa:	2320      	movmi	r3, #32
 801acfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad00:	0711      	lsls	r1, r2, #28
 801ad02:	bf44      	itt	mi
 801ad04:	232b      	movmi	r3, #43	@ 0x2b
 801ad06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad0a:	f89a 3000 	ldrb.w	r3, [sl]
 801ad0e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ad10:	d015      	beq.n	801ad3e <_svfiprintf_r+0xfa>
 801ad12:	9a07      	ldr	r2, [sp, #28]
 801ad14:	4654      	mov	r4, sl
 801ad16:	2000      	movs	r0, #0
 801ad18:	f04f 0c0a 	mov.w	ip, #10
 801ad1c:	4621      	mov	r1, r4
 801ad1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ad22:	3b30      	subs	r3, #48	@ 0x30
 801ad24:	2b09      	cmp	r3, #9
 801ad26:	d94b      	bls.n	801adc0 <_svfiprintf_r+0x17c>
 801ad28:	b1b0      	cbz	r0, 801ad58 <_svfiprintf_r+0x114>
 801ad2a:	9207      	str	r2, [sp, #28]
 801ad2c:	e014      	b.n	801ad58 <_svfiprintf_r+0x114>
 801ad2e:	eba0 0308 	sub.w	r3, r0, r8
 801ad32:	fa09 f303 	lsl.w	r3, r9, r3
 801ad36:	4313      	orrs	r3, r2
 801ad38:	9304      	str	r3, [sp, #16]
 801ad3a:	46a2      	mov	sl, r4
 801ad3c:	e7d2      	b.n	801ace4 <_svfiprintf_r+0xa0>
 801ad3e:	9b03      	ldr	r3, [sp, #12]
 801ad40:	1d19      	adds	r1, r3, #4
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	9103      	str	r1, [sp, #12]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	bfbb      	ittet	lt
 801ad4a:	425b      	neglt	r3, r3
 801ad4c:	f042 0202 	orrlt.w	r2, r2, #2
 801ad50:	9307      	strge	r3, [sp, #28]
 801ad52:	9307      	strlt	r3, [sp, #28]
 801ad54:	bfb8      	it	lt
 801ad56:	9204      	strlt	r2, [sp, #16]
 801ad58:	7823      	ldrb	r3, [r4, #0]
 801ad5a:	2b2e      	cmp	r3, #46	@ 0x2e
 801ad5c:	d10a      	bne.n	801ad74 <_svfiprintf_r+0x130>
 801ad5e:	7863      	ldrb	r3, [r4, #1]
 801ad60:	2b2a      	cmp	r3, #42	@ 0x2a
 801ad62:	d132      	bne.n	801adca <_svfiprintf_r+0x186>
 801ad64:	9b03      	ldr	r3, [sp, #12]
 801ad66:	1d1a      	adds	r2, r3, #4
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	9203      	str	r2, [sp, #12]
 801ad6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ad70:	3402      	adds	r4, #2
 801ad72:	9305      	str	r3, [sp, #20]
 801ad74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ae38 <_svfiprintf_r+0x1f4>
 801ad78:	7821      	ldrb	r1, [r4, #0]
 801ad7a:	2203      	movs	r2, #3
 801ad7c:	4650      	mov	r0, sl
 801ad7e:	f7e5 faaf 	bl	80002e0 <memchr>
 801ad82:	b138      	cbz	r0, 801ad94 <_svfiprintf_r+0x150>
 801ad84:	9b04      	ldr	r3, [sp, #16]
 801ad86:	eba0 000a 	sub.w	r0, r0, sl
 801ad8a:	2240      	movs	r2, #64	@ 0x40
 801ad8c:	4082      	lsls	r2, r0
 801ad8e:	4313      	orrs	r3, r2
 801ad90:	3401      	adds	r4, #1
 801ad92:	9304      	str	r3, [sp, #16]
 801ad94:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad98:	4824      	ldr	r0, [pc, #144]	@ (801ae2c <_svfiprintf_r+0x1e8>)
 801ad9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ad9e:	2206      	movs	r2, #6
 801ada0:	f7e5 fa9e 	bl	80002e0 <memchr>
 801ada4:	2800      	cmp	r0, #0
 801ada6:	d036      	beq.n	801ae16 <_svfiprintf_r+0x1d2>
 801ada8:	4b21      	ldr	r3, [pc, #132]	@ (801ae30 <_svfiprintf_r+0x1ec>)
 801adaa:	bb1b      	cbnz	r3, 801adf4 <_svfiprintf_r+0x1b0>
 801adac:	9b03      	ldr	r3, [sp, #12]
 801adae:	3307      	adds	r3, #7
 801adb0:	f023 0307 	bic.w	r3, r3, #7
 801adb4:	3308      	adds	r3, #8
 801adb6:	9303      	str	r3, [sp, #12]
 801adb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801adba:	4433      	add	r3, r6
 801adbc:	9309      	str	r3, [sp, #36]	@ 0x24
 801adbe:	e76a      	b.n	801ac96 <_svfiprintf_r+0x52>
 801adc0:	fb0c 3202 	mla	r2, ip, r2, r3
 801adc4:	460c      	mov	r4, r1
 801adc6:	2001      	movs	r0, #1
 801adc8:	e7a8      	b.n	801ad1c <_svfiprintf_r+0xd8>
 801adca:	2300      	movs	r3, #0
 801adcc:	3401      	adds	r4, #1
 801adce:	9305      	str	r3, [sp, #20]
 801add0:	4619      	mov	r1, r3
 801add2:	f04f 0c0a 	mov.w	ip, #10
 801add6:	4620      	mov	r0, r4
 801add8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801addc:	3a30      	subs	r2, #48	@ 0x30
 801adde:	2a09      	cmp	r2, #9
 801ade0:	d903      	bls.n	801adea <_svfiprintf_r+0x1a6>
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d0c6      	beq.n	801ad74 <_svfiprintf_r+0x130>
 801ade6:	9105      	str	r1, [sp, #20]
 801ade8:	e7c4      	b.n	801ad74 <_svfiprintf_r+0x130>
 801adea:	fb0c 2101 	mla	r1, ip, r1, r2
 801adee:	4604      	mov	r4, r0
 801adf0:	2301      	movs	r3, #1
 801adf2:	e7f0      	b.n	801add6 <_svfiprintf_r+0x192>
 801adf4:	ab03      	add	r3, sp, #12
 801adf6:	9300      	str	r3, [sp, #0]
 801adf8:	462a      	mov	r2, r5
 801adfa:	4b0e      	ldr	r3, [pc, #56]	@ (801ae34 <_svfiprintf_r+0x1f0>)
 801adfc:	a904      	add	r1, sp, #16
 801adfe:	4638      	mov	r0, r7
 801ae00:	f3af 8000 	nop.w
 801ae04:	1c42      	adds	r2, r0, #1
 801ae06:	4606      	mov	r6, r0
 801ae08:	d1d6      	bne.n	801adb8 <_svfiprintf_r+0x174>
 801ae0a:	89ab      	ldrh	r3, [r5, #12]
 801ae0c:	065b      	lsls	r3, r3, #25
 801ae0e:	f53f af2d 	bmi.w	801ac6c <_svfiprintf_r+0x28>
 801ae12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ae14:	e72c      	b.n	801ac70 <_svfiprintf_r+0x2c>
 801ae16:	ab03      	add	r3, sp, #12
 801ae18:	9300      	str	r3, [sp, #0]
 801ae1a:	462a      	mov	r2, r5
 801ae1c:	4b05      	ldr	r3, [pc, #20]	@ (801ae34 <_svfiprintf_r+0x1f0>)
 801ae1e:	a904      	add	r1, sp, #16
 801ae20:	4638      	mov	r0, r7
 801ae22:	f000 f9bb 	bl	801b19c <_printf_i>
 801ae26:	e7ed      	b.n	801ae04 <_svfiprintf_r+0x1c0>
 801ae28:	0801d940 	.word	0x0801d940
 801ae2c:	0801d94a 	.word	0x0801d94a
 801ae30:	00000000 	.word	0x00000000
 801ae34:	0801ab85 	.word	0x0801ab85
 801ae38:	0801d946 	.word	0x0801d946

0801ae3c <__sfputc_r>:
 801ae3c:	6893      	ldr	r3, [r2, #8]
 801ae3e:	3b01      	subs	r3, #1
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	b410      	push	{r4}
 801ae44:	6093      	str	r3, [r2, #8]
 801ae46:	da08      	bge.n	801ae5a <__sfputc_r+0x1e>
 801ae48:	6994      	ldr	r4, [r2, #24]
 801ae4a:	42a3      	cmp	r3, r4
 801ae4c:	db01      	blt.n	801ae52 <__sfputc_r+0x16>
 801ae4e:	290a      	cmp	r1, #10
 801ae50:	d103      	bne.n	801ae5a <__sfputc_r+0x1e>
 801ae52:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae56:	f7ff bc53 	b.w	801a700 <__swbuf_r>
 801ae5a:	6813      	ldr	r3, [r2, #0]
 801ae5c:	1c58      	adds	r0, r3, #1
 801ae5e:	6010      	str	r0, [r2, #0]
 801ae60:	7019      	strb	r1, [r3, #0]
 801ae62:	4608      	mov	r0, r1
 801ae64:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae68:	4770      	bx	lr

0801ae6a <__sfputs_r>:
 801ae6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae6c:	4606      	mov	r6, r0
 801ae6e:	460f      	mov	r7, r1
 801ae70:	4614      	mov	r4, r2
 801ae72:	18d5      	adds	r5, r2, r3
 801ae74:	42ac      	cmp	r4, r5
 801ae76:	d101      	bne.n	801ae7c <__sfputs_r+0x12>
 801ae78:	2000      	movs	r0, #0
 801ae7a:	e007      	b.n	801ae8c <__sfputs_r+0x22>
 801ae7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae80:	463a      	mov	r2, r7
 801ae82:	4630      	mov	r0, r6
 801ae84:	f7ff ffda 	bl	801ae3c <__sfputc_r>
 801ae88:	1c43      	adds	r3, r0, #1
 801ae8a:	d1f3      	bne.n	801ae74 <__sfputs_r+0xa>
 801ae8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ae90 <_vfiprintf_r>:
 801ae90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae94:	460d      	mov	r5, r1
 801ae96:	b09d      	sub	sp, #116	@ 0x74
 801ae98:	4614      	mov	r4, r2
 801ae9a:	4698      	mov	r8, r3
 801ae9c:	4606      	mov	r6, r0
 801ae9e:	b118      	cbz	r0, 801aea8 <_vfiprintf_r+0x18>
 801aea0:	6a03      	ldr	r3, [r0, #32]
 801aea2:	b90b      	cbnz	r3, 801aea8 <_vfiprintf_r+0x18>
 801aea4:	f7ff fa1c 	bl	801a2e0 <__sinit>
 801aea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aeaa:	07d9      	lsls	r1, r3, #31
 801aeac:	d405      	bmi.n	801aeba <_vfiprintf_r+0x2a>
 801aeae:	89ab      	ldrh	r3, [r5, #12]
 801aeb0:	059a      	lsls	r2, r3, #22
 801aeb2:	d402      	bmi.n	801aeba <_vfiprintf_r+0x2a>
 801aeb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801aeb6:	f7ff fd54 	bl	801a962 <__retarget_lock_acquire_recursive>
 801aeba:	89ab      	ldrh	r3, [r5, #12]
 801aebc:	071b      	lsls	r3, r3, #28
 801aebe:	d501      	bpl.n	801aec4 <_vfiprintf_r+0x34>
 801aec0:	692b      	ldr	r3, [r5, #16]
 801aec2:	b99b      	cbnz	r3, 801aeec <_vfiprintf_r+0x5c>
 801aec4:	4629      	mov	r1, r5
 801aec6:	4630      	mov	r0, r6
 801aec8:	f7ff fc58 	bl	801a77c <__swsetup_r>
 801aecc:	b170      	cbz	r0, 801aeec <_vfiprintf_r+0x5c>
 801aece:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aed0:	07dc      	lsls	r4, r3, #31
 801aed2:	d504      	bpl.n	801aede <_vfiprintf_r+0x4e>
 801aed4:	f04f 30ff 	mov.w	r0, #4294967295
 801aed8:	b01d      	add	sp, #116	@ 0x74
 801aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aede:	89ab      	ldrh	r3, [r5, #12]
 801aee0:	0598      	lsls	r0, r3, #22
 801aee2:	d4f7      	bmi.n	801aed4 <_vfiprintf_r+0x44>
 801aee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801aee6:	f7ff fd3d 	bl	801a964 <__retarget_lock_release_recursive>
 801aeea:	e7f3      	b.n	801aed4 <_vfiprintf_r+0x44>
 801aeec:	2300      	movs	r3, #0
 801aeee:	9309      	str	r3, [sp, #36]	@ 0x24
 801aef0:	2320      	movs	r3, #32
 801aef2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801aef6:	f8cd 800c 	str.w	r8, [sp, #12]
 801aefa:	2330      	movs	r3, #48	@ 0x30
 801aefc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b0ac <_vfiprintf_r+0x21c>
 801af00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801af04:	f04f 0901 	mov.w	r9, #1
 801af08:	4623      	mov	r3, r4
 801af0a:	469a      	mov	sl, r3
 801af0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af10:	b10a      	cbz	r2, 801af16 <_vfiprintf_r+0x86>
 801af12:	2a25      	cmp	r2, #37	@ 0x25
 801af14:	d1f9      	bne.n	801af0a <_vfiprintf_r+0x7a>
 801af16:	ebba 0b04 	subs.w	fp, sl, r4
 801af1a:	d00b      	beq.n	801af34 <_vfiprintf_r+0xa4>
 801af1c:	465b      	mov	r3, fp
 801af1e:	4622      	mov	r2, r4
 801af20:	4629      	mov	r1, r5
 801af22:	4630      	mov	r0, r6
 801af24:	f7ff ffa1 	bl	801ae6a <__sfputs_r>
 801af28:	3001      	adds	r0, #1
 801af2a:	f000 80a7 	beq.w	801b07c <_vfiprintf_r+0x1ec>
 801af2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801af30:	445a      	add	r2, fp
 801af32:	9209      	str	r2, [sp, #36]	@ 0x24
 801af34:	f89a 3000 	ldrb.w	r3, [sl]
 801af38:	2b00      	cmp	r3, #0
 801af3a:	f000 809f 	beq.w	801b07c <_vfiprintf_r+0x1ec>
 801af3e:	2300      	movs	r3, #0
 801af40:	f04f 32ff 	mov.w	r2, #4294967295
 801af44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801af48:	f10a 0a01 	add.w	sl, sl, #1
 801af4c:	9304      	str	r3, [sp, #16]
 801af4e:	9307      	str	r3, [sp, #28]
 801af50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801af54:	931a      	str	r3, [sp, #104]	@ 0x68
 801af56:	4654      	mov	r4, sl
 801af58:	2205      	movs	r2, #5
 801af5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af5e:	4853      	ldr	r0, [pc, #332]	@ (801b0ac <_vfiprintf_r+0x21c>)
 801af60:	f7e5 f9be 	bl	80002e0 <memchr>
 801af64:	9a04      	ldr	r2, [sp, #16]
 801af66:	b9d8      	cbnz	r0, 801afa0 <_vfiprintf_r+0x110>
 801af68:	06d1      	lsls	r1, r2, #27
 801af6a:	bf44      	itt	mi
 801af6c:	2320      	movmi	r3, #32
 801af6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801af72:	0713      	lsls	r3, r2, #28
 801af74:	bf44      	itt	mi
 801af76:	232b      	movmi	r3, #43	@ 0x2b
 801af78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801af7c:	f89a 3000 	ldrb.w	r3, [sl]
 801af80:	2b2a      	cmp	r3, #42	@ 0x2a
 801af82:	d015      	beq.n	801afb0 <_vfiprintf_r+0x120>
 801af84:	9a07      	ldr	r2, [sp, #28]
 801af86:	4654      	mov	r4, sl
 801af88:	2000      	movs	r0, #0
 801af8a:	f04f 0c0a 	mov.w	ip, #10
 801af8e:	4621      	mov	r1, r4
 801af90:	f811 3b01 	ldrb.w	r3, [r1], #1
 801af94:	3b30      	subs	r3, #48	@ 0x30
 801af96:	2b09      	cmp	r3, #9
 801af98:	d94b      	bls.n	801b032 <_vfiprintf_r+0x1a2>
 801af9a:	b1b0      	cbz	r0, 801afca <_vfiprintf_r+0x13a>
 801af9c:	9207      	str	r2, [sp, #28]
 801af9e:	e014      	b.n	801afca <_vfiprintf_r+0x13a>
 801afa0:	eba0 0308 	sub.w	r3, r0, r8
 801afa4:	fa09 f303 	lsl.w	r3, r9, r3
 801afa8:	4313      	orrs	r3, r2
 801afaa:	9304      	str	r3, [sp, #16]
 801afac:	46a2      	mov	sl, r4
 801afae:	e7d2      	b.n	801af56 <_vfiprintf_r+0xc6>
 801afb0:	9b03      	ldr	r3, [sp, #12]
 801afb2:	1d19      	adds	r1, r3, #4
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	9103      	str	r1, [sp, #12]
 801afb8:	2b00      	cmp	r3, #0
 801afba:	bfbb      	ittet	lt
 801afbc:	425b      	neglt	r3, r3
 801afbe:	f042 0202 	orrlt.w	r2, r2, #2
 801afc2:	9307      	strge	r3, [sp, #28]
 801afc4:	9307      	strlt	r3, [sp, #28]
 801afc6:	bfb8      	it	lt
 801afc8:	9204      	strlt	r2, [sp, #16]
 801afca:	7823      	ldrb	r3, [r4, #0]
 801afcc:	2b2e      	cmp	r3, #46	@ 0x2e
 801afce:	d10a      	bne.n	801afe6 <_vfiprintf_r+0x156>
 801afd0:	7863      	ldrb	r3, [r4, #1]
 801afd2:	2b2a      	cmp	r3, #42	@ 0x2a
 801afd4:	d132      	bne.n	801b03c <_vfiprintf_r+0x1ac>
 801afd6:	9b03      	ldr	r3, [sp, #12]
 801afd8:	1d1a      	adds	r2, r3, #4
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	9203      	str	r2, [sp, #12]
 801afde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801afe2:	3402      	adds	r4, #2
 801afe4:	9305      	str	r3, [sp, #20]
 801afe6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b0bc <_vfiprintf_r+0x22c>
 801afea:	7821      	ldrb	r1, [r4, #0]
 801afec:	2203      	movs	r2, #3
 801afee:	4650      	mov	r0, sl
 801aff0:	f7e5 f976 	bl	80002e0 <memchr>
 801aff4:	b138      	cbz	r0, 801b006 <_vfiprintf_r+0x176>
 801aff6:	9b04      	ldr	r3, [sp, #16]
 801aff8:	eba0 000a 	sub.w	r0, r0, sl
 801affc:	2240      	movs	r2, #64	@ 0x40
 801affe:	4082      	lsls	r2, r0
 801b000:	4313      	orrs	r3, r2
 801b002:	3401      	adds	r4, #1
 801b004:	9304      	str	r3, [sp, #16]
 801b006:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b00a:	4829      	ldr	r0, [pc, #164]	@ (801b0b0 <_vfiprintf_r+0x220>)
 801b00c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b010:	2206      	movs	r2, #6
 801b012:	f7e5 f965 	bl	80002e0 <memchr>
 801b016:	2800      	cmp	r0, #0
 801b018:	d03f      	beq.n	801b09a <_vfiprintf_r+0x20a>
 801b01a:	4b26      	ldr	r3, [pc, #152]	@ (801b0b4 <_vfiprintf_r+0x224>)
 801b01c:	bb1b      	cbnz	r3, 801b066 <_vfiprintf_r+0x1d6>
 801b01e:	9b03      	ldr	r3, [sp, #12]
 801b020:	3307      	adds	r3, #7
 801b022:	f023 0307 	bic.w	r3, r3, #7
 801b026:	3308      	adds	r3, #8
 801b028:	9303      	str	r3, [sp, #12]
 801b02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b02c:	443b      	add	r3, r7
 801b02e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b030:	e76a      	b.n	801af08 <_vfiprintf_r+0x78>
 801b032:	fb0c 3202 	mla	r2, ip, r2, r3
 801b036:	460c      	mov	r4, r1
 801b038:	2001      	movs	r0, #1
 801b03a:	e7a8      	b.n	801af8e <_vfiprintf_r+0xfe>
 801b03c:	2300      	movs	r3, #0
 801b03e:	3401      	adds	r4, #1
 801b040:	9305      	str	r3, [sp, #20]
 801b042:	4619      	mov	r1, r3
 801b044:	f04f 0c0a 	mov.w	ip, #10
 801b048:	4620      	mov	r0, r4
 801b04a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b04e:	3a30      	subs	r2, #48	@ 0x30
 801b050:	2a09      	cmp	r2, #9
 801b052:	d903      	bls.n	801b05c <_vfiprintf_r+0x1cc>
 801b054:	2b00      	cmp	r3, #0
 801b056:	d0c6      	beq.n	801afe6 <_vfiprintf_r+0x156>
 801b058:	9105      	str	r1, [sp, #20]
 801b05a:	e7c4      	b.n	801afe6 <_vfiprintf_r+0x156>
 801b05c:	fb0c 2101 	mla	r1, ip, r1, r2
 801b060:	4604      	mov	r4, r0
 801b062:	2301      	movs	r3, #1
 801b064:	e7f0      	b.n	801b048 <_vfiprintf_r+0x1b8>
 801b066:	ab03      	add	r3, sp, #12
 801b068:	9300      	str	r3, [sp, #0]
 801b06a:	462a      	mov	r2, r5
 801b06c:	4b12      	ldr	r3, [pc, #72]	@ (801b0b8 <_vfiprintf_r+0x228>)
 801b06e:	a904      	add	r1, sp, #16
 801b070:	4630      	mov	r0, r6
 801b072:	f3af 8000 	nop.w
 801b076:	4607      	mov	r7, r0
 801b078:	1c78      	adds	r0, r7, #1
 801b07a:	d1d6      	bne.n	801b02a <_vfiprintf_r+0x19a>
 801b07c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b07e:	07d9      	lsls	r1, r3, #31
 801b080:	d405      	bmi.n	801b08e <_vfiprintf_r+0x1fe>
 801b082:	89ab      	ldrh	r3, [r5, #12]
 801b084:	059a      	lsls	r2, r3, #22
 801b086:	d402      	bmi.n	801b08e <_vfiprintf_r+0x1fe>
 801b088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b08a:	f7ff fc6b 	bl	801a964 <__retarget_lock_release_recursive>
 801b08e:	89ab      	ldrh	r3, [r5, #12]
 801b090:	065b      	lsls	r3, r3, #25
 801b092:	f53f af1f 	bmi.w	801aed4 <_vfiprintf_r+0x44>
 801b096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b098:	e71e      	b.n	801aed8 <_vfiprintf_r+0x48>
 801b09a:	ab03      	add	r3, sp, #12
 801b09c:	9300      	str	r3, [sp, #0]
 801b09e:	462a      	mov	r2, r5
 801b0a0:	4b05      	ldr	r3, [pc, #20]	@ (801b0b8 <_vfiprintf_r+0x228>)
 801b0a2:	a904      	add	r1, sp, #16
 801b0a4:	4630      	mov	r0, r6
 801b0a6:	f000 f879 	bl	801b19c <_printf_i>
 801b0aa:	e7e4      	b.n	801b076 <_vfiprintf_r+0x1e6>
 801b0ac:	0801d940 	.word	0x0801d940
 801b0b0:	0801d94a 	.word	0x0801d94a
 801b0b4:	00000000 	.word	0x00000000
 801b0b8:	0801ae6b 	.word	0x0801ae6b
 801b0bc:	0801d946 	.word	0x0801d946

0801b0c0 <_printf_common>:
 801b0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0c4:	4616      	mov	r6, r2
 801b0c6:	4698      	mov	r8, r3
 801b0c8:	688a      	ldr	r2, [r1, #8]
 801b0ca:	690b      	ldr	r3, [r1, #16]
 801b0cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b0d0:	4293      	cmp	r3, r2
 801b0d2:	bfb8      	it	lt
 801b0d4:	4613      	movlt	r3, r2
 801b0d6:	6033      	str	r3, [r6, #0]
 801b0d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b0dc:	4607      	mov	r7, r0
 801b0de:	460c      	mov	r4, r1
 801b0e0:	b10a      	cbz	r2, 801b0e6 <_printf_common+0x26>
 801b0e2:	3301      	adds	r3, #1
 801b0e4:	6033      	str	r3, [r6, #0]
 801b0e6:	6823      	ldr	r3, [r4, #0]
 801b0e8:	0699      	lsls	r1, r3, #26
 801b0ea:	bf42      	ittt	mi
 801b0ec:	6833      	ldrmi	r3, [r6, #0]
 801b0ee:	3302      	addmi	r3, #2
 801b0f0:	6033      	strmi	r3, [r6, #0]
 801b0f2:	6825      	ldr	r5, [r4, #0]
 801b0f4:	f015 0506 	ands.w	r5, r5, #6
 801b0f8:	d106      	bne.n	801b108 <_printf_common+0x48>
 801b0fa:	f104 0a19 	add.w	sl, r4, #25
 801b0fe:	68e3      	ldr	r3, [r4, #12]
 801b100:	6832      	ldr	r2, [r6, #0]
 801b102:	1a9b      	subs	r3, r3, r2
 801b104:	42ab      	cmp	r3, r5
 801b106:	dc26      	bgt.n	801b156 <_printf_common+0x96>
 801b108:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b10c:	6822      	ldr	r2, [r4, #0]
 801b10e:	3b00      	subs	r3, #0
 801b110:	bf18      	it	ne
 801b112:	2301      	movne	r3, #1
 801b114:	0692      	lsls	r2, r2, #26
 801b116:	d42b      	bmi.n	801b170 <_printf_common+0xb0>
 801b118:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b11c:	4641      	mov	r1, r8
 801b11e:	4638      	mov	r0, r7
 801b120:	47c8      	blx	r9
 801b122:	3001      	adds	r0, #1
 801b124:	d01e      	beq.n	801b164 <_printf_common+0xa4>
 801b126:	6823      	ldr	r3, [r4, #0]
 801b128:	6922      	ldr	r2, [r4, #16]
 801b12a:	f003 0306 	and.w	r3, r3, #6
 801b12e:	2b04      	cmp	r3, #4
 801b130:	bf02      	ittt	eq
 801b132:	68e5      	ldreq	r5, [r4, #12]
 801b134:	6833      	ldreq	r3, [r6, #0]
 801b136:	1aed      	subeq	r5, r5, r3
 801b138:	68a3      	ldr	r3, [r4, #8]
 801b13a:	bf0c      	ite	eq
 801b13c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b140:	2500      	movne	r5, #0
 801b142:	4293      	cmp	r3, r2
 801b144:	bfc4      	itt	gt
 801b146:	1a9b      	subgt	r3, r3, r2
 801b148:	18ed      	addgt	r5, r5, r3
 801b14a:	2600      	movs	r6, #0
 801b14c:	341a      	adds	r4, #26
 801b14e:	42b5      	cmp	r5, r6
 801b150:	d11a      	bne.n	801b188 <_printf_common+0xc8>
 801b152:	2000      	movs	r0, #0
 801b154:	e008      	b.n	801b168 <_printf_common+0xa8>
 801b156:	2301      	movs	r3, #1
 801b158:	4652      	mov	r2, sl
 801b15a:	4641      	mov	r1, r8
 801b15c:	4638      	mov	r0, r7
 801b15e:	47c8      	blx	r9
 801b160:	3001      	adds	r0, #1
 801b162:	d103      	bne.n	801b16c <_printf_common+0xac>
 801b164:	f04f 30ff 	mov.w	r0, #4294967295
 801b168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b16c:	3501      	adds	r5, #1
 801b16e:	e7c6      	b.n	801b0fe <_printf_common+0x3e>
 801b170:	18e1      	adds	r1, r4, r3
 801b172:	1c5a      	adds	r2, r3, #1
 801b174:	2030      	movs	r0, #48	@ 0x30
 801b176:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b17a:	4422      	add	r2, r4
 801b17c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b184:	3302      	adds	r3, #2
 801b186:	e7c7      	b.n	801b118 <_printf_common+0x58>
 801b188:	2301      	movs	r3, #1
 801b18a:	4622      	mov	r2, r4
 801b18c:	4641      	mov	r1, r8
 801b18e:	4638      	mov	r0, r7
 801b190:	47c8      	blx	r9
 801b192:	3001      	adds	r0, #1
 801b194:	d0e6      	beq.n	801b164 <_printf_common+0xa4>
 801b196:	3601      	adds	r6, #1
 801b198:	e7d9      	b.n	801b14e <_printf_common+0x8e>
	...

0801b19c <_printf_i>:
 801b19c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b1a0:	7e0f      	ldrb	r7, [r1, #24]
 801b1a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b1a4:	2f78      	cmp	r7, #120	@ 0x78
 801b1a6:	4691      	mov	r9, r2
 801b1a8:	4680      	mov	r8, r0
 801b1aa:	460c      	mov	r4, r1
 801b1ac:	469a      	mov	sl, r3
 801b1ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b1b2:	d807      	bhi.n	801b1c4 <_printf_i+0x28>
 801b1b4:	2f62      	cmp	r7, #98	@ 0x62
 801b1b6:	d80a      	bhi.n	801b1ce <_printf_i+0x32>
 801b1b8:	2f00      	cmp	r7, #0
 801b1ba:	f000 80d2 	beq.w	801b362 <_printf_i+0x1c6>
 801b1be:	2f58      	cmp	r7, #88	@ 0x58
 801b1c0:	f000 80b7 	beq.w	801b332 <_printf_i+0x196>
 801b1c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b1c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b1cc:	e03a      	b.n	801b244 <_printf_i+0xa8>
 801b1ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b1d2:	2b15      	cmp	r3, #21
 801b1d4:	d8f6      	bhi.n	801b1c4 <_printf_i+0x28>
 801b1d6:	a101      	add	r1, pc, #4	@ (adr r1, 801b1dc <_printf_i+0x40>)
 801b1d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b1dc:	0801b235 	.word	0x0801b235
 801b1e0:	0801b249 	.word	0x0801b249
 801b1e4:	0801b1c5 	.word	0x0801b1c5
 801b1e8:	0801b1c5 	.word	0x0801b1c5
 801b1ec:	0801b1c5 	.word	0x0801b1c5
 801b1f0:	0801b1c5 	.word	0x0801b1c5
 801b1f4:	0801b249 	.word	0x0801b249
 801b1f8:	0801b1c5 	.word	0x0801b1c5
 801b1fc:	0801b1c5 	.word	0x0801b1c5
 801b200:	0801b1c5 	.word	0x0801b1c5
 801b204:	0801b1c5 	.word	0x0801b1c5
 801b208:	0801b349 	.word	0x0801b349
 801b20c:	0801b273 	.word	0x0801b273
 801b210:	0801b2ff 	.word	0x0801b2ff
 801b214:	0801b1c5 	.word	0x0801b1c5
 801b218:	0801b1c5 	.word	0x0801b1c5
 801b21c:	0801b36b 	.word	0x0801b36b
 801b220:	0801b1c5 	.word	0x0801b1c5
 801b224:	0801b273 	.word	0x0801b273
 801b228:	0801b1c5 	.word	0x0801b1c5
 801b22c:	0801b1c5 	.word	0x0801b1c5
 801b230:	0801b307 	.word	0x0801b307
 801b234:	6833      	ldr	r3, [r6, #0]
 801b236:	1d1a      	adds	r2, r3, #4
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	6032      	str	r2, [r6, #0]
 801b23c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b240:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b244:	2301      	movs	r3, #1
 801b246:	e09d      	b.n	801b384 <_printf_i+0x1e8>
 801b248:	6833      	ldr	r3, [r6, #0]
 801b24a:	6820      	ldr	r0, [r4, #0]
 801b24c:	1d19      	adds	r1, r3, #4
 801b24e:	6031      	str	r1, [r6, #0]
 801b250:	0606      	lsls	r6, r0, #24
 801b252:	d501      	bpl.n	801b258 <_printf_i+0xbc>
 801b254:	681d      	ldr	r5, [r3, #0]
 801b256:	e003      	b.n	801b260 <_printf_i+0xc4>
 801b258:	0645      	lsls	r5, r0, #25
 801b25a:	d5fb      	bpl.n	801b254 <_printf_i+0xb8>
 801b25c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b260:	2d00      	cmp	r5, #0
 801b262:	da03      	bge.n	801b26c <_printf_i+0xd0>
 801b264:	232d      	movs	r3, #45	@ 0x2d
 801b266:	426d      	negs	r5, r5
 801b268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b26c:	4859      	ldr	r0, [pc, #356]	@ (801b3d4 <_printf_i+0x238>)
 801b26e:	230a      	movs	r3, #10
 801b270:	e010      	b.n	801b294 <_printf_i+0xf8>
 801b272:	6821      	ldr	r1, [r4, #0]
 801b274:	6833      	ldr	r3, [r6, #0]
 801b276:	0608      	lsls	r0, r1, #24
 801b278:	f853 5b04 	ldr.w	r5, [r3], #4
 801b27c:	d402      	bmi.n	801b284 <_printf_i+0xe8>
 801b27e:	0649      	lsls	r1, r1, #25
 801b280:	bf48      	it	mi
 801b282:	b2ad      	uxthmi	r5, r5
 801b284:	2f6f      	cmp	r7, #111	@ 0x6f
 801b286:	4853      	ldr	r0, [pc, #332]	@ (801b3d4 <_printf_i+0x238>)
 801b288:	6033      	str	r3, [r6, #0]
 801b28a:	d159      	bne.n	801b340 <_printf_i+0x1a4>
 801b28c:	2308      	movs	r3, #8
 801b28e:	2100      	movs	r1, #0
 801b290:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b294:	6866      	ldr	r6, [r4, #4]
 801b296:	60a6      	str	r6, [r4, #8]
 801b298:	2e00      	cmp	r6, #0
 801b29a:	db05      	blt.n	801b2a8 <_printf_i+0x10c>
 801b29c:	6821      	ldr	r1, [r4, #0]
 801b29e:	432e      	orrs	r6, r5
 801b2a0:	f021 0104 	bic.w	r1, r1, #4
 801b2a4:	6021      	str	r1, [r4, #0]
 801b2a6:	d04d      	beq.n	801b344 <_printf_i+0x1a8>
 801b2a8:	4616      	mov	r6, r2
 801b2aa:	fbb5 f1f3 	udiv	r1, r5, r3
 801b2ae:	fb03 5711 	mls	r7, r3, r1, r5
 801b2b2:	5dc7      	ldrb	r7, [r0, r7]
 801b2b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b2b8:	462f      	mov	r7, r5
 801b2ba:	42bb      	cmp	r3, r7
 801b2bc:	460d      	mov	r5, r1
 801b2be:	d9f4      	bls.n	801b2aa <_printf_i+0x10e>
 801b2c0:	2b08      	cmp	r3, #8
 801b2c2:	d10b      	bne.n	801b2dc <_printf_i+0x140>
 801b2c4:	6823      	ldr	r3, [r4, #0]
 801b2c6:	07df      	lsls	r7, r3, #31
 801b2c8:	d508      	bpl.n	801b2dc <_printf_i+0x140>
 801b2ca:	6923      	ldr	r3, [r4, #16]
 801b2cc:	6861      	ldr	r1, [r4, #4]
 801b2ce:	4299      	cmp	r1, r3
 801b2d0:	bfde      	ittt	le
 801b2d2:	2330      	movle	r3, #48	@ 0x30
 801b2d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b2d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b2dc:	1b92      	subs	r2, r2, r6
 801b2de:	6122      	str	r2, [r4, #16]
 801b2e0:	f8cd a000 	str.w	sl, [sp]
 801b2e4:	464b      	mov	r3, r9
 801b2e6:	aa03      	add	r2, sp, #12
 801b2e8:	4621      	mov	r1, r4
 801b2ea:	4640      	mov	r0, r8
 801b2ec:	f7ff fee8 	bl	801b0c0 <_printf_common>
 801b2f0:	3001      	adds	r0, #1
 801b2f2:	d14c      	bne.n	801b38e <_printf_i+0x1f2>
 801b2f4:	f04f 30ff 	mov.w	r0, #4294967295
 801b2f8:	b004      	add	sp, #16
 801b2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2fe:	6823      	ldr	r3, [r4, #0]
 801b300:	f043 0320 	orr.w	r3, r3, #32
 801b304:	6023      	str	r3, [r4, #0]
 801b306:	4834      	ldr	r0, [pc, #208]	@ (801b3d8 <_printf_i+0x23c>)
 801b308:	2778      	movs	r7, #120	@ 0x78
 801b30a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b30e:	6823      	ldr	r3, [r4, #0]
 801b310:	6831      	ldr	r1, [r6, #0]
 801b312:	061f      	lsls	r7, r3, #24
 801b314:	f851 5b04 	ldr.w	r5, [r1], #4
 801b318:	d402      	bmi.n	801b320 <_printf_i+0x184>
 801b31a:	065f      	lsls	r7, r3, #25
 801b31c:	bf48      	it	mi
 801b31e:	b2ad      	uxthmi	r5, r5
 801b320:	6031      	str	r1, [r6, #0]
 801b322:	07d9      	lsls	r1, r3, #31
 801b324:	bf44      	itt	mi
 801b326:	f043 0320 	orrmi.w	r3, r3, #32
 801b32a:	6023      	strmi	r3, [r4, #0]
 801b32c:	b11d      	cbz	r5, 801b336 <_printf_i+0x19a>
 801b32e:	2310      	movs	r3, #16
 801b330:	e7ad      	b.n	801b28e <_printf_i+0xf2>
 801b332:	4828      	ldr	r0, [pc, #160]	@ (801b3d4 <_printf_i+0x238>)
 801b334:	e7e9      	b.n	801b30a <_printf_i+0x16e>
 801b336:	6823      	ldr	r3, [r4, #0]
 801b338:	f023 0320 	bic.w	r3, r3, #32
 801b33c:	6023      	str	r3, [r4, #0]
 801b33e:	e7f6      	b.n	801b32e <_printf_i+0x192>
 801b340:	230a      	movs	r3, #10
 801b342:	e7a4      	b.n	801b28e <_printf_i+0xf2>
 801b344:	4616      	mov	r6, r2
 801b346:	e7bb      	b.n	801b2c0 <_printf_i+0x124>
 801b348:	6833      	ldr	r3, [r6, #0]
 801b34a:	6825      	ldr	r5, [r4, #0]
 801b34c:	6961      	ldr	r1, [r4, #20]
 801b34e:	1d18      	adds	r0, r3, #4
 801b350:	6030      	str	r0, [r6, #0]
 801b352:	062e      	lsls	r6, r5, #24
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	d501      	bpl.n	801b35c <_printf_i+0x1c0>
 801b358:	6019      	str	r1, [r3, #0]
 801b35a:	e002      	b.n	801b362 <_printf_i+0x1c6>
 801b35c:	0668      	lsls	r0, r5, #25
 801b35e:	d5fb      	bpl.n	801b358 <_printf_i+0x1bc>
 801b360:	8019      	strh	r1, [r3, #0]
 801b362:	2300      	movs	r3, #0
 801b364:	6123      	str	r3, [r4, #16]
 801b366:	4616      	mov	r6, r2
 801b368:	e7ba      	b.n	801b2e0 <_printf_i+0x144>
 801b36a:	6833      	ldr	r3, [r6, #0]
 801b36c:	1d1a      	adds	r2, r3, #4
 801b36e:	6032      	str	r2, [r6, #0]
 801b370:	681e      	ldr	r6, [r3, #0]
 801b372:	6862      	ldr	r2, [r4, #4]
 801b374:	2100      	movs	r1, #0
 801b376:	4630      	mov	r0, r6
 801b378:	f7e4 ffb2 	bl	80002e0 <memchr>
 801b37c:	b108      	cbz	r0, 801b382 <_printf_i+0x1e6>
 801b37e:	1b80      	subs	r0, r0, r6
 801b380:	6060      	str	r0, [r4, #4]
 801b382:	6863      	ldr	r3, [r4, #4]
 801b384:	6123      	str	r3, [r4, #16]
 801b386:	2300      	movs	r3, #0
 801b388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b38c:	e7a8      	b.n	801b2e0 <_printf_i+0x144>
 801b38e:	6923      	ldr	r3, [r4, #16]
 801b390:	4632      	mov	r2, r6
 801b392:	4649      	mov	r1, r9
 801b394:	4640      	mov	r0, r8
 801b396:	47d0      	blx	sl
 801b398:	3001      	adds	r0, #1
 801b39a:	d0ab      	beq.n	801b2f4 <_printf_i+0x158>
 801b39c:	6823      	ldr	r3, [r4, #0]
 801b39e:	079b      	lsls	r3, r3, #30
 801b3a0:	d413      	bmi.n	801b3ca <_printf_i+0x22e>
 801b3a2:	68e0      	ldr	r0, [r4, #12]
 801b3a4:	9b03      	ldr	r3, [sp, #12]
 801b3a6:	4298      	cmp	r0, r3
 801b3a8:	bfb8      	it	lt
 801b3aa:	4618      	movlt	r0, r3
 801b3ac:	e7a4      	b.n	801b2f8 <_printf_i+0x15c>
 801b3ae:	2301      	movs	r3, #1
 801b3b0:	4632      	mov	r2, r6
 801b3b2:	4649      	mov	r1, r9
 801b3b4:	4640      	mov	r0, r8
 801b3b6:	47d0      	blx	sl
 801b3b8:	3001      	adds	r0, #1
 801b3ba:	d09b      	beq.n	801b2f4 <_printf_i+0x158>
 801b3bc:	3501      	adds	r5, #1
 801b3be:	68e3      	ldr	r3, [r4, #12]
 801b3c0:	9903      	ldr	r1, [sp, #12]
 801b3c2:	1a5b      	subs	r3, r3, r1
 801b3c4:	42ab      	cmp	r3, r5
 801b3c6:	dcf2      	bgt.n	801b3ae <_printf_i+0x212>
 801b3c8:	e7eb      	b.n	801b3a2 <_printf_i+0x206>
 801b3ca:	2500      	movs	r5, #0
 801b3cc:	f104 0619 	add.w	r6, r4, #25
 801b3d0:	e7f5      	b.n	801b3be <_printf_i+0x222>
 801b3d2:	bf00      	nop
 801b3d4:	0801d951 	.word	0x0801d951
 801b3d8:	0801d962 	.word	0x0801d962

0801b3dc <__sflush_r>:
 801b3dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3e4:	0716      	lsls	r6, r2, #28
 801b3e6:	4605      	mov	r5, r0
 801b3e8:	460c      	mov	r4, r1
 801b3ea:	d451      	bmi.n	801b490 <__sflush_r+0xb4>
 801b3ec:	684b      	ldr	r3, [r1, #4]
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	dc02      	bgt.n	801b3f8 <__sflush_r+0x1c>
 801b3f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	dd49      	ble.n	801b48c <__sflush_r+0xb0>
 801b3f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b3fa:	2e00      	cmp	r6, #0
 801b3fc:	d046      	beq.n	801b48c <__sflush_r+0xb0>
 801b3fe:	2300      	movs	r3, #0
 801b400:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b404:	682f      	ldr	r7, [r5, #0]
 801b406:	602b      	str	r3, [r5, #0]
 801b408:	d031      	beq.n	801b46e <__sflush_r+0x92>
 801b40a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b40c:	89a3      	ldrh	r3, [r4, #12]
 801b40e:	0759      	lsls	r1, r3, #29
 801b410:	d505      	bpl.n	801b41e <__sflush_r+0x42>
 801b412:	6863      	ldr	r3, [r4, #4]
 801b414:	1ad2      	subs	r2, r2, r3
 801b416:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b418:	b10b      	cbz	r3, 801b41e <__sflush_r+0x42>
 801b41a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b41c:	1ad2      	subs	r2, r2, r3
 801b41e:	2300      	movs	r3, #0
 801b420:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b422:	6a21      	ldr	r1, [r4, #32]
 801b424:	4628      	mov	r0, r5
 801b426:	47b0      	blx	r6
 801b428:	1c42      	adds	r2, r0, #1
 801b42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b42e:	d106      	bne.n	801b43e <__sflush_r+0x62>
 801b430:	6829      	ldr	r1, [r5, #0]
 801b432:	291d      	cmp	r1, #29
 801b434:	d846      	bhi.n	801b4c4 <__sflush_r+0xe8>
 801b436:	4a29      	ldr	r2, [pc, #164]	@ (801b4dc <__sflush_r+0x100>)
 801b438:	40ca      	lsrs	r2, r1
 801b43a:	07d6      	lsls	r6, r2, #31
 801b43c:	d542      	bpl.n	801b4c4 <__sflush_r+0xe8>
 801b43e:	2200      	movs	r2, #0
 801b440:	6062      	str	r2, [r4, #4]
 801b442:	04d9      	lsls	r1, r3, #19
 801b444:	6922      	ldr	r2, [r4, #16]
 801b446:	6022      	str	r2, [r4, #0]
 801b448:	d504      	bpl.n	801b454 <__sflush_r+0x78>
 801b44a:	1c42      	adds	r2, r0, #1
 801b44c:	d101      	bne.n	801b452 <__sflush_r+0x76>
 801b44e:	682b      	ldr	r3, [r5, #0]
 801b450:	b903      	cbnz	r3, 801b454 <__sflush_r+0x78>
 801b452:	6560      	str	r0, [r4, #84]	@ 0x54
 801b454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b456:	602f      	str	r7, [r5, #0]
 801b458:	b1c1      	cbz	r1, 801b48c <__sflush_r+0xb0>
 801b45a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b45e:	4299      	cmp	r1, r3
 801b460:	d002      	beq.n	801b468 <__sflush_r+0x8c>
 801b462:	4628      	mov	r0, r5
 801b464:	f7ff fa8e 	bl	801a984 <_free_r>
 801b468:	2300      	movs	r3, #0
 801b46a:	6363      	str	r3, [r4, #52]	@ 0x34
 801b46c:	e00e      	b.n	801b48c <__sflush_r+0xb0>
 801b46e:	6a21      	ldr	r1, [r4, #32]
 801b470:	2301      	movs	r3, #1
 801b472:	4628      	mov	r0, r5
 801b474:	47b0      	blx	r6
 801b476:	4602      	mov	r2, r0
 801b478:	1c50      	adds	r0, r2, #1
 801b47a:	d1c7      	bne.n	801b40c <__sflush_r+0x30>
 801b47c:	682b      	ldr	r3, [r5, #0]
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d0c4      	beq.n	801b40c <__sflush_r+0x30>
 801b482:	2b1d      	cmp	r3, #29
 801b484:	d001      	beq.n	801b48a <__sflush_r+0xae>
 801b486:	2b16      	cmp	r3, #22
 801b488:	d11a      	bne.n	801b4c0 <__sflush_r+0xe4>
 801b48a:	602f      	str	r7, [r5, #0]
 801b48c:	2000      	movs	r0, #0
 801b48e:	e01e      	b.n	801b4ce <__sflush_r+0xf2>
 801b490:	690f      	ldr	r7, [r1, #16]
 801b492:	2f00      	cmp	r7, #0
 801b494:	d0fa      	beq.n	801b48c <__sflush_r+0xb0>
 801b496:	0793      	lsls	r3, r2, #30
 801b498:	680e      	ldr	r6, [r1, #0]
 801b49a:	bf08      	it	eq
 801b49c:	694b      	ldreq	r3, [r1, #20]
 801b49e:	600f      	str	r7, [r1, #0]
 801b4a0:	bf18      	it	ne
 801b4a2:	2300      	movne	r3, #0
 801b4a4:	eba6 0807 	sub.w	r8, r6, r7
 801b4a8:	608b      	str	r3, [r1, #8]
 801b4aa:	f1b8 0f00 	cmp.w	r8, #0
 801b4ae:	dded      	ble.n	801b48c <__sflush_r+0xb0>
 801b4b0:	6a21      	ldr	r1, [r4, #32]
 801b4b2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b4b4:	4643      	mov	r3, r8
 801b4b6:	463a      	mov	r2, r7
 801b4b8:	4628      	mov	r0, r5
 801b4ba:	47b0      	blx	r6
 801b4bc:	2800      	cmp	r0, #0
 801b4be:	dc08      	bgt.n	801b4d2 <__sflush_r+0xf6>
 801b4c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b4c8:	81a3      	strh	r3, [r4, #12]
 801b4ca:	f04f 30ff 	mov.w	r0, #4294967295
 801b4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4d2:	4407      	add	r7, r0
 801b4d4:	eba8 0800 	sub.w	r8, r8, r0
 801b4d8:	e7e7      	b.n	801b4aa <__sflush_r+0xce>
 801b4da:	bf00      	nop
 801b4dc:	20400001 	.word	0x20400001

0801b4e0 <_fflush_r>:
 801b4e0:	b538      	push	{r3, r4, r5, lr}
 801b4e2:	690b      	ldr	r3, [r1, #16]
 801b4e4:	4605      	mov	r5, r0
 801b4e6:	460c      	mov	r4, r1
 801b4e8:	b913      	cbnz	r3, 801b4f0 <_fflush_r+0x10>
 801b4ea:	2500      	movs	r5, #0
 801b4ec:	4628      	mov	r0, r5
 801b4ee:	bd38      	pop	{r3, r4, r5, pc}
 801b4f0:	b118      	cbz	r0, 801b4fa <_fflush_r+0x1a>
 801b4f2:	6a03      	ldr	r3, [r0, #32]
 801b4f4:	b90b      	cbnz	r3, 801b4fa <_fflush_r+0x1a>
 801b4f6:	f7fe fef3 	bl	801a2e0 <__sinit>
 801b4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d0f3      	beq.n	801b4ea <_fflush_r+0xa>
 801b502:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b504:	07d0      	lsls	r0, r2, #31
 801b506:	d404      	bmi.n	801b512 <_fflush_r+0x32>
 801b508:	0599      	lsls	r1, r3, #22
 801b50a:	d402      	bmi.n	801b512 <_fflush_r+0x32>
 801b50c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b50e:	f7ff fa28 	bl	801a962 <__retarget_lock_acquire_recursive>
 801b512:	4628      	mov	r0, r5
 801b514:	4621      	mov	r1, r4
 801b516:	f7ff ff61 	bl	801b3dc <__sflush_r>
 801b51a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b51c:	07da      	lsls	r2, r3, #31
 801b51e:	4605      	mov	r5, r0
 801b520:	d4e4      	bmi.n	801b4ec <_fflush_r+0xc>
 801b522:	89a3      	ldrh	r3, [r4, #12]
 801b524:	059b      	lsls	r3, r3, #22
 801b526:	d4e1      	bmi.n	801b4ec <_fflush_r+0xc>
 801b528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b52a:	f7ff fa1b 	bl	801a964 <__retarget_lock_release_recursive>
 801b52e:	e7dd      	b.n	801b4ec <_fflush_r+0xc>

0801b530 <__swhatbuf_r>:
 801b530:	b570      	push	{r4, r5, r6, lr}
 801b532:	460c      	mov	r4, r1
 801b534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b538:	2900      	cmp	r1, #0
 801b53a:	b096      	sub	sp, #88	@ 0x58
 801b53c:	4615      	mov	r5, r2
 801b53e:	461e      	mov	r6, r3
 801b540:	da0a      	bge.n	801b558 <__swhatbuf_r+0x28>
 801b542:	89a1      	ldrh	r1, [r4, #12]
 801b544:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 801b548:	d113      	bne.n	801b572 <__swhatbuf_r+0x42>
 801b54a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b54e:	2000      	movs	r0, #0
 801b550:	6031      	str	r1, [r6, #0]
 801b552:	602a      	str	r2, [r5, #0]
 801b554:	b016      	add	sp, #88	@ 0x58
 801b556:	bd70      	pop	{r4, r5, r6, pc}
 801b558:	466a      	mov	r2, sp
 801b55a:	f000 f85f 	bl	801b61c <_fstat_r>
 801b55e:	2800      	cmp	r0, #0
 801b560:	dbef      	blt.n	801b542 <__swhatbuf_r+0x12>
 801b562:	9901      	ldr	r1, [sp, #4]
 801b564:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b568:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b56c:	4259      	negs	r1, r3
 801b56e:	4159      	adcs	r1, r3
 801b570:	e7eb      	b.n	801b54a <__swhatbuf_r+0x1a>
 801b572:	2100      	movs	r1, #0
 801b574:	2240      	movs	r2, #64	@ 0x40
 801b576:	e7ea      	b.n	801b54e <__swhatbuf_r+0x1e>

0801b578 <__smakebuf_r>:
 801b578:	898b      	ldrh	r3, [r1, #12]
 801b57a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b57c:	079e      	lsls	r6, r3, #30
 801b57e:	4605      	mov	r5, r0
 801b580:	460c      	mov	r4, r1
 801b582:	d507      	bpl.n	801b594 <__smakebuf_r+0x1c>
 801b584:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b588:	6023      	str	r3, [r4, #0]
 801b58a:	6123      	str	r3, [r4, #16]
 801b58c:	2301      	movs	r3, #1
 801b58e:	6163      	str	r3, [r4, #20]
 801b590:	b002      	add	sp, #8
 801b592:	bd70      	pop	{r4, r5, r6, pc}
 801b594:	ab01      	add	r3, sp, #4
 801b596:	466a      	mov	r2, sp
 801b598:	f7ff ffca 	bl	801b530 <__swhatbuf_r>
 801b59c:	9e00      	ldr	r6, [sp, #0]
 801b59e:	4628      	mov	r0, r5
 801b5a0:	4631      	mov	r1, r6
 801b5a2:	f7ff fa63 	bl	801aa6c <_malloc_r>
 801b5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b5aa:	b938      	cbnz	r0, 801b5bc <__smakebuf_r+0x44>
 801b5ac:	059a      	lsls	r2, r3, #22
 801b5ae:	d4ef      	bmi.n	801b590 <__smakebuf_r+0x18>
 801b5b0:	f023 0303 	bic.w	r3, r3, #3
 801b5b4:	f043 0302 	orr.w	r3, r3, #2
 801b5b8:	81a3      	strh	r3, [r4, #12]
 801b5ba:	e7e3      	b.n	801b584 <__smakebuf_r+0xc>
 801b5bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b5c0:	81a3      	strh	r3, [r4, #12]
 801b5c2:	9b01      	ldr	r3, [sp, #4]
 801b5c4:	6020      	str	r0, [r4, #0]
 801b5c6:	e9c4 0604 	strd	r0, r6, [r4, #16]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d0e0      	beq.n	801b590 <__smakebuf_r+0x18>
 801b5ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b5d2:	4628      	mov	r0, r5
 801b5d4:	f000 f834 	bl	801b640 <_isatty_r>
 801b5d8:	2800      	cmp	r0, #0
 801b5da:	d0d9      	beq.n	801b590 <__smakebuf_r+0x18>
 801b5dc:	89a3      	ldrh	r3, [r4, #12]
 801b5de:	f023 0303 	bic.w	r3, r3, #3
 801b5e2:	f043 0301 	orr.w	r3, r3, #1
 801b5e6:	81a3      	strh	r3, [r4, #12]
 801b5e8:	e7d2      	b.n	801b590 <__smakebuf_r+0x18>

0801b5ea <memmove>:
 801b5ea:	4288      	cmp	r0, r1
 801b5ec:	b510      	push	{r4, lr}
 801b5ee:	eb01 0402 	add.w	r4, r1, r2
 801b5f2:	d902      	bls.n	801b5fa <memmove+0x10>
 801b5f4:	4284      	cmp	r4, r0
 801b5f6:	4623      	mov	r3, r4
 801b5f8:	d807      	bhi.n	801b60a <memmove+0x20>
 801b5fa:	1e43      	subs	r3, r0, #1
 801b5fc:	42a1      	cmp	r1, r4
 801b5fe:	d007      	beq.n	801b610 <memmove+0x26>
 801b600:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b604:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b608:	e7f8      	b.n	801b5fc <memmove+0x12>
 801b60a:	4402      	add	r2, r0
 801b60c:	4282      	cmp	r2, r0
 801b60e:	d100      	bne.n	801b612 <memmove+0x28>
 801b610:	bd10      	pop	{r4, pc}
 801b612:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801b616:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801b61a:	e7f7      	b.n	801b60c <memmove+0x22>

0801b61c <_fstat_r>:
 801b61c:	b538      	push	{r3, r4, r5, lr}
 801b61e:	4d07      	ldr	r5, [pc, #28]	@ (801b63c <_fstat_r+0x20>)
 801b620:	2300      	movs	r3, #0
 801b622:	4604      	mov	r4, r0
 801b624:	4608      	mov	r0, r1
 801b626:	4611      	mov	r1, r2
 801b628:	602b      	str	r3, [r5, #0]
 801b62a:	f7e8 fa07 	bl	8003a3c <_fstat>
 801b62e:	1c43      	adds	r3, r0, #1
 801b630:	d102      	bne.n	801b638 <_fstat_r+0x1c>
 801b632:	682b      	ldr	r3, [r5, #0]
 801b634:	b103      	cbz	r3, 801b638 <_fstat_r+0x1c>
 801b636:	6023      	str	r3, [r4, #0]
 801b638:	bd38      	pop	{r3, r4, r5, pc}
 801b63a:	bf00      	nop
 801b63c:	2401c504 	.word	0x2401c504

0801b640 <_isatty_r>:
 801b640:	b538      	push	{r3, r4, r5, lr}
 801b642:	4d06      	ldr	r5, [pc, #24]	@ (801b65c <_isatty_r+0x1c>)
 801b644:	2300      	movs	r3, #0
 801b646:	4604      	mov	r4, r0
 801b648:	4608      	mov	r0, r1
 801b64a:	602b      	str	r3, [r5, #0]
 801b64c:	f7e8 fa06 	bl	8003a5c <_isatty>
 801b650:	1c43      	adds	r3, r0, #1
 801b652:	d102      	bne.n	801b65a <_isatty_r+0x1a>
 801b654:	682b      	ldr	r3, [r5, #0]
 801b656:	b103      	cbz	r3, 801b65a <_isatty_r+0x1a>
 801b658:	6023      	str	r3, [r4, #0]
 801b65a:	bd38      	pop	{r3, r4, r5, pc}
 801b65c:	2401c504 	.word	0x2401c504

0801b660 <_sbrk_r>:
 801b660:	b538      	push	{r3, r4, r5, lr}
 801b662:	4d06      	ldr	r5, [pc, #24]	@ (801b67c <_sbrk_r+0x1c>)
 801b664:	2300      	movs	r3, #0
 801b666:	4604      	mov	r4, r0
 801b668:	4608      	mov	r0, r1
 801b66a:	602b      	str	r3, [r5, #0]
 801b66c:	f7e8 fa0e 	bl	8003a8c <_sbrk>
 801b670:	1c43      	adds	r3, r0, #1
 801b672:	d102      	bne.n	801b67a <_sbrk_r+0x1a>
 801b674:	682b      	ldr	r3, [r5, #0]
 801b676:	b103      	cbz	r3, 801b67a <_sbrk_r+0x1a>
 801b678:	6023      	str	r3, [r4, #0]
 801b67a:	bd38      	pop	{r3, r4, r5, pc}
 801b67c:	2401c504 	.word	0x2401c504

0801b680 <_realloc_r>:
 801b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b684:	4607      	mov	r7, r0
 801b686:	4614      	mov	r4, r2
 801b688:	460d      	mov	r5, r1
 801b68a:	b921      	cbnz	r1, 801b696 <_realloc_r+0x16>
 801b68c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b690:	4611      	mov	r1, r2
 801b692:	f7ff b9eb 	b.w	801aa6c <_malloc_r>
 801b696:	b92a      	cbnz	r2, 801b6a4 <_realloc_r+0x24>
 801b698:	f7ff f974 	bl	801a984 <_free_r>
 801b69c:	4625      	mov	r5, r4
 801b69e:	4628      	mov	r0, r5
 801b6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6a4:	f000 f81a 	bl	801b6dc <_malloc_usable_size_r>
 801b6a8:	4284      	cmp	r4, r0
 801b6aa:	4606      	mov	r6, r0
 801b6ac:	d802      	bhi.n	801b6b4 <_realloc_r+0x34>
 801b6ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b6b2:	d8f4      	bhi.n	801b69e <_realloc_r+0x1e>
 801b6b4:	4621      	mov	r1, r4
 801b6b6:	4638      	mov	r0, r7
 801b6b8:	f7ff f9d8 	bl	801aa6c <_malloc_r>
 801b6bc:	4680      	mov	r8, r0
 801b6be:	b908      	cbnz	r0, 801b6c4 <_realloc_r+0x44>
 801b6c0:	4645      	mov	r5, r8
 801b6c2:	e7ec      	b.n	801b69e <_realloc_r+0x1e>
 801b6c4:	42b4      	cmp	r4, r6
 801b6c6:	4622      	mov	r2, r4
 801b6c8:	4629      	mov	r1, r5
 801b6ca:	bf28      	it	cs
 801b6cc:	4632      	movcs	r2, r6
 801b6ce:	f7ff f94a 	bl	801a966 <memcpy>
 801b6d2:	4629      	mov	r1, r5
 801b6d4:	4638      	mov	r0, r7
 801b6d6:	f7ff f955 	bl	801a984 <_free_r>
 801b6da:	e7f1      	b.n	801b6c0 <_realloc_r+0x40>

0801b6dc <_malloc_usable_size_r>:
 801b6dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b6e0:	1f18      	subs	r0, r3, #4
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	bfbc      	itt	lt
 801b6e6:	580b      	ldrlt	r3, [r1, r0]
 801b6e8:	18c0      	addlt	r0, r0, r3
 801b6ea:	4770      	bx	lr

0801b6ec <__udivmoddi4>:
 801b6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6f0:	9d08      	ldr	r5, [sp, #32]
 801b6f2:	460f      	mov	r7, r1
 801b6f4:	4604      	mov	r4, r0
 801b6f6:	468c      	mov	ip, r1
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d148      	bne.n	801b78e <__udivmoddi4+0xa2>
 801b6fc:	428a      	cmp	r2, r1
 801b6fe:	4616      	mov	r6, r2
 801b700:	d961      	bls.n	801b7c6 <__udivmoddi4+0xda>
 801b702:	fab2 f382 	clz	r3, r2
 801b706:	b14b      	cbz	r3, 801b71c <__udivmoddi4+0x30>
 801b708:	f1c3 0220 	rsb	r2, r3, #32
 801b70c:	fa01 fc03 	lsl.w	ip, r1, r3
 801b710:	fa20 f202 	lsr.w	r2, r0, r2
 801b714:	409e      	lsls	r6, r3
 801b716:	ea42 0c0c 	orr.w	ip, r2, ip
 801b71a:	409c      	lsls	r4, r3
 801b71c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801b720:	b2b7      	uxth	r7, r6
 801b722:	fbbc f1fe 	udiv	r1, ip, lr
 801b726:	0c22      	lsrs	r2, r4, #16
 801b728:	fb0e cc11 	mls	ip, lr, r1, ip
 801b72c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 801b730:	fb01 f007 	mul.w	r0, r1, r7
 801b734:	4290      	cmp	r0, r2
 801b736:	d909      	bls.n	801b74c <__udivmoddi4+0x60>
 801b738:	18b2      	adds	r2, r6, r2
 801b73a:	f101 3cff 	add.w	ip, r1, #4294967295
 801b73e:	f080 80ee 	bcs.w	801b91e <__udivmoddi4+0x232>
 801b742:	4290      	cmp	r0, r2
 801b744:	f240 80eb 	bls.w	801b91e <__udivmoddi4+0x232>
 801b748:	3902      	subs	r1, #2
 801b74a:	4432      	add	r2, r6
 801b74c:	1a12      	subs	r2, r2, r0
 801b74e:	b2a4      	uxth	r4, r4
 801b750:	fbb2 f0fe 	udiv	r0, r2, lr
 801b754:	fb0e 2210 	mls	r2, lr, r0, r2
 801b758:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801b75c:	fb00 f707 	mul.w	r7, r0, r7
 801b760:	42a7      	cmp	r7, r4
 801b762:	d909      	bls.n	801b778 <__udivmoddi4+0x8c>
 801b764:	1934      	adds	r4, r6, r4
 801b766:	f100 32ff 	add.w	r2, r0, #4294967295
 801b76a:	f080 80da 	bcs.w	801b922 <__udivmoddi4+0x236>
 801b76e:	42a7      	cmp	r7, r4
 801b770:	f240 80d7 	bls.w	801b922 <__udivmoddi4+0x236>
 801b774:	4434      	add	r4, r6
 801b776:	3802      	subs	r0, #2
 801b778:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801b77c:	1be4      	subs	r4, r4, r7
 801b77e:	2100      	movs	r1, #0
 801b780:	b11d      	cbz	r5, 801b78a <__udivmoddi4+0x9e>
 801b782:	40dc      	lsrs	r4, r3
 801b784:	2300      	movs	r3, #0
 801b786:	e9c5 4300 	strd	r4, r3, [r5]
 801b78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b78e:	428b      	cmp	r3, r1
 801b790:	d906      	bls.n	801b7a0 <__udivmoddi4+0xb4>
 801b792:	b10d      	cbz	r5, 801b798 <__udivmoddi4+0xac>
 801b794:	e9c5 0100 	strd	r0, r1, [r5]
 801b798:	2100      	movs	r1, #0
 801b79a:	4608      	mov	r0, r1
 801b79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7a0:	fab3 f183 	clz	r1, r3
 801b7a4:	2900      	cmp	r1, #0
 801b7a6:	d148      	bne.n	801b83a <__udivmoddi4+0x14e>
 801b7a8:	42bb      	cmp	r3, r7
 801b7aa:	d302      	bcc.n	801b7b2 <__udivmoddi4+0xc6>
 801b7ac:	4282      	cmp	r2, r0
 801b7ae:	f200 8107 	bhi.w	801b9c0 <__udivmoddi4+0x2d4>
 801b7b2:	1a84      	subs	r4, r0, r2
 801b7b4:	eb67 0203 	sbc.w	r2, r7, r3
 801b7b8:	2001      	movs	r0, #1
 801b7ba:	4694      	mov	ip, r2
 801b7bc:	2d00      	cmp	r5, #0
 801b7be:	d0e4      	beq.n	801b78a <__udivmoddi4+0x9e>
 801b7c0:	e9c5 4c00 	strd	r4, ip, [r5]
 801b7c4:	e7e1      	b.n	801b78a <__udivmoddi4+0x9e>
 801b7c6:	2a00      	cmp	r2, #0
 801b7c8:	f000 8092 	beq.w	801b8f0 <__udivmoddi4+0x204>
 801b7cc:	fab2 f382 	clz	r3, r2
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	f040 80a8 	bne.w	801b926 <__udivmoddi4+0x23a>
 801b7d6:	1a8a      	subs	r2, r1, r2
 801b7d8:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801b7dc:	fa1f fc86 	uxth.w	ip, r6
 801b7e0:	2101      	movs	r1, #1
 801b7e2:	0c20      	lsrs	r0, r4, #16
 801b7e4:	fbb2 f7fe 	udiv	r7, r2, lr
 801b7e8:	fb0e 2217 	mls	r2, lr, r7, r2
 801b7ec:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 801b7f0:	fb0c f007 	mul.w	r0, ip, r7
 801b7f4:	4290      	cmp	r0, r2
 801b7f6:	d907      	bls.n	801b808 <__udivmoddi4+0x11c>
 801b7f8:	18b2      	adds	r2, r6, r2
 801b7fa:	f107 38ff 	add.w	r8, r7, #4294967295
 801b7fe:	d202      	bcs.n	801b806 <__udivmoddi4+0x11a>
 801b800:	4290      	cmp	r0, r2
 801b802:	f200 80e2 	bhi.w	801b9ca <__udivmoddi4+0x2de>
 801b806:	4647      	mov	r7, r8
 801b808:	1a12      	subs	r2, r2, r0
 801b80a:	b2a4      	uxth	r4, r4
 801b80c:	fbb2 f0fe 	udiv	r0, r2, lr
 801b810:	fb0e 2210 	mls	r2, lr, r0, r2
 801b814:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801b818:	fb0c fc00 	mul.w	ip, ip, r0
 801b81c:	45a4      	cmp	ip, r4
 801b81e:	d907      	bls.n	801b830 <__udivmoddi4+0x144>
 801b820:	1934      	adds	r4, r6, r4
 801b822:	f100 32ff 	add.w	r2, r0, #4294967295
 801b826:	d202      	bcs.n	801b82e <__udivmoddi4+0x142>
 801b828:	45a4      	cmp	ip, r4
 801b82a:	f200 80cb 	bhi.w	801b9c4 <__udivmoddi4+0x2d8>
 801b82e:	4610      	mov	r0, r2
 801b830:	eba4 040c 	sub.w	r4, r4, ip
 801b834:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 801b838:	e7a2      	b.n	801b780 <__udivmoddi4+0x94>
 801b83a:	f1c1 0620 	rsb	r6, r1, #32
 801b83e:	408b      	lsls	r3, r1
 801b840:	fa22 fc06 	lsr.w	ip, r2, r6
 801b844:	ea4c 0c03 	orr.w	ip, ip, r3
 801b848:	fa07 f401 	lsl.w	r4, r7, r1
 801b84c:	fa20 f306 	lsr.w	r3, r0, r6
 801b850:	40f7      	lsrs	r7, r6
 801b852:	ea4f 491c 	mov.w	r9, ip, lsr #16
 801b856:	4323      	orrs	r3, r4
 801b858:	fa00 f801 	lsl.w	r8, r0, r1
 801b85c:	fa1f fe8c 	uxth.w	lr, ip
 801b860:	fbb7 f0f9 	udiv	r0, r7, r9
 801b864:	0c1c      	lsrs	r4, r3, #16
 801b866:	fb09 7710 	mls	r7, r9, r0, r7
 801b86a:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 801b86e:	fb00 f70e 	mul.w	r7, r0, lr
 801b872:	42a7      	cmp	r7, r4
 801b874:	fa02 f201 	lsl.w	r2, r2, r1
 801b878:	d90a      	bls.n	801b890 <__udivmoddi4+0x1a4>
 801b87a:	eb1c 0404 	adds.w	r4, ip, r4
 801b87e:	f100 3aff 	add.w	sl, r0, #4294967295
 801b882:	f080 809b 	bcs.w	801b9bc <__udivmoddi4+0x2d0>
 801b886:	42a7      	cmp	r7, r4
 801b888:	f240 8098 	bls.w	801b9bc <__udivmoddi4+0x2d0>
 801b88c:	3802      	subs	r0, #2
 801b88e:	4464      	add	r4, ip
 801b890:	1be4      	subs	r4, r4, r7
 801b892:	b29f      	uxth	r7, r3
 801b894:	fbb4 f3f9 	udiv	r3, r4, r9
 801b898:	fb09 4413 	mls	r4, r9, r3, r4
 801b89c:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 801b8a0:	fb03 fe0e 	mul.w	lr, r3, lr
 801b8a4:	45a6      	cmp	lr, r4
 801b8a6:	d909      	bls.n	801b8bc <__udivmoddi4+0x1d0>
 801b8a8:	eb1c 0404 	adds.w	r4, ip, r4
 801b8ac:	f103 37ff 	add.w	r7, r3, #4294967295
 801b8b0:	f080 8082 	bcs.w	801b9b8 <__udivmoddi4+0x2cc>
 801b8b4:	45a6      	cmp	lr, r4
 801b8b6:	d97f      	bls.n	801b9b8 <__udivmoddi4+0x2cc>
 801b8b8:	3b02      	subs	r3, #2
 801b8ba:	4464      	add	r4, ip
 801b8bc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801b8c0:	eba4 040e 	sub.w	r4, r4, lr
 801b8c4:	fba0 e702 	umull	lr, r7, r0, r2
 801b8c8:	42bc      	cmp	r4, r7
 801b8ca:	4673      	mov	r3, lr
 801b8cc:	46b9      	mov	r9, r7
 801b8ce:	d363      	bcc.n	801b998 <__udivmoddi4+0x2ac>
 801b8d0:	d060      	beq.n	801b994 <__udivmoddi4+0x2a8>
 801b8d2:	b15d      	cbz	r5, 801b8ec <__udivmoddi4+0x200>
 801b8d4:	ebb8 0203 	subs.w	r2, r8, r3
 801b8d8:	eb64 0409 	sbc.w	r4, r4, r9
 801b8dc:	fa04 f606 	lsl.w	r6, r4, r6
 801b8e0:	fa22 f301 	lsr.w	r3, r2, r1
 801b8e4:	431e      	orrs	r6, r3
 801b8e6:	40cc      	lsrs	r4, r1
 801b8e8:	e9c5 6400 	strd	r6, r4, [r5]
 801b8ec:	2100      	movs	r1, #0
 801b8ee:	e74c      	b.n	801b78a <__udivmoddi4+0x9e>
 801b8f0:	0862      	lsrs	r2, r4, #1
 801b8f2:	0848      	lsrs	r0, r1, #1
 801b8f4:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 801b8f8:	0c0b      	lsrs	r3, r1, #16
 801b8fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801b8fe:	b28a      	uxth	r2, r1
 801b900:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b904:	fbb3 f1f6 	udiv	r1, r3, r6
 801b908:	07e4      	lsls	r4, r4, #31
 801b90a:	46b4      	mov	ip, r6
 801b90c:	4637      	mov	r7, r6
 801b90e:	46b6      	mov	lr, r6
 801b910:	231f      	movs	r3, #31
 801b912:	fbb0 f0f6 	udiv	r0, r0, r6
 801b916:	1bd2      	subs	r2, r2, r7
 801b918:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b91c:	e761      	b.n	801b7e2 <__udivmoddi4+0xf6>
 801b91e:	4661      	mov	r1, ip
 801b920:	e714      	b.n	801b74c <__udivmoddi4+0x60>
 801b922:	4610      	mov	r0, r2
 801b924:	e728      	b.n	801b778 <__udivmoddi4+0x8c>
 801b926:	f1c3 0120 	rsb	r1, r3, #32
 801b92a:	fa20 f201 	lsr.w	r2, r0, r1
 801b92e:	409e      	lsls	r6, r3
 801b930:	fa27 f101 	lsr.w	r1, r7, r1
 801b934:	409f      	lsls	r7, r3
 801b936:	433a      	orrs	r2, r7
 801b938:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801b93c:	fa1f fc86 	uxth.w	ip, r6
 801b940:	fbb1 f7fe 	udiv	r7, r1, lr
 801b944:	fb0e 1017 	mls	r0, lr, r7, r1
 801b948:	0c11      	lsrs	r1, r2, #16
 801b94a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b94e:	fb07 f80c 	mul.w	r8, r7, ip
 801b952:	4588      	cmp	r8, r1
 801b954:	fa04 f403 	lsl.w	r4, r4, r3
 801b958:	d93a      	bls.n	801b9d0 <__udivmoddi4+0x2e4>
 801b95a:	1871      	adds	r1, r6, r1
 801b95c:	f107 30ff 	add.w	r0, r7, #4294967295
 801b960:	d201      	bcs.n	801b966 <__udivmoddi4+0x27a>
 801b962:	4588      	cmp	r8, r1
 801b964:	d81f      	bhi.n	801b9a6 <__udivmoddi4+0x2ba>
 801b966:	eba1 0108 	sub.w	r1, r1, r8
 801b96a:	fbb1 f8fe 	udiv	r8, r1, lr
 801b96e:	fb08 f70c 	mul.w	r7, r8, ip
 801b972:	fb0e 1118 	mls	r1, lr, r8, r1
 801b976:	b292      	uxth	r2, r2
 801b978:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801b97c:	42ba      	cmp	r2, r7
 801b97e:	d22f      	bcs.n	801b9e0 <__udivmoddi4+0x2f4>
 801b980:	18b2      	adds	r2, r6, r2
 801b982:	f108 31ff 	add.w	r1, r8, #4294967295
 801b986:	d2c6      	bcs.n	801b916 <__udivmoddi4+0x22a>
 801b988:	42ba      	cmp	r2, r7
 801b98a:	d2c4      	bcs.n	801b916 <__udivmoddi4+0x22a>
 801b98c:	f1a8 0102 	sub.w	r1, r8, #2
 801b990:	4432      	add	r2, r6
 801b992:	e7c0      	b.n	801b916 <__udivmoddi4+0x22a>
 801b994:	45f0      	cmp	r8, lr
 801b996:	d29c      	bcs.n	801b8d2 <__udivmoddi4+0x1e6>
 801b998:	ebbe 0302 	subs.w	r3, lr, r2
 801b99c:	eb67 070c 	sbc.w	r7, r7, ip
 801b9a0:	3801      	subs	r0, #1
 801b9a2:	46b9      	mov	r9, r7
 801b9a4:	e795      	b.n	801b8d2 <__udivmoddi4+0x1e6>
 801b9a6:	eba6 0808 	sub.w	r8, r6, r8
 801b9aa:	4441      	add	r1, r8
 801b9ac:	1eb8      	subs	r0, r7, #2
 801b9ae:	fbb1 f8fe 	udiv	r8, r1, lr
 801b9b2:	fb08 f70c 	mul.w	r7, r8, ip
 801b9b6:	e7dc      	b.n	801b972 <__udivmoddi4+0x286>
 801b9b8:	463b      	mov	r3, r7
 801b9ba:	e77f      	b.n	801b8bc <__udivmoddi4+0x1d0>
 801b9bc:	4650      	mov	r0, sl
 801b9be:	e767      	b.n	801b890 <__udivmoddi4+0x1a4>
 801b9c0:	4608      	mov	r0, r1
 801b9c2:	e6fb      	b.n	801b7bc <__udivmoddi4+0xd0>
 801b9c4:	4434      	add	r4, r6
 801b9c6:	3802      	subs	r0, #2
 801b9c8:	e732      	b.n	801b830 <__udivmoddi4+0x144>
 801b9ca:	3f02      	subs	r7, #2
 801b9cc:	4432      	add	r2, r6
 801b9ce:	e71b      	b.n	801b808 <__udivmoddi4+0x11c>
 801b9d0:	eba1 0108 	sub.w	r1, r1, r8
 801b9d4:	4638      	mov	r0, r7
 801b9d6:	fbb1 f8fe 	udiv	r8, r1, lr
 801b9da:	fb08 f70c 	mul.w	r7, r8, ip
 801b9de:	e7c8      	b.n	801b972 <__udivmoddi4+0x286>
 801b9e0:	4641      	mov	r1, r8
 801b9e2:	e798      	b.n	801b916 <__udivmoddi4+0x22a>

0801b9e4 <_init>:
 801b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9e6:	bf00      	nop
 801b9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9ea:	bc08      	pop	{r3}
 801b9ec:	469e      	mov	lr, r3
 801b9ee:	4770      	bx	lr

0801b9f0 <_fini>:
 801b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9f2:	bf00      	nop
 801b9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9f6:	bc08      	pop	{r3}
 801b9f8:	469e      	mov	lr, r3
 801b9fa:	4770      	bx	lr
